uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = (37 * a3) & (a2 - 1);
    v5 = (_DWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -1)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -2;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_DWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

unint64_t *std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__swap_out_circular_buffer(unint64_t **a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *result;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = (unint64_t *)a2[1];
  if (v5 == *a1)
  {
    result = (unint64_t *)a2[1];
  }
  else
  {
    do
    {
      result = llvm::ValueHandleBase::ValueHandleBase(v6 - 4, 3u, (uint64_t *)v5 - 4);
      *((_DWORD *)v6 - 2) = *((_DWORD *)v5 - 2);
      v5 -= 4;
      v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = (unint64_t *)a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = (unint64_t *)a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::__destruct_at_end[abi:nn180100](a1, *(llvm::ValueHandleBase **)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

llvm::ValueHandleBase *std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::__destruct_at_end[abi:nn180100](uint64_t a1, llvm::ValueHandleBase *a2)
{
  llvm::ValueHandleBase *result;
  uint64_t v5;

  result = *(llvm::ValueHandleBase **)(a1 + 16);
  while (result != a2)
  {
    v5 = *((_QWORD *)result - 2);
    result = (llvm::ValueHandleBase *)((char *)result - 32);
    *(_QWORD *)(a1 + 16) = result;
    if (v5 != -8192 && v5 != -4096 && v5 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(result);
      result = *(llvm::ValueHandleBase **)(a1 + 16);
    }
  }
  return result;
}

void llvm::BitstreamCursor::advanceSkippingSubblocks(llvm::BitstreamCursor *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a3 + 8);
  while (1)
  {
    llvm::BitstreamCursor::advance(this, a2, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) = v6 | 1;
      v7 = v11;
      goto LABEL_13;
    }
    v7 = v11;
    if ((_DWORD)v11 != 2)
      break;
    llvm::BitstreamCursor::SkipBlock(this, &v10);
    v8 = v10;
    if (v10)
    {
      v6 |= 1u;
      *(_BYTE *)(a3 + 8) = v6;
      *(_QWORD *)a3 = v8;
    }
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      v11 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    if (v8)
      return;
  }
  *(_BYTE *)(a3 + 8) = v6 & 0xFE;
LABEL_13:
  *(_QWORD *)a3 = v7;
}

unint64_t `anonymous namespace'::BitcodeReader::getPtrElementTypeByID(_anonymous_namespace_::BitcodeReader *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int ContainedTypeID;

  v2 = *((_QWORD *)this + 65);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 66) - v2) >> 3)
    || *(_BYTE *)(*(_QWORD *)(v2 + 8 * a2) + 8) != 15)
  {
    return 0;
  }
}

unint64_t `anonymous namespace'::BitcodeConstant::create(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t result;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;

  v9 = 4 * a5;
  result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 4 * a5 + 48, 3);
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  v11 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 255;
  *(_DWORD *)(result + 20) = v11;
  *(_WORD *)(result + 24) = *(_WORD *)a3;
  v12 = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(result + 28) = a5;
  *(_DWORD *)(result + 32) = v12;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a3 + 8);
  if (a5)
  {
    v13 = (_DWORD *)(result + 48);
    do
    {
      v14 = *a4++;
      *v13++ = v14;
      v9 -= 4;
    }
    while (v9);
  }
  return result;
}

_QWORD *llvm::SmallVectorImpl<unsigned short>::append<unsigned long long *,void>(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[1];
  v8 = v7 + ((a3 - a2) >> 3);
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 2);
    v7 = v5[1];
  }
  if (v4 != a3)
  {
    v9 = (_WORD *)(*v5 + 2 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[1] = v7 + (v6 >> 3);
  return result;
}

uint64_t llvm::ConstantDataArray::get<unsigned short>(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::Type *v4;
  llvm::ConstantAggregateZero *v5;

  v4 = (llvm::Type *)(2 * (_QWORD)a3);
  llvm::ArrayType::get((uint64_t **)(*(_QWORD *)a1 + 1968), a3);
  return llvm::ConstantDataSequential::getImpl(a2, v4, v5);
}

uint64_t llvm::ConstantDataArray::get<unsigned int>(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::Type *v4;
  llvm::ConstantAggregateZero *v5;

  v4 = (llvm::Type *)(4 * (_QWORD)a3);
  llvm::ArrayType::get((uint64_t **)(*(_QWORD *)a1 + 1992), a3);
  return llvm::ConstantDataSequential::getImpl(a2, v4, v5);
}

uint64_t llvm::ConstantDataArray::get<unsigned long long>(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::Type *v4;
  llvm::ConstantAggregateZero *v5;

  v4 = (llvm::Type *)(8 * (_QWORD)a3);
  llvm::ArrayType::get((uint64_t **)(*(_QWORD *)a1 + 2016), a3);
  return llvm::ConstantDataSequential::getImpl(a2, v4, v5);
}

void `anonymous namespace'::BitcodeReader::recordValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  llvm::formatv_object_base *v13;
  llvm::formatv_object_base *v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t *ValueName;
  char *inserted;
  uint64_t v34;
  uint64_t v35;
  llvm::formatv_object_base *v36[4];
  __int16 v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  _QWORD v41[17];

  v41[16] = *MEMORY[0x24BDAC8D0];
  v39 = v41;
  v40 = xmmword_24AA2AC90;
  v7 = *(unsigned int *)(a3 + 8);
  if (v7 < a4)
  {
    v36[0] = (llvm::formatv_object_base *)"Invalid record";
    v37 = 259;
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = v38;
LABEL_10:
    *(_QWORD *)a1 = v8;
    goto LABEL_11;
  }
  llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v39, (char *)(*(_QWORD *)a3 + 8 * a4), (char *)(*(_QWORD *)a3 + 8 * v7));
  v11 = *(_QWORD *)(a2 + 712);
  if (((unint64_t)(*(_QWORD *)(a2 + 720) - v11) >> 5) <= **(_QWORD **)a3
    || (v12 = *(unsigned __int8 **)(v11 + 32 * **(_QWORD **)a3 + 16)) == 0)
  {
    v36[0] = (llvm::formatv_object_base *)"Invalid record";
    v37 = 259;
    *(_BYTE *)(a1 + 8) |= 1u;
    v8 = v35;
    goto LABEL_10;
  }
  v13 = (llvm::formatv_object_base *)v39;
  v14 = (llvm::formatv_object_base *)v40;
  if ((_QWORD)v40)
  {
    v15 = memchr(v39, 0, v40);
    if (v15)
    {
      if (v15 - (_BYTE *)v13 != -1)
      {
        v36[0] = (llvm::formatv_object_base *)"Invalid value name";
        v37 = 259;
        *(_BYTE *)(a1 + 8) |= 1u;
        v8 = v34;
        goto LABEL_10;
      }
    }
  }
  v37 = 261;
  v36[0] = v13;
  v36[1] = v14;
  llvm::Value::setName((llvm::Value *)v12, (const llvm::Twine *)v36);
  v16 = v12[16];
  if (v16 <= 3 && v16 != 1)
  {
    v18 = *(_QWORD *)(a2 + 816);
    v19 = *(unsigned int *)(a2 + 832);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v21 = (unsigned __int8 **)(v18 + 8 * v20);
      v22 = *v21;
      if (*v21 == v12)
      {
LABEL_25:
        if ((unsigned __int8 **)(v18 + 8 * v19) != v21)
        {
          v25 = *(_DWORD *)(a5 + 44);
          v26 = v25 > 8;
          v27 = (1 << v25) & 0x124;
          if (v26 || v27 == 0)
          {
            v29 = *(_QWORD *)(a2 + 432);
            if ((v12[23] & 0x10) != 0)
            {
              ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v12);
              v31 = (uint64_t *)(ValueName + 2);
              v30 = *ValueName;
            }
            else
            {
              v30 = 0;
              v31 = (uint64_t *)&str_3_26;
            }
            inserted = llvm::Module::getOrInsertComdat(v29, v31, v30);
            llvm::GlobalObject::setComdat((const void **)v12, (uint64_t)inserted);
          }
        }
        goto LABEL_35;
      }
      v23 = 1;
      while (v22 != (unsigned __int8 *)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(unsigned __int8 **)(v18 + 8 * v20);
        if (v22 == v12)
        {
          v21 = (unsigned __int8 **)(v18 + 8 * v20);
          goto LABEL_25;
        }
      }
    }
    v21 = (unsigned __int8 **)(v18 + 8 * v19);
    goto LABEL_25;
  }
LABEL_35:
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = v12;
LABEL_11:
  if (v39 != v41)
    free(v39);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x24BD1B398);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::Value::mergeUseLists<`anonymous namespace'::BitcodeReader::parseUseLists(void)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v6 = &v10;
  while (a2)
  {
    v11 = 0;
    if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>(a3, a2, &v11))v7 = *(_DWORD *)(v11 + 8);
    else
      v7 = 0;
    v11 = 0;
    if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>(a3, a1, &v11))v8 = *(_DWORD *)(v11 + 8);
    else
      v8 = 0;
    if (v7 >= v8)
    {
      *v6 = a1;
      v6 = (uint64_t *)(a1 + 8);
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        goto LABEL_15;
    }
    else
    {
      *v6 = a2;
      v6 = (uint64_t *)(a2 + 8);
      a2 = *(_QWORD *)(a2 + 8);
      if (!a1)
        goto LABEL_15;
    }
  }
  a2 = a1;
LABEL_15:
  *v6 = a2;
  return v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(uint64_t a1, int a2, _DWORD *a3, _QWORD *a4)
{
  int HashValue;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  if (a2)
  {
    HashValue = llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>::getHashValue(a3);
    v9 = a2 - 1;
    v10 = a3[2];
    v11 = HashValue & (a2 - 1);
    v12 = (uint64_t *)(a1 + 24 * v11);
    v13 = *v12;
    v14 = *((_DWORD *)v12 + 2);
    if (*(_QWORD *)a3 == *v12 && v10 == v14)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -2;
        if (v19 && v13 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v9;
        v12 = (uint64_t *)(a1 + 24 * (v21 & v9));
        v13 = *v12;
        v14 = *((_DWORD *)v12 + 2);
        if (*(_QWORD *)a3 == *v12 && v10 == v14)
          goto LABEL_9;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_9:
  *a4 = v12;
  return result;
}

uint64_t llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>::getHashValue(_DWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = ~((unint64_t)(37 * a1[2]) << 32)
     + (37 * a1[2])
     + ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32);
  v2 = (v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13);
  v3 = (9 * (v2 ^ (v2 >> 8))) ^ ((9 * (v2 ^ (v2 >> 8))) >> 15);
  return ((v3 + ~(v3 << 27)) >> 31) ^ ((_DWORD)v3 + ~((_DWORD)v3 << 27));
}

double llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::FindAndConstruct(uint64_t a1, int *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::grow(a1, v8);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v6 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v6 + 16) = 0x100000000;
  return result;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = (_DWORD *)(v4 + 24);
      do
      {
        v14 = *(v13 - 6);
        if (v14 <= 0xFFFFFFFD)
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          *v20 = *(v13 - 6);
          *((_QWORD *)v15 + 2) = 0x100000000;
          *((_QWORD *)v15 + 1) = v15 + 6;
          v16 = (uint64_t)(v15 + 2);
          if (*(v13 - 2))
            llvm::SmallVectorImpl<unsigned int>::operator=(v16, (uint64_t)(v13 - 4));
          ++*(_DWORD *)(a1 + 8);
          v17 = (_DWORD *)*((_QWORD *)v13 - 2);
          if (v13 != v17)
            free(v17);
        }
        v13 += 8;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 32 * v18;
    do
    {
      *result = -1;
      result += 8;
      v19 -= 32;
    }
    while (v19);
  }
  return result;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_24AA2E1D0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (_DWORD *)v4;
      do
      {
        v14 = v13[2];
        if ((*(_QWORD *)v13 != -4096 || v14 != -1) && (*(_QWORD *)v13 != -8192 || v14 != -2))
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v20);
          v17 = v20;
          *v20 = *(_QWORD *)v13;
          *((_DWORD *)v17 + 2) = v13[2];
          *((_DWORD *)v17 + 4) = v13[4];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 6;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 24 * v18;
    do
    {
      *result = xmmword_24AA2E1D0;
      result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

void std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::InlineAsm::ConstraintInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<llvm::InlineAsm::ConstraintInfo>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 80)
  {
    v5 = (void **)(i - 32);
    std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
    v5 = (void **)(i - 64);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  int HashValue;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  uint64_t result;
  BOOL v18;
  unsigned int v20;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v11 = 0;
      result = 0;
      goto LABEL_11;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  HashValue = llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>::getHashValue((_DWORD *)a2);
  v8 = v6 - 1;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = HashValue & (v6 - 1);
  v11 = (_QWORD *)(v5 + 24 * v10);
  v12 = *v11;
  v13 = v11[1];
  if (*(_QWORD *)a2 == *v11 && v9 == v13)
  {
    result = 1;
  }
  else
  {
    v15 = 0;
    v16 = 1;
    result = 1;
    while (v12 != -4096 || v13 != -4096)
    {
      if (v15)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18 && v12 == -8192)
        v15 = v11;
      v20 = v10 + v16++;
      v10 = v20 & v8;
      v11 = (_QWORD *)(v5 + 24 * (v20 & v8));
      v12 = *v11;
      v13 = v11[1];
      if (*(_QWORD *)a2 == *v11 && v9 == v13)
        goto LABEL_11;
    }
    result = 0;
    if (v15)
      v11 = v15;
  }
LABEL_11:
  *a3 = v11;
  return result;
}

uint64_t llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[96];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::moveFromOldBuckets(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x24BD1B398);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v15, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t *v9;
  int64x2_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (int64x2_t *)(result + 8);
    v9 = (int64x2_t *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_14;
    v8 = *(int64x2_t **)(result + 8);
    v9 = (int64x2_t *)((char *)v8 + 24 * v7);
  }
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v8 = v10;
    v8 = (int64x2_t *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v11 != -4096) && (*(_QWORD *)a2 != -8192 || v11 != -8192))
    {
      v13 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>((uint64_t)v5, a2, &v13);
      v12 = v13;
      *v13 = *(_QWORD *)a2;
      v12[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::try_emplace<llvm::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v19 = 0;
  result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>(a2, *a3, &v19);
  v9 = v19;
  v10 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v10 & 1) != 0)
    {
      v11 = a2 + 8;
      v12 = 4;
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(unsigned int *)(a2 + 16);
    }
    v15 = 0;
    v16 = v11 + 16 * v12;
    goto LABEL_17;
  }
  v13 = v10 >> 1;
  if ((v10 & 1) != 0)
    v14 = 4;
  else
    v14 = *(_DWORD *)(a2 + 16);
  if (4 * v13 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_19;
  }
  if (v14 + ~v13 - *(_DWORD *)(a2 + 4) <= v14 >> 3)
  {
LABEL_19:
    llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::grow(a2, v14);
    v19 = 0;
    result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>(a2, *a3, &v19);
    v9 = v19;
  }
  *(_DWORD *)a2 += 2;
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 4);
  *v9 = *a3;
  v9[1] = *a4;
  v17 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v18 = 4;
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(unsigned int *)(a2 + 16);
  }
  v16 = v17 + 16 * v18;
  v15 = 1;
LABEL_17:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v15;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::moveFromOldBuckets(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x24BD1B398);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::moveFromOldBuckets(a1, v14, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::LookupBucketFor<llvm::BasicBlock *>((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

__n128 std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::construct[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *>,std::string &,std::vector<llvm::Value *>>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5;
  __n128 result;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  v5 = a3[1].n128_u64[0];
  result = *a3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  *(std::string *)a1 = v7;
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t *std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      v6 = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v6;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::~__split_buffer(void **a1)
{
  std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100](v4, i - 48);
  }
}

void std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, (llvm::ValueHandleBase *)(*a1 + 32 * a2));
  }
  else
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append((uint64_t)a1, a2 - v2);
  }
}

uint64_t std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = *(_QWORD *)(a1 + 16);
  result = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)v7 = 6;
        *(_DWORD *)(v7 + 24) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = v7 - *(_QWORD *)a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      abort();
    v10 = v8 >> 5;
    v11 = v5 - *(_QWORD *)a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *(_QWORD *)v15 = 6;
      *((_DWORD *)v15 + 6) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__swap_out_circular_buffer((unint64_t **)a1, v17);
    return std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<llvm::SmallString<32u>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2)
  {
    std::__tree<llvm::SmallString<32u>>::destroy(a1, *a2);
    std::__tree<llvm::SmallString<32u>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[4];
    if (v4 != a2 + 7)
      free(v4);
    operator delete(a2);
  }
}

void `anonymous namespace'::BitcodeReader::parseModule(uint64_t *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::BitstreamCursor *v18;
  llvm::SimpleBitstreamCursor *v19;
  uint64_t v20;
  void **v21;
  uint64_t **v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__split_buffer<std::string>::pointer end;
  int v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  std::string *v31;
  const char *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *Sorted;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t **v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t **v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  int v91;
  void *v92;
  llvm::formatv_object_base *v93;
  std::string::pointer data;
  unsigned int v95;
  std::__split_buffer<std::string>::pointer v96;
  uint64_t v97;
  unsigned int v98;
  std::string::size_type v99;
  unsigned int v100;
  int v101;
  unint64_t TypeByID;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __int16 v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  void *v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::string::size_type v115;
  unint64_t v116;
  __int16 v117;
  llvm::AttrBuilder *v118;
  uint64_t *v119;
  int v120;
  char *v121;
  llvm::formatv_object_base *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _anonymous_namespace_::BitcodeReader *v134;
  uint64_t **IdentifiedStructType;
  uint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  llvm::Type *v139;
  int v140;
  int v141;
  unint64_t v142;
  uint64_t begin_low;
  std::__split_buffer<std::string>::pointer v144;
  char *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  std::string::pointer v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t **v160;
  unsigned int v161;
  BOOL v162;
  uint64_t v164;
  unint64_t v165;
  uint64_t **v166;
  int v167;
  int v168;
  BOOL v169;
  BOOL v170;
  int v171;
  BOOL v172;
  BOOL v173;
  std::string::size_type v175;
  char v176;
  unint64_t v177;
  llvm::PointerType **v178;
  unsigned int v179;
  BOOL v180;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  int i;
  unint64_t v188;
  int v189;
  char v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _anonymous_namespace_::BitcodeReaderBase *v199;
  uint64_t v200;
  const char *v201;
  int v202;
  uint64_t v203;
  std::string *v204;
  std::__split_buffer<std::string>::pointer first;
  unint64_t v206;
  int v207;
  unint64_t v208;
  llvm::PointerType **v209;
  unint64_t v210;
  llvm::Type *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  std::string *v215;
  void *v216;
  size_t v217;
  unint64_t v218;
  unint64_t v219;
  __int128 v220;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  std::string *v224;
  const char *v225;
  unint64_t v226;
  unint64_t v227;
  __int128 v228;
  _DWORD *v229;
  unint64_t v230;
  int v231;
  unint64_t v232;
  uint64_t *v233;
  _anonymous_namespace_::BitcodeReaderBase *v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  size_t end_high;
  std::__split_buffer<std::string>::pointer v258;
  int v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  _anonymous_namespace_::BitcodeReaderBase *v264;
  unint64_t v265;
  std::string *v266;
  std::string *v267;
  int v268;
  char *inserted;
  char *v270;
  char **v271;
  unint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  unint64_t v277;
  uint64_t v278;
  std::__split_buffer<std::string>::pointer v279;
  void *v280;
  int v281;
  void *v282;
  std::string *v283;
  unint64_t v284;
  std::string *v285;
  void *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  __int128 v297;
  int64x2_t v298;
  std::string *v299;
  void *v300;
  std::string *v301;
  void *v302;
  int v303;
  void *v304;
  uint64_t v305;
  llvm::StringMapImpl *v306;
  uint64_t *v307;
  void *v308;
  void *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  std::string *v316;
  std::string *v317;
  std::string *v318;
  __int128 v319;
  std::string *v320;
  __int128 v321;
  unint64_t v322;
  uint64_t v323;
  std::string *v324;
  __int128 v325;
  int64x2_t v326;
  unint64_t v327;
  uint64_t v328;
  std::string *v329;
  __int128 v330;
  _anonymous_namespace_::BitcodeReader *v331;
  int64x2_t v332;
  char *v333;
  std::string *v334;
  std::string *v335;
  std::string *v336;
  int v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  unsigned int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  unint64_t v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  unint64_t *v358;
  int v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  std::string *v369;
  unint64_t v370;
  uint64_t v371;
  int v372;
  unint64_t v373;
  uint64_t v374;
  std::string *v375;
  void *v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char v381;
  unint64_t v382;
  unint64_t v383;
  char *v384;
  char *v385;
  unint64_t v386;
  char **v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t j;
  std::string *v392;
  unsigned int v393;
  int v394;
  int v395;
  char *v396;
  uint64_t *v397;
  uint64_t v398;
  unint64_t *v399;
  uint64_t v400;
  void *v401;
  int v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  int v406;
  char *v407;
  int v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  _QWORD *words;
  uint64_t v413;
  int v414;
  char v415;
  int VirtualTypeID;
  uint64_t v417;
  unint64_t v418;
  const void **v419;
  const void ***v420;
  unint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  const void ***v429;
  char *v430;
  char *v431;
  const void ***v432;
  _anonymous_namespace_::BitcodeReader *v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t *v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  int v448;
  uint64_t AttributeAtIndex;
  unsigned int ContainedTypeID;
  unint64_t PtrElementTypeByID;
  unint64_t v452;
  uint64_t v453;
  unsigned int v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  char v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  __int128 *v470;
  __int128 v471;
  std::string *v472;
  int v473;
  int v474;
  int v475;
  unsigned int v476;
  int v477;
  int v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  uint64_t *v483;
  int v484;
  unint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  char v493;
  uint64_t *v494;
  unint64_t v495;
  char v496;
  char v497;
  char *v498;
  uint64_t v499;
  char v500;
  unsigned int v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  unsigned int v505;
  uint64_t v506;
  llvm::PointerType **v507;
  uint64_t ***v508;
  uint64_t v509;
  unsigned int v510;
  unsigned int v511[2];
  int v512;
  int DecodedLinkage;
  std::string::size_type size;
  llvm::PointerType **v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  unint64_t v519;
  int v520;
  std::string *v521;
  std::string *v522;
  llvm::GlobalValue *v523;
  const void **v524;
  unsigned int v525;
  int v526;
  uint64_t v527;
  void **v528;
  char **v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  uint64_t v533;
  uint64_t v534;
  __int128 v535;
  int begin;
  int v537;
  char v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  char *v542;
  std::allocator<std::string> *v543;
  _QWORD *v544;
  uint64_t v545;
  llvm::BitcodeReaderValueList *v546;
  std::allocator<std::string> *v547;
  std::allocator<std::string> *v548;
  int64x2_t *v549;
  int v550;
  uint64_t **v551;
  _anonymous_namespace_::BitcodeReader *v552;
  llvm::Twine *v553;
  _QWORD v554[4];
  std::string v555;
  char v556;
  unsigned int v557;
  uint64_t v558;
  char v559;
  void *v560;
  uint64_t v561;
  _BYTE v562[512];
  void *v563;
  __int128 v564;
  _BYTE v565[64];
  void *v566;
  __int128 v567;
  uint64_t v568;
  __int16 v569;
  llvm::formatv_object_base *v570;
  char v571;
  __int16 v572;
  void *v573;
  uint64_t v574;
  _BYTE v575[16];
  __int16 v576;
  uint64_t v577;
  char v578;
  uint64_t v579;
  char v580;
  std::__split_buffer<std::string> v581;
  std::__split_buffer<std::string> v582;
  uint64_t v583;

  v8 = a2;
  v583 = *MEMORY[0x24BDAC8D0];
  v10 = a5 + 40;
  v11 = (_QWORD *)(a2 + 1832);
  if (*(unsigned __int8 *)(a2 + 1864) != *(unsigned __int8 *)(a5 + 72))
  {
    if (!*(_BYTE *)(a2 + 1864))
    {
      v16 = *(_QWORD *)(a5 + 64);
      if (v16)
      {
        if (v16 == v10)
        {
          *(_QWORD *)(a2 + 1856) = v11;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 64) + 24))(*(_QWORD *)(a5 + 64), a2 + 1832);
        }
        else
        {
          *(_QWORD *)(a2 + 1856) = v16;
          *(_QWORD *)(a5 + 64) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 1856) = 0;
      }
      *(_BYTE *)(v8 + 1864) = 1;
      goto LABEL_26;
    }
    v14 = *(_QWORD **)(a2 + 1856);
    if (v14 == v11)
    {
      v15 = 4;
    }
    else
    {
      if (!v14)
      {
LABEL_20:
        *(_BYTE *)(v8 + 1864) = 0;
        goto LABEL_26;
      }
      v15 = 5;
      v11 = *(_QWORD **)(a2 + 1856);
    }
    (*(void (**)(_QWORD *))(*v11 + 8 * v15))(v11);
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a2 + 1864))
    goto LABEL_26;
  v12 = *(_QWORD **)(a2 + 1856);
  *(_QWORD *)(a2 + 1856) = 0;
  if (v12 == v11)
  {
    v13 = 4;
    v12 = (_QWORD *)(a2 + 1832);
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  v17 = *(_QWORD *)(a5 + 64);
  if (v17)
  {
    if (v17 == v10)
    {
      *(_QWORD *)(v8 + 1856) = v11;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a5 + 64) + 24))(*(_QWORD *)(a5 + 64), v11);
    }
    else
    {
      *(_QWORD *)(v8 + 1856) = v17;
      *(_QWORD *)(a5 + 64) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v8 + 1856) = 0;
  }
LABEL_26:
  v18 = (llvm::BitstreamCursor *)(v8 + 32);
  v19 = (llvm::SimpleBitstreamCursor *)(v8 + 32);
  if (a3)
    llvm::SimpleBitstreamCursor::JumpToBit(v19, a3, a1);
  else
    llvm::BitstreamCursor::EnterSubBlock(v19, 0, 8, a1);
  if (*a1)
    return;
  v560 = v562;
  v561 = 0x4000000000;
  v556 = 0;
  v20 = *(_QWORD *)(v8 + 432);
  v550 = a4;
  if (*(char *)(v20 + 495) < 0)
    std::string::__init_copy_ctor_external(&v555, *(const std::string::value_type **)(v20 + 472), *(_QWORD *)(v20 + 480));
  else
    v555 = *(std::string *)(v20 + 472);
  v554[0] = &v556;
  v554[1] = &v555;
  v21 = (void **)(v8 + 8);
  v554[2] = v8;
  v554[3] = a5;
  v543 = (std::allocator<std::string> *)(v8 + 1792);
  v528 = (void **)(v8 + 1512);
  v544 = (_QWORD *)(v8 + 1800);
  v545 = v8 + 1608;
  v532 = (_QWORD *)(v8 + 520);
  v22 = (uint64_t **)(v8 + 1464);
  v533 = v8 + 544;
  v534 = v8 + 1456;
  v546 = (llvm::BitcodeReaderValueList *)(v8 + 712);
  v530 = v8 + 592;
  v531 = v8 + 816;
  v529 = (char **)(v8 + 1416);
  v527 = v8 + 1568;
  v548 = (std::allocator<std::string> *)(v8 + 512);
  v549 = (int64x2_t *)(v8 + 472);
  v547 = (std::allocator<std::string> *)(v8 + 488);
  v552 = (_anonymous_namespace_::BitcodeReader *)v8;
  v553 = (llvm::Twine *)(v8 + 8);
  v551 = (uint64_t **)(v8 + 1464);
  while (2)
  {
    llvm::BitstreamCursor::advance(v18, 0, (uint64_t)&v558);
    if ((v559 & 1) != 0)
    {
      v23 = v558;
      v558 = 0;
      *a1 = v23;
      goto LABEL_40;
    }
    switch((_DWORD)v558)
    {
      case 2:
        switch(HIDWORD(v558))
        {
          case 0:
            llvm::BitstreamCursor::ReadBlockInfoBlock(v18, 0, (uint64_t)&v582);
            if (((uint64_t)v582.__end_cap_.__value_ & 1) != 0)
            {
              first = v582.__first_;
              v582.__first_ = 0;
              *a1 = (uint64_t)first;
            }
            else if (LOBYTE(v582.__end_cap_.__value_))
            {
              end = v582.__end_;
              v535 = *(_OWORD *)&v582.__first_;
              memset(&v582, 0, 24);
              LOBYTE(v581.__end_cap_.__value_) = 1;
              std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__vdeallocate(v21);
              *(_OWORD *)(v8 + 8) = v535;
              *(_QWORD *)(v8 + 24) = end;
              memset(&v581, 0, 24);
              *a1 = 0;
              v566 = &v581;
              std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v566);
            }
            else
            {
              v581.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
              LOWORD(v581.__end_cap_.__value_) = 259;
            }
            llvm::Expected<std::optional<llvm::BitstreamBlockInfo>>::~Expected((uint64_t)&v582);
            goto LABEL_757;
          case 9:
            llvm::BitstreamCursor::EnterSubBlock(v18, 0, 9, a1);
            if (*a1)
              goto LABEL_40;
            if (*(_QWORD *)(v8 + 1440) != *(_QWORD *)(v8 + 1448))
              goto LABEL_561;
            v582.__first_ = (std::__split_buffer<std::string>::pointer)&v582.__end_;
            v582.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
            v566 = (char *)&v567 + 8;
            *(_QWORD *)&v567 = 0x800000000;
            while (1)
            {
              llvm::BitstreamCursor::advanceSkippingSubblocks(v18, 0, (uint64_t)&v563);
              if ((v564 & 1) != 0)
              {
                v34 = v563;
                v563 = 0;
                *a1 = (uint64_t)v34;
                goto LABEL_70;
              }
              if ((_DWORD)v563 != 2)
              {
                if ((_DWORD)v563 == 1)
                {
                  *a1 = 0;
                  goto LABEL_70;
                }
                if ((_DWORD)v563)
                  break;
              }
              v581.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
              LOWORD(v581.__end_cap_.__value_) = 259;
LABEL_70:
              v35 = 1;
LABEL_71:
              if ((v564 & 1) != 0)
              {
                v36 = v563;
                v563 = 0;
                if (v36)
                  (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
              }
              if (v35)
              {
                if (v566 != (char *)&v567 + 8)
                  free(v566);
                goto LABEL_755;
              }
            }
            LODWORD(v582.__begin_) = 0;
            llvm::BitstreamCursor::readRecord(v18, SHIDWORD(v563), (unsigned int *)&v582, 0, (uint64_t)&v573);
            if ((v574 & 1) != 0)
            {
              v65 = v573;
              v573 = 0;
              *a1 = (uint64_t)v65;
            }
            else
            {
              if ((_DWORD)v573 == 2)
              {
                if (LODWORD(v582.__begin_))
                {
                  v66 = 0;
                  v67 = 8 * LODWORD(v582.__begin_);
                  do
                  {
                    LODWORD(v581.__first_) = *(_DWORD *)((char *)&v582.__first_->__r_.__value_.__l.__data_ + v66);
                    v68 = std::__tree<std::__value_type<unsigned int,llvm::AttributeList>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::AttributeList>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::AttributeList>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v22, v581.__first_, &v581);
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, (uint64_t)v68[5]);
                    v66 += 8;
                  }
                  while (v67 != v66);
                }
                v69 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), (uint64_t *)v566, (uint64_t *)v567);
                v70 = v69;
                v71 = *(uint64_t ***)(v8 + 1448);
                v72 = *(_QWORD *)(v8 + 1456);
                if ((unint64_t)v71 < v72)
                {
                  *v71 = v69;
                  v64 = v71 + 1;
                  goto LABEL_210;
                }
                v73 = *(_QWORD *)(v8 + 1440);
                v74 = ((uint64_t)v71 - v73) >> 3;
                if ((unint64_t)(v74 + 1) >> 61)
                  goto LABEL_1130;
                v75 = v72 - v73;
                v76 = v75 >> 2;
                if (v75 >> 2 <= (unint64_t)(v74 + 1))
                  v76 = v74 + 1;
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                  v77 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v77 = v76;
                if (v77)
                  v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v534, v77);
                else
                  v78 = 0;
                v83 = &v78[8 * v74];
                *(_QWORD *)v83 = v70;
                v64 = v83 + 8;
                v84 = *(char **)(v8 + 1448);
                v85 = *(char **)(v8 + 1440);
                if (v84 != v85)
                {
                  do
                  {
                    v86 = *((_QWORD *)v84 - 1);
                    v84 -= 8;
                    *((_QWORD *)v83 - 1) = v86;
                    v83 -= 8;
                  }
                  while (v84 != v85);
                  goto LABEL_207;
                }
LABEL_208:
                *(_QWORD *)(v8 + 1440) = v83;
                *(_QWORD *)(v8 + 1448) = v64;
                *(_QWORD *)(v8 + 1456) = &v78[8 * v77];
                if (v84)
                  operator delete(v84);
                goto LABEL_210;
              }
              if ((_DWORD)v573 != 1)
              {
                v35 = 0;
                goto LABEL_211;
              }
              if (((uint64_t)v582.__begin_ & 1) == 0)
              {
                if (LODWORD(v582.__begin_))
                {
                  v37 = 0;
                  begin = (int)v582.__begin_;
                  while (1)
                  {
                    v581.__first_ = *(std::__split_buffer<std::string>::pointer *)(v8 + 424);
                    v581.__begin_ = (std::__split_buffer<std::string>::pointer)&v581.__end_cap_;
                    v581.__end_ = (std::__split_buffer<std::string>::pointer)0x800000000;
                    v38 = v582.__first_->__r_.__value_.__r.__words[v37 | 1];
                    v39 = *((_QWORD *)&v582.__first_->__r_.__value_.__l.__data_ + v37);
                    if ((v38 & 0xFFFF0000) != 0)
                      llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&v581, __clz(WORD1(v38)) ^ 0x13F);
                    v40 = (unsigned __int16)v38 | ((HIDWORD(v38) & 0xFFFFF) << 21);
                    if (v39 != 0xFFFFFFFFLL)
                      goto LABEL_96;
                    v41 = (v38 & 0x200) != 0
                        ? (unsigned __int16)v38 & 0xFDFF | ((HIDWORD(v38) & 0xFFFFF) << 21) & 0x1FFFFE0FDFFLL
                        : (unsigned __int16)v38 | ((HIDWORD(v38) & 0xFFFFF) << 21);
                    if ((v41 & 0x400) != 0)
                      break;
                    if ((v38 & 0x200) != 0)
                    {
                      v42 = 0;
                      v40 = (unsigned __int16)v38 & 0xFDFF | ((HIDWORD(v38) & 0xFFFFF) << 21) & 0x1FFFFE0FDFFLL;
LABEL_95:
                      v43 = llvm::Attribute::get((uint64_t *)v581.__first_, 80, v42);
                      llvm::AttrBuilder::addAttribute((uint64_t)&v581, v43);
                    }
LABEL_96:
                    if (v40)
                    {
                      v44 = 0;
                      while (1)
                      {
                        v45 = 0;
                        switch(v44)
                        {
                          case 3:
                            v45 = 4096;
                            goto LABEL_155;
                          case 4:
                            v45 = 0x20000000000;
                            goto LABEL_155;
                          case 5:
                            v45 = 0x10000000000;
                            goto LABEL_155;
                          case 6:
                            v45 = 0x400000000000;
                            goto LABEL_155;
                          case 10:
                            v45 = 0x2000000000000000;
                            goto LABEL_155;
                          case 11:
                            v45 = 8;
                            goto LABEL_155;
                          case 12:
                            v45 = 0x2000000;
                            goto LABEL_155;
                          case 13:
                            v45 = 0x200000000000;
                            goto LABEL_155;
                          case 14:
                            v45 = 0x200000000;
                            goto LABEL_155;
                          case 16:
                            v45 = 0x1000000;
                            goto LABEL_155;
                          case 17:
                            v45 = 256;
                            goto LABEL_155;
                          case 18:
                            v45 = 64;
                            goto LABEL_155;
                          case 19:
                            v45 = 0x4000000000;
                            goto LABEL_155;
                          case 21:
                            v45 = 0x200000;
                            goto LABEL_155;
                          case 22:
                            v45 = 0x200000000000000;
                            goto LABEL_155;
                          case 23:
                            v45 = 0x400000000;
                            goto LABEL_155;
                          case 24:
                            v45 = 0x8000000000000000;
                            goto LABEL_155;
                          case 25:
                            v45 = 0x800000;
                            goto LABEL_155;
                          case 26:
                            v45 = 2048;
                            goto LABEL_155;
                          case 29:
                            v45 = 0x1000000000000;
                            goto LABEL_155;
                          case 30:
                            v45 = 0x400000;
                            goto LABEL_155;
                          case 31:
                            v45 = 4;
                            goto LABEL_155;
                          case 36:
                            v45 = 32;
                            goto LABEL_155;
                          case 37:
                            v45 = 0x80000000;
                            goto LABEL_155;
                          case 38:
                            v45 = 0x100000000000;
                            goto LABEL_155;
                          case 40:
                            v45 = 0x400000000000000;
                            goto LABEL_155;
                          case 41:
                            v45 = 0x2000;
                            goto LABEL_155;
                          case 42:
                            v45 = 0x40000000000;
                            goto LABEL_155;
                          case 44:
                            v45 = 512;
                            goto LABEL_155;
                          case 45:
                            v45 = 1024;
                            goto LABEL_155;
                          case 46:
                            v45 = 0x8000000000;
                            goto LABEL_155;
                          case 47:
                            v45 = 0x20000000;
                            goto LABEL_155;
                          case 48:
                            v45 = 2;
                            goto LABEL_155;
                          case 49:
                            v45 = 0x800000000000;
                            goto LABEL_155;
                          case 50:
                            v45 = 0x100000000;
                            goto LABEL_155;
                          case 51:
                            v45 = 0x100000000000000;
                            goto LABEL_155;
                          case 53:
                            v45 = 0x2000000000;
                            goto LABEL_155;
                          case 54:
                            v45 = 0x1000000000;
                            goto LABEL_155;
                          case 55:
                            v45 = 0x800000000000000;
                            goto LABEL_155;
                          case 57:
                            v45 = 0x40000000000000;
                            goto LABEL_155;
                          case 58:
                            v45 = 0x1000000000000000;
                            goto LABEL_155;
                          case 59:
                            v45 = 0x4000;
                            goto LABEL_155;
                          case 60:
                            v45 = 0x8000;
                            goto LABEL_155;
                          case 61:
                            v45 = 0x800000000;
                            goto LABEL_155;
                          case 62:
                            v45 = 0x80000000000000;
                            goto LABEL_155;
                          case 64:
                            v45 = 0x10000000000000;
                            goto LABEL_155;
                          case 65:
                            v45 = 0x8000000000000;
                            goto LABEL_155;
                          case 66:
                            v45 = 0x4000000000000000;
                            goto LABEL_155;
                          case 67:
                            v45 = 0x20000000000000;
                            goto LABEL_155;
                          case 68:
                            v45 = 1;
                            goto LABEL_155;
                          case 70:
                            v45 = 128;
                            goto LABEL_155;
                          case 72:
                            v45 = 0x80000000000;
                            goto LABEL_155;
                          case 74:
                            v45 = 16;
                            goto LABEL_155;
                          case 75:
                            v45 = 2031616;
                            goto LABEL_155;
                          case 82:
                            v45 = 469762048;
                            goto LABEL_155;
                          case 83:
                            v45 = 0x40000000;
                            goto LABEL_155;
                          case 85:
                            goto LABEL_170;
                          default:
LABEL_155:
                            v46 = v45 & v40;
                            if (v46)
                            {
                              if (v44 == 82)
                              {
                                v50 = (v46 >> 26) - 1;
                                v51 = __clz((1 << v50)) ^ 0x13F;
                                if (v50 <= 0x1F)
                                  v52 = v51;
                                else
                                  v52 = 0;
                                llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&v581, v52);
                              }
                              else if (v44 == 75)
                              {
                                v47 = (v46 >> 16) - 1;
                                v48 = __clz((1 << v47)) ^ 0x13F;
                                if (v47 <= 0x1F)
                                  v49 = v48;
                                else
                                  v49 = 0;
                                llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&v581, v49);
                              }
                              else if ((v44 - 69) > 5)
                              {
                                v54 = llvm::Attribute::get((uint64_t *)v581.__first_, v44, 0);
                                addAttributeImpl<llvm::Attribute::AttrKind>((unsigned int *)&v581.__begin_, v44, v54);
                              }
                              else
                              {
                                v53 = llvm::Attribute::get((uint64_t *)v581.__first_, v44, 0);
                                llvm::AttrBuilder::addAttribute((uint64_t)&v581, v53);
                              }
                            }
                            ++v44;
                            break;
                        }
                      }
                    }
LABEL_170:
                    v55 = v37;
                    v8 = (uint64_t)v552;
                    v56 = (uint64_t *)*((_QWORD *)v552 + 53);
                    v57 = *((_QWORD *)&v582.__first_->__r_.__value_.__l.__data_ + v55);
                    Sorted = llvm::AttributeSetNode::getSorted(v56, (uint64_t *)v581.__begin_, LODWORD(v581.__end_));
                    v59 = llvm::AttributeList::get(v56, v57, (uint64_t)Sorted);
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, (uint64_t)v59);
                    if ((std::__compressed_pair<std::string *> *)v581.__begin_ != &v581.__end_cap_)
                      free(v581.__begin_);
                    v37 = v55 + 2;
                    if ((_DWORD)v55 + 2 == begin)
                      goto LABEL_173;
                  }
                  if ((v38 & 0x200) != 0)
                    v42 = 0;
                  else
                    v42 = 21;
                  v40 = v41 & 0x1FFFFE0FBFFLL;
                  goto LABEL_95;
                }
LABEL_173:
                v60 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), (uint64_t *)v566, (uint64_t *)v567);
                v61 = v60;
                v62 = *(uint64_t ***)(v8 + 1448);
                v63 = *(_QWORD *)(v8 + 1456);
                if ((unint64_t)v62 < v63)
                {
                  *v62 = v60;
                  v64 = v62 + 1;
                  v22 = v551;
LABEL_210:
                  v35 = 0;
                  *(_QWORD *)(v8 + 1448) = v64;
                  LODWORD(v567) = 0;
                  v21 = (void **)v553;
                  goto LABEL_211;
                }
                v79 = *(_QWORD *)(v8 + 1440);
                v80 = ((uint64_t)v62 - v79) >> 3;
                v22 = v551;
                if ((unint64_t)(v80 + 1) >> 61)
                  goto LABEL_1130;
                v81 = v63 - v79;
                v82 = v81 >> 2;
                if (v81 >> 2 <= (unint64_t)(v80 + 1))
                  v82 = v80 + 1;
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                  v77 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v77 = v82;
                if (v77)
                  v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v534, v77);
                else
                  v78 = 0;
                v83 = &v78[8 * v80];
                *(_QWORD *)v83 = v61;
                v64 = v83 + 8;
                v84 = *(char **)(v8 + 1448);
                v87 = *(char **)(v8 + 1440);
                if (v84 != v87)
                {
                  do
                  {
                    v88 = *((_QWORD *)v84 - 1);
                    v84 -= 8;
                    *((_QWORD *)v83 - 1) = v88;
                    v83 -= 8;
                  }
                  while (v84 != v87);
LABEL_207:
                  v84 = *(char **)(v8 + 1440);
                  goto LABEL_208;
                }
                goto LABEL_208;
              }
              v581.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid parameter attribute record";
              LOWORD(v581.__end_cap_.__value_) = 259;
            }
            v35 = 1;
LABEL_211:
            if ((v574 & 1) != 0)
            {
              v89 = v573;
              v573 = 0;
              if (v89)
                (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
            }
            goto LABEL_71;
          case 0xA:
            llvm::BitstreamCursor::EnterSubBlock(v18, 0, 10, a1);
            if (*a1)
              goto LABEL_40;
            if (*(_QWORD *)(v8 + 1480))
              goto LABEL_561;
            v582.__first_ = (std::__split_buffer<std::string>::pointer)&v582.__end_;
            v582.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
            while (1)
            {
              llvm::BitstreamCursor::advanceSkippingSubblocks(v18, 0, (uint64_t)&v573);
              if ((v574 & 1) != 0)
              {
                v90 = v573;
                v573 = 0;
                *a1 = (uint64_t)v90;
                goto LABEL_223;
              }
              switch((_DWORD)v573)
              {
                case 2:
                  goto LABEL_221;
                case 1:
                  *a1 = 0;
                  goto LABEL_223;
                case 0:
LABEL_221:
                  v581.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
                  LOWORD(v581.__end_cap_.__value_) = 259;
LABEL_223:
                  v91 = 1;
                  goto LABEL_224;
              }
              LODWORD(v582.__begin_) = 0;
              llvm::BitstreamCursor::readRecord(v18, SHIDWORD(v573), (unsigned int *)&v582, 0, (uint64_t)&v570);
              if ((v571 & 1) != 0)
              {
                v93 = v570;
                v570 = 0;
                *a1 = (uint64_t)v93;
                goto LABEL_235;
              }
              if ((_DWORD)v570 != 3)
                goto LABEL_319;
              v537 = (int)v582.__begin_;
              v520 = LODWORD(v582.__begin_) - 2;
              if (LODWORD(v582.__begin_) <= 2)
              {
                v581.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid grp record";
                LOWORD(v581.__end_cap_.__value_) = 259;
LABEL_235:
                v91 = 1;
                goto LABEL_320;
              }
              data = v582.__first_->__r_.__value_.__l.__data_;
              size = v582.__first_->__r_.__value_.__l.__size_;
              v581.__first_ = *(std::__split_buffer<std::string>::pointer *)(v8 + 424);
              v581.__begin_ = (std::__split_buffer<std::string>::pointer)&v581.__end_cap_;
              v581.__end_ = (std::__split_buffer<std::string>::pointer)0x800000000;
              v95 = 2;
              v505 = data;
              v509 = 63;
              while (2)
              {
                v96 = v582.__first_;
                v97 = *((_QWORD *)&v582.__first_->__r_.__value_.__l.__data_ + v95);
                switch(v97)
                {
                  case 0:
                    LODWORD(v563) = 0;
                    v98 = v95 + 1;
                    v103 = *(&v582.__first_->__r_.__value_.__l.__size_ + v95);
                    v8 = (uint64_t)v552;
                    if (size != 0xFFFFFFFF)
                      goto LABEL_276;
                    break;
                  case 1:
                    LODWORD(v563) = 0;
                    v98 = v95 + 1;
                    v8 = (uint64_t)v552;
                    if (*a1)
                      goto LABEL_315;
                    if (((_DWORD)v563 - 75) >= 0xA)
                    {
                      v121 = "Not an int attribute";
                      goto LABEL_314;
                    }
                    switch((int)v563)
                    {
                      case 'K':
                        v98 = v95 + 2;
                        v105 = __clz(LODWORD(v582.__first_->__r_.__value_.__r.__words[v95 + 2])) ^ 0x13F;
                        if (LODWORD(v582.__first_->__r_.__value_.__r.__words[v95 + 2]))
                          v106 = v105;
                        else
                          v106 = 0;
                        llvm::AttrBuilder::addAlignmentAttr((uint64_t **)&v581, v106);
                        break;
                      case 'L':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addAllocKindAttr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2]);
                        break;
                      case 'M':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addAllocSizeAttrFromRawRepr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2]);
                        break;
                      case 'N':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addDereferenceableAttr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2]);
                        break;
                      case 'O':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addDereferenceableOrNullAttr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2]);
                        break;
                      case 'P':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addMemoryAttr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2]);
                        break;
                      case 'Q':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addNoFPClassAttr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2] & 0x3FF);
                        break;
                      case 'R':
                        v98 = v95 + 2;
                        v116 = __clz(LODWORD(v582.__first_->__r_.__value_.__r.__words[v95 + 2])) ^ 0x13F;
                        if (LODWORD(v582.__first_->__r_.__value_.__r.__words[v95 + 2]))
                          v117 = v116;
                        else
                          v117 = 0;
                        llvm::AttrBuilder::addStackAlignmentAttr((uint64_t **)&v581, v117);
                        break;
                      case 'S':
                        v98 = v95 + 2;
                        v115 = v582.__first_->__r_.__value_.__r.__words[v95 + 2];
                        goto LABEL_299;
                      case 'T':
                        v98 = v95 + 2;
                        llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr((uint64_t **)&v581, v582.__first_->__r_.__value_.__r.__words[v95 + 2]);
                        break;
                      default:
                        goto LABEL_271;
                    }
                    goto LABEL_271;
                  case 3:
                  case 4:
                    v566 = &v568;
                    v567 = xmmword_24AA2B2D0;
                    v563 = v565;
                    v564 = xmmword_24AA2B2D0;
                    v98 = v95 + 1;
                    if (v95 + 1 == v537 || (v99 = v582.__first_->__r_.__value_.__r.__words[v98]) == 0)
                    {
                      v100 = v95;
                    }
                    else
                    {
                      do
                      {
                        llvm::SmallVectorTemplateBase<char,true>::push_back(&v566, v99);
                        v96 = v582.__first_;
                        v100 = v95 + 1;
                        if (v520 == v95)
                          break;
                        v99 = v582.__first_->__r_.__value_.__r.__words[v95 + 2];
                        ++v95;
                      }
                      while (v99);
                      v98 = v100 + 1;
                    }
                    if (v97 == 4)
                    {
                      v98 = v100 + 2;
                      if (v100 + 2 != v537)
                      {
                        v107 = *((_QWORD *)&v96->__r_.__value_.__l.__data_ + v98);
                        if (v107)
                        {
                          v108 = v100 + 3;
                          do
                          {
                            llvm::SmallVectorTemplateBase<char,true>::push_back(&v563, v107);
                            v109 = v108 + 1;
                            if (v537 == v108)
                              break;
                            v107 = *((_QWORD *)&v582.__first_->__r_.__value_.__l.__data_ + v108++);
                          }
                          while (v107);
                          v98 = v109 - 1;
                        }
                      }
                    }
                    v110 = v566;
                    v111 = v567;
                    v112 = llvm::Attribute::get((uint64_t *)v581.__first_, v566, v567, v563, v564);
                    addAttributeImpl<llvm::StringRef>((unsigned int *)&v581.__begin_, v110, v111, (uint64_t)v112);
                    if (v563 != v565)
                      free(v563);
                    v8 = (uint64_t)v552;
                    if (v566 != &v568)
                      free(v566);
                    goto LABEL_271;
                  case 5:
                  case 6:
                    LODWORD(v563) = 0;
                    v98 = v95 + 1;
                    if (*a1)
                      goto LABEL_311;
                    v101 = (int)v563;
                    if (((_DWORD)v563 - 69) >= 6)
                    {
                      v566 = "Not a type attribute";
                      v569 = 259;
LABEL_311:
                      v120 = 0;
                      v91 = 1;
                      v22 = v551;
                      v8 = (uint64_t)v552;
                      goto LABEL_316;
                    }
                    if (v97 == 6)
                    {
                      v98 = v95 + 2;
                      v8 = (uint64_t)v552;
                    }
                    else
                    {
                      TypeByID = 0;
                      v8 = (uint64_t)v552;
                    }
                    v113 = llvm::Attribute::get((uint64_t *)v581.__first_, v101, TypeByID);
                    llvm::AttrBuilder::addAttribute((uint64_t)&v581, v113);
                    goto LABEL_271;
                  default:
                    v566 = "Invalid attribute group entry";
                    v569 = 259;
                    v120 = 0;
                    v91 = 1;
                    v8 = (uint64_t)v552;
                    goto LABEL_316;
                }
                switch(v103)
                {
                  case '-':
                    v104 = v509 & 3;
                    goto LABEL_303;
                  case '.':
                  case '/':
                  case '0':
                  case '3':
                    goto LABEL_276;
                  case '1':
                    v104 = v509 & 0xC;
                    goto LABEL_303;
                  case '2':
                    v104 = v509 & 0xF;
LABEL_303:
                    v509 = v104;
                    goto LABEL_271;
                  case '4':
                    v114 = 42;
                    goto LABEL_305;
                  default:
                    if (v103 == 20)
                    {
                      v509 = 0;
                      goto LABEL_271;
                    }
                    if (v103 == 21)
                    {
                      v114 = 21;
LABEL_305:
                      v509 &= v114;
                      goto LABEL_271;
                    }
LABEL_276:
                    if (*a1)
                      goto LABEL_315;
                    if ((int)v563 <= 73)
                    {
                      if ((_DWORD)v563 == 70)
                      {
                        llvm::AttrBuilder::addByValAttr((uint64_t **)&v581, 0);
                      }
                      else
                      {
                        if ((_DWORD)v563 != 72)
                          goto LABEL_286;
                        llvm::AttrBuilder::addInAllocaAttr((uint64_t **)&v581, 0);
                      }
LABEL_271:
                      v95 = v98 + 1;
                      v22 = v551;
                      if (v95 == v537)
                      {
                        v118 = (llvm::AttrBuilder *)v509;
                        if (v509 != 63)
                          llvm::AttrBuilder::addMemoryAttr((uint64_t **)&v581, v509);
                        llvm::UpgradeAttributes((llvm *)&v581, v118);
                        v119 = llvm::AttributeList::get(*(uint64_t **)(v8 + 424), size, (uint64_t)&v581);
                        LODWORD(v566) = v505;
                        std::__tree<std::__value_type<unsigned int,llvm::AttributeList>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::AttributeList>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::AttributeList>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v551, v505, &v566)[5] = v119;
                        v91 = 5;
                        v120 = 1;
                        goto LABEL_316;
                      }
                      continue;
                    }
                    if ((_DWORD)v563 == 74)
                    {
                      llvm::AttrBuilder::addStructRetAttr((uint64_t **)&v581, 0);
                      goto LABEL_271;
                    }
                    if ((_DWORD)v563 == 83)
                    {
                      LODWORD(v115) = 2;
LABEL_299:
                      llvm::AttrBuilder::addUWTableAttr((uint64_t **)&v581, v115);
                      goto LABEL_271;
                    }
LABEL_286:
                    if (((_DWORD)v563 - 1) <= 0x43)
                    {
                      llvm::AttrBuilder::addAttribute((uint64_t **)&v581, (int)v563);
                      goto LABEL_271;
                    }
                    v121 = "Not an enum attribute";
LABEL_314:
                    v566 = v121;
                    v569 = 259;
LABEL_315:
                    v120 = 0;
                    v91 = 1;
                    v22 = v551;
LABEL_316:
                    if ((std::__compressed_pair<std::string *> *)v581.__begin_ != &v581.__end_cap_)
                      free(v581.__begin_);
                    if (v120)
LABEL_319:
                      v91 = 0;
LABEL_320:
                    if ((v571 & 1) != 0)
                    {
                      v122 = v570;
                      v570 = 0;
                      if (v122)
                        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v122 + 8))(v122);
                    }
                    v21 = (void **)v553;
LABEL_224:
                    if ((v574 & 1) != 0)
                    {
                      v92 = v573;
                      v573 = 0;
                      if (v92)
                        (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
                    }
                    if (v91)
                    {
LABEL_755:
                      v279 = v582.__first_;
                      if ((std::__split_buffer<std::string>::pointer *)v582.__first_ != &v582.__end_)
                        goto LABEL_756;
                      goto LABEL_757;
                    }
                    break;
                }
                break;
              }
            }
          case 0xB:
            if (*a1)
              goto LABEL_40;
            goto LABEL_757;
          case 0xC:
            if (*a1)
              goto LABEL_40;
            if (*(_BYTE *)(v8 + 1560))
              goto LABEL_329;
            v274 = *(_QWORD *)(v8 + 1512);
            v275 = *(_QWORD *)(v8 + 1520);
            if (v274 != v275)
            {
              v276 = (_QWORD *)(v275 - 8);
              if ((unint64_t)v276 > v274)
              {
                v277 = v274 + 8;
                do
                {
                  v278 = *(_QWORD *)(v277 - 8);
                  *(_QWORD *)(v277 - 8) = *v276;
                  *v276-- = v278;
                  v169 = v277 >= (unint64_t)v276;
                  v277 += 8;
                }
                while (!v169);
              }
            }
            if (*a1)
              goto LABEL_40;
            *(_BYTE *)(v8 + 1560) = 1;
LABEL_329:
            v123 = *(_QWORD *)(v8 + 464);
            if (!v123)
              goto LABEL_333;
            if (*(_BYTE *)(v8 + 456))
            {
LABEL_337:
              llvm::BitstreamCursor::SkipBlock(v18, a1);
              goto LABEL_757;
            }
            if (*a1)
              goto LABEL_40;
            *(_BYTE *)(v8 + 456) = 1;
LABEL_333:
            if (*a1)
              goto LABEL_40;
            if (*(_BYTE *)(v8 + 456))
            {
              *(_QWORD *)(v8 + 440) = 8 * *(_QWORD *)(v8 + 48) - *(unsigned int *)(v8 + 64);
              goto LABEL_51;
            }
LABEL_615:
            v24 = 2;
            goto LABEL_41;
          case 0xE:
            if (*(_BYTE *)(v8 + 456))
              goto LABEL_337;
            if (*a1)
              goto LABEL_40;
            *(_BYTE *)(v8 + 456) = 1;
            goto LABEL_615;
          case 0xF:
            if (!v550)
            {
              llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*(llvm::MetadataLoader::MetadataLoaderImpl **)(v8 + 776), 1, (const llvm::Twine *)a1);
              goto LABEL_757;
            }
            v124 = 8 * *(_QWORD *)(v8 + 48) - *(unsigned int *)(v8 + 64);
            v125 = *(uint64_t **)(v8 + 1600);
            v126 = *(_QWORD *)(v8 + 1608);
            if ((unint64_t)v125 >= v126)
            {
              v235 = *(uint64_t **)(v8 + 1592);
              v236 = v125 - v235;
              v237 = v236 + 1;
              if ((unint64_t)(v236 + 1) >> 61)
                goto LABEL_1130;
              v238 = v126 - (_QWORD)v235;
              if (v238 >> 2 > v237)
                v237 = v238 >> 2;
              if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8)
                v239 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v239 = v237;
              if (v239)
              {
                v240 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v545, v239);
                v125 = *(uint64_t **)(v8 + 1600);
                v235 = *(uint64_t **)(v8 + 1592);
              }
              else
              {
                v240 = 0;
              }
              v314 = (uint64_t *)&v240[8 * v236];
              *v314 = v124;
              v127 = v314 + 1;
              while (v125 != v235)
              {
                v315 = *--v125;
                *--v314 = v315;
              }
              *(_QWORD *)(v8 + 1592) = v314;
              *(_QWORD *)(v8 + 1600) = v127;
              *(_QWORD *)(v8 + 1608) = &v240[8 * v239];
              if (v235)
                operator delete(v235);
            }
            else
            {
              *v125 = v124;
              v127 = v125 + 1;
            }
            *(_QWORD *)(v8 + 1600) = v127;
            llvm::BitstreamCursor::SkipBlock(v18, a1);
            if (*a1)
            {
              v24 = 1;
            }
            else
            {
              *a1 = 0;
              v24 = 2;
            }
            v21 = (void **)v553;
            goto LABEL_41;
          case 0x11:
            llvm::BitstreamCursor::EnterSubBlock(v18, 0, 17, a1);
            if (*a1)
              goto LABEL_40;
            if (*(_QWORD *)(v8 + 520) != *(_QWORD *)(v8 + 528))
              goto LABEL_561;
            v128 = 0;
            v582.__first_ = (std::__split_buffer<std::string>::pointer)&v582.__end_;
            v582.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
            v557 = 0;
            v581.__first_ = (std::__split_buffer<std::string>::pointer)&v581.__end_cap_;
            *(_OWORD *)&v581.__begin_ = xmmword_24AA2B2D0;
            while (1)
            {
              llvm::BitstreamCursor::advanceSkippingSubblocks(v18, 0, (uint64_t)&v579);
              if ((v580 & 1) != 0)
              {
                v129 = v579;
                v579 = 0;
                *a1 = v129;
              }
              else
              {
                if ((_DWORD)v579 == 2)
                  goto LABEL_355;
                if ((_DWORD)v579 != 1)
                {
                  if ((_DWORD)v579)
                  {
                    LODWORD(v582.__begin_) = 0;
                    v563 = (char *)&v564 + 8;
                    *(_QWORD *)&v564 = 0xC00000000;
                    llvm::BitstreamCursor::readRecord(v18, SHIDWORD(v579), (unsigned int *)&v582, 0, (uint64_t)&v577);
                    if ((v578 & 1) != 0)
                    {
                      v132 = v577;
                      v577 = 0;
                      *a1 = v132;
LABEL_552:
                      v130 = 1;
                      goto LABEL_553;
                    }
                    switch((int)v577)
                    {
                      case 1:
                        if (LODWORD(v582.__begin_))
                        {
                          std::vector<llvm::BasicBlock *>::resize(v532, v582.__first_->__r_.__value_.__r.__words[0]);
                          goto LABEL_400;
                        }
                        v133 = "Invalid numentry record";
                        goto LABEL_551;
                      case 2:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1608);
                        goto LABEL_530;
                      case 3:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1704);
                        goto LABEL_530;
                      case 4:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1728);
                        goto LABEL_530;
                      case 5:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1632);
                        goto LABEL_530;
                      case 6:
                        if (LODWORD(v582.__begin_) != 1)
                        {
                          v133 = "Invalid opaque type record";
                          goto LABEL_551;
                        }
                        v136 = *((_QWORD *)v552 + 65);
                        if (v128 >= (unint64_t)((*((_QWORD *)v552 + 66) - v136) >> 3))
                          goto LABEL_427;
                        IdentifiedStructType = *(uint64_t ***)(v136 + 8 * v128);
                        if (IdentifiedStructType)
                        {
                          llvm::StructType::setName(*(_QWORD *)(v136 + 8 * v128), (uint64_t *)v581.__first_, (unint64_t)v581.__begin_);
                          *(_QWORD *)(*v532 + 8 * v128) = 0;
                        }
                        else
                        {
                        }
                        v581.__begin_ = 0;
                        goto LABEL_529;
                      case 7:
                        if (LODWORD(v582.__begin_))
                        {
                          if (!((unint64_t)(v582.__first_->__r_.__value_.__l.__data_ - 1) >> 23))
                          {
                            v134 = v552;
                            v137 = (unint64_t)llvm::IntegerType::get(*((llvm::IntegerType **)v552 + 53), (llvm::LLVMContext *)v582.__first_->__r_.__value_.__l.__data_);
                            goto LABEL_414;
                          }
                          v133 = "Bitwidth for integer type out of range";
                        }
                        else
                        {
                          v133 = "Invalid integer record";
                        }
                        goto LABEL_551;
                      case 8:
                        if (!LODWORD(v582.__begin_))
                        {
                          v133 = "Invalid pointer record";
                          goto LABEL_551;
                        }
                        if (LODWORD(v582.__begin_) == 2)
                        {
                          v138 = (unsigned int *)v582.__first_;
                          v139 = (llvm::Type *)LODWORD(v582.__first_->__r_.__value_.__r.__words[1]);
                        }
                        else
                        {
                          v139 = 0;
                          v138 = (unsigned int *)v582.__first_;
                        }
                        if (v177)
                        {
                          v178 = (llvm::PointerType **)v177;
                          v179 = *(unsigned __int8 *)(v177 + 8);
                          v180 = v179 > 0xC || ((1 << v179) & 0x1380) == 0;
                          if (v180 && v179 != 11)
                          {
                            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v563, (int)v582.__first_->__r_.__value_.__l.__data_);
                            v164 = llvm::PointerType::get(v178, v139);
                            goto LABEL_526;
                          }
                        }
                        v182 = "Invalid type";
                        goto LABEL_533;
                      case 9:
                        v140 = (int)v582.__begin_;
                        if (LODWORD(v582.__begin_) <= 2)
                          goto LABEL_406;
                        v566 = (char *)&v567 + 8;
                        *(_QWORD *)&v567 = 0x800000000;
                        if (LODWORD(v582.__begin_) != 3)
                        {
                          v141 = 3;
                          do
                          {
                            if (!v142)
                              break;
                            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, v142);
                            ++v141;
                          }
                          while (v140 != v141);
                        }
                        if (!IdentifiedStructType)
                          goto LABEL_463;
                        begin_low = LODWORD(v582.__begin_);
                        if ((unint64_t)LODWORD(v582.__begin_) - 3 > v567)
                          goto LABEL_463;
                        v144 = v582.__first_;
                        v145 = &v582.__first_->__r_.__value_.__s.__data_[16];
                        goto LABEL_503;
                      case 10:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1656);
                        goto LABEL_530;
                      case 11:
                        if (LODWORD(v582.__begin_) <= 1)
                        {
                          v133 = "Invalid array type record";
                          goto LABEL_551;
                        }
                        if (!v159)
                          goto LABEL_459;
                        v160 = (uint64_t **)v159;
                        v161 = *(unsigned __int8 *)(v159 + 8);
                        v162 = v161 > 0xE || ((1 << v161) & 0x5B80) == 0;
                        if (!v162 || v161 == 19)
                          goto LABEL_459;
                        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v563, v582.__first_->__r_.__value_.__r.__words[1]);
                        llvm::ArrayType::get(v160, (llvm::Type *)v582.__first_->__r_.__value_.__l.__data_);
                        goto LABEL_526;
                      case 12:
                        if (LODWORD(v582.__begin_) <= 1)
                        {
                          v133 = "Invalid vector type record";
                          goto LABEL_551;
                        }
                        if (!v582.__first_->__r_.__value_.__l.__data_)
                        {
                          v133 = "Invalid vector length";
                          goto LABEL_551;
                        }
                        if (!v165)
                          goto LABEL_459;
                        v166 = (uint64_t **)v165;
                        v167 = *(_DWORD *)(v165 + 8);
                        v168 = v167;
                        v169 = v167 != 13 && v167 >= 4u;
                        v170 = !v169 || v167 == 5;
                        v171 = v167 & 0xFD;
                        v172 = v170 || v171 == 4;
                        v173 = v172 || v168 == 15;
                        if (!v173 && v168 != 20)
                        {
LABEL_459:
                          v133 = "Invalid type";
                          goto LABEL_551;
                        }
                        if (LODWORD(v582.__begin_) < 3)
                          v175 = 0;
                        else
                          v175 = v582.__first_->__r_.__value_.__r.__words[2];
                        v197 = v175 != 0;
                        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v563, v582.__first_->__r_.__value_.__r.__words[1]);
                        llvm::VectorType::get(v166, (llvm::Type *)(LODWORD(v582.__first_->__r_.__value_.__l.__data_) | (unint64_t)(v197 << 32)));
LABEL_526:
                        IdentifiedStructType = (uint64_t **)v164;
LABEL_529:
                        v134 = v552;
                        goto LABEL_530;
                      case 13:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1800);
                        goto LABEL_530;
                      case 14:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1824);
                        goto LABEL_530;
                      case 15:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1848);
                        goto LABEL_530;
                      case 16:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1752);
                        goto LABEL_530;
                      case 17:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1872);
                        goto LABEL_530;
                      case 18:
                        v146 = (int)v582.__begin_;
                        if (!LODWORD(v582.__begin_))
                        {
                          v133 = "Invalid anon struct record";
                          goto LABEL_551;
                        }
                        v566 = (char *)&v567 + 8;
                        *(_QWORD *)&v567 = 0x800000000;
                        if (LODWORD(v582.__begin_) == 1)
                        {
                          v147 = 0;
                          v148 = 1;
                        }
                        else
                        {
                          v183 = 1;
                          do
                          {
                            if (!v184)
                              break;
                            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, v184);
                            ++v183;
                          }
                          while (v146 != (_DWORD)v183);
                          v147 = v567;
                          v148 = LODWORD(v582.__begin_);
                        }
                        v185 = v148 - 1;
                        v539 = v147;
                        if (v148 - 1 == v147)
                        {
                          llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v563, &v582.__first_->__r_.__value_.__s.__data_[8], &v582.__first_->__r_.__value_.__s.__data_[8 * v148]);
                          IdentifiedStructType = (uint64_t **)llvm::StructType::get(*((uint64_t **)v552 + 53), (uint64_t)v566, v567, (unint64_t *)(v582.__first_->__r_.__value_.__r.__words[0] != 0));
                          goto LABEL_517;
                        }
                        v186 = "Invalid type";
                        goto LABEL_519;
                      case 19:
                        llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v581, (char *)v582.__first_, &v582.__first_->__r_.__value_.__s.__data_[8 * LODWORD(v582.__begin_)]);
LABEL_400:
                        v130 = 2;
                        goto LABEL_553;
                      case 20:
                        if (!LODWORD(v582.__begin_))
                        {
                          v133 = "Invalid named struct record";
                          goto LABEL_551;
                        }
                        v149 = *((_QWORD *)v552 + 65);
                        if (v128 >= (unint64_t)((*((_QWORD *)v552 + 66) - v149) >> 3))
                          goto LABEL_427;
                        IdentifiedStructType = *(uint64_t ***)(v149 + 8 * v128);
                        if (IdentifiedStructType)
                        {
                          llvm::StructType::setName(*(_QWORD *)(v149 + 8 * v128), (uint64_t *)v581.__first_, (unint64_t)v581.__begin_);
                          *(_QWORD *)(*v532 + 8 * v128) = 0;
                        }
                        else
                        {
                        }
                        v581.__begin_ = 0;
                        v566 = (char *)&v567 + 8;
                        *(_QWORD *)&v567 = 0x800000000;
                        v192 = (int)v582.__begin_;
                        if (LODWORD(v582.__begin_) == 1)
                        {
                          v193 = 0;
                          v194 = 1;
                        }
                        else
                        {
                          v195 = 1;
                          do
                          {
                            if (!v196)
                              break;
                            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, v196);
                            ++v195;
                          }
                          while (v192 != (_DWORD)v195);
                          v193 = v567;
                          v194 = LODWORD(v582.__begin_);
                        }
                        v185 = v194 - 1;
                        v539 = v193;
                        if (v194 - 1 == v193)
                        {
                          llvm::StructType::setBody((uint64_t)IdentifiedStructType, (uint64_t)v566, v193, v582.__first_->__r_.__value_.__r.__words[0] != 0);
                          llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v563, &v582.__first_->__r_.__value_.__s.__data_[8], &v582.__first_->__r_.__value_.__s.__data_[8 * LODWORD(v582.__begin_)]);
LABEL_517:
                          v130 = 5;
                        }
                        else
                        {
                          v186 = "Invalid named struct record";
LABEL_519:
                          v573 = v186;
                          v576 = 259;
                          IdentifiedStructType = 0;
                          v130 = 1;
                        }
                        if (v566 != (char *)&v567 + 8)
                          free(v566);
                        v162 = v185 == v539;
                        v134 = v552;
                        if (!v162)
                          goto LABEL_523;
                        goto LABEL_530;
                      case 21:
                        v150 = (int)v582.__begin_;
                        if (LODWORD(v582.__begin_) <= 1)
                        {
LABEL_406:
                          v133 = "Invalid function record";
                          goto LABEL_551;
                        }
                        v566 = (char *)&v567 + 8;
                        *(_QWORD *)&v567 = 0x800000000;
                        if (LODWORD(v582.__begin_) == 2)
                          goto LABEL_461;
                        for (i = 2; v150 != i; ++i)
                        {
                          if (!v188)
                            break;
                          v189 = *(unsigned __int8 *)(v188 + 8);
                          if (v189 == 7 || v189 == 14)
                          {
                            v573 = "Invalid function argument type";
                            v576 = 259;
                            IdentifiedStructType = 0;
LABEL_464:
                            v176 = 0;
                            v130 = 1;
                            goto LABEL_504;
                          }
                          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, v188);
                        }
LABEL_461:
                        if (!IdentifiedStructType
                          || (begin_low = LODWORD(v582.__begin_),
                              (unint64_t)LODWORD(v582.__begin_) - 2 > v567))
                        {
LABEL_463:
                          v573 = "Invalid type";
                          v576 = 259;
                          goto LABEL_464;
                        }
                        v144 = v582.__first_;
                        v145 = &v582.__first_->__r_.__value_.__s.__data_[8];
LABEL_503:
                        llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v563, v145, &v144->__r_.__value_.__s.__data_[8 * begin_low]);
                        IdentifiedStructType = (uint64_t **)llvm::FunctionType::get(IdentifiedStructType, (uint64_t *)v566, v567, (unint64_t *)(v582.__first_->__r_.__value_.__r.__words[0] != 0));
                        v130 = 5;
                        v176 = 1;
LABEL_504:
                        if (v566 != (char *)&v567 + 8)
                        {
                          v191 = v176;
                          free(v566);
                          v176 = v191;
                        }
                        v134 = v552;
                        if ((v176 & 1) != 0)
                          goto LABEL_530;
                        goto LABEL_523;
                      case 22:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1776);
                        goto LABEL_530;
                      case 23:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1680);
                        goto LABEL_530;
                      case 24:
                        v134 = v552;
                        IdentifiedStructType = (uint64_t **)(**((_QWORD **)v552 + 53) + 1896);
                        goto LABEL_530;
                      case 25:
                        if (LODWORD(v582.__begin_) != 1)
                        {
                          v133 = "Invalid opaque pointer record";
                          goto LABEL_551;
                        }
                        v151 = **((_QWORD **)v552 + 53);
                        if (*(_BYTE *)(v151 + 2737))
                        {
                          if (!*(_BYTE *)(v151 + 2736))
                            goto LABEL_550;
                        }
                        else
                        {
                          v202 = byte_257966860;
                          *(_BYTE *)(v151 + 2737) = 1;
                          *(_BYTE *)(v151 + 2736) = v202;
                          if (!v202)
                          {
LABEL_550:
                            v133 = "Opaque pointers are only supported in -opaque-pointers mode";
                            goto LABEL_551;
                          }
                        }
                        v134 = v552;
                        v137 = llvm::PointerType::get(*((llvm::PointerType **)v552 + 53), (llvm::LLVMContext *)LODWORD(v582.__first_->__r_.__value_.__l.__data_));
LABEL_414:
                        IdentifiedStructType = (uint64_t **)v137;
                        goto LABEL_530;
                      case 26:
                        v152 = LODWORD(v582.__begin_);
                        if (!LODWORD(v582.__begin_))
                        {
                          v133 = "Invalid target extension type record";
                          goto LABEL_551;
                        }
                        if (v128 >= (unint64_t)((uint64_t)(*((_QWORD *)v552 + 66) - *((_QWORD *)v552 + 65)) >> 3))
                        {
LABEL_427:
                          v133 = "Invalid TYPE table";
LABEL_551:
                          v566 = v133;
                          v569 = 259;
                          goto LABEL_552;
                        }
                        v153 = v582.__first_->__r_.__value_.__l.__data_;
                        if (v582.__first_->__r_.__value_.__l.__data_ >= (std::string::pointer)LODWORD(v582.__begin_))
                        {
                          v133 = "Too many type parameters";
                          goto LABEL_551;
                        }
                        v154 = v582.__first_->__r_.__value_.__l.__data_;
                        v566 = (char *)&v567 + 8;
                        *(_QWORD *)&v567 = 0x400000000;
                        v573 = v575;
                        v574 = 0x800000000;
                        if (!(_DWORD)v153)
                          goto LABEL_423;
                        v155 = 0;
                        do
                        {
                          if (!v156)
                          {
                            v201 = "Invalid type";
                            goto LABEL_542;
                          }
                          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v566, v156);
                          ++v155;
                        }
                        while (v154 != v155);
                        v152 = LODWORD(v582.__begin_);
LABEL_423:
                        v157 = v154 + 1;
                        if (v157 >= v152)
                        {
LABEL_426:
                          IdentifiedStructType = (uint64_t **)llvm::TargetExtType::get(*((_QWORD **)v552 + 53), (uint64_t)v581.__first_, (unint64_t *)v581.__begin_, (unint64_t *)v566, v567, (int *)v573, v574);
                          v581.__begin_ = 0;
                          v130 = 5;
                          v538 = 1;
                        }
                        else
                        {
                          while (1)
                          {
                            v158 = v582.__first_->__r_.__value_.__r.__words[v157];
                            if (HIDWORD(v158))
                              break;
                            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v573, v158);
                            if (v152 == ++v157)
                              goto LABEL_426;
                          }
                          v201 = "Integer parameter too large";
LABEL_542:
                          v570 = (llvm::formatv_object_base *)v201;
                          v572 = 259;
                          IdentifiedStructType = 0;
                          v538 = 0;
                          v130 = 1;
                        }
                        if (v573 != v575)
                          free(v573);
                        if (v566 != (char *)&v567 + 8)
                          free(v566);
                        v134 = v552;
                        if ((v538 & 1) != 0)
                        {
LABEL_530:
                          v198 = *((_QWORD *)v134 + 65);
                          if (v128 >= (unint64_t)((*((_QWORD *)v134 + 66) - v198) >> 3))
                          {
                            v566 = "Invalid TYPE table";
                            v569 = 259;
                            v199 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
                            v21 = (void **)v553;
                          }
                          else
                          {
                            v21 = (void **)v553;
                            if (!*(_QWORD *)(v198 + 8 * v128))
                            {
                              *(_QWORD *)(v198 + 8 * v128) = IdentifiedStructType;
                              if ((_DWORD)v564)
                              {
                                llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::FindAndConstruct(v533, (int *)&v557);
                                llvm::SmallVectorImpl<unsigned int>::operator=(v200 + 8, (uint64_t)&v563);
                              }
                              v130 = 0;
                              v557 = ++v128;
                              goto LABEL_536;
                            }
                            v182 = "Invalid TYPE table: Only named structs can be forward referenced";
LABEL_533:
                            v566 = v182;
                            v569 = 259;
                            v199 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
                          }
                          v130 = 1;
                        }
                        else
                        {
LABEL_523:
                          v21 = (void **)v553;
                        }
LABEL_536:
                        v22 = v551;
LABEL_553:
                        if ((v578 & 1) != 0)
                        {
                          v203 = v577;
                          v577 = 0;
                          if (v203)
                            (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
                        }
                        if (v563 != (char *)&v564 + 8)
                          free(v563);
                        goto LABEL_357;
                      default:
                        v133 = "Invalid value";
                        goto LABEL_551;
                    }
                  }
LABEL_355:
                  v566 = "Malformed block";
                  v569 = 259;
                  goto LABEL_356;
                }
                if (v128 != (uint64_t)(*((_QWORD *)v552 + 66) - *((_QWORD *)v552 + 65)) >> 3)
                  goto LABEL_355;
                *a1 = 0;
              }
LABEL_356:
              v130 = 1;
LABEL_357:
              if ((v580 & 1) != 0)
              {
                v131 = v579;
                v579 = 0;
                if (v131)
                  (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
              }
              if ((v130 | 2) != 2)
              {
                if ((std::__compressed_pair<std::string *> *)v581.__first_ != &v581.__end_cap_)
                  free(v581.__first_);
                v279 = v582.__first_;
                v8 = (uint64_t)v552;
                if ((std::__split_buffer<std::string>::pointer *)v582.__first_ != &v582.__end_)
LABEL_756:
                  free(v279);
LABEL_757:
                if (*a1)
                  v24 = 1;
                else
                  v24 = 2;
                goto LABEL_41;
              }
            }
          case 0x12:
            goto LABEL_757;
          case 0x15:
            llvm::BitstreamCursor::EnterSubBlock(v18, 0, 21, a1);
            if (*a1)
              goto LABEL_40;
            if (*(_QWORD *)(v8 + 1776) != *(_QWORD *)(v8 + 1784))
            {
LABEL_561:
              v204 = (std::string *)"Invalid multiple blocks";
LABEL_562:
              v582.__first_ = v204;
              LOWORD(v582.__end_cap_.__value_) = 259;
              goto LABEL_757;
            }
            v582.__first_ = (std::__split_buffer<std::string>::pointer)&v582.__end_;
            v582.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
            while (1)
            {
              llvm::BitstreamCursor::advanceSkippingSubblocks(v18, 0, (uint64_t)&v566);
              if ((v567 & 1) != 0)
              {
                v280 = v566;
                v566 = 0;
                *a1 = (uint64_t)v280;
              }
              else
              {
                if ((_DWORD)v566 != 2)
                {
                  if ((_DWORD)v566 == 1)
                  {
                    *a1 = 0;
                    goto LABEL_693;
                  }
                  if ((_DWORD)v566)
                  {
                    llvm::BitstreamCursor::readRecord(v18, SHIDWORD(v566), (unsigned int *)&v582, 0, (uint64_t)&v563);
                    if ((v564 & 1) != 0)
                    {
                      v286 = v563;
                      v563 = 0;
                      *a1 = (uint64_t)v286;
                    }
                    else
                    {
                      if ((_DWORD)v563 == 1)
                      {
                        v283 = *(std::string **)(v8 + 1784);
                        v284 = *(_QWORD *)(v8 + 1792);
                        if ((unint64_t)v283 >= v284)
                        {
                          v287 = *(_QWORD *)(v8 + 1776);
                          v288 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v283 - v287) >> 3);
                          v289 = v288 + 1;
                          if (v288 + 1 > 0xAAAAAAAAAAAAAAALL)
                            goto LABEL_1130;
                          v290 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v284 - v287) >> 3);
                          if (2 * v290 > v289)
                            v289 = 2 * v290;
                          if (v290 >= 0x555555555555555)
                            v291 = 0xAAAAAAAAAAAAAAALL;
                          else
                            v291 = v289;
                          v581.__end_cap_.__value_ = v543;
                          if (v291)
                            v292 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v543, v291);
                          else
                            v292 = 0;
                          v293 = &v292[24 * v288];
                          *(_QWORD *)v293 = 0;
                          *((_QWORD *)v293 + 1) = 0;
                          *((_QWORD *)v293 + 2) = 0;
                          v294 = *(_QWORD *)(v8 + 1784);
                          v295 = *(_QWORD *)(v8 + 1776);
                          if (v294 == v295)
                          {
                            v298 = vdupq_n_s64(v294);
                            v296 = &v292[24 * v288];
                          }
                          else
                          {
                            v296 = &v292[24 * v288];
                            do
                            {
                              v297 = *(_OWORD *)(v294 - 24);
                              *((_QWORD *)v296 - 1) = *(_QWORD *)(v294 - 8);
                              *(_OWORD *)(v296 - 24) = v297;
                              v296 -= 24;
                              *(_QWORD *)(v294 - 16) = 0;
                              *(_QWORD *)(v294 - 8) = 0;
                              *(_QWORD *)(v294 - 24) = 0;
                              v294 -= 24;
                            }
                            while (v294 != v295);
                            v298 = *(int64x2_t *)(v8 + 1776);
                          }
                          v285 = (std::string *)(v293 + 24);
                          *(_QWORD *)(v8 + 1776) = v296;
                          *(_QWORD *)(v8 + 1784) = v293 + 24;
                          *(int64x2_t *)&v581.__begin_ = v298;
                          v299 = *(std::string **)(v8 + 1792);
                          *(_QWORD *)(v8 + 1792) = &v292[24 * v291];
                          v581.__end_cap_.__value_ = v299;
                          v581.__first_ = (std::__split_buffer<std::string>::pointer)v298.i64[0];
                          std::__split_buffer<std::string>::~__split_buffer(&v581);
                        }
                        else
                        {
                          v283->__r_.__value_.__r.__words[0] = 0;
                          v283->__r_.__value_.__l.__size_ = 0;
                          v285 = v283 + 1;
                          v283->__r_.__value_.__r.__words[2] = 0;
                        }
                        *(_QWORD *)(v8 + 1784) = v285;
                        std::string::append[abi:nn180100]<unsigned long long const*,0>(v285 - 1, v582.__first_, (std::string *)((char *)v582.__first_ + 8 * LODWORD(v582.__begin_)));
                        v281 = 0;
                        LODWORD(v582.__begin_) = 0;
                        goto LABEL_722;
                      }
                      v581.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid operand bundle record";
                      LOWORD(v581.__end_cap_.__value_) = 259;
                    }
                    v281 = 1;
LABEL_722:
                    if ((v564 & 1) != 0)
                    {
                      v300 = v563;
                      v563 = 0;
                      if (v300)
                        (*(void (**)(void *))(*(_QWORD *)v300 + 8))(v300);
                    }
                    goto LABEL_694;
                  }
                }
                v581.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
                LOWORD(v581.__end_cap_.__value_) = 259;
              }
LABEL_693:
              v281 = 1;
LABEL_694:
              if ((v567 & 1) != 0)
              {
                v282 = v566;
                v566 = 0;
                if (v282)
                  (*(void (**)(void *))(*(_QWORD *)v282 + 8))(v282);
              }
              if (v281)
                goto LABEL_755;
            }
          case 0x16:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(*(llvm::BitstreamCursor ***)(v8 + 776), a1);
            goto LABEL_757;
          case 0x1A:
            llvm::BitstreamCursor::EnterSubBlock(v18, 0, 26, a1);
            if (*a1)
              goto LABEL_40;
            if (*(_QWORD *)(v8 + 1808))
            {
              v204 = (std::string *)"Invalid multiple synchronization scope names blocks";
              goto LABEL_562;
            }
            v582.__first_ = (std::__split_buffer<std::string>::pointer)&v582.__end_;
            v582.__begin_ = (std::__split_buffer<std::string>::pointer)0x4000000000;
            break;
          default:
            goto LABEL_337;
        }
        while (1)
        {
          llvm::BitstreamCursor::advanceSkippingSubblocks(v18, 0, (uint64_t)&v563);
          if ((v564 & 1) != 0)
          {
            v302 = v563;
            v563 = 0;
            *a1 = (uint64_t)v302;
            goto LABEL_733;
          }
          if ((_DWORD)v563 != 2)
          {
            if ((_DWORD)v563 == 1)
            {
              if (*(_QWORD *)(v8 + 1808))
              {
                *a1 = 0;
                goto LABEL_733;
              }
              v301 = (std::string *)"Invalid empty synchronization scope names block";
              goto LABEL_731;
            }
            if ((_DWORD)v563)
            {
              llvm::BitstreamCursor::readRecord(v18, SHIDWORD(v563), (unsigned int *)&v582, 0, (uint64_t)&v573);
              if ((v574 & 1) != 0)
              {
                v308 = v573;
                v573 = 0;
                *a1 = (uint64_t)v308;
              }
              else
              {
                if ((_DWORD)v573 == 1)
                {
                  v581.__first_ = (std::__split_buffer<std::string>::pointer)&v581.__end_cap_;
                  *(_OWORD *)&v581.__begin_ = xmmword_24AA2D860;
                  llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v581, (char *)v582.__first_, &v582.__first_->__r_.__value_.__s.__data_[8 * LODWORD(v582.__begin_)]);
                  v305 = **(_QWORD **)(v8 + 424);
                  v306 = (llvm::StringMapImpl *)(v305 + 2672);
                  LODWORD(v305) = *(_DWORD *)(v305 + 2684);
                  v566 = v581.__first_;
                  *(_QWORD *)&v567 = v581.__begin_;
                  BYTE8(v567) = v305;
                  v307 = llvm::StringMap<unsigned char,llvm::MallocAllocator>::try_emplace<unsigned char>(v306, (uint64_t *)v581.__first_, (unint64_t)v581.__begin_, (char *)&v567 + 8);
                  llvm::SmallVectorTemplateBase<char,true>::push_back(v544, *(_BYTE *)(*v307 + 8));
                  LODWORD(v582.__begin_) = 0;
                  if ((std::__compressed_pair<std::string *> *)v581.__first_ != &v581.__end_cap_)
                    free(v581.__first_);
                  v303 = 0;
                  goto LABEL_750;
                }
                v581.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid sync scope record";
                LOWORD(v581.__end_cap_.__value_) = 259;
              }
              v303 = 1;
LABEL_750:
              if ((v574 & 1) != 0)
              {
                v309 = v573;
                v573 = 0;
                if (v309)
                  (*(void (**)(void *))(*(_QWORD *)v309 + 8))(v309);
              }
              goto LABEL_734;
            }
          }
          v301 = (std::string *)"Malformed block";
LABEL_731:
          v581.__first_ = v301;
          LOWORD(v581.__end_cap_.__value_) = 259;
LABEL_733:
          v303 = 1;
LABEL_734:
          if ((v564 & 1) != 0)
          {
            v304 = v563;
            v563 = 0;
            if (v304)
              (*(void (**)(void *))(*(_QWORD *)v304 + 8))(v304);
          }
          if (v303)
            goto LABEL_755;
        }
      case 1:
        if (!*a1)
LABEL_51:
        goto LABEL_40;
      case 0:
        v582.__first_ = (std::__split_buffer<std::string>::pointer)"Malformed block";
        LOWORD(v582.__end_cap_.__value_) = 259;
LABEL_40:
        v24 = 1;
        goto LABEL_41;
    }
    llvm::BitstreamCursor::readRecord(v18, SHIDWORD(v558), (unsigned int *)&v560, 0, (uint64_t)&v563);
    if ((v564 & 1) != 0)
    {
      v33 = v563;
      v563 = 0;
LABEL_58:
      *a1 = (uint64_t)v33;
LABEL_59:
      v24 = 1;
      goto LABEL_880;
    }
    v27 = (int)v563;
    switch((int)v563)
    {
      case 1:
        if ((_DWORD)v561)
        {
          v214 = *(_QWORD *)v560;
          if (*(_QWORD *)v560 < 3)
          {
            *(_BYTE *)(v8 + 392) = (_DWORD)v214 == 2;
            v519 = v214 | v519 & 0xFFFFFFFF00000000;
            *(_BYTE *)(v8 + 1712) = v214 != 0;
            goto LABEL_878;
          }
          v582.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid value";
          LOWORD(v582.__end_cap_.__value_) = 259;
          v21 = (void **)v553;
          v33 = v566;
        }
        else
        {
          v582.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid version record";
          LOWORD(v582.__end_cap_.__value_) = 259;
          v21 = (void **)v553;
          v33 = v581.__first_;
        }
        v519 = (unint64_t)v33;
        goto LABEL_58;
      case 2:
        if (v556)
        {
          v215 = (std::string *)"target triple too late in module";
          goto LABEL_673;
        }
        memset(&v582, 0, 24);
        std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v582, (std::string *)v560, (std::string *)((char *)v560 + 8 * v561));
        if (SHIBYTE(v582.__end_) >= 0)
          v256 = &v582;
        else
          v256 = v582.__first_;
        if (SHIBYTE(v582.__end_) >= 0)
          end_high = HIBYTE(v582.__end_);
        else
          end_high = (size_t)v582.__begin_;
        llvm::Module::setTargetTriple(*(_QWORD *)(v8 + 432), v256, end_high);
LABEL_651:
        if ((SHIBYTE(v582.__end_) & 0x80000000) == 0)
          goto LABEL_878;
        v258 = v582.__first_;
        goto LABEL_802;
      case 3:
        if (v556)
        {
          v215 = (std::string *)"datalayout too late in module";
          goto LABEL_673;
        }
        std::string::append[abi:nn180100]<unsigned long long const*,0>(&v555, (std::string *)v560, (std::string *)((char *)v560 + 8 * v561));
        goto LABEL_878;
      case 4:
        memset(&v582, 0, 24);
        std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v582, (std::string *)v560, (std::string *)((char *)v560 + 8 * v561));
        if (SHIBYTE(v582.__end_) >= 0)
          v216 = &v582;
        else
          v216 = v582.__first_;
        if (SHIBYTE(v582.__end_) >= 0)
          v217 = HIBYTE(v582.__end_);
        else
          v217 = (size_t)v582.__begin_;
        llvm::Module::setModuleInlineAsm(*(_QWORD *)(v8 + 432), v216, v217);
        goto LABEL_651;
      case 5:
        memset(&v581, 0, 24);
        std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v581, (std::string *)v560, (std::string *)((char *)v560 + 8 * v561));
        v219 = *(_QWORD *)(v8 + 480);
        v218 = *(_QWORD *)(v8 + 488);
        if (v219 < v218)
        {
          if (SHIBYTE(v581.__end_) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v8 + 480), (const std::string::value_type *)v581.__first_, (std::string::size_type)v581.__begin_);
          }
          else
          {
            v220 = *(_OWORD *)&v581.__first_;
            *(_QWORD *)(v219 + 16) = v581.__end_;
            *(_OWORD *)v219 = v220;
          }
          v316 = (std::string *)(v219 + 24);
LABEL_796:
          *(_QWORD *)(v8 + 480) = v316;
          goto LABEL_800;
        }
        v241 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v219 - v549->i64[0]) >> 3);
        v242 = v241 + 1;
        if (v241 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          v243 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v218 - v549->i64[0]) >> 3);
          if (2 * v243 > v242)
            v242 = 2 * v243;
          if (v243 >= 0x555555555555555)
            v244 = 0xAAAAAAAAAAAAAAALL;
          else
            v244 = v242;
          v582.__end_cap_.__value_ = v547;
          if (v244)
          {
            v245 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v547, v244);
            v247 = v246;
          }
          else
          {
            v245 = 0;
            v247 = 0;
          }
          v318 = (std::string *)&v245[24 * v241];
          if (SHIBYTE(v581.__end_) < 0)
          {
            std::string::__init_copy_ctor_external(v318, (const std::string::value_type *)v581.__first_, (std::string::size_type)v581.__begin_);
          }
          else
          {
            v319 = *(_OWORD *)&v581.__first_;
            v318->__r_.__value_.__r.__words[2] = (std::string::size_type)v581.__end_;
            *(_OWORD *)&v318->__r_.__value_.__l.__data_ = v319;
          }
          v323 = *((_QWORD *)v552 + 59);
          v322 = *((_QWORD *)v552 + 60);
          if (v322 == v323)
          {
            v326 = vdupq_n_s64(v322);
            v324 = v318;
          }
          else
          {
            v324 = v318;
            do
            {
              v325 = *(_OWORD *)(v322 - 24);
              v324[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v322 - 8);
              *(_OWORD *)&v324[-1].__r_.__value_.__l.__data_ = v325;
              --v324;
              *(_QWORD *)(v322 - 16) = 0;
              *(_QWORD *)(v322 - 8) = 0;
              *(_QWORD *)(v322 - 24) = 0;
              v322 -= 24;
            }
            while (v322 != v323);
            v326 = *v549;
          }
          v316 = v318 + 1;
          v333 = &v245[24 * v247];
          v8 = (uint64_t)v552;
          *((_QWORD *)v552 + 59) = v324;
          *((_QWORD *)v552 + 60) = v316;
          *(int64x2_t *)&v582.__begin_ = v326;
          v334 = (std::string *)*((_QWORD *)v552 + 61);
          *((_QWORD *)v552 + 61) = v333;
          v582.__end_cap_.__value_ = v334;
          v582.__first_ = (std::__split_buffer<std::string>::pointer)v326.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v582);
          v22 = v551;
          goto LABEL_796;
        }
        goto LABEL_1130;
      case 6:
        memset(&v582, 0, 24);
        std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v582, (std::string *)v560, (std::string *)((char *)v560 + 8 * v561));
        goto LABEL_651;
      case 7:
        v221 = v8;
        v222 = (char *)v560;
        v223 = v561;
        if (*(_BYTE *)(v221 + 392))
        {
          v224 = (std::string *)*((_QWORD *)v560 + 1);
          v21 = (void **)v553;
          if ((unint64_t)v224 + *(_QWORD *)v560 > *(_QWORD *)(v221 + 384))
            goto LABEL_661;
          v225 = (const char *)(*((_QWORD *)v552 + 47) + *(_QWORD *)v560);
          v223 = v561 - 2;
          v222 = (char *)v560 + 16;
        }
        else
        {
          v224 = 0;
          v225 = "";
          v21 = (void **)v553;
        }
        if (v223 > 5)
        {
          v522 = (std::string *)v225;
          v541 = v223;
          LODWORD(v573) = *(_DWORD *)v222;
          v259 = (int)v573;
          if (v260)
          {
            v261 = *((_QWORD *)v222 + 1);
            if ((v261 & 2) != 0)
            {
              v516 = *((_QWORD *)v222 + 1);
              v502 = (v261 >> 2);
              v507 = (llvm::PointerType **)v260;
LABEL_885:
              v377 = *((_QWORD *)v222 + 3);
              DecodedLinkage = getDecodedLinkage(v377);
              LOWORD(v570) = 0;
              if (!*a1)
              {
                memset(&v581, 0, 24);
                v378 = *((_QWORD *)v222 + 5);
                if (v378)
                {
                  v379 = v378 - 1;
                  v380 = *((_QWORD *)v552 + 59);
                  if (v379 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v552 + 60) - v380) >> 3))
                  {
                    v392 = (std::string *)"Invalid ID";
LABEL_1001:
                    v582.__first_ = v392;
                    LOWORD(v582.__end_cap_.__value_) = 259;
                    goto LABEL_1019;
                  }
                  std::string::operator=((std::string *)&v581, (const std::string *)(v380 + 24 * v379));
                }
                v491 = v377;
                if (v541 < 7)
                {
                  v496 = 0;
                  v500 = 0;
                }
                else
                {
                  if ((DecodedLinkage - 7) >= 2)
                  {
                    v394 = *((_DWORD *)v222 + 12);
                    if (v394 == 2)
                      v381 = 2;
                    else
                      v381 = v394 == 1;
                  }
                  else
                  {
                    v381 = 0;
                  }
                  v500 = v381;
                  if (v541 >= 8)
                  {
                    if (*((_DWORD *)v222 + 14) >= 5u)
                      LOBYTE(v395) = 1;
                    else
                      v395 = *((_DWORD *)v222 + 14);
                    v497 = v395;
                    if (v541 == 8)
                    {
                      v496 = 0;
                    }
                    else
                    {
                      v414 = *((_DWORD *)v222 + 16);
                      if (v414 == 2)
                        v415 = 1;
                      else
                        v415 = 2 * (v414 == 1);
                      v496 = v415;
                      if (v541 != 9)
                      {
                        v493 = *((_QWORD *)v222 + 9) != 0;
LABEL_944:
                        v396 = (char *)operator new(0x78uLL);
                        *((_DWORD *)v396 + 13) = *((_DWORD *)v396 + 13) & 0x38000000 | 1;
                        v397 = (uint64_t *)(v396 + 32);
                        *(_QWORD *)v396 = 0;
                        *((_QWORD *)v396 + 1) = 0;
                        *((_QWORD *)v396 + 2) = 0;
                        *((_QWORD *)v396 + 3) = v396 + 32;
                        v398 = *((_QWORD *)v552 + 54);
                        LOWORD(v582.__end_cap_.__value_) = 261;
                        v582.__first_ = v522;
                        v582.__begin_ = v224;
                        llvm::GlobalVariable::GlobalVariable((uint64_t)(v396 + 32), v398, v507, v516 & 1, DecodedLinkage, 0, (const llvm::Twine *)&v582, 0, v497, v502 | 0x100000000, v493);
                        if (BYTE1(v570))
                          *((_DWORD *)v396 + 16) = ((v570 << 17) + 0x20000) | *((_DWORD *)v396 + 16) & 0xFF81FFFF;
                        if (SHIBYTE(v581.__end_) >= 0)
                          v400 = HIBYTE(v581.__end_);
                        else
                          v400 = (uint64_t)v581.__begin_;
                        if (v400)
                        {
                          if (SHIBYTE(v581.__end_) >= 0)
                            v401 = &v581;
                          else
                            v401 = v581.__first_;
                          llvm::GlobalObject::setSection(v397, (uint64_t)v401, v400, v399);
                        }
                        llvm::GlobalValue::setVisibility((uint64_t)v397, v500);
                        v402 = *((_DWORD *)v396 + 16) & 0xF;
                        v403 = *((_DWORD *)v396 + 16) & 0xFFFFFF3F | ((v496 & 3) << 6);
                        *((_DWORD *)v396 + 16) = v403;
                        v404 = v402 - 7;
                        if (v541 < 0xB)
                        {
                          if (v404 >= 2)
                          {
                            if ((_DWORD)v491 == 5)
                            {
                              v406 = 256;
                            }
                            else
                            {
                              if ((_DWORD)v491 != 6)
                                goto LABEL_977;
                              v406 = 512;
                            }
LABEL_976:
                            *((_DWORD *)v396 + 16) = v406 | v403 & 0xFFFFFCFF;
                          }
                        }
                        else if (v404 >= 2)
                        {
                          v405 = *((_DWORD *)v222 + 20);
                          if (v405 == 2)
                            v406 = 512;
                          else
                            v406 = (v405 == 1) << 8;
                          goto LABEL_976;
                        }
LABEL_977:
                        v524 = (const void **)(v396 + 32);
                        llvm::BitcodeReaderValueList::push_back(v546, (llvm::Value *)v397, VirtualTypeID);
                        v417 = *((_QWORD *)v222 + 2);
                        v418 = v541;
                        if (!(_DWORD)v417)
                        {
LABEL_997:
                          if (v418 < 0xC)
                          {
                            v21 = (void **)v553;
                            if (v491 <= 0xB && ((1 << v491) & 0xC12) != 0)
                            {
                              v566 = v396 + 32;
                              llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v582, v531, (uint64_t *)&v566);
                            }
                            goto LABEL_1017;
                          }
                          v434 = *((_QWORD *)v222 + 11);
                          v21 = (void **)v553;
                          if ((_DWORD)v434)
                          {
                            v435 = *((_QWORD *)v552 + 99);
                            if (*((_QWORD *)v222 + 11) > (unint64_t)((*((_QWORD *)v552 + 100)
                                                                                          - v435) >> 3))
                            {
                              v392 = (std::string *)"Invalid global variable comdat ID";
                              goto LABEL_1001;
                            }
                            llvm::GlobalObject::setComdat(v524, *(_QWORD *)(v435 + 8 * (v434 - 1)));
                            v418 = v541;
                          }
                          if (v418 < 0xD)
                            goto LABEL_1017;
                          v436 = (*((_DWORD *)v222 + 24) - 1);
                          v437 = *((_QWORD *)v552 + 180);
                          if (v436 >= (*((_QWORD *)v552 + 181) - v437) >> 3)
                            goto LABEL_1011;
                          v438 = *(_QWORD *)(v437 + 8 * v436);
                          if (!v438)
                            goto LABEL_1012;
                          if (*(_DWORD *)(v438 + 8))
                            v438 = *(_QWORD *)(v438 + 40);
                          else
LABEL_1011:
                            v438 = 0;
LABEL_1012:
                          *((_QWORD *)v396 + 13) = v438;
                          if (v418 > 0xD)
                          {
                            *((_DWORD *)v396 + 16) = *((_DWORD *)v396 + 16) & 0xFFFFBFFF | ((*((_DWORD *)v222 + 26) == 1) << 14);
                            inferDSOLocal((uint64_t)v524);
                            if (v541 >= 0x10)
                            {
                              llvm::GlobalValue::setPartition(v524, *((_QWORD *)v552 + 47) + *((_QWORD *)v222 + 14), *((_QWORD *)v222 + 15), v439);
                              if (v541 != 16)
                              {
                                v440 = *((_QWORD *)v222 + 16);
                                if (v440)
                                  llvm::GlobalValue::setSanitizerMetadata(v524, v440 & 0xF);
                              }
                            }
                            goto LABEL_1018;
                          }
LABEL_1017:
                          inferDSOLocal((uint64_t)v524);
LABEL_1018:
                          *a1 = 0;
LABEL_1019:
                          if (SHIBYTE(v581.__end_) < 0)
                            operator delete(v581.__first_);
                          goto LABEL_875;
                        }
                        v419 = (const void **)(v417 - 1);
                        v420 = (const void ***)*((_QWORD *)v552 + 172);
                        v421 = *((_QWORD *)v552 + 173);
                        if ((unint64_t)v420 < v421)
                        {
                          *v420 = v524;
                          v420[1] = v419;
                          v422 = v420 + 2;
LABEL_996:
                          *((_QWORD *)v552 + 172) = v422;
                          goto LABEL_997;
                        }
                        v423 = *((_QWORD *)v552 + 171);
                        v424 = ((uint64_t)v420 - v423) >> 4;
                        v425 = v424 + 1;
                        if (!((unint64_t)(v424 + 1) >> 60))
                        {
                          v426 = v421 - v423;
                          if (v426 >> 3 > v425)
                            v425 = v426 >> 3;
                          if ((unint64_t)v426 >= 0x7FFFFFFFFFFFFFF0)
                            v427 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v427 = v425;
                          if (v427)
                            v427 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v427);
                          else
                            v428 = 0;
                          v429 = (const void ***)(v427 + 16 * v424);
                          *v429 = v524;
                          v429[1] = v419;
                          v430 = (char *)*((_QWORD *)v552 + 172);
                          v431 = (char *)*((_QWORD *)v552 + 171);
                          v432 = v429;
                          if (v430 == v431)
                          {
                            v433 = v552;
                          }
                          else
                          {
                            do
                            {
                              *((_OWORD *)v432 - 1) = *((_OWORD *)v430 - 1);
                              v432 -= 2;
                              v430 -= 16;
                            }
                            while (v430 != v431);
                            v433 = v552;
                            v430 = (char *)*((_QWORD *)v552 + 171);
                          }
                          *((_QWORD *)v433 + 171) = v432;
                          v422 = v429 + 2;
                          *((_QWORD *)v433 + 172) = v429 + 2;
                          *((_QWORD *)v433 + 173) = v427 + 16 * v428;
                          if (v430)
                            operator delete(v430);
                          v418 = v541;
                          goto LABEL_996;
                        }
LABEL_1130:
                        abort();
                      }
                    }
LABEL_943:
                    v493 = 0;
                    goto LABEL_944;
                  }
                  v496 = 0;
                }
                v497 = 0;
                goto LABEL_943;
              }
LABEL_875:
              v8 = (uint64_t)v552;
LABEL_876:
              v22 = v551;
              goto LABEL_877;
            }
            v262 = *(unsigned int *)(v260 + 8);
            if (*(_DWORD *)(v260 + 8) == 15)
            {
              v516 = *((_QWORD *)v222 + 1);
              if (v263)
              {
                v502 = v262 >> 8;
                v507 = (llvm::PointerType **)v263;
                v21 = (void **)v553;
                goto LABEL_885;
              }
              v375 = (std::string *)"Missing element type for old-style global";
              goto LABEL_873;
            }
            goto LABEL_883;
          }
        }
LABEL_661:
        v582.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid record";
        LOWORD(v582.__end_cap_.__value_) = 259;
        v264 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
LABEL_874:
        goto LABEL_875;
      case 8:
        if (*a1)
        {
          v24 = 1;
          goto LABEL_879;
        }
        v265 = v561;
        v542 = (char *)v560;
        if (*(_BYTE *)(v8 + 392))
        {
          v266 = (std::string *)*((_QWORD *)v560 + 1);
          if ((unint64_t)v266 + *(_QWORD *)v560 > *(_QWORD *)(v8 + 384))
            goto LABEL_863;
          v267 = (std::string *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)v560);
          v265 = v561 - 2;
          v542 = (char *)v560 + 16;
        }
        else
        {
          v266 = 0;
          v267 = (std::string *)"";
        }
        if (v265 <= 7)
        {
LABEL_863:
          v369 = (std::string *)"Invalid record";
LABEL_864:
          v582.__first_ = v369;
          LOWORD(v582.__end_cap_.__value_) = 259;
          v21 = (void **)v553;
          goto LABEL_876;
        }
        LODWORD(v579) = *(_DWORD *)v542;
        v512 = v579;
        if (!v370)
          goto LABEL_872;
        v371 = v370;
        v372 = *(unsigned __int8 *)(v370 + 8);
        v495 = v265;
        if (v372 == 15)
        {
          v512 = v579;
          if (!v373)
          {
            v375 = (std::string *)"Missing element type for old-style function";
            goto LABEL_873;
          }
          v371 = v373;
          v372 = *(unsigned __int8 *)(v373 + 8);
        }
        if (v372 != 14)
          goto LABEL_883;
        v374 = *((_QWORD *)v542 + 1);
        if ((v374 & 0xFFFFFC00) != 0)
        {
          v375 = (std::string *)"Invalid calling convention ID";
LABEL_873:
          v582.__first_ = v375;
          LOWORD(v582.__end_cap_.__value_) = 259;
          v264 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
          v21 = (void **)v553;
          goto LABEL_874;
        }
        v523 = (llvm::GlobalValue *)*((_QWORD *)v552 + 54);
        if (v495 < 0x11)
          v393 = *(_DWORD *)(*((_QWORD *)v552 + 54) + 268);
        else
          v393 = *((_DWORD *)v542 + 32);
        v517 = v393;
        LOWORD(v582.__end_cap_.__value_) = 261;
        v582.__first_ = v267;
        v582.__begin_ = v266;
        v407 = (char *)operator new(0x80uLL);
        *((_DWORD *)v407 + 7) = *((_DWORD *)v407 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v407 = 0;
        llvm::Function::Function((uint64_t)(v407 + 8), v371, 0, (llvm::Type *)v517, (const llvm::Twine *)&v582, (uint64_t)v523);
        v573 = v407 + 8;
        *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>,llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::FindAndConstruct(v530, (uint64_t *)&v573)+ 8) = v512;
        v498 = v407;
        *((_WORD *)v407 + 13) = *((_WORD *)v407 + 13) & 0xC00F | (16 * v374);
        v490 = *((_QWORD *)v542 + 2);
        v492 = *((_QWORD *)v542 + 3);
        v408 = getDecodedLinkage(v492);
        v508 = (uint64_t ***)(v407 + 8);
        llvm::GlobalValue::setLinkage((uint64_t)(v407 + 8), v408);
        v409 = 0;
        v410 = (*((_DWORD *)v542 + 8) - 1);
        v8 = (uint64_t)v552;
        v411 = *((_QWORD *)v552 + 180);
        if (v410 < (*((_QWORD *)v552 + 181) - v411) >> 3)
          v409 = *(_QWORD *)(v411 + 8 * v410);
        *((_QWORD *)v407 + 15) = v409;
        v494 = (uint64_t *)(v407 + 120);
        v21 = (void **)v553;
        v22 = v551;
        if (!*((_BYTE *)v552 + 1864))
          goto LABEL_1028;
        v582.__first_ = (std::__split_buffer<std::string>::pointer)&unk_251C1C268;
        v582.__begin_ = (std::__split_buffer<std::string>::pointer)v552;
        v582.__end_cap_.__value_ = (std::string *)&v582;
        v581.__first_ = (std::__split_buffer<std::string>::pointer)&off_251C1C2B0;
        v581.__begin_ = (std::__split_buffer<std::string>::pointer)v552;
        v581.__end_cap_.__value_ = (std::string *)&v581;
        std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::operator()(*((_QWORD *)v552 + 232), (uint64_t)v508, v512);
        words = v581.__end_cap_.__value_->__r_.__value_.__r.__words;
        if ((std::__split_buffer<std::string> *)v581.__end_cap_.__value_ == &v581)
        {
          words = &v581;
          v413 = 4;
        }
        else
        {
          if (!v581.__end_cap_.__value_)
            goto LABEL_1023;
          v413 = 5;
        }
        (*(void (**)(void))(*words + 8 * v413))();
LABEL_1023:
        v441 = v582.__end_cap_.__value_->__r_.__value_.__r.__words;
        if ((std::__split_buffer<std::string> *)v582.__end_cap_.__value_ == &v582)
        {
          v441 = &v582;
          v442 = 4;
        }
        else
        {
          if (!v582.__end_cap_.__value_)
            goto LABEL_1028;
          v442 = 5;
        }
        (*(void (**)(void))(*v441 + 8 * v442))();
LABEL_1028:
        if (!*((_QWORD *)v498 + 13))
          goto LABEL_1049;
        v443 = 0;
        v504 = *v494;
        do
        {
          v444 = 0;
          v581.__first_ = (std::__split_buffer<std::string>::pointer)0x4A00000046;
          LODWORD(v581.__begin_) = 72;
          v525 = v443 + 1;
          v501 = v443;
          v445 = v443 + 2;
          v446 = (uint64_t *)v504;
          v518 = v445;
          do
          {
            if (v446)
            {
              if (v445 < *((_DWORD *)v446 + 2))
              {
                v447 = v446[v445 + 5];
                if (v447)
                {
                  v448 = *(_DWORD *)((char *)&v581.__first_ + v444);
                  if (((*(unsigned __int8 *)(v447 + v448 / 8 + 12) >> (v448 & 7)) & 1) != 0)
                  {
                    AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(v494, v525, *(_DWORD *)((char *)&v581.__first_ + v444));
                    v445 = v518;
                    if (!AttributeAtIndex || !*(_QWORD *)(AttributeAtIndex + 16))
                    {
                      *v494 = (uint64_t)llvm::AttributeList::removeAttributeAtIndex(v494, **v508, v525, v448);
                      v8 = (uint64_t)v552;
                      if (!PtrElementTypeByID)
                      {
                        v369 = (std::string *)"Missing param element type for attribute upgrade";
                        goto LABEL_864;
                      }
                      v452 = llvm::Attribute::get(*((uint64_t **)v552 + 53), v448, PtrElementTypeByID);
                      LODWORD(v582.__first_) = v501;
                      v446 = llvm::AttributeList::addParamAttribute(v494, **v508, &v582, 1, v452);
                      *v494 = (uint64_t)v446;
                      v504 = (uint64_t)v446;
                      v445 = v518;
                    }
                  }
                }
              }
            }
            v444 += 4;
          }
          while (v444 != 12);
          v443 = v525;
        }
        while (*((_QWORD *)v498 + 13) != v525);
        v8 = (uint64_t)v552;
        v21 = (void **)v553;
        v22 = v551;
        if (!v525
          || (*((_WORD *)v498 + 13) & 0x3FF0) != 0x530
          || v504
          && *(_DWORD *)(v504 + 8) >= 3u
          && (v453 = *(_QWORD *)(v504 + 56)) != 0
          && (*(_BYTE *)(v453 + 20) & 0x40) != 0)
        {
LABEL_1049:
          LOWORD(v577) = 0;
          if (*a1)
            goto LABEL_877;
          if (BYTE1(v577))
            *((_DWORD *)v498 + 10) = ((v577 << 17) + 0x20000) | *((_DWORD *)v498 + 10) & 0xFF81FFFF;
          v458 = *((_QWORD *)v542 + 6);
          if (v458)
          {
            v459 = v458 - 1;
            v460 = *(_QWORD *)(v8 + 472);
            if (v459 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 480) - v460) >> 3))
            {
              v472 = (std::string *)"Invalid ID";
              goto LABEL_1074;
            }
            v461 = v460 + 24 * v459;
            v462 = *(char *)(v461 + 23);
            if (v462 >= 0)
              v463 = v461;
            else
              v463 = *(_QWORD *)v461;
            if (v462 >= 0)
              v464 = *(unsigned __int8 *)(v461 + 23);
            else
              v464 = *(_QWORD *)(v461 + 8);
            llvm::GlobalObject::setSection(v508, v463, v464, v457);
          }
          if ((*((_DWORD *)v498 + 10) & 0xFu) - 7 >= 2)
          {
            v465 = *((_DWORD *)v542 + 14);
            if (v465 == 2)
              v466 = 2;
            else
              v466 = v465 == 1;
            llvm::GlobalValue::setVisibility((uint64_t)v508, v466);
          }
          if (v495 < 9)
            goto LABEL_1083;
          v467 = *((_QWORD *)v542 + 8);
          if (v467)
          {
            v468 = v467 - 1;
            v469 = *(_QWORD *)(v8 + 496);
            if (v468 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 504) - v469) >> 3))
            {
              v375 = (std::string *)"Invalid ID";
              goto LABEL_873;
            }
            v470 = (__int128 *)(v469 + 24 * v468);
            if (*((char *)v470 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v581, *(const std::string::value_type **)v470, *((_QWORD *)v470 + 1));
            }
            else
            {
              v471 = *v470;
              v581.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v470 + 2);
              *(_OWORD *)&v581.__first_ = v471;
            }
            llvm::Function::setGC((uint64_t)v508, (uint64_t)&v581);
            if (SHIBYTE(v581.__end_) < 0)
              operator delete(v581.__first_);
          }
          if (v495 < 0xA)
          {
LABEL_1083:
            v474 = 0;
          }
          else
          {
            v473 = *((_DWORD *)v542 + 18);
            if (v473 == 2)
              v474 = 64;
            else
              v474 = (v473 == 1) << 7;
          }
          v526 = 0;
          v475 = *((_DWORD *)v498 + 10);
          v476 = v475 & 0xFFFFFF3F | v474;
          *((_DWORD *)v498 + 10) = v476;
          v566 = v508;
          v567 = 0uLL;
          if (v495 < 0xB || (v526 = *((_DWORD *)v542 + 20), DWORD2(v567) = v526, v495 == 11))
          {
            if ((v475 & 0xFu) - 7 >= 2)
            {
              if ((_DWORD)v492 == 5)
              {
                v477 = 256;
LABEL_1100:
                *((_DWORD *)v498 + 10) = v477 | v476 & 0xFFFFFCFF;
              }
              else if ((_DWORD)v492 == 6)
              {
                v477 = 512;
                goto LABEL_1100;
              }
            }
LABEL_1101:
            v482 = 0;
            if (v492 <= 0xB && ((1 << v492) & 0xC12) != 0)
            {
              v483 = (uint64_t *)v508;
              v570 = (llvm::formatv_object_base *)v508;
              llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v582, v531, (uint64_t *)&v570);
              v482 = 0;
              v484 = 0;
              v8 = (uint64_t)v552;
              goto LABEL_1116;
            }
            v484 = 0;
LABEL_1115:
            v8 = (uint64_t)v552;
            v483 = (uint64_t *)v508;
LABEL_1116:
            inferDSOLocal((uint64_t)v483);
            goto LABEL_1117;
          }
          if ((v475 & 0xFu) - 7 >= 2)
          {
            v478 = *((_DWORD *)v542 + 22);
            if (v478 == 2)
              v479 = 512;
            else
              v479 = (v478 == 1) << 8;
            *((_DWORD *)v498 + 10) = v479 | v476 & 0xFFFFFCFF;
          }
          if (v495 < 0xD)
            goto LABEL_1101;
          v480 = *((_QWORD *)v542 + 12);
          if ((_DWORD)v480)
          {
            v481 = *((_QWORD *)v552 + 99);
            if (*((_QWORD *)v542 + 12) > (unint64_t)((*((_QWORD *)v552 + 100) - v481) >> 3))
            {
              v375 = (std::string *)"Invalid function comdat ID";
              goto LABEL_873;
            }
            llvm::GlobalObject::setComdat((const void **)v508, *(_QWORD *)(v481 + 8 * (v480 - 1)));
          }
          if (v495 < 0xE)
          {
            v482 = 0;
          }
          else
          {
            v482 = *((_DWORD *)v542 + 26);
            DWORD1(v567) = v482;
            if (v495 != 14)
            {
              v484 = *((_DWORD *)v542 + 28);
              LODWORD(v567) = v484;
              if (v495 <= 0xF)
                goto LABEL_1115;
              *((_DWORD *)v498 + 10) = *((_DWORD *)v498 + 10) & 0xFFFFBFFF | ((*((_DWORD *)v542 + 30) == 1) << 14);
              inferDSOLocal((uint64_t)v508);
              if (v495 >= 0x13
                && (v486 = *((_QWORD *)v552 + 47)) != 0
                && (v488 = *((_QWORD *)v542 + 17),
                    v487 = *((_QWORD *)v542 + 18),
                    (unint64_t)(v487 + v488) <= *((_QWORD *)v552 + 48)))
              {
                v483 = (uint64_t *)v508;
                llvm::GlobalValue::setPartition(v508, v486 + v488, v487, v485);
                v8 = (uint64_t)v552;
              }
              else
              {
                v8 = (uint64_t)v552;
                v483 = (uint64_t *)v508;
              }
LABEL_1117:
              llvm::BitcodeReaderValueList::push_back(v546, (llvm::Value *)v483, v489);
              if (v484 || v482 || v526)
              if (!v490)
              {
                *((_DWORD *)v498 + 10) |= 0x1000000u;
                std::vector<llvm::Function *>::push_back[abi:nn180100](v528, &v573);
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(v527, (uint64_t *)&v573)[1] = 0;
              }
              *a1 = 0;
              v21 = (void **)v553;
              goto LABEL_876;
            }
          }
          v484 = 0;
          goto LABEL_1115;
        }
        if (v455)
        {
          v456 = llvm::Attribute::get(*((uint64_t **)v552 + 53), 70, v455);
          LODWORD(v582.__first_) = 0;
          *v494 = (uint64_t)llvm::AttributeList::addParamAttribute(v494, **v508, &v582, 1, v456);
          goto LABEL_1049;
        }
        v472 = (std::string *)"Missing param element type for x86_intrcc upgrade";
LABEL_1074:
        v582.__first_ = v472;
        LOWORD(v582.__end_cap_.__value_) = 259;
        v234 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
LABEL_608:
LABEL_877:
        if (*a1)
          goto LABEL_59;
LABEL_878:
        v24 = 0;
        LODWORD(v561) = 0;
LABEL_879:
        v21 = (void **)v553;
LABEL_880:
        if ((v564 & 1) != 0)
        {
          v376 = v563;
          v563 = 0;
          if (v376)
            (*(void (**)(void *))(*(_QWORD *)v376 + 8))(v376);
        }
LABEL_41:
        if ((v559 & 1) != 0)
        {
          v25 = v558;
          v558 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        if ((v24 | 2) == 2)
          continue;
        if (SHIBYTE(v555.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v555.__r_.__value_.__l.__data_);
        if (v560 != v562)
          free(v560);
        return;
      case 9:
      case 14:
      case 18:
        v28 = v8;
        v29 = (char *)v560;
        v30 = v561;
        if (*(_BYTE *)(v28 + 392))
        {
          v31 = (std::string *)*((_QWORD *)v560 + 1);
          if ((unint64_t)v31 + *(_QWORD *)v560 > *(_QWORD *)(v28 + 384))
            goto LABEL_872;
          v32 = (const char *)(*((_QWORD *)v552 + 47) + *(_QWORD *)v560);
          v30 = v561 - 2;
          v29 = (char *)v560 + 16;
        }
        else
        {
          v31 = 0;
          v32 = "";
        }
        v206 = 3;
        if ((_DWORD)v563 != 9)
          v206 = 4;
        if (v30 >= v206)
        {
          v521 = (std::string *)v32;
          v540 = v30;
          LODWORD(v581.__first_) = *(_DWORD *)v29;
          v207 = (int)v581.__first_;
          if (v208)
          {
            v209 = (llvm::PointerType **)v208;
            if (v27 == 9)
            {
              if (*(_DWORD *)(v208 + 8) != 15)
              {
LABEL_883:
                v375 = (std::string *)"Invalid type for value";
                goto LABEL_873;
              }
              v510 = *(_DWORD *)(v208 + 8);
              if (!v210)
              {
                v375 = (std::string *)"Missing element type for old-style indirect symbol";
                goto LABEL_873;
              }
              v211 = (llvm::Type *)(v510 >> 8);
              *(_QWORD *)v511 = *((_QWORD *)v29 + 1);
              v515 = (llvm::PointerType **)v210;
              v212 = *((_QWORD *)v29 + 2);
              v506 = 3;
              v213 = 1;
            }
            else
            {
              v211 = (llvm::Type *)*((unsigned int *)v29 + 2);
              v212 = *((_QWORD *)v29 + 3);
              *(_QWORD *)v511 = *((_QWORD *)v29 + 2);
              v515 = v209;
              if (v27 != 14)
              {
                v499 = *((_QWORD *)v29 + 3);
                v337 = getDecodedLinkage(v212);
                LOWORD(v582.__end_cap_.__value_) = 261;
                v582.__first_ = v521;
                v582.__begin_ = v31;
                v311 = llvm::GlobalIFunc::create(v515, v211, v337, (const llvm::Twine *)&v582, 0, *((_QWORD *)v552 + 54));
                v313 = 4;
                v312 = 2;
LABEL_806:
                v338 = v540;
                if (v540 == v313)
                {
                  v339 = v313;
                }
                else
                {
                  v339 = v312 + 3;
                  if ((*(_DWORD *)(v311 + 32) & 0xFu) - 7 >= 2)
                  {
                    v340 = *(_QWORD *)&v29[8 * v313];
                    if ((_DWORD)v340 == 2)
                      v341 = 2;
                    else
                      v341 = (_DWORD)v340 == 1;
                    llvm::GlobalValue::setVisibility(v311, v341);
                    v338 = v540;
                  }
                }
                if (v27 != 14 && v27 != 9)
                {
                  v21 = (void **)v553;
                  goto LABEL_847;
                }
                if (v338 == v339)
                {
                  v342 = *(_DWORD *)(v311 + 32);
                  if ((v342 & 0xF) - 7 >= 2)
                  {
                    if ((_DWORD)v499 == 5)
                    {
                      v343 = 256;
                      v21 = (void **)v553;
                    }
                    else
                    {
                      v21 = (void **)v553;
                      if ((_DWORD)v499 != 6)
                        goto LABEL_836;
                      v343 = 512;
                    }
                    v342 = v343 | v342 & 0xFFFFFCFF;
                    *(_DWORD *)(v311 + 32) = v342;
LABEL_836:
                    if (v338 == v339)
                    {
                      v352 = v338;
                    }
                    else
                    {
                      v352 = v339 + 1;
                      v353 = *(_QWORD *)&v29[8 * v339];
                      if (v353 >= 5)
                        v354 = 1024;
                      else
                        v354 = (_DWORD)v353 << 10;
                      v342 = v354 | v342 & 0xFFFFE3FF;
                      *(_DWORD *)(v311 + 32) = v342;
                      ++v339;
                    }
                    if (v338 != v352)
                    {
                      ++v339;
                      v355 = *(_QWORD *)&v29[8 * v352];
                      if ((_DWORD)v355 == 2)
                        v356 = 64;
                      else
                        v356 = ((_DWORD)v355 == 1) << 7;
                      *(_DWORD *)(v311 + 32) = v356 | v342 & 0xFFFFFF3F;
                    }
LABEL_847:
                    if (v338 != v339)
                    {
                      v357 = *(_QWORD *)&v29[8 * v339++];
                      *(_DWORD *)(v311 + 32) = *(_DWORD *)(v311 + 32) & 0xFFFFBFFF | (((_DWORD)v357 == 1) << 14);
                    }
                    inferDSOLocal(v311);
                    if (v540 > v339 + 1)
                      llvm::GlobalValue::setPartition((_QWORD *)v311, *((_QWORD *)v552 + 47) + *(_QWORD *)&v29[8 * v339], *(_QWORD *)&v29[8 * v339 + 8], v358);
                    v8 = (uint64_t)v552;
                    llvm::BitcodeReaderValueList::push_back(v546, (llvm::Value *)v311, v359);
                    v360 = *((_QWORD *)v552 + 175);
                    v361 = *((_QWORD *)v552 + 176);
                    if (v360 >= v361)
                    {
                      v363 = *((_QWORD *)v552 + 174);
                      v364 = (uint64_t)(v360 - v363) >> 4;
                      v365 = v364 + 1;
                      if ((unint64_t)(v364 + 1) >> 60)
                        goto LABEL_1130;
                      v366 = v361 - v363;
                      if (v366 >> 3 > v365)
                        v365 = v366 >> 3;
                      if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF0)
                        v367 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v367 = v365;
                      if (v367)
                        v367 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v367);
                      else
                        v368 = 0;
                      v383 = v367 + 16 * v364;
                      *(_QWORD *)v383 = v311;
                      *(_DWORD *)(v383 + 8) = v511[0];
                      v384 = (char *)*((_QWORD *)v552 + 175);
                      v385 = (char *)*((_QWORD *)v552 + 174);
                      v386 = v383;
                      if (v384 == v385)
                      {
                        v22 = v551;
                      }
                      else
                      {
                        v22 = v551;
                        do
                        {
                          *(_OWORD *)(v386 - 16) = *((_OWORD *)v384 - 1);
                          v386 -= 16;
                          v384 -= 16;
                        }
                        while (v384 != v385);
                        v384 = (char *)*((_QWORD *)v552 + 174);
                      }
                      *((_QWORD *)v552 + 174) = v386;
                      v362 = v383 + 16;
                      *((_QWORD *)v552 + 175) = v383 + 16;
                      *((_QWORD *)v552 + 176) = v367 + 16 * v368;
                      if (v384)
                        operator delete(v384);
                    }
                    else
                    {
                      *(_QWORD *)v360 = v311;
                      *(_DWORD *)(v360 + 8) = v511[0];
                      v362 = v360 + 16;
                      v22 = v551;
                    }
                    *((_QWORD *)v552 + 175) = v362;
                    *a1 = 0;
                    goto LABEL_877;
                  }
                }
                else
                {
                  v342 = *(_DWORD *)(v311 + 32);
                  if ((v342 & 0xF) - 7 >= 2)
                  {
                    v350 = *(_QWORD *)&v29[8 * v339];
                    if ((_DWORD)v350 == 2)
                      v351 = 512;
                    else
                      v351 = ((_DWORD)v350 == 1) << 8;
                    v342 = v351 | v342 & 0xFFFFFCFF;
                    *(_DWORD *)(v311 + 32) = v342;
                  }
                  ++v339;
                }
                v21 = (void **)v553;
                goto LABEL_836;
              }
              v506 = 4;
              v213 = 2;
            }
            LODWORD(v499) = v212;
            v503 = v213;
            v310 = getDecodedLinkage(v212);
            LOWORD(v582.__end_cap_.__value_) = 261;
            v582.__first_ = v521;
            v582.__begin_ = v31;
            v311 = llvm::GlobalAlias::create(v515, v211, v310, (const llvm::Twine *)&v582, *((_QWORD *)v552 + 54));
            v312 = v503;
            v313 = v506;
            goto LABEL_806;
          }
        }
LABEL_872:
        v375 = (std::string *)"Invalid record";
        goto LABEL_873;
      case 11:
        memset(&v581, 0, 24);
        std::string::append[abi:nn180100]<unsigned long long const*,0>((std::string *)&v581, (std::string *)v560, (std::string *)((char *)v560 + 8 * v561));
        v227 = *(_QWORD *)(v8 + 504);
        v226 = *(_QWORD *)(v8 + 512);
        if (v227 >= v226)
        {
          v248 = *(_QWORD *)(v8 + 496);
          v249 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227 - v248) >> 3);
          v250 = v249 + 1;
          if (v249 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_1130;
          v251 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v226 - v248) >> 3);
          if (2 * v251 > v250)
            v250 = 2 * v251;
          if (v251 >= 0x555555555555555)
            v252 = 0xAAAAAAAAAAAAAAALL;
          else
            v252 = v250;
          v582.__end_cap_.__value_ = v548;
          if (v252)
          {
            v253 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v548, v252);
            v255 = v254;
          }
          else
          {
            v253 = 0;
            v255 = 0;
          }
          v320 = (std::string *)&v253[24 * v249];
          if (SHIBYTE(v581.__end_) < 0)
          {
            std::string::__init_copy_ctor_external(v320, (const std::string::value_type *)v581.__first_, (std::string::size_type)v581.__begin_);
          }
          else
          {
            v321 = *(_OWORD *)&v581.__first_;
            v320->__r_.__value_.__r.__words[2] = (std::string::size_type)v581.__end_;
            *(_OWORD *)&v320->__r_.__value_.__l.__data_ = v321;
          }
          v328 = *((_QWORD *)v552 + 62);
          v327 = *((_QWORD *)v552 + 63);
          if (v327 == v328)
          {
            v332 = vdupq_n_s64(v327);
            v329 = v320;
            v331 = v552;
          }
          else
          {
            v329 = v320;
            do
            {
              v330 = *(_OWORD *)(v327 - 24);
              v329[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v327 - 8);
              *(_OWORD *)&v329[-1].__r_.__value_.__l.__data_ = v330;
              --v329;
              *(_QWORD *)(v327 - 16) = 0;
              *(_QWORD *)(v327 - 8) = 0;
              *(_QWORD *)(v327 - 24) = 0;
              v327 -= 24;
            }
            while (v327 != v328);
            v331 = v552;
            v332 = *((int64x2_t *)v552 + 31);
          }
          v317 = v320 + 1;
          *((_QWORD *)v331 + 62) = v329;
          *((_QWORD *)v331 + 63) = v317;
          *(int64x2_t *)&v582.__begin_ = v332;
          v335 = (std::string *)*((_QWORD *)v331 + 64);
          *((_QWORD *)v331 + 64) = &v253[24 * v255];
          v582.__end_cap_.__value_ = v335;
          v582.__first_ = (std::__split_buffer<std::string>::pointer)v332.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v582);
          v8 = (uint64_t)v331;
          v22 = v551;
        }
        else
        {
          if (SHIBYTE(v581.__end_) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v8 + 504), (const std::string::value_type *)v581.__first_, (std::string::size_type)v581.__begin_);
          }
          else
          {
            v228 = *(_OWORD *)&v581.__first_;
            *(_QWORD *)(v227 + 16) = v581.__end_;
            *(_OWORD *)v227 = v228;
          }
          v317 = (std::string *)(v227 + 24);
        }
        *(_QWORD *)(v8 + 504) = v317;
LABEL_800:
        if (SHIBYTE(v581.__end_) < 0)
        {
          v258 = v581.__first_;
LABEL_802:
          operator delete(v258);
        }
        goto LABEL_878;
      case 12:
        v229 = v560;
        v230 = v561;
        v231 = *(unsigned __int8 *)(v8 + 392);
        if (*(_BYTE *)(v8 + 392))
        {
          v232 = *((_QWORD *)v560 + 1);
          if (v232 + *(_QWORD *)v560 > *(_QWORD *)(v8 + 384))
            goto LABEL_607;
          v233 = (uint64_t *)(*(_QWORD *)(v8 + 376) + *(_QWORD *)v560);
          v230 = v561 - 2;
          v229 = (char *)v560 + 16;
          if (v561 == 2)
            goto LABEL_607;
        }
        else
        {
          v232 = 0;
          v233 = (uint64_t *)"";
          if (!(_DWORD)v561)
          {
LABEL_607:
            v582.__first_ = (std::__split_buffer<std::string>::pointer)"Invalid record";
            LOWORD(v582.__end_cap_.__value_) = 259;
            v234 = (_anonymous_namespace_::BitcodeReaderBase *)a1;
            v21 = (void **)v553;
            goto LABEL_608;
          }
        }
        if ((*v229 - 2) >= 4)
          v268 = 0;
        else
          v268 = *v229 - 1;
        memset(&v581, 0, 24);
        if (v231)
          goto LABEL_670;
        if (v230 > 1)
        {
          v382 = v229[2];
          if (v382 <= v230 - 2)
          {
            std::string::reserve((std::string *)&v581, v229[2]);
            if (v382)
            {
              for (j = 0; j != v382; ++j)
                std::string::push_back((std::string *)&v581, *(_QWORD *)&v229[2 * (j + 2)]);
            }
            if (SHIBYTE(v581.__end_) >= 0)
              v233 = (uint64_t *)&v581;
            else
              v233 = (uint64_t *)v581.__first_;
            if (SHIBYTE(v581.__end_) >= 0)
              v232 = HIBYTE(v581.__end_);
            else
              v232 = (unint64_t)v581.__begin_;
            v8 = (uint64_t)v552;
LABEL_670:
            inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)(v8 + 432), v233, v232);
            v270 = inserted;
            *((_DWORD *)inserted + 2) = v268;
            v271 = *(char ***)(v8 + 800);
            v272 = *(_QWORD *)(v8 + 808);
            if ((unint64_t)v271 >= v272)
            {
              v344 = *(_QWORD *)(v8 + 792);
              v345 = ((uint64_t)v271 - v344) >> 3;
              v22 = v551;
              if ((unint64_t)(v345 + 1) >> 61)
                goto LABEL_1130;
              v346 = v272 - v344;
              v347 = v346 >> 2;
              if (v346 >> 2 <= (unint64_t)(v345 + 1))
                v347 = v345 + 1;
              if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFF8)
                v348 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              if (v348)
                v348 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v348);
              else
                v349 = 0;
              v387 = (char **)(v348 + 8 * v345);
              *v387 = v270;
              v273 = v387 + 1;
              v388 = *(char **)(v8 + 800);
              v389 = *(char **)(v8 + 792);
              if (v388 != v389)
              {
                do
                {
                  v390 = (char *)*((_QWORD *)v388 - 1);
                  v388 -= 8;
                  *--v387 = v390;
                }
                while (v388 != v389);
                v388 = *(char **)(v8 + 792);
              }
              *(_QWORD *)(v8 + 792) = v387;
              *(_QWORD *)(v8 + 800) = v273;
              *(_QWORD *)(v8 + 808) = v348 + 8 * v349;
              if (v388)
                operator delete(v388);
            }
            else
            {
              *v271 = inserted;
              v273 = v271 + 1;
              v22 = v551;
            }
            *(_QWORD *)(v8 + 800) = v273;
            *a1 = 0;
            v21 = (void **)v553;
LABEL_912:
            if (SHIBYTE(v581.__end_) < 0)
              operator delete(v581.__first_);
            goto LABEL_877;
          }
          v336 = (std::string *)"Comdat name size too large";
        }
        else
        {
          v336 = (std::string *)"Invalid record";
        }
        v582.__first_ = v336;
        LOWORD(v582.__end_cap_.__value_) = 259;
        v21 = (void **)v553;
        v22 = v551;
        goto LABEL_912;
      case 13:
        if ((_DWORD)v561)
        {
          *(_QWORD *)(v8 + 464) = *(_QWORD *)v560 - 1;
          goto LABEL_878;
        }
        v215 = (std::string *)"Invalid record";
LABEL_673:
        v582.__first_ = v215;
        LOWORD(v582.__end_cap_.__value_) = 259;
        v21 = (void **)v553;
        goto LABEL_59;
      case 16:
        v582.__first_ = (std::__split_buffer<std::string>::pointer)&v582.__end_cap_;
        *(_OWORD *)&v582.__begin_ = xmmword_24AA2AC90;
        llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v582, (char *)v560, (char *)v560 + 8 * v561);
        llvm::Module::setSourceFileName(*(_QWORD *)(v8 + 432), v582.__first_, (size_t)v582.__begin_);
        if ((std::__compressed_pair<std::string *> *)v582.__first_ != &v582.__end_cap_)
          free(v582.__first_);
        goto LABEL_878;
      default:
        goto LABEL_878;
    }
  }
}

llvm::DataLayout *`anonymous namespace'::BitcodeReader::parseModule(unsigned long long,BOOL,llvm::ParserCallbacks)::$_0::operator()(llvm::DataLayout *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::formatv_object_base *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::formatv_object_base *v11;
  llvm::formatv_object_base *v12;
  int v13;
  llvm::formatv_object_base *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  unint64_t v34;
  std::string::size_type v35;
  _anonymous_namespace_::BitcodeReader *v36;
  _QWORD v37[2];
  _QWORD v38[2];
  std::string __str;
  char v40;
  char v41;
  uint64_t v42;

  v2 = result;
  v42 = *MEMORY[0x24BDAC8D0];
  if (**(_BYTE **)a2)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v4 = *(_QWORD *)(a2 + 16);
  **(_BYTE **)a2 = 1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = *(llvm::formatv_object_base **)(a2 + 8);
  else
    v7 = *(llvm::formatv_object_base **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v4 + 432);
  v12 = *(llvm::formatv_object_base **)(v9 + 208);
  v10 = v9 + 208;
  v11 = v12;
  v13 = *(char *)(v10 + 23);
  if (v13 >= 0)
    v14 = (llvm::formatv_object_base *)v10;
  else
    v14 = v11;
  v15 = *(_QWORD *)(v10 + 8);
  if (v13 >= 0)
    v16 = v13;
  else
    v16 = v15;
  llvm::UpgradeDataLayoutString(v7, v8, v14, v16, (std::string::size_type)&__str);
  v17 = *(_QWORD *)(a2 + 8);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  v18 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_QWORD *)(v17 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *(_OWORD *)v17 = v18;
  v19 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v19 + 32))
  {
    v20 = *(_QWORD *)(v4 + 432);
    v23 = *(_QWORD *)(v20 + 208);
    v21 = v20 + 208;
    v22 = v23;
    v24 = *(char *)(v21 + 23);
    if (v24 >= 0)
      v22 = v21;
    v25 = *(_QWORD *)(v21 + 8);
    if (v24 >= 0)
      v25 = v24;
    v26 = *(uint64_t ***)(a2 + 8);
    LODWORD(v27) = *((char *)v26 + 23);
    v28 = (int)v27 < 0;
    v29 = v26[1];
    if ((int)v27 < 0)
      v26 = (uint64_t **)*v26;
    v27 = (uint64_t *)v27;
    if (v28)
      v27 = v29;
    v30 = *(_QWORD *)(v19 + 24);
    v38[0] = v22;
    v38[1] = v25;
    v37[0] = v26;
    v37[1] = v27;
    if (!v30)
    {
      v36 = (_anonymous_namespace_::BitcodeReader *)std::__throw_bad_function_call[abi:nn180100]();
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v30 + 48))(&__str, v30, v38, v37);
    if (v40)
    {
      std::string::operator=(*(std::string **)(a2 + 8), &__str);
      if (v40)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(char *)(v31 + 23);
  if (v32 >= 0)
    v33 = *(void **)(a2 + 8);
  else
    v33 = *(void **)v31;
  if (v32 >= 0)
    v34 = *(unsigned __int8 *)(v31 + 23);
  else
    v34 = *(_QWORD *)(v31 + 8);
  llvm::DataLayout::parse(v33, v34, (llvm::DataLayout *)&__str);
  if ((v41 & 1) != 0)
  {
    v35 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    llvm::DataLayout::operator=(*(_QWORD *)(v4 + 432) + 256, (uint64_t)&__str);
    v35 = 0;
  }
  *v2 = v35;
  return llvm::Expected<llvm::DataLayout>::~Expected((llvm::DataLayout *)&__str);
}

void `anonymous namespace'::BitcodeReader::globalCleanup(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  llvm::GlobalVariable *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Function *v8;
  llvm::Function **v9;
  llvm::Function *v10;
  llvm::Function *v11;
  char v12;
  llvm::formatv_object_base *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t ***v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ValueSymbolTable *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  llvm::Function *v41;
  llvm::formatv_object_base *v42[4];
  __int16 v43;

  if (*(_QWORD *)this)
    return;
  if (*(_QWORD *)(a2 + 1368) != *(_QWORD *)(a2 + 1376) || *(_QWORD *)(a2 + 1392) != *(_QWORD *)(a2 + 1400))
  {
    v42[0] = (llvm::formatv_object_base *)"Malformed global initializer set";
    v43 = 259;
    return;
  }
  v5 = *(_QWORD *)(a2 + 432);
  v6 = v5 + 24;
  v7 = *(_QWORD *)(v5 + 32);
  if (v7 == v5 + 24)
    goto LABEL_22;
  do
  {
    if (v7)
      v8 = (llvm::Function *)(v7 - 56);
    else
      v8 = 0;
    llvm::MetadataLoader::MetadataLoaderImpl::upgradeDeclareExpressions(*(llvm::MetadataLoader::MetadataLoaderImpl **)(a2 + 776), v8);
    v41 = 0;
    if (llvm::UpgradeIntrinsicFunction(v8, &v41, v9))
    {
      v11 = v41;
      v42[0] = 0;
      v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(a2 + 1536), *(_DWORD *)(a2 + 1552), (uint64_t)v8, v42);
      v13 = v42[0];
      if ((v12 & 1) != 0)
      {
LABEL_17:
        *((_QWORD *)v13 + 1) = v11;
        goto LABEL_18;
      }
      v14 = *(_DWORD *)(a2 + 1544);
      v10 = (llvm::Function *)*(unsigned int *)(a2 + 1552);
      if (4 * v14 + 4 >= (3 * (_DWORD)v10))
      {
        LODWORD(v10) = 2 * (_DWORD)v10;
      }
      else if ((int)v10 + ~v14 - *(_DWORD *)(a2 + 1548) > v10 >> 3)
      {
LABEL_14:
        ++*(_DWORD *)(a2 + 1544);
        if (*(_QWORD *)v13 != -4096)
          --*(_DWORD *)(a2 + 1548);
        *(_QWORD *)v13 = v8;
        *((_QWORD *)v13 + 1) = 0;
        goto LABEL_17;
      }
      llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(a2 + 1536, (int)v10);
      v42[0] = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(a2 + 1536), *(_DWORD *)(a2 + 1552), (uint64_t)v8, v42);
      v13 = v42[0];
      goto LABEL_14;
    }
LABEL_18:
    llvm::UpgradeFunctionAttributes(v8, v10);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != v6);
  v5 = *(_QWORD *)(a2 + 432);
LABEL_22:
  v15 = v5 + 8;
  v16 = *(_QWORD *)(v5 + 16);
  if (v16 == v5 + 8)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      if (v16)
        v20 = (uint64_t **)(v16 - 56);
      else
        v20 = 0;
      v21 = llvm::UpgradeGlobalVariable(v20, v4);
      if (v21)
      {
        v22 = v21;
        if (v18 >= v19)
        {
          v23 = (v18 - v17) >> 4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60)
            abort();
          if ((v19 - v17) >> 3 > v24)
            v24 = (v19 - v17) >> 3;
          if ((unint64_t)(v19 - v17) >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v26 = (char *)operator new(16 * v25);
          v27 = (uint64_t ***)&v26[16 * v23];
          *v27 = v20;
          v27[1] = (uint64_t **)v22;
          if (v18 == v17)
          {
            v29 = &v26[16 * v23];
          }
          else
          {
            v28 = &v26[16 * v23];
            do
            {
              v29 = v28 - 16;
              *((_OWORD *)v28 - 1) = *((_OWORD *)v18 - 1);
              v18 -= 16;
              v28 -= 16;
            }
            while (v18 != v17);
          }
          v19 = &v26[16 * v25];
          v18 = (char *)(v27 + 2);
          if (v17)
            operator delete(v17);
          v17 = v29;
        }
        else
        {
          *(_QWORD *)v18 = v20;
          *((_QWORD *)v18 + 1) = v21;
          v18 += 16;
        }
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != v15);
    if (v17 != v18)
    {
      v30 = v17;
      do
      {
        if (*(_QWORD *)v30)
          v31 = *(_QWORD *)v30 + 56;
        else
          v31 = 0;
        llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase(*(_QWORD *)(*(_QWORD *)v30 + 40) + 8, v31);
        v32 = *(_QWORD *)(a2 + 432);
        v33 = *((_QWORD *)v30 + 1);
        *(_QWORD *)(v33 + 40) = v32;
        if ((*(_BYTE *)(v33 + 23) & 0x10) != 0)
        {
          v34 = *(llvm::ValueSymbolTable **)(v32 + 112);
          if (v34)
            llvm::ValueSymbolTable::reinsertValue(v34, (uint64_t ***)v33);
        }
        v35 = *(_QWORD *)(v32 + 8);
        *(_QWORD *)(v33 + 56) = v35;
        *(_QWORD *)(v33 + 64) = v32 + 8;
        v36 = v33 + 56;
        *(_QWORD *)(v35 + 8) = v36;
        *(_QWORD *)(v32 + 8) = v36;
        v30 += 16;
      }
      while (v30 != v18);
    }
  }
  v37 = (_QWORD *)(a2 + 1368);
  v38 = *(void **)(a2 + 1368);
  v39 = a2 + 1392;
  v37[1] = 0;
  v37[2] = 0;
  *v37 = 0;
  if (v38)
    operator delete(v38);
  v40 = *(void **)v39;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)v39 = 0;
  if (v40)
    operator delete(v40);
  *(_QWORD *)this = 0;
  if (v17)
    operator delete(v17);
}

void `anonymous namespace'::BitcodeReader::resolveGlobalAndIndirectSymbolInits(_anonymous_namespace_::BitcodeReader *this, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _DWORD *v8;
  llvm::BasicBlock *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  char *v21;
  _OWORD *v22;
  llvm::BasicBlock *v23;
  llvm::Constant *v24;
  llvm::PointerType ***v25;
  int v26;
  uint64_t **v28;
  llvm::PointerType **v29;
  llvm::Constant *v30;
  llvm::Constant *v31;
  _OWORD *v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  char *v43;
  _OWORD *v44;
  int v45;
  llvm::BasicBlock *v46;
  uint64_t v47;
  int v48;
  llvm::BasicBlock *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  llvm::BasicBlock *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  __int128 v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  __int128 v67;
  const llvm::Twine *v68;
  char *v69;
  llvm::Constant *v71;
  char v72;
  __int16 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)a2[171];
  v4 = (uint64_t *)a2[172];
  *(_OWORD *)(a2 + 171) = 0u;
  a2[173] = 0;
  v5 = (uint64_t *)a2[174];
  v6 = (uint64_t *)a2[175];
  *((_OWORD *)a2 + 87) = 0u;
  a2[176] = 0;
  v7 = (_QWORD *)a2[177];
  a2[177] = 0;
  v8 = (_DWORD *)a2[178];
  a2[179] = 0;
  a2[178] = 0;
  while (v3 != v4)
  {
    v9 = (llvm::BasicBlock *)*((unsigned int *)v4 - 2);
    v4 -= 2;
    if (v9 >= ((a2[90] - a2[89]) >> 5))
    {
      v10 = (_OWORD *)a2[172];
      v11 = a2[173];
      if ((unint64_t)v10 >= v11)
      {
        v13 = a2[171];
        v14 = ((uint64_t)v10 - v13) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
LABEL_103:
          abort();
        v16 = v11 - v13;
        if (v16 >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v17);
        else
          v18 = 0;
        v19 = (_OWORD *)(v17 + 16 * v14);
        *v19 = *(_OWORD *)v4;
        v20 = (char *)a2[172];
        v21 = (char *)a2[171];
        v22 = v19;
        if (v20 != v21)
        {
          do
          {
            *--v22 = *((_OWORD *)v20 - 1);
            v20 -= 16;
          }
          while (v20 != v21);
          v20 = (char *)a2[171];
        }
        a2[171] = v22;
        v12 = v19 + 1;
        a2[172] = v19 + 1;
        a2[173] = v17 + 16 * v18;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v10 = *(_OWORD *)v4;
        v12 = v10 + 1;
      }
      a2[172] = v12;
    }
    else
    {
      if ((v72 & 1) != 0)
      {
        *(_QWORD *)this = v71;
        if (!v7)
          goto LABEL_94;
        goto LABEL_93;
      }
      llvm::GlobalVariable::setInitializer(*v4, v71);
    }
  }
  if (v5 == v6)
  {
LABEL_55:
    if (v7 == (_QWORD *)v8)
    {
LABEL_88:
      *(_QWORD *)this = 0;
      if (!v7)
        goto LABEL_94;
LABEL_93:
      operator delete(v7);
      goto LABEL_94;
    }
    while (1)
    {
      v45 = *(v8 - 4);
      if (v45)
      {
        v46 = (llvm::BasicBlock *)(v45 - 1);
        if (v46 < ((a2[90] - a2[89]) >> 5))
        {
          v24 = v71;
          if ((v72 & 1) != 0)
            goto LABEL_90;
          v47 = *((_QWORD *)v8 - 3);
          llvm::Function::setHungoffOperand<0>(v47, (uint64_t)v71);
          *(_WORD *)(v47 + 18) = *(_WORD *)(v47 + 18) & 0xFFF7 | (8 * (v24 != 0));
          *(v8 - 4) = 0;
        }
      }
      v48 = *(v8 - 3);
      if (v48)
      {
        v49 = (llvm::BasicBlock *)(v48 - 1);
        if (v49 < ((a2[90] - a2[89]) >> 5))
        {
          v24 = v71;
          if ((v72 & 1) != 0)
            goto LABEL_90;
          v50 = *((_QWORD *)v8 - 3);
          llvm::Function::setHungoffOperand<1>(v50, (uint64_t)v71);
          v48 = 0;
          *(_WORD *)(v50 + 18) = *(_WORD *)(v50 + 18) & 0xFFFD | (2 * (v24 != 0));
          *(v8 - 3) = 0;
        }
      }
      v51 = v8 - 6;
      v52 = *(v8 - 2);
      if (v52)
      {
        v53 = (llvm::BasicBlock *)(v52 - 1);
        if (v53 >= ((a2[90] - a2[89]) >> 5))
          goto LABEL_69;
        v24 = v71;
        if ((v72 & 1) != 0)
          goto LABEL_90;
        v54 = *((_QWORD *)v8 - 3);
        llvm::Function::setHungoffOperand<2>(v54, (uint64_t)v71);
        *(_WORD *)(v54 + 18) = *(_WORD *)(v54 + 18) & 0xFFFB | (4 * (v24 != 0));
        *(v8 - 2) = 0;
        v48 = *(v8 - 3);
      }
      if (*(v8 - 4) | v48)
      {
LABEL_69:
        v55 = (_QWORD *)a2[178];
        v56 = a2[179];
        if ((unint64_t)v55 >= v56)
        {
          v59 = (_QWORD *)a2[177];
          v60 = 0xAAAAAAAAAAAAAAABLL * (v55 - v59) + 1;
          if (v60 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_103;
          v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)v59) >> 3);
          if (2 * v61 > v60)
            v60 = 2 * v61;
          if (v61 >= 0x555555555555555)
            v62 = 0xAAAAAAAAAAAAAAALL;
          else
            v62 = v60;
          if (v62)
          {
            if (v62 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v63 = (char *)operator new(24 * v62);
          }
          else
          {
            v63 = 0;
          }
          v64 = *(_OWORD *)v51;
          v65 = &v63[8 * (v55 - v59)];
          *((_QWORD *)v65 + 2) = v51[2];
          *(_OWORD *)v65 = v64;
          v66 = v65;
          if (v55 != v59)
          {
            do
            {
              v67 = *(_OWORD *)(v55 - 3);
              *((_QWORD *)v66 - 1) = *(v55 - 1);
              *(_OWORD *)(v66 - 24) = v67;
              v66 -= 24;
              v55 -= 3;
            }
            while (v55 != v59);
            v55 = (_QWORD *)a2[177];
          }
          a2[177] = v66;
          v58 = v65 + 24;
          a2[178] = v65 + 24;
          a2[179] = &v63[24 * v62];
          if (v55)
            operator delete(v55);
        }
        else
        {
          v57 = *(_OWORD *)v51;
          v55[2] = *((_QWORD *)v8 - 1);
          *(_OWORD *)v55 = v57;
          v58 = v55 + 3;
        }
        a2[178] = v58;
      }
      v8 = v51;
      if (v7 == v51)
        goto LABEL_88;
    }
  }
  while (1)
  {
    v23 = (llvm::BasicBlock *)*((unsigned int *)v6 - 2);
    v6 -= 2;
    if (v23 >= ((a2[90] - a2[89]) >> 5))
    {
      v32 = (_OWORD *)a2[175];
      v33 = a2[176];
      if ((unint64_t)v32 >= v33)
      {
        v35 = a2[174];
        v36 = ((uint64_t)v32 - v35) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          goto LABEL_103;
        v38 = v33 - v35;
        if (v38 >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
          v39 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v39);
        else
          v40 = 0;
        v41 = (_OWORD *)(v39 + 16 * v36);
        *v41 = *(_OWORD *)v6;
        v42 = (char *)a2[175];
        v43 = (char *)a2[174];
        v44 = v41;
        if (v42 != v43)
        {
          do
          {
            *--v44 = *((_OWORD *)v42 - 1);
            v42 -= 16;
          }
          while (v42 != v43);
          v42 = (char *)a2[174];
        }
        a2[174] = v44;
        v34 = v41 + 1;
        a2[175] = v41 + 1;
        a2[176] = v39 + 16 * v40;
        if (v42)
          operator delete(v42);
      }
      else
      {
        *v32 = *(_OWORD *)v6;
        v34 = v32 + 1;
      }
      a2[175] = v34;
      goto LABEL_54;
    }
    v24 = v71;
    if ((v72 & 1) != 0)
    {
LABEL_90:
      *(_QWORD *)this = v24;
      if (v7)
        goto LABEL_93;
      goto LABEL_94;
    }
    v25 = (llvm::PointerType ***)*v6;
    v26 = *(unsigned __int8 *)(*v6 + 16);
    if (*v6 && v26 == 1)
      break;
    if (!v25 || v26 != 2)
    {
      v68 = (const llvm::Twine *)(a2 + 1);
      v69 = "Expected an alias or an ifunc";
      goto LABEL_101;
    }
    v28 = (uint64_t **)llvm::PointerType::get(v25[3], 0);
    v29 = (llvm::PointerType **)llvm::FunctionType::get(v28, 0, 0, 0);
    v30 = (llvm::Constant *)llvm::PointerType::get(v29, (llvm::Type *)(*((_DWORD *)*v25 + 2) >> 8));
    if (*(llvm::Constant **)v24 != v30)
    {
      getFoldedCast((llvm *)0x31, (uint64_t)v24, v30, 0);
      v24 = v31;
    }
    llvm::GlobalIFunc::setResolver((uint64_t)v25, (uint64_t)v24);
LABEL_54:
    if (v5 == v6)
      goto LABEL_55;
  }
  if (*(llvm::PointerType ***)v71 == *v25)
  {
    llvm::GlobalIFunc::setResolver(*v6, (uint64_t)v71);
    goto LABEL_54;
  }
  v68 = (const llvm::Twine *)(a2 + 1);
  v69 = "Alias and aliasee types don't match";
LABEL_101:
  v71 = (llvm::Constant *)v69;
  v73 = 259;
  if (v7)
    goto LABEL_93;
LABEL_94:
  if (v5)
    operator delete(v5);
  if (v3)
    operator delete(v3);
}

_QWORD *llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t llvm::Expected<std::optional<llvm::BitstreamBlockInfo>>::~Expected(uint64_t a1)
{
  void *v2;
  void **v4;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v2 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v4 = (void **)a1;
    std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned int,llvm::AttributeList>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::AttributeList>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::AttributeList>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void `anonymous namespace'::BitcodeReader::parseAttrKind(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4;
  _QWORD v5[4];
  __int16 v6;
  llvm::formatv_object_base *v7[4];
  __int16 v8;
  uint64_t v9;

  v9 = a3;
  v4 = 75;
  switch(a3)
  {
    case 1:
      goto LABEL_86;
    case 2:
      v4 = 3;
      goto LABEL_86;
    case 3:
      v4 = 70;
      goto LABEL_86;
    case 4:
      v4 = 12;
      goto LABEL_86;
    case 5:
      v4 = 11;
      goto LABEL_86;
    case 6:
      v4 = 14;
      goto LABEL_86;
    case 7:
      v4 = 16;
      goto LABEL_86;
    case 8:
      v4 = 17;
      goto LABEL_86;
    case 9:
      v4 = 18;
      goto LABEL_86;
    case 10:
      v4 = 19;
      goto LABEL_86;
    case 11:
      v4 = 21;
      goto LABEL_86;
    case 12:
      v4 = 23;
      goto LABEL_86;
    case 13:
      v4 = 25;
      goto LABEL_86;
    case 14:
      v4 = 26;
      goto LABEL_86;
    case 15:
      v4 = 37;
      goto LABEL_86;
    case 16:
      v4 = 30;
      goto LABEL_86;
    case 17:
      v4 = 31;
      goto LABEL_86;
    case 18:
      v4 = 36;
      goto LABEL_86;
    case 19:
      v4 = 41;
      goto LABEL_86;
    case 20:
      v4 = 44;
      goto LABEL_86;
    case 21:
      v4 = 45;
      goto LABEL_86;
    case 22:
      v4 = 46;
      goto LABEL_86;
    case 23:
      v4 = 47;
      goto LABEL_86;
    case 24:
      v4 = 48;
      goto LABEL_86;
    case 25:
      v4 = 82;
      goto LABEL_86;
    case 26:
      v4 = 59;
      goto LABEL_86;
    case 27:
      v4 = 60;
      goto LABEL_86;
    case 28:
      v4 = 61;
      goto LABEL_86;
    case 29:
      v4 = 74;
      goto LABEL_86;
    case 30:
      v4 = 50;
      goto LABEL_86;
    case 31:
      v4 = 54;
      goto LABEL_86;
    case 32:
      v4 = 53;
      goto LABEL_86;
    case 33:
      v4 = 83;
      goto LABEL_86;
    case 34:
      v4 = 68;
      goto LABEL_86;
    case 35:
      v4 = 4;
      goto LABEL_86;
    case 36:
      v4 = 5;
      goto LABEL_86;
    case 37:
      v4 = 42;
      goto LABEL_86;
    case 38:
      v4 = 72;
      goto LABEL_86;
    case 39:
      v4 = 38;
      goto LABEL_86;
    case 40:
      v4 = 13;
      goto LABEL_86;
    case 41:
      v4 = 78;
      goto LABEL_86;
    case 42:
      v4 = 79;
      goto LABEL_86;
    case 43:
      v4 = 6;
      goto LABEL_86;
    case 44:
      v4 = 49;
      goto LABEL_86;
    case 46:
      v4 = 65;
      goto LABEL_86;
    case 47:
      v4 = 64;
      goto LABEL_86;
    case 48:
      v4 = 29;
      goto LABEL_86;
    case 51:
      v4 = 77;
      goto LABEL_86;
    case 52:
      v4 = 67;
      goto LABEL_86;
    case 53:
      v4 = 57;
      goto LABEL_86;
    case 54:
      v4 = 62;
      goto LABEL_86;
    case 55:
      v4 = 51;
      goto LABEL_86;
    case 56:
      v4 = 22;
      goto LABEL_86;
    case 57:
      v4 = 40;
      goto LABEL_86;
    case 58:
      v4 = 55;
      goto LABEL_86;
    case 59:
      v4 = 58;
      goto LABEL_86;
    case 60:
      v4 = 10;
      goto LABEL_86;
    case 61:
      v4 = 66;
      goto LABEL_86;
    case 62:
      v4 = 24;
      goto LABEL_86;
    case 63:
      v4 = 34;
      goto LABEL_86;
    case 64:
      v4 = 52;
      goto LABEL_86;
    case 65:
      v4 = 73;
      goto LABEL_86;
    case 66:
      v4 = 27;
      goto LABEL_86;
    case 67:
      v4 = 39;
      goto LABEL_86;
    case 68:
      v4 = 35;
      goto LABEL_86;
    case 69:
      v4 = 69;
      goto LABEL_86;
    case 70:
      v4 = 15;
      goto LABEL_86;
    case 71:
      v4 = 20;
      goto LABEL_86;
    case 72:
      v4 = 9;
      goto LABEL_86;
    case 73:
      v4 = 28;
      goto LABEL_86;
    case 74:
      v4 = 84;
      goto LABEL_86;
    case 75:
      v4 = 63;
      goto LABEL_86;
    case 76:
      v4 = 33;
      goto LABEL_86;
    case 77:
      v4 = 71;
      goto LABEL_86;
    case 78:
      v4 = 7;
      goto LABEL_86;
    case 79:
      v4 = 32;
      goto LABEL_86;
    case 80:
      v4 = 1;
      goto LABEL_86;
    case 81:
      v4 = 2;
      goto LABEL_86;
    case 82:
      v4 = 76;
      goto LABEL_86;
    case 83:
      v4 = 43;
      goto LABEL_86;
    case 84:
      v4 = 8;
      goto LABEL_86;
    case 85:
      v4 = 56;
      goto LABEL_86;
    case 86:
      v4 = 80;
      goto LABEL_86;
    case 87:
      v4 = 81;
LABEL_86:
      *a4 = v4;
      *(_QWORD *)a1 = 0;
      break;
    default:
      *a4 = 0;
      v5[0] = "Unknown attribute kind (";
      v5[2] = &v9;
      v6 = 3075;
      v7[0] = (llvm::formatv_object_base *)v5;
      v7[2] = (llvm::formatv_object_base *)")";
      v8 = 770;
      break;
  }
}

unint64_t `anonymous namespace'::BitcodeReader::createIdentifiedStructType(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;

  v5 = llvm::StructType::create(a2, a3, a4);
  v6 = v5;
  v7 = (unint64_t *)a1[235];
  v8 = a1[236];
  if ((unint64_t)v7 >= v8)
  {
    v10 = a1[234];
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v8 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 236), v14);
    else
      v15 = 0;
    v16 = (unint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v9 = v16 + 1;
    v18 = (char *)a1[235];
    v19 = (char *)a1[234];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)a1[234];
    }
    a1[234] = v16;
    a1[235] = v9;
    a1[236] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[235] = v9;
  return v6;
}

void std::vector<`anonymous namespace'::BitcodeReader::FunctionOperandInfo>::push_back[abi:nn180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v7 = v14 + 24;
    if (v5 != v8)
    {
      do
      {
        v15 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v5 -= 24;
      }
      while (v5 != v8);
      v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[24 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
    v7 = v5 + 24;
  }
  a1[1] = v7;
}

uint64_t getDecodedLinkage(int a1)
{
  if ((a1 - 1) > 0x12)
    return 0;
  else
    return dword_24AA32678[a1 - 1];
}

uint64_t inferDSOLocal(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 32);
  if ((v2 & 0xFu) - 7 < 2)
    goto LABEL_5;
  if ((v2 & 0x30) != 0)
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      v2 = *(_DWORD *)(v1 + 32);
LABEL_5:
      *(_DWORD *)(v1 + 32) = v2 | 0x4000;
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v7 = v12;
  v8 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v10 = *(_DWORD *)(a2 + 8);
  if (4 * v10 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_10;
  }
  if (v8 + ~v10 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_10:
    llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(a2, v8);
    v12 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = 1;
LABEL_8:
  v11 = *(_QWORD *)a2 + 8 * v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v9;
  return result;
}

uint64_t std::function<void ()(llvm::Value *,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;

  v5 = a2;
  v4 = a3;
  if (!a1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x24A92ACB0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_251C1C268;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_251C1C268;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_0>,llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C1C2B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C1C2B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::callValueTypeCallback(llvm::Value *,unsigned int)::$_1>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, unsigned int *a3)
{
}

char **llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void **v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 24;
    v5 = 32 * v3;
    do
    {
      v7 = (void **)&v4[v5];
      std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v7);
      v5 -= 32;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C1C2F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C1C2F8;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_0>,llvm::Type * ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C1C340;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C1C340;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1,std::allocator<`anonymous namespace'::BitcodeReader::parseBitcodeInto(llvm::Module *,BOOL,BOOL,llvm::ParserCallbacks)::$_1>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int *a2, unsigned int *a3)
{
}

uint64_t _GLOBAL__sub_I_BitcodeReader_cpp()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_24, 0, 0);
  byte_257963610 = 0;
  qword_257963618 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257963620 = 0;
  _MergedGlobals_24 = (uint64_t)off_251C123A8;
  qword_257963628 = (uint64_t)&off_251C12520;
  qword_257963630 = (uint64_t)&off_251C12410;
  qword_257963648 = (uint64_t)&qword_257963630;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"print-summary-global-ids", 0x18uLL);
  byte_257963610 = 0;
  word_257963620 = 256;
  word_25796359A = word_25796359A & 0xFF9F | 0x20;
  qword_2579635B0 = (uint64_t)"Print the global id for each value when reading the module summary";
  unk_2579635B8 = 66;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_24);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_24, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257963650, 0, 0);
  byte_2579636D0 = 0;
  qword_2579636D8 = (uint64_t)&off_251C12500;
  unk_2579636E0 = 0;
  qword_257963650 = (uint64_t)off_251C123A8;
  qword_2579636E8 = (uint64_t)&off_251C12520;
  qword_2579636F0[0] = &off_251C12410;
  qword_257963708 = (uint64_t)qword_2579636F0;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"expand-constant-exprs", 0x15uLL);
  word_25796365A = word_25796365A & 0xFF9F | 0x20;
  qword_257963670 = (uint64_t)"Expand constant expressions to instructions for testing purposes";
  unk_257963678 = 64;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257963650);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257963650, &dword_24A800000);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings(llvm::Twine *a1, int *a2, uint64_t a3, const char *a4, unint64_t a5, void (*a6)(uint64_t, const char *, unint64_t), uint64_t a7)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  llvm::formatv_object_base **v12;
  const char *v15;
  unint64_t v16;
  const char *v17;
  BOOL v18;
  const char *v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  char v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a3 != 2)
  {
    v11 = "Invalid record: metadata strings layout";
    goto LABEL_7;
  }
  v8 = *a2;
  if (!*a2)
  {
    v11 = "Invalid record: metadata strings with no strings";
    goto LABEL_7;
  }
  v9 = a2[2];
  v10 = a5 - v9;
  if (a5 < v9)
  {
    v11 = "Invalid record: metadata strings corrupt offset";
LABEL_7:
    v20 = v11;
    LOWORD(v24) = 259;
    v12 = (llvm::formatv_object_base **)&v20;
    goto LABEL_8;
  }
  v20 = a4;
  v21 = v9;
  v22 = 0;
  v23 = 0;
  v15 = &a4[v9];
  v24 = 0;
  while (v24 || v21 > v22)
  {
    llvm::SimpleBitstreamCursor::ReadVBR((llvm::SimpleBitstreamCursor *)&v20, 6u, (uint64_t)&v25);
    if ((v26 & 1) != 0)
    {
      v17 = v25;
      *(_QWORD *)a1 = v25;
      if (v17)
        return;
      v16 = 0;
    }
    else
    {
      v16 = v25;
      *(_QWORD *)a1 = 0;
    }
    v18 = v10 >= v16;
    v10 -= v16;
    if (!v18)
    {
      v19 = "Invalid record: metadata strings truncated chars";
      goto LABEL_22;
    }
    a6(a7, v15, v16);
    v15 += v16;
    if (!--v8)
    {
      *(_QWORD *)a1 = 0;
      return;
    }
  }
  v19 = "Invalid record: metadata strings bad length";
LABEL_22:
  v25 = v19;
  v27 = 259;
  v12 = (llvm::formatv_object_base **)&v25;
LABEL_8:
  error(a1, v12);
}

llvm::MDNode *`anonymous namespace'::BitcodeReaderMetadataList::getMDNodeFwdRefOrNull(_anonymous_namespace_::BitcodeReaderMetadataList *this, unsigned int a2)
{
  llvm::MDNode *result;
  llvm::MDNode *v3;

  if (result)
  {
    v3 = result;
    if (llvm::MDNode::classof(result))
      return v3;
    else
      return 0;
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments(llvm::MetadataLoader::MetadataLoaderImpl *this, uint64_t a2)
{
  int v2;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  llvm::formatv_object_base *v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::formatv_object_base *v13;
  char v14;
  llvm::formatv_object_base *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::formatv_object_base *v24;
  llvm::formatv_object_base *v25;
  char v26;
  llvm::formatv_object_base *v27;
  char v28;
  __int16 v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[512];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  _DWORD *v37[2];
  _QWORD v38[36];

  v38[34] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 720))
  {
    *((_BYTE *)this + 8) &= ~1u;
    *(_BYTE *)this = 1;
    return;
  }
  v5 = *(__int128 **)(a2 + 200);
  v7 = *v5;
  v6 = v5[1];
  v35 = *((_QWORD *)v5 + 4);
  v33 = v7;
  v34 = v6;
  HIDWORD(v35) = *((_DWORD *)v5 + 9);
  memset(v36, 0, sizeof(v36));
  std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__init_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((char *)v36, *((_QWORD **)v5 + 5), *((_QWORD **)v5 + 6), (uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 4);
  v37[0] = v38;
  v37[1] = (_DWORD *)0x800000000;
  if (*((_DWORD *)v5 + 18))
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(v37, (uint64_t)(v5 + 4));
  v38[32] = *((_QWORD *)v5 + 42);
  v30 = v32;
  v31 = 0x4000000000;
  llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)&v33, *(_QWORD *)(a2 + 720), &v27);
  v8 = v27;
  if (v27)
  {
    v9 = *((_BYTE *)this + 8) | 1;
    goto LABEL_6;
  }
  v10 = *((unsigned __int8 *)this + 8);
  while (1)
  {
    llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)&v33, 1, (uint64_t)&v27);
    if ((v28 & 1) == 0)
    {
      v2 = (int)v27;
      LODWORD(v5) = HIDWORD(v27);
      goto LABEL_17;
    }
    v8 = v27;
    if (v27)
      break;
LABEL_17:
    switch(v2)
    {
      case 2:
        goto LABEL_45;
      case 1:
        *((_BYTE *)this + 8) = v10 & 0xFE;
        *(_BYTE *)this = 1;
        goto LABEL_8;
      case 0:
LABEL_45:
        v27 = (llvm::formatv_object_base *)"Malformed block";
        v29 = 259;
        error((const llvm::Twine *)&v24, &v27);
        *((_BYTE *)this + 8) = v10 | 1;
        v8 = v24;
        goto LABEL_7;
    }
    v11 = v34;
    v12 = v35;
    llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v33, (int)v5, (uint64_t)&v25);
    if ((v26 & 1) != 0)
    {
      v14 = 0;
      v13 = v25;
      v25 = 0;
      goto LABEL_25;
    }
    if ((_DWORD)v25 == 36)
    {
      llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)&v33, 8 * v11 - v12, &v27);
      v13 = v27;
      if (v27)
        goto LABEL_23;
      LODWORD(v31) = 0;
      llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)&v33, (int)v5, (unsigned int *)&v30, 0, (uint64_t)&v27);
      if ((v28 & 1) != 0)
      {
        v14 = 0;
        v13 = v27;
        goto LABEL_25;
      }
      if ((v31 & 1) != 0)
      {
        v16 = **(_QWORD **)(a2 + 192);
        if (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 8) - v16) >> 5) <= *(_QWORD *)v30)
        {
          v27 = (llvm::formatv_object_base *)"Invalid record";
          v29 = 259;
          error((const llvm::Twine *)&v22, &v27);
          v14 = 0;
          v10 |= 1u;
          *((_BYTE *)this + 8) = v10;
          *(_QWORD *)this = v22;
          v22 = 0;
        }
        else
        {
          v17 = *(unsigned __int8 **)(v16 + 32 * *(_QWORD *)v30 + 16);
          v18 = v17[16];
          if (v18 <= 3 && v18 != 1)
          {
            v20 = v34;
            v21 = v35;
            llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((const llvm::Twine *)&v27, a2, (llvm::Value *)v17, (uint64_t)v30 + 8, v31 - 1);
            v13 = v27;
            if (v27
              || (llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)&v33, 8 * v20 - v21, &v27),
                  (v13 = v27) != 0))
            {
LABEL_23:
              v14 = 0;
LABEL_25:
              v10 |= 1u;
              *((_BYTE *)this + 8) = v10;
              *(_QWORD *)this = v13;
              goto LABEL_27;
            }
          }
          v14 = 1;
        }
      }
      else
      {
        v27 = (llvm::formatv_object_base *)"Invalid record";
        v29 = 259;
        error((const llvm::Twine *)&v23, &v27);
        v14 = 0;
        v10 |= 1u;
        *((_BYTE *)this + 8) = v10;
        *(_QWORD *)this = v23;
        v23 = 0;
      }
    }
    else
    {
      v14 = 0;
      v10 &= ~1u;
      *((_BYTE *)this + 8) = v10;
      *(_BYTE *)this = 1;
    }
LABEL_27:
    if ((v26 & 1) != 0)
    {
      v15 = v25;
      v25 = 0;
      if (v15)
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v15 + 8))(v15);
    }
    if ((v14 & 1) == 0)
      goto LABEL_8;
  }
  v9 = v10 | 1;
LABEL_6:
  *((_BYTE *)this + 8) = v9;
LABEL_7:
  *(_QWORD *)this = v8;
LABEL_8:
  if (v30 != v32)
    free(v30);
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector((char **)v37);
  v30 = v36;
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(const llvm::Twine *a1, uint64_t a2, llvm::Value *a3, uint64_t a4, int a5)
{
  unsigned int v10;
  uint64_t *v11;
  llvm::formatv_object_base *v12;
  llvm::MDNode *MetadataFwdRefOrLoad;
  llvm::MDNode *v14;
  const char *v15;
  llvm::formatv_object_base *v16[4];
  __int16 v17;
  int v18;

  if (a5)
  {
    v10 = 0;
    v11 = (uint64_t *)(a2 + 1016);
    while (1)
    {
      v18 = *(_QWORD *)(a4 + 8 * v10);
      v16[0] = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(v11, &v18, v16))break;
      v12 = v16[0];
      if (v16[0] == (llvm::formatv_object_base *)(*(_QWORD *)(a2 + 1016) + 8 * *(unsigned int *)(a2 + 1032)))
        break;
      MetadataFwdRefOrLoad = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad((llvm::MetadataLoader::MetadataLoaderImpl *)a2, *(_QWORD *)(a4 + 8 * (v10 + 1)));
      if (!MetadataFwdRefOrLoad || (v14 = MetadataFwdRefOrLoad, (llvm::MDNode::classof(MetadataFwdRefOrLoad) & 1) == 0))
      {
        v15 = "Invalid metadata attachment: expect fwd ref to MDNode";
        goto LABEL_11;
      }
      llvm::Value::addMetadata(a3, *((_DWORD *)v12 + 1), v14);
      v10 += 2;
      if (a5 == v10)
        goto LABEL_8;
    }
    v15 = "Invalid ID";
LABEL_11:
    v16[0] = (llvm::formatv_object_base *)v15;
    v17 = 259;
    error(a1, v16);
  }
  else
  {
LABEL_8:
    *(_QWORD *)a1 = 0;
  }
}

_BYTE *llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback(_BYTE *result, uint64_t a2, int a3)
{
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::MetadataLoader::MetadataLoaderImpl *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!result[320])
    return result;
  v5 = result;
  v6 = (_BYTE *)*((_QWORD *)result + 31);
  if (v6)
  {
    if (v6 == v5 + 224)
    {
      v19 = v18;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v18);
    }
    else
    {
      v19 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    v19 = 0;
  }
  v7 = (_BYTE *)*((_QWORD *)v5 + 35);
  if (v7)
  {
    if (v7 == v5 + 256)
    {
      v17 = v16;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v16);
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    v17 = 0;
  }
  v8 = *((_QWORD *)v5 + 39);
  v15 = a2;
  v14 = a3;
  if (!v8)
  {
    v12 = (llvm::MetadataLoader::MetadataLoaderImpl *)std::__throw_bad_function_call[abi:nn180100]();
    return (_BYTE *)llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(v12, v13);
  }
  (*(void (**)(uint64_t, uint64_t *, int *, _BYTE *, _BYTE *))(*(_QWORD *)v8 + 48))(v8, &v15, &v14, v18, v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
    goto LABEL_17;
  }
  if (v17)
  {
    v10 = 5;
LABEL_17:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  result = v19;
  if (v19 == v18)
  {
    v11 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v11 = 5;
  }
  return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(llvm::MetadataLoader::MetadataLoaderImpl *this@<X0>, int a2@<W1>, const llvm::Twine *a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  llvm::MDNode *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t inserted;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  llvm::MDNode *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  llvm::MDNode *v48;
  llvm::MDNode *v49;
  unint64_t v50;
  void **v51;
  int v52;
  _QWORD *v53;
  _OWORD v54[3];
  llvm::MDNode *v55;
  llvm::MDNode *v56;
  char v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[281];
  llvm::MDNode *MDNodeFwdRefOrNull;
  char v62;
  void *v63;
  __int128 v64;
  _WORD v65[8];
  void *v66;
  unint64_t v67;
  _BYTE v68[16];
  __int16 v69;
  uint64_t v70;

  v5 = a2;
  v70 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 1) == 0 && *((_DWORD *)this + 6) >= 2u)
  {
    v66 = "Invalid metadata: fwd refs into function blocks";
    v69 = 259;
    error(a3, (llvm::formatv_object_base **)&v66);
    return;
  }
  v8 = *((_QWORD *)this + 25);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(unsigned int *)(v8 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v8, 0, 15, (uint64_t *)a3);
  if (!*(_QWORD *)a3)
  {
    v58 = v60;
    v59 = 0x4000000000;
    memset(v54, 0, sizeof(v54));
    if (!v5 || !*((_BYTE *)this + 1044) || *((_DWORD *)this + 2) || byte_257963850)
      goto LABEL_97;
    v50 = 8 * v9 - v10;
    v11 = *((_QWORD *)this + 25);
    LODWORD(v10) = (_DWORD)this + 328;
    v12 = *(_DWORD *)(v11 + 32);
    v13 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)((char *)this + 328) = *(_OWORD *)v11;
    *(_OWORD *)((char *)this + 344) = v13;
    *((_DWORD *)this + 90) = v12;
    *((_DWORD *)this + 91) = *(_DWORD *)(v11 + 36);
    if ((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328) != (llvm::MetadataLoader::MetadataLoaderImpl *)v11)
      std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t)this + 368, *(uint64_t **)(v11 + 40), *(uint64_t **)(v11 + 48), (uint64_t)(*(_QWORD *)(v11 + 48) - *(_QWORD *)(v11 + 40)) >> 4);
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((_DWORD **)this + 49, v11 + 64);
    v52 = 0;
    *((_QWORD *)this + 83) = *(_QWORD *)(v11 + 336);
    v66 = v68;
    v67 = 0x4000000000;
    *((_QWORD *)this + 90) = 0;
    v51 = (void **)((char *)this + 696);
    while (1)
    {
      v14 = *((_QWORD *)this + 43);
      v15 = *((unsigned int *)this + 90);
      llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), 1, (uint64_t)&v63);
      if ((v64 & 1) != 0)
      {
        v16 = (llvm::MDNode *)v63;
        if (v63)
          goto LABEL_82;
      }
      else
      {
        v4 = (int)v63;
        v3 = HIDWORD(v63);
      }
      switch(v4)
      {
        case 0:
        case 2:
          v43 = "Malformed block";
          goto LABEL_76;
        case 1:
          v5 = v52 & 0xFE;
          v57 = v52 & 0xFE;
          LOBYTE(v56) = 1;
          goto LABEL_83;
        case 3:
          v17 = *((_QWORD *)this + 43);
          v18 = *((unsigned int *)this + 90);
          llvm::BitstreamCursor::skipRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (uint64_t)&v63);
          if ((v64 & 1) != 0)
          {
            v16 = (llvm::MDNode *)v63;
            v4 = 3;
            if (v63)
              goto LABEL_82;
          }
          else
          {
            v4 = 3;
            v19 = 8 * v17 - v18;
            switch((int)v63)
            {
              case 1:
              case 2:
              case 3:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 37:
              case 40:
              case 41:
              case 44:
              case 45:
              case 47:
                *((_QWORD *)this + 85) = *((_QWORD *)this + 84);
                *((_QWORD *)this + 88) = *((_QWORD *)this + 87);
                v5 = v52 & 0xFE;
                v57 = v52 & 0xFE;
                LOBYTE(v56) = 0;
                goto LABEL_83;
              case 4:
                llvm::SimpleBitstreamCursor::JumpToBit((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v19, &v63);
                v16 = (llvm::MDNode *)v63;
                if (v63)
                  goto LABEL_82;
                LODWORD(v67) = 0;
                llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (unsigned int *)&v66, 0, (uint64_t)&v63);
                if ((v64 & 1) != 0)
                  goto LABEL_79;
                v63 = v65;
                v64 = xmmword_24AA2ACB0;
                llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v63, (char *)v66, (char *)v66 + 8 * v67);
                llvm::BitstreamCursor::ReadCode((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), (uint64_t)&MDNodeFwdRefOrNull);
                if ((v62 & 1) != 0
                  || (LODWORD(v67) = 0,
                      llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), (int)MDNodeFwdRefOrNull, (unsigned int *)&v66, 0, (uint64_t)&MDNodeFwdRefOrNull), (v62 & 1) != 0))
                {
                  v25 = 0;
                  v52 |= 1u;
                  v56 = MDNodeFwdRefOrNull;
                }
                else
                {
                  v20 = v67;
                  inserted = llvm::Module::getOrInsertNamedMetadata(*((_QWORD *)this + 27), (uint64_t *)v63, (llvm::formatv_object_base *)v64);
                  if ((_DWORD)v20)
                  {
                    v22 = inserted;
                    v23 = 0;
                    v24 = 8 * v20;
                    do
                    {
                      llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(_QWORD *)(v22 + 48), (uint64_t *)&MDNodeFwdRefOrNull);
                      v23 += 8;
                    }
                    while (v24 != v23);
                  }
                  v25 = 1;
                }
                if (v63 != v65)
                  free(v63);
                v4 = 3;
                if ((v25 & 1) == 0)
                  goto LABEL_73;
                continue;
              case 35:
                llvm::SimpleBitstreamCursor::JumpToBit((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v19, &v63);
                v16 = (llvm::MDNode *)v63;
                if (v63)
                  goto LABEL_82;
                *(_QWORD *)&v64 = 0;
                v63 = 0;
                LODWORD(v67) = 0;
                llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (unsigned int *)&v66, (unsigned __int8 **)&v63, (uint64_t)&MDNodeFwdRefOrNull);
                if ((v62 & 1) != 0)
                {
                  v16 = MDNodeFwdRefOrNull;
LABEL_82:
                  v5 = v52 | 1;
                  v57 = v52 | 1;
                  v56 = v16;
                  goto LABEL_83;
                }
                std::vector<llvm::StringRef>::reserve((void **)this + 84, *(unsigned int *)v66);
                MDNodeFwdRefOrNull = this;
                llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataStrings((llvm::Twine *)&v55, (int *)v66, v67, (const char *)v63, v64, (void (*)(uint64_t, const char *, unint64_t))llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(void)::$_0>, (uint64_t)&MDNodeFwdRefOrNull);
                v16 = v55;
                if (v55)
                  goto LABEL_82;
                continue;
              case 36:
                if (!*((_QWORD *)this + 90))
                  *((_QWORD *)this + 90) = 8 * v14 - v15;
                continue;
              case 38:
                llvm::SimpleBitstreamCursor::JumpToBit((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v19, &v63);
                v16 = (llvm::MDNode *)v63;
                if (v63)
                  goto LABEL_82;
                LODWORD(v67) = 0;
                llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v3, (unsigned int *)&v66, 0, (uint64_t)&v63);
                if ((v64 & 1) != 0)
                {
LABEL_79:
                  v16 = (llvm::MDNode *)v63;
                  goto LABEL_82;
                }
                if ((_DWORD)v67 != 2)
                {
                  v43 = "Invalid record";
LABEL_76:
                  v63 = v43;
                  v65[4] = 259;
                  error((const llvm::Twine *)&v56, (llvm::formatv_object_base **)&v63);
                  v5 = v52 | 1;
LABEL_77:
                  v57 = v5;
LABEL_83:
                  if (v66 != v68)
                    free(v66);
                  if ((v5 & 1) != 0)
                    goto LABEL_113;
                  if ((_BYTE)v56)
                  {
                    llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>((unint64_t)this, ((*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3)+ ((*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 4));
                    llvm::MetadataLoader::MetadataLoaderImpl::loadGlobalDeclAttachments((llvm::MetadataLoader::MetadataLoaderImpl *)&v66, (uint64_t)this);
                    llvm::Expected<BOOL>::moveAssign<BOOL>(&v56, &v66);
                    if ((v67 & 1) != 0)
                    {
                      v44 = v66;
                      v66 = 0;
                      if (v44)
                        (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
                    }
                    if ((v57 & 1) == 0)
                    {
                      llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((uint64_t)this, (uint64_t)v54);
                      llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUSubprograms(this);
                      llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(this);
                      llvm::BitstreamCursor::ReadBlockEnd(*((llvm::BitstreamCursor **)this + 25));
                      llvm::SimpleBitstreamCursor::JumpToBit((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), v50, a3);
                      if (!*(_QWORD *)a3)
                      {
                        llvm::BitstreamCursor::SkipBlock(*((llvm::BitstreamCursor **)this + 25), (uint64_t *)&v66);
                        if (v66)
                        {
                          v53 = v66;
                          v66 = 0;
                          llvm::consumeError(&v53);
                          if (v53)
                            (*(void (**)(_QWORD *))(*v53 + 8))(v53);
                          *(_QWORD *)a3 = 0;
                          if (v66)
                            (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
                        }
                        else
                        {
                          *(_QWORD *)a3 = 0;
                        }
                      }
LABEL_114:
                      if ((v57 & 1) != 0)
                      {
                        v49 = v56;
                        v56 = 0;
                        if (v49)
                          (*(void (**)(llvm::MDNode *))(*(_QWORD *)v49 + 8))(v49);
                      }
LABEL_117:
                      std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v54);
                      if (v58 != v60)
                        free(v58);
                      return;
                    }
LABEL_113:
                    v48 = v56;
                    v56 = 0;
                    *(_QWORD *)a3 = v48;
                    goto LABEL_114;
                  }
LABEL_97:
                  LODWORD(MDNodeFwdRefOrNull) = *((_DWORD *)this + 2);
                  while (1)
                  {
                    llvm::BitstreamCursor::advanceSkippingSubblocks(*((llvm::BitstreamCursor **)this + 25), 0, (uint64_t)&v66);
                    if ((v67 & 1) != 0)
                    {
                      v45 = v66;
                      *(_QWORD *)a3 = v66;
                      if (v45)
                        goto LABEL_117;
                    }
                    else
                    {
                      LODWORD(v10) = (_DWORD)v66;
                      v5 = HIDWORD(v66);
                      *(_QWORD *)a3 = 0;
                    }
                    switch((_DWORD)v10)
                    {
                      case 2:
LABEL_110:
                        v66 = "Malformed block";
                        v69 = 259;
                        error(a3, (llvm::formatv_object_base **)&v66);
                        goto LABEL_117;
                      case 1:
                        llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((uint64_t)this, (uint64_t)v54);
                        llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUSubprograms(this);
                        llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(this);
                        *(_QWORD *)a3 = 0;
                        goto LABEL_117;
                      case 0:
                        goto LABEL_110;
                    }
                    LODWORD(v59) = 0;
                    v67 = 0;
                    v66 = 0;
                    llvm::BitstreamCursor::readRecord(*((llvm::SimpleBitstreamCursor **)this + 25), v5, (unsigned int *)&v58, (unsigned __int8 **)&v66, (uint64_t)&v63);
                    if ((v64 & 1) != 0)
                      break;
                    llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(a3, (uint64_t)this, (int **)&v58, (int)v63, (uint64_t)v54, (const char *)v66, v67, (uint64_t)&MDNodeFwdRefOrNull);
                    v46 = *(_QWORD *)a3;
                    if ((v64 & 1) != 0)
                    {
                      v47 = v63;
                      v63 = 0;
                      if (v47)
                        (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
                    }
                    if (v46)
                      goto LABEL_117;
                  }
                  *(_QWORD *)a3 = v63;
                  goto LABEL_117;
                }
                v26 = 8 * *((_QWORD *)this + 43) - *((unsigned int *)this + 90);
                llvm::SimpleBitstreamCursor::JumpToBit((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), *(_QWORD *)v66 + (*((_QWORD *)v66 + 1) << 32) + v26, &v63);
                v16 = (llvm::MDNode *)v63;
                if (v63)
                  goto LABEL_82;
                llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), 1, (uint64_t)&v63);
                if ((v64 & 1) != 0)
                {
                  v40 = 0;
                  v41 = (llvm::MDNode *)v63;
                  v63 = 0;
                }
                else
                {
                  v4 = (int)v63;
                  v3 = HIDWORD(v63);
                  LODWORD(v67) = 0;
                  llvm::BitstreamCursor::readRecord((llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 328), SHIDWORD(v63), (unsigned int *)&v66, 0, (uint64_t)&MDNodeFwdRefOrNull);
                  if ((v62 & 1) == 0)
                  {
                    std::vector<llvm::orc::ExecutorAddr>::reserve(v51, v67);
                    if ((_DWORD)v67)
                    {
                      v27 = (char *)v66;
                      v28 = (char *)v66 + 8 * v67;
                      v29 = (uint64_t *)*((_QWORD *)this + 88);
                      v30 = (_QWORD *)((char *)this + 712);
                      do
                      {
                        v26 += *(_QWORD *)v27;
                        if ((unint64_t)v29 >= *v30)
                        {
                          v32 = (uint64_t *)*v51;
                          v33 = ((char *)v29 - (_BYTE *)*v51) >> 3;
                          v34 = v33 + 1;
                          if ((unint64_t)(v33 + 1) >> 61)
                            abort();
                          v35 = *v30 - (_QWORD)v32;
                          if (v35 >> 2 > v34)
                            v34 = v35 >> 2;
                          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                            v36 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v36 = v34;
                          if (v36)
                          {
                            v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v30, v36);
                            v29 = (uint64_t *)*((_QWORD *)this + 88);
                            v32 = (uint64_t *)*((_QWORD *)this + 87);
                          }
                          else
                          {
                            v37 = 0;
                          }
                          v38 = (uint64_t *)&v37[8 * v33];
                          *v38 = v26;
                          v31 = v38 + 1;
                          while (v29 != v32)
                          {
                            v39 = *--v29;
                            *--v38 = v39;
                          }
                          *((_QWORD *)this + 87) = v38;
                          *((_QWORD *)this + 88) = v31;
                          *((_QWORD *)this + 89) = &v37[8 * v36];
                          if (v32)
                            operator delete(v32);
                          v30 = (_QWORD *)((char *)this + 712);
                        }
                        else
                        {
                          *v29 = v26;
                          v31 = v29 + 1;
                        }
                        *((_QWORD *)this + 88) = v31;
                        v27 += 8;
                        v29 = v31;
                      }
                      while (v27 != v28);
                    }
                    v40 = 1;
                    goto LABEL_69;
                  }
                  v40 = 0;
                  v41 = MDNodeFwdRefOrNull;
                }
                v52 |= 1u;
                v56 = v41;
LABEL_69:
                if ((v64 & 1) != 0)
                {
                  v42 = v63;
                  v63 = 0;
                  if (v42)
                    (*(void (**)(void *))(*(_QWORD *)v42 + 8))(v42);
                }
                if ((v40 & 1) == 0)
                {
LABEL_73:
                  v5 = v52;
                  goto LABEL_77;
                }
                break;
              case 39:
                v43 = "Corrupted Metadata block";
                goto LABEL_76;
              default:
                continue;
            }
          }
          break;
        default:
          continue;
      }
    }
  }
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  llvm::MDNode *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::MDNode *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD *v59;
  llvm::MDNode *v60;
  unsigned int *v61;
  unsigned int v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  llvm::MDNode *v69;
  char v70;
  void *v71;
  uint64_t v72;
  void *v73;
  size_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  int v81;
  _QWORD *v82;
  _QWORD *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  size_t v87;
  void *v88;
  _QWORD *v89;
  int v90;
  void *v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v106;
  int v107;
  _QWORD *v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  _QWORD *v113[3];

  v109 = 0;
  v110 = 0;
  v111 = 0;
  v4 = (_DWORD *)(a1 + 24);
  while (1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(a2 + 16) != v5)
    {
      v6 = *(_QWORD *)(a2 + 32);
      v7 = (_QWORD *)(v5 + 8 * (v6 >> 8));
      v8 = *v7 + 16 * v6;
      v9 = *(_QWORD *)(v5 + (((*(_QWORD *)(a2 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
         + 16 * (*(_BYTE *)(a2 + 40) + v6);
      while (v8 != v9)
      {
        v10 = *(unsigned int *)(v8 + 4);
        v112 = v10;
        if (*(_DWORD *)(a1 + 8) <= v10
          || (v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v10)) == 0
          || llvm::MDNode::classof(*(_BYTE **)(*(_QWORD *)a1 + 8 * v10))
          && (*(_BYTE *)(v11 + 1) & 0x7F) == 2)
        {
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v109, &v112, (uint64_t)v113);
        }
        v8 += 16;
        if (v8 - *v7 == 4096)
        {
          v12 = v7[1];
          ++v7;
          v8 = v12;
        }
      }
    }
    if (!(_DWORD)v110)
      break;
    if (v111)
    {
      v13 = 4 * v111;
      v14 = v109;
      while (*v14 >= 0xFFFFFFFE)
      {
        ++v14;
        v13 -= 4;
        if (!v13)
          goto LABEL_27;
      }
    }
    else
    {
      v14 = v109;
    }
    v15 = &v109[v111];
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_23:
      llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, v16, a2);
      while (++v14 != v15)
      {
        v16 = *v14;
        if (*v14 < 0xFFFFFFFE)
        {
          if (v14 != v15)
            goto LABEL_23;
          break;
        }
      }
    }
LABEL_27:
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::clear(&v109);
    if (*v4 >= 2u)
    {
      do
      {
        v17 = llvm::detail::DenseSetImpl<unsigned int,llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,llvm::DenseMapInfo<unsigned int,void>>::begin(v4);
        llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, *v17, a2);
      }
      while (*(_DWORD *)(a1 + 24) > 1u);
    }
  }
  if (*v4 > 1u)
    goto LABEL_27;
  v18 = *(_DWORD *)(a1 + 120);
  if (v18 > 1)
  {
    if ((v18 & 1) != 0)
    {
      v22 = (uint64_t *)(a1 + 128);
      v24 = (uint64_t *)(a1 + 144);
    }
    else
    {
      v22 = *(uint64_t **)(a1 + 128);
      v23 = *(unsigned int *)(a1 + 136);
      v24 = &v22[2 * v23];
      if (!(_DWORD)v23)
      {
        v20 = *(uint64_t **)(a1 + 128);
LABEL_46:
        v25 = &v22[2 * v23];
        goto LABEL_47;
      }
    }
    v20 = v22;
    while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v20 += 2;
      if (v20 == v24)
      {
        v20 = v24;
        break;
      }
    }
    if ((v18 & 1) != 0)
      goto LABEL_42;
LABEL_45:
    v22 = *(uint64_t **)(a1 + 128);
    LODWORD(v23) = *(_DWORD *)(a1 + 136);
    goto LABEL_46;
  }
  if (v18)
  {
    v19 = a1 + 128;
    v20 = (uint64_t *)(a1 + 144);
    v21 = 1;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 128);
    v21 = *(unsigned int *)(a1 + 136);
    v20 = (uint64_t *)(v19 + 16 * v21);
  }
  v24 = (uint64_t *)(v19 + 16 * v21);
  if (!v18)
    goto LABEL_45;
LABEL_42:
  v25 = (uint64_t *)(a1 + 144);
LABEL_47:
  if (v20 != v25)
  {
    do
    {
      v113[0] = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 96, *v20, v113) & 1) == 0)
      {
        v26 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::MDString *>((_DWORD *)(a1 + 96), v20, v113[0]);
        *v26 = *v20;
        v26[1] = v20[1];
      }
      v27 = v20 + 2;
      v20 = v24;
      if (v27 != v24)
      {
        v20 = v27;
        while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v20 += 2;
          if (v20 == v24)
          {
            v20 = v24;
            break;
          }
        }
      }
    }
    while (v20 != v25);
    v18 = *(_DWORD *)(a1 + 120);
  }
  if (v18 > 1 || *(_DWORD *)(a1 + 124))
  {
    if ((v18 & 1) == 0)
    {
      v28 = *(unsigned int *)(a1 + 136);
      if (((2 * v18) & 0xFFFFFFFC) < v28 && v28 >= 0x41)
      {
        if (v18 < 2)
        {
          v29 = (_QWORD *)(a1 + 128);
          MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
          goto LABEL_64;
        }
        v75 = (v18 >> 1) - 1;
        v76 = 1 << (33 - __clz(v75));
        if (v75 >= 0x10)
          v77 = v76;
        else
          v77 = 64;
        if ((_DWORD)v77 == (_DWORD)v28)
        {
          *(_QWORD *)(a1 + 120) = 0;
          v78 = 16 * v28;
          v79 = *(_QWORD **)(a1 + 128);
          do
          {
            *v79 = -4096;
            v79 += 2;
            v78 -= 16;
          }
          while (v78);
          goto LABEL_74;
        }
        v29 = (_QWORD *)(a1 + 128);
        MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
        if (v77 <= 1)
        {
LABEL_64:
          *(_QWORD *)(a1 + 120) = 1;
        }
        else
        {
          *(_DWORD *)(a1 + 120) &= ~1u;
          v89 = operator new(16 * v77, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 128) = v89;
          *(_QWORD *)(a1 + 136) = v77;
          v90 = *(_DWORD *)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v90 & 1;
          if ((v90 & 1) == 0)
          {
            v30 = &v89[2 * v77];
            v29 = v89;
            do
            {
LABEL_66:
              *v29 = -4096;
              v29 += 2;
            }
            while (v29 != v30);
            goto LABEL_74;
          }
        }
        v30 = (_QWORD *)(a1 + 144);
        goto LABEL_66;
      }
      if ((_DWORD)v28)
      {
        v31 = *(_QWORD **)(a1 + 128);
        v32 = &v31[2 * v28];
        do
        {
LABEL_71:
          *v31 = -4096;
          v31 += 2;
        }
        while (v31 != v32);
        v33 = *(_DWORD *)(a1 + 120) & 1;
      }
      else
      {
        v33 = 0;
      }
      *(_DWORD *)(a1 + 120) = v33;
      *(_DWORD *)(a1 + 124) = 0;
      goto LABEL_74;
    }
    v31 = (_QWORD *)(a1 + 128);
    v32 = (_QWORD *)(a1 + 144);
    goto LABEL_71;
  }
LABEL_74:
  v34 = *(_QWORD **)(a1 + 144);
  v35 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v35)
  {
    v36 = 16 * v35;
    v37 = v34 + 1;
    do
    {
      v38 = *v37;
      v40 = *(_QWORD *)(v38 + 8);
      if ((v40 & 4) != 0)
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v40 & 0xFFFFFFFFFFFFFFF8, v39);
      v37 += 2;
      v36 -= 16;
    }
    while (v36);
    v34 = *(_QWORD **)(a1 + 144);
    v41 = *(unsigned int *)(a1 + 152);
  }
  else
  {
    v41 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(v34, (llvm::MDNode *)&v34[2 * v41]);
  *(_DWORD *)(a1 + 152) = 0;
  v43 = *(_DWORD *)(a1 + 72);
  if (v43 > 1)
  {
    if ((v43 & 1) != 0)
    {
      v47 = (uint64_t *)(a1 + 80);
      v49 = (uint64_t *)(a1 + 96);
    }
    else
    {
      v47 = *(uint64_t **)(a1 + 80);
      v48 = *(unsigned int *)(a1 + 88);
      v49 = &v47[2 * v48];
      if (!(_DWORD)v48)
      {
        v50 = 0;
        v45 = *(uint64_t **)(a1 + 80);
LABEL_97:
        v51 = &v47[2 * v50];
        goto LABEL_98;
      }
    }
    v45 = v47;
    while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v45 += 2;
      if (v45 == v49)
      {
        v45 = v49;
        break;
      }
    }
    if ((v43 & 1) != 0)
      goto LABEL_93;
LABEL_96:
    v47 = *(uint64_t **)(a1 + 80);
    v50 = *(unsigned int *)(a1 + 88);
    goto LABEL_97;
  }
  if (v43)
  {
    v44 = a1 + 80;
    v45 = (uint64_t *)(a1 + 96);
    v46 = 1;
  }
  else
  {
    v44 = *(_QWORD *)(a1 + 80);
    v46 = *(unsigned int *)(a1 + 88);
    v45 = (uint64_t *)(v44 + 16 * v46);
  }
  v49 = (uint64_t *)(v44 + 16 * v46);
  if (!v43)
    goto LABEL_96;
LABEL_93:
  v51 = (uint64_t *)(a1 + 96);
LABEL_98:
  v52 = (unsigned int *)(a1 + 72);
  if (v45 != v51)
  {
    while (2)
    {
      v53 = *v45;
      v113[0] = 0;
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 96, v53, v113) & 1) != 0&& (v42 = (llvm::MDNode *)v113[0][1]) != 0)
      {
        v54 = *(_QWORD *)(v45[1] + 8);
        if ((v54 & 4) == 0)
        {
LABEL_106:
          v55 = v45 + 2;
          v45 = v49;
          if (v55 != v49)
          {
            v45 = v55;
            while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v45 += 2;
              if (v45 == v49)
              {
                v45 = v49;
                break;
              }
            }
          }
          if (v45 == v51)
          {
            v43 = *v52;
            goto LABEL_113;
          }
          continue;
        }
      }
      else
      {
        v54 = *(_QWORD *)(v45[1] + 8);
        if ((v54 & 4) == 0)
          goto LABEL_106;
        v42 = (llvm::MDNode *)*v45;
      }
      break;
    }
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v54 & 0xFFFFFFFFFFFFFFF8, v42);
    goto LABEL_106;
  }
LABEL_113:
  if (v43 <= 1 && !*(_DWORD *)(a1 + 76))
    goto LABEL_131;
  if ((v43 & 1) != 0)
  {
    v58 = (_QWORD *)(a1 + 80);
    v59 = (_QWORD *)(a1 + 96);
    goto LABEL_123;
  }
  v56 = *(unsigned int *)(a1 + 88);
  if (((2 * v43) & 0xFFFFFFFC) < v56 && v56 >= 0x41)
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::destroyAll(a1 + 72, v42);
    if (v43 >= 2)
    {
      v80 = (v43 >> 1) - 1;
      v81 = 1 << (33 - __clz(v80));
      if (v80 >= 0x10)
        v57 = v81;
      else
        v57 = 64;
    }
    else
    {
      v57 = 0;
    }
    if ((*v52 & 1) != 0 && v57 < 2)
    {
      *(_QWORD *)(a1 + 72) = 1;
      v82 = (_QWORD *)(a1 + 80);
      v83 = (_QWORD *)(a1 + 96);
      do
      {
LABEL_170:
        *v82 = -4096;
        v82 += 2;
      }
      while (v82 != v83);
      goto LABEL_131;
    }
    if ((*v52 & 1) == 0)
    {
      if (v57 == *(_DWORD *)(a1 + 88))
      {
        *(_QWORD *)(a1 + 72) = 0;
        if (!v57)
          goto LABEL_131;
        v82 = *(_QWORD **)(a1 + 80);
        v83 = &v82[2 * v57];
        goto LABEL_170;
      }
      MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
    }
    if (v57 <= 1)
    {
      *(_QWORD *)v52 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 72) &= ~1u;
      v106 = operator new(16 * v57, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 80) = v106;
      *(_QWORD *)(a1 + 88) = v57;
      v107 = *(_DWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v107 & 1;
      if ((v107 & 1) == 0)
      {
        v108 = &v106[2 * v57];
        goto LABEL_212;
      }
    }
    v106 = (_QWORD *)(a1 + 80);
    v108 = (_QWORD *)(a1 + 96);
    do
    {
LABEL_212:
      *v106 = -4096;
      v106 += 2;
    }
    while (v106 != v108);
    goto LABEL_131;
  }
  if (!(_DWORD)v56)
    goto LABEL_130;
  v58 = *(_QWORD **)(a1 + 80);
  v59 = &v58[2 * v56];
LABEL_123:
  while (2)
  {
    if (*v58 == -8192)
    {
LABEL_127:
      *v58 = -4096;
    }
    else if (*v58 != -4096)
    {
      v60 = (llvm::MDNode *)v58[1];
      v58[1] = 0;
      if (v60)
        llvm::MDNode::deleteTemporary(v60, v42);
      goto LABEL_127;
    }
    v58 += 2;
    if (v58 != v59)
      continue;
    break;
  }
  LODWORD(v56) = *v52 & 1;
LABEL_130:
  *(_DWORD *)(a1 + 72) = v56;
  *(_DWORD *)(a1 + 76) = 0;
LABEL_131:
  v61 = (unsigned int *)(a1 + 48);
  v62 = *(_DWORD *)(a1 + 48);
  if (v62 < 2)
    goto LABEL_192;
  v63 = llvm::detail::DenseSetImpl<unsigned int,llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,llvm::DenseMapInfo<unsigned int,void>>::begin((_DWORD *)(a1 + 48));
  v64 = v63;
  v66 = v65;
  if ((v62 & 1) != 0)
    v67 = a1 + 60;
  else
    v67 = *(_QWORD *)(a1 + 56) + 4 * *(unsigned int *)(a1 + 64);
  if ((_DWORD *)v67 == v63)
    goto LABEL_148;
  do
  {
    v68 = *v64;
    v69 = *(llvm::MDNode **)(*(_QWORD *)a1 + 8 * v68);
    if (v69 && llvm::MDNode::classof(*(_BYTE **)(*(_QWORD *)a1 + 8 * v68)))
      llvm::MDNode::resolveCycles(v69);
    while (++v64 != v66)
    {
      if (*v64 < 0xFFFFFFFE)
        goto LABEL_143;
    }
    v64 = v66;
LABEL_143:
    ;
  }
  while (v64 != (_DWORD *)v67);
  v62 = *v61;
  if (*v61 > 1)
  {
LABEL_148:
    v70 = 0;
    if ((v62 & 1) == 0)
      goto LABEL_149;
LABEL_147:
    v71 = (void *)(a1 + 56);
    v72 = 1;
    goto LABEL_155;
  }
  if (!*(_DWORD *)(a1 + 52))
    goto LABEL_192;
  v70 = 1;
  if ((v62 & 1) != 0)
    goto LABEL_147;
LABEL_149:
  v72 = *(unsigned int *)(a1 + 64);
  if (((2 * v62) & 0xFFFFFFFC) >= v72 || v72 < 0x41)
  {
    if (!(_DWORD)v72)
    {
LABEL_156:
      *(_DWORD *)(a1 + 48) = v72;
      *(_DWORD *)(a1 + 52) = 0;
      goto LABEL_192;
    }
    v71 = *(void **)(a1 + 56);
LABEL_155:
    memset(v71, 255, 4 * v72);
    LODWORD(v72) = *v61 & 1;
    goto LABEL_156;
  }
  if ((v70 & 1) != 0)
  {
    v73 = (void *)(a1 + 56);
    v74 = 4;
    MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 56), 4);
    goto LABEL_189;
  }
  v84 = (v62 >> 1) - 1;
  v85 = 1 << (33 - __clz(v84));
  if (v84 >= 0x10)
    v86 = v85;
  else
    v86 = 64;
  if ((_DWORD)v86 == (_DWORD)v72)
  {
    *(_QWORD *)(a1 + 48) = 0;
    v87 = 4 * v72;
    v88 = *(void **)(a1 + 56);
  }
  else
  {
    v73 = (void *)(a1 + 56);
    v74 = 4;
    MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 56), 4);
    if (v86 < 2)
    {
LABEL_189:
      v92 = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 48) &= ~1u;
      v74 = 4 * v86;
      v91 = operator new(v74, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 56) = v91;
      *(_QWORD *)(a1 + 64) = v86;
      v92 = *(_DWORD *)(a1 + 48) & 1;
      if (v92)
        v74 = 4;
      else
        v73 = v91;
    }
    *(_DWORD *)(a1 + 48) = v92;
    *(_DWORD *)(a1 + 52) = 0;
    v88 = v73;
    v87 = v74;
  }
  memset(v88, 255, v87);
LABEL_192:
  if (*(_QWORD *)(a2 + 40))
  {
    v93 = *(_QWORD *)(a2 + 32);
    do
    {
      v94 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + ((v93 >> 5) & 0x7FFFFFFFFFFFFF8));
      v95 = v94 + 16 * v93;
      v96 = *(unsigned int *)(v95 + 4);
      if (*(_DWORD *)(a1 + 8) <= v96)
        v97 = 0;
      else
        v97 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v96);
      v98 = v94 + 16 * v93;
      v101 = *(_QWORD **)(v98 + 8);
      v99 = (uint64_t *)(v98 + 8);
      v100 = v101;
      if (v101)
      {
        *v100 = v97;
        v102 = *(_QWORD *)*v99;
        if (v102)
          llvm::MetadataTracking::track(*v99, v102, 2);
        v113[0] = (_QWORD *)v95;
        llvm::MetadataTracking::untrack((uint64_t)v113, v95);
        v93 = *(_QWORD *)(a2 + 32);
        v103 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + ((v93 >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * v93
                          + 8);
        if (v103)
          *v103 = 0;
      }
      v104 = *(_QWORD *)(a2 + 40) - 1;
      *(_QWORD *)(a2 + 32) = ++v93;
      *(_QWORD *)(a2 + 40) = v104;
      if (v93 >= 0x200)
      {
        operator delete(**(void ***)(a2 + 8));
        *(_QWORD *)(a2 + 8) += 8;
        v104 = *(_QWORD *)(a2 + 40);
        v93 = *(_QWORD *)(a2 + 32) - 256;
        *(_QWORD *)(a2 + 32) = v93;
      }
    }
    while (v104);
  }
  return MEMORY[0x24BD1B398](v109, 4);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::Twine *a1, uint64_t a2, int **a3, int a4, uint64_t a5, const char *a6, unint64_t a7, uint64_t a8)
{
  llvm::Twine *v8;
  int *v9;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  llvm::MCAsmLexer *ValueFwdRef;
  llvm::Value *v21;
  _BYTE *v22;
  uint64_t *v23;
  char *v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  llvm::MDNode *v29;
  llvm::MDNode *Impl;
  uint64_t *v31;
  unsigned int v32;
  unsigned int v33;
  llvm::MDNode *v34;
  int v35;
  llvm::MDNode *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  llvm::MDNode *v43;
  llvm::MCAsmLexer *v44;
  llvm::Value *v45;
  llvm::hashing::detail::hash_state *v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v54;
  uint64_t *v55;
  unsigned int v56;
  int v58;
  llvm::MDNode *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  const void *v68;
  _QWORD *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  _BOOL4 v83;
  unsigned __int8 v84;
  _BOOL4 v85;
  uint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  llvm::MDNode *v90;
  unsigned int v91;
  uint64_t *v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  int v98;
  llvm::MDNode *v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  _QWORD *v108;
  int v109;
  llvm::MDNode *v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  llvm::MDNode *v115;
  int v116;
  uint64_t *v117;
  int v118;
  llvm::MDNode *v119;
  uint64_t *v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  llvm::MDNode *v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  int v129;
  llvm::MDNode *v130;
  unsigned int v131;
  uint64_t *v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  int v136;
  llvm::MDNode *v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  BOOL v143;
  _BOOL4 v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  unint64_t v148;
  void *v149;
  uint64_t *v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  llvm::MDNode *v154;
  unsigned int v155;
  const char *v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  llvm::MDNode *v162;
  uint64_t *v163;
  uint64_t v164;
  _QWORD *v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  llvm::MDNode *v169;
  uint64_t *v170;
  uint64_t v171;
  _QWORD *v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  llvm::MDNode *v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t *v180;
  int v181;
  llvm::MDNode *v182;
  _QWORD *v183;
  int v184;
  llvm::MDNode *v185;
  uint64_t *v186;
  _QWORD *v187;
  int v188;
  llvm::MDNode *v189;
  int v190;
  uint64_t *v191;
  int v192;
  llvm::MDNode *v193;
  unsigned int v194;
  uint64_t *v195;
  _QWORD *v196;
  int v197;
  llvm::MDNode *v198;
  _QWORD *v199;
  uint64_t *v200;
  int v201;
  llvm::MDNode *v202;
  unint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  llvm::MDNode *v206;
  void *v207;
  uint64_t v208;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t inserted;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  llvm::MDNode *MDNodeFwdRefOrNull;
  char v219;
  char v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  _QWORD *v224;
  int v225;
  llvm::MDNode *v226;
  int v227;
  llvm::MDNode *v228;
  int v229;
  llvm::MDNode *v230;
  int v231;
  llvm::MDNode *v232;
  unint64_t v233;
  _QWORD *v234;
  int v235;
  llvm::MDNode *v236;
  const char *v237;
  _QWORD *v238;
  int v239;
  llvm::MDNode *v240;
  _QWORD *v241;
  int v242;
  llvm::MDNode *v243;
  size_t v244;
  _QWORD *v245;
  int v246;
  int v247;
  llvm::MDNode *v248;
  int v249;
  int v250;
  llvm::MDNode *v251;
  int v252;
  int v253;
  int v254;
  llvm::MDNode *v255;
  int v256;
  llvm::MDNode *v257;
  uint64_t v258;
  llvm::MDNode *v259;
  int v260;
  llvm::MDNode *v261;
  int v262;
  llvm::MDNode *v263;
  int v264;
  llvm::MDNode *v265;
  llvm::MDNode *v266;
  llvm::MDNode *v267;
  llvm::MDNode *v268;
  llvm::MDNode *v269;
  llvm::MDNode *v270;
  int v271;
  llvm::MDNode *v272;
  llvm::MDNode *v273;
  llvm::MDNode *v274;
  int v275;
  llvm::MDNode *v276;
  int v277;
  llvm::MDNode *v278;
  llvm::MDNode *v279;
  int v280;
  int v281;
  llvm::MDNode *v282;
  int v283;
  llvm::MDNode *v284;
  int v285;
  llvm::MDNode *v286;
  int v287;
  llvm::MDNode *v288;
  llvm::MDNode *v289;
  uint64_t *v290;
  llvm::MDNode *v291;
  int v292;
  int v293;
  int v294;
  int v295;
  llvm::MDNode *v296;
  int v297;
  int v298;
  int v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  int v307;
  llvm::MDNode *v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t *v311;
  int v312;
  int v313;
  uint64_t v314;
  llvm::MDNode *v315;
  llvm::MDNode *v316;
  int v317;
  uint64_t v318;
  llvm::MDNode *v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  _BOOL4 v323;
  _BOOL4 v324;
  int v325;
  int v326;
  _BOOL4 v327;
  _BOOL4 v328;
  const char *v329;
  uint64_t v330;
  llvm::MDNode *v331;
  int v332;
  llvm::hashing::detail::hash_state *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  llvm::MDNode *v337;
  _QWORD *v338;
  int v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  int v343;
  int v344;
  llvm::MDNode *v345;
  int v346;
  llvm::MDNode *v347;
  int v348;
  llvm::MDNode *v349;
  int v350;
  llvm::MDNode *v351;
  int v352;
  llvm::MDNode *v353;
  int v354;
  llvm::MDNode *v355;
  int v356;
  llvm::MDNode *v357;
  _QWORD *v358;
  uint64_t v359;
  int v360;
  int v361;
  llvm::MDNode *v362;
  uint64_t v363;
  llvm::MDNode *v364;
  int v365;
  unsigned int v366;
  _QWORD *v367;
  uint64_t v368;
  int v369;
  int v370;
  _QWORD *v371;
  uint64_t v372;
  int v373;
  llvm::MDNode *v374;
  int v375;
  char v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  llvm::MDNode *v381;
  uint64_t *v382;
  int v383;
  BOOL v384;
  int v385;
  llvm::MDNode *v386;
  int v387;
  int v388;
  llvm::MDNode *v389;
  _QWORD *v390;
  unsigned int v391;
  unsigned int v392;
  unint64_t v393;
  int v394;
  _QWORD *v395;
  unsigned int v396;
  unsigned int v397;
  unint64_t v398;
  int v399;
  llvm::MDNode *v400;
  uint64_t *v401;
  int v402;
  llvm::MDNode *v403;
  int v404;
  uint64_t v405;
  llvm::MDNode *v406;
  int v407;
  llvm::MDNode *v408;
  uint64_t v409;
  llvm::MDNode *v410;
  int v411;
  int v412;
  llvm::MDNode *v413;
  uint64_t v414;
  llvm::MDNode *v415;
  llvm::MDNode *v416;
  unsigned int v417;
  int v418;
  char v419;
  llvm::MDNode *v420;
  void *v421;
  uint64_t v422;
  int v423;
  int v424;
  int v425;
  _BOOL4 v426;
  llvm::MDNode *v427;
  llvm::MDNode *v428;
  int v429;
  llvm::MDNode *v430;
  llvm::MDNode *v431;
  uint64_t *v432;
  uint64_t v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  int v440;
  llvm::MDNode *v441;
  uint64_t v442;
  llvm::hashing::detail::hash_state *v443;
  unsigned int i;
  uint64_t v445;
  llvm::MDNode *v446;
  llvm::MDNode *v447;
  int v448;
  llvm::MDNode *v449;
  int v450;
  llvm::MDNode *v451;
  int v452;
  llvm::MDNode *v453;
  _QWORD *v454;
  int v455;
  int v456;
  llvm::MDNode *v457;
  llvm::MDNode *v458;
  int v459;
  llvm::MDNode *v460;
  int v461;
  llvm::MDNode *v462;
  unsigned int v463;
  _QWORD *v464;
  _BYTE *v465;
  size_t v466;
  size_t v467;
  _BYTE *v468;
  BOOL v469;
  int v470;
  llvm::MDNode *v471;
  uint64_t v472;
  uint64_t v473;
  llvm::MDNode *v474;
  llvm::MDNode *v475;
  llvm::MDNode *v476;
  int v477;
  llvm::MDNode *v478;
  char v479;
  char v480;
  llvm::MDNode *v481;
  char v482;
  int v483;
  llvm::MDNode *v484;
  int v485;
  llvm::MDNode *v486;
  int v487;
  int v488;
  _QWORD *v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  llvm::MDNode *v494;
  _QWORD *v495;
  int v496;
  uint64_t v497;
  llvm::MDNode *v498;
  llvm::MDNode *v499;
  uint64_t v500;
  llvm::MDNode *v501;
  uint64_t v502;
  llvm::MDNode *v503;
  uint64_t v504;
  uint64_t v505;
  llvm::MDNode *v506;
  llvm::MDNode *v507;
  llvm::MCAsmLexer *v508;
  llvm::Value *v509;
  uint64_t v510;
  int v511;
  llvm::MDNode *v512;
  llvm::MDNode *v513;
  _QWORD *v514;
  int v515;
  llvm::MDNode *v516;
  llvm::MDNode *v517;
  int v518;
  llvm::MDNode *v519;
  llvm::MDNode *v520;
  int v521;
  int v522;
  llvm::MDNode *v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  llvm::MDNode *v530;
  llvm::MDNode *v531;
  int v532;
  int v533;
  llvm::MDNode *v534;
  int v535;
  int v536;
  int v537;
  llvm::MDNode *v538;
  int v539;
  llvm::MDNode *v540;
  int v541;
  llvm::MDNode *v542;
  int v543;
  int v544;
  int v545;
  llvm::MDNode *v546;
  uint64_t v547;
  llvm::MDNode *v548;
  int v549;
  int v550;
  llvm::MDNode *v551;
  uint64_t *v552;
  int v553;
  llvm::MDNode *v554;
  int v555;
  llvm::MDNode *v556;
  uint64_t *v557;
  int v558;
  BOOL v559;
  int v560;
  int v561;
  int v562;
  llvm::MDNode *v563;
  llvm::MDNode *v564;
  uint64_t *v565;
  int v566;
  llvm::MDNode *v567;
  int v568;
  uint64_t v569;
  llvm::MDNode *v570;
  int v571;
  llvm::MDNode *v572;
  int v573;
  llvm::MDNode *v574;
  int v575;
  llvm::MDNode *v576;
  int v577;
  llvm::MDNode *v578;
  uint64_t v579;
  llvm::MDNode *v580;
  int v581;
  _BOOL4 v582;
  llvm::MDNode *v583;
  int v584;
  int v585;
  int v586;
  llvm::MDNode *v587;
  uint64_t v588;
  llvm::MDNode *v589;
  llvm::MDNode *v590;
  uint64_t *v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  uint64_t v598;
  int v599;
  llvm::MDNode *v600;
  unsigned int v601;
  int v602;
  uint64_t v603;
  llvm::MDNode *v604;
  unsigned int v605;
  int v606;
  char v607;
  _QWORD *v608;
  int v609;
  uint64_t v610;
  uint64_t v611;
  char v612;
  int v613;
  _QWORD *v614;
  int v615;
  llvm::MDNode *v616;
  int v617;
  llvm::MDNode *v618;
  uint64_t *v619;
  int v620;
  int v621;
  int v622;
  int v623;
  uint64_t v624;
  llvm::MDNode *v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t *v629;
  uint64_t v630;
  uint64_t *v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t *v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t *v639;
  char *v640;
  uint64_t v641;
  llvm::MDNode *v642;
  uint64_t v643;
  llvm::MDNode *v644;
  uint64_t v645;
  uint64_t v646;
  llvm::MDNode *v647;
  llvm::MDNode *v648;
  unint64_t v649;
  uint64_t v650;
  int v651;
  llvm::Value *v652;
  size_t v653;
  int v654;
  llvm::hashing::detail::hash_state *v655;
  llvm::MDNode *v656;
  char *v657;
  int v658;
  llvm::MDNode *MetadataFwdRef;
  uint64_t *v660;
  int v661;
  int v662;
  llvm::MDNode *v663;
  int v664;
  llvm::MDNode *v665;
  int v666;
  int v667;
  int v668;
  int v669;
  uint64_t v670;
  llvm::MDNode *v671;
  uint64_t *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t *v675;
  uint64_t v676;
  uint64_t *v677;
  _BOOL4 v678;
  uint64_t v679;
  uint64_t *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t *v683;
  uint64_t *v684;
  uint64_t v685;
  uint64_t *v686;
  llvm::MDNode *v687;
  _BOOL4 v688;
  uint64_t v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  llvm::MDNode *v695;
  llvm::MDNode *v696;
  uint64_t *v697;
  uint64_t v698;
  uint64_t v699;
  int v700;
  llvm::MDNode *v701;
  int v702;
  llvm::MDNode *v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  int v709;
  int v710;
  int v711;
  int v712;
  llvm::MDNode *v713;
  int v714;
  int v715;
  int v716;
  llvm::MDNode *v717;
  int v718;
  llvm::MDNode *v719;
  llvm::MDNode *v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  llvm::MDNode *v725;
  uint64_t *v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  char v730;
  char v731;
  uint64_t v732;
  int v733;
  uint64_t *v734;
  int v735;
  int v736;
  int v737;
  int v738;
  int v739;
  _QWORD *v740;
  uint64_t v741;
  llvm::MDNode *v742;
  llvm::MDNode *v743;
  uint64_t *v744;
  uint64_t v745;
  uint64_t v746;
  int v747;
  llvm::MDNode *v748;
  int v749;
  llvm::MDNode *v750;
  int v751;
  unint64_t v752;
  _QWORD *v753;
  _QWORD *v754;
  _QWORD *v755;
  uint64_t *v756;
  int v757;
  int v758;
  int v759;
  int v760;
  llvm::MDNode *v761;
  int v762;
  int v763;
  llvm::MDNode *v764;
  llvm::MDNode *v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  int v769;
  llvm::MDNode *v770;
  llvm::MDNode *v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  llvm::MDNode *v777;
  llvm::MDNode *v778;
  uint64_t *v779;
  uint64_t v780;
  uint64_t v781;
  int v782;
  llvm::MDNode *v783;
  uint64_t v784;
  _QWORD *v785;
  llvm::MDNode *v786;
  llvm::MDNode *v787;
  int v788;
  int v789;
  unsigned int v790;
  int v791;
  llvm::MDNode *v792;
  llvm::MDNode *v793;
  llvm::MDNode *v794;
  llvm::MDNode *v795;
  int v796;
  llvm::MDNode *v797;
  llvm::MDNode *v798;
  llvm::MDNode *v799;
  uint64_t v800;
  llvm::MDNode *v801;
  llvm::MDNode *v802;
  uint64_t v803;
  uint64_t v804;
  int v805;
  uint64_t v806;
  unsigned int v807;
  uint64_t v808;
  uint64_t v809;
  unsigned int v810;
  uint64_t v811;
  int v812;
  uint64_t v813;
  uint64_t v814;
  int v815;
  int v816;
  int v817;
  llvm::MetadataLoader::MetadataLoaderImpl *v818;
  unsigned int v819;
  uint64_t v820;
  __int128 v821;
  __int128 v822;
  llvm::MDNode *v823;
  llvm::MDNode *v824;
  _BYTE v825[5];
  uint64_t v826;
  llvm::MDNode *v827;
  uint64_t v828;
  llvm::MDNode *v829;
  uint64_t *v830;
  uint64_t *v831;
  uint64_t v832;
  llvm::MDNode *v833;
  uint64_t v834;
  uint64_t v835;
  llvm::MDNode *v836;
  uint64_t v837;
  llvm::MDNode *v838;
  uint64_t v839;
  uint64_t *v840;
  uint64_t *v841;
  BOOL v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t *v848;
  uint64_t *v849;
  uint64_t v850;
  int *v851;
  llvm::MDNode *v852;
  uint64_t v853;
  llvm::MDNode *v854;
  int v855;
  int v856;
  llvm::MDNode *v857;
  llvm::Twine *v858;
  llvm::MDNode *v859;
  llvm::MDNode *v860;
  llvm::MDNode *v861;
  unint64_t v862;
  uint64_t *v863;
  uint64_t *v864;
  int v865;
  llvm::MDNode *v866;
  uint64_t v867;
  llvm::MDNode *v868;
  uint64_t *v869;
  uint64_t *v870;
  uint64_t v871;
  llvm::MDNode *v872;
  int v873;
  int v874;
  uint64_t *v875;
  uint64_t *v876;
  unsigned int v877;
  int v878;
  int v879;
  llvm::MDNode *v880;
  llvm::MDNode *v881;
  unsigned int v882;
  uint64_t v883;
  llvm::MDNode *v884;
  _BOOL4 v885;
  llvm::MDNode *v886;
  llvm::MDNode *v887;
  unsigned __int8 v888;
  uint64_t v889;
  int v890;
  llvm::MDNode *v891;
  llvm::MDNode *v892;
  llvm::MDNode *v893;
  llvm::MDNode *v894;
  llvm::MDNode *v895;
  uint64_t v896;
  llvm::MDNode *v897;
  int v898;
  _BOOL4 v899;
  llvm::MDNode *v900;
  llvm::MDNode *v901;
  llvm::MDNode *v902;
  llvm::MDNode *v903;
  llvm::MDNode *v904;
  uint64_t v905;
  uint64_t v906;
  int v907;
  int v908;
  _QWORD *v909;
  uint64_t v910;
  llvm::MDNode *v911;
  llvm::MDNode *v912;
  llvm::MDNode *v913;
  llvm::MDNode *v914;
  llvm::MDNode *v915;
  uint64_t v916;
  llvm::MDNode *v917;
  llvm::MDNode *v918;
  llvm::MDNode *v919;
  unsigned int v920;
  uint64_t v921;
  int v922;
  llvm::MDNode *v923;
  _QWORD *v924;
  llvm::MDNode *v925;
  int v926;
  _QWORD *v927;
  unsigned int v928;
  llvm::MDNode *v929;
  uint64_t v930;
  _QWORD *v931;
  int v932;
  llvm::MDNode *v933;
  uint64_t v934;
  llvm::MDNode *v935;
  _QWORD *v936;
  llvm::MDNode *v937;
  int v938;
  uint64_t v939;
  void *v940;
  unsigned int v941;
  void *v942;
  unsigned int v943;
  uint64_t v944[4];
  unsigned __int8 v945;
  uint64_t *v946;
  __int128 v947;
  uint64_t v948;
  __int16 v949;
  __int128 v950;
  _QWORD v951[2];
  __int16 v952;
  uint64_t v953;
  char v954;
  uint64_t v955;

  v8 = a1;
  v955 = *MEMORY[0x24BDAC8D0];
  v945 = 0;
  v944[0] = a2;
  v944[1] = (uint64_t)&v945;
  v944[2] = a8;
  v944[3] = a5;
  v9 = (int *)a8;
  switch(a4)
  {
    case 1:
      std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(&v950, (uint64_t *)*a3, (uint64_t *)&(*a3)[2 * *((unsigned int *)a3 + 2)], *((unsigned int *)a3 + 2));
      if (v951[0] >= 0)
        v12 = (uint64_t *)&v950;
      else
        v12 = (uint64_t *)v950;
      if (v951[0] >= 0)
        v13 = HIBYTE(v951[0]);
      else
        v13 = *((_QWORD *)&v950 + 1);
      v14 = v13 >= 0x10 && *v12 == 0x6365762E6D766C6CLL && v12[1] == 0x2E72657A69726F74;
      *(_BYTE *)(a2 + 1041) |= v14;
      v210 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(_QWORD **)(a2 + 208) + 312), v12, v13);
      if (v211)
        *(_QWORD *)(v210 + 16) = v210;
      ++*v9;
      if (SHIBYTE(v951[0]) < 0)
        operator delete((void *)v950);
      goto LABEL_1084;
    case 2:
      if (*((_DWORD *)a3 + 2) != 2)
        goto LABEL_277;
      v15 = **a3;
      LODWORD(v950) = v15;
      v16 = *(_QWORD *)(a2 + 248);
      if (!v16)
        goto LABEL_1172;
      v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 48))(v16, &v950);
      v18 = v17[8];
      if (v18 == 9 || v18 == 7)
        goto LABEL_277;
      ValueFwdRef = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), (*a3)[2], (llvm::Type *)v17, v15, 0);
      if (ValueFwdRef)
      {
        *(_QWORD *)&v950 = llvm::ValueAsMetadata::get(ValueFwdRef, v21);
        llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback((_BYTE *)a2, (uint64_t)&v950, v15);
        v22 = (_BYTE *)v950;
        goto LABEL_1082;
      }
      v156 = "Invalid value reference from metadata";
      goto LABEL_278;
    case 3:
      goto LABEL_21;
    case 4:
      v23 = (uint64_t *)*a3;
      v24 = (char *)&(*a3)[2 * *((unsigned int *)a3 + 2)];
      v946 = &v948;
      v947 = xmmword_24AA2ACB0;
      llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v946, (char *)v23, v24);
      *((_DWORD *)a3 + 2) = 0;
      llvm::BitstreamCursor::ReadCode(*(llvm::BitstreamCursor **)(a2 + 200), (uint64_t)&v950);
      if ((BYTE8(v950) & 1) != 0)
      {
        v212 = v950;
        *(_QWORD *)v8 = v950;
        if (v212)
          goto LABEL_242;
        v25 = 4;
      }
      else
      {
        v25 = v950;
        *(_QWORD *)v8 = 0;
      }
      llvm::BitstreamCursor::readRecord(*(llvm::SimpleBitstreamCursor **)(a2 + 200), v25, (unsigned int *)a3, 0, (uint64_t)&v953);
      if ((v954 & 1) != 0)
      {
        *(_QWORD *)v8 = v953;
      }
      else if ((_DWORD)v953 == 10)
      {
        v213 = *((unsigned int *)a3 + 2);
        inserted = llvm::Module::getOrInsertNamedMetadata(*(_QWORD *)(a2 + 216), v946, (llvm::formatv_object_base *)v947);
        if (!(_DWORD)v213)
        {
LABEL_221:
          v219 = 1;
          goto LABEL_243;
        }
        v215 = inserted;
        v216 = 0;
        v217 = 8 * v213;
        while (1)
        {
          if (!MDNodeFwdRefOrNull)
            break;
          *(_QWORD *)&v950 = MDNodeFwdRefOrNull;
          llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(_QWORD *)(v215 + 48), (uint64_t *)&v950);
          v216 += 8;
          if (v217 == v216)
            goto LABEL_221;
        }
        *(_QWORD *)&v950 = "Invalid named metadata: expect fwd ref to MDNode";
        v952 = 259;
        error(v8, (llvm::formatv_object_base **)&v950);
      }
      else
      {
        *(_QWORD *)&v950 = "METADATA_NAME not followed by METADATA_NAMED_NODE";
        v952 = 259;
        error(v8, (llvm::formatv_object_base **)&v950);
        if ((v954 & 1) != 0)
        {
          v322 = v953;
          v953 = 0;
          if (v322)
            (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
        }
      }
LABEL_242:
      v219 = 0;
LABEL_243:
      if (v946 != &v948)
        free(v946);
      if ((v219 & 1) == 0)
        return;
      goto LABEL_1084;
    case 5:
      v945 = 1;
LABEL_21:
      *(_QWORD *)&v950 = v951;
      *((_QWORD *)&v950 + 1) = 0x800000000;
      v26 = *((unsigned int *)a3 + 2);
      if (v26 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v950, v951, v26, 8);
        LODWORD(v26) = *((_DWORD *)a3 + 2);
      }
      if ((_DWORD)v26)
      {
        v27 = (uint64_t *)*a3;
        v28 = 8 * v26;
        do
        {
          if (*(_DWORD *)v27)
          else
            v29 = 0;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v950, (uint64_t)v29);
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      Impl = llvm::MDTuple::getImpl(*(_QWORD **)(a2 + 208), (llvm::hashing::detail::hash_state *)v950, DWORD2(v950), (unint64_t *)v945, 1);
      goto LABEL_198;
    case 6:
      llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(a1, a2, (char *)*a3, *((_DWORD *)a3 + 2));
      goto LABEL_161;
    case 7:
      if ((unint64_t)*((unsigned int *)a3 + 2) - 5 >= 2)
        goto LABEL_277;
      v31 = (uint64_t *)*a3;
      v945 = *(_QWORD *)*a3 != 0;
      v32 = *((_DWORD *)v31 + 2);
      v33 = *((_DWORD *)v31 + 4);
      v35 = (*a3)[8];
      if (v35)
      else
        v36 = 0;
      v260 = *((_DWORD *)a3 + 2) == 6 && *((_QWORD *)*a3 + 5) != 0;
      v62 = (uint64_t)llvm::DILocation::getImpl(*(_QWORD **)(a2 + 208), v32, v33, (uint64_t)v34, (uint64_t)v36, v260, v945, 1);
      goto LABEL_1081;
    case 8:
      v37 = *((_DWORD *)a3 + 2);
      if ((v37 & 1) != 0)
        goto LABEL_277;
      *(_QWORD *)&v950 = v951;
      *((_QWORD *)&v950 + 1) = 0x800000000;
      if (!v37)
      {
        v47 = 0;
        v46 = (llvm::hashing::detail::hash_state *)v951;
LABEL_299:
        v261 = llvm::MDTuple::getImpl(*(_QWORD **)(a2 + 208), v46, v47, 0, 1);
        ++*v9;
        v207 = (void *)v950;
        if ((_QWORD *)v950 != v951)
          goto LABEL_199;
        goto LABEL_1084;
      }
      v38 = 0;
      while (2)
      {
        v39 = *(_QWORD *)&(*a3)[2 * v38];
        LODWORD(v946) = v39;
        v40 = *(_QWORD *)(a2 + 248);
        if (!v40)
        {
LABEL_1172:
          v818 = (llvm::MetadataLoader::MetadataLoaderImpl *)std::__throw_bad_function_call[abi:nn180100]();
          llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(v818, v819);
          return;
        }
        v41 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v40 + 48))(v40, &v946);
        if (v41)
        {
          v42 = v41[8];
          if (v42 == 7)
          {
            v43 = 0;
            goto LABEL_45;
          }
          if (v42 == 9)
          {
            goto LABEL_45;
          }
          v44 = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), *(_QWORD *)&(*a3)[2 * (v38 + 1)], (llvm::Type *)v41, v39, 0);
          if (v44)
          {
            v946 = 0;
            v946 = llvm::ValueAsMetadata::get(v44, v45);
            llvm::MetadataLoader::MetadataLoaderImpl::callMDTypeCallback((_BYTE *)a2, (uint64_t)&v946, v39);
            v43 = (llvm::MDNode *)v946;
LABEL_45:
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v950, (uint64_t)v43);
            v38 += 2;
            if (v37 == v38)
            {
              v46 = (llvm::hashing::detail::hash_state *)v950;
              v47 = DWORD2(v950);
              goto LABEL_299;
            }
            continue;
          }
          v329 = "Invalid value reference from old metadata";
        }
        else
        {
          v329 = "Invalid record";
        }
        break;
      }
      v946 = (uint64_t *)v329;
      v949 = 259;
      error(v8, (llvm::formatv_object_base **)&v946);
      v149 = (void *)v950;
      if ((_QWORD *)v950 == v951)
        return;
LABEL_913:
      free(v149);
      return;
    case 9:
      v48 = *((_DWORD *)a3 + 2);
      if ((v48 & 1) != 0)
        goto LABEL_277;
      v946 = (uint64_t *)a2;
      *(_QWORD *)&v947 = a8;
      if (v48 != 2)
        goto LABEL_55;
      v49 = **a3;
      LODWORD(v950) = v49;
      v50 = *(_QWORD *)(a2 + 248);
      if (!v50)
        goto LABEL_1172;
      v51 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v50 + 48))(v50, &v950);
      v52 = v51[8];
      if (v52 == 9 || v52 == 7)
      {
LABEL_55:
        goto LABEL_1084;
      }
      v508 = llvm::BitcodeReaderValueList::getValueFwdRef(*(llvm::BitcodeReaderValueList **)(a2 + 192), (*a3)[2], (llvm::Type *)v51, v49, 0);
      if (v508)
      {
        v62 = (uint64_t)llvm::ValueAsMetadata::get(v508, v509);
        goto LABEL_1081;
      }
      v156 = "Invalid value reference from old fn metadata";
      goto LABEL_278;
    case 12:
      v54 = *((_DWORD *)a3 + 2);
      if (v54 <= 3)
        goto LABEL_277;
      v55 = (uint64_t *)*a3;
      v945 = *(_QWORD *)*a3 != 0;
      v56 = *((_DWORD *)v55 + 2);
      if (HIWORD(v56) || *((_DWORD *)v55 + 4) != 0)
        goto LABEL_277;
      v58 = *((_DWORD *)v55 + 6);
      if (v58)
      {
        v54 = *((_DWORD *)a3 + 2);
      }
      else
      {
        v59 = 0;
      }
      *(_QWORD *)&v950 = v951;
      *((_QWORD *)&v950 + 1) = 0x800000000;
      if (v54 == 4)
      {
        v442 = 0;
        v443 = (llvm::hashing::detail::hash_state *)v951;
      }
      else
      {
        for (i = 4; i != v54; ++i)
        {
          v445 = *(_QWORD *)&(*a3)[2 * i];
          if ((_DWORD)v445)
          else
            v446 = 0;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v950, (uint64_t)v446);
        }
        v443 = (llvm::hashing::detail::hash_state *)v950;
        v442 = DWORD2(v950);
      }
      v447 = llvm::GenericDINode::getImpl(*(_QWORD **)(a2 + 208), v56, (uint64_t)v59, v443, v442, v945, 1);
      ++*v9;
      v207 = (void *)v950;
      if ((_QWORD *)v950 == v951)
        goto LABEL_1084;
      goto LABEL_199;
    case 13:
      v60 = (uint64_t *)*a3;
      v61 = *(_QWORD *)*a3 >> 1;
      switch(v61)
      {
        case 2:
          v238 = *(_QWORD **)(a2 + 208);
          v239 = *((_DWORD *)v60 + 2);
          if (v239)
          {
            v60 = (uint64_t *)*a3;
          }
          else
          {
            v240 = 0;
          }
          v450 = *((_DWORD *)v60 + 4);
          if (v450)
          {
            v60 = (uint64_t *)*a3;
          }
          else
          {
            v451 = 0;
          }
          v485 = *((_DWORD *)v60 + 6);
          if (v485)
          {
            v60 = (uint64_t *)*a3;
          }
          else
          {
            v486 = 0;
          }
          v493 = *((_DWORD *)v60 + 8);
          if (v493)
          else
            v494 = 0;
          v62 = (uint64_t)llvm::DISubrange::getImpl(v238, (uint64_t)v240, (uint64_t)v451, (uint64_t)v486, (uint64_t)v494, 0, 1);
          goto LABEL_1081;
        case 1:
          v241 = *(_QWORD **)(a2 + 208);
          v242 = *((_DWORD *)v60 + 2);
          if (v242)
          {
            v60 = (uint64_t *)*a3;
          }
          else
          {
            v243 = 0;
          }
          v62 = (uint64_t)llvm::DISubrange::getImpl(v241, (uint64_t)v243, -(v60[2] & 1) ^ ((unint64_t)v60[2] >> 1), 0, 1);
          goto LABEL_1081;
        case 0:
          v62 = (uint64_t)llvm::DISubrange::getImpl(*(_QWORD **)(a2 + 208), v60[1], -(v60[2] & 1) ^ ((unint64_t)v60[2] >> 1), 0, 1);
          goto LABEL_1081;
      }
      v156 = "Invalid record: Unsupported version of DISubrange";
      goto LABEL_278;
    case 14:
      v63 = *((unsigned int *)a3 + 2);
      if (v63 <= 2)
        goto LABEL_277;
      v64 = (uint64_t *)*a3;
      v66 = *(_QWORD *)*a3;
      v65 = *((_QWORD *)*a3 + 1);
      v67 = *(_QWORD *)*a3 & 1;
      v945 = *(_BYTE *)*a3 & 1;
      if ((v66 & 4) == 0)
      {
        v68 = (const void *)(-(uint64_t)(v65 & 1) ^ (v65 >> 1));
        v69 = *(_QWORD **)(a2 + 208);
        v70 = 64;
        if (!(_DWORD)v67)
        {
          v941 = 64;
          goto LABEL_561;
        }
        v943 = 64;
        goto LABEL_410;
      }
      llvm::readWideAPInt((unint64_t *)v64 + 3, v63 - 3, v65, (llvm::APInt *)&v950);
      v68 = (const void *)v950;
      v70 = DWORD2(v950);
      v69 = *(_QWORD **)(a2 + 208);
      if (v945)
      {
        v943 = DWORD2(v950);
        if (DWORD2(v950) > 0x40)
        {
          v244 = (((unint64_t)DWORD2(v950) + 63) >> 3) & 0x3FFFFFF8;
          v942 = (void *)operator new[]();
          memcpy(v942, v68, v244);
          goto LABEL_411;
        }
LABEL_410:
        v942 = (void *)v68;
LABEL_411:
        v332 = (*a3)[4];
        if (v332)
        else
          v333 = 0;
        v420 = llvm::DIEnumerator::getImpl(v69, (uint64_t)&v942, (v66 >> 1) & 1, v333, 1, 1);
        if (v943 >= 0x41)
        {
          v421 = v942;
          if (v942)
            goto LABEL_903;
        }
        goto LABEL_904;
      }
      v941 = DWORD2(v950);
      if (DWORD2(v950) > 0x40)
      {
        v653 = (((unint64_t)DWORD2(v950) + 63) >> 3) & 0x3FFFFFF8;
        v940 = (void *)operator new[]();
        memcpy(v940, v68, v653);
        goto LABEL_898;
      }
LABEL_561:
      v940 = (void *)v68;
LABEL_898:
      v654 = (*a3)[4];
      if (v654)
      else
        v655 = 0;
      v656 = llvm::DIEnumerator::getImpl(v69, (uint64_t)&v940, (v66 >> 1) & 1, v655, 0, 1);
      if (v941 >= 0x41)
      {
        v421 = v940;
        if (v940)
LABEL_903:
          MEMORY[0x24BD1B380](v421, 0x1000C8000313F17);
      }
LABEL_904:
      ++*v9;
      if (v70 >= 0x41 && v68)
        MEMORY[0x24BD1B380](v68, 0x1000C8000313F17);
LABEL_1084:
      *(_QWORD *)v8 = 0;
      return;
    case 15:
      v71 = *((_DWORD *)a3 + 2);
      if (v71 - 8 <= 0xFFFFFFFD)
        goto LABEL_277;
      v72 = (uint64_t *)*a3;
      v73 = *(_QWORD *)*a3;
      v945 = v73 != 0;
      if (v71 < 7)
        v74 = 0;
      else
        v74 = *((_DWORD *)v72 + 12);
      v245 = *(_QWORD **)(a2 + 208);
      v246 = *((_DWORD *)v72 + 2);
      v247 = *((_DWORD *)v72 + 4);
      if (v73)
      {
        if (v247)
        {
          v72 = (uint64_t *)*a3;
        }
        else
        {
          v248 = 0;
        }
        v62 = (uint64_t)llvm::DIBasicType::getImpl(v245, v246, (uint64_t)v248, v72[3], *((_DWORD *)v72 + 8), *((_DWORD *)v72 + 10), v74, 1, 1);
      }
      else
      {
        if (v247)
        {
          v72 = (uint64_t *)*a3;
        }
        else
        {
          v279 = 0;
        }
        v62 = (uint64_t)llvm::DIBasicType::getImpl(v245, v246, (uint64_t)v279, v72[3], *((_DWORD *)v72 + 8), *((_DWORD *)v72 + 10), v74, 0, 1);
      }
      goto LABEL_1081;
    case 16:
      v75 = *((_DWORD *)a3 + 2);
      if ((v75 - 5) < 2)
      {
        v76 = (uint64_t *)*a3;
        v77 = *(_QWORD *)*a3 != 0;
        v945 = *(_QWORD *)*a3 != 0;
        v78 = v76[3];
        if (v78)
        {
          v79 = v76[4];
          if (v79)
          {
            if ((_DWORD)v79)
            {
              v77 = v945;
              v76 = (uint64_t *)*a3;
            }
            else
            {
              v929 = 0;
            }
            v221 = v78 & 0xFFFFFF00;
            LODWORD(v78) = v78;
            v220 = 1;
LABEL_663:
            v514 = *(_QWORD **)(a2 + 208);
            v515 = *((_DWORD *)v76 + 2);
            if (v77)
            {
              if (v515)
              {
                v76 = (uint64_t *)*a3;
              }
              else
              {
                v516 = 0;
              }
              v518 = *((_DWORD *)v76 + 4);
              if (v518)
              else
                v519 = 0;
              v520 = v929;
              v521 = v221 | v78;
              if (*((_DWORD *)a3 + 2) >= 6u && (v522 = (*a3)[10]) != 0)
              {
                v520 = v929;
                v524 = (uint64_t)v523;
              }
              else
              {
                v524 = 0;
              }
              LODWORD(v950) = v521;
              *((_QWORD *)&v950 + 1) = v520;
              LOBYTE(v951[0]) = v220;
              *(_DWORD *)((char *)v951 + 1) = (_DWORD)v946;
              HIDWORD(v951[0]) = *(_DWORD *)((char *)&v946 + 3);
              v525 = v514;
              v526 = (uint64_t)v516;
              v527 = (uint64_t)v519;
              v528 = 1;
            }
            else
            {
              if (v515)
              {
                v76 = (uint64_t *)*a3;
              }
              else
              {
                v517 = 0;
              }
              v529 = *((_DWORD *)v76 + 4);
              if (v529)
              else
                v530 = 0;
              v531 = v929;
              v532 = v221 | v78;
              if (*((_DWORD *)a3 + 2) >= 6u && (v533 = (*a3)[10]) != 0)
              {
                v531 = v929;
                v524 = (uint64_t)v534;
              }
              else
              {
                v524 = 0;
              }
              LODWORD(v950) = v532;
              *((_QWORD *)&v950 + 1) = v531;
              LOBYTE(v951[0]) = v220;
              *(_DWORD *)((char *)v951 + 1) = (_DWORD)v946;
              HIDWORD(v951[0]) = *(_DWORD *)((char *)&v946 + 3);
              v525 = v514;
              v526 = (uint64_t)v517;
              v527 = (uint64_t)v530;
              v528 = 0;
            }
            v62 = (uint64_t)llvm::DIFile::getImpl(v525, v526, v527, &v950, v524, v528, 1);
LABEL_1081:
            v22 = (_BYTE *)v62;
LABEL_1082:
            v751 = *v9;
            v752 = a2;
LABEL_1083:
            ++*v9;
            goto LABEL_1084;
          }
          v220 = 0;
          LODWORD(v78) = 0;
        }
        else
        {
          v220 = 0;
        }
        v221 = 0;
        goto LABEL_663;
      }
      if (v75 != 3)
        goto LABEL_277;
      v220 = 0;
      LODWORD(v78) = 0;
      v221 = 0;
      v76 = (uint64_t *)*a3;
      v77 = *(_QWORD *)*a3 != 0;
      v945 = *(_QWORD *)*a3 != 0;
      goto LABEL_663;
    case 17:
      v80 = *((_DWORD *)a3 + 2);
      if (v80 - 16 <= 0xFFFFFFFB)
        goto LABEL_277;
      v81 = (uint64_t *)*a3;
      if (v80 < 0xD)
      {
        v888 = 0;
        v897 = 0;
        v85 = 0;
        v83 = 0;
        v84 = 0;
        v882 = *((_DWORD *)a3 + 2);
        v877 = v882;
      }
      else
      {
        v82 = v81[12];
        v83 = v82 != 0;
        v877 = (v82 - 1) >> 8;
        if (v82)
          v84 = v82 - 1;
        else
          v84 = 0;
        if (v80 == 13)
        {
          v888 = 0;
          v897 = 0;
          v85 = 0;
          v882 = 13;
        }
        else
        {
          v334 = v81[13];
          v85 = v334 != 0;
          v882 = v334 >> 8;
          v888 = v334;
          if (v80 >= 0xF && (v335 = v81[14]) != 0 && (_DWORD)v335)
          {
            v81 = (uint64_t *)*a3;
          }
          else
          {
            v897 = 0;
          }
        }
      }
      v422 = *v81;
      v945 = *v81 != 0;
      v423 = *((_DWORD *)v81 + 4);
      v936 = *(_QWORD **)(a2 + 208);
      v922 = *((_DWORD *)v81 + 2);
      v908 = *((_DWORD *)v81 + 20);
      if (v422)
      {
        if (v423)
        {
          v81 = (uint64_t *)*a3;
        }
        else
        {
          v852 = 0;
        }
        v424 = *((_DWORD *)v81 + 6);
        if (v424)
        {
          v81 = (uint64_t *)*a3;
        }
        else
        {
          v861 = 0;
        }
        v873 = *((_DWORD *)v81 + 8);
        v425 = *((_DWORD *)v81 + 10);
        v426 = v85;
        if (v425)
        else
          v427 = 0;
        v429 = (*a3)[12];
        v867 = (uint64_t)v428;
        if (v429)
        else
          v430 = 0;
        v432 = (uint64_t *)*a3;
        v433 = *((_QWORD *)*a3 + 7);
        v434 = *((_DWORD *)v432 + 16);
        v435 = v432[9];
        v436 = 0x100000000;
        if (v83)
          v437 = 0x100000000;
        else
          v437 = 0;
        v438 = v84 | ((unint64_t)(v877 & 0xFFFFFF) << 8) | v437;
        if (!v426)
          v436 = 0;
        v439 = v436 | v888 | ((*(_QWORD *)&v882 & 0xFFFFFFLL) << 8);
        v440 = *((_DWORD *)v432 + 22);
        if (v440)
        else
          v441 = 0;
        v62 = llvm::DIDerivedType::getImpl(v936, v922, (uint64_t)v852, (uint64_t)v861, v873, v867, (uint64_t)v431, v433, v434, v435, v438, v439, v908, (uint64_t)v823, (uint64_t)v897, 1, 1);
      }
      else
      {
        if (v423)
        {
          v81 = (uint64_t *)*a3;
        }
        else
        {
          v860 = 0;
        }
        v549 = *((_DWORD *)v81 + 6);
        if (v549)
        {
          v81 = (uint64_t *)*a3;
        }
        else
        {
          v854 = 0;
        }
        v874 = *((_DWORD *)v81 + 8);
        v571 = *((_DWORD *)v81 + 10);
        if (v571)
        else
          v572 = 0;
        v581 = (*a3)[12];
        v582 = v83;
        if (v581)
        else
          v583 = 0;
        v591 = (uint64_t *)*a3;
        v592 = *((_QWORD *)*a3 + 7);
        v593 = *((_DWORD *)v591 + 16);
        v594 = v591[9];
        v595 = 0x100000000;
        if (v582)
          v596 = 0x100000000;
        else
          v596 = 0;
        v597 = v84 | ((unint64_t)(v877 & 0xFFFFFF) << 8) | v596;
        if (!v85)
          v595 = 0;
        v598 = v595 | v888 | ((*(_QWORD *)&v882 & 0xFFFFFFLL) << 8);
        v599 = *((_DWORD *)v591 + 22);
        if (v599)
        else
          v600 = 0;
        v62 = llvm::DIDerivedType::getImpl(v936, v922, (uint64_t)v860, (uint64_t)v854, v874, (uint64_t)v868, (uint64_t)v590, v592, v593, v594, v597, v598, v908, (uint64_t)v824, (uint64_t)v897, 0, 1);
      }
      goto LABEL_1081;
    case 18:
      if ((*((_DWORD *)a3 + 2) - 23) <= 0xFFFFFFF8)
        goto LABEL_277;
      v86 = (uint64_t *)*a3;
      v87 = *(_QWORD *)*a3;
      v945 = v87 & 1;
      v88 = *((_DWORD *)v86 + 2);
      v89 = *((_DWORD *)v86 + 4);
      if (v89)
      {
        v86 = (uint64_t *)*a3;
      }
      else
      {
        v90 = 0;
      }
      v262 = *((_DWORD *)v86 + 6);
      if (v262)
      {
        v86 = (uint64_t *)*a3;
      }
      else
      {
        v263 = 0;
      }
      v280 = *((_DWORD *)v86 + 8);
      v281 = *((_DWORD *)v86 + 10);
      if (v281)
      else
        v282 = 0;
      v290 = (uint64_t *)*a3;
      if (HIDWORD(*((_QWORD *)*a3 + 8)))
        goto LABEL_355;
      v291 = v289;
      v865 = v88;
      v883 = *((_QWORD *)*a3 + 8);
      v871 = v290[7];
      v920 = *((_DWORD *)v290 + 20);
      v878 = *((_DWORD *)v290 + 24);
      v292 = *((_DWORD *)v290 + 30);
      if (v292)
      else
        v933 = 0;
      v858 = v8;
      v862 = v87;
      v851 = v9;
      v853 = (uint64_t)v263;
      v847 = (uint64_t)v291;
      v843 = v280;
      v839 = (uint64_t)v90;
      if (*(_BYTE *)(a2 + 1044) && !byte_257963790 && v933 && v88 <= 0x17 && ((1 << v88) & 0x880014) != 0)
      {
        v463 = v920 | 4;
        if (!v90)
        {
          v472 = 0;
          v473 = 0;
          v474 = 0;
          v475 = 0;
          v476 = 0;
          v471 = 0;
          v705 = 0;
          v706 = 0;
          v707 = 0;
          v708 = 0;
          v603 = v871;
          goto LABEL_1158;
        }
        v920 |= 4u;
        v464 = (_QWORD *)*((_QWORD *)v90 + 1);
        v467 = *v464;
        v465 = v464 + 3;
        v466 = v467;
        if ((!v467
           || (v468 = memchr(v465, 60, v466)) == 0
           || v468 - v465 == -1
           || v466 >= 5 && (*(_DWORD *)v465 == 1314149215 ? (v469 = v465[4] == 124) : (v469 = 0), v469))
          && (v470 = (*a3)[28]) != 0)
        {
          v472 = 0;
          v473 = 0;
          v474 = 0;
          v475 = 0;
          v90 = 0;
          v476 = 0;
        }
        else
        {
          v472 = 0;
          v473 = 0;
          v474 = 0;
          v475 = 0;
          v90 = 0;
          v476 = 0;
          v471 = 0;
        }
        v705 = 0;
        v706 = 0;
        v707 = 0;
        v708 = 0;
        v603 = v871;
LABEL_1157:
        v463 = v920;
LABEL_1158:
        v928 = v463;
        v838 = v476;
        v896 = v706;
        v905 = v705;
        v916 = v707;
        v828 = v473;
        v826 = v473;
        v820 = v603;
        v800 = v708;
        v801 = v471;
        v802 = v474;
        v803 = v472;
        v804 = llvm::DICompositeType::buildODRType(*(_QWORD **)(a2 + 208), (uint64_t)v933, v865, v839, v853, v843, v847, v708, v820, v883, v707, v463, v706, v878, v705, (uint64_t)v471, (unint64_t)v476, (uint64_t)v90, (uint64_t)v475,
                 (uint64_t)v474,
                 v826,
                 v472);
        v805 = v843;
        v806 = v853;
        v807 = v883;
        v706 = v896;
        v808 = v839;
        v809 = v871;
        v472 = v803;
        v810 = v928;
        v811 = v847;
        v812 = v878;
        v474 = v802;
        v476 = v838;
        v471 = v801;
        v813 = v800;
        v814 = v804;
        v815 = v865;
        v705 = v905;
        v707 = v916;
        v473 = v828;
        v816 = 1;
        if (v804)
          goto LABEL_1162;
LABEL_1161:
        v814 = llvm::DICompositeType::getImpl(*(_QWORD **)(a2 + 208), v815, v808, v806, v805, v811, v813, v809, v807, v707, v810, v706, v812, v705, (uint64_t)v471, (uint64_t)v933, (unint64_t)v476, (uint64_t)v90, (uint64_t)v475,
                 (uint64_t)v474,
                 v473,
                 v472,
                 v945,
                 1);
LABEL_1162:
        v8 = v858;
        v9 = v851;
        if (v862 <= 1 && v816)
        v751 = *v851;
        v752 = a2;
        v22 = (_BYTE *)v814;
        goto LABEL_1083;
      }
      v477 = (*a3)[12];
      if (v477)
      else
        v478 = 0;
      v552 = (uint64_t *)*a3;
      v910 = *((_QWORD *)*a3 + 9);
      v553 = (*a3)[22];
      if (v553)
      {
        v552 = (uint64_t *)*a3;
      }
      else
      {
        v891 = 0;
      }
      v575 = *((_DWORD *)v552 + 26);
      if (v575)
      else
        v576 = 0;
      v584 = (*a3)[28];
      if (v584)
      else
        v471 = 0;
      v601 = *((_DWORD *)a3 + 2);
      if (v601 < 0x11)
      {
        v474 = 0;
        v475 = 0;
        v476 = 0;
        v90 = 0;
        v473 = 0;
        v472 = 0;
        v603 = v871;
        goto LABEL_1156;
      }
      v827 = v471;
      v602 = (*a3)[32];
      if (v602)
      {
        v601 = *((_DWORD *)a3 + 2);
      }
      else
      {
        v476 = 0;
      }
      if (v601 < 0x12)
      {
        v90 = 0;
        v475 = 0;
        v474 = 0;
        v603 = v871;
        v471 = v827;
      }
      else
      {
        v836 = v476;
        v666 = (*a3)[34];
        if (v666)
        {
          v601 = *((_DWORD *)a3 + 2);
        }
        else
        {
          v833 = 0;
        }
        v471 = v827;
        if (v601 < 0x14)
        {
          v475 = 0;
          v474 = 0;
          v603 = v871;
        }
        else
        {
          v734 = (uint64_t *)*a3;
          v735 = (*a3)[36];
          if (v735)
          {
            v734 = (uint64_t *)*a3;
          }
          else
          {
            v475 = 0;
          }
          v789 = *((_DWORD *)v734 + 38);
          if (v789)
          else
            v474 = 0;
          v603 = v871;
          v471 = v827;
        }
        v90 = v833;
        v476 = v836;
      }
      v790 = *((_DWORD *)a3 + 2);
      if (v790 < 0x15)
      {
        v473 = 0;
      }
      else
      {
        v791 = (*a3)[40];
        if (v791)
        {
          v792 = v475;
          v793 = v476;
          v794 = v474;
          v474 = v794;
          v476 = v793;
          v475 = v792;
          v471 = v827;
          v473 = (uint64_t)v795;
          v790 = *((_DWORD *)a3 + 2);
        }
        else
        {
          v473 = 0;
        }
        if (v790 >= 0x16)
        {
          v796 = (*a3)[42];
          if (v796)
          {
            v797 = v476;
            v798 = v474;
            v474 = v798;
            v476 = v797;
            v471 = v827;
            v472 = (uint64_t)v799;
            goto LABEL_1156;
          }
        }
      }
      v472 = 0;
LABEL_1156:
      v705 = (uint64_t)v900;
      v707 = v910;
      v706 = (uint64_t)v891;
      v708 = (uint64_t)v829;
      if (!v933)
      {
        v815 = v865;
        v816 = 0;
        v808 = v839;
        v809 = v603;
        v806 = v853;
        v805 = v843;
        v811 = v847;
        v807 = v883;
        v812 = v878;
        v810 = v920;
        v813 = (uint64_t)v829;
        goto LABEL_1161;
      }
      goto LABEL_1157;
    case 19:
      v91 = *((_DWORD *)a3 + 2);
      if (v91 - 5 <= 0xFFFFFFFD)
        goto LABEL_277;
      v92 = (uint64_t *)*a3;
      v93 = *(_QWORD *)*a3;
      if (v91 < 4)
        v94 = 0;
      else
        v94 = *((_BYTE *)v92 + 24);
      v945 = v93 & 1;
      v249 = *((_DWORD *)v92 + 2);
      v250 = *((_DWORD *)v92 + 4);
      if (v250)
      else
        v251 = 0;
      if (v93 <= 1)
      v62 = (uint64_t)llvm::DISubroutineType::getImpl(*(_QWORD **)(a2 + 208), v249, v94, (uint64_t)v251, v945, 1);
      goto LABEL_1081;
    case 20:
      if ((*((_DWORD *)a3 + 2) - 23) <= 0xFFFFFFF6)
        goto LABEL_277;
      v945 = 1;
      v95 = *(_QWORD *)(a2 + 208);
      v96 = (uint64_t *)*a3;
      v97 = (*a3)[2];
      v98 = (*a3)[4];
      if (v98)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v99 = 0;
      }
      v264 = *((_DWORD *)v96 + 6);
      if (v264)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v265 = 0;
      }
      v283 = *((_DWORD *)v96 + 10);
      v889 = v96[4];
      if (v283)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v284 = 0;
      }
      v293 = *((_DWORD *)v96 + 12);
      v294 = *((_DWORD *)v96 + 14);
      if (v294)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v884 = 0;
      }
      v879 = *((_DWORD *)v96 + 16);
      v298 = *((_DWORD *)v96 + 18);
      if (v298)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v872 = 0;
      }
      v305 = *((_DWORD *)v96 + 20);
      if (v305)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v866 = 0;
      }
      v306 = *((_DWORD *)v96 + 24);
      if (v306)
      {
        v96 = (uint64_t *)*a3;
      }
      else
      {
        v859 = 0;
      }
      v307 = *((_DWORD *)v96 + 26);
      if (v307)
      else
        v308 = 0;
      v309 = *((_DWORD *)a3 + 2);
      v921 = (uint64_t)v265;
      v934 = (uint64_t)v99;
      v906 = (uint64_t)v284;
      v898 = v293;
      if (v309 >= 0x10)
      {
        v311 = (uint64_t *)*a3;
        v312 = (*a3)[30];
        if (!v312)
        {
          v310 = 0;
          goto LABEL_601;
        }
        v313 = v97;
        v314 = v95;
        v315 = v308;
        v308 = v315;
        v95 = v314;
        v97 = v313;
        v310 = (uint64_t)v316;
        v309 = *((_DWORD *)a3 + 2);
      }
      else
      {
        v310 = 0;
      }
      if (v309 < 0xF)
      {
        v317 = v97;
        v318 = v95;
        v319 = 0;
        v320 = 0;
        v321 = 0;
LABEL_603:
        v479 = 0;
        v480 = 0;
        v481 = 0;
        v482 = 1;
        goto LABEL_918;
      }
      v311 = (uint64_t *)*a3;
LABEL_601:
      v321 = v311[14];
      if (v309 < 0x11)
      {
        v317 = v97;
        v318 = v95;
        v319 = 0;
        v320 = 0;
        goto LABEL_603;
      }
      v482 = v311[16] != 0;
      if (v309 == 17)
      {
        v317 = v97;
        v318 = v95;
        v319 = 0;
        v320 = 0;
        v479 = 0;
      }
      else
      {
        v479 = v311[17] != 0;
        if (v309 >= 0x13)
        {
          v320 = *((_DWORD *)v311 + 36);
          if (v309 != 19)
          {
            v480 = v311[19] != 0;
            if (v309 >= 0x15)
            {
              v842 = v311[16] != 0;
              v846 = v311[14];
              v850 = v310;
              v857 = v308;
              v317 = v97;
              v318 = v95;
              v788 = *((_DWORD *)v311 + 40);
              if (v788)
              {
                v309 = *((_DWORD *)a3 + 2);
              }
              else
              {
                v319 = 0;
              }
              if (v309 >= 0x16 && (v817 = (*a3)[42]) != 0)
              else
                v481 = 0;
              v308 = v857;
              v321 = v846;
              v310 = v850;
              v482 = v842;
LABEL_918:
              *(_QWORD *)&v822 = v859;
              *((_QWORD *)&v822 + 1) = v308;
              *(_QWORD *)&v821 = v872;
              *((_QWORD *)&v821 + 1) = v866;
              v657 = llvm::DICompileUnit::getImpl(v318, v317, v934, v921, v889 != 0, v906, v898, (uint64_t)v884, v879, v821, v822, v310, v321, v482, v479, v320, v480, (uint64_t)v319, (uint64_t)v481,
                       1);
              ++*v9;
              v658 = (*a3)[22];
              if (v658)
              {
                if (MetadataFwdRef)
                {
                  *(_QWORD *)&v950 = v657;
                  *((_QWORD *)&v950 + 1) = MetadataFwdRef;
                  std::vector<std::pair<llvm::DICompileUnit *,llvm::Metadata *>>::push_back[abi:nn180100]((char **)(a2 + 728), &v950);
                }
              }
              goto LABEL_1084;
            }
            v317 = v97;
            v318 = v95;
            v319 = 0;
LABEL_917:
            v481 = 0;
            goto LABEL_918;
          }
          v317 = v97;
          v318 = v95;
          v319 = 0;
        }
        else
        {
          v317 = v97;
          v318 = v95;
          v319 = 0;
          v320 = 0;
        }
      }
      v480 = 0;
      goto LABEL_917;
    case 21:
      v100 = *((_DWORD *)a3 + 2);
      if (v100 - 22 <= 0xFFFFFFFB)
        goto LABEL_277;
      v101 = (uint64_t *)*a3;
      v102 = *(_QWORD *)*a3;
      if ((v102 & 4) != 0)
      {
        v252 = *((_DWORD *)v101 + 22);
        v105 = *((_DWORD *)v101 + 18) | 0x100;
        if ((v252 & 0x200000) != 0)
        {
          v104 = v252 & 0x3FDFFFFF;
        }
        else
        {
          v105 = *((_DWORD *)v101 + 18);
          v104 = *((_DWORD *)v101 + 22);
        }
      }
      else
      {
        v103 = *((_DWORD *)v101 + 26);
        v104 = (v103 & 0x200000) != 0 ? v103 & 0x3FDFFFFF : *((_DWORD *)v101 + 26);
        v105 = ((v103 & 0x200000u) >> 13) | (4 * (v101[7] != 0)) | (8 * (v101[8] != 0)) | (16 * (v101[14] != 0)) | v101[11] & 3;
      }
      v253 = v102 & 1 | ((v105 & 8) != 0);
      v945 = v102 & 1 | ((v105 & 8) != 0);
      if ((v102 & 6) == 4)
        goto LABEL_277;
      if ((v102 & 6) == 2)
      {
        if (v100 <= 0x12)
          goto LABEL_277;
      }
      else if ((v102 & 4) != 0)
      {
        v890 = v105;
        v907 = v104;
        v899 = 0;
        v325 = 0;
        v326 = 0;
        v323 = v100 > 0x12;
        v885 = v100 > 0x13;
        v327 = 1;
        v328 = 1;
        goto LABEL_649;
      }
      v890 = v105;
      v907 = v104;
      v323 = 0;
      v885 = 0;
      v324 = v100 > 0x12;
      v325 = 2;
      if (v100 <= 0x12)
        v326 = 2;
      else
        v326 = 3;
      if ((v102 & 2) != 0)
        v324 = 0;
      v899 = v324;
      v327 = v100 > 0x13;
      v328 = v100 > 0x14;
LABEL_649:
      v510 = v101[v326 | 0xCu];
      if ((_DWORD)v510)
      {
        v253 = v945;
        v101 = (uint64_t *)*a3;
      }
      else
      {
        v937 = 0;
      }
      v924 = *(_QWORD **)(a2 + 208);
      v511 = *((_DWORD *)v101 + 2);
      if (v253)
      {
        if (v511)
        else
          v512 = 0;
        v619 = (uint64_t *)*a3;
        v620 = (*a3)[4];
        if (v620)
        {
          v619 = (uint64_t *)*a3;
        }
        else
        {
          v875 = 0;
        }
        v621 = *((_DWORD *)v619 + 6);
        if (v621)
        {
          v619 = (uint64_t *)*a3;
        }
        else
        {
          v869 = 0;
        }
        v622 = *((_DWORD *)v619 + 8);
        if (v622)
        {
          v619 = (uint64_t *)*a3;
        }
        else
        {
          v863 = 0;
        }
        v855 = *((_DWORD *)v619 + 10);
        v623 = *((_DWORD *)v619 + 12);
        if (v623)
        {
          v619 = (uint64_t *)*a3;
        }
        else
        {
          v848 = 0;
        }
        v844 = v619[v325 + 7];
        v624 = v619[v325 | 8u];
        if ((_DWORD)v624)
        else
          v625 = 0;
        v626 = (uint64_t *)*a3;
        if (v327)
          v835 = v626[v326 | 0x10u];
        else
          LODWORD(v835) = 0;
        v832 = v626[v325 + 10];
        v627 = v626[v326 + 13];
        if ((_DWORD)v627)
        {
          v626 = (uint64_t *)*a3;
        }
        else
        {
          v830 = 0;
        }
        v628 = v626[v326 + 14];
        if ((_DWORD)v628)
        {
          v626 = (uint64_t *)*a3;
        }
        else
        {
          v629 = 0;
        }
        v630 = v626[v326 + 15];
        if ((_DWORD)v630)
        else
          v631 = 0;
        if (v328 && (v632 = *(_QWORD *)&(*a3)[2 * (v326 + 17)], (_DWORD)v632))
        else
          v633 = 0;
        v634 = v102 << 62;
        if (v323 && (v635 = *(_QWORD *)&(*a3)[2 * (v326 + 18)], (_DWORD)v635))
        else
          v636 = 0;
        v637 = (uint64_t *)((unint64_t)v937 & (v634 >> 63));
        if (v885 && (v638 = *(_QWORD *)&(*a3)[2 * (v326 + 19)], (_DWORD)v638))
        else
          v639 = 0;
        v640 = llvm::DISubprogram::getImpl(v924, v880, v875, v869, v863, v855, v848, v844, v840, v832, v835, v907, v890, v637, v830, v629, v631, v633, v636,
                 v639,
                 1,
                 1);
        goto LABEL_983;
      }
      if (v511)
      else
        v513 = 0;
      v660 = (uint64_t *)*a3;
      v661 = (*a3)[4];
      if (v661)
      {
        v660 = (uint64_t *)*a3;
      }
      else
      {
        v876 = 0;
      }
      v667 = *((_DWORD *)v660 + 6);
      if (v667)
      {
        v660 = (uint64_t *)*a3;
      }
      else
      {
        v870 = 0;
      }
      v668 = *((_DWORD *)v660 + 8);
      if (v668)
      {
        v660 = (uint64_t *)*a3;
      }
      else
      {
        v864 = 0;
      }
      v856 = *((_DWORD *)v660 + 10);
      v669 = *((_DWORD *)v660 + 12);
      if (v669)
      {
        v660 = (uint64_t *)*a3;
      }
      else
      {
        v849 = 0;
      }
      v845 = v660[v325 + 7];
      v670 = v660[v325 | 8u];
      if ((_DWORD)v670)
      else
        v671 = 0;
      v672 = (uint64_t *)*a3;
      if (v327)
        v837 = v672[v326 | 0x10u];
      else
        LODWORD(v837) = 0;
      v834 = v672[v325 + 10];
      v673 = v672[v326 + 13];
      if ((_DWORD)v673)
      {
        v672 = (uint64_t *)*a3;
      }
      else
      {
        v831 = 0;
      }
      v674 = v672[v326 + 14];
      if ((_DWORD)v674)
      {
        v672 = (uint64_t *)*a3;
      }
      else
      {
        v675 = 0;
      }
      v676 = v672[v326 + 15];
      if ((_DWORD)v676)
      else
        v677 = 0;
      if (v328)
      {
        v678 = v323;
        v679 = *(_QWORD *)&(*a3)[2 * (v326 + 17)];
        if ((_DWORD)v679)
        {
          goto LABEL_974;
        }
      }
      else
      {
        v678 = v323;
      }
      v680 = 0;
LABEL_974:
      v681 = v102 << 62;
      if (v678 && (v682 = *(_QWORD *)&(*a3)[2 * (v326 + 18)], (_DWORD)v682))
      else
        v683 = 0;
      v684 = (uint64_t *)((unint64_t)v937 & (v681 >> 63));
      if (v885 && (v685 = *(_QWORD *)&(*a3)[2 * (v326 + 19)], (_DWORD)v685))
      else
        v686 = 0;
      v640 = llvm::DISubprogram::getImpl(v924, v881, v876, v870, v864, v856, v849, v845, v841, v834, v837, v907, v890, v684, v831, v675, v677, v680, v683,
               v686,
               0,
               1);
LABEL_983:
      v687 = (llvm::MDNode *)v640;
      ++*v9;
      v688 = v899;
      if (!v937)
        v688 = 0;
      if (v688 && *(_BYTE *)v937 == 1)
      {
        v689 = *(_BYTE *)(*((_QWORD *)v937 + 16) + 16) ? 0 : *((_QWORD *)v937 + 16);
        *(_QWORD *)&v950 = v689;
        if (v689)
        {
          if ((*(_BYTE *)(v689 + 35) & 1) != 0)
          {
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::FindAndConstruct((_DWORD *)(a2 + 752), (uint64_t *)&v950)[1] = (uint64_t)v687;
          }
          else if (*(_QWORD *)(v689 + 72) != v689 + 72)
          {
            llvm::Value::setMetadata(v689, 0, v687);
          }
        }
      }
      goto LABEL_1084;
    case 22:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_277;
      v106 = (uint64_t *)*a3;
      v107 = *(_QWORD *)*a3;
      v945 = v107 != 0;
      v108 = *(_QWORD **)(a2 + 208);
      v109 = *((_DWORD *)v106 + 2);
      if (v107)
      {
        if (v109)
        {
          v106 = (uint64_t *)*a3;
        }
        else
        {
          v110 = 0;
        }
        v344 = *((_DWORD *)v106 + 4);
        if (v344)
        {
          v106 = (uint64_t *)*a3;
        }
        else
        {
          v345 = 0;
        }
        v365 = *((_DWORD *)v106 + 6);
        v366 = *((_DWORD *)v106 + 8);
        v367 = v108;
        v368 = (uint64_t)v110;
        v369 = 1;
      }
      else
      {
        if (v109)
        {
          v106 = (uint64_t *)*a3;
        }
        else
        {
          v266 = 0;
        }
        v535 = *((_DWORD *)v106 + 4);
        if (v535)
        {
          v106 = (uint64_t *)*a3;
        }
        else
        {
          v345 = 0;
        }
        v365 = *((_DWORD *)v106 + 6);
        v366 = *((_DWORD *)v106 + 8);
        v367 = v108;
        v368 = (uint64_t)v266;
        v369 = 0;
      }
      v62 = (uint64_t)llvm::DILexicalBlock::getImpl(v367, v368, (uint64_t)v345, v365, v366, v369, 1);
      goto LABEL_1081;
    case 23:
      if (*((_DWORD *)a3 + 2) != 4)
        goto LABEL_277;
      v111 = (uint64_t *)*a3;
      v112 = *(_QWORD *)*a3;
      v945 = v112 != 0;
      v113 = *(_QWORD **)(a2 + 208);
      v114 = *((_DWORD *)v111 + 2);
      if (v112)
      {
        if (v114)
        {
          v111 = (uint64_t *)*a3;
        }
        else
        {
          v115 = 0;
        }
        v346 = *((_DWORD *)v111 + 4);
        if (v346)
        {
          v111 = (uint64_t *)*a3;
        }
        else
        {
          v347 = 0;
        }
        v370 = *((_DWORD *)v111 + 6);
        v371 = v113;
        v372 = (uint64_t)v115;
        v373 = 1;
      }
      else
      {
        if (v114)
        {
          v111 = (uint64_t *)*a3;
        }
        else
        {
          v267 = 0;
        }
        v536 = *((_DWORD *)v111 + 4);
        if (v536)
        {
          v111 = (uint64_t *)*a3;
        }
        else
        {
          v347 = 0;
        }
        v370 = *((_DWORD *)v111 + 6);
        v371 = v113;
        v372 = (uint64_t)v267;
        v373 = 0;
      }
      v62 = (uint64_t)llvm::DILexicalBlockFile::getImpl(v371, v372, (uint64_t)v347, v370, v373, 1);
      goto LABEL_1081;
    case 24:
      v116 = *((_DWORD *)a3 + 2);
      if (v116 == 5)
      {
        v117 = (uint64_t *)*a3;
        v118 = (*a3)[6];
        if (!v118)
        {
LABEL_113:
          v119 = 0;
          goto LABEL_249;
        }
      }
      else
      {
        if (v116 != 3)
          goto LABEL_277;
        v117 = (uint64_t *)*a3;
        v118 = (*a3)[4];
        if (!v118)
          goto LABEL_113;
      }
      v117 = (uint64_t *)*a3;
LABEL_249:
      v233 = *v117;
      v945 = *(_BYTE *)v117 & 1;
      v234 = *(_QWORD **)(a2 + 208);
      v235 = *((_DWORD *)v117 + 2);
      if ((v233 & 1) != 0)
      {
        if (v235)
        else
          v236 = 0;
        v340 = (v233 >> 1) & 1;
        v341 = v234;
        v342 = (uint64_t)v119;
        v343 = 1;
      }
      else
      {
        if (v235)
        else
          v236 = 0;
        v340 = (v233 >> 1) & 1;
        v341 = v234;
        v342 = (uint64_t)v119;
        v343 = 0;
      }
      v62 = (uint64_t)llvm::DINamespace::getImpl(v341, (uint64_t)v236, v342, v340, v343, 1);
      goto LABEL_1081;
    case 25:
      if ((*((_DWORD *)a3 + 2) - 5) <= 0xFFFFFFFD)
        goto LABEL_277;
      v120 = (uint64_t *)*a3;
      v121 = *(_QWORD *)*a3;
      v945 = v121 != 0;
      v122 = *(_QWORD **)(a2 + 208);
      v123 = *((_DWORD *)v120 + 2);
      if (v121)
      {
        if (v123)
        {
          v120 = (uint64_t *)*a3;
        }
        else
        {
          v124 = 0;
        }
        v348 = *((_DWORD *)v120 + 4);
        if (v348)
        else
          v349 = 0;
        v376 = *((_DWORD *)a3 + 2) == 4
            && (v375 = (*a3)[6]) != 0
        v377 = v122;
        v378 = (uint64_t)v124;
        v379 = (uint64_t)v374;
        v380 = 1;
      }
      else
      {
        if (v123)
        {
          v120 = (uint64_t *)*a3;
        }
        else
        {
          v268 = 0;
        }
        v537 = *((_DWORD *)v120 + 4);
        if (v537)
        else
          v538 = 0;
        v376 = *((_DWORD *)a3 + 2) == 4
            && (v555 = (*a3)[6]) != 0
        v377 = v122;
        v378 = (uint64_t)v268;
        v379 = (uint64_t)v554;
        v380 = 0;
      }
      v62 = (uint64_t)llvm::DITemplateTypeParameter::getImpl(v377, v378, v379, v376, v380, 1);
      goto LABEL_1081;
    case 26:
      if ((*((_DWORD *)a3 + 2) - 7) <= 0xFFFFFFFD)
        goto LABEL_277;
      v125 = (uint64_t *)*a3;
      v126 = *(_QWORD *)*a3;
      v945 = v126 != 0;
      v127 = *(_QWORD **)(a2 + 208);
      v128 = *((_DWORD *)v125 + 2);
      v129 = *((_DWORD *)v125 + 4);
      if (v126)
      {
        if (v129)
        {
          v125 = (uint64_t *)*a3;
        }
        else
        {
          v130 = 0;
        }
        v350 = *((_DWORD *)v125 + 6);
        if (v350)
        else
          v351 = 0;
        if (*((_DWORD *)a3 + 2) == 6)
        {
          v382 = (uint64_t *)*a3;
          v383 = (*a3)[8];
          if (!v383)
          {
            v384 = 0;
LABEL_821:
            v385 = *((_DWORD *)v382 + 10);
            if (!v385)
              goto LABEL_822;
            goto LABEL_477;
          }
          if (*((_DWORD *)a3 + 2) == 6)
          {
            v382 = (uint64_t *)*a3;
            goto LABEL_821;
          }
        }
        else
        {
          v384 = 0;
        }
        v385 = (*a3)[8];
        if (!v385)
        {
LABEL_822:
          v386 = 0;
          goto LABEL_823;
        }
LABEL_477:
LABEL_823:
        v608 = v127;
        v609 = v128;
        v610 = (uint64_t)v130;
        v611 = (uint64_t)v381;
        v612 = v384;
        v613 = 1;
        goto LABEL_928;
      }
      if (v129)
      {
        v125 = (uint64_t *)*a3;
      }
      else
      {
        v269 = 0;
      }
      v539 = *((_DWORD *)v125 + 6);
      if (v539)
      else
        v540 = 0;
      if (*((_DWORD *)a3 + 2) == 6)
      {
        v557 = (uint64_t *)*a3;
        v558 = (*a3)[8];
        if (!v558)
        {
          v559 = 0;
LABEL_925:
          v560 = *((_DWORD *)v557 + 10);
          if (!v560)
            goto LABEL_926;
          goto LABEL_748;
        }
        if (*((_DWORD *)a3 + 2) == 6)
        {
          v557 = (uint64_t *)*a3;
          goto LABEL_925;
        }
      }
      else
      {
        v559 = 0;
      }
      v560 = (*a3)[8];
      if (!v560)
      {
LABEL_926:
        v386 = 0;
LABEL_927:
        v608 = v127;
        v609 = v128;
        v610 = (uint64_t)v269;
        v611 = (uint64_t)v556;
        v612 = v559;
        v613 = 0;
LABEL_928:
        v62 = (uint64_t)llvm::DITemplateValueParameter::getImpl(v608, v609, v610, v611, v612, (uint64_t)v386, v613, 1);
        goto LABEL_1081;
      }
LABEL_748:
      goto LABEL_927;
    case 27:
      v131 = *((_DWORD *)a3 + 2);
      if (v131 - 14 <= 0xFFFFFFFC)
        goto LABEL_277;
      v132 = (uint64_t *)*a3;
      v133 = *(_QWORD *)*a3;
      v134 = v133 & 1;
      v945 = *(_BYTE *)*a3 & 1;
      v135 = v133 >> 1;
      if ((_DWORD)v135)
      {
        if ((_DWORD)v135 == 1)
        {
          v338 = *(_QWORD **)(a2 + 208);
          v339 = *((_DWORD *)v132 + 2);
          if (v134)
          {
            if (v339)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v935 = 0;
            }
            v709 = *((_DWORD *)v132 + 4);
            if (v709)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v925 = 0;
            }
            v711 = *((_DWORD *)v132 + 6);
            if (v711)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v913 = 0;
            }
            v714 = *((_DWORD *)v132 + 8);
            if (v714)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v713 = 0;
            }
            v715 = *((_DWORD *)v132 + 10);
            v718 = *((_DWORD *)v132 + 12);
            if (v718)
            else
              v719 = 0;
            v726 = (uint64_t *)*a3;
            v727 = *((_QWORD *)*a3 + 7);
            v728 = *((_QWORD *)*a3 + 8);
            v729 = (*a3)[20];
            if (v729)
            {
              v726 = (uint64_t *)*a3;
            }
            else
            {
              v725 = 0;
            }
            v730 = v728 != 0;
            v731 = v727 != 0;
            v732 = v726[11];
            v825[4] = 1;
            *(_DWORD *)v825 = 1;
          }
          else
          {
            if (v339)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v935 = 0;
            }
            v704 = *((_DWORD *)v132 + 4);
            if (v704)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v925 = 0;
            }
            v710 = *((_DWORD *)v132 + 6);
            if (v710)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v913 = 0;
            }
            v712 = *((_DWORD *)v132 + 8);
            if (v712)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v713 = 0;
            }
            v715 = *((_DWORD *)v132 + 10);
            v716 = *((_DWORD *)v132 + 12);
            if (v716)
            else
              v717 = 0;
            v721 = (uint64_t *)*a3;
            v722 = *((_QWORD *)*a3 + 7);
            v723 = *((_QWORD *)*a3 + 8);
            v724 = (*a3)[20];
            if (v724)
            {
              v721 = (uint64_t *)*a3;
            }
            else
            {
              v725 = 0;
            }
            v730 = v723 != 0;
            v731 = v722 != 0;
            v732 = v721[11];
            v825[4] = 1;
            *(_DWORD *)v825 = 0;
          }
          v62 = (uint64_t)llvm::DIGlobalVariable::getImpl(v338, (uint64_t)v935, (uint64_t)v925, (uint64_t)v913, (uint64_t)v713, v715, (uint64_t)v720, v731, v730, (uint64_t)v725, 0, v732, 0, *(int *)v825, v825[4]);
        }
        else
        {
          if ((_DWORD)v135 != 2)
          {
LABEL_277:
            v156 = "Invalid record";
            goto LABEL_278;
          }
          if (v131 >= 0xD && (v136 = *((_DWORD *)v132 + 24)) != 0)
          {
            v134 = v945;
            v132 = (uint64_t *)*a3;
          }
          else
          {
            v137 = 0;
          }
          v495 = *(_QWORD **)(a2 + 208);
          v496 = *((_DWORD *)v132 + 2);
          if (v134)
          {
            if (v496)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v923 = 0;
            }
            v690 = *((_DWORD *)v132 + 4);
            if (v690)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v912 = 0;
            }
            v691 = *((_DWORD *)v132 + 6);
            if (v691)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v901 = 0;
            }
            v692 = *((_DWORD *)v132 + 8);
            v939 = (uint64_t)v137;
            if (v692)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v892 = 0;
            }
            v693 = *((_DWORD *)v132 + 10);
            v694 = *((_DWORD *)v132 + 12);
            if (v694)
            else
              v695 = 0;
            v697 = (uint64_t *)*a3;
            v698 = *((_QWORD *)*a3 + 7);
            v699 = *((_QWORD *)*a3 + 8);
            v700 = (*a3)[18];
            if (v700)
            {
              v697 = (uint64_t *)*a3;
            }
            else
            {
              v701 = 0;
            }
            v702 = *((_DWORD *)v697 + 20);
            if (v702)
            {
              v697 = (uint64_t *)*a3;
            }
            else
            {
              v703 = 0;
            }
            v62 = (uint64_t)llvm::DIGlobalVariable::getImpl(v495, (uint64_t)v923, (uint64_t)v912, (uint64_t)v901, (uint64_t)v892, v693, (uint64_t)v696, v698 != 0, v699 != 0, (uint64_t)v701, (uint64_t)v703, v697[11], v939, 1, 1);
          }
          else
          {
            if (v496)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v911 = 0;
            }
            v733 = *((_DWORD *)v132 + 4);
            if (v733)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v902 = 0;
            }
            v736 = *((_DWORD *)v132 + 6);
            if (v736)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v893 = 0;
            }
            v737 = *((_DWORD *)v132 + 8);
            if (v737)
            {
              v132 = (uint64_t *)*a3;
            }
            else
            {
              v886 = 0;
            }
            v738 = *((_DWORD *)v132 + 10);
            v739 = *((_DWORD *)v132 + 12);
            v926 = v738;
            v740 = v495;
            v741 = (uint64_t)v137;
            if (v739)
            else
              v742 = 0;
            v744 = (uint64_t *)*a3;
            v745 = *((_QWORD *)*a3 + 7);
            v746 = *((_QWORD *)*a3 + 8);
            v747 = (*a3)[18];
            if (v747)
            {
              v744 = (uint64_t *)*a3;
            }
            else
            {
              v748 = 0;
            }
            v749 = *((_DWORD *)v744 + 20);
            if (v749)
            {
              v744 = (uint64_t *)*a3;
            }
            else
            {
              v750 = 0;
            }
            v62 = (uint64_t)llvm::DIGlobalVariable::getImpl(v740, (uint64_t)v911, (uint64_t)v902, (uint64_t)v893, (uint64_t)v886, v926, (uint64_t)v743, v745 != 0, v746 != 0, (uint64_t)v748, (uint64_t)v750, v744[11], v741, 0, 1);
          }
        }
        goto LABEL_1081;
      }
      *(_BYTE *)(a2 + 1042) = 1;
      v336 = *((_DWORD *)v132 + 18);
      if (v336)
      {
        v131 = *((_DWORD *)a3 + 2);
      }
      else
      {
        v337 = 0;
      }
      if (v131 < 0xC)
      {
        LODWORD(v649) = 0;
      }
      else
      {
        v649 = *((_QWORD *)*a3 + 11);
        if (HIDWORD(v649))
          goto LABEL_355;
      }
      v938 = v649;
      if (!v337 || *(_BYTE *)v337 != 1)
        goto LABEL_1091;
      v650 = *((_QWORD *)v337 + 16);
      v651 = *(unsigned __int8 *)(v650 + 16);
      if (v650 && v651 == 3)
      {
        v337 = 0;
        v652 = (llvm::Value *)v650;
      }
      else
      {
        v337 = 0;
        v652 = 0;
        if (v650 && v651 == 16)
        {
          v753 = *(_QWORD **)(a2 + 208);
          *(_QWORD *)&v950 = 16;
          v754 = (_QWORD *)(v650 + 24);
          if (*(_DWORD *)(v650 + 32) >= 0x41u)
            v754 = (_QWORD *)*v754;
          *((_QWORD *)&v950 + 1) = *v754;
          v951[0] = 159;
          v337 = llvm::DIExpression::getImpl(v753, &v950, 3, 0, 1);
LABEL_1091:
          v652 = 0;
        }
      }
      v755 = *(_QWORD **)(a2 + 208);
      v756 = (uint64_t *)*a3;
      v757 = (*a3)[2];
      if (v945)
      {
        if (v757)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v914 = 0;
        }
        v758 = *((_DWORD *)v756 + 4);
        if (v758)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v903 = 0;
        }
        v759 = *((_DWORD *)v756 + 6);
        if (v759)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v894 = 0;
        }
        v760 = *((_DWORD *)v756 + 8);
        v927 = v755;
        if (v760)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v761 = 0;
        }
        v762 = *((_DWORD *)v756 + 10);
        v763 = *((_DWORD *)v756 + 12);
        if (v763)
        else
          v764 = 0;
        v766 = (uint64_t *)*a3;
        v767 = *((_QWORD *)*a3 + 7);
        v768 = v766[8];
        v769 = *((_DWORD *)v766 + 20);
        if (v769)
        else
          v770 = 0;
        v771 = llvm::DIGlobalVariable::getImpl(v927, (uint64_t)v914, (uint64_t)v903, (uint64_t)v894, (uint64_t)v761, v762, (uint64_t)v765, v767 != 0, v768 != 0, (uint64_t)v770, 0, v938, 0, 1, 1);
      }
      else
      {
        if (v757)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v915 = 0;
        }
        v772 = *((_DWORD *)v756 + 4);
        if (v772)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v904 = 0;
        }
        v773 = *((_DWORD *)v756 + 6);
        if (v773)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v895 = 0;
        }
        v774 = *((_DWORD *)v756 + 8);
        if (v774)
        {
          v756 = (uint64_t *)*a3;
        }
        else
        {
          v887 = 0;
        }
        v775 = *((_DWORD *)v756 + 10);
        v776 = *((_DWORD *)v756 + 12);
        if (v776)
        else
          v777 = 0;
        v779 = (uint64_t *)*a3;
        v780 = *((_QWORD *)*a3 + 7);
        v781 = v779[8];
        v782 = *((_DWORD *)v779 + 20);
        if (v782)
        else
          v783 = 0;
        v771 = llvm::DIGlobalVariable::getImpl(v755, (uint64_t)v915, (uint64_t)v904, (uint64_t)v895, (uint64_t)v887, v775, (uint64_t)v778, v780 != 0, v781 != 0, (uint64_t)v783, 0, v938, 0, 0, 1);
      }
      v784 = (uint64_t)v771;
      if (!((unint64_t)v652 | (unint64_t)v337))
        goto LABEL_1137;
      v785 = *(_QWORD **)(a2 + 208);
      v786 = v337;
      if (!v337)
        v786 = llvm::DIExpression::getImpl(*(_QWORD **)(a2 + 208), 0, 0, 0, 1);
      v787 = llvm::DIGlobalVariableExpression::getImpl(v785, v784, (uint64_t)v786, 1, 1);
      if (v652)
        llvm::Value::addMetadata(v652, 0, v787);
      if (!v337)
LABEL_1137:
        v787 = (llvm::MDNode *)v784;
      v751 = *v9;
      v752 = a2;
      v22 = v787;
      goto LABEL_1083;
    case 28:
      v138 = *((_DWORD *)a3 + 2);
      if (v138 - 11 <= 0xFFFFFFFC)
        goto LABEL_277;
      v139 = (uint64_t *)*a3;
      v140 = *(_QWORD *)*a3;
      v141 = v140 & 1;
      v945 = *(_BYTE *)*a3 & 1;
      if ((v140 & 2) != 0)
      {
        v142 = v139[8];
        if (HIDWORD(v142))
        {
LABEL_355:
          v156 = "Alignment value is too large";
          goto LABEL_278;
        }
        v930 = v139[7];
        if (v138 >= 0xA && (v254 = *((_DWORD *)v139 + 18)) != 0)
        {
          v144 = 0;
          v141 = v945;
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v144 = 0;
          v917 = 0;
        }
      }
      else
      {
        LODWORD(v142) = 0;
        v143 = v138 > 8;
        v144 = v138 > 8;
        v145 = 7;
        if (v143)
          v145 = 8;
        v917 = 0;
        v930 = v139[v145];
      }
      v909 = *(_QWORD **)(a2 + 208);
      v497 = v139[v144 + 1];
      if (v141)
      {
        if ((_DWORD)v497)
        {
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v498 = 0;
        }
        v500 = v139[v144 | 2u];
        if ((_DWORD)v500)
        {
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v501 = 0;
        }
        v502 = v139[v144 + 3];
        if ((_DWORD)v502)
        {
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v503 = 0;
        }
        v504 = v139[v144 | 4u];
        v505 = v139[v144 + 5];
        if ((_DWORD)v505)
        else
          v506 = 0;
        v62 = (uint64_t)llvm::DILocalVariable::getImpl(v909, (uint64_t)v498, (uint64_t)v501, (uint64_t)v503, v504, (uint64_t)v507, *(_QWORD *)&(*a3)[2 * (v144 | 6)], v930, v142, (uint64_t)v917, 1, 1);
      }
      else
      {
        if ((_DWORD)v497)
        {
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v499 = 0;
        }
        v641 = v139[v144 | 2u];
        if ((_DWORD)v641)
        {
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v642 = 0;
        }
        v643 = v139[v144 + 3];
        if ((_DWORD)v643)
        {
          v139 = (uint64_t *)*a3;
        }
        else
        {
          v644 = 0;
        }
        v645 = v139[v144 | 4u];
        v646 = v139[v144 + 5];
        if ((_DWORD)v646)
        else
          v647 = 0;
        v62 = (uint64_t)llvm::DILocalVariable::getImpl(v909, (uint64_t)v499, (uint64_t)v642, (uint64_t)v644, v645, (uint64_t)v648, *(_QWORD *)&(*a3)[2 * (v144 | 6)], v930, v142, (uint64_t)v917, 0, 1);
      }
      goto LABEL_1081;
    case 29:
      v146 = *((unsigned int *)a3 + 2);
      if (!(_DWORD)v146)
        goto LABEL_277;
      v147 = *a3 + 2;
      v148 = *(_QWORD *)*a3;
      v945 = *(_BYTE *)*a3 & 1;
      v946 = (uint64_t *)v147;
      *(_QWORD *)&v947 = v146 - 1;
      *(_QWORD *)&v950 = v951;
      *((_QWORD *)&v950 + 1) = 0x600000000;
      llvm::MetadataLoader::MetadataLoaderImpl::upgradeDIExpression(a1, a2, v148 >> 1, (uint64_t)&v946, (unsigned int *)&v950);
      if (*(_QWORD *)v8)
      {
        v149 = (void *)v950;
        if ((_QWORD *)v950 != v951)
          goto LABEL_913;
        return;
      }
      v257 = llvm::DIExpression::getImpl(*(_QWORD **)(a2 + 208), v946, v947, (unint64_t *)v945, 1);
      ++*v9;
      v207 = (void *)v950;
      if ((_QWORD *)v950 != v951)
        goto LABEL_199;
      goto LABEL_1084;
    case 30:
      if (*((_DWORD *)a3 + 2) != 8)
        goto LABEL_277;
      v150 = (uint64_t *)*a3;
      v151 = *(_QWORD *)*a3;
      v945 = v151 != 0;
      v152 = *(_QWORD **)(a2 + 208);
      v153 = *((_DWORD *)v150 + 2);
      if (v151)
      {
        if (v153)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v154 = 0;
        }
        v352 = *((_DWORD *)v150 + 4);
        if (v352)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v353 = 0;
        }
        v387 = *((_DWORD *)v150 + 6);
        v388 = *((_DWORD *)v150 + 8);
        if (v388)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v389 = 0;
        }
        v407 = *((_DWORD *)v150 + 10);
        if (v407)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v408 = 0;
        }
        v411 = *((_DWORD *)v150 + 12);
        v412 = *((_DWORD *)v150 + 14);
        if (v412)
        else
          v413 = 0;
        v62 = (uint64_t)llvm::DIObjCProperty::getImpl(v152, (uint64_t)v154, (uint64_t)v353, v387, (uint64_t)v389, (uint64_t)v408, v411, (uint64_t)v416, 1, 1);
      }
      else
      {
        if (v153)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v270 = 0;
        }
        v541 = *((_DWORD *)v150 + 4);
        if (v541)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v542 = 0;
        }
        v561 = *((_DWORD *)v150 + 6);
        v562 = *((_DWORD *)v150 + 8);
        if (v562)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v563 = 0;
        }
        v577 = *((_DWORD *)v150 + 10);
        if (v577)
        {
          v150 = (uint64_t *)*a3;
        }
        else
        {
          v578 = 0;
        }
        v585 = *((_DWORD *)v150 + 12);
        v586 = *((_DWORD *)v150 + 14);
        if (v586)
        else
          v587 = 0;
        v62 = (uint64_t)llvm::DIObjCProperty::getImpl(v152, (uint64_t)v270, (uint64_t)v542, v561, (uint64_t)v563, (uint64_t)v578, v585, (uint64_t)v604, 0, 1);
      }
      goto LABEL_1081;
    case 31:
      v155 = *((_DWORD *)a3 + 2);
      if (v155 - 9 <= 0xFFFFFFFC)
      {
        v156 = "Invalid DIImportedEntity record";
        goto LABEL_278;
      }
      v222 = (uint64_t *)*a3;
      v223 = *(_QWORD *)*a3;
      v945 = v223 != 0;
      v224 = *(_QWORD **)(a2 + 208);
      v932 = *((_DWORD *)v222 + 2);
      v225 = *((_DWORD *)v222 + 4);
      if (v223)
      {
        if (v225)
        {
          v222 = (uint64_t *)*a3;
        }
        else
        {
          v918 = 0;
        }
        v361 = *((_DWORD *)v222 + 6);
        if (v361)
        else
          v362 = 0;
        v401 = (uint64_t *)*a3;
        if (v155 < 7)
        {
          v403 = 0;
          v404 = 0;
        }
        else
        {
          v402 = *((_DWORD *)v401 + 12);
          if (v402)
          {
            v401 = (uint64_t *)*a3;
          }
          else
          {
            v403 = 0;
          }
          v404 = *((_DWORD *)v401 + 8);
        }
        v614 = v224;
        v615 = *((_DWORD *)v401 + 10);
        if (v615)
        else
          v616 = 0;
        if (v155 >= 8 && (v617 = (*a3)[14]) != 0)
        else
          v618 = 0;
        v62 = (uint64_t)llvm::DIImportedEntity::getImpl(v614, v932, (uint64_t)v918, (uint64_t)v400, (uint64_t)v403, v404, (uint64_t)v616, (uint64_t)v618, 1, 1);
      }
      else
      {
        if (v225)
        {
          v222 = (uint64_t *)*a3;
        }
        else
        {
          v919 = 0;
        }
        v545 = *((_DWORD *)v222 + 6);
        if (v545)
        else
          v546 = 0;
        v565 = (uint64_t *)*a3;
        if (v155 < 7)
        {
          v567 = 0;
          v568 = 0;
        }
        else
        {
          v566 = *((_DWORD *)v565 + 12);
          if (v566)
          {
            v565 = (uint64_t *)*a3;
          }
          else
          {
            v567 = 0;
          }
          v568 = *((_DWORD *)v565 + 8);
        }
        v662 = *((_DWORD *)v565 + 10);
        if (v662)
        else
          v663 = 0;
        if (v155 >= 8 && (v664 = (*a3)[14]) != 0)
        else
          v665 = 0;
        v62 = (uint64_t)llvm::DIImportedEntity::getImpl(v224, v932, (uint64_t)v919, (uint64_t)v564, (uint64_t)v567, v568, (uint64_t)v663, (uint64_t)v665, 0, 1);
      }
      goto LABEL_1081;
    case 32:
      v157 = *((_DWORD *)a3 + 2);
      if (v157 - 10 <= 0xFFFFFFFA)
        goto LABEL_277;
      if (v157 <= 7)
        v158 = 1;
      else
        v158 = 2;
      v159 = (uint64_t *)*a3;
      v160 = *(_QWORD *)*a3;
      v945 = v160 != 0;
      v931 = *(_QWORD **)(a2 + 208);
      if (v160)
      {
        if (v157 >= 8 && (v161 = *((_DWORD *)v159 + 2)) != 0)
        {
          v159 = (uint64_t *)*a3;
        }
        else
        {
          v162 = 0;
        }
        v258 = v159[v158];
        if ((_DWORD)v258)
        {
          v159 = (uint64_t *)*a3;
        }
        else
        {
          v259 = 0;
        }
        v363 = v159[v158 + 1];
        if ((_DWORD)v363)
        {
          v159 = (uint64_t *)*a3;
        }
        else
        {
          v364 = 0;
        }
        v405 = v159[v158 + 2];
        if ((_DWORD)v405)
        {
          v159 = (uint64_t *)*a3;
        }
        else
        {
          v406 = 0;
        }
        v409 = v159[v158 + 3];
        if ((_DWORD)v409)
        {
          v159 = (uint64_t *)*a3;
        }
        else
        {
          v410 = 0;
        }
        v414 = v159[v158 | 4];
        if ((_DWORD)v414)
        else
          v415 = 0;
        v417 = *((_DWORD *)a3 + 2);
        if (v417 >= 8)
        {
          v418 = (*a3)[14];
          if (v417 != 8)
          {
            v419 = *((_QWORD *)*a3 + 8) != 0;
            goto LABEL_658;
          }
        }
        else
        {
          v418 = 0;
        }
        v419 = 0;
LABEL_658:
        v62 = (uint64_t)llvm::DIModule::getImpl(v931, (uint64_t)v162, (uint64_t)v259, (uint64_t)v364, (uint64_t)v406, (uint64_t)v410, (uint64_t)v415, v418, v419, 1, 1);
        goto LABEL_1081;
      }
      if (v157 >= 8 && (v271 = *((_DWORD *)v159 + 2)) != 0)
      {
        v159 = (uint64_t *)*a3;
      }
      else
      {
        v272 = 0;
      }
      v330 = v159[v158];
      if ((_DWORD)v330)
      {
        v159 = (uint64_t *)*a3;
      }
      else
      {
        v331 = 0;
      }
      v547 = v159[v158 + 1];
      if ((_DWORD)v547)
      {
        v159 = (uint64_t *)*a3;
      }
      else
      {
        v548 = 0;
      }
      v569 = v159[v158 + 2];
      if ((_DWORD)v569)
      {
        v159 = (uint64_t *)*a3;
      }
      else
      {
        v570 = 0;
      }
      v579 = v159[v158 + 3];
      if ((_DWORD)v579)
      {
        v159 = (uint64_t *)*a3;
      }
      else
      {
        v580 = 0;
      }
      v588 = v159[v158 | 4];
      if ((_DWORD)v588)
      else
        v589 = 0;
      v605 = *((_DWORD *)a3 + 2);
      if (v605 >= 8)
      {
        v606 = (*a3)[14];
        if (v605 != 8)
        {
          v607 = *((_QWORD *)*a3 + 8) != 0;
          goto LABEL_910;
        }
      }
      else
      {
        v606 = 0;
      }
      v607 = 0;
LABEL_910:
      v62 = (uint64_t)llvm::DIModule::getImpl(v931, (uint64_t)v272, (uint64_t)v331, (uint64_t)v548, (uint64_t)v570, (uint64_t)v580, (uint64_t)v589, v606, v607, 0, 1);
      goto LABEL_1081;
    case 33:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_277;
      v163 = (uint64_t *)*a3;
      v164 = *(_QWORD *)*a3;
      v945 = v164 != 0;
      v165 = *(_QWORD **)(a2 + 208);
      v166 = *((_DWORD *)v163 + 2);
      v167 = *((_DWORD *)v163 + 4);
      v168 = *((_DWORD *)v163 + 6);
      if (v164)
      {
        if (v168)
        {
          v163 = (uint64_t *)*a3;
        }
        else
        {
          v169 = 0;
        }
        v354 = *((_DWORD *)v163 + 8);
        if (v354)
        else
          v355 = 0;
        v390 = v165;
        v391 = v166;
        v392 = v167;
        v393 = (unint64_t)v169;
        v394 = 1;
      }
      else
      {
        if (v168)
        {
          v163 = (uint64_t *)*a3;
        }
        else
        {
          v273 = 0;
        }
        v543 = *((_DWORD *)v163 + 8);
        if (v543)
        else
          v355 = 0;
        v390 = v165;
        v391 = v166;
        v392 = v167;
        v393 = (unint64_t)v273;
        v394 = 0;
      }
      v62 = (uint64_t)llvm::DIMacro::getImpl(v390, v391, v392, v393, (unint64_t)v355, v394, 1);
      goto LABEL_1081;
    case 34:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_277;
      v170 = (uint64_t *)*a3;
      v171 = *(_QWORD *)*a3;
      v945 = v171 != 0;
      v172 = *(_QWORD **)(a2 + 208);
      v173 = *((_DWORD *)v170 + 2);
      v174 = *((_DWORD *)v170 + 4);
      v175 = *((_DWORD *)v170 + 6);
      if (v171)
      {
        if (v175)
        {
          v170 = (uint64_t *)*a3;
        }
        else
        {
          v176 = 0;
        }
        v356 = *((_DWORD *)v170 + 8);
        if (v356)
        else
          v357 = 0;
        v395 = v172;
        v396 = v173;
        v397 = v174;
        v398 = (unint64_t)v176;
        v399 = 1;
      }
      else
      {
        if (v175)
        {
          v170 = (uint64_t *)*a3;
        }
        else
        {
          v274 = 0;
        }
        v544 = *((_DWORD *)v170 + 8);
        if (v544)
        else
          v357 = 0;
        v395 = v172;
        v396 = v173;
        v397 = v174;
        v398 = (unint64_t)v274;
        v399 = 0;
      }
      v62 = (uint64_t)llvm::DIMacroFile::getImpl(v395, v396, v397, v398, (unint64_t)v357, v399, 1);
      goto LABEL_1081;
    case 35:
      *(_QWORD *)&v950 = a2;
      *((_QWORD *)&v950 + 1) = a8;
      goto LABEL_161;
    case 36:
      if (((_DWORD)a3[1] & 1) == 0)
        goto LABEL_277;
      v177 = **(_QWORD **)(a2 + 192);
      if (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 8) - v177) >> 5) <= *(_QWORD *)*a3)
        goto LABEL_277;
      v178 = *(unsigned __int8 *)(*(_QWORD *)(v177 + 32 * *(_QWORD *)*a3 + 16) + 16);
      if (v178 > 3 || v178 == 1)
        goto LABEL_1084;
      llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment(a1, a2);
LABEL_161:
      if (!*(_QWORD *)v8)
        goto LABEL_1084;
      return;
    case 37:
      if (*((_DWORD *)a3 + 2) != 3)
        goto LABEL_277;
      v180 = (uint64_t *)*a3;
      v945 = *(_QWORD *)*a3 != 0;
      v181 = *((_DWORD *)v180 + 4);
      if (!v181
      {
        v182 = llvm::DIExpression::getImpl(*(_QWORD **)(a2 + 208), 0, 0, 0, 1);
      }
      v183 = *(_QWORD **)(a2 + 208);
      v184 = (*a3)[2];
      if (v945)
      {
        if (v184)
        else
          v185 = 0;
        v358 = v183;
        v359 = (uint64_t)v182;
        v360 = 1;
      }
      else
      {
        if (v184)
        else
          v185 = 0;
        v358 = v183;
        v359 = (uint64_t)v182;
        v360 = 0;
      }
      v62 = (uint64_t)llvm::DIGlobalVariableExpression::getImpl(v358, (uint64_t)v185, v359, v360, 1);
      goto LABEL_1081;
    case 40:
      if (*((_DWORD *)a3 + 2) != 5)
        goto LABEL_277;
      v186 = (uint64_t *)*a3;
      v945 = *(_QWORD *)*a3 & 1;
      v187 = *(_QWORD **)(a2 + 208);
      v188 = *((_DWORD *)v186 + 2);
      if (v945)
      {
        if (v188)
        {
          v186 = (uint64_t *)*a3;
        }
        else
        {
          v255 = 0;
        }
        v452 = *((_DWORD *)v186 + 4);
        if (v452)
        {
          v186 = (uint64_t *)*a3;
        }
        else
        {
          v453 = 0;
        }
        v487 = *((_DWORD *)v186 + 6);
        if (v487)
        {
          v186 = (uint64_t *)*a3;
        }
        else
        {
          v484 = 0;
        }
        v488 = *((_DWORD *)v186 + 8);
        v489 = v187;
        v490 = (uint64_t)v255;
        v491 = (uint64_t)v453;
        v492 = 1;
      }
      else
      {
        if (v188)
        {
          v186 = (uint64_t *)*a3;
        }
        else
        {
          v189 = 0;
        }
        v448 = *((_DWORD *)v186 + 4);
        if (v448)
        {
          v186 = (uint64_t *)*a3;
        }
        else
        {
          v449 = 0;
        }
        v483 = *((_DWORD *)v186 + 6);
        if (v483)
        {
          v186 = (uint64_t *)*a3;
        }
        else
        {
          v484 = 0;
        }
        v488 = *((_DWORD *)v186 + 8);
        v489 = v187;
        v490 = (uint64_t)v189;
        v491 = (uint64_t)v449;
        v492 = 0;
      }
      v62 = (uint64_t)llvm::DILabel::getImpl(v489, v490, v491, (uint64_t)v484, v488, v492, 1);
      goto LABEL_1081;
    case 41:
      v190 = *((_DWORD *)a3 + 2);
      if ((v190 - 10) <= 0xFFFFFFFD)
        goto LABEL_277;
      v191 = (uint64_t *)*a3;
      v192 = *(_QWORD *)*a3 != 0;
      v945 = *(_QWORD *)*a3 != 0;
      if (v190 == 8)
      {
        v193 = 0;
        v194 = 5;
      }
      else
      {
        v256 = *((_DWORD *)v191 + 10);
        if (v256)
        {
          v192 = v945;
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v193 = 0;
        }
        v194 = 6;
      }
      v454 = *(_QWORD **)(a2 + 208);
      v455 = *((_DWORD *)v191 + 2);
      v456 = *((_DWORD *)v191 + 4);
      if (v192)
      {
        if (v456)
        {
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v457 = 0;
        }
        v459 = *((_DWORD *)v191 + 6);
        if (v459)
        {
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v460 = 0;
        }
        v461 = *((_DWORD *)v191 + 8);
        if (v461)
        {
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v462 = 0;
        }
        v62 = (uint64_t)llvm::DIStringType::getImpl(v454, v455, (uint64_t)v457, (uint64_t)v460, (uint64_t)v462, (uint64_t)v193, v191[v194], v191[v194 + 1], v191[v194 + 2], 1, 1);
      }
      else
      {
        if (v456)
        {
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v458 = 0;
        }
        v550 = *((_DWORD *)v191 + 6);
        if (v550)
        {
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v551 = 0;
        }
        v573 = *((_DWORD *)v191 + 8);
        if (v573)
        {
          v191 = (uint64_t *)*a3;
        }
        else
        {
          v574 = 0;
        }
        v62 = (uint64_t)llvm::DIStringType::getImpl(v454, v455, (uint64_t)v458, (uint64_t)v551, (uint64_t)v574, (uint64_t)v193, v191[v194], v191[v194 + 1], v191[v194 + 2], 0, 1);
      }
      goto LABEL_1081;
    case 44:
      v195 = (uint64_t *)*a3;
      v945 = *(_QWORD *)*a3 & 1;
      v196 = *(_QWORD **)(a2 + 208);
      v197 = *((_DWORD *)v195 + 2);
      if (v945)
      {
        if (v197)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v226 = 0;
        }
        v277 = *((_DWORD *)v195 + 4);
        if (v277)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v278 = 0;
        }
        v287 = *((_DWORD *)v195 + 6);
        if (v287)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v288 = 0;
        }
        v297 = *((_DWORD *)v195 + 8);
        if (v297)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v296 = 0;
        }
        v299 = *((_DWORD *)v195 + 10);
        v300 = v196;
        v301 = (uint64_t)v226;
        v302 = (uint64_t)v278;
        v303 = (uint64_t)v288;
        v304 = 1;
      }
      else
      {
        if (v197)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v198 = 0;
        }
        v275 = *((_DWORD *)v195 + 4);
        if (v275)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v276 = 0;
        }
        v285 = *((_DWORD *)v195 + 6);
        if (v285)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v286 = 0;
        }
        v295 = *((_DWORD *)v195 + 8);
        if (v295)
        {
          v195 = (uint64_t *)*a3;
        }
        else
        {
          v296 = 0;
        }
        v299 = *((_DWORD *)v195 + 10);
        v300 = v196;
        v301 = (uint64_t)v198;
        v302 = (uint64_t)v276;
        v303 = (uint64_t)v286;
        v304 = 0;
      }
      v62 = (uint64_t)llvm::DICommonBlock::getImpl(v300, v301, v302, v303, (uint64_t)v296, v299, v304, 1);
      goto LABEL_1081;
    case 45:
      v199 = *(_QWORD **)(a2 + 208);
      v200 = (uint64_t *)*a3;
      v201 = (*a3)[2];
      if (v201)
      {
        v200 = (uint64_t *)*a3;
      }
      else
      {
        v202 = 0;
      }
      v227 = *((_DWORD *)v200 + 4);
      if (v227)
      {
        v200 = (uint64_t *)*a3;
      }
      else
      {
        v228 = 0;
      }
      v229 = *((_DWORD *)v200 + 6);
      if (v229)
      {
        v200 = (uint64_t *)*a3;
      }
      else
      {
        v230 = 0;
      }
      v231 = *((_DWORD *)v200 + 8);
      if (v231)
      else
        v232 = 0;
      v62 = (uint64_t)llvm::DIGenericSubrange::getImpl(v199, (uint64_t)v202, (uint64_t)v228, (uint64_t)v230, (uint64_t)v232, 0, 1);
      goto LABEL_1081;
    case 46:
      *(_QWORD *)&v950 = v951;
      *((_QWORD *)&v950 + 1) = 0x400000000;
      v203 = *((unsigned int *)a3 + 2);
      if (v203 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v950, v951, v203, 8);
        LODWORD(v203) = *((_DWORD *)a3 + 2);
      }
      if (!(_DWORD)v203)
        goto LABEL_197;
      v204 = (uint64_t *)*a3;
      v205 = 8 * v203;
      while (2)
      {
        if (llvm::MDNode::classof(v206) && (*((_BYTE *)v206 + 1) & 0x7F) == 2)
        {
          v237 = "Invalid record: DIArgList should not contain forward refs";
        }
        else
        {
          if (*(unsigned __int8 *)v206 - 1 < 2)
          {
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v950, (uint64_t)v206);
            ++v204;
            v205 -= 8;
            if (!v205)
            {
LABEL_197:
              Impl = llvm::DIArgList::getImpl(*(_QWORD **)(a2 + 208), (_BYTE *)v950, DWORD2(v950), 0, 1);
LABEL_198:
              ++*v9;
              v207 = (void *)v950;
              if ((_QWORD *)v950 != v951)
LABEL_199:
                free(v207);
              goto LABEL_1084;
            }
            continue;
          }
          v237 = "Invalid record";
        }
        break;
      }
      v946 = (uint64_t *)v237;
      v949 = 259;
      error(v8, (llvm::formatv_object_base **)&v946);
      v149 = (void *)v950;
      if ((_QWORD *)v950 != v951)
        goto LABEL_913;
      return;
    case 47:
      if (*((_DWORD *)a3 + 2) == 1)
      {
        v208 = *(_QWORD *)*a3;
        v945 = *(_BYTE *)*a3 & 1;
        if ((v208 & 1) != 0)
        {
          v62 = llvm::DIAssignID::getImpl(*(_QWORD *)(a2 + 208), 1);
          goto LABEL_1081;
        }
        v156 = "Invalid DIAssignID record. Must be distinct";
      }
      else
      {
        v156 = "Invalid DIAssignID record.";
      }
LABEL_278:
      *(_QWORD *)&v950 = v156;
      v952 = 259;
      error(v8, (llvm::formatv_object_base **)&v950);
      return;
    default:
      goto LABEL_1084;
  }
}

uint64_t llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(llvm::MetadataLoader::MetadataLoaderImpl *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*((_DWORD *)this + 2) <= a2 || (v4 = *(_QWORD *)(*(_QWORD *)this + 8 * a2)) == 0)
  {
    v5 = *((_QWORD *)this + 84) + 16 * a2;
    v6 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**((_QWORD **)this + 26) + 312), *(uint64_t **)v5, *(_QWORD *)(v5 + 8));
    if (v7)
      *(_QWORD *)(v6 + 16) = v6;
    v4 = v6 + 8;
  }
  return v4;
}

void `anonymous namespace'::BitcodeReaderMetadataList::assignValue(unint64_t a1, _BYTE *a2, int a3)
{
  unsigned int v3;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  llvm::MDNode *v10;
  uint64_t v11;
  llvm::MDNode *v12;
  int v13;
  unsigned int v14;
  uint64_t v15[3];

  v3 = a3;
  v14 = a3;
  v6 = llvm::MDNode::classof(a2);
  if (a2 && v6 && ((a2[1] & 0x7F) == 2 || *((_DWORD *)a2 - 2)))
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 48, (int *)&v14, (uint64_t)v15);
    v3 = v14;
  }
  v7 = *(_DWORD *)(a1 + 8);
  if (v3 == v7)
  {
    v15[0] = (uint64_t)a2;
    if (v3 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::Metadata *&>(a1, v15);
    }
    else
    {
      v8 = (_QWORD *)(*(_QWORD *)a1 + 8 * v3);
      *v8 = a2;
      if (a2)
      {
        llvm::MetadataTracking::track((uint64_t)v8, (uint64_t)a2, 2);
        v3 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v3 + 1;
    }
  }
  else
  {
    if (v3 >= v7)
    {
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>(a1, v3 + 1);
      v3 = v14;
    }
    v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v3);
    v10 = (llvm::MDNode *)*v9;
    if (*v9)
    {
      v11 = *((_QWORD *)v10 + 1);
      if ((v11 & 4) != 0)
      {
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v11 & 0xFFFFFFFFFFFFFFF8, a2);
        v3 = v14;
      }
      v15[0] = 0;
      if (llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(a1 + 24, v3, v15))
      {
        *(_DWORD *)v15[0] = -2;
        v13 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 24) -= 2;
        *(_DWORD *)(a1 + 28) = v13;
      }
      llvm::MDNode::deleteTemporary(v10, v12);
    }
    else
    {
      llvm::TrackingMDRef::reset(v9, (uint64_t)a2);
    }
  }
}

llvm::MDNode *llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(llvm::MetadataLoader::MetadataLoaderImpl *this, unsigned int a2)
{
  unint64_t v4;
  uint64_t v6;
  _OWORD v7[3];

  v4 = (uint64_t)(*((_QWORD *)this + 85) - *((_QWORD *)this + 84)) >> 4;
  if (v4 > a2)
    return (llvm::MDNode *)llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString(this, a2);
  if (*((_DWORD *)this + 2) <= a2 || (v6 = *(_QWORD *)(*(_QWORD *)this + 8 * a2)) == 0)
  {
    if (v4 + ((uint64_t)(*((_QWORD *)this + 88) - *((_QWORD *)this + 87)) >> 3) <= a2)
    memset(v7, 0, sizeof(v7));
    llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata((uint64_t)this, a2, (uint64_t)v7);
    llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders((uint64_t)this, (uint64_t)v7);
    if (*((_DWORD *)this + 2) <= a2)
      v6 = 0;
    else
      v6 = *(_QWORD *)(*(_QWORD *)this + 8 * a2);
    std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v7);
  }
  return (llvm::MDNode *)v6;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(uint64_t a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4;
  int v5;
  llvm::formatv_object_base *v10;
  int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  llvm::formatv_object_base *v18;
  unint64_t v19;
  llvm::MDNode *MetadataFwdRef;
  llvm *v21;
  llvm::MDNode *v22;
  uint64_t v23;
  llvm::Value *v24;
  int v25;
  _OWORD v26[3];
  uint64_t v27;
  char v28;
  llvm::formatv_object_base *v29;
  char v30;
  __int16 v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[66];

  v34[64] = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(*(llvm::BitstreamCursor **)(a1 + 200), 0, 16, a4);
  if (!*a4)
  {
    v23 = a3;
    v24 = a2;
    v32 = v34;
    v33 = 0x4000000000;
    memset(v26, 0, sizeof(v26));
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(*(llvm::BitstreamCursor **)(a1 + 200), 0, (uint64_t)&v29);
      if ((v30 & 1) != 0)
      {
        v10 = v29;
        *a4 = (uint64_t)v29;
        if (v10)
          goto LABEL_51;
      }
      else
      {
        v5 = (int)v29;
        v4 = HIDWORD(v29);
        *a4 = 0;
      }
      switch(v5)
      {
        case 2:
          goto LABEL_49;
        case 1:
          llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(a1, (uint64_t)v26);
          *a4 = 0;
          goto LABEL_51;
        case 0:
LABEL_49:
          v29 = (llvm::formatv_object_base *)"Malformed block";
          v31 = 259;
          error((const llvm::Twine *)a4, &v29);
          goto LABEL_51;
      }
      LODWORD(v33) = 0;
      llvm::BitstreamCursor::readRecord(*(llvm::SimpleBitstreamCursor **)(a1 + 200), v4, (unsigned int *)&v32, 0, (uint64_t)&v27);
      if ((v28 & 1) != 0)
      {
        v13 = v27;
        v27 = 0;
        *a4 = v13;
        goto LABEL_17;
      }
      if ((_DWORD)v27 != 11)
        goto LABEL_21;
      v11 = v33;
      if (!(_DWORD)v33)
      {
        v14 = "Invalid record";
        goto LABEL_19;
      }
      if ((v33 & 1) == 0)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::parseGlobalObjectAttachment((const llvm::Twine *)a4, a1, v24, (uint64_t)v32, v33);
        if (*a4)
          v12 = 1;
        else
          v12 = 2;
        goto LABEL_22;
      }
      if ((_DWORD)v33 == 1)
      {
LABEL_21:
        v12 = 0;
        goto LABEL_22;
      }
      v16 = *(uint64_t **)(v23 + 8 * *(_QWORD *)v32);
      v17 = 1;
      while (1)
      {
        v25 = *((_QWORD *)v32 + v17);
        v29 = 0;
        if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 1016), &v25, &v29)|| (v18 = v29, v29 == (llvm::formatv_object_base *)(*(_QWORD *)(a1 + 1016) + 8 * *(unsigned int *)(a1 + 1032))))
        {
          v14 = "Invalid ID";
          goto LABEL_19;
        }
        if (*((_DWORD *)v29 + 1) != 1 || !*(_BYTE *)(a1 + 1040))
          break;
LABEL_45:
        v12 = 0;
        v17 += 2;
        if (v11 == v17)
          goto LABEL_22;
      }
      v19 = *((_QWORD *)v32 + v17 + 1);
      if (v19 < ((uint64_t)(*(_QWORD *)(a1 + 704) - *(_QWORD *)(a1 + 696)) >> 3)
               + ((uint64_t)(*(_QWORD *)(a1 + 680) - *(_QWORD *)(a1 + 672)) >> 4)
        && (*(_DWORD *)(a1 + 8) <= v19 || !*(_QWORD *)(*(_QWORD *)a1 + 8 * v19)))
      {
        llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(a1, *((_QWORD *)v32 + v17 + 1), (uint64_t)v26);
        llvm::MetadataLoader::MetadataLoaderImpl::resolveForwardRefsAndPlaceholders(a1, (uint64_t)v26);
      }
      if (*(_BYTE *)MetadataFwdRef == 2)
        goto LABEL_21;
      v21 = MetadataFwdRef;
      if ((llvm::MDNode::classof(MetadataFwdRef) & 1) != 0)
        break;
      v14 = "Invalid metadata attachment";
LABEL_19:
      v29 = (llvm::formatv_object_base *)v14;
      v31 = 259;
      error((const llvm::Twine *)a4, &v29);
LABEL_17:
      v12 = 1;
LABEL_22:
      if ((v28 & 1) != 0)
      {
        v15 = v27;
        v27 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      if ((v12 | 2) != 2)
      {
LABEL_51:
        std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100]((uint64_t)v26);
        if (v32 != v34)
          free(v32);
        return;
      }
    }
    if (*(_BYTE *)(a1 + 1041))
    {
      v22 = (llvm::MDNode *)*((unsigned int *)v18 + 1);
      if ((_DWORD)v22 != 18)
      {
LABEL_42:
        if ((_DWORD)v22 == 1)
        {
          v21 = llvm::UpgradeTBAANode(v21, v22);
          LODWORD(v22) = *((_DWORD *)v18 + 1);
        }
        llvm::Instruction::setMetadata(v16, (int)v22, v21);
        goto LABEL_45;
      }
      v21 = llvm::upgradeInstructionLoopAttachment(v21, v22);
    }
    v22 = (llvm::MDNode *)*((unsigned int *)v18 + 1);
    goto LABEL_42;
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  std::string *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  void *v26[2];
  _QWORD v27[65];

  v27[64] = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  if (*(_DWORD *)(a1 + 8) > a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 1) & 0x7F) != 2)
        return;
    }
  }
  v26[0] = v27;
  v26[1] = (void *)0x4000000000;
  v19 = 0;
  v20 = 0;
  llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)(a1 + 328), *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * (a2 - ((uint64_t)(*(_QWORD *)(a1 + 680) - *(_QWORD *)(a1 + 672)) >> 4))), &v22);
  if (v22)
  {
    v17 = "lazyLoadOneMetadata failed jumping: ";
    v18 = 259;
    v13 = v22;
    v22 = 0;
    v7 = &v13;
    goto LABEL_18;
  }
  llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)(a1 + 328), 0, (uint64_t)&v24);
  if ((v25 & 1) != 0)
  {
    v17 = "lazyLoadOneMetadata failed advanceSkippingSubblocks: ";
    v18 = 259;
    v12 = v24;
    v7 = &v12;
    goto LABEL_18;
  }
  llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a1 + 328), SHIDWORD(v24), (unsigned int *)v26, (unsigned __int8 **)&v19, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v17 = "Can't lazyload MD: ";
    v18 = 259;
    v8 = v22;
    v22 = 0;
    v9 = v8;
    v7 = &v9;
    goto LABEL_18;
  }
  llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata((llvm::Twine *)&v11, a1, (int **)v26, v22, a3, v19, v20, (uint64_t)&v21);
  if (v11)
  {
    v17 = "Can't lazyload MD, parseOneMetadata: ";
    v18 = 259;
    v10 = v11;
    v7 = &v10;
LABEL_18:
    llvm::toString(v7, &v14);
    v16 = 260;
    v15 = &v14;
    llvm::operator+((uint64_t *)&v17, (uint64_t *)&v15, (uint64_t)&v24);
    llvm::report_fatal_error((llvm *)&v24, (const llvm::Twine *)1);
  }
  if ((v23 & 1) != 0)
  {
    v6 = v22;
    v22 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (v26[0] != v27)
    free(v26[0]);
}

llvm::MDNode *`anonymous namespace'::BitcodeReaderMetadataList::getMetadataFwdRef(_anonymous_namespace_::BitcodeReaderMetadataList *this, unsigned int a2)
{
  llvm::MDNode *Impl;
  unsigned int v6;
  _BYTE v7[31];

  v6 = a2;
  if (*((_DWORD *)this + 46) <= a2)
    return 0;
  if (*((_DWORD *)this + 2) <= a2)
    llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>((unint64_t)this, a2 + 1);
  Impl = *(llvm::MDNode **)(*(_QWORD *)this + 8 * a2);
  if (!Impl)
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 24, (int *)&v6, (uint64_t)v7);
    Impl = llvm::MDTuple::getImpl(*((_QWORD **)this + 22), 0, 0, (unint64_t *)2, 1);
    llvm::TrackingMDRef::reset((uint64_t *)(*(_QWORD *)this + 8 * v6), (uint64_t)Impl);
  }
  return Impl;
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord(llvm::Twine *a1, uint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  llvm::StringMapImpl *v8;
  uint64_t *v9;
  _DWORD *inserted;
  unint64_t v11;
  llvm::formatv_object_base *v12[2];
  _DWORD v13[4];
  __int16 v14;
  void *v15;
  __int128 v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  if (a4 > 1)
  {
    v6 = *(unsigned int *)a3;
    v15 = v17;
    v16 = xmmword_24AA2ACB0;
    llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v15, a3 + 8, &a3[8 * a4]);
    v7 = ***(_QWORD ***)(a2 + 216);
    v8 = (llvm::StringMapImpl *)(v7 + 2480);
    LODWORD(v7) = *(_DWORD *)(v7 + 2492);
    v12[0] = (llvm::formatv_object_base *)v15;
    v12[1] = (llvm::formatv_object_base *)v16;
    v13[0] = v7;
    v9 = (uint64_t *)(a2 + 1016);
    v11 = v6 | ((unint64_t)*(unsigned int *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(v8, (uint64_t *)v15, v16, v13)+ 8) << 32);
    v12[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(v9, &v11, v12))
    {
      v12[0] = (llvm::formatv_object_base *)"Conflicting METADATA_KIND records";
      v14 = 259;
      error(a1, v12);
    }
    else
    {
      inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucketImpl<unsigned int>((uint64_t)v9, (uint64_t)&v11, &v11, (_DWORD *)v12[0]);
      *(_QWORD *)inserted = v11;
      *(_QWORD *)a1 = 0;
    }
    if (v15 != v17)
      free(v15);
  }
  else
  {
    v12[0] = (llvm::formatv_object_base *)"Invalid record";
    v14 = 259;
    error(a1, v12);
  }
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKinds(llvm::BitstreamCursor **this@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  int v3;
  llvm::formatv_object_base *v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  llvm::formatv_object_base *v9;
  char v10;
  __int16 v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[65];

  v14[64] = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this[25], 0, 22, a2);
  if (!*a2)
  {
    v12 = v14;
    v13 = 0x4000000000;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(this[25], 0, (uint64_t)&v9);
      if ((v10 & 1) != 0)
      {
        v6 = v9;
        *a2 = (uint64_t)v9;
        if (v6)
          goto LABEL_19;
      }
      else
      {
        v3 = (int)v9;
        v2 = HIDWORD(v9);
        *a2 = 0;
      }
      switch(v3)
      {
        case 2:
LABEL_16:
          v9 = (llvm::formatv_object_base *)"Malformed block";
          v11 = 259;
          error((const llvm::Twine *)a2, &v9);
          goto LABEL_19;
        case 1:
          *a2 = 0;
          goto LABEL_19;
        case 0:
          goto LABEL_16;
      }
      LODWORD(v13) = 0;
      llvm::BitstreamCursor::readRecord(this[25], v2, (unsigned int *)&v12, 0, (uint64_t)&v9);
      if ((v10 & 1) != 0)
        break;
      if ((_DWORD)v9 == 6)
      {
        llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataKindRecord((llvm::Twine *)a2, (uint64_t)this, (char *)v12, v13);
        v7 = *a2;
        if ((v10 & 1) != 0)
        {
          v8 = v9;
          v9 = 0;
          if (v8)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v8 + 8))(v8);
        }
        if (v7)
          goto LABEL_19;
      }
    }
    *a2 = (uint64_t)v9;
LABEL_19:
    if (v12 != v14)
      free(v12);
  }
}

_QWORD *std::make_unique[abi:nn180100]<llvm::MetadataLoader::MetadataLoaderImpl,llvm::BitstreamCursor &,llvm::Module &,llvm::BitcodeReaderValueList &,llvm::MetadataLoaderCallbacks,BOOL &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v12 = operator new();
  v13 = (_QWORD *)a4[3];
  if (v13)
  {
    if (v13 == a4)
    {
      v26 = v25;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v25);
    }
    else
    {
      v26 = (_QWORD *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v26 = 0;
  }
  v14 = v27;
  v15 = (_QWORD *)a4[7];
  if (v15)
  {
    if (v15 == a4 + 4)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _QWORD *))(*v15 + 24))(v15, v27);
    }
    else
    {
      v28 = (_QWORD *)a4[7];
      a4[7] = 0;
    }
  }
  else
  {
    v28 = 0;
  }
  v16 = v29;
  LOBYTE(v29[0]) = 0;
  v31 = 0;
  std::__optional_storage_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>>((uint64_t)v29, (uint64_t)(a4 + 8));
  v17 = *a5;
  v18 = *a2;
  v19 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v12 = v12 + 16;
  *(_QWORD *)(v12 + 8) = 0x100000000;
  *(_QWORD *)(v12 + 24) = 1;
  *(_DWORD *)(v12 + 32) = -1;
  *(_QWORD *)(v12 + 48) = 1;
  *(_DWORD *)(v12 + 56) = -1;
  *(_QWORD *)(v12 + 72) = 1;
  *(_QWORD *)(v12 + 80) = -4096;
  *(_QWORD *)(v12 + 96) = 1;
  *(_QWORD *)(v12 + 104) = -4096;
  *(_QWORD *)(v12 + 120) = 1;
  *(_QWORD *)(v12 + 128) = -4096;
  *(_QWORD *)(v12 + 144) = v12 + 160;
  *(_QWORD *)(v12 + 152) = 0x100000000;
  *(_QWORD *)(v12 + 176) = v18;
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  *(_DWORD *)(v12 + 184) = v19;
  *(_QWORD *)(v12 + 192) = a3;
  *(_QWORD *)(v12 + 200) = a1;
  *(_QWORD *)(v12 + 208) = v18;
  *(_QWORD *)(v12 + 216) = a2;
  if (v26)
  {
    if (v26 == v25)
    {
      *(_QWORD *)(v12 + 248) = v12 + 224;
      (*(void (**)(_QWORD *))(v25[0] + 24))(v25);
    }
    else
    {
      *(_QWORD *)(v12 + 248) = v26;
      v26 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v12 + 248) = 0;
  }
  if (v28)
  {
    if (v28 == v27)
    {
      *(_QWORD *)(v12 + 280) = v12 + 256;
      (*(void (**)(_QWORD *))(v27[0] + 24))(v27);
    }
    else
    {
      *(_QWORD *)(v12 + 280) = v28;
      v28 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v12 + 280) = 0;
  }
  *(_BYTE *)(v12 + 288) = 0;
  *(_BYTE *)(v12 + 320) = 0;
  if (v31)
  {
    if (v30)
    {
      if (v30 == v29)
      {
        *(_QWORD *)(v12 + 312) = v12 + 288;
        (*(void (**)(_QWORD *))(v29[0] + 24))(v29);
      }
      else
      {
        *(_QWORD *)(v12 + 312) = v30;
        v30 = 0;
      }
    }
    else
    {
      *(_QWORD *)(v12 + 312) = 0;
    }
    *(_BYTE *)(v12 + 320) = 1;
  }
  *(_OWORD *)(v12 + 328) = 0u;
  *(_OWORD *)(v12 + 344) = 0u;
  *(_QWORD *)(v12 + 360) = 0x200000000;
  *(_QWORD *)(v12 + 368) = 0;
  *(_QWORD *)(v12 + 376) = 0;
  *(_QWORD *)(v12 + 384) = 0;
  *(_QWORD *)(v12 + 392) = v12 + 408;
  *(_QWORD *)(v12 + 400) = 0x800000000;
  *(_QWORD *)(v12 + 744) = 0;
  *(_OWORD *)(v12 + 664) = 0u;
  *(_OWORD *)(v12 + 680) = 0u;
  *(_OWORD *)(v12 + 696) = 0u;
  *(_OWORD *)(v12 + 712) = 0u;
  *(_OWORD *)(v12 + 728) = 0u;
  v20 = 760;
  *(_QWORD *)(v12 + 752) = 1;
  do
  {
    *(_QWORD *)(v12 + v20) = -4096;
    v20 += 16;
  }
  while (v20 != 1016);
  *(_QWORD *)(v12 + 1016) = 0;
  *(_QWORD *)(v12 + 1024) = 0;
  *(_DWORD *)(v12 + 1032) = 0;
  *(_DWORD *)(v12 + 1040) = 0;
  *(_BYTE *)(v12 + 1044) = v17;
  *a6 = v12;
  if (v31)
  {
    if (v30 == v29)
    {
      v21 = 4;
    }
    else
    {
      if (!v30)
        goto LABEL_38;
      v21 = 5;
      v16 = v30;
    }
    (*(void (**)(_QWORD *))(*v16 + 8 * v21))(v16);
  }
LABEL_38:
  if (v28 == v27)
  {
    v22 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_43;
    v22 = 5;
    v14 = v28;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v22))(v14);
LABEL_43:
  result = v26;
  if (v26 == v25)
  {
    v24 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v24 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
}

uint64_t llvm::MetadataLoader::lookupSubprogramForFunction(llvm::MetadataLoader *this, llvm::Function *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  llvm::Function *v6;

  v2 = *(_QWORD *)this + 752;
  v5 = 0;
  v6 = a2;
  v3 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::LookupBucketFor<llvm::Function const*>(v2, &v6, &v5);
  result = 0;
  if (v3)
    return *(_QWORD *)(v5 + 8);
  return result;
}

_DWORD **llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(_DWORD **a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  void **v18;

  if (a1 != (_DWORD **)a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *((unsigned int *)a1 + 2);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v8 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block*>(*(_QWORD *)a2, *(_QWORD *)a2 + 32 * v4, *a1);
        v9 = (uint64_t)*a1;
        v5 = *((unsigned int *)a1 + 2);
      }
      else
      {
        v9 = (uint64_t)*a1;
        v8 = *a1;
      }
      v15 = (_DWORD *)(v9 + 32 * v5);
      if (v15 != v8)
      {
        do
        {
          v16 = v15 - 8;
          v18 = (void **)(v15 - 6);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v18);
          v15 = v16;
        }
        while (v16 != v8);
      }
      goto LABEL_20;
    }
    if (*((_DWORD *)a1 + 3) >= v4)
    {
      if ((_DWORD)v5)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block*>(*(_QWORD *)a2, *(_QWORD *)a2 + 32 * v5, *a1);
        goto LABEL_13;
      }
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = (uint64_t)(*a1 - 6);
        v7 = 32 * v5;
        do
        {
          v18 = (void **)(v6 + v7);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v18);
          v7 -= 32;
        }
        while (v7);
      }
      *((_DWORD *)a1 + 2) = 0;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)a1, v4);
    }
    v5 = 0;
LABEL_13:
    v10 = *(unsigned int *)(a2 + 8);
    if (v5 != v10)
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)a2 + 32 * v10;
      v13 = (uint64_t)&(*a1)[8 * v5];
      v14 = v11 + 32 * v5;
      do
      {
        *(_DWORD *)v13 = *(_DWORD *)v14;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = 0;
        std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__init_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((char *)(v13 + 8), *(_QWORD **)(v14 + 8), *(_QWORD **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
        v14 += 32;
        v13 += 32;
      }
      while (v14 != v12);
    }
LABEL_20:
    *((_DWORD *)a1 + 2) = v4;
  }
  return a1;
}

_DWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block const*,llvm::BitstreamCursor::Block*>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *a3 = *(_DWORD *)v5;
      if ((_DWORD *)v5 != a3)
        std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>((uint64_t)(a3 + 2), *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4);
      v5 += 32;
      a3 += 8;
    }
    while (v5 != a2);
  }
  return a3;
}

char *std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__init_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = a2[1];
      *v7 = *a2;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      *(_DWORD *)(a1 + 8) = a2;
    }
    else
    {
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::truncate(a1, a2);
    }
  }
}

unint64_t llvm::SmallVectorImpl<llvm::TrackingMDRef>::truncate(unint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 != a2)
  {
    v5 = 8 * a2 - 8 * v4;
    v6 = (uint64_t *)(*(_QWORD *)result + 8 * v4 - 8);
    do
    {
      if (*v6)
        result = llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
      --v6;
      v5 += 8;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v6);
  llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(a1, v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;

  result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::uninitialized_move<llvm::TrackingMDRef*,llvm::TrackingMDRef*>(*(unsigned __int8 ***)a1, (unsigned __int8 **)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8)), a2);
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned __int8 ***)a1;
    v6 = v4;
    v7 = v5 - 1;
    do
    {
      result = (uint64_t)&v7[v6];
      v8 = (uint64_t)v7[v6];
      if (v8)
        result = llvm::MetadataTracking::untrack(result, v8);
      --v6;
    }
    while (v6 * 8);
  }
  return result;
}

unsigned __int8 **llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::uninitialized_move<llvm::TrackingMDRef*,llvm::TrackingMDRef*>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 **v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *a3 = *v5;
      if (*v5)
      {
        result = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a3);
        *v5 = 0;
      }
      ++a3;
      ++v5;
    }
    while (v5 != a2);
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUSubprograms(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  _BYTE **v6;
  uint64_t v7;
  llvm::MDNode *v8;
  uint64_t v9;
  _BYTE *v10;

  v2 = *((_QWORD *)this + 91);
  v3 = *((_QWORD *)this + 92);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *(_BYTE **)(v2 + 8);
      if (v4 && *v4 == 4)
      {
        v5 = *((_QWORD *)v4 - 2);
        if ((v5 & 2) != 0)
        {
          v6 = (_BYTE **)*((_QWORD *)v4 - 4);
          v7 = *((unsigned int *)v4 - 6);
          if (v7)
          {
LABEL_8:
            v8 = *(llvm::MDNode **)v2;
            v9 = 8 * v7;
            do
            {
              v10 = *v6;
              if (*v6 && *v10 == 17)
                llvm::MDNode::replaceOperandWith(v10, 5u, v8);
              ++v6;
              v9 -= 8;
            }
            while (v9);
          }
        }
        else
        {
          v6 = (_BYTE **)&v4[-8 * ((v5 >> 2) & 0xF) - 16];
          v7 = (v5 >> 6) & 0xF;
          if (v7)
            goto LABEL_8;
        }
      }
      v2 += 16;
      if (v2 == v3)
      {
        v2 = *((_QWORD *)this + 91);
        break;
      }
    }
  }
  *((_QWORD *)this + 92) = v2;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeCUVariables(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  llvm::Module *v2;
  uint64_t NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  _BYTE *v17;
  _QWORD *v18;
  llvm::MDNode *Impl;
  llvm::MDNode *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::MDNode **v25;
  uint64_t v26;
  llvm::MDNode *v27;
  _QWORD *v28;
  llvm::MDNode *v29;
  void *v30;
  uint64_t v31;
  _WORD v32[12];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 1042))
  {
    v2 = (llvm::Module *)*((_QWORD *)this + 27);
    v30 = "llvm.dbg.cu";
    v32[8] = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v30);
    if (NamedMetadata)
    {
      v4 = NamedMetadata;
      v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if ((_DWORD)v5)
      {
        for (i = 0; i != v5; ++i)
        {
          v7 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + 8 * i);
          v10 = *(_QWORD *)(v7 - 16);
          v8 = v7 - 16;
          v9 = v10;
          if ((v10 & 2) != 0)
            v11 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 48) + 8 * i) - 32);
          else
            v11 = v8 - 8 * ((v9 >> 2) & 0xF);
          v12 = *(_BYTE **)(v11 + 48);
          if (v12 && *v12 == 4)
          {
            v13 = 0;
            v14 = (unint64_t *)(v12 - 16);
            while (1)
            {
              v15 = *v14;
              if ((*v14 & 2) != 0)
              {
                if (v13 >= *((unsigned int *)v12 - 6))
                  break;
                v16 = (unint64_t *)*((_QWORD *)v12 - 4);
              }
              else
              {
                if (v13 >= ((v15 >> 6) & 0xF))
                  break;
                v16 = &v14[-((v15 >> 2) & 0xF)];
              }
              v17 = (_BYTE *)v16[v13];
              if (v17)
              {
                if (*v17 == 24)
                {
                  v18 = (_QWORD *)*((_QWORD *)this + 26);
                  Impl = llvm::DIExpression::getImpl(v18, 0, 0, 0, 1);
                  v20 = llvm::DIGlobalVariableExpression::getImpl(v18, (uint64_t)v17, (uint64_t)Impl, 1, 1);
                  llvm::MDNode::replaceOperandWith(v12, v13, v20);
                }
              }
              ++v13;
            }
          }
        }
      }
    }
    v21 = *((_QWORD *)this + 27);
    v22 = v21 + 8;
    v23 = *(_QWORD *)(v21 + 16);
    if (v23 != v21 + 8)
    {
      do
      {
        if (v23)
          v24 = (llvm::Value *)(v23 - 56);
        else
          v24 = 0;
        v30 = v32;
        v31 = 0x100000000;
        llvm::Value::getMetadata(v24, 0, (unsigned int *)&v30);
        llvm::Value::eraseMetadata(v24, 0);
        v25 = (llvm::MDNode **)v30;
        if ((_DWORD)v31)
        {
          v26 = 8 * v31;
          do
          {
            v27 = *v25;
            if (*(_BYTE *)*v25 == 24)
            {
              v28 = (_QWORD *)*((_QWORD *)this + 26);
              v29 = llvm::DIExpression::getImpl(v28, 0, 0, 0, 1);
              v27 = llvm::DIGlobalVariableExpression::getImpl(v28, (uint64_t)v27, (uint64_t)v29, 1, 1);
            }
            llvm::Value::addMetadata(v24, 0, v27);
            ++v25;
            v26 -= 8;
          }
          while (v26);
          v25 = (llvm::MDNode **)v30;
        }
        if (v25 != (llvm::MDNode **)v32)
          free(v25);
        v23 = *(_QWORD *)(v23 + 8);
      }
      while (v23 != v22);
    }
  }
}

uint64_t std::deque<llvm::DistinctMDOperandPlaceholder>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 16 * v5;
    v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        v10 = *(_QWORD **)(v8 + 8);
        if (v10)
        {
          *v10 = 0;
          v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          v11 = (uint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    v14 = 256;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;

  v17 = 0;
  result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(a1, *a2, &v17);
  v7 = v17;
  v8 = *(_DWORD *)a1;
  if ((_DWORD)result)
  {
    if ((v8 & 1) != 0)
    {
      v9 = a1 + 8;
      v10 = 1;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(unsigned int *)(a1 + 16);
    }
    v13 = 0;
    v14 = v9 + 4 * v10;
    goto LABEL_17;
  }
  v11 = v8 >> 1;
  if ((v8 & 1) != 0)
    v12 = 1;
  else
    v12 = *(_DWORD *)(a1 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_19;
  }
  if (v12 + ~v11 - *(_DWORD *)(a1 + 4) <= v12 >> 3)
  {
LABEL_19:
    llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(a1, v12);
    v17 = 0;
    result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(a1, *a2, &v17);
    v7 = v17;
  }
  *(_DWORD *)a1 += 2;
  if (*v7 != -1)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v15 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(unsigned int *)(a1 + 16);
  }
  v14 = v15 + 4 * v16;
  v13 = 1;
LABEL_17:
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 16) = v13;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(int **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(a1, v7, &v7[v8]);
    JUMPOUT(0x24BD1B398);
  }
  v9 = &v13;
  if (*(_DWORD *)(a1 + 8) <= 0xFFFFFFFD)
  {
    v13 = *(_DWORD *)(a1 + 8);
    v9 = (int *)&v14;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(a1, &v13, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(uint64_t result, int *a2, int *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  int *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(result + 8);
    v7 = 1;
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(void **)(result + 8);
  }
  result = (uint64_t)memset(v8, 255, 4 * v7);
LABEL_9:
  while (a2 != a3)
  {
    v9 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t)v5, v9, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::Metadata *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = 0;
  v4 = a1 + 16;
  v5 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v9);
  v6 = (uint64_t *)&v5[*(unsigned int *)(a1 + 8)];
  v7 = *a2;
  *v6 = *a2;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)v6, v7, 2);
  llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(a1, v5);
  v8 = v9;
  if (*(_QWORD *)a1 != v4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v8;
}

_QWORD *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::init(_QWORD *result, int a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    result = operator new(4 * v4, (std::align_val_t)4uLL);
    *v2 = result;
    v2[1] = 0;
    v5 = *((unsigned int *)v2 + 4);
    if ((_DWORD)v5)
      return memset(result, 255, 4 * v5);
  }
  else
  {
    *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::clear(_QWORD *result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
        result = memset((void *)*result, 255, 4 * v3);
      v1[1] = 0;
    }
    else
    {
      return llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::shrink_and_clear(result);
    }
  }
  return result;
}

_QWORD *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::shrink_and_clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    result[1] = 0;
    if ((_DWORD)v2)
      return memset((void *)*result, 255, 4 * v2);
  }
  else
  {
    MEMORY[0x24BD1B398](*result, 4);
    return llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::init(v1, v5);
  }
  return result;
}

_DWORD *llvm::detail::DenseSetImpl<unsigned int,llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,1u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,llvm::DenseMapInfo<unsigned int,void>>::begin(_DWORD *a1)
{
  int v2;
  _DWORD *result;
  uint64_t v4;
  _DWORD *v5;

  v2 = *a1;
  if (*a1 > 1u)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v5 = a1 + 3;
LABEL_8:
      while (*result >= 0xFFFFFFFE)
      {
        if (++result == v5)
          return v5;
      }
    }
    else
    {
      result = (_DWORD *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
      v5 = &result[v4];
      if ((_DWORD)v4)
        goto LABEL_8;
    }
  }
  else if (v2)
  {
    return a1 + 3;
  }
  else
  {
    return (_DWORD *)(*((_QWORD *)a1 + 1) + 4 * a1[4]);
  }
  return result;
}

llvm::MDNode *`anonymous namespace'::BitcodeReaderMetadataList::resolveTypeRefArray(uint64_t a1, llvm::MDNode *a2)
{
  llvm::MDNode *Impl;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  llvm::MDNode *v11;
  llvm::hashing::detail::hash_state *v13;
  uint64_t v14;
  _QWORD v15[33];

  Impl = a2;
  v15[32] = *MEMORY[0x24BDAC8D0];
  if (!a2 || *(_BYTE *)a2 != 4 || (*((_BYTE *)a2 + 1) & 0x7F) == 1)
    return Impl;
  v13 = (llvm::hashing::detail::hash_state *)v15;
  v14 = 0x2000000000;
  v5 = (unint64_t *)((char *)a2 - 16);
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    v6 = *((unsigned int *)a2 - 6);
    if (v6 >= 0x21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v6, 8);
      v4 = *v5;
    }
  }
  if ((v4 & 2) != 0)
  {
    v7 = (unint64_t *)*((_QWORD *)Impl - 4);
    v8 = *((unsigned int *)Impl - 6);
    if (!*((_DWORD *)Impl - 6))
      goto LABEL_13;
  }
  else
  {
    v7 = &v5[-((v4 >> 2) & 0xF)];
    v8 = (v4 >> 6) & 0xF;
    if (!v8)
      goto LABEL_13;
  }
  v9 = 8 * v8;
  do
  {
    v10 = (_BYTE *)*v7++;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v13, (uint64_t)v11);
    v9 -= 8;
  }
  while (v9);
LABEL_13:
  Impl = llvm::MDTuple::getImpl(*(_QWORD **)(a1 + 176), v13, v14, 0, 1);
  if (v13 != (llvm::hashing::detail::hash_state *)v15)
    free(v13);
  return Impl;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::MDString *>(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 1;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::grow((uint64_t)a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x24BD1B398);
  }
  v9 = v14;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v14[0] = *(_QWORD *)(a1 + 8);
    v14[1] = v10;
    v9 = &v15;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(a1, v14, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

llvm::MDNode *`anonymous namespace'::BitcodeReaderMetadataList::upgradeTypeRef(uint64_t a1, _BYTE *a2)
{
  llvm::MDNode *result;
  _DWORD *v5;
  char v6;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  llvm::MDNode *v10;
  llvm::MDNode *v11;
  uint64_t v12;

  if (!a2)
    return 0;
  if (*a2)
    return (llvm::MDNode *)a2;
  v12 = 0;
  if ((llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 96, (uint64_t)a2, &v12) & 1) == 0|| (result = *(llvm::MDNode **)(v12 + 8)) == 0)
  {
    v5 = (_DWORD *)(a1 + 72);
    v12 = 0;
    v6 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 72, (uint64_t)a2, &v12);
    v7 = (_QWORD *)v12;
    if ((v6 & 1) != 0)
    {
      result = *(llvm::MDNode **)(v12 + 8);
      if (result)
        return result;
      goto LABEL_19;
    }
    v8 = *v5 >> 1;
    if ((*v5 & 1) != 0)
      v9 = 1;
    else
      v9 = *(_DWORD *)(a1 + 88);
    if (4 * v8 + 4 >= 3 * v9)
    {
      v9 *= 2;
    }
    else if (v9 + ~v8 - *(_DWORD *)(a1 + 76) > v9 >> 3)
    {
LABEL_16:
      *v5 += 2;
      if (*v7 != -4096)
        --*(_DWORD *)(a1 + 76);
      *v7 = a2;
      v7[1] = 0;
LABEL_19:
      result = llvm::MDTuple::getImpl(*(_QWORD **)(a1 + 176), 0, 0, (unint64_t *)2, 1);
      v11 = (llvm::MDNode *)v7[1];
      v7[1] = result;
      if (v11)
      {
        llvm::MDNode::deleteTemporary(v11, v10);
        return (llvm::MDNode *)v7[1];
      }
      return result;
    }
    llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::grow(a1 + 72, v9);
    v12 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1 + 72, (uint64_t)a2, &v12);
    v7 = (_QWORD *)v12;
    goto LABEL_16;
  }
  return result;
}

void llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x24BD1B398);
  }
  v9 = v13;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v13[0] = *(_QWORD *)(a1 + 8);
    v13[1] = v10;
    v9 = &v14;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(a1, v13, v9);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::MDNode *v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::MDNode *v14;
  uint64_t *v15;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 24);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_11;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_11:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v15 = 0;
      llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a1, v10, &v15);
      v12 = v15;
      *v15 = *a2;
      v13 = a2[1];
      a2[1] = 0;
      v12[1] = v13;
      *(_DWORD *)a1 += 2;
      v14 = (llvm::MDNode *)a2[1];
      a2[1] = 0;
      if (v14)
        llvm::MDNode::deleteTemporary(v14, v11);
    }
    a2 += 2;
  }
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(_QWORD *a1, llvm::MDNode *a2)
{
  llvm::MDNode **v3;
  llvm::MDNode *v4;
  BOOL v5;

  if (a2 != (llvm::MDNode *)a1)
  {
    v3 = (llvm::MDNode **)((char *)a2 - 16);
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
        llvm::MDNode::deleteTemporary(v4, a2);
      a2 = *v3;
      if (*v3)
        llvm::MetadataTracking::untrack((uint64_t)v3, (uint64_t)a2);
      v5 = v3 == a1;
      v3 -= 2;
    }
    while (!v5);
  }
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::destroyAll(uint64_t a1, llvm::MDNode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::MDNode **v5;
  llvm::MDNode *v6;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = a1 + 8;
    v2 = 1;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v3 = *(_QWORD *)(a1 + 8);
  }
  v4 = 16 * v2;
  v5 = (llvm::MDNode **)(v3 + 8);
  do
  {
    if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        llvm::MDNode::deleteTemporary(v6, a2);
    }
    v5 += 2;
    v4 -= 16;
  }
  while (v4);
}

void llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,`anonymous namespace'::`anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_6::operator()(int **a1)
{
  unint64_t v2;
  llvm::MDNode *Impl;

  v2 = (unint64_t)*a1;
  Impl = llvm::MDTuple::getImpl(*((_QWORD **)*a1 + 26), 0, 0, 0, 1);
  ++*a1[1];
}

llvm::MDNode *llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,`anonymous namespace'::`anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_1::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;

  v3 = *a1;
  v4 = (uint64_t)(*(_QWORD *)(*a1 + 680) - *(_QWORD *)(*a1 + 672)) >> 4;
  if (v4 > a2)
    return (llvm::MDNode *)llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMDString((llvm::MetadataLoader::MetadataLoaderImpl *)*a1, a2);
  v7 = *(_DWORD *)(v3 + 8);
  if (*(_BYTE *)a1[1])
  {
    if (v7 > a2)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v3 + 8 * a2);
      if (v8)
      {
        if (!llvm::MDNode::classof(*(_BYTE **)(*(_QWORD *)v3 + 8 * a2))
          || (*(_BYTE *)(v8 + 1) & 0x7F) != 2 && !*(_DWORD *)(v8 - 8))
        {
          return (llvm::MDNode *)v8;
        }
      }
    }
    v9 = (_QWORD *)a1[3];
    v10 = (char *)v9[2];
    v11 = (char *)v9[1];
    v12 = v10 - v11;
    if (v10 == v11)
      v13 = 0;
    else
      v13 = 32 * (v10 - v11) - 1;
    v14 = v9[4];
    v15 = v9[5] + v14;
    if (v13 != v15)
      goto LABEL_52;
    if (v14 >= 0x100)
    {
      v9[4] = v14 - 256;
      v18 = *(_QWORD *)v11;
      v16 = v11 + 8;
      v17 = v18;
      v9[1] = v16;
      if (v10 == (char *)v9[3])
      {
        v19 = (uint64_t)&v16[-*v9];
        if ((unint64_t)v16 <= *v9)
        {
          if (v10 == (char *)*v9)
            v46 = 1;
          else
            v46 = (uint64_t)&v10[-*v9] >> 2;
          v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v46);
          v49 = &v47[8 * (v46 >> 2)];
          v50 = (uint64_t *)v9[1];
          v10 = v49;
          v51 = v9[2] - (_QWORD)v50;
          if (v51)
          {
            v10 = &v49[v51 & 0xFFFFFFFFFFFFFFF8];
            v52 = 8 * (v51 >> 3);
            v53 = &v47[8 * (v46 >> 2)];
            do
            {
              v54 = *v50++;
              *(_QWORD *)v53 = v54;
              v53 += 8;
              v52 -= 8;
            }
            while (v52);
          }
          v55 = (char *)*v9;
          *v9 = v47;
          v9[1] = v49;
          v9[2] = v10;
          v9[3] = &v47[8 * v48];
          if (v55)
          {
            operator delete(v55);
            v10 = (char *)v9[2];
          }
        }
        else
        {
          v20 = v19 >> 3;
          v21 = v19 >> 3 < -1;
          v22 = (v19 >> 3) + 2;
          if (v21)
            v23 = v22;
          else
            v23 = v20 + 1;
          v24 = -(v23 >> 1);
          v25 = v23 >> 1;
          v26 = &v16[-8 * v25];
          v27 = v10 - v16;
          if (v10 != v16)
          {
            memmove(&v16[-8 * v25], v16, v10 - v16);
            v10 = (char *)v9[1];
          }
          v28 = &v10[8 * v24];
          v10 = &v26[v27];
          v9[1] = v28;
          v9[2] = &v26[v27];
        }
      }
      *(_QWORD *)v10 = v17;
LABEL_50:
      v9[2] += 8;
LABEL_51:
      v11 = (char *)v9[1];
      v15 = v9[5] + v9[4];
LABEL_52:
      v56 = *(_QWORD *)&v11[(v15 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v15;
      *(_QWORD *)(v56 + 8) = 0;
      *(_DWORD *)v56 = 259;
      *(_DWORD *)(v56 + 4) = a2;
      v58 = v9[4];
      v57 = v9[5];
      v9[5] = v57 + 1;
      return (llvm::MDNode *)(*(_QWORD *)(v9[1] + (((unint64_t)(v58 + v57) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (v58 + v57));
    }
    v29 = v12 >> 3;
    v30 = (char *)v9[3];
    v31 = (char *)*v9;
    v32 = (uint64_t)&v30[-*v9];
    if (v12 >> 3 < (unint64_t)(v32 >> 3))
    {
      v33 = operator new(0x1000uLL);
      v34 = v33;
      if (v30 == v10)
      {
        if (v11 == v31)
        {
          if (v10 == v11)
            v59 = 1;
          else
            v59 = (v30 - v11) >> 2;
          v60 = 2 * v59;
          v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v59);
          v11 = &v61[(v60 + 6) & 0xFFFFFFFFFFFFFFF8];
          v63 = (uint64_t *)v9[1];
          v64 = v11;
          v65 = v9[2] - (_QWORD)v63;
          if (v65)
          {
            v64 = &v11[v65 & 0xFFFFFFFFFFFFFFF8];
            v66 = 8 * (v65 >> 3);
            v67 = v11;
            do
            {
              v68 = *v63++;
              *(_QWORD *)v67 = v68;
              v67 += 8;
              v66 -= 8;
            }
            while (v66);
          }
          v69 = (char *)*v9;
          *v9 = v61;
          v9[1] = v11;
          v9[2] = v64;
          v9[3] = &v61[8 * v62];
          if (v69)
          {
            operator delete(v69);
            v11 = (char *)v9[1];
          }
        }
        *((_QWORD *)v11 - 1) = v34;
        v70 = (char *)v9[1];
        v71 = (char *)v9[2];
        v9[1] = v70 - 8;
        v72 = *((_QWORD *)v70 - 1);
        v9[1] = v70;
        if (v71 == (char *)v9[3])
        {
          v73 = (uint64_t)&v70[-*v9];
          if ((unint64_t)v70 <= *v9)
          {
            if (v71 == (char *)*v9)
              v104 = 1;
            else
              v104 = (uint64_t)&v71[-*v9] >> 2;
            v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v104);
            v107 = &v105[8 * (v104 >> 2)];
            v108 = (uint64_t *)v9[1];
            v71 = v107;
            v109 = v9[2] - (_QWORD)v108;
            if (v109)
            {
              v71 = &v107[v109 & 0xFFFFFFFFFFFFFFF8];
              v110 = 8 * (v109 >> 3);
              v111 = &v105[8 * (v104 >> 2)];
              do
              {
                v112 = *v108++;
                *(_QWORD *)v111 = v112;
                v111 += 8;
                v110 -= 8;
              }
              while (v110);
            }
            v113 = (char *)*v9;
            *v9 = v105;
            v9[1] = v107;
            v9[2] = v71;
            v9[3] = &v105[8 * v106];
            if (v113)
            {
              operator delete(v113);
              v71 = (char *)v9[2];
            }
          }
          else
          {
            v74 = v73 >> 3;
            v21 = v73 >> 3 < -1;
            v75 = (v73 >> 3) + 2;
            if (v21)
              v76 = v75;
            else
              v76 = v74 + 1;
            v77 = -(v76 >> 1);
            v78 = v76 >> 1;
            v79 = &v70[-8 * v78];
            v80 = v71 - v70;
            if (v71 != v70)
            {
              memmove(&v70[-8 * v78], v70, v71 - v70);
              v70 = (char *)v9[1];
            }
            v71 = &v79[v80];
            v9[1] = &v70[8 * v77];
            v9[2] = &v79[v80];
          }
        }
        *(_QWORD *)v71 = v72;
      }
      else
      {
        *(_QWORD *)v10 = v33;
      }
      goto LABEL_50;
    }
    v35 = v32 >> 2;
    if (v30 == v31)
      v36 = 1;
    else
      v36 = v35;
    v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v36);
    v39 = v38;
    v40 = &v37[8 * v29];
    v41 = &v37[8 * v38];
    v42 = operator new(0x1000uLL);
    if (v29 == v39)
    {
      v43 = 8 * v29;
      if (v12 < 1)
      {
        v81 = v42;
        v82 = v43 >> 2;
        if (v10 == v11)
          v83 = 1;
        else
          v83 = v82;
        v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v83);
        v40 = &v84[8 * (v83 >> 2)];
        v41 = &v84[8 * v85];
        if (v37)
          operator delete(v37);
        v37 = v84;
        v42 = v81;
      }
      else
      {
        v44 = v43 >> 3;
        if (v44 >= -1)
          v45 = v44 + 1;
        else
          v45 = v44 + 2;
        v40 -= 8 * (v45 >> 1);
      }
    }
    *(_QWORD *)v40 = v42;
    v86 = v40 + 8;
    v87 = v9[2];
    if (v87 == v9[1])
    {
      v102 = v40;
      v88 = v40 + 8;
LABEL_98:
      v103 = (char *)*v9;
      *v9 = v37;
      v9[1] = v102;
      v9[2] = v88;
      v9[3] = v41;
      if (v103)
        operator delete(v103);
      goto LABEL_51;
    }
    while (1)
    {
      if (v40 == v37)
      {
        if (v86 < v41)
        {
          v90 = (v41 - v86) >> 3;
          if (v90 >= -1)
            v91 = v90 + 1;
          else
            v91 = v90 + 2;
          v88 = &v86[8 * (v91 >> 1)];
          v89 = &v40[8 * (v91 >> 1)];
          if (v86 == v40)
            v40 = v86;
          else
            memmove(&v40[8 * (v91 >> 1)], v40, v86 - v40);
          goto LABEL_94;
        }
        if (v41 == v40)
          v92 = 1;
        else
          v92 = (v41 - v40) >> 2;
        v93 = 2 * v92;
        v94 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v92);
        v37 = v94;
        v89 = &v94[(v93 + 6) & 0xFFFFFFFFFFFFFFF8];
        v88 = v89;
        v96 = v86 - v40;
        if (v86 != v40)
        {
          v88 = &v89[v96 & 0xFFFFFFFFFFFFFFF8];
          v97 = 8 * (v96 >> 3);
          v98 = v89;
          v99 = v40;
          do
          {
            v100 = *(_QWORD *)v99;
            v99 += 8;
            *(_QWORD *)v98 = v100;
            v98 += 8;
            v97 -= 8;
          }
          while (v97);
        }
        v41 = &v94[8 * v95];
        operator delete(v40);
      }
      else
      {
        v88 = v86;
        v89 = v40;
      }
      v40 = v37;
LABEL_94:
      v37 = v40;
      v101 = *(_QWORD *)(v87 - 8);
      v87 -= 8;
      *((_QWORD *)v89 - 1) = v101;
      v102 = v89 - 8;
      v86 = v88;
      v40 = v102;
      if (v87 == v9[1])
        goto LABEL_98;
    }
  }
  if (v7 <= a2 || (v8 = *(_QWORD *)(*(_QWORD *)v3 + 8 * a2)) == 0)
  {
    if (v4 + ((uint64_t)(*(_QWORD *)(v3 + 704) - *(_QWORD *)(v3 + 696)) >> 3) <= a2)
    llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadOneMetadata(v3, a2, a1[3]);
    if (*(_DWORD *)(v3 + 8) <= a2)
      return 0;
    else
      return *(llvm::MDNode **)(*(_QWORD *)v3 + 8 * a2);
  }
  return (llvm::MDNode *)v8;
}

_QWORD *`anonymous namespace'::BitcodeReaderMetadataList::addTypeRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a3 + 20) & 4) != 0)
    v3 = a1 + 120;
  else
    v3 = a1 + 96;
  v6 = a2;
  v7 = a3;
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::try_emplace<llvm::DICompositeType *>((uint64_t)v5, v3, &v6, &v7);
}

llvm::MDNode *`anonymous namespace'::BitcodeReaderMetadataList::upgradeTypeRefArray(uint64_t a1, llvm::MDNode *a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  llvm::MDNode **v6;
  llvm::MDNode *v7;
  llvm::MDNode *v8;
  llvm::MDNode *v9;
  llvm::MDNode *Impl;
  llvm::MDNode **p_Impl;
  llvm::MDNode **v13;
  llvm::MDNode *v14;

  if (!a2)
    return a2;
  if (*(_BYTE *)a2 != 4)
    return a2;
  v14 = a2;
  v2 = *((_BYTE *)a2 + 1) & 0x7F;
  if (v2 == 1)
    return a2;
  if (v2 == 2)
  {
    v4 = (_QWORD *)(a1 + 144);
    v13 = &v14;
    Impl = llvm::MDTuple::getImpl(*(_QWORD **)(a1 + 176), 0, 0, (unint64_t *)2, 1);
    p_Impl = &Impl;
    v5 = *(unsigned int *)(a1 + 152);
    if (v5 >= *(_DWORD *)(a1 + 156))
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<llvm::MDTuple*&>,std::tuple<std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>&&>>(a1 + 144, (uint64_t **)&v13, (unsigned __int8 ***)&p_Impl);
    }
    else
    {
      v6 = (llvm::MDNode **)(*v4 + 16 * v5);
      v7 = v14;
      *v6 = v14;
      if (v7)
      {
        llvm::MetadataTracking::track((uint64_t)v6, (uint64_t)v7, 2);
        LODWORD(v5) = *(_DWORD *)(a1 + 152);
      }
      v8 = Impl;
      Impl = 0;
      v6[1] = v8;
      *(_DWORD *)(a1 + 152) = v5 + 1;
    }
    v9 = Impl;
    Impl = 0;
    if (v9)
      llvm::MDNode::deleteTemporary(v9, v7);
    return *(llvm::MDNode **)(*(_QWORD *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 152) - 8);
  }
}

void std::vector<std::pair<llvm::DICompileUnit *,llvm::Metadata *>>::push_back[abi:nn180100](char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeDIExpression(llvm::Twine *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int *v19;
  uint64_t v20;
  llvm::formatv_object_base *v21;
  __int16 v22;

  v9 = *(_QWORD *)(a4 + 8);
  switch(a3)
  {
    case 0:
      v10 = v9 - 3;
      if (v9 < 3)
        goto LABEL_5;
      v11 = *(_QWORD **)a4;
      if (*(_QWORD *)(*(_QWORD *)a4 + 8 * v10) == 157)
        v11[v10] = 4096;
      goto LABEL_7;
    case 1:
LABEL_5:
      if (v9)
      {
        v11 = *(_QWORD **)a4;
LABEL_7:
        if (*v11 == 6)
        {
          v12 = (char *)&v11[v9];
          if (v9 >= 3 && *((_QWORD *)v12 - 3) == 4096)
            v12 -= 24;
          if (v12 != (char *)(v11 + 1))
          {
            memmove(v11, v11 + 1, v12 - (char *)(v11 + 1));
            v9 = *(_QWORD *)(a4 + 8);
          }
          *((_QWORD *)v12 - 1) = 6;
        }
      }
      *(_BYTE *)(a2 + 1043) = 1;
      goto LABEL_15;
    case 2:
LABEL_15:
      if (!v9)
        goto LABEL_38;
      v13 = *(_QWORD **)a4;
      break;
    case 3:
      goto LABEL_39;
    default:
      v21 = (llvm::formatv_object_base *)"Invalid record";
      v22 = 259;
      error(a1, &v21);
      return;
  }
  do
  {
    v14 = *v13;
    if (*v13 > 0x22uLL || ((1 << *v13) & 0x410010000) == 0)
    {
      if (v14 == 4096)
      {
        if (v9 >= 3)
          v17 = 3;
        else
          v17 = v9;
        v18 = v13 + 1;
        goto LABEL_34;
      }
      v16 = 1;
    }
    else
    {
      v16 = 2;
    }
    if (v16 >= v9)
      v17 = v9;
    else
      v17 = v16;
    v18 = v13 + 1;
    if (v14 != 28)
    {
      if (v14 == 34)
      {
        v19 = a5;
        v14 = 35;
LABEL_35:
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v19, v14);
        llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a5, v18, &v13[v17]);
        goto LABEL_37;
      }
LABEL_34:
      v19 = a5;
      goto LABEL_35;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a5, 16);
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a5, (_BYTE *)v13 + 8, &v13[v17]);
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a5, 28);
LABEL_37:
    v13 += v17;
    v9 -= v17;
  }
  while (v9);
LABEL_38:
  v20 = a5[2];
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)(a4 + 8) = v20;
LABEL_39:
  *(_QWORD *)a1 = 0;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::try_emplace<llvm::DICompositeType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = (_QWORD *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::LookupBucketFor<llvm::MDString *>(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 1;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v14 = 0;
    v15 = v10 + 16 * v11;
  }
  else
  {
    result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,llvm::DICompositeType *,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>,llvm::MDString *,llvm::DICompositeType *,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::MDString *>((_DWORD *)a2, a3, v16);
    v9 = result;
    *result = *a3;
    result[1] = *a4;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v15 = v12 + 16 * v13;
    v14 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<llvm::MDTuple*&>,std::tuple<std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>&&>>(uint64_t a1, uint64_t **a2, unsigned __int8 ***a3)
{
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = 0;
  v6 = a1 + 16;
  v7 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 16, &v21);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = (uint64_t *)&v7[2 * v8];
  v10 = *a3;
  v11 = **a2;
  *v9 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)v9, v11, 2);
    v12 = *(unsigned int *)(a1 + 8);
    v13 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v12 = v8;
    v13 = v8;
  }
  v14 = *v10;
  *v10 = 0;
  v7[2 * v8 + 1] = v14;
  v15 = *(unsigned __int8 ***)a1;
  if (v13)
  {
    v16 = 16 * v12;
    v17 = v7;
    do
    {
      *v17 = *v15;
      if (*v15)
      {
        llvm::MetadataTracking::retrack((uint64_t)v15, *v15, (uint64_t)v17);
        *v15 = 0;
      }
      v18 = v15[1];
      v15[1] = 0;
      v17[1] = v18;
      v17 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    v15 = *(unsigned __int8 ***)a1;
    v19 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v19 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(v15, (llvm::MDNode *)&v15[2 * v19]);
  v20 = v21;
  if (*(_QWORD *)a1 != v6)
    free(*(void **)a1);
  *(_QWORD *)a1 = v7;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v20;
}

uint64_t *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::FindAndConstruct(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::grow((uint64_t)a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096)
    --a1[1];
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x24BD1B398);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(a1, v14, v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::parseOneMetadata(llvm::SmallVectorImpl<unsigned long long> &,unsigned int,`anonymous namespace'::`anonymous namespace'::PlaceholderQueue &,llvm::StringRef,unsigned int &)::$_0>(int **a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  char v6;

  v4 = (unint64_t)*a1;
  v5 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**((_QWORD **)*a1 + 26) + 312), a2, a3);
  if (v6)
    *(_QWORD *)(v5 + 16) = v5;
  ++*a1[1];
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Function *,llvm::DISubprogram *,16u,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>,llvm::Function *,llvm::DISubprogram *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::DISubprogram *>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::upgradeDeclareExpressions(llvm::MetadataLoader::MetadataLoaderImpl *this, llvm::Function *a2)
{
  char *v2;
  char *v3;
  char *v5;
  _QWORD *v6;
  _QWORD *i;
  llvm::DbgVariableIntrinsic *v8;
  _BOOL4 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t VariableLocationOp;
  llvm::DIExpression *Impl;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 1043))
  {
    v2 = (char *)a2 + 72;
    v3 = (char *)*((_QWORD *)a2 + 10);
    if (v3 != (char *)a2 + 72)
    {
      do
      {
        v5 = v3 - 24;
        if (!v3)
          v5 = 0;
        v6 = v5 + 40;
        for (i = (_QWORD *)*((_QWORD *)v5 + 6); i != v6; i = (_QWORD *)i[1])
        {
          if (i)
            v8 = (llvm::DbgVariableIntrinsic *)(i - 3);
          else
            v8 = 0;
          v9 = llvm::DbgDeclareInst::classof((uint64_t)v8);
          if (!v9)
            v8 = 0;
          if (i)
          {
            if (v9)
            {
              v10 = *(_QWORD *)(((_QWORD *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[8] + 24);
              if (v10)
              {
                v11 = *(_QWORD **)(v10 + 16);
                if (((*(_QWORD *)(v10 + 24) - (_QWORD)v11) & 0x7FFFFFFF8) != 0 && *v11 == 6)
                {
                  VariableLocationOp = llvm::DbgVariableIntrinsic::getVariableLocationOp(v8, 0);
                  if (VariableLocationOp)
                  {
                    if (*(_BYTE *)(VariableLocationOp + 16) == 21)
                    {
                      v14 = v16;
                      v15 = 0x800000000;
                      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v14, (_BYTE *)(*(_QWORD *)(v10 + 16) + 8), *(_BYTE **)(v10 + 24));
                      Impl = llvm::DIExpression::getImpl(*((_QWORD **)this + 26), v14, v15, 0, 1);
                      llvm::DbgVariableIntrinsic::setExpression(v8, Impl);
                      if (v14 != v16)
                        free(v14);
                    }
                  }
                }
              }
            }
          }
        }
        v3 = (char *)*((_QWORD *)v3 + 1);
      }
      while (v3 != v2);
    }
  }
}

void llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::MetadataLoader::MetadataLoaderImpl::lazyLoadModuleMetadataBlock(void)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD **)(*(_QWORD *)a1 + 680);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 688);
  if ((unint64_t)v6 >= v7)
  {
    v9 = v5[84];
    v10 = ((uint64_t)v6 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v7 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v5 + 86), v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = a3;
    v8 = v15 + 16;
    v17 = (char *)v5[85];
    v18 = (char *)v5[84];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)v5[84];
    }
    v5[84] = v15;
    v5[85] = v8;
    v5[86] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v6 = a2;
    v6[1] = a3;
    v8 = v6 + 2;
  }
  v5[85] = v8;
}

_BYTE *llvm::Expected<BOOL>::moveAssign<BOOL>(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[8];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[8];
      }
    }
    v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v6;
    }
    else
    {
      *v3 = *a2;
    }
  }
  return result;
}

llvm::MetadataLoader::MetadataLoaderImpl *std::unique_ptr<llvm::MetadataLoader::MetadataLoaderImpl>::reset[abi:nn180100](llvm::MetadataLoader::MetadataLoaderImpl **a1, llvm::MetadataLoader::MetadataLoaderImpl *a2)
{
  llvm::MetadataLoader::MetadataLoaderImpl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(llvm::MetadataLoader::MetadataLoaderImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  llvm::MetadataLoader::MetadataLoaderImpl *v5;
  uint64_t v6;
  llvm::MetadataLoader::MetadataLoaderImpl *v7;
  uint64_t v8;
  llvm::MetadataLoader::MetadataLoaderImpl *v9;
  uint64_t v10;
  llvm::MDNode *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void **v18;

  MEMORY[0x24BD1B398](*((_QWORD *)this + 127), 4);
  if ((*((_BYTE *)this + 752) & 1) == 0)
    MEMORY[0x24BD1B398](*((_QWORD *)this + 95), 8);
  v2 = (void *)*((_QWORD *)this + 91);
  if (v2)
  {
    *((_QWORD *)this + 92) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 87);
  if (v3)
  {
    *((_QWORD *)this + 88) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 84);
  if (v4)
  {
    *((_QWORD *)this + 85) = v4;
    operator delete(v4);
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector((char **)this + 49);
  v18 = (void **)((char *)this + 368);
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v18);
  if (*((_BYTE *)this + 320))
  {
    v5 = (llvm::MetadataLoader::MetadataLoaderImpl *)*((_QWORD *)this + 39);
    if (v5 == (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 288))
    {
      v6 = 4;
      v5 = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 288);
    }
    else
    {
      if (!v5)
        goto LABEL_15;
      v6 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
LABEL_15:
  v7 = (llvm::MetadataLoader::MetadataLoaderImpl *)*((_QWORD *)this + 35);
  if (v7 == (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 256))
  {
    v8 = 4;
    v7 = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 256);
  }
  else
  {
    if (!v7)
      goto LABEL_20;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_20:
  v9 = (llvm::MetadataLoader::MetadataLoaderImpl *)*((_QWORD *)this + 31);
  if (v9 == (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 224))
  {
    v10 = 4;
    v9 = (llvm::MetadataLoader::MetadataLoaderImpl *)((char *)this + 224);
  }
  else
  {
    if (!v9)
      goto LABEL_25;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_25:
  llvm::SmallVectorTemplateBase<std::pair<llvm::TrackingMDRef,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>,false>::destroy_range(*((_QWORD **)this + 18), (llvm::MDNode *)(*((_QWORD *)this + 18) + 16 * *((unsigned int *)this + 38)));
  v12 = (char *)*((_QWORD *)this + 18);
  if (v12 != (char *)this + 160)
    free(v12);
  if ((*((_BYTE *)this + 120) & 1) == 0)
    MEMORY[0x24BD1B398](*((_QWORD *)this + 16), 8);
  if ((*((_BYTE *)this + 96) & 1) == 0)
    MEMORY[0x24BD1B398](*((_QWORD *)this + 13), 8);
  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,1u,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>,llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>,llvm::DenseMapInfo<llvm::MDString *,void>,llvm::detail::DenseMapPair<llvm::MDString *,std::unique_ptr<llvm::MDTuple,llvm::TempMDNodeDeleter>>>::destroyAll((uint64_t)this + 72, v11);
  if ((*((_BYTE *)this + 72) & 1) == 0)
    MEMORY[0x24BD1B398](*((_QWORD *)this + 10), 8);
  if ((*((_BYTE *)this + 48) & 1) == 0)
    MEMORY[0x24BD1B398](*((_QWORD *)this + 7), 4);
  if ((*((_BYTE *)this + 24) & 1) == 0)
    MEMORY[0x24BD1B398](*((_QWORD *)this + 4), 4);
  v13 = *(char **)this;
  v14 = *((unsigned int *)this + 2);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = v13 - 8;
    do
    {
      v17 = *(_QWORD *)&v16[v15];
      if (v17)
        llvm::MetadataTracking::untrack((uint64_t)&v16[v15], v17);
      v15 -= 8;
    }
    while (v15);
    v13 = *(char **)this;
  }
  if (v13 != (char *)this + 16)
    free(v13);
}

uint64_t std::__optional_storage_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::function<void ()(llvm::Metadata **,unsigned int,std::function<llvm::Type * ()(unsigned int)>,std::function<unsigned int ()(unsigned int,unsigned int)>)>,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a2 + 32))
  {
    v2 = result;
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
    {
      if (v3 == a2)
      {
        *(_QWORD *)(result + 24) = result;
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), result);
      }
      else
      {
        *(_QWORD *)(result + 24) = v3;
        *(_QWORD *)(a2 + 24) = 0;
      }
    }
    else
    {
      *(_QWORD *)(result + 24) = 0;
    }
    *(_BYTE *)(v2 + 32) = 1;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_MetadataLoader_cpp()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Import full type definitions for ThinLTO.";
  v1.n128_u64[1] = 41;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_25, "import-full-type-definitions", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_25, &dword_24A800000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Force disable the lazy-loading on-demand of metadata when loading bitcode for importing.";
  v1.n128_u64[1] = 88;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_2579637D0, "disable-ondemand-mds-loading", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_2579637D0, &dword_24A800000);
}

void llvm::BitcodeReaderValueList::assignValue(llvm::BitcodeReaderValueList *this@<X0>, llvm::Value *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  llvm::Value *v13;
  llvm::formatv_object_base *v14;
  uint64_t v15[2];

  v9 = *(_QWORD *)this;
  v10 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5;
  if ((_DWORD)v10 == a3)
  {
    llvm::BitcodeReaderValueList::push_back(this, a2, a4);
  }
  else
  {
    if (v10 <= a3)
    {
      std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(this, a3 + 1);
      v9 = *(_QWORD *)this;
    }
    v12 = v9 + 32 * a3;
    v13 = *(llvm::Value **)(v12 + 16);
    if (v13)
    {
      if (*(_QWORD *)v13 != *(_QWORD *)a2)
      {
        v15[0] = 92;
        v15[1] = (uint64_t)std::generic_category();
        v14 = (llvm::formatv_object_base *)"Assigned value does not match type of forward declaration";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v14, v15, a5);
        return;
      }
      llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v12 + 16), a2, (llvm::Value *)1);
      llvm::Value::deleteValue(v13);
    }
    else
    {
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)v12, (uint64_t)a2);
      *(_DWORD *)(v12 + 24) = a4;
    }
  }
  *a5 = 0;
}

llvm::MCAsmLexer *llvm::BitcodeReaderValueList::getValueFwdRef(llvm::BitcodeReaderValueList *this, unsigned int a2, llvm::Type *a3, int a4, llvm::BasicBlock *a5)
{
  uint64_t v10;
  llvm::Type **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  llvm::ValueHandleBase *v16;
  llvm::MCAsmLexer *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 6) <= a2)
    return 0;
  v10 = *(_QWORD *)this;
  if (((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5) <= a2)
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(this, a2 + 1);
    v10 = *(_QWORD *)this;
  }
  v11 = *(llvm::Type ***)(v10 + 32 * a2 + 16);
  if (!v11)
  {
    if (a3)
    {
      v13 = operator new();
      v26 = 257;
      *(_QWORD *)v13 = a3;
      *(_QWORD *)(v13 + 8) = 0;
      v15 = *(_DWORD *)(v13 + 20) & 0xC0000000;
      *(_DWORD *)(v13 + 16) = 21;
      *(_DWORD *)(v13 + 20) = v15;
      *(_QWORD *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 32) = 0;
      llvm::Value::setName((llvm::Value *)v13, (const llvm::Twine *)&v22);
      v22 = 6;
      v23 = 0;
      v24 = v13;
      if (v13 != -8192 && v13 != -4096 && v13)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v22);
      v25 = a4;
      v16 = (llvm::ValueHandleBase *)(*(_QWORD *)this + 32 * a2);
      llvm::ValueHandleBase::operator=(v16, &v22);
      *((_DWORD *)v16 + 6) = v25;
      if (v24 != -8192 && v24 != -4096 && v24)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v22);
      return (llvm::MCAsmLexer *)v13;
    }
    return 0;
  }
  if (a3 && *v11 != a3)
    return 0;
  v12 = *((_QWORD *)this + 7);
  v21 = a2;
  v20 = a5;
  if (v12)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int *, _QWORD **))(*(_QWORD *)v12 + 48))(&v22, v12, &v21, &v20);
    v13 = v22;
    if ((v23 & 1) == 0)
      return (llvm::MCAsmLexer *)v13;
    v22 = 0;
    v20 = (_QWORD *)v13;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v20);
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    if ((v23 & 1) != 0)
    {
      v14 = v22;
      v22 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    return 0;
  }
  v18 = (llvm::MCAsmLexer *)std::__throw_bad_function_call[abi:nn180100]();
  return llvm::AsmLexer::AsmLexer(v18, v19);
}

llvm::MCAsmLexer *llvm::AsmLexer::AsmLexer(llvm::MCAsmLexer *a1, uint64_t a2)
{
  llvm::MCAsmLexer *result;
  BOOL v4;

  result = llvm::MCAsmLexer::MCAsmLexer(a1);
  *(_QWORD *)result = &off_251C1C3E8;
  *((_QWORD *)result + 17) = a2;
  *((_QWORD *)result + 18) = 0;
  *((_QWORD *)result + 19) = 0;
  *((_QWORD *)result + 20) = 0;
  *((_DWORD *)result + 42) = 16777473;
  if (*(_QWORD *)(a2 + 56))
    v4 = **(_BYTE **)(a2 + 48) != 64;
  else
    v4 = 1;
  *((_BYTE *)result + 105) = v4;
  *((_BYTE *)result + 111) = *(_BYTE *)(a2 + 491);
  return result;
}

void llvm::AsmLexer::~AsmLexer(void **this)
{
  llvm::MCAsmLexer::~MCAsmLexer(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::AsmLexer::ReturnError(uint64_t a1, std::string *a2, std::string::size_type a3, std::string *__str)
{
  std::string::size_type v7;

  a2[2].__r_.__value_.__r.__words[2] = a3;
  std::string::operator=(a2 + 3, __str);
  v7 = a2[6].__r_.__value_.__r.__words[0] - a3;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 32) = 64;
  *(_QWORD *)(a1 + 24) = 0;
  return llvm::APInt::clearUnusedBits(a1 + 24);
}

void llvm::AsmLexer::LexFloatLiteral(llvm::AsmLexer *this, std::string *a2)
{
  unsigned __int8 *data;
  int v5;
  unsigned __int8 *v6;
  int v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  std::string __str;

  data = (unsigned __int8 *)a2[6].__r_.__value_.__l.__data_;
  v5 = *data;
  if ((v5 - 48) <= 9)
  {
    v6 = data + 1;
    do
    {
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v7 = *v6++;
      v5 = v7;
    }
    while ((v7 - 48) < 0xA);
    data = v6 - 1;
  }
  if (v5 > 68)
  {
    if (v5 == 69 || v5 == 101)
    {
      v9 = data + 1;
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      v10 = data[1];
      if (v10 == 45 || v10 == 43)
      {
        v9 = data + 2;
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        v10 = data[2];
      }
      data = v9;
      if ((v10 - 48) <= 9)
      {
        v11 = v9 + 1;
        do
        {
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v12 = *v11++;
        }
        while ((v12 - 48) < 0xA);
        data = v11 - 1;
      }
    }
    goto LABEL_20;
  }
  if (v5 != 43 && v5 != 45)
  {
LABEL_20:
    v13 = (unsigned __int8 *)a2[4].__r_.__value_.__l.__data_;
    *(_DWORD *)this = 6;
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = data - v13;
    *((_DWORD *)this + 8) = 64;
    *((_QWORD *)this + 3) = 0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
    return;
  }
  std::string::basic_string[abi:nn180100]<0>(&__str, "invalid sign in float literal");
  a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)data;
  std::string::operator=(a2 + 3, &__str);
  v8 = a2[6].__r_.__value_.__r.__words[0] - (_QWORD)data;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = data;
  *((_QWORD *)this + 2) = v8;
  *((_DWORD *)this + 8) = 64;
  *((_QWORD *)this + 3) = 0;
  llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::AsmLexer::LexHexFloatLiteral(llvm::AsmLexer *this, std::string *a2, int a3)
{
  unsigned __int8 *data;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  std::string::pointer v9;
  char *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  std::string::pointer v16;
  std::string::size_type v17;
  std::string __str;

  data = (unsigned __int8 *)a2[6].__r_.__value_.__l.__data_;
  v6 = *data;
  if (v6 == 46)
  {
    v7 = 0;
    do
    {
      v8 = &data[v7 + 1];
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v6 = *v8;
      ++v7;
    }
    while (llvm::hexDigitValue(char)::LUT[*v8] != -1);
    data += v7;
    if (v7 != 1)
      goto LABEL_7;
  }
  if (a3)
  {
    v9 = a2[4].__r_.__value_.__l.__data_;
    v10 = "invalid hexadecimal floating-point constant: expected at least one significand digit";
  }
  else
  {
LABEL_7:
    if ((v6 | 0x20) == 0x70)
    {
      v11 = data + 1;
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      v12 = data[1];
      if (v12 == 45 || v12 == 43)
      {
        v11 = data + 2;
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        v12 = data[2];
      }
      if ((v12 - 48) <= 9)
      {
        v13 = 0;
        v14 = v11 + 1;
        do
        {
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14[v13];
          v15 = v14[v13++] - 48;
        }
        while (v15 < 0xA);
        if (v13)
        {
          v16 = a2[4].__r_.__value_.__l.__data_;
          *(_DWORD *)this = 6;
          *((_QWORD *)this + 1) = v16;
          *((_QWORD *)this + 2) = v11 - (unsigned __int8 *)v16 + v13;
          *((_DWORD *)this + 8) = 64;
          *((_QWORD *)this + 3) = 0;
          llvm::APInt::clearUnusedBits((uint64_t)this + 24);
          return;
        }
      }
      v9 = a2[4].__r_.__value_.__l.__data_;
      v10 = "invalid hexadecimal floating-point constant: expected at least one exponent digit";
    }
    else
    {
      v9 = a2[4].__r_.__value_.__l.__data_;
      v10 = "invalid hexadecimal floating-point constant: expected exponent part 'p'";
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&__str, v10);
  a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  std::string::operator=(a2 + 3, &__str);
  v17 = a2[6].__r_.__value_.__r.__words[0] - (_QWORD)v9;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = v9;
  *((_QWORD *)this + 2) = v17;
  *((_DWORD *)this + 8) = 64;
  *((_QWORD *)this + 3) = 0;
  llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::AsmLexer::LexIdentifier(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v7;
  int v8;
  uint64_t i;
  int v10;
  BOOL v13;
  _BOOL4 v14;
  BOOL v15;
  std::string::pointer v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;

  data = a2[6].__r_.__value_.__l.__data_;
  if (*(data - 1) == 46 && *data - 48 <= 9)
  {
    v3 = (unsigned __int8 *)(data + 1);
    do
    {
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
      v5 = *v3++;
      v4 = v5;
    }
    while ((v5 - 48) < 0xA);
    data = (std::string::pointer)(v3 - 1);
    if ((v4 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      if ((v4 - 36) > 0x3B || ((1 << (v4 - 36)) & 0x800000008000401) == 0)
      {
        v17 = v4 != 35 || a2[4].__r_.__value_.__s.__data_[10] == 0;
        v18 = !v17;
        v19 = a2[4].__r_.__value_.__s.__data_[9] && v4 == 64;
        if (!v19 && !v18)
          goto LABEL_7;
      }
    }
    else if ((v4 | 0x20) == 0x65)
    {
LABEL_7:
      llvm::AsmLexer::LexFloatLiteral(this, a2);
      return;
    }
  }
  v7 = a2[4].__r_.__value_.__s.__data_[9];
  v8 = a2[4].__r_.__value_.__s.__data_[10];
  for (i = -(uint64_t)data; ; --i)
  {
    v10 = *data;
    if ((v10 - 48) >= 0xA
      && (v10 & 0xFFFFFFDF) - 65 >= 0x1A
      && ((v10 - 36) > 0x3B || ((1 << (v10 - 36)) & 0x800000008000401) == 0))
    {
      v13 = v8 && v10 == 35;
      v14 = v13;
      v15 = v10 != 64 || v7 == 0;
      if (v15 && !v14)
        break;
    }
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
  }
  v16 = a2[4].__r_.__value_.__l.__data_;
  if (data == v16 + 1 && *v16 == 46)
  {
    *(_DWORD *)this = 24;
    *((_QWORD *)this + 1) = v16;
    *((_DWORD *)this + 8) = 64;
    *((_OWORD *)this + 1) = xmmword_24AA2E1A0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  }
  else
  {
    *(_DWORD *)this = 2;
    *((_QWORD *)this + 1) = v16;
    *((_QWORD *)this + 2) = -(uint64_t)&v16[i];
    *((_DWORD *)this + 8) = 64;
    *((_QWORD *)this + 3) = 0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  }
}

void llvm::AsmLexer::LexSlash(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::string::pointer v9;
  std::string::size_type v10;
  std::string::pointer v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  std::string::pointer v15;
  std::string __str;

  if (!*(_BYTE *)(a2[5].__r_.__value_.__r.__words[2] + 65))
    goto LABEL_12;
  data = a2[6].__r_.__value_.__l.__data_;
  v5 = *data;
  if (v5 == 47)
  {
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    llvm::AsmLexer::LexLineComment(this, (uint64_t)a2);
    return;
  }
  if (v5 == 42)
  {
    a2[7].__r_.__value_.__s.__data_[1] = 0;
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = (char *)(a2[6].__r_.__value_.__l.__size_ + a2[6].__r_.__value_.__r.__words[2]);
    if (data + 1 == v6)
    {
LABEL_9:
      v9 = a2[4].__r_.__value_.__l.__data_;
      std::string::basic_string[abi:nn180100]<0>(&__str, "unterminated comment");
      a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
      std::string::operator=(a2 + 3, &__str);
      v10 = a2[6].__r_.__value_.__r.__words[0] - (_QWORD)v9;
      *(_DWORD *)this = 1;
      *((_QWORD *)this + 1) = v9;
      *((_QWORD *)this + 2) = v10;
      *((_DWORD *)this + 8) = 64;
      *((_QWORD *)this + 3) = 0;
      llvm::APInt::clearUnusedBits((uint64_t)this + 24);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = 0;
      while (1)
      {
        v8 = &data[v7 + 2];
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
        if (data[v7 + 1] == 42 && *v8 == 47)
          break;
        if (&data[++v7 + 1] == v6)
          goto LABEL_9;
      }
      size = a2[5].__r_.__value_.__l.__size_;
      if (size)
      {
        (*(void (**)(std::string::size_type, std::string::pointer, std::string::pointer))(*(_QWORD *)size + 16))(size, data + 1, data + 1);
        v13 = (uint64_t)a2[6].__r_.__value_.__l.__data_;
      }
      else
      {
        v13 = (uint64_t)&data[v7 + 2];
      }
      v14 = v13 + 1;
      a2[6].__r_.__value_.__r.__words[0] = v14;
      v15 = a2[4].__r_.__value_.__l.__data_;
      *(_DWORD *)this = 7;
      *((_QWORD *)this + 1) = v15;
      *((_QWORD *)this + 2) = v14 - (_QWORD)v15;
      *((_DWORD *)this + 8) = 64;
      *((_QWORD *)this + 3) = 0;
      llvm::APInt::clearUnusedBits((uint64_t)this + 24);
    }
  }
  else
  {
LABEL_12:
    a2[7].__r_.__value_.__s.__data_[1] = 0;
    v11 = a2[4].__r_.__value_.__l.__data_;
    *(_DWORD *)this = 15;
    *((_QWORD *)this + 1) = v11;
    *((_DWORD *)this + 8) = 64;
    *((_OWORD *)this + 1) = xmmword_24AA2E1A0;
    llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  }
}

uint64_t llvm::AsmLexer::LexLineComment(llvm::AsmLexer *this, uint64_t a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 144);
  v5 = (unsigned __int8 *)(*(_QWORD *)(a2 + 152) + *(_QWORD *)(a2 + 160));
  v6 = (unsigned __int8 *)v4;
  if ((unsigned __int8 *)v4 != v5)
    goto LABEL_3;
  v7 = -1;
  v8 = (unsigned __int8 *)v4;
  while (1)
  {
    v9 = (v7 + 1) > 0xE || ((1 << (v7 + 1)) & 0x4801) == 0;
    if (!v9)
      break;
    v7 = -1;
    v6 = v8;
    v9 = v8 == v5;
    v8 = v5;
    if (!v9)
    {
LABEL_3:
      v8 = v6 + 1;
      *(_QWORD *)(a2 + 144) = v6 + 1;
      v7 = *v6;
    }
  }
  if (v7 == 13 && v8 != v5 && *v8 == 10)
    *(_QWORD *)(a2 + 144) = v8 + 1;
  v10 = *(_QWORD *)(a2 + 128);
  if (v10)
    (*(void (**)(uint64_t, unint64_t, unint64_t, unsigned __int8 *))(*(_QWORD *)v10 + 16))(v10, v4, v4, &v8[~v4]);
  *(_BYTE *)(a2 + 168) = 1;
  if (*(_BYTE *)(a2 + 169))
  {
    v11 = *(_QWORD *)(a2 + 96);
    v12 = *(_QWORD *)(a2 + 144) - v11;
  }
  else
  {
    *(_BYTE *)(a2 + 169) = 1;
    v11 = *(_QWORD *)(a2 + 96);
    v12 = ~v11 + *(_QWORD *)(a2 + 144);
  }
  *(_DWORD *)this = 9;
  *((_QWORD *)this + 1) = v11;
  *((_QWORD *)this + 2) = v12;
  *((_DWORD *)this + 8) = 64;
  *((_QWORD *)this + 3) = 0;
  return llvm::APInt::clearUnusedBits((uint64_t)this + 24);
}

void llvm::AsmLexer::LexDigit(llvm::AsmLexer *this, uint64_t a2)
{
  int v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  std::string::size_type v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  int v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  char v41;
  _QWORD *v42;
  std::string::size_type v43;
  int AsInteger;
  uint64_t v45;
  uint64_t v46;
  llvm::AsmLexer *v47;
  uint64_t v48;
  std::string::size_type v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  std::string::size_type v55;
  unint64_t v56;
  _QWORD *v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  uint64_t v64;
  llvm::AsmLexer *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  std::string::size_type v75;
  char *v76;
  _BYTE *v77;
  _BYTE *i;
  unsigned int v79;
  std::string::size_type v80;
  char *v81;
  _BYTE *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  uint64_t v88;
  std::string::size_type v89;
  _QWORD *v90;
  uint64_t v91;
  std::string v92;
  std::string v93;
  std::string __str;
  std::string::size_type v95;
  unsigned __int8 *v96;

  v4 = *(unsigned __int8 *)(a2 + 109);
  if (!*(_BYTE *)(a2 + 109))
  {
LABEL_9:
    v14 = (unsigned __int8 **)(a2 + 144);
    v15 = *(unsigned __int8 **)(a2 + 144);
    if (*(_BYTE *)(a2 + 111))
    {
      v16 = *(v15 - 1);
      if (v16 == 37)
      {
        if ((*v15 & 0xFE) == 0x30)
        {
          v40 = v15 + 1;
          do
          {
            *v14 = v40;
            v41 = *v40++;
          }
          while ((v41 & 0xFE) == 0x30);
        }
        LODWORD(v93.__r_.__value_.__r.__words[1]) = 128;
        v42 = (_QWORD *)operator new[]();
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        *v42 = 0;
        v42[1] = 0;
        v43 = *(_QWORD *)(a2 + 144) - (_QWORD)v15;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        __str.__r_.__value_.__l.__size_ = v43;
        AsInteger = llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 2u, (llvm::APInt *)&v93);
        v22 = *(_QWORD *)(a2 + 96);
        if (AsInteger)
        {
          v23 = "invalid binary number";
          goto LABEL_66;
        }
        goto LABEL_69;
      }
      if (v16 == 36)
      {
        if (llvm::hexDigitValue(char)::LUT[*v15] != -1)
        {
          v17 = v15 + 1;
          do
          {
            *v14 = v17;
            v18 = *v17++;
          }
          while (llvm::hexDigitValue(char)::LUT[v18] != -1);
        }
        LODWORD(v93.__r_.__value_.__r.__words[1]) = 128;
        v19 = (_QWORD *)operator new[]();
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        *v19 = 0;
        v19[1] = 0;
        v20 = *(_QWORD *)(a2 + 144) - (_QWORD)v15;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        __str.__r_.__value_.__l.__size_ = v20;
        v21 = llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 0x10u, (llvm::APInt *)&v93);
        v22 = *(_QWORD *)(a2 + 96);
        if (v21)
        {
          v23 = "invalid hexadecimal number";
LABEL_66:
          std::string::basic_string[abi:nn180100]<0>(&__str, v23);
          *(_QWORD *)(a2 + 64) = v22;
          std::string::operator=((std::string *)(a2 + 72), &__str);
          v45 = *(_QWORD *)(a2 + 144) - v22;
          *(_DWORD *)this = 1;
          *((_QWORD *)this + 1) = v22;
          *((_QWORD *)this + 2) = v45;
          *((_DWORD *)this + 8) = 64;
          *((_QWORD *)this + 3) = 0;
          llvm::APInt::clearUnusedBits((uint64_t)this + 24);
          goto LABEL_67;
        }
LABEL_69:
        v46 = (uint64_t)&(*v14)[-v22];
        v47 = this;
        v48 = v22;
LABEL_70:
        intToken(v47, v48, v46, (unsigned int *)&v93);
        goto LABEL_71;
      }
    }
    v24 = *(unsigned __int8 *)(a2 + 120);
    if (*(_BYTE *)(a2 + 120) || *(v15 - 1) != 48 || (v25 = *v15, v25 == 46))
    {
      v26 = 0;
      while (1)
      {
        if ((*v15 - 48) >= 0xAu)
        {
          if (!v26)
            v26 = v15;
          if (!v4)
          {
            v31 = 10;
            goto LABEL_47;
          }
          if (llvm::hexDigitValue(char)::LUT[*v15] == -1)
            break;
        }
        ++v15;
      }
      if ((*v15 & 0xDF) == 0x48)
      {
        v26 = v15;
        v31 = 16;
      }
      else
      {
        v31 = 10;
      }
LABEL_47:
      *v14 = v26;
      if (v24 || v31 == 16)
        goto LABEL_53;
      v32 = *v26;
      if (v32 == 101 || v32 == 69)
        goto LABEL_84;
      if (v32 != 46)
      {
LABEL_53:
        v95 = *(_QWORD *)(a2 + 96);
        v96 = &v26[-v95];
        LODWORD(v91) = 128;
        v33 = (_QWORD *)operator new[]();
        v90 = v33;
        *v33 = 0;
        v33[1] = 0;
        if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v95, v31, (llvm::APInt *)&v90))
        {
          v12 = *(_QWORD *)(a2 + 96);
          v13 = v31;
          goto LABEL_55;
        }
        if (!*(_BYTE *)(a2 + 120))
          SkipIgnoredIntegerSuffix((unsigned __int8 **)(a2 + 144));
LABEL_76:
        intToken(this, v95, (uint64_t)v96, (unsigned int *)&v90);
        goto LABEL_77;
      }
      *v14 = v26 + 1;
LABEL_84:
      llvm::AsmLexer::LexFloatLiteral(this, (std::string *)a2);
      return;
    }
    if (v4)
    {
      if ((v25 | 0x20) == 0x78)
        goto LABEL_99;
      goto LABEL_161;
    }
    if (*v15 > 0x61u)
    {
      if (v25 == 120)
        goto LABEL_99;
      if (v25 != 98)
        goto LABEL_161;
    }
    else if (v25 != 66)
    {
      if (v25 != 88)
      {
LABEL_161:
        LODWORD(v96) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v95, 0, 1);
        v77 = 0;
        for (i = *(_BYTE **)(a2 + 144); ; ++i)
        {
          if ((*i - 48) >= 0xAu)
          {
            if (!v77)
              v77 = i;
            if (!*(_BYTE *)(a2 + 109))
            {
              v79 = 8;
              goto LABEL_174;
            }
            if (llvm::hexDigitValue(char)::LUT[*i] == -1)
              break;
          }
        }
        if ((*i & 0xDF) == 0x48)
        {
          v77 = i;
          v79 = 16;
        }
        else
        {
          v79 = 8;
        }
LABEL_174:
        *(_QWORD *)(a2 + 144) = v77;
        v82 = &v77[-*(_QWORD *)(a2 + 96)];
        v90 = *(_QWORD **)(a2 + 96);
        v91 = (uint64_t)v82;
        if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v90, v79, (llvm::APInt *)&v95))
        {
          v83 = *(_QWORD *)(a2 + 96);
          radixName(&v92, v79);
          v84 = std::string::insert(&v92, 0, "invalid ");
          v85 = v84->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          v86 = std::string::append(&v93, " number");
          v87 = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          llvm::AsmLexer::ReturnError((uint64_t)this, (std::string *)a2, v83, &__str);
          goto LABEL_126;
        }
        if (v79 == 16)
          ++*v14;
        SkipIgnoredIntegerSuffix((unsigned __int8 **)(a2 + 144));
        v66 = (uint64_t)v90;
        v67 = v91;
        v65 = this;
        goto LABEL_133;
      }
LABEL_99:
      v52 = 0;
      do
      {
        v53 = &v15[v52 + 1];
        *v14 = v53;
        v54 = *v53;
        ++v52;
      }
      while (llvm::hexDigitValue(char)::LUT[v54] != -1);
      if ((_DWORD)v54 == 46 || (_DWORD)v54 == 112 || (_DWORD)v54 == 80)
      {
        llvm::AsmLexer::LexHexFloatLiteral(this, (std::string *)a2, v52 == 1);
        return;
      }
      if (v52 == 1)
      {
        v80 = (std::string::size_type)(v15 - 1);
        v81 = "invalid hexadecimal number";
        goto LABEL_184;
      }
      LODWORD(v93.__r_.__value_.__r.__words[1]) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v93, 0, 0);
      v89 = *(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 96);
      __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 96);
      __str.__r_.__value_.__l.__size_ = v89;
      if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 0, (llvm::APInt *)&v93))
      {
        if (*(_BYTE *)(a2 + 109) && (**v14 | 0x20) == 0x68)
          ++*v14;
        SkipIgnoredIntegerSuffix((unsigned __int8 **)(a2 + 144));
        v48 = *(_QWORD *)(a2 + 96);
        v46 = *(_QWORD *)(a2 + 144) - v48;
        v47 = this;
        goto LABEL_70;
      }
      v75 = *(_QWORD *)(a2 + 96);
      v76 = "invalid hexadecimal number";
      goto LABEL_182;
    }
    *v14 = v15 + 1;
    v68 = v15[1];
    if ((v68 - 48) > 9)
    {
      *(_QWORD *)(a2 + 144) = v15;
      v88 = *(_QWORD *)(a2 + 96);
      *(_DWORD *)this = 4;
      *((_QWORD *)this + 1) = v88;
      *((_QWORD *)this + 2) = &v15[-v88];
LABEL_96:
      *((_DWORD *)this + 8) = 64;
      *((_QWORD *)this + 3) = 0;
      llvm::APInt::clearUnusedBits((uint64_t)this + 24);
      return;
    }
    if ((v68 & 0xFE) != 0x30)
    {
      v80 = *(_QWORD *)(a2 + 96);
      v81 = "invalid binary number";
LABEL_184:
      std::string::basic_string[abi:nn180100]<0>(&__str, v81);
      llvm::AsmLexer::ReturnError((uint64_t)this, (std::string *)a2, v80, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
    v69 = v15 + 1;
    v70 = v15 + 2;
    do
    {
      *v14 = v70;
      v71 = *v70++;
      ++v69;
    }
    while ((v71 & 0xFE) == 0x30);
    v72 = *(_QWORD *)(a2 + 96);
    v73 = (unint64_t)&v69[-v72];
    LODWORD(v93.__r_.__value_.__r.__words[1]) = 128;
    llvm::APInt::initSlowCase((llvm::APInt *)&v93, 0, 1);
    v74 = 2;
    if (v73 < 2)
      v74 = v73;
    __str.__r_.__value_.__r.__words[0] = v72 + v74;
    __str.__r_.__value_.__l.__size_ = v73 - v74;
    if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 2u, (llvm::APInt *)&v93))
    {
      SkipIgnoredIntegerSuffix((unsigned __int8 **)(a2 + 144));
      v47 = this;
      v48 = v72;
      v46 = v73;
      goto LABEL_70;
    }
    v75 = *(_QWORD *)(a2 + 96);
    v76 = "invalid binary number";
LABEL_182:
    std::string::basic_string[abi:nn180100]<0>(&__str, v76);
    llvm::AsmLexer::ReturnError((uint64_t)this, (std::string *)a2, v75, &__str);
LABEL_67:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_71:
    if (LODWORD(v93.__r_.__value_.__r.__words[1]) >= 0x41)
    {
      v49 = v93.__r_.__value_.__r.__words[0];
      if (v93.__r_.__value_.__r.__words[0])
        goto LABEL_79;
    }
    return;
  }
  v6 = (_QWORD *)(a2 + 144);
  v5 = *(unsigned __int8 **)(a2 + 144);
  v7 = v5 - 1;
  if (((char)*(v5 - 1) & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *(v5 - 1) + 60) & 0x400) != 0)
  {
    if ((*(v5 - 1) & 0xFE) == 0x30)
      v27 = 0;
    else
      v27 = v5 - 1;
    if (*(v5 - 1) - 58 >= 0xFFFFFFF6)
      v7 = 0;
    v28 = *v5;
    if (llvm::hexDigitValue(char)::LUT[v28] != -1)
    {
      v29 = v5 + 1;
      while (1)
      {
        if (((char)v28 - 50) < 8)
          goto LABEL_35;
        if (((char)v28 - 48) >= 2)
          break;
LABEL_37:
        *v6 = v29;
        v30 = *v29++;
        LODWORD(v28) = v30;
        if (llvm::hexDigitValue(char)::LUT[v30] == -1)
        {
          v39 = v29 - 1;
          goto LABEL_82;
        }
      }
      if (!v7)
        v7 = v29 - 1;
LABEL_35:
      if (!v27)
        v27 = v29 - 1;
      goto LABEL_37;
    }
    v39 = *(unsigned __int8 **)(a2 + 144);
LABEL_82:
    if ((_DWORD)v28 == 46)
    {
      *(_QWORD *)(a2 + 144) = v39 + 1;
      goto LABEL_84;
    }
    if (*(_BYTE *)(a2 + 108))
    {
      v50 = 16;
      if ((int)v28 <= 103)
      {
        switch((int)v28)
        {
          case 'O':
          case 'Q':
            goto LABEL_120;
          case 'P':
          case 'S':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            goto LABEL_140;
          case 'R':
            goto LABEL_95;
          case 'T':
            goto LABEL_109;
          case 'Y':
            goto LABEL_110;
          default:
            if ((_DWORD)v28 != 72)
              goto LABEL_140;
            goto LABEL_121;
        }
      }
      switch((int)v28)
      {
        case 'o':
        case 'q':
          goto LABEL_120;
        case 'p':
        case 's':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
          goto LABEL_140;
        case 'r':
LABEL_95:
          *(_QWORD *)(a2 + 144) = v39 + 1;
          v51 = *(_QWORD *)(a2 + 96);
          *(_DWORD *)this = 6;
          *((_QWORD *)this + 1) = v51;
          *((_QWORD *)this + 2) = &v39[-v51 + 1];
          goto LABEL_96;
        case 't':
          goto LABEL_109;
        case 'y':
          goto LABEL_110;
        default:
          if ((_DWORD)v28 != 104)
            goto LABEL_140;
          goto LABEL_121;
      }
    }
    v50 = 16;
    if ((int)v28 <= 103)
    {
      if ((int)v28 <= 80)
      {
        if ((_DWORD)v28 == 72)
          goto LABEL_121;
        if ((_DWORD)v28 != 79)
          goto LABEL_140;
      }
      else if ((_DWORD)v28 != 81)
      {
        if ((_DWORD)v28 != 84)
        {
          if ((_DWORD)v28 != 89)
            goto LABEL_140;
          goto LABEL_110;
        }
        goto LABEL_109;
      }
LABEL_120:
      v50 = 8;
      goto LABEL_121;
    }
    if ((int)v28 <= 112)
    {
      if ((_DWORD)v28 == 104)
        goto LABEL_121;
      if ((_DWORD)v28 == 111)
        goto LABEL_120;
    }
    else
    {
      switch((_DWORD)v28)
      {
        case 'q':
          goto LABEL_120;
        case 'y':
LABEL_110:
          v50 = 2;
          goto LABEL_121;
        case 't':
LABEL_109:
          v50 = 10;
LABEL_121:
          *v6 = ++v39;
          goto LABEL_122;
      }
    }
LABEL_140:
    if (v7 && v7 + 1 == v39 && *(_DWORD *)(a2 + 116) <= 0xDu && (*v7 | 0x20) == 0x64)
    {
      v50 = 10;
    }
    else
    {
      if (!v27 || v27 + 1 != v39 || *(_DWORD *)(a2 + 116) > 0xBu || (*v27 | 0x20) != 0x62)
      {
        *v6 = v5;
        goto LABEL_4;
      }
      v50 = 2;
    }
LABEL_122:
    v55 = *(_QWORD *)(a2 + 96);
    v56 = (unint64_t)&v39[-v55];
    LODWORD(v96) = 128;
    v57 = (_QWORD *)operator new[]();
    v95 = (std::string::size_type)v57;
    *v57 = 0;
    v57[1] = 0;
    v58 = v56 - 1;
    if (v56 < v56 - 1)
      v58 = v56;
    __str.__r_.__value_.__r.__words[0] = v55;
    __str.__r_.__value_.__l.__size_ = v58;
    if (llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, v50, (llvm::APInt *)&v95))
    {
      v59 = *(_QWORD *)(a2 + 96);
      radixName(&v92, v50);
      v60 = std::string::insert(&v92, 0, "invalid ");
      v61 = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v93, " number");
      v63 = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)(a2 + 64) = v59;
      std::string::operator=((std::string *)(a2 + 72), &__str);
      v64 = *(_QWORD *)(a2 + 144) - v59;
      *(_DWORD *)this = 1;
      *((_QWORD *)this + 1) = v59;
      *((_QWORD *)this + 2) = v64;
      *((_DWORD *)this + 8) = 64;
      *((_QWORD *)this + 3) = 0;
      llvm::APInt::clearUnusedBits((uint64_t)this + 24);
LABEL_126:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
LABEL_134:
      if (v96 >= 0x41)
      {
        v49 = v95;
        if (v95)
          goto LABEL_79;
      }
      return;
    }
    SkipIgnoredIntegerSuffix((unsigned __int8 **)(a2 + 144));
    v65 = this;
    v66 = v55;
    v67 = v56;
LABEL_133:
    intToken(v65, v66, v67, (unsigned int *)&v95);
    goto LABEL_134;
  }
LABEL_4:
  if (!*(_BYTE *)(a2 + 112))
    goto LABEL_9;
  v8 = v5 - 1;
  v9 = v5 - 1;
  do
  {
    v10 = *++v8;
    ++v9;
  }
  while ((unsigned __int16)llvm::hexDigitValue(char)::LUT[v10] < 0x10u);
  *(_QWORD *)(a2 + 144) = v8;
  v95 = *(_QWORD *)(a2 + 96);
  v96 = &v9[-v95];
  LODWORD(v91) = 128;
  v11 = (_QWORD *)operator new[]();
  v90 = v11;
  *v11 = 0;
  v11[1] = 0;
  if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&v95, *(_DWORD *)(a2 + 116), (llvm::APInt *)&v90))
    goto LABEL_76;
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_DWORD *)(a2 + 116);
LABEL_55:
  radixName(&v92, v13);
  v34 = std::string::insert(&v92, 0, "invalid ");
  v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v93, " number");
  v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)(a2 + 64) = v12;
  std::string::operator=((std::string *)(a2 + 72), &__str);
  v38 = *(_QWORD *)(a2 + 144) - v12;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = v12;
  *((_QWORD *)this + 2) = v38;
  *((_DWORD *)this + 8) = 64;
  *((_QWORD *)this + 3) = 0;
  llvm::APInt::clearUnusedBits((uint64_t)this + 24);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
LABEL_77:
  if (v91 >= 0x41)
  {
    v49 = (std::string::size_type)v90;
    if (v90)
LABEL_79:
      MEMORY[0x24BD1B380](v49, 0x1000C8000313F17);
  }
}

void radixName(_QWORD *a1, unsigned int a2)
{
  unint64_t v3;
  char *v4;
  std::string *v5;
  std::string::size_type v6;
  std::string v7;

  HIDWORD(v3) = a2;
  LODWORD(v3) = a2 - 2;
  switch((v3 >> 1))
  {
    case 0u:
      v4 = "binary";
      goto LABEL_9;
    case 3u:
      v4 = "octal";
      goto LABEL_9;
    case 4u:
      v4 = "decimal";
      goto LABEL_9;
    case 7u:
      v4 = "hexadecimal";
LABEL_9:
      std::string::basic_string[abi:nn180100]<0>(a1, v4);
      break;
    default:
      std::to_string(&v7, a2);
      v5 = std::string::insert(&v7, 0, "base-");
      v6 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)a1 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      a1[2] = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      break;
  }
}

unsigned __int8 **SkipIgnoredIntegerSuffix(unsigned __int8 **result)
{
  uint64_t v1;
  int v2;

  v1 = (uint64_t)*result;
  v2 = **result;
  if ((v2 | 0x20) == 0x75)
  {
    *result = (unsigned __int8 *)(v1 + 1);
    v2 = *(unsigned __int8 *)++v1;
  }
  if ((v2 | 0x20) == 0x6C)
  {
    *result = (unsigned __int8 *)(v1 + 1);
    v2 = *(unsigned __int8 *)++v1;
  }
  if ((v2 | 0x20) == 0x6C)
    *result = (unsigned __int8 *)(v1 + 1);
  return result;
}

_QWORD *intToken(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  int v10;
  unsigned int v11;

  v7 = result;
  v8 = a4[2];
  if (v8 >= 0x41)
  {
    v11 = v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
    v9 = (void *)operator new[]();
    result = memcpy(v9, *(const void **)a4, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    if (v11 < 0x41)
      v10 = 4;
    else
      v10 = 5;
  }
  else
  {
    v9 = *(void **)a4;
    v10 = 4;
  }
  *(_DWORD *)v7 = v10;
  v7[1] = a2;
  v7[2] = a3;
  *((_DWORD *)v7 + 8) = v8;
  v7[3] = v9;
  return result;
}

void llvm::AsmLexer::LexSingleQuote(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data;
  std::string::pointer v5;
  int v6;
  std::string::pointer v7;
  char *v8;
  std::string::size_type v9;
  std::string::pointer v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  std::string::pointer v14;
  uint64_t v15;
  uint64_t v16;
  std::string::pointer v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string __str;

  data = a2[6].__r_.__value_.__l.__data_;
  v5 = (std::string::pointer)(a2[6].__r_.__value_.__l.__size_ + a2[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    v6 = -1;
  }
  else
  {
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = *data++;
  }
  if (a2[5].__r_.__value_.__s.__data_[1])
  {
    v7 = a2[4].__r_.__value_.__l.__data_;
    v8 = "invalid usage of character literals";
    goto LABEL_6;
  }
  if (!a2[4].__r_.__value_.__s.__data_[14])
  {
    if (v6 != -1)
    {
      if (v6 != 92)
        goto LABEL_23;
      if (data != v5)
      {
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
LABEL_23:
        if (data != v5)
        {
          v13 = data + 1;
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          if (*data == 39)
          {
            v14 = a2[4].__r_.__value_.__l.__data_;
            v15 = v13 - v14;
            if ((unint64_t)(v13 - v14) >= 2 && *(_WORD *)v14 == 23591)
            {
              v18 = v14[2];
              v19 = v14[2];
              v20 = 10;
              v21 = 13;
              v22 = 9;
              if (v18 != 116)
                v22 = v14[2];
              if (v18 != 114)
                v21 = v22;
              if (v18 != 110)
                v20 = v21;
              if (v18 == 102)
                v19 = 12;
              if (v18 == 98)
                v19 = 8;
              if (v18 == 39)
                v19 = v14[2];
              if (v18 <= 109)
                v16 = v19;
              else
                v16 = v20;
            }
            else
            {
              v16 = v14[1];
            }
            *(_DWORD *)this = 4;
            *((_QWORD *)this + 1) = v14;
            *((_QWORD *)this + 2) = v15;
            *((_DWORD *)this + 8) = 64;
            *((_QWORD *)this + 3) = v16;
            llvm::APInt::clearUnusedBits((uint64_t)this + 24);
            return;
          }
        }
        v7 = a2[4].__r_.__value_.__l.__data_;
        v8 = "single quote way too long";
LABEL_6:
        std::string::basic_string[abi:nn180100]<0>(&__str, v8);
        a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
        std::string::operator=(a2 + 3, &__str);
        v9 = a2[6].__r_.__value_.__r.__words[0] - (_QWORD)v7;
        *(_DWORD *)this = 1;
        *((_QWORD *)this + 1) = v7;
        *((_QWORD *)this + 2) = v9;
        *((_DWORD *)this + 8) = 64;
        *((_QWORD *)this + 3) = 0;
        llvm::APInt::clearUnusedBits((uint64_t)this + 24);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        return;
      }
    }
    v7 = a2[4].__r_.__value_.__l.__data_;
    v8 = "unterminated single quote";
    goto LABEL_6;
  }
  while (1)
  {
    while (1)
    {
      v10 = data;
      if (v6 == 39)
        break;
      if (v6 == -1)
      {
        v7 = a2[4].__r_.__value_.__l.__data_;
        v8 = "unterminated string constant";
        goto LABEL_6;
      }
      v6 = -1;
      data = v5;
      if (v10 != v5)
      {
        v11 = 1;
        v12 = (unsigned __int8 *)v10;
        goto LABEL_18;
      }
    }
    if (data == v5)
      goto LABEL_30;
    if (*data != 39)
      break;
    v12 = (unsigned __int8 *)(data + 1);
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = -1;
    data = v5;
    if (v10 + 1 != v5)
    {
      v11 = 2;
LABEL_18:
      data = &v10[v11];
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      v6 = *v12;
    }
  }
  v5 = data;
LABEL_30:
  v17 = a2[4].__r_.__value_.__l.__data_;
  *(_DWORD *)this = 3;
  *((_QWORD *)this + 1) = v17;
  *((_QWORD *)this + 2) = v5 - v17;
  *((_DWORD *)this + 8) = 64;
  *((_QWORD *)this + 3) = 0;
  llvm::APInt::clearUnusedBits((uint64_t)this + 24);
}

void llvm::AsmLexer::LexQuote(llvm::AsmLexer *this, std::string *a2)
{
  std::string::pointer data;
  std::string::pointer v5;
  int v6;
  std::string::pointer v7;
  char *v8;
  std::string::pointer v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  std::string::pointer v13;
  std::string::size_type v14;
  std::string::pointer v15;
  std::string __str;

  data = a2[6].__r_.__value_.__l.__data_;
  v5 = (std::string::pointer)(a2[6].__r_.__value_.__l.__size_ + a2[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    v6 = -1;
  }
  else
  {
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = *data++;
  }
  if (a2[5].__r_.__value_.__s.__data_[1])
  {
    v7 = a2[4].__r_.__value_.__l.__data_;
    v8 = "invalid usage of string literals";
    goto LABEL_26;
  }
  if (!a2[4].__r_.__value_.__s.__data_[14])
  {
    while (1)
    {
      switch(v6)
      {
        case 92:
          if (data == v5)
            goto LABEL_25;
          v12 = (unsigned __int8 *)(data + 1);
          a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          break;
        case -1:
LABEL_25:
          v7 = a2[4].__r_.__value_.__l.__data_;
          v8 = "unterminated string constant";
LABEL_26:
          std::string::basic_string[abi:nn180100]<0>(&__str, v8);
          a2[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
          std::string::operator=(a2 + 3, &__str);
          v14 = a2[6].__r_.__value_.__r.__words[0] - (_QWORD)v7;
          *(_DWORD *)this = 1;
          *((_QWORD *)this + 1) = v7;
          *((_QWORD *)this + 2) = v14;
          *((_DWORD *)this + 8) = 64;
          *((_QWORD *)this + 3) = 0;
          llvm::APInt::clearUnusedBits((uint64_t)this + 24);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          return;
        case 34:
          v13 = a2[4].__r_.__value_.__l.__data_;
          *(_DWORD *)this = 3;
          *((_QWORD *)this + 1) = v13;
          *((_QWORD *)this + 2) = data - v13;
          goto LABEL_31;
        default:
          v12 = (unsigned __int8 *)data;
          break;
      }
      v6 = -1;
      data = v5;
      if (v12 != (unsigned __int8 *)v5)
      {
        data = (std::string::pointer)(v12 + 1);
        a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 1);
        v6 = *v12;
      }
    }
  }
  while (1)
  {
    while (1)
    {
      v9 = data;
      if (v6 == 34)
        break;
      if (v6 == -1)
        goto LABEL_25;
      v6 = -1;
      data = v5;
      if (v9 != v5)
      {
        v10 = 1;
        v11 = (unsigned __int8 *)v9;
        goto LABEL_15;
      }
    }
    if (data == v5)
      goto LABEL_30;
    if (*data != 34)
      break;
    v11 = (unsigned __int8 *)(data + 1);
    a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = -1;
    data = v5;
    if (v9 + 1 != v5)
    {
      v10 = 2;
LABEL_15:
      data = &v9[v10];
      a2[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      v6 = *v11;
    }
  }
  v5 = data;
LABEL_30:
  v15 = a2[4].__r_.__value_.__l.__data_;
  *(_DWORD *)this = 3;
  *((_QWORD *)this + 1) = v15;
  *((_QWORD *)this + 2) = v5 - v15;
LABEL_31:
  *((_DWORD *)this + 8) = 64;
  *((_QWORD *)this + 3) = 0;
  llvm::APInt::clearUnusedBits((uint64_t)this + 24);
}

const char *llvm::AsmLexer::LexUntilEndOfStatement(llvm::AsmLexer *this)
{
  const char *v2;
  const char *v4;
  const char *v5;
  size_t v6;
  int v7;

  v2 = (const char *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 12) = v2;
  if (!llvm::AsmLexer::isAtStartOfComment(this, v2))
  {
    v4 = *(const char **)(*((_QWORD *)this + 17) + 40);
    v5 = v2;
    do
    {
      v6 = strlen(v4);
      if (!strncmp(v5, v4, v6))
        break;
      v7 = *(unsigned __int8 *)v5;
      if (v7 == 10 || v7 == 13)
        break;
      if (v5 == (const char *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
        break;
      *((_QWORD *)this + 18) = ++v5;
    }
    while (!llvm::AsmLexer::isAtStartOfComment(this, v5));
  }
  return v2;
}

BOOL llvm::AsmLexer::isAtStartOfComment(llvm::AsmLexer *this, const char *__s1)
{
  uint64_t v2;
  size_t v3;
  const char *v4;

  v2 = *((_QWORD *)this + 17);
  if (*(_BYTE *)(v2 + 64) && !*((_BYTE *)this + 169))
    return 0;
  v4 = *(const char **)(v2 + 48);
  v3 = *(_QWORD *)(v2 + 56);
  if (v3 == 1 || v4[1] == 35)
    return *(unsigned __int8 *)v4 == *(unsigned __int8 *)__s1;
  else
    return strncmp(__s1, v4, v3) == 0;
}

uint64_t llvm::AsmLexer::peekTokens(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::APInt *v15;
  __int128 v16;
  int v17;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  std::string __str;

  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_BYTE *)(a1 + 168);
  v10 = *(_BYTE *)(a1 + 169);
  v20 = *(_BYTE *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = a4;
  v11 = *(_BYTE *)(a1 + 170);
  *(_BYTE *)(a1 + 170) = 1;
  v12 = (std::string *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
  v13 = *(_QWORD *)(a1 + 64);
  v21 = v11;
  if (a3)
  {
    v19 = v10;
    v14 = 0;
    v15 = (llvm::APInt *)(a2 + 24);
    while (1)
    {
      (**(void (***)(__int128 *__return_ptr, uint64_t))a1)(&v22, a1);
      v16 = v22;
      *((_QWORD *)v15 - 1) = v23;
      *(_OWORD *)((char *)v15 - 24) = v16;
      llvm::APInt::operator=(v15, (const llvm::APInt *)&v24);
      v17 = v22;
      if (v25 >= 0x41 && v24)
        MEMORY[0x24BD1B380](v24, 0x1000C8000313F17);
      if (!v17)
        break;
      ++v14;
      v15 = (llvm::APInt *)((char *)v15 + 40);
      if (a3 == v14)
      {
        v14 = a3;
        break;
      }
    }
    v10 = v19;
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(a1 + 64) = v13;
  std::string::operator=(v12, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 170) = v21;
  *(_BYTE *)(a1 + 104) = v20;
  *(_BYTE *)(a1 + 169) = v10;
  *(_BYTE *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 96) = v7;
  return v14;
}

void llvm::AsmLexer::LexToken(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  const char *data;
  unsigned int v6;
  uint64_t j;
  char *v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  std::string::pointer v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t k;
  uint64_t v19;
  std::string::size_type v20;
  const char *v21;
  size_t v22;
  std::string::value_type v23;
  size_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  int64_t i;
  int v30;
  int v32;
  int v33;
  std::string::pointer v34;
  std::string::pointer v35;
  int v36;
  std::string::pointer v37;
  size_t v38;
  std::string::pointer v39;
  std::string::pointer v40;
  std::string::pointer v41;
  int v42;
  std::string::pointer v43;
  std::string::pointer v44;
  int v45;
  std::string::pointer v46;
  std::string::size_type v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v60;
  uint64_t v64;
  std::string __p;
  _DWORD v68[10];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  data = this[6].__r_.__value_.__l.__data_;
  size = this[6].__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  if (data == (const char *)(size + this[6].__r_.__value_.__r.__words[2]))
  {
    v6 = -1;
    goto LABEL_37;
  }
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
  v6 = *(unsigned __int8 *)data;
  if (this[7].__r_.__value_.__s.__data_[2] || v6 != 35)
  {
LABEL_37:
    if (llvm::AsmLexer::isAtStartOfComment((llvm::AsmLexer *)this, data))
    {
      llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)a2, (uint64_t)this);
      return;
    }
    v20 = this[5].__r_.__value_.__r.__words[2];
    v21 = *(const char **)(v20 + 40);
    v22 = strlen(v21);
    if (!strncmp(data, v21, v22))
    {
      this[6].__r_.__value_.__r.__words[0] = v22 + this[6].__r_.__value_.__r.__words[0] - 1;
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      v24 = strlen(v21);
      *(_DWORD *)a2 = 9;
      *(_QWORD *)(a2 + 8) = data;
      *(_QWORD *)(a2 + 16) = v24;
LABEL_44:
      *(_DWORD *)(a2 + 32) = 64;
      goto LABEL_53;
    }
    if (v6 != -1)
    {
      v23 = this[7].__r_.__value_.__s.__data_[1];
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      switch(v6)
      {
        case 0u:
        case 9u:
        case 0x20u:
          this[7].__r_.__value_.__s.__data_[1] = v23;
          v28 = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
          for (i = v28 - (unsigned __int8 *)data; ; ++i)
          {
            v30 = *v28++;
            if (v30 != 32 && v30 != 9)
              break;
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          if (!this[4].__r_.__value_.__s.__data_[8])
          {
            v33 = 11;
            goto LABEL_73;
          }
          (*(void (**)(std::string *))this->__r_.__value_.__l.__data_)(this);
          return;
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x2Eu:
        case 0x3Bu:
        case 0x3Fu:
        case 0x41u:
        case 0x42u:
        case 0x43u:
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x50u:
        case 0x51u:
        case 0x52u:
        case 0x53u:
        case 0x54u:
        case 0x55u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
LABEL_65:
          if (v6 <= 0x7F)
            v32 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v6 + 60) & 0x100;
          else
            v32 = __maskrune(v6, 0x100uLL);
          if (v32 || v6 == 46 || v6 == 95 || *(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 181) && v6 == 63)
            goto LABEL_124;
          v47 = this[4].__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:nn180100]<0>(&__p, "invalid character in input");
          llvm::AsmLexer::ReturnError(a2, this, v47, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        case 0xAu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          v27 = 9;
          goto LABEL_183;
        case 0xDu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          v34 = this[6].__r_.__value_.__l.__data_;
          if (v34 != (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2])
            && *v34 == 10)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++v34;
          }
          i = v34 - data;
          v33 = 9;
LABEL_73:
          *(_DWORD *)a2 = v33;
          *(_QWORD *)(a2 + 8) = data;
          *(_QWORD *)(a2 + 16) = i;
          goto LABEL_44;
        case 0x21u:
          v35 = this[6].__r_.__value_.__l.__data_;
          if (*v35 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v35 + 1);
            v36 = 35;
            goto LABEL_140;
          }
          v27 = 34;
          goto LABEL_183;
        case 0x22u:
          llvm::AsmLexer::LexQuote((llvm::AsmLexer *)a2, this);
          return;
        case 0x23u:
          if (*(_BYTE *)(v20 + 184))
            goto LABEL_124;
          v27 = 37;
          goto LABEL_183;
        case 0x24u:
          if (this[4].__r_.__value_.__s.__data_[15]
            && llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)this[6].__r_.__value_.__l.__data_] != -1)
          {
            goto LABEL_42;
          }
          if (*(_BYTE *)(v20 + 182))
            goto LABEL_124;
          v27 = 26;
          goto LABEL_183;
        case 0x25u:
          if (this[4].__r_.__value_.__s.__data_[15] && (*this[6].__r_.__value_.__l.__data_ & 0xFE) == 0x30)
            goto LABEL_42;
          if (!*(_BYTE *)(v20 + 490))
            goto LABEL_182;
          v37 = this[6].__r_.__value_.__l.__data_;
          if (!v37)
            goto LABEL_182;
          v38 = strlen(this[6].__r_.__value_.__l.__data_);
          if (v38 < 6)
          {
            if (v38 < 3)
            {
              if (v38 != 2)
                goto LABEL_182;
              goto LABEL_179;
            }
            if (*(_WORD *)v37 != 28519 || v37[2] != 116)
              goto LABEL_179;
            goto LABEL_198;
          }
          v49 = 0x70000002FLL;
          if (*(_DWORD *)v37 == 1819042147 && *((_WORD *)v37 + 2) == 13873)
            goto LABEL_253;
          if (v38 < 7)
            goto LABEL_147;
          if (*(_DWORD *)v37 == 1819042147 && *(_DWORD *)(v37 + 3) == 1768447852)
          {
            v49 = 0x800000030;
            goto LABEL_253;
          }
          if (*(_DWORD *)v37 == 1819042147 && *(_DWORD *)(v37 + 3) == 1869373292)
          {
            v49 = 0x800000031;
            goto LABEL_253;
          }
          if (v38 < 9)
          {
            if (v38 != 8)
              goto LABEL_147;
            goto LABEL_224;
          }
          if (*(_QWORD *)v37 == 0x685F6C6572707464 && v37[8] == 105)
          {
            LODWORD(v49) = 50;
          }
          else
          {
            if (*(_QWORD *)v37 != 0x6C5F6C6572707464 || v37[8] != 111)
            {
LABEL_224:
              if (*(_QWORD *)v37 == 0x707369645F746F67)
              {
                v49 = 0x900000035;
                goto LABEL_253;
              }
LABEL_147:
              if (*(_DWORD *)v37 == 1601466215 && *((_WORD *)v37 + 2) == 26984)
              {
                v49 = 0x700000036;
                goto LABEL_253;
              }
              if (*(_DWORD *)v37 == 1601466215 && *((_WORD *)v37 + 2) == 28524)
              {
                v49 = 0x700000037;
                goto LABEL_253;
              }
              if (v38 >= 8)
              {
                switch(*(_QWORD *)v37)
                {
                  case 0x7473666F5F746F67:
                    v49 = 0x900000038;
                    goto LABEL_253;
                  case 0x656761705F746F67:
                    v49 = 0x900000039;
                    goto LABEL_253;
                  case 0x6C65727074746F67:
                    v49 = 0x90000003ALL;
                    goto LABEL_199;
                }
              }
              if (*(_WORD *)v37 != 28519 || v37[2] != 116)
              {
                if (*(_DWORD *)v37 != 1918857319 || *((_WORD *)v37 + 2) != 27749)
                {
                  if (*(_DWORD *)v37 == 1751607656 && *((_WORD *)v37 + 2) == 29285)
                  {
                    v49 = 0x70000003DLL;
                    goto LABEL_253;
                  }
                  if (v38 >= 7 && *(_DWORD *)v37 == 1751607656 && *(_DWORD *)(v37 + 3) == 1953719656)
                  {
                    v49 = 0x80000003ELL;
                    goto LABEL_253;
                  }
LABEL_179:
                  v49 = 0x30000003CLL;
                  if (*(_WORD *)v37 == 26984)
                    goto LABEL_253;
                  if (*(_WORD *)v37 == 28524)
                  {
                    v49 = 0x30000003FLL;
                    goto LABEL_253;
                  }
                  if (v38 < 3)
                  {
LABEL_182:
                    v27 = 36;
                    goto LABEL_183;
                  }
                  if (*(_WORD *)v37 == 25966 && v37[2] == 103)
                  {
                    v64 = 0x400000034;
                  }
                  else
                  {
                    if (v38 < 8)
                    {
                      if (v38 < 5)
                        goto LABEL_182;
LABEL_229:
                      if (*(_DWORD *)v37 == 1735617652 && v37[4] == 100)
                      {
                        v49 = 0x600000043;
                      }
                      else
                      {
                        if (v38 < 6)
                          goto LABEL_182;
                        if (*(_DWORD *)v37 != 1819503732 || *((_WORD *)v37 + 2) != 28004)
                        {
                          if (v38 < 8)
                            goto LABEL_182;
                          if (*(_QWORD *)v37 == 0x69685F6C65727074)
                          {
                            LODWORD(v49) = 69;
                          }
                          else
                          {
                            if (*(_QWORD *)v37 != 0x6F6C5F6C65727074)
                              goto LABEL_182;
                            LODWORD(v49) = 70;
                          }
                          LODWORD(v60) = 9;
                          goto LABEL_254;
                        }
                        v49 = 0x700000044;
                      }
                      goto LABEL_253;
                    }
                    v64 = 0x900000035;
                    if (*(_QWORD *)v37 != 0x69685F6C65726370)
                    {
                      if (*(_QWORD *)v37 != 0x6F6C5F6C65726370)
                        goto LABEL_229;
                      v49 = 0x900000042;
LABEL_253:
                      v60 = HIDWORD(v49);
                      goto LABEL_254;
                    }
                  }
                  v49 = v64 + 12;
                  goto LABEL_253;
                }
                v49 = 0x70000003BLL;
LABEL_199:
                v60 = HIDWORD(v49);
                goto LABEL_254;
              }
LABEL_198:
              v49 = 0x400000034;
              goto LABEL_199;
            }
            LODWORD(v49) = 51;
          }
          LODWORD(v60) = 10;
LABEL_254:
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v37[(v60 - 1)];
          *(_DWORD *)a2 = v49;
          *(_QWORD *)(a2 + 8) = data;
          *(_QWORD *)(a2 + 16) = v60;
          goto LABEL_44;
        case 0x26u:
          v39 = this[6].__r_.__value_.__l.__data_;
          if (*v39 == 38)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v39 + 1);
            v36 = 33;
            goto LABEL_140;
          }
          v27 = 32;
          goto LABEL_183;
        case 0x27u:
          llvm::AsmLexer::LexSingleQuote((llvm::AsmLexer *)a2, this);
          return;
        case 0x28u:
          v27 = 17;
          goto LABEL_183;
        case 0x29u:
          v27 = 18;
          goto LABEL_183;
        case 0x2Au:
          v27 = 23;
          goto LABEL_183;
        case 0x2Bu:
          v27 = 12;
          goto LABEL_183;
        case 0x2Cu:
          v27 = 25;
          goto LABEL_183;
        case 0x2Du:
          v40 = this[6].__r_.__value_.__l.__data_;
          if (*v40 == 62)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 1);
            v36 = 46;
            goto LABEL_140;
          }
          v27 = 13;
          goto LABEL_183;
        case 0x2Fu:
          this[7].__r_.__value_.__s.__data_[1] = v23;
          llvm::AsmLexer::LexSlash((llvm::AsmLexer *)a2, this);
          return;
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x36u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
LABEL_42:
          llvm::AsmLexer::LexDigit((llvm::AsmLexer *)a2, (uint64_t)this);
          return;
        case 0x3Au:
          v27 = 10;
          goto LABEL_183;
        case 0x3Cu:
          v41 = this[6].__r_.__value_.__l.__data_;
          v42 = *v41;
          switch(v42)
          {
            case '>':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 1);
              v36 = 41;
              goto LABEL_140;
            case '=':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 1);
              v36 = 39;
              goto LABEL_140;
            case '<':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 1);
              v36 = 40;
              goto LABEL_140;
          }
          v27 = 38;
          goto LABEL_183;
        case 0x3Du:
          v43 = this[6].__r_.__value_.__l.__data_;
          if (*v43 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v43 + 1);
            v36 = 28;
            goto LABEL_140;
          }
          v27 = 27;
          goto LABEL_183;
        case 0x3Eu:
          v44 = this[6].__r_.__value_.__l.__data_;
          v45 = *v44;
          if (v45 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 1);
            v36 = 43;
          }
          else
          {
            if (v45 != 62)
            {
              v27 = 42;
              goto LABEL_183;
            }
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v44 + 1);
            v36 = 44;
          }
LABEL_140:
          *(_DWORD *)a2 = v36;
          *(_QWORD *)(a2 + 8) = data;
          v26 = a2 + 24;
          *(_DWORD *)(a2 + 32) = 64;
          v48 = xmmword_24AA327A0;
          goto LABEL_184;
        case 0x40u:
          if (*(_BYTE *)(v20 + 183))
          {
LABEL_124:
            llvm::AsmLexer::LexIdentifier((llvm::AsmLexer *)a2, this);
            return;
          }
          v27 = 45;
LABEL_183:
          *(_DWORD *)a2 = v27;
          *(_QWORD *)(a2 + 8) = data;
          v26 = a2 + 24;
          *(_DWORD *)(a2 + 32) = 64;
          v48 = xmmword_24AA2E1A0;
LABEL_184:
          *(_OWORD *)(a2 + 16) = v48;
          goto LABEL_185;
        case 0x5Bu:
          v27 = 19;
          goto LABEL_183;
        case 0x5Cu:
          v27 = 16;
          goto LABEL_183;
        case 0x5Du:
          v27 = 20;
          goto LABEL_183;
        case 0x5Eu:
          v27 = 31;
          goto LABEL_183;
        default:
          switch(v6)
          {
            case '{':
              v27 = 21;
              goto LABEL_183;
            case '|':
              v46 = this[6].__r_.__value_.__l.__data_;
              if (*v46 == 124)
              {
                this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v46 + 1);
                v36 = 30;
                goto LABEL_140;
              }
              v27 = 29;
              break;
            case '}':
              v27 = 22;
              goto LABEL_183;
            case '~':
              v27 = 14;
              goto LABEL_183;
            default:
              goto LABEL_65;
          }
          goto LABEL_183;
      }
    }
    v25 = this[7].__r_.__value_.__s.__data_[3];
    if (this[7].__r_.__value_.__s.__data_[1])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      if (!v25)
      {
LABEL_51:
        *(_DWORD *)a2 = 0;
        goto LABEL_52;
      }
      LOBYTE(v25) = 1;
    }
    else if (this[7].__r_.__value_.__s.__data_[3])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      *(_DWORD *)a2 = 9;
LABEL_52:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 8) = data;
      *(_QWORD *)(a2 + 16) = 0;
LABEL_53:
      *(_QWORD *)(a2 + 24) = 0;
      v26 = a2 + 24;
LABEL_185:
      llvm::APInt::clearUnusedBits(v26);
      return;
    }
    this[7].__r_.__value_.__s.__data_[0] = v25;
    this[7].__r_.__value_.__s.__data_[1] = v25;
    goto LABEL_51;
  }
  if (!this[7].__r_.__value_.__s.__data_[1])
  {
    v6 = 35;
    goto LABEL_37;
  }
  for (j = 0; j != 80; j += 40)
  {
    v8 = (char *)&__p + j;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_DWORD *)v8 + 8) = 1;
    *((_QWORD *)v8 + 3) = 0;
  }
  v9 = (*(uint64_t (**)(std::string *, std::string *, uint64_t, uint64_t))(this->__r_.__value_.__r.__words[0]
                                                                                 + 32))(this, &__p, 2, 1);
  if (this[7].__r_.__value_.__s.__data_[0])
    v10 = v9 == 2;
  else
    v10 = 0;
  v11 = v10 && LODWORD(__p.__r_.__value_.__l.__data_) == 4;
  if (v11 && v68[0] == 3)
  {
    v12 = 0;
    v13 = this[4].__r_.__value_.__l.__data_;
    while (1)
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v12];
      v14 = v13[v12];
      v15 = v14 == 10 || v14 == 13;
      if (v15
        || &v13[v12] == (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]))
      {
        break;
      }
      ++v12;
    }
    v17 = this->__r_.__value_.__l.__size_;
    this[4].__r_.__value_.__s.__data_[11] = 0;
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)&this->__r_.__value_.__l.__size_, v17, (unint64_t)v68);
    this[4].__r_.__value_.__s.__data_[11] = 0;
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)&this->__r_.__value_.__l.__size_, this->__r_.__value_.__l.__size_, (unint64_t)&__p);
    *(_DWORD *)a2 = 8;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v12;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    llvm::APInt::clearUnusedBits(a2 + 24);
    goto LABEL_29;
  }
  if (*(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 65))
  {
    llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)a2, (uint64_t)this);
LABEL_29:
    v16 = 0;
    goto LABEL_30;
  }
  v16 = 1;
LABEL_30:
  for (k = 0; k != -20; k -= 10)
  {
    if (v68[k + 8] >= 0x41u)
    {
      v19 = *(_QWORD *)&v68[k + 6];
      if (v19)
        MEMORY[0x24BD1B380](v19, 0x1000C8000313F17);
    }
  }
  if (v16)
  {
    data = this[4].__r_.__value_.__l.__data_;
    goto LABEL_37;
  }
}

uint64_t llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8) == a2)
  {
    llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::push_back(a1, a3);
    return *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8) - 40;
  }
  else
  {
    v4 = a2 - *(_QWORD *)a1;
    v5 = llvm::SmallVectorTemplateCommon<llvm::AsmToken,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmToken,false>>(a1, a3, 1);
    v6 = *(_QWORD *)a1 + v4;
    v7 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
    *(_OWORD *)v7 = *(_OWORD *)(v7 - 40);
    *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 - 8);
    v8 = *(_QWORD *)(v7 - 16);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 - 24);
    *(_QWORD *)(v7 + 24) = v8;
    *(_DWORD *)(v7 - 8) = 0;
    v9 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(v6, v9 - 40, v9);
    v10 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v10;
    v11 = *(_QWORD *)a1 + 40 * v10;
    v13 = v5 >= v6 && v5 < v11;
    v14 = v5 + 40 * v13;
    v15 = *(_QWORD *)(v14 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v14;
    *(_QWORD *)(v6 + 16) = v15;
    llvm::APInt::operator=((llvm::APInt *)(v6 + 24), (const llvm::APInt *)(v14 + 24));
  }
  return v6;
}

unint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;

  result = llvm::SmallVectorTemplateCommon<llvm::AsmToken,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmToken,false>>(a1, a2, 1);
  v4 = result;
  v5 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)(result + 16);
  *(_OWORD *)v5 = *(_OWORD *)result;
  *(_QWORD *)(v5 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 32);
  *(_DWORD *)(v5 + 32) = v6;
  v7 = (unsigned int *)(v5 + 32);
  v8 = v7 - 2;
  if (v6 > 0x40)
  {
    v9 = (void *)operator new[]();
    *(_QWORD *)v8 = v9;
    result = (unint64_t)memcpy(v9, *(const void **)(v4 + 24), (((unint64_t)*v7 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)(result + 24);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::AsmToken,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmToken,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v6);
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::moveElementsForGrow(a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  unsigned int v7;

  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = v3 + 40 * v4;
    do
    {
      v6 = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)a2 = v6;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(v3 + 32);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 32) = 0;
      v3 += 40;
      a2 += 40;
    }
    while (v3 != v5);
    v3 = *(_QWORD *)a1;
    v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v7 = 0;
  }
  return llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::destroy_range(v3, v3 + 40 * v7);
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::destroy_range(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      if (*(_DWORD *)(v2 - 8) >= 0x41u)
      {
        result = *(_QWORD *)(v2 - 16);
        if (result)
          result = MEMORY[0x24BD1B380](result, 0x1000C8000313F17);
      }
      v2 -= 40;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a2 != a1)
  {
    v5 = a3 - 16;
    v6 = a2 - 16;
    do
    {
      v7 = v6 - 24;
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v5 - 8) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)(v5 - 24) = v8;
      llvm::APInt::operator=(v5, v6);
      v5 -= 40;
      v6 -= 40;
    }
    while (v7 != a1);
  }
  return a2;
}

void llvm::MCParserUtils::isSymbolUsedInExpression(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_24A9383E0(uint64_t a1, uint64_t a2, const llvm::MCExpr *a3)
{
  llvm::MCParserUtils *v3;
  uint64_t v4;

  if ((llvm::MCParserUtils::isSymbolUsedInExpression(v3, *(const llvm::MCSymbol **)(v4 + 16), a3) & 1) == 0)
    JUMPOUT(0x24A9383C8);
  return 1;
}

uint64_t llvm::createMCAsmParser(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  if (a2[12] == 32 && a2[15] == 16)
  {
    v13 = operator new();
    *(_QWORD *)result = &off_251C1C420;
    *(_QWORD *)(result + 848) = result + 40;
    *(_QWORD *)(result + 856) = a3;
    *(_BYTE *)(result + 144) = 0;
    *(_BYTE *)(result + 146) = 1;
    *(_WORD *)(result + 160) = 257;
  }
  else
  {
    v11 = operator new();
  }
  return result;
}

void llvm::MCSymbol::getFragment(llvm::MCSymbol *this, int a2)
{
  int v3;
  int v4;
  uint64_t v5;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v3 = *((_DWORD *)this + 2);
    if ((v3 & 0x3800) == 0x1000)
    {
      if (a2 | ((v3 & 4) >> 2))
        v4 = 4;
      else
        v4 = 0;
      *((_DWORD *)this + 2) = v4 | v3 & 0xFFFFFFFB;
      llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 3));
      *(_QWORD *)this = *(_QWORD *)this & 7 | v5;
    }
  }
}

uint64_t `anonymous namespace'::AsmParser::AsmParser(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  _BYTE *v12;
  _OWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(_anonymous_namespace_::COFFAsmParser *__hidden);
  uint64_t v24;

  *(_WORD *)(a1 + 32) = 0;
  v12 = (_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_251C1C550;
  *(_QWORD *)(a1 + 8) = 0;
  llvm::AsmLexer::AsmLexer((llvm::MCAsmLexer *)(a1 + 40), a5);
  *(_QWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 224) = a4;
  *(_QWORD *)(a1 + 232) = a5;
  *(_QWORD *)(a1 + 240) = a2;
  v13 = (_OWORD *)(a1 + 264);
  if (a6 <= 1)
    v14 = 1;
  else
    v14 = a6;
  *v13 = 0u;
  *(_DWORD *)(a1 + 280) = v14;
  *(_DWORD *)(a1 + 284) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_DWORD *)(a1 + 340) = 24;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) |= 1u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = a1 + 496;
  *(_QWORD *)(a1 + 488) = 0x400000000;
  *(_QWORD *)(a1 + 720) = a1 + 736;
  *(_QWORD *)(a1 + 728) = 0x200000000;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_QWORD *)(a1 + 768) = a1 + 776;
  *(_DWORD *)(a1 + 792) = -1;
  *(_OWORD *)(a1 + 796) = 0u;
  *(_QWORD *)(a1 + 812) = 0;
  *(_DWORD *)(a1 + 820) = 16;
  *(_QWORD *)(a1 + 840) = 0x1000000000;
  *(_OWORD *)(a1 + 824) = 0u;
  *v12 = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = a1;
  v15 = *(_QWORD *)(*(_QWORD *)a2 + 24 * (v14 - 1));
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v15 + 16) - v16;
  *(_QWORD *)(a1 + 192) = v16;
  *(_QWORD *)(a1 + 200) = v17;
  *(_QWORD *)(a1 + 184) = v16;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 211) = 1;
  *(_QWORD *)(a4 + 288) = a1 + 272;
  switch(*a3)
  {
    case 0:
      v18 = operator new();
      *(_BYTE *)(v18 + 16) = 0;
      *(_QWORD *)v18 = &off_251C1C6D0;
      *(_QWORD *)(v18 + 24) = 0;
      v19 = *(_QWORD *)v13;
      *(_QWORD *)v13 = v18;
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      *(_BYTE *)(a1 + 796) = 1;
      break;
    case 1:
      v20 = operator new();
      v21 = v20;
      *(_QWORD *)v20 = &off_251C1C6F8;
      goto LABEL_13;
    case 2:
      v22 = operator new();
      v21 = v22;
      *(_BYTE *)(v22 + 16) = 0;
      v23 = &off_251C1C6A8;
      goto LABEL_11;
    case 3:
      v22 = operator new();
      v21 = v22;
      *(_BYTE *)(v22 + 16) = 0;
      v23 = &off_251C1C680;
LABEL_11:
      *(_QWORD *)v22 = v23;
      goto LABEL_15;
    case 4:
      llvm::report_fatal_error((llvm *)"Need to implement createSPIRVAsmParser for SPIRV format.", (const llvm::Twine *)1);
    case 5:
      v20 = operator new();
      v21 = v20;
      *(_QWORD *)v20 = &off_251C1C880;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0;
LABEL_13:
      *(_BYTE *)(v20 + 16) = 1;
      goto LABEL_15;
    case 6:
      v21 = operator new();
      *(_BYTE *)(v21 + 16) = 0;
      *(_QWORD *)v21 = &off_251C1C8A8;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
LABEL_15:
      v24 = *(_QWORD *)v13;
      *(_QWORD *)v13 = v21;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      break;
    default:
      break;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 16))(*(_QWORD *)(a1 + 264), a1);
  *(_DWORD *)(a1 + 420) = 0;
  return a1;
}

uint64_t `anonymous namespace'::AsmParser::getLexer(_anonymous_namespace_::AsmParser *this)
{
  return (uint64_t)this + 40;
}

void `anonymous namespace'::HLASMAsmParser::~HLASMAsmParser(_anonymous_namespace_::HLASMAsmParser *this)
{
  *(_BYTE *)(*((_QWORD *)this + 106) + 104) = 1;
}

{
  *(_BYTE *)(*((_QWORD *)this + 106) + 104) = 1;
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::AsmParser::addDirectiveHandler(_DWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::StringMapImpl *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  char *v17;
  uint64_t *i;

  v10 = (llvm::StringMapImpl *)(a1 + 80);
  result = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)(a1 + 80), a2, a3);
  v12 = *((_QWORD *)a1 + 40);
  v13 = result;
  v14 = *(_QWORD *)(v12 + 8 * result);
  if (v14 == -8)
  {
    --a1[84];
  }
  else if (v14)
  {
    goto LABEL_14;
  }
  v15 = operator new(a3 + 25, (std::align_val_t)8uLL);
  v16 = v15;
  v17 = (char *)(v15 + 3);
  if (a3)
    memcpy(v15 + 3, a2, a3);
  v17[a3] = 0;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = a3;
  *(_QWORD *)(v12 + 8 * v13) = v16;
  ++a1[83];
  result = llvm::StringMapImpl::RehashTable(v10, v13);
  for (i = (uint64_t *)(*((_QWORD *)a1 + 40) + 8 * result); ; ++i)
  {
    v14 = *i;
    if (*i && v14 != -8)
      break;
  }
LABEL_14:
  *(_QWORD *)(v14 + 8) = a4;
  *(_QWORD *)(v14 + 16) = a5;
  return result;
}

void `anonymous namespace'::AsmParser::addAliasForDirective(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5)
{
  llvm::StringMapImpl *v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;

  v7 = (llvm::StringMapImpl *)(a1 + 800);
  std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(v15, a4, (uint64_t (*)(_QWORD))llvm::toLower, &a4[a5], (uint64_t)llvm::toLower, a5);
  if ((v16 & 0x80u) == 0)
    v8 = (uint64_t *)v15;
  else
    v8 = (uint64_t *)v15[0];
  if ((v16 & 0x80u) == 0)
    v9 = v16;
  else
    v9 = (unint64_t)v15[1];
  std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(__p, a2, (uint64_t (*)(_QWORD))llvm::toLower, &a2[a3], (uint64_t)llvm::toLower, a3);
  if ((v14 & 0x80u) == 0)
    v11 = (uint64_t *)__p;
  else
    v11 = (uint64_t *)__p[0];
  if ((v14 & 0x80u) == 0)
    v12 = v14;
  else
    v12 = (unint64_t)__p[1];
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
}

uint64_t `anonymous namespace'::AsmParser::getSourceManager(_anonymous_namespace_::AsmParser *this)
{
  return *((_QWORD *)this + 30);
}

uint64_t `anonymous namespace'::AsmParser::getContext(_anonymous_namespace_::AsmParser *this)
{
  return *((_QWORD *)this + 27);
}

uint64_t `anonymous namespace'::AsmParser::getStreamer(_anonymous_namespace_::AsmParser *this)
{
  return *((_QWORD *)this + 28);
}

uint64_t `anonymous namespace'::AsmParser::getAssemblerDialect(_anonymous_namespace_::AsmParser *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 198);
  if ((_DWORD)result == -1)
    return *(unsigned int *)(*((_QWORD *)this + 29) + 176);
  return result;
}

uint64_t `anonymous namespace'::AsmParser::setAssemblerDialect(uint64_t this, int a2)
{
  *(_DWORD *)(this + 792) = a2;
  return this;
}

BOOL `anonymous namespace'::AsmParser::Run(_anonymous_namespace_::AsmParser *this, char a2, char a3)
{
  unint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  llvm::MCContext *v10;
  unint64_t TempSymbol;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  llvm::MCSymbol *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BOOL8 v51;
  _QWORD v54[2];
  unint64_t v55;
  uint64_t v56;
  __int16 v57;
  char *v58[2];
  const char *v59;
  __int16 v60;
  int v61;
  char v62;
  void **v63;
  void *v64[2];
  _QWORD v65[66];

  v65[64] = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)this + 182) = 0;
  v5 = (unint64_t)this + 776;
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 768, *((_QWORD **)this + 97));
  *((_QWORD *)this + 96) = v5;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
  if ((a2 & 1) == 0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 28) + 176))(*((_QWORD *)this + 28), 0, *(_QWORD *)(*((_QWORD *)this + 1) + 288));
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  *((_BYTE *)this + 32) = 0;
  v6 = *((_DWORD *)this + 71);
  v7 = *((_BYTE *)this + 289);
  v64[0] = v65;
  v64[1] = (void *)0x400000000;
  if (*(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 1601))
  {
    v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    v9 = *(unsigned int *)(v8 + 152);
    if ((_DWORD)v9)
      v5 = *(_QWORD *)(*(_QWORD *)(v8 + 144) + 32 * v9 - 32);
    else
      v5 = 0;
    if (!*(_QWORD *)(v5 + 8))
    {
      v10 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v58[0] = "tmp";
      v60 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v10, (const llvm::Twine *)v58, 1);
      v12 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v12 + 192))(v12, TempSymbol, 0);
      *(_QWORD *)(v5 + 8) = TempSymbol;
    }
    v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v58[0] = (char *)v5;
    llvm::SetVector<llvm::MCSection *,std::vector<llvm::MCSection *>,llvm::DenseSet<llvm::MCSection *,llvm::DenseMapInfo<llvm::MCSection *,void>>>::insert((_QWORD *)(v13 + 1608), v58);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
  while (**((_DWORD **)this + 6))
  {
    v58[0] = (char *)&v59;
    v58[1] = (char *)0x800000000;
    v61 = -1;
    v62 = 0;
    v63 = v64;
    if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, char **, _QWORD))(*(_QWORD *)this + 280))(this, v58, 0))
    {
      if (!*((_DWORD *)this + 6) && **((_DWORD **)this + 6) == 1)
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      llvm::MCAsmParser::printPendingErrors(this);
      if (!*(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                     + 107))
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 224))(this);
    }
    else
    {
      llvm::MCAsmParser::printPendingErrors(this);
    }
    llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(v58);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
  llvm::MCAsmParser::printPendingErrors(this);
  v14 = *((_QWORD *)this + 1);
  v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 176))(v14, v15);
  if (*((_DWORD *)this + 71) != v6 || *((_BYTE *)this + 289) != (v7 & 1))
  {
    v16 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                                + 8)
                    + 8);
    v58[0] = "unmatched .ifs or .elses";
    v60 = 259;
    (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                 + 176))(this, v16, v58, 0, 0);
  }
  v17 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  if (*(_QWORD *)(v17 + 1576))
  {
    v18 = *(_QWORD *)(v17 + 1560);
    v19 = *(unsigned int *)(v18 + 144);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 72 * v19;
      v22 = (char *)(*(_QWORD *)(v18 + 136) + 23);
      do
      {
        if (*v22 < 0)
          v23 = *(_QWORD *)(v22 - 15);
        else
          v23 = *v22;
        if (v23)
          v24 = 1;
        else
          v24 = v20 == 0;
        if (!v24)
        {
          v25 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                                      + 8)
                          + 8);
          v5 = v5 & 0xFFFFFFFF00000000 | v20;
          v54[0] = "unassigned file number: ";
          v55 = v5;
          v57 = 2051;
          v58[0] = (char *)v54;
          v59 = " for .file directives";
          v60 = 770;
          (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v25, v58, 0, 0);
        }
        ++v20;
        v22 += 72;
        v21 -= 72;
      }
      while (v21);
    }
  }
  if ((a3 & 1) == 0)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 29) + 18))
    {
      v26 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v27 = *(unsigned int *)(v26 + 1152);
      if ((_DWORD)v27)
      {
        for (i = *(uint64_t **)(v26 + 1144); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        i = *(uint64_t **)(v26 + 1144);
      }
      v30 = *(_QWORD *)(v26 + 1144) + 8 * v27;
      if (i != (uint64_t *)v30)
      {
        v31 = *i;
        do
        {
          v32 = *(llvm::MCSymbol **)(v31 + 8);
          if ((*((_DWORD *)v32 + 2) & 1) != 0 && (*((_DWORD *)v32 + 2) & 0x3800) != 0x1000)
          {
            llvm::MCSymbol::getFragment(v32, 1);
            if (!v33)
            {
              v34 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
              if ((*(_BYTE *)v32 & 4) != 0)
              {
                v37 = (uint64_t *)*((_QWORD *)v32 - 1);
                v38 = *v37;
                v35 = v37 + 2;
                v36 = v38;
              }
              else
              {
                v35 = 0;
                v36 = 0;
              }
              v39 = *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8);
              v57 = 1283;
              v54[0] = "assembler local symbol '";
              v55 = (unint64_t)v35;
              v56 = v36;
              v58[0] = (char *)v54;
              v59 = "' not defined";
              v60 = 770;
              (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v39, v58, 0, 0);
            }
          }
          do
          {
            v40 = i[1];
            ++i;
            v31 = v40;
            if (v40)
              v41 = v31 == -8;
            else
              v41 = 1;
          }
          while (v41);
        }
        while (i != (uint64_t *)v30);
      }
    }
    v42 = *((unsigned int *)this + 122);
    if ((_DWORD)v42)
    {
      v43 = (uint64_t *)*((_QWORD *)this + 60);
      v44 = 56 * v42;
      do
      {
        llvm::MCSymbol::getFragment((llvm::MCSymbol *)v43[6], 1);
        if (!v45)
        {
          v46 = *(_OWORD *)(v43 + 1);
          v47 = *(_OWORD *)(v43 + 3);
          *((_DWORD *)this + 114) = *((_DWORD *)v43 + 10);
          *(_OWORD *)((char *)this + 424) = v46;
          *(_OWORD *)((char *)this + 440) = v47;
          v48 = *v43;
          v58[0] = "directional label undefined";
          v60 = 259;
          (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v48, v58, 0, 0);
        }
        v43 += 7;
        v44 -= 56;
      }
      while (v44);
    }
    if (*((_BYTE *)this + 32))
      goto LABEL_69;
    v49 = (_QWORD *)*((_QWORD *)this + 28);
    v50 = v49[2];
    if (v50)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v50 + 72))(v49[2]);
      v49 = (_QWORD *)*((_QWORD *)this + 28);
    }
    llvm::MCStreamer::finish(v49, *((_QWORD *)this + 17));
  }
  if (*((_BYTE *)this + 32))
  {
LABEL_69:
    v51 = 1;
    goto LABEL_71;
  }
  v51 = *(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 2056) != 0;
LABEL_71:
  if (v64[0] != v65)
    free(v64[0]);
  return v51;
}

uint64_t `anonymous namespace'::AsmParser::setParsingMSInlineAsm(uint64_t this, char a2)
{
  *(_BYTE *)(this + 797) = a2;
  *(_BYTE *)(this + 149) = a2;
  return this;
}

uint64_t `anonymous namespace'::AsmParser::isParsingMSInlineAsm(_anonymous_namespace_::AsmParser *this)
{
  return *((unsigned __int8 *)this + 797);
}

BOOL `anonymous namespace'::AsmParser::discardLTOSymbol(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  if (*(_QWORD *)(a1 + 784))
  {
    v5 = a1 + 776;
    v6 = *(_QWORD *)(a1 + 776);
    if (!v6)
      goto LABEL_9;
    v7 = a1 + 776;
    do
    {
      v16 = *(_OWORD *)(v6 + 32);
      v8 = llvm::StringRef::compare((uint64_t)&v16, a2, a3);
      v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        v9 = (uint64_t *)v6;
        v7 = v6;
      }
      v6 = *v9;
    }
    while (*v9);
    if (v5 == v7
      || (v10 = *(const void **)(v7 + 32),
          v11 = *(_QWORD *)(v7 + 40),
          *(_QWORD *)&v16 = a2,
          *((_QWORD *)&v16 + 1) = a3,
          (llvm::StringRef::compare((uint64_t)&v16, v10, v11) & 0x80000000) != 0))
    {
LABEL_9:
      v7 = v5;
    }
    v12 = v5 == v7;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 720);
    v14 = *(unsigned int *)(a1 + 728);
    v12 = llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::vfind(v13, v14, a2, a3) == v13 + 16 * v14;
  }
  return !v12;
}

uint64_t llvm::MCAsmParser::isParsingMasm(llvm::MCAsmParser *this)
{
  return 0;
}

uint64_t llvm::MCAsmParser::defineMacro()
{
  return 1;
}

uint64_t llvm::MCAsmParser::lookUpField()
{
  return 1;
}

{
  return 1;
}

uint64_t llvm::MCAsmParser::lookUpType()
{
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseMSInlineAsm(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  char v42;
  int v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int16 *v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _BYTE *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  std::string *v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  std::string *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  std::string *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  int v121;
  char *v122;
  const char *v123;
  int v124;
  uint64_t v125;
  _DWORD *v126;
  int *v127;
  const char *v128;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  llvm::raw_ostream *v133;
  uint64_t v134;
  _WORD *v135;
  uint64_t v136;
  _BYTE *v137;
  int v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  unsigned int v142;
  _WORD *v143;
  _QWORD *v144;
  size_t v145;
  uint64_t v146;
  size_t v147;
  const char *v148;
  llvm::raw_ostream *v149;
  _DWORD *v150;
  size_t v151;
  _BYTE *v152;
  const char *v153;
  _WORD *v154;
  uint64_t v155;
  const void *v156;
  char *v157;
  char *v158;
  _DWORD *v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  size_t v163;
  llvm::raw_ostream *v164;
  _QWORD *v165;
  _BYTE *v166;
  const char *v167;
  const char *v168;
  const char *v169;
  _WORD *v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _BYTE *v177;
  uint64_t *v178;
  unsigned __int16 *v179;
  _DWORD *v182;
  unsigned __int16 *v183;
  char v185;
  unsigned int v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  void *__dst;
  uint64_t v191;
  char *v192;
  size_t v193;
  __int16 v194;
  std::string __p;
  void *v196;
  __int128 v197;
  uint64_t v198;
  void *v199;
  __int128 v200;
  uint64_t v201;
  std::string __str;
  _BYTE *v203;
  _BYTE *v204;
  char v205;
  uint64_t v206;
  int v207;
  std::string *p_dst;
  unsigned int v209;
  char v210;
  void **v211;
  void *v212;
  size_t v213;
  _BYTE v214[512];
  void *__base;
  size_t __nel;
  _BYTE v217[16];
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _BYTE v226[32];
  _QWORD *v227;
  uint64_t v228;
  _QWORD v229[6];

  v229[4] = *MEMORY[0x24BDAC8D0];
  v227 = v229;
  v228 = 0x400000000;
  v224 = v226;
  v225 = 0x400000000;
  v199 = &v201;
  v200 = xmmword_24AA2D790;
  v196 = &v198;
  v197 = xmmword_24AA2D790;
  v221 = (char *)&v223;
  v222 = 0x400000000;
  v218 = (char *)&v220;
  v219 = 0x400000000;
  __base = v217;
  __nel = 0x400000000;
  v212 = v214;
  v213 = 0x400000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v182 = a4;
  v15 = 0;
  while (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
    if ((**(_DWORD **)(a1 + 48) - 21) <= 1)
    {
      v16 = *(_QWORD *)(a1 + 136);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) == 9)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v17 = *(_QWORD *)(a1 + 136) - v16;
      if (v213 >= HIDWORD(v213))
      {
        llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>((uint64_t)&v212, 9, v16, v17);
      }
      else
      {
        v18 = (char *)v212 + 128 * (unint64_t)v213;
        *(_DWORD *)v18 = 9;
        *((_QWORD *)v18 + 1) = v16;
        *((_DWORD *)v18 + 4) = v17;
        v18[20] = 0;
        *(_OWORD *)(v18 + 56) = 0u;
        *(_OWORD *)(v18 + 72) = 0u;
        *(_OWORD *)(v18 + 88) = 0u;
        *((_QWORD *)v18 + 13) = 0;
        *((_QWORD *)v18 + 4) = 0;
        *((_QWORD *)v18 + 5) = 0;
        *((_QWORD *)v18 + 3) = 0;
        v18[48] = 0;
        *((_DWORD *)v18 + 28) = 1;
        v18[120] = 0;
        LODWORD(v213) = v213 + 1;
      }
      continue;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__r.__words[2];
    __str.__r_.__value_.__l.__size_ = 0x800000000;
    v209 = -1;
    v210 = 0;
    v211 = &v212;
    if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 280))(a1, &__str, a10) & 1) != 0
      || v210)
    {
      llvm::MCAsmParser::printPendingErrors((llvm::MCAsmParser *)a1);
      llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(&__str.__r_.__value_.__l.__data_);
      v171 = 1;
      goto LABEL_320;
    }
    if (v209 != -1)
    {
      v175 = a8;
      v176 = a7;
      v188 = __str.__r_.__value_.__r.__words[1];
      v186 = v15;
      v183 = (unsigned __int16 *)(*a8 - 32 * v209);
      v173 = -(uint64_t)v209;
      v174 = *a8;
      if (LODWORD(__str.__r_.__value_.__r.__words[1]) != 1)
      {
        v19 = *a8 - 32 * v209;
        v177 = (_BYTE *)(v19 + 4);
        v178 = (uint64_t *)(v19 + 16);
        v179 = (unsigned __int16 *)(v19 + 12);
        v20 = v19 + 34;
        v21 = 1;
        while (1)
        {
          v22 = a5;
          v23 = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8 * v21);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23))
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 96))(v23) & 1) == 0)
            {
              v24 = *(_QWORD *)(a1 + 8);
              v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 80))(v24, v25) & 1) == 0)
                break;
            }
          }
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
          if (!v27)
            goto LABEL_41;
          v28 = v26;
          v29 = v27;
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          if (!v30)
            goto LABEL_41;
          v31 = v30;
          v187 = v28;
          v32 = *(char *)(v23 + 39);
          if (v32 >= 0)
            v33 = (char *)(v23 + 16);
          else
            v33 = *(char **)(v23 + 16);
          if (v32 >= 0)
            v34 = *(unsigned __int8 *)(v23 + 39);
          else
            v34 = *(_QWORD *)(v23 + 24);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23))
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 104))(v23))
              v33 = "r";
            else
              v33 = "i";
            v34 = 1;
          }
          if (v21 != 1)
          {
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
LABEL_36:
            v185 = v36;
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v227, v31);
            v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 96))(v23);
            llvm::SmallVectorTemplateBase<char,true>::push_back(&v199, v42);
            if (v33)
            {
              std::string::basic_string[abi:nn180100](&__dst, v33, v34);
            }
            else
            {
              __dst = 0;
              v191 = 0;
              v192 = 0;
            }
            a5 = v22;
            v44 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>((uint64_t)&v221, (unint64_t)&__dst, 1);
            v45 = &v221[24 * v222];
            v46 = *(_OWORD *)v44;
            *((_QWORD *)v45 + 2) = *(_QWORD *)(v44 + 16);
            *(_OWORD *)v45 = v46;
            *(_QWORD *)(v44 + 8) = 0;
            *(_QWORD *)(v44 + 16) = 0;
            *(_QWORD *)v44 = 0;
            LODWORD(v222) = v222 + 1;
            if (SHIBYTE(v192) < 0)
              operator delete(__dst);
            if ((*(_BYTE *)(v20 + 32 * *v183 + 6 * *v179) & 8) != 0)
              v47 = 3;
            else
              v47 = 4;
            llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>((uint64_t)&v212, v47, v187, v29, 0, v185);
            goto LABEL_49;
          }
          v35 = *v178;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
          if ((v35 & 0x100000) == 0)
            goto LABEL_36;
          v37 = v36;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v224, v31);
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 96))(v23);
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v196, v38);
          v194 = 1283;
          __dst = "=";
          v192 = v33;
          v193 = v34;
          llvm::Twine::str((llvm::formatv_object_base **)&__dst, &__p);
          v39 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>((uint64_t)&v218, (unint64_t)&__p, 1);
          v40 = &v218[24 * v219];
          v41 = *(_OWORD *)v39;
          *((_QWORD *)v40 + 2) = *(_QWORD *)(v39 + 16);
          *(_OWORD *)v40 = v41;
          *(_QWORD *)(v39 + 8) = 0;
          *(_QWORD *)(v39 + 16) = 0;
          *(_QWORD *)v39 = 0;
          LODWORD(v219) = v219 + 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v186;
          llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>((uint64_t)&v212, 5, v187, v29, 0, v37);
          a5 = v22;
LABEL_49:
          ++v21;
          v20 += 6;
          if (v188 == (_DWORD)v21)
            goto LABEL_50;
        }
        if (*v177 && *(_DWORD *)(v23 + 8) < *v177)
        {
          v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__base, v43);
        }
LABEL_41:
        a5 = v22;
        goto LABEL_49;
      }
LABEL_50:
      v48 = *v183;
      v49 = v174 + 32 * v173;
      v50 = *(unsigned __int16 *)(v49 + 10);
      v51 = *(unsigned __int8 *)(v49 + 8);
      v52 = *(unsigned __int8 *)(v49 + 9);
      v53 = __nel;
      v54 = __nel + v52;
      v15 = v186;
      a7 = v176;
      if (v54 > HIDWORD(__nel))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v217, v54, 4);
        v53 = __nel;
      }
      if ((_DWORD)v52)
      {
        v55 = &v183[16 * v48 + 16 + v50 + v51];
        v56 = (char *)__base + 4 * v53;
        v57 = 2 * v52;
        do
        {
          v58 = *v55++;
          *v56++ = v58;
          v57 -= 2;
        }
        while (v57);
        LODWORD(v53) = __nel;
      }
      LODWORD(__nel) = v53 + v52;
      a4 = v182;
      a8 = v175;
    }
    llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(&__str.__r_.__value_.__l.__data_);
  }
  *a3 = v225;
  *a4 = v228;
  v59 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<unsigned int>);
    v59 = __nel;
  }
  v60 = __base;
  if (v59)
  {
    v61 = (char *)__base + 4 * v59;
    v62 = 4 * v59 - 8;
    v63 = (char *)__base;
    while (1)
    {
      v64 = v63;
      v63 += 4;
      if (v63 == v61)
        break;
      v65 = v62;
      v66 = *v64;
      v62 -= 4;
      if (*v64 == v64[1])
      {
        if (v64 + 2 != (_DWORD *)v61)
        {
          v67 = 4;
          do
          {
            v68 = v66;
            v66 = *(_DWORD *)&v63[v67];
            if (v68 != v66)
            {
              v64[1] = v66;
              ++v64;
            }
            v67 += 4;
            v65 -= 4;
          }
          while (v65);
        }
        v61 = (char *)(v64 + 1);
        break;
      }
    }
  }
  else
  {
    v61 = (char *)__base;
  }
  v69 = (unint64_t)(v61 - v60) >> 2;
  LODWORD(__nel) = v69;
  memset(&__str, 0, sizeof(__str));
  if (v69 <= (unint64_t)*(unsigned int *)(a7 + 12))
  {
    v78 = *(unsigned int *)(a7 + 8);
    if (v78 >= v69)
      v79 = v69;
    else
      v79 = *(unsigned int *)(a7 + 8);
    if (v79)
    {
      v80 = *(std::string **)a7;
      v81 = -v79;
      do
      {
        std::string::operator=(v80++, &__str);
        v82 = __CFADD__(v81++, 1);
      }
      while (!v82);
      v78 = *(unsigned int *)(a7 + 8);
    }
    v83 = v78 - v69;
    if (v78 >= v69)
    {
      if (v78 > v69)
      {
        v86 = 3 * v78;
        v87 = *(_QWORD *)a7 + 24 * v78 - 1;
        v88 = 24 * v69 - 8 * v86;
        v89 = (char *)v87;
        do
        {
          v90 = *v89;
          v89 -= 24;
          if (v90 < 0)
            operator delete(*(void **)(v87 - 23));
          v87 = (uint64_t)v89;
          v88 += 24;
        }
        while (v88);
      }
    }
    else
    {
      v84 = (std::string *)(*(_QWORD *)a7 + 24 * v78);
      do
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v84, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v85 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v84->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
        }
        ++v84;
        v82 = __CFADD__(v83++, 1);
      }
      while (!v82);
    }
  }
  else
  {
    __dst = 0;
    v70 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a7, (void *)(a7 + 16), v69, 24, (uint64_t *)&__dst);
    v71 = 0;
    do
    {
      v72 = (std::string *)&v70[v71];
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v72, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v73 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v72->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
      }
      v71 += 24;
    }
    while (24 * v69 != v71);
    v74 = *(std::string **)a7;
    v75 = *(unsigned int *)(a7 + 8);
    if ((_DWORD)v75)
    {
      v76 = v75;
      do
      {
        if (SHIBYTE(v74[v76 - 1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74[v76 - 1].__r_.__value_.__l.__data_);
        --v76;
      }
      while (v76 * 24);
      v74 = *(std::string **)a7;
    }
    v77 = (int)__dst;
    if (v74 != (std::string *)(a7 + 16))
      free(v74);
    *(_QWORD *)a7 = v70;
    *(_DWORD *)(a7 + 12) = v77;
  }
  *(_DWORD *)(a7 + 8) = v69;
  v91 = a5;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((_DWORD)__nel)
  {
    v92 = 0;
    v93 = 0;
    v94 = 24 * __nel;
    do
    {
      v95 = (std::string *)(*(_QWORD *)a7 + v93);
      LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
      v205 = 0;
      v206 = 0;
      v207 = 1;
      v203 = 0;
      v204 = 0;
      __str.__r_.__value_.__r.__words[2] = 0;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C13AC0;
      p_dst = v95;
      llvm::raw_ostream::SetUnbuffered(&__str);
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)a9 + 40))(a9, &__str, *(unsigned int *)((char *)__base + v92));
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_251C13948;
      if (v207 == 1 && __str.__r_.__value_.__r.__words[2])
        MEMORY[0x24BD1B380](__str.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      v93 += 24;
      v92 += 4;
    }
    while (v94 != v93);
  }
  v96 = v15;
  if (*a3 | *v182)
  {
    v97 = (*v182 + *a3);
    v98 = *(_DWORD *)(v91 + 8);
    if (v98 != (_DWORD)v97)
    {
      if (v98 <= v97)
      {
        if (*(_DWORD *)(v91 + 12) < v97)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v91, (void *)(v91 + 16), v97, 16);
          v98 = *(_DWORD *)(v91 + 8);
        }
        if (v98 != (_DWORD)v97)
        {
          v99 = *(_QWORD *)v91 + 16 * v97;
          v100 = *(_QWORD *)v91 + 16 * v98;
          do
          {
            *(_QWORD *)v100 = 0;
            *(_BYTE *)(v100 + 8) = 0;
            v100 += 16;
          }
          while (v100 != v99);
        }
      }
      *(_DWORD *)(v91 + 8) = v97;
    }
    v101 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v101 != (_DWORD)v97)
    {
      if (v101 <= v97)
      {
        if (*(_DWORD *)(a6 + 12) < v97)
        {
          llvm::SmallVectorTemplateBase<std::string,false>::grow(a6, v97);
          v101 = *(unsigned int *)(a6 + 8);
        }
        if (v97 != v101)
          bzero((void *)(*(_QWORD *)a6 + 24 * v101), 24 * ((24 * (v97 - v101) - 24) / 0x18) + 24);
      }
      else
      {
        v102 = 3 * v101;
        v103 = *(_QWORD *)a6 + 24 * v101 - 1;
        v104 = 24 * v97 - 8 * v102;
        v105 = (char *)v103;
        do
        {
          v106 = *v105;
          v105 -= 24;
          if (v106 < 0)
            operator delete(*(void **)(v103 - 23));
          v103 = (uint64_t)v105;
          v104 += 24;
        }
        while (v104);
      }
      *(_DWORD *)(a6 + 8) = v97;
    }
    LODWORD(v107) = *a3;
    if (*a3)
    {
      v108 = 0;
      v109 = 0;
      v110 = 0;
      do
      {
        v111 = *((_BYTE *)v196 + v110);
        v112 = *(_QWORD *)v91 + v108;
        *(_QWORD *)v112 = v224[v110];
        *(_BYTE *)(v112 + 8) = v111;
        std::string::operator=((std::string *)(*(_QWORD *)a6 + v109), (const std::string *)&v218[v109]);
        ++v110;
        v107 = *a3;
        v109 += 24;
        v108 += 16;
      }
      while (v110 < v107);
    }
    if (*v182)
    {
      v113 = 0;
      v114 = 0;
      v115 = v107;
      do
      {
        v116 = *((_BYTE *)v199 + v114);
        v117 = *(_QWORD *)v91 + 16 * (v115 + v114);
        *(_QWORD *)v117 = v227[v114];
        *(_BYTE *)(v117 + 8) = v116;
        std::string::operator=((std::string *)(*(_QWORD *)a6 + 24 * (v115 + v114++)), (const std::string *)&v221[v113]);
        v113 += 24;
      }
      while (v114 < *v182);
    }
  }
  __dst = 0;
  v191 = 0;
  v192 = 0;
  LODWORD(__str.__r_.__value_.__r.__words[1]) = 0;
  v205 = 0;
  v206 = 0;
  v207 = 1;
  v203 = 0;
  v204 = 0;
  __str.__r_.__value_.__r.__words[2] = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C13AC0;
  p_dst = (std::string *)&__dst;
  llvm::raw_ostream::SetUnbuffered(&__str);
  v118 = ***(_QWORD ***)(a1 + 240);
  v119 = *(_BYTE **)(v118 + 8);
  v120 = *(_BYTE **)(v118 + 16);
  v121 = v213;
  if (v213 >= 2)
  {
    qsort(v212, v213, 0x80uLL, (int (__cdecl *)(const void *, const void *))rewritesSort);
    v121 = v213;
  }
  if (v121)
  {
    v189 = 0;
    v122 = (char *)v212;
    v123 = ".align";
    while (v122[20])
    {
LABEL_303:
      v122 += 128;
      if (v122 == (char *)v212 + 128 * (unint64_t)v213)
        goto LABEL_312;
    }
    v124 = *(_DWORD *)v122;
    v125 = *((_QWORD *)v122 + 1);
    if ((_DWORD)v125 != (_DWORD)v119)
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v119, (v125 - (_DWORD)v119));
    switch(v124)
    {
      case 0:
        v126 = v204;
        if ((unint64_t)(v203 - v204) > 5)
        {
          *((_WORD *)v204 + 2) = 28263;
          *v126 = 1768710446;
          v204 += 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v123, 6uLL);
        }
        if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 144) + 339))
          goto LABEL_287;
        v136 = *((_QWORD *)v122 + 3);
        v137 = v204;
        if (v204 >= v203)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 32);
        }
        else
        {
          ++v204;
          *v137 = 32;
        }
        write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v136, 0, 0, 0);
        if (v136 < 7)
          v130 = 3;
        else
          v130 = 4;
        if (v136 < 4)
          v130 = 2;
        goto LABEL_302;
      case 1:
        v127 = (int *)v204;
        if ((unint64_t)(v203 - v204) <= 4)
        {
          v128 = ".even";
          goto LABEL_157;
        }
        v130 = 0;
        v204[4] = 110;
        v138 = 1702257966;
        goto LABEL_187;
      case 2:
        v127 = (int *)v204;
        if ((unint64_t)(v203 - v204) <= 4)
        {
          v128 = ".byte";
LABEL_157:
          v129 = 5;
          goto LABEL_286;
        }
        v130 = 0;
        v204[4] = 101;
        v138 = 1954112046;
LABEL_187:
        *v127 = v138;
        v139 = v204 + 5;
        goto LABEL_301;
      case 3:
        goto LABEL_159;
      case 4:
        if (v122[120])
        {
LABEL_159:
          if ((unint64_t)(v203 - v204) > 1)
          {
            *(_WORD *)v204 = 31524;
            v204 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
          }
          v134 = (v96 + 1);
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v96, 0, 0, 0);
          v135 = v204;
          if ((unint64_t)(v203 - v204) > 2)
          {
            v130 = 0;
            v204[2] = 125;
            *v135 = 20538;
            v204 += 3;
            goto LABEL_270;
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ":P}", 3uLL);
        }
        else
        {
          v140 = v204;
          if (v204 >= v203)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
          }
          else
          {
            ++v204;
            *v140 = 36;
          }
          v134 = (v96 + 1);
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v96, 0, 0, 0);
        }
        v130 = 0;
LABEL_270:
        v96 = v134;
        goto LABEL_302;
      case 5:
        if (v122[120])
        {
          if ((unint64_t)(v203 - v204) > 1)
          {
            *(_WORD *)v204 = 31524;
            v204 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
          }
          v142 = v189 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v189, 0, 0, 0);
          v143 = v204;
          if ((unint64_t)(v203 - v204) > 2)
          {
            v130 = 0;
            v204[2] = 125;
            *v143 = 20538;
            v204 += 3;
            goto LABEL_274;
          }
          llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ":P}", 3uLL);
        }
        else
        {
          v141 = v204;
          if (v204 >= v203)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
          }
          else
          {
            ++v204;
            *v141 = 36;
          }
          v142 = v189 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v189, 0, 0, 0);
        }
        v130 = 0;
LABEL_274:
        v189 = v142;
        goto LABEL_302;
      case 6:
        v130 = 0;
        v131 = *((_QWORD *)v122 + 3);
        if (v131 > 63)
        {
          if (v131 <= 127)
          {
            if (v131 == 64)
            {
              v132 = v204;
              if ((unint64_t)(v203 - v204) <= 9)
              {
                v128 = "qword ptr ";
                goto LABEL_277;
              }
              v130 = 0;
              *((_WORD *)v204 + 4) = 8306;
              v167 = "qword ptr ";
            }
            else
            {
              if (v131 != 80)
                goto LABEL_302;
              v132 = v204;
              if ((unint64_t)(v203 - v204) <= 9)
              {
                v128 = "xword ptr ";
LABEL_277:
                v129 = 10;
                goto LABEL_286;
              }
              v130 = 0;
              *((_WORD *)v204 + 4) = 8306;
              v167 = "xword ptr ";
            }
LABEL_295:
            *v132 = *(_QWORD *)v167;
            v139 = v204 + 10;
            goto LABEL_301;
          }
          if (v131 == 128)
          {
            v144 = v204;
            if ((unint64_t)(v203 - v204) <= 0xB)
            {
              v128 = "xmmword ptr ";
              goto LABEL_285;
            }
            v130 = 0;
            *((_DWORD *)v204 + 2) = 544371824;
            v168 = "xmmword ptr ";
          }
          else
          {
            if (v131 != 256)
              goto LABEL_302;
            v144 = v204;
            if ((unint64_t)(v203 - v204) <= 0xB)
            {
              v128 = "ymmword ptr ";
LABEL_285:
              v129 = 12;
LABEL_286:
              llvm::raw_ostream::write((llvm::raw_ostream *)&__str, v128, v129);
LABEL_287:
              v130 = 0;
              goto LABEL_302;
            }
            v130 = 0;
            *((_DWORD *)v204 + 2) = 544371824;
            v168 = "ymmword ptr ";
          }
          *v144 = *(_QWORD *)v168;
          v139 = v204 + 12;
          goto LABEL_301;
        }
        switch(v131)
        {
          case 8:
            v165 = v204;
            if ((unint64_t)(v203 - v204) <= 8)
            {
              v128 = "byte ptr ";
LABEL_282:
              v129 = 9;
              goto LABEL_286;
            }
            v130 = 0;
            v204[8] = 32;
            v169 = "byte ptr ";
            break;
          case 16:
            v165 = v204;
            if ((unint64_t)(v203 - v204) <= 8)
            {
              v128 = "word ptr ";
              goto LABEL_282;
            }
            v130 = 0;
            v204[8] = 32;
            v169 = "word ptr ";
            break;
          case 32:
            v132 = v204;
            if ((unint64_t)(v203 - v204) <= 9)
            {
              v128 = "dword ptr ";
              goto LABEL_277;
            }
            v130 = 0;
            *((_WORD *)v204 + 4) = 8306;
            v167 = "dword ptr ";
            goto LABEL_295;
          default:
            goto LABEL_302;
        }
        *v165 = *(_QWORD *)v169;
        v139 = v204 + 9;
        goto LABEL_301;
      case 7:
        v133 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 144) + 104), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 144) + 112));
        llvm::raw_ostream::operator<<(v133, *((const void **)v122 + 4), *((_QWORD *)v122 + 5));
        goto LABEL_287;
      case 8:
        if ((unint64_t)(v203 - v204) <= 1)
        {
          v128 = "\n\t";
          v129 = 2;
          goto LABEL_286;
        }
        v130 = 0;
        *(_WORD *)v204 = 2314;
        v139 = v204 + 2;
        goto LABEL_301;
      case 9:
        v119 = (_BYTE *)(v125 + *((unsigned int *)v122 + 4));
        goto LABEL_303;
      case 10:
        if (v122[48])
        {
          if (v203 == v204)
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "[", 1uLL);
          else
            *v204++ = 91;
        }
        v145 = *((_QWORD *)v122 + 9);
        if (v145)
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, *((const void **)v122 + 8), v145);
        if (*((_QWORD *)v122 + 11))
        {
          v146 = *((_QWORD *)v122 + 9);
          if (v146)
            v147 = 3;
          else
            v147 = 0;
          if (v146)
            v148 = " + ";
          else
            v148 = "";
          v149 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v148, v147);
          llvm::raw_ostream::operator<<(v149, *((const void **)v122 + 10), *((_QWORD *)v122 + 11));
        }
        if (*((_DWORD *)v122 + 28) >= 2u)
        {
          v150 = v204;
          if ((unint64_t)(v203 - v204) > 4)
          {
            v204[4] = 36;
            *v150 = 606087712;
            v204 += 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, " * $$", 5uLL);
          }
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, *((unsigned int *)v122 + 28), 0, 0, 0);
        }
        v151 = *((_QWORD *)v122 + 13);
        if (!v151)
          goto LABEL_245;
        v152 = v120;
        if (*((_QWORD *)v122 + 9) || *((_QWORD *)v122 + 11))
        {
          v153 = v123;
          v154 = v204;
          v155 = v96;
          if ((unint64_t)(v203 - v204) > 2)
          {
            v204[2] = 32;
            *v154 = 11040;
            v204 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, " + ", 3uLL);
          }
          v151 = *((_QWORD *)v122 + 13);
        }
        else
        {
          v153 = v123;
          v155 = v96;
        }
        v156 = (const void *)*((_QWORD *)v122 + 12);
        v157 = (char *)v212 + 128 * (unint64_t)v213;
        v158 = v122;
        if (v122 == v157)
          goto LABEL_236;
        v158 = v122;
        while (*((const void **)v158 + 1) != v156
             || v151 != *((_DWORD *)v158 + 4)
             || (*(_DWORD *)v158 - 3) >= 2)
        {
          v158 += 128;
          if (v158 == v157)
            goto LABEL_240;
        }
LABEL_236:
        if (v158 == v157)
        {
LABEL_240:
          v159 = v204;
          if ((unint64_t)(v203 - v204) > 6)
          {
            *(_DWORD *)(v204 + 3) = 544499059;
            *v159 = 1936090735;
            v204 += 7;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "offset ", 7uLL);
          }
          v96 = v155;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v156, v151);
          goto LABEL_244;
        }
        if (*(_DWORD *)v158 == 3)
        {
          if ((unint64_t)(v203 - v204) > 1)
          {
            *(_WORD *)v204 = 31524;
            v204 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, "${", 2uLL);
          }
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v155, 0, 0, 0);
          v170 = v204;
          if ((unint64_t)(v203 - v204) > 2)
          {
            v204[2] = 125;
            *v170 = 20538;
            v204 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, ":P}", 3uLL);
          }
          v158[20] = 1;
          v96 = (v155 + 1);
        }
        else
        {
          v166 = v204;
          if (v204 >= v203)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__str, 36);
          }
          else
          {
            ++v204;
            *v166 = 36;
          }
          write_unsigned<unsigned long>((llvm::raw_ostream *)&__str, v155, 0, 0, 0);
          v158[20] = 1;
          v96 = (v155 + 1);
        }
LABEL_244:
        v123 = v153;
        v120 = v152;
LABEL_245:
        v160 = *((_QWORD *)v122 + 9);
        if (*((_QWORD *)v122 + 7))
        {
          v161 = " + $$";
          if (!v160 && !*((_QWORD *)v122 + 11))
          {
            v162 = *((_QWORD *)v122 + 13);
LABEL_249:
            if (v162)
              v161 = " + $$";
            else
              v161 = "$$";
          }
          v163 = strlen(v161);
          v164 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v161, v163);
          llvm::write_integer(v164, *((_QWORD *)v122 + 7), 0, 0);
          goto LABEL_256;
        }
        if (!v160 && !*((_QWORD *)v122 + 11))
        {
          v162 = *((_QWORD *)v122 + 13);
          if (!v162)
            goto LABEL_249;
        }
LABEL_256:
        if (!v122[48])
          goto LABEL_287;
        if (v203 != v204)
        {
          v130 = 0;
          *v204 = 93;
          v139 = v204 + 1;
LABEL_301:
          v204 = v139;
LABEL_302:
          v119 = (_BYTE *)(v125 + *((unsigned int *)v122 + 4) + v130);
          goto LABEL_303;
        }
        v128 = "]";
        v129 = 1;
        goto LABEL_286;
      default:
        goto LABEL_287;
    }
  }
LABEL_312:
  if (v119 != v120)
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__str, v119, v120 - v119);
  std::string::operator=(a2, p_dst);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_251C13948;
  if (v207 == 1 && __str.__r_.__value_.__r.__words[2])
    MEMORY[0x24BD1B380](__str.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v192) < 0)
    operator delete(__dst);
  v171 = 0;
LABEL_320:
  if (v212 != v214)
    free(v212);
  if (__base != v217)
    free(__base);
  llvm::SmallVector<std::string,2u>::~SmallVector(&v218);
  llvm::SmallVector<std::string,2u>::~SmallVector(&v221);
  if (v196 != &v198)
    free(v196);
  if (v199 != &v201)
    free(v199);
  if (v224 != (_QWORD *)v226)
    free(v224);
  if (v227 != v229)
    free(v227);
  return v171;
}

void `anonymous namespace'::AsmParser::Note(llvm::MCAsmParser *a1, char *a2, llvm::formatv_object_base **a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  unint64_t v14[2];

  llvm::MCAsmParser::printPendingErrors(a1);
  v14[0] = a4;
  v14[1] = a5;
  v10 = (uint64_t *)*((_QWORD *)a1 + 30);
  v12 = (llvm::raw_ostream *)llvm::errs(v11);
  llvm::SourceMgr::PrintMessage(v10, v12, a2, 3, a3, v14, 1, v13, 0, 0, 1u);
}

uint64_t `anonymous namespace'::AsmParser::Warning(_anonymous_namespace_::AsmParser *a1, char *a2, llvm::formatv_object_base **a3, uint64_t a4, uint64_t a5)
{
  char v10;
  char v11;
  llvm *v12;
  uint64_t *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  unint64_t v17[2];
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  _BYTE v26[24];
  void **v27;

  llvm::MCTargetOptions::MCTargetOptions((uint64_t)v17, *((_QWORD *)a1 + 1) + 128);
  v10 = v17[0];
  v27 = (void **)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v27);
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
  {
    operator delete(v18);
    if ((v10 & 8) != 0)
      return 0;
  }
  else if ((v10 & 8) != 0)
  {
    return 0;
  }
  llvm::MCTargetOptions::MCTargetOptions((uint64_t)v17, *((_QWORD *)a1 + 1) + 128);
  v11 = v17[0];
  v27 = (void **)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v27);
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
  {
    operator delete(v18);
    if ((v11 & 4) == 0)
      goto LABEL_19;
  }
  else if ((v11 & 4) == 0)
  {
LABEL_19:
    v17[0] = a4;
    v17[1] = a5;
    v13 = (uint64_t *)*((_QWORD *)a1 + 30);
    v14 = (llvm::raw_ostream *)llvm::errs(v12);
    llvm::SourceMgr::PrintMessage(v13, v14, a2, 1, a3, v17, 1, v15, 0, 0, 1u);
    return 0;
  }
  return llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)a2, (llvm::Twine *)a3, a4, a5);
}

uint64_t `anonymous namespace'::AsmParser::printError(uint64_t a1, char *a2, llvm::formatv_object_base **a3, unint64_t a4, unint64_t a5)
{
  uint64_t *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  unint64_t v12[2];

  *(_BYTE *)(a1 + 32) = 1;
  v12[0] = a4;
  v12[1] = a5;
  v8 = *(uint64_t **)(a1 + 240);
  v9 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  llvm::SourceMgr::PrintMessage(v8, v9, a2, 0, a3, v12, 1, v10, 0, 0, 1u);
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::Lex(_anonymous_namespace_::AsmParser *this)
{
  llvm::MCAsmLexer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;

  v2 = (_anonymous_namespace_::AsmParser *)((char *)this + 40);
  if (**((_DWORD **)this + 6) == 1)
  {
    v3 = *((_QWORD *)this + 13);
    v15 = 260;
    v13 = (char *)this + 112;
    llvm::MCAsmParser::Error((uint64_t)this, v3, (llvm::Twine *)&v13, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 9
    && *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 16)
    && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                              + 8)
                  + 8) != 10
    && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                              + 8)
                  + 8) != 13
    && *(_BYTE *)(*((_QWORD *)this + 29) + 482))
  {
    v4 = *((_QWORD *)this + 28);
    v5 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v7 = *(char **)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 16);
    v15 = 261;
    v13 = v7;
    v14 = v6;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v4 + 136))(v4, &v13);
  }
  while (1)
  {
    result = llvm::MCAsmLexer::Lex(v2);
    if (*(_DWORD *)result != 7)
      break;
    if (*(_BYTE *)(*((_QWORD *)this + 29) + 482))
    {
      v9 = *((_QWORD *)this + 28);
      v10 = *(char **)(result + 8);
      v11 = *(_QWORD *)(result + 16);
      v15 = 261;
      v13 = v10;
      v14 = v11;
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v9 + 136))(v9, &v13);
    }
  }
  if (!*(_DWORD *)result)
  {
    v12 = *(_QWORD *)(**((_QWORD **)this + 30) + 24 * (*((_DWORD *)this + 70) - 1) + 16);
    if (v12)
    {
      return (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseIdentifier(_anonymous_namespace_::AsmParser *this, llvm::StringRef *a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = **((_DWORD **)this + 6);
  if ((v4 - 2) < 2)
  {
    v7 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    if (*(_DWORD *)v7 == 2)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)(v7 + 16);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8);
      v11 = *(_QWORD *)(v7 + 16);
      v12 = v11 - 1;
      v13 = v11 != 0;
      if (v11)
        ++v8;
      if (v12 < v13)
        v12 = 1;
      if (v12 >= v11)
        v12 = v11;
      v9 = v12 - v13;
    }
    *(_QWORD *)a2 = v8;
    *((_QWORD *)a2 + 1) = v9;
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    return 0;
  }
  else if (v4 == 45 || v4 == 26)
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
    v17 = 0;
    v18 = 0;
    v10 = 1;
    v20 = 1;
    v19 = 0;
    llvm::AsmLexer::peekTokens((uint64_t)this + 40, (uint64_t)&v16, 1, 0);
    if (v16 == 4 || v16 == 2)
    {
      if (v6 + 1 == v17)
      {
        llvm::MCAsmLexer::Lex((_anonymous_namespace_::AsmParser *)((char *)this + 40));
        v14 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                                    + 8)
                        + 16)
            + 1;
        *(_QWORD *)a2 = v6;
        *((_QWORD *)a2 + 1) = v14;
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
        v10 = 0;
      }
      else
      {
        v10 = 1;
      }
    }
    if (v20 >= 0x41 && v19)
      MEMORY[0x24BD1B380](v19, 0x1000C8000313F17);
  }
  else
  {
    return 1;
  }
  return v10;
}

uint64_t `anonymous namespace'::AsmParser::parseStringToEndOfStatement(_anonymous_namespace_::AsmParser *this)
{
  llvm::MCAsmLexer *v2;
  uint64_t v3;
  int v4;

  v2 = (_anonymous_namespace_::AsmParser *)((char *)this + 40);
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  while (1)
  {
    v4 = **((_DWORD **)this + 6);
    if (!v4 || v4 == 9)
      break;
    llvm::MCAsmLexer::Lex(v2);
  }
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  return v3;
}

uint64_t `anonymous namespace'::AsmParser::parseEscapedString(uint64_t a1, std::string *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v21;
  const char *v22;
  const char *v23;
  __int16 v24;

  v4 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v23 = "expected string";
  v24 = 259;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v4 != 3)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
    goto LABEL_50;
  }
  MEMORY[0x24BD1B104](a2, "");
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16);
  v8 = v7 != 0;
  if (v7)
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8) + 1;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  if (v7 - 1 < v8)
    v10 = 1;
  else
    v10 = v7 - 1;
  if (v10 >= v7)
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16);
  v11 = v10 - v8;
  if ((_DWORD)v10 == (_DWORD)v8)
  {
LABEL_45:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return 0;
  }
  v12 = 0;
  while (1)
  {
    v13 = *(unsigned __int8 *)(v9 + v12);
    if (v13 != 92)
      goto LABEL_44;
    v14 = v12 + 1;
    if (v12 + 1 == (_DWORD)v11)
    {
      v22 = "unexpected backslash at end of string";
      goto LABEL_49;
    }
    v13 = *(unsigned __int8 *)(v9 + v14);
    if ((v13 | 0x20) == 0x78)
    {
      v15 = v12 + 2;
      if (v11 <= v15
        || (v16 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v9 + v15)], v16 == 0xFFFF))
      {
        v22 = "invalid hexadecimal escape sequence";
        goto LABEL_49;
      }
      LOBYTE(v13) = 0;
      do
      {
        v12 = v15;
        LOBYTE(v13) = v16 + 16 * v13;
        v15 = (v15 + 1);
        if (v11 <= v15)
          break;
        v16 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(unsigned __int8 *)(v9 + v15)];
      }
      while (v16 != 0xFFFF);
      goto LABEL_44;
    }
    if ((v13 & 0xF8) != 0x30)
      break;
    v13 -= 48;
    v17 = v12 + 2;
    if (v12 + 2 == (_DWORD)v11)
      goto LABEL_43;
    v18 = *(unsigned __int8 *)(v9 + v17);
    if ((v18 & 0xF8) != 0x30)
      goto LABEL_43;
    v13 = v18 + 8 * v13 - 48;
    v12 += 3;
    if (v12 == (_DWORD)v11)
    {
      v14 = v17;
LABEL_43:
      v12 = v14;
      goto LABEL_44;
    }
    v19 = *(unsigned __int8 *)(v9 + v12);
    v14 = v17;
    if ((v19 & 0xF8) != 0x30)
      goto LABEL_43;
    v13 = v19 + 8 * v13 - 48;
    if (v13 > 0xFF)
    {
      v22 = "invalid octal escape sequence (out of range)";
      goto LABEL_49;
    }
LABEL_44:
    std::string::push_back(a2, v13);
    if (++v12 == (_DWORD)v11)
      goto LABEL_45;
  }
  if ((char)v13 <= 101)
  {
    if ((char)v13 != 34 && (char)v13 != 92)
    {
      if ((char)v13 != 98)
        goto LABEL_51;
      LOBYTE(v13) = 8;
    }
    goto LABEL_43;
  }
  if ((char)v13 <= 113)
  {
    if ((char)v13 == 102)
    {
      LOBYTE(v13) = 12;
    }
    else
    {
      if ((char)v13 != 110)
        goto LABEL_51;
      LOBYTE(v13) = 10;
    }
    goto LABEL_43;
  }
  if ((char)v13 == 114)
  {
    LOBYTE(v13) = 13;
    goto LABEL_43;
  }
  if ((char)v13 == 116)
  {
    LOBYTE(v13) = 9;
    goto LABEL_43;
  }
LABEL_51:
  v22 = "invalid escape sequence (unrecognized character)";
LABEL_49:
  v23 = v22;
  v24 = 259;
  v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
LABEL_50:
  llvm::MCAsmParser::Error(a1, v21, (llvm::Twine *)&v23, 0, 0);
  return 1;
}

BOOL `anonymous namespace'::AsmParser::parseAngleBracketString(int *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  std::string v9;

  v4 = *(unsigned __int8 **)(*(_QWORD *)((*(uint64_t (**)(int *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  for (i = v4; ; ++i)
  {
    v6 = *i;
    if (v6 > 0x3E)
      continue;
    if (v6 == 33)
    {
      ++i;
      continue;
    }
    if (((1 << v6) & 0x4000000000002401) != 0)
      break;
  }
  if ((_DWORD)v6 == 62)
  {
    v7 = (uint64_t)(v4 + 1);
    (*(void (**)(int *))(*(_QWORD *)a1 + 184))(a1);
    angleBracketString(&v9, v7, (unint64_t)&i[-v7]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v9;
  }
  return (_DWORD)v6 != 62;
}

uint64_t `anonymous namespace'::AsmParser::eatToEndOfStatement(uint64_t this)
{
  uint64_t v1;
  llvm::MCAsmLexer *i;
  int v3;

  v1 = this;
  for (i = (llvm::MCAsmLexer *)(this + 40); ; this = llvm::MCAsmLexer::Lex(i))
  {
    v3 = **(_DWORD **)(v1 + 48);
    if (!v3)
      break;
    if (v3 == 9)
      return llvm::MCAsmLexer::Lex(i);
  }
  return this;
}

uint64_t `anonymous namespace'::AsmParser::parseExpression(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  __int16 v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const char *v34;
  __int16 v35;
  uint64_t v36[2];
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;

  *a2 = 0;
  v6 = 1;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8)) & 1) == 0
  {
    if (**(_DWORD **)(a1 + 48) == 45)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) != 2)
      {
        v40[0] = "unexpected symbol modifier following '@'";
        v10 = 259;
LABEL_33:
        v41 = v10;
LABEL_34:
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v26 + 96), (llvm::Twine *)v40, 0, 0);
        return v6;
      }
      v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v7 == 2)
      {
        v8 = *(char **)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 16);
      }
      else
      {
        v13 = v7 + 8;
        v11 = *(char **)(v7 + 8);
        v12 = *(_QWORD *)(v13 + 8);
        v14 = v12 != 0;
        if (v12)
          v8 = v11 + 1;
        else
          v8 = v11;
        if (v12 - 1 < v14)
          v15 = 1;
        else
          v15 = v12 - 1;
        if (v15 >= v12)
          v15 = v12;
        v9 = v15 - v14;
      }
      if (llvm::MCSymbolRefExpr::getVariantKindForName(v8, v9) == 1)
      {
        v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
        if (*(_DWORD *)v16 == 2)
        {
          v17 = *(_QWORD *)(v16 + 8);
          v18 = *(_QWORD *)(v16 + 16);
        }
        else
        {
          v17 = *(_QWORD *)(v16 + 8);
          v23 = *(_QWORD *)(v16 + 16);
          v24 = v23 - 1;
          v25 = v23 != 0;
          if (v23)
            ++v17;
          if (v24 < v25)
            v24 = 1;
          if (v24 >= v23)
            v24 = v23;
          v18 = v24 - v25;
        }
        v39 = 1283;
        v36[0] = (uint64_t)"invalid variant '";
        v37 = v17;
        v38 = v18;
        v40[0] = v36;
        v40[2] = "'";
        v10 = 770;
        goto LABEL_33;
      }
      if (!v19)
      {
        v28 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
        if (*(_DWORD *)v28 == 2)
        {
          v29 = *(_QWORD *)(v28 + 8);
          v30 = *(_QWORD *)(v28 + 16);
        }
        else
        {
          v29 = *(_QWORD *)(v28 + 8);
          v31 = *(_QWORD *)(v28 + 16);
          v32 = v31 - 1;
          v33 = v31 != 0;
          if (v31)
            ++v29;
          if (v32 < v33)
            v32 = 1;
          if (v32 >= v31)
            v32 = v31;
          v30 = v32 - v33;
        }
        v39 = 1283;
        v36[0] = (uint64_t)"invalid modifier '";
        v37 = v29;
        v38 = v30;
        v34 = "' (no symbols present)";
        v35 = 259;
        llvm::operator+(v36, (uint64_t *)&v34, (uint64_t)v40);
        goto LABEL_34;
      }
      *a2 = v19;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    }
    v40[0] = 0;
    if (llvm::MCExpr::evaluateAsAbsolute(*a2, v40))
    {
      v20 = v40[0];
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v22 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v21 + 184, 24, 3);
      *(_BYTE *)v22 = 1;
      *(_DWORD *)(v22 + 1) = *(unsigned __int8 *)(v22 + 4) << 24;
      *(_QWORD *)(v22 + 8) = 0;
      *(_QWORD *)(v22 + 16) = v20;
      *a2 = v22;
    }
    return 0;
  }
  return v6;
}

uint64_t `anonymous namespace'::AsmParser::parsePrimaryExpr(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  llvm::MCContext *v16;
  unint64_t TempSymbol;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *p_p;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  llvm::MCContext *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  __int128 v53;
  int VariantKindForName;
  uint64_t v55;
  const char *v56;
  int v57;
  uint64_t v58;
  int Key;
  unint64_t Symbol;
  llvm::MCContext *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  llvm::MCSymbol *DirectionalLocalSymbol;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  unint64_t v78;
  __int128 v79;
  uint64_t v80[4];
  __int16 v81;
  void *__p;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  __int16 v86;
  const char *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  llvm::MCSymbol *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v9 = **(unsigned int **)(a1 + 48);
  v10 = *(const char **)(v8 + 96);
  v11 = 1;
  switch((int)v9)
  {
    case 1:
      return v11;
    case 2:
    case 3:
    case 23:
    case 26:
    case 45:
      v76 = 0uLL;
      if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v76)
        && (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26
         || **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 23))
      {
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26
          && *(_BYTE *)(*(_QWORD *)(a1 + 232) + 32)
          || **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 23
          && *(_BYTE *)(*(_QWORD *)(a1 + 232) + 34))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
          v16 = *(llvm::MCContext **)(a1 + 216);
          v87 = "tmp";
          WORD4(v89) = 259;
          TempSymbol = llvm::MCContext::createTempSymbol(v16, (const llvm::Twine *)&v87, 1);
          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 192))(*(_QWORD *)(a1 + 224), TempSymbol, 0);
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          v19 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v18 + 184, 24, 3);
          v11 = 0;
          v20 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 144) + 18) << 16;
          *(_BYTE *)v19 = 2;
          *(_DWORD *)(v19 + 1) = v20 | (*(unsigned __int8 *)(v19 + 4) << 24);
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = TempSymbol;
          *a2 = v19;
          *a3 = (uint64_t)v10;
          return v11;
        }
        v52 = "invalid token in expression";
LABEL_52:
        v87 = v52;
        WORD4(v89) = 259;
        v22 = a1;
        v23 = (uint64_t)v10;
        return llvm::MCAsmParser::Error(v22, v23, (llvm::Twine *)&v87, 0, 0);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 438))
      {
        if (**(_DWORD **)(a1 + 48) == 17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
          __p = 0;
          v83 = 0;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, &__p);
          v87 = "expected ')'";
          WORD4(v89) = 259;
          if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)&v87))
            return v11;
LABEL_53:
          v25 = *((_QWORD *)&v76 + 1);
          p_p = (uint64_t *)v76;
          v27 = (char *)__p;
          v26 = v83;
          goto LABEL_55;
        }
        goto LABEL_25;
      }
      if ((_DWORD)v9 == 3)
      {
        if (**(_DWORD **)(a1 + 48) == 45)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
          v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
          __p = 0;
          v83 = 0;
          if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, &__p))
          {
            v87 = "expected symbol variant after '@'";
            WORD4(v89) = 259;
            v22 = a1;
            v23 = v21;
            return llvm::MCAsmParser::Error(v22, v23, (llvm::Twine *)&v87, 0, 0);
          }
          goto LABEL_53;
        }
LABEL_25:
        p_p = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        goto LABEL_55;
      }
      LOBYTE(__p) = 64;
      llvm::StringRef::split((uint64_t *)&v76, (char *)&__p, 1uLL, (uint64_t)&v87);
      p_p = (uint64_t *)v87;
      v27 = (char *)*((_QWORD *)&v88 + 1);
      v25 = v88;
      v26 = v89;
LABEL_55:
      v53 = v76;
      *a3 = v76 + *((_QWORD *)&v76 + 1);
      if (!*((_QWORD *)&v53 + 1))
      {
        v23 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
        v56 = "expected a symbol reference";
LABEL_62:
        v87 = v56;
        WORD4(v89) = 259;
        v22 = a1;
        return llvm::MCAsmParser::Error(v22, v23, (llvm::Twine *)&v87, 0, 0);
      }
      if (!v26)
        goto LABEL_64;
      VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName(v27, v26);
      if (VariantKindForName == 1)
      {
        v55 = *(_QWORD *)(a1 + 232);
        if (!*(_BYTE *)(v55 + 180) || *(_BYTE *)(v55 + 438))
        {
          v86 = 1283;
          __p = "invalid variant '";
          v84 = v27;
          v85 = v26;
          v80[0] = (uint64_t)"'";
          v81 = 259;
          llvm::operator+((uint64_t *)&__p, v80, (uint64_t)&v87);
          v22 = a1;
          v23 = (uint64_t)v27;
          return llvm::MCAsmParser::Error(v22, v23, (llvm::Twine *)&v87, 0, 0);
        }
LABEL_64:
        VariantKindForName = 0;
        v25 = *((_QWORD *)&v53 + 1);
        p_p = (uint64_t *)v53;
      }
      v57 = VariantKindForName;
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      Key = llvm::StringMapImpl::FindKey((uint64_t *)(v58 + 1232), p_p, v25);
      if (Key == -1
        || Key == (unint64_t)*(unsigned int *)(v58 + 1240)
        || (Symbol = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 + 1232) + 8 * Key) + 8)) == 0)
      {
        v61 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v62 = *(_QWORD *)(a1 + 232);
        v63 = *(unsigned __int8 *)(v62 + 80);
        if (*(_BYTE *)(v62 + 80))
        {
          std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(&__p, (char *)p_p, (uint64_t (*)(_QWORD))llvm::toUpper, (char *)p_p + v25, (uint64_t)llvm::toUpper, v25);
          if (SHIBYTE(v84) >= 0)
            p_p = (uint64_t *)&__p;
          else
            p_p = (uint64_t *)__p;
          if (SHIBYTE(v84) >= 0)
            v25 = HIBYTE(v84);
          else
            v25 = v83;
        }
        WORD4(v89) = 261;
        v87 = (const char *)p_p;
        *(_QWORD *)&v88 = v25;
        Symbol = llvm::MCContext::getOrCreateSymbol(v61, (const llvm::Twine *)&v87);
        if (v63 && SHIBYTE(v84) < 0)
          operator delete(__p);
      }
      if ((*(_DWORD *)(Symbol + 8) & 0x3800) == 0x1000)
      {
        v42 = *(unsigned __int8 **)(Symbol + 24);
        v64 = *v42;
        if (v64 == 4)
        {
          if (((*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v42 - 1) + 48))(v42 - 8) & 1) != 0)
          {
            if (v57)
            {
              v23 = *a3;
              v56 = "unexpected modifier on variable reference";
              goto LABEL_62;
            }
            v42 = *(unsigned __int8 **)(Symbol + 24);
            goto LABEL_102;
          }
        }
        else if (!v57 && v64 == 1)
        {
LABEL_102:
          v11 = 0;
          goto LABEL_91;
        }
      }
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v42 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v67 + 184, 24, 3);
      v11 = 0;
      v68 = v57 | (*(unsigned __int8 *)(*(_QWORD *)(v67 + 144) + 18) << 16);
      *v42 = 2;
      *(_DWORD *)(v42 + 1) = v68 | (v42[4] << 24);
      *((_QWORD *)v42 + 1) = v10;
      *((_QWORD *)v42 + 2) = Symbol;
LABEL_91:
      *a2 = v42;
      return v11;
    case 4:
      v10 = *(const char **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
      v28 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v31 = *(uint64_t **)(v28 + 24);
      v29 = (uint64_t *)(v28 + 24);
      v30 = v31;
      if (*((_DWORD *)v29 + 2) >= 0x41u)
        v29 = v30;
      v32 = *v29;
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v34 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v33 + 184, 24, 3);
      *(_BYTE *)v34 = 1;
      *(_DWORD *)(v34 + 1) = *(unsigned __int8 *)(v34 + 4) << 24;
      *(_QWORD *)(v34 + 8) = 0;
      *(_QWORD *)(v34 + 16) = v32;
      *a2 = v34;
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) != 2)
        return 0;
      v79 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
      LOBYTE(v87) = 64;
      llvm::StringRef::split((uint64_t *)&v79, (char *)&v87, 1uLL, (uint64_t)&v76);
      v35 = *((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1) == *((_QWORD *)&v79 + 1))
      {
        v36 = 0;
      }
      else
      {
        v69 = llvm::MCSymbolRefExpr::getVariantKindForName(v77, v78);
        if (v69 == 1)
        {
          v86 = 1283;
          __p = "invalid variant '";
          v84 = v77;
          v85 = v78;
          v80[0] = (uint64_t)"'";
          v81 = 259;
          llvm::operator+((uint64_t *)&__p, v80, (uint64_t)&v87);
LABEL_35:
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          llvm::MCAsmParser::Error(a1, *(_QWORD *)(v39 + 96), (llvm::Twine *)&v87, 0, 0);
          return 1;
        }
        v36 = v69;
        v79 = v76;
        v35 = *((_QWORD *)&v76 + 1);
      }
      if (v35 != 1)
        return 0;
      v70 = *(unsigned __int8 *)v79;
      if ((v70 | 4) != 0x66)
        return 0;
      DirectionalLocalSymbol = (llvm::MCSymbol *)llvm::MCContext::getDirectionalLocalSymbol(*(llvm::MCContext **)(a1 + 216), v32, v70 == 98);
      v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      *a2 = llvm::MCSymbolRefExpr::create((uint64_t)DirectionalLocalSymbol, v36, v72, 0);
      if (*((_QWORD *)&v79 + 1) != 1
        || *(_BYTE *)v79 != 98
        || (llvm::MCSymbol::getFragment(DirectionalLocalSymbol, 1), v73))
      {
        v74 = *(_QWORD *)(a1 + 456);
        v87 = v10;
        v90 = v74;
        v91 = DirectionalLocalSymbol;
        v75 = *(_OWORD *)(a1 + 440);
        v88 = *(_OWORD *)(a1 + 424);
        v89 = v75;
        goto LABEL_47;
      }
      v52 = "directional label undefined";
      goto LABEL_52;
    case 5:
      v13 = "literal value out of range for directive";
      goto LABEL_7;
    case 6:
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::APFloat::APFloat((uint64_t)&v87, &llvm::semIEEEdouble, *(char **)(*(_QWORD *)(v37 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v37 + 8) + 16));
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&__p, (llvm::APFloat *)&v87);
      if (v83 > 0x40)
      {
        v38 = *(void **)__p;
        MEMORY[0x24BD1B380]();
      }
      else
      {
        v38 = __p;
      }
      v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v66 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v65 + 184, 24, 3);
      *(_BYTE *)v66 = 1;
      *(_DWORD *)(v66 + 1) = *(unsigned __int8 *)(v66 + 4) << 24;
      *(_QWORD *)(v66 + 8) = 0;
      *(_QWORD *)(v66 + 16) = v38;
      *a2 = v66;
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v88);
      return 0;
    case 12:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v40 = *a2;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v42 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v41 + 184, 24, 3);
      v11 = 0;
      *v42 = 3;
      v43 = (v42[4] << 24) | 3;
      goto LABEL_50;
    case 13:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v44 = *a2;
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v46 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v45 + 184, 24, 3);
      *(_BYTE *)v46 = 3;
      *(_DWORD *)(v46 + 1) = (*(unsigned __int8 *)(v46 + 4) << 24) | 1;
      *(_QWORD *)(v46 + 8) = v10;
      *(_QWORD *)(v46 + 16) = v44;
      *a2 = v46;
      return 0;
    case 14:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v40 = *a2;
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v42 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v47 + 184, 24, 3);
      v11 = 0;
      *v42 = 3;
      v43 = (v42[4] << 24) | 2;
      goto LABEL_50;
    case 17:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    case 19:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 264) + 16))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      }
      v13 = "brackets expression not supported on this target";
      goto LABEL_7;
    case 24:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 232) + 33))
      {
        v13 = "cannot use . as current PC";
        goto LABEL_7;
      }
      v48 = *(llvm::MCContext **)(a1 + 216);
      v87 = "tmp";
      WORD4(v89) = 259;
      v49 = llvm::MCContext::createTempSymbol(v48, (const llvm::Twine *)&v87, 1);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 192))(*(_QWORD *)(a1 + 224), v49, 0);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      *a2 = llvm::MCSymbolRefExpr::create(v49, 0, v50, 0);
LABEL_47:
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      return 0;
    case 34:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v40 = *a2;
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v42 = (unsigned __int8 *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v51 + 184, 24, 3);
      v11 = 0;
      *v42 = 3;
      v43 = v42[4] << 24;
LABEL_50:
      *(_DWORD *)(v42 + 1) = v43;
      *((_QWORD *)v42 + 1) = v10;
      *((_QWORD *)v42 + 2) = v40;
      goto LABEL_91;
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) == 17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, a2, a3) & 1) == 0)
        {
          v87 = "expected ')'";
          WORD4(v89) = 259;
          if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)&v87))
          {
            v12 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), *a2, v9, *(_QWORD *)(a1 + 216));
            *a2 = v12;
            return v12 == 0;
          }
        }
      }
      else
      {
        v13 = "expected '(' after operator";
LABEL_7:
        v87 = v13;
        WORD4(v89) = 259;
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v14 + 96), (llvm::Twine *)&v87, 0, 0);
      }
      return v11;
    default:
      v87 = "unknown token in expression";
      WORD4(v89) = 259;
      goto LABEL_35;
  }
}

uint64_t `anonymous namespace'::AsmParser::parseParenExpression(llvm::MCAsmParser *a1, unint64_t *a2, _QWORD *a3)
{
  *a2 = 0;
    return 1;
  else
}

uint64_t `anonymous namespace'::AsmParser::parseAbsoluteExpression(_anonymous_namespace_::AsmParser *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;

  v11 = 0;
  v4 = *((_QWORD *)this + 17);
  v9[0] = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)this + 232))(this, &v11, v9) & 1) != 0)return 1;
  v6 = v11;
  v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  v8 = llvm::MCExpr::evaluateAsAbsolute(v6, a2);
  result = 0;
  if (!v8)
  {
    v9[0] = "expected absolute expression";
    v10 = 259;
    return llvm::MCAsmParser::Error((uint64_t)this, v4, (llvm::Twine *)v9, 0, 0);
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::checkForValidSection(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  if (*((_BYTE *)this + 797))
    return 0;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  v4 = *(unsigned int *)(v3 + 152);
  if ((_DWORD)v4)
  {
    if (*(_QWORD *)(*(_QWORD *)(v3 + 144) + 32 * v4 - 32))
      return 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 28) + 176))(*((_QWORD *)this + 28), 0, *(_QWORD *)(*((_QWORD *)this + 1) + 288));
  v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v6 = "expected section directive before assembly directive";
  v7 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, v5, (llvm::Twine *)&v6, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseParenExprOfDepth(llvm::MCAsmParser *a1, int a2, unint64_t *a3, _QWORD *a4)
{
  _BOOL8 v8;
  uint64_t v9;
  const char *v11;
  __int16 v12;

    return 1;
  if (!a2)
    return 0;
  v8 = 1;
  {
    v8 = --a2 != 0;
    if (!a2)
      break;
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    *a4 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(v9 + 8) + 16);
    v11 = "expected ')'";
    v12 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v11))
      break;
  }
  return v8;
}

uint64_t `anonymous namespace'::HLASMAsmParser::parseStatement(_anonymous_namespace_::HLASMAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unint64_t v22;
  void *v23;
  llvm::MCContext *v24;
  uint64_t v25;
  int v26;
  void **v27;
  unint64_t v28;
  _BYTE *Symbol;
  void *__p[2];
  unsigned __int8 v31;
  char *v32;
  unint64_t v33;
  __int16 v34;
  char *v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;

  v4 = (*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (**(_DWORD **)(*((_QWORD *)a1 + 106) + 8) == 9)
  {
    if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1)
                               + 8)
                   + 16)
      && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1)
                                + 8)
                    + 8) != 13
      && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1)
                                + 8)
                    + 8) != 10)
    {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v5 = **(_DWORD **)(v4 + 8);
  if (**(_DWORD **)(*((_QWORD *)a1 + 106) + 8) == 9
    && (**(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1)
                               + 8)
                   + 8) == 10
     || **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1)
                               + 8)
                   + 8) == 13))
  {
LABEL_9:
    (*(void (**)(_QWORD))(**((_QWORD **)a1 + 107) + 152))(*((_QWORD *)a1 + 107));
LABEL_10:
    return 0;
  }
  if (v5 != 11)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
    v9 = *(_OWORD *)v8;
    v39 = *(_QWORD *)(v8 + 16);
    v38 = v9;
    v10 = *(unsigned int *)(v8 + 32);
    v41 = v10;
    if (v10 > 0x40)
    {
      v11 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
      v40 = (void *)operator new[]();
      memcpy(v40, *(const void **)(v8 + 24), v11);
    }
    else
    {
      v40 = *(void **)(v8 + 24);
    }
    v12 = *((_QWORD *)&v38 + 1);
    v36 = 0;
    v37 = (char *)*((_QWORD *)&v38 + 1);
    v35 = 0;
    {
      v13 = "The HLASM Label has to be an Identifier";
    }
    else
    {
      {
        v14 = 1;
        goto LABEL_22;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::HLASMAsmParser *))(*(_QWORD *)a1 + 40))(a1)
                       + 8) != 9)
      {
        v24 = (llvm::MCContext *)*((_QWORD *)a1 + 27);
        v25 = *((_QWORD *)v24 + 18);
        v26 = *(unsigned __int8 *)(v25 + 80);
        if (*(_BYTE *)(v25 + 80))
        {
          std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(__p, v35, (uint64_t (*)(_QWORD))llvm::toUpper, &v35[v36], (uint64_t)llvm::toUpper, v36);
          v27 = (void **)__p[0];
          if ((v31 & 0x80u) == 0)
            v27 = __p;
          v28 = v31;
          if ((v31 & 0x80u) != 0)
            v28 = (unint64_t)__p[1];
        }
        else
        {
          v27 = (void **)v35;
          v28 = v36;
        }
        v34 = 261;
        v32 = (char *)v27;
        v33 = v28;
        Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(v24, (const llvm::Twine *)&v32);
        if (v26 && (char)v31 < 0)
          operator delete(__p[0]);
        (*(void (**)(_QWORD, _BYTE *, uint64_t))(**((_QWORD **)a1 + 1) + 160))(*((_QWORD *)a1 + 1), Symbol, v12);
        (*(void (**)(_QWORD, _BYTE *, uint64_t))(**((_QWORD **)a1 + 107) + 192))(*((_QWORD *)a1 + 107), Symbol, v12);
          llvm::MCGenDwarfLabelEntry::Make(Symbol, *((_QWORD *)a1 + 28), *((uint64_t **)a1 + 30), &v37);
        (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)a1 + 1) + 168))(*((_QWORD *)a1 + 1), Symbol);
        v14 = 0;
LABEL_22:
        if (v41 >= 0x41 && v40)
          MEMORY[0x24BD1B380](v40, 0x1000C8000313F17);
        if (v14)
        {
          return 1;
        }
        goto LABEL_27;
      }
      v13 = "Cannot have just a label for an HLASM inline asm statement";
    }
    v32 = (char *)v13;
    v34 = 259;
    v14 = llvm::MCAsmParser::Error((uint64_t)a1, v12, (llvm::Twine *)&v32, 0, 0);
    goto LABEL_22;
  }
LABEL_27:
  v15 = *(uint64_t **)(*((_QWORD *)a1 + 106) + 8);
  v17 = *v15;
  v16 = (char *)v15[1];
  v18 = v15[2];
  v19 = *((unsigned int *)v15 + 8);
  if (v19 > 0x40)
  {
    v20 = (void *)operator new[]();
    memcpy(v20, (const void *)v15[3], ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v20 = (void *)v15[3];
  }
  v32 = 0;
  v33 = 0;
  {
    *(_QWORD *)&v38 = "unexpected token at start of statement";
    LOWORD(v41) = 259;
    v6 = llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)v16, (llvm::Twine *)&v38, 0, 0);
    if (v19 < 0x41)
      return v6;
    goto LABEL_39;
  }
  v21 = v32;
  v22 = v33;
  *(_QWORD *)&v38 = v17;
  *((_QWORD *)&v38 + 1) = v16;
  v39 = v18;
  v41 = v19;
  if (v19 > 0x40)
  {
    v23 = (void *)operator new[]();
    memcpy(v23, v20, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v23 = v20;
  }
  v40 = v23;
  if (v19 > 0x40)
  {
    if (v23)
      MEMORY[0x24BD1B380](v23, 0x1000C8000313F17);
LABEL_39:
    if (v20)
      MEMORY[0x24BD1B380](v20, 0x1000C8000313F17);
  }
  return v6;
}

void `anonymous namespace'::AsmParser::DiagHandler(_anonymous_namespace_::AsmParser *this, const llvm::SMDiagnostic *a2, void *a3)
{
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  char *v7;
  unsigned int BufferContainingLoc;
  int v9;
  BOOL v10;
  size_t v11;
  const void *v12;
  void **p_dst;
  void (*v14)(_anonymous_namespace_::AsmParser *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  int LineAndColumn;
  int v18;
  void **v19;
  size_t v20;
  int v21;
  char *v22;
  BOOL v23;
  size_t v24;
  int v25;
  char *v26;
  BOOL v27;
  size_t v28;
  void (*v29)(_anonymous_namespace_::AsmParser *, _QWORD);
  _QWORD *v30;
  _QWORD *v31;
  void **__dst;
  size_t v33;
  int64_t v34;
  _BYTE v35[16];
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *__p;
  void *v43;
  char *v44[23];

  v44[22] = *(char **)MEMORY[0x24BDAC8D0];
  v5 = (llvm::raw_ostream *)llvm::errs(this);
  v6 = *(llvm::raw_ostream **)this;
  v7 = (char *)*((_QWORD *)this + 1);
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)this, (unint64_t)v7);
  v9 = llvm::SourceMgr::FindBufferContainingLoc(*((uint64_t **)a2 + 30), *((_QWORD *)a2 + 56));
  if (*((_QWORD *)a2 + 31))
    v10 = 0;
  else
    v10 = BufferContainingLoc >= 2;
  if (v10)
    llvm::SourceMgr::PrintIncludeStack(v6, *(char **)(*(_QWORD *)v6 + 24 * (BufferContainingLoc - 1) + 16), v5);
  if (!*((_QWORD *)a2 + 55) || BufferContainingLoc != v9)
  {
    v14 = (void (*)(_anonymous_namespace_::AsmParser *, _QWORD))*((_QWORD *)a2 + 31);
    if (v14)
    {
      v14(this, *((_QWORD *)a2 + 32));
    }
    else
    {
      v30 = (_QWORD *)(*(uint64_t (**)(const llvm::SMDiagnostic *))(*(_QWORD *)a2 + 48))(a2);
      llvm::MCContext::diagnose(v30, (uint64_t)this);
    }
    return;
  }
  v11 = *((_QWORD *)a2 + 54);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = (const void *)*((_QWORD *)a2 + 53);
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    p_dst = (void **)operator new(v15 + 1);
    v33 = v11;
    v34 = v16 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v34) = *((_QWORD *)a2 + 54);
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_19;
  }
  memmove(p_dst, v12, v11);
LABEL_19:
  *((_BYTE *)p_dst + v11) = 0;
  LineAndColumn = llvm::SourceMgr::getLineAndColumn((uint64_t *)v6, v7, BufferContainingLoc);
  v18 = ~llvm::SourceMgr::getLineAndColumn(*((uint64_t **)a2 + 30), *((char **)a2 + 56), BufferContainingLoc)+ LineAndColumn+ *((_DWORD *)a2 + 110);
  if (v34 >= 0)
    v19 = (void **)&__dst;
  else
    v19 = __dst;
  if (v34 >= 0)
    v20 = HIBYTE(v34);
  else
    v20 = v33;
  v21 = *((char *)this + 79);
  v22 = (char *)this + 56;
  v23 = v21 < 0;
  if (v21 < 0)
    v22 = (char *)*((_QWORD *)this + 7);
  v24 = *((unsigned __int8 *)this + 79);
  if (v23)
    v24 = *((_QWORD *)this + 8);
  v25 = *((char *)this + 103);
  v26 = (char *)this + 80;
  v27 = v25 < 0;
  if (v25 < 0)
    v26 = (char *)*((_QWORD *)this + 10);
  v28 = *((unsigned __int8 *)this + 103);
  if (v27)
    v28 = *((_QWORD *)this + 11);
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v35, *(_QWORD *)this, *((_QWORD *)this + 1), v19, v20, v18, *((_DWORD *)this + 11), *((_DWORD *)this + 12), v22, v24, v26, v28, *((const void **)this + 13), (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3, 0, 0);
  v29 = (void (*)(_anonymous_namespace_::AsmParser *, _QWORD))*((_QWORD *)a2 + 31);
  if (v29)
  {
    v29(this, *((_QWORD *)a2 + 32));
  }
  else
  {
    v31 = (_QWORD *)(*(uint64_t (**)(const llvm::SMDiagnostic *))(*(_QWORD *)a2 + 48))(a2);
    llvm::MCContext::diagnose(v31, (uint64_t)v35);
  }
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v44);
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst);
}

void `anonymous namespace'::AsmParser::~AsmParser(_anonymous_namespace_::AsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  uint64_t v36;
  void **v37;

  *(_QWORD *)this = &off_251C1C550;
  *(_QWORD *)(*((_QWORD *)this + 28) + 288) = 0;
  *(_OWORD *)(*((_QWORD *)this + 30) + 48) = *(_OWORD *)((char *)this + 248);
  if (*((_DWORD *)this + 209))
  {
    v2 = *((unsigned int *)this + 208);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 103) + v3);
        if (v5 != -8 && v5 != 0)
          MEMORY[0x24BD1B398]();
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*((void **)this + 103));
  if (*((_DWORD *)this + 203))
  {
    v7 = *((unsigned int *)this + 202);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)(*((_QWORD *)this + 100) + v8);
        if (v10 != -8 && v10 != 0)
          MEMORY[0x24BD1B398]();
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  free(*((void **)this + 100));
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 768, *((_QWORD **)this + 97));
  v12 = (char *)*((_QWORD *)this + 90);
  if (v12 != (char *)this + 736)
    free(v12);
  v13 = (char *)*((_QWORD *)this + 60);
  if (v13 != (char *)this + 496)
    free(v13);
  v14 = (void **)*((_QWORD *)this + 47);
  v15 = (void **)*((_QWORD *)this + 48);
  if (v15 == v14)
  {
    v19 = (_QWORD *)((char *)this + 408);
    v15 = (void **)*((_QWORD *)this + 47);
  }
  else
  {
    v16 = *((_QWORD *)this + 50);
    v17 = &v14[v16 / 0x2E];
    v18 = (unint64_t)*v17 + 88 * (v16 % 0x2E);
    v19 = (_QWORD *)((char *)this + 408);
    v20 = (unint64_t)v14[(*((_QWORD *)this + 51) + v16) / 0x2E] + 88 * ((*((_QWORD *)this + 51) + v16) % 0x2E);
    if (v18 != v20)
    {
      do
      {
        v37 = (void **)(v18 + 56);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v37);
        v37 = (void **)(v18 + 32);
        std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](&v37);
        v18 += 88;
        if (v18 - (_QWORD)*v17 == 4048)
        {
          v21 = (unint64_t)v17[1];
          ++v17;
          v18 = v21;
        }
      }
      while (v18 != v20);
      v14 = (void **)*((_QWORD *)this + 47);
      v15 = (void **)*((_QWORD *)this + 48);
    }
  }
  *v19 = 0;
  v22 = (char *)v15 - (char *)v14;
  if ((unint64_t)((char *)v15 - (char *)v14) >= 0x11)
  {
    do
    {
      operator delete(*v14);
      v15 = (void **)*((_QWORD *)this + 48);
      v14 = (void **)(*((_QWORD *)this + 47) + 8);
      *((_QWORD *)this + 47) = v14;
      v22 = (char *)v15 - (char *)v14;
    }
    while ((unint64_t)((char *)v15 - (char *)v14) > 0x10);
  }
  v23 = v22 >> 3;
  if (v23 == 1)
  {
    v24 = 23;
    goto LABEL_36;
  }
  if (v23 == 2)
  {
    v24 = 46;
LABEL_36:
    *((_QWORD *)this + 50) = v24;
  }
  if (v14 != v15)
  {
    do
    {
      v25 = *v14++;
      operator delete(v25);
    }
    while (v14 != v15);
    v27 = *((_QWORD *)this + 47);
    v26 = *((_QWORD *)this + 48);
    if (v26 != v27)
      *((_QWORD *)this + 48) = v26 + ((v27 - v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v28 = (void *)*((_QWORD *)this + 46);
  if (v28)
    operator delete(v28);
  v29 = (void *)*((_QWORD *)this + 43);
  if (v29)
  {
    *((_QWORD *)this + 44) = v29;
    operator delete(v29);
  }
  if (*((_DWORD *)this + 83))
  {
    v30 = *((unsigned int *)this + 82);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = 8 * v30;
      do
      {
        v33 = *(_QWORD *)(*((_QWORD *)this + 40) + v31);
        if (v33 != -8 && v33 != 0)
          MEMORY[0x24BD1B398]();
        v31 += 8;
      }
      while (v32 != v31);
    }
  }
  free(*((void **)this + 40));
  v35 = (void *)*((_QWORD *)this + 37);
  if (v35)
  {
    *((_QWORD *)this + 38) = v35;
    operator delete(v35);
  }
  v36 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  llvm::MCAsmLexer::~MCAsmLexer((void **)this + 5);
  *(_QWORD *)this = off_251C1C758;
  llvm::SmallVector<llvm::MCAsmParser::MCPendingError,0u>::~SmallVector((char **)this + 2);
}

uint64_t `anonymous namespace'::AsmParser::parseStatement(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  int **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  int v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  int Key;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unint64_t v46;
  _QWORD *v47;
  _WORD *v48;
  _WORD *v49;
  int v50;
  __int16 v51;
  _BOOL8 v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  BOOL v61;
  BOOL v62;
  uint64_t *v63;
  char v64;
  _BYTE *v65;
  char v66;
  uint64_t v67;
  int v68;
  unint64_t Symbol;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, char *, unint64_t, char *);
  char *v76;
  unint64_t v77;
  unsigned int v78;
  void *v79;
  size_t v80;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  llvm::MCContext *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  BOOL v94;
  int v95;
  uint64_t *v96;
  llvm::MCAsmParser *v97;
  unsigned int v98;
  uint64_t (*v99)(uint64_t);
  uint64_t *v100;
  uint64_t v101;
  llvm::MCAsmParser *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  llvm::MCAsmParser *v106;
  unsigned int v107;
  int v108;
  _anonymous_namespace_::AsmParser *v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  void *v113;
  _BOOL4 v114;
  _anonymous_namespace_::AsmParser *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _anonymous_namespace_::AsmParser *v120;
  int v121;
  _anonymous_namespace_::AsmParser *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  void *v130;
  unsigned int v131;
  const char *v132;
  __int16 v133;
  uint64_t v134[4];
  __int16 v135;
  __int128 v136;
  uint64_t v137;
  void *v138;
  unsigned int v139;
  char *v140;
  unint64_t v141;
  char *v142;
  __int128 v143;
  uint64_t v144;
  void *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;

  v6 = (int **)(a1 + 6);
  while (1)
  {
    v7 = **v6;
    if (v7 != 11)
      break;
    ((void (*)(_QWORD **))(*a1)[23])(a1);
  }
  if (v7 == 9)
  {
    if (!*(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 16)
      || **(_BYTE **)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8) == 13
      || **(_BYTE **)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8) == 10)
    {
      (*(void (**)(_QWORD *))(*a1[28] + 152))(a1[28]);
    }
    ((void (*)(_QWORD **))(*a1)[23])(a1);
    return 0;
  }
  v9 = *(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8);
  v10 = *(_OWORD *)v9;
  v144 = *(_QWORD *)(v9 + 16);
  v143 = v10;
  v11 = *(unsigned int *)(v9 + 32);
  v146 = v11;
  if (v11 > 0x40)
  {
    v12 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
    v145 = (void *)operator new[]();
    memcpy(v145, *(const void **)(v9 + 24), v12);
  }
  else
  {
    v145 = *(void **)(v9 + 24);
  }
  v13 = (char *)*((_QWORD *)&v143 + 1);
  v142 = (char *)*((_QWORD *)&v143 + 1);
  v140 = 0;
  v141 = 0;
  a1[34] = (_QWORD *)*((_QWORD *)&v143 + 1);
  v14 = *(_DWORD *)a1[6];
  switch(v14)
  {
    case 21:
      v127 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v15 = "{";
      goto LABEL_25;
    case 22:
      v127 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v15 = "}";
      goto LABEL_25;
    case 23:
      if (!(*(unsigned int (**)(_QWORD *))(*a1[1] + 144))(a1[1]))
        goto LABEL_21;
      v127 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v15 = "*";
LABEL_25:
      v140 = v15;
      v17 = -1;
      v16 = 1;
      goto LABEL_26;
    case 24:
      v127 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v15 = ".";
      goto LABEL_25;
    default:
      if (v14 == 4)
      {
        v32 = *(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8);
        v35 = *(_QWORD *)(v32 + 24);
        v33 = v32 + 24;
        v34 = v35;
        if (*(_DWORD *)(v33 + 8) >= 0x41u)
          v33 = v34;
        v17 = *(_QWORD *)v33;
        if ((*(_QWORD *)v33 & 0x8000000000000000) != 0)
        {
          if (*((_BYTE *)a1 + 289))
          {
            v127 = a2;
            v16 = 0;
            v15 = "";
            v140 = "";
            goto LABEL_26;
          }
        }
        else
        {
          v127 = a2;
          v36 = *(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8);
          v15 = *(char **)(v36 + 8);
          v16 = *(_QWORD *)(v36 + 16);
          v140 = v15;
          v141 = v16;
          ((void (*)(_QWORD **))(*a1)[23])(a1);
          if (*(_DWORD *)a1[6] == 10 || *((_BYTE *)a1 + 289))
            goto LABEL_27;
        }
      }
      else
      {
        if (v14 == 8)
        {
LABEL_78:
          v8 = 0;
          goto LABEL_164;
        }
LABEL_21:
        if ((((uint64_t (*)(_QWORD **, char **))(*a1)[24])(a1, &v140) & 1) == 0)
        {
          v127 = a2;
          v17 = -1;
          v15 = v140;
          v16 = v141;
LABEL_27:
          std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(&v147, v15, (uint64_t (*)(_QWORD))llvm::toLower, &v15[v16], (uint64_t)llvm::toLower, v16);
          if (v149 >= 0)
            v18 = &v147;
          else
            v18 = (uint64_t *)v147;
          if (v149 >= 0)
            v19 = HIBYTE(v149);
          else
            v19 = (unint64_t)v148;
          Key = llvm::StringMapImpl::FindKey((uint64_t *)a1 + 100, v18, v19);
          v21 = a1[100];
          if (Key == -1)
            v22 = *((unsigned int *)a1 + 202);
          else
            v22 = Key;
          v23 = &v21[v22];
          if (SHIBYTE(v149) < 0)
          {
            operator delete((void *)v147);
            v21 = a1[100];
          }
          if (v23 != &v21[*((unsigned int *)a1 + 202)])
          {
            v24 = *(_DWORD *)(*v23 + 8);
            switch(v24)
            {
              case 'R':
              case 'S':
              case 'T':
              case 'U':
              case 'V':
              case 'W':
              case 'X':
                v25 = (_QWORD **)((char *)a1 + 284);
                v27 = (char *)a1[38];
                v26 = (char *)a1[39];
                if (v27 >= v26)
                {
                  v37 = (char *)a1[37];
                  v38 = (v27 - v37) >> 3;
                  if ((unint64_t)(v38 + 1) >> 61)
                    abort();
                  v39 = v26 - v37;
                  v40 = v39 >> 2;
                  if (v39 >> 2 <= (unint64_t)(v38 + 1))
                    v40 = v38 + 1;
                  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                    v41 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v41 = v40;
                  if (v41)
                    v41 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v41);
                  else
                    v42 = 0;
                  v46 = v41 + 8 * v38;
                  v47 = (_QWORD *)(v41 + 8 * v42);
                  *(_QWORD *)v46 = *v25;
                  v13 = (char *)(v46 + 8);
                  v49 = a1[37];
                  v48 = a1[38];
                  if (v48 != v49)
                  {
                    do
                    {
                      v50 = *((_DWORD *)v48 - 2);
                      v48 -= 4;
                      v51 = v48[2];
                      *(_DWORD *)(v46 - 8) = v50;
                      v46 -= 8;
                      *(_WORD *)(v46 + 4) = v51;
                    }
                    while (v48 != v49);
                    v48 = a1[37];
                  }
                  a1[37] = (_QWORD *)v46;
                  a1[38] = v13;
                  a1[39] = v47;
                  if (v48)
                    operator delete(v48);
                }
                else
                {
                  *(_QWORD *)v27 = *v25;
                  v13 = v27 + 8;
                }
                a1[38] = v13;
                *((_DWORD *)a1 + 71) = 1;
                if (*((_BYTE *)a1 + 289))
                  goto LABEL_77;
                v147 = 0;
                if ((((uint64_t (*)(_QWORD **, uint64_t *))(*a1)[32])(a1, &v147) & 1) != 0
                  || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
                {
                  goto LABEL_155;
                }
                switch(v24)
                {
                  case 'R':
                  case 'X':
                    goto LABEL_190;
                  case 'S':
                    v52 = v147 == 0;
                    goto LABEL_189;
                  case 'T':
                    v93 = ~v147;
                    goto LABEL_188;
                  case 'U':
                    v52 = v147 > 0;
                    goto LABEL_189;
                  case 'V':
                    v52 = v147 < 1;
                    goto LABEL_189;
                  case 'W':
                    v93 = v147;
LABEL_188:
                    v52 = v93 >> 63;
LABEL_189:
                    v147 = v52;
LABEL_190:
                    v8 = 0;
                    v94 = v147 == 0;
                    *((_BYTE *)a1 + 288) = v147 != 0;
                    *((_BYTE *)a1 + 289) = v94;
                    break;
                  default:
                    goto LABEL_43;
                }
                goto LABEL_164;
              case 'Y':
                v63 = (uint64_t *)a1;
                v64 = 1;
                goto LABEL_118;
              case 'Z':
                v63 = (uint64_t *)a1;
                v64 = 0;
LABEL_118:
                goto LABEL_163;
              case '[':
                v65 = a1;
                v66 = 1;
                goto LABEL_122;
              case '\\':
                v67 = (uint64_t)a1;
                v68 = 1;
                goto LABEL_124;
              case ']':
                v65 = a1;
                v66 = 0;
LABEL_122:
                goto LABEL_163;
              case '^':
                v67 = (uint64_t)a1;
                v68 = 0;
LABEL_124:
                goto LABEL_163;
              case '_':
                v44 = a1;
                v45 = 1;
                goto LABEL_126;
              case 'a':
                v44 = a1;
                v45 = 0;
LABEL_126:
                break;
              case 'b':
                goto LABEL_163;
              case 'c':
                goto LABEL_163;
              case 'd':
                goto LABEL_163;
              default:
                goto LABEL_43;
            }
            goto LABEL_163;
          }
          v24 = 0;
LABEL_43:
          if (*((_BYTE *)a1 + 289))
          {
LABEL_77:
            ((void (*)(_QWORD **))(*a1)[28])(a1);
            goto LABEL_78;
          }
          v28 = **v6;
          if (v28 == 10)
          {
            if (((*(uint64_t (**)(_QWORD *, __int128 *))(*a1[1] + 136))(a1[1], &v143) & 1) != 0)
            {
              if ((((uint64_t (*)(_QWORD **))(*a1)[33])(a1) & 1) == 0)
              {
                ((void (*)(_QWORD **))(*a1)[23])(a1);
                v29 = v140;
                v30 = v141;
                if (v141 != 1 || *v140 != 46)
                {
                  if (v17 == -1)
                  {
                    if (a3 && *((_BYTE *)a1 + 797))
                    {
                      v82 = ((uint64_t (*)(_QWORD **))(*a1)[4])(a1);
                      v83 = (uint64_t *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v29, v30, v82, v13, 1);
                      v85 = v84;
                      llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(*(_QWORD *)(v127 + 88), 7, (uint64_t)v13, v141, (uint64_t)v83, v84);
                      v140 = (char *)v83;
                      v141 = v85;
                    }
                    v86 = (llvm::MCContext *)((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
                    LOWORD(v151) = 261;
                    v147 = (uint64_t)v140;
                    v148 = (uint64_t *)v141;
                    Symbol = llvm::MCContext::getOrCreateSymbol(v86, (const llvm::Twine *)&v147);
                  }
                  else
                  {
                    Symbol = llvm::MCContext::createDirectionalLocalSymbol((llvm::MCContext *)a1[27], v17);
                  }
                  v87 = (_BYTE *)Symbol;
                  if (**(_DWORD **)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) == 37)
                  {
                    v88 = ((uint64_t (*)(_QWORD **))(*a1)[25])(a1);
                    v90 = v89;
                    llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
                    LODWORD(v147) = 9;
                    v148 = (uint64_t *)v88;
                    v149 = v90;
                    v151 = 64;
                    v150 = 0;
                    *((_BYTE *)a1 + 147) = 0;
                    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)v6, (uint64_t)a1[6], (unint64_t)&v147);
                    if (v151 >= 0x41)
                    {
                      if (v150)
                        MEMORY[0x24BD1B380](v150, 0x1000C8000313F17);
                    }
                  }
                  if (**(_DWORD **)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) == 9)
                    ((void (*)(_QWORD **))(*a1)[23])(a1);
                  if ((((uint64_t (*)(_QWORD **, char *, unint64_t))(*a1)[13])(a1, v140, v141) & 1) == 0)
                  {
                    (*(void (**)(_QWORD *, _BYTE *, char *))(*a1[1] + 160))(a1[1], v87, v13);
                    if (!*((_BYTE *)a1[1] + 112))
                      (*(void (**)(_QWORD *, _BYTE *, char *))(*a1[28] + 192))(a1[28], v87, v13);
                    {
                      v91 = ((uint64_t (*)(_QWORD **))(*a1)[7])(a1);
                      v92 = (uint64_t *)((uint64_t (*)(_QWORD **))(*a1)[4])(a1);
                      llvm::MCGenDwarfLabelEntry::Make(v87, v91, v92, &v142);
                    }
                    (*(void (**)(_QWORD *, _BYTE *))(*a1[1] + 168))(a1[1], v87);
                  }
                  goto LABEL_78;
                }
                v31 = "invalid use of pseudo-symbol '.' as a label";
                goto LABEL_68;
              }
LABEL_155:
              v8 = 1;
              goto LABEL_164;
            }
            v28 = **v6;
          }
          if (v28 == 27 && (*(unsigned int (**)(_QWORD *))(*a1[1] + 128))(a1[1]))
          {
            ((void (*)(_QWORD **))(*a1)[23])(a1);
            goto LABEL_163;
          }
          if (((_BYTE)a1[52] & 1) != 0)
          {
            v53 = ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
            v54 = llvm::StringMapImpl::FindKey((uint64_t *)(v53 + 2064), (uint64_t *)v140, v141);
            if (v54 != -1 && v54 != (unint64_t)*(unsigned int *)(v53 + 2072))
            {
              goto LABEL_163;
            }
          }
          if (v141 >= 2 && *v140 == 46)
          {
            v55 = a1[1];
            v56 = ((uint64_t (*)(_QWORD **))(*a1)[7])(a1);
            (*(void (**)(_QWORD *, uint64_t))(*v55 + 176))(v55, v56);
            v57 = *(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8);
            v58 = a1[1];
            v137 = v144;
            v136 = v143;
            v139 = v146;
            if (v146 > 0x40)
            {
              v138 = (void *)operator new[]();
              memcpy(v138, v145, (((unint64_t)v139 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v138 = v145;
            }
            v70 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v58 + 64))(v58, &v136);
            if (v139 >= 0x41 && v138)
              MEMORY[0x24BD1B380](v138, 0x1000C8000313F17);
            v71 = *((_DWORD *)a1 + 6);
            v8 = v71 != 0;
            if (v71 || ((v70 ^ 1) & 1) != 0)
              goto LABEL_164;
            if (*(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8) == v57)
            {
              if (*(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8) != v57)
                goto LABEL_78;
              v72 = llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::lookup((uint64_t)(a1 + 40), (uint64_t *)v140, v141);
              if (v72)
              {
                v43 = v73(v72, v140, v141, v13);
              }
              else
              {
                switch(v24)
                {
                  case 1:
                  case 2:
                    v97 = (llvm::MCAsmParser *)a1;
                    v98 = 0;
                    goto LABEL_321;
                  case 3:
                    v97 = (llvm::MCAsmParser *)a1;
                    v98 = 1;
                    goto LABEL_321;
                  case 4:
                    LOBYTE(v134[0]) = 0;
                    goto LABEL_214;
                  case 5:
                  case 6:
                    LOBYTE(v134[0]) = 1;
LABEL_214:
                    v147 = (uint64_t)a1;
                    v148 = v134;
                    goto LABEL_324;
                  case 7:
                  case 20:
                    v95 = 1;
                    goto LABEL_218;
                  case 8:
                  case 10:
                  case 11:
                  case 18:
                  case 24:
                    v95 = 2;
                    goto LABEL_218;
                  case 9:
                    goto LABEL_163;
                  case 12:
                  case 13:
                  case 14:
                  case 22:
                    v95 = 4;
                    goto LABEL_218;
                  case 15:
                  case 16:
                    v95 = 8;
                    goto LABEL_218;
                  case 17:
                    v147 = (uint64_t)a1;
                    goto LABEL_324;
                  case 19:
                    v95 = *(_DWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[6])(a1) + 144) + 8);
LABEL_218:
                    LODWORD(v134[0]) = v95;
                    v147 = (uint64_t)a1;
                    v148 = v134;
                    goto LABEL_324;
                  case 21:
                  case 43:
                    v96 = (uint64_t *)&llvm::semIEEEdouble;
                    goto LABEL_201;
                  case 23:
                  case 41:
                  case 42:
                    v96 = (uint64_t *)&llvm::semIEEEsingle;
LABEL_201:
                    v147 = (uint64_t)a1;
                    v148 = v96;
                    goto LABEL_324;
                  case 25:
                  case 32:
                  case 77:
                  case 78:
                    v135 = 261;
                    v134[0] = (uint64_t)v140;
                    v134[1] = v141;
                    v132 = " not currently supported for this target";
                    v133 = 259;
                    llvm::operator+(v134, (uint64_t *)&v132, (uint64_t)&v147);
                    goto LABEL_269;
                  case 26:
                  case 31:
                    v100 = (uint64_t *)v140;
                    v101 = v141;
                    v102 = (llvm::MCAsmParser *)a1;
                    v103 = 2;
                    goto LABEL_222;
                  case 27:
                    v100 = (uint64_t *)v140;
                    v101 = v141;
                    v102 = (llvm::MCAsmParser *)a1;
                    v103 = 1;
                    goto LABEL_222;
                  case 28:
                    v111 = (uint64_t *)v140;
                    v112 = v141;
                    v113 = &llvm::semIEEEdouble;
                    goto LABEL_224;
                  case 29:
                    v100 = (uint64_t *)v140;
                    v101 = v141;
                    v102 = (llvm::MCAsmParser *)a1;
                    v103 = 4;
LABEL_222:
                    goto LABEL_163;
                  case 30:
                    v111 = (uint64_t *)v140;
                    v112 = v141;
                    v113 = &llvm::semIEEEsingle;
LABEL_224:
                    goto LABEL_163;
                  case 33:
                  case 39:
                    v104 = (uint64_t *)v140;
                    v105 = v141;
                    v106 = (llvm::MCAsmParser *)a1;
                    v107 = 2;
                    goto LABEL_227;
                  case 34:
                    v104 = (uint64_t *)v140;
                    v105 = v141;
                    v106 = (llvm::MCAsmParser *)a1;
                    v107 = 1;
                    goto LABEL_227;
                  case 35:
                    v104 = (uint64_t *)v140;
                    v105 = v141;
                    v106 = (llvm::MCAsmParser *)a1;
                    v107 = 8;
                    goto LABEL_227;
                  case 36:
                  case 38:
                    v104 = (uint64_t *)v140;
                    v105 = v141;
                    v106 = (llvm::MCAsmParser *)a1;
                    v107 = 4;
                    goto LABEL_227;
                  case 37:
                  case 40:
                    v104 = (uint64_t *)v140;
                    v105 = v141;
                    v106 = (llvm::MCAsmParser *)a1;
                    v107 = 12;
LABEL_227:
                    goto LABEL_163;
                  case 44:
                    v114 = *(_BYTE *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[6])(a1) + 144) + 339) == 0;
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    goto LABEL_234;
                  case 45:
                    v114 = *(_BYTE *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[6])(a1) + 144) + 339) == 0;
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    goto LABEL_238;
                  case 46:
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    v114 = 0;
                    goto LABEL_234;
                  case 47:
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    v114 = 0;
                    goto LABEL_236;
                  case 48:
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    v114 = 0;
                    goto LABEL_238;
                  case 49:
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    v114 = 1;
LABEL_234:
                    v116 = 1;
                    goto LABEL_239;
                  case 50:
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    v114 = 1;
LABEL_236:
                    v116 = 2;
                    goto LABEL_239;
                  case 51:
                    v115 = (_anonymous_namespace_::AsmParser *)a1;
                    v114 = 1;
LABEL_238:
                    v116 = 4;
LABEL_239:
                    goto LABEL_163;
                  case 52:
                    goto LABEL_163;
                  case 53:
                    goto LABEL_163;
                  case 54:
                    goto LABEL_163;
                  case 55:
                    goto LABEL_163;
                  case 56:
                    goto LABEL_163;
                  case 57:
                    goto LABEL_163;
                  case 58:
                    goto LABEL_163;
                  case 59:
                    goto LABEL_77;
                  case 60:
                  case 61:
                    v108 = 9;
                    goto LABEL_323;
                  case 62:
                    v108 = 16;
                    goto LABEL_323;
                  case 63:
                    v108 = 18;
                    goto LABEL_323;
                  case 64:
                    v108 = 19;
                    goto LABEL_323;
                  case 65:
                    v108 = 21;
                    goto LABEL_323;
                  case 66:
                    v108 = 23;
                    goto LABEL_323;
                  case 67:
                    v108 = 25;
                    goto LABEL_323;
                  case 68:
                    v108 = 26;
                    goto LABEL_323;
                  case 69:
                    v108 = 27;
                    goto LABEL_323;
                  case 70:
                    v108 = 1;
                    goto LABEL_323;
                  case 71:
                  case 72:
                    v109 = (_anonymous_namespace_::AsmParser *)a1;
                    v110 = 0;
                    goto LABEL_257;
                  case 73:
                    v109 = (_anonymous_namespace_::AsmParser *)a1;
                    v110 = 1;
LABEL_257:
                    goto LABEL_163;
                  case 74:
                    goto LABEL_163;
                  case 75:
                    goto LABEL_163;
                  case 76:
                    goto LABEL_163;
                  case 79:
                    goto LABEL_163;
                  case 80:
                    goto LABEL_163;
                  case 81:
                    goto LABEL_163;
                  case 101:
                  case 102:
                    goto LABEL_163;
                  case 103:
                    goto LABEL_163;
                  case 104:
                    goto LABEL_163;
                  case 105:
                    goto LABEL_163;
                  case 106:
                    v147 = (uint64_t)"unsupported directive '.stabs'";
                    LOWORD(v151) = 259;
LABEL_269:
                    v117 = ((uint64_t (*)(_QWORD **))(*a1)[5])(a1);
                    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v117 + 96), (llvm::Twine *)&v147, 0, 0);
                    goto LABEL_155;
                  case 107:
                    goto LABEL_163;
                  case 108:
                    goto LABEL_163;
                  case 109:
                    goto LABEL_163;
                  case 110:
                    goto LABEL_163;
                  case 111:
                    goto LABEL_163;
                  case 112:
                    goto LABEL_163;
                  case 113:
                    goto LABEL_163;
                  case 114:
                    v118 = ((uint64_t (*)(_QWORD **))(*a1)[7])(a1);
                    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 808))(v118);
                    goto LABEL_78;
                  case 115:
                    goto LABEL_163;
                  case 116:
                    v119 = ((uint64_t (*)(_QWORD **))(*a1)[7])(a1);
                    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 816))(v119);
                    goto LABEL_78;
                  case 117:
                    goto LABEL_163;
                  case 118:
                    goto LABEL_163;
                  case 119:
                    goto LABEL_163;
                  case 120:
                    goto LABEL_163;
                  case 121:
                    goto LABEL_163;
                  case 122:
                    goto LABEL_163;
                  case 123:
                    goto LABEL_163;
                  case 124:
                    goto LABEL_163;
                  case 125:
                    goto LABEL_163;
                  case 126:
                    goto LABEL_163;
                  case 127:
                    goto LABEL_163;
                  case 128:
                    goto LABEL_163;
                  case 129:
                    v120 = (_anonymous_namespace_::AsmParser *)a1;
                    v121 = 1;
                    goto LABEL_294;
                  case 130:
                    v120 = (_anonymous_namespace_::AsmParser *)a1;
                    v121 = 0;
LABEL_294:
                    goto LABEL_163;
                  case 131:
                    goto LABEL_163;
                  case 132:
                    goto LABEL_163;
                  case 133:
                    goto LABEL_163;
                  case 134:
                    goto LABEL_163;
                  case 135:
                    goto LABEL_163;
                  case 136:
                    goto LABEL_163;
                  case 137:
                    goto LABEL_163;
                  case 138:
                    goto LABEL_163;
                  case 139:
                    goto LABEL_163;
                  case 140:
                    goto LABEL_163;
                  case 142:
                  case 143:
                    goto LABEL_163;
                  case 144:
                  case 145:
                    goto LABEL_163;
                  case 146:
                    goto LABEL_163;
                  case 147:
                    goto LABEL_163;
                  case 148:
                  case 149:
                    goto LABEL_163;
                  case 150:
                    goto LABEL_163;
                  case 151:
                    v122 = (_anonymous_namespace_::AsmParser *)a1;
                    v123 = 1;
                    goto LABEL_310;
                  case 152:
                    v122 = (_anonymous_namespace_::AsmParser *)a1;
                    v123 = 0;
LABEL_310:
                    goto LABEL_163;
                  case 153:
                    v124 = (uint64_t)a1;
                    v125 = (uint64_t)v13;
                    v126 = 0;
                    goto LABEL_313;
                  case 154:
                    v124 = (uint64_t)a1;
                    v125 = (uint64_t)v13;
                    v126 = 1;
LABEL_313:
                    break;
                  case 155:
                    goto LABEL_163;
                  case 156:
                    goto LABEL_163;
                  case 157:
                    goto LABEL_163;
                  case 158:
                    goto LABEL_163;
                  case 159:
                    goto LABEL_163;
                  case 160:
                    goto LABEL_163;
                  case 161:
                    v97 = (llvm::MCAsmParser *)a1;
                    v98 = 3;
LABEL_321:
                    break;
                  case 163:
                    v108 = 28;
LABEL_323:
                    LODWORD(v134[0]) = v108;
                    v147 = (uint64_t)a1;
                    v148 = v134;
LABEL_324:
                    v43 = llvm::MCAsmParser::parseMany((llvm::MCAsmParser *)a1, v99, (uint64_t)&v147, 1);
                    break;
                  case 164:
                    goto LABEL_163;
                  default:
                    v31 = "unknown directive";
                    goto LABEL_68;
                }
              }
              goto LABEL_163;
            }
            goto LABEL_155;
          }
          if (*((_BYTE *)a1 + 797))
          {
            switch(v141)
            {
              case 4uLL:
                if (*(_DWORD *)v140 == 1852143205 || *(_DWORD *)v140 == 1313166917)
                  llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,int>(*(_QWORD *)(v127 + 88), 1, (uint64_t)v13, 4);
                break;
              case 6uLL:
                if (*(_DWORD *)v140 == 1835360095 && *((_WORD *)v140 + 2) == 29801)
                  goto LABEL_162;
                if (*(_DWORD *)v140 == 1296392031 && *((_WORD *)v140 + 2) == 21577)
                  goto LABEL_162;
                break;
              case 5uLL:
                if ((*(_DWORD *)v140 != 1768777055 || v140[4] != 116)
                  && (*(_DWORD *)v140 != 1229800799 || v140[4] != 84))
                {
                  v61 = *(_DWORD *)v140 == 1734962273 && v140[4] == 110;
                  if (v61 || (*(_DWORD *)v140 == 1195985985 ? (v62 = v140[4] == 78) : (v62 = 0), v62))
                  {
                    goto LABEL_163;
                  }
                  break;
                }
LABEL_162:
                goto LABEL_163;
            }
          }
          if ((((uint64_t (*)(_QWORD **))(*a1)[33])(a1) & 1) == 0)
          {
            v76 = v140;
            v77 = v141;
            v128 = v143;
            v129 = v144;
            v78 = v146;
            v131 = v146;
            if (v146 > 0x40)
            {
              v80 = (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8;
              v79 = (void *)operator new[]();
              memcpy(v79, v145, v80);
            }
            else
            {
              v79 = v145;
            }
            v130 = v79;
            if (v78 >= 0x41 && v79)
              MEMORY[0x24BD1B380](v79, 0x1000C8000313F17);
            goto LABEL_164;
          }
          goto LABEL_155;
        }
        if (*((_BYTE *)a1 + 289))
        {
          v127 = a2;
          v16 = 0;
          v15 = "";
          v140 = "";
          v17 = -1;
LABEL_26:
          v141 = v16;
          goto LABEL_27;
        }
      }
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v31 = "unexpected token at start of statement";
LABEL_68:
      v147 = (uint64_t)v31;
      LOWORD(v151) = 259;
      v43 = llvm::MCAsmParser::Error((uint64_t)a1, (uint64_t)v13, (llvm::Twine *)&v147, 0, 0);
LABEL_163:
      v8 = v43;
LABEL_164:
      if (v146 >= 0x41 && v145)
        MEMORY[0x24BD1B380](v145, 0x1000C8000313F17);
      return v8;
  }
}

uint64_t llvm::StringMap<`anonymous namespace'::AsmParser::DirectiveKind,llvm::MallocAllocator>::operator[](llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t *i;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  v7 = *(_QWORD *)a1;
  v8 = v6;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  v10 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = v10 + 16;
  if (a3)
    memcpy(v10 + 16, a2, a3);
  v12[a3] = 0;
  *(_QWORD *)v11 = a3;
  *((_DWORD *)v11 + 2) = 0;
  *(_QWORD *)(v7 + 8 * v8) = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8)); ; ++i)
  {
    v9 = *i;
    if (*i && v9 != -8)
      break;
  }
  return v9 + 8;
}

void llvm::MCAsmMacro::~MCAsmMacro(llvm::MCAsmMacro *this)
{
  void **v2;

  v2 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = (void **)((char *)this + 32);
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](&v2);
}

void std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        v7 = (void **)(v4 - 32);
        std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 40)
  {
    if (*(_DWORD *)(i - 8) >= 0x41u)
    {
      result = *(_QWORD *)(i - 16);
      if (result)
        result = MEMORY[0x24BD1B380](result, 0x1000C8000313F17);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseCppHashLineFilenameComment(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v9 = *(uint64_t **)(v6 + 24);
  v7 = (uint64_t *)(v6 + 24);
  v8 = v9;
  if (*((_DWORD *)v7 + 2) >= 0x41u)
    v7 = v8;
  v10 = *v7;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (a3)
  {
    v15 = v13 - 2;
    if (v13)
      v16 = v12 + 1;
    else
      v16 = v12;
    if (v13 - (unint64_t)(v13 != 0) < v15)
      v15 = v13 - (v13 != 0);
    *(_QWORD *)(a1 + 424) = v16;
    *(_QWORD *)(a1 + 432) = v15;
    *(_QWORD *)(a1 + 440) = v10;
    *(_QWORD *)(a1 + 448) = a2;
    *(_DWORD *)(a1 + 456) = *(_DWORD *)(a1 + 280);
    if (!*(_QWORD *)(a1 + 472))
    {
      *(_QWORD *)(a1 + 464) = v16;
      *(_QWORD *)(a1 + 472) = v15;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfb(uint64_t *a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _WORD *v16;
  _WORD *v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = (uint64_t *)((char *)a1 + 284);
  v6 = (_QWORD *)a1[38];
  v5 = a1[39];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[37];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 8 * v9;
    v15 = v12 + 8 * v13;
    *(_QWORD *)v14 = *v4;
    v7 = (_QWORD *)(v14 + 8);
    v17 = (_WORD *)a1[37];
    v16 = (_WORD *)a1[38];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 2);
        v16 -= 4;
        v19 = v16[2];
        *(_DWORD *)(v14 - 8) = v18;
        v14 -= 8;
        *(_WORD *)(v14 + 4) = v19;
      }
      while (v16 != v17);
      v16 = (_WORD *)a1[37];
    }
    a1[37] = v14;
    a1[38] = (uint64_t)v7;
    a1[39] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = *v4;
    v7 = v6 + 1;
  }
  a1[38] = (uint64_t)v7;
  *((_DWORD *)a1 + 71) = 1;
  v20 = *a1;
  if (*((_BYTE *)a1 + 289))
  {
    (*(void (**)(uint64_t *))(v20 + 224))(a1);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t *))(v20 + 200))(a1);
    v23 = v22;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      result = 0;
      v24 = (v23 == 0) ^ a2;
      *((_BYTE *)a1 + 288) = v24 ^ 1;
      *((_BYTE *)a1 + 289) = v24;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfc(_BYTE *a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _WORD *v16;
  _WORD *v17;
  int v18;
  __int16 v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  const void *v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36[2];
  uint64_t v37[4];
  __int16 v38;

  v4 = a1 + 284;
  v6 = (_QWORD *)*((_QWORD *)a1 + 38);
  v5 = *((_QWORD *)a1 + 39);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)a1 + 37);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 8 * v9;
    v15 = v12 + 8 * v13;
    *(_QWORD *)v14 = *v4;
    v7 = (_QWORD *)(v14 + 8);
    v17 = (_WORD *)*((_QWORD *)a1 + 37);
    v16 = (_WORD *)*((_QWORD *)a1 + 38);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 2);
        v16 -= 4;
        v19 = v16[2];
        *(_DWORD *)(v14 - 8) = v18;
        v14 -= 8;
        *(_WORD *)(v14 + 4) = v19;
      }
      while (v16 != v17);
      v16 = (_WORD *)*((_QWORD *)a1 + 37);
    }
    *((_QWORD *)a1 + 37) = v14;
    *((_QWORD *)a1 + 38) = v7;
    *((_QWORD *)a1 + 39) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = *v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)a1 + 38) = v7;
  *((_DWORD *)a1 + 71) = 1;
  if (a1[289])
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  else
  {
    v21 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    while (1)
    {
      v22 = **((_DWORD **)a1 + 6);
      v23 = v22 > 0x19;
      v24 = (1 << v22) & 0x2000201;
      if (!v23 && v24 != 0)
        break;
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
    }
    v26 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) - v21;
    v36[0] = v21;
    v36[1] = v26;
    v37[0] = (uint64_t)"expected comma";
    v38 = 259;
    if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 25, (llvm::Twine *)v37))
      return 1;
    v37[0] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200))(a1);
    v37[1] = v28;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      v29 = (const void *)llvm::StringRef::trim(v36, " \t\n\v\f\r", 6);
      v31 = v30;
      v32 = (const void *)llvm::StringRef::trim(v37, " \t\n\v\f\r", 6);
      if (v31 == v33)
      {
        if (v31)
          v34 = memcmp(v29, v32, v31) == 0;
        else
          v34 = 1;
      }
      else
      {
        v34 = 0;
      }
      result = 0;
      v35 = v34 ^ a2;
      a1[288] = v35 ^ 1;
      a1[289] = v35;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfeqs(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _WORD *v31;
  _WORD *v32;
  int v33;
  __int16 v34;
  BOOL v35;
  char v36;
  const char *v37;
  __int16 v38;

  if (**(_DWORD **)(a1 + 48) != 3)
    goto LABEL_24;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 16);
  v6 = v5 != 0;
  if (v5)
    v7 = (const void *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 1);
  else
    v7 = *(const void **)(*(_QWORD *)(v4 + 8) + 8);
  if (v5 - 1 < v6)
    v8 = 1;
  else
    v8 = v5 - 1;
  if (v8 >= v5)
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 16);
  else
    v9 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 25)
  {
    if (a2)
      v20 = "expected comma after first string for '.ifeqs' directive";
    else
      v20 = "expected comma after first string for '.ifnes' directive";
    goto LABEL_30;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 3)
  {
LABEL_24:
    if (a2)
      v20 = "expected string parameter for '.ifeqs' directive";
    else
      v20 = "expected string parameter for '.ifnes' directive";
LABEL_30:
    v37 = v20;
    v38 = 259;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v21 + 96), (llvm::Twine *)&v37, 0, 0);
    return 1;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
  v12 = v11 != 0;
  if (v11)
    v13 = (const void *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 1);
  else
    v13 = *(const void **)(*(_QWORD *)(v10 + 8) + 8);
  if (v11 - 1 < v12)
    v14 = 1;
  else
    v14 = v11 - 1;
  if (v14 >= v11)
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
  else
    v15 = v14;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v16 = (_QWORD *)(a1 + 284);
  v18 = *(_QWORD **)(a1 + 304);
  v17 = *(_QWORD *)(a1 + 312);
  if ((unint64_t)v18 >= v17)
  {
    v23 = *(_QWORD *)(a1 + 296);
    v24 = ((uint64_t)v18 - v23) >> 3;
    if ((unint64_t)(v24 + 1) >> 61)
      abort();
    v25 = v17 - v23;
    v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1))
      v26 = v24 + 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
      v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v27);
    else
      v28 = 0;
    v29 = v27 + 8 * v24;
    v30 = v27 + 8 * v28;
    *(_QWORD *)v29 = *v16;
    v19 = (_QWORD *)(v29 + 8);
    v32 = *(_WORD **)(a1 + 296);
    v31 = *(_WORD **)(a1 + 304);
    if (v31 != v32)
    {
      do
      {
        v33 = *((_DWORD *)v31 - 2);
        v31 -= 4;
        v34 = v31[2];
        *(_DWORD *)(v29 - 8) = v33;
        v29 -= 8;
        *(_WORD *)(v29 + 4) = v34;
      }
      while (v31 != v32);
      v31 = *(_WORD **)(a1 + 296);
    }
    *(_QWORD *)(a1 + 296) = v29;
    *(_QWORD *)(a1 + 304) = v19;
    *(_QWORD *)(a1 + 312) = v30;
    if (v31)
      operator delete(v31);
  }
  else
  {
    *v18 = *v16;
    v19 = v18 + 1;
  }
  *(_QWORD *)(a1 + 304) = v19;
  *(_DWORD *)(a1 + 284) = 1;
  v35 = v9 - v6 == v15 - v12 && (v9 == v6 || memcmp(v7, v13, v9 - v6) == 0);
  result = 0;
  v36 = v35 ^ a2;
  *(_BYTE *)(a1 + 288) = v36 ^ 1;
  *(_BYTE *)(a1 + 289) = v36;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIfdef(_BYTE *a1, int a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _WORD *v16;
  _WORD *v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  llvm::MCContext *v24;
  llvm::MCSymbol *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  v4 = a1 + 284;
  v6 = (_QWORD *)*((_QWORD *)a1 + 38);
  v5 = *((_QWORD *)a1 + 39);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)a1 + 37);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    else
      v13 = 0;
    v14 = v12 + 8 * v9;
    v15 = v12 + 8 * v13;
    *(_QWORD *)v14 = *v4;
    v7 = (_QWORD *)(v14 + 8);
    v17 = (_WORD *)*((_QWORD *)a1 + 37);
    v16 = (_WORD *)*((_QWORD *)a1 + 38);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 2);
        v16 -= 4;
        v19 = v16[2];
        *(_DWORD *)(v14 - 8) = v18;
        v14 -= 8;
        *(_WORD *)(v14 + 4) = v19;
      }
      while (v16 != v17);
      v16 = (_WORD *)*((_QWORD *)a1 + 37);
    }
    *((_QWORD *)a1 + 37) = v14;
    *((_QWORD *)a1 + 38) = v7;
    *((_QWORD *)a1 + 39) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = *v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)a1 + 38) = v7;
  *((_DWORD *)a1 + 71) = 1;
  v20 = *(_QWORD *)a1;
  if (a1[289])
  {
    (*(void (**)(_BYTE *))(v20 + 224))(a1);
    return 0;
  }
  v22 = (*(uint64_t (**)(_BYTE *, uint64_t *))(v20 + 192))(a1, &v31);
  v29[0] = "expected identifier after '.ifdef'";
  v30 = 259;
  v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  if ((v22 & 1) != 0)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8), (llvm::Twine *)v29, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  v24 = (llvm::MCContext *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  v30 = 261;
  v29[0] = v31;
  v29[1] = v32;
  v25 = (llvm::MCSymbol *)llvm::MCContext::lookupSymbol(v24, (const llvm::Twine *)v29);
  if (a2)
  {
    if (v25)
    {
      llvm::MCSymbol::getFragment(v25, 0);
      v27 = v26 != 0;
    }
    else
    {
      v27 = 0;
    }
  }
  else if (v25)
  {
    llvm::MCSymbol::getFragment(v25, 0);
    v27 = v28 == 0;
  }
  else
  {
    v27 = 1;
  }
  a1[288] = v27;
  result = 0;
  a1[289] = !v27;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveElseIf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  _QWORD v6[4];
  __int16 v7;

  if ((*(_DWORD *)(a1 + 284) - 1) >= 2)
  {
    v6[0] = "Encountered a .elseif that doesn't follow an .if or  an .elseif";
    v7 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)v6, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 284) = 2;
    v3 = *(_QWORD *)(a1 + 304);
    if (*(_QWORD *)(a1 + 296) != v3 && *(_BYTE *)(v3 - 3) || *(_BYTE *)(a1 + 288))
    {
      *(_BYTE *)(a1 + 289) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
      return 0;
    }
    else
    {
      v6[0] = 0;
      if (((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 256))(a1, v6) & 1) != 0
        || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
      {
        return 1;
      }
      else
      {
        result = 0;
        v5 = v6[0] == 0;
        *(_BYTE *)(a1 + 288) = v6[0] != 0;
        *(_BYTE *)(a1 + 289) = v5;
      }
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveElse(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  if ((*(_DWORD *)(a1 + 284) - 1) >= 2)
  {
    v6 = "Encountered a .else that doesn't follow  an .if or an .elseif";
    v7 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)&v6, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 284) = 3;
    v5 = *(_QWORD *)(a1 + 304);
    if (*(_QWORD *)(a1 + 296) != v5 && *(_BYTE *)(v5 - 3) || *(_BYTE *)(a1 + 288))
    {
      result = 0;
      *(_BYTE *)(a1 + 289) = 1;
    }
    else
    {
      result = 0;
      *(_BYTE *)(a1 + 289) = 0;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveEndIf(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;

  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  if (!*(_DWORD *)(a1 + 284) || (v5 = *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 296) == v5))
  {
    v8 = "Encountered a .endif that doesn't follow an .if or .else";
    v9 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)&v8, 0, 0);
  }
  else
  {
    result = 0;
    v7 = *(_DWORD *)(v5 - 8);
    v6 = v5 - 8;
    *(_WORD *)(a1 + 288) = *(_WORD *)(v6 + 4);
    *(_DWORD *)(a1 + 284) = v7;
    *(_QWORD *)(a1 + 304) = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + (v6 << 7);
  *(_DWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 20) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 112) = 1;
  *(_BYTE *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 32) = a5;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 40) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t llvm::MCAsmLexer::Lex(llvm::MCAsmLexer *this)
{
  uint64_t v2;
  _DWORD *v3;
  _QWORD v5[3];
  uint64_t v6;
  unsigned int v7;

  v3 = (_DWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  *((_BYTE *)this + 107) = *(_DWORD *)v2 == 9;
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>((__int128 *)(v2 + 40), (__int128 *)(v2 + 40 * *((unsigned int *)this + 4)), v2);
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::pop_back((uint64_t)v3);
  if (!v3[2])
  {
    (**(void (***)(_QWORD *__return_ptr, llvm::MCAsmLexer *))this)(v5, this);
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)v3, *((_QWORD *)this + 1), (unint64_t)v5);
    if (v7 >= 0x41)
    {
      if (v6)
        MEMORY[0x24BD1B380](v6, 0x1000C8000313F17);
    }
  }
  return *(_QWORD *)v3;
}

BOOL `anonymous namespace'::AsmParser::enabledGenDwarfForAssembly(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  int v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t **v19;
  uint64_t *v20;
  __n128 v22;
  char v23;
  __int128 v24;
  uint64_t *v25;
  _BYTE v26[17];
  __int128 v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v3 = *(unsigned __int8 *)(v2 + 1601);
  if (*(_BYTE *)(v2 + 1601)
    && !*(_DWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 1604))
  {
    if (*((_QWORD *)this + 59))
    {
      v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v7 = *(void **)(v6 + 1360);
      v8 = *(_QWORD *)(v6 + 1368);
      v9 = (void *)*((_QWORD *)this + 58);
      v10 = *((_QWORD *)this + 59);
      v26[0] = 0;
      v26[16] = 0;
      v22.n128_u8[0] = 0;
      v23 = 0;
      v4.n128_f64[0] = llvm::MCContext::setMCLineTableRootFile(v5, 0, v7, v8, v9, v10, (uint64_t)v26, &v22);
    }
    v11 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, __n128))(*(_QWORD *)this + 48))(this, v4);
    LODWORD(v27) = 0;
    *(_QWORD *)&v24 = &v27;
    v12 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v11 + 1560), (unsigned int *)&v27, (uint64_t)&std::piecewise_construct, (_DWORD **)&v24);
    v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v14 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
    v16 = *(_QWORD *)(v15 + 1360);
    v17 = *(_QWORD *)(v15 + 1368);
    v18 = *((_BYTE *)v12 + 439);
    if (v18 >= 0)
      v19 = v12 + 52;
    else
      v19 = (uint64_t **)v12[52];
    if (v18 >= 0)
      v20 = (uint64_t *)*((unsigned __int8 *)v12 + 439);
    else
      v20 = v12[53];
    v27 = *(_OWORD *)((char *)v12 + 444);
    v28 = *((_BYTE *)v12 + 460);
    v24 = *((_OWORD *)v12 + 29);
    v25 = v12[60];
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t **, uint64_t *, __int128 *, __int128 *, _DWORD))(*(_QWORD *)v14 + 680))(v29, v14, 0, v16, v17, v19, v20, &v27, &v24, 0);
    *(_DWORD *)(v13 + 1604) = v29[0];
  }
  return v3 != 0;
}

uint64_t `anonymous namespace'::AsmParser::parseAssignment(llvm::MCAsmParser *a1, char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  llvm::MCContext *v13;
  uint64_t v14;
  unint64_t Symbol;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  const char *v24;
  llvm::MCContext *v25;
  void (*v26)(void);
  _BYTE *v27;
  const char *v28;
  __int16 v29;
  uint64_t v30[2];
  char *v31;
  uint64_t v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  __int16 v37;

  v27 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v34 = 0;
  if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE **, const char **))(*(_QWORD *)a1 + 232))(a1, &v27, &v34))
  {
    v34 = "missing expression";
    v37 = 259;
    v10 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v10 + 96), (llvm::Twine *)&v34, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v12 = a4 & 0xFFFFFFFD;
  v13 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
  v37 = 261;
  v34 = a2;
  v35 = a3;
  v14 = llvm::MCContext::lookupSymbol(v13, (const llvm::Twine *)&v34);
  if (!v14)
  {
    if (a3 == 1 && *a2 == 46)
    {
      v17 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)v17 + 648))(v17, v27, 0, v9);
      return 0;
    }
    v25 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    v37 = 261;
    v34 = a2;
    v35 = a3;
    Symbol = llvm::MCContext::getOrCreateSymbol(v25, (const llvm::Twine *)&v34);
    v18 = *(_DWORD *)(Symbol + 8);
    goto LABEL_21;
  }
  Symbol = v14;
  llvm::MCParserUtils::isSymbolUsedInExpression(v14, (uint64_t)v27);
  if (v16)
  {
    v33 = 1283;
    v30[0] = (uint64_t)"Recursive use of '";
    v31 = a2;
    v32 = a3;
    v34 = (const char *)v30;
    v36 = "'";
    v37 = 770;
    goto LABEL_30;
  }
  llvm::MCSymbol::getFragment((llvm::MCSymbol *)Symbol, 0);
  v18 = *(_DWORD *)(Symbol + 8);
  v19 = v18 & 0x3800;
  if (!v20 && (v18 & 4) == 0 && v19 != 4096 || (v19 == 4096 ? (v21 = (v18 & 4 | v12) == 0) : (v21 = 0), v21))
  {
LABEL_21:
    *(_DWORD *)(Symbol + 8) = v18 & 0xFFFFFFFD | (2 * (v12 == 0));
    goto LABEL_31;
  }
  llvm::MCSymbol::getFragment((llvm::MCSymbol *)Symbol, 1);
  v22 = *(_DWORD *)(Symbol + 8) & 0x3800;
  if (!v23)
  {
    if (v22 != 4096)
    {
      v33 = 1283;
      v24 = "invalid assignment to '";
      goto LABEL_29;
    }
LABEL_26:
    v18 = *(_DWORD *)(Symbol + 8) | 4;
    *(_DWORD *)(Symbol + 8) = v18;
    if (**(_BYTE **)(Symbol + 24) != 1)
    {
      v33 = 1283;
      v24 = "invalid reassignment of non-absolute variable '";
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  if (!v12 && v22 == 4096)
    goto LABEL_26;
  v33 = 1283;
  v24 = "redefinition of '";
LABEL_29:
  v30[0] = (uint64_t)v24;
  v31 = a2;
  v32 = a3;
  v28 = "'";
  v29 = 259;
  llvm::operator+(v30, (uint64_t *)&v28, (uint64_t)&v34);
LABEL_30:
  if ((llvm::MCAsmParser::Error((uint64_t)a1, v9, (llvm::Twine *)&v34, 0, 0) & 1) != 0)
    return 1;
LABEL_31:
  if (((*(uint64_t (**)(llvm::MCAsmParser *, char *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3) & 1) != 0)
    return 0;
  if (a4 < 2)
  {
    (*(void (**)(_QWORD *, unint64_t, _BYTE *))(**((_QWORD **)a1 + 28) + 272))(*((_QWORD **)a1 + 28), Symbol, v27);
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(**((_QWORD **)a1 + 28) + 296))(*((_QWORD **)a1 + 28), Symbol, 18);
    return 0;
  }
  if (a4 != 3)
  {
    if (a4 == 2)
    {
      v26 = *(void (**)(void))(**((_QWORD **)a1 + 28) + 272);
LABEL_39:
      v26();
    }
    return 0;
  }
  if (*v27 == 2)
  {
    v26 = *(void (**)(void))(**((_QWORD **)a1 + 28) + 280);
    goto LABEL_39;
  }
  v34 = "expected identifier";
  v37 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v34, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::handleMacroEntry(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  void **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *__p[2];
  _QWORD *v63;
  char *v64;
  uint64_t *v65;
  void *v66;
  __int128 v67;
  _BYTE v68[48];
  void *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  if (dword_2579660E0 != (uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 3)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v7 = 1;
    {
LABEL_50:
      v66 = &v59;
      std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v66);
      return v7;
    }
    v66 = v68;
    v67 = xmmword_24AA2ACF0;
    v10 = (unsigned __int8 *)a2[2];
    v11 = a2[3];
    v51 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 1;
    v53 = 0;
    v54 = 0;
    v52 = 0;
    v50 = (void **)&off_251C13B38;
    v58 = &v66;
    llvm::raw_ostream::SetUnbuffered(&v50);
    v12 = a2[4];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - v12) >> 4);
    v14 = v59;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (uint64_t)v59) >> 3);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if ((v7 & 1) != 0)
    {
LABEL_45:
      v50 = (void **)off_251C13948;
      if (v57 == 1 && v52)
        MEMORY[0x24BD1B380](v52, 0x1000C8077774924);
      if (v66 != v68)
        free(v66);
      goto LABEL_50;
    }
    v17 = (_QWORD *)v54;
    if ((unint64_t)(v53 - v54) > 9)
    {
      *(_WORD *)(v54 + 8) = 2671;
      *v17 = *(_QWORD *)".endmacro\n";
      v54 += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v50, ".endmacro\n", 0xAuLL);
    }
    v18 = *v58;
    v19 = (size_t)v58[1];
    __p[0] = "<instantiation>";
    LOWORD(v65) = 259;
    getMemBufferCopyImpl(v18, v19, (unsigned __int8 *)__p, (uint64_t)&v72);
    if ((v74 & 1) != 0)
      v20 = 0;
    else
      v20 = v72;
    v21 = operator new();
    *(_QWORD *)v21 = a3;
    *(_DWORD *)(v21 + 8) = *(_DWORD *)(a1 + 280);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v23 = (uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 3;
    *(_QWORD *)(v21 + 16) = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8);
    *(_QWORD *)(v21 + 24) = v23;
    v25 = *(uint64_t **)(a1 + 352);
    v24 = *(_QWORD *)(a1 + 360);
    if ((unint64_t)v25 >= v24)
    {
      v27 = *(_QWORD **)(a1 + 344);
      v28 = v25 - v27;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_52;
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v32 = (char *)operator new(8 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = (uint64_t *)&v32[8 * v28];
      *v33 = v21;
      v26 = v33 + 1;
      if (v25 != v27)
      {
        do
        {
          v34 = *--v25;
          *--v33 = v34;
        }
        while (v25 != v27);
        v25 = *(uint64_t **)(a1 + 344);
      }
      *(_QWORD *)(a1 + 344) = v33;
      *(_QWORD *)(a1 + 352) = v26;
      *(_QWORD *)(a1 + 360) = &v32[8 * v31];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v25 = v21;
      v26 = v25 + 1;
    }
    *(_QWORD *)(a1 + 352) = v26;
    ++*(_DWORD *)(a1 + 420);
    v35 = *(uint64_t **)(a1 + 240);
    v74 = 0;
    v36 = (_QWORD *)v35[1];
    v37 = v35[2];
    if ((unint64_t)v36 < v37)
    {
      v36[1] = 0;
      v36[2] = 0;
      v72 = 0;
      v73 = 0;
      v38 = v36 + 3;
      *v36 = v20;
LABEL_44:
      v35[1] = (uint64_t)v38;
      v45 = -1431655765 * (((unint64_t)v38 - *v35) >> 3);
      llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v72);
      *(_DWORD *)(a1 + 280) = v45;
      v46 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v45 - 1));
      v47 = *(_QWORD *)(v46 + 8);
      v48 = *(_QWORD *)(v46 + 16) - v47;
      *(_QWORD *)(a1 + 192) = v47;
      *(_QWORD *)(a1 + 200) = v48;
      *(_QWORD *)(a1 + 184) = v47;
      *(_QWORD *)(a1 + 136) = 0;
      *(_BYTE *)(a1 + 211) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      goto LABEL_45;
    }
    v39 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - *v35) >> 3);
    v40 = v39 + 1;
    if (v39 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v35) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x555555555555555)
        v42 = 0xAAAAAAAAAAAAAAALL;
      else
        v42 = v40;
      v65 = v35 + 2;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v35 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[24 * v39];
      __p[0] = v43;
      __p[1] = v44;
      v64 = &v43[24 * v42];
      v72 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((_QWORD *)v44 + 2) = 0;
      *(_QWORD *)v44 = v20;
      v73 = 0;
      v63 = v44 + 24;
      std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(v35, __p);
      v38 = (_QWORD *)v35[1];
      std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)__p);
      goto LABEL_44;
    }
LABEL_52:
    abort();
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v66);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66, (uint64_t)"macros cannot be nested more than ", 34);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)" levels deep.", 13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)" Use -asm-macro-max-nesting-depth to increase this limit.", 57);
  std::stringbuf::str();
  LOWORD(v54) = 260;
  v50 = __p;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(_QWORD *)(v6 + 96), (llvm::Twine *)&v50, 0, 0);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v66 = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)&v66 + *((_QWORD *)v66 - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)&v67 = MEMORY[0x24BEDB848] + 16;
  if (v70 < 0)
    operator delete(v69);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24BD1B32C](&v71);
  return 1;
}

uint64_t llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::lookup(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int Key;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * Key) + 8);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveSet(llvm::MCAsmParser *a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v9 = 0;
  v10 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, char **))(*(_QWORD *)a1 + 192))(a1, &v9);
  v7 = "expected identifier";
  v8 = 259;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v4)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), (llvm::Twine *)&v7, 0, 0);
    return 1;
  }
  v11 = "expected comma";
  v12 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v11))
    return 1;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveAlign(_anonymous_namespace_::AsmParser *this, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v6 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
  v25 = 0;
  v26 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v27 = 0;
  if ((_DWORD)a3 != 1
    || !a2
    || **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 9)
  {
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, int64_t *))(*(_QWORD *)this + 256))(this, &v27) & 1) != 0)return 1;
    if (llvm::MCAsmParser::parseOptionalToken(this, 25))
    {
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 25)
      {
        v8 = 0;
      }
      else
      {
        v8 = 1;
        v7 = 1;
        if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v26) & 1) != 0)return v7;
      }
      if (llvm::MCAsmParser::parseOptionalToken(this, 25))
      {
        v9 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                                   + 8)
                       + 8);
        if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v25) & 1) != 0)return 1;
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    if (llvm::MCAsmParser::parseEOL(this))
      return 1;
    v11 = v27;
    if (a2)
    {
      if (v27 < 32)
      {
        v7 = 0;
      }
      else
      {
        v23[0] = "invalid alignment value";
        v24 = 259;
        v7 = llvm::MCAsmParser::Error((uint64_t)this, v6, (llvm::Twine *)v23, 0, 0);
        LOBYTE(v11) = 31;
      }
      v11 = 1 << v11;
    }
    else if (v27)
    {
      if ((v27 & (v27 - 1)) != 0)
      {
        v23[0] = "alignment must be a power of 2";
        v24 = 259;
        v7 = llvm::MCAsmParser::Error((uint64_t)this, v6, (llvm::Twine *)v23, 0, 0);
        v12 = 1 << ~__clz(v27);
        if (v27)
          v11 = v12;
        else
          v11 = 0;
        v27 = v11;
      }
      else
      {
        v7 = 0;
      }
      if (!HIDWORD(v11))
      {
LABEL_35:
        if (v9)
        {
          v13 = v25;
          if (v25 <= 0)
          {
            v23[0] = "alignment directive can never be satisfied in this many bytes, ignoring maximum bytes expression";
            v24 = 259;
            v14 = llvm::MCAsmParser::Error((uint64_t)this, v9, (llvm::Twine *)v23, 0, 0);
            v13 = 0;
            v7 = v7 | v14;
            v25 = 0;
            v11 = v27;
          }
          if (v13 >= v11)
          {
            v23[0] = "maximum bytes expression exceeds alignment and has no effect";
            v24 = 259;
            (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v9, v23, 0, 0);
            v25 = 0;
          }
        }
        v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 144) + 32 * *(unsigned int *)(v15 + 152) - 32);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (v8)
        {
          if ((_DWORD)a3 == 1 && v26 == *(_DWORD *)(*((_QWORD *)this + 22) + 340))
            v19 = v17;
          else
            v19 = 0;
          if ((v19 & 1) != 0)
          {
LABEL_48:
            v20 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20 + 640))(v20, (63 - __clz(v27)), *(_QWORD *)(*((_QWORD *)this + 1) + 288), v25);
            return v7;
          }
        }
        else
        {
          if ((_DWORD)a3 == 1)
            v21 = v17;
          else
            v21 = 0;
          if (v21 == 1)
            goto LABEL_48;
        }
        v22 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 632))(v22, (63 - __clz(v27)), v26, a3, v25);
        return v7;
      }
      v23[0] = "alignment must be smaller than 2**32";
      v24 = 259;
      v7 = v7 | llvm::MCAsmParser::Error((uint64_t)this, v6, (llvm::Twine *)v23, 0, 0);
      v11 = 0x80000000;
    }
    else
    {
      v7 = 0;
      v11 = 1;
    }
    v27 = v11;
    goto LABEL_35;
  }
  v23[0] = "p2align directive with no operand(s) is ignored";
  v24 = 259;
  (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v6, v23, 0, 0);
  return llvm::MCAsmParser::parseEOL(this);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveOrg(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 17);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v5 = 0;
  v6 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, uint64_t *))(*(_QWORD *)this + 232))(this, &v5, &v6) & 1) != 0)return 1;
  v6 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 25)
    && ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v6) & 1) != 0)
  {
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 648))(v4, v5, v6, v2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveFill(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 17);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v12 = 0;
  v8[0] = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)this + 232))(this, &v12, v8) & 1) != 0)return 1;
  v10 = 0;
  v11 = 1;
  v3 = 0;
  v4 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 25))
  {
    v4 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                               + 8)
                   + 8);
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v11) & 1) != 0)return 1;
    if (llvm::MCAsmParser::parseOptionalToken(this, 25))
    {
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                                 + 8)
                     + 8);
      if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v10) & 1) != 0)return 1;
    }
    else
    {
      v3 = 0;
    }
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v6 = v11;
  if ((v11 & 0x8000000000000000) != 0)
  {
    v8[0] = "'.fill' directive with negative size has no effect";
    v9 = 259;
    (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this
                                                                                                  + 168))(this, v4, v8, 0, 0);
  }
  else
  {
    if (v11 >= 9)
    {
      v8[0] = "'.fill' directive with size greater than 8 has been truncated to 8";
      v9 = 259;
      (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v4, v8, 0, 0);
      v6 = 8;
      v11 = 8;
    }
    if (v6 >= 5)
    {
      if (HIDWORD(v10))
      {
        v8[0] = "'.fill' directive pattern has been truncated to 32-bits";
        v9 = 259;
        (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v3, v8, 0, 0);
      }
    }
    v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 616))(v7, v12, v11, v10, v2);
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveZero(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 17);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v5 = 0;
  v6 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, uint64_t *))(*(_QWORD *)this + 232))(this, &v5, &v6) & 1) != 0)return 1;
  v6 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 25)
  {
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v6) & 1) != 0)return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 608))(v4, v5, v6, v2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveComm(_anonymous_namespace_::AsmParser *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::MCContext *v6;
  unint64_t Symbol;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint8x8_t v13;
  int v15;
  uint64_t v16;
  _anonymous_namespace_::AsmParser *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;

  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v4 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
  v23 = 0;
  v24 = 0;
  if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v23))
  {
    v25[0] = "expected identifier in directive";
    v26 = 259;
    v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v5 + 96), (llvm::Twine *)v25, 0, 0);
    return 1;
  }
  v6 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v26 = 261;
  v25[0] = v23;
  v25[1] = v24;
  Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v25);
  v25[0] = "expected comma";
  v26 = 259;
  if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)v25))
    return 1;
  v22 = 0;
  v8 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v22) & 1) != 0)
    return 1;
  v21 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 25)
  {
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    v9 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, int8x8_t *))(*(_QWORD *)this + 256))(this, &v21) & 1) != 0)return 1;
    v10 = *((_QWORD *)this + 22);
    v11 = *(_DWORD *)(v10 + 356);
    if (a2 && !v11)
    {
      v12 = "alignment not supported on this target";
LABEL_31:
      v25[0] = v12;
      v26 = 259;
      v17 = this;
      v18 = v9;
      return llvm::MCAsmParser::Error((uint64_t)v17, v18, (llvm::Twine *)v25, 0, 0);
    }
    if ((a2 & 1) != 0)
    {
      if (v11 != 1)
        goto LABEL_17;
    }
    else if (!*(_BYTE *)(v10 + 354))
    {
      goto LABEL_17;
    }
    v13 = (uint8x8_t)vcnt_s8(v21);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] != 1)
    {
      v12 = "alignment must be a power of 2";
      goto LABEL_31;
    }
    v21 = (int8x8_t)(63 - __clz(*(_QWORD *)&v21));
  }
LABEL_17:
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  if (v22 < 0)
  {
    v25[0] = "size must be non-negative";
    v26 = 259;
    v17 = this;
    v18 = v8;
    return llvm::MCAsmParser::Error((uint64_t)v17, v18, (llvm::Twine *)v25, 0, 0);
  }
  v15 = *(_DWORD *)(Symbol + 8);
  if ((v15 & 2) != 0)
  {
    if ((*(_DWORD *)(Symbol + 8) & 0x3800) == 0x1000)
    {
      *(_QWORD *)(Symbol + 24) = 0;
      v15 &= 0xFFFFC7FF;
    }
    *(_QWORD *)Symbol &= 7uLL;
    *(_DWORD *)(Symbol + 8) = v15 & 0xFFFFFFFD;
  }
  llvm::MCSymbol::getFragment((llvm::MCSymbol *)Symbol, 1);
  if (v16)
  {
    v25[0] = "invalid symbol redefinition";
    v26 = 259;
    v17 = this;
    v18 = v4;
    return llvm::MCAsmParser::Error((uint64_t)v17, v18, (llvm::Twine *)v25, 0, 0);
  }
  v19 = *(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (a2)
    v20 = *(void (**)(void))(v19 + 464);
  else
    v20 = *(void (**)(void))(v19 + 456);
  v20();
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveAbort(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  v2 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 200))(this);
  v5 = v4;
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  if (v5)
  {
    v9 = 1283;
    v8[0] = ".abort '";
    v8[2] = v3;
    v8[3] = v5;
    v10[0] = v8;
    v10[2] = "' detected. Assembly stopping.";
    v7 = 770;
  }
  else
  {
    v10[0] = ".abort detected. Assembly stopping.";
    v7 = 259;
  }
  v11 = v7;
  return llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v10, 0, 0);
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveInclude(uint64_t **this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  const char **v16;
  std::string v18;
  __int128 *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  void *v25[2];
  uint64_t v26;
  __int128 v27;
  std::string::size_type v28;

  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(((uint64_t (*)(uint64_t **))(*this)[5])(this) + 8) + 8);
  v3 = **(_DWORD **)(((uint64_t (*)(uint64_t **))(*this)[5])(this) + 8);
  v23 = "expected string in '.include' directive";
  v24 = 259;
  v4 = ((uint64_t (*)(uint64_t **))(*this)[5])(this);
  if (v3 != 3)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v16 = &v23;
LABEL_15:
    llvm::MCAsmParser::Error((uint64_t)this, v15, (llvm::Twine *)v16, 0, 0);
    goto LABEL_16;
  }
  if ((((uint64_t (*)(uint64_t **, void **))(*this)[26])(this, v25) & 1) != 0)
  {
LABEL_16:
    v9 = 1;
    goto LABEL_17;
  }
  v5 = **(_DWORD **)(((uint64_t (*)(uint64_t **))(*this)[5])(this) + 8);
  v21 = "unexpected token in '.include' directive";
  v22 = 259;
  v6 = ((uint64_t (*)(uint64_t **))(*this)[5])(this);
  if (v5 != 9)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
    v16 = &v21;
    goto LABEL_15;
  }
  v27 = 0uLL;
  v28 = 0;
  v7 = llvm::SourceMgr::AddIncludeFile(this[30], (uint64_t)v25, (uint64_t)this[17], (uint64_t)&v27);
  v8 = v7;
  v9 = v7 == 0;
  if (v7)
  {
    *((_DWORD *)this + 70) = v7;
    v10 = *(_QWORD *)(*this[30] + 24 * (v7 - 1));
    v11 = *(uint64_t **)(v10 + 8);
    v12 = (uint64_t *)(*(_QWORD *)(v10 + 16) - (_QWORD)v11);
    this[24] = v11;
    this[25] = v12;
    this[23] = v11;
    this[17] = 0;
    *((_BYTE *)this + 211) = 1;
  }
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  std::operator+<char>();
  v13 = std::string::append(&v18, "'");
  v14 = v13->__r_.__value_.__r.__words[2];
  v27 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v20 = 260;
  v19 = &v27;
  if (!v8)
    llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v19, 0, 0);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_17:
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  return v9;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIncbin(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_::AsmParser *v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  std::string *v22;
  std::string::size_type v23;
  std::string v24;
  uint64_t v25;
  unint64_t v26;
  void *__p[2];
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;
  __int128 v31;
  std::string::size_type v32;

  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v3 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v29[0] = "expected string in '.incbin' directive";
  v30 = 259;
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v3 != 3)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v7 = this;
LABEL_7:
    llvm::MCAsmParser::Error((uint64_t)v7, v6, (llvm::Twine *)v29, 0, 0);
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **))(*(_QWORD *)this + 208))(this, __p) & 1) != 0)
  {
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  v25 = 0;
  v26 = 0;
  if (!llvm::MCAsmParser::parseOptionalToken(this, 25))
  {
    v5 = 0;
LABEL_17:
    v10 = 0;
    goto LABEL_18;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 25)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                               + 8)
                   + 8);
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v26) & 1) != 0)goto LABEL_8;
  }
  if (!llvm::MCAsmParser::parseOptionalToken(this, 25))
    goto LABEL_17;
  v10 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                              + 8)
                  + 8);
  v29[0] = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, _QWORD *))(*(_QWORD *)this + 232))(this, &v25, v29) & 1) != 0)goto LABEL_8;
LABEL_18:
  if (llvm::MCAsmParser::parseEOL(this))
    goto LABEL_8;
  v11 = v26;
  v29[0] = "skip is negative";
  v30 = 259;
  if ((v26 & 0x8000000000000000) != 0)
  {
    v7 = this;
    v6 = v5;
    goto LABEL_7;
  }
  v12 = v25;
  v31 = 0uLL;
  v32 = 0;
  v13 = llvm::SourceMgr::AddIncludeFile(*((uint64_t **)this + 30), (uint64_t)__p, *((_QWORD *)this + 17), (uint64_t)&v31);
  if (!v13)
  {
    v20 = 1;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(**((_QWORD **)this + 30) + 24 * (v13 - 1));
  v15 = *(_QWORD *)(v14 + 8);
  v16 = *(_QWORD *)(v14 + 16) - v15;
  if (v16 < v11)
    v11 = v16;
  v17 = v16 - v11;
  if (v12)
  {
    v24.__r_.__value_.__r.__words[0] = 0;
    v18 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
    if (llvm::MCExpr::evaluateAsAbsolute(v12, &v24))
    {
      if ((v24.__r_.__value_.__r.__words[0] & 0x8000000000000000) == 0)
      {
        if (v17 >= v24.__r_.__value_.__r.__words[0])
          v17 = v24.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
      v29[0] = "negative count has no effect";
      v30 = 259;
      v21 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, v10, v29, 0, 0);
    }
    else
    {
      v29[0] = "expected absolute expression";
      v30 = 259;
      v21 = llvm::MCAsmParser::Error((uint64_t)this, v10, (llvm::Twine *)v29, 0, 0);
    }
    v20 = v21;
    goto LABEL_34;
  }
LABEL_28:
  v19 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, unint64_t, std::string::size_type))(*(_QWORD *)v19 + 488))(v19, v15 + v11, v17);
  v20 = 0;
LABEL_34:
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  if (v20)
  {
    std::operator+<char>();
    v22 = std::string::append(&v24, "'");
    v23 = v22->__r_.__value_.__r.__words[2];
    v31 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v30 = 260;
    v29[0] = &v31;
    v8 = llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v29, 0, 0);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
LABEL_9:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveRept(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  uint64_t v18;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v31 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, void **))(*(_QWORD *)a1 + 232))(a1, &v30, &v31) & 1) != 0)
    return 1;
  v29 = 0;
  v10 = v30;
  v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  if (!llvm::MCExpr::evaluateAsAbsolute(v10, &v29))
  {
    LOWORD(v24) = 1283;
    v20 = "unexpected token in '";
    v22 = a3;
    v23 = a4;
    v31 = &v20;
    *((_QWORD *)&v32 + 1) = "' directive";
    v34 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v31, 0, 0);
  }
  v12 = v29;
  v31 = "Count is negative";
  v34 = 259;
  if (v29 < 0)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v31, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v9 = 1;
  if (v13)
  {
    v14 = v13;
    v31 = &v33;
    v32 = xmmword_24AA2ACF0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 1;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    v20 = (const char *)&off_251C13B38;
    v28 = &v31;
    llvm::raw_ostream::SetUnbuffered(&v20);
    v15 = v12 + 1;
    while (1)
    {
      v9 = --v15 != 0;
      if (!v15)
        break;
      v16 = *(unsigned __int8 **)(v14 + 16);
      v17 = *(_QWORD *)(v14 + 24);
      v18 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    }
LABEL_15:
    v20 = (const char *)off_251C13948;
    if (v27 == 1 && v22)
      MEMORY[0x24BD1B380](v22, 0x1000C8077774924);
    if (v31 != &v33)
      free(v31);
  }
  return v9;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveIrp(llvm::MCAsmParser *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned __int8 *v13;
  size_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  _WORD v29[20];
  void *v30;
  __int128 v31;
  _WORD v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 26);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v28);
  v16 = "expected identifier in '.irp' directive";
  LOWORD(v20) = 259;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v4)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), (llvm::Twine *)&v16, 0, 0);
LABEL_6:
    v6 = 1;
    goto LABEL_7;
  }
  v30 = "expected comma";
  v32[4] = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v30)
    || llvm::MCAsmParser::parseEOL(a1))
  {
    goto LABEL_6;
  }
  v6 = 1;
  if (v8)
  {
    v9 = v8;
    v30 = v32;
    v31 = xmmword_24AA2ACF0;
    v17 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v16 = (const char *)&off_251C13B38;
    v24 = &v30;
    llvm::raw_ostream::SetUnbuffered(&v16);
    v10 = v25;
    v11 = v26;
    if (v25 == v26)
    {
LABEL_13:
      v6 = 0;
    }
    else
    {
      v6 = 1;
      v12 = v25;
      while (1)
      {
        v13 = *(unsigned __int8 **)(v9 + 16);
        v14 = *(_QWORD *)(v9 + 24);
        v15 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
        v12 += 24;
        v10 += 24;
        if (v12 == v11)
          goto LABEL_13;
      }
    }
    v16 = (const char *)off_251C13948;
    if (v23 == 1 && v18)
      MEMORY[0x24BD1B380](v18, 0x1000C8077774924);
    if (v30 != v32)
      free(v30);
  }
LABEL_7:
  v30 = &v25;
  std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
  v30 = v29;
  std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v30);
  return v6;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveIrpc(llvm::MCAsmParser *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  _BOOL8 v8;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  char *v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int64x2_t v27;
  void **v28;
  uint64_t (*v29)(llvm::MCAsmParser *);
  size_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  void **v35;
  const char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  void **v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _BYTE v49[40];
  int64x2_t *v50;
  int64x2_t v51;
  void **v52;
  void ***v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v48 = 0u;
  memset(v49, 0, 26);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v48);
  v36 = "expected identifier in '.irpc' directive";
  LOWORD(v40) = 259;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
    v7 = (void **)&v36;
LABEL_3:
    llvm::MCAsmParser::Error((uint64_t)a1, v6, (llvm::Twine *)v7, 0, 0);
LABEL_6:
    v8 = 1;
    goto LABEL_7;
  }
  v54 = "expected comma";
  v57 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v54)
  {
    goto LABEL_6;
  }
  v10 = v45;
  if (v46 - (_QWORD)v45 != 24 || *((_QWORD *)v45 + 1) - *(_QWORD *)v45 != 40)
  {
    v54 = "unexpected token in '.irpc' directive";
    v57 = 259;
    v6 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
    v7 = &v54;
    goto LABEL_3;
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    goto LABEL_6;
  if (!v11)
    goto LABEL_6;
  v12 = v11;
  v54 = &v56;
  v55 = xmmword_24AA2ACF0;
  v37 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 1;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v36 = (const char *)&off_251C13B38;
  v44 = &v54;
  llvm::raw_ostream::SetUnbuffered(&v36);
  v13 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  v33 = *(_QWORD *)(*(_QWORD *)v10 + 8);
  while (1)
  {
    v8 = v13 != v14;
    if (v13 == v14)
      break;
    v34 = 0uLL;
    v35 = 0;
    v15 = v13 + 1;
    if (v14 >= v13)
      v16 = v13;
    else
      v16 = v14;
    if (v16 <= v15)
      ++v13;
    if (v13 >= v14)
      v13 = v14;
    v17 = (void *)(v33 + v16);
    v18 = (void *)(v13 - v16);
    v53 = &v35;
    v19 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(1uLL);
    v50 = (int64x2_t *)v19;
    v51.i64[0] = (uint64_t)v19;
    v52 = &v19[5 * v20];
    *(_DWORD *)v19 = 2;
    v19[1] = v17;
    v19[2] = v18;
    *((_DWORD *)v19 + 8) = 64;
    v19[3] = 0;
    llvm::APInt::clearUnusedBits((uint64_t)(v19 + 3));
    v21 = (char *)(v19 + 5);
    v51.i64[1] = (uint64_t)(v19 + 5);
    v22 = v34;
    v23 = v51.i64[0];
    if (v34.i64[1] == v34.i64[0])
    {
      v27 = vdupq_n_s64(v34.u64[1]);
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = v23 + v24;
        v26 = *(_OWORD *)(v22.i64[1] + v24 - 40);
        *(_QWORD *)(v25 - 24) = *(_QWORD *)(v22.i64[1] + v24 - 24);
        *(_OWORD *)(v25 - 40) = v26;
        *(_DWORD *)(v25 - 8) = *(_DWORD *)(v22.i64[1] + v24 - 8);
        *(_QWORD *)(v25 - 16) = *(_QWORD *)(v22.i64[1] + v24 - 16);
        *(_DWORD *)(v22.i64[1] + v24 - 8) = 0;
        v24 -= 40;
      }
      while (v22.i64[1] + v24 != v22.i64[0]);
      v27 = v34;
      v21 = (char *)v51.i64[1];
      v23 += v24;
    }
    v34.i64[0] = v23;
    v34.i64[1] = (uint64_t)v21;
    v51 = v27;
    v28 = v35;
    v35 = v52;
    v52 = v28;
    v50 = (int64x2_t *)v27.i64[0];
    std::__split_buffer<llvm::AsmToken>::~__split_buffer((uint64_t)&v50);
    v29 = *(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40);
    v31 = *(unsigned __int8 **)(v12 + 16);
    v30 = *(_QWORD *)(v12 + 24);
    v34.i64[1] = (uint64_t)v21;
    v32 = v29(a1);
    v50 = &v34;
    std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v50);
    v13 = v15;
    if ((v30 & 1) != 0)
      goto LABEL_30;
  }
LABEL_30:
  v36 = (const char *)off_251C13948;
  if (v43 == 1 && v38)
    MEMORY[0x24BD1B380](v38, 0x1000C8077774924);
  if (v54 != &v56)
    free(v54);
LABEL_7:
  v54 = &v45;
  std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v54);
  v54 = v49;
  std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v54);
  return v8;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveEndr(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = *((_QWORD *)this + 43);
  v3 = *((_QWORD *)this + 44);
  if (v2 == v3)
  {
    v6 = "unmatched '.endr' directive";
    v7 = 259;
    v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v4 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  else
  {
  }
  return v2 == v3;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveBundleAlignMode(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  __int16 v6;
  unint64_t v7;

  v2 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) == 0)
  {
    v7 = 0;
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v7) & 1) == 0&& !llvm::MCAsmParser::parseEOL(this))
    {
      v5 = "invalid bundle alignment size (expected between 0 and 30)";
      v6 = 259;
      if (v7 < 0x1F)
      {
        v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 1208))(v4, v7);
        return 0;
      }
      llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v5, 0, 0);
    }
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveBundleLock(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  int v6;
  const char **v7;
  BOOL v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v13 = 0;
  v14 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v3 = llvm::MCAsmParser::parseOptionalToken(this, 9);
  if (v3)
  {
LABEL_3:
    v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 1216))(v4, !v3);
    return 0;
  }
  v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v13);
  v11 = "invalid option for '.bundle_lock' directive";
  v12 = 259;
  if (v6)
  {
    v7 = &v11;
LABEL_16:
    llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v7, 0, 0);
    return 1;
  }
  if (v14 != 12)
  {
    v9 = "invalid option for '.bundle_lock' directive";
    v10 = 259;
LABEL_15:
    v7 = &v9;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)v13 == 0x6F745F6E67696C61 && *(_DWORD *)(v13 + 8) == 1684956511;
  v9 = "invalid option for '.bundle_lock' directive";
  v10 = 259;
  if (!v8)
    goto LABEL_15;
  if (!llvm::MCAsmParser::parseEOL(this))
    goto LABEL_3;
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveBundleUnlock(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;

  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1224))(v3);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveLEB128(_anonymous_namespace_::AsmParser *this, char a2)
{
  _QWORD v4[2];
  char v5;

  v5 = a2;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 264))(this) & 1) != 0)
    return 1;
  v4[0] = this;
  v4[1] = &v5;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveSpace(llvm::MCAsmParser *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v5 = 0;
  v6 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, &v5, &v6) & 1) != 0)
    return 1;
  v6 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(a1, 25)
    && ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v6) & 1) != 0)
  {
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 608))(v4, v5, v6, v2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveFile(llvm::MCAsmParser *a1, uint64_t a2)
{
  int8x8_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int8x8_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t **v21;
  uint64x2_t v22;
  uint64x2_t v23;
  int16x8_t v24;
  __int8 v25;
  char v26;
  char v27;
  void *v28;
  int v29;
  uint64_t v30;
  int v33;
  uint64_t v34;
  unsigned int v35;
  void *v36;
  const void *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Twine *p_p;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[2];
  char v55;
  _BYTE v56[7];
  _QWORD v57[2];
  char v58;
  _BYTE v59[7];
  std::string __p;
  __int16 v61;
  void *v62;
  size_t v63;
  uint64_t v64;
  _BYTE v65[7];
  unint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74[4];
  __int16 v75;
  __int8 v76;
  __int32 v77;
  __int16 v78;
  __int8 v79;
  int8x8_t v80;
  char v81;
  __int8 v82;
  __int32 v83;
  __int16 v84;
  __int8 v85;
  int8x8_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 4)
  {
    v5 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
    v8 = *(_QWORD *)(v5 + 24);
    v6 = v5 + 24;
    v7 = v8;
    if (*(_DWORD *)(v6 + 8) >= 0x41u)
      v6 = v7;
    v9 = *(_QWORD *)v6;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    if (v9 < 0)
    {
      v74[0] = "negative file number";
      v75 = 259;
      v10 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v10 + 96), (llvm::Twine *)v74, 0, 0);
      return 1;
    }
  }
  else
  {
    v9 = -1;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)a1 + 208))(a1, &v71) & 1) != 0)
  {
    v11 = 1;
    goto LABEL_99;
  }
  v68 = 0;
  v69 = 0;
  v70 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 3)
  {
    v16 = 0;
    v15 = 0;
    if (v73 >= 0)
      v13 = &v71;
    else
      v13 = v71;
    if (v73 >= 0)
      v14 = HIBYTE(v73);
    else
      v14 = v72;
    goto LABEL_27;
  }
  v74[0] = "explicit path specified, but no file number";
  v75 = 259;
  v12 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v9 == -1)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8), (llvm::Twine *)v74, 0, 0);
    goto LABEL_60;
  }
  v13 = &v68;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)a1 + 208))(a1, &v68) & 1) != 0)
  {
LABEL_60:
    v11 = 1;
    goto LABEL_97;
  }
  if (v70 >= 0)
  {
    v14 = HIBYTE(v70);
  }
  else
  {
    v13 = v68;
    v14 = v69;
  }
  if (v73 >= 0)
    v15 = &v71;
  else
    v15 = v71;
  if (v73 >= 0)
    v16 = HIBYTE(v73);
  else
    v16 = v72;
LABEL_27:
  v66 = 0;
  v67 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(a1, 9))
  {
    if (v9 == -1)
    {
      if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1) + 144)
                    + 364))
      {
        v39 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v39 + 656))(v39, v13, v14);
      }
      goto LABEL_94;
    }
    v49 = v16;
    v50 = v15;
    v51 = v14;
    v52 = v13;
    v18 = 0;
    v19 = 0;
LABEL_30:
    v20 = *((_QWORD *)a1 + 27);
    if (*(_BYTE *)(v20 + 1601))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      v74[0] = &__p;
      v21 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v20 + 1560), (unsigned int *)&__p, (uint64_t)&std::piecewise_construct, v74);
      llvm::MCDwarfLineTableHeader::resetFileTable((llvm::MCDwarfLineTableHeader *)(v21 + 5));
      v20 = *((_QWORD *)a1 + 27);
      *(_BYTE *)(v20 + 1601) = 0;
    }
    if ((v18 & 1) != 0)
    {
      v22 = (uint64x2_t)vdupq_lane_s64(v67, 0);
      v23 = (uint64x2_t)vdupq_lane_s64(v66, 0);
      *(int8x8_t *)v22.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_24AA32AE0), (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_24AA32AD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_24AA32B00), (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_24AA32AF0))));
      v24 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_24AA32AE0), (int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_24AA32AD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_24AA32B00), (int32x4_t)vshlq_u64(v23, (uint64x2_t)xmmword_24AA32AF0)));
      v2 = vmovn_s16(v24);
      v25 = v22.i8[0];
      v48 = vext_s8(*(int8x8_t *)v22.i8, *(int8x8_t *)v24.i8, 1uLL);
      v26 = 1;
      if ((v19 & 1) == 0)
      {
LABEL_34:
        v27 = 0;
        v28 = 0;
LABEL_80:
        if (v9)
        {
          v42 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
          v76 = v25;
          v79 = v48.i8[6];
          v78 = v48.i16[2];
          v77 = v48.i32[0];
          v80 = v2;
          v81 = v26;
          v54[0] = v28;
          v54[1] = v16;
          v55 = v27;
          *(_DWORD *)v56 = *(_DWORD *)v65;
          *(_DWORD *)&v56[3] = *(_DWORD *)&v65[3];
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, __int8 *, _QWORD *, _DWORD))(*(_QWORD *)v42 + 680))(&v88, v42, v9, v50, v49, v52, v51, &v76, v54, 0);
          if ((v89 & 1) != 0)
          {
            v43 = v88;
            v88 = 0;
            v53 = v43;
            llvm::toString(&v53, &__p);
            v75 = 260;
            v74[0] = &__p;
            v11 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (llvm::Twine *)v74, 0, 0);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
            if ((v89 & 1) != 0)
            {
              v44 = v88;
              v88 = 0;
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            }
            goto LABEL_95;
          }
        }
        else
        {
          v45 = *((_QWORD *)a1 + 27);
          if (*(unsigned __int16 *)(v45 + 1712) <= 4u)
            *(_WORD *)(v45 + 1712) = 5;
          v46 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
          v82 = v25;
          v85 = v48.i8[6];
          v84 = v48.i16[2];
          v83 = v48.i32[0];
          v86 = v2;
          v87 = v26;
          v57[0] = v28;
          v57[1] = v16;
          v58 = v27;
          *(_DWORD *)v59 = *(_DWORD *)v65;
          *(_DWORD *)&v59[3] = *(_DWORD *)&v65[3];
          (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, __int8 *, _QWORD *, _QWORD))(*(_QWORD *)v46 + 688))(v46, v50, v49, v52, v51, &v82, v57, 0);
        }
        if (!*((_BYTE *)a1 + 798) && !llvm::MCContext::isDwarfMD5UsageConsistent(*((llvm::MCContext **)a1 + 27)))
        {
          *((_BYTE *)a1 + 798) = 1;
          v74[0] = "inconsistent use of MD5 checksums";
          v75 = 259;
          v11 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _DWORD **, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, a2, v74, 0, 0);
          goto LABEL_95;
        }
LABEL_94:
        v11 = 0;
        goto LABEL_95;
      }
    }
    else
    {
      v26 = 0;
      v25 = 0;
      v48 = v17;
      if ((v19 & 1) == 0)
        goto LABEL_34;
    }
    v35 = HIBYTE(v64);
    if (v64 < 0)
      v35 = v63;
    v36 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v20 + 184, v35, 3);
    v28 = v36;
    if (v64 >= 0)
      v37 = &v62;
    else
      v37 = v62;
    if (v64 >= 0)
      v38 = HIBYTE(v64);
    else
      v38 = v63;
    memcpy(v36, v37, v38);
    if (SHIBYTE(v64) < 0)
    {
      v27 = 1;
      v16 = v63;
    }
    else
    {
      v16 = HIBYTE(v64);
      v27 = 1;
    }
    goto LABEL_80;
  }
  v49 = v16;
  v50 = v15;
  v51 = v14;
  v52 = v13;
  v18 = 0;
  v19 = 0;
  v16 = 53;
  while (1)
  {
    v88 = 0;
    v89 = 0;
    v29 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
    v74[0] = "unexpected token in '.file' directive";
    v75 = 259;
    v30 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    if (v29 != 2)
    {
LABEL_74:
      v40 = *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8);
LABEL_76:
      p_p = (llvm::Twine *)v74;
      goto LABEL_77;
    }
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 192))(a1, &v88) & 1) != 0)
      goto LABEL_78;
    if (v89 == 6)
      break;
    if (v89 != 3)
      goto LABEL_75;
    if (*(_WORD *)v88 != 25709 || *(_BYTE *)(v88 + 2) != 53)
      goto LABEL_75;
    v74[0] = "MD5 checksum specified, but no file number";
    v75 = 259;
    v30 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    if (v9 == -1)
      goto LABEL_74;
    if ((parseHexOcta(a1, &v67, (const char **)&v66) & 1) != 0)
      goto LABEL_78;
    v18 = 1;
LABEL_57:
    if (llvm::MCAsmParser::parseOptionalToken(a1, 9))
      goto LABEL_30;
  }
  if (*(_DWORD *)v88 != 1920298867 || *(_WORD *)(v88 + 4) != 25955)
  {
LABEL_75:
    v74[0] = "unexpected token in '.file' directive";
    v75 = 259;
    v40 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
    goto LABEL_76;
  }
  v74[0] = "source specified, but no file number";
  v75 = 259;
  v30 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v9 == -1)
    goto LABEL_74;
  v33 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.file' directive";
  v61 = 259;
  v34 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v33 == 3)
  {
    if (((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)a1 + 208))(a1, &v62) & 1) != 0)
      goto LABEL_78;
    v19 = 1;
    goto LABEL_57;
  }
  v40 = *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8);
  p_p = (llvm::Twine *)&__p;
LABEL_77:
  llvm::MCAsmParser::Error((uint64_t)a1, v40, p_p, 0, 0);
LABEL_78:
  v11 = 1;
LABEL_95:
  if (SHIBYTE(v64) < 0)
    operator delete(v62);
LABEL_97:
  if (SHIBYTE(v70) < 0)
    operator delete(v68);
LABEL_99:
  if (SHIBYTE(v73) < 0)
    operator delete(v71);
  return v11;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveLine(_anonymous_namespace_::AsmParser *this)
{
  const char *v3;
  __int16 v4;
  uint64_t v5;

  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4
    && (v3 = "unexpected token in '.line' directive",
        v4 = 259,
        llvm::MCAsmParser::parseIntToken(this, &v5, (const llvm::Twine *)&v3)))
  {
    return 1;
  }
  else
  {
    return llvm::MCAsmParser::parseEOL(this);
  }
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveLoc(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  llvm::Twine *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _anonymous_namespace_::AsmParser *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const char *v23;
  unsigned int v24;
  unsigned int v25[8];
  __int16 v26;
  unsigned int v27[8];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;

  v31 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v29[0] = "unexpected token in '.loc' directive";
  v30 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v31, (const llvm::Twine *)v29))
    return 1;
  v3 = v31;
  if (v31 <= 0)
  {
    v4 = *(unsigned __int16 *)(*((_QWORD *)this + 27) + 1712);
    *(_QWORD *)v27 = "file number less than one in '.loc' directive";
    v28 = 259;
    if (v4 <= 4)
    {
      v5 = (llvm::Twine *)v27;
LABEL_12:
      v12 = this;
      v13 = v2;
LABEL_13:
      llvm::MCAsmParser::Error((uint64_t)v12, v13, v5, 0, 0);
      return 1;
    }
  }
  v6 = (uint64_t **)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  *(_QWORD *)v25 = "unassigned file number in '.loc' directive";
  v26 = 259;
  if (!llvm::MCContext::isValidDwarfFileNumber(v6, v3, 0))
  {
    v5 = (llvm::Twine *)v25;
    goto LABEL_12;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v7 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v10 = *(uint64_t **)(v7 + 24);
    v8 = (uint64_t *)(v7 + 24);
    v9 = v10;
    if (*((_DWORD *)v8 + 2) >= 0x41u)
      v8 = v9;
    v11 = *v8;
    if (*v8 < 0)
    {
      v23 = "line number less than zero in '.loc' directive";
      goto LABEL_27;
    }
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    v11 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v16 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v19 = *(uint64_t **)(v16 + 24);
    v17 = (uint64_t *)(v16 + 24);
    v18 = v19;
    if (*((_DWORD *)v17 + 2) >= 0x41u)
      v17 = v18;
    v20 = *v17;
    if ((*v17 & 0x8000000000000000) == 0)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      goto LABEL_23;
    }
    v23 = "column position less than zero in '.loc' directive";
LABEL_27:
    v29[0] = v23;
    v30 = 259;
    v13 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
    v5 = (llvm::Twine *)v29;
    v12 = this;
    goto LABEL_13;
  }
  v20 = 0;
LABEL_23:
  v21 = *(_BYTE *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this) + 1594) & 1;
  v24 = 0;
  v25[0] = v21;
  *(_QWORD *)v27 = 0;
  v29[0] = this;
  v29[1] = v25;
  v29[2] = &v24;
  v29[3] = v27;
  if ((v14 & 1) == 0)
  {
    v22 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v22 + 712))(v22, v3, v11, v20, v25[0], v24, v27[0]);
  }
  return v14;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFile(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  unsigned int v8;
  int v9;
  std::string *p_p;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  int v14;
  std::string *v15;
  unint64_t v16;
  std::string::value_type *v17;
  int v18;
  int v19;
  unsigned int v21;
  void *v22;
  void *v23;
  std::string *v24;
  size_t v25;
  std::string::size_type v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  _anonymous_namespace_::AsmParser *v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  const char *v37;
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  std::string v41;
  __int16 v42;
  uint64_t v43;
  std::string __p;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  memset(&__p, 0, sizeof(__p));
  v43 = 0;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected file number in '.cv_file' directive";
  v42 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v48, (const llvm::Twine *)&v41))
    goto LABEL_56;
  v3 = v48;
  v39[0] = "file number less than one";
  v40 = 259;
  if (v48 <= 0)
  {
    v31 = (std::string *)v39;
    v32 = this;
    v33 = v2;
LABEL_55:
    llvm::MCAsmParser::Error((uint64_t)v32, v33, (llvm::Twine *)v31, 0, 0);
    goto LABEL_56;
  }
  v4 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v37 = "unexpected token in '.cv_file' directive";
  v38 = 259;
  v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v4 != 3)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
    v31 = (std::string *)&v37;
LABEL_54:
    v32 = this;
    goto LABEL_55;
  }
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void ***))(*(_QWORD *)this + 208))(this, &v45) & 1) != 0)
  {
LABEL_56:
    v30 = 1;
    goto LABEL_57;
  }
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
  {
    size = 0;
    v7 = 0;
    v8 = 0;
    goto LABEL_7;
  }
  v35 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
  v42 = 259;
  v36 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v35 != 3)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8);
    v31 = &v41;
    goto LABEL_54;
  }
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string *))(*(_QWORD *)this + 208))(this, &__p) & 1) != 0)goto LABEL_56;
  v39[0] = "expected checksum kind in '.cv_file' directive";
  v40 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v43, (const llvm::Twine *)v39) || llvm::MCAsmParser::parseEOL(this))
    goto LABEL_56;
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  v7 = __p.__r_.__value_.__r.__words[0];
LABEL_7:
  v9 = (char)v8;
  if ((v8 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v7;
  if ((v8 & 0x80u) == 0)
    v11 = v8;
  else
    v11 = size;
  memset(&v41, 0, sizeof(v41));
  if (v11)
  {
    std::string::resize(&v41, (v11 + 1) >> 1, 0);
    v12 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v41;
    else
      v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v11 & 1) == 0)
    {
LABEL_24:
      if (v11 >= 2)
      {
        v16 = v11 >> 1;
        v17 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          v18 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v17 - 1)];
          v19 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v17];
          if (v18 == 0xFFFF || v19 == 0xFFFF)
            break;
          v17 += 2;
          v13->__r_.__value_.__s.__data_[0] = v19 | (16 * v18);
          v13 = (std::string *)((char *)v13 + 1);
          --v16;
        }
        while (v16);
      }
      goto LABEL_31;
    }
    v14 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[p_p->__r_.__value_.__s.__data_[0]];
    if (v14 != 0xFFFF)
    {
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v41;
      v13->__r_.__value_.__s.__data_[0] = v14;
      v13 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      v15 = &__p;
      if (v9 < 0)
        v15 = (std::string *)v7;
      p_p = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
      --v11;
      goto LABEL_24;
    }
  }
LABEL_31:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v41;
  v21 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v41.__r_.__value_.__r.__words[1];
  v22 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((_QWORD *)this + 27) + 184, v21, 0);
  v23 = v22;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  memcpy(v22, v24, v25);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v26 = __p.__r_.__value_.__l.__size_;
  v27 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (v47 >= 0)
    v28 = (void **)&v45;
  else
    v28 = v45;
  if (v47 >= 0)
    v29 = HIBYTE(v47);
  else
    v29 = v46;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void *, std::string::size_type, _QWORD))(*(_QWORD *)v27 + 720))(v27, v3, v28, v29, v23, v26, v43) & 1) != 0)
  {
    v30 = 0;
  }
  else
  {
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)"file number already allocated";
    v42 = 259;
    v30 = llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v41, 0, 0);
  }
LABEL_57:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete(v45);
  return v30;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFuncId(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v7 = 0;
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 728))(v4, v7) & 1) != 0)
    return 0;
  v5 = "function id already allocated";
  v6 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v5, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVInlineSiteId(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  const char *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v37 = 0;
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 2)
    goto LABEL_24;
  v3 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  if (*(_DWORD *)v3 == 2)
  {
    v4 = *(int **)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
  }
  else
  {
    v4 = *(int **)(v3 + 8);
    v6 = *(_QWORD *)(v3 + 16);
    v7 = v6 - 1;
    v8 = v6 != 0;
    if (v6)
      v4 = (int *)((char *)v4 + 1);
    if (v7 < v8)
      v7 = 1;
    if (v7 >= v6)
      v7 = v6;
    v5 = v7 - v8;
  }
  if (v5 != 6)
  {
LABEL_24:
    v17 = "expected 'within' identifier in '.cv_inline_site_id' directive";
LABEL_25:
    v32[0] = v17;
    v33 = 259;
    v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
LABEL_26:
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8), (llvm::Twine *)v32, 0, 0);
    return 1;
  }
  v9 = *v4;
  v10 = *((unsigned __int16 *)v4 + 2);
  v12 = v9 != 1752459639 || v10 != 28265;
  v32[0] = "expected 'within' identifier in '.cv_inline_site_id' directive";
  v33 = 259;
  v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v12)
    goto LABEL_26;
  v36 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) != 2)
    goto LABEL_49;
  v14 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  if (*(_DWORD *)v14 == 2)
  {
    v15 = *(uint64_t **)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
  }
  else
  {
    v15 = *(uint64_t **)(v14 + 8);
    v19 = *(_QWORD *)(v14 + 16);
    v20 = v19 - 1;
    v21 = v19 != 0;
    if (v19)
      v15 = (uint64_t *)((char *)v15 + 1);
    if (v20 < v21)
      v20 = 1;
    if (v20 >= v19)
      v20 = v19;
    v16 = v20 - v21;
  }
  if (v16 != 10)
  {
LABEL_49:
    v17 = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
    goto LABEL_25;
  }
  v22 = *v15;
  v23 = *((unsigned __int16 *)v15 + 4);
  v25 = v22 != 0x5F64656E696C6E69 || v23 != 29793;
  v32[0] = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
  v33 = 259;
  v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v25)
    goto LABEL_26;
  v35 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  v34 = 0;
  v32[0] = "expected line number after 'inlined_at'";
  v33 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v34, (const llvm::Twine *)v32))
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v26 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v29 = *(unsigned int **)(v26 + 24);
    v27 = (unsigned int *)(v26 + 24);
    v28 = v29;
    if (v27[2] >= 0x41)
      v27 = v28;
    v30 = *v27;
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    v30 = 0;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v31 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v31 + 736))(v31, v37, v36, v35, v34, v30, v2) & 1) != 0)return 0;
  v32[0] = "function id already allocated";
  v33 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v32, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVLoc(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  v22 = 0;
    return 1;
  v21 = 0;
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v2 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v5 = *(uint64_t **)(v2 + 24);
    v3 = (uint64_t *)(v2 + 24);
    v4 = v5;
    if (*((_DWORD *)v3 + 2) >= 0x41u)
      v3 = v4;
    v6 = *v3;
    if (*v3 < 0)
    {
      v14 = "line number less than zero in '.cv_loc' directive";
LABEL_19:
      v19[0] = v14;
      v20 = 259;
      v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
      llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v15 + 96), (llvm::Twine *)v19, 0, 0);
      return 1;
    }
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    v6 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v7 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8);
    v10 = *(uint64_t **)(v7 + 24);
    v8 = (uint64_t *)(v7 + 24);
    v9 = v10;
    if (*((_DWORD *)v8 + 2) >= 0x41u)
      v8 = v9;
    v11 = *v8;
    if ((*v8 & 0x8000000000000000) == 0)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      goto LABEL_15;
    }
    v14 = "column position less than zero in '.cv_loc' directive";
    goto LABEL_19;
  }
  v11 = 0;
LABEL_15:
  v18 = 0;
  v17 = 0;
  v19[0] = this;
  v19[1] = &v18;
  v19[2] = &v17;
  if ((v12 & 1) == 0)
  {
    v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, BOOL))(*(_QWORD *)v13 + 744))(v13, v22, v21, v6, v11, v18, v17 != 0);
  }
  return v12;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVLinetable(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  int v3;
  const char **v4;
  int v5;
  llvm::MCContext *v7;
  unint64_t Symbol;
  llvm::MCContext *v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  __int16 v23;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    return 1;
  v21 = "expected comma";
  v23 = 259;
  if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v21))
    return 1;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v18);
  v14 = "expected identifier in directive";
  v15 = 259;
  if (v3)
  {
    v4 = &v14;
LABEL_8:
    llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v4, 0, 0);
    return 1;
  }
  v21 = "expected comma";
  v23 = 259;
  if (!llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v21))
  {
    v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                               + 8)
                   + 8);
    v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v16);
    v12 = "expected identifier in directive";
    v13 = 259;
    if (!v5)
    {
      v7 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v23 = 261;
      v21 = v18;
      v22 = v19;
      Symbol = llvm::MCContext::getOrCreateSymbol(v7, (const llvm::Twine *)&v21);
      v9 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v23 = 261;
      v21 = v16;
      v22 = v17;
      v10 = llvm::MCContext::getOrCreateSymbol(v9, (const llvm::Twine *)&v21);
      v11 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
      (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t))(*(_QWORD *)v11 + 752))(v11, v20, Symbol, v10);
      return 0;
    }
    v4 = &v12;
    goto LABEL_8;
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVInlineLinetable(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  const char **v6;
  int v7;
  llvm::MCContext *v9;
  unint64_t Symbol;
  llvm::MCContext *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    return 1;
  v32 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v24 = "expected SourceField in '.cv_inline_linetable' directive";
  v26 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v32, (const llvm::Twine *)&v24))
    return 1;
  v3 = v32;
  v22 = "File id less than zero in '.cv_inline_linetable' directive";
  v23 = 259;
  if (v32 < 1)
  {
    v6 = &v22;
    goto LABEL_12;
  }
  v31 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                             + 8)
                 + 8);
  v20 = "expected SourceLineNum in '.cv_inline_linetable' directive";
  v21 = 259;
  if (!llvm::MCAsmParser::parseIntToken(this, &v31, (const llvm::Twine *)&v20))
  {
    v4 = v31;
    v18 = "Line number less than zero in '.cv_inline_linetable' directive";
    v19 = 259;
    if (v31 < 0)
    {
      v6 = &v18;
      goto LABEL_12;
    }
    v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                               + 8)
                   + 8);
    v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v29);
    v16 = "expected identifier in directive";
    v17 = 259;
    if ((v5 & 1) != 0)
    {
      v6 = &v16;
LABEL_12:
      llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v6, 0, 0);
      return 1;
    }
    v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                               + 8)
                   + 8);
    v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v27);
    v14 = "expected identifier in directive";
    v15 = 259;
    if (v7)
    {
      v6 = &v14;
      goto LABEL_12;
    }
    if (!llvm::MCAsmParser::parseEOL(this))
    {
      v9 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v26 = 261;
      v24 = v29;
      v25 = v30;
      Symbol = llvm::MCContext::getOrCreateSymbol(v9, (const llvm::Twine *)&v24);
      v11 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v26 = 261;
      v24 = v27;
      v25 = v28;
      v12 = llvm::MCContext::getOrCreateSymbol(v11, (const llvm::Twine *)&v24);
      v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v13 + 760))(v13, v33, v3, v4, Symbol, v12);
      return 0;
    }
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVDefRange(_anonymous_namespace_::AsmParser *this)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  llvm::MCContext *v6;
  unint64_t Symbol;
  llvm::MCContext *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  const char *v18;
  int Key;
  uint64_t v20;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  __int16 v29;
  char *v30;
  unint64_t v31;

  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                     + 96);
      v30 = 0;
      v31 = 0;
      if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, char **))(*(_QWORD *)this + 192))(this, &v30))
      {
        break;
      }
      v6 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v29 = 261;
      v27 = v30;
      v28 = v31;
      Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)&v27);
      v5 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                     + 96);
      v25 = 0;
      v26 = 0;
      if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 192))(this, &v25))
      {
        break;
      }
      v8 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v29 = 261;
      v27 = v25;
      v28 = v26;
      v9 = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)&v27);
      v10 = v9;
      if (v3 >= v4)
      {
        v11 = ((char *)v3 - (char *)v2) >> 4;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60)
          abort();
        if (v4 - v2 > v12)
          v12 = v4 - v2;
        if ((unint64_t)((char *)v4 - (char *)v2) >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
        {
          if (v13 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v14 = (char *)operator new(16 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = (unint64_t *)&v14[16 * v11];
        *v15 = Symbol;
        v15[1] = v10;
        if (v3 == v2)
        {
          v17 = &v14[16 * v11];
        }
        else
        {
          v16 = &v14[16 * v11];
          do
          {
            v17 = v16 - 16;
            *((_OWORD *)v16 - 1) = *((_OWORD *)v3 - 1);
            v3 -= 2;
            v16 -= 16;
          }
          while (v3 != v2);
        }
        v4 = (unint64_t *)&v14[16 * v13];
        v3 = v15 + 2;
        if (v2)
          operator delete(v2);
        v2 = (unint64_t *)v17;
      }
      else
      {
        *v3 = Symbol;
        v3[1] = v9;
        v3 += 2;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) != 2)
        goto LABEL_28;
    }
    v18 = "expected identifier in directive";
  }
  else
  {
    v2 = 0;
    v5 = 0;
LABEL_28:
    v30 = 0;
    v31 = 0;
    v27 = "expected comma before def_range type in .cv_def_range directive";
    v29 = 259;
    if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
      || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, char **))(*(_QWORD *)this + 192))(this, &v30) & 1) != 0)
    {
      v18 = "expected def_range type in directive";
    }
    else
    {
      Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 103, (uint64_t *)v30, v31);
      if (Key != -1 && Key != (unint64_t)*((unsigned int *)this + 208))
      {
        switch(*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 103) + 8 * Key) + 8))
        {
          case 1:
            v25 = 0;
            v27 = "expected comma before register number in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v25) & 1) != 0)
            {
              goto LABEL_49;
            }
            v22 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this)
                                   + 792);
            goto LABEL_45;
          case 2:
            v25 = 0;
            v27 = "expected comma before offset in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v25) & 1) != 0)
            {
              goto LABEL_55;
            }
            v22 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this)
                                   + 800);
            goto LABEL_45;
          case 3:
            v24 = 0;
            v25 = 0;
            v27 = "expected comma before register number in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v25) & 1) != 0)
            {
LABEL_49:
              v18 = "expected register number";
              goto LABEL_35;
            }
            v27 = "expected comma before offset in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v24) & 1) != 0)
            {
LABEL_55:
              v18 = "expected offset value";
              goto LABEL_35;
            }
            v22 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this)
                                   + 784);
            goto LABEL_45;
          case 4:
            v24 = 0;
            v25 = 0;
            v23 = 0;
            v27 = "expected comma before register number in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(_QWORD *)this + 256))(this, &v25) & 1) != 0)
            {
              v18 = "expected register value";
              goto LABEL_35;
            }
            v27 = "expected comma before flag value in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v24) & 1) != 0)
            {
              v18 = "expected flag value";
              goto LABEL_35;
            }
            v27 = "expected comma before base pointer offset in .cv_def_range directive";
            v29 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v27)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v23) & 1) != 0)
            {
              v18 = "expected base pointer offset value";
              goto LABEL_35;
            }
            v22 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this)
                                   + 776);
LABEL_45:
            v22();
            v20 = 1;
            if (!v2)
              return v20;
            goto LABEL_36;
          default:
            break;
        }
      }
      v18 = "unexpected def_range type in .cv_def_range directive";
    }
  }
LABEL_35:
  v27 = v18;
  v29 = 259;
  v20 = llvm::MCAsmParser::Error((uint64_t)this, v5, (llvm::Twine *)&v27, 0, 0);
  if (v2)
LABEL_36:
    operator delete(v2);
  return v20;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVString(llvm::MCContext **this)
{
  uint64_t v2;
  llvm::CodeViewContext *CVContext;
  uint64_t *p_p;
  unint64_t v5;
  uint64_t v6;
  _DWORD v8[6];
  void *__p;
  unint64_t v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  if (((*((uint64_t (**)(llvm::MCContext **))*this + 33))(this) & 1) != 0
    || ((*((uint64_t (**)(llvm::MCContext **, void **))*this + 26))(this, &__p) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    CVContext = llvm::MCContext::getCVContext(this[27]);
    if (v11 >= 0)
      p_p = (uint64_t *)&__p;
    else
      p_p = (uint64_t *)__p;
    if (v11 >= 0)
      v5 = HIBYTE(v11);
    else
      v5 = v10;
    llvm::CodeViewContext::addToStringTable(CVContext, p_p, v5, (uint64_t)v8);
    v6 = (*((uint64_t (**)(llvm::MCContext **))*this + 7))(this);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 512))(v6, v8[4], 4);
    v2 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFileChecksumOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;

  v6 = 0;
  v4 = "expected identifier in directive";
  v5 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v6, (const llvm::Twine *)&v4) || llvm::MCAsmParser::parseEOL(this))
    return 1;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 824))(v3, v6);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCVFPOData(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  llvm::MCContext *v5;
  unint64_t Symbol;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 96);
  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v10))
  {
    v8[0] = "expected symbol name";
    v9 = 259;
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v3 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v5 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  Symbol = llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v8);
  v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 832))(v7, Symbol, v2);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFISections(_anonymous_namespace_::AsmParser *this)
{
  char v2;
  char v3;
  uint64_t v4;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;

  v10 = 0;
  v11 = 0;
  v2 = 0;
  v3 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
  {
LABEL_2:
    v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 864))(v4, v3 & 1, v2 & 1);
    return 0;
  }
  while (!(*(unsigned int (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v10))
  {
    if (v11 == 12)
    {
      v7 = *(_QWORD *)v10 == 0x665F67756265642ELL && *(_DWORD *)(v10 + 8) == 1701667186;
    }
    else
    {
      if (v11 == 9 && *(_QWORD *)v10 == 0x6D6172665F68652ELL && *(_BYTE *)(v10 + 8) == 101)
      {
        v3 = 1;
        goto LABEL_18;
      }
      v7 = 0;
    }
    v2 |= v7;
LABEL_18:
    if (llvm::MCAsmParser::parseOptionalToken(this, 9))
      goto LABEL_2;
    v12[0] = "expected comma";
    v13 = 259;
    if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)v12))
      return 1;
  }
  v12[0] = "expected .eh_frame or .debug_frame";
  v13 = 259;
  v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v9 + 96), (llvm::Twine *)v12, 0, 0);
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIStartProc(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
    goto LABEL_2;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v9) & 1) != 0
    || v10 != 6)
  {
    v7 = "unexpected token";
    v8 = 259;
    v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
LABEL_15:
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8), (llvm::Twine *)&v7, 0, 0);
    return 1;
  }
  v5 = *(_DWORD *)v9 != 1886218611 || *(_WORD *)(v9 + 4) != 25964;
  v7 = "unexpected token";
  v8 = 259;
  v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v5)
    goto LABEL_15;
  if (!llvm::MCAsmParser::parseEOL(this))
  {
LABEL_2:
    v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    llvm::MCStreamer::emitCFIStartProc(v2, v10 != 0, *((_QWORD *)this + 17));
    return 0;
  }
  return 1;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIEndProc(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  llvm::MCStreamer *v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (llvm::MCStreamer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    llvm::MCStreamer::emitCFIEndProc(v3);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIDefCfa(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v5 = 0;
  v6 = 0;
    return 1;
  v7 = "expected comma";
  v8 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v7)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 872))(v4, v6, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIDefCfaOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v4) & 1) != 0
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 880))(v3, v4);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIAdjustCfaOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 256))(this, &v4) & 1) != 0
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 968))(v3, v4);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIDefCfaRegister(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 888))(v4, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFILLVMDefAspaceCfa(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;

  v6 = 0;
  v7 = 0;
  v5 = 0;
    return 1;
  v8[0] = "expected comma";
  v9 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v8))
    return 1;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v6) & 1) != 0)
    return 1;
  v8[0] = "expected comma";
  v9 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v8)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 896))(v4, v7, v6, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v5 = 0;
  v6 = 0;
    return 1;
  v7 = "expected comma";
  v8 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v7)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 904))(v4, v6, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIRelOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v5 = 0;
  v6 = 0;
    return 1;
  v7 = "expected comma";
  v8 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v7)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 960))(v4, v6, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIPersonalityOrLsda(_anonymous_namespace_::AsmParser *this, int a2)
{
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  llvm::MCContext *v12;
  uint64_t v13;
  void (*v14)(void);
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  v21 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(_QWORD *)this + 256))(this, &v21) & 1) != 0)return 1;
  if (v21 == 255)
    return 0;
  v19 = 0;
  v20 = 0;
  if (v21 > 0xFF || (v21 & 0xD) != 0 && ((v21 & 0xF) <= 0xC ? (v5 = ((1 << (v21 & 0xF)) & 0x1D18) == 0) : (v5 = 1), v5))
  {
    v17 = "unsupported encoding.";
    v18 = 259;
    v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    goto LABEL_15;
  }
  v6 = v21 & 0x60;
  v17 = "unsupported encoding.";
  v18 = 259;
  v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if (v6)
  {
LABEL_15:
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
    v11 = &v17;
    goto LABEL_16;
  }
  v22[0] = "expected comma";
  v23 = 259;
  if (!llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)v22))
  {
    v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v19);
    v15 = "expected identifier in directive";
    v16 = 259;
    v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
    if (v8)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
      v11 = &v15;
LABEL_16:
      llvm::MCAsmParser::Error((uint64_t)this, v10, (llvm::Twine *)v11, 0, 0);
      return 1;
    }
    if (!llvm::MCAsmParser::parseEOL(this))
    {
      v12 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
      v23 = 261;
      v22[0] = v19;
      v22[1] = v20;
      llvm::MCContext::getOrCreateSymbol(v12, (const llvm::Twine *)v22);
      v13 = *(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
      if (a2)
        v14 = *(void (**)(void))(v13 + 912);
      else
        v14 = *(void (**)(void))(v13 + 920);
      v14();
      return 0;
    }
  }
  return 1;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIRememberState(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  uint64_t v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 928))(v3);
  }
  return v2;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIRestoreState(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  uint64_t v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 936))(v3);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFISameValue(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 944))(v4, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIRestore(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 952))(v4, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIEscape(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  std::string::value_type i;
  uint64_t v4;
  std::string *v5;
  std::string::size_type size;
  std::string::value_type __c[8];
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  *(_QWORD *)__c = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string::value_type *))(*(_QWORD *)this
                                                                                                 + 256))(this, __c) & 1) != 0)
  {
LABEL_2:
    v2 = 1;
  }
  else
  {
    for (i = __c[0]; ; i = __c[0])
    {
      std::string::push_back(&v9, i);
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) != 25)
        break;
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string::value_type *))(*(_QWORD *)this + 256))(this, __c) & 1) != 0)goto LABEL_2;
    }
    v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v9;
    else
      v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    else
      size = v9.__r_.__value_.__l.__size_;
    (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v4 + 976))(v4, v5, size);
    v2 = 0;
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIReturnColumn(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 984))(v4, v5);
  return 0;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFISignalFrame(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  uint64_t v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1000))(v3);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIUndefined(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1008))(v4, v5);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveCFIRegister(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v6 = 0;
  v7 = 0;
    return 1;
  v8 = "expected comma";
  v9 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v8)
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 1016))(v5, v7, v6);
  return 0;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveCFIWindowSave(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  uint64_t v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1024))(v3);
  }
  return v2;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveMacrosOnOff(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  BOOL v8;

  result = llvm::MCAsmParser::parseEOL(a1);
  if (!result)
  {
    v8 = a3 == 10 && *(_QWORD *)a2 == 0x5F736F7263616D2ELL && *(_WORD *)(a2 + 8) == 28271;
    *((_BYTE *)a1 + 416) = *((_BYTE *)a1 + 416) & 0xFE | v8;
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveMacro(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  const void **v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  const void **v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  const void **v27;
  const void **v28;
  __int16 v29;
  uint64_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  void *v62;
  __int128 *v64;
  const char *v65;
  uint64_t v66;
  int Key;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _DWORD *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unsigned int v81;
  uint64_t v82;
  __int128 v83[2];
  uint64_t v84;
  const void **v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  _QWORD v91[3];
  __int128 v92;
  _BYTE v93[32];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  _QWORD v99[4];
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  __int128 v104;
  __int16 v105;
  uint64_t v106[2];
  const char *v107;
  __int16 v108;
  void **v109[2];
  __int128 v110;
  __int16 v111;
  __int128 v112;
  const char *v113;
  uint64_t v114;
  unsigned int v115;
  const void **v116;
  const void **v117;
  char *v118;
  __int128 v119;

  v119 = 0uLL;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v119))
  {
    *(_QWORD *)&v92 = "expected identifier in '.macro' directive";
    *(_WORD *)&v93[16] = 259;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v4 + 96), (llvm::Twine *)&v92, 0, 0);
    return 1;
  }
  v82 = a2;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 25)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v6 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 9)
  {
    v9 = 0;
    v6 = 0;
    while (1)
    {
      if ((const void **)v9 != v6 && *((_BYTE *)v6 - 7))
      {
        v74 = *(_QWORD *)(a1 + 136);
        LOWORD(v115) = 1283;
        *(_QWORD *)&v112 = "vararg parameter '";
        v113 = (const char *)*(v6 - 6);
        v114 = (uint64_t)*(v6 - 5);
        *(_QWORD *)&v92 = &v112;
        *(_QWORD *)v93 = "' should be the last parameter";
        *(_WORD *)&v93[16] = 770;
        v5 = llvm::MCAsmParser::Error(a1, v74, (llvm::Twine *)&v92, 0, 0);
        goto LABEL_131;
      }
      v92 = 0u;
      memset(v93, 0, 26);
      if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v92))
      {
        *(_QWORD *)&v112 = "expected identifier in '.macro' directive";
        v29 = 259;
        goto LABEL_62;
      }
      if ((const void **)v9 != v6)
      {
        v10 = v92;
        v11 = (const void **)v9;
        while (v11[1] != *((const void **)&v10 + 1)
             || *((_QWORD *)&v10 + 1) && memcmp(*v11, (const void *)v10, *((size_t *)&v10 + 1)))
        {
          v11 += 6;
          if (v11 == v6)
            goto LABEL_18;
        }
        v105 = 1283;
        v103[0] = "macro '";
        v104 = v119;
        v106[0] = (uint64_t)v103;
        v107 = "' has multiple parameters named '";
        v29 = 770;
        v108 = 770;
        v109[0] = (void **)v106;
        v110 = v10;
        v111 = 1282;
        *(_QWORD *)&v112 = v109;
        *((_QWORD *)&v112 + 1) = *((_QWORD *)&v10 + 1);
        v113 = "'";
LABEL_62:
        LOWORD(v115) = v29;
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v30 + 96), (llvm::Twine *)&v112, 0, 0);
LABEL_63:
        v5 = 1;
        goto LABEL_64;
      }
LABEL_18:
      if (**(_DWORD **)(a1 + 48) == 10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v101 = 0;
        v102 = 0;
        v12 = *(_QWORD *)(a1 + 136);
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 192))(a1, &v101))
        {
          v105 = 1283;
          v103[0] = "missing parameter qualifier for '";
          v104 = v92;
          v106[0] = (uint64_t)v103;
          v107 = "' in macro '";
          v108 = 770;
          v109[0] = (void **)v106;
          v110 = v119;
          v111 = 1282;
          *(_QWORD *)&v112 = v109;
          v113 = "'";
          LOWORD(v115) = 770;
LABEL_151:
          v5 = llvm::MCAsmParser::Error(a1, v12, (llvm::Twine *)&v112, 0, 0);
LABEL_64:
          *(_QWORD *)&v112 = v93;
          std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v112);
          goto LABEL_131;
        }
        if (v102 == 6)
        {
          if (*(_DWORD *)v101 != 1634886006 || *(_WORD *)(v101 + 4) != 26482)
          {
LABEL_149:
            v100 = 773;
            v99[0] = v101;
            v99[1] = v102;
            v99[2] = " is not a valid parameter qualifier for '";
            v103[0] = v99;
            v104 = v92;
            v105 = 1282;
            v106[0] = (uint64_t)v103;
            v107 = "' in macro '";
            v108 = 770;
            v109[0] = (void **)v106;
            v110 = v119;
            v111 = 1282;
            *(_QWORD *)&v112 = v109;
            v113 = "'";
            LOWORD(v115) = 770;
            goto LABEL_151;
          }
          v93[25] = 1;
        }
        else
        {
          if (v102 != 3)
            goto LABEL_149;
          if (*(_WORD *)v101 != 25970 || *(_BYTE *)(v101 + 2) != 113)
            goto LABEL_149;
          v93[24] = 1;
        }
      }
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 27)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v15 = *(_QWORD *)(a1 + 136);
          goto LABEL_63;
        if (v93[24])
        {
          v105 = 1283;
          v103[0] = "pointless default value for required parameter '";
          v104 = v92;
          v106[0] = (uint64_t)v103;
          v107 = "' in macro '";
          v108 = 770;
          v109[0] = (void **)v106;
          v110 = v119;
          v111 = 1282;
          *(_QWORD *)&v112 = v109;
          v113 = "'";
          LOWORD(v115) = 770;
          (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v15, &v112, 0, 0);
        }
      }
      if (v6 >= (const void **)v118)
        break;
      *(_OWORD *)v6 = v92;
      v6[3] = 0;
      v6[4] = 0;
      v6[2] = 0;
      *((_OWORD *)v6 + 1) = *(_OWORD *)v93;
      v6[4] = *(const void **)&v93[16];
      memset(v93, 0, 24);
      *((_WORD *)v6 + 20) = *(_WORD *)&v93[24];
      v6 += 6;
LABEL_55:
      v117 = v6;
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 25)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      *(_QWORD *)&v112 = v93;
      std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v112);
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 9)
        goto LABEL_6;
    }
    v16 = (uint64_t)v116;
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v116) >> 4);
    v18 = v17 + 1;
    if (v17 + 1 > 0x555555555555555)
      abort();
    if (0x5555555555555556 * ((v118 - (char *)v116) >> 4) > v18)
      v18 = 0x5555555555555556 * ((v118 - (char *)v116) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v118 - (char *)v116) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v19 = 0x555555555555555;
    else
      v19 = v18;
    if (v19 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = 3 * v19;
    v21 = (char *)operator new(48 * v19);
    v9 = (uint64_t)&v21[48 * v17];
    v22 = *(_OWORD *)v93;
    *(_OWORD *)v9 = v92;
    *(_OWORD *)(v9 + 16) = v22;
    *(_QWORD *)(v9 + 32) = *(_QWORD *)&v93[16];
    memset(v93, 0, 24);
    *(_WORD *)(v9 + 40) = *(_WORD *)&v93[24];
    v23 = (const void **)(v9 + 48);
    if (v6 == (const void **)v16)
    {
      v116 = (const void **)v9;
      v117 = (const void **)(v9 + 48);
      v118 = &v21[16 * v20];
      if (!v6)
        goto LABEL_54;
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = v9 + v24 * 8;
        v26 = &v6[v24];
        *(_OWORD *)(v25 - 48) = *(_OWORD *)&v6[v24 - 6];
        *(_QWORD *)(v25 - 24) = 0;
        *(_QWORD *)(v25 - 16) = 0;
        *(_QWORD *)(v25 - 32) = 0;
        *(_OWORD *)(v25 - 32) = *(_OWORD *)&v6[v24 - 4];
        *(_QWORD *)(v25 - 16) = v6[v24 - 2];
        *(v26 - 4) = 0;
        *(v26 - 3) = 0;
        *(v26 - 2) = 0;
        *(_WORD *)(v25 - 8) = v6[v24 - 1];
        v24 -= 6;
      }
      while (&v6[v24] != (const void **)v16);
      v6 = v116;
      v27 = v117;
      v9 += v24 * 8;
      v116 = (const void **)v9;
      v117 = v23;
      v118 = &v21[16 * v20];
      if (v27 != v6)
      {
        do
        {
          v28 = v27 - 6;
          *(_QWORD *)&v112 = v27 - 4;
          std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v112);
          v27 = v28;
        }
        while (v28 != v6);
      }
      if (!v6)
        goto LABEL_54;
    }
    operator delete(v6);
LABEL_54:
    v6 = v23;
    goto LABEL_55;
  }
LABEL_6:
  llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  *((_QWORD *)&v112 + 1) = 0;
  v113 = 0;
  v115 = 1;
  v114 = 0;
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v8 = *(unsigned int *)(v7 + 32);
  v81 = *(_DWORD *)(v7 + 32);
  v79 = *(_QWORD *)(v7 + 8);
  if (v8 > 0x40)
  {
    v31 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v80 = (void *)operator new[]();
    memcpy(v80, *(const void **)(v7 + 24), v31);
  }
  else
  {
    v80 = *(void **)(v7 + 24);
  }
  v32 = 0;
  while (1)
  {
    while (**(_DWORD **)(a1 + 48) == 1)
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
    {
      *(_QWORD *)&v92 = "no matching '.endmacro' in definition";
      *(_WORD *)&v93[16] = 259;
      goto LABEL_123;
    }
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 2)
      break;
    if (**(_DWORD **)(a1 + 48) == 8)
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    }
LABEL_121:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  }
  v33 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (*(_DWORD *)v33 == 2)
  {
    v34 = *(int **)(v33 + 8);
    v35 = *(_QWORD *)(v33 + 16);
  }
  else
  {
    v34 = *(int **)(v33 + 8);
    v37 = *(_QWORD *)(v33 + 16);
    v38 = v37 - 1;
    v39 = v37 != 0;
    if (v37)
      v34 = (int *)((char *)v34 + 1);
    if (v38 < v39)
      v38 = 1;
    if (v38 >= v37)
      v38 = v37;
    v35 = v38 - v39;
  }
  if (v35 != 5
    || ((v40 = *v34, v41 = *((unsigned __int8 *)v34 + 4), v40 == 1684956462) ? (v42 = v41 == 109) : (v42 = 0), !v42))
  {
    v43 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    if (*(_DWORD *)v43 == 2)
    {
      v44 = *(uint64_t **)(v43 + 8);
      v45 = *(_QWORD *)(v43 + 16);
    }
    else
    {
      v44 = *(uint64_t **)(v43 + 8);
      v46 = *(_QWORD *)(v43 + 16);
      v47 = v46 - 1;
      v48 = v46 != 0;
      if (v46)
        v44 = (uint64_t *)((char *)v44 + 1);
      if (v47 < v48)
        v47 = 1;
      if (v47 >= v46)
        v47 = v46;
      v45 = v47 - v48;
    }
    if (v45 != 9
      || ((v49 = *v44, v50 = *((unsigned __int8 *)v44 + 8), v49 == 0x7263616D646E652ELL)
        ? (v51 = v50 == 111)
        : (v51 = 0),
          !v51))
    {
      v52 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v52 == 2)
      {
        v53 = *(_QWORD *)(v52 + 8);
        v54 = *(_QWORD *)(v52 + 16);
      }
      else
      {
        v53 = *(_QWORD *)(v52 + 8);
        v55 = *(_QWORD *)(v52 + 16);
        v56 = v55 - 1;
        v57 = v55 != 0;
        if (v55)
          ++v53;
        if (v56 < v57)
          v56 = 1;
        if (v56 >= v55)
          v56 = v55;
        v54 = v56 - v57;
      }
      if (v54 == 6)
      {
        v58 = bswap32(*(_DWORD *)v53);
        v59 = 778920291;
        if (v58 == 778920291 && (v58 = bswap32(*(unsigned __int16 *)(v53 + 4)) >> 16, v59 = 29295, v58 == 29295))
        {
          v60 = 0;
        }
        else if (v58 < v59)
        {
          v60 = -1;
        }
        else
        {
          v60 = 1;
        }
        if (!v60)
          ++v32;
      }
      goto LABEL_121;
    }
  }
  if (v32)
  {
    --v32;
    goto LABEL_121;
  }
  v64 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v65 = (const char *)*((_QWORD *)v64 + 2);
  v112 = *v64;
  v113 = v65;
  llvm::APInt::operator=((llvm::APInt *)&v114, (const llvm::APInt *)((char *)v64 + 24));
  llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 9)
  {
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    Key = llvm::StringMapImpl::FindKey((uint64_t *)(v66 + 2064), (uint64_t *)v119, *((unint64_t *)&v119 + 1));
    if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v66 + 2072))
    {
      v68 = *((_QWORD *)&v112 + 1) - v79;
      v69 = (uint64_t)v116;
      v70 = v118;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v92 = v119;
      *(_QWORD *)v93 = v79;
      *(_QWORD *)&v93[8] = v68;
      memset(v91, 0, sizeof(v91));
      v98 = 0;
      v109[0] = (void **)v91;
      std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](v109);
      v71 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v83[0] = v92;
      v83[1] = *(_OWORD *)v93;
      v84 = v69;
      v85 = v6;
      *(_QWORD *)&v93[16] = 0;
      *(_QWORD *)&v93[24] = 0;
      v86 = v70;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v94 = 0;
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v90 = 0;
      llvm::MCContext::defineMacro(v71, (uint64_t *)v119, *((unint64_t *)&v119 + 1), v83);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)v83);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)&v92);
      v5 = 0;
      goto LABEL_124;
    }
    v111 = 1283;
    v109[0] = (void **)"macro '";
    v110 = v119;
    v106[0] = (uint64_t)"' is already defined";
    v108 = 259;
    llvm::operator+((uint64_t *)v109, v106, (uint64_t)&v92);
LABEL_123:
    v5 = llvm::MCAsmParser::Error(a1, v82, (llvm::Twine *)&v92, 0, 0);
LABEL_124:
    v62 = v80;
    v61 = v81;
    goto LABEL_125;
  }
  if ((_DWORD)v112 == 2)
  {
    v72 = *((_QWORD *)&v112 + 1);
    v73 = v113;
  }
  else
  {
    v72 = *((_QWORD *)&v112 + 1);
    v75 = (unint64_t)v113;
    v76 = (unint64_t)(v113 - 1);
    v77 = v113 != 0;
    if (v113)
      v72 = *((_QWORD *)&v112 + 1) + 1;
    if (v76 < v77)
      v76 = 1;
    if (v76 < (unint64_t)v113)
      v75 = v76;
    v73 = (const char *)(v75 - v77);
  }
  v62 = v80;
  v61 = v81;
  v111 = 1283;
  v109[0] = (void **)"unexpected token in '";
  *(_QWORD *)&v110 = v72;
  *((_QWORD *)&v110 + 1) = v73;
  *(_QWORD *)&v92 = v109;
  *(_QWORD *)v93 = "' directive";
  *(_WORD *)&v93[16] = 770;
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(_QWORD *)(v78 + 96), (llvm::Twine *)&v92, 0, 0);
  v5 = 1;
LABEL_125:
  if (v61 >= 0x41 && v62)
    MEMORY[0x24BD1B380](v62, 0x1000C8000313F17);
  if (v115 >= 0x41 && v114)
    MEMORY[0x24BD1B380](v114, 0x1000C8000313F17);
LABEL_131:
  *(_QWORD *)&v92 = &v116;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100]((void ***)&v92);
  return v5;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveAltmacro(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  BOOL v8;

  result = llvm::MCAsmParser::parseEOL(a1);
  if (!result)
  {
    v8 = a3 == 9 && *(_QWORD *)a2 == 0x7263616D746C612ELL && *(_BYTE *)(a2 + 8) == 111;
    *((_BYTE *)a1 + 799) = v8;
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveExitMacro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;

  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  v6 = *(_QWORD *)(a1 + 352);
  if (*(_QWORD *)(a1 + 344) == v6)
  {
    v16 = 1283;
    v15[0] = "unexpected '";
    v15[2] = a2;
    v15[3] = a3;
    v17[0] = v15;
    v17[2] = "' in file, no current macro definition";
    v18 = 770;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v14 + 96), (llvm::Twine *)v17, 0, 0);
    return 1;
  }
  v8 = *(_QWORD *)(a1 + 296);
  v7 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 24) != (v7 - v8) >> 3)
  {
    v9 = (int *)(v7 - 8);
    v10 = (uint64_t)v9 - v8;
    do
    {
      v11 = *v9;
      *(_WORD *)(a1 + 288) = *((_WORD *)v9 + 2);
      *(_DWORD *)(a1 + 284) = v11;
      *(_QWORD *)(a1 + 304) = v9;
      v12 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 24) == v10 >> 3;
      v10 -= 8;
      v9 -= 2;
    }
    while (!v12);
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveEndMacro(_anonymous_namespace_::AsmParser *a1, uint64_t a2, uint64_t a3)
{
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;

  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 9)
  {
    if (*((_QWORD *)a1 + 43) != *((_QWORD *)a1 + 44))
    {
      return 0;
    }
    v12 = 1283;
    v9 = "unexpected '";
    v10 = a2;
    v11 = a3;
    v7 = "' in file, no current macro definition";
  }
  else
  {
    v12 = 1283;
    v9 = "unexpected token in '";
    v10 = a2;
    v11 = a3;
    v7 = "' directive";
  }
  v13[0] = &v9;
  v13[2] = v7;
  v14 = 770;
  v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v8 + 96), (llvm::Twine *)v13, 0, 0);
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectivePurgeMacro(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v7;
  int Key;
  uint64_t v9;
  int v10;
  unint64_t *v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t *v16;
  unint64_t v17;

  v16 = 0;
  v17 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t **))(*(_QWORD *)a1 + 192))(a1, &v16);
  v14[0] = "expected identifier in '.purgem' directive";
  v15 = 259;
  if ((v5 & 1) != 0)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v4, (llvm::Twine *)v14, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v7 + 2064), v16, v17);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v7 + 2072))
  {
    v13 = 1283;
    v12[0] = "macro '";
    v12[2] = v16;
    v12[3] = v17;
    v14[0] = v12;
    v14[2] = "' is not defined";
    v15 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (llvm::Twine *)v14, 0, 0);
  }
  else
  {
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
    v10 = llvm::StringMapImpl::FindKey((uint64_t *)(v9 + 2064), v16, v17);
    if (v10 != -1 && v10 != (unint64_t)*(unsigned int *)(v9 + 2072))
    {
      v11 = *(unint64_t **)(*(_QWORD *)(v9 + 2064) + 8 * v10);
      llvm::StringMapImpl::RemoveKey(v9 + 2064, (uint64_t *)((char *)v11 + *(unsigned int *)(v9 + 2084)), *v11);
      llvm::StringMapEntry<llvm::MCAsmMacro>::Destroy<llvm::MallocAllocator>((uint64_t)v11);
    }
    return 0;
  }
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveEnd(_DWORD **a1)
{
  _BOOL8 v2;

  v2 = llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1);
  if (!v2 && *a1[6])
  {
    do
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
    while (*a1[6]);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveError(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;

  v5 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(a1 + 296) != v5 && *(_BYTE *)(v5 - 3))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  if ((a3 & 1) != 0)
  {
    v7 = **(_DWORD **)(a1 + 48);
    if (v7 == 3)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
      v12 = v11 != 0;
      if (v11)
        v8 = (const char *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 1);
      else
        v8 = *(const char **)(*(_QWORD *)(v10 + 8) + 8);
      if (v11 - 1 < v12)
        v13 = 1;
      else
        v13 = v11 - 1;
      if (v13 >= v11)
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
      v9 = v13 - v12;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    }
    else
    {
      if (v7 != 9)
      {
        v15[0] = ".error argument must be a string";
        v16 = 259;
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v14 + 96), (llvm::Twine *)v15, 0, 0);
        return 1;
      }
      v8 = ".error directive invoked in source file";
      v9 = 39;
    }
    v16 = 261;
    v15[0] = v8;
    v15[1] = v9;
  }
  else
  {
    v15[0] = ".err encountered";
    v16 = 259;
  }
  return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)v15, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveWarning(llvm::MCAsmParser *a1, uint64_t a2)
{
  _DWORD *v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;

  v4 = (_DWORD *)*((_QWORD *)a1 + 38);
  if (*((_DWORD **)a1 + 37) != v4 && *((_BYTE *)v4 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  if (llvm::MCAsmParser::parseOptionalToken(a1, 9))
  {
    v6 = ".warning directive invoked in source file";
    v7 = 41;
LABEL_18:
    v15 = 261;
    v14[0] = v6;
    v14[1] = v7;
    return (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, a2, v14, 0, 0);
  }
  if (**((_DWORD **)a1 + 6) == 3)
  {
    v8 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
    v10 = v9 != 0;
    if (v9)
      v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 1);
    else
      v6 = *(const char **)(*(_QWORD *)(v8 + 8) + 8);
    if (v9 - 1 < v10)
      v11 = 1;
    else
      v11 = v9 - 1;
    if (v11 >= v9)
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 16);
    else
      v12 = v11;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    if (!llvm::MCAsmParser::parseEOL(a1))
    {
      v7 = v12 - v10;
      goto LABEL_18;
    }
  }
  else
  {
    v14[0] = ".warning argument must be a string";
    v15 = 259;
    v13 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v13 + 96), (llvm::Twine *)v14, 0, 0);
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveReloc(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *__p;
  char v31;
  __int16 v32;

  v27 = 0;
  v28 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 8);
  v29 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(_QWORD *)a1 + 232))(a1, &v28, &v29) & 1) != 0)return 1;
  v29 = "expected comma";
  v32 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v29))
    return 1;
  v5 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  v29 = "expected relocation name";
  v32 = 259;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v5 != 2)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8), (llvm::Twine *)&v29, 0, 0);
    return 1;
  }
  v7 = (int *)*((_QWORD *)a1 + 6);
  v8 = *v7;
  v10 = *((_QWORD *)v7 + 1);
  v9 = *((_QWORD *)v7 + 2);
  v11 = v9 - 1;
  v12 = v9 != 0;
  if (v9)
    v13 = v10 + 1;
  else
    v13 = v10;
  if (v11 < v12)
    v11 = 1;
  if (v11 >= v9)
    v11 = v9;
  v14 = v11 - v12;
  if (v8 == 2)
    v15 = v10;
  else
    v15 = v13;
  if (v8 == 2)
    v16 = v9;
  else
    v16 = v14;
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if (**((_DWORD **)a1 + 6) == 25)
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    v17 = *((_QWORD *)a1 + 17);
    v29 = 0;
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(_QWORD *)a1 + 232))(a1, &v27, &v29) & 1) != 0)return 1;
    memset(v24, 0, sizeof(v24));
    v25 = 0;
    llvm::MCExpr::evaluateAsRelocatableImpl(v27);
    if (!v18)
    {
      v29 = "expression must be relocatable";
      v32 = 259;
      return llvm::MCAsmParser::Error((uint64_t)a1, v17, (llvm::Twine *)&v29, 0, 0);
    }
  }
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  v19 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 288);
  v20 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 1168))(&v29, v20, v28, v15, v16, v27, a2, v19);
  if (!(_BYTE)v32)
    return 0;
  if ((_BYTE)v29)
    v21 = v10;
  else
    v21 = v4;
  v26 = 260;
  v24[0] = &__p;
  v22 = llvm::MCAsmParser::Error((uint64_t)a1, v21, (llvm::Twine *)v24, 0, 0);
  if ((_BYTE)v32 && v31 < 0)
    operator delete(__p);
  return v22;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveDCB(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  v8 = *((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v19 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v19) & 1) != 0)
    return 1;
  if (v19 < 0)
  {
    v17[0] = "'";
    v17[2] = a2;
    v17[3] = a3;
    v18 = 1283;
    v20[0] = v17;
    v20[2] = "' directive with negative repeat count has no effect";
    v21 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v8, v20, 0, 0);
    return 0;
  }
  v20[0] = "expected comma";
  v21 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v20))
    return 1;
  v17[0] = 0;
  v9 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
  v20[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 232))(a1, v17, v20) & 1) != 0)
    return 1;
  if (*(_BYTE *)v17[0] != 1)
  {
    for (i = v19; i; --i)
    {
      v16 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v16 + 504))(v16, v17[0], a4, v9);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v11 = *(_QWORD *)(v17[0] + 16);
  if (0xFFFFFFFFFFFFFFFFLL >> (-8 * a4) >= v11
    || (v12 = -1 << (8 * a4 - 1), v12 <= v11) && v11 <= ~v12)
  {
    for (j = v19; j; --j)
    {
      v14 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v14 + 512))(v14, v11, a4);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v20[0] = "literal value out of range for directive";
  v21 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v9, (llvm::Twine *)v20, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveRealDCB(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v12;
  uint64_t *LimitedValue;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t **v17;
  unsigned int v18;
  const char *v19;
  __int16 v20;

  v8 = (_DWORD *)*((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v16 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v16) & 1) != 0)
    return 1;
  if (v16 < 0)
  {
    v14[0] = "'";
    v14[2] = a2;
    v14[3] = a3;
    v15 = 1283;
    v17 = (uint64_t **)v14;
    v19 = "' directive with negative repeat count has no effect";
    v20 = 770;
    (*(void (**)(llvm::MCAsmParser *, _DWORD *, uint64_t ***, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v8, &v17, 0, 0);
    return 0;
  }
  else
  {
    v17 = (uint64_t **)"expected comma";
    v20 = 259;
    v9 = 1;
    if (!llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v17))
    {
      v18 = 1;
      v17 = 0;
        && !llvm::MCAsmParser::parseEOL(a1))
      {
        for (i = v16; i; --i)
        {
          v12 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
          LimitedValue = llvm::APInt::getLimitedValue(&v17, 0xFFFFFFFFFFFFFFFFLL);
          (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v12 + 512))(v12, LimitedValue, v18 >> 3);
        }
        v9 = 0;
      }
      if (v18 >= 0x41 && v17)
        MEMORY[0x24BD1B380](v17, 0x1000C8000313F17);
    }
  }
  return v9;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveDS(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;

  v8 = *((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v17 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v17) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v10 = v17;
  if (v17 < 0)
  {
    v13[0] = "'";
    v13[2] = a2;
    v13[3] = a3;
    v14 = 1283;
    v15[0] = v13;
    v15[2] = "' directive with negative repeat count has no effect";
    v16 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v8, v15, 0, 0);
  }
  else if (v17)
  {
    do
    {
      v11 = (_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11[1] + 184, 24, 3);
      *(_BYTE *)v12 = 1;
      *(_DWORD *)(v12 + 1) = *(unsigned __int8 *)(v12 + 4) << 24;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = a4;
      (*(void (**)(_QWORD *, unint64_t, _QWORD, _QWORD))(*v11 + 608))(v11, v12, 0, 0);
      --v10;
    }
    while (v10);
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectivePrint(llvm::MCAsmParser *a1, uint64_t a2)
{
  int *v4;
  int v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  uint64_t v11;
  llvm::raw_ostream *v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  const char *v20;
  __int16 v21;

  v4 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  v5 = *v4;
  v7 = (_BYTE *)*((_QWORD *)v4 + 1);
  v6 = *((_QWORD *)v4 + 2);
  v8 = v4[8];
  if (v8 > 0x40)
  {
    v9 = (void *)operator new[]();
    memcpy(v9, *((const void **)v4 + 3), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v9 = (void *)*((_QWORD *)v4 + 3);
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if (v5 == 3 && *v7 == 34)
  {
    v10 = llvm::MCAsmParser::parseEOL(a1);
    if (v10)
    {
      v11 = 1;
    }
    else
    {
      v14 = (llvm::raw_ostream *)llvm::outs((llvm *)v10);
      v15 = v6 - 1;
      v16 = v6 != 0;
      if (v6)
        v17 = v7 + 1;
      else
        v17 = v7;
      if (v15 < v16)
        v15 = 1;
      if (v15 >= v6)
        v15 = v6;
      v18 = llvm::raw_ostream::operator<<(v14, v17, v15 - v16);
      v19 = (_BYTE *)*((_QWORD *)v18 + 4);
      if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
      {
        llvm::raw_ostream::write(v18, 10);
        v11 = 0;
      }
      else
      {
        v11 = 0;
        *((_QWORD *)v18 + 4) = v19 + 1;
        *v19 = 10;
      }
    }
  }
  else
  {
    v20 = "expected double quoted string after .print";
    v21 = 259;
    v11 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (llvm::Twine *)&v20, 0, 0);
  }
  if (v8 >= 0x41 && v9 != 0)
    MEMORY[0x24BD1B380](v9, 0x1000C8000313F17);
  return v11;
}

BOOL `anonymous namespace'::AsmParser::parseDirectiveAddrsig(_anonymous_namespace_::AsmParser *this)
{
  _BOOL8 v2;
  uint64_t v3;

  v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 1176))(v3);
  }
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveAddrsigSym(_anonymous_namespace_::AsmParser *this)
{
  char v2;
  uint64_t v3;
  llvm::MCContext *v5;
  unint64_t Symbol;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v10);
  v8[0] = "expected identifier";
  v9 = 259;
  v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this);
  if ((v2 & 1) != 0)
  {
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this))
    return 1;
  v5 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 48))(this);
  v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  Symbol = llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v8);
  v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 1184))(v7, Symbol);
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectivePseudoProbe(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::MCContext *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[16];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v23 = "unexpected token in '.pseudoprobe' directive";
    v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v22, (const llvm::Twine *)&v23))
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v23 = "unexpected token in '.pseudoprobe' directive";
    v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v21, (const llvm::Twine *)&v23))
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v23 = "unexpected token in '.pseudoprobe' directive";
    v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v20, (const llvm::Twine *)&v23))
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 4)
  {
    v23 = "unexpected token in '.pseudoprobe' directive";
    v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v19, (const llvm::Twine *)&v23))
      return 1;
  }
  v23 = v25;
  v24 = 0x800000000;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 45)
  {
    while (1)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      v14 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 4)
      {
        v17[0] = "unexpected token in '.pseudoprobe' directive";
        v18 = 259;
        if (llvm::MCAsmParser::parseIntToken(this, &v14, (const llvm::Twine *)v17))
          break;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 10)
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
      v16 = 0;
      v3 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) == 4)
      {
        v17[0] = "unexpected token in '.pseudoprobe' directive";
        v18 = 259;
        if (llvm::MCAsmParser::parseIntToken(this, &v16, (const llvm::Twine *)v17))
          break;
        v3 = v16;
      }
      v4 = v14;
      v5 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 16);
        v5 = v24;
      }
      v6 = (uint64_t *)((char *)v23 + 16 * v5);
      *v6 = v4;
      v6[1] = v3;
      LODWORD(v24) = v24 + 1;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 40))(this)
                       + 8) != 45)
        goto LABEL_21;
    }
LABEL_24:
    v2 = 1;
    goto LABEL_26;
  }
LABEL_21:
  v14 = 0;
  v15 = 0;
  v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(_QWORD *)this + 192))(this, &v14);
  v8 = *(_QWORD *)this;
  if (v7)
  {
    v9 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(v8 + 40))(this) + 96);
    v17[0] = "unexpected token in '.pseudoprobe' directive";
    v18 = 259;
    v2 = llvm::MCAsmParser::Error((uint64_t)this, v9, (llvm::Twine *)v17, 0, 0);
    goto LABEL_26;
  }
  v10 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(v8 + 48))(this);
  v18 = 261;
  v17[0] = v14;
  v17[1] = v15;
  v11 = llvm::MCContext::lookupSymbol(v10, (const llvm::Twine *)v17);
  if (llvm::MCAsmParser::parseEOL(this))
    goto LABEL_24;
  v12 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v12 + 1200))(v12, v22, v21, v20, v19, &v23, v11);
  v2 = 0;
LABEL_26:
  if (v23 != v25)
    free(v23);
  return v2;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveLTODiscard(_anonymous_namespace_::AsmParser *this)
{
  _anonymous_namespace_::AsmParser *v3;

  v3 = this;
  *((_DWORD *)this + 182) = 0;
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 768, *((_QWORD **)this + 97));
  *((_QWORD *)this + 96) = (char *)this + 776;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = 0;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveMSEmit(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;

  v16 = 0;
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
  v14[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a1 + 232))(a1, &v16, v14) & 1) != 0)
    return 1;
  if (*(_BYTE *)v16 != 1)
  {
    v13 = "unexpected expression in _emit";
LABEL_9:
    v14[0] = v13;
    v15 = 259;
    return llvm::MCAsmParser::Error(a1, v8, (llvm::Twine *)v14, 0, 0);
  }
  if ((unint64_t)(*(_QWORD *)(v16 + 16) + 128) >= 0x180)
  {
    v13 = "literal value out of range for directive";
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a3 + 88);
  v11 = *(unsigned int *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>(*(_QWORD *)(a3 + 88), 2, a2, a4);
    return 0;
  }
  else
  {
    result = 0;
    v12 = *(_QWORD *)v10 + (v11 << 7);
    *(_DWORD *)v12 = 2;
    *(_QWORD *)(v12 + 8) = a2;
    *(_DWORD *)(v12 + 16) = a4;
    *(_BYTE *)(v12 + 20) = 0;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_BYTE *)(v12 + 48) = 0;
    *(_DWORD *)(v12 + 112) = 1;
    *(_BYTE *)(v12 + 120) = 0;
    ++*(_DWORD *)(v10 + 8);
  }
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseDirectiveMSAlign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD v16[4];
  __int16 v17;
  uint64_t v18;

  v18 = 0;
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
  v16[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a1 + 232))(a1, &v18, v16) & 1) != 0)
    return 1;
  if (*(_BYTE *)v18 != 1)
  {
    v14 = "unexpected expression in align";
LABEL_9:
    v16[0] = v14;
    v17 = 259;
    return llvm::MCAsmParser::Error(a1, v6, (llvm::Twine *)v16, 0, 0);
  }
  v8 = *(_QWORD *)(v18 + 16);
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
  {
    v14 = "literal value not a power of two greater then zero";
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a3 + 88);
  v11 = 63 - __clz(v8);
  v12 = *(unsigned int *)(v10 + 8);
  if (v12 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int,unsigned int>(v10, 0, a2, 5, v11);
    return 0;
  }
  else
  {
    v7 = 0;
    v13 = *(_QWORD *)v10 + (v12 << 7);
    *(_DWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = a2;
    *(_DWORD *)(v13 + 16) = 5;
    *(_BYTE *)(v13 + 20) = 0;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_QWORD *)(v13 + 104) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 24) = v11;
    *(_BYTE *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 112) = 1;
    *(_BYTE *)(v13 + 120) = 0;
    ++*(_DWORD *)(v10 + 8);
  }
  return v7;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,int>(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int>(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1 + (v4 << 7);
  *(_DWORD *)v5 = a2;
  *(_QWORD *)(v5 + 8) = a3;
  *(_DWORD *)(v5 + 16) = a4;
  *(_BYTE *)(v5 + 20) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 112) = 1;
  *(_BYTE *)(v5 + 120) = 0;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t `anonymous namespace'::AsmParser::parseAndMatchAndEmitTargetInstruction(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, __int128 *a5, char *a6)
{
  void **v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  llvm *v14;
  _OWORD *v15;
  uint64_t v16;
  int v17;
  llvm::formatv_object_base *v18;
  llvm::formatv_object_base *v19;
  uint64_t *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  int v32;
  unint64_t LineAndColumn;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  void *__p[2];
  unsigned __int8 v47;
  unint64_t v48[2];
  llvm::formatv_object_base *v49[4];
  __int16 v50;
  void (**v51)(llvm::raw_ostream *__hidden);
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  int v58;
  void **v59;
  void *v60;
  __int128 v61;
  _QWORD v62[33];

  v62[32] = *MEMORY[0x24BDAC8D0];
  v10 = __p;
  std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(__p, a3, (uint64_t (*)(_QWORD))llvm::toLower, &a3[a4], (uint64_t)llvm::toLower, a4);
  v45 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 8);
  if ((v47 & 0x80u) == 0)
  {
    v12 = v47;
  }
  else
  {
    v10 = (void **)__p[0];
    v12 = (unint64_t)__p[1];
  }
  v41 = *a5;
  v42 = *((_QWORD *)a5 + 2);
  v44 = *((_DWORD *)a5 + 8);
  if (v44 > 0x40)
  {
    v43 = (void *)operator new[]();
    memcpy(v43, *((const void **)a5 + 3), (((unint64_t)v44 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v43 = (void *)*((_QWORD *)a5 + 3);
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, unint64_t, __int128 *, uint64_t))(*(_QWORD *)v11 + 56))(v11, &v45, v10, v12, &v41, a2);
  if (v44 >= 0x41 && v43)
    MEMORY[0x24BD1B380](v43, 0x1000C8000313F17);
  *(_BYTE *)(a2 + 84) = v13;
  if (*(_BYTE *)(a1 + 33))
  {
    v59 = &v60;
    v60 = v62;
    v61 = xmmword_24AA2ACF0;
    v52 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 1;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v51 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    v14 = (llvm *)llvm::raw_ostream::SetUnbuffered(&v51);
    v15 = v55;
    if ((unint64_t)(v54 - v55) > 0x14)
    {
      *(_OWORD *)v55 = *(_OWORD *)"parsed instruction: [";
      *(_QWORD *)((char *)v15 + 13) = *(_QWORD *)"ction: [";
      v55 += 21;
    }
    else
    {
      v14 = llvm::raw_ostream::write((llvm::raw_ostream *)&v51, "parsed instruction: [", 0x15uLL);
    }
    if (*(_DWORD *)(a2 + 8))
    {
      v16 = 0;
      v17 = 0;
      do
      {
        if (v17)
        {
          if ((unint64_t)(v54 - v55) > 1)
          {
            *(_WORD *)v55 = 8236;
            v55 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v51, ", ", 2uLL);
          }
        }
        v14 = (llvm *)(*(uint64_t (**)(_QWORD, void (***)(llvm::raw_ostream *__hidden)))(**(_QWORD **)(*(_QWORD *)a2 + 8 * v16) + 120))(*(_QWORD *)(*(_QWORD *)a2 + 8 * v16), &v51);
        v16 = (v17 + 1);
        v17 = v16;
      }
      while ((_DWORD)v16 != *(_DWORD *)(a2 + 8));
    }
    if (v54 == v55)
      v14 = llvm::raw_ostream::write((llvm::raw_ostream *)&v51, "]", 1uLL);
    else
      *v55++ = 93;
    v19 = (llvm::formatv_object_base *)*v59;
    v18 = (llvm::formatv_object_base *)v59[1];
    v50 = 261;
    v49[0] = v19;
    v49[1] = v18;
    v48[0] = 0;
    v48[1] = 0;
    v20 = *(uint64_t **)(a1 + 240);
    v21 = (llvm::raw_ostream *)llvm::errs(v14);
    llvm::SourceMgr::PrintMessage(v20, v21, a6, 3, v49, v48, 1, v22, 0, 0, 1u);
    v51 = off_251C13948;
    if (v58 == 1 && v53)
      MEMORY[0x24BD1B380](v53, 0x1000C8077774924);
    if (v60 != v62)
      free(v60);
  }
  if (*(_DWORD *)(a1 + 24))
    v23 = 1;
  else
    v23 = v13;
  if ((v23 & 1) != 0)
  {
    v24 = 1;
  }
  else
  {
    {
      v25 = (uint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1608);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v27 = *(unsigned int *)(v26 + 152);
      v28 = (_DWORD)v27 ? *(void **)(*(_QWORD *)(v26 + 144) + 32 * v27 - 32) : 0;
      v60 = v28;
      v51 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v25, &v60, &v51))
      {
        v29 = *(uint64_t **)(a1 + 344);
        if (v29 == *(uint64_t **)(a1 + 352))
        {
          v32 = *(_DWORD *)(a1 + 280);
          v31 = a6;
        }
        else
        {
          v30 = *v29;
          v31 = *(char **)v30;
          v32 = *(_DWORD *)(v30 + 8);
        }
        LineAndColumn = llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), v31, v32);
        if (*(_QWORD *)(a1 + 432))
        {
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
          v35 = *(_QWORD *)(a1 + 424);
          v36 = *(_QWORD *)(a1 + 432);
          LOBYTE(v51) = 0;
          LOBYTE(v53) = 0;
          LOBYTE(v60) = 0;
          BYTE8(v61) = 0;
          (*(void (**)(llvm::formatv_object_base **__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, void (***)(llvm::raw_ostream *__hidden), void **, _DWORD))(*(_QWORD *)v34 + 680))(v49, v34, 0, 0, 0, v35, v36, &v51, &v60, 0);
          v37 = (int)v49[0];
          *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1604) = v37;
          LineAndColumn = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), *(char **)(a1 + 448), *(_DWORD *)(a1 + 456))+ *(_DWORD *)(a1 + 440)+ LineAndColumn;
        }
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 712))(v38, *(unsigned int *)(v39 + 1604), LineAndColumn, 0, 1, 0, 0);
      }
    }
    v60 = 0;
    v24 = (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                               + 72))(*(_QWORD *)(a1 + 8), a6, a2 + 80, a2, *(_QWORD *)(a1 + 224), &v60, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 112));
  }
  if ((char)v47 < 0)
    operator delete(__p[0]);
  return v24;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  char v30;

  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v24 = 0;
  v29 = 1;
  v30 = 0;
  v21 = 0;
  v22 = a5;
  v23 = a6;
  v7 = (_OWORD *)llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v17);
  v8 = (_OWORD *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v10 = v7[2];
  v9 = v7[3];
  v11 = v7[1];
  *v8 = *v7;
  v8[1] = v11;
  v8[2] = v10;
  v8[3] = v9;
  v12 = v7[7];
  v13 = v7[4];
  v14 = v7[5];
  v8[6] = v7[6];
  v8[7] = v12;
  v8[4] = v13;
  v8[5] = v14;
  v15 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v15;
  return *(_QWORD *)a1 + (v15 << 7) - 128;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + (v3 << 7);
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 128);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 128);
    }
  }
  return v2;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::pop_back(uint64_t result)
{
  unsigned int v1;

  v1 = *(_DWORD *)(result + 8) - 1;
  *(_DWORD *)(result + 8) = v1;
  if (*(_DWORD *)(*(_QWORD *)result + 40 * v1 + 32) >= 0x41u)
  {
    result = *(_QWORD *)(*(_QWORD *)result + 40 * v1 + 24);
    if (result)
      JUMPOUT(0x24BD1B380);
  }
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = *v4;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
    *(_OWORD *)a3 = v6;
    llvm::APInt::operator=(a3 + 24, (uint64_t)v4 + 24);
    a3 += 40;
    v4 = (__int128 *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v5;
}

double llvm::MCContext::setMCLineTableRootFile(uint64_t a1, unsigned int a2, void *a3, size_t a4, void *a5, size_t a6, uint64_t a7, __n128 *a8)
{
  uint64_t **v14;
  double result;
  __n128 v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v19 = &v18;
  v14 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 1560), &v18, (uint64_t)&std::piecewise_construct, &v19);
  v20 = *(_OWORD *)a7;
  v21 = *(_BYTE *)(a7 + 16);
  v16 = *a8;
  v17 = a8[1].n128_u64[0];
  *(_QWORD *)&result = llvm::MCDwarfLineTable::setRootFile((uint64_t)(v14 + 5), a3, a4, a5, a6, &v20, &v16).n128_u64[0];
  return result;
}

__n128 llvm::MCDwarfLineTable::setRootFile(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, __int128 *a6, __n128 *a7)
{
  __int128 *p_dst;
  size_t v15;
  size_t v16;
  void **v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  __int128 v22;
  unsigned __int8 v23;
  __n128 result;
  char v25;
  __int128 __dst;
  unint64_t v27;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_22;
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v27 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v27) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v17 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = __dst;
  *(_QWORD *)(a1 + 368) = v27;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_22:
    abort();
  if (a5 >= 0x17)
  {
    v19 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v19 = a5 | 7;
    v20 = v19 + 1;
    v18 = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = a5;
    v27 = v20 | 0x8000000000000000;
    *(_QWORD *)&__dst = v18;
    goto LABEL_18;
  }
  HIBYTE(v27) = a5;
  v18 = &__dst;
  if (a5)
LABEL_18:
    memmove(v18, a4, a5);
  *((_BYTE *)v18 + a5) = 0;
  v21 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = __dst;
  *(_QWORD *)(a1 + 392) = v27;
  *(_DWORD *)(a1 + 400) = 0;
  v22 = *a6;
  *(_BYTE *)(a1 + 420) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(a1 + 404) = v22;
  v23 = a7[1].n128_u8[0];
  result = *a7;
  *(__n128 *)(a1 + 424) = *a7;
  *(_BYTE *)(a1 + 440) = v23;
  v25 = *((_BYTE *)a6 + 16);
  *(_BYTE *)(a1 + 449) &= v25;
  *(_BYTE *)(a1 + 450) |= v25;
  *(_BYTE *)(a1 + 448) = a7[1].n128_u8[0];
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x220uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 248) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_OWORD *)(v12 + 504) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 344) = 0u;
    *(_OWORD *)(v12 + 296) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_OWORD *)(v12 + 280) = 0u;
    *(_OWORD *)(v12 + 264) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *((_QWORD *)v12 + 6) = v12 + 64;
    *((_DWORD *)v12 + 15) = 3;
    *((_QWORD *)v12 + 17) = v12 + 152;
    *((_DWORD *)v12 + 37) = 3;
    *((_QWORD *)v12 + 47) = 0;
    *((_QWORD *)v12 + 46) = 0;
    *((_QWORD *)v12 + 48) = 0x1000000000;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_QWORD *)(v12 + 437) = 0;
    v12[489] = 1;
    *((_QWORD *)v12 + 63) = 0;
    *((_QWORD *)v12 + 62) = 0;
    *((_DWORD *)v12 + 128) = 0;
    *((_QWORD *)v12 + 65) = 0;
    *((_QWORD *)v12 + 67) = 0;
    *((_QWORD *)v12 + 66) = 0;
    v15 = 1;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>>>>::reset[abi:nn180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<unsigned int const,llvm::MCDwarfLineTable>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

char **std::__destroy_at[abi:nn180100]<std::pair<unsigned int const,llvm::MCDwarfLineTable>,0>(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 488);
  std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__destroy_vector::operator()[abi:nn180100](&v3);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 464), 8);
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(a1 + 336);
  llvm::SmallVector<llvm::MCDwarfFile,3u>::~SmallVector((char **)(a1 + 104));
  return llvm::SmallVector<std::string,2u>::~SmallVector((char **)(a1 + 16));
}

void std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

char **llvm::SmallVector<llvm::MCDwarfFile,3u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    do
    {
      if (v2[v4 - 49] < 0)
        operator delete(*(void **)&v2[v4 - 72]);
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t `anonymous namespace'::AsmParser::parseMacroArguments(uint64_t a1, uint64_t *a2, char **a3)
{
  char **v3;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  int v13;
  _BYTE *v14;
  int v15;
  _BYTE *v16;
  unsigned int v17;
  BOOL v18;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  char **v23;
  _BYTE *v24;
  const char *v25;
  size_t v26;
  uint64_t v27;
  _BOOL8 v28;
  unint64_t v29;
  char **v30;
  const void *v31;
  _QWORD *v32;
  char *v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  char v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  char v62;
  _QWORD v63[2];
  const void *v64;
  size_t v65;
  __int16 v66;
  _QWORD v67[2];
  const char *v68;
  __int16 v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  _BYTE *v74;
  __int128 v75;
  const char *v76;
  uint64_t v77;
  unsigned int v78;
  __int128 v79;
  _BYTE v80[26];
  _QWORD *v81;
  uint64_t v82;
  _QWORD v83[7];

  v3 = a3;
  v83[4] = *MEMORY[0x24BDAC8D0];
  if (a2)
    v6 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 4);
  else
    v6 = 0;
  v81 = v83;
  v82 = 0x400000000;
  v7 = v6;
  std::vector<std::vector<llvm::AsmToken>>::resize(a3, v6);
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v81, v6);
  v61 = a2;
  if ((_DWORD)v6)
    v8 = *(_BYTE *)(a2[5] - 7) != 0;
  else
    v8 = 0;
  v62 = 0;
  v9 = 0;
  v10 = v6 - 1;
  v11 = 0uLL;
  v59 = v6 - 1;
  while (1)
  {
    v60 = *(_QWORD *)(a1 + 136);
    *(_OWORD *)&v80[10] = v11;
    v79 = v11;
    *(_OWORD *)v80 = v11;
    if (**(_DWORD **)(a1 + 48) != 2)
      goto LABEL_100;
    *((_QWORD *)&v75 + 1) = 0;
    v76 = 0;
    v78 = 1;
    v77 = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 32))(a1 + 40, &v75, 1, 1);
    v12 = v75;
    if (v78 >= 0x41 && v77)
      MEMORY[0x24BD1B380](v77, 0x1000C8000313F17);
    if (v12 == 27)
    {
      if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v79))
      {
        v38 = "invalid argument identifier for formal argument";
        goto LABEL_91;
      }
      if (**(_DWORD **)(a1 + 48) != 27)
      {
        *(_QWORD *)&v75 = "expected '=' after formal parameter identifier";
        LOWORD(v78) = 259;
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v58 + 96), (llvm::Twine *)&v75, 0, 0);
        v37 = 1;
        goto LABEL_93;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v13 = v9 == v10 && v8;
    }
    else
    {
LABEL_100:
      v13 = v9 == v10 && v8;
      if ((v62 & 1) == 0)
      {
        v62 = 0;
        goto LABEL_25;
      }
    }
    if (!*((_QWORD *)&v79 + 1))
    {
      v38 = "cannot mix positional and keyword arguments";
LABEL_91:
      *(_QWORD *)&v75 = v38;
      LOWORD(v78) = 259;
      v56 = a1;
      v57 = v60;
      goto LABEL_92;
    }
    v62 = 1;
LABEL_25:
    v14 = *(_BYTE **)(a1 + 136);
    v74 = 0;
    if (!*(_BYTE *)(a1 + 799))
      goto LABEL_42;
    v15 = **(_DWORD **)(a1 + 48);
    if (v15 == 36)
    {
      v70[0] = 0;
      v67[0] = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, _BYTE **))(*(_QWORD *)a1 + 232))(a1, v70, &v74) & 1) != 0)
      {
        v37 = 0;
      }
      else
      {
        v20 = v3;
        v21 = v70[0];
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
        if (llvm::MCExpr::evaluateAsAbsolute(v21, v67))
        {
          LODWORD(v75) = 4;
          *((_QWORD *)&v75 + 1) = v14;
          v76 = (const char *)(v74 - v14);
          v78 = 64;
          v77 = v67[0];
          std::vector<llvm::AsmToken>::push_back[abi:nn180100]((uint64_t *)v80, &v75);
          v3 = v20;
          goto LABEL_48;
        }
        *(_QWORD *)&v75 = "expected absolute expression";
        LOWORD(v78) = 259;
        v56 = a1;
        v57 = (uint64_t)v14;
LABEL_92:
        v37 = llvm::MCAsmParser::Error(v56, v57, (llvm::Twine *)&v75, 0, 0);
      }
LABEL_93:
      *(_QWORD *)&v75 = v80;
      goto LABEL_74;
    }
    v16 = v14;
    if (v15 != 38)
    {
LABEL_42:
        goto LABEL_48;
      v37 = 1;
      goto LABEL_73;
    }
    while (1)
    {
      v17 = *v16;
      if (v17 <= 0x20)
      {
        if (*v16)
          v18 = v17 == 10;
        else
          v18 = 1;
        if (v18 || v17 == 13)
          goto LABEL_42;
        goto LABEL_41;
      }
      if (v17 == 33)
      {
        ++v16;
        goto LABEL_41;
      }
      if (v17 == 62)
        break;
LABEL_41:
      ++v16;
    }
    v23 = v3;
    v24 = v16 + 1;
    v74 = v16 + 1;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v25 = (const char *)(v24 - v14);
    v3 = v23;
    LODWORD(v75) = 3;
    *((_QWORD *)&v75 + 1) = v14;
    v76 = v25;
    v78 = 64;
    v77 = 0;
    std::vector<llvm::AsmToken>::push_back[abi:nn180100]((uint64_t *)v80, &v75);
LABEL_48:
    v26 = *((_QWORD *)&v79 + 1);
    LODWORD(v27) = v9;
    if (*((_QWORD *)&v79 + 1))
      break;
LABEL_56:
    if (*(_QWORD *)v80 != *(_QWORD *)&v80[8])
    {
      v33 = *v3;
      if (0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 3) <= v27)
      {
        std::vector<std::vector<llvm::AsmToken>>::resize(v3, (v27 + 1));
        v33 = *v3;
      }
      v34 = (uint64_t *)&v33[24 * v27];
      if (v34 != (uint64_t *)v80)
        std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(v34, *(__int128 **)v80, *(__int128 **)&v80[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v80[8] - *(_QWORD *)v80) >> 3));
      if (v82 <= v27)
        llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v81, (v27 + 1));
      v81[v27] = *(_QWORD *)(a1 + 136);
    }
    v35 = **(_DWORD **)(a1 + 48);
    v10 = v59;
    if (v35 == 25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    }
    else if (v35 == 9)
    {
      if ((_DWORD)v6)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v37 = 0;
        v45 = 48 * v7;
        do
        {
          if (*(_QWORD *)&(*v3)[v43] == *(_QWORD *)&(*v3)[v43 + 8])
          {
            v46 = v61[4];
            if (*(_BYTE *)(v46 + v44 + 40))
            {
              v47 = v81[v42];
              if (!v47)
                v47 = *(_QWORD *)(a1 + 136);
              v48 = (const void **)(v46 + v44);
              v66 = 1283;
              v63[0] = "missing value for required parameter '";
              v64 = *v48;
              v65 = (size_t)v48[1];
              v67[0] = v63;
              v68 = "' in macro '";
              v69 = 770;
              v50 = *v61;
              v49 = v61[1];
              v70[0] = v67;
              v71 = v50;
              v72 = v49;
              v73 = 1282;
              *(_QWORD *)&v75 = v70;
              v76 = "'";
              LOWORD(v78) = 770;
              llvm::MCAsmParser::Error(a1, v47, (llvm::Twine *)&v75, 0, 0);
              v46 = v61[4];
              v37 = 1;
            }
            v51 = v46 + v44;
            v52 = *(__int128 **)(v51 + 16);
            v53 = *(__int128 **)(v51 + 24);
            v54 = (uint64_t *)(v51 + 16);
            if (v52 != v53)
            {
              v55 = (uint64_t *)&(*v3)[v43];
              if (v54 != v55)
                std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(v55, v52, v53, 0xCCCCCCCCCCCCCCCDLL * (((char *)v53 - (char *)v52) >> 3));
            }
          }
          v44 += 48;
          v43 += 24;
          ++v42;
        }
        while (v45 != v44);
      }
      else
      {
        v37 = 0;
      }
      goto LABEL_73;
    }
    *(_QWORD *)&v75 = v80;
    std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v75);
    ++v9;
    v11 = 0uLL;
    if (v59 < v9)
    {
      *(_QWORD *)&v79 = "too many positional arguments";
      *(_WORD *)&v80[16] = 259;
      v36 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, (__n128)0);
      llvm::MCAsmParser::Error(a1, *(_QWORD *)(v36 + 96), (llvm::Twine *)&v79, 0, 0);
      v37 = 1;
      goto LABEL_75;
    }
  }
  if ((_DWORD)v6)
  {
    v28 = v8;
    v29 = v6;
    v30 = v3;
    v27 = 0;
    v31 = (const void *)v79;
    v32 = (_QWORD *)(v61[4] + 8);
    while (*v32 != v26 || memcmp((const void *)*(v32 - 1), v31, v26))
    {
      ++v27;
      v32 += 6;
      if (v7 == v27)
        goto LABEL_72;
    }
    v3 = v30;
    v6 = v29;
    v8 = v28;
    goto LABEL_56;
  }
  v31 = (const void *)v79;
LABEL_72:
  v66 = 1283;
  v63[0] = "parameter named '";
  v64 = v31;
  v65 = v26;
  v67[0] = v63;
  v68 = "' does not exist for macro '";
  v69 = 770;
  v40 = *v61;
  v39 = v61[1];
  v70[0] = v67;
  v71 = v40;
  v72 = v39;
  v73 = 1282;
  *(_QWORD *)&v75 = v70;
  v76 = "'";
  LOWORD(v78) = 770;
  v37 = llvm::MCAsmParser::Error(a1, v60, (llvm::Twine *)&v75, 0, 0);
LABEL_73:
  *(_QWORD *)&v75 = v80;
LABEL_74:
  std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v75);
LABEL_75:
  if (v81 != v83)
    free(v81);
  return v37 & 1;
}

uint64_t `anonymous namespace'::AsmParser::expandMacro(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10)
{
  unint64_t v10;
  int v12;
  size_t v13;
  uint64_t v16;
  _BOOL4 v17;
  _BYTE *v18;
  uint64_t result;
  size_t v20;
  BOOL v21;
  char v22;
  size_t v23;
  unsigned int i;
  int v25;
  uint64_t v27;
  size_t v28;
  int v29;
  _BYTE *v30;
  size_t v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  llvm::raw_ostream *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  int **v44;
  int *v45;
  int *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::string *p_p;
  size_t size;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _BOOL4 v65;
  _QWORD *v66;
  _BYTE *v67;
  uint64_t v68;
  std::string __p;
  __int16 v70;

  v10 = a8;
  v12 = a6;
  v13 = __n;
  v16 = a1;
  if ((_DWORD)a6)
  {
    v17 = *(_BYTE *)(a5 + 48 * a6 - 7) != 0;
    v18 = (_BYTE *)(a1 + 796);
    goto LABEL_3;
  }
  v17 = 0;
  v18 = (_BYTE *)(a1 + 796);
  if (!*(_BYTE *)(a1 + 796))
  {
LABEL_3:
    if (a8 != a6)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Wrong number of arguments";
      v70 = 259;
      return llvm::MCAsmParser::Error(a1, a10, (llvm::Twine *)&__p, 0, 0);
    }
  }
  if (!__n)
    return 0;
  v64 = a6 - 1;
  v65 = v17;
  v67 = v18;
  v68 = a6;
  v66 = (_QWORD *)(a5 + 8);
  do
  {
    v20 = 0;
    if (v12)
      v21 = 1;
    else
      v21 = *v18 == 0;
    v22 = v21;
    v23 = v13 - 1;
    for (i = 2; ; ++i)
    {
      v25 = a3[v20];
      if ((v22 & 1) != 0)
      {
        if (v23 != v20 && v25 == 92)
          break;
        goto LABEL_26;
      }
      if (v25 == 36 && v23 != v20)
      {
        v27 = a3[v20 + 1];
        if ((_DWORD)v27 == 36 || (_DWORD)v27 == 110 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v27 + 60) & 0x400) != 0)
          break;
      }
LABEL_26:
      if (v13 == ++v20)
      {
        llvm::raw_ostream::operator<<(this, a3, v13);
        return 0;
      }
    }
    if (v20 >= v13)
      v28 = v13;
    else
      v28 = v20;
    llvm::raw_ostream::operator<<(this, a3, v28);
    if (v12 || !*v67)
    {
      if (!a9 || (v31 = (v20 + 2), v13 == v31) || a3[(v20 + 1)] != 64)
      {
        do
        {
          v31 = i - 1;
          v32 = isIdentifierChar((char)a3[v31]);
          v33 = i++;
          if (v32)
            v34 = v13 == v33;
          else
            v34 = 1;
        }
        while (!v34);
      }
      if (v31 - 2 == v20 && a3[v20 + 1] == 64)
      {
        write_unsigned<unsigned long>(this, *(unsigned int *)(v16 + 420), 0, 0, 0);
        v31 = v20 + 2;
        goto LABEL_118;
      }
      v62 = v16;
      v63 = a7;
      v61 = v10;
      if (v12)
      {
        v35 = 0;
        v36 = v66;
        while (~*v36 + v31 != v20 || v31 - 1 != v20 && memcmp((const void *)*(v36 - 1), &a3[v20 + 1], ~v20 + v31))
        {
          v36 += 6;
          if (v68 == ++v35)
            goto LABEL_62;
        }
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if ((_DWORD)v35 == v12)
      {
LABEL_62:
        v16 = v62;
        if (a3[v20 + 1] != 40 || a3[v20 + 2] != 41)
        {
          v10 = v61;
          v42 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v42 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 92);
          }
          else
          {
            *((_QWORD *)this + 4) = v42 + 1;
            *v42 = 92;
          }
          llvm::raw_ostream::operator<<(this, &a3[v20 + 1], ~v20 + v31);
          goto LABEL_117;
        }
        v31 = v20 + 3;
LABEL_116:
        v10 = v61;
LABEL_117:
        a7 = v63;
        goto LABEL_118;
      }
      v43 = (_DWORD)v35 == v64 && v65;
      v44 = (int **)(a7 + 24 * v35);
      v45 = *v44;
      v46 = v44[1];
      if (*v44 == v46)
      {
        v16 = v62;
        goto LABEL_116;
      }
      v10 = v61;
      v16 = v62;
      while (1)
      {
        if (*(_BYTE *)(v62 + 799))
        {
          v47 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
          v48 = *v47;
          v49 = *v45;
          if (v48 == 37)
          {
            if (v49 == 4)
            {
              v50 = (unint64_t *)(v45 + 6);
              if (v45[8] >= 0x41)
                v50 = (unint64_t *)*v50;
              llvm::write_integer(this, *v50, 0, 0);
              goto LABEL_108;
            }
          }
          else if (v48 == 60)
          {
            if (v49 == 3)
            {
              v51 = *((_QWORD *)v45 + 2);
              v52 = v51 - 1;
              v53 = v51 != 0;
              if (v51)
                ++v47;
              if (v52 < v53)
                v52 = 1;
              if (v52 < v51)
                v51 = v52;
              angleBracketString(&__p, (uint64_t)v47, v51 - v53);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                size = __p.__r_.__value_.__l.__size_;
              llvm::raw_ostream::write(this, (const char *)p_p, size);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_108;
            }
            goto LABEL_97;
          }
        }
        else
        {
          v49 = *v45;
        }
        if (((v49 == 3) & ~v43) != 0)
        {
          v57 = *((_QWORD *)v45 + 2);
          v58 = v57 != 0;
          if (v57)
            v47 = (unsigned __int8 *)(*((_QWORD *)v45 + 1) + 1);
          else
            v47 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
          if (v57 - 1 < v58)
            v59 = 1;
          else
            v59 = v57 - 1;
          if (v59 < v57)
            v57 = v59;
          v56 = v57 - v58;
          goto LABEL_107;
        }
        v47 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
LABEL_97:
        v56 = *((_QWORD *)v45 + 2);
LABEL_107:
        llvm::raw_ostream::operator<<(this, v47, v56);
LABEL_108:
        v45 += 10;
        if (v45 == v46)
          goto LABEL_117;
      }
    }
    v29 = (char)a3[v20 + 1];
    if (v29 == 110)
    {
      write_unsigned<unsigned long>(this, v10, 0, 0, 0);
      goto LABEL_113;
    }
    if (v29 == 36)
    {
      v30 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v30 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 36);
      }
      else
      {
        *((_QWORD *)this + 4) = v30 + 1;
        *v30 = 36;
      }
LABEL_113:
      v38 = this;
    }
    else
    {
      v37 = (v29 - 48);
      v38 = this;
      if (v37 < v10)
      {
        v39 = (uint64_t *)(a7 + 24 * v37);
        v40 = *v39;
        v41 = v39[1];
        while (v40 != v41)
        {
          llvm::raw_ostream::operator<<(v38, *(const void **)(v40 + 8), *(_QWORD *)(v40 + 16));
          v40 += 40;
        }
      }
    }
    v31 = v20 + 2;
    this = v38;
LABEL_118:
    v18 = v67;
    result = 0;
    if (v13 >= v31)
      v60 = v31;
    else
      v60 = v13;
    a3 += v60;
    v13 -= v60;
  }
  while (v13);
  return result;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x24BD1B188](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x24BD1B194](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void std::vector<std::vector<llvm::AsmToken>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  void **v18;
  char *v19;
  void **v20;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v19 = &v4[24 * a2];
      while (v3 != v19)
      {
        v3 -= 24;
        v20 = (void **)v3;
        std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v20);
      }
      a1[1] = v19;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = 3 * v10;
      v12 = (char *)operator new(24 * v10);
      v13 = &v12[24 * v5];
      v14 = &v12[8 * v11];
      v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      v16 = &v13[v15];
      if (v3 == v4)
      {
        *a1 = v13;
        a1[1] = v16;
        a1[2] = v14;
      }
      else
      {
        do
        {
          v17 = *(_OWORD *)(v3 - 24);
          v3 -= 24;
          *(_OWORD *)(v13 - 24) = v17;
          v13 -= 24;
          *((_QWORD *)v13 + 2) = *((_QWORD *)v3 + 2);
          *(_QWORD *)v3 = 0;
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
        }
        while (v3 != v4);
        v3 = *a1;
        v18 = (void **)a1[1];
        *a1 = v13;
        a1[1] = v16;
        a1[2] = v14;
        while (v18 != (void **)v3)
        {
          v18 -= 3;
          v20 = v18;
          std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v20);
        }
      }
      if (v3)
        operator delete(v3);
    }
  }
}

uint64_t *std::vector<llvm::AsmToken>::push_back[abi:nn180100](uint64_t *result, __int128 *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[5];

  v3 = result;
  v4 = result + 2;
  v5 = result[2];
  v6 = result[1];
  if (v6 >= v5)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *result) >> 3);
    if (v9 + 1 > 0x666666666666666)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *result) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v11;
    v21[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v12);
    v14 = &v13[40 * v9];
    v21[0] = v13;
    v21[1] = v14;
    v21[3] = &v13[40 * v15];
    v16 = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = v16;
    v17 = v14 + 24;
    LODWORD(v16) = *((_DWORD *)a2 + 8);
    *((_DWORD *)v14 + 8) = v16;
    if (v16 > 0x40)
    {
      v20 = (void *)operator new[]();
      *v17 = v20;
      memcpy(v20, *((const void **)a2 + 3), (((unint64_t)*((unsigned int *)v14 + 8) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *v17 = *((_QWORD *)a2 + 3);
    }
    v21[2] = v14 + 40;
    std::vector<llvm::AsmToken>::__swap_out_circular_buffer(v3, v21);
    v19 = v3[1];
    result = (uint64_t *)std::__split_buffer<llvm::AsmToken>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v6 = v7;
    v8 = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v6 + 32) = v8;
    if (v8 > 0x40)
    {
      v18 = (void *)operator new[]();
      *(_QWORD *)(v6 + 24) = v18;
      result = (uint64_t *)memcpy(v18, *((const void **)a2 + 3), (((unint64_t)*(unsigned int *)(v6 + 32) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(v6 + 24) = *((_QWORD *)a2 + 3);
    }
    v19 = v6 + 40;
  }
  v3[1] = v19;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::jumpToLoc(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = result;
  v5 = *(_QWORD **)(result + 240);
  if (!a3)
  {
    result = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(result + 240), a2);
    a3 = result;
  }
  v6 = *(_QWORD *)(*v5 + 24 * (a3 - 1));
  *(_DWORD *)(v4 + 280) = a3;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16) - v7;
  *(_QWORD *)(v4 + 192) = v7;
  *(_QWORD *)(v4 + 200) = v8;
  if (a2)
    v9 = a2;
  else
    v9 = v7;
  *(_QWORD *)(v4 + 184) = v9;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 211) = 1;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::parseMacroArgument(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  _QWORD v35[4];
  uint64_t *v36;

  if (a3)
  {
    if (**(_DWORD **)(a1 + 48) == 9)
      return 0;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    v21 = v19;
    v22 = v20;
    v23 = a2[2];
    v24 = a2[1];
    if (v24 >= v23)
    {
      v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - *a2) >> 3);
      if (v26 + 1 > 0x666666666666666)
        abort();
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *a2) >> 3);
      v28 = 2 * v27;
      if (2 * v27 <= v26 + 1)
        v28 = v26 + 1;
      if (v27 >= 0x333333333333333)
        v29 = 0x666666666666666;
      else
        v29 = v28;
      v36 = a2 + 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v29);
      v31 = &v30[40 * v26];
      v35[0] = v30;
      v35[1] = v31;
      v35[3] = &v30[40 * v32];
      *(_DWORD *)v31 = 3;
      *((_QWORD *)v31 + 1) = v21;
      *((_QWORD *)v31 + 2) = v22;
      *((_DWORD *)v31 + 8) = 64;
      *((_QWORD *)v31 + 3) = 0;
      llvm::APInt::clearUnusedBits((uint64_t)(v31 + 24));
      v35[2] = v31 + 40;
      std::vector<llvm::AsmToken>::__swap_out_circular_buffer(a2, v35);
      v25 = a2[1];
      std::__split_buffer<llvm::AsmToken>::~__split_buffer((uint64_t)v35);
    }
    else
    {
      *(_DWORD *)v24 = 3;
      *(_QWORD *)(v24 + 8) = v19;
      *(_QWORD *)(v24 + 16) = v20;
      *(_DWORD *)(v24 + 32) = 64;
      *(_QWORD *)(v24 + 24) = 0;
      llvm::APInt::clearUnusedBits(v24 + 24);
      v25 = v24 + 40;
    }
    result = 0;
    a2[1] = v25;
    return result;
  }
  v6 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 796);
  while (1)
  {
    v7 = **(_DWORD **)(a1 + 48);
    if (v7 == 27 || v7 == 0)
      break;
    if (v6)
    {
      if (v7 == 9)
      {
        v33 = "unbalanced parentheses in macro argument";
        goto LABEL_46;
      }
      goto LABEL_18;
    }
    if (v7 == 25)
      goto LABEL_45;
    if (v7 == 11)
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
    if (*(_BYTE *)(a1 + 796)
      || ((v14 = **(_DWORD **)(a1 + 48), v15 = v14 > 0x2C, v16 = (1 << v14) & 0x1FCFF980F000, !v15)
        ? (v17 = v16 == 0)
        : (v17 = 1),
          v17))
    {
      if (v7 == 11 || (v7 = **(_DWORD **)(a1 + 48), v7 == 9))
      {
LABEL_45:
        result = 0;
        goto LABEL_47;
      }
LABEL_18:
      v10 = v7 == 18 && v6 != 0;
      v11 = v10 << 31 >> 31;
      if (v7 == 17)
        v11 = 1;
      v12 = v11 + v6;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      std::vector<llvm::AsmToken>::push_back[abi:nn180100](a2, *(__int128 **)(v13 + 8));
LABEL_27:
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
      v6 = v12;
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      std::vector<llvm::AsmToken>::push_back[abi:nn180100](a2, *(__int128 **)(v18 + 8));
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
      v6 = 0;
      v12 = 0;
      if (**(_DWORD **)(a1 + 48) == 11)
        goto LABEL_27;
    }
  }
  v33 = "unexpected token in macro instantiation";
LABEL_46:
  v35[0] = v33;
  LOWORD(v36) = 259;
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(_QWORD *)(v34 + 96), (llvm::Twine *)v35, 0, 0);
  result = 1;
LABEL_47:
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

uint64_t *std::vector<llvm::AsmToken>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v7;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_DWORD *)(v2 + v5 - 8) = 0;
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<llvm::AsmToken>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(_DWORD *)(v2 - 8) >= 0x41u)
      {
        v5 = *(_QWORD *)(v2 - 16);
        if (v5)
        {
          MEMORY[0x24BD1B380](v5, 0x1000C8000313F17);
          v4 = *(_QWORD *)(a1 + 16);
        }
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t result;
  uint64_t v18;

  v8 = a1[2];
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_16;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_16:
      abort();
    v13 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)v13 + 40 * v14;
    v15 = (uint64_t)a2;
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    v16 = (__int128 *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(a2, v16, v9);
    v13 = (void *)a1[1];
    v15 = (uint64_t)v16;
LABEL_14:
    result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::AsmToken>,llvm::AsmToken*,llvm::AsmToken*,llvm::AsmToken*>(v15, (uint64_t)a3, (uint64_t)v13);
    a1[1] = result;
    return result;
  }
  v18 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(a2, a3, v9);
  return std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, v18);
}

uint64_t std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::AsmToken>,llvm::AsmToken*,llvm::AsmToken*,llvm::AsmToken*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = a1 + 24;
    do
    {
      v6 = *(_OWORD *)(v5 - 24);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 - 8);
      *(_OWORD *)a3 = v6;
      v7 = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(a3 + 32) = v7;
      if (v7 > 0x40)
      {
        v8 = (void *)operator new[]();
        *(_QWORD *)(a3 + 24) = v8;
        memcpy(v8, *(const void **)v5, (((unint64_t)*(unsigned int *)(a3 + 32) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(a3 + 24) = *(_QWORD *)v5;
      }
      v9 = v5 - 24;
      a3 += 40;
      v5 += 40;
    }
    while (v9 + 40 != a2);
  }
  return a3;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      llvm::APInt::operator=((llvm::APInt *)(a3 + 24), (const llvm::APInt *)((char *)v5 + 24));
      a3 += 40;
      v5 = (__int128 *)((char *)v5 + 40);
    }
    while (v5 != a2);
  }
  return a3;
}

unint64_t isIdentifierChar(int a1)
{
  if (a1 < 0)
  {
    if (__maskrune(a1, 0x500uLL))
      return 1;
  }
  else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a1 + 60) & 0x500) != 0)
  {
    return 1;
  }
  if ((a1 - 36) <= 0x3B)
    return (0x800000000000401uLL >> (a1 - 36)) & 1;
  else
    return 0;
}

void angleBracketString(std::string *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    v6 = 0;
    do
    {
      if (*(_BYTE *)(a2 + v6) == 33)
        v7 = v6 + 1;
      else
        v7 = v6;
      std::string::push_back(this, *(_BYTE *)(a2 + v7));
      v6 = v7 + 1;
    }
    while (v7 + 1 < a3);
  }
}

void std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveAscii(llvm::StringRef,BOOL)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  __p = 0;
  v10 = 0;
  v11 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2) & 1) == 0)
  {
    while (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 208))(v2, &__p) & 1) == 0)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      if (v11 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v11 >= 0)
        v6 = HIBYTE(v11);
      else
        v6 = v10;
      (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v4 + 488))(v4, p_p, v6);
      if (*(_BYTE *)a1[1])
        goto LABEL_13;
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) != 3)
      {
        if (*(_BYTE *)a1[1])
        {
LABEL_13:
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v7 + 488))(v7, &algn_24AA32ABB, 1);
        }
        v3 = 0;
        goto LABEL_15;
      }
    }
  }
  v3 = 1;
LABEL_15:
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return v3;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveValue(llvm::StringRef,unsigned int)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;

  v2 = *(_QWORD *)a1;
  v14 = 0;
  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 96);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2) & 1) != 0)
    return 1;
  v12[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v14, v12) & 1) != 0)
    return 1;
  if (*(_BYTE *)v14 == 1)
  {
    v5 = *(_QWORD *)(v14 + 16);
    v6 = 8 * **(_DWORD **)(a1 + 8);
    if (v6 <= 0x3F && 0xFFFFFFFFFFFFFFFFLL >> (-8 * **(_BYTE **)(a1 + 8)) < v5)
    {
      v8 = -1 << (v6 - 1);
      if (v8 > v5 || v5 > ~v8)
      {
        v12[0] = "out of range literal value";
        v13 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v12, 0, 0);
      }
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    (*(void (**)(uint64_t, int64_t, _QWORD))(*(_QWORD *)v11 + 512))(v11, v5, **(unsigned int **)(a1 + 8));
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 504))(v10, v14, **(unsigned int **)(a1 + 8), v3);
  }
  return 0;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveOctaValue(llvm::StringRef)::$_0>(_anonymous_namespace_::AsmParser **a1)
{
  _anonymous_namespace_::AsmParser *v1;
  uint64_t v2;
  int v3;
  void (*v4)(void);
  uint64_t v5;
  const char *v6;
  const char *v8;
  unint64_t v9;

  v1 = *a1;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)*a1 + 264))(*a1) & 1) != 0)
    return 1;
  v8 = 0;
  v9 = 0;
  v2 = parseHexOcta(v1, &v9, &v8);
  if ((v2 & 1) == 0)
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)v1 + 29) + 16);
    v4 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)v1 + 56))(v1)
                          + 512);
    v4();
    v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)v1 + 56))(v1);
    if (v3)
      v6 = (const char *)v9;
    else
      v6 = v8;
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v5 + 512))(v5, v6, 8);
  }
  return v2;
}

uint64_t parseHexOcta(_anonymous_namespace_::AsmParser *a1, unint64_t *a2, const char **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  _QWORD *v15;
  int v16;
  const char *v17;
  unsigned int v18;
  __int16 v19;

  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 4
    && **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 5)
  {
    v17 = "unknown token in expression";
    v19 = 259;
    v12 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v12 + 96), (llvm::Twine *)&v17, 0, 0);
    return 1;
  }
  v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1)
                             + 8)
                 + 8);
  v7 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  v8 = *(unsigned int *)(v7 + 32);
  v16 = v8;
  if (v8 > 0x40)
  {
    v9 = (_QWORD *)operator new[]();
    memcpy(v9, *(const void **)(v7 + 24), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v9 = *(_QWORD **)(v7 + 24);
  }
  v15 = v9;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if (v8 < 0x41)
  {
    *a2 = 0;
    goto LABEL_8;
  }
  v11 = v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v15);
  if (v11 < 0x81)
  {
    if (v11 >= 0x41)
    {
      v14 = (unint64_t *)operator new[]();
      memcpy(v14, v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v14, (unint64_t *)((unint64_t)(v8 + 63) >> 6), 0x40u);
      *a2 = *v14;
      MEMORY[0x24BD1B380](v14, 0x1000C8000313F17);
      llvm::APInt::getLoBits((llvm::APInt *)&v15, 0x40u, (llvm::APInt *)&v17);
      if (v18 > 0x40)
      {
        *a3 = *(const char **)v17;
        MEMORY[0x24BD1B380]();
      }
      else
      {
        *a3 = v17;
      }
      LODWORD(v8) = v16;
LABEL_9:
      v10 = 0;
      if (v8 < 0x41)
        return v10;
      goto LABEL_16;
    }
    *a2 = 0;
    v9 = (_QWORD *)*v9;
LABEL_8:
    *a3 = (const char *)v9;
    goto LABEL_9;
  }
  v17 = "out of range literal value";
  v19 = 259;
  v10 = llvm::MCAsmParser::Error((uint64_t)a1, v6, (llvm::Twine *)&v17, 0, 0);
LABEL_16:
  if (v15)
    MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
  return v10;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveRealValue(llvm::StringRef,llvm::fltSemantics const&)::$_0>(uint64_t a1)
{
  _DWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *LimitedValue;
  uint64_t **v7;
  unsigned int v8;

  v2 = *(_DWORD ***)a1;
  v3 = 1;
  v8 = 1;
  v7 = 0;
  if (((*((uint64_t (**)(_DWORD **))*v2 + 33))(v2) & 1) == 0
  {
    v4 = (*((uint64_t (**)(_DWORD **))*v2 + 7))(v2);
    LimitedValue = llvm::APInt::getLimitedValue(&v7, 0xFFFFFFFFFFFFFFFFLL);
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 512))(v4, LimitedValue, v8 >> 3);
    v3 = 0;
  }
  if (v8 >= 0x41 && v7)
    MEMORY[0x24BD1B380](v7, 0x1000C8000313F17);
  return v3;
}

uint64_t `anonymous namespace'::AsmParser::parseRealValue(_DWORD **a1, void *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(_DWORD **);
  uint64_t v18;
  char *v20;
  _BYTE v21[8];
  _BYTE v22[24];
  const char *v23;
  void *v24[3];
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  if (v6 == 13 || **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 12)
    llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
  switch(*a1[6])
  {
    case 1:
      v25 = 260;
      v17 = (uint64_t (**)(_DWORD **))*a1;
      v23 = (const char *)(a1 + 14);
      v18 = v17[5](a1);
      goto LABEL_42;
    case 2:
    case 4:
    case 6:
      llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v22, a2);
      v7 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      v9 = *(char **)(v7 + 8);
      v8 = *(_QWORD *)(v7 + 16);
      if (**(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 2)
      {
        if (v8 >= 8)
          v10 = 8;
        else
          v10 = v8;
        if (ascii_strncasecmp(v9, "infinity", v10))
          v11 = 0;
        else
          v11 = v8 == 8;
        if (v11
          || (v8 >= 3 ? (v12 = 3) : (v12 = v8),
              !ascii_strncasecmp(v9, "inf", v12) ? (v13 = v8 == 3) : (v13 = 0),
              v13))
        {
          LODWORD(v20) = 0;
          llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v24, a2);
          llvm::APFloat::makeInf((llvm::APFloat *)&v23, 0);
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)v22, v24);
        }
        else
        {
          if (ascii_strncasecmp(v9, "nan", v12))
            v14 = 0;
          else
            v14 = v8 == 3;
          if (!v14)
          {
LABEL_30:
            v23 = "invalid floating point literal";
            v25 = 259;
            v15 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
            llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v15 + 96), (llvm::Twine *)&v23, 0, 0);
            v16 = 1;
            goto LABEL_39;
          }
          llvm::APFloat::getNaN(a2, 0, -1, (uint64_t)&v23);
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)v22, v24);
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v24);
      }
      else
      {
        llvm::APFloat::convertFromString((uint64_t)v21, v9, v8, 1, (uint64_t)&v23);
        if (((uint64_t)v24[0] & 1) != 0 && v23)
        {
          v20 = (char *)v23;
          llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v20);
          if (v20)
            (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
          goto LABEL_30;
        }
      }
      if (v6 == 13)
        llvm::APFloat::changeSign((uint64_t)v21);
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v23, (llvm::APFloat *)v21);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x24BD1B380](*(_QWORD *)a3, 0x1000C8000313F17);
      v16 = 0;
      *(_QWORD *)a3 = v23;
      *(_DWORD *)(a3 + 8) = v24[0];
LABEL_39:
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v22);
      return v16;
    default:
      v23 = "unexpected token in directive";
      v25 = 259;
      v18 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
LABEL_42:
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v18 + 96), (llvm::Twine *)&v23, 0, 0);
      return 1;
  }
}

void llvm::APFloat::getNaN(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (a3)
  {
    v7 = 64;
    v6 = a3;
    v8 = 0;
    llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)(a4 + 8), a1);
    llvm::APFloat::makeNaN((llvm::APFloat *)a4, 0, a2, (const llvm::APInt *)&v6);
    if (v7 >= 0x41)
    {
      if (v6)
        MEMORY[0x24BD1B380](v6, 0x1000C8000313F17);
    }
  }
  else
  {
    llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)(a4 + 8), a1);
    llvm::APFloat::makeNaN((llvm::APFloat *)a4, 0, a2, 0);
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveSymbolAttribute(llvm::MCSymbolAttr)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  llvm::MCContext *v6;
  unint64_t Symbol;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)a1;
  v11 = 0;
  v12 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v11))
  {
    v4 = "expected identifier";
LABEL_3:
    v9[0] = v4;
    v10 = 259;
    return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v9, 0, 0);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(v2, v11, v12) & 1) == 0)
  {
    v6 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v10 = 261;
    v9[0] = v11;
    v9[1] = v12;
    Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v9);
    if ((*(_BYTE *)(Symbol + 8) & 1) != 0 && **(_DWORD **)(a1 + 8) != 28)
    {
      v4 = "non-local symbol required";
      goto LABEL_3;
    }
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    if (((*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 296))(v8, Symbol, **(unsigned int **)(a1 + 8)) & 1) == 0)
    {
      v4 = "unable to emit symbol attribute";
      goto LABEL_3;
    }
  }
  return 0;
}

unint64_t `anonymous namespace'::AsmParser::parseMacroLikeBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v37;
  int *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v46;
  void *v47;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void *v79;
  void *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  void *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  int64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  void *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  llvm::APInt *v168;
  uint64_t v169;
  void *v170;
  __int128 v171;
  uint64_t v172;
  void **v173[4];
  __int16 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  void ***v179;

  *((_QWORD *)&v175 + 1) = 0;
  v176 = 0;
  v178 = 1;
  v177 = 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v5 = *(unsigned int *)(v4 + 32);
  v169 = *(_QWORD *)(v4 + 8);
  if (v5 > 0x40)
  {
    v170 = (void *)operator new[]();
    memcpy(v170, *(const void **)(v4 + 24), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v170 = *(void **)(v4 + 24);
  }
  if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
LABEL_78:
    v173[0] = (void **)"no matching '.endr' in definition";
    v174 = 259;
    (*(void (**)(uint64_t, uint64_t, void ***, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, v173, 0, 0);
LABEL_79:
    v46 = 0;
    v47 = v170;
    goto LABEL_80;
  }
  v6 = 0;
  while (1)
  {
    if (**(_DWORD **)(a1 + 48) == 2)
    {
      v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v7 == 2)
      {
        v8 = *(_DWORD **)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 16);
      }
      else
      {
        v8 = *(_DWORD **)(v7 + 8);
        v10 = *(_QWORD *)(v7 + 16);
        v11 = v10 - 1;
        v12 = v10 != 0;
        if (v10)
          v8 = (_DWORD *)((char *)v8 + 1);
        if (v11 < v12)
          v11 = 1;
        if (v11 >= v10)
          v11 = v10;
        v9 = v11 - v12;
      }
      if (v9 == 4 && *v8 == 1885696558)
        goto LABEL_58;
      v13 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v13 == 2)
      {
        v14 = *(int **)(v13 + 8);
        v15 = *(_QWORD *)(v13 + 16);
      }
      else
      {
        v14 = *(int **)(v13 + 8);
        v16 = *(_QWORD *)(v13 + 16);
        v17 = v16 - 1;
        v18 = v16 != 0;
        if (v16)
          v14 = (int *)((char *)v14 + 1);
        if (v17 < v18)
          v17 = 1;
        if (v17 >= v16)
          v17 = v16;
        v15 = v17 - v18;
      }
      if (v15 == 5)
      {
        v19 = *v14;
        v20 = *((unsigned __int8 *)v14 + 4);
        v21 = v19 == 1885696558 && v20 == 116;
        if (v21)
          goto LABEL_58;
      }
      v22 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v22 == 2)
      {
        v23 = *(_DWORD **)(v22 + 8);
        v24 = *(_QWORD *)(v22 + 16);
      }
      else
      {
        v23 = *(_DWORD **)(v22 + 8);
        v25 = *(_QWORD *)(v22 + 16);
        v26 = v25 - 1;
        v27 = v25 != 0;
        if (v25)
          v23 = (_DWORD *)((char *)v23 + 1);
        if (v26 < v27)
          v26 = 1;
        if (v26 >= v25)
          v26 = v25;
        v24 = v26 - v27;
      }
      if (v24 == 4 && *v23 == 1886546222)
        goto LABEL_58;
      v28 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v28 == 2)
      {
        v29 = *(int **)(v28 + 8);
        v30 = *(_QWORD *)(v28 + 16);
      }
      else
      {
        v29 = *(int **)(v28 + 8);
        v31 = *(_QWORD *)(v28 + 16);
        v32 = v31 - 1;
        v33 = v31 != 0;
        if (v31)
          v29 = (int *)((char *)v29 + 1);
        if (v32 < v33)
          v32 = 1;
        if (v32 >= v31)
          v32 = v31;
        v30 = v32 - v33;
      }
      if (v30 == 5)
      {
        v34 = *v29;
        v35 = *((unsigned __int8 *)v29 + 4);
        if (v34 == 1886546222 && v35 == 99)
LABEL_58:
          ++v6;
      }
    }
    if (**(_DWORD **)(a1 + 48) != 2)
      goto LABEL_77;
    v37 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    if (*(_DWORD *)v37 == 2)
    {
      v38 = *(int **)(v37 + 8);
      v39 = *(_QWORD *)(v37 + 16);
    }
    else
    {
      v38 = *(int **)(v37 + 8);
      v40 = *(_QWORD *)(v37 + 16);
      v41 = v40 - 1;
      v42 = v40 != 0;
      if (v40)
        v38 = (int *)((char *)v38 + 1);
      if (v41 < v42)
        v41 = 1;
      if (v41 >= v40)
        v41 = v40;
      v39 = v41 - v42;
    }
    if (v39 != 5)
      goto LABEL_77;
    v43 = *v38;
    v44 = *((unsigned __int8 *)v38 + 4);
    if (v43 != 1684956462 || v44 != 114)
      goto LABEL_77;
    if (!v6)
      break;
    --v6;
LABEL_77:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
      goto LABEL_78;
  }
  v49 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v50 = *((_QWORD *)v49 + 2);
  v175 = *v49;
  v176 = v50;
  llvm::APInt::operator=((llvm::APInt *)&v177, (const llvm::APInt *)((char *)v49 + 24));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 9)
  {
    v76 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    v173[0] = (void **)"unexpected token in '.endr' directive";
    v174 = 259;
    (*(void (**)(uint64_t, uint64_t, void ***, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v76, v173, 0, 0);
    goto LABEL_79;
  }
  v51 = *(_OWORD *)(a1 + 376);
  v168 = (llvm::APInt *)(a1 + 376);
  v52 = *(char **)(a1 + 384);
  v53 = (char *)v51;
  v54 = (uint64_t)(*((_QWORD *)&v51 + 1) - v51) >> 3;
  v55 = 46 * v54 - 1;
  v56 = *((_QWORD *)&v51 + 1) - v51;
  if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
    v55 = 0;
  v57 = v169;
  v58 = *((_QWORD *)&v175 + 1) - v169;
  v172 = 0;
  v171 = 0uLL;
  v59 = *(_QWORD *)(a1 + 400);
  if (v55 == *(_QWORD *)(a1 + 408) + v59)
  {
    v60 = v59 >= 0x2E;
    v61 = v59 - 46;
    if (v60)
    {
      *(_QWORD *)(a1 + 400) = v61;
      v63 = (char *)(v51 + 8);
      v62 = *(_QWORD *)v51;
      *(_QWORD *)(a1 + 376) = v51 + 8;
      if (*((_QWORD *)&v51 + 1) == *(_QWORD *)(a1 + 392))
      {
        v64 = *(_QWORD *)(a1 + 368);
        v65 = (uint64_t)&v63[-v64];
        if ((unint64_t)v63 <= v64)
        {
          v109 = *((_QWORD *)&v51 + 1) - v64;
          v21 = v109 == 0;
          v110 = v109 >> 2;
          if (v21)
            v111 = 1;
          else
            v111 = v110;
          v112 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v111);
          v114 = &v112[8 * (v111 >> 2)];
          v115 = *(uint64_t **)(a1 + 376);
          v52 = v114;
          v116 = *(_QWORD *)(a1 + 384) - (_QWORD)v115;
          if (v116)
          {
            v52 = &v114[v116 & 0xFFFFFFFFFFFFFFF8];
            v117 = 8 * (v116 >> 3);
            v118 = &v112[8 * (v111 >> 2)];
            do
            {
              v119 = *v115++;
              *(_QWORD *)v118 = v119;
              v118 += 8;
              v117 -= 8;
            }
            while (v117);
          }
          v120 = *(void **)(a1 + 368);
          *(_QWORD *)(a1 + 368) = v112;
          *(_QWORD *)(a1 + 376) = v114;
          *(_QWORD *)(a1 + 384) = v52;
          *(_QWORD *)(a1 + 392) = &v112[8 * v113];
          if (v120)
          {
            operator delete(v120);
            v52 = *(char **)(a1 + 384);
          }
        }
        else
        {
          v66 = v58;
          v67 = v65 >> 3;
          v68 = v65 >> 3 < -1;
          v69 = (v65 >> 3) + 2;
          if (v68)
            v70 = v69;
          else
            v70 = v67 + 1;
          v71 = -(v70 >> 1);
          v72 = v70 >> 1;
          v73 = &v63[-8 * v72];
          v74 = *((_QWORD *)&v51 + 1) - (_QWORD)v63;
          if (*((char **)&v51 + 1) != v63)
          {
            memmove(&v63[-8 * v72], v63, *((_QWORD *)&v51 + 1) - (_QWORD)v63);
            v52 = *(char **)v168;
          }
          v75 = &v52[8 * v71];
          v52 = &v73[v74];
          *(_QWORD *)(a1 + 376) = v75;
          *(_QWORD *)(a1 + 384) = &v73[v74];
          v58 = v66;
        }
      }
      *(_QWORD *)v52 = v62;
      *(_QWORD *)(a1 + 384) += 8;
      v47 = v170;
    }
    else
    {
      v167 = *((_QWORD *)&v175 + 1) - v169;
      v77 = *(char **)(a1 + 392);
      v78 = *(char **)(a1 + 368);
      if (v54 < (v77 - v78) >> 3)
      {
        v79 = operator new(0xFD0uLL);
        v80 = v79;
        if (v77 == v52)
        {
          if (v53 == v78)
          {
            if (v52 == v53)
              v127 = 1;
            else
              v127 = (v77 - v53) >> 2;
            v128 = 2 * v127;
            v129 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v127);
            v53 = &v129[(v128 + 6) & 0xFFFFFFFFFFFFFFF8];
            v131 = *(uint64_t **)(a1 + 376);
            v132 = v53;
            v133 = *(_QWORD *)(a1 + 384) - (_QWORD)v131;
            v47 = v170;
            v58 = *((_QWORD *)&v175 + 1) - v169;
            if (v133)
            {
              v132 = &v53[v133 & 0xFFFFFFFFFFFFFFF8];
              v134 = 8 * (v133 >> 3);
              v135 = &v129[(v128 + 6) & 0xFFFFFFFFFFFFFFF8];
              do
              {
                v136 = *v131++;
                *(_QWORD *)v135 = v136;
                v135 += 8;
                v134 -= 8;
              }
              while (v134);
            }
            v137 = *(void **)(a1 + 368);
            *(_QWORD *)(a1 + 368) = v129;
            *(_QWORD *)(a1 + 376) = v53;
            *(_QWORD *)(a1 + 384) = v132;
            *(_QWORD *)(a1 + 392) = &v129[8 * v130];
            if (v137)
            {
              operator delete(v137);
              v53 = *(char **)v168;
            }
          }
          else
          {
            v47 = v170;
            v58 = *((_QWORD *)&v175 + 1) - v169;
          }
          *((_QWORD *)v53 - 1) = v80;
          v138 = *(char **)(a1 + 376);
          v139 = *(char **)(a1 + 384);
          *(_QWORD *)(a1 + 376) = v138 - 8;
          v140 = *((_QWORD *)v138 - 1);
          *(_QWORD *)(a1 + 376) = v138;
          if (v139 == *(char **)(a1 + 392))
          {
            v141 = *(_QWORD *)(a1 + 368);
            v142 = (uint64_t)&v138[-v141];
            if ((unint64_t)v138 <= v141)
            {
              v150 = (uint64_t)&v139[-v141];
              v21 = v150 == 0;
              v151 = v150 >> 2;
              if (v21)
                v152 = 1;
              else
                v152 = v151;
              v153 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v152);
              v155 = &v153[8 * (v152 >> 2)];
              v156 = *(uint64_t **)(a1 + 376);
              v139 = v155;
              v157 = *(_QWORD *)(a1 + 384) - (_QWORD)v156;
              if (v157)
              {
                v139 = &v155[v157 & 0xFFFFFFFFFFFFFFF8];
                v158 = 8 * (v157 >> 3);
                v159 = &v153[8 * (v152 >> 2)];
                do
                {
                  v160 = *v156++;
                  *(_QWORD *)v159 = v160;
                  v159 += 8;
                  v158 -= 8;
                }
                while (v158);
              }
              v161 = *(void **)(a1 + 368);
              *(_QWORD *)(a1 + 368) = v153;
              *(_QWORD *)(a1 + 376) = v155;
              *(_QWORD *)(a1 + 384) = v139;
              *(_QWORD *)(a1 + 392) = &v153[8 * v154];
              if (v161)
              {
                operator delete(v161);
                v139 = *(char **)(a1 + 384);
              }
            }
            else
            {
              v143 = v142 >> 3;
              v68 = v142 >> 3 < -1;
              v144 = (v142 >> 3) + 2;
              if (v68)
                v145 = v144;
              else
                v145 = v143 + 1;
              v146 = -(v145 >> 1);
              v147 = v145 >> 1;
              v148 = &v138[-8 * v147];
              v149 = v139 - v138;
              if (v139 != v138)
              {
                memmove(&v138[-8 * v147], v138, v139 - v138);
                v138 = *(char **)v168;
              }
              v139 = &v148[v149];
              *(_QWORD *)(a1 + 376) = &v138[8 * v146];
              *(_QWORD *)(a1 + 384) = &v148[v149];
              v58 = v167;
            }
          }
          *(_QWORD *)v139 = v140;
          *(_QWORD *)(a1 + 384) += 8;
        }
        else
        {
          *(_QWORD *)v52 = v79;
          *(_QWORD *)(a1 + 384) += 8;
          v47 = v170;
          v58 = v167;
        }
        goto LABEL_181;
      }
      if (v77 == v78)
        v81 = 1;
      else
        v81 = (v77 - v78) >> 2;
      v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v81);
      v84 = v83;
      v85 = &v82[8 * v54];
      v86 = &v82[8 * v83];
      v87 = operator new(0xFD0uLL);
      if (v54 == v84)
      {
        v88 = 8 * v54;
        if (v56 >= 1)
        {
          v89 = v88 >> 3;
          if (v89 >= -1)
            v90 = v89 + 1;
          else
            v90 = v89 + 2;
          v85 -= 8 * (v90 >> 1);
          goto LABEL_115;
        }
        v122 = v87;
        v123 = v88 >> 2;
        if (v52 == v53)
          v124 = 1;
        else
          v124 = v123;
        v125 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v124);
        v85 = &v125[8 * (v124 >> 2)];
        v86 = &v125[8 * v126];
        v91 = (_QWORD *)(a1 + 376);
        if (v82)
          operator delete(v82);
        v82 = v125;
        v87 = v122;
      }
      else
      {
LABEL_115:
        v91 = (_QWORD *)(a1 + 376);
      }
      *(_QWORD *)v85 = v87;
      v92 = v85 + 8;
      v93 = *(_QWORD *)(a1 + 384);
      if (v93 != *(_QWORD *)(a1 + 376))
      {
        while (2)
        {
          if (v85 != v82)
          {
            v94 = v92;
            v95 = v85;
            goto LABEL_132;
          }
          if (v92 >= v86)
          {
            if (v86 == v85)
              v98 = 1;
            else
              v98 = (v86 - v85) >> 2;
            v99 = 2 * v98;
            v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v98);
            v82 = v100;
            v95 = &v100[(v99 + 6) & 0xFFFFFFFFFFFFFFF8];
            v94 = v95;
            v102 = v92 - v85;
            if (v92 != v85)
            {
              v94 = &v95[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v100[(v99 + 6) & 0xFFFFFFFFFFFFFFF8];
              v105 = v85;
              do
              {
                v106 = *(_QWORD *)v105;
                v105 += 8;
                *(_QWORD *)v104 = v106;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v86 = &v100[8 * v101];
            operator delete(v85);
LABEL_132:
            v85 = v82;
          }
          else
          {
            v96 = (v86 - v92) >> 3;
            if (v96 >= -1)
              v97 = v96 + 1;
            else
              v97 = v96 + 2;
            v94 = &v92[8 * (v97 >> 1)];
            v95 = &v85[8 * (v97 >> 1)];
            if (v92 == v85)
              v85 = v92;
            else
              memmove(&v85[8 * (v97 >> 1)], v85, v92 - v85);
          }
          v82 = v85;
          v107 = *(_QWORD *)(v93 - 8);
          v93 -= 8;
          *((_QWORD *)v95 - 1) = v107;
          v108 = v95 - 8;
          v92 = v94;
          v85 = v108;
          if (v93 == *v91)
            goto LABEL_148;
          continue;
        }
      }
      v108 = v85;
      v94 = v85 + 8;
LABEL_148:
      v121 = *(void **)(a1 + 368);
      *(_QWORD *)(a1 + 368) = v82;
      *(_QWORD *)(a1 + 376) = v108;
      *(_QWORD *)(a1 + 384) = v94;
      *(_QWORD *)(a1 + 392) = v86;
      v57 = v169;
      v47 = v170;
      v58 = v167;
      if (v121)
        operator delete(v121);
    }
LABEL_181:
    v53 = *(char **)v168;
  }
  else
  {
    v47 = v170;
  }
  v162 = *(_QWORD *)(a1 + 408) + *(_QWORD *)(a1 + 400);
  v163 = *(_QWORD *)&v53[8 * (v162 / 0x2E)] + 88 * (v162 % 0x2E);
  v164 = v172;
  v165 = v171;
  v172 = 0;
  v171 = 0uLL;
  *(_QWORD *)v163 = 0;
  *(_QWORD *)(v163 + 8) = 0;
  *(_QWORD *)(v163 + 16) = v57;
  *(_QWORD *)(v163 + 24) = v58;
  *(_OWORD *)(v163 + 32) = v165;
  *(_QWORD *)(v163 + 48) = v164;
  memset(v173, 0, 24);
  *(_BYTE *)(v163 + 80) = 0;
  *(_QWORD *)(v163 + 56) = 0;
  *(_QWORD *)(v163 + 64) = 0;
  *(_QWORD *)(v163 + 72) = 0;
  v179 = v173;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100]((void ***)&v179);
  ++*(_QWORD *)(a1 + 408);
  v173[0] = (void **)&v171;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](v173);
  v166 = *(_QWORD *)(a1 + 408) + *(_QWORD *)(a1 + 400) - 1;
  v46 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8 * (v166 / 0x2E)) + 88 * (v166 % 0x2E);
LABEL_80:
  if (v5 >= 0x41 && v47)
    MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
  if (v178 >= 0x41 && v177)
    MEMORY[0x24BD1B380](v177, 0x1000C8000313F17);
  return v46;
}

uint64_t `anonymous namespace'::AsmParser::instantiateMacroLikeBody(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[4];
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 5)
  {
    *(_WORD *)(v6 + 4) = 2674;
    *(_DWORD *)v6 = 1684956462;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, ".endr\n", 6uLL);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = *(const void **)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v40[0] = "<instantiation>";
  LOWORD(v41) = 259;
  getMemBufferCopyImpl(v8, v9, (unsigned __int8 *)v40, (uint64_t)&v42);
  if ((v44 & 1) != 0)
    v10 = 0;
  else
    v10 = v42;
  v11 = operator new();
  *(_QWORD *)v11 = a2;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + 280);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v13 = (uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 3;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
  *(_QWORD *)(v11 + 24) = v13;
  v15 = *(uint64_t **)(a1 + 352);
  v14 = *(_QWORD *)(a1 + 360);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(_QWORD **)(a1 + 344);
    v18 = v15 - v17;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_37;
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v22 = (char *)operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = (uint64_t *)&v22[8 * v18];
    *v23 = v11;
    v16 = v23 + 1;
    if (v15 != v17)
    {
      do
      {
        v24 = *--v15;
        *--v23 = v24;
      }
      while (v15 != v17);
      v15 = *(uint64_t **)(a1 + 344);
    }
    *(_QWORD *)(a1 + 344) = v23;
    *(_QWORD *)(a1 + 352) = v16;
    *(_QWORD *)(a1 + 360) = &v22[8 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = v11;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 352) = v16;
  v25 = *(uint64_t **)(a1 + 240);
  v44 = 0;
  v26 = (_QWORD *)v25[1];
  v27 = v25[2];
  if ((unint64_t)v26 < v27)
  {
    v26[1] = 0;
    v26[2] = 0;
    v42 = 0;
    v43 = 0;
    v28 = v26 + 3;
    *v26 = v10;
    goto LABEL_36;
  }
  v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - *v25) >> 3);
  v30 = v29 + 1;
  if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_37:
    abort();
  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
  if (2 * v31 > v30)
    v30 = 2 * v31;
  if (v31 >= 0x555555555555555)
    v32 = 0xAAAAAAAAAAAAAAALL;
  else
    v32 = v30;
  v41 = v25 + 2;
  if (v32)
    v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v25 + 2), v32);
  else
    v33 = 0;
  v34 = &v33[24 * v29];
  v40[0] = v33;
  v40[1] = v34;
  v40[3] = &v33[24 * v32];
  v42 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *(_QWORD *)v34 = v10;
  v43 = 0;
  v40[2] = v34 + 24;
  std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(v25, v40);
  v28 = (_QWORD *)v25[1];
  std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)v40);
LABEL_36:
  v25[1] = (uint64_t)v28;
  v35 = -1431655765 * (((unint64_t)v28 - *v25) >> 3);
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v42);
  *(_DWORD *)(a1 + 280) = v35;
  v36 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v35 - 1));
  v37 = *(_QWORD *)(v36 + 8);
  v38 = *(_QWORD *)(v36 + 16) - v37;
  *(_QWORD *)(a1 + 192) = v37;
  *(_QWORD *)(a1 + 200) = v38;
  *(_QWORD *)(a1 + 184) = v37;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 211) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t `anonymous namespace'::AsmParser::handleMacroExit(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2;
  uint64_t result;

  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(_QWORD *)this + 184))(this);
  v2 = *((_QWORD *)this + 44);
  result = *(_QWORD *)(v2 - 8);
  if (result)
  {
    result = MEMORY[0x24BD1B3A4](result, 0x1050C4073F788CFLL);
    v2 = *((_QWORD *)this + 44);
  }
  *((_QWORD *)this + 44) = v2 - 8;
  return result;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveLEB128(BOOL)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v8 = 0;
  v9 = 0;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 232))(v2, &v8, &v9);
  if ((v3 & 1) == 0)
  {
    v4 = *(unsigned __int8 *)a1[1];
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    v6 = 552;
    if (!v4)
      v6 = 544;
    (*(void (**)(_QWORD *, uint64_t))(*v5 + v6))(v5, v8);
  }
  return v3;
}

BOOL llvm::MCContext::isDwarfMD5UsageConsistent(llvm::MCContext *this)
{
  _QWORD *v1;
  char *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 196);
  if (!v1)
    goto LABEL_5;
  do
  {
    v2 = (char *)v1;
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  if (v2 == (char *)this + 1568 || *((_DWORD *)v2 + 8))
LABEL_5:
    v2 = (char *)this + 1568;
  return !*((_DWORD *)v2 + 36) || v2[489] == v2[490];
}

void llvm::MCDwarfLineTableHeader::resetFileTable(llvm::MCDwarfLineTableHeader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  llvm::SmallVectorImpl<std::string>::clear((uint64_t *)this + 1);
  v2 = *((unsigned int *)this + 26);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = 72 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 49) < 0)
        operator delete(*(void **)(v3 + v4 - 72));
      v4 -= 72;
    }
    while (v4);
  }
  *((_DWORD *)this + 26) = 0;
  if (*((char *)this + 399) < 0)
  {
    **((_BYTE **)this + 47) = 0;
    *((_QWORD *)this + 48) = 0;
  }
  else
  {
    *((_BYTE *)this + 376) = 0;
    *((_BYTE *)this + 399) = 0;
  }
  *((_BYTE *)this + 450) = 0;
  *((_WORD *)this + 224) = 256;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveLoc(void)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  const char *v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)a1;
  v20 = 0;
  v21 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v20))
  {
    v18[0] = "unexpected token in '.loc' directive";
    v19 = 259;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v4 + 96), (llvm::Twine *)v18, 0, 0);
    return 1;
  }
  switch(v21)
  {
    case 3:
      if (*(_WORD *)v20 != 29545 || *(_BYTE *)(v20 + 2) != 97)
        goto LABEL_47;
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
      v17 = 0;
      v18[0] = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v17, v18) & 1) != 0)
        return 1;
      if (*(_BYTE *)v17 == 1)
      {
        v7 = *(_DWORD *)(v17 + 16);
        if ((v7 & 0x80000000) == 0)
        {
          **(_DWORD **)(a1 + 16) = v7;
          return 0;
        }
        v16 = "isa number less than zero";
      }
      else
      {
        v16 = "isa number not a constant value";
      }
      goto LABEL_48;
    case 7:
      if (*(_DWORD *)v20 != 1935635305 || *(_DWORD *)(v20 + 3) != 1953330291)
        goto LABEL_47;
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
      v17 = 0;
      v18[0] = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v17, v18) & 1) != 0)
        return 1;
      if (*(_BYTE *)v17 != 1)
      {
        v16 = "is_stmt value not the constant value of 0 or 1";
        goto LABEL_48;
      }
      v9 = *(_DWORD *)(v17 + 16);
      if (v9 != 1)
      {
        if (!v9)
        {
          v10 = *(unsigned int **)(a1 + 8);
          v11 = *v10 & 0xFFFFFFFE;
          goto LABEL_50;
        }
        v16 = "is_stmt value not 0 or 1";
LABEL_48:
        v18[0] = v16;
        v19 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v18, 0, 0);
      }
      v10 = *(unsigned int **)(a1 + 8);
      v11 = *v10 | 1;
LABEL_50:
      *v10 = v11;
      return 0;
    case 11:
      if (*(_QWORD *)v20 != 0x6C625F6369736162 || *(_QWORD *)(v20 + 3) != 0x6B636F6C625F6369)
        goto LABEL_47;
      v10 = *(unsigned int **)(a1 + 8);
      v11 = *v10 | 2;
      goto LABEL_50;
    case 12:
      if (*(_QWORD *)v20 != 0x6575676F6C6F7270 || *(_DWORD *)(v20 + 8) != 1684956511)
        goto LABEL_47;
      v10 = *(unsigned int **)(a1 + 8);
      v11 = *v10 | 4;
      goto LABEL_50;
    case 13:
      if (*(_QWORD *)v20 != 0x696D697263736964 || *(_QWORD *)(v20 + 5) != 0x726F74616E696D69)
        goto LABEL_47;
      return ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 256))(v2, *(_QWORD *)(a1 + 24)) & 1) != 0;
    case 14:
      if (*(_QWORD *)v20 != 0x6575676F6C697065 || *(_QWORD *)(v20 + 6) != 0x6E696765625F6575)
        goto LABEL_47;
      v10 = *(unsigned int **)(a1 + 8);
      v11 = *v10 | 8;
      goto LABEL_50;
    default:
LABEL_47:
      v16 = "unknown sub-directive in '.loc' directive";
      goto LABEL_48;
  }
}

uint64_t `anonymous namespace'::AsmParser::parseCVFunctionId(llvm::MCAsmParser *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  const char *v11;
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;

  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v14 = 1283;
  v13[0] = "expected function id in '";
  v13[2] = a3;
  v13[3] = a4;
  v15[0] = v13;
  v15[2] = "' directive";
  v16 = 770;
  if (llvm::MCAsmParser::parseIntToken(a1, a2, (const llvm::Twine *)v15))
    return 1;
  v9 = *a2;
  v11 = "expected function id within range [0, UINT_MAX)";
  v12 = 259;
  if (v9 >= 0xFFFFFFFF)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v11, 0, 0);
    return 1;
  }
  return 0;
}

uint64_t `anonymous namespace'::AsmParser::parseCVFileId(llvm::MCContext **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::CodeViewContext *CVContext;
  uint64_t v11;
  _BOOL4 v12;
  llvm::Twine *v13;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;

  v8 = *(_QWORD *)(*(_QWORD *)((*((uint64_t (**)(llvm::MCContext **))*a1 + 5))(a1) + 8) + 8);
  v24 = 1283;
  v23[0] = "expected integer in '";
  v23[2] = a3;
  v23[3] = a4;
  v25[0] = v23;
  v25[2] = "' directive";
  v26 = 770;
  if (!llvm::MCAsmParser::parseIntToken((llvm::MCAsmParser *)a1, a2, (const llvm::Twine *)v25))
  {
    v9 = *a2;
    v20 = 1283;
    v19[0] = "file number less than one in '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "' directive";
    v22 = 770;
    if (v9 < 1)
    {
      v13 = (llvm::Twine *)v21;
    }
    else
    {
      CVContext = llvm::MCContext::getCVContext(a1[27]);
      v11 = (*(_DWORD *)a2 - 1);
      v12 = *((_DWORD *)CVContext + 12) <= v11
         || *(unsigned __int8 *)(*((_QWORD *)CVContext + 5) + 32 * v11 + 4) == 0;
      v16 = 1283;
      v15[0] = "unassigned file number in '";
      v15[2] = a3;
      v15[3] = a4;
      v17[0] = v15;
      v17[2] = "' directive";
      v18 = 770;
      if (!v12)
        return 0;
      v13 = (llvm::Twine *)v17;
    }
    llvm::MCAsmParser::Error((uint64_t)a1, v8, v13, 0, 0);
  }
  return 1;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveCVLoc(void)::$_0>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  const char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)a1;
  v14 = 0;
  v15 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v14))
  {
    v12[0] = "unexpected token in '.cv_loc' directive";
    v13 = 259;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v4 + 96), (llvm::Twine *)v12, 0, 0);
    return 1;
  }
  if (v15 != 7)
  {
    if (v15 == 12 && *(_QWORD *)v14 == 0x6575676F6C6F7270 && *(_DWORD *)(v14 + 8) == 1684956511)
    {
      result = 0;
      **(_BYTE **)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v14 != 1935635305 || *(_DWORD *)(v14 + 3) != 1953330291)
  {
LABEL_16:
    v8 = "unknown sub-directive in '.cv_loc' directive";
    goto LABEL_17;
  }
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  v11 = 0;
  v12[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v11, v12) & 1) != 0)
    return 1;
  v9 = *(unint64_t **)(a1 + 16);
  *v9 = -1;
  if (*(_BYTE *)v11 == 1)
  {
    v10 = *(_QWORD *)(v11 + 16);
    *v9 = v10;
    if (v10 < 2)
      return 0;
  }
  v8 = "is_stmt value not 0 or 1";
LABEL_17:
  v12[0] = v8;
  v13 = 259;
  return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v12, 0, 0);
}

uint64_t `anonymous namespace'::AsmParser::parseRegisterOrRegisterNumber(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  int DwarfRegNum;
  unsigned int v8;
  uint64_t v9;

  v9 = a3;
  v8 = 0;
  if (**(_DWORD **)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) == 4)
    return ((uint64_t (*)(_QWORD **, _QWORD *))(*a1)[32])(a1, a2);
  if (((*(uint64_t (**)(_QWORD *, unsigned int *, uint64_t *, uint64_t *))(*a1[1] + 32))(a1[1], &v8, &v9, &v9) & 1) != 0)return 1;
  v6 = ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
  DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v6 + 152), v8, 1);
  result = 0;
  *a2 = DwarfRegNum;
  return result;
}

uint64_t `anonymous namespace'::AsmParser::checkForBadMacro(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  __int16 v27;

  if (a6)
  {
    v6 = a4;
    if (a4)
    {
      v8 = 0;
      v9 = 0;
      v10 = a6;
      v11 = (_QWORD *)(a5 + 8);
      v12 = MEMORY[0x24BDAC740];
      do
      {
        v13 = 0;
        v14 = 1;
        while (1)
        {
          v15 = *(unsigned __int8 *)(a3 + v14 - 1);
          if (v6 != v14 && v15 == 92)
            break;
          if (v6 != v14 && v15 == 36)
          {
            v16 = *(unsigned __int8 *)(a3 + v14);
            if ((_DWORD)v16 == 36 || (_DWORD)v16 == 110 || (*(_DWORD *)(v12 + 4 * v16 + 60) & 0x400) != 0)
            {
              if ((_DWORD)v16 != 36)
                v9 = 1;
              v17 = v14 + 1;
              goto LABEL_36;
            }
          }
          ++v14;
          ++v13;
          if (v14 - v6 == 1)
            goto LABEL_40;
        }
        v20 = v8;
        v23 = v9;
        v24 = result;
        v25 = a2;
        do
        {
          v17 = (v13 + 1);
          if (isIdentifierChar(*(char *)(a3 + v17)))
            v18 = v6 == v13 + 2;
          else
            v18 = 1;
          ++v13;
        }
        while (!v18);
        v21 = v11;
        v22 = v10;
        while (v14 - v17 + *v11
             || v14 != v17 && memcmp((const void *)*(v11 - 1), (const void *)(a3 + v14), v17 - v14))
        {
          v11 += 6;
          if (!--v10)
            goto LABEL_31;
        }
        if ((_DWORD)v10)
        {
          v8 = 1;
          result = v24;
          a2 = v25;
          v9 = v23;
          goto LABEL_35;
        }
LABEL_31:
        if (*(_BYTE *)(a3 + v14) == 40 && *(_BYTE *)(a3 + v14 + 1) == 41)
          v17 = v14 + 2;
        result = v24;
        a2 = v25;
        v9 = v23;
        v8 = v20;
LABEL_35:
        v11 = v21;
        v10 = v22;
LABEL_36:
        if (v6 >= v17)
          v19 = v17;
        else
          v19 = v6;
        a3 += v19;
        v6 -= v19;
      }
      while (v6);
LABEL_40:
      if ((v8 & 1) == 0 && (v9 & 1) != 0)
      {
        v26 = "macro defined with named parameters which are not used in macro body, possible positional parameter found "
              "in body which will have no effect";
        v27 = 259;
        return (*(uint64_t (**)(uint64_t, uint64_t, const char **, _QWORD, _QWORD))(*(_QWORD *)result + 168))(result, a2, &v26, 0, 0);
      }
    }
  }
  return result;
}

void llvm::MCContext::defineMacro(_DWORD *a1, uint64_t *a2, unint64_t a3, __int128 *a4)
{
  llvm::StringMapImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void **v35[2];

  v7 = (llvm::StringMapImpl *)(a1 + 516);
  v26 = *a4;
  v27 = a4[1];
  v9 = *((_QWORD *)a4 + 4);
  v8 = *((_QWORD *)a4 + 5);
  v28 = v9;
  v29 = v8;
  v25 = v8;
  *((_QWORD *)a4 + 4) = 0;
  *((_QWORD *)a4 + 5) = 0;
  v10 = *((_QWORD *)a4 + 6);
  v11 = *((_QWORD *)a4 + 7);
  *((_QWORD *)a4 + 6) = 0;
  *((_QWORD *)a4 + 7) = 0;
  v23 = v11;
  v24 = v10;
  v30 = v10;
  v31 = v11;
  v12 = *((_QWORD *)a4 + 9);
  v22 = *((_QWORD *)a4 + 8);
  v32 = v22;
  v33 = v12;
  *((_QWORD *)a4 + 8) = 0;
  *((_QWORD *)a4 + 9) = 0;
  v21 = *((_BYTE *)a4 + 80);
  v34 = v21;
  v13 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)(a1 + 516), a2, a3);
  v14 = *((_QWORD *)a1 + 258);
  v15 = *(_QWORD *)(v14 + 8 * v13);
  if (v15)
  {
    if (v15 != -8)
      goto LABEL_7;
    --a1[520];
  }
  v20 = v9;
  v19 = v13;
  v16 = (char *)operator new(a3 + 97, (std::align_val_t)8uLL);
  v17 = v16;
  v18 = v16 + 96;
  if (a3)
    memcpy(v16 + 96, a2, a3);
  v18[a3] = 0;
  *(_OWORD *)(v17 + 8) = v26;
  *(_QWORD *)v17 = a3;
  *(_OWORD *)(v17 + 24) = v27;
  *((_QWORD *)v17 + 5) = v20;
  *((_QWORD *)v17 + 6) = v25;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  *((_QWORD *)v17 + 7) = v24;
  *((_QWORD *)v17 + 8) = v23;
  *((_QWORD *)v17 + 9) = v22;
  *((_QWORD *)v17 + 10) = v12;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v17[88] = v21;
  *(_QWORD *)(v14 + 8 * v19) = v17;
  ++a1[519];
  llvm::StringMapImpl::RehashTable(v7, v19);
LABEL_7:
  v35[0] = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v35);
  v35[0] = (void **)&v28;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](v35);
}

uint64_t llvm::StringMapEntry<llvm::MCAsmMacro>::Destroy<llvm::MallocAllocator>(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  v3 = (void **)(a1 + 40);
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](&v3);
  return MEMORY[0x24BD1B398](a1, 8);
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::AsmParser::parseDirectiveLTODiscard(void)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  int v9;
  const char *v10;
  __int16 v11;
  __int128 v12;

  v1 = *a1;
  v12 = 0uLL;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v1 + 192))(v1, &v12))
  {
    v10 = "expected identifier";
    v11 = 259;
    return llvm::MCAsmParser::Error(v1, v2, (llvm::Twine *)&v10, 0, 0);
  }
  if (*(_QWORD *)(v1 + 784))
  {
    v4 = (uint64_t **)(v1 + 768);
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 720);
    v6 = *(unsigned int *)(v1 + 728);
    v7 = v12;
    if (llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::vfind(v5, *(_DWORD *)(v1 + 728), (void *)v12, *((size_t *)&v12 + 1)) != v5 + 16 * v6)return 0;
    if (v6 <= 1)
    {
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)(v1 + 720), v7, *((uint64_t *)&v7 + 1));
      return 0;
    }
    do
    {
      v8 = (__int128 *)(*(_QWORD *)(v1 + 720) + 16 * v6 - 16);
      std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(v1 + 768), v8, v8);
      v9 = *(_DWORD *)(v1 + 728);
      LODWORD(v6) = v9 - 1;
      *(_DWORD *)(v1 + 728) = v9 - 1;
    }
    while (v9 != 1);
    v4 = (uint64_t **)(v1 + 768);
  }
  std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(v4, &v12, &v12);
  return 0;
}

uint64_t llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::vfind(uint64_t a1, unsigned int a2, void *__s2, size_t __n)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + 16 * a2;
  if (a2)
  {
    v7 = a1;
    v8 = 16 * a2;
    while (*(_QWORD *)(v7 + 8) != __n || __n && memcmp(*(const void **)v7, __s2, __n))
    {
      v7 += 16;
      v8 -= 16;
      if (!v8)
        return v4;
    }
    return v7;
  }
  return v4;
}

__n128 llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  char v26;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 0;
  v25 = 1;
  v26 = 0;
  v5 = llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v13);
  v6 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7);
  v8 = *(_OWORD *)(v5 + 32);
  v7 = *(_OWORD *)(v5 + 48);
  v9 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v5;
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v7;
  result = *(__n128 *)(v5 + 112);
  v11 = *(_OWORD *)(v5 + 64);
  v12 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(v5 + 96);
  *(__n128 *)(v6 + 112) = result;
  *(_OWORD *)(v6 + 64) = v11;
  *(_OWORD *)(v6 + 80) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

__n128 llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int,unsigned int>(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;

  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v19 = 0;
  v20 = 0;
  v18 = a5;
  v21 = 0;
  v26 = 1;
  v27 = 0;
  v6 = llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v14);
  v7 = *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7);
  v9 = *(_OWORD *)(v6 + 32);
  v8 = *(_OWORD *)(v6 + 48);
  v10 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v6;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v8;
  result = *(__n128 *)(v6 + 112);
  v12 = *(_OWORD *)(v6 + 64);
  v13 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(v6 + 96);
  *(__n128 *)(v7 + 112) = result;
  *(_OWORD *)(v7 + 64) = v12;
  *(_OWORD *)(v7 + 80) = v13;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int>(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 0;
  v27 = 1;
  v28 = 0;
  v5 = (_OWORD *)llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v15);
  v6 = (_OWORD *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v8 = v5[2];
  v7 = v5[3];
  v9 = v5[1];
  *v6 = *v5;
  v6[1] = v9;
  v6[2] = v8;
  v6[3] = v7;
  v10 = v5[7];
  v11 = v5[4];
  v12 = v5[5];
  v6[6] = v5[6];
  v6[7] = v10;
  v6[4] = v11;
  v6[5] = v12;
  v13 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v13;
  return *(_QWORD *)a1 + (v13 << 7) - 128;
}

void llvm::MCAsmParser::printPendingErrors(llvm::MCAsmParser *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  _BYTE v19[64];
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = v3 + 112 * v2;
    v5 = v3 + 8;
    do
    {
      v7 = v5 - 8;
      v6 = *(_QWORD *)(v5 - 8);
      v16 = v6;
      v17 = v19;
      v18 = xmmword_24AA2B2D0;
      v8 = *(_QWORD *)(v5 + 8);
      if (v8)
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v17, v5);
        v6 = v16;
        v9 = v17;
        v8 = v18;
      }
      else
      {
        v9 = v19;
      }
      v20 = *(_OWORD *)(v5 + 88);
      v15 = 261;
      v14[0] = v9;
      v14[1] = v8;
      (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 176))(this, v6, v14, v20, *((_QWORD *)&v20 + 1));
      if (v17 != v19)
        free(v17);
      v5 += 112;
    }
    while (v7 + 112 != v4);
    v10 = *((unsigned int *)this + 6);
    if ((_DWORD)v10)
    {
      v11 = *((_QWORD *)this + 2);
      v12 = 112 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 104);
        if ((void *)(v11 + v12 - 80) != v13)
          free(v13);
        v12 -= 112;
      }
      while (v12);
    }
  }
  *((_DWORD *)this + 6) = 0;
}

BOOL llvm::SetVector<llvm::MCSection *,std::vector<llvm::MCSection *>,llvm::DenseSet<llvm::MCSection *,llvm::DenseMapInfo<llvm::MCSection *,void>>>::insert(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 v21;

  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)a1, a2, (uint64_t)&v20);
  v4 = v21;
  if (v21)
  {
    v5 = a1[5];
    v6 = (_QWORD *)a1[4];
    if ((unint64_t)v6 >= v5)
    {
      v8 = a1[3];
      v9 = ((uint64_t)v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v5 - v8;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 5), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      v17 = (char *)a1[3];
      v16 = (char *)a1[4];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

char **llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + (v6 << 7);
  *(_DWORD *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(_BYTE *)(v7 + 20) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 24) = a5;
  *(_BYTE *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 112) = 1;
  *(_BYTE *)(v7 + 120) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t rewritesSort(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v3 < v2)
    return 1;
  if (llvm::AsmRewritePrecedence[*a1] > llvm::AsmRewritePrecedence[*a2])
    return 0xFFFFFFFFLL;
  return 1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, char a6)
{
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  char v30;

  v17 = a2;
  v18 = a3;
  v19 = a4;
  v20 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v22 = 0;
  v23 = 0;
  v21 = a5;
  v24 = 0;
  v29 = 1;
  v30 = a6;
  v7 = (_OWORD *)llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v17);
  v8 = (_OWORD *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  v10 = v7[2];
  v9 = v7[3];
  v11 = v7[1];
  *v8 = *v7;
  v8[1] = v11;
  v8[2] = v10;
  v8[3] = v9;
  v12 = v7[7];
  v13 = v7[4];
  v14 = v7[5];
  v8[6] = v7[6];
  v8[7] = v12;
  v8[4] = v13;
  v8[5] = v14;
  v15 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v15;
  return *(_QWORD *)a1 + (v15 << 7) - 128;
}

uint64_t llvm::array_pod_sort_comparator<unsigned int>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void `anonymous namespace'::AsmParser::printMacroInstantiations(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v1;
  uint64_t v2;
  char **v4;
  char *v5;
  uint64_t *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::formatv_object_base *v9;
  __int16 v10;
  unint64_t v11[2];

  v2 = *((_QWORD *)this + 43);
  v1 = *((_QWORD *)this + 44);
  while (v1 != v2)
  {
    v4 = *(char ***)(v1 - 8);
    v1 -= 8;
    v5 = *v4;
    v9 = (llvm::formatv_object_base *)"while in macro instantiation";
    v10 = 259;
    v11[0] = 0;
    v11[1] = 0;
    v6 = (uint64_t *)*((_QWORD *)this + 30);
    v7 = (llvm::raw_ostream *)llvm::errs(this);
    llvm::SourceMgr::PrintMessage(v6, v7, v5, 3, &v9, v11, 1, v8, 0, 0, 1u);
  }
}

uint64_t `anonymous namespace'::AsmParser::parseBinOpRHS(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int BinOpPrecedence;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v17;
  uint64_t v18;
  int v19;

  v8 = *(_QWORD *)(a1 + 136);
  v19 = 0;
  if (BinOpPrecedence < a2)
    return 0;
  v10 = BinOpPrecedence;
  while (1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v18 = 0;
    {
      break;
    }
    v11 = v19;
    v12 = *a3;
    v13 = v18;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v15 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v14 + 184, 32, 3);
    *(_BYTE *)v15 = 0;
    *(_DWORD *)(v15 + 1) = v11 & 0xFFFFFF | (*(unsigned __int8 *)(v15 + 4) << 24);
    *(_QWORD *)(v15 + 8) = v8;
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v13;
    *a3 = v15;
    v19 = 0;
    if (v10 < a2)
      return 0;
  }
  return 1;
}

uint64_t `anonymous namespace'::AsmParser::applyModifierToExpr(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
  if (!result)
    __asm { BR              X10 }
  return result;
}

void sub_24A94E534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  if (v2 | v3)
  {
    v4 = v3;
    if (!v2)
      v2 = *(_QWORD *)(v1 + 16);
    if (!v3)
      v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_DWORD *)(v1 + 1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 48))(v0);
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v6 + 184, 32, 3);
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 1) = v5 & 0xFFFFFF | (*(unsigned __int8 *)(v7 + 4) << 24);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = v4;
  }
  JUMPOUT(0x24A94E504);
}

uint64_t `anonymous namespace'::AsmParser::getBinOpPrecedence(uint64_t a1, char a2, int a3, int *a4)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v4 = *(unsigned __int8 *)(a1 + 488);
  if (a2)
  {
    result = 0;
    v6 = 1;
    v7 = 6;
    switch(a3)
    {
      case 12:
        v7 = 0;
        v6 = 5;
        goto LABEL_44;
      case 13:
        v6 = 5;
        goto LABEL_25;
      case 15:
        goto LABEL_6;
      case 23:
        goto LABEL_7;
      case 28:
        goto LABEL_8;
      case 29:
        v6 = 2;
        goto LABEL_27;
      case 30:
        goto LABEL_29;
      case 31:
        v6 = 2;
        goto LABEL_31;
      case 32:
        v6 = 2;
        goto LABEL_33;
      case 33:
        goto LABEL_44;
      case 35:
      case 41:
        goto LABEL_5;
      case 36:
        goto LABEL_9;
      case 38:
        goto LABEL_10;
      case 39:
        goto LABEL_11;
      case 40:
        v6 = 4;
        goto LABEL_38;
      case 42:
        goto LABEL_12;
      case 43:
        goto LABEL_13;
      case 44:
        if (v4)
          v7 = 17;
        else
          v7 = 16;
        goto LABEL_23;
      default:
        return result;
    }
  }
  else
  {
    result = 0;
    v6 = 2;
    v7 = 6;
    switch(a3)
    {
      case 12:
        v7 = 0;
LABEL_23:
        v6 = 4;
        goto LABEL_44;
      case 13:
        v6 = 4;
LABEL_25:
        v7 = 18;
        goto LABEL_44;
      case 15:
LABEL_6:
        v6 = 6;
        v7 = 2;
        goto LABEL_44;
      case 23:
LABEL_7:
        v6 = 6;
        v7 = 11;
        goto LABEL_44;
      case 28:
LABEL_8:
        v7 = 3;
        v6 = 3;
        goto LABEL_44;
      case 29:
        v6 = 5;
LABEL_27:
        v7 = 13;
        goto LABEL_44;
      case 30:
        v6 = 1;
LABEL_29:
        v7 = 7;
        goto LABEL_44;
      case 31:
        v6 = 5;
LABEL_31:
        v7 = 19;
        goto LABEL_44;
      case 32:
        v6 = 5;
LABEL_33:
        v7 = 1;
        goto LABEL_44;
      case 33:
        goto LABEL_44;
      case 34:
        if (*(_QWORD *)(a1 + 56) == 1 && **(_BYTE **)(a1 + 48) == 64)
        {
          result = 0;
        }
        else
        {
          v6 = 5;
          v7 = 14;
LABEL_44:
          *a4 = v7;
          result = v6;
        }
        break;
      case 35:
      case 41:
LABEL_5:
        v6 = 3;
        v7 = 12;
        goto LABEL_44;
      case 36:
LABEL_9:
        v6 = 6;
        v7 = 10;
        goto LABEL_44;
      case 38:
LABEL_10:
        v6 = 3;
        v7 = 8;
        goto LABEL_44;
      case 39:
LABEL_11:
        v6 = 3;
        v7 = 9;
        goto LABEL_44;
      case 40:
        v6 = 6;
LABEL_38:
        v7 = 15;
        goto LABEL_44;
      case 42:
LABEL_12:
        v6 = 3;
        v7 = 4;
        goto LABEL_44;
      case 43:
LABEL_13:
        v6 = 3;
        v7 = 5;
        goto LABEL_44;
      case 44:
        if (v4)
          v7 = 17;
        else
          v7 = 16;
        v6 = 6;
        goto LABEL_44;
      default:
        return result;
    }
  }
  return result;
}

__n128 llvm::SmallVectorTemplateBase<std::tuple<llvm::SMLoc,`anonymous namespace'::AsmParser::CppHashInfoTy,llvm::MCSymbol *>,true>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + 56 * v4;
    if (v5 <= a2 && v11 > a2)
    {
      v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 56);
      v5 = *(_QWORD *)a1;
      v2 = *(_QWORD *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 56);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 56 * *(unsigned int *)(a1 + 8);
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v2 + 48);
  *(_OWORD *)(v6 + 16) = v8;
  *(_OWORD *)(v6 + 32) = v9;
  *(__n128 *)v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL `anonymous namespace'::AsmParser::parseParenExpr(llvm::MCAsmParser *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD v6[4];
  __int16 v7;

  v6[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 232))(a1, a2, v6) & 1) != 0)
    return 1;
  *a3 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 8) + *(_QWORD *)(*((_QWORD *)a1 + 6) + 16);
  v6[0] = "expected ')'";
  v7 = 259;
  return llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)v6);
}

BOOL `anonymous namespace'::AsmParser::parseBracketExpr(llvm::MCAsmParser *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  v7[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 232))(a1, a2, v7) & 1) != 0)
    return 1;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  *a3 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16);
  v7[0] = "expected ']' in brackets expression";
  v8 = 259;
  return llvm::MCAsmParser::parseToken(a1, 20, (llvm::Twine *)v7);
}

llvm::MCAsmLexer *`anonymous namespace'::HLASMAsmParser::lexLeadingSpaces(_anonymous_namespace_::HLASMAsmParser *this)
{
  llvm::MCAsmLexer *result;

  for (result = (llvm::MCAsmLexer *)*((_QWORD *)this + 106);
        **((_DWORD **)result + 1) == 11;
        result = (llvm::MCAsmLexer *)*((_QWORD *)this + 106))
  {
    llvm::MCAsmLexer::Lex(result);
  }
  return result;
}

void `anonymous namespace'::COFFAsmParser::~COFFAsmParser(_anonymous_namespace_::COFFAsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::COFFAsmParser::Initialize(_anonymous_namespace_::COFFAsmParser *this, llvm::MCAsmParser *a2)
{
  *((_QWORD *)this + 1) = a2;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSectionDirectiveText>(uint64_t a1)
{
}

BOOL `anonymous namespace'::COFFAsmParser::ParseSectionSwitch(uint64_t a1, const void *a2, std::string::size_type a3, int a4, int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MCContext *v20;
  unint64_t COFFSection;
  const char *v23;
  __int16 v24;

  v16 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v16 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v20 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v20, a2, a3, a4, a5, a6, a7, a8, -1, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v19 + 168))(v19, COFFSection, 0);
  }
  else
  {
    v23 = "unexpected token in section switching directive";
    v24 = 259;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (llvm::Twine *)&v23, 0, 0);
  }
  return v16 != 9;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSectionDirectiveData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSectionDirectiveBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSection>(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  std::string::size_type v4;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  const char *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  unsigned __int8 v42;
  const char *v43;
  __int16 v44;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
LABEL_72:
    v32 = "expected identifier in directive";
LABEL_93:
    v43 = v32;
    v44 = 259;
    v38 = *(_QWORD *)(a1 + 8);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    llvm::MCAsmParser::Error(v38, *(_QWORD *)(v39 + 96), (llvm::Twine *)&v43, 0, 0);
    return 1;
  }
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(unsigned __int16 **)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v7 = v2 + 8;
    v5 = *(unsigned __int16 **)(v2 + 8);
    v6 = *(_QWORD *)(v7 + 8);
    v8 = v6 != 0;
    if (v6)
      v3 = (unsigned __int16 *)((char *)v5 + 1);
    else
      v3 = v5;
    if (v6 - 1 < v8)
      v9 = 1;
    else
      v9 = v6 - 1;
    if (v9 >= v6)
      v9 = v6;
    v4 = v9 - v8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v31 = -1073741760;
    goto LABEL_67;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    v32 = "expected string in directive";
    goto LABEL_93;
  }
  v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  v15 = *(_QWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  v16 = v14 - 1;
  v17 = v14 != 0;
  if (v14 - 1 < v17)
    v16 = 1;
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = v16;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v19 = v18 - v17;
  if (v18 == v17)
  {
LABEL_51:
    v21 = 8;
    goto LABEL_52;
  }
  v20 = 0;
  v21 = 0;
  v22 = (_BYTE *)(v15 + v17);
  v10 = 28;
  v11 = 2;
  v12 = 6;
  while (2)
  {
    switch(*v22)
    {
      case 'a':
        goto LABEL_49;
      case 'b':
        if ((v21 & 8) != 0)
          goto LABEL_95;
        v21 = v21 & 0xFFFFFFFA | 1;
        goto LABEL_49;
      case 'c':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_96;
      case 'd':
        if ((v21 & 1) != 0)
        {
LABEL_95:
          v32 = "conflicting section flags 'b' and 'd'.";
          goto LABEL_93;
        }
        v23 = v21 & 0xFFFFFF77;
        if ((v21 & 0x20) != 0)
          v24 = 8;
        else
          v24 = 12;
LABEL_41:
        v21 = v24 | v23;
LABEL_49:
        ++v22;
        if (--v19)
          continue;
        if (!v21)
          goto LABEL_51;
LABEL_52:
        if ((v21 & 5) == 1)
          v27 = ((int)(v21 << 30) >> 31) & 0x20000020 | (((v21 >> 3) & 1) << 6) | 0x80;
        else
          v27 = ((int)(v21 << 30) >> 31) & 0x20000020 | (((v21 >> 3) & 1) << 6);
        v28 = v27 & 0xFFFFF7FF | (((v21 >> 5) & 1) << 11);
        if ((v21 & 0x100) != 0 || v4 >= 6 && (*(_DWORD *)v3 == 1650811950 ? (v29 = v3[2] == 26485) : (v29 = 0), v29))
          v28 |= 0x2000000u;
        v29 = (v21 & 0x2D0) == 192;
        v30 = v28 | ((v21 << 24) & 0xD0000000 | v21 & 0x200) ^ 0xC0000000;
        if (v29)
          v31 = v28;
        else
          v31 = v30;
LABEL_67:
        v42 = 0;
        v40 = 0;
        v41 = 0;
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v10, v11, v12)+ 8) != 25)goto LABEL_77;
        v42 = 2;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2)
        {
          v32 = "expected comdat type such as 'discard' or 'largest' after protection bits";
          goto LABEL_93;
        }
          return 1;
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
        {
          v32 = "expected comma in directive";
          goto LABEL_93;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        if ((*(unsigned int (**)(_QWORD, std::string::size_type *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v40))
        {
          goto LABEL_72;
        }
        v31 |= 0x1000u;
LABEL_77:
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
        {
          v32 = "unexpected token in directive";
          goto LABEL_93;
        }
        if (v31 >> 30 == 1)
          v33 = 4;
        else
          v33 = 19;
        if ((v31 & 0x20000000) != 0)
          v34 = 2;
        else
          v34 = v33;
        if ((v34 & 0xFFFFFFFE) == 2)
        {
          v35 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 48);
          if (v35 == 35 || v35 == 1)
            v31 |= 0x20000u;
        }
        return 0;
      case 'i':
        v21 |= 0x200u;
        goto LABEL_49;
      case 'n':
        v21 = v21 & 0xFFFFFFDB | 0x20;
        goto LABEL_49;
      case 'r':
        v20 = 0;
        if ((v21 & 2) != 0)
          v25 = 128;
        else
          v25 = 136;
        v21 |= (v25 | (v21 >> 3) & 4) ^ 4;
        goto LABEL_49;
      case 's':
        v23 = v21 & 0xFFFFFF67;
        if ((v21 & 0x20) != 0)
          v24 = 24;
        else
          v24 = 28;
        goto LABEL_41;
      case 'w':
        v21 &= ~0x80u;
        v20 = 1;
        goto LABEL_49;
      case 'x':
        if ((v21 & 0x20) != 0)
          v26 = 2;
        else
          v26 = 6;
        v21 |= v26;
        if ((v20 & 1) == 0)
          v21 |= 0x80u;
        goto LABEL_49;
      case 'y':
        v21 |= 0xC0u;
        goto LABEL_49;
      default:
        if (*v22 != 68)
        {
LABEL_96:
          v32 = "unknown flag";
          goto LABEL_93;
        }
        v21 |= 0x100u;
        goto LABEL_49;
    }
  }
}

uint64_t `anonymous namespace'::COFFAsmParser::parseCOMDATType(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v4 == 2)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = v7 - 1;
    v9 = v7 != 0;
    if (v7)
      ++v5;
    if (v8 < v9)
      v8 = 1;
    if (v8 >= v7)
      v8 = v7;
    v6 = v8 - v9;
  }
  switch(v6)
  {
    case 6uLL:
      if (*(_DWORD *)v5 != 1702323566 || *(_WORD *)(v5 + 4) != 29811)
        goto LABEL_45;
      v11 = 7;
      goto LABEL_48;
    case 7uLL:
      if (*(_DWORD *)v5 == 1668508004 && *(_DWORD *)(v5 + 3) == 1685217635)
      {
        v11 = 2;
      }
      else
      {
        if (*(_DWORD *)v5 != 1735549292 || *(_DWORD *)(v5 + 3) != 1953719655)
        {
LABEL_45:
          *a2 = 0;
          v21 = 1283;
          v20[0] = "unrecognized COMDAT type '";
          v20[2] = v5;
          v20[3] = v6;
          v22[0] = v20;
          v22[2] = "'";
          v23 = 770;
          v17 = *(_QWORD *)(a1 + 8);
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (llvm::Twine *)v22, 0, 0);
          return 1;
        }
        v11 = 6;
      }
LABEL_48:
      *a2 = v11;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      return 0;
    case 8uLL:
      if (*(_QWORD *)v5 != 0x796C6E6F5F656E6FLL)
        goto LABEL_45;
      v11 = 1;
      goto LABEL_48;
    case 9uLL:
      if (*(_QWORD *)v5 != 0x7A69735F656D6173 || *(_BYTE *)(v5 + 8) != 101)
        goto LABEL_45;
      v11 = 3;
      goto LABEL_48;
    case 0xBuLL:
      if (*(_QWORD *)v5 != 0x746169636F737361 || *(_QWORD *)(v5 + 3) != 0x657669746169636FLL)
        goto LABEL_45;
      v11 = 5;
      goto LABEL_48;
    case 0xDuLL:
      if (*(_QWORD *)v5 != 0x6E6F635F656D6173 || *(_QWORD *)(v5 + 5) != 0x73746E65746E6F63)
        goto LABEL_45;
      v11 = 4;
      goto LABEL_48;
    default:
      goto LABEL_45;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveDef>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::MCContext *v5;
  unint64_t Symbol;
  uint64_t v7;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v2 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11);
  if ((_DWORD)v2)
  {
    v9[0] = "expected identifier in directive";
    v10 = 259;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(_QWORD *)(v4 + 96), (llvm::Twine *)v9, 0, 0);
  }
  else
  {
    v5 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v10 = 261;
    v9[0] = v11;
    v9[1] = v12;
    Symbol = llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v9);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 312))(v7, Symbol);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  }
  return v2;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveScl>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v8 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 320))(v2, v8);
      return 0;
    }
    v6 = "unexpected token in directive";
    v7 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveType>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v8 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 328))(v2, v8);
      return 0;
    }
    v6 = "unexpected token in directive";
    v7 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveEndef>(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSecRel32>(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  llvm::MCContext *v7;
  unint64_t Symbol;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v13))
  {
    v2 = "expected identifier in directive";
LABEL_9:
    v11[0] = v2;
    v12 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (llvm::Twine *)v11, 0, 0);
    return 1;
  }
  v10 = 0;
  v3 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 12)
  {
    v3 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v10) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v2 = "unexpected token in directive";
    goto LABEL_9;
  }
  if (HIDWORD(v10))
  {
    v11[0] = "invalid '.secrel32' directive offset, can't be less than zero or greater than std::numeric_limits<uint32_t>::max()";
    v12 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v3, (llvm::Twine *)v11, 0, 0);
  }
  else
  {
    v7 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v12 = 261;
    v11[0] = v13;
    v11[1] = v14;
    Symbol = llvm::MCContext::getOrCreateSymbol(v7, (const llvm::Twine *)v11);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 368))(v9, Symbol, v10);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSymIdx>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v10 = 261;
      v9[0] = v11;
      v9[1] = v12;
      Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 352))(v5, Symbol);
      return 0;
    }
    v2 = "unexpected token in directive";
  }
  v9[0] = v2;
  v10 = 259;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)v9, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSafeSEH>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v10 = 261;
      v9[0] = v11;
      v9[1] = v12;
      Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 344))(v5, Symbol);
      return 0;
    }
    v2 = "unexpected token in directive";
  }
  v9[0] = v2;
  v10 = 259;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)v9, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSecIdx>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v10 = 261;
      v9[0] = v11;
      v9[1] = v12;
      Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v9);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 360))(v5, Symbol);
      return 0;
    }
    v2 = "unexpected token in directive";
  }
  v9[0] = v2;
  v10 = 259;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)v9, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveLinkOnce>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int128 v15;
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  unsigned __int8 v19;

  v19 = 2;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v7 = *(unsigned int *)(v6 + 152);
    if ((_DWORD)v7)
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 32 * v7 - 32);
    else
      v8 = 0;
    if (v19 == 5)
    {
      v17[0] = "cannot make section associative with .linkonce";
      v9 = 259;
LABEL_12:
      v18 = v9;
      return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), a4, (llvm::Twine *)v17, 0, 0);
    }
    v10 = *(_DWORD *)(v8 + 224);
    if ((v10 & 0x1000) != 0)
    {
      v14 = "section '";
      v15 = *(_OWORD *)(v8 + 200);
      v16 = 1283;
      v17[0] = &v14;
      v17[2] = "' is already linkonce";
      v9 = 770;
      goto LABEL_12;
    }
    *(_DWORD *)(v8 + 240) = v19;
    *(_DWORD *)(v8 + 224) = v10 | 0x1000;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      return 0;
    v17[0] = "unexpected token in directive";
    v18 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (llvm::Twine *)v17, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveRVA>(uint64_t a1)
{
  uint64_t result;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v5 = a1;
  if ((_DWORD)result)
  {
    v3 = " in directive";
    v4 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)&v3);
  }
  return result;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<`anonymous namespace'::COFFAsmParser::ParseDirectiveRVA(llvm::StringRef,llvm::SMLoc)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::MCContext *v6;
  unint64_t Symbol;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *a1;
  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 8) + 192))(*(_QWORD *)(v1 + 8), &v12))
  {
    v10[0] = "expected identifier in directive";
    v11 = 259;
    v2 = *(_QWORD *)(v1 + 8);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v3 + 96), (llvm::Twine *)v10, 0, 0);
    return 1;
  }
  v9 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 8) != 12
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 8) != 13)
  {
    goto LABEL_9;
  }
  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 96);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 8) + 256))(*(_QWORD *)(v1 + 8), &v9) & 1) != 0)
    return 1;
  if (v9 != (int)v9)
  {
    v10[0] = "invalid '.rva' directive offset, can't be less than -2147483648 or greater than 2147483647";
    v11 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(v1 + 8), v4, (llvm::Twine *)v10, 0, 0);
  }
  else
  {
LABEL_9:
    v6 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 48))(*(_QWORD *)(v1 + 8));
    v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v10);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 56))(*(_QWORD *)(v1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 376))(v8, Symbol, v9);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm::MCContext *v8;
  unint64_t Symbol;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t i;

  if (a3 != 14)
  {
    if (a3 == 5 && *(_DWORD *)a2 == 1634039598 && *(_BYTE *)(a2 + 4) == 107)
    {
      v5 = 24;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(_QWORD *)a2 != 0x6E615F6B6165772ELL || *(_QWORD *)(a2 + 6) != 0x7065645F69746E61)
  {
LABEL_13:
    v5 = 0;
    goto LABEL_14;
  }
  v5 = 29;
LABEL_14:
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_15:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v16 = 0;
  for (i = 0;
        ((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v16) & 1) == 0;
        i = 0)
  {
    v8 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v15 = 261;
    v14[0] = v16;
    v14[1] = i;
    Symbol = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)v14);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 296))(v10, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_15;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    {
      v11 = "unexpected token in directive";
      goto LABEL_23;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v16 = 0;
  }
  v11 = "expected identifier in directive";
LABEL_23:
  v14[0] = v11;
  v15 = 259;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (llvm::Twine *)v14, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveStartProc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MCContext *v6;
  unint64_t Symbol;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v6 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v13 = 261;
      v12[0] = v14;
      v12[1] = v15;
      Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v12);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 1040))(v8, Symbol, a4);
      return 0;
    }
    v12[0] = "unexpected token in directive";
    v13 = 259;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (llvm::Twine *)v12, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndProc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1048))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndFuncletOrFunc>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1056))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveStartChained>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1064))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndChained>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1072))(v6, a4);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveHandler>(_anonymous_namespace_::COFFAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MCContext *v6;
  unint64_t Symbol;
  uint64_t v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13[2];
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  if (((*(uint64_t (**)(_QWORD *, uint64_t *))(**((_QWORD **)a1 + 1) + 192))(*((_QWORD **)a1 + 1), &v16) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1)) + 8) == 25)
  {
    (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 184))(*((_QWORD **)a1 + 1));
    *(_WORD *)v13 = 0;
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1)) + 8) == 25)
    {
      (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 184))(*((_QWORD **)a1 + 1));
        return 1;
    }
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1)) + 8) == 9)
    {
      v6 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 48))(*((_QWORD **)a1 + 1));
      v15 = 261;
      v14[0] = v16;
      v14[1] = v17;
      Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v14);
      (*(void (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 184))(*((_QWORD **)a1 + 1));
      v8 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 56))(*((_QWORD **)a1 + 1));
      (*(void (**)(uint64_t, unint64_t, BOOL, BOOL, uint64_t))(*(_QWORD *)v8 + 1136))(v8, Symbol, v13[1], v13[0], a4);
      return 0;
    }
    v10 = "unexpected token in directive";
  }
  else
  {
    v10 = "you must specify one or both of @unwind or @except";
  }
  v14[0] = v10;
  v15 = 259;
  v11 = *((_QWORD *)a1 + 1);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (llvm::Twine *)v14, 0, 0);
  return 1;
}

uint64_t `anonymous namespace'::COFFAsmParser::ParseAtUnwindOrAtExcept(_anonymous_namespace_::COFFAsmParser *this, BOOL *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 45
    || **(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 36)
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 96);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v14)|| v15 != 6)
    {
LABEL_13:
      v12[0] = "expected @unwind or @except";
      v13 = 259;
      return llvm::MCAsmParser::Error(*((_QWORD *)this + 1), v6, (llvm::Twine *)v12, 0, 0);
    }
    if (*(_DWORD *)v14 == 1769434741 && *(_WORD *)(v14 + 4) == 25710)
    {
      result = 0;
      *a2 = 1;
    }
    else
    {
      if (*(_DWORD *)v14 != 1701017701 || *(_WORD *)(v14 + 4) != 29808)
        goto LABEL_13;
      result = 0;
      *a3 = 1;
    }
  }
  else
  {
    v12[0] = "a handler attribute must begin with '@' or '%'";
    v13 = 259;
    v10 = *((_QWORD *)this + 1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (llvm::Twine *)v12, 0, 0);
    return 1;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveHandlerData>(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 1144))(v2, 0);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveAllocStack>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v12 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v12) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 1096))(v6, v12, a4);
      return 0;
    }
    v10 = "unexpected token in directive";
    v11 = 259;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (llvm::Twine *)&v10, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::COFFAsmParser,&`anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndProlog>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1128))(v6, a4);
  return 0;
}

void `anonymous namespace'::GOFFAsmParser::~GOFFAsmParser(_anonymous_namespace_::GOFFAsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::GOFFAsmParser::Initialize(uint64_t this, llvm::MCAsmParser *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t getOSTypeFromPlatform(int a1)
{
  return dword_24AA32B44[a1 - 1];
}

void `anonymous namespace'::DarwinAsmParser::~DarwinAsmParser(_anonymous_namespace_::DarwinAsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::DarwinAsmParser::Initialize(_anonymous_namespace_::DarwinAsmParser *this, llvm::MCAsmParser *a2)
{
  uint64_t result;

  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveAltEntry>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  llvm::MCSymbol *Symbol;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v2 = "expected identifier in directive";
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v10);
    llvm::MCSymbol::getFragment(Symbol, 1);
    if (v5)
    {
      v2 = ".alt_entry must preceed symbol definition";
    }
    else
    {
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      if (((*(uint64_t (**)(uint64_t, llvm::MCSymbol *, uint64_t))(*(_QWORD *)v6 + 296))(v6, Symbol, 20) & 1) != 0)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        return 0;
      }
      v2 = "unable to emit symbol attribute";
    }
  }
  v10[0] = v2;
  v11 = 259;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (llvm::Twine *)v10, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDesc>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v2 = "expected identifier in directive";
LABEL_8:
    v10[0] = v2;
    v11 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)v10, 0, 0);
    return 1;
  }
  v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v10);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_7:
    v2 = "unexpected token in '.desc' directive";
    goto LABEL_8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v9) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 304))(v5, Symbol, v9);
      return 0;
    }
    goto LABEL_7;
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveIndirectSymbol>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  const char *v11;
  llvm::MCContext *v12;
  unint64_t Symbol;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 144) + 32 * *(unsigned int *)(v6 + 152) - 32) + 240);
  v8 = v7 > 0x14;
  v9 = (1 << v7) & 0x1001C0;
  if (v8 || v9 == 0)
  {
    v21[0] = "indirect symbol not in a symbol pointer or stub section";
    v22 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), a4, (llvm::Twine *)v21, 0, 0);
  }
  v19 = 0;
  v20 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19))
  {
    v11 = "expected identifier in .indirect_symbol directive";
LABEL_15:
    v21[0] = v11;
    v22 = 259;
    goto LABEL_16;
  }
  v12 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v22 = 261;
  v21[0] = v19;
  v21[1] = v20;
  Symbol = llvm::MCContext::getOrCreateSymbol(v12, (const llvm::Twine *)v21);
  if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
  {
    v11 = "non-local symbol required in directive";
    goto LABEL_15;
  }
  v14 = Symbol;
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v15 + 296))(v15, v14, 14) & 1) != 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      return 0;
    }
    v11 = "unexpected token in '.indirect_symbol' directive";
    goto LABEL_15;
  }
  v22 = 1283;
  v21[0] = "unable to emit indirect symbol attribute for: ";
  v21[2] = v19;
  v21[3] = v20;
LABEL_16:
  v17 = *(_QWORD *)(a1 + 8);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (llvm::Twine *)v21, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveLsym>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v10))
  {
    v2 = "expected identifier in directive";
LABEL_8:
    v8[0] = v2;
    v9 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_7:
    v2 = "unexpected token in '.lsym' directive";
    goto LABEL_8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v7 = 0;
  v8[0] = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), &v7, v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v2 = "directive '.lsym' is unsupported";
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  return 1;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveSubsectionsViaSymbols>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v5, 1);
  }
  else
  {
    v7 = "unexpected token in '.subsections_via_symbols' directive";
    v8 = 259;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(_QWORD *)(v4 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDumpOrLoad>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  v7 = a3 == 5 && *(_DWORD *)a2 == 1836409902 && *(_BYTE *)(a2 + 4) == 112;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    v9 = "expected string in '.dump' or '.load' directive";
LABEL_15:
    v13[0] = v9;
    v14 = 259;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (llvm::Twine *)v13, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v9 = "unexpected token in '.dump' or '.load' directive";
    goto LABEL_15;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v7)
    v8 = "ignoring directive .dump for now";
  else
    v8 = "ignoring directive .load for now";
  v13[0] = v8;
  v14 = 259;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a4, v13, 0, 0);
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseDirectiveSection(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::string::size_type v4;
  const void *v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  std::string::size_type v16;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  BOOL v21;
  std::string *v22;
  _BYTE *v23;
  unint64_t v24;
  char v25;
  std::string *p_p;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::formatv_object_base *v34;
  llvm::formatv_object_base *v35;
  const char *v38;
  uint64_t v40;
  size_t v41;
  size_t v42;
  _BYTE *v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::MCContext *v53;
  unint64_t MachOSection;
  uint64_t v56[4];
  __int16 v57;
  uint64_t v58[2];
  void *v59;
  uint64_t v60;
  __int16 v61;
  std::string v62;
  std::string __p;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  llvm::formatv_object_base *v69;
  llvm::formatv_object_base *v70;
  uint64_t v71;
  unint64_t v72;
  std::string __dst;
  const void *v74;
  unint64_t v75;

  v2 = *(char **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  v74 = 0;
  v75 = 0;
  if ((*(unsigned int (**)(_QWORD, const void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v74))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier after '.section' directive";
    WORD4(v64) = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)v2, (llvm::Twine *)&__p, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.section' directive";
    WORD4(v64) = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)&__p, 0, 0);
    return 1;
  }
  v4 = v75;
  if (v75 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v74;
  if (v75 >= 0x17)
  {
    v9 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17)
      v9 = v75 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v75;
  p_dst = &__dst;
  if (v75)
LABEL_12:
    memmove(p_dst, v5, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  std::string::append(&__dst, ",");
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v12 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  v14 = v12;
  v15 = v13;
  LOBYTE(v16) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v13)
      goto LABEL_39;
    size = __dst.__r_.__value_.__l.__size_;
    v19 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else
  {
    if (!v13)
      goto LABEL_39;
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v18 = &__dst;
    v19 = 22;
  }
  if (v18 <= (std::string *)v12 && (char *)&v18->__r_.__value_.__l.__data_ + size + 1 > v12)
  {
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&__p, v12, &v12[v15], v15);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v27 = __p.__r_.__value_.__l.__size_;
    std::string::append(&__dst, (const std::string::value_type *)p_p, v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (v19 - size < v15)
    {
      std::string::__grow_by(&__dst, v19, size + v15 - v19, size, size, 0, 0);
      __dst.__r_.__value_.__l.__size_ = size;
      LOBYTE(v16) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
    }
    v21 = (v16 & 0x80u) != 0;
    v22 = &__dst;
    if (v21)
      v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v23 = (char *)v22 + size;
    v24 = v15;
    do
    {
      v25 = *v14++;
      *v23++ = v25;
      --v24;
    }
    while (v24);
    *v23 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = size + v15;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (size + v15) & 0x7F;
  }
LABEL_39:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &__dst;
    else
      v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v71 = 0;
    v72 = 0;
    v69 = 0;
    v70 = 0;
    v68 = 0;
    v67 = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v29 = __dst.__r_.__value_.__l.__size_;
    llvm::MCSectionMachO::ParseSectionSpecifier((uint64_t)v28, v29, &v71, (uint64_t *)&v69, (int *)&v68, &v67, (_DWORD *)&v68 + 1, v58);
    if (v58[0])
    {
      v66 = v58[0];
      v58[0] = 0;
      llvm::toString(&v66, &v62);
      WORD4(v64) = 260;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
      v3 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)v2, (llvm::Twine *)&__p, 0, 0);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (v66)
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      if (v58[0])
        (*(void (**)(uint64_t))(*(_QWORD *)v58[0] + 8))(v58[0]);
      goto LABEL_98;
    }
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v33 = v32;
    if (*(char *)(v32 + 47) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v32 + 24), *(_QWORD *)(v32 + 32));
    else
      __p = *(std::string *)(v32 + 24);
    v64 = *(_OWORD *)(v33 + 48);
    v65 = *(_QWORD *)(v33 + 64);
    if ((v64 & 0xFFFFFFFD) != 0x15)
    {
      v34 = v69;
      v35 = v70;
      if (v70 == (llvm::formatv_object_base *)12)
      {
        if (*(_QWORD *)v69 != 0x5F74736E6F635F5FLL || *((_DWORD *)v69 + 2) != 1818324835)
          goto LABEL_90;
        v38 = "__const";
        v40 = 7;
        goto LABEL_78;
      }
      if (v70 == (llvm::formatv_object_base *)13)
      {
        if (*(_QWORD *)v69 == 0x6F63747865745F5FLL && *(_QWORD *)((char *)v69 + 5) == 0x746E5F6C616F6374)
        {
          v38 = "__text";
        }
        else
        {
          if (*(_QWORD *)v69 != 0x6F63617461645F5FLL || *(_QWORD *)((char *)v69 + 5) != 0x746E5F6C616F6361)
            goto LABEL_90;
          v38 = "__data";
        }
        v40 = 6;
LABEL_78:
        if (v2 && (v41 = strlen(v2)) != 0)
        {
          v42 = v41;
          v43 = memchr(v2, 44, v41);
          if (v43)
            v44 = v43 - v2 + 1;
          else
            v44 = 0;
          if (v42 > v44)
          {
            v45 = memchr(&v2[v44], 44, v42 - v44);
            v46 = v45 - v2;
            if (!v45)
              v46 = -1;
            goto LABEL_89;
          }
        }
        else
        {
          v44 = 0;
        }
        v46 = -1;
LABEL_89:
        v47 = &v2[v44];
        v48 = *(_QWORD *)(a1 + 8);
        v49 = &v2[v46];
        v61 = 1283;
        v58[0] = (uint64_t)"section \"";
        v59 = v34;
        v60 = (uint64_t)v35;
        v56[0] = (uint64_t)"\" is deprecated";
        v57 = 259;
        llvm::operator+(v58, v56, (uint64_t)&v62);
        (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(_QWORD *)v48 + 168))(v48, v2, &v62, v47, v49);
        v50 = *(_QWORD *)(a1 + 8);
        v61 = 1283;
        v58[0] = (uint64_t)"change section name to \"";
        v59 = (void *)v38;
        v60 = v40;
        v56[0] = (uint64_t)"\"";
        v57 = 259;
        llvm::operator+(v58, v56, (uint64_t)&v62);
        (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(_QWORD *)v50 + 160))(v50, v2, &v62, v47, v49);
      }
    }
LABEL_90:
    if (v72 == 6)
    {
      if (*(_DWORD *)v71 ^ 0x45545F5F | *(unsigned __int16 *)(v71 + 4) ^ 0x5458)
        v51 = 19;
      else
        v51 = 2;
    }
    else
    {
      v51 = 19;
    }
    v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v53 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v53, v71, v72, v69, v70, v68, SHIDWORD(v68), v51, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v52 + 168))(v52, MachOSection, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v3 = 0;
    goto LABEL_98;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.section' directive";
  WORD4(v64) = 259;
  v30 = *(_QWORD *)(a1 + 8);
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  llvm::MCAsmParser::Error(v30, *(_QWORD *)(v31 + 96), (llvm::Twine *)&__p, 0, 0);
  v3 = 1;
LABEL_98:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectivePushSection>(uint64_t a1)
{
  llvm::MCStreamer *v2;
  uint64_t v3;
  llvm::MCStreamer *v4;

  v2 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  llvm::MCStreamer::pushSection(v2);
  if ((_DWORD)v3)
  {
    v4 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    llvm::MCStreamer::popSection(v4);
  }
  return v3;
}

__n128 llvm::MCStreamer::pushSection(llvm::MCStreamer *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;
  _OWORD v11[2];

  v2 = (_QWORD *)((char *)this + 144);
  v3 = *((unsigned int *)this + 38);
  if ((_DWORD)v3)
  {
    v4 = *v2 + 32 * v3;
    v5 = *(_OWORD *)(v4 - 32);
    v6 = *(_OWORD *)(v4 - 16);
  }
  else
  {
    v5 = 0uLL;
    v6 = 0uLL;
  }
  v11[0] = v5;
  v11[1] = v6;
  v7 = llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>((uint64_t)v2, (unint64_t)v11, 1);
  v8 = (_OWORD *)(*((_QWORD *)this + 18) + 32 * *((unsigned int *)this + 38));
  result = *(__n128 *)v7;
  v10 = *(_OWORD *)(v7 + 16);
  *v8 = *(_OWORD *)v7;
  v8[1] = v10;
  ++*((_DWORD *)this + 38);
  return result;
}

BOOL llvm::MCStreamer::popSection(llvm::MCStreamer *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;

  v1 = *((unsigned int *)this + 38);
  if (v1 >= 2)
  {
    v3 = *((_QWORD *)this + 18) + 32 * v1;
    v4 = *(_QWORD *)(v3 - 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 - 32) == v4 && *(_QWORD *)(v3 - 24) == *(_QWORD *)(v3 - 56);
      v6 = *((_DWORD *)this + 38);
      if (!v5)
      {
        (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)this + 160))(this);
        v6 = *((_DWORD *)this + 38);
      }
    }
    else
    {
      v6 = *((_DWORD *)this + 38);
    }
    *((_DWORD *)this + 38) = v6 - 1;
  }
  return v1 > 1;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 32 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
    }
  }
  return v3;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectivePopSection>(uint64_t a1)
{
  llvm::MCStreamer *v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v2 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = llvm::MCStreamer::popSection(v2);
  if (!v3)
  {
    v7 = ".popsection without corresponding .pushsection";
    v8 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return !v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectivePrevious>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if ((_DWORD)v3 && (v4 = *(_QWORD *)(v2 + 144) + 32 * v3, (v5 = *(_QWORD *)(v4 - 16)) != 0))
  {
    v6 = *(_QWORD *)(v4 - 8);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    v11 = ".previous without corresponding .section";
    v12 = 259;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    llvm::MCAsmParser::Error(v9, *(_QWORD *)(v10 + 96), (llvm::Twine *)&v11, 0, 0);
    return 1;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveSecureLogUnique>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  uint64_t *v19;
  int BufferContainingLoc;
  uint64_t v21;
  const void *v22;
  size_t v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  int FD;
  uint64_t *v28;
  unsigned int LineAndColumn;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  std::error_code v41;
  _QWORD v42[2];
  const char *v43;
  __int16 v44;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
  v8 = v7;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v42[0] = "unexpected token in '.secure_log_unique' directive";
    v44 = 259;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (llvm::Twine *)v42, 0, 0);
    return 1;
  }
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 1352))
  {
    v9 = ".secure_log_unique specified multiple times";
LABEL_4:
    v42[0] = v9;
    v44 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)a4, (llvm::Twine *)v42, 0, 0);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v15 = *(char *)(v14 + 1343);
  if (v15 >= 0)
    v16 = (_BYTE *)(v14 + 1320);
  else
    v16 = *(_BYTE **)(v14 + 1320);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v14 + 1343);
  else
    v17 = *(_QWORD *)(v14 + 1328);
  if (!v17)
  {
    v9 = ".secure_log_unique used but AS_SECURE_LOG_FILE environment variable unset.";
    goto LABEL_4;
  }
  v18 = *(llvm::raw_ostream **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                              + 1344);
  if (v18)
    goto LABEL_15;
  v41.__val_ = 0;
  v41.__cat_ = std::system_category();
  v18 = (llvm::raw_ostream *)operator new();
  FD = getFD(v16, v17, (uint64_t)&v41, 0, 2, 7);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v18, FD, 1, 0, 0);
  if (!v41.__val_)
  {
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v33 = *(_QWORD *)(v32 + 1344);
    *(_QWORD *)(v32 + 1344) = v18;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
LABEL_15:
    v19 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v19, (unint64_t)a4);
    v21 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8))
                    + 24 * (BufferContainingLoc - 1));
    v22 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v24 = llvm::raw_ostream::operator<<(v18, v22, v23);
    v25 = v24;
    v26 = (_BYTE *)*((_QWORD *)v24 + 4);
    if (*((_BYTE **)v24 + 3) == v26)
    {
      llvm::raw_ostream::write(v24, ":", 1uLL);
    }
    else
    {
      *v26 = 58;
      ++*((_QWORD *)v24 + 4);
    }
    v28 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    LineAndColumn = llvm::SourceMgr::getLineAndColumn(v28, a4, BufferContainingLoc);
    write_unsigned<unsigned long>(v25, LineAndColumn, 0, 0, 0);
    v30 = (_BYTE *)*((_QWORD *)v25 + 4);
    if (*((_BYTE **)v25 + 3) == v30)
    {
      llvm::raw_ostream::write(v25, ":", 1uLL);
    }
    else
    {
      *v30 = 58;
      ++*((_QWORD *)v25 + 4);
    }
    v44 = 773;
    v42[0] = v6;
    v42[1] = v8;
    v43 = "\n";
    llvm::Twine::print((llvm::Twine *)v42, v25);
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v10 = 0;
    *(_BYTE *)(v31 + 1352) = 1;
    return v10;
  }
  v35[0] = "can't open secure log file: ";
  v35[2] = v16;
  v35[3] = v17;
  v36 = 1283;
  v37[0] = v35;
  v37[2] = " (";
  v38 = 770;
  std::error_code::message(&v34, &v41);
  v39[0] = v37;
  v39[2] = &v34;
  v40 = 1026;
  v42[0] = v39;
  v43 = ")";
  v44 = 770;
  v10 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)a4, (llvm::Twine *)v42, 0, 0);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v18 + 8))(v18);
  return v10;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveSecureLogReset>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 1352) = 0;
  }
  else
  {
    v6 = "unexpected token in '.secure_log_reset' directive";
    v7 = 259;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(_QWORD *)(v4 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveTBSS>(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  llvm::MCContext *v4;
  llvm::MCSymbol *Symbol;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  llvm::MCContext *v15;
  unint64_t MachOSection;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  v21 = 0;
  v22 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v21))
  {
    v3 = "expected identifier in directive";
  }
  else
  {
    v4 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v20 = 261;
    v19[0] = v21;
    v19[1] = v22;
    Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v4, (const llvm::Twine *)v19);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v18 = 0;
      v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
      if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v18) & 1) != 0)
        return 1;
      v17 = 0;
      v7 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
        if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v17) & 1) != 0)
          return 1;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        if (v18 < 0)
        {
          v19[0] = "invalid '.tbss' directive size, can't be less thanzero";
          v20 = 259;
          v9 = *(_QWORD *)(a1 + 8);
          v10 = v6;
        }
        else if (v17 < 0)
        {
          v19[0] = "invalid '.tbss' alignment, can't be lessthan zero";
          v20 = 259;
          v9 = *(_QWORD *)(a1 + 8);
          v10 = v7;
        }
        else
        {
          llvm::MCSymbol::getFragment(Symbol, 1);
          if (!v8)
          {
            v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
            v15 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
            MachOSection = llvm::MCContext::getMachOSection(v15, (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__thread_bss", (llvm::formatv_object_base *)0xC, 18, 0, 12, 0);
            (*(void (**)(uint64_t, unint64_t, llvm::MCSymbol *, uint64_t, uint64_t))(*(_QWORD *)v14
                                                                                                  + 480))(v14, MachOSection, Symbol, v18, v17);
            return 0;
          }
          v19[0] = "invalid symbol redefinition";
          v20 = 259;
          v9 = *(_QWORD *)(a1 + 8);
          v10 = v2;
        }
        return llvm::MCAsmParser::Error(v9, v10, (llvm::Twine *)v19, 0, 0);
      }
      v3 = "unexpected token in '.tbss' directive";
    }
    else
    {
      v3 = "unexpected token in directive";
    }
  }
  v19[0] = v3;
  v20 = 259;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (llvm::Twine *)v19, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveZerofill>(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MCContext *v7;
  unint64_t MachOSection;
  uint64_t v10;
  llvm::MCContext *v11;
  llvm::MCSymbol *Symbol;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MCContext *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::formatv_object_base *v27;
  llvm::formatv_object_base *v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;
  unint64_t v32;

  v31 = 0;
  v32 = 0;
  if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v31))
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v27 = 0;
      v28 = 0;
      v3 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
      if ((*(unsigned int (**)(_QWORD, llvm::formatv_object_base **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v27))
      {
        v2 = "expected section name after comma in '.zerofill' directive";
        goto LABEL_22;
      }
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
      v5 = **(_QWORD **)(a1 + 8);
      if (**(_DWORD **)(v4 + 8) == 9)
      {
        v6 = (*(uint64_t (**)(void))(v5 + 56))();
        v7 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
        MachOSection = llvm::MCContext::getMachOSection(v7, v31, v32, v27, v28, 1, 0, 15, 0);
        (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 472))(v6, MachOSection, 0, 0, 0, v3);
        return 0;
      }
      if (**(_DWORD **)((*(uint64_t (**)(void))(v5 + 40))() + 8) == 25)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
        v25 = 0;
        v26 = 0;
        if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v25))
        {
          v2 = "expected identifier in directive";
          goto LABEL_22;
        }
        v11 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
        v30 = 261;
        v29[0] = v25;
        v29[1] = v26;
        Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v11, (const llvm::Twine *)v29);
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
          v24 = 0;
          v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
          if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v24) & 1) != 0)return 1;
          v23 = 0;
          v14 = 0;
          if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
            v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                            + 96);
            if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v23) & 1) != 0)return 1;
          }
          if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
          {
            v2 = "unexpected token in '.zerofill' directive";
            goto LABEL_22;
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
          if (v24 < 0)
          {
            v29[0] = "invalid '.zerofill' directive size, can't be less than zero";
            v30 = 259;
            v16 = *(_QWORD *)(a1 + 8);
            v17 = v13;
          }
          else if (v23 < 0)
          {
            v29[0] = "invalid '.zerofill' directive alignment, can't be less than zero";
            v30 = 259;
            v16 = *(_QWORD *)(a1 + 8);
            v17 = v14;
          }
          else
          {
            llvm::MCSymbol::getFragment(Symbol, 1);
            if (!v15)
            {
              v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
              v21 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
              v22 = llvm::MCContext::getMachOSection(v21, v31, v32, v27, v28, 1, 0, 15, 0);
              (*(void (**)(uint64_t, unint64_t, llvm::MCSymbol *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 472))(v20, v22, Symbol, v24, v23, v3);
              return 0;
            }
            v29[0] = "invalid symbol redefinition";
            v30 = 259;
            v16 = *(_QWORD *)(a1 + 8);
            v17 = v10;
          }
          return llvm::MCAsmParser::Error(v16, v17, (llvm::Twine *)v29, 0, 0);
        }
      }
    }
    v2 = "unexpected token in directive";
    goto LABEL_22;
  }
  v2 = "expected segment name after '.zerofill' directive";
LABEL_22:
  v29[0] = v2;
  v30 = 259;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  llvm::MCAsmParser::Error(v18, *(_QWORD *)(v19 + 96), (llvm::Twine *)v29, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDataRegion>(uint64_t a1)
{
  void (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8))
                          + 224);
LABEL_3:
    v2();
    return 0;
  }
  v10 = 0;
  v11 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8)
                 + 8);
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v10))
  {
    v8[0] = "expected region type after '.data_region' directive";
    v9 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  if (v11 != 4)
  {
    if (v11 != 3)
      goto LABEL_16;
    if (*(_WORD *)v10 != 29802 || *(_BYTE *)(v10 + 2) != 56)
      goto LABEL_16;
LABEL_17:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8))
                          + 224);
    goto LABEL_3;
  }
  if (*(_DWORD *)v10 == 909210730 || *(_DWORD *)v10 == 842232938)
    goto LABEL_17;
LABEL_16:
  v8[0] = "unknown region type in '.data_region' directive";
  v9 = 259;
  return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v4, (llvm::Twine *)v8, 0, 0);
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveDataRegionEnd>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 224))(v5, 4);
  }
  else
  {
    v7 = "unexpected token in '.end_data_region' directive";
    v8 = 259;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(_QWORD *)(v4 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return v2 != 9;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveBss>(uint64_t a1)
{
}

BOOL `anonymous namespace'::DarwinAsmParser::parseSectionSwitch(uint64_t a1, uint64_t a2, unint64_t a3, llvm::formatv_object_base *a4, llvm::formatv_object_base *a5, int a6, unsigned int a7, int a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MCContext *v20;
  int v21;
  unint64_t MachOSection;
  uint64_t v23;
  const char *v25;
  __int16 v26;

  v16 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v16 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v20 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    if (a6 < 0)
      v21 = 2;
    else
      v21 = 19;
    MachOSection = llvm::MCContext::getMachOSection(v20, a2, a3, a4, a5, a6, a8, v21, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v19 + 168))(v19, MachOSection, 0);
    if (a7)
    {
      v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v23 + 632))(v23, __clz(a7) ^ 0x3F, 0, 1, 0);
    }
  }
  else
  {
    v25 = "unexpected token in section switching directive";
    v26 = 259;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (llvm::Twine *)&v25, 0, 0);
  }
  return v16 != 9;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConst>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConstData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConstructor>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveCString>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveDestructor>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveDyld>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveFVMLibInit0>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveFVMLibInit1>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLazySymbolPointers>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseDirectiveLinkerOption>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v20[2];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;
  _QWORD v25[13];

  v25[12] = *MEMORY[0x24BDAC8D0];
  v23 = (char *)v25;
  v24 = 0x400000000;
  do
  {
    while (1)
    {
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
      {
        v16[0] = "expected string in '";
        v17 = a2;
        v18 = a3;
        v19 = 1283;
        v20[0] = v16;
        v21 = "' directive";
        v22 = 770;
        v11 = *(_QWORD *)(a1 + 8);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
        llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (llvm::Twine *)v20, 0, 0);
        goto LABEL_18;
      }
      __p[0] = 0;
      __p[1] = 0;
      v15 = 0;
      if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), __p) & 1) != 0)
        goto LABEL_4;
      llvm::SmallVectorTemplateBase<std::string,false>::push_back((uint64_t)&v23, (unint64_t)__p);
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      {
        v6 = 3;
      }
      else
      {
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
        {
          v16[0] = "unexpected token in '";
          v17 = a2;
          v18 = a3;
          v19 = 1283;
          v20[0] = v16;
          v21 = "' directive";
          v22 = 770;
          v7 = *(_QWORD *)(a1 + 8);
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)v20, 0, 0);
LABEL_4:
          v6 = 1;
          goto LABEL_9;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v6 = 0;
      }
LABEL_9:
      if (SHIBYTE(v15) < 0)
        break;
      if (v6)
        goto LABEL_15;
    }
    operator delete(__p[0]);
  }
  while (!v6);
LABEL_15:
  if (v6 == 3)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v9 + 216))(v9, v23, v24);
    v10 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v10 = 1;
LABEL_19:
  llvm::SmallVector<std::string,2u>::~SmallVector(&v23);
  return v10;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral16>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral4>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral8>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveModInitFunc>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveModTermFunc>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveNonLazySymbolPointers>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveThreadLocalVariablePointers>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCatClsMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCatInstMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCategory>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClass>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClassNames>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClassVars>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClsMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClsRefs>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCInstMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCInstanceVars>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMessageRefs>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMetaClass>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMethVarNames>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMethVarTypes>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCModuleInfo>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCProtocol>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCSelectorStrs>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCStringObject>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCSymbols>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectivePICSymbolStub>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveStaticConst>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveStaticData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveSymbolStub>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveTData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveText>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveThreadInitFunc>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveTLV>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseSectionDirectiveIdent>(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseBridgeOSVersionMin>(_anonymous_namespace_::DarwinAsmParser *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16[2];

  *(_QWORD *)v16 = 0;
  v15 = 0;
    return 1;
  v13 = 0;
  v14 = 0;
  v8 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1));
  v9 = 0;
  v10 = 0;
  if (isSDKVersionToken(*(_QWORD *)(v8 + 8)))
  {
      return 1;
    v10 = v13;
    v9 = v14;
  }
  v12 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 1) + 56))(*((_QWORD **)a1 + 1));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 240))(v12, 5, v16[1], v16[0], v15, v10, v9);
  return 0;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseVersion(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

    return 1;
  *a4 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  result = 0;
  if (**(_DWORD **)(v7 + 8) != 9)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
    if (isSDKVersionToken(*(_QWORD *)(v8 + 8)))
    {
      return 0;
    }
    else
    {
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 25)
      {
        v11 = "invalid OS update specifier, comma expected";
        v12 = 259;
        v9 = *((_QWORD *)this + 1);
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        llvm::MCAsmParser::Error(v9, *(_QWORD *)(v10 + 96), (llvm::Twine *)&v11, 0, 0);
        return 1;
      }
    }
  }
  return result;
}

BOOL isSDKVersionToken(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)a1 != 2 || *(_QWORD *)(a1 + 16) != 11)
    return 0;
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *v3;
  v5 = *(uint64_t *)((char *)v3 + 3);
  return v4 == 0x737265765F6B6473 && v5 == 0x6E6F69737265765FLL;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseSDKVersion(_anonymous_namespace_::DarwinAsmParser *this, llvm::VersionTuple *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8[2];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  *(_QWORD *)v8 = 0;
    return 1;
  v5 = v8[1] | ((unint64_t)v8[0] << 32);
  *(_QWORD *)a2 = v5 | 0x8000000000000000;
  *((_QWORD *)a2 + 1) = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 25)
    return 0;
  v7 = 0;
    return 1;
  result = 0;
  v6 = v7 | 0x80000000;
  *(_QWORD *)a2 = v5 | 0x8000000000000000;
  *((_QWORD *)a2 + 1) = v6;
  return result;
}

uint64_t `anonymous namespace'::DarwinAsmParser::checkVersion(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;
  llvm::Triple *v15;
  char v16;
  uint64_t OSName;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD v26[4];
  char v27;
  char v28;
  _QWORD v29[4];
  __int16 v30;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (*(_DWORD *)(result + 60) != a7)
  {
    v15 = (llvm::Triple *)(result + 24);
    if (a5)
    {
      v20[0] = 32;
      v20[2] = a4;
      v20[3] = a5;
      v21 = 1287;
      v22 = a2;
      v23 = a3;
      v24 = v20;
      v16 = 2;
      a2 = &v22;
      v25 = 517;
    }
    else
    {
      v21 = 257;
      v22 = a2;
      v23 = a3;
      v25 = 261;
      v16 = 5;
    }
    v26[0] = a2;
    v26[1] = a3;
    v26[2] = " used while targeting ";
    v27 = v16;
    v28 = 3;
    OSName = llvm::Triple::getOSName(v15);
    v29[0] = v26;
    v29[2] = OSName;
    v29[3] = v18;
    v30 = 1282;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a6, v29, 0, 0);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v29[0] = "overriding previous version directive";
    v30 = 259;
    (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a6, v29, 0, 0);
    v19 = *(_QWORD *)(a1 + 24);
    v29[0] = "previous definition is here";
    v30 = 259;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), v19, v29, 0, 0);
  }
  *(_QWORD *)(a1 + 24) = a6;
  return result;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseMajorMinorVersionComponent(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, unsigned int *a3, const char *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char v12;
  int v13;
  const char *v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  __int16 v20;
  BOOL v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  _QWORD v28[2];
  const char *v29;
  __int16 v30;
  const char *v31;
  const char *v32;
  __int16 v33;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 4)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)*v9;
    if ((unint64_t)(v10 - 0x2000) > 0xFFFFFFFFFFFF0000)
    {
      *a2 = v10;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 25)
      {
        if (*a4)
        {
          v31 = a4;
          v32 = " minor version number required, comma expected";
          v20 = 771;
        }
        else
        {
          v31 = " minor version number required, comma expected";
          v20 = 259;
        }
        v33 = v20;
        goto LABEL_28;
      }
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 4)
      {
        v16 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
        v17 = (unint64_t *)(v16 + 24);
        if (*(_DWORD *)(v16 + 32) >= 0x41u)
          v17 = (unint64_t *)*v17;
        v18 = *v17;
        if (v18 < 0x100)
        {
          *a3 = v18;
          (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
          return 0;
        }
        v19 = *(unsigned __int8 *)a4;
        if (*a4)
        {
          v28[0] = "invalid ";
          v29 = a4;
          v30 = 771;
          v12 = 2;
        }
        else
        {
          v28[0] = "invalid ";
          v30 = 259;
          v12 = 3;
        }
        v21 = v19 == 0;
        v22 = (const char *)v28;
        if (v21)
          v22 = "invalid ";
        v23 = " minor version number";
      }
      else
      {
        v27 = *(unsigned __int8 *)a4;
        if (*a4)
        {
          v28[0] = "invalid ";
          v29 = a4;
          v30 = 771;
          v12 = 2;
        }
        else
        {
          v28[0] = "invalid ";
          v30 = 259;
          v12 = 3;
        }
        v21 = v27 == 0;
        v22 = (const char *)v28;
        if (v21)
          v22 = "invalid ";
        v23 = " minor version number, integer expected";
      }
    }
    else
    {
      v11 = *(unsigned __int8 *)a4;
      if (*a4)
      {
        v28[0] = "invalid ";
        v29 = a4;
        v30 = 771;
        v12 = 2;
      }
      else
      {
        v28[0] = "invalid ";
        v30 = 259;
        v12 = 3;
      }
      v21 = v11 == 0;
      v22 = (const char *)v28;
      if (v21)
        v22 = "invalid ";
      v23 = " major version number";
    }
    v31 = v22;
    v32 = v23;
    LOBYTE(v33) = v12;
  }
  else
  {
    v13 = *(unsigned __int8 *)a4;
    v14 = "invalid ";
    if (*a4)
    {
      v28[0] = "invalid ";
      v29 = a4;
      v30 = 771;
      v15 = 2;
    }
    else
    {
      v28[0] = "invalid ";
      v30 = 259;
      v15 = 3;
    }
    if (v13)
      v14 = (const char *)v28;
    v31 = v14;
    v32 = " major version number, integer expected";
    LOBYTE(v33) = v15;
  }
  HIBYTE(v33) = 3;
LABEL_28:
  v24 = *((_QWORD *)this + 1);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  llvm::MCAsmParser::Error(v24, *(_QWORD *)(v25 + 96), (llvm::Twine *)&v31, 0, 0);
  return 1;
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseOptionalTrailingVersionComponent(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, const char *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  char v10;
  int v11;
  const char *v12;
  char v13;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  const char *v20;
  __int16 v21;
  const char *v22;
  const char *v23;
  char v24;
  char v25;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) == 4)
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8);
    v7 = (unint64_t *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (unint64_t *)*v7;
    v8 = *v7;
    if (v8 < 0x100)
    {
      *a2 = v8;
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
      return 0;
    }
    v9 = *(unsigned __int8 *)a3;
    if (*a3)
    {
      v19[0] = "invalid ";
      v20 = a3;
      v21 = 771;
      v10 = 2;
    }
    else
    {
      v19[0] = "invalid ";
      v21 = 259;
      v10 = 3;
    }
    v15 = v9 == 0;
    v16 = (const char *)v19;
    if (v15)
      v16 = "invalid ";
    v22 = v16;
    v23 = " version number";
    v24 = v10;
  }
  else
  {
    v11 = *(unsigned __int8 *)a3;
    v12 = "invalid ";
    if (*a3)
    {
      v19[0] = "invalid ";
      v20 = a3;
      v21 = 771;
      v13 = 2;
    }
    else
    {
      v19[0] = "invalid ";
      v21 = 259;
      v13 = 3;
    }
    if (v11)
      v12 = (const char *)v19;
    v22 = v12;
    v23 = " version number, integer expected";
    v24 = v13;
  }
  v25 = 3;
  v17 = *((_QWORD *)this + 1);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (llvm::Twine *)&v22, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseWatchOSVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::DarwinAsmParser::parseVersionMin(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20[2];

  *(_QWORD *)v20 = 0;
  v19 = 0;
  v17 = 0;
  v18 = 0;
  v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 40))(a1[1]);
  if (isSDKVersionToken(*(_QWORD *)(v11 + 8))
  {
    return 1;
  }
  v15[0] = "unexpected token";
  v16 = 259;
  if (llvm::MCAsmParser::parseEOL(a1[1], (const llvm::Twine *)v15))
  {
    v13[0] = " in '";
    v13[2] = a2;
    v13[3] = a3;
    v14 = 1283;
    v15[0] = v13;
    v15[2] = "' directive";
    v16 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1[1], (const llvm::Twine *)v15);
  }
  else
  {
    v12 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1[1] + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v12 + 232))(v12, a5, v20[1], v20[0], v19, v17, v18);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseTvOSVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseIOSVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseMacOSXVersionMin>(llvm::MCAsmParser **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parseBuildVersion>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  uint64_t v24;
  int OSTypeFromPlatform;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30[2];
  _QWORD v31[4];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1[1] + 192))(a1[1], &v33))
  {
    v9 = "platform name expected";
LABEL_3:
    v31[0] = v9;
    v32 = 259;
    v10 = a1[1];
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (llvm::Twine *)v31, 0, 0);
    return 1;
  }
  else
  {
    switch(v34)
    {
      case 3:
        if (*(_WORD *)v33 != 28521 || *(_BYTE *)(v33 + 2) != 115)
          goto LABEL_65;
        v14 = 2;
        goto LABEL_71;
      case 4:
        if (*(_DWORD *)v33 == 1936684660)
        {
          v14 = 3;
        }
        else
        {
          if (*(_DWORD *)v33 != 1936683640)
            goto LABEL_65;
          v14 = 11;
        }
        goto LABEL_71;
      case 5:
        if (*(_DWORD *)v33 == 1868783981 && *(_BYTE *)(v33 + 4) == 115)
        {
          v14 = 1;
          goto LABEL_71;
        }
        if (*(_DWORD *)v33 == 1869636979 && *(_BYTE *)(v33 + 4) == 115)
        {
          v14 = 14;
          goto LABEL_71;
        }
        goto LABEL_65;
      case 7:
        if (*(_DWORD *)v33 != 1668571511 || *(_DWORD *)(v33 + 3) != 1936681059)
          goto LABEL_65;
        v14 = 4;
        goto LABEL_71;
      case 8:
        if (*(_QWORD *)v33 != 0x736F656764697262)
          goto LABEL_65;
        v14 = 5;
        goto LABEL_71;
      case 9:
        if (*(_QWORD *)v33 != 0x696B726576697264 || *(_BYTE *)(v33 + 8) != 116)
          goto LABEL_65;
        v14 = 10;
        goto LABEL_71;
      case 11:
        if (*(_QWORD *)v33 == 0x6C6174614363616DLL && *(_QWORD *)(v33 + 3) == 0x7473796C61746143)
        {
          v14 = 6;
        }
        else
        {
          if (*(_QWORD *)v33 != 0x616C756D69737278 || *(_QWORD *)(v33 + 3) != 0x726F74616C756D69)
          {
LABEL_65:
            v31[0] = "unknown platform name";
            v32 = 259;
            return llvm::MCAsmParser::Error(a1[1], v8, (llvm::Twine *)v31, 0, 0);
          }
          v14 = 12;
        }
LABEL_71:
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 25)
        {
          v9 = "version number required, comma expected";
          goto LABEL_3;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
        *(_QWORD *)v30 = 0;
        v29 = 0;
        v27 = 0;
        v28 = 0;
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]);
        if (isSDKVersionToken(*(_QWORD *)(v24 + 8))
        {
          return 1;
        }
        v31[0] = "unexpected token";
        v32 = 259;
        if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1[1], (const llvm::Twine *)v31))
        {
          v31[0] = " in '.build_version' directive";
          v32 = 259;
          result = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1[1], (const llvm::Twine *)v31);
        }
        else
        {
          OSTypeFromPlatform = getOSTypeFromPlatform(v14);
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 56))(a1[1]);
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v26 + 240))(v26, v14, v30[1], v30[0], v29, v27, v28);
          result = 0;
        }
        break;
      case 12:
        if (*(_QWORD *)v33 != 0x6C756D6973736F69 || *(_DWORD *)(v33 + 8) != 1919906913)
          goto LABEL_65;
        v14 = 7;
        goto LABEL_71;
      case 13:
        if (*(_QWORD *)v33 != 0x756D6973736F7674 || *(_QWORD *)(v33 + 5) != 0x726F74616C756D69)
          goto LABEL_65;
        v14 = 8;
        goto LABEL_71;
      case 16:
        if (*(_QWORD *)v33 != 0x73736F6863746177 || *(_QWORD *)(v33 + 8) != 0x726F74616C756D69)
          goto LABEL_65;
        v14 = 9;
        goto LABEL_71;
      default:
        goto LABEL_65;
    }
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parsePtrAuthABIVersion>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v8[0] = "expected integer version in '.ptrauth_abi_version' directive";
  v9 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v10, (const llvm::Twine *)v8))
    return 1;
  v3 = v10;
  if ((unint64_t)v10 >= 0x40)
  {
    v8[0] = "invalid ptrauth ABI version number";
    v9 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  v8[0] = "unexpected token";
  v9 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8))
  {
    v8[0] = " in '.ptrauth_abi_version' directive";
    v9 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 256))(v7, v3, 0);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::DarwinAsmParser,&`anonymous namespace'::DarwinAsmParser::parsePtrAuthKernelABIVersion>(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v8[0] = "expected integer version in '.ptrauth_kernel_abi_version' directive";
  v9 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v10, (const llvm::Twine *)v8))
    return 1;
  v3 = v10;
  if ((unint64_t)v10 >= 0x40)
  {
    v8[0] = "invalid ptrauth kernel ABI version number";
    v9 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  v8[0] = "unexpected token";
  v9 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8))
  {
    v8[0] = " in '.ptrauth_kernel_abi_version' directive";
    v9 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 256))(v7, v3, 1);
    return 0;
  }
}

void `anonymous namespace'::ELFAsmParser::~ELFAsmParser(_anonymous_namespace_::ELFAsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::ELFAsmParser::Initialize(_anonymous_namespace_::ELFAsmParser *this, llvm::MCAsmParser *a2)
{
  *((_QWORD *)this + 1) = a2;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveData>(uint64_t a1)
{
}

uint64_t `anonymous namespace'::ELFAsmParser::ParseSectionSwitch(uint64_t a1, llvm::formatv_object_base *a2, llvm::formatv_object_base *a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v12;
  llvm::MCContext *v13;
  unint64_t ELFSection;
  llvm::formatv_object_base *v15[4];
  __int16 v16;
  uint64_t v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;

  v17 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v18[0] = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, llvm::formatv_object_base **))(*(_QWORD *)v10 + 232))(v10, &v17, v18) & 1) != 0)return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v13 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v16 = 261;
  v15[0] = a2;
  v15[1] = a3;
  v19 = 257;
  ELFSection = llvm::MCContext::getELFSection(v13, v15, a4, a5, 0, v18, 0, -1, 0);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, ELFSection, v17);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveText>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveRoData>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveTData>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveTBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveDataRel>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveDataRelRo>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseSectionDirectiveEhFrame>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSection>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

BOOL `anonymous namespace'::ELFAsmParser::ParseSectionArguments(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  int *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  int v57;
  int v58;
  unint64_t *v59;
  uint64_t v60;
  unsigned __int16 *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v67;
  int v68;
  int v70;
  int v71;
  int v72;
  uint64_t v74;
  int v75;
  unint64_t v77;
  const char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v84;
  int v85;
  uint64_t v86;
  int v93;
  uint64_t v103;
  _BOOL8 result;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  llvm::formatv_object_base *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  llvm::MCContext *v114;
  unint64_t ELFSection;
  uint64_t v116;
  int v117;
  int v118;
  BOOL v119;
  int v120;
  int v122;
  unint64_t v123;
  char *v124;
  BOOL v125;
  char v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  llvm::MCContext *v136;
  unint64_t TempSymbol;
  uint64_t v138;
  void *__p[2];
  char v140;
  int v141;
  __int16 v142;
  __int128 v143;
  _QWORD v144[2];
  uint64_t v145;
  size_t v146;
  __int16 v147;
  unint64_t v148;
  uint64_t v149;
  const char *v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  llvm::formatv_object_base *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int16 v162;
  int v163;
  __int16 v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 96);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]);
  v8 = (_DWORD *)a1[1];
  if (**(_DWORD **)(v7 + 8) != 3)
  {
    if (!v8[6])
    {
      v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(a1[1]) + 96);
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 25)
      {
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 9)
        {
          LODWORD(v10) = 0;
          v6 = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            v31 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
            v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]);
            if (v31 == 3)
            {
              v33 = *(int **)(v32 + 8);
              v34 = *v33;
              v35 = *((_QWORD *)v33 + 2);
              if (v34 != 2)
              {
                v36 = v35 - 1;
                v37 = v35 != 0;
                if (v35 - 1 < v37)
                  v36 = 1;
                if (v36 < v35)
                  LODWORD(v35) = v36;
                LODWORD(v35) = v35 - v37;
              }
              v38 = v35 + 2;
            }
            else
            {
              v39 = **(_DWORD **)(v32 + 8);
              v40 = *(int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
              if (v39 == 2)
              {
                v41 = *v40;
                v42 = *((_QWORD *)v40 + 2);
                v43 = v42 - 1;
                v44 = v42 != 0;
                if (v42 - 1 < v44)
                  v43 = 1;
                if (v43 >= v42)
                  LODWORD(v43) = v42;
                v45 = v43 - v44;
                if (v41 == 2)
                  v38 = v42;
                else
                  v38 = v45;
              }
              else
              {
                v38 = v40[4];
              }
            }
            (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
            LODWORD(v10) = v10 + v38;
            if (v11 + v38 != *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1])
                                                    + 8)
                                        + 8))
              break;
            v46 = (_DWORD *)a1[1];
            if (v46[6])
              break;
            v11 = *(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v46 + 40))(v46) + 96);
            if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 25)
              break;
          }
          while (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 9);
        }
        if ((_DWORD)v10)
        {
          v10 = v10;
          goto LABEL_20;
        }
      }
      v8 = (_DWORD *)a1[1];
    }
    *(_QWORD *)&v160 = "expected identifier";
    v162 = 259;
    v24 = *(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8) + 96);
    v25 = (uint64_t)v8;
LABEL_355:
    llvm::MCAsmParser::Error(v25, v24, (llvm::Twine *)&v160, 0, 0);
    return 1;
  }
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(a1[1]) + 8);
  if (*(_DWORD *)v9 == 2)
  {
    v6 = *(_QWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v14 = v9 + 8;
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(_QWORD *)(v14 + 8);
    v15 = v13 != 0;
    if (v13)
      v6 = v12 + 1;
    else
      v6 = v12;
    if (v13 - 1 < v15)
      v16 = 1;
    else
      v16 = v13 - 1;
    if (v16 >= v13)
      v16 = v13;
    v10 = v16 - v15;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
LABEL_20:
  v159 = 0uLL;
  v158 = 0;
  v156 = 0;
  v157 = 0;
  v155 = 0;
  v153 = 0;
  v154 = 0;
  v152 = -1;
  if (v10 >= 7)
  {
    v17 = *(_DWORD *)v6 == 1685025326 && *(_DWORD *)(v6 + 3) == 1635017060;
    if (v17 && (v10 < 8 || *(_BYTE *)(v6 + 7) == 46))
      goto LABEL_64;
  }
  if (v10 == 5)
  {
    if ((*(_DWORD *)v6 != 1852401198 || *(_BYTE *)(v6 + 4) != 105)
      && (*(_DWORD *)v6 != 1768843566 || *(_BYTE *)(v6 + 4) != 116)
      && (*(_DWORD *)v6 != 2019914798 || *(_BYTE *)(v6 + 4) != 116))
    {
      if (*(_DWORD *)v6 == 1952539694 && *(_BYTE *)(v6 + 4) == 97)
        goto LABEL_123;
      goto LABEL_85;
    }
LABEL_71:
    v26 = 6;
    goto LABEL_124;
  }
  if (v10 == 8)
  {
    if (*(_QWORD *)v6 == 0x31617461646F722ELL)
    {
LABEL_64:
      v26 = 2;
      goto LABEL_124;
    }
    if (*(_DWORD *)v6 != 2019914798 || *(_BYTE *)(v6 + 4) != 116)
    {
      if (*(_DWORD *)v6 != 1952539694 || *(_BYTE *)(v6 + 4) != 97)
        goto LABEL_85;
LABEL_77:
      if (*(_BYTE *)(v6 + 5) == 46)
        goto LABEL_123;
LABEL_78:
      if (v10 == 6)
      {
        if (*(_DWORD *)v6 == 1952539694 && *(_WORD *)(v6 + 4) == 12641)
          goto LABEL_123;
        if (*(_DWORD *)v6 != 1936941614)
          goto LABEL_91;
LABEL_119:
        if (*(_BYTE *)(v6 + 4) != 46)
          goto LABEL_86;
LABEL_123:
        v26 = 3;
        goto LABEL_124;
      }
LABEL_85:
      if (*(_DWORD *)v6 != 1936941614)
      {
LABEL_86:
        if (v10 >= 0xB)
        {
          v30 = *(_QWORD *)v6 == 0x72615F74696E692ELL && *(_QWORD *)(v6 + 3) == 0x79617272615F7469;
          if (v30 && (v10 < 0xC || *(_BYTE *)(v6 + 11) == 46))
            goto LABEL_123;
        }
        goto LABEL_91;
      }
      goto LABEL_119;
    }
LABEL_70:
    if (*(_BYTE *)(v6 + 5) == 46)
      goto LABEL_71;
LABEL_72:
    if (*(_DWORD *)v6 != 1952539694 || *(_BYTE *)(v6 + 4) != 97)
      goto LABEL_78;
    goto LABEL_77;
  }
  if (v10 >= 5)
  {
    if (*(_DWORD *)v6 != 2019914798 || *(_BYTE *)(v6 + 4) != 116)
      goto LABEL_72;
    goto LABEL_70;
  }
  if (v10 == 4 && *(_DWORD *)v6 == 1936941614)
    goto LABEL_123;
LABEL_91:
  if (hasPrefix((unsigned __int8 *)v6, v10, ".fini_array", 0xBuLL)
    || hasPrefix((unsigned __int8 *)v6, v10, ".preinit_array", 0xEuLL))
  {
    goto LABEL_123;
  }
  if (hasPrefix((unsigned __int8 *)v6, v10, ".tdata", 6uLL) || hasPrefix((unsigned __int8 *)v6, v10, ".tbss", 5uLL))
    v26 = 1027;
  else
    v26 = 0;
LABEL_124:
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 25)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
    if (!a2 || **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 3)
    {
LABEL_130:
      v48 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
      v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]);
      if (v48 == 3)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v49 + 8) + 16);
        v51 = v50 != 0;
        if (v50)
          v52 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 8) + 1);
        else
          v52 = *(_BYTE **)(*(_QWORD *)(v49 + 8) + 8);
        if (v50 - 1 < v51)
          v53 = 1;
        else
          v53 = v50 - 1;
        if (v53 >= v50)
          v54 = *(_QWORD *)(*(_QWORD *)(v49 + 8) + 16);
        else
          v54 = v53;
        (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]);
        v148 = 0;
        *(_QWORD *)&v160 = v52;
        *((_QWORD *)&v160 + 1) = v54 - v51;
        if ((llvm::consumeUnsignedInteger((llvm *)&v160, 0, &v148, v56) & 1) == 0 && !*((_QWORD *)&v160 + 1))
        {
          v57 = v148;
          if (!HIDWORD(v148))
          {
LABEL_143:
            v58 = 0;
LABEL_222:
            if (v57 != -1)
              goto LABEL_223;
LABEL_232:
            v78 = "unknown flag";
            goto LABEL_354;
          }
        }
        v77 = v54 - v51;
        if (v54 != v51)
        {
          v58 = 0;
          v57 = 0;
          while (2)
          {
            v79 = (char)*v52;
            if (v79 > 96)
            {
              switch(*v52)
              {
                case 'o':
                  v57 |= 0x80u;
                  goto LABEL_221;
                case 'p':
                case 'q':
                case 'r':
                case 't':
                case 'u':
                case 'v':
                  goto LABEL_232;
                case 's':
LABEL_211:
                  v57 |= 0x10000000u;
                  goto LABEL_221;
                case 'w':
                  v57 |= 1u;
                  goto LABEL_221;
                case 'x':
                  v57 |= 4u;
                  goto LABEL_221;
                case 'y':
LABEL_210:
                  v57 |= 0x20000000u;
                  goto LABEL_221;
                default:
                  switch(*v52)
                  {
                    case 'a':
                      v57 |= 2u;
                      goto LABEL_221;
                    case 'c':
                      goto LABEL_210;
                    case 'd':
                      goto LABEL_211;
                    case 'e':
                      v57 |= 0x80000000;
                      goto LABEL_221;
                    default:
                      goto LABEL_232;
                  }
              }
            }
            switch(*v52)
            {
              case 'M':
                v57 |= 0x10u;
                goto LABEL_221;
              case 'N':
              case 'O':
              case 'P':
              case 'Q':
                goto LABEL_232;
              case 'R':
                if (*(_DWORD *)(v55 + 60) == 14)
                  v57 |= 0x100000u;
                else
                  v57 |= 0x200000u;
                goto LABEL_221;
              case 'S':
                v57 |= 0x20u;
                goto LABEL_221;
              case 'T':
                v57 |= 0x400u;
                goto LABEL_221;
              default:
                if (v79 == 63)
                {
                  v58 = 1;
                }
                else
                {
                  if (v79 != 71)
                    goto LABEL_232;
                  v57 |= 0x200u;
                }
LABEL_221:
                ++v52;
                if (!--v77)
                  goto LABEL_222;
                continue;
            }
          }
        }
      }
      else
      {
        if (**(_DWORD **)(v49 + 8) != 37)
        {
          v78 = "expected string";
LABEL_354:
          *(_QWORD *)&v160 = v78;
          v162 = 259;
          v103 = a1[1];
          v24 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 40))(v103) + 96);
          v25 = v103;
          goto LABEL_355;
        }
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 37)
        {
          v57 = 0;
          while (1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
            if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 2)
              goto LABEL_232;
            v60 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8);
            if (*(_DWORD *)v60 == 2)
            {
              v61 = *(unsigned __int16 **)(v60 + 8);
              v62 = *(_QWORD *)(v60 + 16);
            }
            else
            {
              v61 = *(unsigned __int16 **)(v60 + 8);
              v63 = *(_QWORD *)(v60 + 16);
              v64 = v63 - 1;
              v65 = v63 != 0;
              if (v63)
                v61 = (unsigned __int16 *)((char *)v61 + 1);
              if (v64 < v65)
                v64 = 1;
              if (v64 >= v63)
                v64 = v63;
              v62 = v64 - v65;
            }
            switch(v62)
            {
              case 3uLL:
                v71 = *v61;
                v72 = *((unsigned __int8 *)v61 + 2);
                if (v71 != 27764 || v72 != 115)
                  goto LABEL_232;
                v70 = 1024;
                break;
              case 9uLL:
                v74 = *(_QWORD *)v61;
                v75 = *((unsigned __int8 *)v61 + 8);
                if (v74 != 0x74736E6963657865 || v75 != 114)
                  goto LABEL_232;
                v70 = 4;
                break;
              case 5uLL:
                if (*(_DWORD *)v61 == 1869376609 && *((_BYTE *)v61 + 4) == 99)
                {
                  v70 = 2;
                }
                else
                {
                  v67 = *(_DWORD *)v61;
                  v68 = *((unsigned __int8 *)v61 + 4);
                  if (v67 != 1953067639 || v68 != 101)
                    goto LABEL_232;
                  v70 = 1;
                }
                break;
              default:
                goto LABEL_232;
            }
            v57 |= v70;
            (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
            if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 25)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
              if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 37)
                continue;
            }
            goto LABEL_143;
          }
        }
      }
      v57 = 0;
      v58 = 0;
LABEL_223:
      if ((v57 & 0x200) != 0 && v58)
      {
        v78 = "Section cannot specifiy a group name while also acting as a member of the last group";
        goto LABEL_354;
      }
      v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]);
      if (**(_DWORD **)(v80 + 8) == 25)
      {
        v81 = v80;
        (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
        v82 = **(_DWORD **)(v81 + 8);
        if (v82 == 3)
          goto LABEL_441;
        if (v82 != 36 && v82 != 45)
        {
          if (*(_BYTE *)(v81 + 105))
            v78 = "expected '@<type>', '%<type>' or \"<type>\"";
          else
            v78 = "expected '%<type>' or \"<type>\"";
          goto LABEL_354;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
        if (**(_DWORD **)(v81 + 8) != 4)
        {
LABEL_441:
          if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1[1] + 192))(a1[1], &v159))
          {
            v78 = "expected identifier";
            goto LABEL_354;
          }
        }
        else
        {
          v159 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
        }
      }
      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]);
      if (*((_QWORD *)&v159 + 1))
      {
        if ((v57 & 0x10) != 0
          || (v57 & 0x200) != 0
        {
          return 1;
        }
      }
      else
      {
        if ((v57 & 0x10) != 0)
        {
          v78 = "Mergeable section must specify the type";
          goto LABEL_354;
        }
        if ((v57 & 0x200) != 0)
        {
          v78 = "Group section must specify the type";
          goto LABEL_354;
        }
        if (**(_DWORD **)(v86 + 8) != 9)
          goto LABEL_263;
      }
      if ((v57 & 0x80) != 0
      {
        return 1;
      }
      v26 |= v57;
      goto LABEL_145;
    }
    v47 = a1[1];
    *(_QWORD *)&v160 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v47 + 232))(v47, &v154, &v160) & 1) != 0)
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) == 25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
      goto LABEL_130;
    }
  }
  v58 = 0;
  v57 = 0;
LABEL_145:
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1]) + 8) != 9)
  {
LABEL_263:
    v78 = "expected end of directive";
    goto LABEL_354;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]);
  if (*((_QWORD *)&v159 + 1))
  {
    switch(*((_QWORD *)&v159 + 1))
    {
      case 4:
        if (*(_DWORD *)v159 == 1702129518)
          goto LABEL_264;
        goto LABEL_350;
      case 6:
        if (*(_DWORD *)v159 == 1768058734 && *(_WORD *)(v159 + 4) == 29556)
          goto LABEL_245;
        if (*(_DWORD *)v159 != 1769434741 || *(_WORD *)(v159 + 4) != 25710)
          goto LABEL_350;
        v85 = 1879048193;
        goto LABEL_364;
      case 8:
        if (*(_QWORD *)v159 != 0x73746962676F7270)
          goto LABEL_350;
        v85 = 1;
        goto LABEL_364;
      case 0xALL:
        if (*(_QWORD *)v159 == 0x7272615F74696E69 && *(_WORD *)(v159 + 8) == 31073)
          goto LABEL_361;
        if (*(_QWORD *)v159 == 0x7272615F696E6966 && *(_WORD *)(v159 + 8) == 31073)
          goto LABEL_247;
        goto LABEL_350;
      case 0xBLL:
        if (*(_QWORD *)v159 != 0x72646F5F6D766C6CLL || *(_QWORD *)(v159 + 3) != 0x62617472646F5F6DLL)
          goto LABEL_350;
        v85 = 1879002112;
        goto LABEL_364;
      case 0xCLL:
        if (*(_QWORD *)v159 != 0x6D79735F6D766C6CLL || *(_DWORD *)(v159 + 8) != 1953653104)
          goto LABEL_350;
        v93 = 5;
        goto LABEL_342;
      case 0xDLL:
        if (*(_QWORD *)v159 != 0x5F74696E69657270 || *(_QWORD *)(v159 + 5) != 0x79617272615F7469)
          goto LABEL_350;
        v85 = 16;
        goto LABEL_364;
      case 0xFLL:
        if (*(_QWORD *)v159 != 0x66666F5F6D766C6CLL || *(_QWORD *)(v159 + 7) != 0x676E6964616F6C66)
          goto LABEL_350;
        v93 = 11;
        goto LABEL_342;
      case 0x10:
        if (*(_QWORD *)v159 != 0x5F62625F6D766C6CLL || *(_QWORD *)(v159 + 8) != 0x70616D5F72646461)
          goto LABEL_350;
        v93 = 10;
        goto LABEL_342;
      case 0x13:
        if (*(_QWORD *)v159 != 0x6E696C5F6D766C6CLL
          || *(_QWORD *)(v159 + 8) != 0x6974706F5F72656BLL
          || *(_QWORD *)(v159 + 11) != 0x736E6F6974706F5FLL)
        {
          goto LABEL_350;
        }
        v85 = 1879002113;
        goto LABEL_364;
      case 0x17:
        if (*(_QWORD *)v159 != 0x6C61635F6D766C6CLL
          || *(_QWORD *)(v159 + 8) != 0x5F68706172675F6CLL
          || *(_QWORD *)(v159 + 15) != 0x656C69666F72705FLL)
        {
          goto LABEL_350;
        }
        v93 = 9;
LABEL_342:
        v85 = v93 | 0x6FFF4C00;
        goto LABEL_364;
      case 0x18:
        if (*(_QWORD *)v159 != 0x7065645F6D766C6CLL
          || *(_QWORD *)(v159 + 8) != 0x6C5F746E65646E65
          || *(_QWORD *)(v159 + 16) != 0x7365697261726269)
        {
          goto LABEL_350;
        }
        v85 = 1879002116;
        goto LABEL_364;
      default:
LABEL_350:
        v148 = 0;
        v160 = v159;
        if ((llvm::consumeUnsignedInteger((llvm *)&v160, 0, &v148, v59) & 1) == 0 && !*((_QWORD *)&v160 + 1))
        {
          v85 = v148;
          if (!HIDWORD(v148))
            goto LABEL_364;
        }
        v78 = "unknown section type";
        break;
    }
    goto LABEL_354;
  }
  if (v10 >= 5)
  {
    if (*(_DWORD *)v6 == 1953459758 && *(_BYTE *)(v6 + 4) == 101)
    {
LABEL_264:
      v85 = 7;
      goto LABEL_364;
    }
    if (v10 >= 0xB)
    {
      v84 = *(_QWORD *)v6 == 0x72615F74696E692ELL && *(_QWORD *)(v6 + 3) == 0x79617272615F7469;
      if (v84 && (v10 < 0xC || *(_BYTE *)(v6 + 11) == 46))
      {
LABEL_361:
        v85 = 14;
        goto LABEL_364;
      }
    }
    if (*(_DWORD *)v6 == 1936941614 && *(_BYTE *)(v6 + 4) == 46)
      goto LABEL_245;
  }
  else if (v10 == 4 && *(_DWORD *)v6 == 1936941614)
  {
    goto LABEL_245;
  }
  if (hasPrefix((unsigned __int8 *)v6, v10, ".tbss", 5uLL))
  {
LABEL_245:
    v85 = 8;
    goto LABEL_364;
  }
  if (hasPrefix((unsigned __int8 *)v6, v10, ".fini_array", 0xBuLL))
  {
LABEL_247:
    v85 = 15;
  }
  else if (hasPrefix((unsigned __int8 *)v6, v10, ".preinit_array", 0xEuLL))
  {
    v85 = 16;
  }
  else
  {
    v85 = 1;
  }
LABEL_364:
  if (v58)
  {
    v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 56))(a1[1]);
    v106 = *(unsigned int *)(v105 + 152);
    if ((_DWORD)v106)
    {
      v107 = *(_QWORD *)(*(_QWORD *)(v105 + 144) + 32 * v106 - 32);
      if (v107)
      {
        v108 = *(_QWORD *)(v107 + 240);
        v109 = (_BYTE *)(v108 & 0xFFFFFFFFFFFFFFF8);
        if ((v108 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if ((*v109 & 4) != 0)
          {
            v112 = (uint64_t *)*((_QWORD *)v109 - 1);
            v113 = *v112;
            v110 = (llvm::formatv_object_base *)(v112 + 2);
            v111 = v113;
          }
          else
          {
            v110 = 0;
            v111 = 0;
          }
          v156 = v110;
          v157 = v111;
          v155 = (v108 & 4) != 0;
          v26 |= 0x200u;
        }
      }
    }
  }
  v114 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]);
  v162 = 261;
  *(_QWORD *)&v160 = v6;
  *((_QWORD *)&v160 + 1) = v10;
  v151 = 261;
  v148 = (unint64_t)v156;
  v149 = v157;
  ELFSection = llvm::MCContext::getELFSection(v114, (llvm::formatv_object_base **)&v160, v85, v26, v158, (llvm::formatv_object_base **)&v148, v155, v152, (_BYTE *)v153);
  v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 56))(a1[1]);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v116 + 168))(v116, ELFSection, v154);
  if (*((_QWORD *)&v159 + 1) && *(_DWORD *)(ELFSection + 224) != v85)
  {
    v117 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]) + 48);
    if (v117 == 38)
    {
      if (v10 == 9)
      {
        v118 = *(unsigned __int8 *)(v6 + 8);
        v119 = *(_QWORD *)v6 == 0x6D6172665F68652ELL;
        v120 = 101;
        goto LABEL_380;
      }
    }
    else if (v10 >= 7 && (v117 & 0xFFFFFFFC) == 0x10)
    {
      v118 = *(_DWORD *)(v6 + 3);
      v119 = *(_DWORD *)v6 == 1650811950;
      v120 = 1600615778;
LABEL_380:
      v122 = !v119 || v118 != v120;
      if (v85 == 1 && !v122)
        goto LABEL_404;
    }
    v147 = 1283;
    v144[0] = "changed section type for ";
    v145 = v6;
    v146 = v10;
    v148 = (unint64_t)v144;
    v150 = ", expected: 0x";
    v151 = 770;
    v123 = *(unsigned int *)(ELFSection + 224);
    if ((_DWORD)v123)
    {
      v124 = (char *)&v161 + 1;
      do
      {
        *--v124 = llvm::hexdigit(unsigned int,BOOL)::LUT[v123 & 0xF];
        v125 = v123 > 0xF;
        v123 >>= 4;
      }
      while (v125);
    }
    else
    {
      v124 = (char *)&v161;
      LOBYTE(v161) = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v124, (char *)&v161 + 1, (char *)&v161 + 1 - v124);
    v126 = v151;
    if (v151 == 1)
    {
      *(_QWORD *)&v160 = __p;
      v161 = v143;
      v162 = 260;
      v163 = v141;
      v164 = v142;
    }
    else if ((_BYTE)v151)
    {
      if (HIBYTE(v151) != 1)
        v126 = 2;
      v127 = &v148;
      if (HIBYTE(v151) == 1)
        v127 = (unint64_t *)v148;
      *(_QWORD *)&v160 = v127;
      *((_QWORD *)&v160 + 1) = v149;
      *(_QWORD *)&v161 = __p;
      LOBYTE(v162) = v126;
      HIBYTE(v162) = 4;
    }
    else
    {
      v162 = 256;
    }
    llvm::MCAsmParser::Error(a1[1], a3, (llvm::Twine *)&v160, 0, 0);
    if (v140 < 0)
      operator delete(__p[0]);
  }
LABEL_404:
  v128 = v158;
  v129 = *((_QWORD *)&v159 + 1);
  if (v57 || v158 || *((_QWORD *)&v159 + 1))
  {
    v130 = *(unsigned int *)(ELFSection + 228);
    if ((_DWORD)v130 != v26)
    {
      v147 = 1283;
      v144[0] = "changed section flags for ";
      v145 = v6;
      v146 = v10;
      v148 = (unint64_t)v144;
      v150 = ", expected: 0x";
      v151 = 770;
      if ((_DWORD)v130)
      {
        v131 = (char *)&v161 + 1;
        do
        {
          *--v131 = llvm::hexdigit(unsigned int,BOOL)::LUT[v130 & 0xF];
          v125 = v130 > 0xF;
          v130 >>= 4;
        }
        while (v125);
      }
      else
      {
        v131 = (char *)&v161;
        LOBYTE(v161) = 48;
      }
      std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v131, (char *)&v161 + 1, (char *)&v161 + 1 - v131);
      v132 = v151;
      if (v151 == 1)
      {
        *(_QWORD *)&v160 = __p;
        v161 = v143;
        v162 = 260;
        v163 = v141;
        v164 = v142;
      }
      else if ((_BYTE)v151)
      {
        if (HIBYTE(v151) != 1)
          v132 = 2;
        v133 = &v148;
        if (HIBYTE(v151) == 1)
          v133 = (unint64_t *)v148;
        *(_QWORD *)&v160 = v133;
        *((_QWORD *)&v160 + 1) = v149;
        *(_QWORD *)&v161 = __p;
        LOBYTE(v162) = v132;
        HIBYTE(v162) = 4;
      }
      else
      {
        v162 = 256;
      }
      llvm::MCAsmParser::Error(a1[1], a3, (llvm::Twine *)&v160, 0, 0);
      if (v140 < 0)
        operator delete(__p[0]);
      v128 = v158;
      v129 = *((_QWORD *)&v159 + 1);
    }
  }
  else
  {
    v128 = 0;
  }
  if (v57 || v128 || v129)
  {
    v134 = *(unsigned int *)(ELFSection + 236);
    if (v128 != v134)
    {
      v147 = 1283;
      v144[0] = "changed section entsize for ";
      v145 = v6;
      v146 = v10;
      v148 = (unint64_t)v144;
      v150 = ", expected: ";
      v151 = 770;
      *(_QWORD *)&v160 = &v148;
      *(_QWORD *)&v161 = v134;
      v162 = 2050;
      llvm::MCAsmParser::Error(a1[1], a3, (llvm::Twine *)&v160, 0, 0);
    }
  }
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]) + 1601)
    || (~*(_DWORD *)(ELFSection + 228) & 6) != 0)
  {
    return 0;
  }
  v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]);
  *(_QWORD *)&v160 = ELFSection;
  result = llvm::SetVector<llvm::MCSection *,std::vector<llvm::MCSection *>,llvm::DenseSet<llvm::MCSection *,llvm::DenseMapInfo<llvm::MCSection *,void>>>::insert((_QWORD *)(v135 + 1608), &v160);
  if (result)
  {
    if (*(unsigned __int16 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]) + 1712) <= 2u)
    {
      *(_QWORD *)&v160 = "DWARF2 only supports one section per compilation unit";
      v162 = 259;
      (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 168))(a1[1], a3, &v160, 0, 0);
    }
    if (!*(_QWORD *)(ELFSection + 8))
    {
      v136 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 48))(a1[1]);
      *(_QWORD *)&v160 = "tmp";
      v162 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v136, (const llvm::Twine *)&v160, 1);
      v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 56))(a1[1]);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v138 + 192))(v138, TempSymbol, 0);
      result = 0;
      *(_QWORD *)(ELFSection + 8) = TempSymbol;
      return result;
    }
    return 0;
  }
  return result;
}

BOOL hasPrefix(unsigned __int8 *__s1, size_t a2, void *__s2, size_t __n)
{
  if (a2 < __n)
    return 0;
  if (__n && memcmp(__s1, __s2, __n))
    return 0;
  if (a2 <= __n)
    return 1;
  return __s1[__n] == 46;
}

uint64_t `anonymous namespace'::ELFAsmParser::parseMergeSize(_anonymous_namespace_::ELFAsmParser *this, uint64_t *a2)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1)) + 8) != 25)
  {
    v5 = "expected the entry size";
LABEL_6:
    v8 = v5;
    v9 = 259;
    v6 = *((_QWORD *)this + 1);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (llvm::Twine *)&v8, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2) & 1) == 0)
  {
    if (*a2 > 0)
      return 0;
    v5 = "entry size must be positive";
    goto LABEL_6;
  }
  return 1;
}

uint64_t `anonymous namespace'::ELFAsmParser::parseGroup(_anonymous_namespace_::ELFAsmParser *this, llvm::StringRef *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (**(_DWORD **)(v6 + 8) == 25)
  {
    v7 = v6;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    v8 = **((_QWORD **)this + 1);
    if (**(_DWORD **)(v7 + 8) == 4)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(void))(v8 + 40))() + 8) + 8);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    }
    else if ((*(unsigned int (**)(void))(v8 + 192))())
    {
      v9 = "invalid group name";
      goto LABEL_5;
    }
    if (**(_DWORD **)(v7 + 8) != 25)
    {
      result = 0;
      *a3 = 0;
      return result;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    v14 = 0;
    v15 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v14))
    {
      v9 = "invalid linkage";
    }
    else
    {
      if (v15 == 6 && *(_DWORD *)v14 == 1684893539 && *(_WORD *)(v14 + 4) == 29793)
      {
        result = 0;
        *a3 = 1;
        return result;
      }
      v9 = "Linkage must be 'comdat'";
    }
  }
  else
  {
    v9 = "expected group name";
  }
LABEL_5:
  v16 = v9;
  v17 = 259;
  v10 = *((_QWORD *)this + 1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (llvm::Twine *)&v16, 0, 0);
  return 1;
}

uint64_t `anonymous namespace'::ELFAsmParser::parseLinkedToSym(uint64_t a1, llvm::MCSymbol **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const char *v11;
  llvm::MCContext *v12;
  llvm::MCSymbol *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)(v4 + 8) != 25)
  {
    v11 = "expected linked-to symbol";
LABEL_12:
    v19[0] = v11;
    v20 = 259;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    llvm::MCAsmParser::Error(v15, *(_QWORD *)(v16 + 96), (llvm::Twine *)v19, 0, 0);
    return 1;
  }
  v5 = v4;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v17 = 0;
  v18 = 0;
  v6 = *(_QWORD *)(v5 + 96);
  v7 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v17);
  v8 = **(_QWORD **)(a1 + 8);
  if (v7)
  {
    v9 = *(_QWORD *)((*(uint64_t (**)(void))(v8 + 40))() + 8);
    if (*(_QWORD *)(v9 + 16) == 1 && **(_BYTE **)(v9 + 8) == 48)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      result = 0;
      *a2 = 0;
      return result;
    }
    v11 = "invalid linked-to symbol";
    goto LABEL_12;
  }
  v12 = (llvm::MCContext *)(*(uint64_t (**)(void))(v8 + 48))();
  v20 = 261;
  v19[0] = v17;
  v19[1] = v18;
  v13 = (llvm::MCSymbol *)llvm::MCContext::lookupSymbol(v12, (const llvm::Twine *)v19);
  if (v13 && (*((_DWORD *)v13 + 2) & 0x380) == 0x100)
  {
    *a2 = v13;
    llvm::MCSymbol::isInSection(v13);
    if ((v14 & 1) != 0)
      return 0;
  }
  else
  {
    *a2 = 0;
  }
  v20 = 1283;
  v19[0] = "linked-to symbol is not in a section: ";
  v19[2] = v17;
  v19[3] = v18;
  return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v6, (llvm::Twine *)v19, 0, 0);
}

uint64_t `anonymous namespace'::ELFAsmParser::maybeParseUniqueID(_anonymous_namespace_::ELFAsmParser *this, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (**(_DWORD **)(v4 + 8) == 25)
  {
    v5 = v4;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    v13 = 0;
    v14 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), &v13))
    {
      v6 = "expected identifier";
LABEL_10:
      v11 = v6;
      v12 = 259;
      v8 = *((_QWORD *)this + 1);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (llvm::Twine *)&v11, 0, 0);
      return 1;
    }
    if (v14 != 6 || (*(_DWORD *)v13 == 1902734965 ? (v7 = *(unsigned __int16 *)(v13 + 4) == 25973) : (v7 = 0), !v7))
    {
      v6 = "expected 'unique'";
      goto LABEL_10;
    }
    if (**(_DWORD **)(v5 + 8) != 25)
    {
      v6 = "expected commma";
      goto LABEL_10;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
    if (((*(uint64_t (**)(_QWORD, unint64_t *))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), a2) & 1) != 0)return 1;
    if ((*a2 & 0x8000000000000000) != 0)
    {
      v6 = "unique id must be positive";
      goto LABEL_10;
    }
    if (*a2 >= 0xFFFFFFFF)
    {
      v6 = "unique id is too large";
      goto LABEL_10;
    }
  }
  return 0;
}

void llvm::MCSymbol::isInSection(llvm::MCSymbol *this)
{
  uint64_t v2;

  llvm::MCSymbol::getFragment(this, 1);
  if (v2)
    llvm::MCSymbol::getFragment(this, 1);
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectivePushSection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::MCStreamer *v6;
  _BOOL8 v7;
  llvm::MCStreamer *v8;

  v6 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  llvm::MCStreamer::pushSection(v6);
  if (v7)
  {
    v8 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    llvm::MCStreamer::popSection(v8);
  }
  return v7;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectivePopSection>(uint64_t a1)
{
  llvm::MCStreamer *v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;

  v2 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = llvm::MCStreamer::popSection(v2);
  if (!v3)
  {
    v7 = ".popsection without corresponding .pushsection";
    v8 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return !v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSize>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v2 = "expected identifier";
LABEL_9:
    v10[0] = v2;
    v11 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)v10, 0, 0);
    return 1;
  }
  v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v10);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v2 = "expected comma";
    goto LABEL_9;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = 0;
  v10[0] = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), &v9, v10) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 424))(v5, Symbol, v9);
      return 0;
    }
    v2 = "unexpected token";
    goto LABEL_9;
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectivePrevious>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 152);
  if ((_DWORD)v3 && (v4 = *(_QWORD *)(v2 + 144) + 32 * v3, (v5 = *(_QWORD *)(v4 - 16)) != 0))
  {
    v6 = *(_QWORD *)(v4 - 8);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    v11 = ".previous without corresponding .section";
    v12 = 259;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    llvm::MCAsmParser::Error(v9, *(_QWORD *)(v10 + 96), (llvm::Twine *)&v11, 0, 0);
    return 1;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveType>(uint64_t a1)
{
  const char *v2;
  llvm::MCContext *v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v31))
  {
    v2 = "expected identifier";
  }
  else
  {
    v3 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v30 = 261;
    v29[0] = v31;
    v29[1] = v32;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v29);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 37
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 36
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    {
      if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105))
      {
        v2 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '%<type>' or \"<type>\"";
        goto LABEL_16;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 45)
      {
        v2 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '@<type>', '%<type>' or \"<type>\"";
        goto LABEL_16;
      }
    }
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    }
    v5 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    v27 = 0;
    v28 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v27))
    {
      v2 = "expected symbol type";
    }
    else
    {
      switch(v28)
      {
        case 6:
          if (*(_DWORD *)v27 == 1701470831 && *(_WORD *)(v27 + 4) == 29795)
            goto LABEL_75;
          if (*(_DWORD *)v27 == 1835888483 && *(_WORD *)(v27 + 4) == 28271)
            goto LABEL_79;
          v11 = *(unsigned __int16 *)(v27 + 4);
          v12 = *(_DWORD *)v27 == 2037673838;
          v13 = 25968;
          goto LABEL_50;
        case 7:
          if (*(_DWORD *)v27 != 1599362131 || *(_DWORD *)(v27 + 3) != 1397511263)
            goto LABEL_74;
          goto LABEL_77;
        case 8:
          if (*(_QWORD *)v27 != 0x434E55465F545453 && *(_QWORD *)v27 != 0x6E6F6974636E7566)
            goto LABEL_74;
          v15 = 2;
          goto LABEL_80;
        case 10:
          if (*(_QWORD *)v27 == 0x454A424F5F545453 && *(_WORD *)(v27 + 8) == 21571)
          {
LABEL_75:
            v15 = 4;
          }
          else if (*(_QWORD *)v27 == 0x656A626F5F736C74 && *(_WORD *)(v27 + 8) == 29795)
          {
LABEL_77:
            v15 = 5;
          }
          else if (*(_QWORD *)v27 == 0x4D4D4F435F545453 && *(_WORD *)(v27 + 8) == 20047)
          {
LABEL_79:
            v15 = 6;
          }
          else
          {
            v11 = *(unsigned __int16 *)(v27 + 8);
            v12 = *(_QWORD *)v27 == 0x59544F4E5F545453;
            v13 = 17744;
LABEL_50:
            if (!v12 || v11 != v13)
            {
LABEL_74:
              v29[0] = "unsupported attribute";
              v30 = 259;
              return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v5, (llvm::Twine *)v29, 0, 0);
            }
            v15 = 7;
          }
LABEL_80:
          if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
            v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
            (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v26 + 296))(v26, Symbol, v15);
            return 0;
          }
          v2 = "expected end of directive";
          break;
        case 13:
          v20 = *(_QWORD *)(v27 + 5);
          v21 = *(_QWORD *)v27 == 0x5F554E475F545453;
          v22 = 0x434E5546495F554ELL;
          goto LABEL_70;
        case 17:
          if (*(_QWORD *)v27 != 0x71696E755F756E67
            || *(_QWORD *)(v27 + 8) != 0x63656A626F5F6575
            || *(_BYTE *)(v27 + 16) != 116)
          {
            goto LABEL_74;
          }
          v15 = 8;
          goto LABEL_80;
        case 21:
          v20 = *(_QWORD *)(v27 + 13);
          v21 = *(_QWORD *)v27 == 0x69646E695F756E67 && *(_QWORD *)(v27 + 8) == 0x6E75665F74636572;
          v22 = 0x6E6F6974636E7566;
LABEL_70:
          if (!v21 || v20 != v22)
            goto LABEL_74;
          v15 = 3;
          goto LABEL_80;
        default:
          goto LABEL_74;
      }
    }
  }
LABEL_16:
  v29[0] = v2;
  v30 = 259;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (llvm::Twine *)v29, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveIdent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 3)
  {
    v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    if (*(_DWORD *)v2 == 2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      v4 = *(_QWORD *)(v2 + 16);
    }
    else
    {
      v8 = v2 + 8;
      v6 = *(_QWORD *)(v2 + 8);
      v7 = *(_QWORD *)(v8 + 8);
      v9 = v7 != 0;
      if (v7)
        v3 = v6 + 1;
      else
        v3 = v6;
      if (v7 - 1 < v9)
        v10 = 1;
      else
        v10 = v7 - 1;
      if (v10 >= v7)
        v10 = v7;
      v4 = v10 - v9;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 672))(v11, v3, v4);
      return 0;
    }
    v5 = "expected end of directive";
  }
  else
  {
    v5 = "expected string";
  }
  v15 = v5;
  v16 = 259;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  llvm::MCAsmParser::Error(v13, *(_QWORD *)(v14 + 96), (llvm::Twine *)&v15, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSymver>(uint64_t a1)
{
  char v2;
  const char *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BOOL8 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  llvm::MCContext *v12;
  unint64_t Symbol;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  void *__s;
  size_t __n;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  __s = 0;
  __n = 0;
  v16 = 0;
  v17 = 0;
  if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v20))
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    {
      v3 = "expected a comma";
      goto LABEL_18;
    }
    v2 = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105);
    *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105) = v2;
    if (!(*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &__s))
    {
      if (!__n || (v4 = __s, (v5 = memchr(__s, 64, __n)) == 0) || v5 - v4 == -1)
      {
        v3 = "expected a '@' in the name";
        goto LABEL_18;
      }
      v6 = llvm::StringRef::find((uint64_t *)&__s, "@@@", 3uLL, 0) == -1;
      if (llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 25))
      {
        if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v16) & 1) != 0
          || v17 != 6
          || (*(_DWORD *)v16 == 1869440370 ? (v7 = *(unsigned __int16 *)(v16 + 4) == 25974) : (v7 = 0), !v7))
        {
          v3 = "expected 'remove'";
          goto LABEL_18;
        }
        v6 = 0;
      }
      llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 9);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      v12 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v15 = 261;
      v14[0] = v20;
      v14[1] = v21;
      Symbol = llvm::MCContext::getOrCreateSymbol(v12, (const llvm::Twine *)v14);
      (*(void (**)(uint64_t, unint64_t, void *, size_t, _BOOL8))(*(_QWORD *)v11 + 432))(v11, Symbol, __s, __n, v6);
      return 0;
    }
  }
  v3 = "expected identifier";
LABEL_18:
  v14[0] = v3;
  v15 = 259;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (llvm::Twine *)v14, 0, 0);
  return 1;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveVersion>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  llvm::MCContext *v13;
  unint64_t ELFSection;
  llvm::MCStreamer *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MCStreamer *v24;
  llvm::formatv_object_base *v26;
  __int16 v27;
  llvm::formatv_object_base *v28[4];
  __int16 v29;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 3)
  {
    v5 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    if (*(_DWORD *)v5 == 2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      v10 = v5 + 8;
      v8 = *(_QWORD *)(v5 + 8);
      v9 = *(_QWORD *)(v10 + 8);
      v11 = v9 != 0;
      if (v9)
        v6 = v8 + 1;
      else
        v6 = v8;
      if (v9 - 1 < v11)
        v12 = 1;
      else
        v12 = v9 - 1;
      if (v12 >= v9)
        v12 = v9;
      v7 = v12 - v11;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v13 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v26 = (llvm::formatv_object_base *)".note";
    v27 = 259;
    v29 = 257;
    ELFSection = llvm::MCContext::getELFSection(v13, &v26, 7, 0, 0, v28, 0, -1, 0);
    v15 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v16 = llvm::MCStreamer::pushSection(v15);
    v17 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), v16);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, ELFSection, 0);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v18 + 512))(v18, v7 + 1, 4);
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 512))(v19, 0, 4);
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 512))(v20, 1, 4);
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 488))(v21, v6, v7);
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 512))(v22, 0, 1);
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v23 + 632))(v23, 2, 0, 1, 0);
    v24 = (llvm::MCStreamer *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    llvm::MCStreamer::popSection(v24);
  }
  else
  {
    v28[0] = (llvm::formatv_object_base *)"expected string";
    v29 = 259;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(_QWORD *)(v4 + 96), (llvm::Twine *)v28, 0, 0);
  }
  return v2 != 3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveWeakref>(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::MCContext *v9;
  unint64_t Symbol;
  llvm::MCContext *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19))
  {
    v2 = "expected identifier";
LABEL_7:
    v16 = v2;
    v18 = 259;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (llvm::Twine *)&v16, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v2 = "expected a comma";
    goto LABEL_7;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v14 = 0;
  v15 = 0;
  v3 = (*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14);
  if ((_DWORD)v3)
  {
    v16 = "expected identifier";
    v18 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (llvm::Twine *)&v16, 0, 0);
  }
  else
  {
    v9 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v18 = 261;
    v16 = v19;
    v17 = v20;
    Symbol = llvm::MCContext::getOrCreateSymbol(v9, (const llvm::Twine *)&v16);
    v11 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v18 = 261;
    v16 = v14;
    v17 = v15;
    v12 = llvm::MCContext::getOrCreateSymbol(v11, (const llvm::Twine *)&v16);
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v13 + 288))(v13, Symbol, v12);
  }
  return v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v11;
  uint64_t v12;
  llvm::MCContext *v13;
  unint64_t Symbol;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  switch(a3)
  {
    case 5:
      if (*(_DWORD *)a2 != 1634039598 || *(_BYTE *)(a2 + 4) != 107)
        goto LABEL_30;
      v5 = 24;
      break;
    case 6:
      if (*(_DWORD *)a2 != 1668246574 || *(_WORD *)(a2 + 4) != 27745)
        goto LABEL_30;
      v5 = 17;
      break;
    case 7:
      if (*(_DWORD *)a2 != 1684629550 || *(_DWORD *)(a2 + 3) != 1852138596)
        goto LABEL_30;
      v5 = 12;
      break;
    case 9:
      if (*(_QWORD *)a2 != 0x616E7265746E692ELL || *(_BYTE *)(a2 + 8) != 108)
        goto LABEL_30;
      v5 = 15;
      break;
    case 10:
      if (*(_QWORD *)a2 != 0x746365746F72702ELL || *(_WORD *)(a2 + 8) != 25701)
        goto LABEL_30;
      v5 = 22;
      break;
    default:
LABEL_30:
      v5 = 0;
      break;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_32:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v21 = 0;
  v22 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v21) & 1) != 0)
  {
LABEL_41:
    v16 = "expected identifier";
    goto LABEL_42;
  }
  while (1)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v21, v22);
    v12 = **(_QWORD **)(a1 + 8);
    if (v11)
    {
      if (**(_DWORD **)((*(uint64_t (**)(void))(v12 + 40))() + 8) == 9)
        goto LABEL_32;
      goto LABEL_40;
    }
    v13 = (llvm::MCContext *)(*(uint64_t (**)(void))(v12 + 48))();
    v20 = 261;
    v19[0] = v21;
    v19[1] = v22;
    Symbol = llvm::MCContext::getOrCreateSymbol(v13, (const llvm::Twine *)v19);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v15 + 296))(v15, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_32;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
      break;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
LABEL_40:
    v21 = 0;
    v22 = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v21) & 1) != 0)
      goto LABEL_41;
  }
  v16 = "expected comma";
LABEL_42:
  v19[0] = v16;
  v20 = 259;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (llvm::Twine *)v19, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::ELFAsmParser,&`anonymous namespace'::ELFAsmParser::ParseDirectiveSubsection>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v8[0] = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v10, v8) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v8[0] = "expected end of directive";
    v9 = 259;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v4 = *(unsigned int *)(v3 + 152);
  if ((_DWORD)v4)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 168))(v3, *(_QWORD *)(*(_QWORD *)(v3 + 144) + 32 * v4 - 32), v10);
  return 0;
}

llvm::MCAsmLexer *llvm::MCAsmLexer::MCAsmLexer(llvm::MCAsmLexer *this)
{
  __int128 v3;
  int v4;

  *(_QWORD *)this = &unk_251C1C720;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 0x100000000;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  *((_WORD *)this + 53) = 256;
  *((_DWORD *)this + 27) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_DWORD *)this + 29) = 10;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 16) = 0;
  v4 = 11;
  v3 = 0uLL;
  llvm::SmallVectorImpl<llvm::AsmToken>::emplace_back<llvm::AsmToken::TokenKind,llvm::StringRef>((uint64_t)this + 8, &v4, &v3);
  return this;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmToken>::emplace_back<llvm::AsmToken::TokenKind,llvm::StringRef>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  unsigned int v7;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::growAndEmplaceBack<llvm::AsmToken::TokenKind,llvm::StringRef>(a1, a2, a3);
  v5 = *(_QWORD *)a1 + 40 * v4;
  *(_DWORD *)v5 = *a2;
  v6 = *a3;
  *(_QWORD *)(v5 + 24) = 0;
  v5 += 24;
  *(_OWORD *)(v5 - 16) = v6;
  *(_DWORD *)(v5 + 8) = 64;
  llvm::APInt::clearUnusedBits(v5);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 40 * v7 - 40;
}

void llvm::MCAsmLexer::~MCAsmLexer(void **this)
{
  *this = &unk_251C1C720;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  llvm::SmallVector<llvm::AsmToken,1u>::~SmallVector((uint64_t)(this + 1));
}

uint64_t llvm::SmallVector<llvm::AsmToken,1u>::~SmallVector(uint64_t a1)
{
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::growAndEmplaceBack<llvm::AsmToken::TokenKind,llvm::StringRef>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  unsigned int v11;
  uint64_t v13;

  v13 = 0;
  v6 = a1 + 16;
  v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 40, &v13);
  v8 = (uint64_t)v7 + 40 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v8 = *a2;
  v9 = *a3;
  *(_QWORD *)(v8 + 24) = 0;
  v8 += 24;
  *(_OWORD *)(v8 - 16) = v9;
  *(_DWORD *)(v8 + 8) = 64;
  llvm::APInt::clearUnusedBits(v8);
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::moveElementsForGrow(a1, (uint64_t)v7);
  v10 = v13;
  if (*(_QWORD *)a1 != v6)
    free(*(void **)a1);
  *(_QWORD *)a1 = v7;
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v10;
  return (uint64_t)v7 + 40 * v11 - 40;
}

BOOL llvm::MCAsmParser::parseEOL(llvm::MCAsmParser *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  __int16 v7;

  v2 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v3 = *(_QWORD *)this;
  if (v2 == 9)
  {
    (*(void (**)(llvm::MCAsmParser *))(v3 + 184))(this);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(v3 + 40))(this) + 8) + 8);
    v6 = "expected newline";
    v7 = 259;
    llvm::MCAsmParser::Error((uint64_t)this, v4, (llvm::Twine *)&v6, 0, 0);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParser::Error(uint64_t a1, uint64_t a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  __n128 v8;
  llvm::MCAsmLexer *v9;
  uint64_t v11;
  void *v12;
  __int128 v13;
  _BYTE v14[64];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = xmmword_24AA2B2D0;
  v15 = 0;
  v16 = 0;
  v11 = a2;
  v12 = v14;
  llvm::Twine::toVector(a3, (uint64_t)&v12);
  v15 = a4;
  v16 = a5;
  v8 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(a1 + 16, (unint64_t)&v11);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, v8) + 8) == 1)
  {
    v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmLexer::Lex(v9);
  }
  if (v12 != v14)
    free(v12);
  return 1;
}

BOOL llvm::MCAsmParser::parseEOL(llvm::MCAsmParser *this, const llvm::Twine *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v5 = *(_QWORD *)this;
  if (v4 == 9)
  {
    (*(void (**)(llvm::MCAsmParser *))(v5 + 184))(this);
  }
  else
  {
    v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(v5 + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8), a2, 0, 0);
  }
  return v4 != 9;
}

BOOL llvm::MCAsmParser::parseToken(llvm::MCAsmParser *this, int a2, llvm::Twine *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == 9)
    return llvm::MCAsmParser::parseEOL(this, a3);
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
  v8 = *(_QWORD *)this;
  if (**(_DWORD **)(v7 + 8) == a2)
  {
    (*(void (**)(llvm::MCAsmParser *))(v8 + 184))(this);
    return 0;
  }
  else
  {
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(v8 + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8), a3, 0, 0);
    return 1;
  }
}

BOOL llvm::MCAsmParser::parseIntToken(llvm::MCAsmParser *this, uint64_t *a2, const llvm::Twine *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
  if (v6 == 4)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    *a2 = *v9;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v7 + 96), a3, 0, 0);
  }
  return v6 != 4;
}

BOOL llvm::MCAsmParser::parseOptionalToken(llvm::MCAsmParser *a1, int a2)
{
  int v4;
  const char *v6;
  __int16 v7;

  v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (v4 == a2)
  {
    v6 = "unexpected token";
    v7 = 259;
    llvm::MCAsmParser::parseToken(a1, a2, (llvm::Twine *)&v6);
  }
  return v4 == a2;
}

__n128 llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v3 = (__n128 *)llvm::SmallVectorTemplateCommon<llvm::MCAsmParser::MCPendingError,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>>(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 112 * v5;
  *(_QWORD *)v6 = v3->n128_u64[0];
  *(_OWORD *)(v6 + 16) = xmmword_24AA2B2D0;
  *(_QWORD *)(v6 + 8) = v6 + 32;
  v7 = v6 + 8;
  if (v3[1].n128_u64[0])
    llvm::SmallVectorImpl<char>::operator=(v7, (uint64_t)&v3->n128_i64[1]);
  result = v3[6];
  *(__n128 *)(v4 + 112 * v5 + 96) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::MCAsmParser::addErrorSuffix(llvm::MCAsmParser *this, const llvm::Twine *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8) == 1)
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4)
  {
    v5 = 112 * v4;
    v6 = *((_QWORD *)this + 2) + 8;
    do
    {
      llvm::Twine::toVector(a2, v6);
      v6 += 112;
      v5 -= 112;
    }
    while (v5);
  }
  return 1;
}

uint64_t llvm::MCAsmParser::parseMany(llvm::MCAsmParser *a1, uint64_t (*a2)(uint64_t), uint64_t a3, int a4)
{
  _BOOL4 v9;
  const char *v10;
  __int16 v11;

  if (llvm::MCAsmParser::parseOptionalToken(a1, 9))
    return 0;
  if ((a2(a3) & 1) != 0)
    return 1;
  do
  {
    v9 = llvm::MCAsmParser::parseOptionalToken(a1, 9);
    if (v9)
      break;
    if (a4)
    {
      v10 = "unexpected token";
      v11 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v10))
        break;
    }
  }
  while (!a2(a3));
  return !v9;
}

uint64_t llvm::MCAsmParser::getAssemblerDialect(llvm::MCAsmParser *this)
{
  return 0;
}

uint64_t llvm::MCAsmParser::discardLTOSymbol()
{
  return 0;
}

char **llvm::SmallVector<llvm::MCAsmParser::MCPendingError,0u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 112 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 104];
      if (&v2[v4 - 80] != v5)
        free(v5);
      v4 -= 112;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::MCAsmParser::MCPendingError,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 112 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 112, &v6);
  llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = *a1 + 112 * v2;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)a2 = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(a2 + 8) = a2 + 32;
      *(_OWORD *)(a2 + 16) = xmmword_24AA2B2D0;
      if (*(_QWORD *)(v6 + 8))
        llvm::SmallVectorImpl<char>::operator=(a2 + 8, (const void **)v6);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v6 + 88);
      a2 += 112;
      v6 += 112;
    }
    while (v7 + 112 != v5);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 112 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 104);
        if ((void *)(v9 + v10 - 80) != v11)
          free(v11);
        v10 -= 112;
      }
      while (v10);
    }
  }
}

uint64_t _GLOBAL__sub_I_MCAsmParser_cpp()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 20;
  v1.n128_u64[0] = (unint64_t)"The maximum nesting depth allowed for assembly macros.";
  v1.n128_u64[1] = 54;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&llvm::AsmMacroMaxNestingDepth, "asm-macro-max-nesting-depth", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::AsmMacroMaxNestingDepth, &dword_24A800000);
}

uint64_t llvm::MCAsmParserExtension::ParseDirectiveCGProfile(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  llvm::MCAsmParser *v5;
  llvm::MCContext *v6;
  unint64_t Symbol;
  llvm::MCContext *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v24))
  {
    goto LABEL_2;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    goto LABEL_9;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v19 = 0;
  v20 = 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19))
  {
LABEL_2:
    v3 = "expected identifier in directive";
LABEL_10:
    v21 = v3;
    v23 = 259;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    llvm::MCAsmParser::Error(v16, *(_QWORD *)(v17 + 96), (llvm::Twine *)&v21, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_9:
    v3 = "expected a comma";
    goto LABEL_10;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v18 = 0;
  v5 = *(llvm::MCAsmParser **)(a1 + 8);
  v21 = "expected integer count in '.cg_profile' directive";
  v23 = 259;
  if (!llvm::MCAsmParser::parseIntToken(v5, &v18, (const llvm::Twine *)&v21))
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v6 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v23 = 261;
      v21 = v24;
      v22 = v25;
      Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)&v21);
      v8 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v23 = 261;
      v21 = v19;
      v22 = v20;
      v9 = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)&v21);
      v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v12 = llvm::MCSymbolRefExpr::create(Symbol, 0, v11, v2);
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v14 = llvm::MCSymbolRefExpr::create(v9, 0, v13, v4);
      (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 1152))(v10, v12, v14, v18);
      return 0;
    }
    v3 = "unexpected token in directive";
    goto LABEL_10;
  }
  return 1;
}

void `anonymous namespace'::WasmAsmParser::~WasmAsmParser(_anonymous_namespace_::WasmAsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::WasmAsmParser::Initialize(_anonymous_namespace_::WasmAsmParser *this, llvm::MCAsmParser *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseSectionDirectiveText>()
{
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseSectionDirectiveData>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                             + 160)
                 + 32);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 168))(v3, v2, 0);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseSectionDirective>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  int v29;
  BOOL v32;
  BOOL v35;
  llvm::MCContext *v36;
  unint64_t WasmSection;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  BOOL v41;
  char v42;
  llvm::formatv_object_base *v43;
  int v44;
  uint64_t v45;
  void *__p[2];
  char v47;
  int v48;
  __int16 v49;
  __int128 v50;
  _QWORD v51[4];
  __int16 v52;
  __int128 v53;
  const char *v54;
  __int16 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  llvm::formatv_object_base *v59;
  uint64_t v60;
  __int128 v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v57 = 0;
  v58 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v57))
  {
    v6 = "expected identifier in directive";
    goto LABEL_3;
  }
    return 1;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v10 != 3)
  {
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(v10 + 16);
    v59 = (llvm::formatv_object_base *)"expected string in directive, instead got: ";
    v60 = 43;
    *(_QWORD *)&v61 = v12;
    *((_QWORD *)&v61 + 1) = v13;
    v62 = 1285;
    return llvm::MCAsmParser::Error(v11, v12, (llvm::Twine *)&v59, 0, 0);
  }
  if (v58 < 5)
  {
    if (v58 != 4)
      goto LABEL_37;
LABEL_36:
    if (*(_DWORD *)v57 != 1936941614)
    {
LABEL_37:
      v19 = 19;
      goto LABEL_38;
    }
    goto LABEL_95;
  }
  if (*(_DWORD *)v57 == 1952539694 && *(_BYTE *)(v57 + 4) == 97)
    goto LABEL_37;
  if (v58 < 6)
  {
    if (*(_DWORD *)v57 != 1935832110 || *(_BYTE *)(v57 + 4) != 115)
    {
LABEL_32:
      if (*(_DWORD *)v57 != 2019914798 || *(_BYTE *)(v57 + 4) != 116)
        goto LABEL_36;
      goto LABEL_96;
    }
LABEL_62:
    v19 = 12;
    goto LABEL_38;
  }
  if (*(_DWORD *)v57 == 1633973294 && *(_WORD *)(v57 + 4) == 24948)
  {
    v19 = 13;
    goto LABEL_38;
  }
  if (*(_DWORD *)v57 == 1935832110 && *(_BYTE *)(v57 + 4) == 115)
    goto LABEL_62;
  if (v58 < 7)
    goto LABEL_32;
  if (*(_DWORD *)v57 != 1685025326 || *(_DWORD *)(v57 + 3) != 1635017060)
  {
    if (*(_DWORD *)v57 != 2019914798 || *(_BYTE *)(v57 + 4) != 116)
    {
      if (v58 < 0xF
        || (*(_QWORD *)v57 == 0x5F6D6F747375632ELL ? (v32 = *(_QWORD *)(v57 + 7) == 0x6E6F69746365735FLL) : (v32 = 0),
            !v32))
      {
        if (*(_DWORD *)v57 == 1936941614)
        {
LABEL_95:
          v19 = 15;
          goto LABEL_38;
        }
        if (v58 >= 0xB && *(_QWORD *)v57 == 0x72615F74696E692ELL && *(_QWORD *)(v57 + 3) == 0x79617272615F7469)
          goto LABEL_37;
        if (*(_DWORD *)v57 != 1650811950 || *(_DWORD *)(v57 + 3) != 1600615778)
          goto LABEL_37;
      }
      v19 = 0;
      goto LABEL_38;
    }
LABEL_96:
    v19 = 2;
    goto LABEL_38;
  }
  v19 = 4;
LABEL_38:
  v20 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  v21 = *(_QWORD *)(v20 + 16);
  v22 = v21 - 1;
  v23 = v21 != 0;
  if (v21 - 1 < v23)
    v22 = 1;
  if (v22 < v21)
    v21 = v22;
  v24 = v21 - v23;
  if (v24)
  {
    v27 = 0;
    v26 = 0;
    v25 = 0;
    v28 = (char *)(*(_QWORD *)(v20 + 8) + v23);
    while (1)
    {
      v29 = *v28;
      if (v29 > 83)
      {
        if (v29 == 84)
        {
          v25 |= 2u;
        }
        else
        {
          if (v29 != 112)
          {
LABEL_61:
            v6 = "unknown flag";
            goto LABEL_3;
          }
          v26 = 1;
        }
      }
      else if (v29 == 71)
      {
        v27 = 1;
      }
      else
      {
        if (v29 != 83)
          goto LABEL_61;
        v25 |= 1u;
      }
      ++v28;
      if (!--v24)
        goto LABEL_55;
    }
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
LABEL_55:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  {
    return 1;
  }
  v56 = 0uLL;
  if (!v27)
    goto LABEL_103;
  if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) != 25)
  {
    v6 = "expected group name";
LABEL_3:
    v59 = (llvm::formatv_object_base *)v6;
    v62 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (llvm::Twine *)&v59, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == 4)
  {
    v56 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                                + 8)
                    + 8);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    goto LABEL_67;
  }
  if (((*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v56) & 1) != 0)
  {
    v6 = "invalid group name";
    goto LABEL_3;
  }
LABEL_67:
  if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == 25)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v53 = 0uLL;
    if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v53))
    {
      v6 = "invalid linkage";
      goto LABEL_3;
    }
    if (*((_QWORD *)&v53 + 1) != 6
      || (*(_DWORD *)v53 == 1684893539 ? (v35 = *(unsigned __int16 *)(v53 + 4) == 29793) : (v35 = 0), !v35))
    {
      v6 = "Linkage must be 'comdat'";
      goto LABEL_3;
    }
  }
LABEL_103:
    return 1;
  v36 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v62 = 261;
  v59 = (llvm::formatv_object_base *)v57;
  v60 = v58;
  v55 = 261;
  v53 = v56;
  WasmSection = llvm::MCContext::getWasmSection(v36, &v59, v19, v25, (llvm::formatv_object_base **)&v53, -1);
  v38 = *(unsigned int *)(WasmSection + 256);
  if ((_DWORD)v38 != v25)
  {
    v39 = *(_QWORD *)(a1 + 24);
    v52 = 1283;
    v51[0] = "changed section flags for ";
    v51[2] = v57;
    v51[3] = v58;
    *(_QWORD *)&v53 = v51;
    v54 = ", expected: 0x";
    v55 = 770;
    if ((_DWORD)v38)
    {
      v40 = (char *)&v61 + 1;
      do
      {
        *--v40 = llvm::hexdigit(unsigned int,BOOL)::LUT[v38 & 0xF];
        v41 = v38 > 0xF;
        v38 >>= 4;
      }
      while (v41);
    }
    else
    {
      v40 = (char *)&v61;
      LOBYTE(v61) = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v40, (char *)&v61 + 1, (char *)&v61 + 1 - v40);
    v42 = v55;
    if (v55 == 1)
    {
      v59 = (llvm::formatv_object_base *)__p;
      v61 = v50;
      v62 = 260;
      v63 = v48;
      v64 = v49;
    }
    else if ((_BYTE)v55)
    {
      if (HIBYTE(v55) != 1)
        v42 = 2;
      v43 = (llvm::formatv_object_base *)&v53;
      if (HIBYTE(v55) == 1)
        v43 = (llvm::formatv_object_base *)v53;
      v59 = v43;
      v60 = *((_QWORD *)&v53 + 1);
      *(_QWORD *)&v61 = __p;
      LOBYTE(v62) = v42;
      HIBYTE(v62) = 4;
    }
    else
    {
      v62 = 256;
    }
    llvm::MCAsmParser::Error(v39, a4, (llvm::Twine *)&v59, 0, 0);
    if (v47 < 0)
      operator delete(__p[0]);
  }
  if (!v26)
    goto LABEL_128;
  v44 = *(unsigned __int8 *)(WasmSection + 220);
  if ((v44 - 15) >= 6 && (v44 & 0xFC) != 4 && (v44 & 0xFC) != 8 && (v44 - 12) >= 3)
  {
    v11 = *(_QWORD *)(a1 + 24);
    v59 = (llvm::formatv_object_base *)"Only data sections can be passive";
    v62 = 259;
    v12 = a4;
    return llvm::MCAsmParser::Error(v11, v12, (llvm::Twine *)&v59, 0, 0);
  }
  *(_BYTE *)(WasmSection + 252) = 1;
LABEL_128:
  v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v45 + 168))(v45, WasmSection, 0);
  return 0;
}

uint64_t `anonymous namespace'::WasmAsmParser::expect(uint64_t a1, int a2, const std::string::value_type *a3)
{
  uint64_t v4;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  std::string v18;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;

  if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v17, "Expected ");
    v6 = std::string::append(&v17, a3);
    v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v18, ", instead got: ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v20 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = (void *)HIBYTE(v20);
    v11 = __p;
    if (v20 < 0)
    {
      v11 = (void **)__p[0];
      v10 = __p[1];
    }
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v21[0] = v11;
    v21[1] = v10;
    v21[2] = v14;
    v21[3] = v15;
    v22 = 1285;
    v4 = llvm::MCAsmParser::Error(v12, v14, (llvm::Twine *)v21, 0, 0);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v4;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseDirectiveSize>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  llvm::MCContext *v8;
  unint64_t Symbol;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v16))
  {
    v14[0] = "expected identifier in directive";
    v15 = 259;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (llvm::Twine *)v14, 0, 0);
    return 1;
  }
  v8 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v15 = 261;
  v14[0] = v16;
  v14[1] = v17;
  Symbol = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)v14);
    return 1;
  v13 = 0;
  v14[0] = 0;
  {
    return 1;
  }
  if (*(_BYTE *)(Symbol + 36))
    v11 = *(_DWORD *)(Symbol + 32) == 0;
  else
    v11 = 0;
  if (v11)
  {
    v14[0] = ".size directive ignored for function symbols";
    v15 = 259;
    (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a4, v14, 0, 0);
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v12 + 424))(v12, Symbol, v13);
  }
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::parseDirectiveType>(uint64_t a1)
{
  uint64_t v2;
  llvm::MCContext *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unint64_t Symbol;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(llvm::MCContext **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8))
                             + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const char **)(v4 + 8);
    v5 = *(_QWORD *)(v4 + 16);
    v22 = 261;
    v18 = v6;
    v19 = v5;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)&v18);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_DWORD *)v8 == 25)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_DWORD *)v8 == 45)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        if (*(_DWORD *)v8 == 2)
        {
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(_QWORD *)(v8 + 16);
          if (v10 != 6)
          {
            if (v10 == 8 && *(_QWORD *)v9 == 0x6E6F6974636E7566)
            {
              *(_DWORD *)(Symbol + 32) = 0;
              *(_BYTE *)(Symbol + 36) = 1;
              v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 144) + 32 * *(unsigned int *)(v11 + 152) - 32) + 232))
                *(_BYTE *)(Symbol + 42) = 1;
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          if (*(_DWORD *)v9 == 1651469415 && *(_WORD *)(v9 + 4) == 27745)
          {
            *(_DWORD *)(Symbol + 32) = 2;
          }
          else
          {
            if (*(_DWORD *)v9 != 1701470831 || *(_WORD *)(v9 + 4) != 29795)
            {
LABEL_22:
              v12 = *(_QWORD *)(a1 + 24);
              v13 = "Unknown WASM symbol type: ";
              v14 = 26;
              goto LABEL_12;
            }
            *(_DWORD *)(Symbol + 32) = 1;
          }
          *(_BYTE *)(Symbol + 36) = 1;
LABEL_26:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        }
      }
    }
    v12 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16);
    v13 = "Expected label,@type declaration, got: ";
    v14 = 39;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(_QWORD *)(v2 + 16);
    v13 = "Expected label after .type directive, got: ";
    v14 = 43;
  }
LABEL_12:
  v18 = v13;
  v19 = v14;
  v20 = v9;
  v21 = v10;
  v22 = 1285;
  return llvm::MCAsmParser::Error(v12, v9, (llvm::Twine *)&v18, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::ParseDirectiveIdent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int16 v15;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    goto LABEL_15;
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v7 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v7 + 8);
    v8 = v6 != 0;
    v3 = v6 ? v5 + 1 : v5;
    v9 = v6 - 1 < v8 ? 1 : v6 - 1;
    if (v9 >= v6)
      v9 = v6;
    v4 = v9 - v8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 672))(v10, v3, v4);
    return 0;
  }
  else
  {
LABEL_15:
    v14 = "unexpected token in '.ident' directive";
    v15 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (llvm::Twine *)&v14, 0, 0);
    return 1;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::WasmAsmParser,&`anonymous namespace'::WasmAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  llvm::MCContext *v11;
  unint64_t Symbol;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19;
  uint64_t i;

  switch(a3)
  {
    case 5:
      if (*(_DWORD *)a2 != 1634039598 || *(_BYTE *)(a2 + 4) != 107)
        goto LABEL_30;
      v5 = 24;
      break;
    case 6:
      if (*(_DWORD *)a2 != 1668246574 || *(_WORD *)(a2 + 4) != 27745)
        goto LABEL_30;
      v5 = 17;
      break;
    case 7:
      if (*(_DWORD *)a2 != 1684629550 || *(_DWORD *)(a2 + 3) != 1852138596)
        goto LABEL_30;
      v5 = 12;
      break;
    case 9:
      if (*(_QWORD *)a2 != 0x616E7265746E692ELL || *(_BYTE *)(a2 + 8) != 108)
        goto LABEL_30;
      v5 = 15;
      break;
    case 10:
      if (*(_QWORD *)a2 != 0x746365746F72702ELL || *(_WORD *)(a2 + 8) != 25701)
        goto LABEL_30;
      v5 = 22;
      break;
    default:
LABEL_30:
      v5 = 0;
      break;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_32:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v19 = 0;
  for (i = 0;
        ((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19) & 1) == 0;
        i = 0)
  {
    v11 = (llvm::MCContext *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v18 = 261;
    v17[0] = v19;
    v17[1] = i;
    Symbol = llvm::MCContext::getOrCreateSymbol(v11, (const llvm::Twine *)v17);
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v13 + 296))(v13, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_32;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    {
      v14 = "unexpected token in directive";
      goto LABEL_38;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v19 = 0;
  }
  v14 = "expected identifier in directive";
LABEL_38:
  v17[0] = v14;
  v18 = 259;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  llvm::MCAsmParser::Error(v15, *(_QWORD *)(v16 + 96), (llvm::Twine *)v17, 0, 0);
  return 1;
}

void `anonymous namespace'::XCOFFAsmParser::~XCOFFAsmParser(_anonymous_namespace_::XCOFFAsmParser *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::XCOFFAsmParser::Initialize(_anonymous_namespace_::XCOFFAsmParser *this, llvm::MCAsmParser *a2)
{
  uint64_t v3;

  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = v3;
}

void llvm::MCAsmParserExtension::HandleDirective<`anonymous namespace'::XCOFFAsmParser,&`anonymous namespace'::XCOFFAsmParser::ParseDirectiveCSect>()
{
  llvm::report_fatal_error((llvm *)"XCOFFAsmParser directive not yet supported!", (const llvm::Twine *)1);
}

uint64_t llvm::MCAssembler::isThumbFunc(llvm::MCAssembler *this, const llvm::MCSymbol *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  const void **imp;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = (llvm::MCAssembler *)((char *)this + 184);
  imp = llvm::SmallPtrSetImplBase::find_imp((llvm::MCAssembler *)((char *)this + 184), a2);
  v6 = *((_QWORD *)this + 24);
  v7 = 200;
  if (v6 == *((_QWORD *)this + 23))
    v7 = 204;
  if (imp != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7)))
    return 1;
  if ((*((_DWORD *)a2 + 2) & 0x3800) != 0x1000)
    return 0;
  *((_DWORD *)a2 + 2) |= 4u;
  v9 = *((_QWORD *)a2 + 3);
  v12 = 0;
  v13 = 0;
  v15 = 0;
  v14 = 0;
  v10 = llvm::MCExpr::evaluateAsRelocatableImpl(v9, &v12, 0, 0, 0, 0, 0);
  result = 0;
  if (v10 && !v13 && !v15)
  {
    if (!v12 || *(_WORD *)(v12 + 1))
      return 0;
    result = llvm::MCAssembler::isThumbFunc(this, *(const llvm::MCSymbol **)(v12 + 16));
    if ((_DWORD)result)
    {
      llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(v4, a2, (uint64_t)v11);
      return 1;
    }
  }
  return result;
}

void llvm::MCAssembler::computeFragmentSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_24A95AED4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

void sub_24A95AEF0()
{
  uint64_t v0;
  uint64_t v1;
  llvm::MCAsmLayout *v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  unsigned int v6;

  llvm::MCAsmLayout::ensureValid(v2, (const llvm::MCFragment *)v0);
  v4 = ((*(_DWORD *)(v0 + 32) + (1 << *(_BYTE *)(v0 + 51)) - 1) & -(int)(1 << *(_BYTE *)(v0 + 51)))
     - *(_DWORD *)(v0 + 32);
  *(_DWORD *)(v3 - 88) = v4;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 8))(*(_QWORD *)(v0 + 16))
    || (*(_BYTE *)(v0 + 52) & 1) == 0
    || (v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 8) + 96))(*(_QWORD *)(v1 + 8), v0, v3 - 88), v4 = *(_DWORD *)(v3 - 88), (v5 & 1) == 0))
  {
    if (v4
      && (*(_BYTE *)(v0 + 52) & 1) != 0
      && v4 % (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 176))(*(_QWORD *)(v1 + 8)))
    {
      do
      {
        v6 = *(_DWORD *)(v3 - 88) + (1 << *(_BYTE *)(v0 + 51));
        *(_DWORD *)(v3 - 88) = v6;
      }
      while (v6 % (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 176))(*(_QWORD *)(v1 + 8)));
    }
  }
  JUMPOUT(0x24A95AED8);
}

void sub_24A95AFD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  *(_QWORD *)(v2 - 176) = 0;
  if (llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v0 + 64), (_QWORD *)(v2 - 176)))
  {
    if (((*(_QWORD *)(v2 - 176) * *(unsigned __int8 *)(v0 + 51)) & 0x8000000000000000) == 0)
      goto LABEL_6;
    v3 = *v1;
    v4 = *(_QWORD *)(v0 + 72);
    v5 = "invalid number of bytes";
  }
  else
  {
    v3 = *v1;
    v4 = *(_QWORD *)(v0 + 72);
    v5 = "expected assembly-time absolute expression";
  }
  *(_QWORD *)(v2 - 88) = v5;
  *(_WORD *)(v2 - 56) = 259;
  llvm::MCContext::reportError(v3, v4, v2 - 88);
LABEL_6:
  JUMPOUT(0x24A95AED8);
}

void llvm::MCAsmLayout::layoutFragment(llvm::MCAsmLayout *this, llvm::MCFragment *a2)
{
  uint64_t v4;
  llvm::MCFragment *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = *((_QWORD *)a2 + 2);
  v5 = *(llvm::MCFragment **)(v4 + 112);
  v6 = *(_QWORD *)a2;
  *((_BYTE *)a2 + 49) = 1;
  if (v5 == a2 || v6 == 0)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 32);
    llvm::MCAssembler::computeFragmentSize(*(_QWORD *)this, (uint64_t)this, v6);
    v10 = v9 + v8;
    v4 = *((_QWORD *)a2 + 2);
  }
  *((_QWORD *)a2 + 4) = v10;
  *((_BYTE *)a2 + 49) = 0;
  v20 = v4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 19, &v20)[1] = a2;
  if (*(_DWORD *)(*(_QWORD *)this + 472) && *((_BYTE *)a2 + 50))
  {
    llvm::MCAssembler::computeFragmentSize(*(_QWORD *)this, (uint64_t)this, (uint64_t)a2);
    v12 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 476) & 1) != 0)
    {
      v13 = *(unsigned int *)(v12 + 472);
    }
    else
    {
      v13 = *(unsigned int *)(v12 + 472);
      if (v11 > v13)
      {
        v14 = "Fragment can't be larger than a bundle size";
        goto LABEL_28;
      }
    }
    v15 = *((_QWORD *)a2 + 4);
    v16 = (v13 - 1) & v15;
    v17 = v16 + v11;
    if (*((_BYTE *)a2 + 51))
    {
      if (v13 != v17)
      {
        if (v13 > v17)
          v18 = v13 - v17;
        else
          v18 = 2 * v13 - v17;
LABEL_24:
        if (v18 >= 0x100)
        {
          v14 = "Padding cannot exceed 255 bytes";
LABEL_28:
          llvm::report_fatal_error((llvm *)v14, (const llvm::Twine *)1);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (v16)
        v19 = v13 >= v17;
      else
        v19 = 1;
      if (!v19)
      {
        v18 = v13 - v16;
        goto LABEL_24;
      }
    }
    v18 = 0;
LABEL_25:
    *((_BYTE *)a2 + 52) = v18;
    *((_QWORD *)a2 + 4) = v18 + v15;
  }
}

void llvm::CodeViewContext::~CodeViewContext(llvm::CodeViewContext *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;
  void **v7;

  if (!*((_BYTE *)this + 32))
  {
    v2 = (_QWORD *)*((_QWORD *)this + 3);
    if (v2)
    {
      v3 = (_QWORD *)v2[15];
      if (v3 != v2 + 17)
        free(v3);
      v4 = (_QWORD *)v2[8];
      if (v4 != v2 + 11)
        free(v4);
      MEMORY[0x24BD1B3A4](v2, 0x10E0C400AE5E4C8);
    }
  }
  v7 = (void **)((char *)this + 232);
  std::vector<llvm::MCCVFunctionInfo>::__destroy_vector::operator()[abi:nn180100](&v7);
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  v6 = (char *)*((_QWORD *)this + 5);
  if (v6 != (char *)this + 56)
    free(v6);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this);
}

BOOL llvm::CodeViewContext::addFile(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MCContext *v22;
  unint64_t TempSymbol;
  uint64_t v24;
  _QWORD v26[2];
  int v27;
  __int16 v28;
  _QWORD v29[3];

  llvm::CodeViewContext::addToStringTable((llvm::CodeViewContext *)a1, a4, a5, (uint64_t)v29);
  v14 = (uint64_t *)v29[0];
  v15 = v29[1];
  v16 = a3 - 1;
  if (*(_DWORD *)(a1 + 48) <= v16)
    llvm::SmallVectorImpl<llvm::CodeViewContext::FileInfo>::resizeImpl<false>(a1 + 40, a3);
  v17 = *(_QWORD *)(a1 + 40) + 32 * v16;
  v18 = *(unsigned __int8 *)(v17 + 4);
  if (!*(_BYTE *)(v17 + 4))
  {
    if (v15)
      v19 = v15;
    else
      v19 = 7;
    if (v15)
      v20 = v14;
    else
      v20 = (uint64_t *)"<stdin>";
    llvm::CodeViewContext::addToStringTable((llvm::CodeViewContext *)a1, v20, v19, (uint64_t)v26);
    v21 = v27;
    v22 = *(llvm::MCContext **)(a2 + 8);
    v26[0] = "checksum_offset";
    v28 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v22, (const llvm::Twine *)v26, 0);
    v24 = *(_QWORD *)(a1 + 40) + 32 * v16;
    *(_DWORD *)v24 = v21;
    *(_QWORD *)(v24 + 16) = a7;
    *(_QWORD *)(v24 + 24) = TempSymbol;
    *(_BYTE *)(v24 + 4) = 1;
    *(_QWORD *)(v24 + 8) = a6;
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32 * v16 + 5) = a8;
  }
  return v18 == 0;
}

uint64_t *llvm::CodeViewContext::addToStringTable@<X0>(llvm::CodeViewContext *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t StringTableFragment;
  uint64_t *result;
  char v10;
  char v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;

  StringTableFragment = llvm::CodeViewContext::getStringTableFragment(a1);
  v15 = *(_QWORD *)(StringTableFragment + 72);
  result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1, a2, a3, &v15);
  v11 = v10;
  v12 = (_QWORD *)*result;
  v13 = (_BYTE *)(*result + 16);
  v14 = *(_QWORD *)*result;
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v14;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)v12 + 2);
  if (v11)
    return llvm::SmallVectorImpl<char>::append<char const*,void>((_QWORD *)(StringTableFragment + 64), v13, &v13[v14 + 1]);
  return result;
}

BOOL llvm::CodeViewContext::recordFunctionId(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  int v6;

  v3 = *((_QWORD *)this + 29);
  v4 = (uint64_t *)((char *)this + 232);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 30) - v3) >> 4) <= a2)
  {
    std::vector<llvm::MCCVFunctionInfo>::resize((uint64_t)this + 232, a2 + 1);
    v3 = *v4;
  }
  v5 = (int *)(v3 + 48 * a2);
  v6 = *v5;
  if (!*v5)
    *v5 = -1;
  return v6 == 0;
}

void std::vector<llvm::MCCVFunctionInfo>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(_QWORD *)a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<llvm::MCCVFunctionInfo>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 48 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 48;
        MEMORY[0x24BD1B398](*(_QWORD *)(v3 - 24), 4);
        v3 = v8;
      }
      while (v8 != v7);
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
}

BOOL llvm::CodeViewContext::recordInlinedCallSiteId(llvm::CodeViewContext *this, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  unsigned int v24;

  v24 = a2;
  v12 = *((_QWORD *)this + 29);
  v13 = (uint64_t *)((char *)this + 232);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 30) - v12) >> 4) <= a2)
  {
    std::vector<llvm::MCCVFunctionInfo>::resize((uint64_t)this + 232, a2 + 1);
    v12 = *v13;
  }
  v14 = (uint64_t *)(v12 + 48 * a2);
  v15 = *(_DWORD *)v14;
  if (!*(_DWORD *)v14)
  {
    *(_DWORD *)v14 = a3 + 1;
    v16 = (_DWORD *)(v12 + 48 * a2);
    v16[1] = a4;
    v16[2] = a5;
    v16[3] = a6;
    if (a3 <= 0xFFFFFFFD)
    {
      do
      {
        v17 = *((_QWORD *)this + 29);
        if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 30) - v17) >> 4) <= a3)
        {
          v19 = 0;
        }
        else
        {
          v18 = (uint64_t *)(v17 + 48 * a3);
          if (*(_DWORD *)v18)
            v19 = v18;
          else
            v19 = 0;
        }
        v20 = *(uint64_t *)((char *)v14 + 4);
        v21 = *((_DWORD *)v14 + 3);
        v22 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::FindAndConstruct(v19 + 3, &v24);
        *(_QWORD *)(v22 + 1) = v20;
        v22[3] = v21;
        a3 = *(_DWORD *)v19 - 1;
        v14 = v19;
      }
      while (a3 < 0xFFFFFFFE);
    }
  }
  return v15 == 0;
}

uint64_t llvm::CodeViewContext::getStringTableFragment(llvm::CodeViewContext *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_QWORD *)(v3 + 32) = -1;
    *(_QWORD *)(v3 + 40) = 0;
    *(_BYTE *)(v3 + 48) = 1;
    *(_QWORD *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 49) = 0;
    *(_OWORD *)(v3 + 72) = xmmword_24AA2AC10;
    *(_QWORD *)(v3 + 120) = v3 + 136;
    *(_QWORD *)(v3 + 128) = 0x400000000;
    *((_QWORD *)this + 3) = v3;
    *(_QWORD *)(v3 + 64) = v3 + 88;
    llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)(v3 + 64), 0);
    return *((_QWORD *)this + 3);
  }
  return result;
}

void std::vector<llvm::MCCVFunctionInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        MEMORY[0x24BD1B398](*((_QWORD *)v4 - 3), 4);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::SmallVectorImpl<llvm::CodeViewContext::FileInfo>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 32);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 32 * v2), 32 * a2 - 32 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void std::vector<llvm::MCCVFunctionInfo>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  int v21;
  int v22;
  char *v23;
  char *v24;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_21:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        v20 = *(_OWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_OWORD *)v18 - 3) = v20;
        *((_QWORD *)v18 - 2) = 0;
        *((_DWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 3) = *(_QWORD *)&v5[v17 - 24];
        *((_QWORD *)v19 - 3) = 0;
        *((_DWORD *)v18 - 4) = *(_DWORD *)&v5[v17 - 16];
        *((_DWORD *)v19 - 4) = 0;
        v21 = *(_DWORD *)&v13[v17 - 12];
        *((_DWORD *)v18 - 3) = *(_DWORD *)&v5[v17 - 12];
        *((_DWORD *)v19 - 3) = v21;
        v22 = *(_DWORD *)&v13[v17 - 8];
        *((_DWORD *)v18 - 2) = *(_DWORD *)&v5[v17 - 8];
        *((_DWORD *)v19 - 2) = v22;
        v17 -= 48;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v23 = a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      if (v23 != v5)
      {
        do
        {
          v24 = v23 - 48;
          MEMORY[0x24BD1B398](*((_QWORD *)v23 - 3), 4);
          v23 = v24;
        }
        while (v24 != v5);
      }
      if (v5)
        goto LABEL_21;
    }
  }
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *inserted = *a2;
    inserted[3] = 0;
    *(_QWORD *)(inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13, &v18);
          v14 = v18;
          *v18 = *(_DWORD *)v13;
          v15 = *(_QWORD *)(v13 + 4);
          v14[3] = *(_DWORD *)(v13 + 12);
          *(_QWORD *)(v14 + 1) = v15;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -1;
      result += 4;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = v12 + 16;
  if (a3)
    memcpy(v12 + 16, a2, a3);
  v14[a3] = 0;
  *(_QWORD *)v13 = a3;
  *((_DWORD *)v13 + 2) = *a4;
  *i = (uint64_t)v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t llvm::MCContext::MCContext(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  std::string *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  const void *v27;
  std::string::size_type v28;
  std::string *p_p;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v34;
  std::string __p;

  *(_QWORD *)(a1 + 8) = a9;
  *(_QWORD *)(a1 + 16) = a10;
  v18 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    v18->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  v20 = *(__int128 *)((char *)a2 + 24);
  v21 = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = a6;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = &off_251C1C930;
  *(_QWORD *)(a1 + 120) = defaultDiagHandler;
  *(_QWORD *)(a1 + 136) = a1 + 112;
  *(_QWORD *)(a1 + 144) = a3;
  *(_QWORD *)(a1 + 152) = a4;
  *(_QWORD *)(a1 + 168) = a5;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  *(_QWORD *)(a1 + 208) = 0x400000000;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 1;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0x400000000;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x400000000;
  *(_QWORD *)(a1 + 440) = a1 + 456;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = a1 + 504;
  *(_QWORD *)(a1 + 496) = 0x400000000;
  *(_QWORD *)(a1 + 536) = a1 + 552;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = a1 + 600;
  *(_QWORD *)(a1 + 592) = 0x400000000;
  *(_QWORD *)(a1 + 632) = a1 + 648;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 680) = a1 + 696;
  *(_QWORD *)(a1 + 688) = 0x400000000;
  *(_QWORD *)(a1 + 728) = a1 + 744;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = a1 + 792;
  *(_QWORD *)(a1 + 784) = 0x400000000;
  *(_QWORD *)(a1 + 824) = a1 + 840;
  *(_QWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_QWORD *)(a1 + 872) = a1 + 888;
  *(_QWORD *)(a1 + 880) = 0x400000000;
  *(_QWORD *)(a1 + 920) = a1 + 936;
  *(_QWORD *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_QWORD *)(a1 + 968) = a1 + 984;
  *(_QWORD *)(a1 + 976) = 0x400000000;
  *(_QWORD *)(a1 + 1016) = a1 + 1032;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1064) = a1 + 1080;
  *(_QWORD *)(a1 + 1072) = 0x400000000;
  *(_QWORD *)(a1 + 1112) = a1 + 1128;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1164) = 16;
  *(_QWORD *)(a1 + 1168) = a1 + 184;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_DWORD *)(a1 + 1220) = 16;
  *(_QWORD *)(a1 + 1224) = a1 + 184;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1252) = 16;
  *(_QWORD *)(a1 + 1256) = a1 + 184;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1284) = 16;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_BYTE *)(a1 + 1312) = 2;
  *(_BYTE *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_QWORD *)(a1 + 1360) = a1 + 1384;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1376) = 128;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_QWORD *)(a1 + 1512) = a1 + 1520;
  v22 = (void **)(a1 + 1536);
  *(_QWORD *)(a1 + 1552) = 0;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_QWORD *)(a1 + 1560) = a1 + 1568;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_WORD *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1594) = 1;
  *(_DWORD *)(a1 + 1598) = 0;
  *(_DWORD *)(a1 + 1595) = 0;
  *(_QWORD *)(a1 + 1620) = 0;
  *(_OWORD *)(a1 + 1604) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_DWORD *)(a1 + 1712) = 16777220;
  *(_BYTE *)(a1 + 1716) = 0;
  *(_DWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_QWORD *)(a1 + 1728) = a1 + 1736;
  *(_DWORD *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_DWORD *)(a1 + 1772) = 16;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_QWORD *)(a1 + 1776) = a1 + 1784;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_QWORD *)(a1 + 1800) = a1 + 1808;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_QWORD *)(a1 + 1824) = a1 + 1832;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_QWORD *)(a1 + 1848) = a1 + 1856;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_QWORD *)(a1 + 1872) = a1 + 1880;
  *(_DWORD *)(a1 + 1912) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_DWORD *)(a1 + 1916) = 16;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_DWORD *)(a1 + 1940) = 16;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_QWORD *)(a1 + 1960) = a1 + 1976;
  *(_QWORD *)(a1 + 1968) = 0x400000000;
  *(_QWORD *)(a1 + 2008) = a1 + 2024;
  *(_QWORD *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_BYTE *)(a1 + 2040) = a8;
  *(_QWORD *)(a1 + 2048) = a7;
  *(_BYTE *)(a1 + 2056) = 0;
  *(_DWORD *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_DWORD *)(a1 + 2084) = 96;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_QWORD *)(a1 + 2088) = a1 + 2096;
  *(_DWORD *)(a1 + 2128) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  if (a7)
  {
    if (*(char *)(a7 + 111) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 88), *(_QWORD *)(a7 + 96));
    else
      __p = *(std::string *)(a7 + 88);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&str_26);
  }
  std::string::operator=((std::string *)(a1 + 1320), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23 = *(_QWORD ***)(a1 + 72);
  if (v23)
  {
    v24 = *v23;
    if (-1431655765 * ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - (_QWORD)v24) >> 3))
    {
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v24 + 16))(*v24);
      if (v26 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v27 = (const void *)v25;
      v28 = v26;
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        p_p = (std::string *)operator new(v30 + 1);
        __p.__r_.__value_.__l.__size_ = v28;
        __p.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v26;
        p_p = &__p;
        if (!v26)
          goto LABEL_21;
      }
      memmove(p_p, v27, v28);
LABEL_21:
      p_p->__r_.__value_.__s.__data_[v28] = 0;
      if (*(char *)(a1 + 1559) < 0)
        operator delete(*v22);
      *(_OWORD *)v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 1552) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
  }
  v32 = 0;
  switch(*((_DWORD *)a2 + 11))
  {
    case 0:
      v34 = "Cannot initialize MC for unknown object file format.";
      goto LABEL_38;
    case 1:
      if (*((_DWORD *)a2 + 9) != 15)
      {
        v34 = "Cannot initialize MC for non-Windows COFF object files.";
LABEL_38:
        llvm::report_fatal_error((llvm *)v34, (const llvm::Twine *)1);
      }
      v32 = 3;
LABEL_33:
      *(_DWORD *)a1 = v32;
      return a1;
    case 2:
      v32 = 7;
      goto LABEL_33;
    case 3:
      v32 = 1;
      goto LABEL_33;
    case 4:
      v32 = 2;
      goto LABEL_33;
    case 5:
      goto LABEL_33;
    case 6:
      v32 = 4;
      goto LABEL_33;
    case 7:
      v32 = 5;
      goto LABEL_33;
    case 8:
      v32 = 6;
      goto LABEL_33;
    default:
      return a1;
  }
}

void defaultDiagHandler(llvm *a1)
{
  char **v2;

  v2 = (char **)llvm::errs(a1);
  llvm::SMDiagnostic::print(a1, 0, v2, 1, 1);
}

void llvm::MCContext::~MCContext(llvm::MCContext *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  llvm::MCContext *v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  char *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 2040))
    goto LABEL_94;
  *((_QWORD *)this + 9) = 0;
  std::unique_ptr<llvm::SourceMgr>::reset[abi:nn180100]((llvm::SourceMgr **)this + 10);
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  v2 = (char *)this + 112;
  v82[0] = &off_251C1C930;
  v82[1] = defaultDiagHandler;
  v3 = (char *)v82;
  v83 = (char *)v82;
  if (v82 == (_QWORD *)((char *)this + 112))
  {
    v4 = 4;
  }
  else
  {
    v3 = (char *)*((_QWORD *)this + 17);
    if (v3 == v2)
    {
      v83 = 0;
      v3 = (char *)v82;
      (*(void (**)(char *, _QWORD *))(*((_QWORD *)this + 14) + 24))((char *)this + 112, v82);
      (*(void (**)(_QWORD))(**((_QWORD **)this + 17) + 32))(*((_QWORD *)this + 17));
      v83 = (char *)v82;
      *((_QWORD *)this + 14) = &off_251C1C930;
      *((_QWORD *)this + 15) = defaultDiagHandler;
      v4 = 4;
      *((_QWORD *)this + 17) = v2;
    }
    else
    {
      *((_QWORD *)this + 14) = &off_251C1C930;
      *((_QWORD *)this + 15) = defaultDiagHandler;
      v83 = v3;
      *((_QWORD *)this + 17) = v2;
      if (v3 == (char *)v82)
      {
        v4 = 4;
        v3 = (char *)v82;
      }
      else
      {
        if (!v3)
          goto LABEL_11;
        v4 = 5;
      }
    }
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 8 * v4))(v3);
LABEL_11:
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 280);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 376);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll((uint64_t)this + 472);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll((uint64_t)this + 664);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 568);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll((uint64_t)this + 856);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll((uint64_t)this + 952);
  llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll((uint64_t)this + 1048);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 760);
  llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll((uint64_t)this + 1944);
  if (*((_DWORD *)this + 311))
  {
    v5 = *((unsigned int *)this + 310);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 154) + v6) = 0;
        v6 += 8;
      }
      while (v7 != v6);
    }
    *(_QWORD *)((char *)this + 1244) = 0;
  }
  if (*((_DWORD *)this + 303))
  {
    v8 = *((unsigned int *)this + 302);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 150) + v9) = 0;
        v9 += 8;
      }
      while (v10 != v9);
    }
    *(_QWORD *)((char *)this + 1212) = 0;
  }
  if (*((_DWORD *)this + 289))
  {
    v11 = *((unsigned int *)this + 288);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 8 * v11;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 143) + v12) = 0;
        v12 += 8;
      }
      while (v13 != v12);
    }
    *(_QWORD *)((char *)this + 1156) = 0;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset((uint64_t)this + 184);
  v14 = (_QWORD *)((char *)this + 1288);
  v15 = *((_DWORD *)this + 324);
  if (v15)
  {
    v16 = *((_DWORD *)this + 326);
    if (v16 > 4 * v15 && v16 >= 0x41)
    {
      v17 = 1 << (33 - __clz(v15 - 1));
      if (v17 <= 64)
        v18 = 64;
      else
        v18 = v17;
LABEL_35:
      if (v18 == v16)
      {
        *((_QWORD *)this + 162) = 0;
        v19 = (_DWORD *)*((_QWORD *)this + 161);
        v20 = 16 * v16;
        do
        {
          *v19 = -1;
          v19 += 4;
          v20 -= 16;
        }
        while (v20);
      }
      else
      {
        MEMORY[0x24BD1B398](*v14, 8);
        if (v18)
        {
          v72 = (4 * v18 / 3u + 1) | ((unint64_t)(4 * v18 / 3u + 1) >> 1);
          v73 = v72 | (v72 >> 2) | ((v72 | (v72 >> 2)) >> 4);
          LODWORD(v73) = (((v73 | (v73 >> 8)) >> 16) | v73 | (v73 >> 8)) + 1;
          *((_DWORD *)this + 326) = v73;
          v74 = operator new(16 * v73, (std::align_val_t)8uLL);
          *((_QWORD *)this + 161) = v74;
          *((_QWORD *)this + 162) = 0;
          v75 = *((unsigned int *)this + 326);
          if ((_DWORD)v75)
          {
            v76 = 16 * v75;
            do
            {
              *v74 = -1;
              v74 += 4;
              v76 -= 16;
            }
            while (v76);
          }
        }
        else
        {
          *v14 = 0;
          *((_QWORD *)this + 162) = 0;
          *((_DWORD *)this + 326) = 0;
        }
      }
      goto LABEL_43;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 325))
      goto LABEL_43;
    v16 = *((_DWORD *)this + 326);
    if (v16 > 0x40)
    {
      v18 = 0;
      goto LABEL_35;
    }
  }
  if (v16)
  {
    v21 = (_DWORD *)*v14;
    v22 = 16 * v16;
    do
    {
      *v21 = -1;
      v21 += 4;
      v22 -= 16;
    }
    while (v22);
  }
  *((_QWORD *)this + 162) = 0;
LABEL_43:
  *((_QWORD *)this + 171) = 0;
  if (*((char *)this + 1559) < 0)
  {
    **((_BYTE **)this + 192) = 0;
    *((_QWORD *)this + 193) = 0;
  }
  else
  {
    *((_BYTE *)this + 1536) = 0;
    *((_BYTE *)this + 1559) = 0;
  }
  std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(*((_QWORD **)this + 196));
  *((_QWORD *)this + 195) = (char *)this + 1568;
  *((_QWORD *)this + 197) = 0;
  *((_QWORD *)this + 196) = 0;
  v23 = (_QWORD *)((char *)this + 1608);
  v24 = *((_DWORD *)this + 404);
  if (v24)
  {
    v25 = *((_DWORD *)this + 406);
    if (v25 > 4 * v24 && v25 >= 0x41)
    {
      v26 = 1 << (33 - __clz(v24 - 1));
      if (v26 <= 64)
        v27 = 64;
      else
        v27 = v26;
LABEL_55:
      if (v27 == v25)
      {
        *((_QWORD *)this + 202) = 0;
        v28 = (_QWORD *)*((_QWORD *)this + 201);
        v29 = 8 * v25;
        do
        {
          *v28++ = -4096;
          v29 -= 8;
        }
        while (v29);
      }
      else
      {
        MEMORY[0x24BD1B398](*v23, 8);
        if (v27)
        {
          v77 = (4 * v27 / 3u + 1) | ((unint64_t)(4 * v27 / 3u + 1) >> 1);
          v78 = v77 | (v77 >> 2) | ((v77 | (v77 >> 2)) >> 4);
          LODWORD(v78) = (((v78 | (v78 >> 8)) >> 16) | v78 | (v78 >> 8)) + 1;
          *((_DWORD *)this + 406) = v78;
          v79 = operator new(8 * v78, (std::align_val_t)8uLL);
          *((_QWORD *)this + 201) = v79;
          *((_QWORD *)this + 202) = 0;
          v80 = *((unsigned int *)this + 406);
          if ((_DWORD)v80)
          {
            v81 = 8 * v80;
            do
            {
              *v79++ = -4096;
              v81 -= 8;
            }
            while (v81);
          }
        }
        else
        {
          *v23 = 0;
          *((_QWORD *)this + 202) = 0;
          *((_DWORD *)this + 406) = 0;
        }
      }
      goto LABEL_63;
    }
    goto LABEL_59;
  }
  if (*((_DWORD *)this + 405))
  {
    v25 = *((_DWORD *)this + 406);
    if (v25 > 0x40)
    {
      v27 = 0;
      goto LABEL_55;
    }
LABEL_59:
    if (v25)
    {
      v30 = (_QWORD *)*v23;
      v31 = 8 * v25;
      do
      {
        *v30++ = -4096;
        v31 -= 8;
      }
      while (v31);
    }
    *((_QWORD *)this + 202) = 0;
  }
LABEL_63:
  *((_QWORD *)this + 205) = *((_QWORD *)this + 204);
  *((_QWORD *)this + 208) = *((_QWORD *)this + 207);
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 430) = 0;
  *((_QWORD *)this + 198) = 0;
  *((_QWORD *)this + 199) = 0x10000;
  std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100]((llvm::CodeViewContext **)this + 22, 0);
  if (*((_DWORD *)this + 441))
  {
    v32 = *((unsigned int *)this + 440);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = 8 * v32;
      do
      {
        v35 = *((_QWORD *)this + 219);
        v36 = *(_QWORD *)(v35 + v33);
        if (v36 != -8 && v36 != 0)
          MEMORY[0x24BD1B398]();
        *(_QWORD *)(v35 + v33) = 0;
        v33 += 8;
      }
      while (v34 != v33);
    }
    *(_QWORD *)((char *)this + 1764) = 0;
  }
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 223));
  *((_QWORD *)this + 222) = (char *)this + 1784;
  *((_QWORD *)this + 224) = 0;
  *((_QWORD *)this + 223) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 229));
  *((_QWORD *)this + 228) = (char *)this + 1832;
  *((_QWORD *)this + 230) = 0;
  *((_QWORD *)this + 229) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 226));
  *((_QWORD *)this + 225) = (char *)this + 1808;
  *((_QWORD *)this + 227) = 0;
  *((_QWORD *)this + 226) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 232));
  *((_QWORD *)this + 231) = (char *)this + 1856;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 232) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 235));
  *((_QWORD *)this + 234) = (char *)this + 1880;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 235) = 0;
  if (*((_DWORD *)this + 477))
  {
    v38 = *((unsigned int *)this + 476);
    if ((_DWORD)v38)
    {
      v39 = 0;
      v40 = 8 * v38;
      do
      {
        v41 = *((_QWORD *)this + 237);
        v42 = *(_QWORD *)(v41 + v39);
        if (v42 != -8 && v42 != 0)
          MEMORY[0x24BD1B398]();
        *(_QWORD *)(v41 + v39) = 0;
        v39 += 8;
      }
      while (v40 != v39);
    }
    *(_QWORD *)((char *)this + 1908) = 0;
  }
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 262));
  *((_QWORD *)this + 261) = (char *)this + 2096;
  *((_QWORD *)this + 263) = 0;
  *((_QWORD *)this + 262) = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::clear((_DWORD *)this + 528);
  if (*((_DWORD *)this + 319))
  {
    v44 = *((unsigned int *)this + 318);
    if ((_DWORD)v44)
    {
      v45 = 0;
      v46 = 8 * v44;
      do
      {
        v47 = *((_QWORD *)this + 158);
        v48 = *(_QWORD *)(v47 + v45);
        if (v48 != -8 && v48 != 0)
          MEMORY[0x24BD1B398]();
        *(_QWORD *)(v47 + v45) = 0;
        v45 += 8;
      }
      while (v46 != v45);
    }
    *(_QWORD *)((char *)this + 1276) = 0;
  }
  *((_BYTE *)this + 1715) = 1;
  *((_WORD *)this + 800) = 0;
  *((_DWORD *)this + 401) = 0;
  *((_BYTE *)this + 2056) = 0;
LABEL_94:
  MEMORY[0x24BD1B398](*((_QWORD *)this + 264), 8);
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 262));
  if (*((_DWORD *)this + 519))
  {
    v50 = *((unsigned int *)this + 518);
    if ((_DWORD)v50)
    {
      v51 = 0;
      v52 = 8 * v50;
      do
      {
        v53 = *(_QWORD *)(*((_QWORD *)this + 258) + v51);
        if (v53 != -8 && v53 != 0)
          llvm::StringMapEntry<llvm::MCAsmMacro>::Destroy<llvm::MallocAllocator>(v53);
        v51 += 8;
      }
      while (v52 != v51);
    }
  }
  free(*((void **)this + 258));
  llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll((uint64_t)this + 1944);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 1944);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 1920);
  if (*((_DWORD *)this + 477))
  {
    v55 = *((unsigned int *)this + 476);
    if ((_DWORD)v55)
    {
      v56 = 0;
      v57 = 8 * v55;
      do
      {
        v58 = *(_QWORD *)(*((_QWORD *)this + 237) + v56);
        if (v58 != -8 && v58 != 0)
          MEMORY[0x24BD1B398]();
        v56 += 8;
      }
      while (v57 != v56);
    }
  }
  free(*((void **)this + 237));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 235));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 232));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 229));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 226));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 223));
  if (*((_DWORD *)this + 441))
  {
    v60 = *((unsigned int *)this + 440);
    if ((_DWORD)v60)
    {
      v61 = 0;
      v62 = 8 * v60;
      do
      {
        v63 = *(_QWORD *)(*((_QWORD *)this + 219) + v61);
        if (v63 != -8 && v63 != 0)
          MEMORY[0x24BD1B398]();
        v61 += 8;
      }
      while (v62 != v61);
    }
  }
  free(*((void **)this + 219));
  std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(*((_QWORD **)this + 217));
  v65 = (void *)*((_QWORD *)this + 207);
  if (v65)
  {
    *((_QWORD *)this + 208) = v65;
    operator delete(v65);
  }
  v66 = (void *)*((_QWORD *)this + 204);
  if (v66)
  {
    *((_QWORD *)this + 205) = v66;
    operator delete(v66);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 201), 8);
  std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(*((_QWORD **)this + 196));
  if (*((char *)this + 1559) < 0)
    operator delete(*((void **)this + 192));
  std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(*((char **)this + 190));
  v67 = (char *)*((_QWORD *)this + 170);
  if (v67 != (char *)this + 1384)
    free(v67);
  v68 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  if (*((char *)this + 1343) < 0)
    operator delete(*((void **)this + 165));
  MEMORY[0x24BD1B398](*((_QWORD *)this + 161), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 1264);
  free(*((void **)this + 154));
  free(*((void **)this + 150));
  MEMORY[0x24BD1B398](*((_QWORD *)this + 147), 8);
  free(*((void **)this + 143));
  llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll((uint64_t)this + 1048);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 1048);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll((uint64_t)this + 952);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 952);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll((uint64_t)this + 856);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 856);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 760);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 760);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll((uint64_t)this + 664);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 664);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 568);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 568);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll((uint64_t)this + 472);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 472);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 376);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 376);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 280);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 280);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 184);
  std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100]((llvm::CodeViewContext **)this + 22, 0);
  v69 = (llvm::MCContext *)*((_QWORD *)this + 17);
  if (v69 == (llvm::MCContext *)((char *)this + 112))
  {
    v70 = 4;
    v69 = (llvm::MCContext *)((char *)this + 112);
  }
  else
  {
    if (!v69)
      goto LABEL_138;
    v70 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v69 + 8 * v70))();
LABEL_138:
  v71 = (void *)*((_QWORD *)this + 11);
  if (v71)
  {
    *((_QWORD *)this + 12) = v71;
    operator delete(v71);
  }
  std::unique_ptr<llvm::SourceMgr>::reset[abi:nn180100]((llvm::SourceMgr **)this + 10);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

llvm::SourceMgr *std::unique_ptr<llvm::SourceMgr>::reset[abi:nn180100](llvm::SourceMgr **a1)
{
  llvm::SourceMgr *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    llvm::SourceMgr::~SourceMgr(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::MCSection *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::MCSection *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = (char *)v9 + 248;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        v10 = (char *)(v11 + 496);
        v9 = (llvm::MCSection *)(v11 + 248);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = (char *)v15 + 248;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        v17 = (char *)(v18 + 496);
        v15 = (llvm::MCSection *)(v18 + 248);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::MCSection *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::MCSection *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = (char *)v9 + 224;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        v10 = (char *)(v11 + 448);
        v9 = (llvm::MCSection *)(v11 + 224);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = (char *)v15 + 224;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        v17 = (char *)(v18 + 448);
        v15 = (llvm::MCSection *)(v18 + 224);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::MCSection *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::MCSection *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = (char *)v9 + 256;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        v10 = (char *)(v11 + 512);
        v9 = (llvm::MCSection *)(v11 + 256);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = (char *)v15 + 256;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        v17 = (char *)(v18 + 512);
        v15 = (llvm::MCSection *)(v18 + 256);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::MCSection *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::MCSection *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = (char *)v9 + 240;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        v10 = (char *)(v11 + 480);
        v9 = (llvm::MCSection *)(v11 + 240);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = (char *)v15 + 240;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        v17 = (char *)(v18 + 480);
        v15 = (llvm::MCSection *)(v18 + 240);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::MCSection *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::MCSection *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = (char *)v9 + 264;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        v10 = (char *)(v11 + 528);
        v9 = (llvm::MCSection *)(v11 + 264);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = (char *)v15 + 264;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        v17 = (char *)(v18 + 528);
        v15 = (llvm::MCSection *)(v18 + 264);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  llvm::MCSection *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::MCSection *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = (char *)v9 + 272;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        v10 = (char *)(v11 + 544);
        v9 = (llvm::MCSection *)(v11 + 272);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = (char *)v15 + 272;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        v17 = (char *)(v18 + 544);
        v15 = (llvm::MCSection *)(v18 + 272);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; i <= v8; i += 192)
      {
        v10 = *(void **)(i - 176);
        if ((void *)(i - 160) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; j <= v14; j += 192)
      {
        v16 = *(void **)(j - 176);
        if ((void *)(j - 160) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void (***v14)(_QWORD);
  unint64_t v15;
  void (***v16)(_QWORD);

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (void (***)(_QWORD))((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 41;
      while ((unint64_t)v10 <= v8)
      {
        (**v9)(v9);
        v10 = v9 + 82;
        v9 += 41;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = (void (***)(_QWORD))((*v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      v15 = *v12 + v12[1];
      v16 = v14 + 41;
      while ((unint64_t)v16 <= v15)
      {
        (**v14)(v14);
        v16 = v14 + 82;
        v14 += 41;
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

llvm::CodeViewContext *std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100](llvm::CodeViewContext **a1, llvm::CodeViewContext *a2)
{
  llvm::CodeViewContext *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::CodeViewContext::~CodeViewContext(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

unint64_t llvm::MCContext::getOrCreateSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t Symbol;
  void *v11;
  __int128 v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = xmmword_24AA2AC90;
  llvm::Twine::toStringRef((unsigned __int8 *)a2, (uint64_t)&v11);
  v4 = v3;
  v6 = v5;
  v7 = llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>((uint64_t)this + 1144, v3, v5);
  v8 = *v7;
  Symbol = *(_QWORD *)(*v7 + 8);
  if (!Symbol)
  {
    Symbol = llvm::MCContext::createSymbol((uint64_t)this, v4, v6, 0, 0);
    *(_QWORD *)(v8 + 8) = Symbol;
  }
  if (v11 != v13)
    free(v11);
  return Symbol;
}

unint64_t llvm::MCContext::createSymbol(uint64_t a1, _BYTE *a2, unint64_t a3, int a4, int a5)
{
  _BOOL4 v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t SymbolImpl;
  char v20[8];
  void (**v21)(llvm::raw_ostream *__hidden);
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  void *v30;
  __int128 v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 1716))
      return llvm::MCContext::createSymbolImpl(a1, 0, 1);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1715) || (v10 = *(_QWORD *)(a1 + 144), v11 = *(_QWORD *)(v10 + 96), a3 < v11))
    {
      v9 = 0;
      goto LABEL_10;
    }
    if (v11)
    {
      v9 = memcmp(a2, *(const void **)(v10 + 88), v11) == 0;
      goto LABEL_10;
    }
  }
  v9 = 1;
LABEL_10:
  v30 = v32;
  v31 = xmmword_24AA2AC90;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v30, a2, &a2[a3]);
  v13 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 1264), (uint64_t *)a2, a3);
  if (!a4)
    goto LABEL_14;
  do
  {
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v30, a3);
    v22 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v21 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    v29 = &v30;
    llvm::raw_ostream::SetUnbuffered(&v21);
    v14 = *(unsigned int *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = v14 + 1;
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v21, v14, 0, 0, 0);
    v21 = off_251C13948;
    if (v28 == 1 && v23)
      MEMORY[0x24BD1B380](v23, 0x1000C8077774924);
LABEL_14:
    v20[0] = 1;
    v15 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (uint64_t *)v30, v31, v20);
    v17 = v16;
    v18 = *v15;
  }
  while (!v17 && *(_BYTE *)(v18 + 8));
  *(_BYTE *)(v18 + 8) = 1;
  SymbolImpl = llvm::MCContext::createSymbolImpl(a1, v18, v9);
  if (v30 != v32)
    free(v30);
  return SymbolImpl;
}

unint64_t llvm::MCContext::createSymbolImpl(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  BOOL v20;
  unint64_t v22;
  BOOL v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char v38[8];
  void (**v39)(llvm::raw_ostream *__hidden);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  void **v47;
  void *v48;
  __int128 v49;
  _BYTE v50[128];
  char *v51;
  __int128 v52;
  _WORD v53[64];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)a1)
  {
    case 0:
      v6 = a2 != 0;
      if (a2)
        v7 = 40;
      else
        v7 = 32;
      v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v7, 3) + 8 * v6;
      v9 = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x200;
      goto LABEL_20;
    case 1:
      v11 = a2 != 0;
      if (a2)
        v12 = 48;
      else
        v12 = 40;
      v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v12, 3) + 8 * v11;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x100;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = 4 * v11;
      if (a2)
        *(_QWORD *)(v8 - 8) = a2;
      *(_QWORD *)(v8 + 32) = 0;
      return v8;
    case 2:
      v6 = a2 != 0;
      if (a2)
        v13 = 40;
      else
        v13 = 32;
      v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v13, 3) + 8 * v6;
      v9 = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x180;
      goto LABEL_20;
    case 3:
      v14 = a2 != 0;
      if (a2)
        v15 = 48;
      else
        v15 = 40;
      v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v15, 3) + 8 * v14;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x80;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = 4 * v14;
      if (a2)
        *(_QWORD *)(v8 - 8) = a2;
      *(_WORD *)(v8 + 32) = 0;
      return v8;
    case 5:
      v16 = a2 != 0;
      if (a2)
        v17 = 192;
      else
        v17 = 184;
      v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v17, 3) + 8 * v16;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x280;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = 4 * v16;
      if (a2)
        *(_QWORD *)(v8 - 8) = a2;
      *(_BYTE *)(v8 + 32) = 0;
      *(_BYTE *)(v8 + 36) = 0;
      *(_BYTE *)(v8 + 48) = 0;
      *(_BYTE *)(v8 + 64) = 0;
      *(_BYTE *)(v8 + 72) = 0;
      *(_BYTE *)(v8 + 88) = 0;
      *(_BYTE *)(v8 + 96) = 0;
      *(_BYTE *)(v8 + 112) = 0;
      *(_QWORD *)(v8 + 120) = 0;
      *(_BYTE *)(v8 + 128) = 0;
      *(_BYTE *)(v8 + 130) = 0;
      *(_BYTE *)(v8 + 136) = 0;
      *(_BYTE *)(v8 + 168) = 0;
      *(_QWORD *)(v8 + 176) = 0;
      *(_DWORD *)(v8 + 40) = 0;
      *(_WORD *)(v8 + 44) = 0;
      return v8;
    case 6:
      if (!a2)
      {
        v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, 72, 3);
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x300;
        *(_WORD *)(v8 + 12) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)v8 = 0;
        *(_WORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 40) = 0;
        *(_WORD *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = 0;
        *(_QWORD *)(v8 + 64) = 0;
        return v8;
      }
      v18 = (unsigned __int8 *)(a2 + 16);
      v19 = *(unsigned __int8 **)a2;
      if (*(_QWORD *)a2 >= 0xBuLL)
      {
        v20 = *(_QWORD *)v18 == 0x656D616E65525F2ELL && *(_QWORD *)(a2 + 19) == 0x2E2E64656D616E65;
        if (v20)
          goto LABEL_48;
      }
      else if (v19 != (unsigned __int8 *)10)
      {
        goto LABEL_49;
      }
      if (*(_QWORD *)v18 == 0x64656D616E65525FLL && *(_WORD *)(a2 + 24) == 11822)
      {
LABEL_48:
        v51 = "invalid symbol name from source";
        v53[4] = 259;
        llvm::MCContext::reportError(a1, 0, (uint64_t)&v51);
      }
LABEL_49:
      if ((*(unsigned int (**)(_QWORD, uint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 144) + 56))(*(_QWORD *)(a1 + 144), a2 + 16, v19))
      {
        v22 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, 80, 3);
        *(_DWORD *)(v22 + 16) = *(_DWORD *)(v22 + 16) & 0xFFF80000 | a3 | 0x300;
        *(_WORD *)(v22 + 20) = 0;
        *(_DWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)v22 = a2;
        *(_WORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_WORD *)(v22 + 56) = 0;
        *(_QWORD *)(v22 + 64) = 0;
        *(_QWORD *)(v22 + 72) = 0;
        *(_QWORD *)(v22 + 8) = 4;
        return v22 + 8;
      }
      else
      {
        v51 = (char *)v53;
        v52 = xmmword_24AA2AC90;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v51, (_BYTE *)(a2 + 16), &v19[(_QWORD)v18]);
        if ((_QWORD)v52)
        {
          v23 = *v51 == 46;
          if (*v51 == 46)
            v24 = "._Renamed..";
          else
            v24 = "_Renamed..";
        }
        else
        {
          v23 = 0;
          v24 = "_Renamed..";
        }
        v25 = strlen(v24);
        v48 = v50;
        v49 = xmmword_24AA2AC90;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v48, v24, &v24[v25]);
        v26 = v52;
        if ((_QWORD)v52)
        {
          v27 = 0;
          do
          {
            if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 48))(*(_QWORD *)(a1 + 144), v51[v27])|| v51[v27] == 95)
            {
              v40 = 0;
              v44 = 0;
              v45 = 0;
              v46 = 1;
              v42 = 0;
              v43 = 0;
              v41 = 0;
              v39 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
              v47 = &v48;
              llvm::raw_ostream::SetUnbuffered(&v39);
              llvm::write_hex((llvm::raw_ostream *)&v39, v51[v27], 1, 0, 0);
              v39 = off_251C13948;
              if (v46 == 1 && v41)
                MEMORY[0x24BD1B380](v41, 0x1000C8077774924);
              v51[v27] = 95;
            }
            ++v27;
            v26 = v52;
          }
          while (v27 < (unint64_t)v52);
        }
        if (v23)
        {
          v28 = v26 - 1;
          if (v26 - (unint64_t)(v26 != 0) < v26 - 1)
            v28 = v26 - (v26 != 0);
          if (v26)
            v29 = v51 + 1;
          else
            v29 = v51;
          v30 = &v51[(v26 != 0) + v28];
        }
        else
        {
          v29 = v51;
          v30 = &v51[v26];
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v48, v29, v30);
        v38[0] = 1;
        v31 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (uint64_t *)v48, v49, v38);
        v32 = *v31;
        *(_BYTE *)(v32 + 8) = 1;
        if (v32)
          v33 = 80;
        else
          v33 = 72;
        v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v33, 3)
           + 8 * (v32 != 0);
        v34 = *v31;
        v20 = *v31 == 0;
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x300;
        v35 = !v20;
        *(_WORD *)(v8 + 12) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)v8 = 4 * v35;
        if (v34)
          *(_QWORD *)(v8 - 8) = v34;
        *(_WORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 40) = 0;
        *(_WORD *)(v8 + 48) = 0;
        *(_QWORD *)(v8 + 56) = 0;
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)(v8 + 56) = llvm::MCSymbolXCOFF::getUnqualifiedName(v18, v19);
        *(_QWORD *)(v8 + 64) = v36;
        if (v48 != v50)
          free(v48);
        if (v51 != (char *)v53)
          free(v51);
      }
      return v8;
    default:
      v6 = a2 != 0;
      if (a2)
        v10 = 40;
      else
        v10 = 32;
      v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v10, 3) + 8 * v6;
      v9 = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3;
LABEL_20:
      *(_DWORD *)(v8 + 8) = v9;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = 4 * v6;
      if (a2)
        *(_QWORD *)(v8 - 8) = a2;
      return v8;
  }
}

unint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this, const llvm::Twine *a2, int a3)
{
  unint64_t Symbol;
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17;
  __int128 v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v16 = &v17;
  v17 = v19;
  v18 = xmmword_24AA2AC90;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  llvm::raw_ostream::SetUnbuffered(&v8);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, *(const void **)(*((_QWORD *)this + 18) + 88), *(_QWORD *)(*((_QWORD *)this + 18) + 96));
  llvm::Twine::print(a2, (llvm::raw_ostream *)&v8);
  v8 = off_251C13948;
  if (v15 == 1 && v10)
    MEMORY[0x24BD1B380](v10, 0x1000C8077774924);
  Symbol = llvm::MCContext::createSymbol((uint64_t)this, v17, v18, a3, 1);
  if (v17 != v19)
    free(v17);
  return Symbol;
}

unint64_t llvm::MCContext::createNamedTempSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  unint64_t Symbol;
  void (**v6)(llvm::raw_ostream *__hidden);
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15;
  __int128 v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v14 = &v15;
  v15 = v17;
  v16 = xmmword_24AA2AC90;
  v7 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v6 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  llvm::raw_ostream::SetUnbuffered(&v6);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v6, *(const void **)(*((_QWORD *)this + 18) + 88), *(_QWORD *)(*((_QWORD *)this + 18) + 96));
  llvm::Twine::print(a2, (llvm::raw_ostream *)&v6);
  v6 = off_251C13948;
  if (v13 == 1 && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8077774924);
  Symbol = llvm::MCContext::createSymbol((uint64_t)this, v15, v16, 1, 0);
  if (v15 != v17)
    free(v15);
  return Symbol;
}

uint64_t llvm::MCContext::NextInstance(llvm::MCContext *this, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  int v7;

  v7 = a2;
  v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)this + 161, &v7);
  v4 = (_DWORD *)*((_QWORD *)v3 + 1);
  if (v4)
  {
    v5 = (*v4 + 1);
  }
  else
  {
    v4 = (_DWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 184, 4, 3);
    *v4 = 0;
    *((_QWORD *)v3 + 1) = v4;
    v5 = 1;
  }
  *v4 = v5;
  return v5;
}

uint64_t llvm::MCContext::GetInstance(llvm::MCContext *this, int a2)
{
  _DWORD *v3;
  unsigned int *v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  int v8;

  v8 = a2;
  v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)this + 161, &v8);
  v4 = (unsigned int *)*((_QWORD *)v3 + 1);
  if (v4)
    return *v4;
  v6 = v3;
  v7 = (_DWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 184, 4, 3);
  result = 0;
  *v7 = 0;
  *((_QWORD *)v6 + 1) = v7;
  return result;
}

unint64_t llvm::MCContext::getOrCreateDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t result;
  int v6[8];
  __int16 v7;

  *(_QWORD *)v6 = a2 | (unint64_t)(a3 << 32);
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct((uint64_t *)this + 147, v6);
  result = *((_QWORD *)v4 + 1);
  if (!result)
  {
    *(_QWORD *)v6 = "tmp";
    v7 = 259;
    result = llvm::MCContext::createNamedTempSymbol(this, (const llvm::Twine *)v6);
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

unint64_t llvm::MCContext::createDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2)
{
  uint64_t Instance;

  Instance = llvm::MCContext::NextInstance(this, a2);
  return llvm::MCContext::getOrCreateDirectionalLocalSymbol(this, a2, Instance);
}

unint64_t llvm::MCContext::getDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2, int a3)
{
  uint64_t v5;

  v5 = llvm::MCContext::GetInstance(this, a2) + (a3 ^ 1);
  return llvm::MCContext::getOrCreateDirectionalLocalSymbol(this, a2, v5);
}

uint64_t llvm::MCContext::lookupSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  uint64_t *v3;
  unint64_t v4;
  int Key;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA2AC90;
  llvm::Twine::toStringRef((unsigned __int8 *)a2, (uint64_t)&v8);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 143, v3, v4);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 288))
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 143) + 8 * Key) + 8);
  if (v8 != v10)
    free(v8);
  return v6;
}

_QWORD *llvm::MCContext::reportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 2056) = 1;
  v5 = a2;
  v6[0] = &off_251C1C978;
  v6[1] = &v5;
  v6[2] = a3;
  v7 = v6;
  llvm::MCContext::reportCommon((_QWORD *)a1, a2, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

unsigned __int8 *llvm::MCSymbolXCOFF::getUnqualifiedName(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  unsigned __int8 *v5[2];

  if (a1[(_QWORD)a2 - 1] == 93)
  {
    v4 = 91;
    v5[0] = a1;
    v5[1] = a2;
    std::string_view::rfind[abi:nn180100](v5, &v4, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

unint64_t llvm::MCContext::getMachOSection(llvm::MCContext *a1, uint64_t a2, unint64_t a3, llvm::formatv_object_base *a4, llvm::formatv_object_base *a5, int a6, int a7, int a8, llvm::formatv_object_base *a9)
{
  llvm::StringMapImpl *v16;
  std::string *p_p;
  std::string::size_type size;
  unint64_t **v19;
  char v20;
  char v21;
  char v22;
  int v23;
  unint64_t TempSymbol;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  int v31;
  _QWORD v32[4];
  __int16 v33;
  llvm::formatv_object_base *v34[4];
  __int16 v35;
  std::string __p;

  v32[0] = a2;
  v32[1] = a3;
  v32[2] = 44;
  v33 = 1797;
  v16 = (llvm::MCContext *)((char *)a1 + 1752);
  v34[0] = (llvm::formatv_object_base *)v32;
  v34[2] = a4;
  v34[3] = a5;
  v35 = 1282;
  llvm::Twine::str(v34, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v19 = llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>(v16, (uint64_t *)p_p, size);
  v21 = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21)
  {
    v31 = a6;
    if (a9)
    {
      v22 = 1;
      HIBYTE(v35) = 1;
      v23 = a7;
      if (*(_BYTE *)a9)
      {
        v34[0] = a9;
        v22 = 3;
      }
      LOBYTE(v35) = v22;
      TempSymbol = llvm::MCContext::createTempSymbol(a1, (const llvm::Twine *)v34, 0);
    }
    else
    {
      v23 = a7;
      TempSymbol = 0;
    }
    v25 = **v19;
    if (v25 >= v25 - (unint64_t)a5)
      v26 = v25 - (_QWORD)a5;
    else
      v26 = **v19;
    v27 = (char *)*v19 + v26;
    v28 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)a1 + 568, 248, 3);
    llvm::MCSectionMachO::MCSectionMachO(v28, a2, a3, (uint64_t)(v27 + 16), v25 - v26, v31, v23, a8, TempSymbol);
    (*v19)[1] = v29;
  }
  return (*v19)[1];
}

unint64_t **llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t **i;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (unint64_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == (unint64_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = (char *)(v10 + 2);
  if (a3)
    memcpy(v10 + 2, a2, a3);
  v12[a3] = 0;
  *v11 = a3;
  v11[1] = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

unint64_t llvm::MCContext::getELFSection(llvm::MCContext *a1, llvm::formatv_object_base **a2, int a3, int a4, int a5, llvm::formatv_object_base **this, int a7, int a8, _BYTE *a9)
{
  std::string::size_type size;
  unint64_t Symbol;
  std::string __p;

  if (*((unsigned __int8 *)this + 32) < 2u)
    goto LABEL_9;
  llvm::Twine::str(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_7;
LABEL_9:
    Symbol = 0;
    return llvm::MCContext::getELFSection((uint64_t)a1, a2, a3, a4, a5, Symbol, a7, a8, a9);
  }
  if (!size)
    goto LABEL_9;
LABEL_7:
  Symbol = llvm::MCContext::getOrCreateSymbol(a1, (const llvm::Twine *)this);
  return llvm::MCContext::getELFSection((uint64_t)a1, a2, a3, a4, a5, Symbol, a7, a8, a9);
}

unint64_t llvm::MCContext::getELFSection(uint64_t a1, llvm::formatv_object_base **this, int a3, int a4, int a5, unint64_t a6, int a7, int a8, _BYTE *a9)
{
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::string *v16;
  size_t size;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void **v26;
  char *v27;
  int v28;
  void **v29;
  unsigned __int8 *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  llvm::MCSymbol *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  llvm::MCSymbol *v47;
  uint64_t v48;
  unint64_t *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  std::string::size_type v61;
  _QWORD *v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  BOOL v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t **v73;
  unsigned __int8 *v74;
  uint64_t **v75;
  _OWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v85;
  BOOL v98;
  _BOOL4 v102;
  BOOL v106;
  BOOL v109;
  int v110;
  int v111;
  std::string v116;
  __int128 __dst;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  int v121;
  void *__p[2];
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  int v126;
  uint64_t v127;

  if (a6)
  {
    if ((*(_BYTE *)a6 & 4) != 0)
    {
      v14 = *(uint64_t **)(a6 - 8);
      v15 = *v14;
      v12 = v14 + 2;
      v13 = v15;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
    v13 = 0;
    v12 = &str_26;
  }
  llvm::Twine::str(this, &v116);
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v116;
  else
    v16 = (std::string *)v116.__r_.__value_.__r.__words[0];
  if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
  else
    size = v116.__r_.__value_.__l.__size_;
  if (a9)
  {
    if ((*a9 & 4) != 0)
    {
      v20 = (uint64_t *)*((_QWORD *)a9 - 1);
      v21 = *v20;
      v18 = v20 + 2;
      v19 = v21;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
  }
  else
  {
    v19 = 0;
    v18 = &str_26;
  }
  if (size > 0x7FFFFFFFFFFFFFF7)
LABEL_270:
    abort();
  v111 = a7;
  if (size >= 0x17)
  {
    v23 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v23 = size | 7;
    v24 = v23 + 1;
    p_dst = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = size;
    v118 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_24;
  }
  HIBYTE(v118) = size;
  p_dst = &__dst;
  if (size)
LABEL_24:
    memmove(p_dst, v16, size);
  *((_BYTE *)p_dst + size) = 0;
  *((_QWORD *)&v119 + 1) = v13;
  *(_QWORD *)&v120 = v18;
  *((_QWORD *)&v120 + 1) = v19;
  v25 = a8;
  v121 = a8;
  *(_OWORD *)__p = __dst;
  v123 = v118;
  __dst = 0uLL;
  v118 = 0;
  *(_QWORD *)&v119 = v12;
  v126 = a8;
  v124 = v119;
  v125 = v120;
  v127 = 0;
  v26 = (void **)(a1 + 1784);
  v27 = *(char **)(a1 + 1784);
  if (v27)
  {
    v28 = a4;
    while (1)
    {
      while (1)
      {
        v29 = (void **)v27;
        v30 = (unsigned __int8 *)(v27 + 32);
        if (!llvm::MCContext::ELFSectionKey::operator<((unsigned __int8 *)__p, (unsigned __int8 **)v27 + 4))
          break;
        v27 = (char *)*v29;
        v26 = v29;
        if (!*v29)
          goto LABEL_34;
      }
      if (!llvm::MCContext::ELFSectionKey::operator<(v30, (unsigned __int8 **)__p))
        break;
      v26 = v29 + 1;
      v27 = (char *)v29[1];
      if (!v27)
        goto LABEL_34;
    }
    v31 = (char *)*v26;
    if (*v26)
    {
      v35 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    v29 = (void **)(a1 + 1784);
    v28 = a4;
  }
LABEL_34:
  v31 = (char *)operator new(0x68uLL);
  *((_OWORD *)v31 + 2) = *(_OWORD *)__p;
  v32 = v125;
  *(_OWORD *)(v31 + 56) = v124;
  *((_QWORD *)v31 + 6) = v123;
  __p[0] = 0;
  __p[1] = 0;
  v123 = 0;
  *(_OWORD *)(v31 + 72) = v32;
  *((_DWORD *)v31 + 22) = v126;
  *((_QWORD *)v31 + 12) = 0;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = v29;
  *v26 = v31;
  v33 = **(_QWORD **)(a1 + 1776);
  v34 = (uint64_t *)v31;
  if (v33)
  {
    *(_QWORD *)(a1 + 1776) = v33;
    v34 = (uint64_t *)*v26;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1784), v34);
  v35 = 0;
  ++*(_QWORD *)(a1 + 1792);
LABEL_37:
  if (SHIBYTE(v123) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v118) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v116.__r_.__value_.__l.__data_);
    if (v35)
      return *((_QWORD *)v31 + 12);
  }
  else if (v35)
  {
    return *((_QWORD *)v31 + 12);
  }
  v37 = v31[55];
  if (v37 >= 0)
    v38 = (uint64_t)(v31 + 32);
  else
    v38 = *((_QWORD *)v31 + 4);
  if (v37 >= 0)
    v39 = v31[55];
  else
    v39 = *((_QWORD *)v31 + 5);
  if ((v28 & 0x20000000) != 0)
  {
    v40 = 3;
    goto LABEL_67;
  }
  if ((v28 & 4) != 0)
    goto LABEL_66;
  if ((v28 & 1) == 0)
  {
LABEL_54:
    v40 = 4;
LABEL_67:
    v110 = v40;
    goto LABEL_68;
  }
  if ((v28 & 0x400) != 0)
  {
    v40 = 12;
    if ((a3 & 8) == 0)
      v40 = 13;
    goto LABEL_67;
  }
  if (v39 == 4)
  {
    if (*(_DWORD *)v38 == 1936941614)
    {
LABEL_162:
      v40 = 15;
      goto LABEL_67;
    }
LABEL_66:
    v40 = 2;
    goto LABEL_67;
  }
  if (v39 < 5)
    goto LABEL_66;
  if (*(_DWORD *)v38 == 1936941614 && *(_BYTE *)(v38 + 4) == 46)
    goto LABEL_162;
  if (v39 >= 0x10)
  {
    if (*(_QWORD *)v38 == 0x6E696C2E756E672ELL && *(_QWORD *)(v38 + 8) == 0x2E622E65636E6F6BLL)
      goto LABEL_162;
    if (v39 >= 0x11)
    {
      v85 = *(_QWORD *)v38 == 0x696C2E6D766C6C2ELL && *(_QWORD *)(v38 + 8) == 0x622E65636E6F6B6ELL;
      if (v85 && *(_BYTE *)(v38 + 16) == 46)
        goto LABEL_162;
    }
  }
  else
  {
    switch(v39)
    {
      case 0xCuLL:
        if (*(_QWORD *)v38 == 0x65722E617461642ELL && *(_DWORD *)(v38 + 8) == 1869753964)
        {
          v40 = 20;
          goto LABEL_67;
        }
        break;
      case 6uLL:
        if (*(_DWORD *)v38 == 1952539694 && *(_WORD *)(v38 + 4) == 12641)
          goto LABEL_193;
        break;
      case 5uLL:
        if (*(_DWORD *)v38 != 1952539694 || *(_BYTE *)(v38 + 4) != 97)
        {
          if (*(_DWORD *)v38 == 1935832110 && *(_BYTE *)(v38 + 4) == 115)
          {
            v40 = 12;
            goto LABEL_67;
          }
          goto LABEL_66;
        }
LABEL_193:
        v40 = 19;
        goto LABEL_67;
    }
  }
  if (*(_DWORD *)v38 == 1952539694 && *(_WORD *)(v38 + 4) == 11873)
    goto LABEL_193;
  if (v39 == 8)
  {
    if (*(_QWORD *)v38 == 0x31617461646F722ELL)
      goto LABEL_54;
LABEL_197:
    if (*(_QWORD *)v38 == 0x2E617461646F722ELL)
      goto LABEL_54;
    goto LABEL_198;
  }
  if (v39 == 7)
  {
    if (*(_DWORD *)v38 == 1685025326 && *(_DWORD *)(v38 + 3) == 1635017060)
      goto LABEL_54;
    if ((*(_DWORD *)v38 != 1935832110 || *(_WORD *)(v38 + 4) != 11891)
      && (*(_DWORD *)v38 != 1633973294 || *(_DWORD *)(v38 + 3) != 778138721))
    {
LABEL_235:
      v102 = *(_DWORD *)v38 != 1650811950 || *(_DWORD *)(v38 + 3) != 1600615778;
      v40 = 2 * v102;
      goto LABEL_67;
    }
LABEL_230:
    v40 = 13;
    goto LABEL_67;
  }
  if (v39 >= 8)
    goto LABEL_197;
LABEL_198:
  if (*(_DWORD *)v38 == 1935832110 && *(_WORD *)(v38 + 4) == 11891)
    goto LABEL_230;
  if (v39 < 0x11)
  {
    if (v39 == 6)
    {
      if (*(_DWORD *)v38 != 1633973294 || *(_WORD *)(v38 + 4) != 24948)
        goto LABEL_66;
    }
    else if (*(_DWORD *)v38 != 1633973294 || *(_DWORD *)(v38 + 3) != 778138721)
    {
      goto LABEL_235;
    }
    goto LABEL_230;
  }
  if (*(_QWORD *)v38 == 0x6E696C2E756E672ELL
    && *(_QWORD *)(v38 + 8) == 0x62742E65636E6F6BLL
    && *(_BYTE *)(v38 + 16) == 46)
  {
    goto LABEL_230;
  }
  if (v39 < 0x12)
  {
    if (*(_DWORD *)v38 != 1633973294 || *(_DWORD *)(v38 + 3) != 778138721)
    {
      v98 = *(_QWORD *)v38 == 0x6E696C2E756E672ELL && *(_QWORD *)(v38 + 8) == 0x64742E65636E6F6BLL;
      if (!v98 || *(_BYTE *)(v38 + 16) != 46)
        goto LABEL_235;
    }
    goto LABEL_230;
  }
  if ((*(_QWORD *)v38 != 0x696C2E6D766C6C2ELL
     || *(_QWORD *)(v38 + 8) != 0x742E65636E6F6B6ELL
     || *(_WORD *)(v38 + 16) != 11874)
    && (*(_DWORD *)v38 != 1633973294 || *(_DWORD *)(v38 + 3) != 778138721))
  {
    v106 = *(_QWORD *)v38 == 0x6E696C2E756E672ELL && *(_QWORD *)(v38 + 8) == 0x64742E65636E6F6BLL;
    if (!v106 || *(_BYTE *)(v38 + 16) != 46)
    {
      v109 = *(_QWORD *)v38 == 0x696C2E6D766C6C2ELL
          && *(_QWORD *)(v38 + 8) == 0x742E65636E6F6B6ELL
          && *(_WORD *)(v38 + 16) == 11876;
      v28 = a4;
      if (!v109)
        goto LABEL_235;
      goto LABEL_230;
    }
  }
  v110 = 13;
  v28 = a4;
LABEL_68:
  v41 = llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(a1 + 1144, (uint64_t *)v38, v39);
  v42 = *v41;
  v43 = *(llvm::MCSymbol **)(*v41 + 8);
  if (!v43)
    goto LABEL_76;
  llvm::MCSymbol::getFragment(v43, 1);
  if (!v44)
    goto LABEL_73;
  llvm::MCSymbol::isInSection(*(llvm::MCSymbol **)(v42 + 8));
  if (!v45
    || (llvm::MCSymbol::getFragment(*(llvm::MCSymbol **)(v42 + 8), 1),
        v47 = *(llvm::MCSymbol **)(*(_QWORD *)(v46 + 16) + 8),
        v47 != *(llvm::MCSymbol **)(v42 + 8)))
  {
    __p[0] = "invalid symbol redefinition";
    WORD4(v124) = 259;
    llvm::MCContext::reportError(a1, 0, (uint64_t)__p);
LABEL_73:
    v47 = *(llvm::MCSymbol **)(v42 + 8);
  }
  if (v47)
  {
    llvm::MCSymbol::getFragment(v47, 1);
    if (!v48)
    {
      v52 = *(_QWORD *)(v42 + 8);
      goto LABEL_87;
    }
  }
LABEL_76:
  __p[0] = (void *)v38;
  __p[1] = (void *)v39;
  LOBYTE(v123) = 0;
  v49 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (uint64_t *)v38, v39, &v123);
  if (*v49)
    v51 = 48;
  else
    v51 = 40;
  v50 = *v49 != 0;
  v52 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v51, 3) + 8 * v50;
  v53 = *v49;
  v66 = *v49 == 0;
  *(_DWORD *)(v52 + 8) = *(_DWORD *)(v52 + 8) & 0xFFF80000 | 0x100;
  v54 = !v66;
  *(_WORD *)(v52 + 12) = 0;
  *(_DWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  *(_QWORD *)v52 = 4 * v54;
  if (v53)
    *(_QWORD *)(v52 - 8) = v53;
  *(_QWORD *)(v52 + 32) = 0;
  if (!*(_QWORD *)(v42 + 8))
    *(_QWORD *)(v42 + 8) = v52;
LABEL_87:
  *(_WORD *)(v52 + 12) = *(_WORD *)(v52 + 12) & 0xEFE0 | 0x1003;
  v36 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 472, 256, 3);
  llvm::MCSection::MCSection(v36, 1, v38, v39, v110, v52);
  *(_QWORD *)v55 = &off_251C1CF38;
  *(_DWORD *)(v55 + 224) = a3;
  *(_DWORD *)(v55 + 228) = v28;
  *(_DWORD *)(v55 + 232) = v25;
  *(_DWORD *)(v55 + 236) = a5;
  v56 = 4;
  if (!v111)
    v56 = 0;
  *(_QWORD *)(v55 + 240) = v56 | a6 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(v55 + 248) = a9;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) != 0)
    *(_WORD *)((a6 & 0xFFFFFFFFFFFFFFF8) + 12) |= 0x400u;
  v57 = operator new();
  *(_OWORD *)v57 = 0u;
  *(_OWORD *)(v57 + 16) = 0u;
  *(_QWORD *)(v57 + 32) = -1;
  *(_QWORD *)(v57 + 40) = 0;
  *(_BYTE *)(v57 + 48) = 1;
  *(_DWORD *)(v57 + 49) = 0;
  *(_QWORD *)(v57 + 56) = 0;
  *(_QWORD *)(v57 + 64) = v57 + 88;
  *(_OWORD *)(v57 + 72) = xmmword_24AA2AC10;
  *(_QWORD *)(v57 + 120) = v57 + 136;
  *(_QWORD *)(v57 + 128) = 0x400000000;
  v59 = *(uint64_t **)(v36 + 112);
  v60 = *v59;
  *(_QWORD *)v57 = *v59;
  *(_QWORD *)(v57 + 8) = v59;
  *(_QWORD *)(v60 + 8) = v57;
  *v59 = v57;
  *(_QWORD *)(v57 + 16) = v36;
  *(_QWORD *)v52 = *(_QWORD *)v52 & 7 | v57;
  *((_QWORD *)v31 + 12) = v36;
  v62 = *(_QWORD **)(v36 + 200);
  v61 = *(_QWORD *)(v36 + 208);
  v64 = *(_DWORD *)(v36 + 228);
  v63 = *(_DWORD *)(v36 + 232);
  v65 = *(_DWORD *)(v36 + 236);
  v116.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  v116.__r_.__value_.__l.__size_ = v61;
  if (v63 == -1)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 2112, &v116, v58, (uint64_t)__p);
    v61 = v116.__r_.__value_.__l.__size_;
    v62 = (_QWORD *)v116.__r_.__value_.__r.__words[0];
    if ((v64 & 0x10) != 0)
      goto LABEL_106;
  }
  else if ((v64 & 0x10) != 0)
  {
    goto LABEL_106;
  }
  __p[0] = v62;
  __p[1] = (void *)v61;
  if (v61 < 0xB
    || (*v62 == 0x2E617461646F722ELL ? (v66 = *(_QWORD *)((char *)v62 + 3) == 0x7274732E61746164) : (v66 = 0),
        !v66
     && (*v62 == 0x2E617461646F722ELL ? (v67 = *(_QWORD *)((char *)v62 + 3) == 0x7473632E61746164) : (v67 = 0), !v67)))
  {
    *(_QWORD *)&__dst = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 2112), (uint64_t)__p, &__dst, v58))return v36;
    v61 = v116.__r_.__value_.__l.__size_;
    v62 = (_QWORD *)v116.__r_.__value_.__r.__words[0];
  }
LABEL_106:
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_270;
  if (v61 >= 0x17)
  {
    v69 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v69 = v61 | 7;
    v70 = v69 + 1;
    v68 = (__int128 *)operator new(v69 + 1);
    *((_QWORD *)&__dst + 1) = v61;
    v118 = v70 | 0x8000000000000000;
    *(_QWORD *)&__dst = v68;
  }
  else
  {
    HIBYTE(v118) = v61;
    v68 = &__dst;
    if (!v61)
      goto LABEL_114;
  }
  memmove(v68, v62, v61);
LABEL_114:
  *((_BYTE *)v68 + v61) = 0;
  *(_QWORD *)&v119 = __PAIR64__(v65, v64);
  *(_OWORD *)__p = __dst;
  __dst = 0uLL;
  v71 = v118;
  v118 = 0;
  v123 = v71;
  *(_QWORD *)&v124 = __PAIR64__(v65, v64);
  DWORD2(v124) = v63;
  v72 = *(uint64_t **)(a1 + 2096);
  if (v72)
  {
    while (1)
    {
      while (1)
      {
        v73 = (uint64_t **)v72;
        v74 = (unsigned __int8 *)(v72 + 4);
        if (!llvm::MCContext::ELFEntrySizeKey::operator<((unsigned __int8 *)__p, (unsigned __int8 **)v72 + 4))
          break;
        v72 = *v73;
        v75 = v73;
        if (!*v73)
          goto LABEL_122;
      }
      if (!llvm::MCContext::ELFEntrySizeKey::operator<(v74, (unsigned __int8 **)__p))
        break;
      v72 = v73[1];
      if (!v72)
      {
        v75 = v73 + 1;
        goto LABEL_122;
      }
    }
  }
  else
  {
    v75 = (uint64_t **)(a1 + 2096);
    v73 = (uint64_t **)(a1 + 2096);
LABEL_122:
    v76 = operator new(0x48uLL);
    v76[2] = *(_OWORD *)__p;
    v77 = v123;
    __p[0] = 0;
    __p[1] = 0;
    v123 = 0;
    *((_QWORD *)v76 + 6) = v77;
    *((_QWORD *)v76 + 7) = __PAIR64__(v65, v64);
    *((_DWORD *)v76 + 16) = v63;
    *(_QWORD *)v76 = 0;
    *((_QWORD *)v76 + 1) = 0;
    *((_QWORD *)v76 + 2) = v73;
    *v75 = (uint64_t *)v76;
    v78 = **(_QWORD **)(a1 + 2088);
    if (v78)
    {
      *(_QWORD *)(a1 + 2088) = v78;
      v79 = *v75;
    }
    else
    {
      v79 = (uint64_t *)v76;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 2096), v79);
    ++*(_QWORD *)(a1 + 2104);
  }
  if (SHIBYTE(v123) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v118) < 0)
    operator delete((void *)__dst);
  return v36;
}

void llvm::MCContext::getGOFFSection(uint64_t a1, void *__src, size_t __len, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t **v12;
  _OWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  void *__p[2];
  uint64_t v17;
  void **v18;

  v12 = (uint64_t **)(a1 + 1824);
  if (__src)
  {
    std::string::basic_string[abi:nn180100](__p, __src, __len);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
  }
  v18 = __p;
  v13 = std::__tree<std::__value_type<std::string,llvm::MCSectionGOFF *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::MCSectionGOFF *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::MCSectionGOFF *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (!*((_QWORD *)v13 + 7))
  {
    v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 664, 240, 3);
    llvm::MCSection::MCSection(v14, 2, (uint64_t)__src, __len, a4, 0);
    *v15 = &off_251C1C8D0;
    v15[28] = a5;
    v15[29] = a6;
    *((_QWORD *)v13 + 7) = v15;
  }
}

unint64_t llvm::MCContext::getCOFFSection(llvm::MCContext *this, const void *a2, std::string::size_type a3, int a4, int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, int a9, _BYTE *a10)
{
  _QWORD *v11;
  llvm::MCContext *v16;
  _BYTE *Symbol;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  std::string *p_dst;
  uint64_t v23;
  llvm::MCContext *v24;
  uint64_t v25;
  const void *v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  void **v32;
  char *v33;
  void **v34;
  unsigned __int8 *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  unint64_t v40;
  char v41;
  unint64_t TempSymbol;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v51;
  std::string v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  std::string __dst;
  __int128 v57;
  unint64_t v58;

  v11 = (_QWORD *)a6;
  v16 = this;
  if (a7)
  {
    WORD4(v53) = 261;
    v52.__r_.__value_.__r.__words[0] = a6;
    v52.__r_.__value_.__l.__size_ = a7;
    Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(this, (const llvm::Twine *)&v52);
    if ((*Symbol & 4) != 0)
    {
      v19 = (uint64_t *)*((_QWORD *)Symbol - 1);
      v20 = *v19;
      v11 = v19 + 2;
      v18 = v20;
    }
    else
    {
      v11 = 0;
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    Symbol = 0;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v21 = a9;
  v51 = Symbol;
  if (a3 >= 0x17)
  {
    v23 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v23 = a3 | 7;
    v24 = v16;
    v25 = v18;
    v26 = a2;
    v27 = a5;
    v28 = a8;
    v29 = a4;
    v30 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    v31 = v30 | 0x8000000000000000;
    a4 = v29;
    a8 = v28;
    a5 = v27;
    a2 = v26;
    v18 = v25;
    v16 = v24;
    v21 = a9;
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v31;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_13;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_13:
    memmove(p_dst, a2, a3);
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  *(_QWORD *)&v57 = v11;
  *((_QWORD *)&v57 + 1) = v18;
  v58 = __PAIR64__(v21, a8);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v52, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v52 = __dst;
  v53 = v57;
  v54 = v58;
  v55 = 0;
  v32 = (void **)((char *)v16 + 1808);
  v33 = (char *)*((_QWORD *)v16 + 226);
  if (v33)
  {
    while (1)
    {
      while (1)
      {
        v34 = (void **)v33;
        v35 = (unsigned __int8 *)(v33 + 32);
        if (!llvm::MCContext::COFFSectionKey::operator<((unsigned __int8 *)&v52, (unsigned __int8 **)v33 + 4))
          break;
        v33 = (char *)*v34;
        v32 = v34;
        if (!*v34)
          goto LABEL_25;
      }
      if (!llvm::MCContext::COFFSectionKey::operator<(v35, (unsigned __int8 **)&v52))
        break;
      v32 = v34 + 1;
      v33 = (char *)v34[1];
      if (!v33)
        goto LABEL_25;
    }
    v36 = (char *)*v32;
    if (*v32)
    {
      v39 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    v34 = (void **)((char *)v16 + 1808);
  }
LABEL_25:
  v36 = (char *)operator new(0x58uLL);
  *(std::string *)(v36 + 32) = v52;
  memset(&v52, 0, sizeof(v52));
  *(_OWORD *)(v36 + 56) = v53;
  *((_QWORD *)v36 + 9) = v54;
  *((_QWORD *)v36 + 10) = 0;
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = v34;
  *v32 = v36;
  v37 = **((_QWORD **)v16 + 225);
  v38 = (uint64_t *)v36;
  if (v37)
  {
    *((_QWORD *)v16 + 225) = v37;
    v38 = (uint64_t *)*v32;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v16 + 226), v38);
  v39 = 0;
  ++*((_QWORD *)v16 + 227);
LABEL_28:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if (v39)
      goto LABEL_30;
  }
  else if (v39)
  {
LABEL_30:
    v40 = *((_QWORD *)v36 + 10);
    goto LABEL_46;
  }
  if (a10)
  {
    v41 = 1;
    BYTE9(v53) = 1;
    if (*a10)
    {
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)a10;
      v41 = 3;
    }
    BYTE8(v53) = v41;
    TempSymbol = llvm::MCContext::createTempSymbol(v16, (const llvm::Twine *)&v52, 0);
  }
  else
  {
    TempSymbol = 0;
  }
  v45 = *((_QWORD *)v36 + 4);
  v44 = v36 + 32;
  v43 = v45;
  v46 = v44[23];
  if (v46 >= 0)
    v47 = (uint64_t)v44;
  else
    v47 = v43;
  if (v46 >= 0)
    v48 = v44[23];
  else
    v48 = *((_QWORD *)v44 + 1);
  v40 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v16 + 280, 248, 3);
  llvm::MCSection::MCSection(v40, 0, v47, v48, a5, TempSymbol);
  *(_QWORD *)v49 = &off_251C1CED8;
  *(_DWORD *)(v49 + 224) = a4;
  *(_DWORD *)(v49 + 228) = -1;
  *(_QWORD *)(v49 + 232) = v51;
  *(_DWORD *)(v49 + 240) = a8;
  *((_QWORD *)v44 + 6) = v49;
LABEL_46:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v40;
}

unint64_t llvm::MCContext::getWasmSection(llvm::MCContext *a1, llvm::formatv_object_base **a2, int a3, int a4, llvm::formatv_object_base **this, int a6)
{
  std::string::size_type size;
  _BYTE *Symbol;
  std::string __p;

  if (*((unsigned __int8 *)this + 32) < 2u)
    goto LABEL_9;
  llvm::Twine::str(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_7;
LABEL_9:
    Symbol = 0;
    return llvm::MCContext::getWasmSection((uint64_t)a1, a2, a3, a4, Symbol, a6);
  }
  if (!size)
    goto LABEL_9;
LABEL_7:
  Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(a1, (const llvm::Twine *)this);
  Symbol[42] = 1;
  return llvm::MCContext::getWasmSection((uint64_t)a1, a2, a3, a4, Symbol, a6);
}

unint64_t llvm::MCContext::getWasmSection(uint64_t a1, llvm::formatv_object_base **this, int a3, int a4, _BYTE *a5, int a6)
{
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::string *v15;
  size_t size;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  char *v21;
  void **v22;
  unsigned __int8 *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  int v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t Symbol;
  uint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v42;
  std::string v43;
  __int128 __dst;
  unint64_t v45;
  __int128 v46;
  int v47;
  void *__p[2];
  unint64_t v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  if (a5)
  {
    if ((*a5 & 4) != 0)
    {
      v13 = (uint64_t *)*((_QWORD *)a5 - 1);
      v14 = *v13;
      v11 = v13 + 2;
      v12 = v14;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = &str_26;
  }
  llvm::Twine::str(this, &v43);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v43;
  else
    v15 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    size = v43.__r_.__value_.__l.__size_;
  if (size >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v42 = a4;
  if (size >= 0x17)
  {
    v18 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v18 = size | 7;
    v19 = v18 + 1;
    p_dst = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = size;
    v45 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v45) = size;
  p_dst = &__dst;
  if (size)
LABEL_19:
    memmove(p_dst, v15, size);
  *((_BYTE *)p_dst + size) = 0;
  *(_QWORD *)&v46 = v11;
  *((_QWORD *)&v46 + 1) = v12;
  v47 = a6;
  *(_OWORD *)__p = __dst;
  v49 = v45;
  __dst = 0uLL;
  v45 = 0;
  v51 = a6;
  v50 = v46;
  v52 = 0;
  v20 = (void **)(a1 + 1856);
  v21 = *(char **)(a1 + 1856);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        v22 = (void **)v21;
        v23 = (unsigned __int8 *)(v21 + 32);
        if (!llvm::MCContext::WasmSectionKey::operator<((unsigned __int8 *)__p, (unsigned __int8 **)v21 + 4))
          break;
        v21 = (char *)*v22;
        v20 = v22;
        if (!*v22)
          goto LABEL_28;
      }
      if (!llvm::MCContext::WasmSectionKey::operator<(v23, (unsigned __int8 **)__p))
        break;
      v20 = v22 + 1;
      v21 = (char *)v22[1];
      if (!v21)
        goto LABEL_28;
    }
    v24 = (char *)*v20;
    if (*v20)
    {
      v27 = 1;
      goto LABEL_31;
    }
  }
  else
  {
    v22 = (void **)(a1 + 1856);
  }
LABEL_28:
  v24 = (char *)operator new(0x58uLL);
  *((_OWORD *)v24 + 2) = *(_OWORD *)__p;
  *((_QWORD *)v24 + 6) = v49;
  __p[0] = 0;
  __p[1] = 0;
  v49 = 0;
  *(_OWORD *)(v24 + 56) = v46;
  *((_DWORD *)v24 + 18) = v47;
  *((_QWORD *)v24 + 10) = 0;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = v22;
  *v20 = v24;
  v25 = **(_QWORD **)(a1 + 1848);
  v26 = (uint64_t *)v24;
  if (v25)
  {
    *(_QWORD *)(a1 + 1848) = v25;
    v26 = (uint64_t *)*v20;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1856), v26);
  v27 = 0;
  ++*(_QWORD *)(a1 + 1864);
LABEL_31:
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if (v27)
      return *((_QWORD *)v24 + 10);
  }
  else if (v27)
  {
    return *((_QWORD *)v24 + 10);
  }
  v29 = v24[55];
  if (v29 >= 0)
    v30 = v24 + 32;
  else
    v30 = (_BYTE *)*((_QWORD *)v24 + 4);
  if (v29 >= 0)
    v31 = v24[55];
  else
    v31 = *((_QWORD *)v24 + 5);
  Symbol = llvm::MCContext::createSymbol(a1, v30, v31, 1, 0);
  if ((*(_BYTE *)Symbol & 4) != 0)
  {
    v35 = *(_QWORD **)(Symbol - 8);
    v36 = *v35;
    v33 = v35 + 2;
    v34 = v36;
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  *(_QWORD *)(*llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(a1 + 1144, v33, v34)+ 8) = Symbol;
  *(_DWORD *)(Symbol + 32) = 3;
  *(_BYTE *)(Symbol + 36) = 1;
  v28 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 856, 264, 3);
  llvm::MCSection::MCSection(v28, 4, (uint64_t)v30, v31, a3, Symbol);
  *(_QWORD *)v37 = &off_251C1D430;
  *(_DWORD *)(v37 + 224) = a6;
  *(_QWORD *)(v37 + 232) = a5;
  *(_QWORD *)(v37 + 240) = 0;
  *(_DWORD *)(v37 + 248) = 0;
  *(_BYTE *)(v37 + 252) = 0;
  *(_DWORD *)(v37 + 256) = v42;
  *((_QWORD *)v24 + 10) = v37;
  v38 = operator new();
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_QWORD *)(v38 + 32) = -1;
  *(_QWORD *)(v38 + 40) = 0;
  *(_BYTE *)(v38 + 48) = 1;
  *(_DWORD *)(v38 + 49) = 0;
  *(_QWORD *)(v38 + 56) = 0;
  *(_QWORD *)(v38 + 64) = v38 + 88;
  *(_OWORD *)(v38 + 72) = xmmword_24AA2AC10;
  *(_QWORD *)(v38 + 120) = v38 + 136;
  *(_QWORD *)(v38 + 128) = 0x400000000;
  v39 = *(uint64_t **)(v28 + 112);
  v40 = *v39;
  *(_QWORD *)v38 = *v39;
  *(_QWORD *)(v38 + 8) = v39;
  *(_QWORD *)(v40 + 8) = v38;
  *v39 = v38;
  *(_QWORD *)(v38 + 16) = v28;
  *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v38;
  return v28;
}

unint64_t llvm::MCContext::getXCOFFSection(uint64_t a1, void *a2, size_t a3, int a4, __int16 a5, int a6, _BYTE *TempSymbol, uint64_t a8)
{
  uint64_t v13;
  unsigned int v14;
  size_t v15;
  void **v16;
  unsigned int v17;
  size_t v18;
  void **v19;
  void **v20;
  size_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void **v26;
  size_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  _QWORD *v32;
  const void **v33;
  uint64_t **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  int v39;
  void *v40;
  void *v41;
  unint64_t v42;
  int v43;
  const char *MappingClassString;
  uint64_t v45;
  unint64_t Symbol;
  char v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  unsigned __int8 *UnqualifiedName;
  uint64_t v56;
  _QWORD *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v66;
  void *v67;
  size_t v68;
  const char *v69;
  __int16 v70;
  __int128 __dst;
  unint64_t v72;
  uint64_t v73;
  __int16 v74;
  void *v75;
  size_t v76;
  uint64_t v77;
  void *__p[2];
  const char *v79;
  int v80;
  char v81;
  uint64_t v82;

  v66 = a8;
  v13 = a8 & 0xFF00000000;
  if ((a8 & 0xFF00000000) != 0)
  {
    if (a2)
    {
      std::string::basic_string[abi:nn180100](&v75, a2, a3);
      v14 = HIBYTE(v77);
      v16 = (void **)v75;
      v15 = v76;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v14 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
    }
    if ((v14 & 0x80u) == 0)
      v20 = &v75;
    else
      v20 = v16;
    if ((v14 & 0x80u) == 0)
      v21 = v14;
    else
      v21 = v15;
    if (v21 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v21 >= 0x17)
      {
        v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v23 = v21 | 7;
        v24 = v23 + 1;
        p_dst = (__int128 *)operator new(v23 + 1);
        *((_QWORD *)&__dst + 1) = v21;
        v72 = v24 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v72) = v21;
        p_dst = &__dst;
        if (!v21)
          goto LABEL_21;
      }
      memmove(p_dst, v20, v21);
LABEL_21:
      v25 = 0;
      *((_BYTE *)p_dst + v21) = 0;
      LODWORD(v73) = v66;
      goto LABEL_38;
    }
LABEL_102:
    abort();
  }
  if (a2)
  {
    std::string::basic_string[abi:nn180100](&v67, a2, a3);
    v17 = HIBYTE(v69);
    v19 = (void **)v67;
    v18 = v68;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
  }
  if ((v17 & 0x80u) == 0)
    v26 = &v67;
  else
    v26 = v19;
  if ((v17 & 0x80u) == 0)
    v27 = v17;
  else
    v27 = v18;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_102;
  if (v27 >= 0x17)
  {
    v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v29 = v27 | 7;
    v30 = v29 + 1;
    v28 = (__int128 *)operator new(v29 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v72 = v30 | 0x8000000000000000;
    *(_QWORD *)&__dst = v28;
  }
  else
  {
    HIBYTE(v72) = v27;
    v28 = &__dst;
    if (!v27)
      goto LABEL_37;
  }
  memmove(v28, v26, v27);
LABEL_37:
  *((_BYTE *)v28 + v27) = 0;
  LOBYTE(v73) = a5;
  v25 = 1;
LABEL_38:
  BYTE4(v73) = v25;
  *(_OWORD *)__p = __dst;
  v79 = (const char *)v72;
  __dst = 0uLL;
  v72 = 0;
  v80 = v73;
  v81 = v25;
  v82 = 0;
  v31 = *(const void ***)(a1 + 1880);
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        v32 = v31;
        v33 = v31 + 4;
        if (!llvm::MCContext::XCOFFSectionKey::operator<((const void **)__p, v31 + 4))
          break;
        v31 = (const void **)*v32;
        v34 = (uint64_t **)v32;
        if (!*v32)
          goto LABEL_46;
      }
      if (!llvm::MCContext::XCOFFSectionKey::operator<(v33, (const void **)__p))
        break;
      v31 = (const void **)v32[1];
      if (!v31)
      {
        v34 = (uint64_t **)(v32 + 1);
        goto LABEL_46;
      }
    }
    v38 = 1;
  }
  else
  {
    v34 = (uint64_t **)(a1 + 1880);
    v32 = (_QWORD *)(a1 + 1880);
LABEL_46:
    v35 = v32;
    v32 = operator new(0x48uLL);
    *((_OWORD *)v32 + 2) = *(_OWORD *)__p;
    v32[6] = v79;
    __p[0] = 0;
    __p[1] = 0;
    v79 = 0;
    *((_DWORD *)v32 + 14) = v73;
    *((_BYTE *)v32 + 60) = BYTE4(v73);
    v32[8] = 0;
    *v32 = 0;
    v32[1] = 0;
    v32[2] = v35;
    *v34 = v32;
    v36 = **(_QWORD **)(a1 + 1872);
    v37 = v32;
    if (v36)
    {
      *(_QWORD *)(a1 + 1872) = v36;
      v37 = *v34;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1880), v37);
    v38 = 0;
    ++*(_QWORD *)(a1 + 1888);
  }
  if (SHIBYTE(v79) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v72) < 0)
  {
    operator delete((void *)__dst);
    if (v13)
      goto LABEL_54;
LABEL_58:
    if (SHIBYTE(v69) < 0)
    {
      operator delete(v67);
      if ((v38 & 1) != 0)
        goto LABEL_70;
    }
    else if ((v38 & 1) != 0)
    {
      goto LABEL_70;
    }
    v43 = *((char *)v32 + 55);
    if (v43 >= 0)
      v40 = v32 + 4;
    else
      v40 = (void *)v32[4];
    if (v43 >= 0)
      v41 = (void *)*((unsigned __int8 *)v32 + 55);
    else
      v41 = (void *)v32[5];
    v70 = 773;
    v67 = v40;
    v68 = (size_t)v41;
    v69 = "[";
    MappingClassString = llvm::XCOFF::getMappingClassString(a5);
    *(_QWORD *)&__dst = &v67;
    v72 = (unint64_t)MappingClassString;
    v73 = v45;
    v74 = 1282;
    __p[0] = &__dst;
    v79 = "]";
    LOWORD(v82) = 770;
    goto LABEL_79;
  }
  if (!v13)
    goto LABEL_58;
LABEL_54:
  if (SHIBYTE(v77) < 0)
  {
    operator delete(v75);
    if ((v38 & 1) != 0)
      goto LABEL_70;
  }
  else if ((v38 & 1) != 0)
  {
LABEL_70:
    v42 = v32[8];
    if ((*(_BYTE *)(v42 + 264) != 0) != a6)
      llvm::report_fatal_error((llvm *)"section's multiply symbols policy does not match", (const llvm::Twine *)1);
    return v42;
  }
  v39 = *((char *)v32 + 55);
  if (v39 >= 0)
    v40 = v32 + 4;
  else
    v40 = (void *)v32[4];
  if (v39 >= 0)
    v41 = (void *)*((unsigned __int8 *)v32 + 55);
  else
    v41 = (void *)v32[5];
  LOWORD(v82) = 261;
  __p[0] = v40;
  __p[1] = v41;
LABEL_79:
  Symbol = llvm::MCContext::getOrCreateSymbol((llvm::MCContext *)a1, (const llvm::Twine *)__p);
  if (TempSymbol)
  {
    v47 = 1;
    BYTE1(v82) = 1;
    if (*TempSymbol)
    {
      __p[0] = TempSymbol;
      v47 = 3;
    }
    LOBYTE(v82) = v47;
    TempSymbol = (_BYTE *)llvm::MCContext::createTempSymbol((llvm::MCContext *)a1, (const llvm::Twine *)__p, 0);
  }
  v42 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 952, 272, 3);
  v48 = *(_QWORD *)Symbol;
  if (v13)
  {
    if ((v48 & 4) != 0)
    {
      v53 = *(_QWORD **)(Symbol - 8);
      v54 = (unsigned __int8 *)*v53;
      v49 = (unsigned __int8 *)(v53 + 2);
      v50 = v54;
    }
    else
    {
      v49 = 0;
      v50 = 0;
    }
    UnqualifiedName = llvm::MCSymbolXCOFF::getUnqualifiedName(v49, v50);
    llvm::MCSection::MCSection(v42, 5, (uint64_t)UnqualifiedName, v56, a4, (uint64_t)TempSymbol);
    *(_QWORD *)v42 = &off_251C1D460;
    *(_BYTE *)(v42 + 224) = 0;
    *(_BYTE *)(v42 + 226) = 0;
    *(_QWORD *)(v42 + 232) = Symbol;
    *(_QWORD *)(v42 + 240) = v40;
    *(_QWORD *)(v42 + 248) = v41;
    *(_DWORD *)(v42 + 256) = v66;
    *(_BYTE *)(v42 + 260) = 1;
    *(_BYTE *)(v42 + 264) = a6;
    *(_QWORD *)(Symbol + 40) = v42;
    *(_BYTE *)(v42 + 24) = 5;
  }
  else
  {
    if ((v48 & 4) != 0)
    {
      v57 = *(_QWORD **)(Symbol - 8);
      v58 = (unsigned __int8 *)*v57;
      v51 = (unsigned __int8 *)(v57 + 2);
      v52 = v58;
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    v59 = llvm::MCSymbolXCOFF::getUnqualifiedName(v51, v52);
    llvm::MCSection::MCSection(v42, 5, (uint64_t)v59, v60, a4, (uint64_t)TempSymbol);
    *(_QWORD *)v42 = &off_251C1D460;
    *(_WORD *)(v42 + 224) = a5;
    *(_BYTE *)(v42 + 226) = 1;
    *(_QWORD *)(v42 + 232) = Symbol;
    *(_QWORD *)(v42 + 240) = v40;
    *(_QWORD *)(v42 + 248) = v41;
    *(_BYTE *)(v42 + 256) = 0;
    *(_BYTE *)(v42 + 260) = 0;
    *(_BYTE *)(v42 + 264) = a6;
    *(_QWORD *)(Symbol + 40) = v42;
    *(_WORD *)(Symbol + 32) = 363;
    if ((a5 & 0xFF00) != 0)
    {
      if ((_BYTE)a5)
        v61 = 2;
      else
        v61 = 5;
      *(_BYTE *)(v42 + 24) = v61;
    }
  }
  v32[8] = v42;
  v62 = operator new();
  *(_OWORD *)v62 = 0u;
  *(_OWORD *)(v62 + 16) = 0u;
  *(_QWORD *)(v62 + 32) = -1;
  *(_QWORD *)(v62 + 40) = 0;
  *(_BYTE *)(v62 + 48) = 1;
  *(_DWORD *)(v62 + 49) = 0;
  *(_QWORD *)(v62 + 56) = 0;
  *(_QWORD *)(v62 + 64) = v62 + 88;
  *(_OWORD *)(v62 + 72) = xmmword_24AA2AC10;
  *(_QWORD *)(v62 + 120) = v62 + 136;
  *(_QWORD *)(v62 + 128) = 0x400000000;
  v63 = *(uint64_t **)(v42 + 112);
  v64 = *v63;
  *(_QWORD *)v62 = *v63;
  *(_QWORD *)(v62 + 8) = v63;
  *(_QWORD *)(v64 + 8) = v62;
  *v63 = v62;
  *(_QWORD *)(v62 + 16) = v42;
  if (TempSymbol)
    *(_QWORD *)TempSymbol = *(_QWORD *)TempSymbol & 7 | v62;
  if (!v13 && !(_BYTE)a5)
    *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v62;
  return v42;
}

unint64_t llvm::MCContext::getSPIRVSection(llvm::MCContext *this)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 760, 224, 3);
  llvm::MCSection::MCSection(v1, 6, (uint64_t)&str_26, 0, 2, 0);
  *v2 = &off_251C1C900;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 32) = -1;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 1;
  *(_DWORD *)(v3 + 49) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = v3 + 88;
  *(_OWORD *)(v3 + 72) = xmmword_24AA2AC10;
  *(_QWORD *)(v3 + 120) = v3 + 136;
  *(_QWORD *)(v3 + 128) = 0x400000000;
  v4 = *(uint64_t **)(v1 + 112);
  v5 = *v4;
  *(_QWORD *)v3 = *v4;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  *(_QWORD *)(v3 + 16) = v1;
  return v1;
}

uint64_t llvm::MCContext::getDXContainerSection(uint64_t a1, uint64_t *a2, unint64_t a3, int a4)
{
  unint64_t **v6;
  uint64_t *v7;
  char v8;
  unint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;

  v6 = llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 1896), a2, a3);
  v7 = (uint64_t *)*v6;
  if (!v8)
    return v7[1];
  v9 = v6;
  v10 = *v7;
  v11 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 376, 224, 3);
  llvm::MCSection::MCSection(v11, 7, (uint64_t)(v7 + 2), v10, a4, 0);
  *v12 = &off_251C1CF08;
  (*v9)[1] = (unint64_t)v12;
  v13 = operator new();
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v13 + 32) = -1;
  *(_QWORD *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 1;
  *(_DWORD *)(v13 + 49) = 0;
  *(_QWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = v13 + 88;
  *(_OWORD *)(v13 + 72) = xmmword_24AA2AC10;
  *(_QWORD *)(v13 + 120) = v13 + 136;
  *(_QWORD *)(v13 + 128) = 0x400000000;
  v14 = *(uint64_t **)((*v9)[1] + 112);
  v15 = *v14;
  *(_QWORD *)v13 = *v14;
  *(_QWORD *)(v13 + 8) = v14;
  *(_QWORD *)(v15 + 8) = v13;
  *v14 = v13;
  result = (*v9)[1];
  *(_QWORD *)(v13 + 16) = result;
  return result;
}

void llvm::MCContext::getDwarfFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t **v15;
  _QWORD v16[2];
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  *(_QWORD *)&v18 = &a10;
  v15 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 1560), &a10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v18);
  v20 = *(_OWORD *)a7;
  v21 = *(_BYTE *)(a7 + 16);
  v18 = *(_OWORD *)a8;
  v19 = *(_QWORD *)(a8 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile((uint64_t)(v15 + 5), (uint64_t)v17, (uint64_t)v16, &v20, &v18, *(unsigned __int16 *)(a1 + 1712), a6, a9);
}

BOOL llvm::MCContext::isValidDwarfFileNumber(uint64_t **this, unsigned int a2, unsigned int a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int *v10;

  v9 = a3;
  v10 = &v9;
  v5 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 195, &v9, (uint64_t)&std::piecewise_construct, &v10);
  if (!a2)
    return *((unsigned __int16 *)this + 856) > 4u;
  if (*((_DWORD *)v5 + 36) <= a2)
    return 0;
  v6 = (uint64_t)&v5[17][9 * a2];
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  return v7 != 0;
}

llvm::CodeViewContext *llvm::MCContext::getCVContext(llvm::MCContext *this)
{
  llvm::CodeViewContext *result;
  llvm::CodeViewContext **v2;
  uint64_t v3;

  v2 = (llvm::CodeViewContext **)((char *)this + 176);
  result = (llvm::CodeViewContext *)*((_QWORD *)this + 22);
  if (!result)
  {
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0x1000000000;
    *(_QWORD *)(v3 + 24) = 0;
    *(_BYTE *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = v3 + 56;
    *(_QWORD *)(v3 + 48) = 0x400000000;
    *(_QWORD *)(v3 + 200) = 0;
    *(_QWORD *)(v3 + 192) = 0;
    *(_QWORD *)(v3 + 184) = v3 + 192;
    *(_OWORD *)(v3 + 208) = 0u;
    *(_OWORD *)(v3 + 224) = 0u;
    *(_OWORD *)(v3 + 240) = 0u;
    *(_BYTE *)(v3 + 256) = 0;
    std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100](v2, (llvm::CodeViewContext *)v3);
    return *v2;
  }
  return result;
}

uint64_t llvm::MCContext::diagnose(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;

  v2 = a1[9];
  v3 = v2;
  if (!v2)
    v3 = a1[10];
  v7 = v2 == 0;
  v4 = a1[17];
  if (v4)
    return (*(uint64_t (**)(_QWORD, uint64_t, BOOL *, uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(a1[17], a2, &v7, v3, a1 + 11);
  v6 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::MCContext::reportCommon(v6);
}

void llvm::MCContext::reportCommon(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  void *v12[2];
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 __p;
  uint64_t v19;
  char *v20[2];
  _QWORD v21[22];

  v21[21] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  if (a2)
  {
    v4 = (_OWORD *)a1[9];
    if (v4)
    {
      v5 = 0;
    }
    else
    {
      v4 = (_OWORD *)a1[10];
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
    v4 = v8;
  }
  v14 = 0;
  *(_OWORD *)v12 = 0uLL;
  v13 = 0uLL;
  v11 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  __p = 0uLL;
  v19 = 0;
  v20[0] = (char *)v21;
  v20[1] = (char *)0x400000000;
  v10 = v4;
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6
    || ((*(void (**)(uint64_t, __int128 *, _OWORD **))(*(_QWORD *)v6 + 48))(v6, &v11, &v10),
        LOBYTE(v10) = v5,
        (v7 = a1[17]) == 0))
  {
    std::__throw_bad_function_call[abi:nn180100]();
  }
  (*(void (**)(uint64_t, __int128 *, _OWORD **, _OWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, &v11, &v10, v4, a1 + 11);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v20);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(*((void **)&v16 + 1));
  if (SBYTE7(v16) < 0)
    operator delete((void *)v15);
  if (SBYTE7(v13) < 0)
    operator delete(v12[0]);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v8);
}

_DWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::init(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_OWORD *)result = xmmword_24AA2AC20;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(*a1);
    std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<llvm::MCSymbol * const,llvm::MCPseudoProbeInlineTree>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:nn180100]<std::pair<llvm::MCSymbol * const,llvm::MCPseudoProbeInlineTree>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(a1 + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::unique_ptr<llvm::MCPseudoProbeInlineTree>::reset[abi:nn180100](v2 + 4, 0);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::unique_ptr<llvm::MCPseudoProbeInlineTree>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(_QWORD *)(v2 + 48) = v3;
      operator delete(v3);
    }
    std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(v2);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

llvm::raw_ostream *llvm::MCSectionGOFF::printSwitchToSection(uint64_t a1, int a2, int a3, llvm::raw_ostream *this)
{
  uint64_t v6;
  llvm::raw_ostream *result;
  _WORD *v8;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 0xA)
  {
    *(_DWORD *)(v6 + 7) = 571043439;
    *(_QWORD *)v6 = *(_QWORD *)"\t.section\t\"";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "\t.section\t\"", 0xBuLL);
  }
  result = llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(_QWORD *)(a1 + 208));
  v8 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v8 <= 1uLL)
    return llvm::raw_ostream::write(result, "\"\n", 2uLL);
  *v8 = 2594;
  *((_QWORD *)result + 4) += 2;
  return result;
}

uint64_t llvm::MCSectionGOFF::useCodeAlign(llvm::MCSectionGOFF *this)
{
  return 0;
}

uint64_t llvm::MCSectionGOFF::isVirtualSection(llvm::MCSectionGOFF *this)
{
  return 0;
}

uint64_t llvm::MCSectionSPIRV::useCodeAlign(llvm::MCSectionSPIRV *this)
{
  return 0;
}

uint64_t llvm::MCSectionSPIRV::isVirtualSection(llvm::MCSectionSPIRV *this)
{
  return 0;
}

void std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C1C930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C1C930;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, *a3, a4, a5);
}

void std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[79] < 0)
      operator delete(*((void **)a1 + 7));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<unsigned int const,llvm::MCDwarfLineTable>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::clear(_DWORD *result)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_OWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2++ = xmmword_24AA2AC20;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::shrink_and_clear(result);
    }
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::shrink_and_clear(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6++ = xmmword_24AA2AC20;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x24BD1B398](*(_QWORD *)result, 8);
    return llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::init(v1, v5);
  }
  return result;
}

uint64_t *llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(_QWORD *)(a1 + 24), a3 + 17, 3);
  v11 = (_QWORD *)v10;
  v12 = v10 + 16;
  if (a3)
    memcpy((void *)(v10 + 16), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *v11 = a3;
  v11[1] = 0;
  *i = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = v10 + 16;
  if (a3)
    memcpy(v10 + 16, a2, a3);
  v12[a3] = 0;
  *(_QWORD *)v11 = a3;
  *((_DWORD *)v11 + 2) = 0;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

unint64_t *llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(uint64_t a1, uint64_t *a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  unint64_t *i;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)a1, a2, a3);
  i = (unint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(_QWORD *)(a1 + 24), a3 + 17, 3);
  v13 = v12;
  v14 = v12 + 16;
  if (a3)
    memcpy((void *)(v12 + 16), a2, a3);
  *(_BYTE *)(v14 + a3) = 0;
  *(_QWORD *)v13 = a3;
  *(_BYTE *)(v13 + 8) = *a4;
  *i = v13;
  ++*(_DWORD *)(a1 + 12);
  for (i = (unint64_t *)(*(_QWORD *)a1
                               + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i == -8;
  return i;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *inserted = *a2;
    *((_QWORD *)inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct(uint64_t *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    *((_QWORD *)v5 + 1) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(uint64_t *a1, int *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  int v15;
  _DWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((37 * v6) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v6) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_DWORD *)(*a1 + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    if (*a2 == *v13 && v6 == v15)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v14 != -1 || v15 != -1)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v15 == -2;
        if (v20 && v14 == -2)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_DWORD *)(v4 + 16 * (v22 & v11));
        v14 = *v13;
        v15 = v13[1];
        if (v5 == *v13 && v6 == v15)
          goto LABEL_9;
      }
      result = 0;
      if (v17)
        v13 = v17;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v13;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_DWORD *)(v13 + 4);
        if ((*(_DWORD *)v13 != -1 || v14 != -1) && (*(_DWORD *)v13 != -2 || v14 != -2))
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, (int *)v13, &v20);
          v17 = v20;
          *v20 = *(_DWORD *)v13;
          v17[1] = *(_DWORD *)(v13 + 4);
          *((_QWORD *)v17 + 1) = *(_QWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 16 * v18;
    do
    {
      *result = -1;
      result += 2;
      v19 -= 16;
    }
    while (v19);
  }
  return result;
}

BOOL llvm::MCContext::ELFSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  _QWORD v21[2];

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_27;
        }
        goto LABEL_18;
      }
LABEL_27:
      v17 = *((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 4);
      v19 = a2[3];
      v18 = (size_t)a2[4];
      if (v16 == v18 && (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((_QWORD *)a1 + 4))))
      {
        v20 = llvm::StringRef::compare((uint64_t)(a1 + 40), a2[5], (size_t)a2[6]);
        if (!v20)
          return *((_DWORD *)a1 + 14) < *((_DWORD *)a2 + 14);
      }
      else
      {
        v21[0] = v17;
        v21[1] = v16;
        v20 = llvm::StringRef::compare((uint64_t)v21, v19, v18);
      }
      return v20 >> 31;
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  if (v14)
    return v14 < 0;
  else
    return v4 < v6;
}

BOOL llvm::MCContext::ELFEntrySizeKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 != v6)
    goto LABEL_18;
  if ((a1[23] & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
LABEL_18:
    if (v3 >= 0)
      v12 = a1;
    else
      v12 = *(const void **)a1;
    if (v6 >= v4)
      v13 = v4;
    else
      v13 = v6;
    v14 = memcmp(v12, v7, v13);
    if (v14)
      return v14 < 0;
    else
      return v4 < v6;
  }
  if (a1[23])
  {
    v9 = v7;
    v10 = a1;
    v11 = a1[23];
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v11)
        goto LABEL_27;
    }
    goto LABEL_18;
  }
LABEL_27:
  v16 = *((_DWORD *)a1 + 6);
  v17 = *((_DWORD *)a2 + 6);
  v18 = v16 >= v17;
  if (v16 == v17)
    v18 = *((_DWORD *)a1 + 7) >= *((_DWORD *)a2 + 7);
  return !v18;
}

_OWORD *std::__tree<std::__value_type<std::string,llvm::MCSectionGOFF *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::MCSectionGOFF *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::MCSectionGOFF *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL llvm::MCContext::COFFSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  _QWORD v22[2];

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_27;
        }
        goto LABEL_18;
      }
LABEL_27:
      v17 = *((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 4);
      v19 = a2[3];
      v18 = (size_t)a2[4];
      if (v16 == v18 && (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((_QWORD *)a1 + 4))))
      {
        v20 = *((_DWORD *)a1 + 10);
        v21 = *((_DWORD *)a2 + 10);
        if (v20 == v21)
          return *((_DWORD *)a1 + 11) < *((_DWORD *)a2 + 11);
        else
          return v20 < v21;
      }
      else
      {
        v22[0] = v17;
        v22[1] = v16;
        return llvm::StringRef::compare((uint64_t)v22, v19, v18) >> 31;
      }
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  if (v14)
    return v14 < 0;
  else
    return v4 < v6;
}

BOOL llvm::MCContext::WasmSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  _QWORD v20[2];

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_27;
        }
        goto LABEL_18;
      }
LABEL_27:
      v17 = *((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 4);
      v19 = a2[3];
      v18 = (size_t)a2[4];
      if (v16 == v18 && (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((_QWORD *)a1 + 4))))
        return *((_DWORD *)a1 + 10) < *((_DWORD *)a2 + 10);
      v20[0] = v17;
      v20[1] = v16;
      return llvm::StringRef::compare((uint64_t)v20, v19, v18) >> 31;
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_27;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  if (v14)
    return v14 < 0;
  else
    return v4 < v6;
}

uint64_t llvm::MCContext::XCOFFSectionKey::operator<(const void **a1, const void **a2)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;

  v4 = *((unsigned __int8 *)a1 + 28);
  v5 = *((unsigned __int8 *)a2 + 28);
  if (*((_BYTE *)a1 + 28))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 != v5)
      return v4 != 0;
    v7 = *((char *)a2 + 23);
    v8 = *((char *)a1 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    if (v8 >= 0)
      v10 = a1;
    else
      v10 = *a1;
    if (v7 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = (size_t)a2[1];
    if (v7 >= 0)
      v12 = a2;
    else
      v12 = *a2;
    if (v11 >= v9)
      v13 = v9;
    else
      v13 = v11;
    v14 = memcmp(v10, v12, v13);
    v15 = v9 < v11;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      return 1;
    v16 = memcmp(v12, v10, v13);
    v17 = v11 < v9;
    if (v16)
      v17 = v16 < 0;
    if (!v17)
      return *((_DWORD *)a1 + 6) < *((_DWORD *)a2 + 6);
    return 0;
  }
  v19 = *((char *)a2 + 23);
  v20 = *((char *)a1 + 23);
  if (v20 >= 0)
    v21 = *((unsigned __int8 *)a1 + 23);
  else
    v21 = (size_t)a1[1];
  if (v20 >= 0)
    v22 = a1;
  else
    v22 = *a1;
  if (v19 >= 0)
    v23 = *((unsigned __int8 *)a2 + 23);
  else
    v23 = (size_t)a2[1];
  if (v19 >= 0)
    v24 = a2;
  else
    v24 = *a2;
  if (v23 >= v21)
    v25 = v21;
  else
    v25 = v23;
  v26 = memcmp(v22, v24, v25);
  v27 = v21 < v23;
  if (v26)
    v27 = v26 < 0;
  if (v27)
    return 1;
  v28 = memcmp(v24, v22, v25);
  v29 = v23 < v21;
  if (v28)
    v29 = v28 < 0;
  if (v29)
    return 0;
  return *((unsigned __int8 *)a1 + 24) < *((unsigned __int8 *)a2 + 24);
}

void std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1C978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1C978;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char *v19[23];

  v19[22] = *(char **)MEMORY[0x24BDAC8D0];
  llvm::SourceMgr::GetMessage(*a3, **(char ***)(a1 + 8), 0, *(llvm::formatv_object_base ***)(a1 + 16), 0, 0, 0, 0, (uint64_t)&v8);
  *(_OWORD *)a2 = v8;
  v4 = (void **)(a2 + 16);
  if (*(char *)(a2 + 39) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v9;
  *(_QWORD *)(a2 + 32) = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9) = 0;
  *(_QWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 48) = v12;
  v5 = (void **)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v13;
  *(_QWORD *)(a2 + 72) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  v6 = (void **)(a2 + 80);
  if (*(char *)(a2 + 103) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)v15;
  *(_QWORD *)(a2 + 96) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  v7 = *(void **)(a2 + 104);
  if (v7)
  {
    *(_QWORD *)(a2 + 112) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a2 + 104) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 120) = v18;
  __p[1] = 0;
  v18 = 0;
  __p[0] = 0;
  llvm::SmallVectorImpl<llvm::SMFixIt>::operator=(a2 + 128, (uint64_t)v19);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
}

uint64_t llvm::SmallVectorImpl<llvm::SMFixIt>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t i;

  if (a1 == a2)
    return a1;
  v5 = a2 + 16;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      v11 = *(_QWORD *)a1;
      if ((_DWORD)v9)
      {
        v12 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::SMFixIt *,llvm::SMFixIt *,llvm::SMFixIt *>(v4, v4 + 40 * v9, v11);
        v11 = *(_QWORD *)a1;
        LODWORD(v10) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v12 = *(_QWORD *)a1;
      }
      for (i = v11 + 40 * v10; i != v12; i -= 40)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::SMFixIt *,llvm::SMFixIt *,llvm::SMFixIt *>(v4, v4 + 40 * v10, *(_QWORD *)a1);
        goto LABEL_20;
      }
    }
    else
    {
      llvm::SmallVectorImpl<llvm::SMFixIt>::clear((uint64_t *)a1);
      llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::grow(a1, v9);
    }
    v10 = 0;
LABEL_20:
    v13 = *(unsigned int *)(a2 + 8);
    if (v10 != v13)
    {
      v14 = *(_QWORD *)a2 + 40 * v13;
      v15 = *(_QWORD *)a1 + 40 * v10;
      v16 = *(_QWORD *)a2 + 40 * v10;
      do
      {
        *(_OWORD *)v15 = *(_OWORD *)v16;
        v17 = *(_OWORD *)(v16 + 16);
        *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
        *(_OWORD *)(v15 + 16) = v17;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        v16 += 40;
        v15 += 40;
      }
      while (v16 != v14);
    }
LABEL_23:
    *(_DWORD *)(a1 + 8) = v9;
    llvm::SmallVectorImpl<llvm::SMFixIt>::clear((uint64_t *)a2);
    return a1;
  }
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 40 * v7;
    do
    {
      if (v6[v8 - 1] < 0)
        operator delete(*(void **)&v6[v8 - 24]);
      v8 -= 40;
    }
    while (v8);
    v6 = *(char **)a1;
  }
  if (v6 != (char *)(a1 + 16))
    free(v6);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

void llvm::SmallVectorImpl<llvm::SMFixIt>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 40 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0)
        operator delete(*(void **)(v3 + v4 - 24));
      v4 -= 40;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::SMFixIt *,llvm::SMFixIt *,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void **v6;
  __int128 v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0)
        operator delete(*v6);
      v7 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)v6 = v7;
      *(_BYTE *)(v5 + 39) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      a3 += 40;
      v5 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

void llvm::MCDwarfLineTableHeader::tryGetFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  int v15;
  const void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  int v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  uint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  char **v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  char *v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  uint64_t v67;
  unint64_t v68;
  size_t v69;
  const char *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  _BYTE *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  size_t v80;
  const void *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  __int128 v86;
  char v87;
  __int128 v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  __int128 *v93;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[4];
  __int16 v98;
  _QWORD v99[4];
  __int16 v100;
  uint64_t *v101;
  unint64_t v102;
  unsigned int v103;
  _BYTE __dst[24];
  _QWORD v105[2];
  int v106;
  __int128 v107;
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v15 = *(char *)(a1 + 375);
  if (v15 >= 0)
    v16 = (const void *)(a1 + 352);
  else
    v16 = *(const void **)(a1 + 352);
  v18 = *(const char **)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v19 = *(unsigned __int8 *)(a1 + 375);
  if (v15 < 0)
    v19 = *(_QWORD *)(a1 + 360);
  if (v17 == v19 && (!v17 || !memcmp(*(const void **)a2, v16, *(_QWORD *)(a2 + 8))))
  {
    v17 = 0;
    v18 = "";
    *(_QWORD *)a2 = "";
    *(_QWORD *)(a2 + 8) = 0;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    v17 = 0;
    *(_QWORD *)a3 = "<stdin>";
    *(_QWORD *)(a3 + 8) = 7;
    v18 = "";
    *(_QWORD *)a2 = "";
    *(_QWORD *)(a2 + 8) = 0;
  }
  v20 = *(_DWORD *)(a1 + 104);
  if (!v20)
  {
    v21 = *((_BYTE *)a4 + 16);
    *(_BYTE *)(a1 + 449) &= v21;
    *(_BYTE *)(a1 + 450) |= v21;
    *(_BYTE *)(a1 + 448) = *((_BYTE *)a5 + 16);
  }
  if (a6 >= 5)
  {
    v107 = *a4;
    v108 = *((_BYTE *)a4 + 16);
    v22 = *(char *)(a1 + 399);
    v23 = v22 >= 0 ? *(unsigned __int8 *)(a1 + 399) : *(_QWORD *)(a1 + 384);
    if (v23 && v23 == *(_QWORD *)(a3 + 8))
    {
      v24 = v22 >= 0 ? (const void *)(a1 + 376) : *(const void **)(a1 + 376);
      if (!memcmp(v24, *(const void **)a3, v23))
      {
        if (*(_BYTE *)(a1 + 420) && v108)
        {
          if (*(_QWORD *)(a1 + 404) != (_QWORD)v107 || *(_QWORD *)(a1 + 412) != *((_QWORD *)&v107 + 1))
            goto LABEL_24;
        }
        else if ((*(_BYTE *)(a1 + 420) != 0) != (v108 != 0))
        {
          goto LABEL_24;
        }
        *(_BYTE *)(a8 + 8) &= ~1u;
        *(_DWORD *)a8 = 0;
        return;
      }
    }
  }
LABEL_24:
  if (a7)
  {
LABEL_33:
    v93 = a4;
    v34 = (char **)(a1 + 96);
    v35 = a7;
    if (v20 <= a7)
    {
      v36 = a7 + 1;
      if (v20 != (_DWORD)v36)
      {
        v37 = v20;
        if (v20 <= v36)
        {
          if (*(_DWORD *)(a1 + 108) >= v36)
          {
            v42 = *v34;
          }
          else
          {
            *(_QWORD *)__dst = 0;
            v41 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 96, (void *)(a1 + 112), a7 + 1, 72, (uint64_t *)__dst);
            v42 = v41;
            v43 = *(char **)(a1 + 96);
            v44 = *(_DWORD *)(a1 + 104);
            if (v44)
            {
              v45 = &v43[72 * v44];
              v89 = v41;
              v46 = v41;
              do
              {
                v47 = *(_OWORD *)v43;
                *((_QWORD *)v46 + 2) = *((_QWORD *)v43 + 2);
                *(_OWORD *)v46 = v47;
                *((_QWORD *)v43 + 1) = 0;
                *((_QWORD *)v43 + 2) = 0;
                *(_QWORD *)v43 = 0;
                v48 = *(_OWORD *)(v43 + 24);
                v49 = *(_OWORD *)(v43 + 40);
                *(_OWORD *)(v46 + 49) = *(_OWORD *)(v43 + 49);
                *(_OWORD *)(v46 + 40) = v49;
                *(_OWORD *)(v46 + 24) = v48;
                v43 += 72;
                v46 += 72;
              }
              while (v43 != v45);
              v43 = *(char **)(a1 + 96);
              v50 = *(unsigned int *)(a1 + 104);
              if ((_DWORD)v50)
              {
                v51 = 72 * v50;
                do
                {
                  if (v43[v51 - 49] < 0)
                    operator delete(*(void **)&v43[v51 - 72]);
                  v51 -= 72;
                }
                while (v51);
                v43 = *v34;
              }
              v42 = v89;
            }
            v52 = *(_DWORD *)__dst;
            if (v43 != (char *)(a1 + 112))
            {
              v53 = v43;
              v54 = v42;
              free(v53);
              v42 = v54;
            }
            *(_QWORD *)(a1 + 96) = v42;
            *(_DWORD *)(a1 + 108) = v52;
            v37 = *(unsigned int *)(a1 + 104);
            v35 = a7;
          }
          if (v36 != v37)
            bzero(&v42[72 * v37], 72 * ((72 * (v36 - v37) - 72) / 0x48uLL) + 72);
        }
        else
        {
          v38 = 9 * v20;
          v39 = (uint64_t)&(*v34)[72 * v20 - 72];
          v40 = 72 * v36 - 8 * v38;
          do
          {
            if (*(char *)(v39 + 23) < 0)
              operator delete(*(void **)v39);
            v39 -= 72;
            v40 += 72;
          }
          while (v40);
        }
        *(_DWORD *)(a1 + 104) = v36;
      }
    }
    v56 = *v34;
    v57 = (uint64_t)&(*v34)[72 * v35];
    if (*(char *)(v57 + 23) < 0)
    {
      if (*(_QWORD *)(v57 + 8))
        goto LABEL_69;
    }
    else if (*(_BYTE *)(v57 + 23))
    {
LABEL_69:
      getErrorErrorCat();
      *(_QWORD *)__dst = 3;
      *(_QWORD *)&__dst[8] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"file number already allocated", (uint64_t *)__dst, &v96);
      *(_BYTE *)(a8 + 8) |= 1u;
      v58 = v96;
LABEL_89:
      *(_QWORD *)a8 = v58;
      return;
    }
    if (*(unsigned __int8 *)(a1 + 448) != *((unsigned __int8 *)a5 + 16))
    {
      getErrorErrorCat();
      *(_QWORD *)__dst = 3;
      *(_QWORD *)&__dst[8] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"inconsistent use of embedded source", (uint64_t *)__dst, &v95);
      *(_BYTE *)(a8 + 8) |= 1u;
      v58 = v95;
      goto LABEL_89;
    }
    v92 = v35;
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_83:
      v67 = std::__find_impl[abi:nn180100]<std::string *,std::string *,llvm::StringRef,std::__identity>(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16), a2);
      v68 = 0xAAAAAAAAAAAAAAABLL * ((v67 - *(_QWORD *)(a1 + 8)) >> 3);
      if (*(unsigned int *)(a1 + 16) > (unint64_t)v68)
      {
LABEL_100:
        v79 = v68 + 1;
        goto LABEL_101;
      }
      v69 = *(_QWORD *)(a2 + 8);
      if (v69 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_116;
      v70 = *(const char **)a2;
      v91 = 0xAAAAAAAAAAAAAAABLL * ((v67 - *(_QWORD *)(a1 + 8)) >> 3);
      if (v69 >= 0x17)
      {
        v72 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v69 | 7) != 0x17)
          v72 = v69 | 7;
        v73 = v72 + 1;
        v74 = v70;
        v75 = operator new(v72 + 1);
        v70 = v74;
        v71 = v75;
        *(_QWORD *)&__dst[8] = v69;
        *(_QWORD *)&__dst[16] = v73 | 0x8000000000000000;
        *(_QWORD *)__dst = v75;
      }
      else
      {
        __dst[23] = *(_QWORD *)(a2 + 8);
        v71 = __dst;
        if (!v69)
          goto LABEL_97;
      }
      memmove(v71, v70, v69);
LABEL_97:
      v71[v69] = 0;
      v76 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(a1 + 8, (unint64_t)__dst, 1);
      v77 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
      v78 = *(_OWORD *)v76;
      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 16);
      *(_OWORD *)v77 = v78;
      *(_QWORD *)(v76 + 8) = 0;
      *(_QWORD *)(v76 + 16) = 0;
      *(_QWORD *)v76 = 0;
      ++*(_DWORD *)(a1 + 16);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      LODWORD(v68) = v91;
      goto LABEL_100;
    }
    v59 = *(const void **)a3;
    v60 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)&__dst[16] = 0;
    v105[0] = 0;
    *(_QWORD *)__dst = v59;
    *(_QWORD *)&__dst[8] = v60;
    v105[1] = v60;
    v106 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)__dst);
    v61 = v105[0];
    if (v105[0])
    {
      v90 = *(_QWORD *)&__dst[16];
      v62 = *(const void **)a3;
      v63 = *(_QWORD *)(a3 + 8);
      if (v63 >= v64)
        v65 = v64;
      else
        v65 = v63;
      if (v64 == -1)
      {
        v65 = 0;
        v66 = 0;
      }
      else
      {
        v66 = v62;
      }
      *(_QWORD *)a2 = v66;
      *(_QWORD *)(a2 + 8) = v65;
      if (!v65)
      {
        v79 = 0;
        goto LABEL_101;
      }
      *(_QWORD *)a3 = v90;
      *(_QWORD *)(a3 + 8) = v61;
    }
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_83;
    v79 = 0;
LABEL_101:
    v80 = *(_QWORD *)(a3 + 8);
    if (v80 <= 0x7FFFFFFFFFFFFFF7)
    {
      v81 = *(const void **)a3;
      if (v80 >= 0x17)
      {
        v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v80 | 7) != 0x17)
          v83 = v80 | 7;
        v84 = v83 + 1;
        v82 = operator new(v83 + 1);
        *(_QWORD *)&__dst[8] = v80;
        *(_QWORD *)&__dst[16] = v84 | 0x8000000000000000;
        *(_QWORD *)__dst = v82;
      }
      else
      {
        __dst[23] = v80;
        v82 = __dst;
        if (!v80)
          goto LABEL_109;
      }
      memmove(v82, v81, v80);
LABEL_109:
      v82[v80] = 0;
      if (*(char *)(v57 + 23) < 0)
        operator delete(*(void **)v57);
      *(_OWORD *)v57 = *(_OWORD *)__dst;
      *(_QWORD *)(v57 + 16) = *(_QWORD *)&__dst[16];
      v85 = &v56[72 * v92];
      *((_DWORD *)v85 + 6) = v79;
      v86 = *v93;
      v85[44] = *((_BYTE *)v93 + 16);
      *(_OWORD *)(v85 + 28) = v86;
      v87 = *((_BYTE *)v93 + 16);
      *(_BYTE *)(a1 + 449) &= v87;
      *(_BYTE *)(a1 + 450) |= v87;
      v88 = *a5;
      v85[64] = *((_BYTE *)a5 + 16);
      *((_OWORD *)v85 + 3) = v88;
      if (*((_BYTE *)a5 + 16))
        *(_BYTE *)(a1 + 448) = 1;
      *(_BYTE *)(a8 + 8) &= ~1u;
      *(_DWORD *)a8 = a7;
      return;
    }
LABEL_116:
    abort();
  }
  *(_QWORD *)__dst = v105;
  if (v20 <= 1)
    v20 = 1;
  *(_OWORD *)&__dst[8] = xmmword_24AA2ACF0;
  v97[0] = v18;
  v97[1] = v17;
  v97[2] = 0;
  v98 = 1797;
  v26 = *(const void **)a3;
  v25 = *(_QWORD *)(a3 + 8);
  v99[0] = v97;
  v99[2] = v26;
  v99[3] = v25;
  v100 = 1282;
  llvm::Twine::toStringRef((unsigned __int8 *)v99, (uint64_t)__dst);
  v101 = v27;
  v102 = v28;
  v29 = v20;
  v103 = v20;
  v30 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(a1 + 328), v27, v28, &v103);
  v32 = v31;
  if (!v31)
  {
    v33 = *v30;
    *(_BYTE *)(a8 + 8) &= ~1u;
    *(_DWORD *)a8 = *(_DWORD *)(v33 + 8);
  }
  if (*(_QWORD **)__dst != v105)
    free(*(void **)__dst);
  if (v32)
  {
    v20 = *(_DWORD *)(a1 + 104);
    a7 = v29;
    goto LABEL_33;
  }
}

void llvm::MCGenDwarfLabelEntry::Make(_BYTE *a1, uint64_t a2, uint64_t *a3, char **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  char *v17;
  int BufferContainingLoc;
  int LineAndColumn;
  unint64_t TempSymbol;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  int v25;
  unint64_t v26;
  __int16 v27;

  if ((a1[8] & 1) == 0)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 152);
    v10 = (_DWORD)v9 ? *(_QWORD *)(*(_QWORD *)(a2 + 144) + 32 * v9 - 32) : 0;
    v22 = 0;
    *(_QWORD *)&v23 = v10;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v8 + 1608), &v23, &v22))
    {
      if ((*a1 & 4) != 0)
      {
        v12 = (_QWORD *)*((_QWORD *)a1 - 1);
        v11 = v12 + 2;
        v13 = *v12;
        if (*v12)
        {
          v14 = (char *)v12 + 17;
          if (*v11 == 95)
          {
            v11 = v14;
            v15 = v13 - 1;
          }
          else
          {
            v15 = v13;
          }
          goto LABEL_13;
        }
      }
      else
      {
        v11 = 0;
      }
      v15 = 0;
LABEL_13:
      v16 = *(_DWORD *)(v8 + 1604);
      v17 = *a4;
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a3, (unint64_t)v17);
      LineAndColumn = llvm::SourceMgr::getLineAndColumn(a3, v17, BufferContainingLoc);
      *(_QWORD *)&v23 = "tmp";
      v27 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v8, (const llvm::Twine *)&v23, 1);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, TempSymbol, 0);
      v21 = *(_QWORD **)(a2 + 8);
      *(_QWORD *)&v23 = v11;
      *((_QWORD *)&v23 + 1) = v15;
      v24 = v16;
      v25 = LineAndColumn;
      v26 = TempSymbol;
      llvm::MCContext::addMCGenDwarfLabelEntry(v21, &v23);
    }
  }
}

void llvm::MCContext::addMCGenDwarfLabelEntry(_QWORD *a1, _OWORD *a2)
{
  _OWORD *v4;
  unint64_t v5;
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;

  v4 = (_OWORD *)a1[208];
  v5 = a1[209];
  if ((unint64_t)v4 >= v5)
  {
    v8 = a1[207];
    v9 = ((uint64_t)v4 - v8) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      abort();
    v11 = v5 - v8;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a1 + 209), v12);
    else
      v13 = 0;
    v14 = &v13[32 * v9];
    v15 = &v13[32 * v12];
    v16 = a2[1];
    *(_OWORD *)v14 = *a2;
    *((_OWORD *)v14 + 1) = v16;
    v7 = v14 + 32;
    v17 = (char *)a1[208];
    v18 = (char *)a1[207];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)a1[207];
    }
    a1[207] = v14;
    a1[208] = v7;
    a1[209] = v15;
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = a2[1];
    *v4 = *a2;
    v4[1] = v6;
    v7 = v4 + 2;
  }
  a1[208] = v7;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCDwarfFrameInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(88 * a2);
}

void std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t i;

  if (a4)
  {
    std::vector<llvm::MCCFIInstruction>::__vallocate[abi:nn180100](a1, a4);
    for (i = a1[1]; a2 != a3; i += 80)
    {
      std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction&>((uint64_t)(a1 + 2), i, a2);
      a2 += 5;
    }
    a1[1] = i;
  }
}

char *std::vector<llvm::MCCFIInstruction>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(80 * a2);
}

void std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  std::string *v10;
  __int128 v11;

  v5 = *a3;
  *(_OWORD *)(a2 + 12) = *(__int128 *)((char *)a3 + 12);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a3 + 4);
  v6 = (_BYTE *)*((_QWORD *)a3 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    std::vector<char>::__vallocate[abi:nn180100]((_QWORD *)(a2 + 32), v6 - v7);
    v9 = *(char **)(a2 + 40);
    memmove(v9, v7, v8);
    *(_QWORD *)(a2 + 40) = &v9[v8];
  }
  v10 = (std::string *)(a2 + 56);
  if (*((char *)a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a3 + 7), *((_QWORD *)a3 + 8));
  }
  else
  {
    v11 = *(__int128 *)((char *)a3 + 56);
    *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

char *std::vector<char>::__vallocate[abi:nn180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    abort();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<llvm::MCDwarfFrameInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 88;
        v7 = (void **)(v4 - 56);
        std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<llvm::MCCFIInstruction>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::MCCFIInstruction>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = v3;
    operator delete(v3);
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5)
{
  char *v7;
  unint64_t v9;

  v9 = a2;
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v9, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v9, v7, a4);
}

void llvm::MCExpr::print(uint64_t a1)
{
  __asm { BR              X9 }
}

llvm::raw_ostream *sub_24A963100(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  llvm::raw_ostream *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  llvm::raw_ostream *result;
  _BYTE *v55;

  if (**(unsigned __int8 **)(v46 + 16) - 1 > 1)
  {
    v50 = (_BYTE *)*((_QWORD *)v44 + 4);
    if ((unint64_t)v50 >= *((_QWORD *)v44 + 3))
    {
      llvm::raw_ostream::write(v44, 40);
    }
    else
    {
      *((_QWORD *)v44 + 4) = v50 + 1;
      *v50 = v49;
    }
    ((void (*)(_QWORD, llvm::raw_ostream *, uint64_t, _QWORD))llvm::MCExpr::print)(*(_QWORD *)(v46 + 16), v44, v45, 0);
    v51 = (_BYTE *)*((_QWORD *)v44 + 4);
    if ((unint64_t)v51 >= *((_QWORD *)v44 + 3))
    {
      llvm::raw_ostream::write(v44, 41);
    }
    else
    {
      *((_QWORD *)v44 + 4) = v51 + 1;
      *v51 = v47;
    }
  }
  else
  {
    llvm::MCExpr::print();
  }
  v52 = *(_DWORD *)(v46 + 1) & 0xFFFFFF;
  if (v52 <= 0x13)
    __asm { BR              X9 }
  if (**(unsigned __int8 **)(v46 + 24) - 1 < 2)
    JUMPOUT(0x24A9630E8);
  v53 = (_BYTE *)*((_QWORD *)v44 + 4);
  if ((unint64_t)v53 >= *((_QWORD *)v44 + 3))
  {
    llvm::raw_ostream::write(v44, 40);
  }
  else
  {
    *((_QWORD *)v44 + 4) = v53 + 1;
    *v53 = 40;
  }
  result = (llvm::raw_ostream *)((uint64_t (*)(_QWORD, llvm::raw_ostream *, uint64_t, _QWORD))llvm::MCExpr::print)(*(_QWORD *)(v46 + 24), v44, v45, 0);
  v55 = (_BYTE *)*((_QWORD *)v44 + 4);
  if ((unint64_t)v55 >= *((_QWORD *)v44 + 3))
    return llvm::raw_ostream::write(v44, 41);
  *((_QWORD *)v44 + 4) = v55 + 1;
  *v55 = 41;
  return result;
}

char *llvm::MCSymbolRefExpr::getVariantKindName(__int16 a1)
{
  return off_251C1C9B0[(__int16)(a1 - 1)];
}

unint64_t llvm::MCSymbolRefExpr::create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  int v9;

  result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a3 + 184, 24, 3);
  v9 = a2 | (*(unsigned __int8 *)(*(_QWORD *)(a3 + 144) + 18) << 16);
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v9 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t llvm::MCSymbolRefExpr::getVariantKindForName(char *a1, unint64_t a2)
{
  unint64_t v2;
  void **v3;
  int v4;
  uint64_t v5;
  int v11;
  int v12;
  int v36;
  int v37;
  int v57;
  int v58;
  int v71;
  int v72;
  void *v86;
  int v87;
  void *v91;
  int v92;
  void *v102;
  uint64_t v103;
  void *v111;
  uint64_t v112;
  void *v119;
  uint64_t v120;
  void *v124;
  uint64_t v125;
  void *v130;
  uint64_t v131;
  void *v133;
  void *v134;
  void *v137[2];
  unsigned __int8 v138;

  std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(v137, a1, (uint64_t (*)(_QWORD))llvm::toLower, &a1[a2], (uint64_t)llvm::toLower, a2);
  v2 = (unint64_t)v137[1];
  if ((v138 & 0x80u) == 0)
    v3 = v137;
  else
    v3 = (void **)v137[0];
  if ((v138 & 0x80u) == 0)
    v2 = v138;
  switch(v2)
  {
    case 1uLL:
      v4 = *(unsigned __int8 *)v3;
      switch(v4)
      {
        case 'h':
          v5 = 49;
          break;
        case 'l':
          v5 = 48;
          break;
        case 'u':
          v5 = 65;
          break;
        default:
          goto LABEL_486;
      }
      break;
    case 2uLL:
      switch(*(_WORD *)v3)
      {
        case 0x6168:
          v5 = 50;
          break;
        case 0x6569:
          v5 = 123;
          break;
        case 0x6968:
          v5 = 137;
          break;
        case 0x6F6C:
          v5 = 138;
          break;
        default:
          goto LABEL_486;
      }
      break;
    case 3uLL:
      if (*(_WORD *)v3 == 28519 && *((_BYTE *)v3 + 2) == 116)
      {
        v5 = 2;
      }
      else if (*(_WORD *)v3 == 27760 && *((_BYTE *)v3 + 2) == 116)
      {
        v5 = 12;
      }
      else if (*(_WORD *)v3 == 28532 && *((_BYTE *)v3 + 2) == 99)
      {
        v5 = 61;
      }
      else if (*(_WORD *)v3 == 27764 && *((_BYTE *)v3 + 2) == 115)
      {
        v5 = 94;
      }
      else if (*(_WORD *)v3 == 28524 && *((_BYTE *)v3 + 2) == 56)
      {
        v5 = 41;
      }
      else
      {
        v11 = *(unsigned __int16 *)v3;
        v12 = *((unsigned __int8 *)v3 + 2);
        if (v11 != 26984 || v12 != 56)
          goto LABEL_486;
        v5 = 42;
      }
      break;
    case 4uLL:
      switch(*(_DWORD *)v3)
      {
        case 0x70766C74:
          v5 = 20;
          break;
        case 0x65676170:
          v5 = 23;
          break;
        case 0x657A6973:
          v5 = 28;
          break;
        case 0x38736261:
          v5 = 30;
          break;
        case 0x68676968:
          v5 = 51;
          break;
        case 0x656E6F6E:
          v5 = 32;
          break;
        case 0x386F6C68:
          v5 = 43;
          break;
        default:
          goto LABEL_486;
      }
      break;
    case 5uLL:
      if (*(_DWORD *)v3 == 1701995376 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 5;
      }
      else if (*(_DWORD *)v3 == 1735617652 && *((_BYTE *)v3 + 4) == 100)
      {
        v5 = 13;
      }
      else if (*(_DWORD *)v3 == 1819503732 && *((_BYTE *)v3 + 4) == 100)
      {
        v5 = 14;
      }
      else if (*(_DWORD *)v3 == 1718579316 && *((_BYTE *)v3 + 4) == 102)
      {
        v5 = 16;
      }
      else if (*(_DWORD *)v3 == 1701998708 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 151;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *((_BYTE *)v3 + 4) == 97)
      {
        v5 = 52;
      }
      else if (*(_DWORD *)v3 == 1081372519 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 57;
      }
      else if (*(_DWORD *)v3 == 1081372519 && *((_BYTE *)v3 + 4) == 104)
      {
        v5 = 58;
      }
      else if (*(_DWORD *)v3 == 1633906540 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 112;
      }
      else if (*(_DWORD *)v3 == 1080258420 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 62;
      }
      else if (*(_DWORD *)v3 == 1080258420 && *((_BYTE *)v3 + 4) == 104)
      {
        v5 = 63;
      }
      else if (*(_DWORD *)v3 == 1869901678 && *((_BYTE *)v3 + 4) == 99)
      {
        v5 = 113;
      }
      else if (*(_DWORD *)v3 == 1869046887 && *((_BYTE *)v3 + 4) == 116)
      {
        v5 = 119;
      }
      else if (*(_DWORD *)v3 == 1819305063 && *((_BYTE *)v3 + 4) == 116)
      {
        v5 = 121;
      }
      else if (*(_DWORD *)v3 == 1869047145 && *((_BYTE *)v3 + 4) == 116)
      {
        v5 = 124;
      }
      else if (*(_DWORD *)v3 == 1869046892 && *((_BYTE *)v3 + 4) == 116)
      {
        v5 = 120;
      }
      else if (*(_DWORD *)v3 == 1819305068 && *((_BYTE *)v3 + 4) == 116)
      {
        v5 = 122;
      }
      else if (*(_DWORD *)v3 == 1701995123 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 37;
      }
      else if (*(_DWORD *)v3 == 1701995124 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 128;
      }
      else if (*(_DWORD *)v3 == 1701995117 && *((_BYTE *)v3 + 4) == 108)
      {
        v5 = 127;
      }
      else if (*(_DWORD *)v3 == 913073522 && *((_BYTE *)v3 + 4) == 52)
      {
        v5 = 134;
      }
      else if (*(_DWORD *)v3 == 1751081840 && *((_BYTE *)v3 + 4) == 105)
      {
        v5 = 139;
      }
      else
      {
        v36 = *(_DWORD *)v3;
        v37 = *((unsigned __int8 *)v3 + 4);
        if (v36 != 1818190704 || v37 != 111)
          goto LABEL_486;
        v5 = 140;
      }
      break;
    case 6uLL:
      if (*(_DWORD *)v3 == 1919972452 && *((_WORD *)v3 + 2) == 27749)
      {
        v5 = 152;
      }
      else if (*(_DWORD *)v3 == 1869640804 && *((_WORD *)v3 + 2) == 26214)
      {
        v5 = 17;
      }
      else if (*(_DWORD *)v3 == 1869901671 && *((_WORD *)v3 + 2) == 26214)
      {
        v5 = 3;
      }
      else if (*(_DWORD *)v3 == 1920233319 && *((_WORD *)v3 + 2) == 27749)
      {
        v5 = 4;
      }
      else if (*(_DWORD *)v3 == 1869640814 && *((_WORD *)v3 + 2) == 26214)
      {
        v5 = 10;
      }
      else if (*(_DWORD *)v3 == 1819503732 && *((_WORD *)v3 + 2) == 28004)
      {
        v5 = 15;
      }
      else if (*(_DWORD *)v3 == 1919380841 && *((_WORD *)v3 + 2) == 27749)
      {
        v5 = 115;
      }
      else if (*(_DWORD *)v3 == 1869900912 && *((_WORD *)v3 + 2) == 26214)
      {
        v5 = 31;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *((_WORD *)v3 + 2) == 29285)
      {
        v5 = 53;
      }
      else if (*(_DWORD *)v3 == 1081372519 && *((_WORD *)v3 + 2) == 24936)
      {
        v5 = 59;
      }
      else if (*(_DWORD *)v3 == 1080258420 && *((_WORD *)v3 + 2) == 24936)
      {
        v5 = 64;
      }
      else if (*(_DWORD *)v3 == 1836086372 && *((_WORD *)v3 + 2) == 25711)
      {
        v5 = 67;
      }
      else if (*(_DWORD *)v3 == 1818587760 && *((_WORD *)v3 + 2) == 12595)
      {
        v5 = 36;
      }
      else if (*(_DWORD *)v3 == 1819503732 && *((_WORD *)v3 + 2) == 28516)
      {
        v5 = 38;
      }
      else if (*(_DWORD *)v3 == 1920167028 && *((_WORD *)v3 + 2) == 27749)
      {
        v5 = 126;
      }
      else if (*(_DWORD *)v3 == 1601466215 && *((_WORD *)v3 + 2) == 26984)
      {
        v5 = 141;
      }
      else if (*(_DWORD *)v3 == 1601466215 && *((_WORD *)v3 + 2) == 28524)
      {
        v5 = 142;
      }
      else if (*(_DWORD *)v3 == 1601465456 && *((_WORD *)v3 + 2) == 26984)
      {
        v5 = 145;
      }
      else
      {
        v57 = *(_DWORD *)v3;
        v58 = *((unsigned __int16 *)v3 + 2);
        if (v57 != 1601465456 || v58 != 28524)
          goto LABEL_486;
        v5 = 146;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v3 == 1668508788 && *(_DWORD *)((char *)v3 + 3) == 1819042147)
      {
        v5 = 18;
      }
      else if (*(_DWORD *)v3 == 1685286004 && *(_DWORD *)((char *)v3 + 3) == 1668506980)
      {
        v5 = 19;
      }
      else if (*(_DWORD *)v3 == 1701273968 && *(_DWORD *)((char *)v3 + 3) == 1717989221)
      {
        v5 = 24;
      }
      else if (*(_DWORD *)v3 == 1886678887 && *(_DWORD *)((char *)v3 + 3) == 1701273968)
      {
        v5 = 25;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *(_DWORD *)((char *)v3 + 3) == 1634887016)
      {
        v5 = 54;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *(_DWORD *)((char *)v3 + 3) == 1953719656)
      {
        v5 = 55;
      }
      else if (*(_DWORD *)v3 == 1650683764 && *(_DWORD *)((char *)v3 + 3) == 1702060386)
      {
        v5 = 60;
      }
      else if (*(_DWORD *)v3 == 1701998708 && *(_DWORD *)((char *)v3 + 3) == 1816161381)
      {
        v5 = 68;
      }
      else if (*(_DWORD *)v3 == 1701998708 && *(_DWORD *)((char *)v3 + 3) == 1749052517)
      {
        v5 = 69;
      }
      else if (*(_DWORD *)v3 == 1735549300 && *(_DWORD *)((char *)v3 + 3) == 829711719)
      {
        v5 = 34;
      }
      else if (*(_DWORD *)v3 == 1735549300 && *(_DWORD *)((char *)v3 + 3) == 846488935)
      {
        v5 = 35;
      }
      else
      {
        v71 = *(_DWORD *)v3;
        v72 = *(_DWORD *)((char *)v3 + 3);
        if (v71 != 1081372519 || v72 != 1936487488)
          goto LABEL_486;
        v5 = 129;
      }
      break;
    case 8uLL:
      if (*v3 == (void *)0x6C65726370746F67)
      {
        v5 = 6;
      }
      else if (*v3 == (void *)0x66666F7074746F67)
      {
        v5 = 8;
      }
      else if (*v3 == (void *)0x6567617070766C74)
      {
        v5 = 21;
      }
      else if (*v3 == (void *)0x32336C6572636573)
      {
        v5 = 27;
      }
      else if (*v3 == (void *)0x6174736568676968)
      {
        v5 = 56;
      }
      else if (*v3 == (void *)0x6168406C65727074)
      {
        v5 = 70;
      }
      else if (*v3 == (void *)0x6C406C6572707464)
      {
        v5 = 77;
      }
      else if (*v3 == (void *)0x68406C6572707464)
      {
        v5 = 78;
      }
      else if (*v3 == (void *)0x6C6572705F746F67)
      {
        v5 = 33;
      }
      else if (*v3 == (void *)0x6F6C4032336C6572)
      {
        v5 = 132;
      }
      else if (*v3 == (void *)0x69684032336C6572)
      {
        v5 = 133;
      }
      else if (*v3 == (void *)0x6F6C403233736261)
      {
        v5 = 135;
      }
      else if (*v3 == (void *)0x6968403233736261)
      {
        v5 = 136;
      }
      else if (*v3 == (void *)0x69685F66666F7074)
      {
        v5 = 149;
      }
      else
      {
        if (*v3 != (void *)0x6F6C5F66666F7074)
          goto LABEL_486;
        v5 = 150;
      }
      break;
    case 9uLL:
      if (*v3 == (void *)0x666F70746E646E69 && *((_BYTE *)v3 + 8) == 102)
      {
        v5 = 9;
      }
      else if (*v3 == (void *)0x666F70746E746F67 && *((_BYTE *)v3 + 8) == 102)
      {
        v5 = 11;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *((_BYTE *)v3 + 8) == 97)
      {
        v5 = 79;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *((_BYTE *)v3 + 8) == 108)
      {
        v5 = 86;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *((_BYTE *)v3 + 8) == 100)
      {
        v5 = 95;
      }
      else if (*v3 == (void *)0x6C736C7440746F67 && *((_BYTE *)v3 + 8) == 100)
      {
        v5 = 102;
      }
      else if (*v3 == (void *)0x6572637040746F67 && *((_BYTE *)v3 + 8) == 108)
      {
        v5 = 106;
      }
      else if (*v3 == (void *)0x6572637040736C74 && *((_BYTE *)v3 + 8) == 108)
      {
        v5 = 110;
      }
      else if (*v3 == (void *)0x65646E6965707974 && *((_BYTE *)v3 + 8) == 120)
      {
        v5 = 125;
      }
      else if (*v3 == (void *)0x685F66666F746F67 && *((_BYTE *)v3 + 8) == 105)
      {
        v5 = 143;
      }
      else if (*v3 == (void *)0x6C5F66666F746F67 && *((_BYTE *)v3 + 8) == 111)
      {
        v5 = 144;
      }
      else if (*v3 == (void *)0x685F64675F736C74 && *((_BYTE *)v3 + 8) == 105)
      {
        v5 = 147;
      }
      else
      {
        v86 = *v3;
        v87 = *((unsigned __int8 *)v3 + 8);
        if (v86 != (void *)0x6C5F64675F736C74 || v87 != 111)
          goto LABEL_486;
        v5 = 148;
      }
      break;
    case 0xAuLL:
      if (*v3 == (void *)0x6F65676170746F67 && *((_WORD *)v3 + 4) == 26214)
      {
        v5 = 26;
      }
      else if (*v3 == (void *)0x6968406C65727074 && *((_WORD *)v3 + 4) == 26727)
      {
        v5 = 71;
      }
      else
      {
        v91 = *v3;
        v92 = *((unsigned __int16 *)v3 + 4);
        if (v91 != (void *)0x7270746440746F67 || v92 != 27749)
          goto LABEL_486;
        v5 = 90;
      }
      break;
    case 0xBuLL:
      if (*v3 == (void *)0x6567617070766C74 && *(void **)((char *)v3 + 3) == (void *)0x66666F6567617070)
      {
        v5 = 22;
      }
      else if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 3) == (void *)0x6168676968406C65)
      {
        v5 = 72;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 3) == (void *)0x68676968406C6572)
      {
        v5 = 80;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *(void **)((char *)v3 + 3) == (void *)0x6C406C6572707440)
      {
        v5 = 87;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *(void **)((char *)v3 + 3) == (void *)0x68406C6572707440)
      {
        v5 = 88;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *(void **)((char *)v3 + 3) == (void *)0x6C406467736C7440)
      {
        v5 = 96;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *(void **)((char *)v3 + 3) == (void *)0x68406467736C7440)
      {
        v5 = 97;
      }
      else if (*v3 == (void *)0x6C736C7440746F67 && *(void **)((char *)v3 + 3) == (void *)0x6C40646C736C7440)
      {
        v5 = 103;
      }
      else
      {
        v102 = *v3;
        v103 = *(uint64_t *)((char *)v3 + 3);
        if (v102 != (void *)0x6C736C7440746F67 || v103 != 0x6840646C736C7440)
          goto LABEL_486;
        v5 = 104;
      }
      break;
    case 0xCuLL:
      if (*v3 == (void *)0x6968406C65727074 && *((_DWORD *)v3 + 2) == 1919248487)
      {
        v5 = 73;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *((_DWORD *)v3 + 2) == 1634232169)
      {
        v5 = 81;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *((_DWORD *)v3 + 2) == 1634222188)
      {
        v5 = 89;
      }
      else if (*v3 == (void *)0x7270746440746F67 && *((_DWORD *)v3 + 2) == 1816161381)
      {
        v5 = 91;
      }
      else if (*v3 == (void *)0x7270746440746F67 && *((_DWORD *)v3 + 2) == 1749052517)
      {
        v5 = 92;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *((_DWORD *)v3 + 2) == 1634222180)
      {
        v5 = 98;
      }
      else
      {
        v111 = *v3;
        v112 = *((unsigned int *)v3 + 2);
        if (v111 != (void *)0x6C736C7440746F67 || v112 != 1634222180)
          goto LABEL_486;
        v5 = 105;
      }
      break;
    case 0xDuLL:
      if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 5) == (void *)0x6172656867696840)
      {
        v5 = 74;
      }
      else if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 5) == (void *)0x7473656867696840)
      {
        v5 = 75;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 5) == (void *)0x726568676968406CLL)
      {
        v5 = 82;
      }
      else if (*v3 == (void *)0x7270746440746F67 && *(void **)((char *)v3 + 5) == (void *)0x6168406C65727074)
      {
        v5 = 93;
      }
      else if (*v3 == (void *)0x6C65726370746F67 && *(void **)((char *)v3 + 5) == (void *)0x6F6C4032336C6572)
      {
        v5 = 130;
      }
      else
      {
        v119 = *v3;
        v120 = *(uint64_t *)((char *)v3 + 5);
        if (v119 != (void *)0x6C65726370746F67 || v120 != 0x69684032336C6572)
          goto LABEL_486;
        v5 = 131;
      }
      break;
    case 0xEuLL:
      if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 6) == (void *)0x6174736568676968)
      {
        v5 = 76;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 6) == (void *)0x6172656867696840)
      {
        v5 = 83;
      }
      else
      {
        v124 = *v3;
        v125 = *(uint64_t *)((char *)v3 + 6);
        if (v124 != (void *)0x68406C6572707464 || v125 != 0x7473656867696840)
          goto LABEL_486;
        v5 = 84;
      }
      break;
    case 0xFuLL:
      if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 7) == (void *)0x6174736568676968)
      {
        v5 = 85;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *(void **)((char *)v3 + 7) == (void *)0x6C65726370406467)
      {
        v5 = 107;
      }
      else if (*v3 == (void *)0x6C736C7440746F67 && *(void **)((char *)v3 + 7) == (void *)0x6C6572637040646CLL)
      {
        v5 = 108;
      }
      else
      {
        v130 = *v3;
        v131 = *(uint64_t *)((char *)v3 + 7);
        if (v130 != (void *)0x6572707440746F67 || v131 != 0x6C65726370406C65)
          goto LABEL_486;
        v5 = 109;
      }
      break;
    case 0x10uLL:
      v134 = *v3;
      v133 = v3[1];
      if (v134 != (void *)0x6C65726370746F67 || v133 != (void *)0x78616C65726F6E5FLL)
        goto LABEL_486;
      v5 = 7;
      break;
    default:
LABEL_486:
      v5 = 1;
      break;
  }
  if ((char)v138 < 0)
    operator delete(v137[0]);
  return v5;
}

BOOL llvm::MCExpr::evaluateAsAbsolute(uint64_t a1, _QWORD *a2)
{
  int v4;

  if (*(_BYTE *)a1 == 1)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    return 1;
  }
  else
  {
    llvm::MCExpr::evaluateAsRelocatableImpl(a1);
    *a2 = 0;
    return v4 != 0;
  }
}

void llvm::MCExpr::evaluateAsRelocatableImpl(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24A965184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const llvm::MCAsmLayout *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  int64x2_t v25;
  uint64_t v26;
  int v27;
  int64x2_t v28;
  uint64_t v29;
  int v30;

  v28 = 0uLL;
  v30 = 0;
  v29 = 0;
  v25 = 0uLL;
  v27 = 0;
  v26 = 0;
  if (!llvm::MCExpr::evaluateAsRelocatableImpl(*(_QWORD *)(v1 + 16), &v28, v2, v4, v6, v3, v5)
    || (llvm::MCExpr::evaluateAsRelocatableImpl(*(_QWORD *)(v1 + 24), &v25, v2, v4, v6, v3, v5) & 1) == 0)
  {
    v11 = *(unsigned __int8 **)(v1 + 16);
    v13 = *v11;
    v12 = v11 - 8;
    if (v13 != 4)
      return 0;
    v14 = *(_QWORD *)(v1 + 24);
    v15 = v14 - 8;
    if (!v14)
      v15 = 0;
    v16 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
    if (v16 == 12)
    {
      if (v14)
        v20 = v15 + 8;
      else
        v20 = 0;
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v20);
      *(_QWORD *)v0 = 0;
      *(_QWORD *)(v0 + 8) = 0;
      v19 = v21 - 1;
      goto LABEL_8;
    }
    if (v16 != 3)
      return 0;
    v17 = v15 + 8;
    if (v14)
      v18 = v17;
    else
      v18 = 0;
    v19 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v12 + 40))(v12, v18) << 63 >> 63;
LABEL_7:
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
LABEL_8:
    *(_QWORD *)(v0 + 16) = v19;
    *(_DWORD *)(v0 + 24) = 0;
    return 1;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v28), (int32x4_t)vceqzq_s64(v25))))) & 1) == 0)
  {
    v22 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
    switch(v22)
    {
      case 0u:
        v23 = v26 + v29;
        goto LABEL_53;
      case 1u:
        v23 = v26 & v29;
        goto LABEL_53;
      case 2u:
      case 0xAu:
        if (!v26)
          return 0;
        if (v22 == 2)
        {
          v23 = v29 / v26;
LABEL_53:
          *(_QWORD *)v0 = 0;
          *(_QWORD *)(v0 + 8) = 0;
          *(_QWORD *)(v0 + 16) = v23;
          result = 1;
          *(_DWORD *)(v0 + 24) = 0;
          return result;
        }
        v23 = v29 % v26;
LABEL_55:
        if (v22 > 0xC || ((1 << *(_BYTE *)(v1 + 1)) & 0x1338) == 0)
          goto LABEL_53;
LABEL_57:
        if (v23)
          v19 = -1;
        else
          v19 = 0;
        break;
      case 3u:
        v23 = v29 == v26;
        goto LABEL_57;
      case 4u:
        v23 = v29 > v26;
        goto LABEL_57;
      case 5u:
        v23 = v29 >= v26;
        goto LABEL_57;
      case 6u:
        if (v29)
          v24 = v26 == 0;
        else
          v24 = 1;
        goto LABEL_39;
      case 7u:
        v24 = (v29 | v26) == 0;
LABEL_39:
        v23 = !v24;
        goto LABEL_53;
      case 8u:
        v23 = v29 < v26;
        goto LABEL_57;
      case 9u:
        v23 = v29 <= v26;
        goto LABEL_57;
      case 0xBu:
        v23 = v26 * v29;
        goto LABEL_53;
      case 0xCu:
        v23 = v29 != v26;
        goto LABEL_57;
      case 0xDu:
        v23 = v26 | v29;
        goto LABEL_53;
      case 0xEu:
        v23 = v29 | ~v26;
        goto LABEL_53;
      case 0xFu:
        v23 = v29 << v26;
        goto LABEL_53;
      case 0x10u:
        v23 = v29 >> v26;
        goto LABEL_53;
      case 0x11u:
        v23 = (unint64_t)v29 >> v26;
        goto LABEL_53;
      case 0x12u:
        v23 = v29 - v26;
        goto LABEL_53;
      case 0x13u:
        v23 = v26 ^ v29;
        goto LABEL_53;
      default:
        v23 = 0;
        goto LABEL_55;
    }
    goto LABEL_7;
  }
  if ((*(_DWORD *)(v1 + 1) & 0xFFFFFF) == 0)
  {
    v7 = v26;
    v9 = v25.i64[1];
    v8 = v25.i64[0];
    return EvaluateSymbolicAdd(v2, v4, v3, v5, v28.i64, v8, v9, v7, v0);
  }
  if ((*(_DWORD *)(v1 + 1) & 0xFFFFFF) == 0x12)
  {
    v7 = -v26;
    v8 = v25.i64[1];
    v9 = v25.i64[0];
    return EvaluateSymbolicAdd(v2, v4, v3, v5, v28.i64, v8, v9, v7, v0);
  }
  return 0;
}

uint64_t EvaluateSymbolicAdd(uint64_t a1, const llvm::MCAsmLayout *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a7;
  v21 = a6;
  v9 = *a5;
  v18 = a5[1];
  v19 = v9;
  v17 = a5[2] + a8;
  if (a1)
  {
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v19, &v18, &v17);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v19, &v20, &v17);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v21, &v18, &v17);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v21, &v20, &v17);
    v9 = v19;
    a6 = v21;
  }
  if (v9 && a6)
    return 0;
  v14 = v18;
  if (v18)
  {
    if (v20)
      return 0;
  }
  if (!v9)
    v9 = a6;
  v16 = v17;
  if (!v18)
    v14 = v20;
  *(_QWORD *)a9 = v9;
  *(_QWORD *)(a9 + 8) = v14;
  *(_QWORD *)(a9 + 16) = v16;
  *(_DWORD *)(a9 + 24) = 0;
  return 1;
}

void llvm::MCExpr::findAssociatedFragment(llvm::MCExpr *this)
{
  uint64_t v2;

  while (1)
  {
    v2 = *(unsigned __int8 *)this;
    if ((_DWORD)v2 != 3)
      break;
    this = (llvm::MCExpr *)*((_QWORD *)this + 2);
  }
  __asm { BR              X10 }
}

uint64_t sub_24A9657F0()
{
  uint64_t v0;
  uint64_t AssociatedFragment;
  uint64_t result;
  uint64_t v3;

  AssociatedFragment = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v0 + 16));
  result = llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v0 + 24));
  if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment)
  {
    if (result == llvm::MCSymbol::AbsolutePseudoFragment)
    {
      return AssociatedFragment;
    }
    else
    {
      if (AssociatedFragment)
        v3 = AssociatedFragment;
      else
        v3 = result;
      if ((*(_DWORD *)(v0 + 1) & 0xFFFFFF) == 0x12)
        return llvm::MCSymbol::AbsolutePseudoFragment;
      else
        return v3;
    }
  }
  return result;
}

void AttemptToFoldSymbolOffsetDifference(uint64_t a1, const llvm::MCAsmLayout *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const llvm::MCSymbol *v27;
  unint64_t v28;
  const llvm::MCSymbol *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  uint64_t v36;
  unint64_t v37;

  v36 = a1;
  v7 = *a6;
  if (*a5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v16 = *(_QWORD *)(*a5 + 16);
    v17 = *(_QWORD *)(v7 + 16);
    llvm::MCSymbol::getFragment((llvm::MCSymbol *)v16, 1);
    if (v18)
    {
      llvm::MCSymbol::getFragment((llvm::MCSymbol *)v17, 1);
      if (v19)
      {
        if (llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(*(_QWORD *)(a1 + 24), a1, *a5, *a6, a4))
        {
          v35[0] = &v36;
          v35[1] = v16;
          v35[2] = a7;
          v35[3] = a5;
          v35[4] = a6;
          llvm::MCSymbol::getFragment((llvm::MCSymbol *)v16, 1);
          v21 = v20;
          llvm::MCSymbol::getFragment((llvm::MCSymbol *)v17, 1);
          v23 = v22;
          if (v21 == v22
            && (*(_DWORD *)(v16 + 8) & 0x2800 | 0x1000) != 0x1000
            && (*(_DWORD *)(v17 + 8) & 0x2800 | 0x1000) != 0x1000)
          {
            v33 = *(_QWORD *)(v16 + 24) - *(_QWORD *)(v17 + 24);
LABEL_35:
            v34 = *a7;
LABEL_36:
            *a7 = v33 + v34;
LABEL_37:
            AttemptToFoldSymbolOffsetDifference(llvm::MCAssembler const*,llvm::MCAsmLayout const*,llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>> const*,BOOL,llvm::MCSymbolRefExpr const*&,llvm::MCSymbolRefExpr const*&,long long &)::$_0::operator()((uint64_t)v35);
            return;
          }
          v24 = *(_QWORD *)(v21 + 16);
          v25 = *(_QWORD *)(v22 + 16);
          if (a3 || v24 == v25)
          {
            if (a2)
            {
              v26 = *(_QWORD *)(v21 + 16);
              if (llvm::MCAsmLayout::canGetFragmentOffset(a2, (const llvm::MCFragment *)v21)
                && llvm::MCAsmLayout::canGetFragmentOffset(a2, (const llvm::MCFragment *)v23))
              {
                v27 = *(const llvm::MCSymbol **)(*a5 + 16);
                v37 = 0;
                getSymbolOffsetImpl(a2, v27, 1, &v37);
                v28 = v37;
                v29 = *(const llvm::MCSymbol **)(*a6 + 16);
                v37 = 0;
                getSymbolOffsetImpl(a2, v29, 1, &v37);
                *a7 += v28 - v37;
                if (v26 == v25 || !a3)
                  goto LABEL_37;
                v37 = 0;
                v30 = 0;
                if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v26, &v37))v30 = *(_QWORD *)(v37 + 8);
                v37 = 0;
                v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v25, &v37);
                v32 = 0;
                if (v31)
                  v32 = *(_QWORD *)(v37 + 8);
                v33 = v30 - v32;
                goto LABEL_35;
              }
            }
            else if ((*(_DWORD *)(v16 + 8) & 0x2800 | 0x1000) != 0x1000
                   && (*(_DWORD *)(v17 + 8) & 0x2800 | 0x1000) != 0x1000
                   && *(_BYTE *)(v21 + 48) == 1
                   && *(_BYTE *)(v22 + 48) == 1
                   && *(_DWORD *)(v21 + 44) == *(_DWORD *)(v22 + 44)
                   && v22 != v24 + 104)
            {
              v34 = *(_QWORD *)(v16 + 24) - *(_QWORD *)(v17 + 24);
              while (v23 != v21)
              {
                if (*(_BYTE *)(v23 + 48) == 1)
                {
                  v34 += *(_QWORD *)(v23 + 72);
                  v23 = *(_QWORD *)(v23 + 8);
                  if (v23 != v24 + 104)
                    continue;
                }
                return;
              }
              v33 = *a7;
              goto LABEL_36;
            }
          }
        }
      }
    }
  }
}

uint64_t AttemptToFoldSymbolOffsetDifference(llvm::MCAssembler const*,llvm::MCAsmLayout const*,llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>> const*,BOOL,llvm::MCSymbolRefExpr const*&,llvm::MCSymbolRefExpr const*&,long long &)::$_0::operator()(uint64_t a1)
{
  uint64_t result;

  if (llvm::MCAssembler::isThumbFunc(**(llvm::MCAssembler ***)a1, *(const llvm::MCSymbol **)(a1 + 8)))
    **(_QWORD **)(a1 + 16) |= 1uLL;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)a1 + 8) + 224))(*(_QWORD *)(**(_QWORD **)a1 + 8), *(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
    **(_QWORD **)(a1 + 16) |= 1uLL;
  **(_QWORD **)(a1 + 32) = 0;
  **(_QWORD **)(a1 + 24) = 0;
  return result;
}

BOOL llvm::MCAsmLayout::isFragmentValid(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 16);
  v6 = 0;
  v7 = v3;
  return (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 152), &v7, &v6) & 1) != 0&& (v4 = *(_QWORD *)(v6 + 8)) != 0&& *(_DWORD *)(a2 + 40) <= *(_DWORD *)(v4 + 40);
}

BOOL llvm::MCAsmLayout::canGetFragmentOffset(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = *((_QWORD *)a2 + 2);
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 19, &v6)[1];
  if (!v3)
  {
    v4 = v6 + 112;
    return *(unsigned __int8 *)(*(_QWORD *)v4 + 49) == 0;
  }
  if (*((_DWORD *)a2 + 10) > *(_DWORD *)(v3 + 40))
  {
    v4 = v3 + 8;
    return *(unsigned __int8 *)(*(_QWORD *)v4 + 49) == 0;
  }
  return 1;
}

BOOL llvm::MCAsmLayout::ensureValid(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v4;
  llvm::MCFragment **v5;
  llvm::MCFragment *v6;
  _BOOL8 result;
  uint64_t v8;

  v8 = *((_QWORD *)a2 + 2);
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 19, &v8)[1];
  if (v4)
    v5 = (llvm::MCFragment **)(v4 + 8);
  else
    v5 = (llvm::MCFragment **)(v8 + 112);
  v6 = *v5;
  for (result = llvm::MCAsmLayout::isFragmentValid((uint64_t)this, (uint64_t)a2);
        !result;
        result = llvm::MCAsmLayout::isFragmentValid((uint64_t)this, (uint64_t)a2))
  {
    llvm::MCAsmLayout::layoutFragment(this, v6);
    v6 = (llvm::MCFragment *)*((_QWORD *)v6 + 1);
  }
  return result;
}

BOOL getSymbolOffsetImpl(const llvm::MCAsmLayout *a1, const llvm::MCSymbol *a2, _BOOL8 a3, unint64_t *a4)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  const llvm::MCFragment *v11;
  const llvm::MCFragment *v12;
  uint64_t Name;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  unint64_t v25[5];

  v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 0x3800) != 0x1000)
  {
    llvm::MCSymbol::getFragment(a2, 1);
    if (v10)
    {
      a3 = 1;
      llvm::MCSymbol::getFragment(a2, 1);
      v12 = v11;
      llvm::MCAsmLayout::ensureValid(a1, v11);
      *a4 = *((_QWORD *)a2 + 3) + *((_QWORD *)v12 + 4);
      return a3;
    }
    if (!a3)
      return a3;
    Name = llvm::MCSymbol::getName(a2);
    v24 = 1283;
    v16 = "unable to evaluate offset to undefined symbol '";
LABEL_17:
    v23[0] = (uint64_t)v16;
    v23[2] = Name;
    v23[3] = v15;
    v21 = "'";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm *)v25, (const llvm::Twine *)1);
  }
  v17 = 0;
  v18 = 0;
  v20 = 0;
  v19 = 0;
  *((_DWORD *)a2 + 2) = v8 | 4;
  if ((llvm::MCExpr::evaluateAsRelocatableImpl(*((_QWORD *)a2 + 3), &v17, *(_QWORD *)a1, a1, 0, 0, 1) & 1) == 0)
  {
    Name = llvm::MCSymbol::getName(a2);
    v24 = 1283;
    v16 = "unable to evaluate offset for variable '";
    goto LABEL_17;
  }
  v9 = v19;
  if (v17)
  {
    v25[0] = 0;
    if (!getSymbolOffsetImpl(a1, *(const llvm::MCSymbol **)(v17 + 16), a3, v25))
      return 0;
    v9 += v25[0];
  }
  if (v18)
  {
    v25[0] = 0;
    if (getSymbolOffsetImpl(a1, *(const llvm::MCSymbol **)(v18 + 16), a3, v25))
    {
      v9 -= v25[0];
      goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  *a4 = v9;
  return 1;
}

uint64_t llvm::MCSymbol::getName(llvm::MCSymbol *this)
{
  if ((*(_BYTE *)this & 4) != 0)
    return *((_QWORD *)this - 1) + 16;
  else
    return 0;
}

uint64_t llvm::MCFragment::destroy(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (_QWORD *)this;
  switch(*(_BYTE *)(this + 48))
  {
    case 0:
    case 3:
    case 4:
    case 6:
    case 0xA:
    case 0xB:
    case 0xF:
      goto LABEL_28;
    case 1:
      v3 = *(_QWORD **)(this + 120);
      if (v3 != v1 + 17)
        free(v3);
      goto LABEL_25;
    case 2:
    case 9:
      goto LABEL_25;
    case 5:
      v4 = *(_QWORD **)(this + 152);
      if (v4 != v1 + 21)
        free(v4);
      v5 = (_QWORD *)v1[12];
      if (v5 != v1 + 14)
        free(v5);
      goto LABEL_25;
    case 7:
      v6 = *(_QWORD **)(this + 96);
      if (v6 != v1 + 14)
        free(v6);
      goto LABEL_25;
    case 8:
    case 0xE:
      v2 = *(_QWORD **)(this + 96);
      if (v2 != v1 + 14)
        free(v2);
      goto LABEL_25;
    case 0xC:
      v7 = *(_QWORD **)(this + 80);
      v8 = v1 + 13;
      goto LABEL_26;
    case 0xD:
      v9 = *(_QWORD **)(this + 280);
      if (v9 != v1 + 38)
        free(v9);
      v10 = (_QWORD *)v1[29];
      if (v10 != v1 + 31)
        free(v10);
      v11 = (_QWORD *)v1[15];
      if (v11 != v1 + 17)
        free(v11);
LABEL_25:
      v7 = (_QWORD *)v1[8];
      v8 = v1 + 11;
LABEL_26:
      if (v7 != v8)
        free(v7);
      goto LABEL_28;
    default:
      if (*(unsigned __int8 *)(this + 48) == 255)
LABEL_28:
        JUMPOUT(0x24BD1B3A4);
      return this;
  }
}

unint64_t llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  int v8;
  llvm::MCContext *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t MachOSection;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unint64_t result;
  uint64_t *v20;
  uint64_t v21;
  size_t v22;
  const char **v23;
  uint64_t v24;
  size_t v25;
  const char **v26;
  uint64_t v27;
  size_t v28;
  const char **v29;
  uint64_t v30;
  size_t v31;
  const char **v32;
  uint64_t v33;
  size_t v34;
  const char **v35;
  uint64_t v36;
  size_t v37;
  const char **v38;
  uint64_t v39;
  size_t v40;
  const char **v41;
  uint64_t v42;
  size_t v43;
  const char **v44;
  uint64_t v45;
  size_t v46;
  const char **v47;
  uint64_t v48;
  size_t v49;

  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 57) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__eh_frame", (llvm::formatv_object_base *)0xA, 1744830475, 0, 4, 0);
  v4 = *((_DWORD *)a2 + 9);
  v5 = v4 > 0x21;
  v6 = (1 << v4) & 0x3F0000888;
  if (!v5 && v6 != 0)
  {
    v8 = *((_DWORD *)a2 + 6);
    if (v8 == 5 || v8 == 3)
      *((_BYTE *)this + 9) = 1;
  }
  v9 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v10 = *((_QWORD *)v9 + 256);
  if (!v10 || (v11 = *(_DWORD *)(v10 + 4), v11 == 2))
  {
    LOBYTE(v11) = *((_DWORD *)a2 + 7) == 24 || *((_BYTE *)this + 9) != 0;
    goto LABEL_16;
  }
  if (v11 == 1)
  {
LABEL_16:
    *((_BYTE *)this + 10) = v11;
    goto LABEL_17;
  }
  if (!v11)
    *((_BYTE *)this + 10) = 0;
LABEL_17:
  *((_DWORD *)this + 3) = 16;
  *((_QWORD *)this + 3) = llvm::MCContext::getMachOSection(v9, (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__text", (llvm::formatv_object_base *)6, 0x80000000, 0, 2, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__data", (llvm::formatv_object_base *)6, 0, 0, 19, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 52) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__thread_data", (llvm::formatv_object_base *)0xD, 17, 0, 19, 0);
  *((_QWORD *)this + 53) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__thread_bss", (llvm::formatv_object_base *)0xC, 18, 0, 12, 0);
  *((_QWORD *)this + 67) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__thread_vars", (llvm::formatv_object_base *)0xD, 19, 0, 19, 0);
  *((_QWORD *)this + 68) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__thread_init", (llvm::formatv_object_base *)0xD, 21, 0, 19, 0);
  *((_QWORD *)this + 69) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__cstring", (llvm::formatv_object_base *)9, 2, 0, 5, 0);
  *((_QWORD *)this + 70) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__ustring", (llvm::formatv_object_base *)9, 0, 0, 6, 0);
  *((_QWORD *)this + 78) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__literal4", (llvm::formatv_object_base *)0xA, 3, 0, 8, 0);
  *((_QWORD *)this + 79) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__literal8", (llvm::formatv_object_base *)0xA, 4, 0, 9, 0);
  *((_QWORD *)this + 80) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__literal16", (llvm::formatv_object_base *)0xB, 14, 0, 10, 0);
  *((_QWORD *)this + 6) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__const", (llvm::formatv_object_base *)7, 0, 0, 4, 0);
  v12 = *((_DWORD *)a2 + 6);
  MachOSection = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__const", (llvm::formatv_object_base *)7, 0, 0, 20, 0);
  *((_QWORD *)this + 73) = MachOSection;
  if ((v12 & 0xFFFFFFFD) == 0x15)
  {
    *((_QWORD *)this + 71) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__textcoal_nt", (llvm::formatv_object_base *)0xD, -2147483637, 0, 2, 0);
    *((_QWORD *)this + 72) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__const_coal", (llvm::formatv_object_base *)0xC, 11, 0, 4, 0);
    MachOSection = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__datacoal_nt", (llvm::formatv_object_base *)0xD, 11, 0, 19, 0);
    v14 = MachOSection;
  }
  else
  {
    v14 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 71) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 72) = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 74) = v14;
  *((_QWORD *)this + 75) = MachOSection;
  *((_QWORD *)this + 76) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__common", (llvm::formatv_object_base *)8, 1, 0, 15, 0);
  *((_QWORD *)this + 77) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__bss", (llvm::formatv_object_base *)5, 1, 0, 15, 0);
  *((_QWORD *)this + 81) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__la_symbol_ptr", (llvm::formatv_object_base *)0xF, 7, 0, 0, 0);
  *((_QWORD *)this + 82) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__nl_symbol_ptr", (llvm::formatv_object_base *)0xF, 6, 0, 0, 0);
  *((_QWORD *)this + 83) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__thread_ptr", (llvm::formatv_object_base *)0xC, 20, 0, 0, 0);
  *((_QWORD *)this + 84) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (llvm::formatv_object_base *)"__llvm_addrsig", (llvm::formatv_object_base *)0xE, 0, 0, 19, 0);
  *((_QWORD *)this + 7) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (llvm::formatv_object_base *)"__gcc_except_tab", (llvm::formatv_object_base *)0x10, 0, 0, 20, 0);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  v15 = *((_DWORD *)a2 + 9);
  if (v15 > 0x21 || ((1 << v15) & 0x3F0000888) == 0)
    goto LABEL_34;
  v16 = *((_DWORD *)a2 + 6);
  if (v16 != 3 && v16 != 5 && *((_DWORD *)a2 + 7) != 24)
  {
    if ((v15 & 0xFFFFFFF7) != 3)
      goto LABEL_28;
    if (llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 6, 0))
    {
      v15 = *((_DWORD *)a2 + 9);
LABEL_28:
      if (v15 != 28 && v15 != 7 || (*((_DWORD *)a2 + 6) - 37) > 1)
        goto LABEL_34;
    }
  }
  *((_QWORD *)this + 8) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LD", 4uLL, (llvm::formatv_object_base *)"__compact_unwind", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 4, 0);
  v17 = *((_DWORD *)a2 + 6);
  if ((v17 - 37) < 2)
  {
LABEL_32:
    v18 = 0x4000000;
LABEL_33:
    *((_DWORD *)this + 4) = v18;
    goto LABEL_34;
  }
  v18 = 50331648;
  if (v17 > 4)
  {
    if (v17 == 5)
      goto LABEL_33;
    if (v17 == 35)
      goto LABEL_32;
  }
  else
  {
    if (v17 == 1)
      goto LABEL_32;
    if (v17 == 3)
      goto LABEL_33;
  }
LABEL_34:
  *((_QWORD *)this + 23) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_names", (llvm::formatv_object_base *)0xD, 0x2000000, 0, 0, (llvm::formatv_object_base *)"debug_names_begin");
  *((_QWORD *)this + 24) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__apple_names", (llvm::formatv_object_base *)0xD, 0x2000000, 0, 0, (llvm::formatv_object_base *)"names_begin");
  *((_QWORD *)this + 25) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__apple_objc", (llvm::formatv_object_base *)0xC, 0x2000000, 0, 0, (llvm::formatv_object_base *)"objc_begin");
  *((_QWORD *)this + 26) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__apple_namespac", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, (llvm::formatv_object_base *)"namespac_begin");
  *((_QWORD *)this + 27) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__apple_types", (llvm::formatv_object_base *)0xD, 0x2000000, 0, 0, (llvm::formatv_object_base *)"types_begin");
  *((_QWORD *)this + 47) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__swift_ast", (llvm::formatv_object_base *)0xB, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_abbrev", (llvm::formatv_object_base *)0xE, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_abbrev");
  *((_QWORD *)this + 10) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_info", (llvm::formatv_object_base *)0xC, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_info");
  *((_QWORD *)this + 11) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_line", (llvm::formatv_object_base *)0xC, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_line");
  *((_QWORD *)this + 12) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_line_str", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_line_str");
  *((_QWORD *)this + 13) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_frame", (llvm::formatv_object_base *)0xD, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 22) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_pubnames", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 14) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_pubtypes", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 45) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_gnu_pubn", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 46) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_gnu_pubt", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 16) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_str", (llvm::formatv_object_base *)0xB, 0x2000000, 0, 0, (llvm::formatv_object_base *)"info_string");
  *((_QWORD *)this + 37) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_str_offs", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_str_off");
  *((_QWORD *)this + 38) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_addr", (llvm::formatv_object_base *)0xC, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_info");
  *((_QWORD *)this + 17) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_loc", (llvm::formatv_object_base *)0xB, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_debug_loc");
  *((_QWORD *)this + 40) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_loclists", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, (llvm::formatv_object_base *)"section_debug_loc");
  *((_QWORD *)this + 18) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_aranges", (llvm::formatv_object_base *)0xF, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 19) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_ranges", (llvm::formatv_object_base *)0xE, 0x2000000, 0, 0, (llvm::formatv_object_base *)"debug_range");
  *((_QWORD *)this + 39) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_rnglists", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, (llvm::formatv_object_base *)"debug_range");
  *((_QWORD *)this + 20) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_macinfo", (llvm::formatv_object_base *)0xF, 0x2000000, 0, 0, (llvm::formatv_object_base *)"debug_macinfo");
  *((_QWORD *)this + 21) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_macro", (llvm::formatv_object_base *)0xD, 0x2000000, 0, 0, (llvm::formatv_object_base *)"debug_macro");
  *((_QWORD *)this + 15) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_inlined", (llvm::formatv_object_base *)0xF, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 43) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_cu_index", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 44) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (llvm::formatv_object_base *)"__debug_tu_index", (llvm::formatv_object_base *)0x10, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 54) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LLVM_STACKMAPS", 0x10uLL, (llvm::formatv_object_base *)"__llvm_stackmaps", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
  *((_QWORD *)this + 55) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LLVM_FAULTMAPS", 0x10uLL, (llvm::formatv_object_base *)"__llvm_faultmaps", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
  result = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LLVM", 6uLL, (llvm::formatv_object_base *)"__remarks", (llvm::formatv_object_base *)9, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 56) = result;
  v20 = (uint64_t *)*((_QWORD *)this + 108);
  if (v20[2])
  {
    v21 = v20[1];
    if (v21)
      v22 = strlen((const char *)v20[1]);
    else
      v22 = 0;
    *((_QWORD *)this + 97) = llvm::MCContext::getMachOSection((llvm::MCContext *)v20, v21, v22, (llvm::formatv_object_base *)"__swift5_fieldmd", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v23 = (const char **)*((_QWORD *)this + 108);
    v24 = (uint64_t)v23[1];
    if (v24)
      v25 = strlen(v23[1]);
    else
      v25 = 0;
    *((_QWORD *)this + 98) = llvm::MCContext::getMachOSection((llvm::MCContext *)v23, v24, v25, (llvm::formatv_object_base *)"__swift5_assocty", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v26 = (const char **)*((_QWORD *)this + 108);
    v27 = (uint64_t)v26[1];
    if (v27)
      v28 = strlen(v26[1]);
    else
      v28 = 0;
    *((_QWORD *)this + 99) = llvm::MCContext::getMachOSection((llvm::MCContext *)v26, v27, v28, (llvm::formatv_object_base *)"__swift5_builtin", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v29 = (const char **)*((_QWORD *)this + 108);
    v30 = (uint64_t)v29[1];
    if (v30)
      v31 = strlen(v29[1]);
    else
      v31 = 0;
    *((_QWORD *)this + 100) = llvm::MCContext::getMachOSection((llvm::MCContext *)v29, v30, v31, (llvm::formatv_object_base *)"__swift5_capture", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v32 = (const char **)*((_QWORD *)this + 108);
    v33 = (uint64_t)v32[1];
    if (v33)
      v34 = strlen(v32[1]);
    else
      v34 = 0;
    *((_QWORD *)this + 101) = llvm::MCContext::getMachOSection((llvm::MCContext *)v32, v33, v34, (llvm::formatv_object_base *)"__swift5_typeref", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v35 = (const char **)*((_QWORD *)this + 108);
    v36 = (uint64_t)v35[1];
    if (v36)
      v37 = strlen(v35[1]);
    else
      v37 = 0;
    *((_QWORD *)this + 102) = llvm::MCContext::getMachOSection((llvm::MCContext *)v35, v36, v37, (llvm::formatv_object_base *)"__swift5_reflstr", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v38 = (const char **)*((_QWORD *)this + 108);
    v39 = (uint64_t)v38[1];
    if (v39)
      v40 = strlen(v38[1]);
    else
      v40 = 0;
    *((_QWORD *)this + 103) = llvm::MCContext::getMachOSection((llvm::MCContext *)v38, v39, v40, (llvm::formatv_object_base *)"__swift5_proto", (llvm::formatv_object_base *)0xE, 0, 0, 0, 0);
    v41 = (const char **)*((_QWORD *)this + 108);
    v42 = (uint64_t)v41[1];
    if (v42)
      v43 = strlen(v41[1]);
    else
      v43 = 0;
    *((_QWORD *)this + 104) = llvm::MCContext::getMachOSection((llvm::MCContext *)v41, v42, v43, (llvm::formatv_object_base *)"__swift5_protos", (llvm::formatv_object_base *)0xF, 0, 0, 0, 0);
    v44 = (const char **)*((_QWORD *)this + 108);
    v45 = (uint64_t)v44[1];
    if (v45)
      v46 = strlen(v44[1]);
    else
      v46 = 0;
    *((_QWORD *)this + 105) = llvm::MCContext::getMachOSection((llvm::MCContext *)v44, v45, v46, (llvm::formatv_object_base *)"__swift5_acfuncs", (llvm::formatv_object_base *)0x10, 0, 0, 0, 0);
    v47 = (const char **)*((_QWORD *)this + 108);
    v48 = (uint64_t)v47[1];
    if (v48)
      v49 = strlen(v47[1]);
    else
      v49 = 0;
    result = llvm::MCContext::getMachOSection((llvm::MCContext *)v47, v48, v49, (llvm::formatv_object_base *)"__swift5_mpenum", (llvm::formatv_object_base *)0xF, 0, 0, 0, 0);
    *((_QWORD *)this + 106) = result;
  }
  *((_QWORD *)this + 51) = *((_QWORD *)this + 67);
  return result;
}

unint64_t llvm::MCObjectFileInfo::initELFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2, int a3)
{
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  llvm::MCContext *v12;
  int v13;
  llvm::MCContext *v14;
  llvm::MCContext *v15;
  llvm::MCContext *v16;
  llvm::MCContext *v17;
  llvm::MCContext *v18;
  llvm::MCContext *v19;
  llvm::MCContext *v20;
  llvm::MCContext *v21;
  llvm::MCContext *v22;
  llvm::MCContext *v23;
  llvm::MCContext *v24;
  int v25;
  llvm::MCContext *v26;
  llvm::MCContext *v27;
  llvm::MCContext *v28;
  llvm::MCContext *v29;
  llvm::MCContext *v30;
  llvm::MCContext *v31;
  llvm::MCContext *v32;
  llvm::MCContext *v33;
  llvm::MCContext *v34;
  llvm::MCContext *v35;
  llvm::MCContext *v36;
  llvm::MCContext *v37;
  llvm::MCContext *v38;
  llvm::MCContext *v39;
  llvm::MCContext *v40;
  llvm::MCContext *v41;
  llvm::MCContext *v42;
  llvm::MCContext *v43;
  llvm::MCContext *v44;
  llvm::MCContext *v45;
  llvm::MCContext *v46;
  llvm::MCContext *v47;
  llvm::MCContext *v48;
  llvm::MCContext *v49;
  llvm::MCContext *v50;
  llvm::MCContext *v51;
  llvm::MCContext *v52;
  llvm::MCContext *v53;
  llvm::MCContext *v54;
  llvm::MCContext *v55;
  llvm::MCContext *v56;
  llvm::MCContext *v57;
  llvm::MCContext *v58;
  llvm::MCContext *v59;
  llvm::MCContext *v60;
  llvm::MCContext *v61;
  llvm::MCContext *v62;
  llvm::MCContext *v63;
  llvm::MCContext *v64;
  llvm::MCContext *v65;
  llvm::MCContext *v66;
  llvm::MCContext *v67;
  llvm::MCContext *v68;
  llvm::MCContext *v69;
  unint64_t result;
  llvm::formatv_object_base *v71[4];
  __int16 v72;
  llvm::formatv_object_base *v73[4];
  __int16 v74;

  v5 = *((_DWORD *)a2 + 6);
  v6 = 12;
  switch(v5)
  {
    case 3:
    case 4:
    case 23:
    case 24:
      goto LABEL_2;
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
      goto LABEL_14;
    case 8:
    case 9:
      goto LABEL_16;
    case 12:
      v6 = 16 * *((unsigned __int8 *)this + 856);
      goto LABEL_16;
    case 16:
    case 17:
    case 18:
    case 19:
      if (*((_BYTE *)this + 856))
        v8 = a3 == 0;
      else
        v8 = 0;
      if (v8)
        goto LABEL_14;
      v7 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 108) + 144) + 8) == 4;
      v6 = 11;
      goto LABEL_8;
    default:
      if (v5 == 38)
      {
LABEL_2:
        v7 = a3 == 0;
        v6 = 27;
LABEL_8:
        if (!v7)
          ++v6;
      }
      else if (v5 == 40)
      {
        v6 = 11;
      }
      else
      {
LABEL_14:
        v6 = 27;
      }
LABEL_16:
      *((_DWORD *)this + 3) = v6;
      v9 = *((_DWORD *)a2 + 9);
      if (v5 == 38)
        v10 = 2;
      else
        v10 = 3;
      if (v5 == 38)
        v11 = 1879048193;
      else
        v11 = 1;
      v12 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".bss";
      v72 = 259;
      v74 = 257;
      if (v9 == 14)
        v13 = v10;
      else
        v13 = 2;
      *((_QWORD *)this + 5) = llvm::MCContext::getELFSection(v12, v71, 8, 3, 0, v73, 0, -1, 0);
      v14 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".text";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 3) = llvm::MCContext::getELFSection(v14, v71, 1, 6, 0, v73, 0, -1, 0);
      v15 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".data";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 4) = llvm::MCContext::getELFSection(v15, v71, 1, 3, 0, v73, 0, -1, 0);
      v16 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".rodata";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 6) = llvm::MCContext::getELFSection(v16, v71, 1, 2, 0, v73, 0, -1, 0);
      v17 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".tdata";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 52) = llvm::MCContext::getELFSection(v17, v71, 1, 1027, 0, v73, 0, -1, 0);
      v18 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".tbss";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 53) = llvm::MCContext::getELFSection(v18, v71, 8, 1027, 0, v73, 0, -1, 0);
      v19 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".data.rel.ro";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 62) = llvm::MCContext::getELFSection(v19, v71, 1, 3, 0, v73, 0, -1, 0);
      v20 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".rodata.cst4";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 63) = llvm::MCContext::getELFSection(v20, v71, 1, 18, 4, v73, 0, -1, 0);
      v21 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".rodata.cst8";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 64) = llvm::MCContext::getELFSection(v21, v71, 1, 18, 8, v73, 0, -1, 0);
      v22 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".rodata.cst16";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 65) = llvm::MCContext::getELFSection(v22, v71, 1, 18, 16, v73, 0, -1, 0);
      v23 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".rodata.cst32";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 66) = llvm::MCContext::getELFSection(v23, v71, 1, 18, 32, v73, 0, -1, 0);
      v24 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".gcc_except_table";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 7) = llvm::MCContext::getELFSection(v24, v71, 1, 2, 0, v73, 0, -1, 0);
      *((_QWORD *)this + 48) = 0;
      *((_QWORD *)this + 49) = 0;
      if ((*((_DWORD *)a2 + 6) & 0xFFFFFFFC) == 0x10)
        v25 = 1879048222;
      else
        v25 = 1;
      v26 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_abbrev";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 9) = llvm::MCContext::getELFSection(v26, v71, v25, 0, 0, v73, 0, -1, 0);
      v27 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_info";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 10) = llvm::MCContext::getELFSection(v27, v71, v25, 0, 0, v73, 0, -1, 0);
      v28 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_line";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 11) = llvm::MCContext::getELFSection(v28, v71, v25, 0, 0, v73, 0, -1, 0);
      v29 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_line_str";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 12) = llvm::MCContext::getELFSection(v29, v71, v25, 48, 1, v73, 0, -1, 0);
      v30 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_frame";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 13) = llvm::MCContext::getELFSection(v30, v71, v25, 0, 0, v73, 0, -1, 0);
      v31 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_pubnames";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 22) = llvm::MCContext::getELFSection(v31, v71, v25, 0, 0, v73, 0, -1, 0);
      v32 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_pubtypes";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 14) = llvm::MCContext::getELFSection(v32, v71, v25, 0, 0, v73, 0, -1, 0);
      v33 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_gnu_pubnames";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 45) = llvm::MCContext::getELFSection(v33, v71, v25, 0, 0, v73, 0, -1, 0);
      v34 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_gnu_pubtypes";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 46) = llvm::MCContext::getELFSection(v34, v71, v25, 0, 0, v73, 0, -1, 0);
      v35 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_str";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 16) = llvm::MCContext::getELFSection(v35, v71, v25, 48, 1, v73, 0, -1, 0);
      v36 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_loc";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 17) = llvm::MCContext::getELFSection(v36, v71, v25, 0, 0, v73, 0, -1, 0);
      v37 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_aranges";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 18) = llvm::MCContext::getELFSection(v37, v71, v25, 0, 0, v73, 0, -1, 0);
      v38 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_ranges";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 19) = llvm::MCContext::getELFSection(v38, v71, v25, 0, 0, v73, 0, -1, 0);
      v39 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_macinfo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 20) = llvm::MCContext::getELFSection(v39, v71, v25, 0, 0, v73, 0, -1, 0);
      v40 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_macro";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 21) = llvm::MCContext::getELFSection(v40, v71, v25, 0, 0, v73, 0, -1, 0);
      v41 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_names";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 23) = llvm::MCContext::getELFSection(v41, v71, 1, 0, 0, v73, 0, -1, 0);
      v42 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".apple_names";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 24) = llvm::MCContext::getELFSection(v42, v71, 1, 0, 0, v73, 0, -1, 0);
      v43 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".apple_objc";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 25) = llvm::MCContext::getELFSection(v43, v71, 1, 0, 0, v73, 0, -1, 0);
      v44 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".apple_namespaces";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 26) = llvm::MCContext::getELFSection(v44, v71, 1, 0, 0, v73, 0, -1, 0);
      v45 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".apple_types";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 27) = llvm::MCContext::getELFSection(v45, v71, 1, 0, 0, v73, 0, -1, 0);
      v46 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_str_offsets";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 37) = llvm::MCContext::getELFSection(v46, v71, v25, 0, 0, v73, 0, -1, 0);
      v47 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_addr";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 38) = llvm::MCContext::getELFSection(v47, v71, v25, 0, 0, v73, 0, -1, 0);
      v48 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_rnglists";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 39) = llvm::MCContext::getELFSection(v48, v71, v25, 0, 0, v73, 0, -1, 0);
      v49 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_loclists";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 40) = llvm::MCContext::getELFSection(v49, v71, v25, 0, 0, v73, 0, -1, 0);
      v50 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_info.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 28) = llvm::MCContext::getELFSection(v50, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v51 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_types.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 29) = llvm::MCContext::getELFSection(v51, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v52 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_abbrev.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 30) = llvm::MCContext::getELFSection(v52, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v53 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_str.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 31) = llvm::MCContext::getELFSection(v53, v71, v25, -2147483600, 1, v73, 0, -1, 0);
      v54 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_line.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 32) = llvm::MCContext::getELFSection(v54, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v55 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_loc.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 33) = llvm::MCContext::getELFSection(v55, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v56 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_str_offsets.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 34) = llvm::MCContext::getELFSection(v56, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v57 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_rnglists.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 41) = llvm::MCContext::getELFSection(v57, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v58 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_macinfo.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 35) = llvm::MCContext::getELFSection(v58, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v59 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_macro.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 36) = llvm::MCContext::getELFSection(v59, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v60 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_loclists.dwo";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 42) = llvm::MCContext::getELFSection(v60, v71, v25, 0x80000000, 0, v73, 0, -1, 0);
      v61 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_cu_index";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 43) = llvm::MCContext::getELFSection(v61, v71, v25, 0, 0, v73, 0, -1, 0);
      v62 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".debug_tu_index";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 44) = llvm::MCContext::getELFSection(v62, v71, v25, 0, 0, v73, 0, -1, 0);
      v63 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".llvm_stackmaps";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 54) = llvm::MCContext::getELFSection(v63, v71, 1, 2, 0, v73, 0, -1, 0);
      v64 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".llvm_faultmaps";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 55) = llvm::MCContext::getELFSection(v64, v71, 1, 2, 0, v73, 0, -1, 0);
      v65 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".eh_frame";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 57) = llvm::MCContext::getELFSection(v65, v71, v11, v13, 0, v73, 0, -1, 0);
      v66 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".stack_sizes";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 58) = llvm::MCContext::getELFSection(v66, v71, 1, 0, 0, v73, 0, -1, 0);
      v67 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".pseudo_probe";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 59) = llvm::MCContext::getELFSection(v67, v71, v25, 0, 0, v73, 0, -1, 0);
      v68 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".pseudo_probe_desc";
      v72 = 259;
      v74 = 257;
      *((_QWORD *)this + 60) = llvm::MCContext::getELFSection(v68, v71, v25, 0, 0, v73, 0, -1, 0);
      v69 = (llvm::MCContext *)*((_QWORD *)this + 108);
      v71[0] = (llvm::formatv_object_base *)".llvm_stats";
      v72 = 259;
      v74 = 257;
      result = llvm::MCContext::getELFSection(v69, v71, 1, 0, 0, v73, 0, -1, 0);
      *((_QWORD *)this + 61) = result;
      return result;
  }
}

void llvm::MCObjectFileInfo::initGOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  llvm::MCContext::getGOFFSection(*((_QWORD *)this + 108), ".text", 5uLL, 2, 0, 0);
  *((_QWORD *)this + 3) = v3;
  llvm::MCContext::getGOFFSection(*((_QWORD *)this + 108), ".bss", 4uLL, 15, 0, 0);
  *((_QWORD *)this + 5) = v4;
  v5 = *((_QWORD *)this + 108);
  v6 = *((_QWORD *)this + 3);
  v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v5 + 184, 24, 3);
  *(_BYTE *)v7 = 1;
  *(_DWORD *)(v7 + 1) = *(unsigned __int8 *)(v7 + 4) << 24;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 2;
  llvm::MCContext::getGOFFSection(v5, ".ppa1", 5uLL, 0, v6, v7);
  *((_QWORD *)this + 93) = v8;
}

unint64_t llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unint64_t COFFSection;
  unint64_t result;

  *((_QWORD *)this + 57) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".eh_frame", 9uLL, 1073741888, 19, (std::string::size_type)&str_26, 0, 0, -1, 0);
  v4 = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 5) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".bss", 4uLL, -1073741696, 15, (std::string::size_type)&str_26, 0, 0, -1, 0);
  if (v4 == 35)
    v5 = 1610743840;
  else
    v5 = 1610612768;
  *((_QWORD *)this + 3) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".text", 5uLL, v5, 2, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".data", 5uLL, -1073741760, 19, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 6) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".rdata", 6uLL, 1073741888, 4, (std::string::size_type)&str_26, 0, 0, -1, 0);
  v6 = *((_DWORD *)a2 + 6);
  if (v6 > 0x26 || (COFFSection = 0, ((1 << v6) & 0x480000000ALL) == 0))
    COFFSection = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gcc_except_table", 0x11uLL, 1073741888, 4, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 7) = COFFSection;
  *((_QWORD *)this + 48) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug$S", 8uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 49) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug$T", 8uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 50) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug$H", 8uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_abbrev", 0xDuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_abbrev");
  *((_QWORD *)this + 10) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_info", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_info");
  *((_QWORD *)this + 11) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_line", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_line");
  *((_QWORD *)this + 12) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_line_str", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_line_str");
  *((_QWORD *)this + 13) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_frame", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 22) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_pubnames", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 14) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_pubtypes", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 45) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_gnu_pubnames", 0x13uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 46) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_gnu_pubtypes", 0x13uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 16) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str", 0xAuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "info_string");
  *((_QWORD *)this + 37) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str_offsets", 0x12uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_str_off");
  *((_QWORD *)this + 17) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_loc", 0xAuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_debug_loc");
  *((_QWORD *)this + 40) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_loclists", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_debug_loclists");
  *((_QWORD *)this + 18) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_aranges", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 19) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_ranges", 0xDuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_range");
  *((_QWORD *)this + 39) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_rnglists", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_rnglists");
  *((_QWORD *)this + 20) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macinfo", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_macinfo");
  *((_QWORD *)this + 21) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macro", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_macro");
  *((_QWORD *)this + 35) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macinfo.dwo", 0x12uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_macinfo.dwo");
  *((_QWORD *)this + 36) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macro.dwo", 0x10uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_macro.dwo");
  *((_QWORD *)this + 28) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_info.dwo", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_info_dwo");
  *((_QWORD *)this + 29) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_types.dwo", 0x10uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_types_dwo");
  *((_QWORD *)this + 30) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_abbrev.dwo", 0x11uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_abbrev_dwo");
  *((_QWORD *)this + 31) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str.dwo", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "skel_string");
  *((_QWORD *)this + 32) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_line.dwo", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 33) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_loc.dwo", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "skel_loc");
  *((_QWORD *)this + 34) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str_offsets.dwo", 0x16uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "section_str_off_dwo");
  *((_QWORD *)this + 38) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_addr", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "addr_sec");
  *((_QWORD *)this + 43) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_cu_index", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 44) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_tu_index", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 23) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_names", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "debug_names_begin");
  *((_QWORD *)this + 24) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_names", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "names_begin");
  *((_QWORD *)this + 26) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_namespaces", 0x11uLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "namespac_begin");
  *((_QWORD *)this + 27) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_types", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "types_begin");
  *((_QWORD *)this + 25) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_objc", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_26, 0, 0, -1, "objc_begin");
  *((_QWORD *)this + 85) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".drectve", 8uLL, 2560, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 86) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".pdata", 6uLL, 1073741888, 19, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 87) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".xdata", 6uLL, 1073741888, 19, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 88) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".sxdata", 7uLL, 512, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 89) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gehcont$y", 0xAuLL, 1073741888, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 90) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gfids$y", 8uLL, 1073741888, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 91) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".giats$y", 8uLL, 1073741888, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 92) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gljmp$y", 8uLL, 1073741888, 0, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 52) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".tls$", 5uLL, -1073741760, 19, (std::string::size_type)&str_26, 0, 0, -1, 0);
  result = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".llvm_stackmaps", 0xFuLL, 1073741888, 4, (std::string::size_type)&str_26, 0, 0, -1, 0);
  *((_QWORD *)this + 54) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  llvm::MCContext *v3;
  llvm::MCContext *v4;
  llvm::MCContext *v5;
  llvm::MCContext *v6;
  llvm::MCContext *v7;
  llvm::MCContext *v8;
  llvm::MCContext *v9;
  llvm::MCContext *v10;
  llvm::MCContext *v11;
  llvm::MCContext *v12;
  llvm::MCContext *v13;
  llvm::MCContext *v14;
  llvm::MCContext *v15;
  llvm::MCContext *v16;
  llvm::MCContext *v17;
  llvm::MCContext *v18;
  llvm::MCContext *v19;
  llvm::MCContext *v20;
  llvm::MCContext *v21;
  llvm::MCContext *v22;
  llvm::MCContext *v23;
  llvm::MCContext *v24;
  llvm::MCContext *v25;
  llvm::MCContext *v26;
  llvm::MCContext *v27;
  llvm::MCContext *v28;
  llvm::MCContext *v29;
  llvm::MCContext *v30;
  llvm::MCContext *v31;
  llvm::MCContext *v32;
  llvm::MCContext *v33;
  llvm::MCContext *v34;
  llvm::MCContext *v35;
  llvm::MCContext *v36;
  llvm::MCContext *v37;
  llvm::MCContext *v38;
  llvm::MCContext *v39;
  llvm::MCContext *v40;
  unint64_t result;
  llvm::formatv_object_base *v42[4];
  __int16 v43;
  llvm::formatv_object_base *v44[4];
  __int16 v45;

  v3 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".text";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 3) = llvm::MCContext::getWasmSection(v3, v42, 2, 0, v44, -1);
  v4 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".data";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 4) = llvm::MCContext::getWasmSection(v4, v42, 19, 0, v44, -1);
  v5 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_line";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 11) = llvm::MCContext::getWasmSection(v5, v42, 0, 0, v44, -1);
  v6 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_line_str";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 12) = llvm::MCContext::getWasmSection(v6, v42, 0, 1, v44, -1);
  v7 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_str";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 16) = llvm::MCContext::getWasmSection(v7, v42, 0, 1, v44, -1);
  v8 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_loc";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 17) = llvm::MCContext::getWasmSection(v8, v42, 0, 0, v44, -1);
  v9 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_abbrev";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 9) = llvm::MCContext::getWasmSection(v9, v42, 0, 0, v44, -1);
  v10 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_aranges";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 18) = llvm::MCContext::getWasmSection(v10, v42, 0, 0, v44, -1);
  v11 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_ranges";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 19) = llvm::MCContext::getWasmSection(v11, v42, 0, 0, v44, -1);
  v12 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_macinfo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 20) = llvm::MCContext::getWasmSection(v12, v42, 0, 0, v44, -1);
  v13 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_macro";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 21) = llvm::MCContext::getWasmSection(v13, v42, 0, 0, v44, -1);
  v14 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_cu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getWasmSection(v14, v42, 0, 0, v44, -1);
  v15 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_tu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getWasmSection(v15, v42, 0, 0, v44, -1);
  v16 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_info";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 10) = llvm::MCContext::getWasmSection(v16, v42, 0, 0, v44, -1);
  v17 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_frame";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 13) = llvm::MCContext::getWasmSection(v17, v42, 0, 0, v44, -1);
  v18 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_pubnames";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 22) = llvm::MCContext::getWasmSection(v18, v42, 0, 0, v44, -1);
  v19 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_pubtypes";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 14) = llvm::MCContext::getWasmSection(v19, v42, 0, 0, v44, -1);
  v20 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_gnu_pubnames";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 45) = llvm::MCContext::getWasmSection(v20, v42, 0, 0, v44, -1);
  v21 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_gnu_pubtypes";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 46) = llvm::MCContext::getWasmSection(v21, v42, 0, 0, v44, -1);
  v22 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_names";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 23) = llvm::MCContext::getWasmSection(v22, v42, 0, 0, v44, -1);
  v23 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_str_offsets";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 37) = llvm::MCContext::getWasmSection(v23, v42, 0, 0, v44, -1);
  v24 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_addr";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 38) = llvm::MCContext::getWasmSection(v24, v42, 0, 0, v44, -1);
  v25 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_rnglists";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 39) = llvm::MCContext::getWasmSection(v25, v42, 0, 0, v44, -1);
  v26 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_loclists";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 40) = llvm::MCContext::getWasmSection(v26, v42, 0, 0, v44, -1);
  v27 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_info.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 28) = llvm::MCContext::getWasmSection(v27, v42, 0, 0, v44, -1);
  v28 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_types.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 29) = llvm::MCContext::getWasmSection(v28, v42, 0, 0, v44, -1);
  v29 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_abbrev.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 30) = llvm::MCContext::getWasmSection(v29, v42, 0, 0, v44, -1);
  v30 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_str.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 31) = llvm::MCContext::getWasmSection(v30, v42, 0, 1, v44, -1);
  v31 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_line.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 32) = llvm::MCContext::getWasmSection(v31, v42, 0, 0, v44, -1);
  v32 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_loc.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 33) = llvm::MCContext::getWasmSection(v32, v42, 0, 0, v44, -1);
  v33 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_str_offsets.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 34) = llvm::MCContext::getWasmSection(v33, v42, 0, 0, v44, -1);
  v34 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_rnglists.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 41) = llvm::MCContext::getWasmSection(v34, v42, 0, 0, v44, -1);
  v35 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_macinfo.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 35) = llvm::MCContext::getWasmSection(v35, v42, 0, 0, v44, -1);
  v36 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_macro.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 36) = llvm::MCContext::getWasmSection(v36, v42, 0, 0, v44, -1);
  v37 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_loclists.dwo";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 42) = llvm::MCContext::getWasmSection(v37, v42, 0, 0, v44, -1);
  v38 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_cu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 43) = llvm::MCContext::getWasmSection(v38, v42, 0, 0, v44, -1);
  v39 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".debug_tu_index";
  v43 = 259;
  v45 = 257;
  *((_QWORD *)this + 44) = llvm::MCContext::getWasmSection(v39, v42, 0, 0, v44, -1);
  v40 = (llvm::MCContext *)*((_QWORD *)this + 108);
  v42[0] = (llvm::formatv_object_base *)".rodata.gcc_except_table";
  v43 = 259;
  v45 = 257;
  result = llvm::MCContext::getWasmSection(v40, v42, 20, 0, v44, -1);
  *((_QWORD *)this + 7) = result;
  return result;
}

unint64_t llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  unint64_t XCOFFSection;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;

  *((_QWORD *)this + 3) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".text", 5uLL, 2, 256, 1, 0, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".data", 5uLL, 19, 261, 1, 0, 0);
  XCOFFSection = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".rodata", 7uLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 6) = XCOFFSection;
  *(_BYTE *)(XCOFFSection + 24) = 2;
  v4 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".rodata.8", 9uLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 95) = v4;
  *(_BYTE *)(v4 + 24) = 3;
  v5 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".rodata.16", 0xAuLL, 4, 257, 1, 0, 0);
  *((_QWORD *)this + 96) = v5;
  *(_BYTE *)(v5 + 24) = 4;
  *((_QWORD *)this + 52) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".tdata", 6uLL, 13, 276, 1, 0, 0);
  v6 = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), "TOC", 3uLL, 19, 271, 0, 0, 0);
  *((_QWORD *)this + 94) = v6;
  *(_BYTE *)(v6 + 24) = 2;
  *((_QWORD *)this + 7) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".gcc_except_table", 0x11uLL, 4, 257, 0, 0, 0);
  *((_QWORD *)this + 8) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".eh_info_table", 0xEuLL, 19, 261, 0, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwabrev", 8uLL, 0, 0, 1, ".dwabrev", 0x100060000);
  *((_QWORD *)this + 10) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwinfo", 7uLL, 0, 0, 1, ".dwinfo", 0x100010000);
  *((_QWORD *)this + 11) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwline", 7uLL, 0, 0, 1, ".dwline", 0x100020000);
  *((_QWORD *)this + 13) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwframe", 8uLL, 0, 0, 1, ".dwframe", 0x1000A0000);
  *((_QWORD *)this + 22) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwpbnms", 8uLL, 0, 0, 1, ".dwpbnms", 0x100030000);
  *((_QWORD *)this + 14) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwpbtyp", 8uLL, 0, 0, 1, ".dwpbtyp", 0x100040000);
  *((_QWORD *)this + 16) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwstr", 6uLL, 0, 0, 1, ".dwstr", 0x100070000);
  *((_QWORD *)this + 17) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwloc", 6uLL, 0, 0, 1, ".dwloc", 0x100090000);
  *((_QWORD *)this + 18) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwarnge", 8uLL, 0, 0, 1, ".dwarnge", 0x100050000);
  *((_QWORD *)this + 19) = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwrnges", 8uLL, 0, 0, 1, ".dwrnges", 0x100080000);
  result = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 108), ".dwmac", 6uLL, 0, 0, 1, ".dwmac", 0x1000B0000);
  *((_QWORD *)this + 20) = result;
  return result;
}

void llvm::MCObjectFileInfo::~MCObjectFileInfo(void **this)
{
  *this = off_251C1CE80;
  if (*((_BYTE *)this + 936))
  {
    if (*((char *)this + 911) < 0)
      operator delete(this[111]);
  }
}

{
  *this = off_251C1CE80;
  if (*((_BYTE *)this + 936))
  {
    if (*((char *)this + 911) < 0)
      operator delete(this[111]);
  }
  JUMPOUT(0x24BD1B3A4);
}

void llvm::MCObjectFileInfo::initMCObjectFileInfo(llvm::MCObjectFileInfo *this, llvm::MCContext *a2, char a3, int a4)
{
  llvm::MCContext *v7;
  unint64_t SPIRVSection;
  std::string __p;
  __int128 v10;
  uint64_t v11;

  *((_BYTE *)this + 856) = a3;
  *((_QWORD *)this + 108) = a2;
  *((_WORD *)this + 4) = 1;
  *((_BYTE *)this + 10) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    v7 = (llvm::MCContext *)*((_QWORD *)this + 108);
  }
  else
  {
    __p = *(std::string *)((_BYTE *)a2 + 1);
    v7 = a2;
  }
  v10 = *((_OWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 8);
  switch(*(_DWORD *)v7)
  {
    case 0:
      llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(this, (const llvm::Triple *)&__p);
      break;
    case 1:
      llvm::MCObjectFileInfo::initELFMCObjectFileInfo(this, (const llvm::Triple *)&__p, a4);
      break;
    case 2:
      llvm::MCObjectFileInfo::initGOFFMCObjectFileInfo(this, a2);
      break;
    case 3:
      llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(this, (const llvm::Triple *)&__p);
      break;
    case 4:
      SPIRVSection = llvm::MCContext::getSPIRVSection(v7);
      goto LABEL_13;
    case 5:
      llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(this, a2);
      break;
    case 6:
      llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(this, a2);
      break;
    case 7:
      SPIRVSection = llvm::MCContext::getDXContainerSection((uint64_t)v7, (uint64_t *)"DXBC", 4uLL, 2);
LABEL_13:
      *((_QWORD *)this + 3) = SPIRVSection;
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t llvm::MCObjectFileInfo::getTextSectionAlignment(llvm::MCObjectFileInfo *this)
{
  return 4;
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::MCSymbol *v9;
  llvm::MCSymbol *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(_WORD *)(a3 + 1)
    && !*(_WORD *)(a4 + 1)
    && (v9 = *(llvm::MCSymbol **)(a3 + 16), v10 = *(llvm::MCSymbol **)(a4 + 16), llvm::MCSymbol::getFragment(v9, 1), v11)
    && (llvm::MCSymbol::getFragment(v10, 1), v12)
    && (llvm::MCSymbol::getFragment(v9, 1), v13)
    && (llvm::MCSymbol::getFragment(v10, 1), v14))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, llvm::MCSymbol *, llvm::MCSymbol *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v9, v10, a5);
  }
  else
  {
    return 0;
  }
}

void llvm::MCPseudoProbeInlineTree::addPseudoProbe(float *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;

  if (a3[2])
    v5 = *(uint64_t **)a3;
  else
    v5 = (uint64_t *)a2;
  v26 = *v5;
  v27 = 0;
  v6 = llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::getOrAddNode(a1, &v26);
  v7 = a3[2];
  if (v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    if (v7 != 1)
    {
      v9 = *(_QWORD *)a3 + 16;
      do
      {
        v24 = *(_QWORD *)v9;
        v25 = v8;
        v6 = llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::getOrAddNode((float *)v6, &v24);
        v8 = *(_DWORD *)(v9 + 8);
        v9 += 16;
      }
      while (v9 != *(_QWORD *)a3 + 16 * a3[2]);
    }
    v24 = *(_QWORD *)a2;
    v25 = v8;
    v6 = llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::getOrAddNode((float *)v6, &v24);
  }
  v11 = *(char **)(v6 + 48);
  v10 = *(_QWORD *)(v6 + 56);
  if ((unint64_t)v11 >= v10)
  {
    v14 = *(char **)(v6 + 40);
    v15 = (v11 - v14) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 59)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(32 * v18);
      v14 = *(char **)(v6 + 40);
      v11 = *(char **)(v6 + 48);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[32 * v15];
    v21 = *(_OWORD *)(a2 + 16);
    v22 = &v19[32 * v18];
    *(_OWORD *)v20 = *(_OWORD *)a2;
    *((_OWORD *)v20 + 1) = v21;
    v13 = v20 + 32;
    if (v11 != v14)
    {
      do
      {
        v23 = *((_OWORD *)v11 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v11 - 2);
        *((_OWORD *)v20 - 1) = v23;
        v20 -= 32;
        v11 -= 32;
      }
      while (v11 != v14);
      v14 = *(char **)(v6 + 40);
    }
    *(_QWORD *)(v6 + 40) = v20;
    *(_QWORD *)(v6 + 48) = v13;
    *(_QWORD *)(v6 + 56) = v22;
    if (v14)
      operator delete(v14);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v11 = *(_OWORD *)a2;
    *((_OWORD *)v11 + 1) = v12;
    v13 = v11 + 32;
  }
  *(_QWORD *)(v6 + 48) = v13;
}

uint64_t llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::getOrAddNode(float *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v37;
  uint64_t v38;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  v6 = *a2;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = v6;
  v38 = v5;
  v7 = *((unsigned int *)a2 + 2);
  v8 = v6 ^ v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = v6 ^ v7;
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v6 && *((_DWORD *)v12 + 6) == (_DWORD)v7)
              goto LABEL_78;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a2;
  v38 = 0;
  v12[4] = v5;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_59:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        v37 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v33)
  {
    *v12 = *v33;
LABEL_76:
    *v33 = v12;
    goto LABEL_77;
  }
  v34 = *((_QWORD *)a1 + 2);
  *v12 = v34;
  *((_QWORD *)a1 + 2) = v12;
  v32[v2] = a1 + 4;
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9)
        v35 %= v9;
    }
    else
    {
      v35 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
LABEL_78:
  std::unique_ptr<llvm::MCPseudoProbeInlineTree>::reset[abi:nn180100](&v38, 0);
  *(_QWORD *)(v12[4] + 72) = a1;
  return v12[4];
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNum(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;

  v3 = 128;
  if (a3)
    v3 = 136;
  v4 = *(_DWORD **)(a1 + v3);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = 112;
  if (a3)
    v5 = 116;
  v6 = *(unsigned int *)(a1 + v5);
  if (!(_DWORD)v6)
    return 0xFFFFFFFFLL;
  v7 = &v4[2 * v6];
  do
  {
    v8 = v6 >> 1;
    v9 = &v4[2 * (v6 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v6 += ~(v6 >> 1);
    if (v11 < a2)
      v4 = v10;
    else
      v6 = v8;
  }
  while (v6);
  if (v4 != v7 && *v4 == a2)
    return v4[1];
  else
    return 0xFFFFFFFFLL;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
}

double llvm::MCSection::MCSection(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  double result;

  *(_QWORD *)a1 = &unk_251C1CEA8;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 44) &= 0xF8u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 15;
  *(_BYTE *)(a1 + 98) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x100000000;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 160) = 0x200000000;
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = a4;
  *(_DWORD *)(a1 + 216) = a2;
  *(_DWORD *)(a1 + 220) = a5;
  return result;
}

void llvm::MCSection::~MCSection(llvm::MCSection *this)
{
  char *v2;
  char *v3;

  *(_QWORD *)this = &unk_251C1CEA8;
  v2 = (char *)*((_QWORD *)this + 19);
  if (v2 != (char *)this + 168)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  llvm::iplist_impl<llvm::simple_ilist<llvm::MCFragment>,llvm::ilist_traits<llvm::MCFragment>>::clear((uint64_t *)this + 13);
}

const char *llvm::MCSection::getVirtualSectionKind(llvm::MCSection *this)
{
  return "virtual";
}

uint64_t *llvm::iplist_impl<llvm::simple_ilist<llvm::MCFragment>,llvm::ilist_traits<llvm::MCFragment>>::clear(uint64_t *a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t *v4;

  result = (uint64_t *)a1[1];
  if (result != a1)
  {
    do
    {
      v3 = *result;
      v4 = (uint64_t *)result[1];
      *v4 = *result;
      *(_QWORD *)(v3 + 8) = v4;
      *result = 0;
      result[1] = 0;
      llvm::MCFragment::destroy((uint64_t)result);
      result = v4;
    }
    while (v4 != a1);
  }
  return result;
}

llvm::raw_ostream *llvm::MCSectionCOFF::printSwitchToSection(uint64_t a1, _BYTE *a2, int a3, llvm::raw_ostream *this)
{
  uint64_t v7;
  llvm::raw_ostream *result;
  _WORD *v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  _BYTE *v17;
  int v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  char v22;
  llvm::raw_ostream *v23;
  char v24;
  _BYTE *v25;
  _BYTE *v26;
  int *v27;
  int v28;
  int v29;
  BOOL v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  const char *v37;
  size_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;

  if (*(_QWORD *)(a1 + 232))
    goto LABEL_2;
  v11 = *(int **)(a1 + 200);
  v12 = *(_QWORD *)(a1 + 208);
  if (v12 == 4)
  {
    if (*v11 != 1936941614)
      goto LABEL_2;
  }
  else if (v12 != 5
         || (*v11 == 2019914798 ? (v13 = *((_BYTE *)v11 + 4) == 116) : (v13 = 0),
             !v13
          && ((v14 = *v11, v15 = *((unsigned __int8 *)v11 + 4), v14 == 1952539694) ? (v16 = v15 == 97) : (v16 = 0), !v16)))
  {
LABEL_2:
    v7 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 9)
    {
      *(_WORD *)(v7 + 8) = 2414;
      *(_QWORD *)v7 = *(_QWORD *)"\t.section\t";
      *((_QWORD *)this + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
    }
    result = llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(_QWORD *)(a1 + 208));
    v9 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8748;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      result = llvm::raw_ostream::write(result, ",\"", 2uLL);
    }
    if ((*(_BYTE *)(a1 + 224) & 0x40) != 0)
    {
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 100);
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 100;
      }
    }
    if ((*(_BYTE *)(a1 + 224) & 0x80) != 0)
    {
      v17 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v17 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 98);
      }
      else
      {
        *((_QWORD *)this + 4) = v17 + 1;
        *v17 = 98;
      }
    }
    v18 = *(_DWORD *)(a1 + 224);
    if ((v18 & 0x20000000) != 0)
    {
      v19 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v19 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 120);
      }
      else
      {
        *((_QWORD *)this + 4) = v19 + 1;
        *v19 = 120;
      }
      v18 = *(_DWORD *)(a1 + 224);
    }
    if (v18 < 0)
    {
      v20 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v20 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v20 + 1;
        v22 = 119;
        goto LABEL_41;
      }
      v23 = this;
      v24 = 119;
    }
    else
    {
      v21 = *((_QWORD *)this + 3);
      v20 = (char *)*((_QWORD *)this + 4);
      if ((v18 & 0x40000000) != 0)
      {
        if ((unint64_t)v20 < v21)
        {
          *((_QWORD *)this + 4) = v20 + 1;
          v22 = 114;
          goto LABEL_41;
        }
        v23 = this;
        v24 = 114;
      }
      else
      {
        if ((unint64_t)v20 < v21)
        {
          *((_QWORD *)this + 4) = v20 + 1;
          v22 = 121;
LABEL_41:
          *v20 = v22;
LABEL_46:
          if ((*(_BYTE *)(a1 + 225) & 8) != 0)
          {
            v25 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v25 >= *((_QWORD *)this + 3))
            {
              result = llvm::raw_ostream::write(this, 110);
            }
            else
            {
              *((_QWORD *)this + 4) = v25 + 1;
              *v25 = 110;
            }
          }
          if ((*(_BYTE *)(a1 + 227) & 0x10) != 0)
          {
            v26 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v26 >= *((_QWORD *)this + 3))
            {
              result = llvm::raw_ostream::write(this, 115);
            }
            else
            {
              *((_QWORD *)this + 4) = v26 + 1;
              *v26 = 115;
            }
          }
          if ((*(_BYTE *)(a1 + 227) & 2) != 0)
          {
            if (*(_QWORD *)(a1 + 208) < 6uLL
              || ((v27 = *(int **)(a1 + 200), v28 = *v27, v29 = *((unsigned __int16 *)v27 + 2), v28 == 1650811950)
                ? (v30 = v29 == 26485)
                : (v30 = 0),
                  !v30))
            {
              v31 = (_BYTE *)*((_QWORD *)this + 4);
              if ((unint64_t)v31 >= *((_QWORD *)this + 3))
              {
                result = llvm::raw_ostream::write(this, 68);
              }
              else
              {
                *((_QWORD *)this + 4) = v31 + 1;
                *v31 = 68;
              }
            }
          }
          if ((*(_BYTE *)(a1 + 225) & 2) != 0)
          {
            v32 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v32 >= *((_QWORD *)this + 3))
            {
              result = llvm::raw_ostream::write(this, 105);
            }
            else
            {
              *((_QWORD *)this + 4) = v32 + 1;
              *v32 = 105;
            }
          }
          v33 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v33 >= *((_QWORD *)this + 3))
          {
            result = llvm::raw_ostream::write(this, 34);
          }
          else
          {
            *((_QWORD *)this + 4) = v33 + 1;
            *v33 = 34;
          }
          if ((*(_BYTE *)(a1 + 225) & 0x10) != 0)
          {
            v34 = *(_QWORD *)(a1 + 232);
            if (v34)
              v35 = ",";
            else
              v35 = "\n\t.linkonce\t";
            if (v34)
              v36 = 1;
            else
              v36 = 12;
            result = llvm::raw_ostream::operator<<(this, v35, v36);
            v37 = "one_only";
            v38 = 8;
            switch(*(_DWORD *)(a1 + 240))
            {
              case 1:
                goto LABEL_91;
              case 2:
                v37 = "discard";
                goto LABEL_86;
              case 3:
                v37 = "same_size";
                v38 = 9;
                goto LABEL_91;
              case 4:
                v37 = "same_contents";
                v38 = 13;
                goto LABEL_91;
              case 5:
                v37 = "associative";
                v38 = 11;
                goto LABEL_91;
              case 6:
                v37 = "largest";
LABEL_86:
                v38 = 7;
                goto LABEL_91;
              case 7:
                v37 = "newest";
                v38 = 6;
LABEL_91:
                result = llvm::raw_ostream::operator<<(this, v37, v38);
                break;
              default:
                break;
            }
            if (*(_QWORD *)(a1 + 232))
            {
              v41 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v41)
              {
                llvm::raw_ostream::write(this, ",", 1uLL);
              }
              else
              {
                *v41 = 44;
                ++*((_QWORD *)this + 4);
              }
              result = llvm::MCSymbol::print(*(_BYTE **)(a1 + 232), this, a2);
            }
          }
          v40 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v40 < *((_QWORD *)this + 3))
          {
            *((_QWORD *)this + 4) = v40 + 1;
            goto LABEL_99;
          }
          result = this;
          return llvm::raw_ostream::write(result, 10);
        }
        v23 = this;
        v24 = 121;
      }
    }
    result = llvm::raw_ostream::write(v23, v24);
    goto LABEL_46;
  }
  v39 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v39 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 9);
  }
  else
  {
    *((_QWORD *)this + 4) = v39 + 1;
    *v39 = 9;
  }
  result = llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(_QWORD *)(a1 + 208));
  v40 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v40 < *((_QWORD *)result + 3))
  {
    *((_QWORD *)result + 4) = v40 + 1;
LABEL_99:
    *v40 = 10;
    return result;
  }
  return llvm::raw_ostream::write(result, 10);
}

BOOL llvm::MCSectionCOFF::useCodeAlign(llvm::MCSectionCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

uint64_t llvm::MCSectionCOFF::isVirtualSection(llvm::MCSectionCOFF *this)
{
  return *((unsigned __int8 *)this + 224) >> 7;
}

const char *llvm::MCSectionCOFF::getVirtualSectionKind(llvm::MCSectionCOFF *this)
{
  return "IMAGE_SCN_CNT_UNINITIALIZED_DATA";
}

uint64_t llvm::MCSectionDXContainer::useCodeAlign(llvm::MCSectionDXContainer *this)
{
  return 0;
}

uint64_t llvm::MCSectionDXContainer::isVirtualSection(llvm::MCSectionDXContainer *this)
{
  return 0;
}

void llvm::MCSectionELF::printSwitchToSection(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *this, uint64_t a5)
{
  _BYTE *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _WORD *v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  char v30;
  _BYTE *v31;
  llvm::raw_ostream *v32;
  char v33;
  _BYTE *v34;
  _BYTE *v35;
  char *v36;
  unint64_t v37;
  char v38;
  llvm::raw_ostream *v39;
  char v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned __int8 *v47;
  int64_t v48;
  _QWORD *v49;
  int64_t v50;
  _DWORD *v51;
  _BYTE *v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  int64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  int64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[4];
  __int16 v64;
  const char *v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68[4];
  __int16 v69;
  const char *v70;
  __int16 v71;
  uint64_t v72[5];
  uint64_t v73[5];
  _BYTE v74[40];

  if (*(_DWORD *)(a1 + 232) == -1
    && (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208)))
  {
    v10 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v10 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((_QWORD *)this + 4) = v10 + 1;
      *v10 = 9;
    }
    llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(_QWORD *)(a1 + 208));
    if (!a5)
      goto LABEL_189;
    v27 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v27 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((_QWORD *)this + 4) = v27 + 1;
      *v27 = 9;
    }
LABEL_188:
    llvm::MCExpr::print(a5);
LABEL_189:
    v13 = *((_QWORD *)this + 4);
    goto LABEL_190;
  }
  v11 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 9)
  {
    *(_WORD *)(v11 + 8) = 2414;
    *(_QWORD *)v11 = *(_QWORD *)"\t.section\t";
    *((_QWORD *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
  }
  printName(this, *(unsigned __int8 **)(a1 + 200), *(_QWORD *)(a1 + 208));
  if (!*(_BYTE *)(a2 + 336) || (v12 = *(_DWORD *)(a1 + 228), (v12 & 0x10) != 0))
  {
    v14 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v14 > 1uLL)
    {
      *v14 = 8748;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ",\"", 2uLL);
    }
    v15 = *(_DWORD *)(a1 + 228);
    if ((v15 & 2) != 0)
    {
      v16 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v16 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 97);
      }
      else
      {
        *((_QWORD *)this + 4) = v16 + 1;
        *v16 = 97;
      }
      v15 = *(_DWORD *)(a1 + 228);
    }
    if (v15 < 0)
    {
      v17 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v17 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 101);
      }
      else
      {
        *((_QWORD *)this + 4) = v17 + 1;
        *v17 = 101;
      }
    }
    if ((*(_BYTE *)(a1 + 228) & 4) != 0)
    {
      v18 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v18 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 120);
      }
      else
      {
        *((_QWORD *)this + 4) = v18 + 1;
        *v18 = 120;
      }
    }
    if ((*(_BYTE *)(a1 + 229) & 2) != 0)
    {
      v19 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v19 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 71);
      }
      else
      {
        *((_QWORD *)this + 4) = v19 + 1;
        *v19 = 71;
      }
    }
    if ((*(_BYTE *)(a1 + 228) & 1) != 0)
    {
      v20 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v20 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 119);
      }
      else
      {
        *((_QWORD *)this + 4) = v20 + 1;
        *v20 = 119;
      }
    }
    if ((*(_BYTE *)(a1 + 228) & 0x10) != 0)
    {
      v21 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v21 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 77);
      }
      else
      {
        *((_QWORD *)this + 4) = v21 + 1;
        *v21 = 77;
      }
    }
    if ((*(_BYTE *)(a1 + 228) & 0x20) != 0)
    {
      v22 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v22 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 83);
      }
      else
      {
        *((_QWORD *)this + 4) = v22 + 1;
        *v22 = 83;
      }
    }
    if ((*(_BYTE *)(a1 + 229) & 4) != 0)
    {
      v23 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v23 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 84);
      }
      else
      {
        *((_QWORD *)this + 4) = v23 + 1;
        *v23 = 84;
      }
    }
    if ((*(_BYTE *)(a1 + 228) & 0x80) != 0)
    {
      v24 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v24 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 111);
      }
      else
      {
        *((_QWORD *)this + 4) = v24 + 1;
        *v24 = 111;
      }
    }
    if ((*(_BYTE *)(a1 + 230) & 0x20) != 0)
    {
      v25 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v25 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 82);
      }
      else
      {
        *((_QWORD *)this + 4) = v25 + 1;
        *v25 = 82;
      }
    }
    if (*(_DWORD *)(a3 + 36) == 14 && (*(_BYTE *)(a1 + 230) & 0x10) != 0)
    {
      v26 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v26 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 82);
      }
      else
      {
        *((_QWORD *)this + 4) = v26 + 1;
        *v26 = 82;
      }
    }
    v28 = *(unsigned int *)(a3 + 24);
    if (v28 <= 0x27)
    {
      if (((1 << v28) & 0x1800000006) != 0)
      {
        if ((*(_BYTE *)(a1 + 231) & 0x20) == 0)
          goto LABEL_107;
        v29 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v29 < *((_QWORD *)this + 3))
        {
          *((_QWORD *)this + 4) = v29 + 1;
          v30 = 121;
LABEL_76:
          *v29 = v30;
          goto LABEL_107;
        }
        v32 = this;
        v33 = 121;
        goto LABEL_83;
      }
      if (v28 == 12)
      {
        if ((*(_BYTE *)(a1 + 231) & 0x10) != 0)
        {
          v29 = (char *)*((_QWORD *)this + 4);
          if ((unint64_t)v29 < *((_QWORD *)this + 3))
          {
            *((_QWORD *)this + 4) = v29 + 1;
            v30 = 115;
            goto LABEL_76;
          }
          v32 = this;
          v33 = 115;
          goto LABEL_83;
        }
      }
      else if (v28 == 39)
      {
        if ((*(_BYTE *)(a1 + 231) & 0x20) != 0)
        {
          v31 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v31 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 99);
          }
          else
          {
            *((_QWORD *)this + 4) = v31 + 1;
            *v31 = 99;
          }
        }
        if ((*(_BYTE *)(a1 + 231) & 0x10) != 0)
        {
          v29 = (char *)*((_QWORD *)this + 4);
          if ((unint64_t)v29 < *((_QWORD *)this + 3))
          {
            *((_QWORD *)this + 4) = v29 + 1;
            v30 = 100;
            goto LABEL_76;
          }
          v32 = this;
          v33 = 100;
LABEL_83:
          llvm::raw_ostream::write(v32, v33);
        }
      }
    }
LABEL_107:
    v34 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v34 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 34);
    }
    else
    {
      *((_QWORD *)this + 4) = v34 + 1;
      *v34 = 34;
    }
    v35 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v35 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 44);
    }
    else
    {
      *((_QWORD *)this + 4) = v35 + 1;
      *v35 = 44;
    }
    v37 = *((_QWORD *)this + 3);
    v36 = (char *)*((_QWORD *)this + 4);
    if (**(_BYTE **)(a2 + 48) == 64)
    {
      if ((unint64_t)v36 < v37)
      {
        *((_QWORD *)this + 4) = v36 + 1;
        v38 = 37;
LABEL_118:
        *v36 = v38;
LABEL_122:
        v41 = *(unsigned int *)(a1 + 224);
        if ((int)v41 <= 1879002111)
        {
          v42 = "init_array";
          v43 = 10;
          switch((int)v41)
          {
            case 7:
              v42 = "note";
              v43 = 4;
              break;
            case 8:
              v42 = "nobits";
              goto LABEL_147;
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
              goto LABEL_196;
            case 14:
              break;
            case 15:
              v42 = "fini_array";
              goto LABEL_144;
            case 16:
              v42 = "preinit_array";
              v43 = 13;
              break;
            default:
              if ((_DWORD)v41 != 1)
                goto LABEL_196;
              v42 = "progbits";
              v43 = 8;
              break;
          }
        }
        else
        {
          switch((int)v41)
          {
            case 1879002112:
              v42 = "llvm_odrtab";
              v43 = 11;
              break;
            case 1879002113:
              v42 = "llvm_linker_options";
              goto LABEL_138;
            case 1879002114:
            case 1879002115:
            case 1879002118:
            case 1879002119:
              goto LABEL_196;
            case 1879002116:
              v42 = "llvm_dependent_libraries";
              v43 = 24;
              break;
            case 1879002117:
              v42 = "llvm_sympart";
              v43 = 12;
              break;
            case 1879002120:
              v42 = "llvm_bb_addr_map_v0";
LABEL_138:
              v43 = 19;
              break;
            case 1879002121:
              v42 = "llvm_call_graph_profile";
              v43 = 23;
              break;
            case 1879002122:
              v42 = "llvm_bb_addr_map";
              v43 = 16;
              break;
            case 1879002123:
              v42 = "llvm_offloading";
              v43 = 15;
              break;
            default:
              if ((_DWORD)v41 == 1879048193)
              {
                v42 = "unwind";
LABEL_147:
                v43 = 6;
              }
              else
              {
                if ((_DWORD)v41 != 1879048222)
                {
LABEL_196:
                  v70 = "unsupported type 0x";
                  v71 = 259;
                  v67 = v41;
                  v68[0] = (uint64_t)&v67;
                  v68[2] = 0;
                  v69 = 270;
                  llvm::operator+((uint64_t *)&v70, v68, (uint64_t)v72);
                  v65 = " for section ";
                  v66 = 259;
                  llvm::operator+(v72, (uint64_t *)&v65, (uint64_t)v73);
                  v61 = *(_QWORD *)(a1 + 200);
                  v62 = *(_QWORD *)(a1 + 208);
                  v64 = 261;
                  v63[0] = v61;
                  v63[1] = v62;
                  llvm::operator+(v73, v63, (uint64_t)v74);
                  llvm::report_fatal_error((llvm *)v74, (const llvm::Twine *)1);
                }
                v42 = "0x7000001e";
LABEL_144:
                v43 = 10;
              }
              break;
          }
        }
        llvm::raw_ostream::operator<<(this, v42, v43);
        if (*(_DWORD *)(a1 + 236))
        {
          v44 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v44)
          {
            llvm::raw_ostream::write(this, ",", 1uLL);
          }
          else
          {
            *v44 = 44;
            ++*((_QWORD *)this + 4);
          }
          write_unsigned<unsigned long>(this, *(unsigned int *)(a1 + 236), 0, 0, 0);
        }
        if ((*(_BYTE *)(a1 + 229) & 2) != 0)
        {
          v45 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v45)
          {
            llvm::raw_ostream::write(this, ",", 1uLL);
          }
          else
          {
            *v45 = 44;
            ++*((_QWORD *)this + 4);
          }
          v46 = (_BYTE *)(*(_QWORD *)(a1 + 240) & 0xFFFFFFFFFFFFFFF8);
          if ((*v46 & 4) != 0)
          {
            v49 = (_QWORD *)*((_QWORD *)v46 - 1);
            v50 = *v49;
            v47 = (unsigned __int8 *)(v49 + 2);
            v48 = v50;
          }
          else
          {
            v47 = 0;
            v48 = 0;
          }
          printName(this, v47, v48);
          if ((*(_BYTE *)(a1 + 240) & 4) != 0)
          {
            v51 = (_DWORD *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v51 > 6uLL)
            {
              *(_DWORD *)((char *)v51 + 3) = 1952539757;
              *v51 = 1836016428;
              *((_QWORD *)this + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(this, ",comdat", 7uLL);
            }
          }
        }
        if ((*(_BYTE *)(a1 + 228) & 0x80) != 0)
        {
          v52 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v52)
          {
            llvm::raw_ostream::write(this, ",", 1uLL);
          }
          else
          {
            *v52 = 44;
            ++*((_QWORD *)this + 4);
          }
          v53 = *(_BYTE **)(a1 + 248);
          if (v53)
          {
            if ((*v53 & 4) != 0)
            {
              v57 = (_QWORD *)*((_QWORD *)v53 - 1);
              v58 = *v57;
              v54 = (unsigned __int8 *)(v57 + 2);
              v55 = v58;
            }
            else
            {
              v54 = 0;
              v55 = 0;
            }
            printName(this, v54, v55);
          }
          else
          {
            v56 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v56 >= *((_QWORD *)this + 3))
            {
              llvm::raw_ostream::write(this, 48);
            }
            else
            {
              *((_QWORD *)this + 4) = v56 + 1;
              *v56 = 48;
            }
          }
        }
        v59 = (_QWORD *)*((_QWORD *)this + 4);
        if (*(_DWORD *)(a1 + 232) != -1)
        {
          if (*((_QWORD *)this + 3) - (_QWORD)v59 > 7uLL)
          {
            *v59 = 0x2C657571696E752CLL;
            *((_QWORD *)this + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(this, ",unique,", 8uLL);
          }
          write_unsigned<unsigned long>(this, *(unsigned int *)(a1 + 232), 0, 0, 0);
          v59 = (_QWORD *)*((_QWORD *)this + 4);
        }
        if ((unint64_t)v59 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 10);
          if (!a5)
            return;
        }
        else
        {
          *((_QWORD *)this + 4) = (char *)v59 + 1;
          *(_BYTE *)v59 = 10;
          if (!a5)
            return;
        }
        v60 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v60 > 0xCuLL)
        {
          qmemcpy(v60, "\t.subsection\t", 13);
          *((_QWORD *)this + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(this, "\t.subsection\t", 0xDuLL);
        }
        goto LABEL_188;
      }
      v39 = this;
      v40 = 37;
    }
    else
    {
      if ((unint64_t)v36 < v37)
      {
        *((_QWORD *)this + 4) = v36 + 1;
        v38 = 64;
        goto LABEL_118;
      }
      v39 = this;
      v40 = 64;
    }
    llvm::raw_ostream::write(v39, v40);
    goto LABEL_122;
  }
  v13 = *((_QWORD *)this + 4);
  if ((v12 & 2) != 0)
  {
    if (*((_QWORD *)this + 3) - v13 > 6)
    {
      *(_DWORD *)(v13 + 3) = 1668246636;
      *(_DWORD *)v13 = 1818305324;
      v13 = *((_QWORD *)this + 4) + 7;
      *((_QWORD *)this + 4) = v13;
    }
    else
    {
      llvm::raw_ostream::write(this, ",#alloc", 7uLL);
      v13 = *((_QWORD *)this + 4);
    }
    v12 = *(_DWORD *)(a1 + 228);
    if ((v12 & 4) == 0)
    {
LABEL_12:
      if ((v12 & 1) == 0)
        goto LABEL_13;
      goto LABEL_93;
    }
  }
  else if ((v12 & 4) == 0)
  {
    goto LABEL_12;
  }
  if (*((_QWORD *)this + 3) - v13 > 0xA)
  {
    *(_DWORD *)(v13 + 7) = 1920234350;
    *(_QWORD *)v13 = *(_QWORD *)",#execinstr";
    v13 = *((_QWORD *)this + 4) + 11;
    *((_QWORD *)this + 4) = v13;
  }
  else
  {
    llvm::raw_ostream::write(this, ",#execinstr", 0xBuLL);
    v13 = *((_QWORD *)this + 4);
  }
  v12 = *(_DWORD *)(a1 + 228);
  if ((v12 & 1) == 0)
  {
LABEL_13:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_97:
    if (*((_QWORD *)this + 3) - v13 > 8)
    {
      *(_BYTE *)(v13 + 8) = 101;
      *(_QWORD *)v13 = *(_QWORD *)",#exclude";
      v13 = *((_QWORD *)this + 4) + 9;
      *((_QWORD *)this + 4) = v13;
    }
    else
    {
      llvm::raw_ostream::write(this, ",#exclude", 9uLL);
      v13 = *((_QWORD *)this + 4);
    }
    if ((*(_DWORD *)(a1 + 228) & 0x400) == 0)
      goto LABEL_190;
    goto LABEL_102;
  }
LABEL_93:
  if (*((_QWORD *)this + 3) - v13 > 6)
  {
    *(_DWORD *)(v13 + 3) = 1702127986;
    *(_DWORD *)v13 = 1920410412;
    v13 = *((_QWORD *)this + 4) + 7;
    *((_QWORD *)this + 4) = v13;
  }
  else
  {
    llvm::raw_ostream::write(this, ",#write", 7uLL);
    v13 = *((_QWORD *)this + 4);
  }
  v12 = *(_DWORD *)(a1 + 228);
  if (v12 < 0)
    goto LABEL_97;
LABEL_14:
  if ((v12 & 0x400) != 0)
  {
LABEL_102:
    if (*((_QWORD *)this + 3) - v13 > 4)
    {
      *(_BYTE *)(v13 + 4) = 115;
      *(_DWORD *)v13 = 1819550508;
      v13 = *((_QWORD *)this + 4) + 5;
      *((_QWORD *)this + 4) = v13;
      goto LABEL_190;
    }
    llvm::raw_ostream::write(this, ",#tls", 5uLL);
    goto LABEL_189;
  }
LABEL_190:
  if (v13 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 10);
  }
  else
  {
    *((_QWORD *)this + 4) = v13 + 1;
    *(_BYTE *)v13 = 10;
  }
}

llvm::raw_ostream *printName(llvm::raw_ostream *a1, unsigned __int8 *a2, int64_t a3)
{
  unsigned __int8 *v4;
  llvm::raw_ostream *result;
  _BYTE *v7;
  unsigned __int8 *v8;
  int v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  const char *v12;
  _BYTE *v13;
  _BYTE *v14;
  _WORD *v15;
  char v16;
  char *v17;
  _BYTE *v18;
  _QWORD v19[2];

  v4 = a2;
  v19[0] = a2;
  v19[1] = a3;
  result = (llvm::raw_ostream *)llvm::StringRef::find_first_not_of(v19, "0123456789_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 64, 0);
  if (result == (llvm::raw_ostream *)-1)
    return llvm::raw_ostream::operator<<(a1, v4, a3);
  v7 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)a1 + 3))
  {
    result = llvm::raw_ostream::write(a1, 34);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v7 + 1;
    *v7 = 34;
  }
  if (a3 >= 1)
  {
    v8 = &v4[a3];
    do
    {
      v9 = *v4;
      if (v9 == 92)
      {
        if (v4 + 1 != v8)
        {
          v13 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v13 >= *((_QWORD *)a1 + 3))
          {
            result = llvm::raw_ostream::write(a1, 92);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v13 + 1;
            *v13 = 92;
          }
          v16 = v4[1];
          v17 = (char *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v17 >= *((_QWORD *)a1 + 3))
          {
            result = llvm::raw_ostream::write(a1, v16);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v17 + 1;
            *v17 = v16;
          }
          ++v4;
          goto LABEL_29;
        }
        v15 = (_WORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v15 > 1uLL)
        {
          *v15 = 23644;
          goto LABEL_28;
        }
        v11 = a1;
        v12 = "\\\\";
      }
      else
      {
        if (v9 != 34)
        {
          v14 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v14 >= *((_QWORD *)a1 + 3))
          {
            result = llvm::raw_ostream::write(a1, v9);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v14 + 1;
            *v14 = v9;
          }
          goto LABEL_29;
        }
        v10 = (_WORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v10 > 1uLL)
        {
          *v10 = 8796;
LABEL_28:
          *((_QWORD *)a1 + 4) += 2;
          goto LABEL_29;
        }
        v11 = a1;
        v12 = "\\\"";
      }
      result = llvm::raw_ostream::write(v11, v12, 2uLL);
LABEL_29:
      ++v4;
    }
    while (v4 < v8);
  }
  v18 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)a1 + 3))
    return llvm::raw_ostream::write(a1, 34);
  *((_QWORD *)a1 + 4) = v18 + 1;
  *v18 = 34;
  return result;
}

uint64_t llvm::MCSectionELF::useCodeAlign(llvm::MCSectionELF *this)
{
  return (*((unsigned __int8 *)this + 228) >> 2) & 1;
}

BOOL llvm::MCSectionELF::isVirtualSection(llvm::MCSectionELF *this)
{
  return *((_DWORD *)this + 56) == 8;
}

const char *llvm::MCSectionELF::getVirtualSectionKind(llvm::MCSectionELF *this)
{
  return "SHT_NOBITS";
}

void llvm::MCSectionMachO::MCSectionMachO(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v13;
  unint64_t v14;
  char v15;

  llvm::MCSection::MCSection(a1, 3, a4, a5, a8, a9);
  v14 = 0;
  *(_QWORD *)v13 = &off_251C1CF68;
  *(_DWORD *)(v13 + 240) = a6;
  *(_DWORD *)(v13 + 244) = a7;
  do
  {
    if (a3 <= v14)
      v15 = 0;
    else
      v15 = *(_BYTE *)(a2 + v14);
    *(_BYTE *)(v13 + v14++ + 224) = v15;
  }
  while (v14 != 16);
}

llvm::raw_ostream *llvm::MCSectionMachO::printSwitchToSection(uint64_t a1, int a2, int a3, llvm::raw_ostream *this)
{
  uint64_t v6;
  size_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *result;
  int v11;
  char **v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  char *v21;
  size_t v22;
  _WORD *v23;
  _WORD *v24;
  _BYTE *v25;
  uint64_t v26;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 9)
  {
    *(_WORD *)(v6 + 8) = 2414;
    *(_QWORD *)v6 = *(_QWORD *)"\t.section\t";
    *((_QWORD *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
  }
  if (*(_BYTE *)(a1 + 239))
    v7 = 16;
  else
    v7 = strlen((const char *)(a1 + 224));
  v8 = llvm::raw_ostream::operator<<(this, (const void *)(a1 + 224), v7);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    v8 = llvm::raw_ostream::write(v8, 44);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 44;
  }
  result = llvm::raw_ostream::operator<<(v8, *(const void **)(a1 + 200), *(_QWORD *)(a1 + 208));
  v11 = *(_DWORD *)(a1 + 240);
  if (!v11)
    goto LABEL_41;
  v12 = &(&SectionTypeDescriptors)[4 * *(_DWORD *)(a1 + 240)];
  v13 = (size_t)v12[1];
  v15 = *((_QWORD *)this + 3);
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  v16 = (unint64_t)v14 >= v15;
  if (!v13)
    goto LABEL_42;
  if ((unint64_t)v14 >= v15)
  {
    llvm::raw_ostream::write(this, 44);
  }
  else
  {
    *((_QWORD *)this + 4) = v14 + 1;
    *v14 = 44;
  }
  result = llvm::raw_ostream::operator<<(this, *v12, v13);
  v17 = v11 & 0xFFFFFF00;
  if ((v11 & 0xFFFFFF00) != 0)
  {
    v18 = 0;
    v19 = 44;
    do
    {
      if (v18 == 100)
        break;
      v20 = SectionAttrDescriptors[v18];
      if ((v20 & v17) != 0)
      {
        v21 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v21 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, v19);
        }
        else
        {
          *((_QWORD *)this + 4) = v21 + 1;
          *v21 = v19;
        }
        v17 &= ~v20;
        v22 = *(_QWORD *)&SectionAttrDescriptors[v18 + 4];
        if (v22)
        {
          result = llvm::raw_ostream::operator<<(this, *(const void **)&SectionAttrDescriptors[v18 + 2], v22);
        }
        else
        {
          v23 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v23 > 1uLL)
          {
            *v23 = 15420;
            *((_QWORD *)this + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(this, "<<", 2uLL);
          }
          result = llvm::raw_ostream::operator<<(this, *(const void **)&SectionAttrDescriptors[v18 + 6], *(_QWORD *)&SectionAttrDescriptors[v18 + 8]);
          v24 = (_WORD *)*((_QWORD *)result + 4);
          if (*((_QWORD *)result + 3) - (_QWORD)v24 > 1uLL)
          {
            *v24 = 15934;
            *((_QWORD *)result + 4) += 2;
          }
          else
          {
            result = llvm::raw_ostream::write(result, ">>", 2uLL);
          }
        }
        v19 = 43;
      }
      v18 += 10;
    }
    while (v17);
    if (!*(_DWORD *)(a1 + 244))
      goto LABEL_41;
    v25 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v25 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 44);
    }
    else
    {
      *((_QWORD *)this + 4) = v25 + 1;
      *v25 = 44;
    }
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 244))
  {
    v26 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v26) > 5)
    {
      *(_WORD *)(v26 + 4) = 11365;
      *(_DWORD *)v26 = 1852796460;
      *((_QWORD *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, ",none,", 6uLL);
    }
LABEL_40:
    result = write_unsigned<unsigned long>(this, *(unsigned int *)(a1 + 244), 0, 0, 0);
  }
LABEL_41:
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  v16 = (unint64_t)v14 >= *((_QWORD *)this + 3);
LABEL_42:
  if (v16)
    return llvm::raw_ostream::write(this, 10);
  *((_QWORD *)this + 4) = v14 + 1;
  *v14 = 10;
  return result;
}

uint64_t llvm::MCSectionMachO::useCodeAlign(llvm::MCSectionMachO *this)
{
  return *((_DWORD *)this + 60) >> 31;
}

uint64_t llvm::MCSectionMachO::isVirtualSection(llvm::MCSectionMachO *this)
{
  return (*((unsigned __int8 *)this + 240) < 0x13u) & (0x41002u >> *((_BYTE *)this + 240));
}

void llvm::MCSectionMachO::ParseSectionSpecifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, _BYTE *a6@<X5>, _DWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  const void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  unint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  _DWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  llvm::formatv_object_base *v49;
  uint64_t v50;
  _UNKNOWN **v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[16];
  void *v55;
  uint64_t v56;
  _QWORD v57[12];

  v57[10] = *MEMORY[0x24BDAC8D0];
  v48[0] = a1;
  v48[1] = a2;
  *a6 = 0;
  v55 = v57;
  v56 = 0x500000000;
  llvm::StringRef::split((unsigned int *)v48, (unsigned int *)&v55, 44, -1, 1);
  if (!(_DWORD)v56)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_8;
  }
  v14 = llvm::StringRef::trim((uint64_t *)v55, " \t\n\v\f\r", 6);
  v15 = v56;
  *a3 = v14;
  a3[1] = v16;
  if (v15 <= 1)
  {
LABEL_8:
    a4[1] = 0;
    v20 = a4 + 1;
    *a4 = 0;
    goto LABEL_9;
  }
  v17 = llvm::StringRef::trim((uint64_t *)v55 + 2, " \t\n\v\f\r", 6);
  v18 = v56;
  *a4 = v17;
  a4[1] = v19;
  v20 = a4 + 1;
  if (v18 <= 2)
  {
LABEL_9:
    v21 = 0;
    v23 = 0;
    goto LABEL_10;
  }
  v21 = (const void *)llvm::StringRef::trim((uint64_t *)v55 + 4, " \t\n\v\f\r", 6);
  v23 = v22;
  if (v56 <= 3)
  {
LABEL_10:
    v26 = 0;
    v29 = 0;
    v27 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_11;
  }
  v24 = llvm::StringRef::trim((uint64_t *)v55 + 6, " \t\n\v\f\r", 6);
  v26 = v25;
  v46 = v24;
  v47 = v25;
  if (v56 < 5)
  {
    v29 = 0;
    v27 = 0;
  }
  else
  {
    v27 = llvm::StringRef::trim((uint64_t *)v55 + 8, " \t\n\v\f\r", 6);
    v29 = v28;
  }
LABEL_11:
  *(_QWORD *)&v45 = v27;
  *((_QWORD *)&v45 + 1) = v29;
  if (!*v20)
  {
    getErrorErrorCat();
    v52 = (void *)3;
    v53 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    v30 = "mach-o section specifier requires a segment and section separated by a comma";
LABEL_15:
    v50 = (uint64_t)v30;
    v31 = a8;
LABEL_16:
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v50, (uint64_t *)&v52, v31);
    goto LABEL_17;
  }
  if (*v20 >= 0x11uLL)
  {
    getErrorErrorCat();
    v52 = (void *)3;
    v53 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    v30 = "mach-o section specifier requires a section whose length is between 1 and 16 characters";
    goto LABEL_15;
  }
  *a5 = 0;
  *a7 = 0;
  if (!v23)
  {
    *a8 = 0;
    goto LABEL_17;
  }
  v44 = a7;
  v32 = 0;
  v33 = 0;
  while (v23 != (&SectionTypeDescriptors)[v32 + 1] || memcmp(v21, (&SectionTypeDescriptors)[v32], (size_t)v23))
  {
    --v33;
    v32 += 4;
    if (v32 == 92)
    {
      getErrorErrorCat();
      v52 = (void *)3;
      v53 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      v34 = "mach-o section specifier uses an unknown section type";
LABEL_26:
      v50 = (uint64_t)v34;
      v31 = a8;
      goto LABEL_16;
    }
  }
  *a5 = -v33;
  *a6 = 1;
  if (v26)
  {
    v52 = v54;
    v53 = 0x100000000;
    llvm::StringRef::split((unsigned int *)&v46, (unsigned int *)&v52, 43, -1, 0);
    if ((_DWORD)v53)
    {
      v36 = (uint64_t *)v52;
      v37 = (uint64_t *)((char *)v52 + 16 * v53);
      do
      {
        v38 = 0;
        while (1)
        {
          v39 = (const void *)llvm::StringRef::trim(v36, " \t\n\v\f\r", 6);
          v40 = *(_QWORD *)&SectionAttrDescriptors[v38 + 4];
          if (v41 == v40 && (!v40 || !memcmp(v39, *(const void **)&SectionAttrDescriptors[v38 + 2], v40)))
            break;
          v38 += 10;
          if (v38 == 110)
          {
            getErrorErrorCat();
            v50 = 3;
            v51 = &getErrorErrorCat(void)::ErrorErrorCat;
            v43 = "mach-o section specifier has invalid attribute";
            goto LABEL_40;
          }
        }
        v42 = *a5 | SectionAttrDescriptors[v38];
        *a5 = v42;
        v36 += 2;
      }
      while (v36 != v37);
    }
    else
    {
      v42 = *a5;
    }
    if (v29)
    {
      if (v42 != 8)
      {
        getErrorErrorCat();
        v50 = 3;
        v51 = &getErrorErrorCat(void)::ErrorErrorCat;
        v43 = "mach-o section specifier cannot have a stub size specified because it does not have type 'symbol_stubs'";
        goto LABEL_40;
      }
      if (llvm::StringRef::getAsInteger<unsigned int>(&v45, 0, v44, v35))
      {
        getErrorErrorCat();
        v50 = 3;
        v51 = &getErrorErrorCat(void)::ErrorErrorCat;
        v43 = "mach-o section specifier has a malformed stub size";
LABEL_40:
        v49 = (llvm::formatv_object_base *)v43;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v49, &v50, a8);
        goto LABEL_41;
      }
    }
    else if (v42 == 8)
    {
      getErrorErrorCat();
      v50 = 3;
      v51 = &getErrorErrorCat(void)::ErrorErrorCat;
      v43 = "mach-o section specifier of type 'symbol_stubs' requires a size specifier";
      goto LABEL_40;
    }
    *a8 = 0;
LABEL_41:
    if (v52 != v54)
      free(v52);
    goto LABEL_17;
  }
  if (v33 == -8)
  {
    getErrorErrorCat();
    v52 = (void *)3;
    v53 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    v34 = "mach-o section specifier of type 'symbol_stubs' requires a size specifier";
    goto LABEL_26;
  }
  *a8 = 0;
LABEL_17:
  if (v55 != v57)
    free(v55);
}

uint64_t llvm::StringRef::getAsInteger<unsigned int>(__int128 *a1, llvm::StringRef *a2, _DWORD *a3, unint64_t *a4)
{
  char v5;
  uint64_t result;
  unint64_t v7;
  __int128 v8;

  v7 = 0;
  v8 = *a1;
  v5 = llvm::consumeUnsignedInteger((llvm *)&v8, a2, &v7, a4);
  result = 1;
  if ((v5 & 1) == 0 && !*((_QWORD *)&v8 + 1) && !HIDWORD(v7))
  {
    result = 0;
    *a3 = v7;
  }
  return result;
}

void llvm::MCSectionWasm::printSwitchToSection(uint64_t a1, _BYTE **a2, uint64_t a3, llvm::raw_ostream *a4, uint64_t a5)
{
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  _WORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  char v21;
  llvm::raw_ostream *v22;
  char v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  int64_t v27;
  _QWORD *v28;
  int64_t v29;
  _DWORD *v30;
  void *v31;
  _BYTE *v32;

  if (!(*((unsigned int (**)(_BYTE **, _QWORD, _QWORD))*a2 + 8))(a2, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208)))
  {
    v10 = *((_QWORD *)a4 + 4);
    if ((unint64_t)(*((_QWORD *)a4 + 3) - v10) > 9)
    {
      *(_WORD *)(v10 + 8) = 2414;
      *(_QWORD *)v10 = *(_QWORD *)"\t.section\t";
      *((_QWORD *)a4 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a4, "\t.section\t", 0xAuLL);
    }
    printName(a4, *(unsigned __int8 **)(a1 + 200), *(_QWORD *)(a1 + 208));
    v12 = (_WORD *)*((_QWORD *)a4 + 4);
    if (*((_QWORD *)a4 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 8748;
      *((_QWORD *)a4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a4, ",\"", 2uLL);
    }
    if (*(_BYTE *)(a1 + 252))
    {
      v13 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 112);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v13 + 1;
        *v13 = 112;
      }
    }
    if (*(_QWORD *)(a1 + 232))
    {
      v14 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 71);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v14 + 1;
        *v14 = 71;
      }
    }
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    {
      v15 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 83);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v15 + 1;
        *v15 = 83;
      }
    }
    if ((*(_BYTE *)(a1 + 256) & 2) != 0)
    {
      v16 = (_BYTE *)*((_QWORD *)a4 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 84);
      }
      else
      {
        *((_QWORD *)a4 + 4) = v16 + 1;
        *v16 = 84;
      }
    }
    v17 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 34);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v17 + 1;
      *v17 = 34;
    }
    v18 = (_BYTE *)*((_QWORD *)a4 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 44);
    }
    else
    {
      *((_QWORD *)a4 + 4) = v18 + 1;
      *v18 = 44;
    }
    v20 = *((_QWORD *)a4 + 3);
    v19 = (char *)*((_QWORD *)a4 + 4);
    if (*a2[6] == 64)
    {
      if ((unint64_t)v19 < v20)
      {
        *((_QWORD *)a4 + 4) = v19 + 1;
        v21 = 37;
LABEL_42:
        *v19 = v21;
LABEL_46:
        v24 = (_BYTE *)*((_QWORD *)a4 + 4);
        if (*(_QWORD *)(a1 + 232))
        {
          if (*((_BYTE **)a4 + 3) == v24)
          {
            llvm::raw_ostream::write(a4, ",", 1uLL);
          }
          else
          {
            *v24 = 44;
            ++*((_QWORD *)a4 + 4);
          }
          v25 = *(_BYTE **)(a1 + 232);
          if ((*v25 & 4) != 0)
          {
            v28 = (_QWORD *)*((_QWORD *)v25 - 1);
            v29 = *v28;
            v26 = (unsigned __int8 *)(v28 + 2);
            v27 = v29;
          }
          else
          {
            v26 = 0;
            v27 = 0;
          }
          printName(a4, v26, v27);
          v30 = (_DWORD *)*((_QWORD *)a4 + 4);
          if (*((_QWORD *)a4 + 3) - (_QWORD)v30 > 6uLL)
          {
            *(_DWORD *)((char *)v30 + 3) = 1952539757;
            *v30 = 1836016428;
            v24 = (_BYTE *)(*((_QWORD *)a4 + 4) + 7);
            *((_QWORD *)a4 + 4) = v24;
          }
          else
          {
            llvm::raw_ostream::write(a4, ",comdat", 7uLL);
            v24 = (_BYTE *)*((_QWORD *)a4 + 4);
          }
        }
        if (*(_DWORD *)(a1 + 224) != -1)
        {
          if (*((_QWORD *)a4 + 3) - (_QWORD)v24 > 7uLL)
          {
            *(_QWORD *)v24 = 0x2C657571696E752CLL;
            *((_QWORD *)a4 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a4, ",unique,", 8uLL);
          }
          write_unsigned<unsigned long>(a4, *(unsigned int *)(a1 + 224), 0, 0, 0);
          v24 = (_BYTE *)*((_QWORD *)a4 + 4);
        }
        if ((unint64_t)v24 >= *((_QWORD *)a4 + 3))
        {
          llvm::raw_ostream::write(a4, 10);
          if (!a5)
            return;
        }
        else
        {
          *((_QWORD *)a4 + 4) = v24 + 1;
          *v24 = 10;
          if (!a5)
            return;
        }
        v31 = (void *)*((_QWORD *)a4 + 4);
        if (*((_QWORD *)a4 + 3) - (_QWORD)v31 > 0xCuLL)
        {
          qmemcpy(v31, "\t.subsection\t", 13);
          *((_QWORD *)a4 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(a4, "\t.subsection\t", 0xDuLL);
        }
        goto LABEL_68;
      }
      v22 = a4;
      v23 = 37;
    }
    else
    {
      if ((unint64_t)v19 < v20)
      {
        *((_QWORD *)a4 + 4) = v19 + 1;
        v21 = 64;
        goto LABEL_42;
      }
      v22 = a4;
      v23 = 64;
    }
    llvm::raw_ostream::write(v22, v23);
    goto LABEL_46;
  }
  v9 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 9);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v9 + 1;
    *v9 = 9;
  }
  llvm::raw_ostream::operator<<(a4, *(const void **)(a1 + 200), *(_QWORD *)(a1 + 208));
  if (!a5)
    goto LABEL_69;
  v11 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 9);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v11 + 1;
    *v11 = 9;
  }
LABEL_68:
  llvm::MCExpr::print(a5);
LABEL_69:
  v32 = (_BYTE *)*((_QWORD *)a4 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 10);
  }
  else
  {
    *((_QWORD *)a4 + 4) = v32 + 1;
    *v32 = 10;
  }
}

uint64_t llvm::MCSectionWasm::useCodeAlign(llvm::MCSectionWasm *this)
{
  return 0;
}

uint64_t llvm::MCSectionWasm::isVirtualSection(llvm::MCSectionWasm *this)
{
  return 0;
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printCsectDirective(llvm::MCSectionXCOFF *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  const void *v6;
  size_t v7;
  size_t *v8;
  size_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *result;
  _BYTE *v14;

  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 7uLL)
  {
    *v4 = 0x2074636573632E09;
    *((_QWORD *)a2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a2, "\t.csect ", 8uLL);
  }
  v5 = (_BYTE *)*((_QWORD *)this + 29);
  if ((*v5 & 4) != 0)
  {
    v8 = (size_t *)*((_QWORD *)v5 - 1);
    v9 = *v8;
    v6 = v8 + 2;
    v7 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v10 = llvm::raw_ostream::operator<<(a2, v6, v7);
  v11 = v10;
  v12 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v12)
  {
    llvm::raw_ostream::write(v10, ",", 1uLL);
  }
  else
  {
    *v12 = 44;
    ++*((_QWORD *)v10 + 4);
  }
  result = write_unsigned<unsigned long>(v11, *((unsigned __int8 *)this + 24), 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)v11 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v11 + 3))
    return llvm::raw_ostream::write(v11, 10);
  *((_QWORD *)v11 + 4) = v14 + 1;
  *v14 = 10;
  return result;
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printSwitchToSection(llvm::raw_ostream *this, uint64_t a2, int a3, llvm::raw_ostream *a4)
{
  llvm::raw_ostream *v5;
  int v6;
  char *v7;
  int v9;
  unsigned int v11;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  _BYTE *v19;
  _QWORD v20[2];
  int v21;

  v5 = this;
  v6 = *((unsigned __int8 *)this + 220);
  if ((v6 & 0xFE) == 2)
  {
    if (*((_BYTE *)this + 224))
    {
      v7 = "Unhandled storage-mapping class for .text csect";
      goto LABEL_40;
    }
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  }
  if ((v6 & 0xFC) == 8 || (v6 & 0xFC) == 4)
  {
    v9 = *((unsigned __int8 *)this + 224);
    if (v9 != 1 && v9 != 16)
    {
      v7 = "Unhandled storage-mapping class for .rodata csect.";
      goto LABEL_40;
    }
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  }
  if (v6 == 19)
  {
    v11 = *((unsigned __int8 *)this + 224);
    if (v11 <= 0x16)
    {
      if (((1 << v11) & 0x10420) != 0)
        return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
      if (((1 << v11) & 0x400008) != 0)
        return this;
      if (v11 == 15)
        return llvm::raw_ostream::operator<<(a4, "\t.toc\n", 6uLL);
    }
    v7 = "Unhandled storage-mapping class for .data csect.";
    goto LABEL_40;
  }
  if (v6 == 13)
  {
    if (*((_BYTE *)this + 224) != 20)
    {
      v7 = "Unhandled storage-mapping class for .tdata csect.";
      goto LABEL_40;
    }
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  }
  if (!*((_BYTE *)this + 226))
    goto LABEL_27;
  if (*((_BYTE *)this + 224) == 16)
    return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
  if (*((_BYTE *)this + 225) != 3)
  {
LABEL_27:
    if ((v6 & 0xFFFFFFFD) == 0xC)
      return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
    if (!*((_BYTE *)this + 220) && *((_BYTE *)this + 260))
    {
      v13 = llvm::raw_ostream::operator<<(a4, "\n\t.dwsect ", 0xAuLL);
      v14 = *((_QWORD *)v5 + 32);
      v20[0] = &off_251C1D490;
      v20[1] = "0x%x";
      v21 = v14;
      v15 = llvm::raw_ostream::operator<<(v13, (uint64_t)v20);
      v16 = (_BYTE *)*((_QWORD *)v15 + 4);
      if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((_QWORD *)v15 + 4) = v16 + 1;
        *v16 = 10;
      }
      v17 = llvm::raw_ostream::operator<<(a4, *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112));
      this = llvm::raw_ostream::operator<<(v17, *((const void **)v5 + 25), *((_QWORD *)v5 + 26));
      v18 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v18 >= *((_QWORD *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 58);
      }
      else
      {
        *((_QWORD *)this + 4) = v18 + 1;
        *v18 = 58;
      }
      v19 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v19 >= *((_QWORD *)this + 3))
        return llvm::raw_ostream::write(this, 10);
      *((_QWORD *)this + 4) = v19 + 1;
      *v19 = 10;
      return this;
    }
    v7 = "Printing for this SectionKind is unimplemented.";
LABEL_40:
    llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
  }
  return this;
}

BOOL llvm::MCSectionXCOFF::useCodeAlign(llvm::MCSectionXCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

BOOL llvm::MCSectionXCOFF::isVirtualSection(llvm::MCSectionXCOFF *this)
{
  return !*((_BYTE *)this + 260) && *((_BYTE *)this + 225) == 3;
}

uint64_t llvm::format_object<llvm::XCOFF::DwarfSectionSubtypeFlags>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

llvm::MCStreamer *llvm::MCStreamer::MCStreamer(llvm::MCStreamer *this, llvm::MCContext *a2)
{
  _QWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD v8[2];

  *(_QWORD *)this = off_251C1D4B0;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x100000000;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((_QWORD *)this + 18) = (char *)this + 160;
  v3 = (_QWORD *)((char *)this + 144);
  *((_QWORD *)this + 19) = 0x400000000;
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 294) = 0;
  memset(v8, 0, sizeof(v8));
  v4 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>((uint64_t)this + 144, (unint64_t)v8, 1);
  v5 = (_OWORD *)(*v3 + 32 * *((unsigned int *)this + 38));
  v6 = v4[1];
  *v5 = *v4;
  v5[1] = v6;
  ++*((_DWORD *)this + 38);
  return this;
}

void llvm::MCStreamer::~MCStreamer(llvm::MCStreamer *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = off_251C1D4B0;
  v2 = (char *)*((_QWORD *)this + 18);
  if (v2 != (char *)this + 160)
    free(v2);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 15), 8);
  v5 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__destroy_vector::operator()[abi:nn180100](&v5);
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 != (char *)this + 64)
    free(v3);
  v5 = (void **)((char *)this + 24);
  std::vector<llvm::MCDwarfFrameInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

__n128 llvm::MCStreamer::reset(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __n128 result;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];

  v3 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 88;
      *(_QWORD *)&v24[0] = v2 - 56;
      std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100]((void ***)v24);
      v2 = v4;
    }
    while (v4 != v3);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 13) = 0;
  std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 80, v5);
  v6 = (_QWORD *)((char *)this + 120);
  v7 = *((_DWORD *)this + 32);
  if (v7)
  {
    v8 = *((_DWORD *)this + 34);
    if (v8 > 4 * v7 && v8 >= 0x41)
    {
      v9 = 1 << (33 - __clz(v7 - 1));
      if (v9 <= 64)
        v10 = 64;
      else
        v10 = v9;
LABEL_12:
      if (v10 == v8)
      {
        *((_QWORD *)this + 16) = 0;
        v11 = 16 * v8;
        v12 = (_QWORD *)*((_QWORD *)this + 15);
        do
        {
          *v12 = -4096;
          v12 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      else
      {
        MEMORY[0x24BD1B398](*v6, 8);
        if (v10)
        {
          v19 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
          v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
          LODWORD(v20) = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
          *((_DWORD *)this + 34) = v20;
          v21 = operator new(16 * v20, (std::align_val_t)8uLL);
          *((_QWORD *)this + 15) = v21;
          *((_QWORD *)this + 16) = 0;
          v22 = *((unsigned int *)this + 34);
          if ((_DWORD)v22)
          {
            v23 = 16 * v22;
            do
            {
              *v21 = -4096;
              v21 += 2;
              v23 -= 16;
            }
            while (v23);
          }
        }
        else
        {
          *v6 = 0;
          *((_QWORD *)this + 16) = 0;
          *((_DWORD *)this + 34) = 0;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 33))
      goto LABEL_20;
    v8 = *((_DWORD *)this + 34);
    if (v8 > 0x40)
    {
      v10 = 0;
      goto LABEL_12;
    }
  }
  if (v8)
  {
    v13 = (_QWORD *)*v6;
    v14 = 16 * v8;
    do
    {
      *v13 = -4096;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  *((_QWORD *)this + 16) = 0;
LABEL_20:
  *((_DWORD *)this + 38) = 0;
  memset(v24, 0, sizeof(v24));
  v15 = llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>((uint64_t)this + 144, (unint64_t)v24, 1);
  v16 = (_OWORD *)(*((_QWORD *)this + 18) + 32 * *((unsigned int *)this + 38));
  result = *(__n128 *)v15;
  v18 = *(_OWORD *)(v15 + 16);
  *v16 = *(_OWORD *)v15;
  v16[1] = v18;
  ++*((_DWORD *)this + 38);
  return result;
}

uint64_t llvm::MCStreamer::emitIntValue(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)this + 488))();
}

void llvm::MCStreamer::emitIntValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *LimitedValue;
  size_t v6;
  unint64_t v7;
  uint64_t ***v8;
  uint64_t **v9;
  unsigned int v10;
  void *__dst;
  __int128 v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 8);
  if (((v4 + 63) & 0x1FFFFFFC0) == 0x40)
  {
    LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)a2, 0xFFFFFFFFFFFFFFFFLL);
    (*(void (**)(_QWORD *, uint64_t *, _QWORD))(*a1 + 512))(a1, LimitedValue, *(_DWORD *)(a2 + 8) >> 3);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[1] + 144) + 16))
    {
      v10 = *(_DWORD *)(a2 + 8);
      if (v4 > 0x40)
      {
        v6 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
        v9 = (uint64_t **)operator new[]();
        memcpy(v9, *(const void **)a2, v6);
      }
      else
      {
        v9 = *(uint64_t ***)a2;
      }
    }
    else
    {
      llvm::APInt::byteSwap((llvm::APInt *)a2, (llvm::APInt *)&v9);
    }
    v7 = (unint64_t)*(unsigned int *)(a2 + 8) >> 3;
    __dst = v13;
    v12 = xmmword_24AA2B140;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&__dst, v7);
    if (v10 >= 0x41)
      v8 = (uint64_t ***)v9;
    else
      v8 = &v9;
    memcpy(__dst, v8, v7);
    (*(void (**)(_QWORD *, void *, _QWORD))(*a1 + 488))(a1, __dst, v12);
    if (__dst != v13)
      free(__dst);
    if (v10 >= 0x41)
    {
      if (v9)
        MEMORY[0x24BD1B380](v9, 0x1000C8000313F17);
    }
  }
}

void llvm::MCStreamer::emitDTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const llvm::Twine *)1);
}

void llvm::MCStreamer::emitDTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const llvm::Twine *)1);
}

void llvm::MCStreamer::emitTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const llvm::Twine *)1);
}

void llvm::MCStreamer::emitTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const llvm::Twine *)1);
}

void llvm::MCStreamer::emitGPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const llvm::Twine *)1);
}

void llvm::MCStreamer::emitGPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
  llvm::report_fatal_error((llvm *)"unsupported directive in streamer", (const llvm::Twine *)1);
}

void llvm::MCStreamer::tryEmitDwarfFileDirective(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *a7;
  v14 = *((_BYTE *)a7 + 16);
  v11 = *a8;
  v12 = *((_QWORD *)a8 + 2);
  llvm::MCContext::getDwarfFile(v10, a3, a4, a5, a6, a2, (uint64_t)&v13, (uint64_t)&v11, a9, a10);
}

double llvm::MCStreamer::emitDwarfFile0Directive(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, __int128 *a6, __n128 *a7, unsigned int a8)
{
  uint64_t v8;
  __n128 v10;
  unint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v12 = *a6;
  v13 = *((_BYTE *)a6 + 16);
  v10 = *a7;
  v11 = a7[1].n128_u64[0];
  return llvm::MCContext::setMCLineTableRootFile(v8, a8, a2, a3, a4, a5, (uint64_t)&v12, &v10);
}

uint64_t llvm::MCStreamer::emitCFIBKeyFrame(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t llvm::MCStreamer::getCurrentDwarfFrameInfo(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v2 = *((unsigned int *)this + 14);
  if ((_DWORD)v2)
    return *((_QWORD *)this + 3) + 88 * *(_QWORD *)(*((_QWORD *)this + 6) + 16 * v2 - 16);
  v4 = *((_QWORD *)this + 1);
  v5 = (uint64_t *)*((_QWORD *)this + 36);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
  v8 = 259;
  llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  return 0;
}

uint64_t llvm::MCStreamer::emitCFIMTETaggedFrame(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_BYTE *)(result + 81) = 1;
  return result;
}

uint64_t llvm::MCStreamer::emitDwarfLocDirective(uint64_t result, int a2, int a3, __int16 a4, char a5, char a6, int a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v7 + 1584) = a2;
  *(_DWORD *)(v7 + 1588) = a3;
  *(_WORD *)(v7 + 1592) = a4;
  *(_BYTE *)(v7 + 1594) = a5;
  *(_BYTE *)(v7 + 1595) = a6;
  *(_DWORD *)(v7 + 1596) = a7;
  *(_BYTE *)(v7 + 1600) = 1;
  return result;
}

unint64_t llvm::MCStreamer::getDwarfLineTableSymbol(llvm::MCStreamer *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t **v5;
  unint64_t result;
  llvm::MCContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  _DWORD *v13[4];
  __int16 v14;

  v4 = *((_QWORD *)this + 1);
  LODWORD(v11[0]) = a2;
  v13[0] = v11;
  v5 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v4 + 1560), (unsigned int *)v11, (uint64_t)&std::piecewise_construct, v13);
  result = (unint64_t)v5[5];
  if (!result)
  {
    v7 = (llvm::MCContext *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)v7 + 18);
    v10 = *(_QWORD *)(v8 + 88);
    v9 = *(_QWORD *)(v8 + 96);
    v12 = 773;
    v11[0] = v10;
    v11[1] = v9;
    v11[2] = "line_table_start";
    v13[0] = v11;
    v13[2] = (_DWORD *)a2;
    v14 = 2050;
    result = llvm::MCContext::getOrCreateSymbol(v7, (const llvm::Twine *)v13);
    v5[5] = (uint64_t *)result;
  }
  return result;
}

BOOL llvm::MCStreamer::emitCVFileDirective(uint64_t a1, unsigned int a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  llvm::CodeViewContext *CVContext;

  CVContext = llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  return llvm::CodeViewContext::addFile((uint64_t)CVContext, a1, a2, a3, a4, a5, a6, a7);
}

BOOL llvm::MCStreamer::emitCVFuncIdDirective(llvm::MCContext **this, unsigned int a2)
{
  llvm::CodeViewContext *CVContext;

  CVContext = llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::recordFunctionId(CVContext, a2);
}

BOOL llvm::MCStreamer::emitCVInlineSiteIdDirective(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7)
{
  llvm::CodeViewContext *CVContext;
  uint64_t v15;
  llvm::CodeViewContext *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;

  CVContext = llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  v15 = *((_QWORD *)CVContext + 29);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)CVContext + 30) - v15) >> 4) > a3 && *(_DWORD *)(v15 + 48 * a3))
  {
    v16 = llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
    return llvm::CodeViewContext::recordInlinedCallSiteId(v16, a2, a3, a4, a5, a6);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = "parent function id not introduced by .cv_func_id or .cv_inline_site_id";
    v20 = 259;
    llvm::MCContext::reportError(v18, a7, (uint64_t)&v19);
    return 1;
  }
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA331B0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 0xAuLL);
  *(_WORD *)v8 = 4421;
  *(_QWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA331B0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 0xAuLL);
  *(_WORD *)v8 = 4419;
  *(_QWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA331B0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 6uLL);
  *(_WORD *)v8 = 4417;
  *(_DWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

{
  void *v8;
  __int128 v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA331B0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 6uLL);
  *(_WORD *)v8 = 4418;
  *(_DWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10)
    free(v8);
}

uint64_t llvm::MCStreamer::initSections(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, *(_QWORD *)(*(_QWORD *)(a1[1] + 160) + 24), 0);
}

_QWORD *llvm::MCStreamer::emitLabel(uint64_t a1, llvm::MCSymbol *this, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v6 = *((_DWORD *)this + 2);
  if ((v6 & 2) != 0)
  {
    if ((*((_DWORD *)this + 2) & 0x3800) == 0x1000)
    {
      *((_QWORD *)this + 3) = 0;
      v6 &= 0xFFFFC7FF;
    }
    *(_QWORD *)this &= 7uLL;
    *((_DWORD *)this + 2) = v6 & 0xFFFFFFFD;
  }
  llvm::MCSymbol::getFragment(this, 1);
  if (v7 || (*((_DWORD *)this + 2) & 0x3800) == 0x1000)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)this & 4) != 0)
    {
      v11 = (uint64_t *)*((_QWORD *)this - 1);
      v12 = *v11;
      v9 = v11 + 2;
      v10 = v12;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v16[0] = "symbol '";
    v16[2] = v9;
    v16[3] = v10;
    v17 = 1283;
    v18[0] = v16;
    v18[2] = "' is already defined";
    v19 = 770;
    return llvm::MCContext::reportError(v8, a3, (uint64_t)v18);
  }
  else
  {
    v14 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v14)
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v14 - 32);
    else
      v15 = 0;
    *(_QWORD *)this = *(_QWORD *)this & 7 | (v15 + 48);
    result = *(_QWORD **)(a1 + 16);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, llvm::MCSymbol *))(*result + 16))(result, this);
  }
  return result;
}

void llvm::MCStreamer::emitCFIStartProc(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[50];
  void **v45;

  v4 = (unsigned int *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int *)(a1 + 152);
    v7 = (_DWORD)v6 ? *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v6 - 32) : 0;
    if (v7 == *(_QWORD *)(*(_QWORD *)v4 + 16 * v5 - 8))
    {
      v28 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v42 = "starting new .cfi frame before finishing the previous one";
      *(_WORD *)v44 = 259;
      llvm::MCContext::reportError(v28, a3, (uint64_t)&v42);
      return;
    }
  }
  memset(v44, 0, 42);
  v42 = 0u;
  v43 = 0u;
  *(_DWORD *)&v44[44] = 0x7FFFFFFF;
  *(_WORD *)&v44[48] = 0;
  v44[41] = a2;
  (**(void (***)(uint64_t, __int128 *))a1)(a1, &v42);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if (v8)
  {
    v9 = *(_DWORD **)(v8 + 448);
    for (i = *(_DWORD **)(v8 + 456); v9 != i; v9 += 20)
    {
      if (*v9 <= 7u && ((1 << *v9) & 0xB0) != 0)
        *(_DWORD *)&v44[24] = v9[4];
    }
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(unsigned int *)(a1 + 152);
  if ((_DWORD)v13)
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v13 - 32);
  else
    v14 = 0;
  v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(_QWORD *)(a1 + 24)) >> 3);
  v16 = *(unsigned int *)(a1 + 56);
  if (v16 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v4, v15, v14);
    v12 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
    *v17 = v15;
    v17[1] = v14;
    *(_DWORD *)(a1 + 56) = v16 + 1;
  }
  v18 = *(_QWORD *)(a1 + 40);
  if (v12 >= v18)
  {
    v22 = *(_QWORD *)(a1 + 24);
    v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v22) >> 3);
    if ((unint64_t)(v23 + 1) > 0x2E8BA2E8BA2E8BALL)
      abort();
    v24 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v18 - v22) >> 3);
    v25 = 2 * v24;
    if (2 * v24 <= v23 + 1)
      v25 = v23 + 1;
    if (v24 >= 0x1745D1745D1745DLL)
      v26 = 0x2E8BA2E8BA2E8BALL;
    else
      v26 = v25;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCDwarfFrameInfo>>(a1 + 40, v26);
    else
      v27 = 0;
    v29 = &v27[88 * v23];
    v30 = &v27[88 * v26];
    v31 = v43;
    *(_OWORD *)v29 = v42;
    *((_OWORD *)v29 + 1) = v31;
    *((_QWORD *)v29 + 5) = 0;
    *((_QWORD *)v29 + 6) = 0;
    *((_QWORD *)v29 + 4) = 0;
    std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>((_QWORD *)v29 + 4, *(__int128 **)v44, *(__int128 **)&v44[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v44[8] - *(_QWORD *)v44) >> 4));
    v32 = *(_OWORD *)&v44[24];
    *(_OWORD *)(v29 + 66) = *(_OWORD *)&v44[34];
    *(_OWORD *)(v29 + 56) = v32;
    v21 = v29 + 88;
    v33 = *(char **)(a1 + 24);
    v34 = *(char **)(a1 + 32);
    if (v34 == v33)
    {
      *(_QWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 32) = v21;
      *(_QWORD *)(a1 + 40) = v30;
      if (!v34)
        goto LABEL_38;
    }
    else
    {
      v35 = 0;
      do
      {
        v36 = &v29[v35];
        v37 = &v34[v35];
        v38 = *(_OWORD *)&v34[v35 - 88];
        *(_OWORD *)(v36 - 72) = *(_OWORD *)&v34[v35 - 72];
        *(_OWORD *)(v36 - 88) = v38;
        *((_QWORD *)v36 - 6) = 0;
        *((_QWORD *)v36 - 5) = 0;
        *((_QWORD *)v36 - 7) = 0;
        *(_OWORD *)(v36 - 56) = *(_OWORD *)&v34[v35 - 56];
        *((_QWORD *)v36 - 5) = *(_QWORD *)&v34[v35 - 40];
        *((_QWORD *)v37 - 7) = 0;
        *((_QWORD *)v37 - 6) = 0;
        *((_QWORD *)v37 - 5) = 0;
        v39 = *(_OWORD *)&v34[v35 - 32];
        *(_OWORD *)(v36 - 22) = *(_OWORD *)&v34[v35 - 22];
        *((_OWORD *)v36 - 2) = v39;
        v35 -= 88;
      }
      while (&v34[v35] != v33);
      v34 = *(char **)(a1 + 24);
      v40 = *(char **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = &v29[v35];
      *(_QWORD *)(a1 + 32) = v21;
      *(_QWORD *)(a1 + 40) = v30;
      if (v40 != v34)
      {
        do
        {
          v41 = v40 - 88;
          v45 = (void **)(v40 - 56);
          std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](&v45);
          v40 = v41;
        }
        while (v41 != v34);
      }
      if (!v34)
        goto LABEL_38;
    }
    operator delete(v34);
  }
  else
  {
    v19 = v43;
    *(_OWORD *)v12 = v42;
    *(_OWORD *)(v12 + 16) = v19;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>((_QWORD *)(v12 + 32), *(__int128 **)v44, *(__int128 **)&v44[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v44[8] - *(_QWORD *)v44) >> 4));
    v20 = *(_OWORD *)&v44[24];
    *(_OWORD *)(v12 + 66) = *(_OWORD *)&v44[34];
    *(_OWORD *)(v12 + 56) = v20;
    v21 = (char *)(v12 + 88);
  }
LABEL_38:
  *(_QWORD *)(a1 + 32) = v21;
  v45 = (void **)v44;
  std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](&v45);
}

uint64_t llvm::MCStreamer::emitCFIEndProc(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)this + 8))(this, result);
    --*((_DWORD *)this + 14);
  }
  return result;
}

void llvm::MCStreamer::emitCFIEndProcImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = 1;
}

uint64_t llvm::MCStreamer::emitCFILabel(llvm::MCStreamer *this)
{
  return 1;
}

void llvm::MCStreamer::emitCFIDefCfa(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v8;
  __int128 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v9) = 7;
  *((_QWORD *)&v9 + 1) = v6;
  v10 = a2;
  v11 = a3;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v15 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v8 = CurrentDwarfFrameInfo;
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v9);
    *(_DWORD *)(v8 + 56) = a2;
  }
}

void std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v8 + 1 > 0x333333333333333)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = (uint64_t)&v12[80 * v8];
    v14 = &v12[80 * v11];
    std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction const&>(v13, a2);
    v7 = v13 + 80;
    v15 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = v13 + v17;
        v19 = &v16[v17];
        v20 = *(_OWORD *)&v16[v17 - 80];
        *(_OWORD *)(v18 - 68) = *(_OWORD *)&v16[v17 - 68];
        *(_OWORD *)(v18 - 80) = v20;
        *(_QWORD *)(v18 - 40) = 0;
        *(_QWORD *)(v18 - 32) = 0;
        *(_QWORD *)(v18 - 48) = 0;
        *(_OWORD *)(v18 - 48) = *(_OWORD *)&v16[v17 - 48];
        *(_QWORD *)(v18 - 32) = *(_QWORD *)&v16[v17 - 32];
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        v21 = *(_OWORD *)&v16[v17 - 24];
        *(_QWORD *)(v18 - 8) = *(_QWORD *)&v16[v17 - 8];
        *(_OWORD *)(v18 - 24) = v21;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        v17 -= 80;
      }
      while (&v16[v17] != v15);
      v16 = (char *)*a1;
      v22 = a1[1];
      *a1 = v13 + v17;
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
      while ((char *)v22 != v16)
      {
        v22 -= 80;
        std::allocator<llvm::MCCFIInstruction>::destroy[abi:nn180100](v5, v22);
      }
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction const&>(a1[1], a2);
    v7 = v6 + 80;
  }
  a1[1] = v7;
}

void llvm::MCStreamer::emitCFIDefCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v6) = 6;
  *((_QWORD *)&v6 + 1) = v4;
  v7 = 0;
  v8 = a2;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
}

void llvm::MCStreamer::emitCFIAdjustCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v6) = 9;
  *((_QWORD *)&v6 + 1) = v4;
  v7 = 0;
  v8 = a2;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
}

void llvm::MCStreamer::emitCFIDefCfaRegister(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v7) = 5;
  *((_QWORD *)&v7 + 1) = v4;
  v8 = a2;
  v9 = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v13 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v7);
    *(_DWORD *)(v6 + 56) = a2;
  }
}

void llvm::MCStreamer::emitCFILLVMDefAspaceCfa(llvm::MCStreamer *this, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v8 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v11) = 4;
  *((_QWORD *)&v11 + 1) = v8;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v10 = CurrentDwarfFrameInfo;
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v11);
    *(_DWORD *)(v10 + 56) = a2;
  }
}

void llvm::MCStreamer::emitCFIOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v8) = 3;
  *((_QWORD *)&v8 + 1) = v6;
  v9 = a2;
  v10 = a3;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v8);
}

void llvm::MCStreamer::emitCFIRelOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v8) = 8;
  *((_QWORD *)&v8 + 1) = v6;
  v9 = a2;
  v10 = a3;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v8);
}

uint64_t llvm::MCStreamer::emitCFIPersonality(llvm::MCStreamer *this, const llvm::MCSymbol *a2, int a3)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    *(_QWORD *)(result + 16) = a2;
    *(_DWORD *)(result + 60) = a3;
  }
  return result;
}

uint64_t llvm::MCStreamer::emitCFILsda(llvm::MCStreamer *this, const llvm::MCSymbol *a2, int a3)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    *(_QWORD *)(result + 24) = a2;
    *(_DWORD *)(result + 64) = a3;
  }
  return result;
}

void llvm::MCStreamer::emitCFIRememberState(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v4) = 1;
  *((_QWORD *)&v4 + 1) = v2;
  v5 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v9 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
}

void llvm::MCStreamer::emitCFIRestoreState(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v4) = 2;
  *((_QWORD *)&v4 + 1) = v2;
  v5 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v9 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
}

void llvm::MCStreamer::emitCFISameValue(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v6) = 0;
  *((_QWORD *)&v6 + 1) = v4;
  v7 = a2;
  v8 = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
}

void llvm::MCStreamer::emitCFIRestore(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v6) = 11;
  *((_QWORD *)&v6 + 1) = v4;
  v7 = a2;
  v8 = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
}

void llvm::MCStreamer::emitCFIEscape(llvm::MCStreamer *a1, const void *a2, size_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  char v15;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)a1 + 80))(a1);
  LODWORD(v9) = 10;
  *((_QWORD *)&v9 + 1) = v6;
  v10 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  if (a3)
  {
    if ((a3 & 0x8000000000000000) != 0)
      abort();
    v7 = (char *)operator new(a3);
    v11 = v7;
    v13 = &v7[a3];
    memmove(v7, a2, a3);
    v12 = &v7[a3];
  }
  else
  {
    v7 = 0;
  }
  v15 = 0;
  v14 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v9);
  if (v7)
    operator delete(v7);
}

void llvm::MCStreamer::emitCFIGnuArgsSize(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v6) = 16;
  *((_QWORD *)&v6 + 1) = v4;
  v7 = 0;
  v8 = a2;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
}

uint64_t llvm::MCStreamer::emitCFISignalFrame(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_BYTE *)(result + 72) = 1;
  return result;
}

void llvm::MCStreamer::emitCFIUndefined(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v6) = 12;
  *((_QWORD *)&v6 + 1) = v4;
  v7 = a2;
  v8 = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v12 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
}

void llvm::MCStreamer::emitCFIRegister(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v8) = 13;
  *((_QWORD *)&v8 + 1) = v6;
  v9 = a2;
  v10 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v8);
}

void llvm::MCStreamer::emitCFIWindowSave(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v4) = 14;
  *((_QWORD *)&v4 + 1) = v2;
  v5 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v9 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
}

void llvm::MCStreamer::emitCFINegateRAState(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t CurrentDwarfFrameInfo;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  LODWORD(v4) = 15;
  *((_QWORD *)&v4 + 1) = v2;
  v5 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v9 = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
}

uint64_t llvm::MCStreamer::emitCFIReturnColumn(llvm::MCStreamer *this, int a2)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    *(_DWORD *)(result + 76) = a2;
  return result;
}

uint64_t llvm::MCStreamer::EnsureValidWinFrameInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const char *v7;
  uint64_t v8;
  const char *v10;
  __int16 v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    v10 = v7;
    v11 = 259;
    llvm::MCContext::reportError(v3, a2, (uint64_t)&v10);
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 104);
  if (!v8 || *(_QWORD *)(v8 + 8))
  {
    v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  return v8;
}

void llvm::MCStreamer::emitWinCFIStartProc(int64x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  int64x2_t v35;
  unint64_t v36;
  int64x2_t *v37;

  v4 = a1->i64[1];
  v5 = *(_QWORD *)(v4 + 144);
  if (*(_DWORD *)(v5 + 420) != 4 || ((v6 = *(_DWORD *)(v5 + 428), v6 != 6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    v34 = ".seh_* directives are not supported on this target";
    LOWORD(v37) = 259;
    llvm::MCContext::reportError(v4, a3, (uint64_t)&v34);
  }
  else
  {
    v9 = a1[6].i64[1];
    if (v9 && !*(_QWORD *)(v9 + 8))
    {
      v34 = "Starting a function before ending the previous one!";
      LOWORD(v37) = 259;
      llvm::MCContext::reportError(v4, a3, (uint64_t)&v34);
    }
    v10 = (*(uint64_t (**)(int64x2_t *))(a1->i64[0] + 80))(a1);
    a1[7].i64[0] = (a1[5].i64[1] - a1[5].i64[0]) >> 3;
    v11 = operator new();
    v12 = v11;
    *(_QWORD *)v11 = v10;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = a2;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_QWORD *)(v11 + 72) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_DWORD *)(v11 + 128) = 0;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    v13 = (uint64_t *)a1[5].i64[1];
    v14 = a1[6].u64[0];
    if ((unint64_t)v13 >= v14)
    {
      v16 = a1[5].i64[0];
      v17 = ((uint64_t)v13 - v16) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      v18 = v14 - v16;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v37 = a1 + 6;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v20);
      else
        v21 = 0;
      v22 = (uint64_t *)(v20 + 8 * v17);
      v23 = v20 + 8 * v21;
      v36 = v23;
      v33 = 0;
      *v22 = v12;
      v15 = v22 + 1;
      v35.i64[1] = (uint64_t)(v22 + 1);
      v25 = (_QWORD *)a1[5].i64[0];
      v24 = (_QWORD *)a1[5].i64[1];
      if (v24 == v25)
      {
        v28 = 0;
        v27 = vdupq_n_s64((unint64_t)v24);
      }
      else
      {
        do
        {
          v26 = *--v24;
          *v24 = 0;
          *--v22 = v26;
        }
        while (v24 != v25);
        v27 = a1[5];
        v15 = (_QWORD *)v35.i64[1];
        v23 = v36;
        v28 = v33;
      }
      a1[5].i64[0] = (uint64_t)v22;
      a1[5].i64[1] = (uint64_t)v15;
      v35 = v27;
      v29 = a1[6].i64[0];
      a1[6].i64[0] = v23;
      v36 = v29;
      v34 = (const char *)v27.i64[0];
      std::__split_buffer<std::unique_ptr<llvm::WinEH::FrameInfo>>::~__split_buffer((uint64_t)&v34);
      a1[5].i64[1] = (uint64_t)v15;
      v33 = 0;
      if (v28)
      {
        std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100]((uint64_t)&v33, v28);
        v15 = (_QWORD *)a1[5].i64[1];
      }
    }
    else
    {
      *v13 = v11;
      v15 = v13 + 1;
      a1[5].i64[1] = (uint64_t)v15;
    }
    v30 = *(v15 - 1);
    a1[6].i64[1] = v30;
    v31 = a1[9].u32[2];
    if ((_DWORD)v31)
      v32 = *(_QWORD *)(a1[9].i64[0] + 32 * v31 - 32);
    else
      v32 = 0;
    *(_QWORD *)(v30 + 56) = v32;
  }
}

uint64_t llvm::MCStreamer::emitWinCFIEndProc(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    v5 = (_QWORD *)result;
    if (*(_QWORD *)(result + 80))
    {
      v6 = a1[1];
      v11 = "Not all chained regions terminated!";
      v12 = 259;
      llvm::MCContext::reportError(v6, a2, (uint64_t)&v11);
    }
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v5[1] = v7;
    if (!v5[2])
      v5[2] = v7;
    v8 = a1[14];
    v9 = a1[11] - a1[10];
    if (v8 != v9 >> 3)
    {
      v10 = v9 >> 3;
      do
        (*(void (**)(_QWORD *, _QWORD))(*a1 + 16))(a1, *(_QWORD *)(a1[10] + 8 * v8++));
      while (v10 != v8);
    }
    return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, v5[7], 0);
  }
  return result;
}

uint64_t llvm::MCStreamer::emitWinCFIFuncletOrFuncEnd(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    v5 = result;
    if (*(_QWORD *)(result + 80))
    {
      v6 = a1[1];
      v7 = "Not all chained regions terminated!";
      v8 = 259;
      llvm::MCContext::reportError(v6, a2, (uint64_t)&v7);
    }
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    *(_QWORD *)(v5 + 16) = result;
  }
  return result;
}

void llvm::MCStreamer::emitWinCFIStartChained(uint64_t a1, uint64_t a2)
{
  uint64_t valid;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  unint64_t v32;
  uint64_t v33;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (valid)
  {
    v4 = valid;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v6 = operator new();
    v7 = v6;
    v8 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = v5;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 32) = v8;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_QWORD *)(v6 + 72) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v6 + 80) = v4;
    *(_OWORD *)(v6 + 116) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    v9 = *(_QWORD *)(a1 + 96);
    v10 = *(uint64_t **)(a1 + 88);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *(_QWORD *)(a1 + 80);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v33 = a1 + 96;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v16);
      else
        v17 = 0;
      v18 = (uint64_t *)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      v32 = v19;
      v29 = 0;
      *v18 = v7;
      v11 = v18 + 1;
      v31.i64[1] = (uint64_t)(v18 + 1);
      v21 = *(_QWORD **)(a1 + 80);
      v20 = *(_QWORD **)(a1 + 88);
      if (v20 == v21)
      {
        v24 = 0;
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          v22 = *--v20;
          *v20 = 0;
          *--v18 = v22;
        }
        while (v20 != v21);
        v23 = *(int64x2_t *)(a1 + 80);
        v11 = (_QWORD *)v31.i64[1];
        v19 = v32;
        v24 = v29;
      }
      *(_QWORD *)(a1 + 80) = v18;
      *(_QWORD *)(a1 + 88) = v11;
      v31 = v23;
      v25 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v19;
      v32 = v25;
      v30 = v23.i64[0];
      std::__split_buffer<std::unique_ptr<llvm::WinEH::FrameInfo>>::~__split_buffer((uint64_t)&v30);
      *(_QWORD *)(a1 + 88) = v11;
      v29 = 0;
      if (v24)
      {
        std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100]((uint64_t)&v29, v24);
        v11 = *(_QWORD **)(a1 + 88);
      }
    }
    else
    {
      *v10 = v6;
      v11 = v10 + 1;
      *(_QWORD *)(a1 + 88) = v11;
    }
    v26 = *(v11 - 1);
    *(_QWORD *)(a1 + 104) = v26;
    v27 = *(unsigned int *)(a1 + 152);
    if ((_DWORD)v27)
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32 * v27 - 32);
    else
      v28 = 0;
    *(_QWORD *)(v26 + 56) = v28;
  }
}

_QWORD *llvm::MCStreamer::emitWinCFIEndChained(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  result = (_QWORD *)llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    v5 = result;
    if (result[10])
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      v5[1] = result;
      a1[13] = v5[10];
    }
    else
    {
      v6 = a1[1];
      v7 = "End of a chained region outside a chained region!";
      v8 = 259;
      return llvm::MCContext::reportError(v6, a2, (uint64_t)&v7);
    }
  }
  return result;
}

_QWORD *llvm::MCStreamer::emitWinEHHandler(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;

  result = (_QWORD *)llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a5);
  if (result)
  {
    v11 = result;
    if (result[10])
    {
      v12 = *(_QWORD *)(a1 + 8);
      v14[0] = "Chained unwind areas can't have handlers!";
      v15 = 259;
      return llvm::MCContext::reportError(v12, a5, (uint64_t)v14);
    }
    else
    {
      result[3] = a2;
      if ((a3 & 1) == 0 && (a4 & 1) == 0)
      {
        v13 = *(_QWORD *)(a1 + 8);
        v14[0] = "Don't know what kind of handler this is!";
        v15 = 259;
        result = llvm::MCContext::reportError(v13, a5, (uint64_t)v14);
      }
      if (a3)
        *((_BYTE *)v11 + 72) = 1;
      if (a4)
        *((_BYTE *)v11 + 73) = 1;
    }
  }
  return result;
}

_QWORD *llvm::MCStreamer::emitWinEHHandlerData(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  result = (_QWORD *)llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    if (result[10])
    {
      v5 = *(_QWORD *)(a1 + 8);
      v6 = "Chained unwind areas can't have handlers!";
      v7 = 259;
      return llvm::MCContext::reportError(v5, a2, (uint64_t)&v6);
    }
  }
  return result;
}

void llvm::MCStreamer::emitWinCFIPushReg(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t valid;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  int v26;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (valid)
  {
    v6 = (_QWORD *)valid;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v8 = *(_QWORD *)(a1[1] + 152);
    v26 = a2;
    v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v8 + 160, &v26);
    if (*(_QWORD *)(v8 + 160) + 8 * *(unsigned int *)(v8 + 176) == v9)
      v10 = &v26;
    else
      v10 = (int *)(v9 + 4);
    v11 = *v10;
    v12 = v6[12];
    v13 = v6[13];
    if (v12 >= v13)
    {
      v15 = v6[11];
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v15) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19)
        v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v19);
      else
        v20 = 0;
      v21 = v19 + 24 * v16;
      v22 = v19 + 24 * v20;
      *(_QWORD *)v21 = v7;
      *(_DWORD *)(v21 + 8) = -1;
      *(_DWORD *)(v21 + 12) = v11;
      *(_DWORD *)(v21 + 16) = 0;
      v14 = v21 + 24;
      v24 = (char *)v6[11];
      v23 = (char *)v6[12];
      if (v23 != v24)
      {
        do
        {
          v25 = *(_OWORD *)(v23 - 24);
          *(_DWORD *)(v21 - 8) = *((_DWORD *)v23 - 2);
          *(_OWORD *)(v21 - 24) = v25;
          v21 -= 24;
          v23 -= 24;
        }
        while (v23 != v24);
        v23 = (char *)v6[11];
      }
      v6[11] = v21;
      v6[12] = v14;
      v6[13] = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v12 = v7;
      *(_DWORD *)(v12 + 8) = -1;
      *(_DWORD *)(v12 + 12) = v11;
      *(_DWORD *)(v12 + 16) = 0;
      v14 = v12 + 24;
    }
    v6[12] = v14;
  }
}

void llvm::MCStreamer::emitWinCFISetFrame(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t valid;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD v31[4];
  __int16 v32;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (valid)
  {
    v9 = valid;
    if ((*(_DWORD *)(valid + 76) & 0x80000000) == 0)
    {
      v10 = a1[1];
      v11 = "frame register and offset can be set at most once";
LABEL_8:
      v31[0] = v11;
      v32 = 259;
      llvm::MCContext::reportError(v10, a4, (uint64_t)v31);
      return;
    }
    if ((a3 & 0xF) != 0)
    {
      v10 = a1[1];
      v11 = "offset is not a multiple of 16";
      goto LABEL_8;
    }
    if (a3 >= 0xF1)
    {
      v10 = a1[1];
      v11 = "frame offset must be less than or equal to 240";
      goto LABEL_8;
    }
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v13 = *(_QWORD *)(a1[1] + 152);
    LODWORD(v31[0]) = a2;
    v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v13 + 160, v31);
    if (*(_QWORD *)(v13 + 160) + 8 * *(unsigned int *)(v13 + 176) == v14)
      v15 = (int *)v31;
    else
      v15 = (int *)(v14 + 4);
    v16 = *v15;
    v18 = *(_QWORD *)(v9 + 88);
    v17 = *(_QWORD *)(v9 + 96);
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v18) >> 3);
    *(_DWORD *)(v9 + 76) = v19;
    v20 = *(_QWORD *)(v9 + 104);
    if (v17 >= v20)
    {
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v18) >> 3);
      v23 = 2 * v22;
      if (2 * v22 <= v19 + 1)
        v23 = v19 + 1;
      if (v22 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v23;
      if (v24)
        v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v24);
      else
        v25 = 0;
      v26 = v24 + 24 * v19;
      v27 = v24 + 24 * v25;
      *(_QWORD *)v26 = v12;
      *(_DWORD *)(v26 + 8) = a3;
      *(_DWORD *)(v26 + 12) = v16;
      *(_DWORD *)(v26 + 16) = 3;
      v21 = v26 + 24;
      v29 = *(char **)(v9 + 88);
      v28 = *(char **)(v9 + 96);
      if (v28 != v29)
      {
        do
        {
          v30 = *(_OWORD *)(v28 - 24);
          *(_DWORD *)(v26 - 8) = *((_DWORD *)v28 - 2);
          *(_OWORD *)(v26 - 24) = v30;
          v26 -= 24;
          v28 -= 24;
        }
        while (v28 != v29);
        v28 = *(char **)(v9 + 88);
      }
      *(_QWORD *)(v9 + 88) = v26;
      *(_QWORD *)(v9 + 96) = v21;
      *(_QWORD *)(v9 + 104) = v27;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_QWORD *)v17 = v12;
      *(_DWORD *)(v17 + 8) = a3;
      *(_DWORD *)(v17 + 12) = v16;
      *(_DWORD *)(v17 + 16) = 3;
      v21 = v17 + 24;
    }
    *(_QWORD *)(v9 + 96) = v21;
  }
}

void llvm::MCStreamer::emitWinCFIAllocStack(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t valid;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  const char *v27;
  __int16 v28;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (valid)
  {
    if (!a2)
    {
      v7 = a1[1];
      v8 = "stack allocation size must be non-zero";
      goto LABEL_6;
    }
    if ((a2 & 7) != 0)
    {
      v7 = a1[1];
      v8 = "stack allocation size is not a multiple of 8";
LABEL_6:
      v27 = v8;
      v28 = 259;
      llvm::MCContext::reportError(v7, a3, (uint64_t)&v27);
      return;
    }
    v9 = (_QWORD *)valid;
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v11 = v10;
    if (a2 > 0x80)
      v12 = 1;
    else
      v12 = 2;
    v14 = v9[12];
    v13 = v9[13];
    if (v14 >= v13)
    {
      v16 = v9[11];
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v18;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v20);
      else
        v21 = 0;
      v22 = v20 + 24 * v17;
      v23 = v20 + 24 * v21;
      *(_QWORD *)v22 = v11;
      *(_DWORD *)(v22 + 8) = a2;
      *(_DWORD *)(v22 + 12) = -1;
      *(_DWORD *)(v22 + 16) = v12;
      v15 = v22 + 24;
      v25 = (char *)v9[11];
      v24 = (char *)v9[12];
      if (v24 != v25)
      {
        do
        {
          v26 = *(_OWORD *)(v24 - 24);
          *(_DWORD *)(v22 - 8) = *((_DWORD *)v24 - 2);
          *(_OWORD *)(v22 - 24) = v26;
          v22 -= 24;
          v24 -= 24;
        }
        while (v24 != v25);
        v24 = (char *)v9[11];
      }
      v9[11] = v22;
      v9[12] = v15;
      v9[13] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v14 = v10;
      *(_DWORD *)(v14 + 8) = a2;
      *(_DWORD *)(v14 + 12) = -1;
      *(_DWORD *)(v14 + 16) = v12;
      v15 = v14 + 24;
    }
    v9[12] = v15;
  }
}

void llvm::MCStreamer::emitWinCFISaveReg(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t valid;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD v31[4];
  __int16 v32;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (valid)
  {
    if ((a3 & 7) != 0)
    {
      v9 = a1[1];
      v31[0] = "register save offset is not 8 byte aligned";
      v32 = 259;
      llvm::MCContext::reportError(v9, a4, (uint64_t)v31);
    }
    else
    {
      v10 = (_QWORD *)valid;
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      v12 = *(_QWORD *)(a1[1] + 152);
      LODWORD(v31[0]) = a2;
      v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v12 + 160, v31);
      if (*(_QWORD *)(v12 + 160) + 8 * *(unsigned int *)(v12 + 176) == v13)
        v14 = (int *)v31;
      else
        v14 = (int *)(v13 + 4);
      v15 = *v14;
      if (a3 <= 0x7FFF8)
        v16 = 4;
      else
        v16 = 5;
      v18 = v10[12];
      v17 = v10[13];
      if (v18 >= v17)
      {
        v20 = v10[11];
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v24);
        else
          v25 = 0;
        v26 = v24 + 24 * v21;
        v27 = v24 + 24 * v25;
        *(_QWORD *)v26 = v11;
        *(_DWORD *)(v26 + 8) = a3;
        *(_DWORD *)(v26 + 12) = v15;
        *(_DWORD *)(v26 + 16) = v16;
        v19 = v26 + 24;
        v29 = (char *)v10[11];
        v28 = (char *)v10[12];
        if (v28 != v29)
        {
          do
          {
            v30 = *(_OWORD *)(v28 - 24);
            *(_DWORD *)(v26 - 8) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v26 - 24) = v30;
            v26 -= 24;
            v28 -= 24;
          }
          while (v28 != v29);
          v28 = (char *)v10[11];
        }
        v10[11] = v26;
        v10[12] = v19;
        v10[13] = v27;
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_QWORD *)v18 = v11;
        *(_DWORD *)(v18 + 8) = a3;
        *(_DWORD *)(v18 + 12) = v15;
        v19 = v18 + 24;
        *(_DWORD *)(v18 + 16) = v16;
      }
      v10[12] = v19;
    }
  }
}

void llvm::MCStreamer::emitWinCFISaveXMM(_QWORD *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t valid;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD v31[4];
  __int16 v32;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (valid)
  {
    if ((a3 & 0xF) != 0)
    {
      v9 = a1[1];
      v31[0] = "offset is not a multiple of 16";
      v32 = 259;
      llvm::MCContext::reportError(v9, a4, (uint64_t)v31);
    }
    else
    {
      v10 = (_QWORD *)valid;
      v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      v12 = *(_QWORD *)(a1[1] + 152);
      LODWORD(v31[0]) = a2;
      v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v12 + 160, v31);
      if (*(_QWORD *)(v12 + 160) + 8 * *(unsigned int *)(v12 + 176) == v13)
        v14 = (int *)v31;
      else
        v14 = (int *)(v13 + 4);
      v15 = *v14;
      if (a3 <= 0x7FFF8)
        v16 = 8;
      else
        v16 = 9;
      v18 = v10[12];
      v17 = v10[13];
      if (v18 >= v17)
      {
        v20 = v10[11];
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v24);
        else
          v25 = 0;
        v26 = v24 + 24 * v21;
        v27 = v24 + 24 * v25;
        *(_QWORD *)v26 = v11;
        *(_DWORD *)(v26 + 8) = a3;
        *(_DWORD *)(v26 + 12) = v15;
        *(_DWORD *)(v26 + 16) = v16;
        v19 = v26 + 24;
        v29 = (char *)v10[11];
        v28 = (char *)v10[12];
        if (v28 != v29)
        {
          do
          {
            v30 = *(_OWORD *)(v28 - 24);
            *(_DWORD *)(v26 - 8) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v26 - 24) = v30;
            v26 -= 24;
            v28 -= 24;
          }
          while (v28 != v29);
          v28 = (char *)v10[11];
        }
        v10[11] = v26;
        v10[12] = v19;
        v10[13] = v27;
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_QWORD *)v18 = v11;
        *(_DWORD *)(v18 + 8) = a3;
        *(_DWORD *)(v18 + 12) = v15;
        v19 = v18 + 24;
        *(_DWORD *)(v18 + 16) = v16;
      }
      v10[12] = v19;
    }
  }
}

void llvm::MCStreamer::emitWinCFIPushFrame(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t valid;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  const char *v25;
  __int16 v26;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (valid)
  {
    v7 = (_QWORD *)valid;
    if (*(_QWORD *)(valid + 88) == *(_QWORD *)(valid + 96))
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
      v10 = v9;
      v12 = v7[12];
      v11 = v7[13];
      if (v12 >= v11)
      {
        v14 = v7[11];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        if (v18)
          v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v18);
        else
          v19 = 0;
        v20 = v18 + 24 * v15;
        v21 = v18 + 24 * v19;
        *(_QWORD *)v20 = v10;
        *(_DWORD *)(v20 + 8) = a2;
        *(_QWORD *)(v20 + 12) = 0xAFFFFFFFFLL;
        v13 = v20 + 24;
        v23 = (char *)v7[11];
        v22 = (char *)v7[12];
        if (v22 != v23)
        {
          do
          {
            v24 = *(_OWORD *)(v22 - 24);
            *(_DWORD *)(v20 - 8) = *((_DWORD *)v22 - 2);
            *(_OWORD *)(v20 - 24) = v24;
            v20 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)v7[11];
        }
        v7[11] = v20;
        v7[12] = v13;
        v7[13] = v21;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v12 = v9;
        *(_DWORD *)(v12 + 8) = a2;
        *(_QWORD *)(v12 + 12) = 0xAFFFFFFFFLL;
        v13 = v12 + 24;
      }
      v7[12] = v13;
    }
    else
    {
      v8 = a1[1];
      v25 = "If present, PushMachFrame must be the first UOP";
      v26 = 259;
      llvm::MCContext::reportError(v8, a3, (uint64_t)&v25);
    }
  }
}

uint64_t llvm::MCStreamer::emitWinCFIEndProlog(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    v4 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

void llvm::MCStreamer::emitRawTextImpl()
{
  llvm::report_fatal_error((llvm *)"EmitRawText called on an MCStreamer that doesn't support it (target backend is likely missing an AsmStreamer implementation)", (const llvm::Twine *)1);
}

_QWORD *llvm::MCStreamer::finish(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v3 = a1[4];
  if ((a1[3] == v3 || *(_QWORD *)(v3 - 80)) && ((v4 = a1[11], a1[10] == v4) || *(_QWORD *)(*(_QWORD *)(v4 - 8) + 8)))
  {
    v5 = a1[2];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 1232))(a1);
  }
  else
  {
    v7 = a1[1];
    v8 = "Unfinished frame!";
    v9 = 259;
    return llvm::MCContext::reportError(v7, a2, (uint64_t)&v8);
  }
}

_QWORD *llvm::MCStreamer::maybeEmitDwarf64Mark(_QWORD *this)
{
  _QWORD *v1;
  const char *v2;
  __int16 v3;

  if (*(_BYTE *)(this[1] + 1714) == 1)
  {
    v1 = this;
    v2 = "DWARF64 Mark";
    v3 = 259;
    (*(void (**)(_QWORD *, const char **, uint64_t))(*this + 112))(this, &v2, 1);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v1 + 512))(v1, 0xFFFFFFFFLL, 4);
  }
  return this;
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(llvm::MCStreamer *this, uint64_t a2, const llvm::Twine *a3)
{
  uint64_t v6;

  llvm::MCStreamer::maybeEmitDwarf64Mark(this);
  (*(void (**)(llvm::MCStreamer *, const llvm::Twine *, uint64_t))(*(_QWORD *)this + 112))(this, a3, 1);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 1714))
    v6 = 8;
  else
    v6 = 4;
  return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, a2, v6);
}

unint64_t llvm::MCStreamer::emitDwarfUnitLength(llvm::MCStreamer *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  llvm::MCContext *v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  const llvm::Twine *v10;
  unint64_t TempSymbol;
  llvm::MCContext *v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  const llvm::Twine *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;

  llvm::MCStreamer::maybeEmitDwarf64Mark(this);
  (*(void (**)(llvm::MCStreamer *, const llvm::Twine *, uint64_t))(*(_QWORD *)this + 112))(this, a3, 1);
  v6 = (llvm::MCContext *)*((_QWORD *)this + 1);
  v7 = *((unsigned __int8 *)a2 + 32);
  if (v7 == 1)
  {
    v20 = "_start";
    v8 = 259;
    goto LABEL_5;
  }
  if (!*((_BYTE *)a2 + 32))
  {
    v8 = 256;
LABEL_5:
    v23 = v8;
    goto LABEL_10;
  }
  v9 = *((_QWORD *)a2 + 1);
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v10 = *(const llvm::Twine **)a2;
  }
  else
  {
    LOBYTE(v7) = 2;
    v10 = a2;
  }
  v20 = (const char *)v10;
  v21 = v9;
  v22 = "_start";
  LOBYTE(v23) = v7;
  HIBYTE(v23) = 3;
LABEL_10:
  TempSymbol = llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v20, 1);
  v12 = (llvm::MCContext *)*((_QWORD *)this + 1);
  v13 = *((unsigned __int8 *)a2 + 32);
  if (v13 == 1)
  {
    v20 = "_end";
    v14 = 259;
    goto LABEL_14;
  }
  if (!*((_BYTE *)a2 + 32))
  {
    v14 = 256;
LABEL_14:
    v23 = v14;
    goto LABEL_19;
  }
  v15 = *((_QWORD *)a2 + 1);
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v16 = *(const llvm::Twine **)a2;
  }
  else
  {
    LOBYTE(v13) = 2;
    v16 = a2;
  }
  v20 = (const char *)v16;
  v21 = v15;
  v22 = "_end";
  LOBYTE(v23) = v13;
  HIBYTE(v23) = 3;
LABEL_19:
  v17 = llvm::MCContext::createTempSymbol(v12, (const llvm::Twine *)&v20, 1);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 1714))
    v18 = 8;
  else
    v18 = 4;
  (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)this + 840))(this, v17, TempSymbol, v18);
  (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, TempSymbol, 0);
  return v17;
}

uint64_t llvm::MCStreamer::emitDwarfLineStartLabel(llvm::MCStreamer *this, llvm::MCSymbol *a2)
{
  return (*(uint64_t (**)(llvm::MCStreamer *, llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, a2, 0);
}

uint64_t llvm::MCStreamer::emitAssignment(llvm::MCStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  uint64_t result;

  llvm::MCStreamer::visitUsedExpr(this, a3);
  *((_QWORD *)a2 + 3) = a3;
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFC7FF | 0x1000;
  *(_QWORD *)a2 &= 7uLL;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::MCSymbol *, const llvm::MCExpr **))(*(_QWORD *)result + 24))(result, a2, a3);
  return result;
}

llvm::MCStreamer *llvm::MCStreamer::visitUsedExpr(llvm::MCStreamer *this, const llvm::MCExpr **a2)
{
  llvm::MCStreamer *v3;
  const llvm::MCExpr ***v4;

  v3 = this;
  while (2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0:
        this = (llvm::MCStreamer *)llvm::MCStreamer::visitUsedExpr(v3, a2[2]);
        v4 = (const llvm::MCExpr ***)(a2 + 3);
        goto LABEL_5;
      case 2:
        return (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCStreamer *, const llvm::MCExpr *))(*(_QWORD *)v3 + 56))(v3, a2[2]);
      case 3:
        v4 = (const llvm::MCExpr ***)(a2 + 2);
LABEL_5:
        a2 = *v4;
        continue;
      case 4:
        return (llvm::MCStreamer *)(*((uint64_t (**)(char *, llvm::MCStreamer *))*(a2 - 1) + 7))((char *)a2 - 8, v3);
      default:
        return this;
    }
  }
}

llvm::MCStreamer *llvm::MCStreamer::emitInstruction(llvm::MCStreamer *this, uint64_t a2)
{
  int v2;
  llvm::MCStreamer *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    v4 = this;
    v5 = v2 - 1;
    do
    {
      v6 = v5;
      v7 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(v7 + 16 * v5) == 5)
        this = llvm::MCStreamer::visitUsedExpr(v4, *(const llvm::MCExpr ***)(v7 + 16 * v5 + 8));
      --v5;
    }
    while (v6);
  }
  return this;
}

void llvm::MCStreamer::emitPseudoProbe(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, char a5, _DWORD *a6, unint64_t a7)
{
  uint64_t v14;
  unint64_t TempSymbol;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t **v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD v23[2];
  char v24;
  char v25;
  unint64_t v26;
  __int16 v27;

  v14 = a1[1];
  v23[0] = "tmp";
  v27 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v14, (const llvm::Twine *)v23, 1);
  (*(void (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
  v23[0] = a2;
  v23[1] = a3;
  v24 = a5;
  v25 = a4;
  v26 = TempSymbol;
  v16 = *(char **)(v14 + 1736);
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        v17 = v16;
        v18 = *((_QWORD *)v16 + 4);
        if (v18 <= a7)
          break;
        v16 = *(char **)v17;
        v19 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_9;
      }
      if (v18 >= a7)
        break;
      v16 = (char *)*((_QWORD *)v17 + 1);
      if (!v16)
      {
        v19 = (uint64_t **)(v17 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v19 = (uint64_t **)(v14 + 1736);
    v17 = (char *)(v14 + 1736);
LABEL_9:
    v20 = v17;
    v17 = (char *)operator new(0x78uLL);
    *((_QWORD *)v17 + 4) = a7;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *((_DWORD *)v17 + 18) = 1065353216;
    *((_OWORD *)v17 + 5) = 0u;
    *((_OWORD *)v17 + 6) = 0u;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v20;
    *v19 = (uint64_t *)v17;
    v21 = **(_QWORD **)(v14 + 1728);
    v22 = (uint64_t *)v17;
    if (v21)
    {
      *(_QWORD *)(v14 + 1728) = v21;
      v22 = *v19;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v14 + 1736), v22);
    ++*(_QWORD *)(v14 + 1744);
  }
  llvm::MCPseudoProbeInlineTree::addPseudoProbe((float *)v17 + 10, (uint64_t)v23, a6);
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiff(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  llvm::MCContext *v15;
  unint64_t TempSymbol;
  uint64_t v17;
  unint64_t v18;
  int v19;
  const char *v21;
  __int16 v22;

  v8 = *((_QWORD *)this + 1);
  v9 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8 + 184, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 144) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a2;
  v11 = *((_QWORD *)this + 1);
  v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11 + 184, 24, 3);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 144) + 18) << 16;
  *(_BYTE *)v12 = 2;
  *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = a3;
  v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((_QWORD *)this + 1) + 184, 32, 3);
  *(_BYTE *)v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = (llvm::MCContext *)*((_QWORD *)this + 1);
  if (!*(_BYTE *)(*((_QWORD *)v15 + 18) + 352))
    return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v14, a4, 0);
  v21 = "set";
  v22 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v15, (const llvm::Twine *)&v21, 1);
  (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t))(*(_QWORD *)this + 272))(this, TempSymbol, v14);
  v17 = *((_QWORD *)this + 1);
  v18 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v17 + 184, 24, 3);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 144) + 18) << 16;
  *(_BYTE *)v18 = 2;
  *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = TempSymbol;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v18, a4, 0);
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiffAsULEB128(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  v6 = *((_QWORD *)this + 1);
  v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v6 + 184, 24, 3);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 144) + 18) << 16;
  *(_BYTE *)v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = a2;
  v9 = *((_QWORD *)this + 1);
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v9 + 184, 24, 3);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 144) + 18) << 16;
  *(_BYTE *)v10 = 2;
  *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = a3;
  v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((_QWORD *)this + 1) + 184, 32, 3);
  *(_BYTE *)v12 = 0;
  *(_DWORD *)(v12 + 1) = (*(unsigned __int8 *)(v12 + 4) << 24) | 0x12;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v10;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t))(*(_QWORD *)this + 544))(this, v12);
}

void llvm::MCStreamer::emitXCOFFExceptDirective(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  llvm::report_fatal_error((llvm *)"emitXCOFFExceptDirective is only supported on XCOFF targets", (const llvm::Twine *)1);
}

uint64_t llvm::MCStreamer::emitBinaryData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
}

void llvm::MCStreamer::switchSection(llvm::MCStreamer *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v3;
  llvm::MCSection *v4;
  const llvm::MCExpr *v5;
  uint64_t v10;
  llvm::MCSymbol *v11;
  char v12;

  v3 = *((_QWORD *)this + 18) + 32 * *((unsigned int *)this + 38);
  v4 = *(llvm::MCSection **)(v3 - 32);
  v5 = *(const llvm::MCExpr **)(v3 - 24);
  *(_QWORD *)(v3 - 16) = v4;
  *(_QWORD *)(v3 - 8) = v5;
  if (v4 != a2 || v5 != a3)
  {
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)this + 160))(this);
    v10 = *((_QWORD *)this + 18) + 32 * *((unsigned int *)this + 38);
    *(_QWORD *)(v10 - 32) = a2;
    *(_QWORD *)(v10 - 24) = a3;
    v11 = (llvm::MCSymbol *)*((_QWORD *)a2 + 1);
    if (v11)
    {
      llvm::MCSymbol::isInSection(v11);
      if ((v12 & 1) == 0)
        (*(void (**)(llvm::MCStreamer *, llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, v11, 0);
    }
  }
}

void std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction const&>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _QWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  std::string *v10;
  __int128 v11;

  v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    std::vector<char>::__vallocate[abi:nn180100](v5, v6 - v7);
    v9 = *(char **)(a1 + 40);
    memmove(v9, v7, v8);
    *(_QWORD *)(a1 + 40) = &v9[v8];
  }
  v10 = (std::string *)(a1 + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

void std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 160);
    std::vector<llvm::WinEH::FrameInfo::Segment>::__destroy_vector::operator()[abi:nn180100](&v4);
    v4 = (void **)(a2 + 136);
    std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__destroy_vector::operator()[abi:nn180100](&v4);
    MEMORY[0x24BD1B398](*(_QWORD *)(a2 + 112), 8);
    v3 = *(void **)(a2 + 88);
    if (v3)
    {
      *(_QWORD *)(a2 + 96) = v3;
      operator delete(v3);
    }
    MEMORY[0x24BD1B3A4](a2, 0x1060C40CDDC3B8FLL);
  }
}

void std::vector<llvm::WinEH::FrameInfo::Segment>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v3 = v1[1];
    v4 = **a1;
    if (v3 != v2)
      std::allocator<llvm::WinEH::FrameInfo::Segment>::destroy[abi:nn180100]((uint64_t)(v1 + 2), (uint64_t)v3 - 80);
    v1[1] = v2;
    operator delete(v4);
  }
}

void std::allocator<llvm::WinEH::FrameInfo::Segment>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 56);
  if (v2)
  {
    *(_QWORD *)(a2 + 64) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24BD1B398);
}

void std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::WinEH::FrameInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100](i - 8, v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

llvm::raw_ostream *llvm::MCSymbol::print(_BYTE *a1, llvm::raw_ostream *this, _BYTE *a3)
{
  unsigned __int8 *v5;
  size_t v6;
  _QWORD *v7;
  size_t v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  int v11;
  _WORD *v12;
  llvm::raw_ostream *v13;
  const char *v14;
  _WORD *v15;
  _BYTE *v16;
  _BYTE *v17;

  if ((*a1 & 4) != 0)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 - 1);
    v8 = *v7;
    v5 = (unsigned __int8 *)(v7 + 2);
    v6 = v8;
    if (!a3)
      return llvm::raw_ostream::operator<<(this, v5, v6);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if (!a3)
      return llvm::raw_ostream::operator<<(this, v5, v6);
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(_BYTE *, unsigned __int8 *, size_t))(*(_QWORD *)a3 + 56))(a3, v5, v6);
  if ((_DWORD)result)
    return llvm::raw_ostream::operator<<(this, v5, v6);
  if (!a3[185])
    llvm::report_fatal_error((llvm *)"Symbol name with unsupported characters", (const llvm::Twine *)1);
  v10 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v10 < *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 4) = v10 + 1;
    *v10 = 34;
    if (v6)
      goto LABEL_12;
    goto LABEL_26;
  }
  for (result = llvm::raw_ostream::write(this, 34); v6; --v6)
  {
LABEL_12:
    v11 = *v5;
    if (v11 == 34)
    {
      v15 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 > 1uLL)
      {
        *v15 = 8796;
        goto LABEL_23;
      }
      v13 = this;
      v14 = "\\\"";
    }
    else
    {
      if (v11 != 10)
      {
        v16 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v16 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, v11);
        }
        else
        {
          *((_QWORD *)this + 4) = v16 + 1;
          *v16 = v11;
        }
        goto LABEL_25;
      }
      v12 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 28252;
LABEL_23:
        *((_QWORD *)this + 4) += 2;
        goto LABEL_25;
      }
      v13 = this;
      v14 = "\\n";
    }
    result = llvm::raw_ostream::write(v13, v14, 2uLL);
LABEL_25:
    ++v5;
  }
LABEL_26:
  v17 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v17 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this, 34);
  *((_QWORD *)this + 4) = v17 + 1;
  *v17 = 34;
  return result;
}

void llvm::SubtargetFeatures::Split(char **a1, uint64_t a2, uint64_t a3)
{
  const void **v4;
  const void **v5;
  size_t v6;
  const void *v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char v24;
  char *v25;
  std::string *v26;
  __int128 __dst;
  unint64_t v28;
  _QWORD v29[2];
  std::__split_buffer<std::string> v30;
  void *v31;
  std::vector<std::string>::size_type __n;
  _QWORD v33[8];

  v33[6] = *MEMORY[0x24BDAC8D0];
  v29[0] = a2;
  v29[1] = a3;
  v31 = v33;
  __n = 0x300000000;
  llvm::StringRef::split((unsigned int *)v29, (unsigned int *)&v31, 44, -1, 0);
  std::vector<std::string>::reserve((std::vector<std::string> *)a1, __n);
  v4 = (const void **)v31;
  if (!(_DWORD)__n)
    goto LABEL_31;
  v5 = (const void **)((char *)v31 + 16 * __n);
  do
  {
    v6 = (size_t)v4[1];
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_34:
      abort();
    v7 = *v4;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      p_dst = (__int128 *)operator new(v9 + 1);
      *((_QWORD *)&__dst + 1) = v6;
      v28 = v10 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_10:
      memmove(p_dst, v7, v6);
      goto LABEL_11;
    }
    HIBYTE(v28) = v4[1];
    p_dst = &__dst;
    if (v6)
      goto LABEL_10;
LABEL_11:
    *((_BYTE *)p_dst + v6) = 0;
    v12 = (unint64_t)a1[1];
    v11 = (unint64_t)a1[2];
    if (v12 >= v11)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)*a1) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_34;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)*a1) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v30.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[24 * v13];
      *((_QWORD *)v18 + 2) = v28;
      *(_OWORD *)v18 = __dst;
      v28 = 0;
      __dst = 0uLL;
      v20 = *a1;
      v19 = (unint64_t)a1[1];
      if ((char *)v19 == *a1)
      {
        v24 = 0;
        v23 = vdupq_n_s64(v19);
        v21 = v18;
      }
      else
      {
        v21 = &v17[24 * v13];
        do
        {
          v22 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v21 - 1) = *(_QWORD *)(v19 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(_QWORD *)(v19 - 16) = 0;
          *(_QWORD *)(v19 - 8) = 0;
          *(_QWORD *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while ((char *)v19 != v20);
        v23 = *(int64x2_t *)a1;
        v24 = HIBYTE(v28);
      }
      v25 = v18 + 24;
      *a1 = v21;
      a1[1] = v18 + 24;
      *(int64x2_t *)&v30.__begin_ = v23;
      v26 = (std::string *)a1[2];
      a1[2] = &v17[24 * v16];
      v30.__end_cap_.__value_ = v26;
      v30.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v30);
      a1[1] = v25;
      if (v24 < 0)
        operator delete((void *)__dst);
    }
    else
    {
      *(_OWORD *)v12 = __dst;
      *(_QWORD *)(v12 + 16) = v28;
      a1[1] = (char *)(v12 + 24);
    }
    v4 += 2;
  }
  while (v4 != v5);
  v4 = (const void **)v31;
LABEL_31:
  if (v4 != v33)
    free(v4);
}

void llvm::SubtargetFeatures::AddFeature(char **a1, char *a2, unint64_t a3, int a4)
{
  int v5;
  const std::string::value_type *v6;
  std::string *v7;
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::string *v25;
  int v26;
  std::string v27;
  void *__p[2];
  std::string::size_type v29;
  std::__split_buffer<std::string> v30;

  if (a3)
  {
    v5 = *a2;
    if (v5 == 45 || v5 == 43)
    {
      std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(__p, a2, (uint64_t (*)(_QWORD))llvm::toLower, &a2[a3], (uint64_t)llvm::toLower, a3);
    }
    else
    {
      if (a4)
        v6 = "+";
      else
        v6 = "-";
      std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(&v27, a2, (uint64_t (*)(_QWORD))llvm::toLower, &a2[a3], (uint64_t)llvm::toLower, a3);
      v7 = std::string::insert(&v27, 0, v6);
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v29 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
    }
    v9 = (unint64_t)a1[2];
    v10 = (unint64_t)a1[1];
    if (v10 >= v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      v30.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = *(_OWORD *)__p;
      *((_QWORD *)v17 + 2) = v29;
      *(_OWORD *)v17 = v18;
      __p[1] = 0;
      v29 = 0;
      __p[0] = 0;
      v20 = *a1;
      v19 = (unint64_t)a1[1];
      if ((char *)v19 == *a1)
      {
        v23 = vdupq_n_s64(v19);
        v21 = &v16[24 * v12];
      }
      else
      {
        v21 = &v16[24 * v12];
        do
        {
          v22 = *(_OWORD *)(v19 - 24);
          *((_QWORD *)v21 - 1) = *(_QWORD *)(v19 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(_QWORD *)(v19 - 16) = 0;
          *(_QWORD *)(v19 - 8) = 0;
          *(_QWORD *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while ((char *)v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v24 = v17 + 24;
      *a1 = v21;
      a1[1] = v17 + 24;
      *(int64x2_t *)&v30.__begin_ = v23;
      v25 = (std::string *)a1[2];
      a1[2] = &v16[24 * v15];
      v30.__end_cap_.__value_ = v25;
      v30.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v30);
      v26 = SHIBYTE(v29);
      a1[1] = v24;
      if (v26 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v10 + 16) = v29;
      *(_OWORD *)v10 = v11;
      __p[1] = 0;
      v29 = 0;
      __p[0] = 0;
      a1[1] = (char *)(v10 + 24);
    }
    if (v5 != 43 && v5 != 45 && SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:nn180100]<std::string const*,std::string const*>(std::string **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  std::string *v9;
  std::allocator<std::string> *v11;
  std::string *v12;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  std::string *v21;
  std::string *v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  std::string *v34;
  std::string *v35;
  char *v36;
  std::string *v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string *v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string *v49;
  std::__split_buffer<std::string> v51;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 24;
  v7 = &(*a1)[v6];
  if (a5 < 1)
    return v7;
  v9 = __str;
  v13 = a1[2];
  v11 = (std::allocator<std::string> *)(a1 + 2);
  v12 = v13;
  v14 = *((_QWORD *)v11 - 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v14) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v7) >> 3)) >= a5)
    {
      v21 = &__str[a5];
      v22 = (std::string *)*((_QWORD *)v11 - 1);
    }
    else
    {
      v21 = (std::string *)((char *)__str + 8 * ((uint64_t)(v14 - (_QWORD)v7) >> 3));
      v22 = (std::string *)*((_QWORD *)v11 - 1);
      if (v21 != a4)
      {
        v23 = &__str->__r_.__value_.__s.__data_[8 * ((uint64_t)(v14 - (_QWORD)v7) >> 3)];
        v24 = (std::string *)*((_QWORD *)v11 - 1);
        do
        {
          if (v23[23] < 0)
          {
            std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
          }
          else
          {
            v25 = *(_OWORD *)v23;
            v24->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          v23 += 24;
          ++v24;
          ++v22;
        }
        while (v23 != (char *)a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v14 - (_QWORD)v7) < 1)
        return v7;
    }
    v26 = &v7[a5];
    v27 = &v22[-a5];
    v28 = v22;
    if ((unint64_t)v27 < v14)
    {
      v28 = v22;
      do
      {
        v29 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v28->__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        ++v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        ++v27;
      }
      while ((unint64_t)v27 < v14);
    }
    a1[1] = v28;
    if (v22 != v26)
    {
      v30 = v22 - 1;
      v31 = 8 * (((char *)v22 - (char *)v26) >> 3);
      do
      {
        if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30->__r_.__value_.__l.__data_);
        v32 = (__int128 *)((char *)&v7[-1] + v31);
        v33 = *v32;
        v30->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[(unint64_t)v31 / 8 - 1];
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v33;
        --v30;
        v7->__r_.__value_.__s.__data_[v31 - 1] = 0;
        *(_BYTE *)v32 = 0;
        v31 -= 24;
      }
      while (v31);
    }
    if (v21 != v9)
    {
      v34 = v7;
      do
        std::string::operator=(v34++, v9++);
      while (v9 != v21);
    }
    return v7;
  }
  v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (_QWORD)v5) >> 3);
  if (v15 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v5) >> 3);
  v17 = 2 * v16;
  if (2 * v16 <= v15)
    v17 = v15;
  if (v16 >= 0x555555555555555)
    v18 = 0xAAAAAAAAAAAAAAALL;
  else
    v18 = v17;
  v51.__end_cap_.__value_ = v11;
  if (v18)
    v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v11, v18);
  else
    v19 = 0;
  v35 = (std::string *)&v19[24 * v6];
  v36 = &v19[24 * v18];
  v37 = &v35[a5];
  v38 = 24 * a5;
  v39 = v35;
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v39, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      v40 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v39->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
    }
    ++v39;
    ++v9;
    v38 -= 24;
  }
  while (v38);
  v41 = *a1;
  v42 = v35;
  if (*a1 != v7)
  {
    v43 = v7;
    v44 = v35;
    do
    {
      v42 = v44 - 1;
      v45 = *(_OWORD *)&v43[-1].__r_.__value_.__l.__data_;
      v44[-1].__r_.__value_.__r.__words[2] = v43[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44[-1].__r_.__value_.__l.__data_ = v45;
      v43[-1].__r_.__value_.__l.__size_ = 0;
      v43[-1].__r_.__value_.__r.__words[2] = 0;
      v43[-1].__r_.__value_.__r.__words[0] = 0;
      --v43;
      --v44;
    }
    while (v43 != v41);
  }
  v46 = a1[1];
  if (v46 != v7)
  {
    do
    {
      v47 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v37->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v47;
      ++v37;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      ++v7;
    }
    while (v7 != v46);
    v7 = a1[1];
  }
  v48 = *a1;
  *a1 = v42;
  a1[1] = v37;
  v49 = a1[2];
  a1[2] = (std::string *)v36;
  v51.__end_ = v7;
  v51.__end_cap_.__value_ = v49;
  v51.__first_ = v48;
  v51.__begin_ = v48;
  std::__split_buffer<std::string>::~__split_buffer(&v51);
  return v35;
}

uint64_t llvm::TargetRegistry::lookupTarget(uint64_t a1, uint64_t a2)
{
  MEMORY[0x24BD1B104](a2, "Unable to find target for this triple (no targets are registered)");
  return 0;
}

uint64_t llvm::MachO::getArchitectureFromName(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 4:
      if (*(_DWORD *)a1 != 909652841)
        goto LABEL_67;
      result = 0;
      break;
    case 5:
      if (*(_DWORD *)a1 == 1986884193 && *(_BYTE *)(a1 + 4) == 54)
      {
        result = 4;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_BYTE *)(a1 + 4) == 53)
      {
        result = 5;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_BYTE *)(a1 + 4) == 55)
      {
        result = 6;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(_BYTE *)(a1 + 4) != 52)
          goto LABEL_67;
        result = 12;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1597388920 && *(_WORD *)(a1 + 4) == 13366)
      {
        result = 1;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29748)
      {
        result = 3;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29495)
      {
        result = 7;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27447)
      {
        result = 8;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27958)
      {
        result = 9;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27959)
      {
        result = 10;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(_WORD *)(a1 + 4) != 25908)
          goto LABEL_67;
        result = 13;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1597388920 && *(_DWORD *)(a1 + 3) == 1748252255)
      {
        result = 2;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_DWORD *)(a1 + 3) == 1835349878)
      {
        result = 11;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(_DWORD *)(a1 + 3) != 947270710)
          goto LABEL_67;
        result = 15;
      }
      break;
    case 8:
      if (*(_QWORD *)a1 != 0x32335F34366D7261)
        goto LABEL_67;
      result = 14;
      break;
    default:
LABEL_67:
      result = 16;
      break;
  }
  return result;
}

const char *llvm::MachO::getArchitectureName(unsigned int a1)
{
  if (a1 > 0x10)
    return "unknown";
  else
    return off_251C1D9C0[(char)a1];
}

void llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  _BYTE *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  if ((v4 & 1) != 0)
  {
    v8 = 0;
    v6 = 0;
LABEL_8:
    v9 = 0;
    v10 = 0;
    v11 = v6;
    while (v11 != 16)
    {
      v12 = a2[2];
      if ((unint64_t)v9 < v12)
      {
        *v9++ = v11;
        a2[1] = v9;
        break;
      }
      v19 = &v9[-v10];
      v20 = (uint64_t)&v9[-v10 + 1];
      if (v20 < 0)
        abort();
      v21 = v12 - v10;
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
        v23 = (char *)operator new(v22);
      else
        v23 = 0;
      v13 = &v19[(_QWORD)v23];
      v24 = &v19[(_QWORD)v23];
      *v24 = v11;
      v14 = v24 + 1;
      if (v9 != (_BYTE *)v10)
      {
        v25 = &v9[~v10];
        do
        {
          v26 = *--v9;
          (v25--)[(_QWORD)v23] = v26;
        }
        while (v9 != (_BYTE *)v10);
        v13 = v23;
      }
      *a2 = v13;
      a2[1] = v14;
      a2[2] = &v23[v22];
      if (v10)
        operator delete((void *)v10);
      a2[1] = v14;
      if (v8 != -1)
        goto LABEL_13;
LABEL_19:
      v9 = v14;
      v8 = v11;
      v10 = (unint64_t)v13;
      if (v11 == -1)
        return;
    }
    v13 = (char *)v10;
    v14 = v9;
LABEL_13:
    v15 = v11;
    if ((v11 & 0xFFFFFFE0) != 0)
      v16 = v11;
    else
      v16 = 31;
    while (v16 != v15)
    {
      v17 = v15 + 1;
      v18 = (unint64_t)*a1 >> v15++;
      if ((v18 & 2) != 0)
      {
        v11 = v17;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v5 = 0;
    while (v5 != 31)
    {
      v6 = v5 + 1;
      v7 = v4 >> v5++;
      if ((v7 & 2) != 0)
      {
        if (v6 == -1)
          return;
        v8 = v6;
        goto LABEL_8;
      }
    }
  }
}

uint64_t llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = (unsigned __int8 *)_ZNSt3__113__lower_boundB8nn180100INS_17_ClassicAlgPolicyEPN4llvm5MachO6TargetES5_S4_NS_10__identityEZNS3_8addEntryINS2_11SmallVectorIS4_Lj5EEEEENT_8iteratorERSA_RKS4_EUlSE_SE_E_EET0_SG_T1_RKT2_RT4_RT3_(*(_QWORD *)a1, *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8), a2);
  v5 = v4;
  if (v4 == (unsigned __int8 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)))
    return llvm::SmallVectorImpl<llvm::MachO::Target>::insert_one_impl<llvm::MachO::Target const&>(a1, (uint64_t)v4, (unint64_t)a2);
  v6 = *a2;
  v7 = *v4;
  if (v6 < v7 || v7 >= v6 && *((_DWORD *)a2 + 1) < *((_DWORD *)v4 + 1))
    return llvm::SmallVectorImpl<llvm::MachO::Target>::insert_one_impl<llvm::MachO::Target const&>(a1, (uint64_t)v4, (unint64_t)a2);
  return (uint64_t)v5;
}

uint64_t llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>(uint64_t **a1, const void *a2, size_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v6 = std::partition_point[abi:nn180100]<std::__wrap_iter<llvm::MachO::InterfaceFileRef *>,std::vector<llvm::MachO::InterfaceFileRef>::iterator llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>(std::vector<llvm::MachO::InterfaceFileRef>::iterator&,llvm::StringRef)::{lambda(llvm::MachO::InterfaceFileRef const&)#1}>(*a1, a1[1], a2, a3);
  v7 = v6;
  if (a1[1] == v6)
    return std::vector<llvm::MachO::InterfaceFileRef>::emplace<llvm::StringRef &>((char **)a1, (char *)v7, (uint64_t)v11);
  LODWORD(v8) = *((char *)v6 + 23);
  v9 = (int)v8 < 0;
  if ((int)v8 < 0)
    v6 = (uint64_t *)*v6;
  v8 = v8;
  if (v9)
    v8 = v7[1];
  if (v8 != a3 || a3 && memcmp(v6, a2, a3))
    return std::vector<llvm::MachO::InterfaceFileRef>::emplace<llvm::StringRef &>((char **)a1, (char *)v7, (uint64_t)v11);
  return (uint64_t)v7;
}

double llvm::MachO::InterfaceFile::addParentUmbrella(uint64_t a1, unsigned __int8 *a2, void *__src, size_t __len)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  __int128 *p_dst;
  size_t v18;
  size_t v19;
  double result;
  __int128 *v21;
  size_t v22;
  size_t v23;
  void **v24;
  __int128 __dst;
  unint64_t v26;

  if (!__len)
    return result;
  v8 = *(unsigned __int8 **)(a1 + 304);
  v7 = *(unsigned __int8 **)(a1 + 312);
  if (v7 != v8)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4);
    v10 = *a2;
    do
    {
      v11 = v9 >> 1;
      v12 = &v8[48 * (v9 >> 1)];
      v13 = *v12;
      if (v13 < v10 || v10 >= v13 && *((_DWORD *)v12 + 1) < *((_DWORD *)a2 + 1))
      {
        v8 = v12 + 48;
        v11 = v9 + ~v11;
      }
      v9 = v11;
    }
    while (v11);
  }
  if (v8 == v7 || (v14 = *a2, v15 = *v8, v14 < v15) || v15 >= v14 && *((_DWORD *)a2 + 1) < *((_DWORD *)v8 + 1))
  {
    if (__len <= 0x7FFFFFFFFFFFFFF7)
    {
      v16 = (uint64_t *)(a1 + 304);
      if (__len >= 0x17)
      {
        v18 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v18 = __len | 7;
        v19 = v18 + 1;
        p_dst = (__int128 *)operator new(v18 + 1);
        *((_QWORD *)&__dst + 1) = __len;
        v26 = v19 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v26) = __len;
        p_dst = &__dst;
      }
      memmove(p_dst, __src, __len);
      *((_BYTE *)p_dst + __len) = 0;
      std::vector<std::pair<llvm::MachO::Target,std::string>>::emplace<llvm::MachO::Target const&,std::string>(v16, (uint64_t)v8, (__int128 *)a2, &__dst);
      if (SHIBYTE(v26) < 0)
        operator delete((void *)__dst);
      return result;
    }
LABEL_31:
    abort();
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_31;
  if (__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    v21 = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v26 = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst = v21;
  }
  else
  {
    HIBYTE(v26) = __len;
    v21 = &__dst;
  }
  memmove(v21, __src, __len);
  *((_BYTE *)v21 + __len) = 0;
  v24 = (void **)(v8 + 24);
  if ((char)v8[47] < 0)
    operator delete(*v24);
  result = *(double *)&__dst;
  *(_OWORD *)v24 = __dst;
  *((_QWORD *)v8 + 5) = v26;
  return result;
}

void std::vector<std::pair<llvm::MachO::Target,std::string>>::emplace<llvm::MachO::Target const&,std::string>(uint64_t *a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  void **v30;
  unint64_t v31;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v6 = a1[1];
  v8 = a2 - *a1;
  v9 = v8 / 48;
  v10 = *a1 + 48 * (v8 / 48);
  v12 = a1 + 2;
  v11 = a1[2];
  if (v6 >= v11)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v31 > 0x555555555555555)
      abort();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v7) >> 4);
    if (2 * v33 > v31)
      v31 = 2 * v33;
    if (v33 >= 0x2AAAAAAAAAAAAAALL)
      v34 = 0x555555555555555;
    else
      v34 = v31;
    v70 = a1 + 2;
    if (v34)
    {
      v35 = a3;
      v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>((uint64_t)(a1 + 2), v34);
      a3 = v35;
      v37 = v36;
    }
    else
    {
      v37 = 0;
    }
    v41 = &v37[48 * v9];
    v69 = &v37[48 * v34];
    if (v9 == v34)
    {
      if (v8 < 1)
      {
        v62 = &v37[48 * v34];
        if (v7 == a2)
          v43 = 1;
        else
          v43 = 2 * v9;
        v66 = v12;
        v44 = (uint64_t)v12;
        v45 = a3;
        v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>(v44, v43);
        v47 = &v46[48 * (v43 >> 2)];
        *(_QWORD *)&v67 = v46;
        *((_QWORD *)&v67 + 1) = v47;
        *(_QWORD *)&v63 = v37;
        *((_QWORD *)&v63 + 1) = &v37[48 * v9];
        v69 = &v46[48 * v48];
        v64 = *((_QWORD *)&v63 + 1);
        v65 = v62;
        std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer((uint64_t)&v63);
        a3 = v45;
        v41 = v47;
      }
      else
      {
        v42 = v9 + 2;
        if (v9 >= -1)
          v42 = v9 + 1;
        v41 -= 48 * (v42 >> 1);
      }
    }
    v49 = *a3;
    *((_QWORD *)v41 + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v41 = v49;
    v50 = *a4;
    *((_QWORD *)v41 + 5) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(v41 + 24) = v50;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v51 = (uint64_t)(v41 + 48);
    v68 = (uint64_t)(v41 + 48);
    v52 = *a1;
    if (*a1 != v10)
    {
      v53 = v10;
      do
      {
        v54 = *(_OWORD *)(v53 - 48);
        *((_QWORD *)v41 - 4) = *(_QWORD *)(v53 - 32);
        *((_OWORD *)v41 - 3) = v54;
        v55 = *(_OWORD *)(v53 - 24);
        *((_QWORD *)v41 - 1) = *(_QWORD *)(v53 - 8);
        *(_OWORD *)(v41 - 24) = v55;
        v41 -= 48;
        *(_QWORD *)(v53 - 16) = 0;
        *(_QWORD *)(v53 - 8) = 0;
        *(_QWORD *)(v53 - 24) = 0;
        v53 -= 48;
      }
      while (v53 != v52);
      v51 = v68;
    }
    *((_QWORD *)&v67 + 1) = v41;
    v56 = a1[1];
    if (v56 != v10)
    {
      do
      {
        v57 = *(_OWORD *)v10;
        *(_QWORD *)(v51 + 16) = *(_QWORD *)(v10 + 16);
        *(_OWORD *)v51 = v57;
        v58 = *(_OWORD *)(v10 + 24);
        *(_QWORD *)(v51 + 40) = *(_QWORD *)(v10 + 40);
        *(_OWORD *)(v51 + 24) = v58;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = 0;
        *(_QWORD *)(v10 + 24) = 0;
        v51 += 48;
        v10 += 48;
      }
      while (v10 != v56);
      v41 = (char *)*((_QWORD *)&v67 + 1);
      v10 = a1[1];
    }
    v59 = *a1;
    *a1 = (uint64_t)v41;
    a1[1] = v51;
    v60 = (char *)a1[2];
    a1[2] = (uint64_t)v69;
    v68 = v10;
    v69 = v60;
    *(_QWORD *)&v67 = v59;
    *((_QWORD *)&v67 + 1) = v59;
    std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer((uint64_t)&v67);
  }
  else if (v10 == v6)
  {
    v38 = *a3;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v10 = v38;
    v39 = v7 + 48 * v9;
    v40 = *a4;
    *(_QWORD *)(v39 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(v39 + 24) = v40;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    a1[1] = v10 + 48;
  }
  else
  {
    v63 = *a3;
    v64 = *((_QWORD *)a3 + 2);
    v13 = *(void **)a4;
    *(_QWORD *)&v67 = *((_QWORD *)a4 + 1);
    *(_QWORD *)((char *)&v67 + 7) = *(_QWORD *)((char *)a4 + 15);
    v14 = *((_BYTE *)a4 + 23);
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v15 = a1[1];
    v16 = v10 + 48;
    v17 = v15 - 48;
    v61 = v14;
    v18 = v15;
    if (v15 >= 0x30)
    {
      do
      {
        v19 = *(_OWORD *)v17;
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v18 = v19;
        v20 = *(_OWORD *)(v17 + 24);
        *(_QWORD *)(v18 + 40) = *(_QWORD *)(v17 + 40);
        *(_OWORD *)(v18 + 24) = v20;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 24) = 0;
        v18 += 48;
        v17 += 48;
      }
      while (v17 < v15);
    }
    a1[1] = v18;
    if (v15 != v16)
    {
      v21 = 0;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v16) >> 4);
      v23 = v7 + 48 * v22 + 48 * v9;
      v24 = -48 * v22;
      do
      {
        v25 = v23 + v21;
        v26 = v15 + v21;
        v27 = *(_OWORD *)(v23 + v21 - 48);
        *(_QWORD *)(v26 - 32) = *(_QWORD *)(v23 + v21 - 32);
        *(_OWORD *)(v26 - 48) = v27;
        v28 = v15 + v21 - 24;
        if (*(char *)(v15 + v21 - 1) < 0)
          operator delete(*(void **)v28);
        v21 -= 48;
        v29 = *(_OWORD *)(v25 - 24);
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v25 - 8);
        *(_OWORD *)v28 = v29;
        *(_BYTE *)(v25 - 1) = 0;
        *(_BYTE *)(v25 - 24) = 0;
      }
      while (v24 != v21);
    }
    *(_OWORD *)v10 = v63;
    *(_QWORD *)(v10 + 16) = v64;
    v30 = (void **)(v7 + 48 * v9 + 24);
    if (*(char *)(v10 + 47) < 0)
      operator delete(*v30);
    *v30 = v13;
    *(_QWORD *)(v7 + 48 * v9 + 32) = v67;
    *(_QWORD *)(v7 + 48 * v9 + 39) = *(_QWORD *)((char *)&v67 + 7);
    *(_BYTE *)(v7 + 48 * v9 + 47) = v61;
  }
}

void llvm::MachO::InterfaceFile::addRPath(uint64_t a1, unsigned __int8 *a2, void *__src, size_t __len)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v16;
  const void *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 *p_dst;
  size_t v21;
  size_t v22;
  __int128 __dst;
  unint64_t v24;

  v9 = *(unsigned __int8 **)(a1 + 400);
  v8 = *(unsigned __int8 **)(a1 + 408);
  if (v8 != v9)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 4);
    v11 = *a2;
    do
    {
      v12 = v10 >> 1;
      v13 = &v9[48 * (v10 >> 1)];
      v14 = *v13;
      if (v14 < v11 || v11 >= v14 && *((_DWORD *)v13 + 1) < *((_DWORD *)a2 + 1))
      {
        v9 = v13 + 48;
        v12 = v10 + ~v12;
      }
      v10 = v12;
    }
    while (v12);
  }
  if (v9 == v8)
    goto LABEL_22;
  if (*a2 != *v9 || *((_DWORD *)a2 + 1) != *((_DWORD *)v9 + 1))
    goto LABEL_22;
  v16 = (char)v9[47];
  if (v16 >= 0)
    v17 = v9 + 24;
  else
    v17 = (const void *)*((_QWORD *)v9 + 3);
  v18 = *((_QWORD *)v9 + 4);
  if (v16 >= 0)
    v18 = v9[47];
  if (__len != v18 || __len && memcmp(__src, v17, __len))
  {
LABEL_22:
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v19 = (uint64_t *)(a1 + 400);
    if (__len >= 0x17)
    {
      v21 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v21 = __len | 7;
      v22 = v21 + 1;
      p_dst = (__int128 *)operator new(v21 + 1);
      *((_QWORD *)&__dst + 1) = __len;
      v24 = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v24) = __len;
      p_dst = &__dst;
      if (!__len)
      {
LABEL_30:
        *((_BYTE *)p_dst + __len) = 0;
        std::vector<std::pair<llvm::MachO::Target,std::string>>::emplace<llvm::MachO::Target const&,std::string>(v19, (uint64_t)v9, (__int128 *)a2, &__dst);
        if (SHIBYTE(v24) < 0)
          operator delete((void *)__dst);
        return;
      }
    }
    memmove(p_dst, __src, __len);
    goto LABEL_30;
  }
}

uint64_t llvm::MachO::InterfaceFile::addDocument(uint64_t a1, char *a2)
{
  char **v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  size_t v10;
  const void *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  const void *v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  char **v25;
  char *v26;

  v4 = (char **)(a1 + 376);
  v6 = *(char **)(a1 + 376);
  v5 = *(char **)(a1 + 384);
  v7 = *(_QWORD *)a2;
  if (v5 != v6)
  {
    v25 = v4;
    v26 = a2;
    v8 = (v5 - v6) >> 4;
    v9 = *(char *)(v7 + 287);
    if (v9 >= 0)
      v10 = *(unsigned __int8 *)(v7 + 287);
    else
      v10 = *(_QWORD *)(v7 + 272);
    if (v9 >= 0)
      v11 = (const void *)(v7 + 264);
    else
      v11 = *(const void **)(v7 + 264);
    do
    {
      v12 = &v6[16 * (v8 >> 1)];
      v14 = *(_QWORD *)v12;
      v13 = v12 + 16;
      v15 = (const void *)(v14 + 264);
      v16 = *(unsigned __int8 *)(v14 + 287);
      v17 = *(const void **)(v14 + 264);
      v18 = *(_QWORD *)(v14 + 272);
      if ((v16 & 0x80u) == 0)
        v19 = v16;
      else
        v19 = v18;
      if ((v16 & 0x80u) == 0)
        v20 = v15;
      else
        v20 = v17;
      if (v10 >= v19)
        v21 = v19;
      else
        v21 = v10;
      v22 = memcmp(v20, v11, v21);
      v23 = v19 < v10;
      if (v22)
        v23 = v22 < 0;
      if (v23)
        v8 += ~(v8 >> 1);
      else
        v8 >>= 1;
      if (v23)
        v6 = v13;
    }
    while (v8);
    v5 = v6;
    v4 = v25;
    a2 = v26;
  }
  *(_QWORD *)(v7 + 456) = a1;
  std::vector<std::shared_ptr<llvm::MachO::InterfaceFile>>::insert(v4, v5, a2);
  return *(_QWORD *)a2;
}

char *std::vector<std::shared_ptr<llvm::MachO::InterfaceFile>>::insert(char **a1, char *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  char *v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  _QWORD v59[5];

  v3 = a3;
  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 4;
  v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v11 = a1 + 2;
  v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    v27 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
    if (v27 >> 60)
      abort();
    v29 = v10 - (_QWORD)v6;
    if (v29 >> 3 > v27)
      v27 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v27;
    v58 = v11;
    if (v30)
    {
      v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v30);
    }
    else
    {
      v32 = 0;
      v31 = 0;
    }
    v36 = &v32[16 * v8];
    v37 = v7 >> 4;
    v38 = &v32[16 * v31];
    v57 = v38;
    if (v7 >> 4 == v31)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v40 = 1;
        else
          v40 = v7 >> 3;
        v59[4] = v11;
        v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v40);
        v55 = &v54[16 * (v40 >> 2)];
        v59[0] = v32;
        v59[1] = v36;
        v56 = v55;
        v57 = &v54[16 * v41];
        v59[2] = v36;
        v59[3] = v38;
        std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)v59);
        v36 = v55;
      }
      else
      {
        v39 = v37 + 2;
        if (v37 >= -1)
          v39 = v37 + 1;
        v36 -= 16 * (v39 >> 1);
        v56 = v36;
      }
    }
    *(_QWORD *)v36 = *(_QWORD *)v3;
    v42 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v36 + 1) = v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = v36 + 16;
    v46 = *a1;
    v47 = v36;
    if (*a1 != (char *)v9)
    {
      v48 = (char *)v9;
      v47 = v36;
      do
      {
        v49 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v47 - 1) = v49;
        v47 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v46);
    }
    v55 = v47;
    v50 = a1[1];
    if (v50 != (char *)v9)
    {
      do
      {
        *(_OWORD *)v45 = *(_OWORD *)v9;
        v45 += 16;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v9 += 16;
      }
      while ((char *)v9 != v50);
      v47 = v55;
      v9 = (unint64_t)a1[1];
    }
    v51 = *a1;
    *a1 = v47;
    a1[1] = v45;
    v52 = a1[2];
    a1[2] = v57;
    v56 = (_QWORD *)v9;
    v57 = v52;
    v54 = v51;
    v55 = v51;
    std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v54);
    return v36;
  }
  else if (v9 == v5)
  {
    v33 = *(_OWORD *)a3;
    *(_OWORD *)v9 = *(_OWORD *)a3;
    if (*((_QWORD *)&v33 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    a1[1] = (char *)(v9 + 16);
  }
  else
  {
    v12 = (_QWORD *)(v5 - 16);
    v13 = a1[1];
    if (v5 >= 0x10)
    {
      v14 = v5 - 16;
      v13 = a1[1];
      do
      {
        *(_OWORD *)v13 = *(_OWORD *)v14;
        v13 += 16;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v14 += 16;
      }
      while (v14 < v5);
    }
    a1[1] = v13;
    if (v5 != v9 + 16)
    {
      do
      {
        v15 = *((_OWORD *)v12 - 1);
        v12 -= 2;
        *v12 = 0;
        v12[1] = 0;
        v16 = *(std::__shared_weak_count **)(v5 - 8);
        *(_OWORD *)(v5 - 16) = v15;
        v5 -= 16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      while (v12 != (_QWORD *)v9);
    }
    if (v9 <= (unint64_t)v3)
      v3 += 16 * (a1[1] > v3);
    v20 = *(_QWORD *)v3;
    v19 = *((_QWORD *)v3 + 1);
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_QWORD *)v9 = v20;
    v23 = &v6[16 * v8];
    v24 = (std::__shared_weak_count *)*((_QWORD *)v23 + 1);
    *((_QWORD *)v23 + 1) = v19;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  return (char *)v9;
}

double llvm::MachO::InterfaceFile::setPath(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 248) = v12;
  return result;
}

double llvm::MachO::InterfaceFile::setInstallName(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 280) = v12;
  return result;
}

llvm::MachO::InterfaceFile *llvm::MachO::InterfaceFile::InterfaceFile(llvm::MachO::InterfaceFile *this)
{
  uint64_t v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 3) = 0x400000000;
  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 11) = 1;
  *((_QWORD *)this + 12) = (char *)this + 112;
  *((_QWORD *)this + 13) = 0x500000000;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 64) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_DWORD *)((char *)this + 295) = 0;
  *((_DWORD *)this + 111) = 0;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  v2 = operator new();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 16) = v2 + 32;
  *(_DWORD *)(v2 + 28) = 4;
  *(_QWORD *)(v2 + 64) = v2 + 80;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 56) = v2;
  return this;
}

_QWORD *llvm::MachO::SymbolSet::exports@<X0>(llvm::MachO::SymbolSet *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v6)();
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_251C1DA58;
  v18 = v17;
  v3 = *((_QWORD *)this + 12);
  v4 = v3 + 32 * *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 26))
  {
    v11 = *((_QWORD *)this + 12);
    v12 = v4;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v11);
    v13 = *((_QWORD *)this + 12) + 32 * *((unsigned int *)this + 28);
    v14 = v13;
    if (!v18)
    {
      v16 = 0;
      goto LABEL_9;
    }
    if (v18 != v17)
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
      goto LABEL_9;
    }
    v6 = (uint64_t (**)())v17[0];
  }
  else
  {
    v11 = v3 + 32 * *((unsigned int *)this + 28);
    v12 = v4;
    v6 = &off_251C1DA58;
    v13 = v4;
    v14 = v4;
  }
  v16 = v15;
  ((void (*)(uint64_t, _QWORD *))v6[3])((uint64_t)v17, v15);
LABEL_9:
  llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>(&v11, (uint64_t)v15, a2);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  result = v18;
  if (v18 == v17)
  {
    v10 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

_QWORD *llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[4];
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[4];
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v25, a2);
  llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::filter_iterator_impl(v27, v6, v7, v8, v9, (uint64_t)v25);
  v11 = a1[2];
  v10 = a1[3];
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v20, a2);
  llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::filter_iterator_impl(v22, v11, v10, v11, v10, (uint64_t)v20);
  llvm::make_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>((uint64_t)v27, (uint64_t)v22, a3);
  v12 = v24;
  if (v24 == v23)
  {
    v13 = 4;
    v12 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  v16 = v29;
  if (v29 == v28)
  {
    v17 = 4;
    v16 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_16;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_16:
  result = v26;
  if (v26 == v25)
  {
    v19 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C1DA58;
  return result;
}

void std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C1DA58;
}

BOOL std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(*(_QWORD *)a2 + 153) & 0x18) == 0;
}

uint64_t llvm::make_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  _BYTE v15[24];
  _BYTE *v16;
  _OWORD v17[2];
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v5;
  v6 = v18;
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
  {
    if (v7 == a1 + 32)
    {
      v19 = v18;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v18);
    }
    else
    {
      v19 = *(_BYTE **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  else
  {
    v19 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v8;
  v9 = v15;
  v10 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    if (v10 == a2 + 32)
    {
      v16 = v15;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 24))(v10, v15);
    }
    else
    {
      v16 = *(_BYTE **)(a2 + 56);
      *(_QWORD *)(a2 + 56) = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  result = llvm::iterator_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>::iterator_range(a3, (uint64_t)v17, (uint64_t)v14);
  if (v16 == v15)
  {
    v12 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_16;
    v12 = 5;
    v9 = v16;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v9 + 8 * v12))(v9);
LABEL_16:
  if (v19 == v18)
  {
    v13 = 4;
  }
  else
  {
    if (!v19)
      return result;
    v13 = 5;
    v6 = v19;
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8 * v13))(v6);
}

uint64_t llvm::iterator_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>::iterator_range(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 56);
  if (v5)
  {
    if (v5 == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v5;
      *(_QWORD *)(a2 + 56) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 16);
  v6 = *(_QWORD *)(a3 + 56);
  if (v6)
  {
    if (v6 == a3 + 32)
    {
      *(_QWORD *)(a1 + 120) = a1 + 96;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 24))(*(_QWORD *)(a3 + 56));
    }
    else
    {
      *(_QWORD *)(a1 + 120) = v6;
      *(_QWORD *)(a3 + 56) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 120) = 0;
  }
  return a1;
}

_QWORD *llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::filter_iterator_impl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v14, a6);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  if (v15)
  {
    if (v15 == v14)
    {
      a1[7] = a1 + 4;
      (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
    }
    else
    {
      a1[7] = (*(uint64_t (**)(void))(*v15 + 16))();
    }
  }
  else
  {
    a1[7] = 0;
  }
  llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid((uint64_t)a1);
  v11 = v15;
  if (v15 == v14)
  {
    v12 = 4;
    v11 = v14;
    goto LABEL_10;
  }
  if (v15)
  {
    v12 = 5;
LABEL_10:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return a1;
}

uint64_t llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  llvm::hashing::detail::hash_state **v5;
  unsigned __int8 **v6;
  uint64_t v7;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 16))
  {
    v2 = (uint64_t *)result;
    while (1)
    {
      v7 = *(_QWORD *)(v1 + 24);
      v3 = v2[7];
      if (!v3)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
      if ((result & 1) == 0)
      {
        *v2 += 32;
        result = llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)v2);
        v1 = *v2;
        if (*v2 != v2[2])
          continue;
      }
      return result;
    }
    v4 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
    return llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>(v4, v5, v6);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>(uint64_t *a1, llvm::hashing::detail::hash_state **a2, unsigned __int8 **a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  _BOOL4 v13;
  int v14;
  char v15;
  _QWORD v16[2];
  char v17;
  _QWORD v18[2];
  char *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  llvm::hashing::detail::hash_state **v22;
  char v23;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v17 = 0;
    v18[0] = 0;
    v18[1] = 0;
    v15 = 3;
    v16[0] = 0;
    v16[1] = 0;
    v7 = v4 - 1;
    v8 = llvm::DenseMapInfo<llvm::SymbolsMapKey,void>::getHashValue(a2) & (v4 - 1);
    v9 = (unsigned __int8 *)(v6 + 32 * v8);
    v21 = (unsigned __int8 *)a2;
    v22 = a2 + 1;
    v10 = v9 + 8;
    v19 = (char *)v9;
    v20 = v9 + 8;
    if (std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v14 = 1;
      while (1)
      {
        v21 = v9;
        v22 = (llvm::hashing::detail::hash_state **)v10;
        v19 = &v17;
        v20 = v18;
        if (std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19))
        {
          break;
        }
        v21 = v9;
        v22 = (llvm::hashing::detail::hash_state **)v10;
        v19 = &v15;
        v20 = v16;
        if (std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19)&& v12 == 0)
        {
          v12 = v9;
        }
        v8 = ((_DWORD)v8 + v14) & v7;
        v9 = (unsigned __int8 *)(v6 + 32 * v8);
        v21 = (unsigned __int8 *)a2;
        v22 = a2 + 1;
        v10 = v9 + 8;
        v19 = (char *)v9;
        v20 = v9 + 8;
        v13 = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19);
        result = 1;
        ++v14;
        if (v13)
          goto LABEL_4;
      }
      result = 0;
      if (v12)
        v9 = v12;
    }
LABEL_4:
    *a3 = v9;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

unint64_t llvm::DenseMapInfo<llvm::SymbolsMapKey,void>::getHashValue(llvm::hashing::detail::hash_state **a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[8];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::hash_value<llvm::MachO::SymbolKind>(*(unsigned __int8 *)a1);
  v5 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(a1[1], (uint64_t)a1[2] + (_QWORD)a1[1], v2, v3);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, (uint64_t *)&v6, (uint64_t *)&v5);
}

unint64_t llvm::hash_value<llvm::MachO::SymbolKind>(unsigned int a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  int v6;
  int v7;
  unint64_t v8;
  unsigned int v9;

  v2 = &unk_25795C000;
  if ((v1 & 1) == 0)
  {
    v9 = a1;
    v2 = &unk_25795C000;
    v7 = v6;
    a1 = v9;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v8;
      v2 = (_QWORD *)&unk_25795C000;
      a1 = v9;
    }
  }
  v3 = v2[278] + 8 * a1;
  v4 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v3) ^ ((0x9DDFEA08EB382D69 * v3) >> 47));
  return 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
}

uint64_t _ZNSt3__113__lower_boundB8nn180100INS_17_ClassicAlgPolicyEPN4llvm5MachO6TargetES5_S4_NS_10__identityEZNS3_8addEntryINS2_11SmallVectorIS4_Lj5EEEEENT_8iteratorERSA_RKS4_EUlSE_SE_E_EET0_SG_T1_RKT2_RT4_RT3_(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned __int8 *v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2 != a1)
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
    v4 = *a3;
    a2 = a1;
    do
    {
      v5 = v3 >> 1;
      v6 = (unsigned __int8 *)(a2 + 24 * (v3 >> 1));
      v9 = *v6;
      v7 = v6 + 4;
      v8 = v9;
      if (v9 < v4 || v4 >= v8 && *v7 < *((_DWORD *)a3 + 1))
      {
        a2 += 24 * (v3 >> 1) + 24;
        v5 = v3 + ~v5;
      }
      v3 = v5;
    }
    while (v5);
  }
  return a2;
}

uint64_t llvm::SmallVectorImpl<llvm::MachO::Target>::insert_one_impl<llvm::MachO::Target const&>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) == a2)
  {
    v17 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(a1, a3, 1);
    v18 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v19 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
    *(_OWORD *)v18 = v19;
    LODWORD(v18) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v18;
    return *(_QWORD *)a1 + 24 * v18 - 24;
  }
  else
  {
    v4 = a2 - *(_QWORD *)a1;
    v5 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(a1, a3, 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + v4);
    v7 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 - 8);
    *(_OWORD *)v7 = *(_OWORD *)(v7 - 24);
    v8 = *(_QWORD *)a1;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_QWORD *)a1 + 24 * v9 - 24;
    if ((_QWORD *)v10 != v6)
    {
      memmove(v6 + 3, v6, v10 - (_QWORD)v6);
      v9 = *(_DWORD *)(a1 + 8);
      v8 = *(_QWORD *)a1;
    }
    v11 = v9 + 1;
    *(_DWORD *)(a1 + 8) = v11;
    v12 = v8 + 24 * v11;
    v14 = v5 >= (unint64_t)v6 && v5 < v12;
    v15 = v5 + 24 * v14;
    v16 = *(_OWORD *)v15;
    v6[2] = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v6 = v16;
  }
  return (uint64_t)v6;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
    }
  }
  return v3;
}

uint64_t std::vector<llvm::MachO::InterfaceFileRef>::emplace<llvm::StringRef &>(char **a1, char *a2, uint64_t a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  __int128 v48;
  char *v49;
  char *v50;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  __int128 __dst;
  uint64_t v59;
  _QWORD v60[17];
  _QWORD *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = (uint64_t)&(*a1)[160 * (v7 / 160)];
  v10 = a1 + 2;
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v6) >> 5) + 1;
    if (v24 > 0x199999999999999)
      abort();
    v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)v6) >> 5);
    if (2 * v26 > v24)
      v24 = 2 * v26;
    if (v26 >= 0xCCCCCCCCCCCCCCLL)
      v27 = 0x199999999999999;
    else
      v27 = v24;
    v57 = v10;
    if (v27)
    {
      v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MachO::InterfaceFileRef>>(v27);
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    v30 = v7 / 160;
    v31 = &v29[160 * (v7 / 160)];
    v53 = v29;
    v54 = v31;
    v32 = &v29[160 * v28];
    v55 = v31;
    v56 = v32;
    if (v7 / 160 == v28)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v34 = 1;
        else
          v34 = 2 * v30;
        v60[1] = v10;
        v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MachO::InterfaceFileRef>>(v34);
        v54 = &v53[160 * (v34 >> 2)];
        *(_QWORD *)&__dst = v29;
        *((_QWORD *)&__dst + 1) = &v29[160 * (v7 / 160)];
        v55 = v54;
        v56 = &v53[160 * v35];
        v59 = *((_QWORD *)&__dst + 1);
        v60[0] = v32;
        std::__split_buffer<llvm::MachO::InterfaceFileRef>::~__split_buffer((uint64_t)&__dst);
        v31 = v54;
      }
      else
      {
        v33 = v30 + 2;
        if (v30 >= -1)
          v33 = v30 + 1;
        v31 -= 160 * (v33 >> 1);
        v54 = v31;
        v55 = v31;
      }
    }
    llvm::MachO::InterfaceFileRef::InterfaceFileRef(v31, *(void **)a3, *(_QWORD *)(a3 + 8));
    v36 = v54;
    v37 = v55 + 160;
    v55 += 160;
    v38 = *a1;
    if (*a1 == (char *)v8)
    {
      v43 = v54;
    }
    else
    {
      v39 = 0;
      do
      {
        v40 = &v36[v39];
        v41 = v8 + v39;
        v42 = *(_OWORD *)(v8 + v39 - 160);
        *((_QWORD *)v40 - 18) = *(_QWORD *)(v8 + v39 - 144);
        *((_OWORD *)v40 - 10) = v42;
        *(_QWORD *)(v41 - 152) = 0;
        *(_QWORD *)(v41 - 144) = 0;
        *(_QWORD *)(v41 - 160) = 0;
        *((_QWORD *)v40 - 17) = &v36[v39 - 120];
        *(_QWORD *)&v36[v39 - 128] = 0x500000000;
        if (*(_DWORD *)(v8 + v39 - 128))
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v36[v39 - 136], v41 - 136);
        v39 -= 160;
      }
      while ((char *)(v8 + v39) != v38);
      v37 = v55;
      v43 = &v36[v39];
    }
    v54 = v43;
    v44 = a1[1];
    if (v44 != (char *)v8)
    {
      v45 = 0;
      do
      {
        v46 = (_QWORD *)(v8 + v45);
        v47 = &v37[v45];
        v48 = *(_OWORD *)(v8 + v45);
        *((_QWORD *)v47 + 2) = *(_QWORD *)(v8 + v45 + 16);
        *(_OWORD *)v47 = v48;
        v46[1] = 0;
        v46[2] = 0;
        *v46 = 0;
        *((_QWORD *)v47 + 3) = &v37[v45 + 40];
        *(_QWORD *)&v37[v45 + 32] = 0x500000000;
        if (*(_DWORD *)(v8 + v45 + 32))
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v37[v45 + 24], (uint64_t)(v46 + 3));
        v45 += 160;
      }
      while (v46 + 20 != (_QWORD *)v44);
      v43 = v54;
      v8 = (uint64_t)a1[1];
      v37 += v45;
    }
    v49 = *a1;
    *a1 = v43;
    a1[1] = v37;
    v50 = a1[2];
    a1[2] = v56;
    v55 = (char *)v8;
    v56 = v50;
    v53 = v49;
    v54 = v49;
    std::__split_buffer<llvm::MachO::InterfaceFileRef>::~__split_buffer((uint64_t)&v53);
    return (uint64_t)v36;
  }
  else if (v8 == v5)
  {
    llvm::MachO::InterfaceFileRef::InterfaceFileRef(&(*a1)[160 * (v7 / 160)], *(void **)a3, *(_QWORD *)(a3 + 8));
    a1[1] = (char *)(v8 + 160);
  }
  else
  {
    v52 = v7 / 160;
    v61 = a1 + 2;
    llvm::MachO::InterfaceFileRef::InterfaceFileRef(&__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
    v11 = (unint64_t)a1[1];
    v12 = v11 - 160;
    v13 = v11;
    if (v11 >= 0xA0)
    {
      v14 = 0;
      v15 = &v6[160 * v52 + 32 * ((uint64_t)(v11 - (v8 + 160)) >> 5)];
      do
      {
        v16 = &v15[v14];
        v17 = v11 + v14;
        v18 = *(_OWORD *)&v15[v14];
        *(_QWORD *)(v17 + 16) = *(_QWORD *)&v15[v14 + 16];
        *(_OWORD *)v17 = v18;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v17 + 24) = v11 + v14 + 40;
        *(_QWORD *)(v11 + v14 + 32) = 0x500000000;
        if (*(_DWORD *)&v15[v14 + 32])
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(v11 + v14 + 24, v12 + v14 + 24);
        v14 += 160;
      }
      while ((unint64_t)(v16 + 160) < v11);
      v13 = v11 + v14;
    }
    a1[1] = (char *)v13;
    if (v11 != v8 + 160)
    {
      v19 = 0;
      do
      {
        v20 = (void **)(v11 + v19 - 160);
        if (*(char *)(v11 + v19 - 137) < 0)
          operator delete(*v20);
        v21 = (__int128 *)(v12 + v19 - 160);
        v22 = *v21;
        *(_QWORD *)(v11 + v19 - 144) = *(_QWORD *)(v12 + v19 - 144);
        *(_OWORD *)v20 = v22;
        *(_BYTE *)(v12 + v19 - 137) = 0;
        *(_BYTE *)v21 = 0;
        llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(v11 + v19 - 136, v12 + v19 - 136);
        v19 -= 160;
      }
      while (-32 * ((uint64_t)(v11 - (v8 + 160)) >> 5) != v19);
    }
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    v23 = __dst;
    *(_QWORD *)(v8 + 16) = v59;
    *(_OWORD *)v8 = v23;
    HIBYTE(v59) = 0;
    LOBYTE(__dst) = 0;
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v6[160 * v52 + 24], (uint64_t)v60);
    std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100]((uint64_t)v61, (uint64_t)&__dst);
  }
  return v8;
}

uint64_t *std::partition_point[abi:nn180100]<std::__wrap_iter<llvm::MachO::InterfaceFileRef *>,std::vector<llvm::MachO::InterfaceFileRef>::iterator llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>(std::vector<llvm::MachO::InterfaceFileRef>::iterator&,llvm::StringRef)::{lambda(llvm::MachO::InterfaceFileRef const&)#1}>(uint64_t *a1, uint64_t *a2, const void *a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  _QWORD v17[12];

  if (a2 != a1)
  {
    v17[10] = v4;
    v17[11] = v5;
    v8 = a1;
    v9 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 5);
    do
    {
      v10 = &v8[20 * (v9 >> 1)];
      v11 = *((char *)v10 + 23);
      v12 = v11 < 0;
      v13 = (uint64_t *)*v10;
      if (v11 >= 0)
        v13 = &v8[20 * (v9 >> 1)];
      v14 = *((unsigned __int8 *)v10 + 23);
      if (v12)
        v14 = v10[1];
      v17[0] = v13;
      v17[1] = v14;
      v15 = llvm::StringRef::compare((uint64_t)v17, a3, a4);
      if (v15 >= 0)
        v9 >>= 1;
      else
        v9 += ~(v9 >> 1);
      if (v15 < 0)
        v8 = v10 + 20;
    }
    while (v9);
    return v8;
  }
  return a2;
}

_QWORD *llvm::MachO::InterfaceFileRef::InterfaceFileRef(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  __dst[3] = __dst + 5;
  __dst[4] = 0x500000000;
  return __dst;
}

uint64_t llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(a1, a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 24 * v6);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        memmove(*(void **)a1, v4, 24 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 24);
    }
    v7 = 0;
LABEL_12:
    v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8)
      memcpy((void *)(*(_QWORD *)a1 + 24 * v7), (const void *)(*(_QWORD *)a2 + 24 * v7), *(_QWORD *)a2 + 24 * v8 - (*(_QWORD *)a2 + 24 * v7));
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 24 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 24);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*(_QWORD *)a2 + 24 * v5), *(_QWORD *)a2 + 24 * v6 - (*(_QWORD *)a2 + 24 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MachO::InterfaceFileRef>>(unint64_t a1)
{
  if (a1 >= 0x19999999999999ALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(160 * a1);
}

uint64_t std::__split_buffer<llvm::MachO::InterfaceFileRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 160;
    std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100](v4, i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__shared_ptr_pointer<llvm::MachO::InterfaceFile  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

llvm::MachO::InterfaceFile *std::__shared_ptr_pointer<llvm::MachO::InterfaceFile  *>::__on_zero_shared(uint64_t a1)
{
  llvm::MachO::InterfaceFile *result;

  result = *(llvm::MachO::InterfaceFile **)(a1 + 24);
  if (result)
  {
    llvm::MachO::InterfaceFile::~InterfaceFile(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

BOOL llvm::SmallVectorImpl<llvm::MachO::Target>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  _BOOL8 result;

  v2 = *((_DWORD *)a1 + 2);
  if (v2 != *((_DWORD *)a2 + 2))
    return 0;
  if (!v2)
    return 1;
  v3 = *a1;
  v4 = (uint64_t)&(*a1)[24 * v2];
  v5 = *a2;
  do
  {
    result = *v3 == *v5 && *((_DWORD *)v3 + 1) == *((_DWORD *)v5 + 1);
    v3 += 24;
    v5 += 24;
  }
  while (result && v3 != (unsigned __int8 *)v4);
  return result;
}

void collectFromArray(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t Array;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  _BYTE v17[128];
  _QWORD v18[2];
  __int128 v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)&Keys[a2];
  Array = llvm::json::Object::getArray(a3, *v6, v6[1]);
  if (Array)
  {
    v8 = *(unsigned __int16 **)Array;
    v9 = *(unsigned __int16 **)(Array + 8);
    while (v8 != v9)
    {
      v10 = *v8;
      if (v10 == 6)
      {
        v11 = (void *)*((_QWORD *)v8 + 1);
        v12 = *((char *)v8 + 31);
        if (v12 >= 0)
          v11 = v8 + 4;
        v13 = *((_QWORD *)v8 + 2);
        if (v12 >= 0)
          v13 = *((unsigned __int8 *)v8 + 31);
      }
      else
      {
        if (v10 != 5)
        {
          v18[0] = "invalid ";
          v18[1] = 8;
          v19 = *(_OWORD *)v6;
          v20 = " section";
          v21 = 8;
          v15 = v17;
          v16 = xmmword_24AA2AC90;
          llvm::SmallString<128u>::append(&v15, (uint64_t)v18, 3);
          llvm::make_error<JSONStubError,llvm::SmallString<128u>>(a1, (llvm::formatv_object_base **)&v15);
          if (v15 != v17)
            free(v15);
          return;
        }
        v11 = (void *)*((_QWORD *)v8 + 1);
        v13 = *((_QWORD *)v8 + 2);
      }
      v15 = v11;
      *(_QWORD *)&v16 = v13;
      v14 = *(_QWORD *)(a4 + 24);
      if (!v14)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, &v15);
      v8 += 16;
    }
  }
  *a1 = 0;
}

void llvm::make_error<JSONStubError,llvm::SmallString<128u>>(uint64_t *a1, llvm::formatv_object_base **a2)
{
  uint64_t v4;
  llvm::formatv_object_base *v5;
  llvm::formatv_object_base *v6[4];
  __int16 v7;

  v4 = operator new();
  v7 = 261;
  v5 = a2[1];
  v6[0] = *a2;
  v6[1] = v5;
  *(_QWORD *)v4 = off_251C1DF68;
  llvm::Twine::str(v6, (std::string *)(v4 + 8));
  *a1 = v4;
}

void StubParser::getTargets(uint64_t a1, uint64_t a2)
{
  uint64_t Array;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[3];
  char v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  _BYTE v29[128];
  llvm::formatv_object_base *v30;
  uint64_t v31;
  __int128 v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  Array = llvm::json::Object::getArray(a2, (uint64_t)"targets", 7);
  if (!Array)
  {
    v22 = "invalid ";
    v23 = 8;
    v24 = xmmword_251C1DB08;
    v25 = " section";
    v26 = 8;
    v27 = v29;
    v28 = xmmword_24AA2AC90;
    llvm::SmallString<128u>::append(&v27, (uint64_t)&v22, 3);
    v17 = operator new();
    LOWORD(v25) = 261;
    v22 = v27;
    v23 = v28;
    *(_QWORD *)v17 = off_251C1DF68;
    llvm::Twine::str((llvm::formatv_object_base **)&v22, (std::string *)(v17 + 8));
    *(_BYTE *)(a1 + 136) |= 1u;
    *(_QWORD *)a1 = v17;
    v18 = v27;
    if (v27 != v29)
      goto LABEL_27;
    return;
  }
  v22 = &v24;
  v23 = 0x500000000;
  v4 = *(unsigned __int16 **)Array;
  v5 = *(unsigned __int16 **)(Array + 8);
  if (*(unsigned __int16 **)Array == v5)
  {
    *(_BYTE *)(a1 + 136) &= ~1u;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x500000000;
    goto LABEL_26;
  }
  while (1)
  {
    v6 = *v4;
    if (v6 == 6)
    {
      v7 = *((char *)v4 + 31);
      if (v7 >= 0)
        v8 = (uint64_t)(v4 + 4);
      else
        v8 = *((_QWORD *)v4 + 1);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)v4 + 31);
      else
        v9 = *((_QWORD *)v4 + 2);
      goto LABEL_12;
    }
    if (v6 != 5)
      break;
    v8 = *((_QWORD *)v4 + 1);
    v9 = *((_QWORD *)v4 + 2);
LABEL_12:
    llvm::MachO::Target::create(v8, v9, (uint64_t)v20);
    v10 = v21;
    if ((v21 & 1) != 0)
    {
      v30 = (llvm::formatv_object_base *)"invalid ";
      v31 = 8;
      v32 = xmmword_251C1DB18;
      v33 = " section";
      v34 = 8;
      v27 = v29;
      v28 = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&v27, (uint64_t)&v30, 3);
      v14 = operator new();
      LOWORD(v33) = 261;
      v30 = (llvm::formatv_object_base *)v27;
      v31 = v28;
      *(_QWORD *)v14 = off_251C1DF68;
      llvm::Twine::str(&v30, (std::string *)(v14 + 8));
      *(_BYTE *)(a1 + 136) |= 1u;
      *(_QWORD *)a1 = v14;
      if (v27 != v29)
        free(v27);
    }
    else
    {
      v11 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>((uint64_t)&v22, (unint64_t)v20, 1);
      v12 = (char *)v22 + 24 * v23;
      v13 = *(_OWORD *)v11;
      *((_QWORD *)v12 + 2) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v12 = v13;
      LODWORD(v23) = v23 + 1;
    }
    if ((v21 & 1) != 0)
    {
      v15 = v20[0];
      v20[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    if ((v10 & 1) != 0)
      goto LABEL_26;
    v4 += 16;
    if (v4 == v5)
    {
      v16 = v23;
      *(_BYTE *)(a1 + 136) &= ~1u;
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x500000000;
      if (v16)
        llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(a1, (uint64_t)&v22);
      goto LABEL_26;
    }
  }
  v30 = (llvm::formatv_object_base *)"invalid ";
  v31 = 8;
  v32 = xmmword_251C1DB18;
  v33 = " section";
  v34 = 8;
  v27 = v29;
  v28 = xmmword_24AA2AC90;
  llvm::SmallString<128u>::append(&v27, (uint64_t)&v30, 3);
  v19 = operator new();
  LOWORD(v33) = 261;
  v30 = (llvm::formatv_object_base *)v27;
  v31 = v28;
  *(_QWORD *)v19 = off_251C1DF68;
  llvm::Twine::str(&v30, (std::string *)(v19 + 8));
  *(_BYTE *)(a1 + 136) |= 1u;
  *(_QWORD *)a1 = v19;
  if (v27 != v29)
    free(v27);
LABEL_26:
  v18 = v22;
  if (v22 != &v24)
LABEL_27:
    free(v18);
}

void getRequiredValue<llvm::StringRef,llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v12;
  char v13;
  _BYTE v14[24];
  _BYTE v15[128];
  llvm::formatv_object_base *v16;
  uint64_t v17;
  __int128 v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)&Keys[a2];
  std::function<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()((uint64_t)&v12, a4, a3, *v7, v7[1]);
  if (v13)
  {
    v8 = *(_QWORD *)(a5 + 24);
    if (!v8)
    {
      *(_OWORD *)a1 = v12;
      *(_BYTE *)(a1 + 16) &= ~1u;
      return;
    }
    *(_OWORD *)v14 = v12;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(&v10, v8, v14);
    if (v11)
    {
      *(_BYTE *)(a1 + 16) &= ~1u;
      *(_OWORD *)a1 = v10;
      return;
    }
    v16 = (llvm::formatv_object_base *)"invalid ";
    v17 = 8;
    v18 = *(_OWORD *)v7;
    v19 = " section";
    v20 = 8;
  }
  else
  {
    v16 = (llvm::formatv_object_base *)"invalid ";
    v17 = 8;
    v18 = *(_OWORD *)v7;
    v19 = " section";
    v20 = 8;
  }
  *(_QWORD *)v14 = v15;
  *(_OWORD *)&v14[8] = xmmword_24AA2AC90;
  llvm::SmallString<128u>::append(v14, (uint64_t)&v16, 3);
  v9 = operator new();
  LOWORD(v19) = 261;
  v16 = *(llvm::formatv_object_base **)v14;
  v17 = *(_QWORD *)&v14[8];
  *(_QWORD *)v9 = off_251C1DF68;
  llvm::Twine::str(&v16, (std::string *)(v9 + 8));
  *(_BYTE *)(a1 + 16) |= 1u;
  *(_QWORD *)a1 = v9;
  if (*(_BYTE **)v14 != v15)
    free(*(void **)v14);
}

_QWORD *StubParser::collectSymbolsFromSegment(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v18 = a4;
  v29[0] = &off_251C1E090;
  v29[1] = a3;
  v29[2] = &v18;
  v30 = v29;
  collectFromArray(&v17, 29, a2, (uint64_t)v29);
  result = v30;
  if (v30 == v29)
  {
    v8 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v8 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
LABEL_6:
  v9 = v17;
  if (v17)
    goto LABEL_39;
  v27[0] = &off_251C1E0D8;
  v27[1] = a3;
  v27[2] = &v18;
  v28 = v27;
  collectFromArray(&v16, 30, a2, (uint64_t)v27);
  v9 = v16;
  result = v28;
  if (v28 == v27)
  {
    v10 = 4;
    result = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_12;
    v10 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
LABEL_12:
  if (v9)
    goto LABEL_39;
  v25[0] = &off_251C1E120;
  v25[1] = a3;
  v25[2] = &v18;
  v26 = v25;
  collectFromArray(&v16, 31, a2, (uint64_t)v25);
  v9 = v16;
  result = v26;
  if (v26 == v25)
  {
    v11 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_18;
    v11 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
LABEL_18:
  if (v9)
    goto LABEL_39;
  v23[0] = &off_251C1E168;
  v23[1] = a3;
  v23[2] = &v18;
  v24 = v23;
  collectFromArray(&v16, 32, a2, (uint64_t)v23);
  v9 = v16;
  result = v24;
  if (v24 == v23)
  {
    v12 = 4;
    result = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_24;
    v12 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
LABEL_24:
  if (v9)
    goto LABEL_39;
  v13 = 4;
  if ((v18 & 8) != 0)
    v14 = 4;
  else
    v14 = 2;
  v21[0] = &off_251C1E1B0;
  v21[1] = a3;
  v21[2] = v14 | v18;
  v22 = v21;
  collectFromArray(&v16, 27, a2, (uint64_t)v21);
  v9 = v16;
  result = v22;
  if (v22 == v21)
  {
    result = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_33;
    v13 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
LABEL_33:
  if (!v9)
  {
    v19[0] = &off_251C1E1F8;
    v19[1] = a3;
    v19[2] = v18;
    v20 = v19;
    collectFromArray(&v16, 28, a2, (uint64_t)v19);
    v9 = v16;
    result = v20;
    if (v20 == v19)
    {
      v15 = 4;
      result = v19;
      goto LABEL_38;
    }
    if (v20)
    {
      v15 = 5;
LABEL_38:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
    }
  }
LABEL_39:
  *a1 = v9;
  return result;
}

uint64_t StubParser::getSymbolSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t Array;
  const llvm::json::Value *v8;
  const llvm::json::Value *v9;
  char v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int128 v13;
  uint64_t v14;
  uint64_t Object;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v22;
  void **v24;
  void *v25;
  __int128 v26;
  _BYTE v27[112];
  unsigned __int128 v28;
  uint64_t v29;
  _QWORD v30[17];
  char v31;
  void *v32;
  _BYTE v33[24];
  void *v34;
  uint64_t v35;
  _BYTE v36[120];
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[160];
  unsigned __int128 v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)&Keys[a3];
  Array = llvm::json::Object::getArray(a2, *v6, v6[1]);
  if (Array)
  {
    v37 = v39;
    v38 = 0x100000000;
    v34 = v36;
    v35 = 0x500000000;
    v8 = *(const llvm::json::Value **)Array;
    v9 = *(const llvm::json::Value **)(Array + 8);
    if (*(const llvm::json::Value **)Array == v9)
    {
      *(_BYTE *)(a1 + 176) &= ~1u;
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x100000000;
    }
    else
    {
      v10 = 8 * (a3 == 24);
      if (a3 == 23)
        v10 = 16;
      v11 = v10 | 0x20;
      v22 = v10 | 0x40;
      do
      {
        llvm::json::Value::copyFrom((llvm::json::Value *)&v32, v8);
        if ((unsigned __int16)v32 == 7)
        {
          StubParser::getTargets((uint64_t)v30, (uint64_t)v33);
          if ((v31 & 1) != 0)
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v34, a4);
            if ((v31 & 1) != 0)
            {
              v12 = (void *)v30[0];
              v30[0] = 0;
            }
            else
            {
              v12 = 0;
            }
            v25 = v12;
            llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v25);
            if (v25)
              (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
          }
          else
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v34, (uint64_t)v30);
          }
          *(_QWORD *)&v41 = 0;
          v13 = 0uLL;
          v40 = 0u;
          v25 = (char *)&v26 + 8;
          *(_QWORD *)&v26 = 0x500000000;
          if ((_DWORD)v35)
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v25, (uint64_t)&v34);
            v13 = v40;
            v14 = v41;
          }
          else
          {
            v14 = 0;
          }
          v28 = v13;
          v29 = v14;
          *(_QWORD *)&v41 = 0;
          v40 = 0uLL;
          if (v38 >= HIDWORD(v38))
          {
            llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::growAndEmplaceBack<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>((uint64_t)&v37, (uint64_t)&v25);
          }
          else
          {
            std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](&v37[160 * v38], (uint64_t)&v25);
            LODWORD(v38) = v38 + 1;
          }
          v24 = (void **)&v28;
          std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](&v24);
          if (v25 != (char *)&v26 + 8)
            free(v25);
          v24 = (void **)&v40;
          std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](&v24);
          Object = llvm::json::Object::getObject((uint64_t)v33, (uint64_t)"data", 4);
          v16 = llvm::json::Object::getObject((uint64_t)v33, (uint64_t)"text", 4);
          if (!(Object | v16))
          {
            *(_QWORD *)&v40 = "invalid ";
            *((_QWORD *)&v40 + 1) = 8;
            v41 = *(_OWORD *)v6;
            v42 = " section";
            v43 = 8;
            v25 = v27;
            v26 = xmmword_24AA2AC90;
            llvm::SmallString<128u>::append(&v25, (uint64_t)&v40, 3);
            v20 = operator new();
            LOWORD(v42) = 261;
            v40 = __PAIR128__(v26, (unint64_t)v25);
            *(_QWORD *)v20 = off_251C1DF68;
            llvm::Twine::str((llvm::formatv_object_base **)&v40, (std::string *)(v20 + 8));
            *(_BYTE *)(a1 + 176) |= 1u;
            *(_QWORD *)a1 = v20;
            if (v25 != v27)
              free(v25);
            goto LABEL_37;
          }
          v17 = v16;
          if (Object
            && (StubParser::collectSymbolsFromSegment((uint64_t *)&v25, Object, (uint64_t)&v37, v11), (v18 = v25) != 0)
            || v17
            && (StubParser::collectSymbolsFromSegment((uint64_t *)&v25, v17, (uint64_t)&v37, v22), (v18 = v25) != 0))
          {
            *(_BYTE *)(a1 + 176) |= 1u;
            *(_QWORD *)a1 = v18;
LABEL_37:
            llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v30);
            llvm::json::Value::destroy(&v32);
            goto LABEL_38;
          }
          llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v30);
        }
        llvm::json::Value::destroy(&v32);
        v8 = (const llvm::json::Value *)((char *)v8 + 32);
      }
      while (v8 != v9);
      v19 = v38;
      *(_BYTE *)(a1 + 176) &= ~1u;
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 0x100000000;
      if (v19)
        llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=(a1, (uint64_t)&v37);
    }
LABEL_38:
    if (v34 != v36)
      free(v34);
  }
  else
  {
    v37 = v39;
    v38 = 0x100000000;
    *(_BYTE *)(a1 + 176) &= ~1u;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x100000000;
  }
  return llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v37);
}

void StubParser::getLibSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Array;
  const llvm::json::Value *v9;
  const llvm::json::Value *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[17];
  char v26;
  void *v27;
  _BYTE v28[24];
  void *v29[2];
  _QWORD v30[17];

  v30[15] = *MEMORY[0x24BDAC8D0];
  Array = llvm::json::Object::getArray(a2, *(_QWORD *)&Keys[a3], *((_QWORD *)&Keys[a3] + 1));
  if (Array)
  {
    v20 = 0;
    v21 = 0;
    v19 = &v20;
    v29[0] = v30;
    v29[1] = (void *)0x500000000;
    v9 = *(const llvm::json::Value **)Array;
    v10 = *(const llvm::json::Value **)(Array + 8);
    if (*(const llvm::json::Value **)Array != v10)
    {
      while (1)
      {
        llvm::json::Value::copyFrom((llvm::json::Value *)&v27, v9);
        if ((unsigned __int16)v27 != 7)
          goto LABEL_18;
        StubParser::getTargets((uint64_t)v25, (uint64_t)v28);
        if ((v26 & 1) != 0)
        {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v29, a5);
          if ((v26 & 1) != 0)
          {
            v11 = (_QWORD *)v25[0];
            v25[0] = 0;
          }
          else
          {
            v11 = 0;
          }
          v22 = v11;
          llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v22);
          if (v22)
            (*(void (**)(_QWORD *))(*v22 + 8))(v22);
        }
        else
        {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v29, (uint64_t)v25);
        }
        v23[0] = &off_251C1E240;
        v23[1] = &v19;
        v23[2] = v29;
        v24 = v23;
        collectFromArray((uint64_t *)&v22, a4, (uint64_t)v28, (uint64_t)v23);
        v12 = v24;
        if (v24 == v23)
          break;
        if (v24)
        {
          v13 = 5;
LABEL_15:
          (*(void (**)(void))(*v12 + 8 * v13))();
        }
        v14 = v22;
        if (v22)
        {
          *(_BYTE *)(a1 + 24) |= 1u;
          *(_QWORD *)a1 = v14;
          llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v25);
          llvm::json::Value::destroy(&v27);
          goto LABEL_26;
        }
        llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v25);
LABEL_18:
        llvm::json::Value::destroy(&v27);
        v9 = (const llvm::json::Value *)((char *)v9 + 32);
        if (v9 == v10)
        {
          v16 = v19;
          v15 = v20;
          v17 = v21;
          goto LABEL_22;
        }
      }
      v12 = v23;
      v13 = 4;
      goto LABEL_15;
    }
    v17 = 0;
    v15 = 0;
    v16 = &v20;
LABEL_22:
    *(_BYTE *)(a1 + 24) &= ~1u;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v15;
    v18 = a1 + 8;
    *(_QWORD *)(a1 + 16) = v17;
    if (v17)
    {
      v15[2] = v18;
      v19 = &v20;
      v20 = 0;
      v21 = 0;
    }
    else
    {
      *(_QWORD *)a1 = v18;
    }
LABEL_26:
    if (v29[0] != v30)
      free(v29[0]);
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v19, v20);
  }
  else
  {
    *(_BYTE *)(a1 + 24) &= ~1u;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = a1 + 8;
  }
}

void StubParser::getUmbrellaSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Array;
  const llvm::json::Value *v6;
  const llvm::json::Value *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char *v14;
  _OWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  _BYTE v27[24];
  _BYTE *v28;
  _QWORD v29[3];
  _QWORD *v30;
  void *v31;
  __int128 v32;
  _BYTE v33[112];
  char v34;
  void *v35;
  _BYTE v36[24];
  void *v37[2];
  _BYTE v38[120];
  char *v39;
  size_t v40;
  __int128 v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  Array = llvm::json::Object::getArray(a2, (uint64_t)"parent_umbrellas", 16);
  if (Array)
  {
    v24 = 0;
    v25 = 0;
    v23 = (uint64_t *)&v24;
    v37[0] = v38;
    v37[1] = (void *)0x500000000;
    v6 = *(const llvm::json::Value **)Array;
    v7 = *(const llvm::json::Value **)(Array + 8);
    if (*(const llvm::json::Value **)Array != v7)
    {
      while (1)
      {
        llvm::json::Value::copyFrom((llvm::json::Value *)&v35, v6);
        if ((unsigned __int16)v35 != 7)
        {
          v39 = "invalid ";
          v40 = 8;
          v41 = xmmword_251C1DBB8;
          v42 = " section";
          v43 = 8;
          v31 = v33;
          v32 = xmmword_24AA2AC90;
          llvm::SmallString<128u>::append(&v31, (uint64_t)&v39, 3);
          v20 = operator new();
          LOWORD(v42) = 261;
          v39 = (char *)v31;
          v40 = v32;
          *(_QWORD *)v20 = off_251C1DF68;
          llvm::Twine::str((llvm::formatv_object_base **)&v39, (std::string *)(v20 + 8));
          *(_BYTE *)(a1 + 24) |= 1u;
          *(_QWORD *)a1 = v20;
          if (v31 != v33)
            free(v31);
          llvm::json::Value::destroy(&v35);
          goto LABEL_39;
        }
        StubParser::getTargets((uint64_t)&v31, (uint64_t)v36);
        if ((v34 & 1) != 0)
        {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v37, a3);
          if ((v34 & 1) != 0)
          {
            v8 = (char *)v31;
            v31 = 0;
          }
          else
          {
            v8 = 0;
          }
          v39 = v8;
          llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v39);
          if (v39)
            (*(void (**)(char *))(*(_QWORD *)v39 + 8))(v39);
        }
        else
        {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v37, (uint64_t)&v31);
        }
        v29[0] = &unk_251C1E048;
        v29[1] = llvm::json::Object::getString;
        v29[2] = 0;
        v30 = v29;
        v28 = 0;
        getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&v39, 16, (uint64_t)v36, (uint64_t)v29, (uint64_t)v27);
        v9 = v28;
        if (v28 == v27)
        {
          v9 = v27;
          v10 = 4;
        }
        else
        {
          if (!v28)
            goto LABEL_16;
          v10 = 5;
        }
        (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
        v11 = v30;
        if (v30 == v29)
        {
          v11 = v29;
          v12 = 4;
          goto LABEL_20;
        }
        if (v30)
        {
          v12 = 5;
LABEL_20:
          (*(void (**)(void))(*v11 + 8 * v12))();
        }
        v13 = v41;
        if ((v41 & 1) != 0)
        {
          v14 = v39;
          *(_BYTE *)(a1 + 24) |= 1u;
          *(_QWORD *)a1 = v14;
        }
        else
        {
          if (v39)
          {
            std::string::basic_string[abi:nn180100](__p, v39, v40);
          }
          else
          {
            __p[0] = 0;
            __p[1] = 0;
            v22 = 0;
          }
          v26 = __p;
          v15 = std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v23, (const void **)__p, (_OWORD **)&v26);
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v15 + 56, a3);
          if (SHIBYTE(v22) < 0)
            operator delete(__p[0]);
        }
        llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)&v31);
        llvm::json::Value::destroy(&v35);
        if ((v13 & 1) != 0)
          goto LABEL_39;
        v6 = (const llvm::json::Value *)((char *)v6 + 32);
        if (v6 == v7)
        {
          v17 = v23;
          v16 = v24;
          v18 = v25;
          goto LABEL_33;
        }
      }
    }
    v18 = 0;
    v16 = 0;
    v17 = (uint64_t *)&v24;
LABEL_33:
    *(_BYTE *)(a1 + 24) &= ~1u;
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v16;
    v19 = a1 + 8;
    *(_QWORD *)(a1 + 16) = v18;
    if (v18)
    {
      v16[2] = v19;
      v23 = (uint64_t *)&v24;
      v24 = 0;
      v25 = 0;
    }
    else
    {
      *(_QWORD *)a1 = v19;
    }
LABEL_39:
    if (v37[0] != v38)
      free(v37[0]);
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v23, v24);
  }
  else
  {
    *(_BYTE *)(a1 + 24) &= ~1u;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)a1 = a1 + 8;
  }
}

void StubParser::getPackedVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t Array;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _BYTE v21[24];
  _BYTE v22[128];
  llvm::formatv_object_base *v23;
  uint64_t v24;
  __int128 v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)&Keys[a3];
  Array = llvm::json::Object::getArray(a2, *v4, v4[1]);
  if (!Array || (v6 = *(_WORD **)Array, *(_QWORD *)Array == *(_QWORD *)(Array + 8)))
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = 0x10000;
    return;
  }
  if (*v6 != 7)
  {
    v23 = (llvm::formatv_object_base *)"invalid ";
    v24 = 8;
    v25 = *(_OWORD *)v4;
    v26 = " section";
    v27 = 8;
    *(_QWORD *)v21 = v22;
    *(_OWORD *)&v21[8] = xmmword_24AA2AC90;
    llvm::SmallString<128u>::append(v21, (uint64_t)&v23, 3);
    v8 = operator new();
    LOWORD(v26) = 261;
    v23 = *(llvm::formatv_object_base **)v21;
    v24 = *(_QWORD *)&v21[8];
    *(_QWORD *)v8 = off_251C1DF68;
    llvm::Twine::str(&v23, (std::string *)(v8 + 8));
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v8;
    if (*(_BYTE **)v21 != v22)
      free(*(void **)v21);
    return;
  }
  v19[0] = &unk_251C1E048;
  v19[1] = llvm::json::Object::getString;
  v19[2] = 0;
  v20 = v19;
  v17[0] = &off_251C1E288;
  v18 = v17;
  std::function<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()((uint64_t)&v15, (uint64_t)v19, (uint64_t)(v6 + 4), (uint64_t)"version", 7);
  if (v16)
  {
    *(_OWORD *)v21 = v15;
    if (!v18)
    {
      v14 = std::__throw_bad_function_call[abi:nn180100]();
      StubParser::parseToInterfaceFile(v14);
      return;
    }
    v7 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*v18 + 48))(v18, v21);
    if ((v7 & 0xFF00000000) != 0)
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_DWORD *)a1 = v7;
    }
    else
    {
      v23 = (llvm::formatv_object_base *)"invalid ";
      v24 = 8;
      v25 = xmmword_251C1DB88;
      v26 = " section";
      v27 = 8;
      *(_QWORD *)v21 = v22;
      *(_OWORD *)&v21[8] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(v21, (uint64_t)&v23, 3);
      v9 = operator new();
      LOWORD(v26) = 261;
      v23 = *(llvm::formatv_object_base **)v21;
      v24 = *(_QWORD *)&v21[8];
      *(_QWORD *)v9 = off_251C1DF68;
      llvm::Twine::str(&v23, (std::string *)(v9 + 8));
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v9;
      if (*(_BYTE **)v21 != v22)
        free(*(void **)v21);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = 0x10000;
  }
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
    goto LABEL_19;
  }
  if (v18)
  {
    v11 = 5;
LABEL_19:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
    goto LABEL_24;
  }
  if (v20)
  {
    v13 = 5;
LABEL_24:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
}

uint64_t StubParser::parseToInterfaceFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Array;
  _WORD *v5;
  _WORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ArchName;
  uint64_t v20;
  const llvm::Triple *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::string *p_p;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  unsigned __int8 Integer;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  _WORD *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  char v52;
  const void **v53;
  uint64_t v54;
  const void **v55;
  __int128 *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  _QWORD **v59;
  std::string::size_type v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  _QWORD **v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 v68;
  char v69;
  _QWORD *v70;
  size_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD **v74;
  BOOL v75;
  unsigned __int8 *v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  signed __int8 v81;
  const void *v82;
  size_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  std::string::size_type v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  char v92;
  const void *v93;
  size_t v94;
  uint64_t v95;
  std::string *v96;
  std::string *v97;
  _QWORD **v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  __int128 v102;
  char v103;
  _QWORD *v104;
  size_t v105;
  _QWORD *v106;
  _QWORD **v107;
  _QWORD **v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  __int128 v112;
  char v113;
  _QWORD *v114;
  size_t v115;
  _QWORD *v116;
  _QWORD **v117;
  uint64_t *v118;
  uint64_t *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  int v122;
  const void *v123;
  size_t v124;
  uint64_t *v125;
  uint64_t *v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  int v129;
  const void *v130;
  size_t v131;
  uint64_t *v132;
  uint64_t *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  int v136;
  const void *v137;
  size_t v138;
  std::string::size_type v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  llvm::MachO::InterfaceFile *v145;
  std::string v146;
  _QWORD **v147;
  _QWORD *v148[2];
  unsigned __int8 *v149;
  _QWORD *v150[2];
  _QWORD **v151;
  _QWORD *v152[2];
  _QWORD **v153;
  _QWORD *v154[2];
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t **v158;
  __int128 v159;
  __int128 v160;
  const char *v161;
  uint64_t v162;
  char v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  __int128 v168;
  __int128 v169;
  const char *v170;
  uint64_t v171;
  char v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t **v176;
  std::string __p;
  _QWORD v178[19];
  char v179;
  std::string v180;
  char v181;
  _QWORD **v182;
  _QWORD *v183;
  _QWORD *v184;
  char v185;
  unsigned __int8 *v186;
  _QWORD *v187;
  _QWORD *v188;
  char v189;
  const void **v190;
  const void **v191;
  char v192;
  char v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  char v197;
  __int128 v198;
  char v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  void **v203;
  _BYTE *v204;
  uint64_t v205;
  _BYTE v206[120];
  char v207;
  const void **v208;
  __int128 v209;
  char v210;
  uint64_t v211;

  v2 = a2;
  v211 = *MEMORY[0x24BDAC8D0];
  Array = llvm::json::Object::getArray(a2, (uint64_t)"target_info", 11);
  if (!Array)
  {
    *(_QWORD *)&v168 = "invalid ";
    *((_QWORD *)&v168 + 1) = 8;
    v169 = xmmword_251C1DB08;
    v170 = " section";
    v171 = 8;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
    llvm::SmallString<128u>::append(&__p, (uint64_t)&v168, 3);
    v28 = operator new();
    LOWORD(v170) = 261;
    v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)v28 = off_251C1DF68;
    llvm::Twine::str((llvm::formatv_object_base **)&v168, (std::string *)(v28 + 8));
    v207 = -1;
    v204 = (_BYTE *)v28;
    if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
      free(__p.__r_.__value_.__l.__data_);
    goto LABEL_65;
  }
  v142 = a1;
  *(_QWORD *)&v168 = &v169;
  *((_QWORD *)&v168 + 1) = 0x500000000;
  v5 = *(_WORD **)Array;
  v6 = *(_WORD **)(Array + 8);
  if (*(_WORD **)Array == v6)
  {
    v207 = 0;
    v204 = v206;
    v205 = 0x500000000;
    goto LABEL_62;
  }
  while (*v5 == 7)
  {
    v173 = (uint64_t *)&unk_251C1E048;
    v174 = (uint64_t)llvm::json::Object::getString;
    v175 = 0;
    v176 = &v173;
    v167 = 0;
    getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&v190, 5, (uint64_t)(v5 + 4), (uint64_t)&v173, (uint64_t)&v164);
    v7 = v167;
    if (v167 == &v164)
    {
      v7 = &v164;
      v8 = 4;
    }
    else
    {
      if (!v167)
        goto LABEL_9;
      v8 = 5;
    }
    ((void (*)(void))(*v7)[v8])();
LABEL_9:
    v9 = v176;
    if (v176 == &v173)
    {
      v9 = &v173;
      v10 = 4;
    }
    else
    {
      if (!v176)
        goto LABEL_14;
      v10 = 5;
    }
    ((void (*)(void))(*v9)[v10])();
LABEL_14:
    if ((v192 & 1) != 0)
    {
      *(_QWORD *)&v159 = "invalid ";
      *((_QWORD *)&v159 + 1) = 8;
      v160 = xmmword_251C1DB18;
      v161 = " section";
      v162 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v159, 3);
      v13 = operator new();
      LOWORD(v161) = 261;
      v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v13 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v159, (std::string *)(v13 + 8));
      LODWORD(a1) = a1 | 1;
      v207 = a1;
      v204 = (_BYTE *)v13;
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
      v14 = 1;
LABEL_38:
      if (v190)
        (*((void (**)(const void **))*v190 + 1))(v190);
      goto LABEL_40;
    }
    v155 = (uint64_t *)&unk_251C1E048;
    v156 = (uint64_t)llvm::json::Object::getString;
    v157 = 0;
    v158 = &v155;
    v203 = 0;
    getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&v186, 6, (uint64_t)(v5 + 4), (uint64_t)&v155, (uint64_t)&v200);
    v11 = v203;
    if (v203 == &v200)
    {
      v11 = &v200;
      v12 = 4;
    }
    else
    {
      if (!v203)
        goto LABEL_23;
      v12 = 5;
    }
    (*((void (**)(void))*v11 + v12))();
LABEL_23:
    v15 = v158;
    if (v158 == &v155)
    {
      v15 = &v155;
      v16 = 4;
    }
    else
    {
      if (!v158)
        goto LABEL_28;
      v16 = 5;
    }
    ((void (*)(void))(*v15)[v16])();
LABEL_28:
    if ((v188 & 1) != 0)
    {
      *(_QWORD *)&v159 = "invalid ";
      *((_QWORD *)&v159 + 1) = 8;
      v160 = xmmword_251C1DB28;
      v161 = " section";
      v162 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v159, 3);
      v18 = operator new();
      LOWORD(v161) = 261;
      v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v18 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v159, (std::string *)(v18 + 8));
      LODWORD(a1) = a1 | 1;
      v207 = a1;
      v204 = (_BYTE *)v18;
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
      if (v186)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v186 + 8))(v186);
      goto LABEL_36;
    }
    v198 = 0uLL;
    if (llvm::VersionTuple::tryParse((unint64_t *)&v198, v186, (unint64_t)v187))
    {
      *(_QWORD *)&v159 = "invalid ";
      *((_QWORD *)&v159 + 1) = 8;
      v160 = xmmword_251C1DB28;
      v161 = " section";
      v162 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v159, 3);
      v17 = operator new();
      LOWORD(v161) = 261;
      v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v17 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v159, (std::string *)(v17 + 8));
      LODWORD(a1) = a1 | 1;
      v207 = a1;
      v204 = (_BYTE *)v17;
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
LABEL_36:
      v14 = 1;
      goto LABEL_37;
    }
    llvm::MachO::Target::create((uint64_t)v190, (uint64_t)v191, (uint64_t)&v208);
    if ((v210 & 1) != 0)
    {
      *(_QWORD *)&v159 = "invalid ";
      *((_QWORD *)&v159 + 1) = 8;
      v160 = xmmword_251C1DB18;
      v161 = " section";
      v162 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v159, 3);
      v26 = operator new();
      LOWORD(v161) = 261;
      v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v26 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v159, (std::string *)(v26 + 8));
      LODWORD(a1) = a1 | 1;
      v207 = a1;
      v204 = (_BYTE *)v26;
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
      v14 = 1;
    }
    else
    {
      v209 = v198;
      llvm::MachO::getTargetTripleName((unsigned __int8 *)&v208, &v180);
      LOWORD(v161) = 260;
      *(_QWORD *)&v159 = &v180;
      llvm::Triple::Triple(&__p, (llvm::formatv_object_base **)&v159);
      ArchName = llvm::Triple::getArchName((llvm::Triple *)&__p);
      LOBYTE(v182) = llvm::MachO::getArchitectureFromName(ArchName, v20);
      HIDWORD(v182) = llvm::MachO::mapToPlatformType((uint64_t)&__p);
      v183 = (_QWORD *)llvm::MachO::mapToSupportedOSVersion((llvm::MachO *)&__p, v21);
      v184 = v22;
      v23 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>((uint64_t)&v168, (unint64_t)&v182, 1);
      v24 = v168 + 24 * DWORD2(v168);
      v25 = *(_OWORD *)v23;
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
      *(_OWORD *)v24 = v25;
      ++DWORD2(v168);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v180.__r_.__value_.__l.__data_);
      v14 = 0;
    }
    if ((v210 & 1) != 0)
    {
      v27 = v208;
      v208 = 0;
      if (v27)
        (*((void (**)(const void **))*v27 + 1))(v27);
    }
LABEL_37:
    if ((v192 & 1) != 0)
      goto LABEL_38;
LABEL_40:
    if (v14)
      goto LABEL_62;
    v5 += 16;
    if (v5 == v6)
    {
      v207 = a1 & 0xFE;
      v204 = v206;
      v205 = 0x500000000;
      if (DWORD2(v168))
        llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v204, (uint64_t)&v168);
      goto LABEL_62;
    }
  }
  *(_QWORD *)&v159 = "invalid ";
  *((_QWORD *)&v159 + 1) = 8;
  v160 = xmmword_251C1DB18;
  v161 = " section";
  v162 = 8;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
  llvm::SmallString<128u>::append(&__p, (uint64_t)&v159, 3);
  v29 = operator new();
  LOWORD(v161) = 261;
  v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)v29 = off_251C1DF68;
  llvm::Twine::str((llvm::formatv_object_base **)&v159, (std::string *)(v29 + 8));
  v207 = a1 | 1;
  v204 = (_BYTE *)v29;
  if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
    free(__p.__r_.__value_.__l.__data_);
LABEL_62:
  if ((__int128 *)v168 != &v169)
    free((void *)v168);
  a1 = v142;
LABEL_65:
  if ((v207 & 1) != 0)
  {
    v34 = v204;
    v204 = 0;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v34;
    return llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)&v204);
  }
  v200 = &v202;
  v201 = 0x500000000;
  if ((_DWORD)v205)
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v200, (uint64_t)&v204);
  v30 = (_QWORD *)llvm::json::Object::getArray(v2, (uint64_t)"install_names", 13);
  if (v30 && *(_WORD *)*v30 == 7)
  {
    v31 = *v30 + 8;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_251C1E048;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)llvm::json::Object::getString;
    __p.__r_.__value_.__r.__words[2] = 0;
    v178[0] = &__p;
    *((_QWORD *)&v169 + 1) = 0;
    getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&v198, 21, v31, (uint64_t)&__p, (uint64_t)&v168);
    p_p = (std::string *)v178[0];
    if ((std::string *)v178[0] == &__p)
    {
      v33 = 4;
      p_p = &__p;
LABEL_77:
      (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v33))();
    }
    else if (v178[0])
    {
      v33 = 5;
      goto LABEL_77;
    }
  }
  else
  {
    *(_QWORD *)&v168 = "invalid ";
    *((_QWORD *)&v168 + 1) = 8;
    v169 = xmmword_251C1DB58;
    v170 = " section";
    v171 = 8;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
    llvm::SmallString<128u>::append(&__p, (uint64_t)&v168, 3);
    v35 = operator new();
    LOWORD(v170) = 261;
    v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)v35 = off_251C1DF68;
    llvm::Twine::str((llvm::formatv_object_base **)&v168, (std::string *)(v35 + 8));
    v199 |= 1u;
    *(_QWORD *)&v198 = v35;
    if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
      free(__p.__r_.__value_.__l.__data_);
  }
  if ((v199 & 1) != 0)
  {
    v45 = v198;
LABEL_89:
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v45;
    goto LABEL_90;
  }
  v36 = v198;
  StubParser::getPackedVersion((uint64_t)&v196, v2, 10);
  if ((v197 & 1) != 0)
  {
    v45 = v196;
    goto LABEL_89;
  }
  v37 = v196;
  StubParser::getPackedVersion((uint64_t)&v194, v2, 11);
  if ((v195 & 1) != 0)
  {
    v45 = v194;
    goto LABEL_89;
  }
  v38 = v194;
  v39 = llvm::json::Object::getArray(v2, (uint64_t)"swift_abi", 9);
  if (!v39 || (v40 = *(_WORD **)v39, *(_QWORD *)v39 == *(_QWORD *)(v39 + 8)))
  {
    LOBYTE(v44) = 0;
  }
  else
  {
    if (*v40 != 7)
    {
      *(_QWORD *)&v168 = "invalid ";
      *((_QWORD *)&v168 + 1) = 8;
      v169 = xmmword_251C1DB98;
      v170 = " section";
      v171 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v168, 3);
      v44 = operator new();
      LOWORD(v170) = 261;
      v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v44 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v168, (std::string *)(v44 + 8));
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
      goto LABEL_120;
    }
    *(_QWORD *)&v159 = &off_251C1DFB8;
    *((_QWORD *)&v159 + 1) = llvm::json::Object::getInteger;
    *(_QWORD *)&v160 = 0;
    *((_QWORD *)&v160 + 1) = &v159;
    Integer = llvm::json::Object::getInteger((uint64_t)(v40 + 4), (uint64_t)"abi", 3);
    v43 = v42;
    if (v42)
    {
      v44 = Integer;
    }
    else
    {
      *(_QWORD *)&v168 = "invalid ";
      *((_QWORD *)&v168 + 1) = 8;
      v169 = xmmword_251C1DBA8;
      v170 = " section";
      v171 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v168, 3);
      v44 = operator new();
      LOWORD(v170) = 261;
      v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v44 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v168, (std::string *)(v44 + 8));
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
    }
    v56 = (__int128 *)*((_QWORD *)&v160 + 1);
    if (*((__int128 **)&v160 + 1) == &v159)
    {
      v57 = 4;
      v56 = &v159;
LABEL_118:
      (*(void (**)(void))(*(_QWORD *)v56 + 8 * v57))();
    }
    else if (*((_QWORD *)&v160 + 1))
    {
      v57 = 5;
      goto LABEL_118;
    }
    if (!v43)
    {
LABEL_120:
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v44;
      goto LABEL_90;
    }
  }
  LODWORD(v173) = 0;
  v47 = llvm::json::Object::getArray(v2, (uint64_t)"flags", 5);
  if (!v47 || (v48 = *(_WORD **)v47, *(_QWORD *)v47 == *(_QWORD *)(v47 + 8)))
  {
    v52 = 0;
  }
  else
  {
    if (*v48 != 7)
    {
      *(_QWORD *)&v168 = "invalid ";
      *((_QWORD *)&v168 + 1) = 8;
      v169 = xmmword_251C1DB38;
      v170 = " section";
      v171 = 8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_24AA2AC90;
      llvm::SmallString<128u>::append(&__p, (uint64_t)&v168, 3);
      v54 = operator new();
      LOWORD(v170) = 261;
      v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)v54 = off_251C1DF68;
      llvm::Twine::str((llvm::formatv_object_base **)&v168, (std::string *)(v54 + 8));
      if (__p.__r_.__value_.__l.__data_ != (std::string::pointer)v178)
        free(__p.__r_.__value_.__l.__data_);
      goto LABEL_125;
    }
    v49 = v2;
    *(_QWORD *)&v159 = &off_251C1E2D0;
    *((_QWORD *)&v159 + 1) = &v173;
    *((_QWORD *)&v160 + 1) = &v159;
    collectFromArray((uint64_t *)&__p, 8, (uint64_t)(v48 + 4), (uint64_t)&v159);
    v50 = (__int128 *)*((_QWORD *)&v160 + 1);
    if (*((__int128 **)&v160 + 1) == &v159)
    {
      v51 = 4;
      v50 = &v159;
LABEL_123:
      (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
    }
    else if (*((_QWORD *)&v160 + 1))
    {
      v51 = 5;
      goto LABEL_123;
    }
    v54 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
LABEL_125:
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v54;
      goto LABEL_90;
    }
    v2 = v49;
    v52 = (char)v173;
  }
  StubParser::getUmbrellaSection((uint64_t)&v208, v2, (uint64_t)&v200);
  if ((v210 & 1) != 0)
  {
    v53 = v208;
    v208 = 0;
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v53;
  }
  else
  {
    v154[0] = 0;
    v154[1] = 0;
    v153 = v154;
    std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *> *,long>>>((uint64_t)&v153, v208, (const void ***)&v209);
    StubParser::getLibSection((uint64_t)&v190, v2, 17, 18, (uint64_t)&v200);
    if ((v193 & 1) != 0)
    {
      v55 = v190;
      v190 = 0;
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v55;
    }
    else
    {
      v152[0] = 0;
      v152[1] = 0;
      v151 = v152;
      std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *> *,long>>>((uint64_t)&v151, v190, &v191);
      StubParser::getLibSection((uint64_t)&v186, v2, 19, 20, (uint64_t)&v200);
      if ((v189 & 1) != 0)
      {
        v58 = v186;
        v186 = 0;
        *(_BYTE *)(a1 + 8) |= 1u;
        *(_QWORD *)a1 = v58;
      }
      else
      {
        v149 = v186;
        v150[0] = v187;
        v150[1] = v188;
        if (v188)
        {
          v187[2] = v150;
          v186 = (unsigned __int8 *)&v187;
          v187 = 0;
          v188 = 0;
        }
        else
        {
          v149 = (unsigned __int8 *)v150;
        }
        StubParser::getLibSection((uint64_t)&v182, v2, 33, 34, (uint64_t)&v200);
        if ((v185 & 1) != 0)
        {
          v59 = v182;
          v182 = 0;
          *(_BYTE *)(a1 + 8) |= 1u;
          *(_QWORD *)a1 = v59;
        }
        else
        {
          v147 = v182;
          v148[0] = v183;
          v148[1] = v184;
          if (v184)
          {
            v183[2] = v148;
            v182 = &v183;
            v183 = 0;
            v184 = 0;
          }
          else
          {
            v147 = v148;
          }
          StubParser::getLibSection((uint64_t)&v180, v2, 35, 20, (uint64_t)&v200);
          if ((v181 & 1) != 0)
          {
            v60 = v180.__r_.__value_.__r.__words[0];
            v180.__r_.__value_.__r.__words[0] = 0;
            *(_BYTE *)(a1 + 8) |= 1u;
            *(_QWORD *)a1 = v60;
          }
          else
          {
            v146 = v180;
            if (v180.__r_.__value_.__r.__words[2])
            {
              *(_QWORD *)(v180.__r_.__value_.__l.__size_ + 16) = &v146.__r_.__value_.__l.__size_;
              v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180.__r_.__value_.__l.__size_;
              *(_OWORD *)&v180.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146.__r_.__value_.__l.__size_;
            }
            StubParser::getSymbolSection((uint64_t)&__p, v2, 22, (uint64_t)&v200);
            if ((v179 & 1) != 0)
            {
              v139 = __p.__r_.__value_.__r.__words[0];
              __p.__r_.__value_.__r.__words[0] = 0;
              *(_BYTE *)(a1 + 8) |= 1u;
              *(_QWORD *)a1 = v139;
            }
            else
            {
              v173 = &v175;
              v174 = 0x100000000;
              if (LODWORD(__p.__r_.__value_.__r.__words[1]))
                llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=((uint64_t)&v173, (uint64_t)&__p);
              StubParser::getSymbolSection((uint64_t)&v168, v2, 23, (uint64_t)&v200);
              if ((v172 & 1) != 0)
              {
                v140 = v168;
                *(_QWORD *)&v168 = 0;
                *(_BYTE *)(a1 + 8) |= 1u;
                *(_QWORD *)a1 = v140;
              }
              else
              {
                v164 = &v166;
                v165 = 0x100000000;
                if (DWORD2(v168))
                  llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=((uint64_t)&v164, (uint64_t)&v168);
                StubParser::getSymbolSection((uint64_t)&v159, v2, 24, (uint64_t)&v200);
                if ((v163 & 1) != 0)
                {
                  v141 = v159;
                  *(_QWORD *)&v159 = 0;
                  *(_BYTE *)(a1 + 8) |= 1u;
                  *(_QWORD *)a1 = v141;
                }
                else
                {
                  v155 = &v157;
                  v156 = 0x100000000;
                  if (DWORD2(v159))
                    llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=((uint64_t)&v155, (uint64_t)&v159);
                  v61 = operator new();
                  v145 = llvm::MachO::InterfaceFile::InterfaceFile((llvm::MachO::InterfaceFile *)v61);
                  llvm::MachO::InterfaceFile::setInstallName((uint64_t)v145, (void *)v36, *((size_t *)&v36 + 1));
                  *(_DWORD *)(v61 + 288) = v37;
                  *(_DWORD *)(v61 + 292) = v38;
                  *(_BYTE *)(v61 + 296) = v44;
                  *(_BYTE *)(v61 + 297) = (v52 & 1) == 0;
                  *(_BYTE *)(v61 + 298) = (v52 & 2) == 0;
                  if ((_DWORD)v201)
                  {
                    v62 = (unsigned __int8 *)v200;
                    v63 = 24 * v201;
                    do
                    {
                      llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v61 + 96, v62);
                      v62 += 24;
                      v63 -= 24;
                    }
                    while (v63);
                  }
                  v64 = v151;
                  if (v151 != v152)
                  {
                    do
                    {
                      v65 = *((unsigned int *)v64 + 16);
                      if ((_DWORD)v65)
                      {
                        v66 = v64[7];
                        v67 = 24 * v65;
                        do
                        {
                          v68 = *(_OWORD *)v66;
                          v144 = v66[2];
                          v143 = v68;
                          v69 = *((_BYTE *)v64 + 55);
                          if (v69 >= 0)
                            v70 = v64 + 4;
                          else
                            v70 = v64[4];
                          if (v69 >= 0)
                            v71 = *((unsigned __int8 *)v64 + 55);
                          else
                            v71 = (size_t)v64[5];
                          v72 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v61 + 328), v70, v71);
                          llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v72 + 24, (unsigned __int8 *)&v143);
                          v66 += 3;
                          v67 -= 24;
                        }
                        while (v67);
                      }
                      v73 = v64[1];
                      if (v73)
                      {
                        do
                        {
                          v74 = (_QWORD **)v73;
                          v73 = (_QWORD *)*v73;
                        }
                        while (v73);
                      }
                      else
                      {
                        do
                        {
                          v74 = (_QWORD **)v64[2];
                          v75 = *v74 == v64;
                          v64 = v74;
                        }
                        while (!v75);
                      }
                      v64 = v74;
                    }
                    while (v74 != v152);
                  }
                  v76 = v149;
                  if (v149 != (unsigned __int8 *)v150)
                  {
                    do
                    {
                      v77 = *((unsigned int *)v76 + 16);
                      if ((_DWORD)v77)
                      {
                        v78 = (__int128 *)*((_QWORD *)v76 + 7);
                        v79 = 24 * v77;
                        do
                        {
                          v80 = *v78;
                          v144 = *((_QWORD *)v78 + 2);
                          v143 = v80;
                          v81 = v76[55];
                          if (v81 >= 0)
                            v82 = v76 + 32;
                          else
                            v82 = (const void *)*((_QWORD *)v76 + 4);
                          if (v81 >= 0)
                            v83 = v76[55];
                          else
                            v83 = *((_QWORD *)v76 + 5);
                          v84 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v61 + 352), v82, v83);
                          llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v84 + 24, (unsigned __int8 *)&v143);
                          v78 = (__int128 *)((char *)v78 + 24);
                          v79 -= 24;
                        }
                        while (v79);
                      }
                      v85 = (unsigned __int8 *)*((_QWORD *)v76 + 1);
                      if (v85)
                      {
                        do
                        {
                          v86 = v85;
                          v85 = *(unsigned __int8 **)v85;
                        }
                        while (v85);
                      }
                      else
                      {
                        do
                        {
                          v86 = (unsigned __int8 *)*((_QWORD *)v76 + 2);
                          v75 = *(_QWORD *)v86 == (_QWORD)v76;
                          v76 = v86;
                        }
                        while (!v75);
                      }
                      v76 = v86;
                    }
                    while (v86 != (unsigned __int8 *)v150);
                  }
                  v87 = v146.__r_.__value_.__r.__words[0];
                  if ((std::string::size_type *)v146.__r_.__value_.__l.__data_ != &v146.__r_.__value_.__r.__words[1])
                  {
                    do
                    {
                      v88 = *(unsigned int *)(v87 + 64);
                      if ((_DWORD)v88)
                      {
                        v89 = *(__int128 **)(v87 + 56);
                        v90 = 24 * v88;
                        do
                        {
                          v91 = *v89;
                          v144 = *((_QWORD *)v89 + 2);
                          v143 = v91;
                          v92 = *(_BYTE *)(v87 + 55);
                          if (v92 >= 0)
                            v93 = (const void *)(v87 + 32);
                          else
                            v93 = *(const void **)(v87 + 32);
                          if (v92 >= 0)
                            v94 = *(unsigned __int8 *)(v87 + 55);
                          else
                            v94 = *(_QWORD *)(v87 + 40);
                          v95 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v61 + 424), v93, v94);
                          llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v95 + 24, (unsigned __int8 *)&v143);
                          v89 = (__int128 *)((char *)v89 + 24);
                          v90 -= 24;
                        }
                        while (v90);
                      }
                      v96 = *(std::string **)(v87 + 8);
                      if (v96)
                      {
                        do
                        {
                          v97 = v96;
                          v96 = (std::string *)v96->__r_.__value_.__r.__words[0];
                        }
                        while (v96);
                      }
                      else
                      {
                        do
                        {
                          v97 = *(std::string **)(v87 + 16);
                          v75 = v97->__r_.__value_.__r.__words[0] == v87;
                          v87 = (std::string::size_type)v97;
                        }
                        while (!v75);
                      }
                      v87 = (std::string::size_type)v97;
                    }
                    while (v97 != (std::string *)&v146.__r_.__value_.__r.__words[1]);
                  }
                  v98 = v153;
                  if (v153 != v154)
                  {
                    do
                    {
                      v99 = *((unsigned int *)v98 + 16);
                      if ((_DWORD)v99)
                      {
                        v100 = v98[7];
                        v101 = 24 * v99;
                        do
                        {
                          v102 = *(_OWORD *)v100;
                          v144 = v100[2];
                          v143 = v102;
                          v103 = *((_BYTE *)v98 + 55);
                          if (v103 >= 0)
                            v104 = v98 + 4;
                          else
                            v104 = v98[4];
                          if (v103 >= 0)
                            v105 = *((unsigned __int8 *)v98 + 55);
                          else
                            v105 = (size_t)v98[5];
                          llvm::MachO::InterfaceFile::addParentUmbrella(v61, (unsigned __int8 *)&v143, v104, v105);
                          v100 += 3;
                          v101 -= 24;
                        }
                        while (v101);
                      }
                      v106 = v98[1];
                      if (v106)
                      {
                        do
                        {
                          v107 = (_QWORD **)v106;
                          v106 = (_QWORD *)*v106;
                        }
                        while (v106);
                      }
                      else
                      {
                        do
                        {
                          v107 = (_QWORD **)v98[2];
                          v75 = *v107 == v98;
                          v98 = v107;
                        }
                        while (!v75);
                      }
                      v98 = v107;
                    }
                    while (v107 != v154);
                  }
                  v108 = v147;
                  if (v147 != v148)
                  {
                    do
                    {
                      v109 = *((unsigned int *)v108 + 16);
                      if ((_DWORD)v109)
                      {
                        v110 = v108[7];
                        v111 = 24 * v109;
                        do
                        {
                          v112 = *(_OWORD *)v110;
                          v144 = v110[2];
                          v143 = v112;
                          v113 = *((_BYTE *)v108 + 55);
                          if (v113 >= 0)
                            v114 = v108 + 4;
                          else
                            v114 = v108[4];
                          if (v113 >= 0)
                            v115 = *((unsigned __int8 *)v108 + 55);
                          else
                            v115 = (size_t)v108[5];
                          llvm::MachO::InterfaceFile::addRPath(v61, (unsigned __int8 *)&v143, v114, v115);
                          v110 += 3;
                          v111 -= 24;
                        }
                        while (v111);
                      }
                      v116 = v108[1];
                      if (v116)
                      {
                        do
                        {
                          v117 = (_QWORD **)v116;
                          v116 = (_QWORD *)*v116;
                        }
                        while (v116);
                      }
                      else
                      {
                        do
                        {
                          v117 = (_QWORD **)v108[2];
                          v75 = *v117 == v108;
                          v108 = v117;
                        }
                        while (!v75);
                      }
                      v108 = v117;
                    }
                    while (v117 != v148);
                  }
                  if ((_DWORD)v174)
                  {
                    v118 = v173;
                    v119 = &v173[20 * v174];
                    do
                    {
                      v120 = (unsigned __int8 *)v118[17];
                      v121 = (unsigned __int8 *)v118[18];
                      while (v120 != v121)
                      {
                        v122 = (char)v120[31];
                        if (v122 >= 0)
                          v123 = v120 + 8;
                        else
                          v123 = (const void *)*((_QWORD *)v120 + 1);
                        if (v122 >= 0)
                          v124 = v120[31];
                        else
                          v124 = *((_QWORD *)v120 + 2);
                        llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v61 + 448), *v120, v123, v124, v120[32], v118);
                        v120 += 40;
                      }
                      v118 += 20;
                    }
                    while (v118 != v119);
                  }
                  if ((_DWORD)v165)
                  {
                    v125 = v164;
                    v126 = &v164[20 * v165];
                    do
                    {
                      v127 = (unsigned __int8 *)v125[17];
                      v128 = (unsigned __int8 *)v125[18];
                      while (v127 != v128)
                      {
                        v129 = (char)v127[31];
                        if (v129 >= 0)
                          v130 = v127 + 8;
                        else
                          v130 = (const void *)*((_QWORD *)v127 + 1);
                        if (v129 >= 0)
                          v131 = v127[31];
                        else
                          v131 = *((_QWORD *)v127 + 2);
                        llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v61 + 448), *v127, v130, v131, v127[32], v125);
                        v127 += 40;
                      }
                      v125 += 20;
                    }
                    while (v125 != v126);
                  }
                  if ((_DWORD)v156)
                  {
                    v132 = v155;
                    v133 = &v155[20 * v156];
                    do
                    {
                      v134 = (unsigned __int8 *)v132[17];
                      v135 = (unsigned __int8 *)v132[18];
                      while (v134 != v135)
                      {
                        v136 = (char)v134[31];
                        if (v136 >= 0)
                          v137 = v134 + 8;
                        else
                          v137 = (const void *)*((_QWORD *)v134 + 1);
                        if (v136 >= 0)
                          v138 = v134[31];
                        else
                          v138 = *((_QWORD *)v134 + 2);
                        llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v61 + 448), *v134, v137, v138, v134[32], v132);
                        v134 += 40;
                      }
                      v132 += 20;
                    }
                    while (v132 != v133);
                  }
                  *(_BYTE *)(a1 + 8) &= ~1u;
                  v145 = 0;
                  *(_QWORD *)a1 = v61;
                  std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](&v145, 0);
                  llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v155);
                }
                llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected((uint64_t)&v159);
                llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v164);
              }
              llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected((uint64_t)&v168);
              llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v173);
            }
            llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected((uint64_t)&__p);
            std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v146, (_QWORD *)v146.__r_.__value_.__l.__size_);
          }
          llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v180);
          std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v147, v148[0]);
        }
        llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v182);
        std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v149, v150[0]);
      }
      llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v186);
      std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v151, v152[0]);
    }
    llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v190);
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v153, v154[0]);
  }
  llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v208);
LABEL_90:
  if (v200 != &v202)
    free(v200);
  return llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)&v204);
}

void llvm::MachO::TextAPIReader::getAsJSON(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm::formatv_object_base *v2;
  uint64_t *v4;
  void *Integer;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t Object;
  llvm::MachO::InterfaceFile *v16;
  uint64_t Array;
  const llvm::json::Value *v18;
  const llvm::json::Value *v19;
  uint64_t v20;
  llvm::MachO::InterfaceFile **v21;
  __int128 *v22;
  char v23;
  uint64_t (**v24)();
  unint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  const llvm::json::Value *v26;
  uint64_t (**v27)();
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t (***v34)();
  char *v35;
  uint64_t (**v36)();
  llvm::MachO::InterfaceFile **v37;
  llvm::MachO::InterfaceFile **v38;
  llvm::formatv_object_base *i;
  _DWORD *v40;
  _QWORD *v41;
  _DWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  llvm::MachO::InterfaceFile *v48;
  int v49;
  llvm::MachO::InterfaceFile *v50;
  char v51;
  void *v52;
  uint64_t v53;
  char v54;
  uint64_t (**v55)();
  char v56;
  uint64_t (***v57)();
  uint64_t (**v58)();
  unint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  llvm::MachO::InterfaceFile **v60;
  uint64_t (***v61)();
  void *v62;
  __int128 v63;
  _BYTE v64[128];
  llvm::formatv_object_base *v65;
  uint64_t v66;
  __int128 v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  llvm::json::parse(*(llvm **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v52);
  if ((v54 & 1) != 0)
  {
    v10 = v52;
    v52 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v10;
    goto LABEL_78;
  }
  if ((unsigned __int16)v52 == 7)
    v4 = &v53;
  else
    v4 = 0;
  v58 = &off_251C1DFB8;
  v59 = llvm::json::Object::getInteger;
  v60 = 0;
  v61 = &v58;
  v55 = &off_251C1E000;
  v57 = &v55;
  Integer = (void *)llvm::json::Object::getInteger((uint64_t)v4, (uint64_t)"tapi_tbd_version", 16);
  if (v6)
  {
    if (!v57)
    {
      v8 = Integer;
      v9 = 1;
      goto LABEL_21;
    }
    v62 = Integer;
    v7 = ((uint64_t (*)(uint64_t (***)(), void **))(*v57)[6])(v57, &v62);
    if ((v7 & 0xFF00000000) != 0)
    {
      v8 = v7;
      v9 = 1;
      goto LABEL_16;
    }
    v65 = (llvm::formatv_object_base *)"invalid ";
    v66 = 8;
    v67 = Keys[0];
    v68 = " section";
    v69 = 8;
  }
  else
  {
    v65 = (llvm::formatv_object_base *)"invalid ";
    v66 = 8;
    v67 = Keys[0];
    v68 = " section";
    v69 = 8;
  }
  v62 = v64;
  v63 = xmmword_24AA2AC90;
  llvm::SmallString<128u>::append(&v62, (uint64_t)&v65, 3);
  v8 = operator new();
  LOWORD(v68) = 261;
  v65 = (llvm::formatv_object_base *)v62;
  v66 = v63;
  *(_QWORD *)v8 = off_251C1DF68;
  llvm::Twine::str(&v65, (std::string *)(v8 + 8));
  if (v62 != v64)
    free(v62);
  v9 = 0;
LABEL_16:
  v11 = v57;
  if (v57 == &v55)
  {
    v12 = 4;
    v11 = &v55;
  }
  else
  {
    if (!v57)
      goto LABEL_21;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_21:
  v13 = v61;
  if (v61 == &v58)
  {
    v14 = 4;
    v13 = &v58;
  }
  else
  {
    if (!v61)
      goto LABEL_26;
    v14 = 5;
  }
  (*v13)[v14]();
LABEL_26:
  if (!v9)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v8;
    goto LABEL_78;
  }
  Object = llvm::json::Object::getObject((uint64_t)v4, (uint64_t)"main_library", 12);
  StubParser::parseToInterfaceFile((uint64_t)&v50, Object);
  v16 = v50;
  if ((v51 & 1) == 0)
  {
    *((_DWORD *)v50 + 64) = v8;
    v50 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    Array = llvm::json::Object::getArray((uint64_t)v4, (uint64_t)"libraries", 9);
    if (Array)
    {
      v18 = *(const llvm::json::Value **)Array;
      v19 = *(const llvm::json::Value **)(Array + 8);
      if (*(const llvm::json::Value **)Array != v19)
      {
        v47 = a2;
        v48 = v16;
        v20 = 0;
        v21 = 0;
        v49 = v8;
        while (1)
        {
          llvm::json::Value::copyFrom((llvm::json::Value *)&v62, v18);
          v22 = (unsigned __int16)v62 == 7 ? &v63 : 0;
          StubParser::parseToInterfaceFile((uint64_t)&v55, (uint64_t)v22);
          v23 = v56;
          v24 = v55;
          v55 = 0;
          if ((v56 & 1) != 0)
          {
            v20 = v20 | 1;
            v2 = (llvm::formatv_object_base *)v24;
          }
          else
          {
            if (v21 >= v60)
            {
              v26 = v19;
              v27 = v58;
              v28 = ((char *)v21 - (char *)v58) >> 3;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 61)
                abort();
              v30 = v20;
              v31 = (char *)v60 - (char *)v58;
              if (((char *)v60 - (char *)v58) >> 2 > v29)
                v29 = v31 >> 2;
              v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v29;
              if (v32)
              {
                if (v32 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v33 = (char *)operator new(8 * v32);
              }
              else
              {
                v33 = 0;
              }
              v34 = (uint64_t (***)())&v33[8 * v28];
              v35 = &v33[8 * v32];
              *v34 = v24;
              v25 = (unint64_t (*)(uint64_t, uint64_t, uint64_t))(v34 + 1);
              if (v21 == (llvm::MachO::InterfaceFile **)v27)
              {
                v58 = (uint64_t (**)())v34;
                v59 = (unint64_t (*)(uint64_t, uint64_t, uint64_t))(v34 + 1);
                v60 = (llvm::MachO::InterfaceFile **)&v33[8 * v32];
                v20 = v30;
              }
              else
              {
                v20 = v30;
                do
                {
                  v36 = (uint64_t (**)())*--v21;
                  *v21 = 0;
                  *--v34 = v36;
                }
                while (v21 != (llvm::MachO::InterfaceFile **)v27);
                v21 = (llvm::MachO::InterfaceFile **)v58;
                v37 = (llvm::MachO::InterfaceFile **)v59;
                v58 = (uint64_t (**)())v34;
                v59 = v25;
                v60 = (llvm::MachO::InterfaceFile **)v35;
                while (v37 != v21)
                  std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](--v37, 0);
              }
              v19 = v26;
              if (v21)
                operator delete(v21);
            }
            else
            {
              *v21 = (llvm::MachO::InterfaceFile *)v24;
              v25 = (unint64_t (*)(uint64_t, uint64_t, uint64_t))(v21 + 1);
            }
            v59 = v25;
            v21 = (llvm::MachO::InterfaceFile **)v25;
          }
          llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&v55);
          llvm::json::Value::destroy(&v62);
          if ((v23 & 1) != 0)
            break;
          v18 = (const llvm::json::Value *)((char *)v18 + 32);
          if (v18 == v19)
          {
            v2 = (llvm::formatv_object_base *)v58;
            v38 = v60;
            v16 = v48;
            LODWORD(v8) = v49;
            a2 = v47;
            goto LABEL_65;
          }
        }
        BYTE8(v67) = v20;
        v65 = v2;
        v16 = v48;
        LODWORD(v8) = v49;
        a2 = v47;
        goto LABEL_67;
      }
      LOBYTE(v20) = 0;
      v38 = 0;
      v21 = 0;
      v2 = 0;
LABEL_65:
      LOBYTE(v20) = v20 & 0xFE;
      BYTE8(v67) = v20;
      v65 = v2;
      v66 = (uint64_t)v21;
      *(_QWORD *)&v67 = v38;
    }
    else
    {
      v2 = 0;
      LOBYTE(v20) = 0;
      v65 = 0;
      v66 = 0;
      BYTE8(v67) = 0;
      *(_QWORD *)&v67 = 0;
    }
    v58 = 0;
    v59 = 0;
    v60 = 0;
LABEL_67:
    v62 = &v58;
    std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v62);
    if ((v20 & 1) != 0)
    {
      v65 = 0;
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v2;
      llvm::Expected<std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>>::~Expected((uint64_t)&v65);
      llvm::MachO::InterfaceFile::~InterfaceFile(v16);
      MEMORY[0x24BD1B3A4]();
    }
    else
    {
      for (i = (llvm::formatv_object_base *)v66; v2 != i; v2 = (llvm::formatv_object_base *)((char *)v2 + 8))
      {
        v40 = *(_DWORD **)v2;
        v40[64] = v8;
        v62 = v40;
        v41 = (_QWORD *)operator new();
        v42 = *(_DWORD **)v2;
        *v41 = &off_251C1DAA0;
        v41[1] = 0;
        v41[2] = 0;
        v41[3] = v42;
        *(_QWORD *)&v63 = v41;
        *(_QWORD *)v2 = 0;
        llvm::MachO::InterfaceFile::addDocument((uint64_t)v16, (char *)&v62);
        v43 = (std::__shared_weak_count *)v63;
        if ((_QWORD)v63)
        {
          v44 = (unint64_t *)(v63 + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
      }
      *(_BYTE *)(a2 + 8) &= ~1u;
      *(_QWORD *)a2 = v16;
      llvm::Expected<std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>>::~Expected((uint64_t)&v65);
    }
    goto LABEL_77;
  }
  v50 = 0;
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v16;
LABEL_77:
  llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&v50);
LABEL_78:
  if ((v54 & 1) != 0)
  {
    v46 = v52;
    v52 = 0;
    if (v46)
      (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  }
  else
  {
    llvm::json::Value::destroy(&v52);
  }
}

_QWORD *llvm::SmallString<128u>::append(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *result;
  size_t *v12;
  size_t v13;

  v4 = a1[1];
  if (!a3)
    return llvm::SmallVectorImpl<char>::resizeImpl<true>(a1, a1[1]);
  v6 = 16 * a3;
  v7 = (uint64_t *)(a2 + 8);
  v8 = 16 * a3;
  v9 = a1[1];
  do
  {
    v10 = *v7;
    v7 += 2;
    v9 += v10;
    v8 -= 16;
  }
  while (v8);
  result = llvm::SmallVectorImpl<char>::resizeImpl<true>(a1, v9);
  v12 = (size_t *)(a2 + 8);
  do
  {
    if (*v12)
    {
      result = memmove((void *)(*a1 + v4), (const void *)*(v12 - 1), *v12);
      v13 = *v12;
    }
    else
    {
      v13 = 0;
    }
    v4 += v13;
    v12 += 2;
    v6 -= 16;
  }
  while (v6);
  return result;
}

unsigned int *llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  unsigned int *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a3 - __src) >> 3);
  v8 = result[2];
  if (v7 + v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v7 + v8, 24);
    LODWORD(v8) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 24 * v8), __src, v6);
    LODWORD(v8) = v5[2];
  }
  v5[2] = v8 + v7;
  return result;
}

_QWORD *llvm::MachO::SymbolSet::reexports@<X0>(llvm::MachO::SymbolSet *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v6)();
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_251C1DED8;
  v18 = v17;
  v3 = *((_QWORD *)this + 12);
  v4 = v3 + 32 * *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 26))
  {
    v11 = *((_QWORD *)this + 12);
    v12 = v4;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v11);
    v13 = *((_QWORD *)this + 12) + 32 * *((unsigned int *)this + 28);
    v14 = v13;
    if (!v18)
    {
      v16 = 0;
      goto LABEL_9;
    }
    if (v18 != v17)
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
      goto LABEL_9;
    }
    v6 = (uint64_t (**)())v17[0];
  }
  else
  {
    v11 = v3 + 32 * *((unsigned int *)this + 28);
    v12 = v4;
    v6 = &off_251C1DED8;
    v13 = v4;
    v14 = v4;
  }
  v16 = v15;
  ((void (*)(uint64_t, _QWORD *))v6[3])((uint64_t)v17, v15);
LABEL_9:
  llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>(&v11, (uint64_t)v15, a2);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  result = v18;
  if (v18 == v17)
  {
    v10 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C1DED8;
  return result;
}

void std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C1DED8;
}

uint64_t std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)a2 + 153) >> 4) & 1;
}

_QWORD *llvm::MachO::SymbolSet::undefineds@<X0>(llvm::MachO::SymbolSet *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v6)();
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_251C1DF20;
  v18 = v17;
  v3 = *((_QWORD *)this + 12);
  v4 = v3 + 32 * *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 26))
  {
    v11 = *((_QWORD *)this + 12);
    v12 = v4;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v11);
    v13 = *((_QWORD *)this + 12) + 32 * *((unsigned int *)this + 28);
    v14 = v13;
    if (!v18)
    {
      v16 = 0;
      goto LABEL_9;
    }
    if (v18 != v17)
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
      goto LABEL_9;
    }
    v6 = (uint64_t (**)())v17[0];
  }
  else
  {
    v11 = v3 + 32 * *((unsigned int *)this + 28);
    v12 = v4;
    v6 = &off_251C1DF20;
    v13 = v4;
    v14 = v4;
  }
  v16 = v15;
  ((void (*)(uint64_t, _QWORD *))v6[3])((uint64_t)v17, v15);
LABEL_9:
  llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>(&v11, (uint64_t)v15, a2);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  result = v18;
  if (v18 == v17)
  {
    v10 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C1DF20;
  return result;
}

void std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C1DF20;
}

uint64_t std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)a2 + 153) >> 3) & 1;
}

void JSONStubError::~JSONStubError(void **this)
{
  *this = off_251C1DF68;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1DF68;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *JSONStubError::log(JSONStubError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  size_t v8;
  llvm::raw_ostream *result;
  _BYTE *v10;

  v5 = (const char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 8;
  v4 = v5;
  v6 = v3[23];
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = v3[23];
  else
    v8 = *((_QWORD *)v3 + 1);
  result = llvm::raw_ostream::write(a2, v7, v8);
  v10 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v10)
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  *v10 = 10;
  ++*((_QWORD *)a2 + 4);
  return result;
}

uint64_t JSONStubError::convertToErrorCode(JSONStubError *this)
{
  getErrorErrorCat();
  return 3;
}

void std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1DFB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1DFB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(*a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v3);
  return v3(v5, *a3, a3[1]);
}

void std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C1E000;
  return result;
}

void std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C1E000;
}

uint64_t std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::operator()(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 5)
    return 0x100000080;
  else
    return 0;
}

uint64_t std::function<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a4;
  v7[1] = a5;
  v6 = a3;
  if (!a2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x24A9778F4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)a2 + 48))(a2, &v6, v7);
}

void std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_251C1E048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_251C1E048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(*a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v3);
  return v3(v5, *a3, a3[1]);
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E090;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E090;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  uint64_t v6;
  _BYTE v7[8];
  void *__p[2];
  uint64_t v9;
  char v10;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7[0] = 0;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v10 = **(_BYTE **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(_QWORD *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void std::vector<JSONSymbol>::emplace_back<JSONSymbol&>(void **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  void **v20;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (v7 + 1 > 0x666666666666666)
      abort();
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(40 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[40 * v7];
    v13 = &v11[40 * v10];
    std::allocator<JSONSymbol>::construct[abi:nn180100]<JSONSymbol,JSONSymbol&>(v12, a2);
    v6 = v12 + 40;
    v14 = (char *)*a1;
    v15 = (void **)a1[1];
    if (v15 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v12[v16 * 8];
        v18 = (char *)&v15[v16];
        *(v17 - 40) = (char)v15[v16 - 5];
        v19 = *(_OWORD *)&v15[v16 - 4];
        *((_QWORD *)v17 - 2) = v15[v16 - 2];
        *((_OWORD *)v17 - 2) = v19;
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *(v17 - 8) = (char)v15[v16 - 1];
        v16 -= 5;
      }
      while (&v15[v16] != (void **)v14);
      v15 = (void **)*a1;
      v20 = (void **)a1[1];
      *a1 = &v12[v16 * 8];
      a1[1] = v6;
      a1[2] = v13;
      while (v20 != v15)
      {
        if (*((char *)v20 - 9) < 0)
          operator delete(*(v20 - 4));
        v20 -= 5;
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    std::allocator<JSONSymbol>::construct[abi:nn180100]<JSONSymbol,JSONSymbol&>(a1[1], a2);
    v6 = v5 + 40;
  }
  a1[1] = v6;
}

void std::allocator<JSONSymbol>::construct[abi:nn180100]<JSONSymbol,JSONSymbol&>(_BYTE *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_BYTE *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[32] = *(_BYTE *)(a2 + 32);
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E0D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E0D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  uint64_t v6;
  char v7[8];
  void *__p[2];
  uint64_t v9;
  char v10;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7[0] = 1;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v10 = **(_BYTE **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(_QWORD *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E120;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E120;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  uint64_t v6;
  char v7[8];
  void *__p[2];
  uint64_t v9;
  char v10;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7[0] = 2;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v10 = **(_BYTE **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(_QWORD *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  uint64_t v6;
  char v7[8];
  void *__p[2];
  uint64_t v9;
  char v10;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7[0] = 3;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v10 = **(_BYTE **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(_QWORD *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E1B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E1B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  _BYTE v6[8];
  void *__p[2];
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6[0] = 0;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
  }
  v9 = *(_BYTE *)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(**(_QWORD **)(a1 + 8) + 160 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - 24), (uint64_t)v6);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E1F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E1F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v4;
  size_t v5;
  _BYTE v6[8];
  void *__p[2];
  uint64_t v8;
  char v9;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6[0] = 0;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
  }
  v9 = *(_BYTE *)(a1 + 16) | 1;
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(**(_QWORD **)(a1 + 8) + 160 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8) - 24), (uint64_t)v6);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector(uint64_t a1)
{
  llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 160 * *(unsigned int *)(a1 + 8));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v6;
  void *v7;
  void **v8[5];

  if (a2 != a1)
  {
    v8[3] = v2;
    v8[4] = v3;
    v4 = a2;
    do
    {
      v8[0] = (void **)(v4 - 24);
      std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](v8);
      v7 = *(void **)(v4 - 160);
      v4 -= 160;
      v6 = v7;
      if ((void *)(v4 + 16) != v7)
        free(v6);
    }
    while (v4 != a1);
  }
}

uint64_t llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected(uint64_t a1)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(a1 + 136);
  v3 = *(void **)a1;
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    if (v3)
      (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3 != (void *)(a1 + 16))
  {
    free(v3);
  }
  return a1;
}

void std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<JSONSymbol>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<JSONSymbol>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::growAndEmplaceBack<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;

  v7 = 0;
  v4 = a1 + 16;
  v5 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 160, &v7);
  std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](&v5[20 * *(unsigned int *)(a1 + 8)], a2);
  llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::moveElementsForGrow(a1, v5);
  v6 = v7;
  if (*(_QWORD *)a1 != v4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v6;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::moveElementsForGrow(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    v6 = 160 * v3;
    do
    {
      std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](a2, v2);
      a2 += 20;
      v2 += 160;
      v6 -= 160;
    }
    while (v6);
    v2 = *(_QWORD *)a1;
    v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v7 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(v2, v2 + 160 * v7);
}

_QWORD *std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)a1, a2);
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 136);
  a1[19] = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  return a1;
}

void std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,llvm::SmallVector<llvm::MachO::Target,5u>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,llvm::SmallVector<llvm::MachO::Target,5u>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0xC0uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 0;
    *((_QWORD *)v6 + 7) = (char *)v6 + 72;
    *((_QWORD *)v6 + 8) = 0x500000000;
    v12 = 1;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100]((uint64_t)v11, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,llvm::SmallVector<llvm::MachO::Target,5u>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_251C1E240;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_251C1E240;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t **v5;
  _OWORD *v6;
  void *__p[2];
  uint64_t v8;
  void **v9;

  v3 = *(void **)a2;
  v5 = *(uint64_t ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    std::string::basic_string[abi:nn180100](__p, v3, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
  }
  v9 = __p;
  v6 = std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (const void **)__p, (_OWORD **)&v9);
  llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v6 + 56, v4);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C1E288;
  return result;
}

void std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C1E288;
}

uint64_t std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  BOOL v5;
  unsigned int v7;

  v3 = *a2;
  v2 = a2[1];
  v7 = 0;
  v4 = llvm::MachO::PackedVersion::parse64((int *)&v7, v3, v2);
  if ((_BYTE)v4)
    v5 = v4 >= 0x100u;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return v7 | 0x100000000;
}

void std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C1E2D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C1E2D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(uint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 22)
  {
    v8 = *v2;
    v9 = v2[1];
    v10 = *(uint64_t *)((char *)v2 + 14);
    if (v8 == 0x5F7070615F746F6ELL && v9 == 0x6F69736E65747865 && v10 == 0x656661735F6E6F69)
    {
      v7 = 2;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v3 != 14
    || ((v4 = *v2, v5 = *(uint64_t *)((char *)v2 + 6), v4 == 0x6D616E5F74616C66)
      ? (v6 = v5 == 0x6563617073656D61)
      : (v6 = 0),
        !v6))
  {
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  v7 = 1;
LABEL_17:
  **(_DWORD **)(result + 8) |= v7;
  return result;
}

uint64_t llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  }
  return a1;
}

void std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *> *,long>>>(uint64_t a1, const void **a2, const void ***a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void **v8;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  BOOL v15;
  uint64_t **v16;
  uint64_t *v17;
  std::string *v18;
  __int128 v19;
  const void **v20;
  const void ***v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24[15];

  if (a2 != (const void **)a3)
  {
    v24[1] = v6;
    v24[2] = v5;
    v24[13] = v3;
    v24[14] = v4;
    v8 = a2;
    v10 = (uint64_t **)(a1 + 8);
    v11 = a1 + 16;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v10)
        break;
      v13 = v10;
      if (v12)
      {
        do
        {
          v14 = v12;
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
      }
      else
      {
        do
        {
          v14 = (uint64_t)v13[2];
          v15 = *(_QWORD *)v14 == (_QWORD)v13;
          v13 = (uint64_t **)v14;
        }
        while (v15);
      }
      if (std::less<std::string>::operator()[abi:nn180100](v11, (const void **)(v14 + 32), v8 + 4))
      {
        if (!*v10)
          goto LABEL_10;
LABEL_12:
        v24[0] = v14;
        v16 = (uint64_t **)(v14 + 8);
        goto LABEL_14;
      }
      v16 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, v24, v8 + 4);
LABEL_14:
      if (!*v16)
        goto LABEL_15;
LABEL_21:
      v20 = (const void **)v8[1];
      if (v20)
      {
        do
        {
          v21 = (const void ***)v20;
          v20 = (const void **)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (const void ***)v8[2];
          v15 = *v21 == v8;
          v8 = (const void **)v21;
        }
        while (!v15);
      }
      v8 = (const void **)v21;
      if (v21 == a3)
        return;
    }
    v14 = (uint64_t)v10;
    if (!v12)
    {
LABEL_10:
      v24[0] = (uint64_t)v10;
      v16 = v10;
LABEL_15:
      v17 = (uint64_t *)operator new(0xC0uLL);
      v22[1] = v10;
      v18 = (std::string *)(v17 + 4);
      if (*((char *)v8 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v8[4], (std::string::size_type)v8[5]);
      }
      else
      {
        v19 = *((_OWORD *)v8 + 2);
        v17[6] = (uint64_t)v8[6];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      v17[7] = (uint64_t)(v17 + 9);
      v17[8] = 0x500000000;
      if (*((_DWORD *)v8 + 16))
        llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v17 + 7), (uint64_t)(v8 + 7));
      v23 = 1;
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at((uint64_t **)a1, v24[0], v16, v17);
      v22[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100]((uint64_t)v22, 0);
      goto LABEL_21;
    }
    goto LABEL_12;
  }
}

uint64_t llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 176) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector(a1);
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v6 = (_DWORD *)(a2 + 8);
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v7)
      {
        v11 = *(_QWORD *)a1;
        if ((_DWORD)v7)
        {
          v12 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *>(v4, v4 + 160 * v7, v11);
          v11 = *(_QWORD *)a1;
          LODWORD(v8) = *(_DWORD *)(a1 + 8);
        }
        else
        {
          v12 = *(uint64_t **)a1;
        }
        llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range((uint64_t)v12, v11 + 160 * v8);
        *(_DWORD *)(a1 + 8) = v7;
        v13 = *(_QWORD *)a2;
        v14 = *(_QWORD *)a2 + 160 * *(unsigned int *)(a2 + 8);
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v7)
        {
          if ((_DWORD)v8)
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *>(v4, v4 + 160 * v8, *(_QWORD *)a1);
          else
            v8 = 0;
        }
        else
        {
          llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 160 * v8);
          *(_DWORD *)(a1 + 8) = 0;
          v21 = 0;
          v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v7, 160, &v21);
          llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::moveElementsForGrow(a1, v9);
          v10 = v21;
          if (*(_QWORD *)a1 != a1 + 16)
            free(*(void **)a1);
          v8 = 0;
          *(_QWORD *)a1 = v9;
          *(_DWORD *)(a1 + 12) = v10;
        }
        v15 = *(_QWORD *)a2;
        v16 = *(unsigned int *)(a2 + 8);
        if (v8 != v16)
        {
          v17 = (_QWORD *)(*(_QWORD *)a1 + 160 * v8);
          v18 = v15 + 160 * v8;
          v19 = 160 * v16 - 160 * v8;
          do
          {
            v17 = std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](v17, v18)+ 20;
            v18 += 160;
            v19 -= 160;
          }
          while (v19);
          v15 = *(_QWORD *)a2;
        }
        *(_DWORD *)(a1 + 8) = v7;
        v14 = v15 + 160 * *v6;
        v13 = v15;
      }
      llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(v13, v14);
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 160 * *(unsigned int *)(a1 + 8));
      if (*(_QWORD *)a1 != a1 + 16)
        free(*(void **)a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v6 = 0;
  }
  return a1;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = (uint64_t *)(a3 + 136);
    do
    {
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v5 - 17), v4);
      if (*v5)
      {
        std::vector<JSONSymbol>::__clear[abi:nn180100](v5);
        operator delete((void *)*v5);
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      *(_OWORD *)v5 = *(_OWORD *)(v4 + 136);
      v5[2] = *(_QWORD *)(v4 + 152);
      *(_QWORD *)(v4 + 136) = 0;
      *(_QWORD *)(v4 + 144) = 0;
      *(_QWORD *)(v4 + 152) = 0;
      v5 += 20;
      v4 += 160;
    }
    while (v4 != a2);
    return v5 - 17;
  }
  return (uint64_t *)a3;
}

uint64_t llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(uint64_t a1, int a2, const void *a3, size_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  result = llvm::MachO::SymbolSet::addGlobalImpl(a1, a2, a3, a4, a5);
  v13 = *((unsigned int *)a6 + 2);
  if ((_DWORD)v13)
  {
    v14 = (__int128 *)*a6;
    v15 = result + 16;
    v16 = 24 * v13;
    do
    {
      v17 = *v14;
      v19 = *((_QWORD *)v14 + 2);
      v18 = v17;
      result = llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v15, (unsigned __int8 *)&v18);
      v14 = (__int128 *)((char *)v14 + 24);
      v16 -= 24;
    }
    while (v16);
  }
  if (a2 == 2)
    return llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(a1, 1, a3, a4, a5, a6);
  return result;
}

void std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  llvm::MachO::InterfaceFile **v2;
  llvm::MachO::InterfaceFile **v4;
  void *v5;

  v1 = *a1;
  v2 = (llvm::MachO::InterfaceFile **)**a1;
  if (v2)
  {
    v4 = (llvm::MachO::InterfaceFile **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::Expected<std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>>::~Expected(uint64_t a1)
{
  void *v2;
  void **v4;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = (void **)a1;
    std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

uint64_t llvm::MachO::PackedVersion::parse32(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t *v9;
  int v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  if (!a3)
    return 0;
  v16 = v18;
  v17 = 0x300000000;
  llvm::SplitString(a2, a3, (unsigned int *)&v16, ".", 1);
  v5 = v17;
  v6 = (__int128 *)v16;
  if ((v17 - 4) < 0xFFFFFFFD)
  {
LABEL_3:
    v7 = 0;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = *(_OWORD *)v16;
  v7 = 0;
  if ((llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v14, v4) & 1) == 0 && !*((_QWORD *)&v15 + 1))
  {
    if (!(v14 >> 16))
    {
      v10 = (_DWORD)v14 << 16;
      *a1 = (_DWORD)v14 << 16;
      if (v5 < 2)
      {
LABEL_17:
        v7 = 1;
      }
      else
      {
        v11 = v6 + 1;
        v12 = 8 * v5;
        v13 = 8;
        while (1)
        {
          v15 = *v11;
          v7 = 0;
          if ((llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v14, v9) & 1) != 0
            || *((_QWORD *)&v15 + 1))
          {
            break;
          }
          if (v14 > 0xFF)
            goto LABEL_3;
          v10 |= v14 << v13;
          *a1 = v10;
          ++v11;
          v13 -= 8;
          if (v12 + v13 == 16)
            goto LABEL_17;
        }
      }
      goto LABEL_4;
    }
    goto LABEL_3;
  }
LABEL_4:
  if (v6 != (__int128 *)v18)
    free(v6);
  return v7;
}

uint64_t llvm::MachO::PackedVersion::parse64(int *a1, uint64_t a2, unint64_t a3)
{
  unint64_t *v4;
  unsigned int v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  if (!a3)
    return 0;
  v19 = v21;
  v20 = 0x500000000;
  llvm::SplitString(a2, a3, (unsigned int *)&v19, ".", 1);
  v5 = v20;
  v6 = (__int128 *)v19;
  if ((v20 - 6) < 0xFFFFFFFB)
  {
LABEL_3:
    v7 = 0;
    goto LABEL_4;
  }
  v17 = 0;
  v18 = *(_OWORD *)v19;
  v7 = 0;
  if ((llvm::consumeUnsignedInteger((llvm *)&v18, (llvm::StringRef *)0xA, &v17, v4) & 1) == 0 && !*((_QWORD *)&v18 + 1))
  {
    v10 = v17;
    if (!(v17 >> 24))
    {
      if (v17 < 0x10000)
      {
        v11 = 0;
      }
      else
      {
        v10 = 0xFFFF;
        v17 = 0xFFFFLL;
        v11 = 1;
      }
      v12 = v10 << 16;
      *a1 = v10 << 16;
      if (v5 > 1)
      {
        if (v5 == 2)
          v13 = 16;
        else
          v13 = 24;
        v14 = v6 + 1;
        v15 = 8;
        do
        {
          v18 = *v14;
          if ((llvm::consumeUnsignedInteger((llvm *)&v18, (llvm::StringRef *)0xA, &v17, v9) & 1) != 0
            || *((_QWORD *)&v18 + 1)
            || (v16 = v17, v17 >= 0x400))
          {
            v7 = (v11 << 8);
            goto LABEL_4;
          }
          if (v17 >= 0x100)
          {
            v17 = 255;
            v11 = 1;
            v16 = 255;
          }
          v12 |= v16 << v15;
          *a1 = v12;
          v15 -= 8;
          ++v14;
        }
        while (v13 + v15 != 16);
        if (v5 <= 3)
          v7 = (v11 << 8) | 1u;
        else
          v7 = 257;
      }
      else
      {
        v7 = (v11 << 8) | 1u;
      }
      goto LABEL_4;
    }
    goto LABEL_3;
  }
LABEL_4:
  if (v6 != (__int128 *)v21)
    free(v6);
  return v7;
}

llvm::raw_ostream *llvm::MachO::PackedVersion::print(llvm::MachO::PackedVersion *this, llvm::raw_ostream *a2)
{
  int v4;
  llvm::raw_ostream *result;
  int v6;
  uint64_t (**v7)(llvm::format_object_base *__hidden);
  const char *v8;
  int v9;

  v4 = *((unsigned __int16 *)this + 1);
  v7 = &off_251C13928;
  v8 = "%d";
  v9 = v4;
  result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v7);
  v6 = *(_DWORD *)this;
  if ((unsigned __int16)*(_DWORD *)this)
  {
    v7 = &off_251C13928;
    v8 = ".%d";
    v9 = BYTE1(v6);
    result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v7);
    LOBYTE(v6) = *(_BYTE *)this;
  }
  if ((_BYTE)v6)
  {
    v7 = &off_251C13928;
    v8 = ".%d";
    v9 = v6;
    return llvm::raw_ostream::operator<<(a2, (uint64_t)&v7);
  }
  return result;
}

uint64_t llvm::MachO::mapToPlatformType(uint64_t a1)
{
  int v1;
  BOOL v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  int v6;
  unsigned int v7;

  v1 = *(_DWORD *)(a1 + 36);
  switch(v1)
  {
    case 28:
      v2 = *(_DWORD *)(a1 + 40) == 23;
      v3 = 3;
      v4 = 8;
      goto LABEL_6;
    case 29:
      v2 = *(_DWORD *)(a1 + 40) == 23;
      v3 = 4;
      v4 = 9;
LABEL_6:
      if (v2)
        result = v4;
      else
        result = v3;
      break;
    case 30:
      result = 5;
      break;
    case 31:
      result = 10;
      break;
    case 32:
      if (*(_DWORD *)(a1 + 40) == 23)
        result = 12;
      else
        result = 11;
      break;
    case 33:
      result = 14;
      break;
    default:
      if (v1 == 7)
      {
        v6 = *(_DWORD *)(a1 + 40);
        if (v6 == 24)
          v7 = 6;
        else
          v7 = 2;
        if (v6 == 23)
          result = 7;
        else
          result = v7;
      }
      else
      {
        result = v1 == 11;
      }
      break;
  }
  return result;
}

uint64_t **llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert@<X0>(uint64_t **result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v4;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;

  v4 = result;
  if (result[6])
  {
    result = std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(result + 4, a2, a2);
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 16) = v6;
  }
  else
  {
    v7 = *((unsigned int *)result + 2);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = *result;
    v10 = 4 * v7;
    v11 = *result;
    while (*(_DWORD *)v11 != v8)
    {
      v11 = (uint64_t *)((char *)v11 + 4);
      v9 = (uint64_t *)((char *)v9 + 4);
      v10 -= 4;
      if (!v10)
        goto LABEL_10;
    }
    if (v10)
    {
      *(_BYTE *)(a3 + 8) = 1;
      *(_QWORD *)a3 = v9;
      *(_BYTE *)(a3 + 16) = 0;
      return result;
    }
LABEL_10:
    if (v7 > 2)
    {
      do
      {
        v13 = (int *)*v4 + v7 - 1;
        std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(v4 + 4, v13, v13);
        LODWORD(v7) = *((_DWORD *)v4 + 2) - 1;
        *((_DWORD *)v4 + 2) = v7;
      }
      while ((_DWORD)v7);
      result = std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(v4 + 4, a2, a2);
      *(_BYTE *)(a3 + 8) = 0;
      *(_QWORD *)a3 = result;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
LABEL_11:
      result = (uint64_t **)llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)result, v8);
      v12 = (uint64_t)*v4 + 4 * *((unsigned int *)v4 + 2) - 4;
      *(_BYTE *)(a3 + 8) = 1;
      *(_QWORD *)a3 = v12;
      *(_BYTE *)(a3 + 16) = 1;
    }
  }
  return result;
}

void llvm::MachO::getOSAndEnvironmentName(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24A979518(uint64_t a1, std::string *a2)
{
  return std::operator+<char>();
}

unint64_t llvm::MachO::mapToSupportedOSVersion(llvm::MachO *this, const llvm::Triple *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = llvm::Triple::getMinimumSupportedOSVersion(this);
  v7[1] = v3;
  v6[0] = llvm::Triple::getOSVersion(this);
  v6[1] = v4;
  if (llvm::operator<(v6, v7))
    return v7[0];
  else
    return llvm::Triple::getOSVersion(this);
}

uint64_t **std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

unint64_t llvm::MachO::SymbolSet::addGlobalImpl(uint64_t a1, char a2, const void *a3, size_t a4, char a5)
{
  void *v10;
  unint64_t result;
  _BYTE v12[8];
  void *v13;
  size_t v14;
  uint64_t v15;
  char v16;

  if (a4)
  {
    v10 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, a4, 0);
    memcpy(v10, a3, a4);
  }
  else
  {
    v10 = 0;
  }
  v12[0] = a2;
  v13 = v10;
  v14 = a4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::try_emplace<decltype(nullptr)>(a1 + 96, (uint64_t)v12, (uint64_t)&v15);
  if (!v16)
    return *(_QWORD *)(v15 + 24);
  result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 160, 3);
  *(_QWORD *)result = v10;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = result + 32;
  *(_QWORD *)(result + 24) = 0x500000000;
  *(_BYTE *)(result + 152) = a2;
  *(_BYTE *)(result + 153) = a5;
  *(_QWORD *)(v15 + 24) = result;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::try_emplace<decltype(nullptr)>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v11 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>((uint64_t *)a1, (llvm::hashing::detail::hash_state **)a2, &v11);
  v7 = v11;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::InsertIntoBucketImpl<llvm::SymbolsMapKey>(a1, a2, (llvm::hashing::detail::hash_state **)a2, v11);
    v7 = (unsigned __int8 *)result;
    v9 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = v9;
    *(_QWORD *)(result + 24) = 0;
    v8 = 1;
  }
  v10 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

unsigned __int8 *llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::InsertIntoBucketImpl<llvm::SymbolsMapKey>(uint64_t a1, uint64_t a2, llvm::hashing::detail::hash_state **a3, unsigned __int8 *a4)
{
  int v6;
  unsigned int v7;
  unsigned __int8 *v10;
  _QWORD v11[2];
  unsigned __int8 *v12[2];
  unsigned __int8 *v13[2];
  char v14;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  LOBYTE(v10) = 0;
  v11[0] = 0;
  v11[1] = 0;
  v13[0] = a4;
  v13[1] = a4 + 8;
  v12[0] = (unsigned __int8 *)&v10;
  v12[1] = (unsigned __int8 *)v11;
  if (!std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v14, v13, v12))--*(_DWORD *)(a1 + 12);
  return a4;
}

char *llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char v19;
  _QWORD v20[2];
  char *v21;
  _BYTE *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  char v25;
  _BYTE v26[24];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_OWORD *)&v26[7] = 0uLL;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = &result[32 * v10];
      do
      {
        *result = 0;
        *(_OWORD *)(result + 1) = *(_OWORD *)v26;
        *((_QWORD *)result + 2) = *(_QWORD *)&v26[15];
        result += 32;
      }
      while (result != v11);
    }
    v26[0] = 0;
    *(_QWORD *)&v26[8] = 0;
    *(_QWORD *)&v26[16] = 0;
    v19 = 3;
    v20[0] = 0;
    v20[1] = 0;
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = (unsigned __int8 *)v4;
      v14 = v4;
      do
      {
        v23 = v13;
        v24 = v13 + 8;
        v21 = v26;
        v22 = &v26[8];
        if (!std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v25, &v23, (unsigned __int8 **)&v21))
        {
          v23 = v13;
          v24 = v13 + 8;
          v21 = &v19;
          v22 = v20;
          if (!std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v25, &v23, (unsigned __int8 **)&v21))
          {
            v23 = 0;
            llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>((uint64_t *)a1, (llvm::hashing::detail::hash_state **)v14, &v23);
            v15 = v23;
            v16 = *(_OWORD *)v14;
            *((_QWORD *)v23 + 2) = *(_QWORD *)(v14 + 16);
            *(_OWORD *)v15 = v16;
            *((_QWORD *)v15 + 3) = *(_QWORD *)(v14 + 24);
            ++*(_DWORD *)(a1 + 8);
          }
        }
        v14 += 32;
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&v26[15] = 0;
  *(_QWORD *)&v26[7] = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = &result[32 * v17];
    do
    {
      *result = 0;
      *(_OWORD *)(result + 1) = *(_OWORD *)v26;
      *((_QWORD *)result + 2) = *(_QWORD *)&v26[15];
      result += 32;
    }
    while (result != v18);
  }
  return result;
}

uint64_t llvm::MachO::Target::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t *v5;
  char v6;
  int v7;
  uint64_t v19;
  int v20;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24[0] = a1;
  v24[1] = a2;
  LOBYTE(v26) = 45;
  llvm::StringRef::split(v24, (char *)&v26, 1uLL, (uint64_t)v21);
  result = llvm::MachO::getArchitectureFromName(v21[0], v21[1]);
  v6 = result;
  v7 = 0;
  switch(v23)
  {
    case 0:
      break;
    case 3:
      if (*(_WORD *)v22 != 28521 || *(_BYTE *)(v22 + 2) != 115)
        goto LABEL_64;
      v7 = 2;
      break;
    case 4:
      if (*(_DWORD *)v22 == 1936683640)
      {
        v7 = 11;
      }
      else
      {
        if (*(_DWORD *)v22 != 1936684660)
          goto LABEL_64;
        v7 = 3;
      }
      break;
    case 5:
      if (*(_DWORD *)v22 == 1868783981 && *(_BYTE *)(v22 + 4) == 115)
      {
        v7 = 1;
      }
      else
      {
        if (*(_DWORD *)v22 != 1869636979 || *(_BYTE *)(v22 + 4) != 115)
          goto LABEL_64;
        v7 = 14;
      }
      break;
    case 7:
      if (*(_DWORD *)v22 != 1668571511 || *(_DWORD *)(v22 + 3) != 1936681059)
        goto LABEL_64;
      v7 = 4;
      break;
    case 8:
      if (*(_QWORD *)v22 != 0x736F656764697262)
        goto LABEL_64;
      v7 = 5;
      break;
    case 9:
      if (*(_QWORD *)v22 != 0x696B726576697264 || *(_BYTE *)(v22 + 8) != 116)
        goto LABEL_64;
      v7 = 10;
      break;
    case 11:
      if (*(_QWORD *)v22 != 0x6C6174616363616DLL || *(_QWORD *)(v22 + 3) != 0x7473796C61746163)
        goto LABEL_64;
      v7 = 6;
      break;
    case 13:
      if (*(_QWORD *)v22 != 0x756D69732D736F69 || *(_QWORD *)(v22 + 5) != 0x726F74616C756D69)
        goto LABEL_64;
      v7 = 7;
      break;
    case 14:
      if (*(_QWORD *)v22 == 0x6D69732D736F7278 && *(_QWORD *)(v22 + 6) == 0x726F74616C756D69)
      {
        v7 = 12;
      }
      else
      {
        if (*(_QWORD *)v22 != 0x6D69732D736F7674 || *(_QWORD *)(v22 + 6) != 0x726F74616C756D69)
          goto LABEL_64;
        v7 = 8;
      }
      break;
    case 17:
      if (*(_QWORD *)v22 != 0x2D736F6863746177
        || *(_QWORD *)(v22 + 8) != 0x6F74616C756D6973
        || *(_BYTE *)(v22 + 16) != 114)
      {
        goto LABEL_64;
      }
      v7 = 9;
      break;
    default:
LABEL_64:
      if (*(_BYTE *)v22 == 60 && *(_BYTE *)(v22 + v23 - 1) == 62)
      {
        v19 = v23 - 2;
        v25 = 0;
        v26 = v22 + 1;
        if (v23 - 1 < (unint64_t)(v23 - 2))
          v19 = v23 - 1;
        v27 = v19;
        result = llvm::consumeUnsignedInteger((llvm *)&v26, (llvm::StringRef *)0xA, &v25, v5);
        if (v27)
          v20 = 1;
        else
          v20 = result;
        if (v20)
          v7 = 0;
        else
          v7 = v25;
      }
      else
      {
        v7 = 0;
      }
      break;
  }
  *(_BYTE *)(a3 + 24) &= ~1u;
  *(_BYTE *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t **llvm::MachO::mapToPlatformSet@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int *v5;
  _BYTE v6[24];

  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x300000000;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  if (a2)
  {
    v4 = 24 * a2;
    v5 = (int *)result + 1;
    do
    {
      result = llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert((uint64_t **)a3, v5, (uint64_t)v6);
      v5 += 6;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void llvm::MachO::getTargetTripleName(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  llvm::VersionTuple *v4;
  uint64_t v5;
  uint64_t v6;
  const char *ArchitectureName;
  uint64_t v8;
  int v9;
  std::string v10;
  void *__p;
  char v12;
  _QWORD v13[4];
  __int16 v14;
  llvm::formatv_object_base *v15[4];
  __int16 v16;
  std::string v17;

  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v4 = (llvm::VersionTuple *)(a1 + 8);
  if (v5 & 0x7FFFFFFFFFFFFFFFLL | v6 & 0x7FFFFFFF7FFFFFFFLL)
    llvm::VersionTuple::getAsString(v4, &v17);
  else
    std::string::basic_string[abi:nn180100]<0>(&v17, (char *)&str_15_9);
  ArchitectureName = llvm::MachO::getArchitectureName(*a1);
  v14 = 773;
  v13[0] = ArchitectureName;
  v13[1] = v8;
  v13[2] = "-apple-";
  v9 = *((_DWORD *)a1 + 1);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v10 = v17;
  llvm::MachO::getOSAndEnvironmentName(v9);
  v15[0] = (llvm::formatv_object_base *)v13;
  v15[2] = (llvm::formatv_object_base *)&__p;
  v16 = 1026;
  llvm::Twine::str(v15, a2);
  if (v12 < 0)
    operator delete(__p);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void llvm::MachO::TextAPIReader::get(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  const void *v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  const std::error_category *v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  const std::error_category *v20;
  int v21;
  BOOL v26;
  unint64_t v28;
  char *v29;
  llvm::MachO::InterfaceFile **v30;
  llvm::MachO::InterfaceFile **v31;
  llvm::yaml::Document ***v32;
  const char *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  llvm::yaml::Document ***v38;
  const char *v39;
  void *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  llvm::MachO::InterfaceFile **v44;
  llvm::MachO::InterfaceFile *v45;
  llvm::MachO::InterfaceFile **v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  llvm::MachO::InterfaceFile *v50;
  void ***v51;
  void **v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  void *v62[2];
  void *__p[4];
  int v64;
  char v65;
  char v66;
  void **v67;
  std::__shared_weak_count *v68;
  __int16 v69;
  __int128 __dst;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[15];

  v74[13] = *MEMORY[0x24BDAC8D0];
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v62 = 0u;
  v3 = a1[3];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_116:
    abort();
  v5 = (const void *)a1[2];
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v71 = (void *)(v8 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v71) = a1[3];
    p_dst = &__dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(p_dst, v5, v3);
LABEL_9:
  *((_BYTE *)p_dst + v3) = 0;
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(_OWORD *)&__p[1] = __dst;
  __p[3] = v71;
  __dst = *(_OWORD *)a1;
  v9 = llvm::StringRef::trim((uint64_t *)&__dst, " \t\n\v\f\r", 6);
  if (!v10)
    goto LABEL_21;
  if (*(_BYTE *)v9 == 123 && *(_BYTE *)(v9 + v10 - 1) == 125)
  {
    v64 = 128;
    v11 = *((_OWORD *)a1 + 1);
    v61[0] = *(_OWORD *)a1;
    v61[1] = v11;
    llvm::MachO::TextAPIReader::getAsJSON((uint64_t)v61, (uint64_t)&__dst);
    if ((BYTE8(__dst) & 1) != 0)
    {
      v12 = __dst;
      *(_BYTE *)(a2 + 8) |= 1u;
    }
    else
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v12 = __dst;
    }
    *(_QWORD *)&__dst = 0;
    *(_QWORD *)a2 = v12;
    llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&__dst);
    goto LABEL_23;
  }
  if (v10 < 3 || (*(_WORD *)(v9 + v10 - 3) == 11822 ? (v13 = *(_BYTE *)(v9 + v10 - 1) == 46) : (v13 = 0), !v13))
  {
LABEL_21:
    v14 = std::generic_category();
    *(_QWORD *)&__dst = 45;
    *((_QWORD *)&__dst + 1) = v14;
    v67 = (void **)"unsupported file type";
    v15 = &v66;
    v16 = (uint64_t *)&v66;
LABEL_22:
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v67, (uint64_t *)&__dst, v16);
    v17 = *(_QWORD *)v15;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v17;
    goto LABEL_23;
  }
  if (v10 < 0xE)
  {
    if (v10 < 0xA)
    {
LABEL_42:
      v20 = std::generic_category();
      *(_QWORD *)&__dst = 45;
      *((_QWORD *)&__dst + 1) = v20;
      v67 = (void **)"unsupported file type";
      v15 = &v65;
      v16 = (uint64_t *)&v65;
      goto LABEL_22;
    }
LABEL_38:
    if (*(_QWORD *)v9 != 0x686372610A2D2D2DLL || *(_WORD *)(v9 + 8) != 14963)
      goto LABEL_42;
LABEL_66:
    v21 = 8;
    goto LABEL_69;
  }
  if (*(_QWORD *)v9 != 0x70617421202D2D2DLL || *(_QWORD *)(v9 + 6) != 0xA6462742D697061)
  {
    if (v10 >= 0x11)
    {
      if (*(_QWORD *)v9 == 0x70617421202D2D2DLL
        && *(_QWORD *)(v9 + 8) == 0x33762D6462742D69
        && *(_BYTE *)(v9 + 16) == 10)
      {
        v21 = 32;
        goto LABEL_69;
      }
      if (*(_QWORD *)v9 == 0x70617421202D2D2DLL
        && *(_QWORD *)(v9 + 8) == 0x32762D6462742D69
        && *(_BYTE *)(v9 + 16) == 10)
      {
        v21 = 16;
        goto LABEL_69;
      }
      v26 = *(_QWORD *)v9 == 0x70617421202D2D2DLL && *(_QWORD *)(v9 + 8) == 0x31762D6462742D69;
      if (v26 && *(_BYTE *)(v9 + 16) == 10)
        goto LABEL_66;
    }
    goto LABEL_38;
  }
  v21 = 64;
LABEL_69:
  v60 = a2;
  v64 = v21;
  llvm::yaml::Input::Input((uint64_t)&__dst, *a1, a1[1], (uint64_t)v62, (uint64_t)DiagHandler, (uint64_t)v62);
  llvm::yaml::Input::setCurrentDocument((llvm::yaml::Input *)&__dst);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = (llvm::yaml::Document ***)v74;
  v33 = "!tapi-tbd-v3";
  v34 = &unk_24AA33282;
  do
  {
    v35 = v30 - v31;
    if (v35 <= v28)
    {
      v36 = v28 + 1;
      v37 = v28 + 1 - v35;
      if (v37 <= (v29 - (char *)v30) >> 3)
      {
        bzero(v30, 8 * v37);
        v30 += v37;
      }
      else
      {
        if (v28 >= 0x1FFFFFFFFFFFFFFFLL)
          goto LABEL_116;
        v38 = v32;
        v39 = v33;
        v40 = v34;
        if ((v29 - (char *)v31) >> 2 > v36)
          v36 = (v29 - (char *)v31) >> 2;
        if ((unint64_t)(v29 - (char *)v31) >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v36;
        if (v41 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v42 = (char *)operator new(8 * v41);
        v43 = &v42[8 * v35];
        bzero(v43, 8 * v37);
        if (v30 == v31)
        {
          v46 = v30;
          v31 = (llvm::MachO::InterfaceFile **)v43;
        }
        else
        {
          v44 = (llvm::MachO::InterfaceFile **)v43;
          do
          {
            v45 = *--v30;
            *--v44 = v45;
          }
          while (v30 != v31);
          v46 = v31;
          v31 = v44;
        }
        v29 = &v42[8 * v41];
        v30 = (llvm::MachO::InterfaceFile **)&v43[8 * v37];
        if (v46)
          operator delete(v46);
        v34 = v40;
        v33 = v39;
        v32 = v38;
      }
    }
    (*(void (**)(__int128 *))(__dst + 104))(&__dst);
    v47 = *((_QWORD *)&__dst + 1);
    if (((*(uint64_t (**)(__int128 *))(__dst + 16))(&__dst) & 1) != 0)
    {
      HIDWORD(v48) = *(_DWORD *)(v47 + 48);
      LODWORD(v48) = HIDWORD(v48) - 8;
      __asm { BR              X9 }
    }
    if (((*(uint64_t (**)(__int128 *, const char *, uint64_t, _QWORD))(__dst + 96))(&__dst, "!tapi-tbd", 9, 0) & 1) != 0)
    {
      *(_DWORD *)(v47 + 48) = 64;
      llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::mapKeysToValuesV4((uint64_t *)&__dst, (std::string::size_type *)&v31[v28]);
    }
    else
    {
      if (((*(uint64_t (**)(__int128 *, const char *, uint64_t, _QWORD))(__dst + 96))(&__dst, v33, 12, 0) & 1) != 0)
      {
        v49 = 32;
      }
      else if (((*(uint64_t (**)(__int128 *, const char *, uint64_t, _QWORD))(__dst + 96))(&__dst, "!tapi-tbd-v2", 12, 0) & 1) != 0)
      {
        v49 = 16;
      }
      else
      {
        if (((*(uint64_t (**)(__int128 *, const char *, uint64_t, _QWORD))(__dst + 96))(&__dst, "!tapi-tbd-v1", 12, 0) & 1) == 0&& !(*(unsigned int (**)(__int128 *, const char *, uint64_t, _QWORD))(__dst + 96))(&__dst, "tag:yaml.org,2002:map", 21, 0))
        {
          *(_DWORD *)(v47 + 48) = 0;
          v67 = (void **)"unsupported file type";
          v69 = 259;
          (*(void (**)(__int128 *, void ***))(__dst + 248))(&__dst, &v67);
          goto LABEL_100;
        }
        v49 = 8;
      }
      *(_DWORD *)(v47 + 48) = v49;
      llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::mapKeysToValues(v49, &__dst, &v31[v28]);
    }
LABEL_100:
    (*(void (**)(__int128 *))(__dst + 112))(&__dst);
    if ((_DWORD)v72)
      break;
    llvm::yaml::document_iterator::operator++(v32);
    ++v28;
  }
  while ((llvm::yaml::Input::setCurrentDocument((llvm::yaml::Input *)&__dst) & 1) != 0);
  v51 = (void ***)(v31 + 1);
  v50 = *v31;
  if (v31 + 1 != v30)
  {
    do
    {
      v67 = *v51;
      v52 = v67;
      v53 = (std::__shared_weak_count *)operator new();
      v53->__vftable = (std::__shared_weak_count_vtbl *)&off_251C1E318;
      v53->__shared_owners_ = 0;
      v53->__shared_weak_owners_ = 0;
      v53[1].__vftable = (std::__shared_weak_count_vtbl *)v52;
      v68 = v53;
      llvm::MachO::InterfaceFile::addDocument((uint64_t)v50, (char *)&v67);
      v54 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      ++v51;
    }
    while (v51 != (void ***)v30);
  }
  v57 = v72;
  if ((_DWORD)v72)
  {
    v58 = v73;
    v59 = operator new();
    v69 = 260;
    v67 = v62;
    *(_QWORD *)v59 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)&v67, (std::string *)(v59 + 8));
    *(_QWORD *)(v59 + 32) = v57;
    *(_QWORD *)(v59 + 40) = v58;
    *(_BYTE *)(v59 + 48) = 1;
    *(_BYTE *)(v60 + 8) |= 1u;
    *(_QWORD *)v60 = v59;
    if (v50)
    {
      llvm::MachO::InterfaceFile::~InterfaceFile(v50);
      MEMORY[0x24BD1B3A4]();
    }
  }
  else
  {
    *(_BYTE *)(v60 + 8) &= ~1u;
    *(_QWORD *)v60 = v50;
  }
  operator delete(v31);
  llvm::yaml::Input::~Input((llvm::yaml::Input *)&__dst);
LABEL_23:
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v62[0]);
}

void DiagHandler(const llvm::SMDiagnostic *a1, _QWORD *a2)
{
  int v4;
  char *v5;
  size_t v6;
  int v7;
  char *v8;
  BOOL v9;
  size_t v10;
  char *v11;
  int v12;
  size_t v13;
  llvm::formatv_object_base *v14[4];
  __int16 v15;
  std::string v16;
  void (**v17)(llvm::raw_ostream *__hidden);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  void **v25;
  _BYTE v26[16];
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *__p;
  void *v34;
  char *v35;
  void *v36;
  __int128 v37;
  _QWORD v38[129];

  v38[128] = *MEMORY[0x24BDAC8D0];
  v36 = v38;
  v37 = xmmword_24AA332B0;
  v18 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v17 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  v25 = &v36;
  llvm::raw_ostream::SetUnbuffered(&v17);
  v4 = *((char *)a2 + 47);
  if (v4 >= 0)
    v5 = (char *)(a2 + 3);
  else
    v5 = (char *)a2[3];
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 47);
  else
    v6 = a2[4];
  v7 = *((char *)a1 + 79);
  v8 = (char *)a1 + 56;
  v9 = v7 < 0;
  if (v7 < 0)
    v8 = (char *)*((_QWORD *)a1 + 7);
  v10 = *((unsigned __int8 *)a1 + 79);
  if (v9)
    v10 = *((_QWORD *)a1 + 8);
  v11 = (char *)a1 + 80;
  v12 = *((char *)a1 + 103);
  if (v12 < 0)
    v11 = (char *)*((_QWORD *)a1 + 10);
  v13 = *((_QWORD *)a1 + 11);
  if (v12 >= 0)
    v13 = *((unsigned __int8 *)a1 + 103);
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v26, *(_QWORD *)a1, *((_QWORD *)a1 + 1), v5, v6, *((_DWORD *)a1 + 10), *((_DWORD *)a1 + 11), *((_DWORD *)a1 + 12), v8, v10, v11, v13, *((const void **)a1 + 13), (uint64_t)(*((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 13)) >> 3, *((_QWORD *)a1 + 16), *((unsigned int *)a1 + 34));
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v26, 0, (char **)&v17, 1, 1);
  v15 = 1283;
  v14[0] = (llvm::formatv_object_base *)"malformed file\n";
  v14[2] = (llvm::formatv_object_base *)v36;
  v14[3] = (llvm::formatv_object_base *)v37;
  llvm::Twine::str(v14, &v16);
  if (*((char *)a2 + 23) < 0)
    operator delete((void *)*a2);
  *(std::string *)a2 = v16;
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(&v35);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  v17 = off_251C13948;
  if (v24 == 1 && v19)
    MEMORY[0x24BD1B380](v19, 0x1000C8077774924);
  if (v36 != v38)
    free(v36);
}

void **llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::mapKeysToValuesV4(uint64_t *a1, std::string::size_type *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  void **v15;
  char *v16;
  void **v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  uint64_t *v21;
  __int128 *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  int64x2_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t v51;
  std::string::size_type *p_size;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  size_t v74;
  __int128 v75;
  __int128 v76;
  void **v77;
  unint64_t *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  std::string::size_type v89;
  size_t v90;
  size_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  std::string::size_type v95;
  llvm::MachO::InterfaceFile *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  int v100;
  void *v101;
  size_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  unint64_t v107;
  unint64_t v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  int v111;
  void *v112;
  size_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t j;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t **v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t *v134;
  uint64_t v136;
  _QWORD *v137;
  std::string::size_type *v138;
  uint64_t *v139;
  unint64_t *i;
  char v141;
  uint64_t v142;
  char v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  _BYTE v150[120];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158;
  int64x2_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t *v165;
  unint64_t *v166;
  std::string::size_type *v167;
  __int128 v168;
  uint64_t v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  char *v174;
  int64x2_t v175;
  uint64_t v176;
  _BYTE v177[24];
  _BYTE *v178;
  _BYTE v179[24];
  _BYTE *v180;
  std::string v181[2];
  std::string *v182;
  _BYTE v183[24];
  _BYTE *v184;
  uint64_t v185;

  v185 = *MEMORY[0x24BDAC8D0];
  v165 = a1;
  v166 = 0;
  v167 = a2;
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v145 = 0;
    v146 = 0;
    v147 = 0;
    v148 = v150;
    v149 = 0x500000000;
    v152 = 0;
    v153 = 0;
    v151 = 0;
    v154 = 0;
    v155 = 0u;
    v156 = 0u;
    v157 = 0u;
    v158 = 0;
    v159 = 0u;
    v160 = 0u;
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    goto LABEL_76;
  }
  v145 = 0;
  v146 = 0;
  v147 = 0;
  v148 = v150;
  v149 = 0x500000000;
  v152 = 0;
  v153 = 0;
  v151 = 0;
  v154 = 0;
  v155 = 0u;
  v156 = 0u;
  v157 = 0u;
  v158 = 0;
  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  v159 = 0u;
  v160 = 0u;
  v4 = *(_BYTE **)(*a2 + 96);
  v5 = &v4[24 * *(unsigned int *)(*a2 + 104)];
  v144 = *(_DWORD *)(a1[1] + 48) >> 4;
  llvm::SmallVectorImpl<llvm::MachO::Target>::insert<llvm::MachO::Target const*,void>((unsigned int *)&v148, (uint64_t)v150, v4, v5);
  v138 = a2;
  v6 = *a2;
  v7 = *a2 + 264;
  v8 = *(char *)(*a2 + 287);
  v9 = v8 < 0;
  if (v8 < 0)
    v7 = *(_QWORD *)(*a2 + 264);
  v10 = *(unsigned __int8 *)(*a2 + 287);
  if (v9)
    v10 = *(_QWORD *)(*a2 + 272);
  v151 = v7;
  v152 = v10;
  v153 = *(_QWORD *)(v6 + 288);
  v154 = *(_BYTE *)(v6 + 296);
  v11 = 2 * (*(_BYTE *)(v6 + 298) == 0);
  v158 = v11;
  if (!*(_BYTE *)(v6 + 297))
    v158 = v11 | 1;
  *((_QWORD *)&v168 + 1) = 0;
  v169 = 0;
  *(_QWORD *)&v168 = (char *)&v168 + 8;
  v12 = *(_QWORD *)(v6 + 304);
  v13 = *(_QWORD *)(v6 + 312);
  if (v12 != v13)
  {
    v14 = (__int128 *)(v12 + 24);
    do
    {
      v15 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v168, &v174, (const void **)v14);
      v16 = (char *)*v15;
      if (!*v15)
      {
        v17 = v15;
        v16 = (char *)operator new(0xC0uLL);
        v181[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v168 + 8;
        v18 = (std::string *)(v16 + 32);
        if (*((char *)v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
        }
        else
        {
          v19 = *v14;
          *((_QWORD *)v16 + 6) = *((_QWORD *)v14 + 2);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        *((_QWORD *)v16 + 7) = v16 + 72;
        *((_QWORD *)v16 + 8) = 0x500000000;
        v181[0].__r_.__value_.__s.__data_[16] = 1;
        v20 = v174;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v20;
        *v17 = v16;
        v21 = (uint64_t *)v16;
        if (*(_QWORD *)v168)
        {
          *(_QWORD *)&v168 = *(_QWORD *)v168;
          v21 = (uint64_t *)*v17;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v168 + 1), v21);
        ++v169;
        v181[0].__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100]((uint64_t)v181, 0);
      }
      v22 = (__int128 *)((char *)v14 - 24);
      v23 = *((_DWORD *)v16 + 16);
      if (v23 >= *((_DWORD *)v16 + 17))
      {
        v27 = *v22;
        v181[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v14 - 1);
        *(_OWORD *)&v181[0].__r_.__value_.__l.__data_ = v27;
        v28 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>((uint64_t)(v16 + 56), (unint64_t)v181, 1);
        v29 = *((_QWORD *)v16 + 7) + 24 * *((unsigned int *)v16 + 16);
        v30 = *(_OWORD *)v28;
        *(_QWORD *)(v29 + 16) = *(_QWORD *)(v28 + 16);
        *(_OWORD *)v29 = v30;
      }
      else
      {
        v24 = *((_QWORD *)v16 + 7) + 24 * v23;
        v25 = *v22;
        *(_QWORD *)(v24 + 16) = *((_QWORD *)v14 - 1);
        *(_OWORD *)v24 = v25;
      }
      ++*((_DWORD *)v16 + 16);
      v26 = (uint64_t)v14 + 24;
      v14 += 3;
    }
    while (v26 != v13);
    v31 = (__int128 *)v168;
    if ((__int128 *)v168 != (__int128 *)((char *)&v168 + 8))
    {
      do
      {
        memset(v181, 0, sizeof(v181));
        std::vector<llvm::MachO::Target>::__insert_with_size[abi:nn180100]<llvm::MachO::Target const*,llvm::MachO::Target const*>((uint64_t)v181, *((char **)v31 + 7), (char *)(*((_QWORD *)v31 + 7) + 24 * *((unsigned int *)v31 + 16)), *((unsigned int *)v31 + 16));
        std::string::operator=(&v181[1], (const std::string *)(v31 + 2));
        v32 = v159.i64[1];
        if (v159.i64[1] >= (unint64_t)v160)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * ((v159.i64[1] - v159.i64[0]) >> 4);
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) > 0x555555555555555)
            abort();
          if (0x5555555555555556 * ((uint64_t)(v160 - v159.i64[0]) >> 4) > v35)
            v35 = 0x5555555555555556 * ((uint64_t)(v160 - v159.i64[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - v159.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v36 = 0x555555555555555;
          else
            v36 = v35;
          v37 = v175.i64[1];
          *(_QWORD *)v175.i64[1] = 0;
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 16) = 0;
          *(std::string *)v37 = v181[0];
          memset(v181, 0, 24);
          v38 = v181[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v37 + 24) = *(_OWORD *)&v181[1].__r_.__value_.__l.__data_;
          *(_QWORD *)(v37 + 40) = v38;
          memset(&v181[1], 0, sizeof(std::string));
          v39 = v175.i64[1] + 48;
          v175.i64[1] += 48;
          v40 = v159.i64[1];
          v41 = v159.i64[0];
          v42 = v175.i64[0];
          if (v159.i64[1] == v159.i64[0])
          {
            v45 = vdupq_n_s64(v159.u64[1]);
          }
          else
          {
            do
            {
              *(_QWORD *)(v42 - 48) = 0;
              *(_QWORD *)(v42 - 40) = 0;
              v42 -= 48;
              *(_QWORD *)(v42 + 16) = 0;
              v43 = *(_OWORD *)(v40 - 48);
              v40 -= 48;
              *(_OWORD *)v42 = v43;
              *(_QWORD *)(v42 + 16) = *(_QWORD *)(v40 + 16);
              *(_QWORD *)v40 = 0;
              *(_QWORD *)(v40 + 8) = 0;
              *(_QWORD *)(v40 + 16) = 0;
              v44 = *(_OWORD *)(v40 + 24);
              *(_QWORD *)(v42 + 40) = *(_QWORD *)(v40 + 40);
              *(_OWORD *)(v42 + 24) = v44;
              *(_QWORD *)(v40 + 32) = 0;
              *(_QWORD *)(v40 + 40) = 0;
              *(_QWORD *)(v40 + 24) = 0;
            }
            while (v40 != v41);
            v45 = v159;
            v39 = v175.i64[1];
          }
          v159.i64[0] = v42;
          v159.i64[1] = v39;
          v175 = v45;
          v46 = v160;
          *(_QWORD *)&v160 = v176;
          v176 = v46;
          v174 = (char *)v45.i64[0];
          v159.i64[1] = v39;
          if (SHIBYTE(v181[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v181[1].__r_.__value_.__l.__data_);
        }
        else
        {
          *(_QWORD *)v159.i64[1] = 0;
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 16) = 0;
          *(std::string *)v32 = v181[0];
          memset(v181, 0, 24);
          v33 = v181[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v32 + 24) = *(_OWORD *)&v181[1].__r_.__value_.__l.__data_;
          *(_QWORD *)(v32 + 40) = v33;
          memset(&v181[1], 0, sizeof(std::string));
          v159.i64[1] = v32 + 48;
        }
        if (v181[0].__r_.__value_.__r.__words[0])
        {
          v181[0].__r_.__value_.__l.__size_ = v181[0].__r_.__value_.__r.__words[0];
          operator delete(v181[0].__r_.__value_.__l.__data_);
        }
        v47 = (__int128 *)*((_QWORD *)v31 + 1);
        if (v47)
        {
          do
          {
            v48 = v47;
            v47 = *(__int128 **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            v48 = (__int128 *)*((_QWORD *)v31 + 2);
            v49 = *(_QWORD *)v48 == (_QWORD)v31;
            v31 = v48;
          }
          while (!v49);
        }
        v31 = v48;
      }
      while (v48 != (__int128 *)((char *)&v168 + 8));
    }
  }
  std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v168, *((_QWORD **)&v168 + 1));
  llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::assignTargetsToLibrary(*(_QWORD *)(*v138 + 328), *(_QWORD *)(*v138 + 336), (uint64_t *)&v155);
  llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::assignTargetsToLibrary(*(_QWORD *)(*v138 + 352), *(_QWORD *)(*v138 + 360), (uint64_t *)&v156 + 1);
  llvm::MachO::SymbolSet::exports(*(llvm::MachO::SymbolSet **)(*v138 + 448), (uint64_t)v181);
  v50 = v184;
  if (v184 == v183)
  {
    v51 = 4;
    v50 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  p_size = (std::string::size_type *)v182;
  if (v182 == (std::string *)&v181[1].__r_.__value_.__r.__words[1])
  {
    v53 = 4;
    p_size = &v181[1].__r_.__value_.__l.__size_;
  }
  else
  {
    if (!v182)
      goto LABEL_56;
    v53 = 5;
  }
  (*(void (**)(void))(*p_size + 8 * v53))();
LABEL_56:
  llvm::MachO::SymbolSet::reexports(*(llvm::MachO::SymbolSet **)(*v138 + 448), (uint64_t)&v174);
  v54 = v180;
  if (v180 == v179)
  {
    v55 = 4;
    v54 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_61;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_61:
  v56 = v178;
  if (v178 == v177)
  {
    v57 = 4;
    v56 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_66;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_66:
  llvm::MachO::SymbolSet::undefineds(*(llvm::MachO::SymbolSet **)(*v138 + 448), (uint64_t)&v168);
  v58 = v173;
  if (v173 == v172)
  {
    v59 = 4;
    v58 = v172;
    goto LABEL_70;
  }
  if (v173)
  {
    v59 = 5;
LABEL_70:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = v171;
  if (v171 == v170)
  {
    v61 = 4;
    v60 = v170;
    goto LABEL_75;
  }
  if (v171)
  {
    v61 = 5;
LABEL_75:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
LABEL_76:
  v166 = (unint64_t *)&v144;
  v174 = 0;
  v175 = 0uLL;
  (*(void (**)(uint64_t *, const char *, uint64_t, uint64_t))(*a1 + 96))(a1, "!tapi-tbd", 9, 1);
  llvm::yaml::IO::processKey<unsigned int,llvm::yaml::EmptyContext>(a1, (uint64_t)"tbd-version", v166, 1);
  llvm::yaml::IO::processKey<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)(v166 + 4));
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1) & 1) == 0)
  {
    v142 = 0;
    v141 = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "uuids", 0, 0, &v141, &v142))
    {
      LODWORD(v62) = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0 && (_DWORD)v62)
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v62 = v62;
        v136 = v62;
        while (1)
        {
          *(_QWORD *)&v168 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, __int128 *))(*a1 + 32))(a1, v65, &v168))
            break;
LABEL_106:
          if (++v65 == v62)
            goto LABEL_107;
        }
        v66 = 0xAAAAAAAAAAAAAAABLL * ((v64 - (char *)v63) >> 4);
        if (v66 > v65)
        {
          v67 = v64;
LABEL_103:
          v63 = (void **)v174;
          (*(void (**)(uint64_t *))(*a1 + 104))(a1);
          v181[0].__r_.__value_.__r.__words[0] = 0;
          v143 = 0;
          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t, _QWORD, char *, std::string *))(*a1 + 120))(a1, "target", 1, 0, &v143, v181))
          {
            llvm::yaml::yamlize<llvm::MachO::Target>((uint64_t)a1, (unsigned __int8 *)&v63[6 * v65]);
            (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v181[0].__r_.__value_.__r.__words[0]);
          }
          llvm::yaml::IO::processKey<std::string,llvm::yaml::EmptyContext>(a1, (uint64_t)"value", (uint64_t)&v63[6 * v65 + 3], 1);
          (*(void (**)(uint64_t *))(*a1 + 112))(a1);
          (*(void (**)(uint64_t *, _QWORD))(*a1 + 40))(a1, v168);
          v64 = v67;
          goto LABEL_106;
        }
        v68 = v65 + 1;
        v69 = v65 + 1 - v66;
        if (0xAAAAAAAAAAAAAAABLL * ((v175.i64[1] - (uint64_t)v64) >> 4) >= v69)
        {
          bzero(v64, 48 * ((48 * v69 - 48) / 0x30) + 48);
          v67 = &v64[48 * ((48 * v69 - 48) / 0x30) + 48];
          v175.i64[0] = (uint64_t)v67;
          goto LABEL_103;
        }
        if (0x5555555555555556 * ((v175.i64[1] - (uint64_t)v63) >> 4) > v68)
          v68 = 0x5555555555555556 * ((v175.i64[1] - (uint64_t)v63) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v175.i64[1] - (uint64_t)v63) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v68 = 0x555555555555555;
        if (v68 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v70 = 3 * v68;
        v71 = (char *)operator new(48 * v68);
        v72 = &v71[16 * ((v64 - (char *)v63) >> 4)];
        v73 = &v71[16 * v70];
        v74 = 48 * ((48 * v69 - 48) / 0x30) + 48;
        bzero(v72, v74);
        v67 = &v72[v74];
        if (v64 == (char *)v63)
        {
          v174 = v72;
          v175.i64[0] = (uint64_t)v67;
          v175.i64[1] = (uint64_t)v73;
        }
        else
        {
          do
          {
            v75 = *((_OWORD *)v64 - 3);
            *((_QWORD *)v72 - 4) = *((_QWORD *)v64 - 4);
            *((_OWORD *)v72 - 3) = v75;
            v76 = *(_OWORD *)(v64 - 24);
            *((_QWORD *)v72 - 1) = *((_QWORD *)v64 - 1);
            *(_OWORD *)(v72 - 24) = v76;
            v72 -= 48;
            *((_QWORD *)v64 - 2) = 0;
            *((_QWORD *)v64 - 1) = 0;
            *((_QWORD *)v64 - 3) = 0;
            v64 -= 48;
          }
          while (v64 != (char *)v63);
          v63 = (void **)v174;
          v77 = (void **)v175.i64[0];
          v174 = v72;
          v175.i64[0] = (uint64_t)v67;
          v175.i64[1] = (uint64_t)v73;
          if (v77 != v63)
          {
            v62 = v136;
            do
            {
              if (*((char *)v77 - 1) < 0)
                operator delete(*(v77 - 3));
              v77 -= 6;
            }
            while (v77 != v63);
            if (!v63)
              goto LABEL_103;
            goto LABEL_102;
          }
        }
        v62 = v136;
        if (!v63)
          goto LABEL_103;
LABEL_102:
        operator delete(v63);
        goto LABEL_103;
      }
LABEL_107:
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v142);
    }
  }
  LODWORD(v181[0].__r_.__value_.__l.__data_) = 0;
  llvm::yaml::IO::processKeyWithDefault<TBDFlags,llvm::yaml::EmptyContext>((uint64_t)a1, (_DWORD *)v166 + 62, v181);
  llvm::yaml::IO::processKey<llvm::StringRef,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"install-name", (uint64_t)(v166 + 21), 1);
  LODWORD(v181[0].__r_.__value_.__l.__data_) = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v166 + 23), v181);
  LODWORD(v181[0].__r_.__value_.__l.__data_) = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)((char *)v166 + 188), v181);
  v181[0].__r_.__value_.__s.__data_[0] = 0;
  llvm::yaml::IO::processKeyWithDefault<SwiftVersion,llvm::yaml::EmptyContext>(a1, (uint64_t)"swift-abi-version", (llvm::raw_ostream *)(v166 + 24), v181);
  v78 = v166;
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || v78[32] != v78[33])
  {
    v142 = 0;
    v143 = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "parent-umbrella", 0, 0, &v143, &v142))
    {
      v79 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
        v79 = -1431655765 * ((v78[33] - v78[32]) >> 4);
      if (v79)
      {
        v80 = 0;
        v81 = 0;
        v137 = v78 + 34;
        v139 = (uint64_t *)(v78 + 32);
        v82 = 24;
        do
        {
          *(_QWORD *)&v168 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, __int128 *))(*a1 + 32))(a1, v81, &v168))
          {
            v83 = v78[32];
            v84 = v78[33];
            v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - v83) >> 4);
            if (v85 <= v81)
            {
              v86 = v81 + 1;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v137 - v84) >> 4) >= v81 + 1 - v85)
              {
                v91 = 48 * ((v80 - 16 * ((uint64_t)(v84 - v83) >> 4)) / 0x30uLL) + 48;
                bzero((void *)v78[33], v91);
                v78[33] = v84 + v91;
              }
              else
              {
                v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v137 - v83) >> 4);
                if (2 * v87 > v86)
                  v86 = 2 * v87;
                if (v87 >= 0x2AAAAAAAAAAAAAALL)
                  v88 = 0x555555555555555;
                else
                  v88 = v86;
                v89 = v181[0].__r_.__value_.__r.__words[2];
                v90 = 48 * ((v80 - 48 * v85) / 0x30) + 48;
                bzero((void *)v181[0].__r_.__value_.__r.__words[2], v90);
                v181[0].__r_.__value_.__r.__words[2] = v89 + v90;
              }
            }
            v92 = *v139 + v82;
            (*(void (**)(uint64_t *))(*a1 + 104))(a1);
            llvm::yaml::IO::processKey<std::vector<llvm::MachO::Target>,llvm::yaml::EmptyContext>((uint64_t)a1, (char **)(v92 - 24));
            llvm::yaml::IO::processKey<std::string,llvm::yaml::EmptyContext>(a1, (uint64_t)"umbrella", v92, 1);
            (*(void (**)(uint64_t *))(*a1 + 112))(a1);
            (*(void (**)(uint64_t *, _QWORD))(*a1 + 40))(a1, v168);
          }
          ++v81;
          v82 += 48;
          v80 += 48;
        }
        while (v79 != v81);
      }
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v142);
    }
  }
  LODWORD(v181[0].__r_.__value_.__l.__data_) = 0;
  LODWORD(v181[0].__r_.__value_.__l.__data_) = 1;
  if (((*(uint64_t (**)(uint64_t *))(*v165 + 16))(v165) & 1) == 0)
  {
    v93 = v166;
    v94 = v165[1];
    v95 = operator new();
    v96 = llvm::MachO::InterfaceFile::InterfaceFile((llvm::MachO::InterfaceFile *)v95);
    v99 = *(void **)(v94 + 24);
    v98 = v94 + 24;
    v97 = v99;
    v100 = *(char *)(v98 + 23);
    if (v100 >= 0)
      v101 = (void *)v98;
    else
      v101 = v97;
    if (v100 >= 0)
      v102 = *(unsigned __int8 *)(v98 + 23);
    else
      v102 = *(_QWORD *)(v98 + 8);
    llvm::MachO::InterfaceFile::setPath((uint64_t)v96, v101, v102);
    *(_DWORD *)(v95 + 256) = *(_DWORD *)(v98 + 24);
    v103 = *((unsigned int *)v93 + 10);
    if ((_DWORD)v103)
    {
      v104 = v93[4];
      v105 = 24 * v103;
      do
      {
        v106 = *(_OWORD *)v104;
        v181[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v104 + 16);
        *(_OWORD *)&v181[0].__r_.__value_.__l.__data_ = v106;
        llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v95 + 96, (unsigned __int8 *)v181);
        v104 += 24;
        v105 -= 24;
      }
      while (v105);
    }
    llvm::MachO::InterfaceFile::setInstallName(v95, (void *)v93[21], v93[22]);
    *(_DWORD *)(v95 + 288) = *((_DWORD *)v93 + 46);
    *(_DWORD *)(v95 + 292) = *((_DWORD *)v93 + 47);
    *(_BYTE *)(v95 + 296) = *((_BYTE *)v93 + 192);
    v107 = v93[32];
    v108 = v93[33];
    while (v107 != v108)
    {
      v109 = *(unsigned __int8 **)v107;
      v110 = *(unsigned __int8 **)(v107 + 8);
      if (*(unsigned __int8 **)v107 != v110)
      {
        do
        {
          v111 = *(char *)(v107 + 47);
          if (v111 >= 0)
            v112 = (void *)(v107 + 24);
          else
            v112 = *(void **)(v107 + 24);
          if (v111 >= 0)
            v113 = *(unsigned __int8 *)(v107 + 47);
          else
            v113 = *(_QWORD *)(v107 + 32);
          llvm::MachO::InterfaceFile::addParentUmbrella(v95, v109, v112, v113);
          v109 += 24;
        }
        while (v109 != v110);
      }
      v107 += 48;
    }
    v114 = *((_DWORD *)v93 + 62);
    *(_BYTE *)(v95 + 297) = (v114 & 1) == 0;
    *(_BYTE *)(v95 + 298) = (v114 & 2) == 0;
    v115 = v93[25];
    v116 = v93[26];
    for (i = v93; v115 != v116; v115 += 48)
    {
      v117 = *(_QWORD *)(v115 + 24);
      v118 = *(_QWORD *)(v115 + 32);
      while (v117 != v118)
      {
        v119 = *(unsigned __int8 **)v115;
        v120 = *(unsigned __int8 **)(v115 + 8);
        while (v119 != v120)
        {
          v121 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v95 + 328), *(const void **)v117, *(_QWORD *)(v117 + 8));
          llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v121 + 24, v119);
          v119 += 24;
        }
        v117 += 16;
      }
    }
    v122 = i[28];
    for (j = i[29]; v122 != j; v122 += 48)
    {
      v124 = *(_QWORD *)(v122 + 24);
      v125 = *(_QWORD *)(v122 + 32);
      while (v124 != v125)
      {
        v126 = *(unsigned __int8 **)v122;
        v127 = *(unsigned __int8 **)(v122 + 8);
        while (v126 != v127)
        {
          v128 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v95 + 352), *(const void **)v124, *(_QWORD *)(v124 + 8));
          llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v128 + 24, v126);
          v126 += 24;
        }
        v124 += 16;
      }
    }
    v181[0].__r_.__value_.__r.__words[0] = v95;
    v129 = (uint64_t **)i;
    *v167 = v95;
  }
  v130 = v166;
  v131 = v130[32];
  if (v131)
  {
    v132 = v130[33];
    v133 = (void *)v130[32];
    if (v132 != v131)
    {
      do
      {
        v132 -= 48;
      }
      while (v132 != v131);
      v133 = (void *)v130[32];
    }
    v130[33] = v131;
    operator delete(v133);
  }
  v134 = (unint64_t *)v130[4];
  if (v134 != v130 + 6)
    free(v134);
}

uint64_t llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::mapKeysToValues(int a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  __int32 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  int64_t v97;
  unint64_t v98;
  int64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  void *v117;
  _QWORD *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  _QWORD *v122;
  void *v123;
  uint64_t v124;
  void *v125;
  _QWORD *v126;
  void *v127;
  _QWORD *v128;
  void *v129;
  int64_t v130;
  unint64_t v131;
  int64_t v132;
  unint64_t v133;
  uint64_t v134;
  int64_t v135;
  unint64_t v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  int64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  std::string *v150;
  size_t v151;
  _BYTE *v152;
  void *v153;
  std::string *v154;
  size_t v155;
  _BYTE *v156;
  void *v157;
  std::string *v158;
  size_t v159;
  _BYTE *v160;
  void *v161;
  _QWORD *v162;
  void *v163;
  int64_t v164;
  unint64_t v165;
  int64_t v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  void *v170;
  int64_t v171;
  unint64_t v172;
  int64_t v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  void *v177;
  int64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int64_t v183;
  unint64_t v184;
  int64_t v185;
  unint64_t v186;
  uint64_t v187;
  int64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  _QWORD *v205;
  char *v206;
  char *v207;
  _QWORD *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t *v229;
  uint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  int64x2_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD **v254;
  uint64_t *v255;
  void **v256;
  _QWORD *v257;
  void **v258;
  uint64_t i;
  unint64_t v260;
  uint64_t v261;
  unsigned int v262;
  unsigned __int8 *v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  _QWORD *v277;
  void *v278;
  uint64_t v279;
  void *v280;
  _QWORD *v281;
  void *v282;
  uint64_t v283;
  void *v284;
  _QWORD *v285;
  void *v286;
  uint64_t v287;
  void *v288;
  _QWORD *v289;
  void *v290;
  _QWORD *v291;
  void *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  int64_t v298;
  unint64_t v299;
  int64_t v300;
  unint64_t v301;
  uint64_t v302;
  int64_t v303;
  unint64_t v304;
  int64_t v305;
  unint64_t v306;
  uint64_t v307;
  int64_t v308;
  unint64_t v309;
  int64_t v310;
  unint64_t v311;
  uint64_t v312;
  int64_t v313;
  unint64_t v314;
  int64_t v315;
  unint64_t v316;
  uint64_t v317;
  std::string *v318;
  size_t v319;
  _BYTE *v320;
  void *v321;
  std::string *v322;
  size_t v323;
  _BYTE *v324;
  void *v325;
  std::string *v326;
  size_t v327;
  _BYTE *v328;
  void *v329;
  _QWORD *v330;
  void *v331;
  int64_t v332;
  unint64_t v333;
  int64_t v334;
  unint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  void *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  void *v345;
  int64_t v346;
  unint64_t v347;
  int64_t v348;
  unint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  _QWORD *v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t *v383;
  uint64_t *v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  int64x2_t v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD **v406;
  uint64_t *v407;
  int v408;
  unint64_t j;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  size_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  __int128 v424;
  __int128 v425;
  int64x2_t v426;
  uint64_t v427;
  _QWORD *v428;
  uint64_t v429;
  void **v430;
  const char *v431;
  _QWORD *v432;
  unsigned int v433;
  _DWORD *v434;
  int v435;
  int v436;
  uint64_t v437;
  _QWORD *v438;
  _BOOL8 v439;
  double v440;
  _QWORD *v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  char **v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  llvm::MachO::InterfaceFile *v459;
  int v460;
  void *v461;
  size_t v462;
  unsigned __int8 *v463;
  unsigned __int8 *v464;
  unsigned int v465;
  int v466;
  int v467;
  int v468;
  int64x2_t *v469;
  uint64_t v470;
  int64x2_t v471;
  uint64_t v472;
  unsigned __int8 *v473;
  uint64_t v474;
  BOOL v475;
  BOOL v476;
  unsigned __int8 **v477;
  unsigned __int8 *v478;
  unsigned __int8 *v479;
  unsigned int v480;
  int v481;
  int v482;
  int v483;
  unsigned __int8 *v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  uint64_t v487;
  uint64_t v488;
  unsigned __int8 *v489;
  unsigned __int8 *v490;
  unsigned __int8 *v491;
  uint64_t v492;
  uint64_t v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  size_t v496;
  BOOL v497;
  int v498;
  const void *v499;
  unsigned __int8 *v500;
  unsigned __int8 *v501;
  uint64_t v502;
  uint64_t v503;
  BOOL v504;
  uint64_t v505;
  const void *v506;
  unsigned __int8 *v507;
  unsigned __int8 *v508;
  const void *v509;
  size_t v510;
  unsigned __int8 *v511;
  unsigned __int8 *v512;
  uint64_t v513;
  uint64_t v514;
  BOOL v515;
  uint64_t v516;
  const void *v517;
  unsigned __int8 *v518;
  unsigned __int8 *v519;
  const void *v520;
  size_t v521;
  unsigned __int8 *v522;
  unsigned __int8 *v523;
  const void *v524;
  size_t v525;
  unsigned __int8 **v526;
  unsigned __int8 **v527;
  unsigned __int8 *v528;
  unsigned __int8 *v529;
  unsigned int v530;
  int v531;
  int v532;
  int v533;
  unsigned __int8 *v534;
  unsigned __int8 *v535;
  size_t v536;
  int v538;
  const void *v539;
  unsigned __int8 *v540;
  unsigned __int8 *v541;
  uint64_t v542;
  uint64_t v543;
  BOOL v544;
  uint64_t v545;
  const void *v546;
  unsigned __int8 *v547;
  unsigned __int8 *v548;
  const void *v549;
  size_t v550;
  unsigned __int8 *v551;
  unsigned __int8 *v552;
  uint64_t v553;
  uint64_t v554;
  BOOL v555;
  uint64_t v556;
  const void *v557;
  unsigned __int8 *v558;
  unsigned __int8 *v559;
  const void *v560;
  size_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  void *v565;
  uint64_t v566;
  uint64_t v567;
  void *v568;
  void *v569;
  void *v570;
  int v572;
  int v573;
  uint64_t *v574;
  _QWORD *v575;
  _QWORD *v576;
  unsigned __int8 **v577;
  uint64_t v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t *v581;
  _QWORD *v582;
  uint64_t v583;
  _QWORD **v584;
  _QWORD *v585;
  uint64_t v586;
  char v587;
  uint64_t *v588;
  _QWORD v589[4];
  _QWORD v590[6];
  _QWORD v591[2];
  void *__p[2];
  uint64_t v593;
  void *__dst;
  uint64_t v595;
  _BYTE v596[16];
  _QWORD **v597;
  _QWORD *v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char v603;
  int v604;
  int v605;
  __int128 v606;
  int64x2_t v607;
  _QWORD v608[4];
  _QWORD *v609;
  _QWORD *v610;
  uint64_t *v611;
  _BYTE v612[32];
  _BYTE v613[24];
  _BYTE *v614;
  int64x2_t __src[2];
  void *v616[2];
  void *v617[2];
  void *v618[2];
  void *v619[2];
  void *v620[2];
  void *v621[2];
  void *v622[2];
  void *v623[2];
  __int128 v624;
  void *v625[2];
  void *v626[2];
  _BYTE *v627;
  _BYTE v628[32];
  uint64_t v629;
  char v630;
  uint64_t v631;
  uint64_t *v632;
  int64x2_t *v633;
  uint64_t v634;

  v3 = a3;
  v634 = *MEMORY[0x24BDAC8D0];
  v609 = a2;
  v610 = 0;
  v611 = a3;
  v6 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  v589[0] = 0;
  v589[1] = 0;
  v589[2] = v590;
  v589[3] = 0x400000000;
  v590[4] = v591;
  v590[5] = 0;
  v591[0] = 0;
  v591[1] = 1;
  __p[0] = 0;
  __p[1] = 0;
  v593 = 0;
  __dst = v596;
  v595 = 0x300000000;
  v598 = 0;
  v599 = 0;
  v597 = &v598;
  v574 = a2;
  if (!v6)
  {
    v605 = 0;
    v604 = 0;
    v601 = 0;
    v602 = 0;
    v600 = 0;
    v603 = 0;
    v606 = 0u;
    v607 = 0u;
    memset(v608, 0, sizeof(v608));
    goto LABEL_672;
  }
  v605 = 0;
  v604 = 0;
  v601 = 0;
  v602 = 0;
  v600 = 0;
  v603 = 0;
  v606 = 0u;
  v607 = 0u;
  memset(v608, 0, sizeof(v608));
  v578 = a2[1];
  v7 = *(unsigned int *)(*v3 + 104);
  v572 = a1;
  v8 = 0;
  if ((_DWORD)v7)
  {
    v9 = *(unsigned __int8 **)(*v3 + 96);
    v10 = 24 * v7;
    do
    {
      v11 = *v9;
      v9 += 24;
      v12 = 1 << v11;
      if (v11 == 16)
        v13 = 0;
      else
        v13 = v12;
      v8 |= v13;
      v10 -= 24;
    }
    while (v10);
  }
  *(_DWORD *)v628 = v8;
  llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)v628, __src);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(int64x2_t *)__p = __src[0];
  v593 = __src[1].i64[0];
  llvm::MachO::mapToPlatformSet(*(uint64_t ***)(*v3 + 96), *(unsigned int *)(*v3 + 104), (uint64_t)__src);
  v14 = (void *)__src[0].i64[0];
  if ((int64x2_t *)__src[0].i64[0] == &__src[1])
  {
    v15 = __src[0].i32[2];
    v16 = v595;
    if (v595 >= __src[0].i32[2])
    {
      if (__src[0].i32[2])
        memmove(__dst, (const void *)__src[0].i64[0], 4 * __src[0].u32[2]);
      goto LABEL_25;
    }
    if (HIDWORD(v595) >= __src[0].i32[2])
    {
      if ((_DWORD)v595)
      {
        memmove(__dst, (const void *)__src[0].i64[0], 4 * v595);
        goto LABEL_23;
      }
    }
    else
    {
      LODWORD(v595) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v596, __src[0].u32[2], 4);
    }
    v16 = 0;
LABEL_23:
    if (v16 != __src[0].u32[2])
      memcpy((char *)__dst + 4 * v16, (const void *)(__src[0].i64[0] + 4 * v16), 4 * __src[0].u32[2] - 4 * v16);
LABEL_25:
    LODWORD(v595) = v15;
    goto LABEL_26;
  }
  if (__dst != v596)
  {
    free(__dst);
    v14 = (void *)__src[0].i64[0];
  }
  __dst = v14;
  v595 = __src[0].i64[1];
  __src[0].i64[0] = (uint64_t)__src[1].i64;
  __src[0].i32[3] = 0;
LABEL_26:
  __src[0].i32[2] = 0;
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v597, v598);
  v17 = v616[1];
  v597 = (_QWORD **)v616[0];
  v598 = v616[1];
  v599 = v617[0];
  if (v617[0])
  {
    *((_QWORD *)v616[1] + 2) = &v598;
    v616[0] = &v616[1];
    v616[1] = 0;
    v617[0] = 0;
    v17 = 0;
  }
  else
  {
    v597 = &v598;
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)v616, v17);
  if ((int64x2_t *)__src[0].i64[0] != &__src[1])
    free((void *)__src[0].i64[0]);
  v18 = *v3;
  v19 = *v3 + 264;
  v20 = *(char *)(*v3 + 287);
  v21 = v20 < 0;
  if (v20 < 0)
    v19 = *(_QWORD *)(*v3 + 264);
  v22 = *(unsigned __int8 *)(*v3 + 287);
  if (v21)
    v22 = *(_QWORD *)(*v3 + 272);
  v600 = v19;
  v601 = v22;
  v602 = *(_QWORD *)(v18 + 288);
  v603 = *(_BYTE *)(v18 + 296);
  v23 = 2 * (*(_BYTE *)(v18 + 298) == 0);
  v604 = *(_DWORD *)(v18 + 300);
  v605 = v23;
  if (!*(_BYTE *)(v18 + 297))
    v605 = v23 | 1;
  v24 = *(_QWORD *)(v18 + 304);
  if (v24 != *(_QWORD *)(v18 + 312))
  {
    v27 = *(_QWORD *)(v24 + 24);
    v25 = v24 + 24;
    v26 = v27;
    v28 = *(char *)(v25 + 23);
    if (v28 >= 0)
      v26 = v25;
    v29 = *(_QWORD *)(v25 + 8);
    if (v28 >= 0)
      v29 = v28;
    *(_QWORD *)&v606 = v26;
    *((_QWORD *)&v606 + 1) = v29;
  }
  v585 = 0;
  v586 = 0;
  v584 = &v585;
  v30 = *(_QWORD *)(v18 + 328);
  v31 = *(_QWORD *)(v18 + 336);
  if (v30 != v31)
  {
    do
    {
      v32 = *(unsigned int *)(v30 + 32);
      if ((_DWORD)v32)
      {
        v33 = 0;
        v34 = *(unsigned __int8 **)(v30 + 24);
        v35 = 24 * v32;
        do
        {
          v36 = *v34;
          v34 += 24;
          v37 = 1 << v36;
          if (v36 == 16)
            v38 = 0;
          else
            v38 = v37;
          v33 |= v38;
          v35 -= 24;
        }
        while (v35);
      }
      else
      {
        v33 = 0;
      }
      std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v584, v33, v33);
      v30 += 160;
    }
    while (v30 != v31);
    v18 = *v3;
  }
  v39 = *(_QWORD *)(v18 + 352);
  v40 = *(_QWORD *)(v18 + 360);
  if (v39 != v40)
  {
    do
    {
      v41 = *(unsigned int *)(v39 + 32);
      if ((_DWORD)v41)
      {
        v42 = 0;
        v43 = *(unsigned __int8 **)(v39 + 24);
        v44 = 24 * v41;
        do
        {
          v45 = *v43;
          v43 += 24;
          v46 = 1 << v45;
          if (v45 == 16)
            v47 = 0;
          else
            v47 = v46;
          v42 |= v47;
          v44 -= 24;
        }
        while (v44);
      }
      else
      {
        v42 = 0;
      }
      std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v584, v42, v42);
      v39 += 160;
    }
    while (v39 != v40);
    v18 = *v3;
  }
  v582 = 0;
  v583 = 0;
  v581 = (uint64_t *)&v582;
  llvm::MachO::SymbolSet::symbols(*(_QWORD *)(v18 + 448), __src);
  *(int64x2_t *)v628 = __src[0];
  v48 = __src[1].i64[0];
  v49 = __src[0].i64[0];
  if (__src[0].i64[0] != __src[1].i64[0])
  {
    do
    {
      v50 = *(_QWORD *)(v49 + 24);
      *(_QWORD *)v612 = v50;
      v51 = *(unsigned int *)(v50 + 24);
      if ((_DWORD)v51)
      {
        v52 = 0;
        v53 = *(unsigned __int8 **)(v50 + 16);
        v54 = 24 * v51;
        do
        {
          v55 = *v53;
          v53 += 24;
          v56 = 1 << v55;
          if (v55 == 16)
            v57 = 0;
          else
            v57 = v56;
          v52 |= v57;
          v54 -= 24;
        }
        while (v54);
      }
      else
      {
        v52 = 0;
      }
      *((_DWORD *)std::__tree<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::__map_value_compare<llvm::MachO::Symbol const*,std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::less<llvm::MachO::Symbol const*>,true>,std::allocator<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>>>::__emplace_unique_key_args<llvm::MachO::Symbol const*,std::piecewise_construct_t const&,std::tuple<llvm::MachO::Symbol const* const&>,std::tuple<>>(&v581, v50, (uint64_t **)v612)+ 10) = v52;
      std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v584, v52, v52);
      *(_QWORD *)v628 += 32;
      llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)v628);
      v49 = *(_QWORD *)v628;
    }
    while (*(_QWORD *)v628 != v48);
  }
  v58 = (uint64_t)v584;
  if (v584 != &v585)
  {
    v576 = v3;
    do
    {
      LODWORD(v588) = *(_DWORD *)(v58 + 28);
      v627 = 0;
      *(_OWORD *)v625 = 0u;
      *(_OWORD *)v626 = 0u;
      *(_OWORD *)v623 = 0u;
      v624 = 0u;
      *(_OWORD *)v621 = 0u;
      *(_OWORD *)v622 = 0u;
      *(_OWORD *)v619 = 0u;
      *(_OWORD *)v620 = 0u;
      *(_OWORD *)v617 = 0u;
      *(_OWORD *)v618 = 0u;
      *(_OWORD *)v616 = 0u;
      memset(__src, 0, sizeof(__src));
      llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v588, v628);
      if (__src[0].i64[0])
      {
        __src[0].i64[1] = __src[0].i64[0];
        operator delete((void *)__src[0].i64[0]);
      }
      __src[0] = *(int64x2_t *)v628;
      __src[1].i64[0] = *(_QWORD *)&v628[16];
      v59 = *v3;
      v60 = *(uint64_t **)(*v3 + 328);
      v61 = *(uint64_t **)(*v3 + 336);
      if (v60 != v61)
      {
        do
        {
          v62 = *((unsigned int *)v60 + 8);
          if ((_DWORD)v62)
          {
            v63 = 0;
            v64 = (unsigned __int8 *)v60[3];
            v65 = 24 * v62;
            do
            {
              v66 = *v64;
              v64 += 24;
              v67 = 1 << v66;
              if (v66 == 16)
                v68 = 0;
              else
                v68 = v67;
              v63 |= v68;
              v65 -= 24;
            }
            while (v65);
          }
          else
          {
            v63 = 0;
          }
          if (v63 == (_DWORD)v588)
          {
            v69 = *((char *)v60 + 23);
            if (v69 >= 0)
              v70 = v60;
            else
              v70 = (uint64_t *)*v60;
            if (v69 >= 0)
              v71 = *((unsigned __int8 *)v60 + 23);
            else
              v71 = v60[1];
            v72 = v616[0];
            if (v616[0] >= v616[1])
            {
              v74 = ((uint64_t)v616[0] - __src[1].i64[1]) >> 4;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 60)
                goto LABEL_914;
              v76 = (uint64_t)v616[1] - __src[1].i64[1];
              if (((uint64_t)v616[1] - __src[1].i64[1]) >> 3 > v75)
                v75 = v76 >> 3;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
                v77 = 0xFFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
                v77 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v77);
              else
                v78 = 0;
              v79 = (_QWORD *)(v77 + 16 * v74);
              *v79 = v70;
              v79[1] = v71;
              v80 = (char *)v616[0];
              v81 = __src[1].i64[1];
              v82 = (uint64_t)v79;
              if (v616[0] != (void *)__src[1].i64[1])
              {
                do
                {
                  *(_OWORD *)(v82 - 16) = *((_OWORD *)v80 - 1);
                  v82 -= 16;
                  v80 -= 16;
                }
                while (v80 != (char *)v81);
                v80 = (char *)__src[1].i64[1];
              }
              v73 = v79 + 2;
              __src[1].i64[1] = v82;
              v616[0] = v79 + 2;
              v616[1] = (void *)(v77 + 16 * v78);
              if (v80)
                operator delete(v80);
            }
            else
            {
              *(_QWORD *)v616[0] = v70;
              v72[1] = v71;
              v73 = v72 + 2;
            }
            v616[0] = v73;
          }
          v60 += 20;
        }
        while (v60 != v61);
        v59 = *v576;
      }
      v83 = *(uint64_t **)(v59 + 352);
      v84 = *(uint64_t **)(v59 + 360);
      while (v83 != v84)
      {
        v85 = *((unsigned int *)v83 + 8);
        if ((_DWORD)v85)
        {
          v86 = 0;
          v87 = (unsigned __int8 *)v83[3];
          v88 = 24 * v85;
          do
          {
            v89 = *v87;
            v87 += 24;
            v90 = 1 << v89;
            if (v89 == 16)
              v91 = 0;
            else
              v91 = v90;
            v86 |= v91;
            v88 -= 24;
          }
          while (v88);
        }
        else
        {
          v86 = 0;
        }
        if (v86 == (_DWORD)v588)
        {
          v92 = *((char *)v83 + 23);
          if (v92 >= 0)
            v93 = v83;
          else
            v93 = (uint64_t *)*v83;
          if (v92 >= 0)
            v94 = *((unsigned __int8 *)v83 + 23);
          else
            v94 = v83[1];
          v95 = v617[1];
          if (v617[1] >= v618[0])
          {
            v97 = ((char *)v617[1] - (char *)v617[0]) >> 4;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 60)
              goto LABEL_914;
            v99 = (char *)v618[0] - (char *)v617[0];
            if (((char *)v618[0] - (char *)v617[0]) >> 3 > v98)
              v98 = v99 >> 3;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0)
              v100 = 0xFFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
              v100 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v100);
            else
              v101 = 0;
            v102 = (char *)(v100 + 16 * v97);
            *(_QWORD *)v102 = v93;
            *((_QWORD *)v102 + 1) = v94;
            v103 = (char *)v617[1];
            v104 = (char *)v617[0];
            v105 = v102;
            if (v617[1] != v617[0])
            {
              do
              {
                *((_OWORD *)v105 - 1) = *((_OWORD *)v103 - 1);
                v105 -= 16;
                v103 -= 16;
              }
              while (v103 != v104);
              v103 = (char *)v617[0];
            }
            v96 = v102 + 16;
            v617[0] = v105;
            v617[1] = v102 + 16;
            v618[0] = (void *)(v100 + 16 * v101);
            if (v103)
              operator delete(v103);
          }
          else
          {
            *(_QWORD *)v617[1] = v93;
            v95[1] = v94;
            v96 = v95 + 2;
          }
          v617[1] = v96;
        }
        v83 += 20;
      }
      v106 = v581;
      if (v581 != (uint64_t *)&v582)
      {
        do
        {
          if (*((_DWORD *)v106 + 10) == (_DWORD)v588)
          {
            v107 = v106[4];
            switch(*(_BYTE *)(v107 + 152))
            {
              case 0:
                if ((*(_BYTE *)(v107 + 153) & 2) != 0)
                {
                  v125 = *(void **)v107;
                  v124 = *(_QWORD *)(v107 + 8);
                  v126 = v625[0];
                  if (v625[0] >= v625[1])
                  {
                    v145 = ((uint64_t)v625[0] - *((_QWORD *)&v624 + 1)) >> 4;
                    v146 = v145 + 1;
                    if ((unint64_t)(v145 + 1) >> 60)
                      goto LABEL_914;
                    v147 = (uint64_t)v625[1] - *((_QWORD *)&v624 + 1);
                    if (((uint64_t)v625[1] - *((_QWORD *)&v624 + 1)) >> 3 > v146)
                      v146 = v147 >> 3;
                    if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0)
                      v148 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v148 = v146;
                    if (v148)
                      v148 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v148);
                    else
                      v149 = 0;
                    v205 = (_QWORD *)(v148 + 16 * v145);
                    *v205 = v125;
                    v205[1] = v124;
                    v206 = (char *)v625[0];
                    v207 = (char *)*((_QWORD *)&v624 + 1);
                    v208 = v205;
                    if (v625[0] != *((void **)&v624 + 1))
                    {
                      do
                      {
                        *((_OWORD *)v208 - 1) = *((_OWORD *)v206 - 1);
                        v208 -= 2;
                        v206 -= 16;
                      }
                      while (v206 != v207);
                      v206 = (char *)*((_QWORD *)&v624 + 1);
                    }
                    v127 = v205 + 2;
                    *((_QWORD *)&v624 + 1) = v208;
                    v625[0] = v205 + 2;
                    v625[1] = (void *)(v148 + 16 * v149);
                    if (v206)
                      operator delete(v206);
                  }
                  else
                  {
                    *(_QWORD *)v625[0] = v125;
                    v126[1] = v124;
                    v127 = v126 + 2;
                  }
                  v625[0] = v127;
                }
                else
                {
                  v109 = *(void **)v107;
                  v108 = *(_QWORD *)(v107 + 8);
                  if ((*(_BYTE *)(v107 + 153) & 1) != 0)
                  {
                    v128 = v626[1];
                    if (v626[1] >= v627)
                    {
                      v188 = ((char *)v626[1] - (char *)v626[0]) >> 4;
                      v189 = v188 + 1;
                      if ((unint64_t)(v188 + 1) >> 60)
                        goto LABEL_914;
                      v190 = v627 - (char *)v626[0];
                      if ((v627 - (char *)v626[0]) >> 3 > v189)
                        v189 = v190 >> 3;
                      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
                        v191 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v191 = v189;
                      if (v191)
                        v191 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v191);
                      else
                        v192 = 0;
                      v225 = (char *)(v191 + 16 * v188);
                      *(_QWORD *)v225 = v109;
                      *((_QWORD *)v225 + 1) = v108;
                      v226 = (char *)v626[1];
                      v227 = (char *)v626[0];
                      v228 = v225;
                      if (v626[1] != v626[0])
                      {
                        do
                        {
                          *((_OWORD *)v228 - 1) = *((_OWORD *)v226 - 1);
                          v228 -= 16;
                          v226 -= 16;
                        }
                        while (v226 != v227);
                        v226 = (char *)v626[0];
                      }
                      v129 = v225 + 16;
                      v626[0] = v228;
                      v626[1] = v225 + 16;
                      v627 = (_BYTE *)(v191 + 16 * v192);
                      if (v226)
                        operator delete(v226);
                    }
                    else
                    {
                      *(_QWORD *)v626[1] = v109;
                      v128[1] = v108;
                      v129 = v128 + 2;
                    }
                    v626[1] = v129;
                  }
                  else
                  {
                    v110 = v619[0];
                    if (v619[0] >= v619[1])
                    {
                      v183 = ((char *)v619[0] - (char *)v618[1]) >> 4;
                      v184 = v183 + 1;
                      if ((unint64_t)(v183 + 1) >> 60)
                        goto LABEL_914;
                      v185 = (char *)v619[1] - (char *)v618[1];
                      if (((char *)v619[1] - (char *)v618[1]) >> 3 > v184)
                        v184 = v185 >> 3;
                      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF0)
                        v186 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v186 = v184;
                      if (v186)
                        v186 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v186);
                      else
                        v187 = 0;
                      v221 = (char *)(v186 + 16 * v183);
                      *(_QWORD *)v221 = v109;
                      *((_QWORD *)v221 + 1) = v108;
                      v222 = (char *)v619[0];
                      v223 = (char *)v618[1];
                      v224 = v221;
                      if (v619[0] != v618[1])
                      {
                        do
                        {
                          *((_OWORD *)v224 - 1) = *((_OWORD *)v222 - 1);
                          v224 -= 16;
                          v222 -= 16;
                        }
                        while (v222 != v223);
                        v222 = (char *)v618[1];
                      }
                      v111 = v221 + 16;
                      v618[1] = v224;
                      v619[0] = v221 + 16;
                      v619[1] = (void *)(v186 + 16 * v187);
                      if (v222)
                        operator delete(v222);
                    }
                    else
                    {
                      *(_QWORD *)v619[0] = v109;
                      v110[1] = v108;
                      v111 = v110 + 2;
                    }
                    v619[0] = v111;
                  }
                }
                break;
              case 1:
                if (*(_DWORD *)(v578 + 48) == 32)
                {
                  v113 = *(void **)v107;
                  v112 = *(_QWORD *)(v107 + 8);
                  v114 = v620[1];
                  if (v620[1] >= v621[0])
                  {
                    v130 = ((char *)v620[1] - (char *)v620[0]) >> 4;
                    v131 = v130 + 1;
                    if ((unint64_t)(v130 + 1) >> 60)
                      goto LABEL_914;
                    v132 = (char *)v621[0] - (char *)v620[0];
                    if (((char *)v621[0] - (char *)v620[0]) >> 3 > v131)
                      v131 = v132 >> 3;
                    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
                      v133 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v133 = v131;
                    if (v133)
                      v133 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v133);
                    else
                      v134 = 0;
                    v193 = (char *)(v133 + 16 * v130);
                    *(_QWORD *)v193 = v113;
                    *((_QWORD *)v193 + 1) = v112;
                    v194 = (char *)v620[1];
                    v195 = (char *)v620[0];
                    v196 = v193;
                    if (v620[1] != v620[0])
                    {
                      do
                      {
                        *((_OWORD *)v196 - 1) = *((_OWORD *)v194 - 1);
                        v196 -= 16;
                        v194 -= 16;
                      }
                      while (v194 != v195);
                      v194 = (char *)v620[0];
                    }
                    v115 = v193 + 16;
                    v620[0] = v196;
                    v620[1] = v193 + 16;
                    v621[0] = (void *)(v133 + 16 * v134);
                    if (v194)
                      operator delete(v194);
                  }
                  else
                  {
                    *(_QWORD *)v620[1] = v113;
                    v114[1] = v112;
                    v115 = v114 + 2;
                  }
                  v620[1] = v115;
                  break;
                }
                if (*(_QWORD *)v107)
                  std::string::basic_string[abi:nn180100](v612, *(void **)v107, *(_QWORD *)(v107 + 8));
                else
                  memset(v612, 0, 24);
                v150 = std::string::insert((std::string *)v612, 0, "_");
                *(std::string *)v628 = *v150;
                v150->__r_.__value_.__l.__size_ = 0;
                v150->__r_.__value_.__r.__words[2] = 0;
                v150->__r_.__value_.__r.__words[0] = 0;
                if (v628[23] >= 0)
                  v151 = v628[23];
                else
                  v151 = *(_QWORD *)&v628[8];
                if (v151)
                {
                  if (v628[23] >= 0)
                    v152 = v628;
                  else
                    v152 = *(_BYTE **)v628;
                  v153 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v589, v151, 0);
                  memcpy(v153, v152, v151);
                }
                else
                {
                  v153 = 0;
                }
                v162 = v620[1];
                if (v620[1] >= v621[0])
                {
                  v164 = ((char *)v620[1] - (char *)v620[0]) >> 4;
                  v165 = v164 + 1;
                  if ((unint64_t)(v164 + 1) >> 60)
                    goto LABEL_914;
                  v166 = (char *)v621[0] - (char *)v620[0];
                  if (((char *)v621[0] - (char *)v620[0]) >> 3 > v165)
                    v165 = v166 >> 3;
                  if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0)
                    v167 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v167 = v165;
                  if (v167)
                    v167 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v167);
                  else
                    v168 = 0;
                  v209 = (char *)(v167 + 16 * v164);
                  *(_QWORD *)v209 = v153;
                  *((_QWORD *)v209 + 1) = v151;
                  v210 = (char *)v620[1];
                  v211 = (char *)v620[0];
                  v212 = v209;
                  if (v620[1] != v620[0])
                  {
                    do
                    {
                      *((_OWORD *)v212 - 1) = *((_OWORD *)v210 - 1);
                      v212 -= 16;
                      v210 -= 16;
                    }
                    while (v210 != v211);
                    v210 = (char *)v620[0];
                  }
                  v163 = v209 + 16;
                  v620[0] = v212;
                  v620[1] = v209 + 16;
                  v621[0] = (void *)(v167 + 16 * v168);
                  if (v210)
                    operator delete(v210);
                }
                else
                {
                  *(_QWORD *)v620[1] = v153;
                  v162[1] = v151;
                  v163 = v162 + 2;
                }
                v620[1] = v163;
                goto LABEL_332;
              case 2:
                if (*(_DWORD *)(v578 + 48) == 32)
                {
                  v117 = *(void **)v107;
                  v116 = *(_QWORD *)(v107 + 8);
                  v118 = v622[0];
                  if (v622[0] >= v622[1])
                  {
                    v135 = ((char *)v622[0] - (char *)v621[1]) >> 4;
                    v136 = v135 + 1;
                    if ((unint64_t)(v135 + 1) >> 60)
                      goto LABEL_914;
                    v137 = (char *)v622[1] - (char *)v621[1];
                    if (((char *)v622[1] - (char *)v621[1]) >> 3 > v136)
                      v136 = v137 >> 3;
                    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
                      v138 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v138 = v136;
                    if (v138)
                      v138 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v138);
                    else
                      v139 = 0;
                    v197 = (char *)(v138 + 16 * v135);
                    *(_QWORD *)v197 = v117;
                    *((_QWORD *)v197 + 1) = v116;
                    v198 = (char *)v622[0];
                    v199 = (char *)v621[1];
                    v200 = v197;
                    if (v622[0] != v621[1])
                    {
                      do
                      {
                        *((_OWORD *)v200 - 1) = *((_OWORD *)v198 - 1);
                        v200 -= 16;
                        v198 -= 16;
                      }
                      while (v198 != v199);
                      v198 = (char *)v621[1];
                    }
                    v119 = v197 + 16;
                    v621[1] = v200;
                    v622[0] = v197 + 16;
                    v622[1] = (void *)(v138 + 16 * v139);
                    if (v198)
                      operator delete(v198);
                  }
                  else
                  {
                    *(_QWORD *)v622[0] = v117;
                    v118[1] = v116;
                    v119 = v118 + 2;
                  }
                  v622[0] = v119;
                  break;
                }
                if (*(_QWORD *)v107)
                  std::string::basic_string[abi:nn180100](v612, *(void **)v107, *(_QWORD *)(v107 + 8));
                else
                  memset(v612, 0, 24);
                v154 = std::string::insert((std::string *)v612, 0, "_OBJC_EHTYPE_$_");
                *(std::string *)v628 = *v154;
                v154->__r_.__value_.__l.__size_ = 0;
                v154->__r_.__value_.__r.__words[2] = 0;
                v154->__r_.__value_.__r.__words[0] = 0;
                if (v628[23] >= 0)
                  v155 = v628[23];
                else
                  v155 = *(_QWORD *)&v628[8];
                if (v155)
                {
                  if (v628[23] >= 0)
                    v156 = v628;
                  else
                    v156 = *(_BYTE **)v628;
                  v157 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v589, v155, 0);
                  memcpy(v157, v156, v155);
                }
                else
                {
                  v157 = 0;
                }
                v169 = v619[0];
                if (v619[0] >= v619[1])
                {
                  v171 = ((char *)v619[0] - (char *)v618[1]) >> 4;
                  v172 = v171 + 1;
                  if ((unint64_t)(v171 + 1) >> 60)
                    goto LABEL_914;
                  v173 = (char *)v619[1] - (char *)v618[1];
                  if (((char *)v619[1] - (char *)v618[1]) >> 3 > v172)
                    v172 = v173 >> 3;
                  if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF0)
                    v174 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v174 = v172;
                  if (v174)
                    v174 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v174);
                  else
                    v175 = 0;
                  v213 = (char *)(v174 + 16 * v171);
                  *(_QWORD *)v213 = v157;
                  *((_QWORD *)v213 + 1) = v155;
                  v214 = (char *)v619[0];
                  v215 = (char *)v618[1];
                  v216 = v213;
                  if (v619[0] != v618[1])
                  {
                    do
                    {
                      *((_OWORD *)v216 - 1) = *((_OWORD *)v214 - 1);
                      v216 -= 16;
                      v214 -= 16;
                    }
                    while (v214 != v215);
                    v214 = (char *)v618[1];
                  }
                  v170 = v213 + 16;
                  v618[1] = v216;
                  v619[0] = v213 + 16;
                  v619[1] = (void *)(v174 + 16 * v175);
                  if (v214)
                    operator delete(v214);
                }
                else
                {
                  *(_QWORD *)v619[0] = v157;
                  v169[1] = v155;
                  v170 = v169 + 2;
                }
                v619[0] = v170;
                goto LABEL_332;
              case 3:
                if (*(_DWORD *)(v578 + 48) == 32)
                {
                  v121 = *(void **)v107;
                  v120 = *(_QWORD *)(v107 + 8);
                  v122 = v623[1];
                  if (v623[1] >= (void *)v624)
                  {
                    v140 = ((char *)v623[1] - (char *)v623[0]) >> 4;
                    v141 = v140 + 1;
                    if ((unint64_t)(v140 + 1) >> 60)
                      goto LABEL_914;
                    v142 = v624 - (unint64_t)v623[0];
                    if ((uint64_t)(v624 - (unint64_t)v623[0]) >> 3 > v141)
                      v141 = v142 >> 3;
                    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0)
                      v143 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v143 = v141;
                    if (v143)
                      v143 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v143);
                    else
                      v144 = 0;
                    v201 = (char *)(v143 + 16 * v140);
                    *(_QWORD *)v201 = v121;
                    *((_QWORD *)v201 + 1) = v120;
                    v202 = (char *)v623[1];
                    v203 = (char *)v623[0];
                    v204 = v201;
                    if (v623[1] != v623[0])
                    {
                      do
                      {
                        *((_OWORD *)v204 - 1) = *((_OWORD *)v202 - 1);
                        v204 -= 16;
                        v202 -= 16;
                      }
                      while (v202 != v203);
                      v202 = (char *)v623[0];
                    }
                    v123 = v201 + 16;
                    v623[0] = v204;
                    v623[1] = v201 + 16;
                    *(_QWORD *)&v624 = v143 + 16 * v144;
                    if (v202)
                      operator delete(v202);
                  }
                  else
                  {
                    *(_QWORD *)v623[1] = v121;
                    v122[1] = v120;
                    v123 = v122 + 2;
                  }
                  v623[1] = v123;
                }
                else
                {
                  if (*(_QWORD *)v107)
                    std::string::basic_string[abi:nn180100](v612, *(void **)v107, *(_QWORD *)(v107 + 8));
                  else
                    memset(v612, 0, 24);
                  v158 = std::string::insert((std::string *)v612, 0, "_");
                  *(std::string *)v628 = *v158;
                  v158->__r_.__value_.__l.__size_ = 0;
                  v158->__r_.__value_.__r.__words[2] = 0;
                  v158->__r_.__value_.__r.__words[0] = 0;
                  if (v628[23] >= 0)
                    v159 = v628[23];
                  else
                    v159 = *(_QWORD *)&v628[8];
                  if (v159)
                  {
                    if (v628[23] >= 0)
                      v160 = v628;
                    else
                      v160 = *(_BYTE **)v628;
                    v161 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v589, v159, 0);
                    memcpy(v161, v160, v159);
                  }
                  else
                  {
                    v161 = 0;
                  }
                  v176 = v623[1];
                  if (v623[1] >= (void *)v624)
                  {
                    v178 = ((char *)v623[1] - (char *)v623[0]) >> 4;
                    v179 = v178 + 1;
                    if ((unint64_t)(v178 + 1) >> 60)
                      goto LABEL_914;
                    v180 = v624 - (unint64_t)v623[0];
                    if ((uint64_t)(v624 - (unint64_t)v623[0]) >> 3 > v179)
                      v179 = v180 >> 3;
                    if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0)
                      v181 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v181 = v179;
                    if (v181)
                      v181 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v181);
                    else
                      v182 = 0;
                    v217 = (char *)(v181 + 16 * v178);
                    *(_QWORD *)v217 = v161;
                    *((_QWORD *)v217 + 1) = v159;
                    v218 = (char *)v623[1];
                    v219 = (char *)v623[0];
                    v220 = v217;
                    if (v623[1] != v623[0])
                    {
                      do
                      {
                        *((_OWORD *)v220 - 1) = *((_OWORD *)v218 - 1);
                        v220 -= 16;
                        v218 -= 16;
                      }
                      while (v218 != v219);
                      v218 = (char *)v623[0];
                    }
                    v177 = v217 + 16;
                    v623[0] = v220;
                    v623[1] = v217 + 16;
                    *(_QWORD *)&v624 = v181 + 16 * v182;
                    if (v218)
                      operator delete(v218);
                  }
                  else
                  {
                    *(_QWORD *)v623[1] = v161;
                    v176[1] = v159;
                    v177 = v176 + 2;
                  }
                  v623[1] = v177;
LABEL_332:
                  if ((v628[23] & 0x80000000) != 0)
                    operator delete(*(void **)v628);
                  if ((v612[23] & 0x80000000) != 0)
                    operator delete(*(void **)v612);
                }
                break;
              default:
                break;
            }
          }
          v229 = (uint64_t *)v106[1];
          if (v229)
          {
            do
            {
              v230 = v229;
              v229 = (uint64_t *)*v229;
            }
            while (v229);
          }
          else
          {
            do
            {
              v230 = (uint64_t *)v106[2];
              v497 = *v230 == (_QWORD)v106;
              v106 = v230;
            }
            while (!v497);
          }
          v106 = v230;
        }
        while (v230 != (uint64_t *)&v582);
      }
      v231 = 126 - 2 * __clz(((char *)v619[0] - (char *)v618[1]) >> 4);
      if (v619[0] == v618[1])
        v232 = 0;
      else
        v232 = v231;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v618[1], (_OWORD *)v619[0], v232, 1);
      v233 = 126 - 2 * __clz(((char *)v620[1] - (char *)v620[0]) >> 4);
      if (v620[1] == v620[0])
        v234 = 0;
      else
        v234 = v233;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v620[0], (_OWORD *)v620[1], v234, 1);
      v235 = 126 - 2 * __clz(((char *)v622[0] - (char *)v621[1]) >> 4);
      if (v622[0] == v621[1])
        v236 = 0;
      else
        v236 = v235;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v621[1], (_OWORD *)v622[0], v236, 1);
      v237 = 126 - 2 * __clz(((char *)v623[1] - (char *)v623[0]) >> 4);
      if (v623[1] == v623[0])
        v238 = 0;
      else
        v238 = v237;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v623[0], (_OWORD *)v623[1], v238, 1);
      v239 = 126 - 2 * __clz(((uint64_t)v625[0] - *((_QWORD *)&v624 + 1)) >> 4);
      if (v625[0] == *((void **)&v624 + 1))
        v240 = 0;
      else
        v240 = v239;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((uint64_t *)&v624 + 1), (_OWORD *)v625[0], v240, 1);
      v241 = 126 - 2 * __clz(((char *)v626[1] - (char *)v626[0]) >> 4);
      if (v626[1] == v626[0])
        v242 = 0;
      else
        v242 = v241;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v626[0], (_OWORD *)v626[1], v242, 1);
      v243 = v607.i64[1];
      if (v607.i64[1] >= v608[0])
      {
        v245 = 0x84BDA12F684BDA13 * ((v607.i64[1] - v607.i64[0]) >> 3);
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) > 0x12F684BDA12F684)
LABEL_914:
          abort();
        if (0x97B425ED097B426 * ((v608[0] - v607.i64[0]) >> 3) > v246)
          v246 = 0x97B425ED097B426 * ((v608[0] - v607.i64[0]) >> 3);
        if (0x84BDA12F684BDA13 * ((v608[0] - v607.i64[0]) >> 3) >= 0x97B425ED097B42)
          v247 = 0x12F684BDA12F684;
        else
          v247 = v246;
        v248 = *(_QWORD **)&v628[8];
        v244 = *(_QWORD *)&v628[16] + 216;
        *(_QWORD *)&v628[16] += 216;
        v249 = v607.i64[1];
        v250 = v607.i64[0];
        if (v607.i64[1] == v607.i64[0])
        {
          v251 = vdupq_n_s64(v607.u64[1]);
        }
        else
        {
          do
          {
            v248 -= 27;
            v249 -= 216;
          }
          while (v249 != v250);
          v251 = v607;
          v244 = *(_QWORD *)&v628[16];
        }
        v607.i64[0] = (uint64_t)v248;
        v607.i64[1] = v244;
        *(int64x2_t *)&v628[8] = v251;
        v252 = v608[0];
        v608[0] = *(_QWORD *)&v628[24];
        *(_QWORD *)&v628[24] = v252;
        *(_QWORD *)v628 = v251.i64[0];
      }
      else
      {
        v244 = v243 + 216;
      }
      v607.i64[1] = v244;
      v253 = *(_QWORD **)(v58 + 8);
      v3 = v576;
      if (v253)
      {
        do
        {
          v254 = (_QWORD **)v253;
          v253 = (_QWORD *)*v253;
        }
        while (v253);
      }
      else
      {
        do
        {
          v254 = *(_QWORD ***)(v58 + 16);
          v497 = *v254 == (_QWORD *)v58;
          v58 = (uint64_t)v254;
        }
        while (!v497);
      }
      v58 = (uint64_t)v254;
    }
    while (v254 != &v585);
  }
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v585);
  v585 = 0;
  v586 = 0;
  v584 = &v585;
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v582);
  v582 = 0;
  v583 = 0;
  v581 = (uint64_t *)&v582;
  llvm::MachO::SymbolSet::undefineds(*(llvm::MachO::SymbolSet **)(*v3 + 448), (uint64_t)__src);
  *(int64x2_t *)v628 = __src[0];
  *(int64x2_t *)&v628[16] = __src[1];
  v255 = &v629;
  v256 = v616;
  if (v617[1])
  {
    if (v617[1] == v616)
    {
      v632 = &v629;
      (*((void (**)(void **, uint64_t *))v616[0] + 3))(v616, &v629);
    }
    else
    {
      v632 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)v617[1] + 16))();
    }
  }
  else
  {
    v632 = 0;
  }
  *(_OWORD *)v612 = *(_OWORD *)v618;
  *(_OWORD *)&v612[16] = *(_OWORD *)v619;
  v257 = v613;
  v258 = v620;
  if (v621[1])
  {
    if (v621[1] == v620)
    {
      v614 = v613;
      (*((void (**)(void **, _BYTE *))v620[0] + 3))(v620, v613);
    }
    else
    {
      v614 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v621[1] + 16))();
    }
  }
  else
  {
    v614 = 0;
  }
  for (i = *(_QWORD *)v628; *(_QWORD *)v628 != *(_QWORD *)v612; i = *(_QWORD *)v628)
  {
    v260 = *(_QWORD *)(i + 24);
    v588 = (uint64_t *)v260;
    v261 = *(unsigned int *)(v260 + 24);
    if ((_DWORD)v261)
    {
      v262 = 0;
      v263 = *(unsigned __int8 **)(v260 + 16);
      v264 = 24 * v261;
      do
      {
        v265 = *v263;
        v263 += 24;
        v266 = 1 << v265;
        if (v265 == 16)
          v267 = 0;
        else
          v267 = v266;
        v262 |= v267;
        v264 -= 24;
      }
      while (v264);
    }
    else
    {
      v262 = 0;
    }
    *((_DWORD *)std::__tree<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::__map_value_compare<llvm::MachO::Symbol const*,std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::less<llvm::MachO::Symbol const*>,true>,std::allocator<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>>>::__emplace_unique_key_args<llvm::MachO::Symbol const*,std::piecewise_construct_t const&,std::tuple<llvm::MachO::Symbol const* const&>,std::tuple<>>(&v581, v260, &v588)+ 10) = v262;
    std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v584, v262, v262);
    *(_QWORD *)v628 += 32;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)v628);
    llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid((uint64_t)v628);
  }
  if (v614 == v613)
  {
    v268 = 4;
  }
  else
  {
    if (!v614)
      goto LABEL_418;
    v268 = 5;
    v257 = v614;
  }
  (*(void (**)(_QWORD *))(*v257 + 8 * v268))(v257);
LABEL_418:
  if (v632 == &v629)
  {
    v269 = 4;
  }
  else
  {
    if (!v632)
      goto LABEL_423;
    v269 = 5;
    v255 = v632;
  }
  (*(void (**)(uint64_t *))(*v255 + 8 * v269))(v255);
LABEL_423:
  if (v621[1] == v620)
  {
    v270 = 4;
  }
  else
  {
    if (!v621[1])
      goto LABEL_428;
    v270 = 5;
    v258 = (void **)v621[1];
  }
  (*((void (**)(void **))*v258 + v270))(v258);
LABEL_428:
  if (v617[1] == v616)
  {
    v271 = 4;
    goto LABEL_432;
  }
  if (v617[1])
  {
    v271 = 5;
    v256 = (void **)v617[1];
LABEL_432:
    (*((void (**)(void **))*v256 + v271))(v256);
  }
  v272 = (uint64_t)v584;
  if (v584 != &v585)
  {
    do
    {
      LODWORD(v588) = *(_DWORD *)(v272 + 28);
      *(_OWORD *)v621 = 0u;
      *(_OWORD *)v622 = 0u;
      *(_OWORD *)v619 = 0u;
      *(_OWORD *)v620 = 0u;
      *(_OWORD *)v617 = 0u;
      *(_OWORD *)v618 = 0u;
      *(_OWORD *)v616 = 0u;
      memset(__src, 0, sizeof(__src));
      llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v588, v628);
      if (__src[0].i64[0])
      {
        __src[0].i64[1] = __src[0].i64[0];
        operator delete((void *)__src[0].i64[0]);
      }
      __src[0] = *(int64x2_t *)v628;
      __src[1].i64[0] = *(_QWORD *)&v628[16];
      v273 = v581;
      if (v581 != (uint64_t *)&v582)
      {
        do
        {
          if (*((_DWORD *)v273 + 10) == (_DWORD)v588)
          {
            v274 = v273[4];
            switch(*(_BYTE *)(v274 + 152))
            {
              case 0:
                v276 = *(void **)v274;
                v275 = *(_QWORD *)(v274 + 8);
                if ((*(_BYTE *)(v274 + 153) & 4) != 0)
                {
                  v291 = v622[0];
                  if (v622[0] >= v622[1])
                  {
                    v313 = ((char *)v622[0] - (char *)v621[1]) >> 4;
                    v314 = v313 + 1;
                    if ((unint64_t)(v313 + 1) >> 60)
                      goto LABEL_914;
                    v315 = (char *)v622[1] - (char *)v621[1];
                    if (((char *)v622[1] - (char *)v621[1]) >> 3 > v314)
                      v314 = v315 >> 3;
                    if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF0)
                      v316 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v316 = v314;
                    if (v316)
                      v316 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v316);
                    else
                      v317 = 0;
                    v367 = (char *)(v316 + 16 * v313);
                    *(_QWORD *)v367 = v276;
                    *((_QWORD *)v367 + 1) = v275;
                    v368 = (char *)v622[0];
                    v369 = (char *)v621[1];
                    v370 = v367;
                    if (v622[0] != v621[1])
                    {
                      do
                      {
                        *((_OWORD *)v370 - 1) = *((_OWORD *)v368 - 1);
                        v370 -= 16;
                        v368 -= 16;
                      }
                      while (v368 != v369);
                      v368 = (char *)v621[1];
                    }
                    v292 = v367 + 16;
                    v621[1] = v370;
                    v622[0] = v367 + 16;
                    v622[1] = (void *)(v316 + 16 * v317);
                    if (v368)
                      operator delete(v368);
                  }
                  else
                  {
                    *(_QWORD *)v622[0] = v276;
                    v291[1] = v275;
                    v292 = v291 + 2;
                  }
                  v622[0] = v292;
                }
                else
                {
                  v277 = v616[0];
                  if (v616[0] >= v616[1])
                  {
                    v293 = ((uint64_t)v616[0] - __src[1].i64[1]) >> 4;
                    v294 = v293 + 1;
                    if ((unint64_t)(v293 + 1) >> 60)
                      goto LABEL_914;
                    v295 = (uint64_t)v616[1] - __src[1].i64[1];
                    if (((uint64_t)v616[1] - __src[1].i64[1]) >> 3 > v294)
                      v294 = v295 >> 3;
                    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF0)
                      v296 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v296 = v294;
                    if (v296)
                      v296 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v296);
                    else
                      v297 = 0;
                    v351 = (_QWORD *)(v296 + 16 * v293);
                    *v351 = v276;
                    v351[1] = v275;
                    v352 = (char *)v616[0];
                    v353 = __src[1].i64[1];
                    v354 = (uint64_t)v351;
                    if (v616[0] != (void *)__src[1].i64[1])
                    {
                      do
                      {
                        *(_OWORD *)(v354 - 16) = *((_OWORD *)v352 - 1);
                        v354 -= 16;
                        v352 -= 16;
                      }
                      while (v352 != (char *)v353);
                      v352 = (char *)__src[1].i64[1];
                    }
                    v278 = v351 + 2;
                    __src[1].i64[1] = v354;
                    v616[0] = v351 + 2;
                    v616[1] = (void *)(v296 + 16 * v297);
                    if (v352)
                      operator delete(v352);
                  }
                  else
                  {
                    *(_QWORD *)v616[0] = v276;
                    v277[1] = v275;
                    v278 = v277 + 2;
                  }
                  v616[0] = v278;
                }
                break;
              case 1:
                if (*(_DWORD *)(v578 + 48) == 32)
                {
                  v280 = *(void **)v274;
                  v279 = *(_QWORD *)(v274 + 8);
                  v281 = v617[1];
                  if (v617[1] >= v618[0])
                  {
                    v298 = ((char *)v617[1] - (char *)v617[0]) >> 4;
                    v299 = v298 + 1;
                    if ((unint64_t)(v298 + 1) >> 60)
                      goto LABEL_914;
                    v300 = (char *)v618[0] - (char *)v617[0];
                    if (((char *)v618[0] - (char *)v617[0]) >> 3 > v299)
                      v299 = v300 >> 3;
                    if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF0)
                      v301 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v301 = v299;
                    if (v301)
                      v301 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v301);
                    else
                      v302 = 0;
                    v355 = (char *)(v301 + 16 * v298);
                    *(_QWORD *)v355 = v280;
                    *((_QWORD *)v355 + 1) = v279;
                    v356 = (char *)v617[1];
                    v357 = (char *)v617[0];
                    v358 = v355;
                    if (v617[1] != v617[0])
                    {
                      do
                      {
                        *((_OWORD *)v358 - 1) = *((_OWORD *)v356 - 1);
                        v358 -= 16;
                        v356 -= 16;
                      }
                      while (v356 != v357);
                      v356 = (char *)v617[0];
                    }
                    v282 = v355 + 16;
                    v617[0] = v358;
                    v617[1] = v355 + 16;
                    v618[0] = (void *)(v301 + 16 * v302);
                    if (v356)
                      operator delete(v356);
                  }
                  else
                  {
                    *(_QWORD *)v617[1] = v280;
                    v281[1] = v279;
                    v282 = v281 + 2;
                  }
                  v617[1] = v282;
                  break;
                }
                if (*(_QWORD *)v274)
                  std::string::basic_string[abi:nn180100](v612, *(void **)v274, *(_QWORD *)(v274 + 8));
                else
                  memset(v612, 0, 24);
                v318 = std::string::insert((std::string *)v612, 0, "_");
                *(std::string *)v628 = *v318;
                v318->__r_.__value_.__l.__size_ = 0;
                v318->__r_.__value_.__r.__words[2] = 0;
                v318->__r_.__value_.__r.__words[0] = 0;
                if (v628[23] >= 0)
                  v319 = v628[23];
                else
                  v319 = *(_QWORD *)&v628[8];
                if (v319)
                {
                  if (v628[23] >= 0)
                    v320 = v628;
                  else
                    v320 = *(_BYTE **)v628;
                  v321 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v589, v319, 0);
                  memcpy(v321, v320, v319);
                }
                else
                {
                  v321 = 0;
                }
                v330 = v617[1];
                if (v617[1] >= v618[0])
                {
                  v332 = ((char *)v617[1] - (char *)v617[0]) >> 4;
                  v333 = v332 + 1;
                  if ((unint64_t)(v332 + 1) >> 60)
                    goto LABEL_914;
                  v334 = (char *)v618[0] - (char *)v617[0];
                  if (((char *)v618[0] - (char *)v617[0]) >> 3 > v333)
                    v333 = v334 >> 3;
                  if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF0)
                    v335 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v335 = v333;
                  if (v335)
                    v335 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v335);
                  else
                    v336 = 0;
                  v371 = (char *)(v335 + 16 * v332);
                  *(_QWORD *)v371 = v321;
                  *((_QWORD *)v371 + 1) = v319;
                  v372 = (char *)v617[1];
                  v373 = (char *)v617[0];
                  v374 = v371;
                  if (v617[1] != v617[0])
                  {
                    do
                    {
                      *((_OWORD *)v374 - 1) = *((_OWORD *)v372 - 1);
                      v374 -= 16;
                      v372 -= 16;
                    }
                    while (v372 != v373);
                    v372 = (char *)v617[0];
                  }
                  v331 = v371 + 16;
                  v617[0] = v374;
                  v617[1] = v371 + 16;
                  v618[0] = (void *)(v335 + 16 * v336);
                  if (v372)
                    operator delete(v372);
                }
                else
                {
                  *(_QWORD *)v617[1] = v321;
                  v330[1] = v319;
                  v331 = v330 + 2;
                }
                v617[1] = v331;
                goto LABEL_615;
              case 2:
                if (*(_DWORD *)(v578 + 48) == 32)
                {
                  v284 = *(void **)v274;
                  v283 = *(_QWORD *)(v274 + 8);
                  v285 = v619[0];
                  if (v619[0] >= v619[1])
                  {
                    v303 = ((char *)v619[0] - (char *)v618[1]) >> 4;
                    v304 = v303 + 1;
                    if ((unint64_t)(v303 + 1) >> 60)
                      goto LABEL_914;
                    v305 = (char *)v619[1] - (char *)v618[1];
                    if (((char *)v619[1] - (char *)v618[1]) >> 3 > v304)
                      v304 = v305 >> 3;
                    if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF0)
                      v306 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v306 = v304;
                    if (v306)
                      v306 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v306);
                    else
                      v307 = 0;
                    v359 = (char *)(v306 + 16 * v303);
                    *(_QWORD *)v359 = v284;
                    *((_QWORD *)v359 + 1) = v283;
                    v360 = (char *)v619[0];
                    v361 = (char *)v618[1];
                    v362 = v359;
                    if (v619[0] != v618[1])
                    {
                      do
                      {
                        *((_OWORD *)v362 - 1) = *((_OWORD *)v360 - 1);
                        v362 -= 16;
                        v360 -= 16;
                      }
                      while (v360 != v361);
                      v360 = (char *)v618[1];
                    }
                    v286 = v359 + 16;
                    v618[1] = v362;
                    v619[0] = v359 + 16;
                    v619[1] = (void *)(v306 + 16 * v307);
                    if (v360)
                      operator delete(v360);
                  }
                  else
                  {
                    *(_QWORD *)v619[0] = v284;
                    v285[1] = v283;
                    v286 = v285 + 2;
                  }
                  v619[0] = v286;
                  break;
                }
                if (*(_QWORD *)v274)
                  std::string::basic_string[abi:nn180100](v612, *(void **)v274, *(_QWORD *)(v274 + 8));
                else
                  memset(v612, 0, 24);
                v322 = std::string::insert((std::string *)v612, 0, "_OBJC_EHTYPE_$_");
                *(std::string *)v628 = *v322;
                v322->__r_.__value_.__l.__size_ = 0;
                v322->__r_.__value_.__r.__words[2] = 0;
                v322->__r_.__value_.__r.__words[0] = 0;
                if (v628[23] >= 0)
                  v323 = v628[23];
                else
                  v323 = *(_QWORD *)&v628[8];
                if (v323)
                {
                  if (v628[23] >= 0)
                    v324 = v628;
                  else
                    v324 = *(_BYTE **)v628;
                  v325 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v589, v323, 0);
                  memcpy(v325, v324, v323);
                }
                else
                {
                  v325 = 0;
                }
                v337 = v616[0];
                if (v616[0] >= v616[1])
                {
                  v339 = ((uint64_t)v616[0] - __src[1].i64[1]) >> 4;
                  v340 = v339 + 1;
                  if ((unint64_t)(v339 + 1) >> 60)
                    goto LABEL_914;
                  v341 = (uint64_t)v616[1] - __src[1].i64[1];
                  if (((uint64_t)v616[1] - __src[1].i64[1]) >> 3 > v340)
                    v340 = v341 >> 3;
                  if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF0)
                    v342 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v342 = v340;
                  if (v342)
                    v342 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v342);
                  else
                    v343 = 0;
                  v375 = (_QWORD *)(v342 + 16 * v339);
                  *v375 = v325;
                  v375[1] = v323;
                  v376 = (char *)v616[0];
                  v377 = __src[1].i64[1];
                  v378 = (uint64_t)v375;
                  if (v616[0] != (void *)__src[1].i64[1])
                  {
                    do
                    {
                      *(_OWORD *)(v378 - 16) = *((_OWORD *)v376 - 1);
                      v378 -= 16;
                      v376 -= 16;
                    }
                    while (v376 != (char *)v377);
                    v376 = (char *)__src[1].i64[1];
                  }
                  v338 = v375 + 2;
                  __src[1].i64[1] = v378;
                  v616[0] = v375 + 2;
                  v616[1] = (void *)(v342 + 16 * v343);
                  if (v376)
                    operator delete(v376);
                }
                else
                {
                  *(_QWORD *)v616[0] = v325;
                  v337[1] = v323;
                  v338 = v337 + 2;
                }
                v616[0] = v338;
                goto LABEL_615;
              case 3:
                if (*(_DWORD *)(v578 + 48) == 32)
                {
                  v288 = *(void **)v274;
                  v287 = *(_QWORD *)(v274 + 8);
                  v289 = v620[1];
                  if (v620[1] >= v621[0])
                  {
                    v308 = ((char *)v620[1] - (char *)v620[0]) >> 4;
                    v309 = v308 + 1;
                    if ((unint64_t)(v308 + 1) >> 60)
                      goto LABEL_914;
                    v310 = (char *)v621[0] - (char *)v620[0];
                    if (((char *)v621[0] - (char *)v620[0]) >> 3 > v309)
                      v309 = v310 >> 3;
                    if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF0)
                      v311 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v311 = v309;
                    if (v311)
                      v311 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v311);
                    else
                      v312 = 0;
                    v363 = (char *)(v311 + 16 * v308);
                    *(_QWORD *)v363 = v288;
                    *((_QWORD *)v363 + 1) = v287;
                    v364 = (char *)v620[1];
                    v365 = (char *)v620[0];
                    v366 = v363;
                    if (v620[1] != v620[0])
                    {
                      do
                      {
                        *((_OWORD *)v366 - 1) = *((_OWORD *)v364 - 1);
                        v366 -= 16;
                        v364 -= 16;
                      }
                      while (v364 != v365);
                      v364 = (char *)v620[0];
                    }
                    v290 = v363 + 16;
                    v620[0] = v366;
                    v620[1] = v363 + 16;
                    v621[0] = (void *)(v311 + 16 * v312);
                    if (v364)
                      operator delete(v364);
                  }
                  else
                  {
                    *(_QWORD *)v620[1] = v288;
                    v289[1] = v287;
                    v290 = v289 + 2;
                  }
                  v620[1] = v290;
                }
                else
                {
                  if (*(_QWORD *)v274)
                    std::string::basic_string[abi:nn180100](v612, *(void **)v274, *(_QWORD *)(v274 + 8));
                  else
                    memset(v612, 0, 24);
                  v326 = std::string::insert((std::string *)v612, 0, "_");
                  *(std::string *)v628 = *v326;
                  v326->__r_.__value_.__l.__size_ = 0;
                  v326->__r_.__value_.__r.__words[2] = 0;
                  v326->__r_.__value_.__r.__words[0] = 0;
                  if (v628[23] >= 0)
                    v327 = v628[23];
                  else
                    v327 = *(_QWORD *)&v628[8];
                  if (v327)
                  {
                    if (v628[23] >= 0)
                      v328 = v628;
                    else
                      v328 = *(_BYTE **)v628;
                    v329 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v589, v327, 0);
                    memcpy(v329, v328, v327);
                  }
                  else
                  {
                    v329 = 0;
                  }
                  v344 = v620[1];
                  if (v620[1] >= v621[0])
                  {
                    v346 = ((char *)v620[1] - (char *)v620[0]) >> 4;
                    v347 = v346 + 1;
                    if ((unint64_t)(v346 + 1) >> 60)
                      goto LABEL_914;
                    v348 = (char *)v621[0] - (char *)v620[0];
                    if (((char *)v621[0] - (char *)v620[0]) >> 3 > v347)
                      v347 = v348 >> 3;
                    if ((unint64_t)v348 >= 0x7FFFFFFFFFFFFFF0)
                      v349 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v349 = v347;
                    if (v349)
                      v349 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v349);
                    else
                      v350 = 0;
                    v379 = (char *)(v349 + 16 * v346);
                    *(_QWORD *)v379 = v329;
                    *((_QWORD *)v379 + 1) = v327;
                    v380 = (char *)v620[1];
                    v381 = (char *)v620[0];
                    v382 = v379;
                    if (v620[1] != v620[0])
                    {
                      do
                      {
                        *((_OWORD *)v382 - 1) = *((_OWORD *)v380 - 1);
                        v382 -= 16;
                        v380 -= 16;
                      }
                      while (v380 != v381);
                      v380 = (char *)v620[0];
                    }
                    v345 = v379 + 16;
                    v620[0] = v382;
                    v620[1] = v379 + 16;
                    v621[0] = (void *)(v349 + 16 * v350);
                    if (v380)
                      operator delete(v380);
                  }
                  else
                  {
                    *(_QWORD *)v620[1] = v329;
                    v344[1] = v327;
                    v345 = v344 + 2;
                  }
                  v620[1] = v345;
LABEL_615:
                  if ((v628[23] & 0x80000000) != 0)
                    operator delete(*(void **)v628);
                  if ((v612[23] & 0x80000000) != 0)
                    operator delete(*(void **)v612);
                }
                break;
              default:
                break;
            }
          }
          v383 = (uint64_t *)v273[1];
          if (v383)
          {
            do
            {
              v384 = v383;
              v383 = (uint64_t *)*v383;
            }
            while (v383);
          }
          else
          {
            do
            {
              v384 = (uint64_t *)v273[2];
              v497 = *v384 == (_QWORD)v273;
              v273 = v384;
            }
            while (!v497);
          }
          v273 = v384;
        }
        while (v384 != (uint64_t *)&v582);
      }
      v385 = 126 - 2 * __clz(((uint64_t)v616[0] - __src[1].i64[1]) >> 4);
      if (v616[0] == (void *)__src[1].i64[1])
        v386 = 0;
      else
        v386 = v385;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(__src[1].i64[1], (_OWORD *)v616[0], v386, 1);
      v387 = 126 - 2 * __clz(((char *)v617[1] - (char *)v617[0]) >> 4);
      if (v617[1] == v617[0])
        v388 = 0;
      else
        v388 = v387;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v617[0], (_OWORD *)v617[1], v388, 1);
      v389 = 126 - 2 * __clz(((char *)v619[0] - (char *)v618[1]) >> 4);
      if (v619[0] == v618[1])
        v390 = 0;
      else
        v390 = v389;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v618[1], (_OWORD *)v619[0], v390, 1);
      v391 = 126 - 2 * __clz(((char *)v620[1] - (char *)v620[0]) >> 4);
      if (v620[1] == v620[0])
        v392 = 0;
      else
        v392 = v391;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v620[0], (_OWORD *)v620[1], v392, 1);
      v393 = 126 - 2 * __clz(((char *)v622[0] - (char *)v621[1]) >> 4);
      if (v622[0] == v621[1])
        v394 = 0;
      else
        v394 = v393;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((uint64_t)v621[1], (_OWORD *)v622[0], v394, 1);
      v395 = v608[2];
      if (v608[2] >= v608[3])
      {
        v397 = 0x8E38E38E38E38E39 * ((uint64_t)(v608[2] - v608[1]) >> 4);
        v398 = v397 + 1;
        if ((unint64_t)(v397 + 1) > 0x1C71C71C71C71C7)
          goto LABEL_914;
        if (0x1C71C71C71C71C72 * ((uint64_t)(v608[3] - v608[1]) >> 4) > v398)
          v398 = 0x1C71C71C71C71C72 * ((uint64_t)(v608[3] - v608[1]) >> 4);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v608[3] - v608[1]) >> 4) >= 0xE38E38E38E38E3)
          v399 = 0x1C71C71C71C71C7;
        else
          v399 = v398;
        v400 = *(_QWORD **)&v628[8];
        v396 = *(_QWORD *)&v628[16] + 144;
        *(_QWORD *)&v628[16] += 144;
        v401 = v608[2];
        v402 = v608[1];
        if (v608[2] == v608[1])
        {
          v403 = vdupq_n_s64(v608[2]);
        }
        else
        {
          do
          {
            v400 -= 18;
            v401 -= 144;
          }
          while (v401 != v402);
          v403 = *(int64x2_t *)&v608[1];
          v396 = *(_QWORD *)&v628[16];
        }
        v608[1] = v400;
        v608[2] = v396;
        *(int64x2_t *)&v628[8] = v403;
        v404 = v608[3];
        v608[3] = *(_QWORD *)&v628[24];
        *(_QWORD *)&v628[24] = v404;
        *(_QWORD *)v628 = v403.i64[0];
      }
      else
      {
        v396 = v395 + 144;
      }
      v608[2] = v396;
      if (v621[1])
      {
        v622[0] = v621[1];
        operator delete(v621[1]);
      }
      if (v620[0])
      {
        v620[1] = v620[0];
        operator delete(v620[0]);
      }
      if (v618[1])
      {
        v619[0] = v618[1];
        operator delete(v618[1]);
      }
      if (v617[0])
      {
        v617[1] = v617[0];
        operator delete(v617[0]);
      }
      if (__src[1].i64[1])
      {
        v616[0] = (void *)__src[1].i64[1];
        operator delete((void *)__src[1].i64[1]);
      }
      if (__src[0].i64[0])
      {
        __src[0].i64[1] = __src[0].i64[0];
        operator delete((void *)__src[0].i64[0]);
      }
      v405 = *(_QWORD **)(v272 + 8);
      if (v405)
      {
        do
        {
          v406 = (_QWORD **)v405;
          v405 = (_QWORD *)*v405;
        }
        while (v405);
      }
      else
      {
        do
        {
          v406 = *(_QWORD ***)(v272 + 16);
          v497 = *v406 == (_QWORD *)v272;
          v272 = (uint64_t)v406;
        }
        while (!v497);
      }
      v272 = (uint64_t)v406;
    }
    while (v406 != &v585);
  }
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v582);
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v585);
  a1 = v572;
LABEL_672:
  v610 = v589;
  v407 = v574;
  llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>((uint64_t)v574, (char **)__p);
  memset(v612, 0, 24);
  if (a1 == 8)
  {
    llvm::yaml::IO::processKey<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,llvm::yaml::EmptyContext>(v574, v610 + 15);
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t *))(*v574 + 56))(v574) || *(_QWORD *)v612 != *(_QWORD *)&v612[8])
    {
      v588 = 0;
      v587 = 0;
      if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t **))(*v574 + 120))(v574, "uuids", 0, 0, &v587, &v588))
      {
        v573 = a1;
        v408 = (*(uint64_t (**)(uint64_t *))(*v574 + 64))(v574);
        if ((*(unsigned int (**)(uint64_t *))(*v574 + 16))(v574))
          v408 = -1431655765 * ((*(_QWORD *)&v612[8] - *(_QWORD *)v612) >> 4);
        if (v408)
        {
          for (j = 0; j != v408; ++j)
          {
            v581 = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t **))(*v407 + 72))(v407, j, &v581))
            {
              v410 = *(_QWORD *)&v612[8];
              v411 = *(_QWORD *)v612;
              v412 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v612[8] - *(_QWORD *)v612) >> 4);
              if (v412 <= j)
              {
                v413 = j + 1;
                v414 = j + 1 - v412;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v612[16] - *(_QWORD *)&v612[8]) >> 4) >= v414)
                {
                  bzero(*(void **)&v612[8], 48 * ((48 * v414 - 48) / 0x30) + 48);
                  *(_QWORD *)&v612[8] = v410 + 48 * ((48 * v414 - 48) / 0x30) + 48;
                }
                else
                {
                  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v612[16] - *(_QWORD *)v612) >> 4) > v413)
                    v413 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v612[16] - *(_QWORD *)v612) >> 4);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v612[16] - *(_QWORD *)v612) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                    v415 = 0x555555555555555;
                  else
                    v415 = v413;
                  v616[0] = &v612[16];
                  v416 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>((uint64_t)&v612[16], v415);
                  v418 = v417;
                  v419 = &v416[48 * v412];
                  v420 = 48 * ((48 * v414 - 48) / 0x30) + 48;
                  bzero(v419, v420);
                  v421 = *(_QWORD *)&v612[8];
                  v422 = *(_QWORD *)v612;
                  if (*(_QWORD *)&v612[8] == *(_QWORD *)v612)
                  {
                    v426 = vdupq_n_s64(*(unint64_t *)&v612[8]);
                    v423 = v419;
                  }
                  else
                  {
                    v423 = v419;
                    do
                    {
                      v424 = *(_OWORD *)(v421 - 48);
                      *((_QWORD *)v423 - 4) = *(_QWORD *)(v421 - 32);
                      *((_OWORD *)v423 - 3) = v424;
                      v425 = *(_OWORD *)(v421 - 24);
                      *((_QWORD *)v423 - 1) = *(_QWORD *)(v421 - 8);
                      *(_OWORD *)(v423 - 24) = v425;
                      v423 -= 48;
                      *(_QWORD *)(v421 - 16) = 0;
                      *(_QWORD *)(v421 - 8) = 0;
                      *(_QWORD *)(v421 - 24) = 0;
                      v421 -= 48;
                    }
                    while (v421 != v422);
                    v426 = *(int64x2_t *)v612;
                  }
                  *(_QWORD *)v612 = v423;
                  *(_QWORD *)&v612[8] = &v419[v420];
                  *(int64x2_t *)((char *)__src + 8) = v426;
                  v427 = *(_QWORD *)&v612[16];
                  *(_QWORD *)&v612[16] = &v416[48 * v418];
                  __src[1].i64[1] = v427;
                  __src[0].i64[0] = v426.i64[0];
                  std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer((uint64_t)__src);
                }
                v411 = *(_QWORD *)v612;
              }
              v407 = v574;
              if ((*(unsigned int (**)(uint64_t *))(*v574 + 16))(v574))
              {
                __src[0].i64[0] = (uint64_t)&__src[1].i64[1];
                *(int64x2_t *)((char *)__src + 8) = (int64x2_t)xmmword_24AA2AC90;
                *(_DWORD *)&v628[8] = 0;
                v630 = 0;
                v631 = 0;
                LODWORD(v632) = 1;
                v629 = 0;
                *(_OWORD *)&v628[16] = 0uLL;
                *(_QWORD *)v628 = &off_251C13B38;
                v633 = __src;
                llvm::raw_ostream::SetUnbuffered(v628);
                v428 = (_QWORD *)v633->i64[1];
                v584 = (_QWORD **)v633->i64[0];
                v585 = v428;
                (*(void (**)(uint64_t *, _QWORD ***, uint64_t))(*v574 + 216))(v574, &v584, 1);
                *(_QWORD *)v628 = off_251C13948;
                if ((_DWORD)v632 == 1 && *(_QWORD *)&v628[16])
                  MEMORY[0x24BD1B380](*(_QWORD *)&v628[16], 0x1000C8077774924);
                if ((unint64_t *)__src[0].i64[0] != &__src[1].u64[1])
                  free((void *)__src[0].i64[0]);
              }
              else
              {
                v429 = v411 + 48 * j;
                __src[0] = 0uLL;
                (*(void (**)(uint64_t *, int64x2_t *, uint64_t))(*v574 + 216))(v574, __src, 1);
                *(_QWORD *)v429 = 0;
                *(_QWORD *)(v429 + 8) = 0;
                *(_QWORD *)(v429 + 16) = 0;
                v430 = (void **)(v429 + 24);
                if (*(char *)(v429 + 47) < 0)
                  operator delete(*v430);
                *v430 = 0;
                *(_QWORD *)(v429 + 32) = 0;
                *(_QWORD *)(v429 + 40) = 0;
                v407 = v574;
              }
              (*(void (**)(uint64_t *, uint64_t *))(*v407 + 80))(v407, v581);
            }
          }
        }
        (*(void (**)(uint64_t *))(*v407 + 88))(v407);
        (*(void (**)(uint64_t *, uint64_t *))(*v407 + 128))(v407, v588);
        a1 = v573;
      }
    }
    llvm::yaml::IO::processKey<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,llvm::yaml::EmptyContext>(v407, v610 + 15);
    __src[0].i32[0] = 0;
    llvm::yaml::IO::processKeyWithDefault<TBDFlags,llvm::yaml::EmptyContext>((uint64_t)v407, (_DWORD *)v610 + 52, __src);
  }
  llvm::yaml::IO::processKey<llvm::StringRef,llvm::yaml::EmptyContext>((uint64_t)v407, (uint64_t)"install-name", (uint64_t)(v610 + 22), 1);
  __src[0].i32[0] = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)v407, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v610 + 24), __src);
  __src[0].i32[0] = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)v407, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)((char *)v610 + 196), __src);
  __src[0].i8[0] = 0;
  if (a1 == 32)
    v431 = "swift-abi-version";
  else
    v431 = "swift-version";
  llvm::yaml::IO::processKeyWithDefault<SwiftVersion,llvm::yaml::EmptyContext>(v407, (uint64_t)v431, (llvm::raw_ostream *)(v610 + 25), __src);
  v432 = v610;
  __src[0].i64[0] = 0;
  v628[0] = 0;
  v433 = (*(uint64_t (**)(uint64_t *))(*v407 + 16))(v407);
  v435 = *((_DWORD *)v432 + 51);
  v434 = (_DWORD *)v432 + 51;
  v436 = a1 != 8;
  if (v435 == v436)
    v437 = v433;
  else
    v437 = 0;
  if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, uint64_t, _BYTE *, int64x2_t *))(*v407 + 120))(v407, "objc-constraint", 0, v437, v628, __src))
  {
    (*(void (**)(uint64_t *))(*v407 + 160))(v407);
    llvm::yaml::ScalarEnumerationTraits<llvm::MachO::ObjCConstraintType,void>::enumeration((uint64_t)v407, v434);
    (*(void (**)(uint64_t *))(*v407 + 184))(v407);
    (*(void (**)(uint64_t *, uint64_t))(*v407 + 128))(v407, __src[0].i64[0]);
  }
  else if (v628[0])
  {
    *v434 = v436;
  }
  v438 = v610;
  if (a1 == 8)
  {
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *))(*v407 + 16))(v407))
      v439 = v438[28] == 0;
    else
      v439 = 0;
    __src[0].i64[0] = 0;
    v628[0] = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _BOOL8, _BYTE *, int64x2_t *))(*v407 + 120))(v407, "parent-umbrella", 0, v439, v628, __src))
    {
      v440 = llvm::yaml::yamlize<llvm::StringRef>((uint64_t)v407, (uint64_t)(v438 + 27));
      (*(void (**)(uint64_t *, uint64_t, double))(*v407 + 128))(v407, __src[0].i64[0], v440);
    }
    else if (v628[0])
    {
      v438[27] = 0;
      v438[28] = 0;
    }
    v441 = v610;
    if (!(*(unsigned int (**)(uint64_t *))(*v407 + 56))(v407) || v441[32] != v441[33])
    {
      v584 = 0;
      LOBYTE(v581) = 0;
      if ((*(unsigned int (**)(uint64_t *, const char *, _QWORD, _QWORD, uint64_t **, _QWORD ***))(*v407 + 120))(v407, "undefineds", 0, 0, &v581, &v584))
      {
        v442 = (*(uint64_t (**)(uint64_t *))(*v407 + 24))(v407);
        if ((*(unsigned int (**)(uint64_t *))(*v407 + 16))(v407))
          v442 = 954437177 * ((v441[33] - v441[32]) >> 4);
        if (v442)
        {
          v443 = 0;
          v579 = v441 + 34;
          v444 = 144 * v442;
          v445 = 1;
          do
          {
            *(_QWORD *)v628 = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, _BYTE *))(*v574 + 32))(v574, v445 - 1, v628))
            {
              v446 = v441[32];
              v447 = v441[33];
              v448 = v447 - v446;
              v449 = 0x8E38E38E38E38E39 * ((v447 - v446) >> 4);
              if (v449 <= v445 - 1)
              {
                if (0x8E38E38E38E38E39 * ((*v579 - v447) >> 4) >= v445 - v449)
                {
                  bzero((void *)v441[33], 144 * ((v443 - v448) / 0x90uLL) + 144);
                  v441[33] = v447 + 144 * ((v443 - v448) / 0x90uLL) + 144;
                }
                else
                {
                  v450 = 0x8E38E38E38E38E39 * ((*v579 - v446) >> 4);
                  v451 = 2 * v450;
                  if (2 * v450 <= v445)
                    v451 = v445;
                  if (v450 >= 0xE38E38E38E38E3)
                    v452 = 0x1C71C71C71C71C7;
                  else
                    v452 = v451;
                  v453 = __src[1].i64[0];
                  bzero((void *)__src[1].i64[0], 144 * ((v443 - v448) / 0x90uLL) + 144);
                  __src[1].i64[0] = v453 + 144 * ((v443 - v448) / 0x90uLL) + 144;
                }
              }
              v454 = (char **)(v441[32] + v443);
              (*(void (**)(uint64_t *))(*v574 + 104))(v574);
              v455 = v574[1];
              llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>((uint64_t)v574, v454);
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v574, (uint64_t)"symbols", (uint64_t)(v454 + 3));
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v574, (uint64_t)"objc-classes", (uint64_t)(v454 + 6));
              if (*(_DWORD *)(v455 + 48) == 32)
                llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v574, (uint64_t)"objc-eh-types", (uint64_t)(v454 + 9));
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v574, (uint64_t)"objc-ivars", (uint64_t)(v454 + 12));
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v574, (uint64_t)"weak-ref-symbols", (uint64_t)(v454 + 15));
              (*(void (**)(uint64_t *))(*v574 + 112))(v574);
              (*(void (**)(uint64_t *, _QWORD))(*v574 + 40))(v574, *(_QWORD *)v628);
            }
            ++v445;
            v443 += 144;
          }
          while (v444 != v443);
        }
        (*(void (**)(uint64_t *))(*v574 + 48))(v574);
        (*(void (**)(uint64_t *, _QWORD **))(*v574 + 128))(v574, v584);
      }
    }
  }
  __src[0].i64[0] = (uint64_t)v612;
  std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100]((void ***)__src);
  if (((*(uint64_t (**)(_QWORD *))(*v609 + 16))(v609) & 1) == 0)
  {
    v456 = v610;
    v457 = v609[1];
    v458 = operator new();
    v459 = llvm::MachO::InterfaceFile::InterfaceFile((llvm::MachO::InterfaceFile *)v458);
    v460 = *(char *)(v457 + 47);
    if (v460 >= 0)
      v461 = (void *)(v457 + 24);
    else
      v461 = *(void **)(v457 + 24);
    if (v460 >= 0)
      v462 = *(unsigned __int8 *)(v457 + 47);
    else
      v462 = *(_QWORD *)(v457 + 32);
    llvm::MachO::InterfaceFile::setPath((uint64_t)v459, v461, v462);
    *(_DWORD *)(v458 + 256) = *(_DWORD *)(v457 + 48);
    v463 = (unsigned __int8 *)v456[12];
    v464 = (unsigned __int8 *)v456[13];
    if (v463 == v464)
    {
      v465 = 0;
    }
    else
    {
      v465 = 0;
      v466 = 0;
      do
      {
        v467 = *v463++;
        v468 = (1 << v467) | v466;
        if (v467 != 16)
        {
          v465 = v468;
          v466 = v468;
        }
      }
      while (v463 != v464);
    }
    v580 = (uint64_t)(v456 + 15);
    llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD::synthesizeTargets(__src, v465, (uint64_t)(v456 + 15));
    v469 = (int64x2_t *)__src[0].i64[0];
    if (__src[0].i32[2])
    {
      v470 = 24 * __src[0].u32[2];
      do
      {
        v471 = *v469;
        *(_QWORD *)&v628[16] = v469[1].i64[0];
        *(int64x2_t *)v628 = v471;
        llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v458 + 96, v628);
        v469 = (int64x2_t *)((char *)v469 + 24);
        v470 -= 24;
      }
      while (v470);
      v469 = (int64x2_t *)__src[0].i64[0];
    }
    if (v469 != &__src[1])
      free(v469);
    llvm::MachO::InterfaceFile::setInstallName(v458, (void *)v456[22], v456[23]);
    *(_DWORD *)(v458 + 288) = *((_DWORD *)v456 + 48);
    *(_DWORD *)(v458 + 292) = *((_DWORD *)v456 + 49);
    *(_BYTE *)(v458 + 296) = *((_BYTE *)v456 + 200);
    *(_DWORD *)(v458 + 300) = *((_DWORD *)v456 + 51);
    v472 = *(unsigned int *)(v458 + 104);
    if ((_DWORD)v472)
    {
      v473 = *(unsigned __int8 **)(v458 + 96);
      v474 = 24 * v472;
      do
      {
        llvm::MachO::InterfaceFile::addParentUmbrella(v458, v473, (void *)v456[27], v456[28]);
        v473 += 24;
        v474 -= 24;
      }
      while (v474);
    }
    if (*(_DWORD *)(v457 + 48) == 8)
    {
      v475 = 1;
      v476 = 1;
    }
    else
    {
      v475 = (v456[26] & 1) == 0;
      v476 = (v456[26] & 2) == 0;
    }
    *(_BYTE *)(v458 + 297) = v475;
    *(_BYTE *)(v458 + 298) = v476;
    v477 = (unsigned __int8 **)v456[29];
    v575 = v456;
    v577 = (unsigned __int8 **)v456[30];
    if (v477 != v577)
    {
      while (1)
      {
        v478 = *v477;
        v479 = v477[1];
        if (*v477 == v479)
        {
          v480 = 0;
        }
        else
        {
          v480 = 0;
          v481 = 0;
          do
          {
            v482 = *v478++;
            v483 = (1 << v482) | v481;
            if (v482 != 16)
            {
              v480 = v483;
              v481 = v483;
            }
          }
          while (v478 != v479);
        }
        llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD::synthesizeTargets(__src, v480, v580);
        v485 = v477[3];
        v484 = v477[4];
        while (v485 != v484)
        {
          if (__src[0].i32[2])
          {
            v486 = (unsigned __int8 *)__src[0].i64[0];
            v487 = 24 * __src[0].u32[2];
            do
            {
              v488 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v458 + 328), *(const void **)v485, *((_QWORD *)v485 + 1));
              llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v488 + 24, v486);
              v486 += 24;
              v487 -= 24;
            }
            while (v487);
          }
          v485 += 16;
        }
        v490 = v477[6];
        v489 = v477[7];
        while (v490 != v489)
        {
          if (__src[0].i32[2])
          {
            v491 = (unsigned __int8 *)__src[0].i64[0];
            v492 = 24 * __src[0].u32[2];
            do
            {
              v493 = llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>((uint64_t **)(v458 + 352), *(const void **)v490, *((_QWORD *)v490 + 1));
              llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v493 + 24, v491);
              v491 += 24;
              v492 -= 24;
            }
            while (v492);
          }
          v490 += 16;
        }
        v494 = v477[9];
        v495 = v477[10];
        if (v494 != v495)
          break;
LABEL_809:
        v500 = v477[12];
        v501 = v477[13];
        while (v500 != v501)
        {
          v502 = *(_QWORD *)v500;
          v503 = *((_QWORD *)v500 + 1);
          v500 += 16;
          v504 = *(_DWORD *)(v457 + 48) == 32 || v503 == 0;
          v505 = !v504;
          if (v504)
            v506 = (const void *)v502;
          else
            v506 = (const void *)(v502 + 1);
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 1, v506, v503 - v505, 32, __src[0].i64);
        }
        v507 = v477[15];
        v508 = v477[16];
        while (v507 != v508)
        {
          v509 = *(const void **)v507;
          v510 = *((_QWORD *)v507 + 1);
          v507 += 16;
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 2, v509, v510, 32, __src[0].i64);
        }
        v511 = v477[18];
        v512 = v477[19];
        while (v511 != v512)
        {
          v513 = *(_QWORD *)v511;
          v514 = *((_QWORD *)v511 + 1);
          v511 += 16;
          v515 = *(_DWORD *)(v457 + 48) == 32 || v514 == 0;
          v516 = !v515;
          if (v515)
            v517 = (const void *)v513;
          else
            v517 = (const void *)(v513 + 1);
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 3, v517, v514 - v516, 32, __src[0].i64);
        }
        v518 = v477[21];
        v519 = v477[22];
        while (v518 != v519)
        {
          v520 = *(const void **)v518;
          v521 = *((_QWORD *)v518 + 1);
          v518 += 16;
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 0, v520, v521, 34, __src[0].i64);
        }
        v522 = v477[24];
        v523 = v477[25];
        while (v522 != v523)
        {
          v524 = *(const void **)v522;
          v525 = *((_QWORD *)v522 + 1);
          v522 += 16;
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 0, v524, v525, 33, __src[0].i64);
        }
        if ((int64x2_t *)__src[0].i64[0] != &__src[1])
          free((void *)__src[0].i64[0]);
        v477 += 27;
        if (v477 == v577)
          goto LABEL_845;
      }
      while (1)
      {
        if (*(_DWORD *)(v457 + 48) == 32)
        {
          v496 = *((_QWORD *)v494 + 1);
        }
        else
        {
          v496 = *((_QWORD *)v494 + 1);
          if (v496 >= 0xF)
          {
            v497 = **(_QWORD **)v494 == 0x48455F434A424F5FLL
                && *(_QWORD *)(*(_QWORD *)v494 + 7) == 0x5F245F4550595448;
            if (v497)
            {
              v499 = (const void *)(*(_QWORD *)v494 + 15);
              v498 = 2;
              v496 -= 15;
              goto LABEL_806;
            }
          }
        }
        v498 = 0;
        v499 = *(const void **)v494;
LABEL_806:
        llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), v498, v499, v496, 32, __src[0].i64);
        v494 += 16;
        if (v494 == v495)
          goto LABEL_809;
      }
    }
LABEL_845:
    v526 = (unsigned __int8 **)v575[32];
    v527 = (unsigned __int8 **)v575[33];
    if (v526 == v527)
      goto LABEL_898;
LABEL_846:
    v528 = *v526;
    v529 = v526[1];
    if (*v526 == v529)
    {
      v530 = 0;
    }
    else
    {
      v530 = 0;
      v531 = 0;
      do
      {
        v532 = *v528++;
        v533 = (1 << v532) | v531;
        if (v532 != 16)
        {
          v530 = v533;
          v531 = v533;
        }
      }
      while (v528 != v529);
    }
    llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD::synthesizeTargets(__src, v530, v580);
    v534 = v526[3];
    v535 = v526[4];
    while (1)
    {
      if (v534 == v535)
      {
        v540 = v526[6];
        v541 = v526[7];
        while (v540 != v541)
        {
          v542 = *(_QWORD *)v540;
          v543 = *((_QWORD *)v540 + 1);
          v540 += 16;
          v544 = *(_DWORD *)(v457 + 48) == 32 || v543 == 0;
          v545 = !v544;
          if (v544)
            v546 = (const void *)v542;
          else
            v546 = (const void *)(v542 + 1);
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 1, v546, v543 - v545, 40, __src[0].i64);
        }
        v547 = v526[9];
        v548 = v526[10];
        while (v547 != v548)
        {
          v549 = *(const void **)v547;
          v550 = *((_QWORD *)v547 + 1);
          v547 += 16;
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 2, v549, v550, 40, __src[0].i64);
        }
        v551 = v526[12];
        v552 = v526[13];
        while (v551 != v552)
        {
          v553 = *(_QWORD *)v551;
          v554 = *((_QWORD *)v551 + 1);
          v551 += 16;
          v555 = *(_DWORD *)(v457 + 48) == 32 || v554 == 0;
          v556 = !v555;
          if (v555)
            v557 = (const void *)v553;
          else
            v557 = (const void *)(v553 + 1);
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 3, v557, v554 - v556, 40, __src[0].i64);
        }
        v558 = v526[15];
        v559 = v526[16];
        while (v558 != v559)
        {
          v560 = *(const void **)v558;
          v561 = *((_QWORD *)v558 + 1);
          v558 += 16;
          llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), 0, v560, v561, 44, __src[0].i64);
        }
        if ((int64x2_t *)__src[0].i64[0] != &__src[1])
          free((void *)__src[0].i64[0]);
        v526 += 18;
        if (v526 == v527)
        {
LABEL_898:
          *v611 = v458;
          goto LABEL_899;
        }
        goto LABEL_846;
      }
      if (*(_DWORD *)(v457 + 48) == 32)
        break;
      v536 = *((_QWORD *)v534 + 1);
      if (v536 < 0xF)
        goto LABEL_862;
      if (**(_QWORD **)v534 != 0x48455F434A424F5FLL || *(_QWORD *)(*(_QWORD *)v534 + 7) != 0x5F245F4550595448)
        goto LABEL_862;
      v539 = (const void *)(*(_QWORD *)v534 + 15);
      v538 = 2;
      v536 -= 15;
LABEL_863:
      llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(v458 + 448), v538, v539, v536, 40, __src[0].i64);
      v534 += 16;
    }
    v536 = *((_QWORD *)v534 + 1);
LABEL_862:
    v538 = 0;
    v539 = *(const void **)v534;
    goto LABEL_863;
  }
LABEL_899:
  v562 = (uint64_t)v610;
  v563 = v610[32];
  if (v563)
  {
    v564 = v610[33];
    v565 = (void *)v610[32];
    if (v564 != v563)
    {
      do
      {
        v564 -= 144;
      }
      while (v564 != v563);
      v565 = *(void **)(v562 + 256);
    }
    *(_QWORD *)(v562 + 264) = v563;
    operator delete(v565);
  }
  v566 = *(_QWORD *)(v562 + 232);
  if (v566)
  {
    v567 = *(_QWORD *)(v562 + 240);
    v568 = *(void **)(v562 + 232);
    if (v567 != v566)
    {
      do
      while (v567 != v566);
      v568 = *(void **)(v562 + 232);
    }
    *(_QWORD *)(v562 + 240) = v566;
    operator delete(v568);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(v562 + 152, *(_QWORD **)(v562 + 160));
  v569 = *(void **)(v562 + 120);
  if (v569 != (void *)(v562 + 136))
    free(v569);
  v570 = *(void **)(v562 + 96);
  if (v570)
  {
    *(_QWORD *)(v562 + 104) = v570;
    operator delete(v570);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v562);
}

uint64_t llvm::yaml::IO::mapOptionalWithContext<std::vector<`anonymous namespace'::MetadataSection>,`anonymous namespace'::MetadataSection::Option>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  char **v21;
  const char *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  void *v28;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || *(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    v25 = 0;
    v24 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, 0, &v24, &v25);
    if ((_DWORD)result)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
        v9 = -1431655765 * ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
      if (v9)
      {
        v10 = 0;
        v11 = 0;
        v23 = (_QWORD *)(a3 + 16);
        v12 = v9;
        v13 = 24;
        do
        {
          v26 = 0;
          if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v11, &v26))
          {
            v14 = *(_QWORD *)(a3 + 8);
            v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *(_QWORD *)a3) >> 4);
            if (v15 <= v11)
            {
              v16 = v11 + 1;
              if (0xAAAAAAAAAAAAAAABLL * ((*v23 - v14) >> 4) >= v11 + 1 - v15)
              {
                v20 = 48 * ((v10 - 16 * ((v14 - *(_QWORD *)a3) >> 4)) / 0x30uLL) + 48;
                bzero(*(void **)(a3 + 8), v20);
                *(_QWORD *)(a3 + 8) = v14 + v20;
              }
              else
              {
                if (0x5555555555555556 * ((uint64_t)(*v23 - *(_QWORD *)a3) >> 4) > v16)
                  v16 = 0x5555555555555556 * ((uint64_t)(*v23 - *(_QWORD *)a3) >> 4);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v23 - *(_QWORD *)a3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
                  v17 = 0x555555555555555;
                else
                  v17 = v16;
                v18 = (char *)v28;
                v19 = 48 * ((v10 - 48 * v15) / 0x30) + 48;
                bzero(v28, v19);
                v28 = &v18[v19];
              }
            }
            v21 = (char **)(*(_QWORD *)a3 + v13);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
            llvm::yaml::IO::processKey<std::vector<llvm::MachO::Target>,llvm::yaml::EmptyContext>(a1, v21 - 3);
            if (*a4)
              v22 = "libraries";
            else
              v22 = "clients";
            llvm::yaml::IO::processKey<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)v22, v21, 1);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v26);
          }
          ++v11;
          v13 += 48;
          v10 += 48;
        }
        while (v12 != v11);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v25);
    }
  }
  return result;
}

uint64_t llvm::yaml::IO::mapOptional<std::vector<`anonymous namespace'::SymbolSection>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || *a3 != a3[1])
  {
    v28 = 0;
    v27 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, 0, &v27, &v28);
    if ((_DWORD)result)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
        v7 = -1963413621 * ((unint64_t)(a3[1] - *a3) >> 3);
      if (v7)
      {
        v8 = 0;
        v26 = a3 + 2;
        v9 = v7;
        v10 = "symbols";
        v11 = "objc-classes";
        v12 = 280;
        do
        {
          v29 = 0;
          if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v8, &v29))
          {
            v13 = a3[1];
            v14 = 0xAF8AF8AF8AF8AF8BLL * ((v13 - *a3) >> 3);
            if (v14 <= v8)
            {
              v15 = v11;
              v16 = v10;
              v17 = v8 + 1 - v14;
              if (0xAF8AF8AF8AF8AF8BLL * ((*v26 - v13) >> 3) >= v17)
              {
                v23 = v13 + 280 * v17;
                v24 = v12 - 8 * ((v13 - *a3) >> 3);
                do
                {
                  *(_QWORD *)(v13 + 128) = 0;
                  *(_OWORD *)(v13 + 96) = 0uLL;
                  *(_OWORD *)(v13 + 112) = 0uLL;
                  *(_OWORD *)(v13 + 64) = 0uLL;
                  *(_OWORD *)(v13 + 80) = 0uLL;
                  *(_OWORD *)(v13 + 32) = 0uLL;
                  *(_OWORD *)(v13 + 48) = 0uLL;
                  *(_OWORD *)(v13 + 16) = 0uLL;
                  *(_QWORD *)v13 = v13 + 16;
                  *(_QWORD *)(v13 + 8) = 0x500000000;
                  *(_OWORD *)(v13 + 152) = 0uLL;
                  *(_OWORD *)(v13 + 168) = 0uLL;
                  *(_OWORD *)(v13 + 184) = 0uLL;
                  *(_OWORD *)(v13 + 200) = 0uLL;
                  *(_OWORD *)(v13 + 216) = 0uLL;
                  *(_OWORD *)(v13 + 232) = 0uLL;
                  *(_OWORD *)(v13 + 248) = 0uLL;
                  *(_OWORD *)(v13 + 136) = 0uLL;
                  *(_OWORD *)(v13 + 264) = 0uLL;
                  v13 += 280;
                  v24 -= 280;
                }
                while (v24);
                a3[1] = v23;
              }
              else
              {
                v18 = 0x5F15F15F15F15F16 * ((*v26 - *a3) >> 3);
                if (v18 <= v8 + 1)
                  v18 = v8 + 1;
                if (0xAF8AF8AF8AF8AF8BLL * ((*v26 - *a3) >> 3) >= 0x75075075075075)
                  v19 = 0xEA0EA0EA0EA0EALL;
                else
                  v19 = v18;
                v20 = v31;
                v21 = v31 + 280 * v17;
                v22 = 280 * v14;
                do
                {
                  *(_QWORD *)(v20 + 128) = 0;
                  *(_OWORD *)(v20 + 96) = 0uLL;
                  *(_OWORD *)(v20 + 112) = 0uLL;
                  *(_OWORD *)(v20 + 64) = 0uLL;
                  *(_OWORD *)(v20 + 80) = 0uLL;
                  *(_OWORD *)(v20 + 32) = 0uLL;
                  *(_OWORD *)(v20 + 48) = 0uLL;
                  *(_OWORD *)(v20 + 16) = 0uLL;
                  *(_QWORD *)v20 = v20 + 16;
                  *(_QWORD *)(v20 + 8) = 0x500000000;
                  *(_OWORD *)(v20 + 152) = 0uLL;
                  *(_OWORD *)(v20 + 168) = 0uLL;
                  *(_OWORD *)(v20 + 184) = 0uLL;
                  *(_OWORD *)(v20 + 200) = 0uLL;
                  *(_OWORD *)(v20 + 216) = 0uLL;
                  *(_OWORD *)(v20 + 232) = 0uLL;
                  *(_OWORD *)(v20 + 248) = 0uLL;
                  v22 += 280;
                  *(_OWORD *)(v20 + 136) = 0uLL;
                  *(_OWORD *)(v20 + 264) = 0uLL;
                  v20 += 280;
                }
                while (v12 != v22);
                v31 = v21;
              }
              v10 = v16;
              v11 = v15;
            }
            v25 = *a3 + 280 * v8;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
            llvm::yaml::IO::processKey<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::yaml::EmptyContext>(a1, v25);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)v10, v25 + 136);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)v11, v25 + 160);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"objc-eh-types", v25 + 184);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"objc-ivars", v25 + 208);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"weak-symbols", v25 + 232);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"thread-local-symbols", v25 + 256);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v29);
          }
          ++v8;
          v12 += 280;
        }
        while (v8 != v9);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v28);
    }
  }
  return result;
}

void **std::vector<`anonymous namespace'::UUIDv4>::~vector[abi:nn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unsigned int *llvm::SmallVectorImpl<llvm::MachO::Target>::insert<llvm::MachO::Target const*,void>(unsigned int *result, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 24 * v8 == a2)
    return llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>(result, __src, a4);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v7) >> 3);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a4 - __src) >> 3);
  if (v10 + v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v10 + v8, 24);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v11 = (_QWORD *)(v7 + 24 * v9);
  v12 = (_BYTE *)(v7 + 24 * v8);
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)v11) >> 3);
  if (v13 >= v10)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((8 * ((a4 - (_BYTE *)v5) >> 3)) >> 3) + v8;
    if (v15 <= v6[3])
    {
      v16 = v8;
    }
    else
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, v6 + 4, v15, 24);
      v16 = v6[2];
      LODWORD(v8) = v16;
    }
    if (a4 != (_BYTE *)v5)
    {
      v17 = *(_QWORD *)v6 + 24 * v16;
      v18 = -8 * ((a4 - (_BYTE *)v5) >> 3);
      do
      {
        v19 = *(_OWORD *)&v12[v18];
        *(_QWORD *)(v17 + 16) = *(_QWORD *)&v12[v18 + 16];
        *(_OWORD *)v17 = v19;
        v17 += 24;
        v18 += 24;
      }
      while (v18);
      LODWORD(v8) = v6[2];
    }
    v6[2] = v8 - 1431655765 * ((8 * ((a4 - (_BYTE *)v5) >> 3)) >> 3);
    if (&v12[-8 * ((a4 - (_BYTE *)v5) >> 3)] != (_BYTE *)v11)
      result = (unsigned int *)memmove(&v11[(a4 - (_BYTE *)v5) >> 3], v11, &v12[-8 * ((a4 - (_BYTE *)v5) >> 3)] - (_BYTE *)v11);
    if (a4 != (_BYTE *)v5)
      return (unsigned int *)memmove(v11, v5, a4 - (_BYTE *)v5);
  }
  else
  {
    v6[2] = v8 + v10;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 24 * (v8 + v10) - 8 * ((v12 - (_BYTE *)v11) >> 3)), (const void *)(v7 + 24 * v9), v12 - (_BYTE *)v11);
      do
      {
        v14 = *(_OWORD *)v5;
        v11[2] = v5[2];
        *(_OWORD *)v11 = v14;
        v11 += 3;
        v5 += 3;
        --v13;
      }
      while (v13);
    }
    if (v5 != (_QWORD *)a4)
      return (unsigned int *)memcpy(v12, v5, a4 - (_BYTE *)v5);
  }
  return result;
}

void llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::assignTargetsToLibrary(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t **v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t **v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52[2];
  _QWORD v53[2];
  _OWORD *v54;
  void *v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v52[0] = 0;
  v52[1] = 0;
  v50 = 0;
  v51 = (uint64_t *)v52;
  v48 = &v49;
  v49 = 0;
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *(_BYTE **)(v5 + 24);
      v7 = &v6[24 * *(unsigned int *)(v5 + 32)];
      v55[0] = &v56;
      v55[1] = (void *)0x500000000;
      llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>((unsigned int *)v55, v6, v7);
      v8 = v49;
      v9 = &v49;
      v10 = &v49;
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t **)v8;
            v11 = v8[4];
            if (v11 <= v5)
              break;
            v8 = *v10;
            v9 = v10;
            if (!*v10)
              goto LABEL_10;
          }
          if (v11 >= v5)
            break;
          v8 = v10[1];
          if (!v8)
          {
            v9 = v10 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        v12 = (uint64_t *)v10;
        v10 = (uint64_t **)operator new(0xB0uLL);
        v10[4] = (uint64_t *)v5;
        v10[5] = (uint64_t *)(v10 + 7);
        v10[6] = (uint64_t *)0x500000000;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = v12;
        *v9 = (uint64_t *)v10;
        v13 = (uint64_t *)v10;
        if (*v48)
        {
          v48 = (uint64_t **)*v48;
          v13 = *v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v49, v13);
        ++v50;
      }
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v10 + 5), (uint64_t)v55);
      std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::__emplace_unique_key_args<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::SmallVector<llvm::MachO::Target,5u>>(&v51, (unsigned __int8 *)v55[0], v55[1], (uint64_t)v55);
      if (v55[0] != &v56)
        free(v55[0]);
      v5 += 160;
    }
    while (v5 != a2);
    v14 = v51;
    if (v51 != (uint64_t *)v52)
    {
      do
      {
        v56 = 0u;
        v57 = 0u;
        v15 = (char *)v14[4];
        *(_OWORD *)v55 = 0u;
        std::vector<llvm::MachO::Target>::__insert_with_size[abi:nn180100]<llvm::MachO::Target const*,llvm::MachO::Target const*>((uint64_t)v55, v15, &v15[24 * *((unsigned int *)v14 + 10)], *((unsigned int *)v14 + 10));
        v16 = v48;
        if (v48 != &v49)
        {
          do
          {
            if (llvm::SmallVectorImpl<llvm::MachO::Target>::operator==((unsigned __int8 **)v16 + 5, (unsigned __int8 **)v14 + 4))
            {
              v17 = v16[4];
              v18 = *((char *)v17 + 23);
              if (v18 >= 0)
                v19 = v16[4];
              else
                v19 = (uint64_t *)*v17;
              if (v18 >= 0)
                v20 = *((unsigned __int8 *)v17 + 23);
              else
                v20 = v17[1];
              v21 = (_QWORD *)v57;
              if ((unint64_t)v57 >= *((_QWORD *)&v57 + 1))
              {
                v23 = (_QWORD *)*((_QWORD *)&v56 + 1);
                v24 = (uint64_t)(v57 - *((_QWORD *)&v56 + 1)) >> 4;
                v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 60)
                  goto LABEL_67;
                v26 = *((_QWORD *)&v57 + 1) - *((_QWORD *)&v56 + 1);
                if ((uint64_t)(*((_QWORD *)&v57 + 1) - *((_QWORD *)&v56 + 1)) >> 3 > v25)
                  v25 = v26 >> 3;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v27 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v27 = v25;
                if (v27)
                  v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v27);
                else
                  v28 = 0;
                v29 = (uint64_t **)(v27 + 16 * v24);
                *v29 = v19;
                v29[1] = (uint64_t *)v20;
                v30 = v29;
                if (v21 != v23)
                {
                  do
                  {
                    *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
                    v30 -= 2;
                    v21 -= 2;
                  }
                  while (v21 != v23);
                  v21 = (_QWORD *)*((_QWORD *)&v56 + 1);
                }
                v22 = v29 + 2;
                *((_QWORD *)&v56 + 1) = v30;
                *((_QWORD *)&v57 + 1) = v27 + 16 * v28;
                if (v21)
                  operator delete(v21);
              }
              else
              {
                *(_QWORD *)v57 = v19;
                v21[1] = v20;
                v22 = v21 + 2;
              }
              *(_QWORD *)&v57 = v22;
            }
            v31 = v16[1];
            if (v31)
            {
              do
              {
                v32 = (uint64_t **)v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v32 = (uint64_t **)v16[2];
                v33 = *v32 == (uint64_t *)v16;
                v16 = v32;
              }
              while (!v33);
            }
            v16 = v32;
          }
          while (v32 != &v49);
        }
        v35 = *((_QWORD *)&v56 + 1);
        v34 = v57;
        v36 = 126 - 2 * __clz((uint64_t)(v57 - *((_QWORD *)&v56 + 1)) >> 4);
        if ((_QWORD)v57 == *((_QWORD *)&v56 + 1))
          v37 = 0;
        else
          v37 = v36;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((uint64_t *)&v56 + 1), (_OWORD *)v57, v37, 1);
        v38 = a3[1];
        v39 = a3[2];
        if (v38 >= v39)
        {
          v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *a3) >> 4);
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) > 0x555555555555555)
LABEL_67:
            abort();
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *a3) >> 4);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x2AAAAAAAAAAAAAALL)
            v44 = 0x555555555555555;
          else
            v44 = v42;
          v45 = v54;
          *v54 = *(_OWORD *)v55;
          v45[2] = v56;
          v45[3] = v35;
          v55[1] = 0;
          *(_QWORD *)&v56 = 0;
          v55[0] = 0;
          v45[4] = v34;
          v45[5] = *((_QWORD *)&v57 + 1);
          v54 += 3;
          v40 = a3[1];
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)v55;
          *(_QWORD *)(v38 + 16) = v56;
          *(_QWORD *)(v38 + 24) = v35;
          v55[1] = 0;
          *(_QWORD *)&v56 = 0;
          v55[0] = 0;
          *(_QWORD *)(v38 + 32) = v34;
          *(_QWORD *)(v38 + 40) = *((_QWORD *)&v57 + 1);
          v40 = v38 + 48;
        }
        a3[1] = v40;
        v46 = (uint64_t *)v14[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (uint64_t *)v14[2];
            v33 = *v47 == (_QWORD)v14;
            v14 = v47;
          }
          while (!v33);
        }
        v14 = v47;
      }
      while (v47 != (uint64_t *)v52);
    }
  }
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(v49);
  std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(v52[0]);
}

void llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::NormalizedTBD_V4(llvm::yaml::IO &,llvm::MachO::InterfaceFile const*&)::{lambda(std::vector<`anonymous namespace'::SymbolSection> &,llvm::iterator_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>)#1}::operator()(uint64_t *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t i;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _BYTE *v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  char *v90;
  uint64_t *v91;
  uint64_t *v92;
  char *v93;
  char *v94;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t **v101;
  BOOL v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  _QWORD *v128[2];
  void *v129;
  uint64_t v130;
  _BYTE v131[120];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _BYTE v143[24];
  _BYTE *v144;
  __int128 v145;
  __int128 v146;
  _BYTE v147[24];
  _BYTE *v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v128[0] = 0;
  v128[1] = 0;
  v126 = 0;
  v127 = (uint64_t *)v128;
  v124 = &v125;
  v125 = 0;
  v4 = a2[1];
  v145 = *a2;
  v146 = v4;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v147, (uint64_t)(a2 + 2));
  v5 = a2[5];
  v141 = a2[4];
  v142 = v5;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v143, (uint64_t)(a2 + 6));
  for (i = v145; (_QWORD)v145 != (_QWORD)v141; i = v145)
  {
    v7 = *(_QWORD *)(i + 24);
    v8 = *(_BYTE **)(v7 + 16);
    v9 = &v8[24 * *(unsigned int *)(v7 + 24)];
    v129 = v131;
    v130 = 0x500000000;
    llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>((unsigned int *)&v129, v8, v9);
    v10 = v125;
    v11 = &v125;
    v12 = &v125;
    if (v125)
    {
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v10;
          v13 = v10[4];
          if (v13 <= v7)
            break;
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_9;
        }
        if (v13 >= v7)
          break;
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      v14 = (uint64_t *)v12;
      v12 = (uint64_t **)operator new(0xB0uLL);
      v12[4] = (uint64_t *)v7;
      v12[5] = (uint64_t *)(v12 + 7);
      v12[6] = (uint64_t *)0x500000000;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v14;
      *v11 = (uint64_t *)v12;
      v15 = (uint64_t *)v12;
      if (*v124)
      {
        v124 = (uint64_t **)*v124;
        v15 = *v11;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v125, v15);
      ++v126;
    }
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v12 + 5), (uint64_t)&v129);
    std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::__emplace_unique_key_args<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::SmallVector<llvm::MachO::Target,5u>>(&v127, (unsigned __int8 *)v129, v130, (uint64_t)&v129);
    if (v129 != v131)
      free(v129);
    *(_QWORD *)&v145 = v145 + 32;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v145);
    llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid((uint64_t)&v145);
  }
  v16 = v144;
  if (v144 == v143)
  {
    v17 = 4;
    v16 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_20;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
  v18 = v148;
  if (v148 == v147)
  {
    v19 = 4;
    v18 = v147;
  }
  else
  {
    if (!v148)
      goto LABEL_25;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_25:
  v20 = v127;
  if (v127 != (uint64_t *)v128)
  {
    do
    {
      v132 = 0u;
      v133 = 0u;
      v134 = 0u;
      v135 = 0u;
      v136 = 0u;
      v137 = 0u;
      v138 = 0u;
      v139 = 0u;
      v140 = 0u;
      v21 = (_BYTE *)v20[4];
      v129 = v131;
      v130 = 0x500000000;
      llvm::SmallVectorImpl<llvm::MachO::Target>::insert<llvm::MachO::Target const*,void>((unsigned int *)&v129, (uint64_t)v131, v21, &v21[24 * *((unsigned int *)v20 + 10)]);
      v22 = v124;
      if (v124 != &v125)
      {
        do
        {
          if (llvm::SmallVectorImpl<llvm::MachO::Target>::operator==((unsigned __int8 **)v22 + 5, (unsigned __int8 **)v20 + 4))
          {
            v23 = v22[4];
            switch(*((_BYTE *)v23 + 152))
            {
              case 0:
                if ((*((_BYTE *)v23 + 153) & 2) != 0)
                {
                  v41 = *v23;
                  v40 = v23[1];
                  v42 = *((_QWORD *)&v138 + 1);
                  if (*((_QWORD *)&v138 + 1) >= (unint64_t)v139)
                  {
                    v61 = (uint64_t)(*((_QWORD *)&v138 + 1) - v138) >> 4;
                    v62 = v61 + 1;
                    if ((unint64_t)(v61 + 1) >> 60)
                      goto LABEL_187;
                    v63 = v139 - v138;
                    if ((uint64_t)(v139 - v138) >> 3 > v62)
                      v62 = v63 >> 3;
                    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
                      v64 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v64 = v62;
                    if (v64)
                      v64 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v64);
                    else
                      v65 = 0;
                    v88 = (uint64_t *)(v64 + 16 * v61);
                    *v88 = v41;
                    v88[1] = v40;
                    v89 = (char *)*((_QWORD *)&v138 + 1);
                    v90 = (char *)v138;
                    v91 = v88;
                    if (*((_QWORD *)&v138 + 1) != (_QWORD)v138)
                    {
                      do
                      {
                        *((_OWORD *)v91 - 1) = *((_OWORD *)v89 - 1);
                        v91 -= 2;
                        v89 -= 16;
                      }
                      while (v89 != v90);
                      v89 = (char *)v138;
                    }
                    v43 = v88 + 2;
                    *(_QWORD *)&v138 = v91;
                    *((_QWORD *)&v138 + 1) = v88 + 2;
                    *(_QWORD *)&v139 = v64 + 16 * v65;
                    if (v89)
                      operator delete(v89);
                  }
                  else
                  {
                    **((_QWORD **)&v138 + 1) = v41;
                    *(_QWORD *)(v42 + 8) = v40;
                    v43 = (_QWORD *)(v42 + 16);
                  }
                  *((_QWORD *)&v138 + 1) = v43;
                }
                else
                {
                  v25 = *v23;
                  v24 = v23[1];
                  if ((*((_BYTE *)v23 + 153) & 1) != 0)
                  {
                    v59 = v140;
                    if ((unint64_t)v140 >= *((_QWORD *)&v140 + 1))
                    {
                      v83 = (uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 4;
                      v84 = v83 + 1;
                      if ((unint64_t)(v83 + 1) >> 60)
                        goto LABEL_187;
                      v85 = *((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1);
                      if ((uint64_t)(*((_QWORD *)&v140 + 1) - *((_QWORD *)&v139 + 1)) >> 3 > v84)
                        v84 = v85 >> 3;
                      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
                        v86 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v86 = v84;
                      if (v86)
                        v86 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v86);
                      else
                        v87 = 0;
                      v96 = (uint64_t *)(v86 + 16 * v83);
                      *v96 = v25;
                      v96[1] = v24;
                      v98 = (char *)*((_QWORD *)&v139 + 1);
                      v97 = (char *)v140;
                      v99 = v96;
                      if ((_QWORD)v140 != *((_QWORD *)&v139 + 1))
                      {
                        do
                        {
                          *((_OWORD *)v99 - 1) = *((_OWORD *)v97 - 1);
                          v99 -= 2;
                          v97 -= 16;
                        }
                        while (v97 != v98);
                        v97 = (char *)*((_QWORD *)&v139 + 1);
                      }
                      v60 = v96 + 2;
                      *((_QWORD *)&v139 + 1) = v99;
                      *(_QWORD *)&v140 = v96 + 2;
                      *((_QWORD *)&v140 + 1) = v86 + 16 * v87;
                      if (v97)
                        operator delete(v97);
                    }
                    else
                    {
                      *(_QWORD *)v140 = v25;
                      *(_QWORD *)(v59 + 8) = v24;
                      v60 = (_QWORD *)(v59 + 16);
                    }
                    *(_QWORD *)&v140 = v60;
                  }
                  else
                  {
                    v26 = *((_QWORD *)&v132 + 1);
                    if (*((_QWORD *)&v132 + 1) >= (unint64_t)v133)
                    {
                      v78 = (uint64_t)(*((_QWORD *)&v132 + 1) - v132) >> 4;
                      v79 = v78 + 1;
                      if ((unint64_t)(v78 + 1) >> 60)
                        goto LABEL_187;
                      v80 = v133 - v132;
                      if ((uint64_t)(v133 - v132) >> 3 > v79)
                        v79 = v80 >> 3;
                      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
                        v81 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v81 = v79;
                      if (v81)
                        v81 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v81);
                      else
                        v82 = 0;
                      v92 = (uint64_t *)(v81 + 16 * v78);
                      *v92 = v25;
                      v92[1] = v24;
                      v93 = (char *)*((_QWORD *)&v132 + 1);
                      v94 = (char *)v132;
                      v95 = v92;
                      if (*((_QWORD *)&v132 + 1) != (_QWORD)v132)
                      {
                        do
                        {
                          *((_OWORD *)v95 - 1) = *((_OWORD *)v93 - 1);
                          v95 -= 2;
                          v93 -= 16;
                        }
                        while (v93 != v94);
                        v93 = (char *)v132;
                      }
                      v27 = v92 + 2;
                      *(_QWORD *)&v132 = v95;
                      *((_QWORD *)&v132 + 1) = v92 + 2;
                      *(_QWORD *)&v133 = v81 + 16 * v82;
                      if (v93)
                        operator delete(v93);
                    }
                    else
                    {
                      **((_QWORD **)&v132 + 1) = v25;
                      *(_QWORD *)(v26 + 8) = v24;
                      v27 = (_QWORD *)(v26 + 16);
                    }
                    *((_QWORD *)&v132 + 1) = v27;
                  }
                }
                break;
              case 1:
                v29 = *v23;
                v28 = v23[1];
                v30 = v134;
                if ((unint64_t)v134 >= *((_QWORD *)&v134 + 1))
                {
                  v44 = (uint64_t)(v134 - *((_QWORD *)&v133 + 1)) >> 4;
                  v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 60)
                    goto LABEL_187;
                  v46 = *((_QWORD *)&v134 + 1) - *((_QWORD *)&v133 + 1);
                  if ((uint64_t)(*((_QWORD *)&v134 + 1) - *((_QWORD *)&v133 + 1)) >> 3 > v45)
                    v45 = v46 >> 3;
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
                    v47 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v47 = v45;
                  if (v47)
                    v47 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v47);
                  else
                    v48 = 0;
                  v66 = (uint64_t *)(v47 + 16 * v44);
                  *v66 = v29;
                  v66[1] = v28;
                  v68 = (char *)*((_QWORD *)&v133 + 1);
                  v67 = (char *)v134;
                  v69 = v66;
                  if ((_QWORD)v134 != *((_QWORD *)&v133 + 1))
                  {
                    do
                    {
                      *((_OWORD *)v69 - 1) = *((_OWORD *)v67 - 1);
                      v69 -= 2;
                      v67 -= 16;
                    }
                    while (v67 != v68);
                    v67 = (char *)*((_QWORD *)&v133 + 1);
                  }
                  v31 = v66 + 2;
                  *((_QWORD *)&v133 + 1) = v69;
                  *(_QWORD *)&v134 = v66 + 2;
                  *((_QWORD *)&v134 + 1) = v47 + 16 * v48;
                  if (v67)
                    operator delete(v67);
                }
                else
                {
                  *(_QWORD *)v134 = v29;
                  *(_QWORD *)(v30 + 8) = v28;
                  v31 = (_QWORD *)(v30 + 16);
                }
                *(_QWORD *)&v134 = v31;
                break;
              case 2:
                v33 = *v23;
                v32 = v23[1];
                v34 = *((_QWORD *)&v135 + 1);
                if (*((_QWORD *)&v135 + 1) >= (unint64_t)v136)
                {
                  v49 = (uint64_t)(*((_QWORD *)&v135 + 1) - v135) >> 4;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 60)
                    goto LABEL_187;
                  v51 = v136 - v135;
                  if ((uint64_t)(v136 - v135) >> 3 > v50)
                    v50 = v51 >> 3;
                  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
                    v52 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v52 = v50;
                  if (v52)
                    v52 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v52);
                  else
                    v53 = 0;
                  v70 = (uint64_t *)(v52 + 16 * v49);
                  *v70 = v33;
                  v70[1] = v32;
                  v71 = (char *)*((_QWORD *)&v135 + 1);
                  v72 = (char *)v135;
                  v73 = v70;
                  if (*((_QWORD *)&v135 + 1) != (_QWORD)v135)
                  {
                    do
                    {
                      *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
                      v73 -= 2;
                      v71 -= 16;
                    }
                    while (v71 != v72);
                    v71 = (char *)v135;
                  }
                  v35 = v70 + 2;
                  *(_QWORD *)&v135 = v73;
                  *((_QWORD *)&v135 + 1) = v70 + 2;
                  *(_QWORD *)&v136 = v52 + 16 * v53;
                  if (v71)
                    operator delete(v71);
                }
                else
                {
                  **((_QWORD **)&v135 + 1) = v33;
                  *(_QWORD *)(v34 + 8) = v32;
                  v35 = (_QWORD *)(v34 + 16);
                }
                *((_QWORD *)&v135 + 1) = v35;
                break;
              case 3:
                v37 = *v23;
                v36 = v23[1];
                v38 = v137;
                if ((unint64_t)v137 >= *((_QWORD *)&v137 + 1))
                {
                  v54 = (uint64_t)(v137 - *((_QWORD *)&v136 + 1)) >> 4;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 60)
                    goto LABEL_187;
                  v56 = *((_QWORD *)&v137 + 1) - *((_QWORD *)&v136 + 1);
                  if ((uint64_t)(*((_QWORD *)&v137 + 1) - *((_QWORD *)&v136 + 1)) >> 3 > v55)
                    v55 = v56 >> 3;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                    v57 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v57 = v55;
                  if (v57)
                    v57 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v57);
                  else
                    v58 = 0;
                  v74 = (uint64_t *)(v57 + 16 * v54);
                  *v74 = v37;
                  v74[1] = v36;
                  v76 = (char *)*((_QWORD *)&v136 + 1);
                  v75 = (char *)v137;
                  v77 = v74;
                  if ((_QWORD)v137 != *((_QWORD *)&v136 + 1))
                  {
                    do
                    {
                      *((_OWORD *)v77 - 1) = *((_OWORD *)v75 - 1);
                      v77 -= 2;
                      v75 -= 16;
                    }
                    while (v75 != v76);
                    v75 = (char *)*((_QWORD *)&v136 + 1);
                  }
                  v39 = v74 + 2;
                  *((_QWORD *)&v136 + 1) = v77;
                  *(_QWORD *)&v137 = v74 + 2;
                  *((_QWORD *)&v137 + 1) = v57 + 16 * v58;
                  if (v75)
                    operator delete(v75);
                }
                else
                {
                  *(_QWORD *)v137 = v37;
                  *(_QWORD *)(v38 + 8) = v36;
                  v39 = (_QWORD *)(v38 + 16);
                }
                *(_QWORD *)&v137 = v39;
                break;
              default:
                break;
            }
          }
          v100 = v22[1];
          if (v100)
          {
            do
            {
              v101 = (uint64_t **)v100;
              v100 = (uint64_t *)*v100;
            }
            while (v100);
          }
          else
          {
            do
            {
              v101 = (uint64_t **)v22[2];
              v102 = *v101 == (uint64_t *)v22;
              v22 = v101;
            }
            while (!v102);
          }
          v22 = v101;
        }
        while (v101 != &v125);
      }
      v103 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v132 + 1) - v132) >> 4);
      if (*((_QWORD *)&v132 + 1) == (_QWORD)v132)
        v104 = 0;
      else
        v104 = v103;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(v132, *((_OWORD **)&v132 + 1), v104, 1);
      v105 = 126 - 2 * __clz((uint64_t)(v134 - *((_QWORD *)&v133 + 1)) >> 4);
      if ((_QWORD)v134 == *((_QWORD *)&v133 + 1))
        v106 = 0;
      else
        v106 = v105;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((uint64_t *)&v133 + 1), (_OWORD *)v134, v106, 1);
      v107 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v135 + 1) - v135) >> 4);
      if (*((_QWORD *)&v135 + 1) == (_QWORD)v135)
        v108 = 0;
      else
        v108 = v107;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(v135, *((_OWORD **)&v135 + 1), v108, 1);
      v109 = 126 - 2 * __clz((uint64_t)(v137 - *((_QWORD *)&v136 + 1)) >> 4);
      if ((_QWORD)v137 == *((_QWORD *)&v136 + 1))
        v110 = 0;
      else
        v110 = v109;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((uint64_t *)&v136 + 1), (_OWORD *)v137, v110, 1);
      v111 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v138 + 1) - v138) >> 4);
      if (*((_QWORD *)&v138 + 1) == (_QWORD)v138)
        v112 = 0;
      else
        v112 = v111;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(v138, *((_OWORD **)&v138 + 1), v112, 1);
      v113 = 126 - 2 * __clz((uint64_t)(v140 - *((_QWORD *)&v139 + 1)) >> 4);
      if ((_QWORD)v140 == *((_QWORD *)&v139 + 1))
        v114 = 0;
      else
        v114 = v113;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((uint64_t *)&v139 + 1), (_OWORD *)v140, v114, 1);
      v116 = a1[1];
      v115 = a1[2];
      if (v116 >= v115)
      {
        v118 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v116 - *a1) >> 3);
        v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) > 0xEA0EA0EA0EA0EALL)
LABEL_187:
          abort();
        v120 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v115 - *a1) >> 3);
        if (2 * v120 > v119)
          v119 = 2 * v120;
        if (v120 >= 0x75075075075075)
          v121 = 0xEA0EA0EA0EA0EALL;
        else
          v121 = v119;
        *(_QWORD *)&v146 = v146 + 280;
        v117 = a1[1];
      }
      else
      {
        v117 = v116 + 280;
      }
      a1[1] = v117;
      if (*((_QWORD *)&v139 + 1))
      {
        *(_QWORD *)&v140 = *((_QWORD *)&v139 + 1);
        operator delete(*((void **)&v139 + 1));
      }
      if ((_QWORD)v138)
      {
        *((_QWORD *)&v138 + 1) = v138;
        operator delete((void *)v138);
      }
      if (*((_QWORD *)&v136 + 1))
      {
        *(_QWORD *)&v137 = *((_QWORD *)&v136 + 1);
        operator delete(*((void **)&v136 + 1));
      }
      if ((_QWORD)v135)
      {
        *((_QWORD *)&v135 + 1) = v135;
        operator delete((void *)v135);
      }
      if (*((_QWORD *)&v133 + 1))
      {
        *(_QWORD *)&v134 = *((_QWORD *)&v133 + 1);
        operator delete(*((void **)&v133 + 1));
      }
      if ((_QWORD)v132)
      {
        *((_QWORD *)&v132 + 1) = v132;
        operator delete((void *)v132);
      }
      if (v129 != v131)
        free(v129);
      v122 = (uint64_t *)v20[1];
      if (v122)
      {
        do
        {
          v123 = v122;
          v122 = (uint64_t *)*v122;
        }
        while (v122);
      }
      else
      {
        do
        {
          v123 = (uint64_t *)v20[2];
          v102 = *v123 == (_QWORD)v20;
          v20 = v123;
        }
        while (!v102);
      }
      v20 = v123;
    }
    while (v123 != (uint64_t *)v128);
  }
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(v125);
  std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(v128[0]);
}

void std::vector<llvm::MachO::Target>::__insert_with_size[abi:nn180100]<llvm::MachO::Target const*,llvm::MachO::Target const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  char *v5;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char *v37;

  if (a4 < 1)
    return;
  v5 = __src;
  v7 = *(char **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = -*(_QWORD *)a1 / 24;
  v10 = (char *)(*(_QWORD *)a1 + 24 * v9);
  v11 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v8) >> 3)) < a4)
  {
    v12 = a4 - 0x5555555555555555 * ((uint64_t)(v8 - (_QWORD)v7) >> 3);
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v12)
      v14 = v12;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v15);
    else
      v16 = 0;
    v24 = v15 + 24 * v9;
    v25 = 3 * a4;
    v26 = (char *)(v24 + 24 * a4);
    v27 = 8 * v25;
    v28 = v24;
    do
    {
      v29 = *(_OWORD *)v5;
      *(_QWORD *)(v28 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)v28 = v29;
      v28 += 24;
      v5 += 24;
      v27 -= 24;
    }
    while (v27);
    v30 = *(char **)a1;
    if (*(char **)a1 == v10)
    {
      v33 = v15 + 24 * v9;
    }
    else
    {
      v31 = v10;
      do
      {
        v32 = *(_OWORD *)(v31 - 24);
        v33 = v24 - 24;
        *(_QWORD *)(v24 - 8) = *((_QWORD *)v31 - 1);
        *(_OWORD *)(v24 - 24) = v32;
        v31 -= 24;
        v24 -= 24;
      }
      while (v31 != v30);
    }
    v34 = v15 + 24 * v16;
    v35 = *(_BYTE **)(a1 + 8);
    v36 = v35 - v10;
    if (v35 != v10)
      memmove(v26, v10, v35 - v10);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = &v26[v36];
    *(_QWORD *)(a1 + 16) = v34;
    if (v37)
      operator delete(v37);
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v10) >> 3)) >= a4)
  {
    v17 = &__src[24 * a4];
    v19 = *(char **)(a1 + 8);
LABEL_17:
    v20 = &v10[24 * a4];
    v21 = &v19[-24 * a4];
    v22 = v19;
    if ((unint64_t)v21 < v8)
    {
      v22 = v19;
      do
      {
        v23 = *(_OWORD *)v21;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v22 = v23;
        v22 += 24;
        v21 += 24;
      }
      while ((unint64_t)v21 < v8);
    }
    *(_QWORD *)(a1 + 8) = v22;
    if (v19 != v20)
      memmove(&v10[24 * a4], v10, v19 - v20);
    if (v17 != v5)
      memmove(v10, v5, v17 - v5);
    return;
  }
  v17 = &__src[8 * ((uint64_t)(v8 - (_QWORD)v10) >> 3)];
  v18 = a3 - v17;
  if (a3 != v17)
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v8 - (_QWORD)v10) >> 3)], a3 - v17);
  v19 = (char *)(v8 + v18);
  *(_QWORD *)(a1 + 8) = v8 + v18;
  if ((uint64_t)(v8 - (_QWORD)v10) >= 1)
    goto LABEL_17;
}

_QWORD *std::__split_buffer<`anonymous namespace'::UmbrellaSection>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[48 * a2];
  return a1;
}

uint64_t *std::vector<`anonymous namespace'::UmbrellaSection>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 48) = 0;
    *(_QWORD *)(v4 - 40) = 0;
    v4 -= 48;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    v6 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v6;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<`anonymous namespace'::UmbrellaSection>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator_traits<std::allocator<`anonymous namespace'::UmbrellaSection>>::destroy[abi:nn180100]<`anonymous namespace'::UmbrellaSection,void>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::__emplace_unique_key_args<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::SmallVector<llvm::MachO::Target,5u>>(uint64_t **a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t *v15;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v6;
        v11 = (unsigned __int8 *)v6[4];
        v12 = *((_DWORD *)v6 + 10);
        if (!llvm::SmallVectorImpl<llvm::MachO::Target>::operator<(a2, a3, v11, v12))
          break;
        v6 = *v10;
        v7 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      result = llvm::SmallVectorImpl<llvm::MachO::Target>::operator<(v11, v12, a2, a3);
      if (!(_DWORD)result)
        break;
      v6 = v10[1];
      if (!v6)
      {
        v7 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_9:
    v14 = (uint64_t *)operator new(0xA8uLL);
    v14[4] = (uint64_t)(v14 + 6);
    v14[5] = 0x500000000;
    if (*(_DWORD *)(a4 + 8))
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v14 + 4), a4);
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v10;
    *v7 = v14;
    v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      v14 = *v7;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::MachO::Target>::operator<(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;

  if (!a4)
    return 0;
  v4 = &a3[24 * a4];
  v5 = 24 * a2;
  while (v5)
  {
    v6 = *a1;
    v7 = *a3;
    if (v6 < v7)
      break;
    if (v7 < v6)
      return 0;
    v8 = *((_DWORD *)a1 + 1);
    v9 = *((_DWORD *)a3 + 1);
    if (v8 < v9)
      break;
    v10 = 0;
    if (v9 >= v8)
    {
      a1 += 24;
      a3 += 24;
      v5 -= 24;
      if (a3 != v4)
        continue;
    }
    return v10;
  }
  return 1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  unint64_t v31;
  const void *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  __int128 *v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  __int128 *v44;
  __int128 v45;
  const void *v46;
  size_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  const void *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  size_t v59;
  _QWORD *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  size_t v67;
  int v68;
  uint64_t v69;
  const void *v70;
  size_t v71;
  const void *v72;
  size_t v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  size_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  uint64_t v90;
  unint64_t v91;
  __int128 *v92;
  const void *v93;
  size_t v94;
  const void *v95;
  size_t v96;
  _OWORD *v97;
  _QWORD *v99;
  _QWORD *v100;
  const void *v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  _QWORD *v106;
  const void *v107;
  size_t v108;
  int v109;
  _OWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  int64_t v113;
  _QWORD *v114;
  __int128 v115;
  __int128 v116;

LABEL_1:
  v112 = a2 - 2;
  v114 = a2 - 1;
  v111 = a2 - 3;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v45 = *(a2 - 1);
        v44 = a2 - 1;
        v46 = *(const void **)a1;
        v47 = *(_QWORD *)(a1 + 8);
        v116 = v45;
        if ((llvm::StringRef::compare((uint64_t)&v116, v46, v47) & 0x80000000) != 0)
        {
          v116 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v44;
          *v44 = v116;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)a1, (__int128 *)(a1 + 16), v114);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(a1, a1 + 16, (const void **)(a1 + 32), v114);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((const void **)a1, (const void **)(a1 + 16), (__int128 *)(a1 + 32), (__int128 *)(a1 + 48), v114);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((_OWORD *)a1 != a2)
            {
              v48 = (_QWORD *)(a1 + 16);
              if ((_OWORD *)(a1 + 16) != a2)
              {
                v49 = 0;
                v50 = (_QWORD *)a1;
                do
                {
                  v51 = v48;
                  v52 = (const void *)*v50;
                  v53 = v50[1];
                  v116 = *((_OWORD *)v50 + 1);
                  if ((llvm::StringRef::compare((uint64_t)&v116, v52, v53) & 0x80000000) != 0)
                  {
                    v54 = *v51;
                    v55 = v50[3];
                    v56 = v49;
                    while (1)
                    {
                      v57 = a1 + v56;
                      *(_OWORD *)(a1 + v56 + 16) = *(_OWORD *)(a1 + v56);
                      if (!v56)
                        break;
                      v58 = *(const void **)(v57 - 16);
                      v59 = *(_QWORD *)(v57 - 8);
                      *(_QWORD *)&v116 = v54;
                      *((_QWORD *)&v116 + 1) = v55;
                      v56 -= 16;
                      if ((llvm::StringRef::compare((uint64_t)&v116, v58, v59) & 0x80000000) == 0)
                      {
                        v60 = (_QWORD *)(a1 + v56 + 16);
                        goto LABEL_66;
                      }
                    }
                    v60 = (_QWORD *)a1;
LABEL_66:
                    *v60 = v54;
                    v60[1] = v55;
                  }
                  v48 = v51 + 2;
                  v49 += 16;
                  v50 = v51;
                }
                while (v51 + 2 != (_QWORD *)a2);
              }
            }
          }
          else if ((_OWORD *)a1 != a2)
          {
            v99 = (_QWORD *)(a1 + 16);
            while (v99 != (_QWORD *)a2)
            {
              v100 = v99;
              v101 = *(const void **)a1;
              v102 = *(_QWORD *)(a1 + 8);
              v116 = *(_OWORD *)(a1 + 16);
              if ((llvm::StringRef::compare((uint64_t)&v116, v101, v102) & 0x80000000) != 0)
              {
                v103 = *v100;
                v104 = *(_QWORD *)(a1 + 24);
                v105 = v100;
                do
                {
                  v106 = v105 - 1;
                  *v105 = *(v105 - 1);
                  v107 = (const void *)*((_QWORD *)v105 - 4);
                  v108 = *((_QWORD *)v105 - 3);
                  *(_QWORD *)&v116 = v103;
                  *((_QWORD *)&v116 + 1) = v104;
                  v109 = llvm::StringRef::compare((uint64_t)&v116, v107, v108);
                  v105 = v106;
                }
                while (v109 < 0);
                *v106 = v103;
                v106[1] = v104;
              }
              v99 = v100 + 2;
              a1 = (uint64_t)v100;
            }
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)a1 != a2)
          {
            v61 = (unint64_t)(v10 - 2) >> 1;
            v62 = v61;
            v110 = a2;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = a1 + 16 * v64;
                if (2 * v62 + 2 < v10)
                {
                  v66 = *(const void **)(v65 + 16);
                  v67 = *(_QWORD *)(v65 + 24);
                  v116 = *(_OWORD *)v65;
                  v68 = llvm::StringRef::compare((uint64_t)&v116, v66, v67);
                  if (v68 < 0)
                    v65 += 16;
                  v61 = (unint64_t)(v10 - 2) >> 1;
                  if (v68 < 0)
                    v64 = 2 * v63 + 2;
                }
                v69 = a1 + 16 * v63;
                v70 = *(const void **)v69;
                v71 = *(_QWORD *)(v69 + 8);
                v116 = *(_OWORD *)v65;
                if ((llvm::StringRef::compare((uint64_t)&v116, v70, v71) & 0x80000000) == 0)
                {
                  v113 = v63;
                  v72 = *(const void **)v69;
                  v73 = *(_QWORD *)(v69 + 8);
                  do
                  {
                    v74 = (_OWORD *)v69;
                    v69 = v65;
                    *v74 = *(_OWORD *)v65;
                    if (v61 < v64)
                      break;
                    v75 = (2 * v64) | 1;
                    v65 = a1 + 16 * v75;
                    v76 = 2 * v64 + 2;
                    if (v76 < v10)
                    {
                      v77 = *(const void **)(v65 + 16);
                      v78 = *(_QWORD *)(v65 + 24);
                      v116 = *(_OWORD *)v65;
                      v79 = llvm::StringRef::compare((uint64_t)&v116, v77, v78);
                      if (v79 < 0)
                        v65 += 16;
                      v61 = (unint64_t)(v10 - 2) >> 1;
                      if (v79 < 0)
                        v75 = v76;
                    }
                    v116 = *(_OWORD *)v65;
                    v64 = v75;
                  }
                  while ((llvm::StringRef::compare((uint64_t)&v116, v72, v73) & 0x80000000) == 0);
                  *(_QWORD *)v69 = v72;
                  *(_QWORD *)(v69 + 8) = v73;
                  a2 = v110;
                  v63 = v113;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v80 = (unint64_t)v9 >> 4;
            do
            {
              v81 = 0;
              v115 = *(_OWORD *)a1;
              v82 = v80 - 2;
              if (v80 < 2)
                v82 = v80 - 1;
              v83 = v82 >> 1;
              v84 = (_OWORD *)a1;
              do
              {
                v85 = (uint64_t)&v84[v81 + 1];
                v86 = (2 * v81) | 1;
                v87 = 2 * v81 + 2;
                if (v87 < v80)
                {
                  v88 = *(const void **)&v84[v81 + 2];
                  v89 = *((_QWORD *)&v84[v81 + 2] + 1);
                  v116 = *(_OWORD *)v85;
                  if ((int)llvm::StringRef::compare((uint64_t)&v116, v88, v89) < 0)
                  {
                    v85 += 16;
                    v86 = v87;
                  }
                }
                *v84 = *(_OWORD *)v85;
                v84 = (_OWORD *)v85;
                v81 = v86;
              }
              while (v86 <= v83);
              if ((_OWORD *)v85 == --a2)
              {
                *(_OWORD *)v85 = v115;
              }
              else
              {
                *(_OWORD *)v85 = *a2;
                *a2 = v115;
                v90 = v85 - a1 + 16;
                if (v90 >= 17)
                {
                  v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
                  v92 = (__int128 *)(a1 + 16 * v91);
                  v93 = *(const void **)v85;
                  v94 = *(_QWORD *)(v85 + 8);
                  v116 = *v92;
                  if ((llvm::StringRef::compare((uint64_t)&v116, v93, v94) & 0x80000000) != 0)
                  {
                    v95 = *(const void **)v85;
                    v96 = *(_QWORD *)(v85 + 8);
                    do
                    {
                      v97 = (_OWORD *)v85;
                      v85 = (uint64_t)v92;
                      *v97 = *v92;
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = (__int128 *)(a1 + 16 * v91);
                      v116 = *v92;
                    }
                    while ((llvm::StringRef::compare((uint64_t)&v116, v95, v96) & 0x80000000) != 0);
                    *(_QWORD *)v85 = v95;
                    *(_QWORD *)(v85 + 8) = v96;
                  }
                }
              }
            }
            while (v80-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(a1 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(v12, (__int128 *)a1, v114);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)a1, v12, v114);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)(a1 + 16), v12 - 1, v112);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v11), v111);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(v12 - 1, v12, (_QWORD *)(a1 + 16 + 16 * v11));
          v116 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v116;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v13 = *(const void **)a1;
          v14 = *(_QWORD *)(a1 + 8);
          v116 = *(_OWORD *)(a1 - 16);
          if ((llvm::StringRef::compare((uint64_t)&v116, v13, v14) & 0x80000000) == 0)
          {
            v27 = *(_QWORD *)a1;
            v28 = *(_QWORD *)(a1 + 8);
            v29 = (const void *)*((_QWORD *)a2 - 2);
            v30 = *((_QWORD *)a2 - 1);
            *(_QWORD *)&v116 = *(_QWORD *)a1;
            *((_QWORD *)&v116 + 1) = v28;
            if ((llvm::StringRef::compare((uint64_t)&v116, v29, v30) & 0x80000000) != 0)
            {
              v8 = a1;
              do
              {
                v35 = *(const void **)(v8 + 16);
                v36 = *(_QWORD *)(v8 + 24);
                v8 += 16;
                *(_QWORD *)&v116 = v27;
                *((_QWORD *)&v116 + 1) = v28;
              }
              while ((llvm::StringRef::compare((uint64_t)&v116, v35, v36) & 0x80000000) == 0);
            }
            else
            {
              v31 = a1 + 16;
              do
              {
                v8 = v31;
                if (v31 >= (unint64_t)a2)
                  break;
                v32 = *(const void **)v31;
                v33 = *(_QWORD *)(v31 + 8);
                *(_QWORD *)&v116 = v27;
                *((_QWORD *)&v116 + 1) = v28;
                v34 = llvm::StringRef::compare((uint64_t)&v116, v32, v33);
                v31 = v8 + 16;
              }
              while ((v34 & 0x80000000) == 0);
            }
            v37 = a2;
            if (v8 < (unint64_t)a2)
            {
              v37 = a2;
              do
              {
                v38 = (const void *)*((_QWORD *)v37 - 2);
                v39 = *((_QWORD *)v37-- - 1);
                *(_QWORD *)&v116 = v27;
                *((_QWORD *)&v116 + 1) = v28;
              }
              while ((llvm::StringRef::compare((uint64_t)&v116, v38, v39) & 0x80000000) != 0);
            }
            while (v8 < (unint64_t)v37)
            {
              v116 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *v37;
              *v37 = v116;
              do
              {
                v40 = *(const void **)(v8 + 16);
                v41 = *(_QWORD *)(v8 + 24);
                v8 += 16;
                *(_QWORD *)&v116 = v27;
                *((_QWORD *)&v116 + 1) = v28;
              }
              while ((llvm::StringRef::compare((uint64_t)&v116, v40, v41) & 0x80000000) == 0);
              do
              {
                v42 = (const void *)*((_QWORD *)v37 - 2);
                v43 = *((_QWORD *)v37-- - 1);
                *(_QWORD *)&v116 = v27;
                *((_QWORD *)&v116 + 1) = v28;
              }
              while ((llvm::StringRef::compare((uint64_t)&v116, v42, v43) & 0x80000000) != 0);
            }
            if (v8 - 16 != a1)
              *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
            a4 = 0;
            *(_QWORD *)(v8 - 16) = v27;
            *(_QWORD *)(v8 - 8) = v28;
            continue;
          }
        }
        v15 = (uint64_t)a2;
        v16 = 0;
        v17 = *(const void **)a1;
        v18 = *(_QWORD *)(a1 + 8);
        do
        {
          v116 = *(_OWORD *)(a1 + v16 + 16);
          v16 += 16;
        }
        while ((llvm::StringRef::compare((uint64_t)&v116, v17, v18) & 0x80000000) != 0);
        v19 = a1 + v16;
        v20 = (__int128 *)v15;
        if (v16 == 16)
        {
          v20 = (__int128 *)v15;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *--v20;
            v116 = v22;
          }
          while ((llvm::StringRef::compare((uint64_t)&v116, v17, v18) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v21 = *--v20;
            v116 = v21;
          }
          while ((llvm::StringRef::compare((uint64_t)&v116, v17, v18) & 0x80000000) == 0);
        }
        v8 = a1 + v16;
        if (v19 < (unint64_t)v20)
        {
          v23 = v20;
          do
          {
            v116 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v23;
            *v23 = v116;
            do
            {
              v24 = *(_OWORD *)(v8 + 16);
              v8 += 16;
              v116 = v24;
            }
            while ((llvm::StringRef::compare((uint64_t)&v116, v17, v18) & 0x80000000) != 0);
            do
            {
              v25 = *--v23;
              v116 = v25;
            }
            while ((llvm::StringRef::compare((uint64_t)&v116, v17, v18) & 0x80000000) == 0);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v17;
        *(_QWORD *)(v8 - 8) = v18;
        a2 = (_OWORD *)v15;
        if (v19 < (unint64_t)v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(v8, v15))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (_OWORD *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  const void *v6;
  size_t v7;
  int v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t result;
  __int128 v13;
  const void *v14;
  size_t v15;
  __int128 v16;
  __int128 v17;
  const void *v18;
  size_t v19;
  __int128 v20;
  _OWORD v21[2];

  v6 = *(const void **)a1;
  v7 = *((_QWORD *)a1 + 1);
  v21[0] = *a2;
  v8 = llvm::StringRef::compare((uint64_t)v21, v6, v7);
  v9 = a3[1];
  v10 = *(const void **)a2;
  v11 = *((_QWORD *)a2 + 1);
  if (v8 < 0)
  {
    *(_QWORD *)&v21[0] = *a3;
    *((_QWORD *)&v21[0] + 1) = v9;
    result = llvm::StringRef::compare((uint64_t)v21, v10, v11);
    if ((result & 0x80000000) != 0)
    {
      v20 = *a1;
      *a1 = *(_OWORD *)a3;
    }
    else
    {
      v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      v18 = *(const void **)a2;
      v19 = *((_QWORD *)a2 + 1);
      v21[0] = *(_OWORD *)a3;
      result = llvm::StringRef::compare((uint64_t)v21, v18, v19);
      if ((result & 0x80000000) == 0)
        return result;
      v20 = *a2;
      *a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v20;
  }
  else
  {
    *(_QWORD *)&v21[0] = *a3;
    *((_QWORD *)&v21[0] + 1) = v9;
    result = llvm::StringRef::compare((uint64_t)v21, v10, v11);
    if ((result & 0x80000000) != 0)
    {
      v13 = *a2;
      *a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v13;
      v14 = *(const void **)a1;
      v15 = *((_QWORD *)a1 + 1);
      v21[0] = *a2;
      result = llvm::StringRef::compare((uint64_t)v21, v14, v15);
      if ((result & 0x80000000) != 0)
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  const void *v6;
  size_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  _QWORD *v23;
  __int128 v24;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(const void **)a1;
      v7 = *(_QWORD *)(a1 + 8);
      v9 = *(_OWORD *)(a2 - 16);
      v8 = (_OWORD *)(a2 - 16);
      v24 = v9;
      if ((llvm::StringRef::compare((uint64_t)&v24, v6, v7) & 0x80000000) != 0)
      {
        v10 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v8;
        *v8 = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)a1, (__int128 *)(a1 + 16), (_QWORD *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(a1, a1 + 16, (const void **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((const void **)a1, (const void **)(a1 + 16), (__int128 *)(a1 + 32), (__int128 *)(a1 + 48), (_OWORD *)(a2 - 16));
      return 1;
    default:
      v11 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)a1, (__int128 *)(a1 + 16), (_QWORD *)(a1 + 32));
      v12 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(const void **)v11;
    v16 = *(_QWORD *)(v11 + 8);
    v24 = *(_OWORD *)v12;
    if ((llvm::StringRef::compare((uint64_t)&v24, v15, v16) & 0x80000000) != 0)
    {
      v17 = *(_QWORD *)v12;
      v18 = *(_QWORD *)(v12 + 8);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(a1 + v19 + 48) = *(_OWORD *)(a1 + v19 + 32);
        if (v19 == -32)
          break;
        v21 = *(const void **)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        *(_QWORD *)&v24 = v17;
        *((_QWORD *)&v24 + 1) = v18;
        v19 -= 16;
        if ((llvm::StringRef::compare((uint64_t)&v24, v21, v22) & 0x80000000) == 0)
        {
          v23 = (_QWORD *)(a1 + v19 + 48);
          goto LABEL_12;
        }
      }
      v23 = (_QWORD *)a1;
LABEL_12:
      *v23 = v17;
      v23[1] = v18;
      if (++v14 == 8)
        return v12 + 16 == a2;
    }
    v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4)
{
  const void *v8;
  size_t v9;
  __n128 result;
  __int128 v11;
  const void *v12;
  size_t v13;
  __int128 v14;
  const void *v15;
  size_t v16;
  _OWORD v17[2];

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((__int128 *)a1, (__int128 *)a2, a3);
  v8 = *a3;
  v9 = (size_t)a3[1];
  v17[0] = *a4;
  if ((llvm::StringRef::compare((uint64_t)v17, v8, v9) & 0x80000000) != 0)
  {
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = v11;
    v12 = *(const void **)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v17[0] = *(_OWORD *)a3;
    if ((llvm::StringRef::compare((uint64_t)v17, v12, v13) & 0x80000000) != 0)
    {
      v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      v15 = *(const void **)a1;
      v16 = *(_QWORD *)(a1 + 8);
      v17[0] = *(_OWORD *)a2;
      if ((llvm::StringRef::compare((uint64_t)v17, v15, v16) & 0x80000000) != 0)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(const void **a1, const void **a2, __int128 *a3, __int128 *a4, _OWORD *a5)
{
  const void *v10;
  size_t v11;
  __n128 result;
  __int128 v13;
  const void *v14;
  size_t v15;
  __int128 v16;
  const void *v17;
  size_t v18;
  __int128 v19;
  const void *v20;
  size_t v21;
  _OWORD v22[2];

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((uint64_t)a1, (uint64_t)a2, (const void **)a3, a4);
  v10 = *(const void **)a4;
  v11 = *((_QWORD *)a4 + 1);
  v22[0] = *a5;
  if ((llvm::StringRef::compare((uint64_t)v22, v10, v11) & 0x80000000) != 0)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = *(const void **)a3;
    v15 = *((_QWORD *)a3 + 1);
    v22[0] = *a4;
    if ((llvm::StringRef::compare((uint64_t)v22, v14, v15) & 0x80000000) != 0)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = *a2;
      v18 = (size_t)a2[1];
      v22[0] = *a3;
      if ((llvm::StringRef::compare((uint64_t)v22, v17, v18) & 0x80000000) != 0)
      {
        v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v19;
        v20 = *a1;
        v21 = (size_t)a1[1];
        v22[0] = *(_OWORD *)a2;
        if ((llvm::StringRef::compare((uint64_t)v22, v20, v21) & 0x80000000) != 0)
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::vector<`anonymous namespace'::MetadataSection>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<`anonymous namespace'::MetadataSection>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator_traits<std::allocator<`anonymous namespace'::MetadataSection>>::destroy[abi:nn180100]<`anonymous namespace'::MetadataSection,void>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(*a1);
    std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(a1[1]);
    v2 = (_QWORD *)a1[4];
    if (v2 != a1 + 6)
      free(v2);
    operator delete(a1);
  }
}

void `anonymous namespace'::SymbolSection::~SymbolSection(_anonymous_namespace_::SymbolSection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 26);
  if (v4)
  {
    *((_QWORD *)this + 27) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 23);
  if (v5)
  {
    *((_QWORD *)this + 24) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 17);
  if (v7)
  {
    *((_QWORD *)this + 18) = v7;
    operator delete(v7);
  }
  if (*(_anonymous_namespace_::SymbolSection **)this != (_anonymous_namespace_::SymbolSection *)((char *)this + 16))
    free(*(void **)this);
}

__n128 std::allocator_traits<std::allocator<`anonymous namespace'::SymbolSection>>::construct[abi:nn180100]<`anonymous namespace'::SymbolSection,`anonymous namespace'::SymbolSection,void>(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)a1, a2);
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 136);
  a1[19] = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  *(_OWORD *)(a1 + 23) = *(_OWORD *)(a2 + 184);
  a1[25] = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  *((_OWORD *)a1 + 13) = *(_OWORD *)(a2 + 208);
  a1[28] = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  a1[29] = 0;
  a1[30] = 0;
  a1[31] = 0;
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 232);
  a1[31] = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[34] = 0;
  result = *(__n128 *)(a2 + 256);
  *((__n128 *)a1 + 16) = result;
  a1[34] = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  return result;
}

_QWORD *std::__split_buffer<`anonymous namespace'::SymbolSection>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xEA0EA0EA0EA0EBLL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(280 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[280 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[280 * a2];
  return a1;
}

void std::vector<`anonymous namespace'::SymbolSection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v6 -= 35;
    v4 -= 280;
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<`anonymous namespace'::SymbolSection>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::yaml::IO::processKey<unsigned int,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    llvm::yaml::yamlize<unsigned int>(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

void llvm::yaml::yamlize<unsigned int>(uint64_t *a1, unint64_t *a2)
{
  void *v4;
  char *v5;
  uint64_t v6;
  _QWORD v7[2];
  void (**v8)(llvm::raw_ostream *__hidden);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17;
  __int128 v18;
  _WORD v19[64];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v16 = &v17;
    v17 = v19;
    v18 = xmmword_24AA2AC90;
    LODWORD(v9) = 0;
    v13 = 0;
    v14 = 0;
    v15 = 1;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v8 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    llvm::raw_ostream::SetUnbuffered(&v8);
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v8, *(unsigned int *)a2, 0, 0, 0);
    v4 = v16[1];
    v7[0] = *v16;
    v7[1] = v4;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v7, 0);
    v8 = off_251C13948;
    if (v15 == 1 && v10)
      MEMORY[0x24BD1B380](v10, 0x1000C8077774924);
    if (v17 != v19)
      free(v17);
  }
  else
  {
    v8 = 0;
    v9 = 0;
    (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden), _QWORD))(*a1 + 216))(a1, &v8, 0);
    v5 = (char *)llvm::yaml::ScalarTraits<unsigned int,void>::input((uint64_t)v8, v9, a1[1], a2);
    if (v6)
    {
      v19[4] = 261;
      v17 = v5;
      *(_QWORD *)&v18 = v6;
      (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v17);
    }
  }
}

uint64_t llvm::yaml::IO::processKey<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v11 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "targets", 1, 0, &v11, &v12);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      v6 = *(unsigned int *)(a2 + 8);
    else
      v6 = v5;
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 24;
      do
      {
        v13 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, v8, &v13))
        {
          v10 = *(unsigned int *)(a2 + 8);
          if (v8 >= v10)
          {
            if (v8 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8 + 1, 24);
              v10 = *(unsigned int *)(a2 + 8);
            }
            if (v8 + 1 != v10)
              bzero((void *)(*(_QWORD *)a2 + 24 * v10), 24 - -24 * ((v7 - 24 * v10) / 0x18));
            *(_DWORD *)(a2 + 8) = v8 + 1;
          }
          llvm::yaml::yamlize<llvm::MachO::Target>(a1, (unsigned __int8 *)(*(_QWORD *)a2 + v9 - 24));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v13);
        }
        ++v8;
        v9 += 24;
        v7 += 24;
      }
      while (v6 != v8);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12);
  }
  return result;
}

void llvm::yaml::yamlize<llvm::MachO::Target>(uint64_t a1, unsigned __int8 *a2)
{
  const char *ArchitectureName;
  size_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13[2];
  void (**v14)(llvm::raw_ostream *__hidden);
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  _BYTE v23[24];
  char v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v14 = 0;
    v15 = 0;
    (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden), _QWORD))(*(_QWORD *)a1 + 216))(a1, &v14, 0);
    llvm::MachO::Target::create((uint64_t)v14, v15, (uint64_t)v23);
    if ((v24 & 1) != 0)
    {
      v8 = *(_QWORD **)v23;
      *(_QWORD *)v23 = 0;
      v13[0] = v8;
      llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(v13);
      if (v13[0])
        (*(void (**)(_QWORD *))(*v13[0] + 8))(v13[0]);
      if ((v24 & 1) != 0)
      {
        v9 = *(_QWORD *)v23;
        *(_QWORD *)v23 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      v6 = "unparsable target";
      v7 = 17;
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v23;
      *((_QWORD *)a2 + 2) = *(_QWORD *)&v23[16];
      if (*a2 == 16)
      {
        v6 = "unknown architecture";
        v7 = 20;
      }
      else
      {
        if (*((_DWORD *)a2 + 1))
          return;
        v6 = "unknown platform";
        v7 = 16;
      }
    }
    v25 = 261;
    *(_QWORD *)v23 = v6;
    *(_QWORD *)&v23[8] = v7;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 248))(a1, v23);
    return;
  }
  *(_QWORD *)v23 = &v24;
  *(_OWORD *)&v23[8] = xmmword_24AA2AC90;
  LODWORD(v15) = 0;
  v19 = 0;
  v20 = 0;
  v21 = 1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v14 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  v22 = v23;
  llvm::raw_ostream::SetUnbuffered(&v14);
  ArchitectureName = llvm::MachO::getArchitectureName(*a2);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, ArchitectureName, v5);
  if (v17 == v18)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "-", 1uLL);
  else
    *v18++ = 45;
  v10 = "unknown";
  v11 = 7;
  switch(*((_DWORD *)a2 + 1))
  {
    case 1:
      v10 = "macos";
      goto LABEL_33;
    case 2:
      v10 = "ios";
      v11 = 3;
      break;
    case 3:
      v10 = "tvos";
      goto LABEL_29;
    case 4:
      v10 = "watchos";
      v11 = 7;
      break;
    case 5:
      v10 = "bridgeos";
      v11 = 8;
      break;
    case 6:
      v10 = "maccatalyst";
      v11 = 11;
      break;
    case 7:
      v10 = "ios-simulator";
      v11 = 13;
      break;
    case 8:
      v10 = "tvos-simulator";
      goto LABEL_31;
    case 9:
      v10 = "watchos-simulator";
      v11 = 17;
      break;
    case 0xA:
      v10 = "driverkit";
      v11 = 9;
      break;
    case 0xB:
      v10 = "xros";
LABEL_29:
      v11 = 4;
      break;
    case 0xC:
      v10 = "xros-simulator";
LABEL_31:
      v11 = 14;
      break;
    case 0xE:
      v10 = "sepos";
LABEL_33:
      v11 = 5;
      break;
    default:
      break;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, v10, v11);
  v12 = (_QWORD *)*((_QWORD *)v22 + 1);
  v13[0] = *(_QWORD **)v22;
  v13[1] = v12;
  (*(void (**)(uint64_t, _QWORD **, _QWORD))(*(_QWORD *)a1 + 216))(a1, v13, 0);
  v14 = off_251C13948;
  if (v21 == 1 && v16)
    MEMORY[0x24BD1B380](v16, 0x1000C8077774924);
  if (*(char **)v23 != &v24)
    free(*(void **)v23);
}

uint64_t llvm::yaml::IO::processKey<std::string,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    llvm::yaml::yamlize<std::string>(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

void llvm::yaml::yamlize<std::string>(uint64_t *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  size_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 *v11[2];
  void (**v12)(llvm::raw_ostream *__hidden);
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *v21;
  __int128 v22;
  _WORD v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = &v21;
    v21 = v23;
    v22 = xmmword_24AA2AC90;
    LODWORD(v13) = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    llvm::raw_ostream::SetUnbuffered(&v12);
    v4 = *(char *)(a2 + 23);
    if (v4 >= 0)
      v5 = (const char *)a2;
    else
      v5 = *(const char **)a2;
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 23);
    else
      v6 = *(_QWORD *)(a2 + 8);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v12, v5, v6);
    v7 = (unsigned __int8 *)v20[1];
    v11[0] = (unsigned __int8 *)*v20;
    v11[1] = v7;
    v8 = llvm::yaml::needsQuotes(v11[0], (unint64_t)v7);
    (*(void (**)(uint64_t *, unsigned __int8 **, uint64_t))(*a1 + 216))(a1, v11, v8);
    v12 = off_251C13948;
    if (v19 == 1 && v14)
      MEMORY[0x24BD1B380](v14, 0x1000C8077774924);
    if (v21 != v23)
      free(v21);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden), uint64_t))(*a1 + 216))(a1, &v12, 1);
    v9 = (void *)llvm::yaml::ScalarTraits<std::string,void>::input(v12, v13, a1[1], a2);
    if (v10)
    {
      v23[4] = 261;
      v21 = v9;
      *(_QWORD *)&v22 = v10;
      (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v21);
    }
  }
}

uint64_t llvm::yaml::needsQuotes(unsigned __int8 *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  int v4;
  _BOOL4 v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  unsigned int v16;
  int v17;
  _BOOL4 isNumeric;
  void *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;

  if (a2)
  {
    v2 = a2;
    v3 = a1;
    v4 = *a1;
    v5 = 1;
    if ((v4 - 9) >= 5 && v4 != 32)
    {
      v13 = a1[a2 - 1];
      if ((v13 - 9) >= 5)
        v5 = v13 == 32;
    }
    switch(a2)
    {
      case 1uLL:
        if (v4 == 126)
          v5 = 1;
        goto LABEL_41;
      case 5uLL:
        if ((*(_DWORD *)a1 != 1936482662 || a1[4] != 101) && (*(_DWORD *)a1 != 1936482630 || a1[4] != 101))
        {
          v16 = bswap32(*(_DWORD *)a1);
          if (v16 == 1178684499)
            v17 = a1[4] - 69;
          else
            v17 = v16 < 0x46414C53 ? -1 : 1;
          if (v17)
            goto LABEL_41;
        }
        break;
      case 4uLL:
        if (*(_DWORD *)a1 == 1819047278
          || *(_DWORD *)a1 == 1819047246
          || ((v6 = bswap32(*(_DWORD *)a1), v23 = v6 >= 0x4E554C4C, v7 = v6 > 0x4E554C4C, v23) ? (v8 = 0) : (v8 = 1),
              v7 == v8))
        {
          v5 = 1;
        }
        if (*(_DWORD *)a1 != 1702195828 && *(_DWORD *)a1 != 1702195796)
        {
          v9 = bswap32(*(_DWORD *)a1);
          v23 = v9 >= 0x54525545;
          v10 = v9 > 0x54525545;
          v11 = !v23;
          if (v10 != v11)
            goto LABEL_41;
        }
        break;
      default:
        goto LABEL_41;
    }
    v5 = 1;
LABEL_41:
    isNumeric = llvm::yaml::isNumeric(a1, a2);
    v20 = isNumeric || v5;
    if (v19)
      v21 = 1;
    else
      v21 = v20;
    while (1)
    {
      v22 = *v3;
      v23 = v22 - 48 >= 0xA && (v22 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (!v23)
        goto LABEL_59;
      result = 2;
      if (v22 <= 0x2E)
      {
        if (((1 << v22) & 0x700100000200) != 0)
          goto LABEL_59;
        if (((1 << v22) & 0x2400) != 0)
          return result;
      }
      if (v22 - 94 >= 2)
      {
        if (v22 == 127 || (char)v22 < 32)
          return result;
        v21 = 1;
      }
LABEL_59:
      ++v3;
      result = v21;
      if (!--v2)
        return result;
    }
  }
  return 1;
}

BOOL llvm::yaml::isNumeric(_DWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unint64_t first_not_of;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;

  if (!a2)
    return 0;
  if (a2 == 4)
  {
    if (*a1 == 1851878958 || *a1 == 1314999854 || *a1 == 1312902702)
      return 1;
    goto LABEL_11;
  }
  if (a2 != 1)
  {
LABEL_11:
    v3 = *(unsigned __int8 *)a1;
    goto LABEL_12;
  }
  v2 = 0;
  v3 = *(unsigned __int8 *)a1;
  if (v3 == 43 || v3 == 45)
    return v2;
LABEL_12:
  if (v3 == 45 || v3 == 43)
  {
    v4 = (unsigned __int8 *)a1 + 1;
    v5 = a2 - 1;
  }
  else
  {
    v4 = (unsigned __int8 *)a1;
    v5 = a2;
  }
  if (v5 == 4 && (*(_DWORD *)v4 == 1718511918 || *(_DWORD *)v4 == 1718503726 || *(_DWORD *)v4 == 1179535662))
    return 1;
  if (a2 < 2)
    goto LABEL_23;
  if (*(_WORD *)a1 == 28464)
  {
    if (a2 < 3)
      return 0;
    v22 = (unsigned __int8 *)a1 + 2;
    v23 = a2 - 2;
    v20 = "01234567";
    v21 = 8;
    return llvm::StringRef::find_first_not_of(&v22, (unsigned __int8 *)v20, v21, 0) == -1;
  }
  if (*(_WORD *)a1 == 30768)
  {
    if (a2 < 3)
      return 0;
    v22 = (unsigned __int8 *)a1 + 2;
    v23 = a2 - 2;
    v20 = "0123456789abcdefABCDEF";
    v21 = 22;
    return llvm::StringRef::find_first_not_of(&v22, (unsigned __int8 *)v20, v21, 0) == -1;
  }
LABEL_23:
  if (!v5)
    goto LABEL_29;
  v2 = 0;
  v6 = *v4;
  if (v6 != 101 && v6 != 69)
  {
    if (v6 == 46 && (v5 == 1 || !memchr("0123456789", (char)v4[1], 0xBuLL)))
      return 0;
LABEL_29:
    v22 = v4;
    v23 = v5;
    first_not_of = llvm::StringRef::find_first_not_of(&v22, "0123456789", 10, 0);
    if (first_not_of >= v5)
      v8 = v5;
    else
      v8 = first_not_of;
    v9 = v5 - v8;
    if (v5 != v8)
    {
      v10 = &v4[v8];
      v11 = *v10;
      if (v11 == 101 || v11 == 69)
      {
LABEL_41:
        v16 = v9 - 1;
        if (v9 != 1)
        {
          v17 = v10 + 1;
          v18 = v10[1];
          if (v18 != 45 && v18 != 43)
            goto LABEL_46;
          v16 = v9 - 2;
          if (v9 != 2)
          {
            v17 = v10 + 2;
LABEL_46:
            v22 = v17;
            v23 = v16;
            return v16 <= llvm::StringRef::find_first_not_of(&v22, "0123456789", 10, 0);
          }
        }
        return 0;
      }
      if (v11 != 46)
        return 0;
      v12 = v10 + 1;
      v13 = v9 - 1;
      v22 = v10 + 1;
      v23 = v9 - 1;
      v14 = llvm::StringRef::find_first_not_of(&v22, "0123456789", 10, 0);
      if (v14 >= v13)
        v15 = v13;
      else
        v15 = v14;
      v9 = v13 - v15;
      if (v13 != v15)
      {
        v10 = &v12[v15];
        if ((*v10 | 0x20) != 0x65)
          return 0;
        goto LABEL_41;
      }
    }
    return 1;
  }
  return v2;
}

uint64_t llvm::yaml::IO::processKeyWithDefault<TBDFlags,llvm::yaml::EmptyContext>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;

  v13 = 0;
  v12 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == *a3)
    v7 = v6;
  else
    v7 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "flags", 0, v7, &v12, &v13);
  if ((_DWORD)result)
  {
    v14 = 0;
    if ((*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)a1 + 192))(a1, &v14))
    {
      if (v14)
        *a2 = 0;
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "flat_namespace", v9 & *a2))
      {
        *a2 |= 1u;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "not_app_extension_safe", *(_DWORD *)&v10 & ((*a2 & 2u) >> 1)))
      {
        *a2 |= 2u;
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      if ((*(unsigned int (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 200))(a1, "installapi", *(_DWORD *)&v11 & ((*a2 & 4u) >> 2)))
      {
        *a2 |= 4u;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13);
  }
  else if (v12)
  {
    *a2 = *a3;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<llvm::StringRef,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  double v7;
  char v8;
  uint64_t v9;

  v9 = 0;
  v8 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v8, &v9);
  if ((_DWORD)result)
  {
    v7 = llvm::yaml::yamlize<llvm::StringRef>(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 128))(a1, v9, v7);
  }
  return result;
}

double llvm::yaml::yamlize<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  double result;
  unsigned __int8 *v7[2];
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE v17[24];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v16 = v17;
    *(_QWORD *)v17 = v18;
    *(_OWORD *)&v17[8] = xmmword_24AA2AC90;
    v9 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 1;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v8 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    llvm::raw_ostream::SetUnbuffered(&v8);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, *(const void **)a2, *(_QWORD *)(a2 + 8));
    v4 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
    v7[0] = *(unsigned __int8 **)v16;
    v7[1] = v4;
    v5 = llvm::yaml::needsQuotes(v7[0], (unint64_t)v4);
    (*(void (**)(uint64_t, unsigned __int8 **, uint64_t))(*(_QWORD *)a1 + 216))(a1, v7, v5);
    v8 = off_251C13948;
    if (v15 == 1 && v10)
      MEMORY[0x24BD1B380](v10, 0x1000C8077774924);
    if (*(_QWORD **)v17 != v18)
      free(*(void **)v17);
  }
  else
  {
    *(_QWORD *)v17 = 0;
    *(_QWORD *)&v17[8] = 0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 216))(a1, v17, 1);
    result = *(double *)v17;
    *(_OWORD *)a2 = *(_OWORD *)v17;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, llvm::MachO::PackedVersion *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  char v12;
  uint64_t v13;
  _QWORD v14[2];
  void (**v15)(llvm::raw_ostream *__hidden);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *v24;
  __int128 v25;
  _WORD v26[64];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v12 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_DWORD *)a3 == *a4)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, 0, v9, &v12, &v13);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    {
      v23 = &v24;
      v24 = v26;
      v25 = xmmword_24AA2AC90;
      LODWORD(v16) = 0;
      v20 = 0;
      v21 = 0;
      v22 = 1;
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v15 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
      llvm::raw_ostream::SetUnbuffered(&v15);
      llvm::MachO::PackedVersion::print(a3, (llvm::raw_ostream *)&v15);
      v11 = v23[1];
      v14[0] = *v23;
      v14[1] = v11;
      (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v14, 0);
      v15 = off_251C13948;
      if (v22 == 1 && v17)
        MEMORY[0x24BD1B380](v17, 0x1000C8077774924);
      if (v24 != v26)
        free(v24);
    }
    else
    {
      v15 = 0;
      v16 = 0;
      (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden), _QWORD))(*(_QWORD *)a1 + 216))(a1, &v15, 0);
      if ((llvm::MachO::PackedVersion::parse32(a3, (uint64_t)v15, v16) & 1) == 0)
      {
        v26[4] = 261;
        v24 = "invalid packed version string.";
        *(_QWORD *)&v25 = 30;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 248))(a1, &v24);
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13);
  }
  else if (v12)
  {
    *(_DWORD *)a3 = *a4;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKeyWithDefault<SwiftVersion,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3, _BYTE *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  void *v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[2];
  void (**v17)(llvm::raw_ostream *__hidden);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  void **v25;
  void *v26;
  __int128 v27;
  _WORD v28[64];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v14 = 0;
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if (*(unsigned __int8 *)a3 == *a4)
    v9 = v8;
  else
    v9 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, v9, &v14, &v15);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    {
      v25 = &v26;
      v26 = v28;
      v27 = xmmword_24AA2AC90;
      LODWORD(v18) = 0;
      v22 = 0;
      v23 = 0;
      v24 = 1;
      v20 = 0;
      v21 = 0;
      v19 = 0;
      v17 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
      llvm::raw_ostream::SetUnbuffered(&v17);
      llvm::yaml::ScalarTraits<SwiftVersion,void>::output(a3, a1[1], (llvm::raw_ostream *)&v17);
      v11 = v25[1];
      v16[0] = *v25;
      v16[1] = v11;
      (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v16, 0);
      v17 = off_251C13948;
      if (v24 == 1 && v19)
        MEMORY[0x24BD1B380](v19, 0x1000C8077774924);
      if (v26 != v28)
        free(v26);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden), _QWORD))(*a1 + 216))(a1, &v17, 0);
      v12 = (char *)llvm::yaml::ScalarTraits<SwiftVersion,void>::input((uint64_t)v17, v18, a1[1], (unint64_t *)a3);
      if (v13)
      {
        v28[4] = 261;
        v26 = v12;
        *(_QWORD *)&v27 = v13;
        (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v26);
      }
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v15);
  }
  else if (v14)
  {
    *(_BYTE *)a3 = *a4;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<std::vector<llvm::MachO::Target>,llvm::yaml::EmptyContext>(uint64_t a1, char **a2)
{
  uint64_t result;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v25 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "targets", 1, 0, &v25, &v26);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      v5 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
    if (v5)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        v27 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, v6, &v27))
        {
          v8 = *a2;
          v9 = a2[1];
          v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a2) >> 3);
          if (v10 <= v6)
          {
            v11 = v6 + 1;
            v12 = v6 + 1 - v10;
            v13 = a2[2];
            if (0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 3) >= v12)
            {
              bzero(a2[1], 24 * ((24 * v12 - 24) / 0x18) + 24);
              a2[1] = &v9[24 * ((24 * v12 - 24) / 0x18) + 24];
            }
            else
            {
              v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v8) >> 3);
              if (2 * v14 > v11)
                v11 = 2 * v14;
              if (v14 >= 0x555555555555555)
                v15 = 0xAAAAAAAAAAAAAAALL;
              else
                v15 = v11;
              v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v15);
              v18 = v17;
              v19 = &v16[24 * v10];
              v20 = 24 * ((24 * v12 - 24) / 0x18) + 24;
              bzero(v19, v20);
              v22 = *a2;
              v21 = a2[1];
              v23 = v19;
              if (v21 != *a2)
              {
                do
                {
                  v24 = *(_OWORD *)(v21 - 24);
                  *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
                  *(_OWORD *)(v23 - 24) = v24;
                  v23 -= 24;
                  v21 -= 24;
                }
                while (v21 != v22);
                v21 = *a2;
              }
              *a2 = v23;
              a2[1] = &v19[v20];
              a2[2] = &v16[24 * v18];
              if (v21)
                operator delete(v21);
            }
            v8 = *a2;
          }
          llvm::yaml::yamlize<llvm::MachO::Target>(a1, (unsigned __int8 *)&v8[24 * v6]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v27);
        }
        ++v6;
      }
      while (v6 != v7);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v26);
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  unint64_t i;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31[2];
  void (**v32)(llvm::raw_ostream *__hidden);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  _BYTE v41[24];
  _QWORD v42[19];

  v42[17] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v28 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v28, &v29);
  if ((_DWORD)result)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      v8 = ((unint64_t)(a3[1] - *a3) >> 4);
    else
      v8 = v7;
    if ((_DWORD)v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v30 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, i, &v30))
        {
          v10 = *a3;
          v11 = a3[1];
          v12 = (v11 - *a3) >> 4;
          if (v12 <= i)
          {
            v13 = i + 1;
            v14 = i + 1 - v12;
            v15 = a3[2];
            if (v14 <= (v15 - v11) >> 4)
            {
              bzero(a3[1], 16 * v14);
              a3[1] = &v11[16 * v14];
            }
            else
            {
              v16 = v15 - v10;
              if (v16 >> 3 > v13)
                v13 = v16 >> 3;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
                v17 = 0xFFFFFFFFFFFFFFFLL;
              else
                v17 = v13;
              v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v17);
              v20 = v19;
              v21 = &v18[16 * v12];
              bzero(v21, 16 * v14);
              v23 = *a3;
              v22 = a3[1];
              v24 = v21;
              if (v22 != *a3)
              {
                do
                {
                  *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
                  v24 -= 16;
                  v22 -= 16;
                }
                while (v22 != v23);
                v22 = *a3;
              }
              *a3 = v24;
              a3[1] = &v21[16 * v14];
              a3[2] = &v18[16 * v20];
              if (v22)
                operator delete(v22);
            }
            v10 = *a3;
          }
          v25 = &v10[16 * i];
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
          {
            v40 = v41;
            *(_QWORD *)v41 = v42;
            *(_OWORD *)&v41[8] = xmmword_24AA2AC90;
            v33 = 0;
            v37 = 0;
            v38 = 0;
            v39 = 1;
            v35 = 0;
            v36 = 0;
            v34 = 0;
            v32 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
            llvm::raw_ostream::SetUnbuffered(&v32);
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, *(const void **)v25, *((_QWORD *)v25 + 1));
            v26 = (unsigned __int8 *)*((_QWORD *)v40 + 1);
            v31[0] = *(unsigned __int8 **)v40;
            v31[1] = v26;
            v27 = llvm::yaml::needsQuotes(v31[0], (unint64_t)v26);
            (*(void (**)(uint64_t, unsigned __int8 **, uint64_t))(*(_QWORD *)a1 + 216))(a1, v31, v27);
            v32 = off_251C13948;
            if (v39 == 1 && v34)
              MEMORY[0x24BD1B380](v34, 0x1000C8077774924);
            if (*(_QWORD **)v41 != v42)
              free(*(void **)v41);
          }
          else
          {
            *(_QWORD *)v41 = 0;
            *(_QWORD *)&v41[8] = 0;
            (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 216))(a1, v41, 1);
            *(_OWORD *)v25 = *(_OWORD *)v41;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v30);
        }
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v29);
  }
  return result;
}

uint64_t llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!(_DWORD)result || *(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    return llvm::yaml::IO::processKey<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, a2, (char **)a3, 0);
  return result;
}

uint64_t llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::denormalize(llvm::yaml::IO &)::{lambda(std::vector<`anonymous namespace'::SymbolSection> const&,llvm::MachO::SymbolFlags)#1}::operator()(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  size_t v34;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = result;
    if ((_DWORD)a4 == 8)
      v8 = 4;
    else
      v8 = 2;
    v9 = v8 | a4;
    v10 = a4 | 1;
    do
    {
      v11 = v6[17];
      v12 = v6[18];
      while (v11 != v12)
      {
        v13 = *(const void **)v11;
        v14 = *(_QWORD *)(v11 + 8);
        v11 += 16;
        result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(*(_QWORD *)v7 + 448), 0, v13, v14, a4, v6);
      }
      v15 = v6[20];
      v16 = v6[21];
      while (v15 != v16)
      {
        v17 = *(const void **)v15;
        v18 = *(_QWORD *)(v15 + 8);
        v15 += 16;
        result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(*(_QWORD *)v7 + 448), 1, v17, v18, a4, v6);
      }
      v19 = v6[23];
      v20 = v6[24];
      while (v19 != v20)
      {
        v21 = *(const void **)v19;
        v22 = *(_QWORD *)(v19 + 8);
        v19 += 16;
        result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(*(_QWORD *)v7 + 448), 2, v21, v22, a4, v6);
      }
      v23 = v6[26];
      v24 = v6[27];
      while (v23 != v24)
      {
        v25 = *(const void **)v23;
        v26 = *(_QWORD *)(v23 + 8);
        v23 += 16;
        result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(*(_QWORD *)v7 + 448), 3, v25, v26, a4, v6);
      }
      v27 = v6[29];
      v28 = v6[30];
      while (v27 != v28)
      {
        v29 = *(const void **)v27;
        v30 = *(_QWORD *)(v27 + 8);
        v27 += 16;
        result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(*(_QWORD *)v7 + 448), 0, v29, v30, v9, v6);
      }
      v31 = v6[32];
      v32 = v6[33];
      while (v31 != v32)
      {
        v33 = *(const void **)v31;
        v34 = *(_QWORD *)(v31 + 8);
        v31 += 16;
        result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(_QWORD *)(*(_QWORD *)v7 + 448), 0, v33, v34, v10, v6);
      }
      v6 += 35;
    }
    while (v6 != a3);
  }
  return result;
}

void **std::vector<`anonymous namespace'::SymbolSection>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<`anonymous namespace'::MetadataSection>::~vector[abi:nn180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 48;
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t llvm::yaml::IO::mapOptional<std::vector<`anonymous namespace'::ExportSection>>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char **v15;
  uint64_t v16;
  const char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21[2];
  void *v22;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  if (!(_DWORD)result || *(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v19 = 0;
    v18 = 0;
    result = (*(uint64_t (**)(_QWORD *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "exports", 0, 0, &v18, &v19);
    if ((_DWORD)result)
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1))
        v5 = 1749801491 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
      if (v5)
      {
        v6 = 0;
        v7 = (_QWORD *)(a2 + 16);
        v8 = 216 * v5;
        v9 = 1;
        do
        {
          v20 = 0;
          if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 32))(a1, v9 - 1, &v20))
          {
            v10 = *(_QWORD *)(a2 + 8);
            v11 = 0x84BDA12F684BDA13 * ((v10 - *(_QWORD *)a2) >> 3);
            if (v11 <= v9 - 1)
            {
              if (0x84BDA12F684BDA13 * ((*v7 - v10) >> 3) >= v9 - v11)
              {
                bzero(*(void **)(a2 + 8), v6 - 8 * ((v10 - *(_QWORD *)a2) >> 3) - (v6 - 8 * ((v10 - *(_QWORD *)a2) >> 3)) % 0xD8uLL + 216);
                *(_QWORD *)(a2 + 8) = v10 + v6 - 216 * v11 - (v6 - 216 * v11) % 0xD8 + 216;
              }
              else
              {
                v12 = 0x97B425ED097B426 * ((uint64_t)(*v7 - *(_QWORD *)a2) >> 3);
                if (v12 <= v9)
                  v12 = v9;
                if (0x84BDA12F684BDA13 * ((uint64_t)(*v7 - *(_QWORD *)a2) >> 3) >= 0x97B425ED097B42)
                  v13 = 0x12F684BDA12F684;
                else
                  v13 = v12;
                v14 = (char *)v22;
                bzero(v22, v6 - 216 * v11 - (v6 - 216 * v11) % 0xD8 + 216);
                v22 = &v14[v6 - 216 * v11 - (v6 - 216 * v11) % 0xD8 + 216];
              }
            }
            v15 = (char **)(*(_QWORD *)a2 + v6);
            (*(void (**)(_QWORD *))(*a1 + 104))(a1);
            v16 = a1[1];
            llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>((uint64_t)a1, v15);
            if (*(_DWORD *)(v16 + 48) == 8)
              v17 = "allowed-clients";
            else
              v17 = "allowable-clients";
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)v17, (uint64_t)(v15 + 3));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"re-exports", (uint64_t)(v15 + 6));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"symbols", (uint64_t)(v15 + 9));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"objc-classes", (uint64_t)(v15 + 12));
            if (*(_DWORD *)(v16 + 48) == 32)
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"objc-eh-types", (uint64_t)(v15 + 15));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"objc-ivars", (uint64_t)(v15 + 18));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"weak-def-symbols", (uint64_t)(v15 + 21));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"thread-local-symbols", (uint64_t)(v15 + 24));
            (*(void (**)(_QWORD *))(*a1 + 112))(a1);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v20);
          }
          ++v9;
          v6 += 216;
        }
        while (v8 != v6);
      }
      (*(void (**)(_QWORD *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 128))(a1, v19);
    }
  }
  return result;
}

void `anonymous namespace'::ExportSection::~ExportSection(_anonymous_namespace_::ExportSection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  v10 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v10;
    operator delete(v10);
  }
}

uint64_t *std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::__map_value_compare<llvm::MachO::Symbol const*,std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::less<llvm::MachO::Symbol const*>,true>,std::allocator<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>>>::__emplace_unique_key_args<llvm::MachO::Symbol const*,std::piecewise_construct_t const&,std::tuple<llvm::MachO::Symbol const* const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((_DWORD *)v7 + 10) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

__n128 std::allocator_traits<std::allocator<`anonymous namespace'::ExportSection>>::construct[abi:nn180100]<`anonymous namespace'::ExportSection,`anonymous namespace'::ExportSection,void>(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  result = *(__n128 *)(a2 + 192);
  *((__n128 *)a1 + 12) = result;
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  return result;
}

_QWORD *std::__split_buffer<`anonymous namespace'::ExportSection>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x12F684BDA12F685)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(216 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[216 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[216 * a2];
  return a1;
}

void std::vector<`anonymous namespace'::ExportSection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v6 -= 27;
    v4 -= 216;
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<`anonymous namespace'::ExportSection>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::allocator_traits<std::allocator<`anonymous namespace'::UndefinedSection>>::construct[abi:nn180100]<`anonymous namespace'::UndefinedSection,`anonymous namespace'::UndefinedSection,void>(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 15) = result;
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  return result;
}

_QWORD *std::__split_buffer<`anonymous namespace'::UndefinedSection>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1C71C71C71C71C8)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(144 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[144 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[144 * a2];
  return a1;
}

void std::vector<`anonymous namespace'::UndefinedSection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v6 -= 18;
    v4 -= 144;
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<`anonymous namespace'::UndefinedSection>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator_traits<std::allocator<`anonymous namespace'::UndefinedSection>>::destroy[abi:nn180100]<`anonymous namespace'::UndefinedSection,void>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
}

uint64_t llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>(uint64_t a1, char **a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  size_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unsigned __int8 *v20;
  char *v21;
  char v22;
  const char *ArchitectureName;
  size_t v24;
  void *v25;
  uint64_t v26;
  size_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  void (**v32)(llvm::raw_ostream *__hidden);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  void **v40;
  void *v41;
  __int128 v42;
  _QWORD v43[18];

  v43[16] = *MEMORY[0x24BDAC8D0];
  v29 = 0;
  v28 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, "archs", 1, 0, &v28, &v29);
  if ((_DWORD)result)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      v6 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    else
      v6 = v5;
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = v43;
      v26 = v6;
      do
      {
        v30 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, v7, &v30))
        {
          v9 = (unint64_t)*a2;
          v10 = a2[1];
          v11 = (char *)(v10 - *a2);
          if ((unint64_t)v11 <= v7)
          {
            v13 = v8;
            v14 = v7 + 1;
            v15 = v7 + 1 - (_QWORD)v11;
            v16 = (unsigned __int8 *)a2[2];
            if (v16 - (unsigned __int8 *)v10 >= v15)
            {
              bzero(a2[1], v7 + 1 - (_QWORD)v11);
              a2[1] = &v10[v15];
              v12 = (char *)v9;
              v8 = v13;
            }
            else
            {
              v17 = (unint64_t)&v16[-v9];
              v18 = 2 * v17;
              if (2 * v17 <= v14)
                v18 = v7 + 1;
              if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
                v19 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v19 = v18;
              v27 = v19;
              v20 = (unsigned __int8 *)operator new(v19);
              v12 = &v11[(_QWORD)v20];
              bzero(v12, v15);
              if (v10 == (char *)v9)
              {
                v8 = v13;
              }
              else
              {
                v21 = &v10[~v9];
                v8 = v13;
                do
                {
                  v22 = *--v10;
                  (v21--)[(_QWORD)v20] = v22;
                }
                while (v10 != (char *)v9);
                v12 = (char *)v20;
              }
              *a2 = v12;
              a2[1] = (char *)&v20[v14];
              a2[2] = (char *)&v20[v27];
              v6 = v26;
              if (v9)
              {
                operator delete((void *)v9);
                v12 = *a2;
              }
            }
          }
          else
          {
            v12 = *a2;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
          {
            v40 = &v41;
            v41 = v8;
            v42 = xmmword_24AA2AC90;
            v33 = 0;
            v37 = 0;
            v38 = 0;
            v39 = 1;
            v35 = 0;
            v36 = 0;
            v34 = 0;
            v32 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
            llvm::raw_ostream::SetUnbuffered(&v32);
            ArchitectureName = llvm::MachO::getArchitectureName(v12[v7]);
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, ArchitectureName, v24);
            v25 = v40[1];
            v31[0] = *v40;
            v31[1] = v25;
            (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 216))(a1, v31, 0);
            v32 = off_251C13948;
            if (v39 == 1 && v34)
              MEMORY[0x24BD1B380](v34, 0x1000C8077774924);
            if (v41 != v8)
              free(v41);
          }
          else
          {
            v41 = 0;
            *(_QWORD *)&v42 = 0;
            (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 216))(a1, &v41, 0);
            v12[v7] = llvm::MachO::getArchitectureFromName((uint64_t)v41, v42);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v30);
        }
        ++v7;
      }
      while (v7 != v6);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v29);
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  void *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  __int128 v21;
  _WORD v22[64];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v8 = 0;
  result = (*(uint64_t (**)(uint64_t *, const char *, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "platform", 1, 0, &v8, &v9);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    {
      v19 = &v20;
      v20 = v22;
      v21 = xmmword_24AA2AC90;
      LODWORD(v12) = 0;
      v16 = 0;
      v17 = 0;
      v18 = 1;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      v11 = (unsigned __int16 *)&off_251C13B38;
      llvm::raw_ostream::SetUnbuffered(&v11);
      llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::output(a2, a1[1], (llvm::raw_ostream *)&v11);
      v5 = v19[1];
      v10[0] = *v19;
      v10[1] = v5;
      (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
      v11 = (unsigned __int16 *)off_251C13948;
      if (v18 == 1 && v13)
        MEMORY[0x24BD1B380](v13, 0x1000C8077774924);
      if (v20 != v22)
        free(v20);
    }
    else
    {
      v11 = 0;
      v12 = 0;
      (*(void (**)(uint64_t *, unsigned __int16 **, _QWORD))(*a1 + 216))(a1, &v11, 0);
      v6 = (char *)llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input(v11, v12, a1[1], (uint64_t **)a2);
      if (v7)
      {
        v22[4] = 261;
        v20 = v6;
        *(_QWORD *)&v21 = v7;
        (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v20);
      }
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v9);
  }
  return result;
}

_QWORD *llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD::synthesizeTargets(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t *v29;
  int v30;
  int v31;
  char v32[4];
  int v33;
  uint64_t v34;

  *result = result + 2;
  result[1] = 0x500000000;
  v3 = *(_QWORD *)(a3 + 48);
  if (v3)
    v4 = *(_QWORD **)(a3 + 32);
  else
    v4 = *(_QWORD **)a3;
  if (v3)
    v5 = a3 + 40;
  else
    v5 = *(_QWORD *)a3 + 4 * *(unsigned int *)(a3 + 8);
  if (v4 != (_QWORD *)v5)
  {
    v6 = a2;
    v7 = (uint64_t)result;
    v8 = 0;
    v9 = a2;
    if ((a2 & 7) != 0)
      v10 = 9;
    else
      v10 = 4;
    if ((a2 & 7) != 0)
      v11 = 8;
    else
      v11 = 3;
    if ((a2 & 7) != 0)
      v12 = 7;
    else
      v12 = 2;
    v13 = &v34;
    do
    {
      v14 = (int *)v4 + 7;
      if (!v3)
        v14 = (int *)v4;
      v15 = *v14;
      if (v15 == 4)
      {
        v16 = v10;
        if ((v6 & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        v16 = v11;
        if (v15 != 3)
        {
          if (v15 == 2)
            v16 = v12;
          else
            v16 = v15;
        }
        if ((v6 & 1) == 0)
        {
LABEL_26:
          v17 = 0;
          while (v17 != 31)
          {
            v18 = v17 + 1;
            v19 = v9 >> v17++;
            if ((v19 & 2) != 0)
            {
              if (v18 != 0xFFFFFFFFLL)
                goto LABEL_42;
              goto LABEL_30;
            }
          }
          goto LABEL_30;
        }
      }
      LODWORD(v18) = 0;
LABEL_42:
      if ((_BYTE)v18 || v16 != 6)
      {
        if (v8 >= *(_DWORD *)(v7 + 12))
        {
          v32[0] = v18;
          v33 = v16;
          *v13 = 0;
          v13[1] = 0;
          v30 = v12;
          v31 = v10;
          v29 = v13;
          result = (_QWORD *)llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(v7, (unint64_t)v32, 1);
          v13 = v29;
          v12 = v30;
          v10 = v31;
          v27 = *(_QWORD *)v7 + 24 * *(unsigned int *)(v7 + 8);
          v28 = *(_OWORD *)result;
          *(_QWORD *)(v27 + 16) = result[2];
          *(_OWORD *)v27 = v28;
        }
        else
        {
          v23 = *(_QWORD *)v7 + 24 * v8;
          *(_BYTE *)v23 = v18;
          *(_DWORD *)(v23 + 4) = v16;
          *(_QWORD *)(v23 + 8) = 0;
          *(_QWORD *)(v23 + 16) = 0;
        }
        v8 = *(_DWORD *)(v7 + 8) + 1;
        *(_DWORD *)(v7 + 8) = v8;
      }
      v24 = v18;
      if (v18 <= 0x1FuLL)
        v25 = 31;
      else
        v25 = v18;
      while (v25 != v24)
      {
        LODWORD(v18) = v24 + 1;
        v26 = v9 >> v24++;
        if ((v26 & 2) != 0)
        {
          if ((_DWORD)v18 != -1)
            goto LABEL_42;
          break;
        }
      }
LABEL_30:
      if (v3)
      {
        v20 = (_QWORD *)v4[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v4[2];
            v22 = *v21 == (_QWORD)v4;
            v4 = v21;
          }
          while (!v22);
        }
      }
      else
      {
        v21 = (_QWORD *)((char *)v4 + 4);
      }
      v4 = v21;
    }
    while (v21 != (_QWORD *)v5);
  }
  return result;
}

void std::__shared_ptr_pointer<llvm::MachO::InterfaceFile *,std::shared_ptr<llvm::MachO::InterfaceFile>::__shared_ptr_default_delete<llvm::MachO::InterfaceFile,llvm::MachO::InterfaceFile>,std::allocator<llvm::MachO::InterfaceFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

llvm::MachO::InterfaceFile *std::__shared_ptr_pointer<llvm::MachO::InterfaceFile *,std::shared_ptr<llvm::MachO::InterfaceFile>::__shared_ptr_default_delete<llvm::MachO::InterfaceFile,llvm::MachO::InterfaceFile>,std::allocator<llvm::MachO::InterfaceFile>>::__on_zero_shared(uint64_t a1)
{
  llvm::MachO::InterfaceFile *result;

  result = *(llvm::MachO::InterfaceFile **)(a1 + 24);
  if (result)
  {
    llvm::MachO::InterfaceFile::~InterfaceFile(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::yaml::ScalarEnumerationTraits<llvm::MachO::ObjCConstraintType,void>::enumeration(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2)
    v5 = 0;
  else
    v5 = v4;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "none", v5))
    *a2 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 1)
    v7 = v6;
  else
    v7 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "retain_release", v7))
  {
    *a2 = 1;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 2)
    v9 = v8;
  else
    v9 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "retain_release_for_simulator", v9))
  {
    *a2 = 2;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 3)
    v11 = v10;
  else
    v11 = 0;
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "retain_release_or_gc", v11))
  {
    *a2 = 3;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*a2 == 4)
    v13 = v12;
  else
    v13 = 0;
  result = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 168))(a1, "gc", v13);
  if ((_DWORD)result)
    *a2 = 4;
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::output(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;

  if (!a2
    || *(_DWORD *)(a2 + 48) != 32
    || (v11 = 1,
        !llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::count((uint64_t)a1, &v11))
    || (v10 = 6,
        !llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::count((uint64_t)a1, &v10)))
  {
    v5 = a1[6];
    v6 = v5 == 0;
    if (v5)
      v7 = a1[4];
    else
      v7 = *a1;
    v8 = v7 + 28;
    if (v6)
      v8 = *a1;
    __asm { BR              X10 }
  }
  return llvm::raw_ostream::operator<<(a3, "zippered", 8uLL);
}

const char *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  const char *result;
  int v7;
  int v8;
  int v10;
  uint64_t *v11;
  int v13;
  int v14;
  int v16;
  int v17;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  int v27;
  _BYTE v28[24];

  if (a2 == 8)
  {
    if (*(_QWORD *)a1 != 0x646572657070697ALL)
    {
      if (*(_QWORD *)a1 != 0x736F656764697262)
        return "unknown platform";
      v10 = 5;
LABEL_16:
      v27 = v10;
LABEL_17:
      v11 = &v25;
      goto LABEL_18;
    }
    if (a3 && *(_DWORD *)(a3 + 48) == 32)
    {
      v27 = 1;
      llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert(a4, &v27, (uint64_t)v28);
      v27 = 6;
      v11 = (uint64_t *)&v26;
LABEL_18:
      llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert(a4, &v27, (uint64_t)v11);
      return 0;
    }
    return "invalid platform";
  }
  else
  {
    result = "unknown platform";
    switch(a2)
    {
      case 3:
        v7 = *a1;
        v8 = *((unsigned __int8 *)a1 + 2);
        if (v7 == 28521 && v8 == 115)
        {
          v10 = 2;
          goto LABEL_16;
        }
        break;
      case 4:
        if (*(_DWORD *)a1 == 1936684660)
        {
          v10 = 3;
          goto LABEL_16;
        }
        break;
      case 6:
        if (*(_DWORD *)a1 == 1868783981 && a1[2] == 30835)
        {
          v10 = 1;
          goto LABEL_16;
        }
        v13 = *(_DWORD *)a1;
        v14 = a1[2];
        if (v13 == 1836281705 && v14 == 25441)
          goto LABEL_48;
        break;
      case 7:
        v16 = *(_DWORD *)a1;
        v17 = *(_DWORD *)((char *)a1 + 3);
        if (v16 == 1668571511 && v17 == 1936681059)
        {
          v10 = 4;
          goto LABEL_16;
        }
        break;
      case 9:
        v19 = *(_QWORD *)a1;
        v20 = *((unsigned __int8 *)a1 + 8);
        if (v19 == 0x696B726576697264 && v20 == 116)
        {
          v10 = 10;
          goto LABEL_16;
        }
        break;
      case 11:
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD *)((char *)a1 + 3);
        if (v22 == 0x6C6174616363616DLL && v23 == 0x7473796C61746163)
        {
LABEL_48:
          v27 = 6;
          if (!a3 || *(_DWORD *)(a3 + 48) == 32)
            goto LABEL_17;
          return "invalid platform";
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<SwiftVersion,void>::output(llvm::raw_ostream *result, int a2, llvm::raw_ostream *this)
{
  uint64_t v3;
  const char *v4;
  char v5;
  __int16 v6;

  switch(*(_BYTE *)result)
  {
    case 1:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) <= 2)
      {
        v4 = "1.0";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      v5 = 48;
      goto LABEL_16;
    case 2:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) <= 2)
      {
        v4 = "1.1";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      v5 = 49;
LABEL_16:
      *(_BYTE *)(v3 + 2) = v5;
      v6 = 11825;
      goto LABEL_17;
    case 3:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) <= 2)
      {
        v4 = "2.0";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      *(_BYTE *)(v3 + 2) = 48;
      v6 = 11826;
      goto LABEL_17;
    case 4:
      v3 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 2)
      {
        *(_BYTE *)(v3 + 2) = 48;
        v6 = 11827;
LABEL_17:
        *(_WORD *)v3 = v6;
        *((_QWORD *)this + 4) += 3;
      }
      else
      {
        v4 = "3.0";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      return result;
    default:
      return write_unsigned<unsigned long>(this, *(unsigned __int8 *)result, 0, 0, 0);
  }
}

const char *llvm::yaml::ScalarTraits<SwiftVersion,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  const char *result;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_DWORD *)(a3 + 48) != 64)
  {
    if (a2 == 3)
    {
      if (*(_WORD *)a1 == 11825 && *(_BYTE *)(a1 + 2) == 48)
      {
        v10 = 1;
      }
      else if (*(_WORD *)a1 == 11825 && *(_BYTE *)(a1 + 2) == 49)
      {
        v10 = 2;
      }
      else if (*(_WORD *)a1 == 11826 && *(_BYTE *)(a1 + 2) == 48)
      {
        v10 = 3;
      }
      else
      {
        if (*(_WORD *)a1 != 11827 || *(_BYTE *)(a1 + 2) != 48)
          goto LABEL_19;
        v10 = 4;
      }
      result = 0;
      *(_BYTE *)a4 = v10;
      return result;
    }
LABEL_19:
    *(_BYTE *)a4 = 0;
  }
  v11 = 0;
  v12 = a1;
  v13 = a2;
  if ((llvm::consumeUnsignedInteger((llvm *)&v12, (llvm::StringRef *)0xA, &v11, a4) & 1) != 0 || v13 || v11 >= 0x100)
    return "invalid Swift ABI version.";
  result = 0;
  *(_BYTE *)a4 = v11;
  return result;
}

uint64_t _GLOBAL__sub_I_InstrProf_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_26, 0, 0);
  byte_257963910 = 0;
  qword_257963918 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257963920 = 0;
  _MergedGlobals_26 = (uint64_t)off_251C123A8;
  qword_257963928 = (uint64_t)&off_251C12520;
  qword_257963930 = (uint64_t)&off_251C12410;
  qword_257963948 = (uint64_t)&qword_257963930;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"static-func-full-module-prefix", 0x1EuLL);
  byte_257963910 = 1;
  word_257963920 = 257;
  word_25796389A = word_25796389A & 0xFF9F | 0x20;
  qword_2579638B0 = (uint64_t)"Use full module build paths in the profile counter names for static functions.";
  unk_2579638B8 = 78;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_26);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_26, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257963950, 0, 0);
  dword_2579639D0 = 0;
  qword_2579639D8 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_2579639E0 = 0;
  qword_257963950 = (uint64_t)off_251C12270;
  qword_2579639E8 = (uint64_t)&off_251C121B0;
  qword_2579639F0[0] = &off_251C17200;
  qword_257963A08 = (uint64_t)qword_2579639F0;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"static-func-strip-dirname-prefix", 0x20uLL);
  dword_2579639D0 = 0;
  byte_2579639E4 = 1;
  dword_2579639E0 = 0;
  word_25796395A = word_25796395A & 0xFF9F | 0x20;
  qword_257963970 = (uint64_t)"Strip specified level of directory name from source path in the profile counter name for static functions.";
  unk_257963978 = 106;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257963950);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257963950, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)qword_257963A10, 0, 0);
  byte_257963A90 = 0;
  qword_257963AA0 = 0;
  qword_257963A98 = (uint64_t)&off_251C12500;
  qword_257963A10[0] = (uint64_t)off_251C123A8;
  qword_257963AA8 = (uint64_t)&off_251C12520;
  qword_257963AB0 = (uint64_t)&off_251C12410;
  qword_257963AC8 = (uint64_t)&qword_257963AB0;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"enable-name-compression", 0x17uLL);
  qword_257963A30 = (uint64_t)"Enable name/filename string compression";
  unk_257963A38 = 39;
  byte_257963A90 = 1;
  LOWORD(qword_257963AA0) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_257963A10);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, qword_257963A10, &dword_24A800000);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6)
{
  _DWORD *v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;

  v12 = a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  v13 = v12;
  v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

uint64_t _GLOBAL__sub_I_ProfileSummaryBuilder_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v7;
  int v8;

  v8 = 1;
  v7.n128_u64[0] = (unint64_t)"Merge context profiles before calculating thresholds.";
  v7.n128_u64[1] = 53;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&llvm::UseContextLessSummary, "profile-summary-contextless", &v8, &v7);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::UseContextLessSummary, &dword_24A800000);
  v0 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryCutoffHot, 0, 0);
  dword_2579661A0 = 0;
  qword_2579661A8 = (uint64_t)&off_251C12478;
  *(_QWORD *)&dword_2579661B0 = 0;
  llvm::ProfileSummaryCutoffHot = (uint64_t)off_251C122D8;
  qword_2579661B8 = (uint64_t)&off_251C12180;
  qword_2579661C0 = (uint64_t)&off_251C17248;
  qword_2579661D8 = (uint64_t)&qword_2579661C0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"profile-summary-cutoff-hot", 0x1AuLL);
  word_25796612A = word_25796612A & 0xFF9F | 0x20;
  dword_2579661A0 = 990000;
  byte_2579661B4 = 1;
  dword_2579661B0 = 990000;
  qword_257966140 = (uint64_t)"A count is hot if it exceeds the minimum count to reach this percentile of total counts.";
  unk_257966148 = 88;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryCutoffHot);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &llvm::ProfileSummaryCutoffHot, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryCutoffCold, 0, 0);
  dword_257966260 = 0;
  qword_257966268 = (uint64_t)&off_251C12478;
  *(_QWORD *)&dword_257966270 = 0;
  llvm::ProfileSummaryCutoffCold = (uint64_t)off_251C122D8;
  qword_257966278 = (uint64_t)&off_251C12180;
  qword_257966280 = (uint64_t)&off_251C17248;
  qword_257966298 = (uint64_t)&qword_257966280;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"profile-summary-cutoff-cold", 0x1BuLL);
  word_2579661EA = word_2579661EA & 0xFF9F | 0x20;
  dword_257966260 = 999999;
  byte_257966274 = 1;
  dword_257966270 = 999999;
  qword_257966200 = (uint64_t)"A count is cold if it is below the minimum count to reach this percentile of total counts.";
  unk_257966208 = 90;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryCutoffCold);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &llvm::ProfileSummaryCutoffCold, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryHugeWorkingSetSizeThreshold, 0, 0);
  dword_257966320 = 0;
  qword_257966328 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257966330 = 0;
  llvm::ProfileSummaryHugeWorkingSetSizeThreshold = (uint64_t)off_251C12270;
  qword_257966338 = (uint64_t)&off_251C121B0;
  qword_257966340 = (uint64_t)&off_251C17200;
  qword_257966358 = (uint64_t)&qword_257966340;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"profile-summary-huge-working-set-size-threshold", 0x2FuLL);
  word_2579662AA = word_2579662AA & 0xFF9F | 0x20;
  dword_257966320 = 15000;
  byte_257966334 = 1;
  dword_257966330 = 15000;
  qword_2579662C0 = (uint64_t)"The code working set size is considered huge if the number of blocks required to reach the "
                             "-profile-summary-cutoff-hot percentile exceeds this count.";
  unk_2579662C8 = 149;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryHugeWorkingSetSizeThreshold);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::ProfileSummaryHugeWorkingSetSizeThreshold, &dword_24A800000);
  v3 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryLargeWorkingSetSizeThreshold, 0, 0);
  dword_2579663E0 = 0;
  qword_2579663E8 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_2579663F0 = 0;
  llvm::ProfileSummaryLargeWorkingSetSizeThreshold = (uint64_t)off_251C12270;
  qword_2579663F8 = (uint64_t)&off_251C121B0;
  qword_257966400 = (uint64_t)&off_251C17200;
  qword_257966418 = (uint64_t)&qword_257966400;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"profile-summary-large-working-set-size-threshold", 0x30uLL);
  word_25796636A = word_25796636A & 0xFF9F | 0x20;
  dword_2579663E0 = 12500;
  byte_2579663F4 = 1;
  dword_2579663F0 = 12500;
  qword_257966380 = (uint64_t)"The code working set size is considered large if the number of blocks required to reach the"
                             " -profile-summary-cutoff-hot percentile exceeds this count.";
  unk_257966388 = 150;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryLargeWorkingSetSizeThreshold);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::ProfileSummaryLargeWorkingSetSizeThreshold, &dword_24A800000);
  v4 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryHotCount, 0, 0);
  xmmword_2579664A0 = 0u;
  unk_2579664B0 = 0u;
  *((_QWORD *)&xmmword_2579664A0 + 1) = &off_251C12D28;
  llvm::ProfileSummaryHotCount = (uint64_t)off_251C12CC0;
  qword_2579664C0 = (uint64_t)&off_251C121E0;
  qword_2579664C8 = (uint64_t)&off_251C12D48;
  qword_2579664E0 = (uint64_t)&qword_2579664C8;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"profile-summary-hot-count", 0x19uLL);
  word_25796642A = word_25796642A & 0xFF9F | 0x40;
  qword_257966440 = (uint64_t)"A fixed hot count that overrides the count derived from profile-summary-cutoff-hot";
  unk_257966448 = 82;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryHotCount);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt, &llvm::ProfileSummaryHotCount, &dword_24A800000);
  v5 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryColdCount, 0, 0);
  xmmword_257966568 = 0u;
  unk_257966578 = 0u;
  *((_QWORD *)&xmmword_257966568 + 1) = &off_251C12D28;
  llvm::ProfileSummaryColdCount = (uint64_t)off_251C12CC0;
  qword_257966588 = (uint64_t)&off_251C121E0;
  qword_257966590 = (uint64_t)&off_251C12D48;
  qword_2579665A8 = (uint64_t)&qword_257966590;
  llvm::cl::Option::setArgStr(v5, (uint64_t *)"profile-summary-cold-count", 0x1AuLL);
  word_2579664F2 = word_2579664F2 & 0xFF9F | 0x40;
  qword_257966508 = (uint64_t)"A fixed cold count that overrides the count derived from profile-summary-cutoff-cold";
  unk_257966510 = 84;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryColdCount);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt, &llvm::ProfileSummaryColdCount, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_SampleProf_cpp()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::cl::Option::Option((uint64_t)&qword_257963C50, 0, 0);
  xmmword_257963CD0 = 0u;
  *(_OWORD *)&qword_257963CE0 = 0u;
  *((_QWORD *)&xmmword_257963CD0 + 1) = &off_251C12D28;
  qword_257963C50 = (uint64_t)off_251C12CC0;
  qword_257963CF0 = (uint64_t)&off_251C121E0;
  qword_257963CF8[0] = &off_251C12D48;
  qword_257963D10 = (uint64_t)qword_257963CF8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"profile-symbol-list-cutoff", 0x1AuLL);
  word_257963C5A = word_257963C5A & 0xFF9F | 0x20;
  *(_QWORD *)&xmmword_257963CD0 = -1;
  byte_257963CE8 = 1;
  qword_257963CE0 = -1;
  qword_257963C70 = (uint64_t)"Cutoff value about how many symbols in profile symbol list will be used. This is very usefu"
                             "l for performance debugging";
  unk_257963C78 = 118;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257963C50);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt, &qword_257963C50, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)_MergedGlobals_27, 0, 0);
  byte_257963C10 = 0;
  qword_257963C18 = (uint64_t)&off_251C12500;
  unk_257963C20 = 0;
  _MergedGlobals_27[0] = (uint64_t)off_251C123A8;
  qword_257963C28 = (uint64_t)&off_251C12520;
  qword_257963C30 = (uint64_t)&off_251C12410;
  qword_257963C48 = (uint64_t)&qword_257963C30;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"generate-merged-base-profiles", 0x1DuLL);
  qword_257963BB0 = (uint64_t)"When generating nested context-sensitive profiles, always generate extra base profile for f"
                             "unction with all its context profiles merged into it.";
  unk_257963BB8 = 144;
  llvm::cl::Option::addArgument((llvm::cl::Option *)_MergedGlobals_27);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, _MergedGlobals_27, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_SampleProfReader_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&ProfileIsFSDisciminator, 0, 0);
  byte_257963D98 = 0;
  qword_257963DA0 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257963DA8 = 0;
  ProfileIsFSDisciminator = (uint64_t)off_251C123A8;
  qword_257963DB0 = (uint64_t)&off_251C12520;
  qword_257963DB8 = (uint64_t)&off_251C12410;
  qword_257963DD0 = (uint64_t)&qword_257963DB8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"profile-isfs", 0xCuLL);
  word_257963D22 = word_257963D22 & 0xFF9F | 0x20;
  byte_257963D98 = 0;
  word_257963DA8 = 256;
  qword_257963D38 = (uint64_t)"Profile uses flow sensitive discriminators";
  unk_257963D40 = 42;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileIsFSDisciminator);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &ProfileIsFSDisciminator, &dword_24A800000);
}

llvm::CallBase **llvm::AbstractCallSite::AbstractCallSite(llvm::CallBase **a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t Metadata;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  llvm::CallBase *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int v43;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 < 0x1C)
  {
    *a1 = 0;
    a1[1] = (llvm::CallBase *)(a1 + 3);
    v10 = (unsigned int *)(a1 + 1);
    a1[2] = 0;
    if (v4 != 5)
      return a1;
    v9 = *(_QWORD *)(v3 + 8);
    if (!v9)
      return a1;
    if (*(_QWORD *)(v9 + 8))
      return a1;
    if (*(unsigned __int16 *)(v3 + 18) - 38 > 0xC)
      return a1;
    v3 = *(_QWORD *)(v9 + 24);
    v13 = *(unsigned __int8 *)(v3 + 16);
    if (v13 < 0x1C)
      return a1;
    v14 = v13 - 33;
    v6 = v14 > 0x33;
    v15 = (1 << v14) & 0x8000000000041;
    if (v6 || v15 == 0)
      return a1;
    *a1 = (llvm::CallBase *)v3;
  }
  else
  {
    v5 = v4 - 33;
    v6 = v5 > 0x33;
    v7 = (1 << v5) & 0x8000000000041;
    if (v6 || v7 == 0)
    {
      *a1 = 0;
      a1[1] = (llvm::CallBase *)(a1 + 3);
      a1[2] = 0;
      return a1;
    }
    v9 = a2;
    *a1 = (llvm::CallBase *)v3;
    a1[1] = (llvm::CallBase *)(a1 + 3);
    v10 = (unsigned int *)(a1 + 1);
    a1[2] = 0;
  }
  v11 = (uint64_t *)(v3 - 32);
  if (v3 - 32 != v9)
  {
    v12 = *v11;
    if (*v11
      && !*(_BYTE *)(v12 + 16)
      && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v3 + 72)
      && (Metadata = llvm::Value::getMetadata((llvm::Value *)v12, 26)) != 0
      && ((v19 = *(_QWORD *)(Metadata - 16), (v19 & 2) != 0)
        ? (v20 = *(uint64_t **)(Metadata - 32), v21 = *(unsigned int *)(Metadata - 24))
        : (v20 = (uint64_t *)(Metadata - 16 - 8 * ((v19 >> 2) & 0xF)), v21 = (v19 >> 6) & 0xF),
          v21))
    {
      v22 = *a1;
      v23 = 8 * v21;
      while (1)
      {
        v24 = *v20;
        v25 = (unint64_t *)(*v20 - 16);
        if ((*v25 & 2) != 0)
          v26 = *(unint64_t **)(v24 - 32);
        else
          v26 = &v25[-((*v25 >> 2) & 0xF)];
        v27 = *(_QWORD *)(*v26 + 128);
        v28 = (_QWORD *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u)
          v28 = (_QWORD *)*v28;
        if (*v28 == ((v9 - (_QWORD)*a1 + 32 * (unint64_t)(*((_DWORD *)*a1 + 5) & 0x7FFFFFF)) >> 5))
          break;
        ++v20;
        v23 -= 8;
        if (!v23)
          goto LABEL_11;
      }
      v29 = llvm::CallBase::arg_end(*a1);
      if ((*v25 & 2) != 0)
        v30 = *(_DWORD *)(v24 - 24);
      else
        v30 = (*v25 >> 6) & 0xF;
      v31 = *((_DWORD *)v22 + 5);
      v32 = v30 - 1;
      if (v32)
      {
        v33 = 0;
        v34 = 8 * v32;
        do
        {
          if ((*v25 & 2) != 0)
            v35 = *(unint64_t **)(v24 - 32);
          else
            v35 = &v25[-((*v25 >> 2) & 0xF)];
          v36 = *(_QWORD *)(v35[v33 / 8] + 128);
          v37 = *(_DWORD *)(v36 + 32);
          if (v37 > 0x40)
            v38 = **(_QWORD **)(v36 + 24);
          else
            v38 = (uint64_t)(*(_QWORD *)(v36 + 24) << -(char)v37) >> -(char)v37;
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v10, v38);
          v33 += 8;
        }
        while (v34 != v33);
      }
      if (*(_DWORD *)(*(_QWORD *)(v12 + 24) + 8) > 0xFFu)
      {
        v39 = *v25;
        if ((*v25 & 2) != 0)
        {
          v40 = *(_DWORD *)(v24 - 24);
          v41 = *(unint64_t **)(v24 - 32);
        }
        else
        {
          v40 = (v39 >> 6) & 0xF;
          v41 = &v25[-((v39 >> 2) & 0xF)];
        }
        if ((llvm::Constant::isNullValue(*(llvm::Constant **)(v41[v40 - 1] + 128)) & 1) == 0)
        {
          v42 = (unint64_t)(v29 - ((_QWORD)v22 - 32 * (v31 & 0x7FFFFFF))) >> 5;
          v43 = *(_DWORD *)(v12 + 96);
          if (v43 < v42)
          {
            do
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v10, v43++);
            while ((_DWORD)v42 != v43);
          }
        }
      }
    }
    else
    {
LABEL_11:
      *a1 = 0;
    }
  }
  return a1;
}

llvm::raw_ostream *llvm::printLLVMNameWithoutPrefix(llvm::raw_ostream *a1, unsigned __int8 *a2, size_t a3)
{
  size_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  char v7;
  size_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v12;
  llvm::raw_ostream *result;
  _BYTE *v14;

  v3 = a3;
  v4 = a2;
  v6 = MEMORY[0x24BDAC740];
  if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *a2 + 60) & 0x400) != 0)
    goto LABEL_18;
  if (!a3)
    return llvm::raw_ostream::operator<<(a1, v4, v3);
  v7 = 0;
  v8 = a3;
  while (1)
  {
    v9 = (char)*v4;
    v10 = *v4;
    if (v9 < 0)
      break;
    if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x500) == 0)
      goto LABEL_8;
LABEL_16:
    ++v4;
    if (!--v8)
      goto LABEL_17;
  }
  if (__maskrune(*v4, 0x500uLL))
    goto LABEL_16;
LABEL_8:
  if (v9 - 45 > 0x32 || ((1 << (v9 - 45)) & 0x4000000000003) == 0)
    v7 = 1;
  if ((v10 - 45) <= 0x32 && ((1 << (v10 - 45)) & 0x4000000000003) != 0)
    goto LABEL_16;
LABEL_17:
  v4 = a2;
  v3 = a3;
  if ((v7 & 1) == 0)
    return llvm::raw_ostream::operator<<(a1, v4, v3);
LABEL_18:
  v12 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 34);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v12 + 1;
    *v12 = 34;
  }
  result = llvm::printEscapedString((llvm::raw_ostream *)v4, v3, a1);
  v14 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)a1 + 3))
    return llvm::raw_ostream::write(a1, 34);
  *((_QWORD *)a1 + 4) = v14 + 1;
  *v14 = 34;
  return result;
}

void llvm::ModuleSlotTracker::~ModuleSlotTracker(llvm::ModuleSlotTracker *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::ModuleSlotTracker *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_251C1E350;
  v2 = (char *)this + 80;
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 9);
  if (v5 == (llvm::ModuleSlotTracker *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (llvm::ModuleSlotTracker *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  llvm::ModuleSlotTracker::~ModuleSlotTracker(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::ModuleSlotTracker::getMachine(llvm::ModuleSlotTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 16))
  {
    v6 = (char *)this + 40;
    return *(_QWORD *)v6;
  }
  *((_BYTE *)this + 16) = 0;
  v2 = operator new();
  v3 = *((_QWORD *)this + 3);
  v4 = *((_BYTE *)this + 17);
  *(_QWORD *)v2 = &off_251C1E370;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 25) = v4;
  *(_QWORD *)(v2 + 56) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  *(_DWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = 0;
  *(_DWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_DWORD *)(v2 + 248) = 0;
  *(_DWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_QWORD *)(v2 + 252) = 16;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  *(_DWORD *)(v2 + 280) = 0;
  *(_DWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 312) = 0;
  *(_QWORD *)(v2 + 316) = 16;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v2 = *((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 5) = v2;
  v6 = (char *)this + 40;
  if (!*((_QWORD *)this + 9))
    goto LABEL_30;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v25, (uint64_t)this + 48);
  v7 = (_QWORD *)(v2 + 32);
  if (v26)
  {
    if (v26 == v25)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v27);
    }
    else
    {
      v28 = (_QWORD *)(*(uint64_t (**)(void))(*v26 + 16))();
    }
  }
  else
  {
    v28 = 0;
  }
  if (v27 != v7)
  {
    v8 = v28;
    v9 = *(_QWORD **)(v2 + 56);
    if (v28 == v27)
    {
      if (v9 == v7)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v27[0] + 24))(v27, v29);
        (*(void (**)(_QWORD *))(*v28 + 32))(v28);
        v28 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v2 + 56) + 24))(*(_QWORD *)(v2 + 56), v27);
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 56) + 32))(*(_QWORD *)(v2 + 56));
        *(_QWORD *)(v2 + 56) = 0;
        v28 = v27;
        (*(void (**)(_QWORD *, uint64_t))(v29[0] + 24))(v29, v2 + 32);
        (*(void (**)(_QWORD *))(v29[0] + 32))(v29);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v27[0] + 24))(v27, v2 + 32);
        (*(void (**)(_QWORD *))(*v28 + 32))(v28);
        v28 = *(_QWORD **)(v2 + 56);
      }
      *(_QWORD *)(v2 + 56) = v7;
    }
    else if (v9 == v7)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v2 + 32) + 24))(v2 + 32, v27);
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 56) + 32))(*(_QWORD *)(v2 + 56));
      *(_QWORD *)(v2 + 56) = v28;
      v28 = v27;
    }
    else
    {
      v28 = *(_QWORD **)(v2 + 56);
      *(_QWORD *)(v2 + 56) = v8;
    }
  }
  v10 = v28;
  if (v28 == v27)
  {
    v11 = 4;
    v10 = v27;
    goto LABEL_24;
  }
  if (v28)
  {
    v11 = 5;
LABEL_24:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = v26;
  if (v26 == v25)
  {
    v13 = 4;
    v12 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_30;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_30:
  if (!*((_QWORD *)this + 13))
    return *(_QWORD *)v6;
  v14 = *((_QWORD *)this + 5);
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v23, (uint64_t)this + 80);
  v15 = (_QWORD *)(v14 + 64);
  if (v24)
  {
    if (v24 == v23)
    {
      v28 = v27;
      (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v27);
    }
    else
    {
      v28 = (_QWORD *)(*(uint64_t (**)(void))(*v24 + 16))();
    }
  }
  else
  {
    v28 = 0;
  }
  if (v27 != v15)
  {
    v16 = v28;
    v17 = *(_QWORD **)(v14 + 88);
    if (v28 == v27)
    {
      if (v17 == v15)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v27[0] + 24))(v27, v29);
        (*(void (**)(_QWORD *))(*v28 + 32))(v28);
        v28 = 0;
        (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v14 + 88) + 24))(*(_QWORD *)(v14 + 88), v27);
        (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 88) + 32))(*(_QWORD *)(v14 + 88));
        *(_QWORD *)(v14 + 88) = 0;
        v28 = v27;
        (*(void (**)(_QWORD *, uint64_t))(v29[0] + 24))(v29, v14 + 64);
        (*(void (**)(_QWORD *))(v29[0] + 32))(v29);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v27[0] + 24))(v27, v14 + 64);
        (*(void (**)(_QWORD *))(*v28 + 32))(v28);
        v28 = *(_QWORD **)(v14 + 88);
      }
      *(_QWORD *)(v14 + 88) = v15;
    }
    else if (v17 == v15)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v14 + 64) + 24))(v14 + 64, v27);
      (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 88) + 32))(*(_QWORD *)(v14 + 88));
      *(_QWORD *)(v14 + 88) = v28;
      v28 = v27;
    }
    else
    {
      v28 = *(_QWORD **)(v14 + 88);
      *(_QWORD *)(v14 + 88) = v16;
    }
  }
  v18 = v28;
  if (v28 == v27)
  {
    v19 = 4;
    v18 = v27;
    goto LABEL_49;
  }
  if (v28)
  {
    v19 = 5;
LABEL_49:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  v20 = v24;
  if (v24 == v23)
  {
    v21 = 4;
    v20 = v23;
    goto LABEL_54;
  }
  if (v24)
  {
    v21 = 5;
LABEL_54:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  return *(_QWORD *)v6;
}

_DWORD *llvm::ModuleSlotTracker::incorporateFunction(const llvm::Function **this, const llvm::Function *a2)
{
  _DWORD *result;
  const llvm::Function *v5;
  const llvm::Function *v6;
  const llvm::Function *v7;

  result = (_DWORD *)llvm::ModuleSlotTracker::getMachine((llvm::ModuleSlotTracker *)this);
  if (result)
  {
    v5 = this[4];
    if (v5 != a2)
    {
      if (v5)
      {
        v6 = this[5];
        result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::clear((_DWORD *)v6 + 34);
        *((_QWORD *)v6 + 2) = 0;
        *((_BYTE *)v6 + 24) = 0;
      }
      v7 = this[5];
      *((_QWORD *)v7 + 2) = a2;
      *((_BYTE *)v7 + 24) = 0;
      this[4] = a2;
    }
  }
  return result;
}

uint64_t llvm::SlotTracker::getLocalSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  int v4;
  uint64_t result;
  const llvm::Value *v6;
  uint64_t v7;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
    llvm::SlotTracker::processFunction(this);
  v6 = a2;
  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)this + 17, &v6, &v7);
  result = 0xFFFFFFFFLL;
  if (v4)
  {
    if (v7 != *((_QWORD *)this + 17) + 16 * *((unsigned int *)this + 38))
      return *(unsigned int *)(v7 + 8);
  }
  return result;
}

double llvm::SlotTracker::SlotTracker(llvm::SlotTracker *this, const Function *a2)
{
  uint64_t v2;
  double result;

  *(_QWORD *)this = &off_251C1E370;
  if (a2)
    v2 = *((_QWORD *)a2 + 5);
  else
    v2 = 0;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = a2;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_QWORD *)&result = 16;
  *(_QWORD *)((char *)this + 252) = 16;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_DWORD *)this + 72) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *(_QWORD *)((char *)this + 316) = 16;
  return result;
}

uint64_t llvm::SlotTracker::processModule(llvm::SlotTracker *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  llvm::SlotTracker *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  llvm::SlotTracker *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  llvm::SlotTracker *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  llvm::SlotTracker *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  char v29;
  uint64_t v30;
  llvm::SlotTracker *v31;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = v2 + 1;
  v4 = (_QWORD *)v2[2];
  if (v4 != v2 + 1)
  {
    do
    {
      if (v4)
        v5 = (llvm::SlotTracker *)(v4 - 7);
      else
        v5 = 0;
      if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
      {
        v6 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v6 + 1;
        v31 = v5;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v6;
      }
      llvm::SlotTracker::processGlobalObjectMetadata((uint64_t)this, (uint64_t ***)v5);
      v7 = *((_QWORD *)v5 + 9);
      if (v7)
        llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v7);
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v8 = v2 + 5;
  v9 = (_QWORD *)v2[6];
  if (v9 != v2 + 5)
  {
    do
    {
      v10 = (llvm::SlotTracker *)(v9 - 6);
      if (!v9)
        v10 = 0;
      if ((*((_BYTE *)v10 + 23) & 0x10) == 0)
      {
        v11 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v11 + 1;
        v31 = v10;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v11;
      }
      v9 = (_QWORD *)v9[1];
    }
    while (v9 != v8);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v12 = v2 + 7;
  v13 = (_QWORD *)v2[8];
  if (v13 != v2 + 7)
  {
    do
    {
      v14 = (llvm::SlotTracker *)(v13 - 7);
      if (!v13)
        v14 = 0;
      if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
      {
        v15 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v15 + 1;
        v31 = v14;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v15;
      }
      v13 = (_QWORD *)v13[1];
    }
    while (v13 != v12);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v16 = v2 + 9;
  v17 = (_QWORD *)v2[10];
  if (v17 != v2 + 9)
  {
    do
    {
      v18 = *(unsigned int *)(v17[6] + 8);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = 8 * v18;
        do
        {
          llvm::SlotTracker::CreateMetadataSlot((uint64_t)this, *(unsigned __int8 **)(*(_QWORD *)v17[6] + v19));
          v19 += 8;
        }
        while (v20 != v19);
      }
      v17 = (_QWORD *)v17[1];
    }
    while (v17 != v16);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v21 = v2 + 3;
  v22 = (_QWORD *)v2[4];
  if (v22 != v2 + 3)
  {
    do
    {
      if (v22)
        v23 = (llvm::SlotTracker *)(v22 - 7);
      else
        v23 = 0;
      if ((*((_BYTE *)v23 + 23) & 0x10) == 0)
      {
        v24 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v24 + 1;
        v31 = v23;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v24;
      }
      if (*((_BYTE *)this + 25))
        llvm::SlotTracker::processFunctionMetadata(this, (uint64_t ***)v23);
      v25 = *((_QWORD *)v23 + 14);
      if (v25)
      {
        if (*(_DWORD *)(v25 + 8))
        {
          v26 = *(_QWORD *)(v25 + 40);
          if (v26)
            llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v26);
        }
      }
      v22 = (_QWORD *)v22[1];
    }
    while (v22 != v21);
  }
  result = *((_QWORD *)this + 7);
  if (result)
  {
    v28 = *((_BYTE *)this + 25);
    v30 = *((_QWORD *)this + 1);
    v31 = this;
    v29 = v28;
    return (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v31, &v30, &v29);
  }
  return result;
}

void llvm::SlotTracker::processGlobalObjectMetadata(uint64_t a1, uint64_t ***a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (unsigned int *)&v7);
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = 16 * v8;
    v5 = (unsigned __int8 **)((char *)v7 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      llvm::SlotTracker::CreateMetadataSlot(a1, v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v7;
  }
  if (v3 != v9)
    free(v3);
}

uint64_t llvm::SlotTracker::CreateAttributeSetSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = a1 + 200;
  v4 = *(_QWORD *)(a1 + 200);
  v14 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(v4, *(_DWORD *)(v5 + 16), a2, &v14);
  result = *(_QWORD *)v5;
  v8 = *(unsigned int *)(v5 + 16);
  if (v6)
    v9 = v14 == *(_QWORD *)v5 + 16 * v8;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a1 + 224) = v10 + 1;
    v14 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(result, v8, a2, &v14);
    v11 = v14;
    if ((result & 1) != 0)
    {
LABEL_12:
      *(_DWORD *)(v11 + 8) = v10;
      return result;
    }
    v12 = *(_DWORD *)(a1 + 208);
    v13 = *(_DWORD *)(a1 + 216);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(a1 + 212) > v13 >> 3)
    {
LABEL_9:
      ++*(_DWORD *)(a1 + 208);
      if (*(_QWORD *)v11 != -4)
        --*(_DWORD *)(a1 + 212);
      *(_QWORD *)v11 = a2;
      *(_DWORD *)(v11 + 8) = 0;
      goto LABEL_12;
    }
    llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::grow(v5, v13);
    v14 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v14);
    v11 = v14;
    goto LABEL_9;
  }
  return result;
}

uint64_t llvm::SlotTracker::CreateMetadataSlot(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const llvm::MDNode *v17;
  uint64_t v18;

  v2 = *a2;
  if (v2 == 6)
    return result;
  if (v2 == 33)
    return result;
  v4 = result;
  v5 = *(_DWORD *)(result + 192);
  v7 = result + 168;
  v6 = *(_QWORD *)(result + 168);
  v18 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v6, *(_DWORD *)(v7 + 16), (uint64_t)a2, &v18);
  if ((result & 1) != 0)
    return result;
  v8 = *(_DWORD *)(v4 + 176);
  v9 = *(_DWORD *)(v4 + 184);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_22;
  }
  if (v9 + ~v8 - *(_DWORD *)(v4 + 180) <= v9 >> 3)
  {
LABEL_22:
    llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow(v7, v9);
    v18 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(v4 + 168), *(_DWORD *)(v4 + 184), (uint64_t)a2, &v18);
  }
  v10 = v18;
  ++*(_DWORD *)(v4 + 176);
  if (*(_QWORD *)v10 != -4096)
    --*(_DWORD *)(v4 + 180);
  *(_QWORD *)v10 = a2;
  *(_DWORD *)(v10 + 8) = v5;
  ++*(_DWORD *)(v4 + 192);
  v12 = a2 - 16;
  v11 = *((_QWORD *)a2 - 2);
  if ((v11 & 2) != 0)
  {
    v13 = *((_DWORD *)a2 - 6);
    if (!v13)
      return result;
  }
  else
  {
    v13 = (v11 >> 6) & 0xF;
    if (!v13)
      return result;
  }
  v14 = 0;
  v15 = 8 * v13;
  do
  {
    if ((*(_QWORD *)v12 & 2) != 0)
      v16 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v16 = &v12[-8 * ((*(_QWORD *)v12 >> 2) & 0xFLL)];
    v17 = *(const llvm::MDNode **)&v16[v14];
    if (v17)
    {
      result = llvm::MDNode::classof(*(_BYTE **)&v16[v14]);
      if ((_DWORD)result)
        result = llvm::SlotTracker::CreateMetadataSlot((llvm::SlotTracker *)v4, v17);
    }
    v14 += 8;
  }
  while (v15 != v14);
  return result;
}

void llvm::SlotTracker::processFunctionMetadata(llvm::SlotTracker *this, uint64_t ***a2)
{
  uint64_t ***v4;
  uint64_t ***v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t **i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  llvm::SlotTracker::processGlobalObjectMetadata((uint64_t)this, a2);
  v4 = a2 + 9;
  v5 = (uint64_t ***)a2[10];
  if (v5 != a2 + 9)
  {
    do
    {
      v6 = v5 - 3;
      if (!v5)
        v6 = 0;
      v7 = (uint64_t **)(v6 + 5);
      for (i = v6[6]; i != v7; i = (uint64_t **)i[1])
      {
        if (i)
          v9 = (uint64_t)(i - 3);
        else
          v9 = 0;
        if (*(_BYTE *)(v9 + 16) == 84)
        {
          v10 = *(_QWORD *)(v9 - 32);
          if (v10)
          {
            if (!*(_BYTE *)(v10 + 16)
              && *(_QWORD *)(v10 + 24) == *(_QWORD *)(v9 + 72)
              && (*(_BYTE *)(v10 + 33) & 0x20) != 0)
            {
              v11 = *(_DWORD *)(v9 + 20);
              if ((v11 & 0x40000000) != 0)
              {
                v13 = *(uint64_t **)(v9 - 8);
                v12 = v11 & 0x7FFFFFF;
                if (!v12)
                  goto LABEL_27;
              }
              else
              {
                v12 = v11 & 0x7FFFFFF;
                v13 = (uint64_t *)(v9 - 32 * v12);
                if (!v12)
                  goto LABEL_27;
              }
              v14 = 32 * v12;
              do
              {
                v15 = *v13;
                if (*v13 && *(_BYTE *)(v15 + 16) == 23)
                {
                  v16 = *(unsigned __int8 **)(v15 + 24);
                  v17 = llvm::MDNode::classof(v16);
                  if (v16 && v17 != 0)
                    llvm::SlotTracker::CreateMetadataSlot((uint64_t)this, v16);
                }
                v13 += 4;
                v14 -= 32;
              }
              while (v14);
            }
          }
        }
LABEL_27:
        v23 = v25;
        v24 = 0x400000000;
        if (*(_QWORD *)(v9 + 48) || (*(_BYTE *)(v9 + 23) & 0x20) != 0)
        {
          llvm::Instruction::getAllMetadataImpl(v9, (unsigned int *)&v23);
          v19 = v23;
          if ((_DWORD)v24)
          {
            v20 = 16 * v24;
            v21 = (unsigned __int8 **)((char *)v23 + 8);
            do
            {
              v22 = *v21;
              v21 += 2;
              llvm::SlotTracker::CreateMetadataSlot((uint64_t)this, v22);
              v20 -= 16;
            }
            while (v20);
            v19 = v23;
          }
          if (v19 != v25)
            free(v19);
        }
      }
      v5 = (uint64_t ***)v5[1];
    }
    while (v5 != v4);
  }
}

uint64_t llvm::SlotTracker::processFunction(llvm::SlotTracker *this)
{
  uint64_t v2;
  llvm::SlotTracker *v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  char v24;
  uint64_t v25;
  llvm::SlotTracker *v26;

  *((_DWORD *)this + 40) = 0;
  if (!*((_BYTE *)this + 25))
    llvm::SlotTracker::processFunctionMetadata(this, *((uint64_t ****)this + 2));
  v2 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    v4 = *((_QWORD *)this + 2);
    v3 = *(llvm::SlotTracker **)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    v2 = v4;
  }
  else
  {
    v3 = *(llvm::SlotTracker **)(v2 + 88);
  }
  for (i = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
        v3 != (llvm::SlotTracker *)i;
        v3 = (llvm::SlotTracker *)((char *)v3 + 40))
  {
    if ((*((_BYTE *)v3 + 23) & 0x10) == 0)
    {
      v26 = v3;
      v6 = *((_DWORD *)this + 40);
      *((_DWORD *)this + 40) = v6 + 1;
      *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 17, &v26)+ 2) = v6;
    }
  }
  v7 = *((_QWORD *)this + 2);
  v8 = v7 + 72;
  v9 = *(_QWORD *)(v7 + 80);
  if (v9 != v7 + 72)
  {
    do
    {
      if (v9)
        v10 = v9 - 24;
      else
        v10 = 0;
      if ((*(_BYTE *)(v10 + 23) & 0x10) == 0)
      {
        v26 = (llvm::SlotTracker *)v10;
        v11 = *((_DWORD *)this + 40);
        *((_DWORD *)this + 40) = v11 + 1;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 17, &v26)+ 2) = v11;
      }
      v12 = v10 + 40;
      for (j = *(_QWORD *)(v10 + 48); j != v12; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v14 = j - 24;
        else
          v14 = 0;
        if (*(_BYTE *)(*(_QWORD *)v14 + 8) != 7 && (*(_BYTE *)(v14 + 23) & 0x10) == 0)
        {
          v26 = (llvm::SlotTracker *)v14;
          v15 = *((_DWORD *)this + 40);
          *((_DWORD *)this + 40) = v15 + 1;
          *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 17, &v26)+ 2) = v15;
        }
        v16 = *(unsigned __int8 *)(v14 + 16) - 33;
        v17 = v16 > 0x33;
        v18 = (1 << v16) & 0x8000000000041;
        if (!v17 && v18 != 0)
        {
          v20 = *(_QWORD *)(v14 + 64);
          if (v20)
          {
            if (*(_DWORD *)(v20 + 8))
            {
              v21 = *(_QWORD *)(v20 + 40);
              if (v21)
                llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v21);
            }
          }
        }
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v8);
  }
  result = *((_QWORD *)this + 11);
  if (result)
  {
    v23 = *((_BYTE *)this + 25);
    v25 = *((_QWORD *)this + 2);
    v26 = this;
    v24 = v23;
    result = (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v26, &v25, &v24);
  }
  *((_BYTE *)this + 24) = 1;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::clear(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_10:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = 16 * v3;
        v7 = *(_QWORD **)result;
        do
        {
          *v7 = -4096;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x24BD1B398](*(_QWORD *)result, 8);
        if (v5)
        {
          v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          result = operator new(16 * v11, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v12 = v1[4];
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            do
            {
              *(_QWORD *)result = -4096;
              result += 4;
              v13 -= 16;
            }
            while (v13);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_10;
    }
  }
  if (v3)
  {
    v8 = *(_QWORD **)result;
    v9 = 16 * v3;
    do
    {
      *v8 = -4096;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t llvm::SlotTracker::getGlobalSlot(llvm::SlotTracker *this, const llvm::GlobalValue *a2)
{
  int v4;
  uint64_t result;
  const llvm::GlobalValue *v6;
  uint64_t v7;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
    llvm::SlotTracker::processFunction(this);
  v6 = a2;
  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)this + 13, &v6, &v7);
  result = 0xFFFFFFFFLL;
  if (v4)
  {
    if (v7 != *((_QWORD *)this + 13) + 16 * *((unsigned int *)this + 30))
      return *(unsigned int *)(v7 + 8);
  }
  return result;
}

uint64_t llvm::SlotTracker::getMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  BOOL v4;
  uint64_t v6;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
    llvm::SlotTracker::processFunction(this);
  v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 21), *((_DWORD *)this + 46), (uint64_t)a2, &v6))v4 = v6 == *((_QWORD *)this + 21) + 16 * *((unsigned int *)this + 46);
  else
    v4 = 1;
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v6 + 8);
}

uint64_t llvm::SlotTracker::getAttributeGroupSlot(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8))
  {
    llvm::SlotTracker::processModule((llvm::SlotTracker *)a1);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_QWORD *)(a1 + 16) && !*(_BYTE *)(a1 + 24))
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)a1);
  v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v6))v4 = v6 == *(_QWORD *)(a1 + 200) + 16 * *(unsigned int *)(a1 + 216);
  else
    v4 = 1;
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v6 + 8);
}

uint64_t `anonymous namespace'::AssemblyWriter::AssemblyWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v8 = a1 + 232;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_BYTE *)(a1 + 280) = a6;
  *(_BYTE *)(a1 + 281) = a7;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 328;
  *(_QWORD *)(a1 + 320) = 0x800000000;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 0x800000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 0;
  if (a4)
  {
    v9 = (char **)(a1 + 256);
    v10 = a4 + 24;
    v11 = *(_QWORD *)(a4 + 32);
    v12 = a4 + 8;
    v13 = *(_QWORD *)(a4 + 16);
    v36 = v11;
    v37 = v13;
    v38 = a4 + 24;
    v39 = a4 + 8;
    while (1)
    {
      if (v11 == v10 && v13 == v12)
      {
        v14 = v38 == v10 && v39 == v12;
        if (v14)
          return a1;
      }
      v15 = 0;
      do
      {
        v16 = (*(uint64_t (**)(uint64_t *))((char *)&off_251C1E398 + v15))(&v36);
        if (v16)
          v17 = 1;
        else
          v17 = v15 == 16;
        v15 += 16;
      }
      while (!v17);
      v18 = *(_QWORD *)(v16 + 48);
      if (v18)
      {
        v40 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)(a1 + 232), *(_DWORD *)(a1 + 248), v18, &v40) & 1) == 0)break;
      }
LABEL_38:
      v34 = 0;
      do
      {
        if (((*(uint64_t (**)(uint64_t *))((char *)&off_251C1E3B8 + v34))(&v36) & 1) != 0)
          break;
        v14 = v34 == 16;
        v34 += 16;
      }
      while (!v14);
      v11 = v36;
      v13 = v37;
    }
    v19 = *(_DWORD *)(a1 + 248);
    v20 = *(_DWORD *)(a1 + 240);
    if (4 * v20 + 4 >= 3 * v19)
    {
      v19 *= 2;
    }
    else if (v19 + ~v20 - *(_DWORD *)(a1 + 244) > v19 >> 3)
    {
LABEL_19:
      v21 = v40;
      ++*(_DWORD *)(a1 + 240);
      if (*v21 != -4096)
        --*(_DWORD *)(a1 + 244);
      *v21 = v18;
      v23 = *(uint64_t **)(a1 + 264);
      v22 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v23 >= v22)
      {
        v25 = ((char *)v23 - *v9) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          abort();
        v26 = v22 - (_QWORD)*v9;
        v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 272, v28);
        else
          v29 = 0;
        v30 = (uint64_t *)&v29[8 * v25];
        *v30 = v18;
        v24 = v30 + 1;
        v32 = *(char **)(a1 + 256);
        v31 = *(char **)(a1 + 264);
        if (v31 != v32)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v30 = v33;
          }
          while (v31 != v32);
          v31 = *v9;
        }
        *(_QWORD *)(a1 + 256) = v30;
        *(_QWORD *)(a1 + 264) = v24;
        *(_QWORD *)(a1 + 272) = &v29[8 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v23 = v18;
        v24 = v23 + 1;
      }
      *(_QWORD *)(a1 + 264) = v24;
      goto LABEL_38;
    }
    llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(v8, v19);
    v40 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)(a1 + 232), *(_DWORD *)(a1 + 248), v18, &v40);
    goto LABEL_19;
  }
  return a1;
}

_DWORD *`anonymous namespace'::AssemblyWriter::printFunction(_anonymous_namespace_::AssemblyWriter *this, const llvm::Function *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Attribute *v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v14;
  std::string::size_type v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  std::string *v18;
  size_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _DWORD *v24;
  _DWORD *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  std::string *v29;
  size_t v30;
  unsigned int v31;
  int v32;
  llvm::raw_ostream *v33;
  const char *v34;
  size_t v35;
  int v36;
  const char *v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  std::string *v44;
  size_t v45;
  _BYTE *v46;
  std::string::size_type v47;
  uint64_t v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  llvm::raw_ostream *v56;
  _WORD *v57;
  const llvm::AttributeSet *v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  llvm::raw_ostream *v66;
  _WORD *v67;
  unsigned int v68;
  const llvm::AttributeSet *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  int LocalSlot;
  llvm::raw_ostream *v73;
  _WORD *v74;
  llvm::raw_ostream *v75;
  _BYTE *v76;
  llvm::raw_ostream *v77;
  size_t v78;
  unsigned __int8 *v79;
  size_t *ValueName;
  int v81;
  llvm::raw_ostream *v82;
  _WORD *v83;
  llvm::raw_ostream *v84;
  uint64_t v85;
  llvm::raw_ostream *v86;
  _BYTE *v87;
  const char *v88;
  size_t v89;
  llvm::raw_ostream *v90;
  _BYTE *v91;
  uint64_t v92;
  llvm::raw_ostream *v93;
  uint64_t v94;
  _BYTE *v95;
  llvm::raw_ostream *v96;
  _WORD *v97;
  uint64_t v98;
  int AttributeGroupSlot;
  llvm::raw_ostream *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  uint64_t v103;
  uint64_t *v104;
  _QWORD *v105;
  llvm::raw_ostream *v106;
  _BYTE *v107;
  llvm::raw_ostream *v108;
  uint64_t v109;
  llvm::raw_ostream *Partition;
  uint64_t v111;
  llvm::raw_ostream *v112;
  _BYTE *v113;
  unint64_t v114;
  char v115;
  llvm::raw_ostream *v116;
  _DWORD *v117;
  llvm::raw_ostream *v118;
  uint64_t v119;
  uint64_t *v120;
  _QWORD *v121;
  const char *v122;
  const char *v123;
  const char *v124;
  int v125;
  const char *v126;
  size_t v127;
  _BYTE *v128;
  __int16 v129;
  llvm::raw_ostream *v130;
  _QWORD *v131;
  int v132;
  const llvm::Value **v133;
  llvm::raw_ostream *v134;
  uint64_t v135;
  int v136;
  const llvm::Value **v137;
  llvm::raw_ostream *v138;
  void *v139;
  int v140;
  const llvm::Value **v141;
  llvm::raw_ostream *v142;
  _BYTE *v143;
  llvm::raw_ostream *v144;
  _WORD *v145;
  _QWORD *i;
  const llvm::BasicBlock *v147;
  llvm::raw_ostream *v148;
  _WORD *v149;
  uint64_t v150;
  _DWORD *result;
  uint64_t v152;
  std::string __p;
  uint64_t v154;
  std::string v155;
  uint64_t v156;

  v156 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 28);
  if (v4)
    (*(void (**)(uint64_t, const llvm::Function *, _QWORD))(*(_QWORD *)v4 + 16))(v4, a2, *(_QWORD *)this);
  if ((*((_BYTE *)a2 + 35) & 1) != 0)
  {
    v5 = *(llvm::raw_ostream **)this;
    v6 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v6) > 0x10)
    {
      *(_BYTE *)(v6 + 16) = 10;
      *(_OWORD *)v6 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  v7 = *((_QWORD *)a2 + 14);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 8))
    {
      v8 = *(_QWORD *)(v7 + 40);
      if (v8)
      {
        memset(&v155, 0, sizeof(v155));
        v9 = *(unsigned int *)(v8 + 8);
        if ((_DWORD)v9)
        {
          v10 = (llvm::Attribute *)(v8 + 48);
          v11 = 8 * v9;
          do
          {
            if (!*(_QWORD *)v10 || *(_BYTE *)(*(_QWORD *)v10 + 8) != 2)
            {
              size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
              if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v155.__r_.__value_.__l.__size_;
              if (size)
                std::string::push_back(&v155, 32);
              llvm::Attribute::getAsString(v10, 0, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v14 = __p.__r_.__value_.__l.__size_;
              std::string::append(&v155, (const std::string::value_type *)p_p, v14);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            v10 = (llvm::Attribute *)((char *)v10 + 8);
            v11 -= 8;
          }
          while (v11);
          v15 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
          if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = v155.__r_.__value_.__l.__size_;
          if (v15)
          {
            v16 = *(llvm::raw_ostream **)this;
            v17 = *(_QWORD *)(*(_QWORD *)this + 32);
            if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v17) > 0x11)
            {
              *(_WORD *)(v17 + 16) = 8250;
              *(_OWORD *)v17 = *(_OWORD *)"; Function Attrs: ";
              *((_QWORD *)v16 + 4) += 18;
            }
            else
            {
              v16 = llvm::raw_ostream::write(v16, "; Function Attrs: ", 0x12uLL);
            }
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v18 = &v155;
            else
              v18 = (std::string *)v155.__r_.__value_.__r.__words[0];
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
            else
              v19 = v155.__r_.__value_.__l.__size_;
            v20 = llvm::raw_ostream::write(v16, (const char *)v18, v19);
            v21 = (_BYTE *)*((_QWORD *)v20 + 4);
            if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
            {
              llvm::raw_ostream::write(v20, 10);
            }
            else
            {
              *((_QWORD *)v20 + 4) = v21 + 1;
              *v21 = 10;
            }
          }
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
      }
    }
  }
  v22 = *((_QWORD *)this + 4);
  *(_QWORD *)(v22 + 16) = a2;
  *(_BYTE *)(v22 + 24) = 0;
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    v23 = *(llvm::raw_ostream **)this;
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_47;
    goto LABEL_52;
  }
  if (*((_BYTE *)a2 + 16) || *((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72))
  {
    v23 = *(llvm::raw_ostream **)this;
    goto LABEL_52;
  }
  v23 = *(llvm::raw_ostream **)this;
  if ((*((_BYTE *)a2 + 35) & 1) != 0)
  {
LABEL_52:
    v25 = (_DWORD *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v25 > 6uLL)
    {
      *(_DWORD *)((char *)v25 + 3) = 543518313;
      *v25 = 1768318308;
      *((_QWORD *)v23 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v23, "define ", 7uLL);
    }
    goto LABEL_61;
  }
LABEL_47:
  v24 = (_DWORD *)*((_QWORD *)v23 + 4);
  if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 6uLL)
  {
    *(_DWORD *)((char *)v24 + 3) = 1701994860;
    *v24 = 1818453348;
    *((_QWORD *)v23 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v23, "declare", 7uLL);
  }
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
  v155.__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v155);
  v26 = *(llvm::raw_ostream **)this;
  v27 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v27 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  if ((std::string::size_type *)v155.__r_.__value_.__l.__data_ != &v155.__r_.__value_.__r.__words[2])
    free(v155.__r_.__value_.__l.__data_);
LABEL_61:
  v28 = *(llvm::raw_ostream **)this;
  getLinkageNameWithSpace(&v155, *((_DWORD *)a2 + 8) & 0xF);
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v155;
  else
    v29 = (std::string *)v155.__r_.__value_.__r.__words[0];
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
  else
    v30 = v155.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v28, (const char *)v29, v30);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  PrintDSOLocation(a2, *(llvm::formatted_raw_ostream **)this);
  v31 = *((_DWORD *)a2 + 8);
  v32 = (v31 >> 4) & 3;
  v33 = *(llvm::raw_ostream **)this;
  if (v32 == 1)
  {
    v34 = "hidden ";
    v35 = 7;
  }
  else
  {
    if (v32 != 2)
      goto LABEL_74;
    v34 = "protected ";
    v35 = 10;
  }
  llvm::raw_ostream::operator<<(v33, v34, v35);
  v31 = *((_DWORD *)a2 + 8);
  v33 = *(llvm::raw_ostream **)this;
LABEL_74:
  v36 = (v31 >> 8) & 3;
  if (v36 == 1)
  {
    v37 = "dllimport ";
  }
  else
  {
    if (v36 != 2)
      goto LABEL_79;
    v37 = "dllexport ";
  }
  llvm::raw_ostream::operator<<(v33, v37, 0xAuLL);
LABEL_79:
  v38 = (llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF);
  if ((_DWORD)v38)
  {
    PrintCallingConv(v38, *(llvm::raw_ostream **)this);
    v39 = *(llvm::raw_ostream **)this;
    v40 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) == v40)
    {
      llvm::raw_ostream::write(v39, " ", 1uLL);
    }
    else
    {
      *v40 = 32;
      ++*((_QWORD *)v39 + 4);
    }
  }
  v41 = *((_QWORD *)a2 + 3);
  v42 = v41;
  if (v7)
  {
    v42 = *((_QWORD *)a2 + 3);
    if (*(_DWORD *)(v7 + 8) >= 2u)
    {
      v42 = *((_QWORD *)a2 + 3);
      if (*(_QWORD *)(v7 + 48))
      {
        v43 = *(llvm::raw_ostream **)this;
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v7 + 48);
        llvm::AttributeSet::getAsString((llvm::AttributeSetNode **)&__p, 0, &v155);
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v155;
        else
          v44 = (std::string *)v155.__r_.__value_.__r.__words[0];
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
        else
          v45 = v155.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v43, (const char *)v44, v45);
        v46 = (_BYTE *)*((_QWORD *)v43 + 4);
        if ((unint64_t)v46 >= *((_QWORD *)v43 + 3))
        {
          llvm::raw_ostream::write(v43, 32);
        }
        else
        {
          *((_QWORD *)v43 + 4) = v46 + 1;
          *v46 = 32;
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        v42 = *((_QWORD *)a2 + 3);
      }
    }
  }
  v47 = *((_QWORD *)this + 4);
  v48 = *((_QWORD *)a2 + 5);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C1E428;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this + 40;
  __p.__r_.__value_.__r.__words[2] = v47;
  v154 = v48;
  v49 = *(llvm::raw_ostream **)this;
  v50 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v50 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v49, 32);
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 32;
  }
  WriteAsOperandInternal(*(char ***)this, a2, (llvm::SlotTracker **)&__p);
  v51 = *(llvm::raw_ostream **)this;
  v52 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v52 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v51, 40);
  }
  else
  {
    *((_QWORD *)v51 + 4) = v52 + 1;
    *v52 = 40;
  }
  v152 = v41;
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_126;
  }
  else if (*((_BYTE *)a2 + 16)
         || *((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72)
         || (*((_BYTE *)a2 + 35) & 1) != 0)
  {
    goto LABEL_126;
  }
  if (!*((_BYTE *)this + 280))
  {
    v53 = *(_DWORD *)(v41 + 12);
    v54 = (v53 - 1);
    if (v53 != 1)
    {
      v55 = 0;
      do
      {
        if (v55)
        {
          v56 = *(llvm::raw_ostream **)this;
          v57 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v57 > 1uLL)
          {
            *v57 = 8236;
            *((_QWORD *)v56 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v56, ", ", 2uLL);
          }
        }
        if (v7)
        {
          if ((v55 + 2) < *(_DWORD *)(v7 + 8))
          {
            v58 = *(const llvm::AttributeSet **)(v7 + 40 + 8 * (v55 + 2));
            if (v58)
            {
              v59 = *(llvm::raw_ostream **)this;
              v60 = *(_BYTE **)(*(_QWORD *)this + 32);
              if ((unint64_t)v60 >= *(_QWORD *)(*(_QWORD *)this + 24))
              {
                llvm::raw_ostream::write(v59, 32);
              }
              else
              {
                *((_QWORD *)v59 + 4) = v60 + 1;
                *v60 = 32;
              }
            }
          }
        }
        ++v55;
      }
      while (v54 != v55);
    }
    goto LABEL_158;
  }
LABEL_126:
  v61 = llvm::Function::args(a2);
  if (v61 != v62)
  {
    v63 = v61;
    v64 = v62;
    do
    {
      v65 = *(_DWORD *)(v63 + 32);
      if (v65)
      {
        v66 = *(llvm::raw_ostream **)this;
        v67 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v67 > 1uLL)
        {
          *v67 = 8236;
          *((_QWORD *)v66 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v66, ", ", 2uLL);
        }
        v65 = *(_DWORD *)(v63 + 32);
      }
      if (v7 && (v68 = v65 + 2, v68 < *(_DWORD *)(v7 + 8)))
        v69 = *(const llvm::AttributeSet **)(v7 + 40 + 8 * v68);
      else
        v69 = 0;
      if (v69)
      {
        v70 = *(llvm::raw_ostream **)this;
        v71 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v71 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v70, 32);
        }
        else
        {
          *((_QWORD *)v70 + 4) = v71 + 1;
          *v71 = 32;
        }
      }
      if ((*(_BYTE *)(v63 + 23) & 0x10) != 0)
      {
        v75 = *(llvm::raw_ostream **)this;
        v76 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v76 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v75, 32);
        }
        else
        {
          *((_QWORD *)v75 + 4) = v76 + 1;
          *v76 = 32;
        }
        v77 = *(llvm::raw_ostream **)this;
        if ((*(_BYTE *)(v63 + 23) & 0x10) != 0)
        {
          ValueName = (size_t *)llvm::Value::getValueName((uint64_t ***)v63);
          v79 = (unsigned __int8 *)(ValueName + 2);
          v78 = *ValueName;
        }
        else
        {
          v78 = 0;
          v79 = (unsigned __int8 *)&str_3_26;
        }
        if (*(unsigned __int8 *)(v63 + 16) >= 4u)
          v81 = 3;
        else
          v81 = 0;
        PrintLLVMName(v77, v79, v78, v81);
      }
      else
      {
        LocalSlot = llvm::SlotTracker::getLocalSlot(*((llvm::SlotTracker **)this + 4), (const llvm::Value *)v63);
        v73 = *(llvm::raw_ostream **)this;
        v74 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v74 > 1uLL)
        {
          *v74 = 9504;
          *((_QWORD *)v73 + 4) += 2;
        }
        else
        {
          v73 = llvm::raw_ostream::write(v73, " %", 2uLL);
        }
        llvm::write_integer(v73, LocalSlot, 0, 0);
      }
      v63 += 40;
    }
    while (v63 != v64);
  }
LABEL_158:
  if (*(_DWORD *)(v152 + 8) >= 0x100u)
  {
    if (*(_DWORD *)(v152 + 12) != 1)
    {
      v82 = *(llvm::raw_ostream **)this;
      v83 = *(_WORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v83 > 1uLL)
      {
        *v83 = 8236;
        *((_QWORD *)v82 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v82, ", ", 2uLL);
      }
    }
    v84 = *(llvm::raw_ostream **)this;
    v85 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v85) > 2)
    {
      *(_BYTE *)(v85 + 2) = 46;
      *(_WORD *)v85 = 11822;
      *((_QWORD *)v84 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v84, "...", 3uLL);
    }
  }
  v86 = *(llvm::raw_ostream **)this;
  v87 = *(_BYTE **)(*(_QWORD *)this + 32);
  if ((unint64_t)v87 >= *(_QWORD *)(*(_QWORD *)this + 24))
  {
    llvm::raw_ostream::write(v86, 41);
  }
  else
  {
    *((_QWORD *)v86 + 4) = v87 + 1;
    *v87 = 41;
  }
  if (*((_DWORD *)a2 + 8) >> 6)
  {
    if (*((_DWORD *)a2 + 8) >> 6 == 1)
    {
      v88 = "local_unnamed_addr";
      v89 = 18;
    }
    else
    {
      v88 = "unnamed_addr";
      v89 = 12;
    }
    v90 = *(llvm::raw_ostream **)this;
    v91 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v91 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      v90 = llvm::raw_ostream::write(v90, 32);
    }
    else
    {
      *((_QWORD *)v90 + 4) = v91 + 1;
      *v91 = 32;
    }
    llvm::raw_ostream::operator<<(v90, v88, v89);
  }
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) <= 0xFFu)
  {
    v92 = *((_QWORD *)a2 + 5);
    if (v92)
    {
      if (!*(_DWORD *)(v92 + 268))
      {
LABEL_185:
        if (!v7)
          goto LABEL_197;
        goto LABEL_188;
      }
    }
  }
  v93 = *(llvm::raw_ostream **)this;
  v94 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v94) > 0xA)
  {
    *(_DWORD *)(v94 + 7) = 677733217;
    *(_QWORD *)v94 = *(_QWORD *)" addrspace(";
    *((_QWORD *)v93 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " addrspace(", 0xBuLL);
  }
  write_unsigned<unsigned long>(v93, (unint64_t)*(unsigned int *)(*(_QWORD *)a2 + 8) >> 8, 0, 0, 0);
  v95 = (_BYTE *)*((_QWORD *)v93 + 4);
  if (*((_BYTE **)v93 + 3) != v95)
  {
    *v95 = 41;
    ++*((_QWORD *)v93 + 4);
    goto LABEL_185;
  }
  llvm::raw_ostream::write(v93, ")", 1uLL);
  if (!v7)
    goto LABEL_197;
LABEL_188:
  if (*(_DWORD *)(v7 + 8) && *(_QWORD *)(v7 + 40))
  {
    v96 = *(llvm::raw_ostream **)this;
    v97 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v97 > 1uLL)
    {
      *v97 = 8992;
      *((_QWORD *)v96 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " #", 2uLL);
    }
    if (*(_DWORD *)(v7 + 8))
      v98 = *(_QWORD *)(v7 + 40);
    else
      v98 = 0;
    AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot(*((_QWORD *)this + 4), v98);
    llvm::write_integer(v96, AttributeGroupSlot, 0, 0);
  }
LABEL_197:
  if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
  {
    v100 = *(llvm::raw_ostream **)this;
    v101 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v101) > 9)
    {
      *(_WORD *)(v101 + 8) = 8736;
      *(_QWORD *)v101 = *(_QWORD *)" section \"";
      *((_QWORD *)v100 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v100, " section \"", 0xAuLL);
    }
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
    {
      v104 = (uint64_t *)(***(_QWORD ***)a2 + 2552);
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v105 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v104, &v155);
      v102 = (llvm::raw_ostream *)v105[1];
      v103 = v105[2];
    }
    else
    {
      v102 = 0;
      v103 = 0;
    }
    llvm::printEscapedString(v102, v103, *(llvm::raw_ostream **)this);
    v106 = *(llvm::raw_ostream **)this;
    v107 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v107 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v106, 34);
    }
    else
    {
      *((_QWORD *)v106 + 4) = v107 + 1;
      *v107 = 34;
    }
  }
  if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
  {
    v108 = *(llvm::raw_ostream **)this;
    v109 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v109) > 0xB)
    {
      *(_DWORD *)(v109 + 8) = 572550767;
      *(_QWORD *)v109 = *(_QWORD *)" partition \"";
      *((_QWORD *)v108 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v108, " partition \"", 0xCuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition(a2);
    llvm::printEscapedString(Partition, v111, *(llvm::raw_ostream **)this);
    v112 = *(llvm::raw_ostream **)this;
    v113 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v113 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v112, 34);
    }
    else
    {
      *((_QWORD *)v112 + 4) = v113 + 1;
      *v113 = 34;
    }
  }
  maybePrintComdat(*(llvm::raw_ostream **)this, (uint64_t)a2);
  v114 = ((unint64_t)*((unsigned int *)a2 + 8) >> 17) & 0x3F;
  if ((_DWORD)v114)
  {
    v115 = v114 - 1;
    v116 = *(llvm::raw_ostream **)this;
    v117 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v117 > 6uLL)
    {
      *(_DWORD *)((char *)v117 + 3) = 544106345;
      *v117 = 1768710432;
      *((_QWORD *)v116 + 4) += 7;
    }
    else
    {
      v116 = llvm::raw_ostream::write(v116, " align ", 7uLL);
    }
    write_unsigned<unsigned long>(v116, 1 << v115, 0, 0, 0);
  }
  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
  {
    v118 = *(llvm::raw_ostream **)this;
    v119 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v119) > 4)
    {
      *(_BYTE *)(v119 + 4) = 34;
      *(_DWORD *)v119 = 543385376;
      *((_QWORD *)v118 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " gc \"", 5uLL);
    }
    v120 = (uint64_t *)(***(_QWORD ***)a2 + 2696);
    v155.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v121 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::FindAndConstruct(v120, (uint64_t *)&v155);
    v124 = (const char *)v121[1];
    v122 = (const char *)(v121 + 1);
    v123 = v124;
    v125 = v122[23];
    if (v125 >= 0)
      v126 = v122;
    else
      v126 = v123;
    if (v125 >= 0)
      v127 = *((unsigned __int8 *)v122 + 23);
    else
      v127 = *((_QWORD *)v122 + 1);
    llvm::raw_ostream::write(v118, v126, v127);
    v128 = (_BYTE *)*((_QWORD *)v118 + 4);
    if ((unint64_t)v128 >= *((_QWORD *)v118 + 3))
    {
      llvm::raw_ostream::write(v118, 34);
    }
    else
    {
      *((_QWORD *)v118 + 4) = v128 + 1;
      *v128 = 34;
    }
  }
  v129 = *((_WORD *)a2 + 9);
  if ((v129 & 2) != 0)
  {
    v130 = *(llvm::raw_ostream **)this;
    v131 = *(_QWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v131 > 7uLL)
    {
      *v131 = 0x2078696665727020;
      *((_QWORD *)v130 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v130, " prefix ", 8uLL);
    }
    v132 = *((_DWORD *)a2 + 5);
    if ((v132 & 0x40000000) != 0)
      v133 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v133 = (const llvm::Value **)((char *)a2 - 32 * (v132 & 0x7FFFFFF));
    v129 = *((_WORD *)a2 + 9);
    if ((v129 & 4) == 0)
    {
LABEL_234:
      if ((v129 & 8) == 0)
        goto LABEL_257;
      goto LABEL_250;
    }
  }
  else if ((v129 & 4) == 0)
  {
    goto LABEL_234;
  }
  v134 = *(llvm::raw_ostream **)this;
  v135 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v135) > 9)
  {
    *(_WORD *)(v135 + 8) = 8293;
    *(_QWORD *)v135 = *(_QWORD *)" prologue ";
    *((_QWORD *)v134 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v134, " prologue ", 0xAuLL);
  }
  v136 = *((_DWORD *)a2 + 5);
  if ((v136 & 0x40000000) != 0)
    v137 = (const llvm::Value **)*((_QWORD *)a2 - 1);
  else
    v137 = (const llvm::Value **)((char *)a2 - 32 * (v136 & 0x7FFFFFF));
  if ((*((_WORD *)a2 + 9) & 8) != 0)
  {
LABEL_250:
    v138 = *(llvm::raw_ostream **)this;
    v139 = *(void **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v139 > 0xCuLL)
    {
      qmemcpy(v139, " personality ", 13);
      *((_QWORD *)v138 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v138, " personality ", 0xDuLL);
    }
    v140 = *((_DWORD *)a2 + 5);
    if ((v140 & 0x40000000) != 0)
      v141 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v141 = (const llvm::Value **)((char *)a2 - 32 * (v140 & 0x7FFFFFF));
  }
LABEL_257:
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_260:
      v142 = *(llvm::raw_ostream **)this;
      v143 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v143 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v142, 10);
      }
      else
      {
        *((_QWORD *)v142 + 4) = v143 + 1;
        *v143 = 10;
      }
      goto LABEL_279;
    }
  }
  else if (!*((_BYTE *)a2 + 16)
         && *((const llvm::Function **)a2 + 9) == (const llvm::Function *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 35) & 1) == 0)
  {
    goto LABEL_260;
  }
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
  v155.__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v155);
  v144 = *(llvm::raw_ostream **)this;
  v145 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v145 > 1uLL)
  {
    *v145 = 31520;
    *((_QWORD *)v144 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v144, " {", 2uLL);
  }
  for (i = (_QWORD *)*((_QWORD *)a2 + 10); i != (_QWORD *)((char *)a2 + 72); i = (_QWORD *)i[1])
  {
    if (i)
      v147 = (const llvm::BasicBlock *)(i - 3);
    else
      v147 = 0;
  }
  v148 = *(llvm::raw_ostream **)this;
  v149 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v149 > 1uLL)
  {
    *v149 = 2685;
    *((_QWORD *)v148 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v148, "}\n", 2uLL);
  }
  if ((std::string::size_type *)v155.__r_.__value_.__l.__data_ != &v155.__r_.__value_.__r.__words[2])
    free(v155.__r_.__value_.__l.__data_);
LABEL_279:
  v150 = *((_QWORD *)this + 4);
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::clear((_DWORD *)(v150 + 136));
  *(_QWORD *)(v150 + 16) = 0;
  *(_BYTE *)(v150 + 24) = 0;
  return result;
}

void `anonymous namespace'::AssemblyWriter::~AssemblyWriter(_anonymous_namespace_::AssemblyWriter *this)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  MEMORY[0x24BD1B398](*((_QWORD *)this + 75), 8);
  v2 = (char *)*((_QWORD *)this + 57);
  if (v2 != (char *)this + 472)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 39);
  if (v3 != (char *)this + 328)
    free(v3);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>,llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>::destroyAll((uint64_t)this + 288);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 36), 8);
  v4 = (void *)*((_QWORD *)this + 32);
  if (v4)
  {
    *((_QWORD *)this + 33) = v4;
    operator delete(v4);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 29), 8);
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 22), 8);
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 15), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 12), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 9), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 6), 8);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

llvm::SlotTracker *`anonymous namespace'::AssemblyWriter::printBasicBlock(llvm::SlotTracker **this, const llvm::BasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  const llvm::BasicBlock *v6;
  BOOL v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::SlotTracker *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  size_t v13;
  unsigned __int8 *v14;
  size_t *ValueName;
  llvm::SlotTracker *v16;
  _BYTE *v17;
  int LocalSlot;
  llvm::SlotTracker *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  llvm::raw_ostream *v24;
  size_t v25;
  llvm::SlotTracker *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  llvm::SlotTracker *v33;
  uint64_t v34;
  llvm::SlotTracker *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  llvm::SlotTracker *v42;
  _BYTE *v43;
  llvm::SlotTracker *v44;
  _QWORD *i;
  const llvm::Instruction *v46;
  llvm::SlotTracker *v47;
  _BYTE *v48;
  llvm::SlotTracker *result;
  llvm::SlotTracker *v50;
  _WORD *v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;

  v4 = *((_QWORD *)a2 + 7);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 80);
    if (v5)
      v6 = (const llvm::BasicBlock *)(v5 - 24);
    else
      v6 = 0;
    v7 = v6 == a2;
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      if (v6 == a2)
        goto LABEL_62;
LABEL_9:
      v8 = *this;
      v9 = (_BYTE *)*((_QWORD *)*this + 4);
      if (*((_BYTE **)*this + 3) == v9)
      {
        llvm::raw_ostream::write(v8, "\n", 1uLL);
      }
      else
      {
        *v9 = 10;
        ++*((_QWORD *)v8 + 4);
      }
      LocalSlot = llvm::SlotTracker::getLocalSlot(this[4], a2);
      v19 = *this;
      if (LocalSlot == -1)
      {
        v22 = *((_QWORD *)v19 + 4);
        if ((unint64_t)(*((_QWORD *)v19 + 3) - v22) > 8)
        {
          *(_BYTE *)(v22 + 8) = 58;
          *(_QWORD *)v22 = *(_QWORD *)"<badref>:";
          v21 = *((_QWORD *)v19 + 4) + 9;
          goto LABEL_32;
        }
        v23 = "<badref>:";
        v24 = *this;
        v25 = 9;
      }
      else
      {
        llvm::write_integer(*this, LocalSlot, 0, 0);
        v20 = (_BYTE *)*((_QWORD *)v19 + 4);
        if (*((_BYTE **)v19 + 3) != v20)
        {
          *v20 = 58;
          v21 = *((_QWORD *)v19 + 4) + 1;
LABEL_32:
          *((_QWORD *)v19 + 4) = v21;
          goto LABEL_33;
        }
        v23 = ":";
        v24 = v19;
        v25 = 1;
      }
      llvm::raw_ostream::write(v24, v23, v25);
      goto LABEL_33;
    }
  }
  else
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      goto LABEL_9;
    v7 = 0;
  }
  v10 = *this;
  v11 = (_BYTE *)*((_QWORD *)*this + 4);
  if (*((_BYTE **)*this + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "\n", 1uLL);
  }
  else
  {
    *v11 = 10;
    ++*((_QWORD *)v10 + 4);
  }
  v12 = *this;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    ValueName = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
    v14 = (unsigned __int8 *)(ValueName + 2);
    v13 = *ValueName;
  }
  else
  {
    v13 = 0;
    v14 = (unsigned __int8 *)&str_3_26;
  }
  llvm::printLLVMNameWithoutPrefix(v12, v14, v13);
  v16 = *this;
  v17 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v17 >= *((_QWORD *)*this + 3))
  {
    llvm::raw_ostream::write(v16, 58);
    if (v7)
      goto LABEL_62;
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 58;
    if (v7)
      goto LABEL_62;
  }
LABEL_33:
  llvm::formatted_raw_ostream::PadToColumn((char **)*this, 50);
  v26 = *this;
  v27 = (_BYTE *)*((_QWORD *)*this + 4);
  if (*((_BYTE **)*this + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ";", 1uLL);
  }
  else
  {
    *v27 = 59;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = *((_QWORD *)a2 + 1);
  if (v28)
  {
    while (1)
    {
      v29 = *(_QWORD *)(v28 + 24);
      v30 = *(unsigned __int8 *)(v29 + 16);
      v31 = v29 && v30 >= 0x1C;
      if (v31 && v30 - 29 < 0xB)
        break;
      v28 = *(_QWORD *)(v28 + 8);
      if (!v28)
        goto LABEL_46;
    }
    v35 = *this;
    v36 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v36) > 8)
    {
      *(_BYTE *)(v36 + 8) = 32;
      *(_QWORD *)v36 = *(_QWORD *)" preds = ";
      *((_QWORD *)v35 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v35, " preds = ", 9uLL);
    }
    v37 = *(_QWORD *)(v28 + 8);
    if (v37)
    {
      while (1)
      {
        v38 = *(_QWORD *)(v37 + 24);
        v39 = *(unsigned __int8 *)(v38 + 16);
        v40 = v38 && v39 >= 0x1C;
        if (v40 && v39 - 29 <= 0xA)
          break;
        v37 = *(_QWORD *)(v37 + 8);
        if (!v37)
          goto LABEL_62;
      }
LABEL_78:
      v50 = *this;
      v51 = (_WORD *)*((_QWORD *)*this + 4);
      if (*((_QWORD *)*this + 3) - (_QWORD)v51 > 1uLL)
      {
        *v51 = 8236;
        *((_QWORD *)v50 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v50, ", ", 2uLL);
      }
      while (1)
      {
        v37 = *(_QWORD *)(v37 + 8);
        if (!v37)
          break;
        v52 = *(_QWORD *)(v37 + 24);
        v53 = *(unsigned __int8 *)(v52 + 16);
        if (v52)
          v54 = v53 >= 0x1C;
        else
          v54 = 0;
        if (v54 && v53 - 29 < 0xB)
          goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_46:
    v33 = *this;
    v34 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v34) > 0x10)
    {
      *(_BYTE *)(v34 + 16) = 33;
      *(_OWORD *)v34 = *(_OWORD *)" No predecessors!";
      *((_QWORD *)v33 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v33, " No predecessors!", 0x11uLL);
    }
  }
LABEL_62:
  v42 = *this;
  v43 = (_BYTE *)*((_QWORD *)*this + 4);
  if (*((_BYTE **)*this + 3) == v43)
  {
    llvm::raw_ostream::write(v42, "\n", 1uLL);
  }
  else
  {
    *v43 = 10;
    ++*((_QWORD *)v42 + 4);
  }
  v44 = this[28];
  if (v44)
    (*(void (**)(llvm::SlotTracker *, const llvm::BasicBlock *, llvm::SlotTracker *))(*(_QWORD *)v44 + 24))(v44, a2, *this);
  for (i = (_QWORD *)*((_QWORD *)a2 + 6); i != (_QWORD *)((char *)a2 + 40); i = (_QWORD *)i[1])
  {
    if (i)
      v46 = (const llvm::Instruction *)(i - 3);
    else
      v46 = 0;
    v47 = *this;
    v48 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v48 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v47, 10);
    }
    else
    {
      *((_QWORD *)v47 + 4) = v48 + 1;
      *v48 = 10;
    }
  }
  result = this[28];
  if (result)
    return (llvm::SlotTracker *)(*(uint64_t (**)(llvm::SlotTracker *, const llvm::BasicBlock *, llvm::SlotTracker *))(*(_QWORD *)result + 32))(result, a2, *this);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printNamedMDNode(llvm::raw_ostream **this, const llvm::NamedMDNode *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  int v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned int **v15;
  llvm::raw_ostream *v16;
  _anonymous_namespace_::AsmWriterContext *v17;
  int v18;
  _BYTE *v19;
  _QWORD *v20;
  llvm::raw_ostream *result;
  _WORD *v22;

  v4 = *this;
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 33);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 33;
  }
  v6 = *((char *)a2 + 39);
  if (v6 >= 0)
    v7 = (const llvm::NamedMDNode *)((char *)a2 + 16);
  else
    v7 = (llvm::raw_ostream *)*((_QWORD *)a2 + 2);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 39);
  else
    v8 = *((_QWORD *)a2 + 3);
  printMetadataIdentifier(v7, v8, *this);
  v9 = *this;
  v10 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v10) > 4)
  {
    *(_BYTE *)(v10 + 4) = 123;
    *(_DWORD *)v10 = 555760928;
    *((_QWORD *)v9 + 4) += 5;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, " = !{", 5uLL);
  }
  v11 = *(unsigned int *)(*((_QWORD *)a2 + 6) + 8);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    do
    {
      if (v12)
      {
        v9 = *this;
        v14 = (_WORD *)*((_QWORD *)*this + 4);
        if (*((_QWORD *)*this + 3) - (_QWORD)v14 > 1uLL)
        {
          *v14 = 8236;
          *((_QWORD *)v9 + 4) += 2;
        }
        else
        {
          v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
        }
      }
      v15 = *(unsigned int ***)(**((_QWORD **)a2 + 6) + v12);
      if (*(_BYTE *)v15 == 6)
      {
        v16 = *this;
        v9 = (llvm::raw_ostream *)writeDIExpression(v16, v15, v17);
      }
      else
      {
        v18 = (*(uint64_t (**)(llvm::raw_ostream *, _QWORD))(*(_QWORD *)this[4] + 32))(this[4], *(_QWORD *)(**((_QWORD **)a2 + 6) + v12));
        v9 = *this;
        if (v18 == -1)
        {
          v20 = (_QWORD *)*((_QWORD *)v9 + 4);
          if (*((_QWORD *)v9 + 3) - (_QWORD)v20 > 7uLL)
          {
            *v20 = 0x3E6665726461623CLL;
            *((_QWORD *)v9 + 4) += 8;
          }
          else
          {
            v9 = llvm::raw_ostream::write(v9, "<badref>", 8uLL);
          }
        }
        else
        {
          v19 = (_BYTE *)*((_QWORD *)v9 + 4);
          if ((unint64_t)v19 >= *((_QWORD *)v9 + 3))
          {
            v9 = llvm::raw_ostream::write(v9, 33);
          }
          else
          {
            *((_QWORD *)v9 + 4) = v19 + 1;
            *v19 = 33;
          }
          v9 = llvm::write_integer(v9, v18, 0, 0);
        }
      }
      v12 += 8;
    }
    while (v13 != v12);
  }
  result = *this;
  v22 = (_WORD *)*((_QWORD *)*this + 4);
  if (*((_QWORD *)*this + 3) - (_QWORD)v22 <= 1uLL)
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  *v22 = 2685;
  *((_QWORD *)result + 4) += 2;
  return result;
}

void llvm::NamedMDNode::print(llvm::NamedMDNode *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  _BYTE *Machine;
  void (**v8)(llvm::formatted_raw_ostream *__hidden);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  llvm::raw_ostream *v21[78];
  _BYTE v22[328];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v22[0] = 0;
  v23 = 0;
  Machine = (_BYTE *)llvm::ModuleSlotTracker::getMachine(a3);
  if (!Machine)
  {
    v21[0] = *((llvm::raw_ostream **)this + 5);
    Machine = v22;
    std::optional<llvm::SlotTracker>::emplace[abi:nn180100]<llvm::Module const*,void>((llvm::SlotTracker *)v22, (uint64_t *)v21);
  }
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = &off_251C12AF0;
  v16 = 0;
  v17 = 0;
  v18 = &v20;
  v19 = xmmword_24AA2D790;
  llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v8, a2);
  llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v8);
  if (v23)
    llvm::SlotTracker::~SlotTracker((llvm::SlotTracker *)v22);
}

llvm::SlotTracker *std::optional<llvm::SlotTracker>::emplace[abi:nn180100]<llvm::Module const*,void>(llvm::SlotTracker *this, uint64_t *a2)
{
  if (*((_BYTE *)this + 328))
  {
    llvm::SlotTracker::~SlotTracker(this);
    *((_BYTE *)this + 328) = 0;
  }
  std::__construct_at[abi:nn180100]<llvm::SlotTracker,llvm::Module const*,llvm::SlotTracker*>((uint64_t)this, a2);
  *((_BYTE *)this + 328) = 1;
  return this;
}

llvm::raw_ostream *PrintLLVMName(llvm::raw_ostream *a1, unsigned __int8 *a2, size_t a3, int a4)
{
  char *v6;
  char v7;
  char v8;

  switch(a4)
  {
    case 3:
      v6 = (char *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v6 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v6 + 1;
        v7 = 37;
        goto LABEL_10;
      }
      v8 = 37;
LABEL_14:
      a1 = llvm::raw_ostream::write(a1, v8);
      return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
    case 1:
      v6 = (char *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v6 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v6 + 1;
        v7 = 36;
        goto LABEL_10;
      }
      v8 = 36;
      goto LABEL_14;
    case 0:
      v6 = (char *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v6 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v6 + 1;
        v7 = 64;
LABEL_10:
        *v6 = v7;
        return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
      }
      v8 = 64;
      goto LABEL_14;
  }
  return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
}

uint64_t llvm::Type::print(llvm::Type *this, llvm::raw_ostream *a2, BOOL a3, char a4)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__p;
  void *v30;
  uint64_t v31;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  __p = 0;
  v30 = 0;
  v31 = 0;
  v9 = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  if ((a4 & 1) == 0 && this && (*((_DWORD *)this + 2) & 0x4FF) == 0x10)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 7uLL)
    {
      *v7 = 0x2065707974203D20;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = type ", 8uLL);
    }
  }
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  MEMORY[0x24BD1B398](v26, 8);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  MEMORY[0x24BD1B398](v19, 8);
  MEMORY[0x24BD1B398](v16, 8);
  MEMORY[0x24BD1B398](v13, 8);
  return MEMORY[0x24BD1B398](v10, 8);
}

void `anonymous namespace'::TypePrinting::print(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

llvm::raw_ostream *sub_24A98947C@<X0>(unsigned __int8 a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  llvm::raw_ostream *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::raw_ostream *result;
  _BYTE *v22;

  v16 = a1;
  v17 = *(unsigned int *)(v14 + 32);
  v18 = (_BYTE *)*((_QWORD *)v13 + 4);
  if (*((_BYTE **)v13 + 3) == v18)
  {
    llvm::raw_ostream::write(v13, "<", 1uLL);
  }
  else
  {
    *v18 = 60;
    ++*((_QWORD *)v13 + 4);
  }
  if (v16 == 19)
  {
    v19 = *((_QWORD *)v13 + 4);
    if ((unint64_t)(*((_QWORD *)v13 + 3) - v19) > 8)
    {
      *(_BYTE *)(v19 + 8) = 32;
      *(_QWORD *)v19 = *(_QWORD *)"vscale x ";
      *((_QWORD *)v13 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v13, "vscale x ", 9uLL);
    }
  }
  write_unsigned<unsigned long>(v13, v17, 0, 0, 0);
  v20 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v20) > 2)
  {
    *(_BYTE *)(v20 + 2) = 32;
    *(_WORD *)v20 = 30752;
    *((_QWORD *)v13 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v13, " x ", 3uLL);
  }
  v22 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v13 + 3))
    return llvm::raw_ostream::write(v13, 62);
  *((_QWORD *)v13 + 4) = v22 + 1;
  *v22 = 62;
  return result;
}

llvm::raw_ostream *`anonymous namespace'::TypePrinting::printStructBody(llvm::raw_ostream *this, llvm::StructType *a2, llvm::raw_ostream *a3)
{
  int v4;
  uint64_t v5;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  _WORD *v9;
  const char *v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;

  v4 = *((_DWORD *)a2 + 2);
  if ((v4 & 0x100) != 0)
  {
    v7 = this;
    if ((v4 & 0x200) != 0)
    {
      v8 = (_BYTE *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, 60);
      }
      else
      {
        *((_QWORD *)a3 + 4) = v8 + 1;
        *v8 = 60;
      }
    }
    if (*((_DWORD *)a2 + 3))
    {
      v9 = (_WORD *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8315;
        *((_QWORD *)a3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a3, "{ ", 2uLL);
      }
      v11 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        v14 = 8 * v11;
        v10 = " }";
        do
        {
          v16 = *v13++;
          v15 = v16;
          if ((v12 & 1) != 0)
            v17 = ", ";
          else
            v17 = 0;
          if ((v12 & 1) != 0)
            v18 = 2;
          else
            v18 = 0;
          llvm::raw_ostream::operator<<(a3, v17, v18);
          v12 = 1;
          v14 -= 8;
        }
        while (v14);
      }
      else
      {
        v10 = " }";
      }
    }
    else
    {
      v10 = "{}";
    }
    this = llvm::raw_ostream::operator<<(a3, v10, 2uLL);
    if ((*((_BYTE *)a2 + 9) & 2) != 0)
    {
      v19 = (_BYTE *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v19 >= *((_QWORD *)a3 + 3))
      {
        return llvm::raw_ostream::write(a3, 62);
      }
      else
      {
        *((_QWORD *)a3 + 4) = v19 + 1;
        *v19 = 62;
      }
    }
  }
  else
  {
    v5 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 25973;
      *(_DWORD *)v5 = 1902211183;
      *((_QWORD *)a3 + 4) += 6;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "opaque", 6uLL);
    }
  }
  return this;
}

uint64_t getModuleFromVal(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t ModuleFromVal;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 21)
  {
    a1 = *(_QWORD *)(a1 + 24);
    if (!a1)
      return 0;
    return *(_QWORD *)(a1 + 40);
  }
  if (a1 && v1 == 22)
  {
    a1 = *(_QWORD *)(a1 + 56);
    if (!a1)
      return 0;
    return *(_QWORD *)(a1 + 40);
  }
  if (a1 && v1 >= 0x1C)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      a1 = *(_QWORD *)(v2 + 56);
      if (!a1)
        return 0;
      return *(_QWORD *)(a1 + 40);
    }
  }
  else
  {
    if (a1 && v1 < 4)
      return *(_QWORD *)(a1 + 40);
    v2 = 0;
    if (a1 && v1 == 23)
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (!v3)
        return 0;
      while (1)
      {
        v4 = *(unsigned __int8 **)(v3 + 24);
        if (v4[16] >= 0x1Cu)
        {
          ModuleFromVal = getModuleFromVal((const llvm::Value *)v4);
          if (ModuleFromVal)
            break;
        }
        v2 = 0;
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          return v2;
      }
      return ModuleFromVal;
    }
  }
  return v2;
}

void llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  _QWORD *Machine;
  unsigned int v9;
  uint64_t v10;
  const llvm::Function *v11;
  uint64_t ModuleFromVal;
  const llvm::Function *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD v19[4];
  void (**v20)(llvm::formatted_raw_ostream *__hidden);
  int v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void *v54;
  uint64_t v55;
  _QWORD v56[3];
  __int16 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  Machine = v56;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v20 = &off_251C12AF0;
  v28 = 0;
  v29 = 0;
  v30 = &v32;
  v31 = xmmword_24AA2D790;
  llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v20, a2);
  v58 = 0;
  v64 = 0;
  v63 = 0;
  v65 = 0;
  v66 = 0;
  v68 = 0;
  v67 = 0;
  v69 = 0;
  v70 = 0;
  v72 = 0;
  v71 = 0;
  v73 = 0;
  v74 = 0;
  v76 = 0;
  v75 = 0;
  v77 = 0;
  v59 = 0u;
  v60 = 0u;
  v62 = 0;
  v61 = 0;
  v56[2] = 0;
  v56[0] = &off_251C1E370;
  v56[1] = 0;
  v57 = 0;
  v78 = 16;
  v81 = 0;
  v79 = 0;
  v80 = 0;
  v82 = 0;
  v85 = 0;
  v83 = 0;
  v84 = 0;
  v86 = 16;
  if (llvm::ModuleSlotTracker::getMachine(a3))
    Machine = (_QWORD *)llvm::ModuleSlotTracker::getMachine(a3);
  v9 = *((unsigned __int8 *)this + 16);
  if (this && v9 >= 0x1C)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
    {
      v11 = *(const llvm::Function **)(v10 + 56);
      if (v11)
        llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)a3, v11);
    }
    ModuleFromVal = getModuleFromVal((uint64_t)this);
    goto LABEL_14;
  }
  if (this && v9 == 22)
  {
    v13 = (const llvm::Function *)*((_QWORD *)this + 7);
    if (v13)
      llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)a3, v13);
    v14 = getModuleFromVal((uint64_t)this);
    goto LABEL_14;
  }
  if (this && v9 <= 3)
  {
    v15 = *((unsigned __int8 *)this + 16);
    if (*((_BYTE *)this + 16))
    {
      if (v15 == 1)
      {
      }
      else if (v15 == 3)
      {
      }
      else
      {
      }
    }
    else
    {
    }
LABEL_14:
    goto LABEL_15;
  }
  if (this && v9 == 23)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v17 = getModuleFromVal((uint64_t)this);
    printMetadataImpl(a2, v16, a3, v17, 0, 0);
  }
  else if (this && v9 <= 0x14)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    __p = 0;
    v54 = 0;
    v55 = 0;
    v33 = 0;
    v34 = 0;
    v36 = 0;
    v35 = 0;
    v18 = v24;
    if ((unint64_t)v24 >= v23)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v20, 32);
    }
    else
    {
      ++v24;
      *v18 = 32;
    }
    v19[0] = &off_251C1E428;
    v19[1] = &v33;
    v19[2] = llvm::ModuleSlotTracker::getMachine(a3);
    v19[3] = 0;
    WriteConstantInternal((llvm::raw_ostream *)&v20, this, (_anonymous_namespace_::AsmWriterContext *)v19);
    if (__p)
    {
      v54 = __p;
      operator delete(__p);
    }
    MEMORY[0x24BD1B398](v50, 8);
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    MEMORY[0x24BD1B398](v43, 8);
    MEMORY[0x24BD1B398](v40, 8);
    MEMORY[0x24BD1B398](v37, 8);
    MEMORY[0x24BD1B398](v34, 8);
  }
  else
  {
    printAsOperandImpl(this, (llvm::raw_ostream *)&v20, 1, a3);
  }
LABEL_15:
  llvm::SlotTracker::~SlotTracker((llvm::SlotTracker *)v56);
  llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v20);
}

void `anonymous namespace'::AssemblyWriter::printInstruction(_anonymous_namespace_::AssemblyWriter *this, const llvm::Instruction *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  int LocalSlot;
  llvm::raw_ostream *v8;
  int v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  uint64_t ValueName;
  int v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  const char *v23;
  size_t v24;
  llvm::raw_ostream *v25;
  const char *OpcodeName;
  size_t v27;
  int v28;
  llvm::raw_ostream *v29;
  _DWORD *v30;
  __int16 v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  int v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  const char *PredicateName;
  size_t v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  char *OperationName;
  size_t v44;
  int v45;
  uint64_t v46;
  const llvm::Value **v47;
  int v48;
  const llvm::Value *v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  const llvm::Instruction *v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  int v68;
  const llvm::Value **v69;
  llvm::raw_ostream *v70;
  uint64_t v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  llvm::raw_ostream *v74;
  _WORD *v75;
  int v76;
  int v77;
  uint64_t v78;
  llvm::raw_ostream *v79;
  _WORD *v80;
  int v81;
  char *v82;
  llvm::raw_ostream *v83;
  char *v84;
  char v85;
  char v86;
  int v87;
  const llvm::Value **v88;
  llvm::raw_ostream *v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  llvm::raw_ostream *v93;
  uint64_t v94;
  int v95;
  char *v96;
  llvm::raw_ostream *v97;
  _WORD *v98;
  int v99;
  char *v100;
  uint64_t v101;
  llvm::raw_ostream *v102;
  _DWORD *v103;
  llvm::raw_ostream *v104;
  _WORD *v105;
  llvm::raw_ostream *v106;
  _WORD *v107;
  const llvm::Value *v108;
  llvm::raw_ostream *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  llvm::raw_ostream *v115;
  _WORD *v116;
  llvm::raw_ostream *v117;
  _WORD *v118;
  int v119;
  char *v120;
  llvm::raw_ostream *v121;
  _WORD *v122;
  int v123;
  char *v124;
  llvm::raw_ostream *v125;
  _WORD *v126;
  int v127;
  llvm::raw_ostream *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  llvm::raw_ostream *v133;
  _WORD *v134;
  int v135;
  char *v136;
  llvm::raw_ostream *v137;
  _BYTE *v138;
  const llvm::Instruction *v139;
  llvm::raw_ostream *v140;
  _BYTE *v141;
  int v142;
  const llvm::Value **v143;
  int v144;
  const llvm::Value **v145;
  const llvm::Instruction *v146;
  int v147;
  const llvm::Value **v148;
  uint64_t v149;
  unsigned int *v150;
  uint64_t v151;
  unint64_t v152;
  llvm::raw_ostream *v153;
  _WORD *v154;
  llvm::raw_ostream *v155;
  _WORD *v156;
  int v157;
  const llvm::Value **v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  unint64_t v162;
  llvm::raw_ostream *v163;
  _WORD *v164;
  llvm::raw_ostream *v165;
  _BYTE *v166;
  const llvm::Instruction *v167;
  llvm::raw_ostream *v168;
  const char *v169;
  size_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  llvm::raw_ostream *v174;
  _BYTE *v175;
  int v176;
  char *v177;
  int v178;
  const char *v179;
  size_t v180;
  int v181;
  char *v182;
  int v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  const llvm::Value **v187;
  uint64_t v188;
  uint64_t v189;
  llvm::raw_ostream *v190;
  _WORD *v191;
  uint64_t v192;
  const llvm::Value **v193;
  int v194;
  const llvm::Value *v195;
  llvm::raw_ostream *v196;
  _WORD *v197;
  int v198;
  const llvm::Instruction *v199;
  unint64_t v200;
  llvm::raw_ostream *v201;
  _QWORD *v202;
  unsigned int v203;
  int v204;
  llvm::raw_ostream *v205;
  _BYTE *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  int v210;
  llvm::raw_ostream *v211;
  _BYTE *v212;
  _QWORD *v213;
  const llvm::Instruction *v214;
  llvm::raw_ostream *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  llvm::raw_ostream *v219;
  _BYTE *v220;
  const llvm::CallBase *v221;
  llvm::raw_ostream *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  llvm::raw_ostream *v226;
  _BYTE *v227;
  unsigned int *v228;
  const llvm::Value *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  llvm::raw_ostream *v233;
  _BYTE *v234;
  llvm::raw_ostream *v235;
  _BYTE *v236;
  llvm::raw_ostream *v237;
  _BYTE *v238;
  llvm::AttributeSetNode *v239;
  std::string *v240;
  size_t v241;
  llvm::raw_ostream *v242;
  _BYTE *v243;
  uint64_t v244;
  llvm::raw_ostream *v245;
  _BYTE *v246;
  llvm::raw_ostream *v247;
  _BYTE *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const llvm::Instruction *v252;
  const llvm::AttributeSet *v253;
  uint64_t v254;
  uint64_t v255;
  llvm::raw_ostream *v256;
  _BYTE *v257;
  llvm::raw_ostream *v258;
  uint64_t v259;
  int AttributeGroupSlot;
  __int16 v261;
  uint64_t v262;
  __int16 v263;
  llvm::raw_ostream *v264;
  unint64_t v265;
  unint64_t v266;
  llvm::raw_ostream *v267;
  llvm::raw_ostream *v268;
  _BYTE *v269;
  llvm::AttributeSetNode *v270;
  std::string *v271;
  size_t v272;
  llvm::raw_ostream *v273;
  _BYTE *v274;
  uint64_t v275;
  llvm::raw_ostream *v276;
  _BYTE *v277;
  llvm::raw_ostream *v278;
  _BYTE *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  const llvm::CallBase *v283;
  const llvm::AttributeSet *v284;
  llvm::raw_ostream *v285;
  _BYTE *v286;
  llvm::raw_ostream *v287;
  uint64_t v288;
  int v289;
  llvm::raw_ostream *v290;
  _BYTE *v291;
  llvm::AttributeSetNode *v292;
  std::string *v293;
  size_t v294;
  llvm::raw_ostream *v295;
  _BYTE *v296;
  uint64_t v297;
  llvm::raw_ostream *v298;
  _BYTE *v299;
  llvm::raw_ostream *v300;
  _BYTE *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int *v305;
  const llvm::AttributeSet *v306;
  llvm::raw_ostream *v307;
  _BYTE *v308;
  llvm::raw_ostream *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  llvm::raw_ostream *v315;
  const char *v316;
  size_t v317;
  llvm::raw_ostream *v318;
  _BYTE *v319;
  char *v320;
  uint64_t **v321;
  llvm::raw_ostream *v322;
  _BYTE *v323;
  char *v324;
  llvm::AttributeSetNode *v325;
  std::string __p[3];
  uint64_t v327;

  v327 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 28);
  if (v4)
    (*(void (**)(uint64_t, const llvm::Instruction *, _QWORD))(*(_QWORD *)v4 + 40))(v4, a2, *(_QWORD *)this);
  v5 = *(llvm::raw_ostream **)this;
  v6 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8224;
    *((_QWORD *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, "  ", 2uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v11 = *(llvm::raw_ostream **)this;
    ValueName = llvm::Value::getValueName((uint64_t ***)a2);
    if (*((unsigned __int8 *)a2 + 16) >= 4u)
      v13 = 3;
    else
      v13 = 0;
    PrintLLVMName(v11, (unsigned __int8 *)(ValueName + 16), *(_QWORD *)ValueName, v13);
    v14 = *(llvm::raw_ostream **)this;
    v15 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v15) > 2)
    {
      *(_BYTE *)(v15 + 2) = 32;
      *(_WORD *)v15 = 15648;
      *((_QWORD *)v14 + 4) += 3;
      goto LABEL_27;
    }
    v16 = " = ";
    goto LABEL_22;
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
    goto LABEL_27;
  LocalSlot = llvm::SlotTracker::getLocalSlot(*((llvm::SlotTracker **)this + 4), a2);
  v8 = *(llvm::raw_ostream **)this;
  if (LocalSlot == -1)
  {
    v17 = *((_QWORD *)v8 + 4);
    if ((unint64_t)(*((_QWORD *)v8 + 3) - v17) <= 0xA)
    {
      v16 = "<badref> = ";
      v14 = *(llvm::raw_ostream **)this;
      v18 = 11;
LABEL_23:
      llvm::raw_ostream::write(v14, v16, v18);
      goto LABEL_27;
    }
    *(_DWORD *)(v17 + 7) = 540876862;
    *(_QWORD *)v17 = *(_QWORD *)"<badref> = ";
    v20 = *((_QWORD *)v8 + 4) + 11;
  }
  else
  {
    v9 = LocalSlot;
    v10 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 37);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v10 + 1;
      *v10 = 37;
    }
    llvm::write_integer(v8, v9, 0, 0);
    v19 = *((_QWORD *)v8 + 4);
    if ((unint64_t)(*((_QWORD *)v8 + 3) - v19) <= 2)
    {
      v16 = " = ";
      v14 = v8;
LABEL_22:
      v18 = 3;
      goto LABEL_23;
    }
    *(_BYTE *)(v19 + 2) = 32;
    *(_WORD *)v19 = 15648;
    v20 = *((_QWORD *)v8 + 4) + 3;
  }
  *((_QWORD *)v8 + 4) = v20;
LABEL_27:
  v21 = *((unsigned __int8 *)a2 + 16);
  if (v21 != 84)
    goto LABEL_35;
  v22 = *((_WORD *)a2 + 9) & 3;
  if (v22 == 2)
  {
    v23 = "musttail ";
    v24 = 9;
LABEL_34:
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, v23, v24);
    v21 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_35;
  }
  if ((v22 - 1) < 2)
  {
    v23 = "tail ";
    v24 = 5;
    goto LABEL_34;
  }
  if (v22 == 3)
  {
    v23 = "notail ";
    v24 = 7;
    goto LABEL_34;
  }
  v21 = 84;
LABEL_35:
  v25 = *(llvm::raw_ostream **)this;
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(v21 - 28));
  v27 = strlen(OpcodeName);
  llvm::raw_ostream::operator<<(v25, OpcodeName, v27);
  v28 = *((unsigned __int8 *)a2 + 16);
  if (v28 == 61)
  {
    if (!llvm::Instruction::isAtomic(a2))
    {
LABEL_51:
      v31 = *((_WORD *)a2 + 9);
LABEL_52:
      if ((v31 & 1) != 0)
      {
        v34 = *(llvm::raw_ostream **)this;
        v35 = *(_QWORD *)(*(_QWORD *)this + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v35) > 8)
        {
          *(_BYTE *)(v35 + 8) = 101;
          *(_QWORD *)v35 = *(_QWORD *)" volatile";
          *((_QWORD *)v34 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v34, " volatile", 9uLL);
        }
      }
      goto LABEL_56;
    }
  }
  else
  {
    if (v28 != 60)
      goto LABEL_44;
    if (!llvm::Instruction::isAtomic(a2))
      goto LABEL_51;
  }
  v29 = *(llvm::raw_ostream **)this;
  v30 = *(_DWORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v30 > 6uLL)
  {
    *(_DWORD *)((char *)v30 + 3) = 1667853679;
    *v30 = 1869898016;
    *((_QWORD *)v29 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v29, " atomic", 7uLL);
  }
  v28 = *((unsigned __int8 *)a2 + 16);
LABEL_44:
  if (v28 == 64)
  {
    v31 = *((_WORD *)a2 + 9);
    if ((v31 & 2) == 0)
      goto LABEL_52;
    v32 = *(llvm::raw_ostream **)this;
    v33 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v33) > 4)
    {
      *(_BYTE *)(v33 + 4) = 107;
      *(_DWORD *)v33 = 1634039584;
      *((_QWORD *)v32 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v32, " weak", 5uLL);
    }
    v28 = *((unsigned __int8 *)a2 + 16);
  }
  switch(v28)
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      goto LABEL_51;
    default:
      break;
  }
LABEL_56:
  WriteOptimizationInfo(*(llvm::raw_ostream **)this, a2);
  v36 = *((unsigned __int8 *)a2 + 16);
  if ((v36 - 83) >= 0xFFFFFFFE)
  {
    v37 = *(llvm::raw_ostream **)this;
    v38 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v38 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
    }
    else
    {
      *((_QWORD *)v37 + 4) = v38 + 1;
      *v38 = 32;
    }
    PredicateName = llvm::CmpInst::getPredicateName(*((_WORD *)a2 + 9) & 0x3F);
    llvm::raw_ostream::operator<<(v37, PredicateName, v40);
    v36 = *((unsigned __int8 *)a2 + 16);
  }
  if (v36 == 65)
  {
    v41 = *(llvm::raw_ostream **)this;
    v42 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v42 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
    }
    else
    {
      *((_QWORD *)v41 + 4) = v42 + 1;
      *v42 = 32;
    }
    OperationName = llvm::AtomicRMWInst::getOperationName((*((unsigned __int16 *)a2 + 9) >> 4) & 0x1F);
    llvm::raw_ostream::operator<<(v41, OperationName, v44);
  }
  v45 = *((_DWORD *)a2 + 5);
  v46 = v45 & 0x7FFFFFF;
  if ((v45 & 0x7FFFFFF) != 0)
  {
    if ((v45 & 0x40000000) != 0)
      v47 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v47 = (const llvm::Value **)((char *)a2 - 32 * v46);
    v49 = *v47;
    v48 = *((unsigned __int8 *)a2 + 16);
    if (v48 == 30)
    {
      if ((_DWORD)v46 == 3)
      {
        v50 = *(llvm::raw_ostream **)this;
        v51 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v51 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v50, 32);
        }
        else
        {
          *((_QWORD *)v50 + 4) = v51 + 1;
          *v51 = 32;
        }
        v104 = *(llvm::raw_ostream **)this;
        v105 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v105 > 1uLL)
        {
          *v105 = 8236;
          *((_QWORD *)v104 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v104, ", ", 2uLL);
        }
        v106 = *(llvm::raw_ostream **)this;
        v107 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v107 > 1uLL)
        {
          *v107 = 8236;
          *((_QWORD *)v106 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v106, ", ", 2uLL);
        }
        v108 = (const llvm::Value *)*((_QWORD *)a2 - 8);
        goto LABEL_164;
      }
      if (!v49)
        goto LABEL_321;
      goto LABEL_89;
    }
  }
  else
  {
    v48 = *((unsigned __int8 *)a2 + 16);
    if (v48 == 30)
      goto LABEL_347;
    v49 = 0;
  }
  if (v48 == 32)
  {
    v54 = *(llvm::raw_ostream **)this;
    v55 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v55 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v54, 32);
    }
    else
    {
      *((_QWORD *)v54 + 4) = v55 + 1;
      *v55 = 32;
    }
    v70 = *(llvm::raw_ostream **)this;
    v71 = *(_QWORD *)(*(_QWORD *)this + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v71) > 2)
    {
      *(_BYTE *)(v71 + 2) = 91;
      *(_WORD *)v71 = 8236;
      *((_QWORD *)v70 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v70, ", [", 3uLL);
    }
    v76 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    v77 = v76 - 1;
    if (v76 != 1)
    {
      v78 = 32;
      do
      {
        if (v78 != 32)
        {
          v79 = *(llvm::raw_ostream **)this;
          v80 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v80 > 1uLL)
          {
            *v80 = 8236;
            *((_QWORD *)v79 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v79, ", ", 2uLL);
          }
        }
        v81 = *((_DWORD *)a2 + 5);
        if ((v81 & 0x40000000) != 0)
          v82 = (char *)*((_QWORD *)a2 - 1);
        else
          v82 = (char *)a2 - 32 * (v81 & 0x7FFFFFF);
        v78 += 32;
        --v77;
      }
      while (v77);
    }
    goto LABEL_124;
  }
  if (v48 == 31)
  {
    v52 = *(llvm::raw_ostream **)this;
    v53 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v53 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v52, 32);
    }
    else
    {
      *((_QWORD *)v52 + 4) = v53 + 1;
      *v53 = 32;
    }
    v68 = *((_DWORD *)a2 + 5);
    if ((v68 & 0x40000000) != 0)
      v69 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v69 = (const llvm::Value **)((char *)a2 - 32 * (v68 & 0x7FFFFFF));
    v74 = *(llvm::raw_ostream **)this;
    v75 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v75 > 1uLL)
    {
      *v75 = 8236;
      *((_QWORD *)v74 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v74, ", ", 2uLL);
    }
    v87 = *((_DWORD *)a2 + 5);
    if ((v87 & 0x40000000) != 0)
      v88 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v88 = (const llvm::Value **)((char *)a2 - 32 * (v87 & 0x7FFFFFF));
    v89 = *(llvm::raw_ostream **)this;
    v90 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v90 > 1uLL)
    {
      *v90 = 23328;
      *((_QWORD *)v89 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v89, " [", 2uLL);
    }
    if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) != 1)
    {
      v91 = 0;
      v92 = 2 * (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1);
      do
      {
        v93 = *(llvm::raw_ostream **)this;
        v94 = *(_QWORD *)(*(_QWORD *)this + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v94) > 4)
        {
          *(_BYTE *)(v94 + 4) = 32;
          *(_DWORD *)v94 = 538976266;
          *((_QWORD *)v93 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v93, "\n    ", 5uLL);
        }
        v95 = *((_DWORD *)a2 + 5);
        if ((v95 & 0x40000000) != 0)
          v96 = (char *)*((_QWORD *)a2 - 1);
        else
          v96 = (char *)a2 - 32 * (v95 & 0x7FFFFFF);
        v97 = *(llvm::raw_ostream **)this;
        v98 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v98 > 1uLL)
        {
          *v98 = 8236;
          *((_QWORD *)v97 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v97, ", ", 2uLL);
        }
        v99 = *((_DWORD *)a2 + 5);
        if ((v99 & 0x40000000) != 0)
          v100 = (char *)*((_QWORD *)a2 - 1);
        else
          v100 = (char *)a2 - 32 * (v99 & 0x7FFFFFF);
        v101 = (v91 + 3);
        if (v91 == 0x1FFFFFFFCLL)
          v101 = 1;
        v91 += 2;
      }
      while (v92 != v91);
    }
    v102 = *(llvm::raw_ostream **)this;
    v103 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v103 > 3uLL)
    {
      *v103 = 1562386442;
      *((_QWORD *)v102 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v102, "\n  ]", 4uLL);
    }
    goto LABEL_321;
  }
  if (v48 == 83)
    v56 = a2;
  else
    v56 = 0;
  if (v48 == 83)
  {
    v57 = *(llvm::raw_ostream **)this;
    v58 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v58 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v57, 32);
    }
    else
    {
      *((_QWORD *)v57 + 4) = v58 + 1;
      *v58 = 32;
    }
    v109 = *(llvm::raw_ostream **)this;
    v110 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v110 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v109, 32);
    }
    else
    {
      *((_QWORD *)v109 + 4) = v110 + 1;
      *v110 = 32;
    }
    v111 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if ((_DWORD)v111)
    {
      v112 = 0;
      v113 = 0;
      v114 = 32 * v111;
      do
      {
        if (v112)
        {
          v115 = *(llvm::raw_ostream **)this;
          v116 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v116 > 1uLL)
          {
            *v116 = 8236;
            *((_QWORD *)v115 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v115, ", ", 2uLL);
          }
        }
        v117 = *(llvm::raw_ostream **)this;
        v118 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v118 > 1uLL)
        {
          *v118 = 8283;
          *((_QWORD *)v117 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v117, "[ ", 2uLL);
        }
        v119 = *((_DWORD *)a2 + 5);
        if ((v119 & 0x40000000) != 0)
          v120 = (char *)*((_QWORD *)a2 - 1);
        else
          v120 = (char *)v56 - 32 * (v119 & 0x7FFFFFF);
        v121 = *(llvm::raw_ostream **)this;
        v122 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v122 > 1uLL)
        {
          *v122 = 8236;
          *((_QWORD *)v121 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v121, ", ", 2uLL);
        }
        v123 = *((_DWORD *)a2 + 5);
        if ((v123 & 0x40000000) != 0)
          v124 = (char *)*((_QWORD *)a2 - 1);
        else
          v124 = (char *)v56 - 32 * (v123 & 0x7FFFFFF);
        v125 = *(llvm::raw_ostream **)this;
        v126 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v126 > 1uLL)
        {
          *v126 = 23840;
          *((_QWORD *)v125 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v125, " ]", 2uLL);
        }
        v113 += 32;
        v112 += 8;
      }
      while (v114 != v113);
    }
    goto LABEL_321;
  }
  if (v48 == 93)
  {
    v137 = *(llvm::raw_ostream **)this;
    v138 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v138 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v137, 32);
    }
    else
    {
      *((_QWORD *)v137 + 4) = v138 + 1;
      *v138 = 32;
    }
    v144 = *((_DWORD *)a2 + 5);
    if ((v144 & 0x40000000) != 0)
      v145 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v145 = (const llvm::Value **)((char *)a2 - 32 * (v144 & 0x7FFFFFF));
    v155 = *(llvm::raw_ostream **)this;
    v156 = *(_WORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v156 > 1uLL)
    {
      *v156 = 8236;
      *((_QWORD *)v155 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v155, ", ", 2uLL);
    }
    v157 = *((_DWORD *)a2 + 5);
    if ((v157 & 0x40000000) != 0)
      v158 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v158 = (const llvm::Value **)((char *)a2 - 32 * (v157 & 0x7FFFFFF));
    v159 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v159)
    {
      v160 = (unsigned int *)*((_QWORD *)a2 + 8);
      v161 = 4 * v159;
      do
      {
        v162 = *v160;
        v163 = *(llvm::raw_ostream **)this;
        v164 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v164 > 1uLL)
        {
          *v164 = 8236;
          *((_QWORD *)v163 + 4) += 2;
        }
        else
        {
          v163 = llvm::raw_ostream::write(v163, ", ", 2uLL);
        }
        write_unsigned<unsigned long>(v163, v162, 0, 0, 0);
        ++v160;
        v161 -= 4;
      }
      while (v161);
    }
    goto LABEL_321;
  }
  if (v48 == 92)
  {
    v72 = *(llvm::raw_ostream **)this;
    v73 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v73 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v72, 32);
    }
    else
    {
      *((_QWORD *)v72 + 4) = v73 + 1;
      *v73 = 32;
    }
    v142 = *((_DWORD *)a2 + 5);
    if ((v142 & 0x40000000) != 0)
      v143 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v143 = (const llvm::Value **)((char *)a2 - 32 * (v142 & 0x7FFFFFF));
    v149 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v149)
    {
      v150 = (unsigned int *)*((_QWORD *)a2 + 8);
      v151 = 4 * v149;
      do
      {
        v152 = *v150;
        v153 = *(llvm::raw_ostream **)this;
        v154 = *(_WORD **)(*(_QWORD *)this + 32);
        if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v154 > 1uLL)
        {
          *v154 = 8236;
          *((_QWORD *)v153 + 4) += 2;
        }
        else
        {
          v153 = llvm::raw_ostream::write(v153, ", ", 2uLL);
        }
        write_unsigned<unsigned long>(v153, v152, 0, 0, 0);
        ++v150;
        v151 -= 4;
      }
      while (v151);
    }
    goto LABEL_321;
  }
  if (v48 == 94)
    v139 = a2;
  else
    v139 = 0;
  if (v48 == 94)
  {
    v140 = *(llvm::raw_ostream **)this;
    v141 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v141 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v140, 32);
    }
    else
    {
      *((_QWORD *)v140 + 4) = v141 + 1;
      *v141 = 32;
    }
    if ((*((_WORD *)a2 + 9) & 1) != 0 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
    {
      v165 = *(llvm::raw_ostream **)this;
      v166 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v166 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v165, 10);
      }
      else
      {
        *((_QWORD *)v165 + 4) = v166 + 1;
        *v166 = 10;
      }
    }
    if ((*((_WORD *)a2 + 9) & 1) != 0)
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "          cleanup", 0x11uLL);
    v171 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if ((_DWORD)v171)
    {
      v172 = 0;
      v173 = 32 * v171;
      do
      {
        if (v172 || (*((_WORD *)a2 + 9) & 1) != 0)
        {
          v174 = *(llvm::raw_ostream **)this;
          v175 = *(_BYTE **)(*(_QWORD *)this + 32);
          if (*(_BYTE **)(*(_QWORD *)this + 24) == v175)
          {
            llvm::raw_ostream::write(v174, "\n", 1uLL);
          }
          else
          {
            *v175 = 10;
            ++*((_QWORD *)v174 + 4);
          }
        }
        v176 = *((_DWORD *)a2 + 5);
        if ((v176 & 0x40000000) != 0)
          v177 = (char *)*((_QWORD *)a2 - 1);
        else
          v177 = (char *)v139 - 32 * (v176 & 0x7FFFFFF);
        v178 = *(unsigned __int8 *)(**(_QWORD **)&v177[v172] + 8);
        if (v178 == 17)
          v179 = "          filter ";
        else
          v179 = "          catch ";
        if (v178 == 17)
          v180 = 17;
        else
          v180 = 16;
        llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, v179, v180);
        v181 = *((_DWORD *)a2 + 5);
        if ((v181 & 0x40000000) != 0)
          v182 = (char *)*((_QWORD *)a2 - 1);
        else
          v182 = (char *)v139 - 32 * (v181 & 0x7FFFFFF);
        v172 += 32;
      }
      while (v173 != v172);
    }
    goto LABEL_321;
  }
  if (v48 == 38)
    v146 = a2;
  else
    v146 = 0;
  if (v48 == 38)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " within ", 8uLL);
    v147 = *((_DWORD *)a2 + 5);
    if ((v147 & 0x40000000) != 0)
      v148 = (const llvm::Value **)*((_QWORD *)a2 - 1);
    else
      v148 = (const llvm::Value **)((char *)a2 - 32 * (v147 & 0x7FFFFFF));
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [", 2uLL);
    v183 = *((_DWORD *)a2 + 5);
    if ((v183 & 0x40000000) != 0)
    {
      v185 = (char *)*((_QWORD *)a2 - 1);
      v192 = 64;
      if ((*((_WORD *)a2 + 9) & 1) == 0)
        v192 = 32;
      v187 = (const llvm::Value **)&v185[v192];
      v184 = v183 & 0x7FFFFFF;
    }
    else
    {
      v184 = v183 & 0x7FFFFFF;
      v185 = (char *)a2 - 32 * v184;
      v186 = 64;
      if ((*((_WORD *)a2 + 9) & 1) == 0)
        v186 = 32;
      v187 = (const llvm::Value **)&v185[v186];
    }
    v193 = (const llvm::Value **)&v185[32 * v184];
    if (v187 != v193)
    {
      v194 = 0;
      do
      {
        v195 = *v187;
        if (v194)
        {
          v196 = *(llvm::raw_ostream **)this;
          v197 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v197 > 1uLL)
          {
            *v197 = 8236;
            *((_QWORD *)v196 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v196, ", ", 2uLL);
          }
        }
        v187 += 4;
        --v194;
      }
      while (v187 != v193);
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "] unwind ", 9uLL);
    if ((*((_WORD *)v146 + 9) & 1) != 0)
    {
      v198 = *((_DWORD *)a2 + 5);
      v199 = (v198 & 0x40000000) != 0
           ? (const llvm::Instruction *)*((_QWORD *)v146 - 1)
           : (const llvm::Instruction *)((char *)v146 - 32 * (v198 & 0x7FFFFFF));
      v108 = (const llvm::Value *)*((_QWORD *)v199 + 4);
      if (v108)
        goto LABEL_164;
    }
    goto LABEL_319;
  }
  if ((v48 - 81) >= 0xFFFFFFFE)
    v167 = a2;
  else
    v167 = 0;
  if ((v48 - 81) >= 0xFFFFFFFE)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " within ", 8uLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [", 2uLL);
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 1)
    {
      v188 = 0;
      v189 = 32 * ((*((_DWORD *)a2 + 5) & 0x7FFFFFFu) - 1);
      do
      {
        if (v188)
        {
          v190 = *(llvm::raw_ostream **)this;
          v191 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v191 > 1uLL)
          {
            *v191 = 8236;
            *((_QWORD *)v190 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v190, ", ", 2uLL);
          }
        }
        v188 += 32;
      }
      while (v189 != v188);
    }
    goto LABEL_124;
  }
  if (v48 == 29 && !v49)
  {
    v168 = *(llvm::raw_ostream **)this;
    v169 = " void";
    v170 = 5;
LABEL_320:
    llvm::raw_ostream::operator<<(v168, v169, v170);
    goto LABEL_321;
  }
  if (v48 == 36)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " from ", 6uLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " unwind ", 8uLL);
    if ((*((_WORD *)a2 + 9) & 1) == 0)
    {
LABEL_319:
      v168 = *(llvm::raw_ostream **)this;
      v169 = "to caller";
      v170 = 9;
      goto LABEL_320;
    }
    v108 = (const llvm::Value *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
LABEL_164:
    goto LABEL_321;
  }
  if (v48 == 37)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " from ", 6uLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " to ", 4uLL);
    v108 = (const llvm::Value *)*((_QWORD *)a2 - 4);
    goto LABEL_164;
  }
  if (v48 == 84)
    v214 = a2;
  else
    v214 = 0;
  if (v48 == 84)
  {
    if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ", 1uLL);
      PrintCallingConv((llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF), *(llvm::raw_ostream **)this);
    }
    v215 = (llvm::raw_ostream *)*((_QWORD *)a2 - 4);
    v216 = *((_QWORD *)a2 + 8);
    v217 = *((_QWORD *)a2 + 9);
    v218 = **(_QWORD **)(v217 + 16);
    if (v216 && *(_DWORD *)(v216 + 8) >= 2u && *(_QWORD *)(v216 + 48))
    {
      v219 = *(llvm::raw_ostream **)this;
      v220 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v220 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
      }
      else
      {
        *((_QWORD *)v219 + 4) = v220 + 1;
        *v220 = 32;
      }
      v239 = *(_DWORD *)(v216 + 8) < 2u ? 0 : *(llvm::AttributeSetNode **)(v216 + 48);
      v325 = v239;
      llvm::AttributeSet::getAsString(&v325, 0, __p);
      v240 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v241 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__p[0].__r_.__value_.__r.__words[2])
           : __p[0].__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v219, (const char *)v240, v241);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    maybePrintCallAddrSpace(v215, a2, *(llvm::raw_ostream **)this);
    v242 = *(llvm::raw_ostream **)this;
    v243 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v243 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v242, 32);
    }
    else
    {
      *((_QWORD *)v242 + 4) = v243 + 1;
      *v243 = 32;
    }
    if (*(_DWORD *)(v217 + 8) <= 0xFFu)
      v244 = v218;
    else
      v244 = v217;
    v245 = *(llvm::raw_ostream **)this;
    v246 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v246 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v245, 32);
    }
    else
    {
      *((_QWORD *)v245 + 4) = v246 + 1;
      *v246 = 32;
    }
    v247 = *(llvm::raw_ostream **)this;
    v248 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v248 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v247, 40);
    }
    else
    {
      *((_QWORD *)v247 + 4) = v248 + 1;
      *v248 = 40;
    }
    v249 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    if ((v249 & 0x1FFFFFFFE0) != 0)
    {
      v250 = 0;
      v251 = (v249 >> 5);
      v252 = v214;
      do
      {
        if (v250)
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        if (v216 && (v250 + 2) < *(_DWORD *)(v216 + 8))
          v253 = *(const llvm::AttributeSet **)(v216 + 40 + 8 * (v250 + 2));
        else
          v253 = 0;
        ++v250;
        v252 = (const llvm::Instruction *)((char *)v252 + 32);
      }
      while (v251 != v250);
    }
    if ((*((_WORD *)a2 + 9) & 3) == 2)
    {
      v254 = *((_QWORD *)v214 + 5);
      if (v254)
      {
        v255 = *(_QWORD *)(v254 + 56);
        if (v255)
        {
          if (*(_DWORD *)(*(_QWORD *)(v255 + 24) + 8) >= 0x100u)
          {
            if (((llvm::CallBase::arg_end(v214) - ((_QWORD)v214 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "...", 3uLL);
          }
        }
      }
    }
    v256 = *(llvm::raw_ostream **)this;
    v257 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v257 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v256, 41);
    }
    else
    {
      *((_QWORD *)v256 + 4) = v257 + 1;
      *v257 = 41;
    }
    if (v216 && *(_DWORD *)(v216 + 8) && *(_QWORD *)(v216 + 40))
    {
      v258 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #", 2uLL);
      if (*(_DWORD *)(v216 + 8))
        v259 = *(_QWORD *)(v216 + 40);
      else
        v259 = 0;
      AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot(*((_QWORD *)this + 4), v259);
      llvm::write_integer(v258, AttributeGroupSlot, 0, 0);
    }
    goto LABEL_321;
  }
  if (v48 == 33)
    v221 = a2;
  else
    v221 = 0;
  if (v48 == 33)
  {
    v222 = (llvm::raw_ostream *)*((_QWORD *)a2 - 4);
    v223 = *((_QWORD *)a2 + 8);
    v224 = *((_QWORD *)a2 + 9);
    v225 = **(_QWORD **)(v224 + 16);
    if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ", 1uLL);
      PrintCallingConv((llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF), *(llvm::raw_ostream **)this);
    }
    if (v223 && *(_DWORD *)(v223 + 8) >= 2u && *(_QWORD *)(v223 + 48))
    {
      v226 = *(llvm::raw_ostream **)this;
      v227 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v227 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
      }
      else
      {
        *((_QWORD *)v226 + 4) = v227 + 1;
        *v227 = 32;
      }
      v270 = *(_DWORD *)(v223 + 8) < 2u ? 0 : *(llvm::AttributeSetNode **)(v223 + 48);
      v325 = v270;
      llvm::AttributeSet::getAsString(&v325, 0, __p);
      v271 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v272 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__p[0].__r_.__value_.__r.__words[2])
           : __p[0].__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v226, (const char *)v271, v272);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    maybePrintCallAddrSpace(v222, a2, *(llvm::raw_ostream **)this);
    v273 = *(llvm::raw_ostream **)this;
    v274 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v274 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v273, 32);
    }
    else
    {
      *((_QWORD *)v273 + 4) = v274 + 1;
      *v274 = 32;
    }
    if (*(_DWORD *)(v224 + 8) <= 0xFFu)
      v275 = v225;
    else
      v275 = v224;
    v276 = *(llvm::raw_ostream **)this;
    v277 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v277 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v276, 32);
    }
    else
    {
      *((_QWORD *)v276 + 4) = v277 + 1;
      *v277 = 32;
    }
    v278 = *(llvm::raw_ostream **)this;
    v279 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v279 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v278, 40);
    }
    else
    {
      *((_QWORD *)v278 + 4) = v279 + 1;
      *v279 = 40;
    }
    v280 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    if ((v280 & 0x1FFFFFFFE0) != 0)
    {
      v281 = 0;
      v282 = (v280 >> 5);
      v283 = v221;
      do
      {
        if (v281)
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        if (v223 && (v281 + 2) < *(_DWORD *)(v223 + 8))
          v284 = *(const llvm::AttributeSet **)(v223 + 40 + 8 * (v281 + 2));
        else
          v284 = 0;
        ++v281;
        v283 = (const llvm::CallBase *)((char *)v283 + 32);
      }
      while (v282 != v281);
    }
    v285 = *(llvm::raw_ostream **)this;
    v286 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v286 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v285, 41);
    }
    else
    {
      *((_QWORD *)v285 + 4) = v286 + 1;
      *v286 = 41;
    }
    if (v223 && *(_DWORD *)(v223 + 8) && *(_QWORD *)(v223 + 40))
    {
      v287 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #", 2uLL);
      if (*(_DWORD *)(v223 + 8))
        v288 = *(_QWORD *)(v223 + 40);
      else
        v288 = 0;
      v289 = llvm::SlotTracker::getAttributeGroupSlot(*((_QWORD *)this + 4), v288);
      llvm::write_integer(v287, v289, 0, 0);
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "\n          to ", 0xEuLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " unwind ", 8uLL);
    v108 = (const llvm::Value *)*((_QWORD *)v221 - 8);
    goto LABEL_164;
  }
  if (v48 == 39)
    v228 = (unsigned int *)a2;
  else
    v228 = 0;
  if (v48 == 39)
  {
    v229 = (const llvm::Value *)*((_QWORD *)a2 - 4);
    v230 = *((_QWORD *)a2 + 8);
    v231 = *((_QWORD *)a2 + 9);
    v232 = **(_QWORD **)(v231 + 16);
    v324 = (char *)a2 - 32;
    if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ", 1uLL);
      PrintCallingConv((llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF), *(llvm::raw_ostream **)this);
    }
    if (v230 && *(_DWORD *)(v230 + 8) >= 2u && *(_QWORD *)(v230 + 48))
    {
      v233 = *(llvm::raw_ostream **)this;
      v234 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v234 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
      }
      else
      {
        *((_QWORD *)v233 + 4) = v234 + 1;
        *v234 = 32;
      }
      v292 = *(_DWORD *)(v230 + 8) < 2u ? 0 : *(llvm::AttributeSetNode **)(v230 + 48);
      v325 = v292;
      llvm::AttributeSet::getAsString(&v325, 0, __p);
      v293 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v294 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__p[0].__r_.__value_.__r.__words[2])
           : __p[0].__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v233, (const char *)v293, v294);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v295 = *(llvm::raw_ostream **)this;
    v296 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v296 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v295, 32);
    }
    else
    {
      *((_QWORD *)v295 + 4) = v296 + 1;
      *v296 = 32;
    }
    if (*(_DWORD *)(v231 + 8) <= 0xFFu)
      v297 = v232;
    else
      v297 = v231;
    v298 = *(llvm::raw_ostream **)this;
    v299 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v299 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v298, 32);
    }
    else
    {
      *((_QWORD *)v298 + 4) = v299 + 1;
      *v299 = 32;
    }
    v300 = *(llvm::raw_ostream **)this;
    v301 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v301 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v300, 40);
    }
    else
    {
      *((_QWORD *)v300 + 4) = v301 + 1;
      *v301 = 40;
    }
    v302 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    if ((v302 & 0x1FFFFFFFE0) != 0)
    {
      v303 = 0;
      v304 = (v302 >> 5);
      v305 = v228;
      do
      {
        if (v303)
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        if (v230 && (v303 + 2) < *(_DWORD *)(v230 + 8))
          v306 = *(const llvm::AttributeSet **)(v230 + 40 + 8 * (v303 + 2));
        else
          v306 = 0;
        ++v303;
        v305 += 8;
      }
      while (v304 != v303);
    }
    v307 = *(llvm::raw_ostream **)this;
    v308 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v308 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v307, 41);
    }
    else
    {
      *((_QWORD *)v307 + 4) = v308 + 1;
      *v308 = 41;
    }
    if (v230 && *(_DWORD *)(v230 + 8) && *(_QWORD *)(v230 + 40))
    {
      v309 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #", 2uLL);
      if (*(_DWORD *)(v230 + 8))
        v310 = *(_QWORD *)(v230 + 40);
      else
        v310 = 0;
      v311 = llvm::SlotTracker::getAttributeGroupSlot(*((_QWORD *)this + 4), v310);
      llvm::write_integer(v309, v311, 0, 0);
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "\n          to ", 0xEuLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [", 2uLL);
    v312 = v228[20];
    if ((_DWORD)v312)
    {
      v313 = 0;
      v314 = 32 * v312;
      do
      {
        if (v313)
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        v313 += 32;
      }
      while (v314 != v313);
    }
LABEL_124:
    v83 = *(llvm::raw_ostream **)this;
    v84 = *(char **)(*(_QWORD *)this + 32);
    if ((unint64_t)v84 < *(_QWORD *)(*(_QWORD *)this + 24))
    {
      *((_QWORD *)v83 + 4) = v84 + 1;
      v85 = 93;
LABEL_126:
      *v84 = v85;
      goto LABEL_321;
    }
    v86 = 93;
    goto LABEL_128;
  }
  if (v48 == 59)
  {
    v235 = *(llvm::raw_ostream **)this;
    v236 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v236 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v235, 32);
    }
    else
    {
      *((_QWORD *)v235 + 4) = v236 + 1;
      *v236 = 32;
    }
    v261 = *((_WORD *)a2 + 9);
    if ((v261 & 0x40) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "inalloca ", 9uLL);
      v261 = *((_WORD *)a2 + 9);
    }
    if ((v261 & 0x80) != 0)
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "swifterror ", 0xBuLL);
    v262 = *((_QWORD *)a2 - 4);
    if (!v262 || (llvm::AllocaInst::isArrayAllocation(a2) & 1) != 0 || *(_DWORD *)(*(_QWORD *)v262 + 8) != 8205)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
    }
    v263 = *((_WORD *)a2 + 9);
    v264 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", align ", 8uLL);
    write_unsigned<unsigned long>(v264, 1 << v263, 0, 0, 0);
    v265 = *(unsigned int *)(*(_QWORD *)a2 + 8);
    if (v265 < 0x100)
      goto LABEL_321;
    v266 = v265 >> 8;
    v267 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", addrspace(", 0xCuLL);
    write_unsigned<unsigned long>(v267, v266, 0, 0, 0);
    v84 = (char *)*((_QWORD *)v267 + 4);
    if ((unint64_t)v84 < *((_QWORD *)v267 + 3))
    {
      *((_QWORD *)v267 + 4) = v84 + 1;
      v85 = 41;
      goto LABEL_126;
    }
    v83 = v267;
    v86 = 41;
LABEL_128:
    llvm::raw_ostream::write(v83, v86);
    goto LABEL_321;
  }
  if ((v48 - 66) <= 0xC)
  {
    if (v49)
    {
      v237 = *(llvm::raw_ostream **)this;
      v238 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v238 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v237, 32);
      }
      else
      {
        *((_QWORD *)v237 + 4) = v238 + 1;
        *v238 = 32;
      }
    }
    v315 = *(llvm::raw_ostream **)this;
    v316 = " to ";
    v317 = 4;
LABEL_567:
    llvm::raw_ostream::operator<<(v315, v316, v317);
    goto LABEL_321;
  }
  if (v48 == 88)
  {
    if (v49)
    {
      v268 = *(llvm::raw_ostream **)this;
      v269 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v269 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v268, 32);
      }
      else
      {
        *((_QWORD *)v268 + 4) = v269 + 1;
        *v269 = 32;
      }
    }
    v315 = *(llvm::raw_ostream **)this;
    v316 = ", ";
    v317 = 2;
    goto LABEL_567;
  }
  if (v49)
  {
    if (v48 == 60)
    {
      v318 = *(llvm::raw_ostream **)this;
      v319 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v319 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v318, 32);
      }
      else
      {
        *((_QWORD *)v318 + 4) = v319 + 1;
        *v319 = 32;
      }
      v320 = (char *)this + 40;
      v321 = *(uint64_t ***)a2;
    }
    else
    {
      if (v48 != 62)
        goto LABEL_89;
      v290 = *(llvm::raw_ostream **)this;
      v291 = *(_BYTE **)(*(_QWORD *)this + 32);
      if ((unint64_t)v291 >= *(_QWORD *)(*(_QWORD *)this + 24))
      {
        llvm::raw_ostream::write(v290, 32);
      }
      else
      {
        *((_QWORD *)v290 + 4) = v291 + 1;
        *v291 = 32;
      }
      v320 = (char *)this + 40;
      v321 = (uint64_t **)*((_QWORD *)a2 + 8);
    }
    v322 = *(llvm::raw_ostream **)this;
    v323 = *(_BYTE **)(*(_QWORD *)this + 32);
    if ((unint64_t)v323 >= *(_QWORD *)(*(_QWORD *)this + 24))
    {
      llvm::raw_ostream::write(v322, 44);
    }
    else
    {
      *((_QWORD *)v322 + 4) = v323 + 1;
      *v323 = 44;
    }
LABEL_89:
    v59 = *(_QWORD *)v49;
    v60 = *((unsigned __int8 *)a2 + 16) - 29;
    if (v60 >= 0x3F || ((0x4100001900000001uLL >> v60) & 1) == 0)
    {
      v61 = *((_DWORD *)a2 + 5);
      v62 = (v61 & 0x7FFFFFF) - 1;
      if ((v61 & 0x7FFFFFF) == 1)
      {
LABEL_98:
        v66 = *(llvm::raw_ostream **)this;
        v67 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v67 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v66, 32);
        }
        else
        {
          *((_QWORD *)v66 + 4) = v67 + 1;
          *v67 = 32;
        }
        v127 = 0;
LABEL_196:
        v128 = *(llvm::raw_ostream **)this;
        v129 = *(_BYTE **)(*(_QWORD *)this + 32);
        if ((unint64_t)v129 >= *(_QWORD *)(*(_QWORD *)this + 24))
        {
          llvm::raw_ostream::write(v128, 32);
        }
        else
        {
          *((_QWORD *)v128 + 4) = v129 + 1;
          *v129 = 32;
        }
        v130 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        if ((_DWORD)v130)
        {
          v131 = 0;
          v132 = 32 * v130;
          do
          {
            if (v131)
            {
              v133 = *(llvm::raw_ostream **)this;
              v134 = *(_WORD **)(*(_QWORD *)this + 32);
              if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v134 > 1uLL)
              {
                *v134 = 8236;
                *((_QWORD *)v133 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v133, ", ", 2uLL);
              }
            }
            v135 = *((_DWORD *)a2 + 5);
            if ((v135 & 0x40000000) != 0)
              v136 = (char *)*((_QWORD *)a2 - 1);
            else
              v136 = (char *)a2 - 32 * (v135 & 0x7FFFFFF);
            v131 += 32;
          }
          while (v132 != v131);
        }
        goto LABEL_321;
      }
      v63 = 32;
      while (1)
      {
        v64 = (char *)a2 - 32 * (v61 & 0x7FFFFFF);
        if ((v61 & 0x40000000) != 0)
          v64 = (char *)*((_QWORD *)a2 - 1);
        v65 = *(_QWORD **)&v64[v63];
        if (v65)
        {
          if (*v65 != v59)
            break;
        }
        v63 += 32;
        if (!--v62)
          goto LABEL_98;
      }
    }
    v127 = 1;
    goto LABEL_196;
  }
LABEL_321:
  switch(*((_BYTE *)a2 + 16))
  {
    case '<':
    case '=':
      if (llvm::Instruction::isAtomic(a2))
      v200 = ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F;
      v201 = *(llvm::raw_ostream **)this;
      v202 = *(_QWORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v202 > 7uLL)
      {
        *v202 = 0x206E67696C61202CLL;
        *((_QWORD *)v201 + 4) += 8;
      }
      else
      {
        v201 = llvm::raw_ostream::write(v201, ", align ", 8uLL);
      }
      v208 = 1 << v200;
      goto LABEL_346;
    case '>':
      break;
    case '?':
      break;
    case '@':
      v203 = *((unsigned __int16 *)a2 + 9);
      v204 = (v203 >> 2) & 7;
      v205 = *(llvm::raw_ostream **)this;
      v206 = *(_BYTE **)(*(_QWORD *)this + 32);
      if (*(_BYTE **)(*(_QWORD *)this + 24) == v206)
      {
        v205 = llvm::raw_ostream::write(v205, " ", 1uLL);
      }
      else
      {
        *v206 = 32;
        ++*((_QWORD *)v205 + 4);
      }
      v210 = v203 >> 5;
      llvm::raw_ostream::operator<<(v205, llvm::toIRString(llvm::AtomicOrdering)::names[v204]);
      v211 = *(llvm::raw_ostream **)this;
      v212 = *(_BYTE **)(*(_QWORD *)this + 32);
      if (*(_BYTE **)(*(_QWORD *)this + 24) == v212)
      {
        v211 = llvm::raw_ostream::write(v211, " ", 1uLL);
      }
      else
      {
        *v212 = 32;
        ++*((_QWORD *)v211 + 4);
      }
      llvm::raw_ostream::operator<<(v211, llvm::toIRString(llvm::AtomicOrdering)::names[v210]);
      v201 = *(llvm::raw_ostream **)this;
      v213 = *(_QWORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v213 > 7uLL)
      {
        *v213 = 0x206E67696C61202CLL;
        *((_QWORD *)v201 + 4) += 8;
      }
      else
      {
        v201 = llvm::raw_ostream::write(v201, ", align ", 8uLL);
      }
      LOBYTE(v209) = *((_BYTE *)a2 + 19);
      goto LABEL_345;
    case 'A':
      v201 = *(llvm::raw_ostream **)this;
      v207 = *(_QWORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v207 > 7uLL)
      {
        *v207 = 0x206E67696C61202CLL;
        *((_QWORD *)v201 + 4) += 8;
      }
      else
      {
        v201 = llvm::raw_ostream::write(v201, ", align ", 8uLL);
      }
      v209 = (unint64_t)*((unsigned __int16 *)a2 + 9) >> 9;
LABEL_345:
      v208 = 1 << v209;
LABEL_346:
      write_unsigned<unsigned long>(v201, v208, 0, 0, 0);
      break;
    default:
      if (*((_BYTE *)a2 + 16) == 91)
        PrintShuffleMask(*(llvm::raw_ostream **)this, *(_QWORD *)a2, *((int **)a2 + 8), *((unsigned int *)a2 + 18));
      break;
  }
LABEL_347:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (unsigned int *)__p);
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2])
    free(__p[0].__r_.__value_.__l.__data_);
}

void `anonymous namespace'::AssemblyWriter::printGlobal(llvm::SlotTracker **this, const llvm::GlobalVariable *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::SlotTracker *v6;
  llvm::SlotTracker *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  int v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  const char *p_p;
  size_t v15;
  unsigned int v16;
  int v17;
  llvm::raw_ostream *v18;
  const char *v19;
  size_t v20;
  int v21;
  const char *v22;
  const char *v23;
  size_t v24;
  int v25;
  const char *v26;
  size_t v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  unint64_t v30;
  llvm::raw_ostream *v31;
  unint64_t v32;
  uint64_t v33;
  _WORD *v34;
  char v35;
  void *v36;
  size_t v37;
  const char *v38;
  llvm::raw_ostream *v39;
  _BYTE *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  void *v50;
  llvm::raw_ostream *Partition;
  uint64_t v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  uint64_t *v55;
  char v56;
  llvm::raw_ostream *v57;
  void *v58;
  llvm::raw_ostream *v59;
  void *v60;
  llvm::raw_ostream *v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  void *v64;
  unint64_t v65;
  char v66;
  llvm::raw_ostream *v67;
  _QWORD *v68;
  uint64_t v69;
  llvm::raw_ostream *v70;
  _WORD *v71;
  int AttributeGroupSlot;
  llvm::SlotTracker *v73[4];
  void *__p;
  uint64_t v75;
  _BYTE v76[7];
  unsigned __int8 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (a2 && !*((_BYTE *)a2 + 16) && (*((_BYTE *)a2 + 35) & 1) != 0)
  {
    v4 = *this;
    v5 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v5) > 0x10)
    {
      *(_BYTE *)(v5 + 16) = 10;
      *(_OWORD *)v5 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  v6 = this[4];
  v7 = (llvm::SlotTracker *)*((_QWORD *)a2 + 5);
  v73[0] = (llvm::SlotTracker *)&off_251C1E428;
  v73[1] = (llvm::SlotTracker *)(this + 5);
  v73[2] = v6;
  v73[3] = v7;
  WriteAsOperandInternal((char **)*this, a2, v73);
  v8 = *this;
  v9 = *((_QWORD *)*this + 4);
  if ((unint64_t)(*((_QWORD *)*this + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 15648;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) != 3 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_20;
    v10 = *((_DWORD *)a2 + 8);
  }
  else
  {
    if (*((const llvm::GlobalVariable **)a2 + 9) != (const llvm::GlobalVariable *)((char *)a2 + 72))
      goto LABEL_20;
    v10 = *((_DWORD *)a2 + 8);
    if ((v10 & 0x1000000) != 0)
      goto LABEL_20;
  }
  if ((v10 & 0xF) == 0)
  {
    v11 = *this;
    v12 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v12) > 8)
    {
      *(_BYTE *)(v12 + 8) = 32;
      *(_QWORD *)v12 = *(_QWORD *)"external ";
      *((_QWORD *)v11 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v11, "external ", 9uLL);
    }
  }
LABEL_20:
  v13 = *this;
  getLinkageNameWithSpace(&__p, *((_DWORD *)a2 + 8) & 0xF);
  if ((v77 & 0x80u) == 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if ((v77 & 0x80u) == 0)
    v15 = v77;
  else
    v15 = v75;
  llvm::raw_ostream::write(v13, p_p, v15);
  if ((char)v77 < 0)
    operator delete(__p);
  PrintDSOLocation(a2, *this);
  v16 = *((_DWORD *)a2 + 8);
  v17 = (v16 >> 4) & 3;
  v18 = *this;
  if (v17 == 1)
  {
    v19 = "hidden ";
    v20 = 7;
  }
  else
  {
    if (v17 != 2)
      goto LABEL_33;
    v19 = "protected ";
    v20 = 10;
  }
  llvm::raw_ostream::operator<<(v18, v19, v20);
  v16 = *((_DWORD *)a2 + 8);
  v18 = *this;
LABEL_33:
  v21 = (v16 >> 8) & 3;
  if (v21 == 1)
  {
    v22 = "dllimport ";
  }
  else
  {
    if (v21 != 2)
      goto LABEL_38;
    v22 = "dllexport ";
  }
  llvm::raw_ostream::operator<<(v18, v22, 0xAuLL);
  v16 = *((_DWORD *)a2 + 8);
  v18 = *this;
LABEL_38:
  v23 = "thread_local ";
  v24 = 13;
  switch((v16 >> 10) & 7)
  {
    case 1u:
      goto LABEL_42;
    case 2u:
      v23 = "thread_local(localdynamic) ";
      v24 = 27;
      goto LABEL_42;
    case 3u:
      v23 = "thread_local(initialexec) ";
      v24 = 26;
      goto LABEL_42;
    case 4u:
      v23 = "thread_local(localexec) ";
      v24 = 24;
LABEL_42:
      llvm::raw_ostream::operator<<(v18, v23, v24);
      v16 = *((_DWORD *)a2 + 8);
      break;
    default:
      break;
  }
  v25 = v16 >> 6;
  if (v25)
  {
    if (v25 == 1)
    {
      v26 = "local_unnamed_addr";
      v27 = 18;
    }
    else
    {
      v26 = "unnamed_addr";
      v27 = 12;
    }
    v28 = llvm::raw_ostream::operator<<(*this, v26, v27);
    v29 = (_BYTE *)*((_QWORD *)v28 + 4);
    if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
    {
      llvm::raw_ostream::write(v28, 32);
    }
    else
    {
      *((_QWORD *)v28 + 4) = v29 + 1;
      *v29 = 32;
    }
  }
  v30 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  v31 = *this;
  if (v30 >= 0x100)
  {
    v32 = v30 >> 8;
    v33 = *((_QWORD *)v31 + 4);
    if ((unint64_t)(*((_QWORD *)v31 + 3) - v33) > 9)
    {
      *(_WORD *)(v33 + 8) = 10341;
      *(_QWORD *)v33 = *(_QWORD *)"addrspace(";
      *((_QWORD *)v31 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(*this, "addrspace(", 0xAuLL);
    }
    write_unsigned<unsigned long>(v31, v32, 0, 0, 0);
    v34 = (_WORD *)*((_QWORD *)v31 + 4);
    if (*((_QWORD *)v31 + 3) - (_QWORD)v34 > 1uLL)
    {
      *v34 = 8233;
      *((_QWORD *)v31 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v31, ") ", 2uLL);
    }
    v31 = *this;
  }
  v35 = *((_BYTE *)a2 + 80);
  if ((v35 & 2) != 0)
  {
    v36 = (void *)*((_QWORD *)v31 + 4);
    if (*((_QWORD *)v31 + 3) - (_QWORD)v36 > 0x16uLL)
    {
      qmemcpy(v36, "externally_initialized ", 23);
      *((_QWORD *)v31 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v31, "externally_initialized ", 0x17uLL);
    }
    v31 = *this;
    v35 = *((_BYTE *)a2 + 80);
  }
  if ((v35 & 1) != 0)
    v37 = 9;
  else
    v37 = 7;
  if ((v35 & 1) != 0)
    v38 = "constant ";
  else
    v38 = "global ";
  llvm::raw_ostream::operator<<(v31, v38, v37);
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_79;
  }
  else if (*((const llvm::GlobalVariable **)a2 + 9) == (const llvm::GlobalVariable *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 35) & 1) == 0)
  {
    goto LABEL_79;
  }
  v39 = *this;
  v40 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v40 >= *((_QWORD *)*this + 3))
  {
    llvm::raw_ostream::write(v39, 32);
  }
  else
  {
    *((_QWORD *)v39 + 4) = v40 + 1;
    *v40 = 32;
  }
LABEL_79:
  if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
  {
    v41 = *this;
    v42 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v42) > 0xA)
    {
      *(_DWORD *)(v42 + 7) = 572550767;
      *(_QWORD *)v42 = *(_QWORD *)", section \"";
      *((_QWORD *)v41 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v41, ", section \"", 0xBuLL);
    }
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
    {
      v45 = (uint64_t *)(***(_QWORD ***)a2 + 2552);
      __p = a2;
      v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v45, &__p);
      v43 = (llvm::raw_ostream *)v46[1];
      v44 = v46[2];
    }
    else
    {
      v43 = 0;
      v44 = 0;
    }
    llvm::printEscapedString(v43, v44, *this);
    v47 = *this;
    v48 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v48 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v47, 34);
    }
    else
    {
      *((_QWORD *)v47 + 4) = v48 + 1;
      *v48 = 34;
    }
  }
  if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
  {
    v49 = *this;
    v50 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v50 > 0xCuLL)
    {
      qmemcpy(v50, ", partition \"", 13);
      *((_QWORD *)v49 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v49, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition(a2);
    llvm::printEscapedString(Partition, v52, *this);
    v53 = *this;
    v54 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v54 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(v53, 34);
    }
    else
    {
      *((_QWORD *)v53 + 4) = v54 + 1;
      *v54 = 34;
    }
  }
  if ((*((_BYTE *)a2 + 34) & 1) != 0)
  {
    v55 = (uint64_t *)(***(_QWORD ***)a2 + 2600);
    __p = a2;
    v56 = *((_BYTE *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::FindAndConstruct(v55, &__p)+ 8);
    if ((v56 & 1) == 0)
    {
      if ((v56 & 2) == 0)
        goto LABEL_99;
LABEL_106:
      v59 = *this;
      v60 = (void *)*((_QWORD *)*this + 4);
      if (*((_QWORD *)*this + 3) - (_QWORD)v60 > 0x16uLL)
      {
        qmemcpy(v60, ", no_sanitize_hwaddress", 23);
        *((_QWORD *)v59 + 4) += 23;
        if ((v56 & 4) != 0)
          goto LABEL_110;
      }
      else
      {
        llvm::raw_ostream::write(v59, ", no_sanitize_hwaddress", 0x17uLL);
        if ((v56 & 4) != 0)
          goto LABEL_110;
      }
LABEL_100:
      if ((v56 & 8) == 0)
        goto LABEL_117;
LABEL_114:
      v63 = *this;
      v64 = (void *)*((_QWORD *)*this + 4);
      if (*((_QWORD *)*this + 3) - (_QWORD)v64 > 0x19uLL)
      {
        qmemcpy(v64, ", sanitize_address_dyninit", 26);
        *((_QWORD *)v63 + 4) += 26;
      }
      else
      {
        llvm::raw_ostream::write(v63, ", sanitize_address_dyninit", 0x1AuLL);
      }
      goto LABEL_117;
    }
    v57 = *this;
    v58 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v58 > 0x14uLL)
    {
      qmemcpy(v58, ", no_sanitize_address", 21);
      *((_QWORD *)v57 + 4) += 21;
      if ((v56 & 2) != 0)
        goto LABEL_106;
    }
    else
    {
      llvm::raw_ostream::write(v57, ", no_sanitize_address", 0x15uLL);
      if ((v56 & 2) != 0)
        goto LABEL_106;
    }
LABEL_99:
    if ((v56 & 4) == 0)
      goto LABEL_100;
LABEL_110:
    v61 = *this;
    v62 = *((_QWORD *)*this + 4);
    if ((unint64_t)(*((_QWORD *)*this + 3) - v62) > 0x10)
    {
      *(_BYTE *)(v62 + 16) = 103;
      *(_OWORD *)v62 = *(_OWORD *)", sanitize_memtag";
      *((_QWORD *)v61 + 4) += 17;
      if ((v56 & 8) == 0)
        goto LABEL_117;
    }
    else
    {
      llvm::raw_ostream::write(v61, ", sanitize_memtag", 0x11uLL);
      if ((v56 & 8) == 0)
        goto LABEL_117;
    }
    goto LABEL_114;
  }
LABEL_117:
  maybePrintComdat(*this, (uint64_t)a2);
  v65 = ((unint64_t)*((unsigned int *)a2 + 8) >> 17) & 0x3F;
  if ((_DWORD)v65)
  {
    v66 = v65 - 1;
    v67 = *this;
    v68 = (_QWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v68 > 7uLL)
    {
      *v68 = 0x206E67696C61202CLL;
      *((_QWORD *)v67 + 4) += 8;
    }
    else
    {
      v67 = llvm::raw_ostream::write(v67, ", align ", 8uLL);
    }
    write_unsigned<unsigned long>(v67, 1 << v66, 0, 0, 0);
  }
  __p = v76;
  v75 = 0x400000000;
  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&__p);
  v69 = *((_QWORD *)a2 + 9);
  if (v69)
  {
    v70 = *this;
    v71 = (_WORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v71 > 1uLL)
    {
      *v71 = 8992;
      *((_QWORD *)v70 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*this, " #", 2uLL);
    }
    AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)this[4], v69);
    llvm::write_integer(v70, AttributeGroupSlot, 0, 0);
  }
  if (__p != v76)
    free(__p);
}

char **`anonymous namespace'::AssemblyWriter::printAlias(char ***a1, uint64_t a2)
{
  char **v4;
  char *v5;
  llvm::SlotTracker *v6;
  llvm::SlotTracker *v7;
  char **v8;
  char *v9;
  char **v10;
  void **v11;
  size_t v12;
  unsigned int v13;
  int v14;
  char **v15;
  const char *v16;
  size_t v17;
  int v18;
  const char *v19;
  const char *v20;
  size_t v21;
  int v22;
  const char *v23;
  size_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  char **v27;
  char *v28;
  char **v29;
  char *v30;
  unsigned __int8 *v31;
  char **v32;
  char *v33;
  char **v34;
  char *v35;
  llvm::raw_ostream *Partition;
  uint64_t v37;
  char **v38;
  char *v39;
  char **result;
  char *v41;
  void *__p[2];
  unsigned __int8 v43;
  llvm::SlotTracker *v44[4];

  if (a2 && !*(_BYTE *)(a2 + 16) && (*(_BYTE *)(a2 + 35) & 1) != 0)
  {
    v4 = *a1;
    v5 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v5) > 0x10)
    {
      v5[16] = 10;
      *(_OWORD *)v5 = *(_OWORD *)"; Materializable\n";
      v4[4] += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v4, "; Materializable\n", 0x11uLL);
    }
  }
  v6 = (llvm::SlotTracker *)a1[4];
  v7 = *(llvm::SlotTracker **)(a2 + 40);
  v44[0] = (llvm::SlotTracker *)&off_251C1E428;
  v44[1] = (llvm::SlotTracker *)(a1 + 5);
  v44[2] = v6;
  v44[3] = v7;
  WriteAsOperandInternal(*a1, (const llvm::Value *)a2, v44);
  v8 = *a1;
  v9 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v9) > 2)
  {
    v9[2] = 32;
    *(_WORD *)v9 = 15648;
    v8[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v8, " = ", 3uLL);
  }
  v10 = *a1;
  getLinkageNameWithSpace(__p, *(_DWORD *)(a2 + 32) & 0xF);
  if ((v43 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v43 & 0x80u) == 0)
    v12 = v43;
  else
    v12 = (size_t)__p[1];
  llvm::raw_ostream::write((llvm::raw_ostream *)v10, (const char *)v11, v12);
  if ((char)v43 < 0)
    operator delete(__p[0]);
  PrintDSOLocation((llvm::raw_ostream *)a2, (llvm::formatted_raw_ostream *)*a1);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = (v13 >> 4) & 3;
  v15 = *a1;
  if (v14 == 1)
  {
    v16 = "hidden ";
    v17 = 7;
  }
  else
  {
    if (v14 != 2)
      goto LABEL_23;
    v16 = "protected ";
    v17 = 10;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v15, v16, v17);
  v13 = *(_DWORD *)(a2 + 32);
  v15 = *a1;
LABEL_23:
  v18 = (v13 >> 8) & 3;
  if (v18 == 1)
  {
    v19 = "dllimport ";
  }
  else
  {
    if (v18 != 2)
      goto LABEL_28;
    v19 = "dllexport ";
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v15, v19, 0xAuLL);
  v13 = *(_DWORD *)(a2 + 32);
  v15 = *a1;
LABEL_28:
  v20 = "thread_local ";
  v21 = 13;
  switch((v13 >> 10) & 7)
  {
    case 1u:
      goto LABEL_32;
    case 2u:
      v20 = "thread_local(localdynamic) ";
      v21 = 27;
      goto LABEL_32;
    case 3u:
      v20 = "thread_local(initialexec) ";
      v21 = 26;
      goto LABEL_32;
    case 4u:
      v20 = "thread_local(localexec) ";
      v21 = 24;
LABEL_32:
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)v15, v20, v21);
      v13 = *(_DWORD *)(a2 + 32);
      break;
    default:
      break;
  }
  v22 = v13 >> 6;
  if (v22)
  {
    if (v22 == 1)
    {
      v23 = "local_unnamed_addr";
      v24 = 18;
    }
    else
    {
      v23 = "unnamed_addr";
      v24 = 12;
    }
    v25 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)*a1, v23, v24);
    v26 = (_BYTE *)*((_QWORD *)v25 + 4);
    if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
    {
      llvm::raw_ostream::write(v25, 32);
    }
    else
    {
      *((_QWORD *)v25 + 4) = v26 + 1;
      *v26 = 32;
    }
  }
  v27 = *a1;
  v28 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v28) > 5)
  {
    *((_WORD *)v28 + 2) = 8307;
    *(_DWORD *)v28 = 1634298977;
    v27[4] += 6;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v27, "alias ", 6uLL);
  }
  v29 = *a1;
  v30 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v30) > 1)
  {
    *(_WORD *)v30 = 8236;
    v29[4] += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v29, ", ", 2uLL);
  }
  v31 = *(unsigned __int8 **)(a2 - 32);
  if (v31)
  {
  }
  else
  {
    v32 = *a1;
    v33 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v33) > 0x10)
    {
      v33[16] = 62;
      *(_OWORD *)v33 = *(_OWORD *)" <<NULL ALIASEE>>";
      v32[4] += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v32, " <<NULL ALIASEE>>", 0x11uLL);
    }
  }
  if ((*(_BYTE *)(a2 + 33) & 0x80) != 0)
  {
    v34 = *a1;
    v35 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v35) > 0xC)
    {
      qmemcpy(v35, ", partition \"", 13);
      v34[4] += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v34, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v37, (llvm::raw_ostream *)*a1);
    v38 = *a1;
    v39 = (*a1)[4];
    if (v39 >= (*a1)[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v38, 34);
    }
    else
    {
      v38[4] = v39 + 1;
      *v39 = 34;
    }
  }
  result = *a1;
  v41 = (*a1)[4];
  if (v41 >= (*a1)[3])
    return (char **)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
  result[4] = v41 + 1;
  *v41 = 10;
  return result;
}

char **`anonymous namespace'::AssemblyWriter::printIFunc(char ***a1, uint64_t a2)
{
  char **v4;
  char *v5;
  llvm::SlotTracker *v6;
  llvm::SlotTracker *v7;
  char **v8;
  char *v9;
  char **v10;
  void **v11;
  size_t v12;
  int v13;
  char **v14;
  const char *v15;
  size_t v16;
  char *v17;
  char **v18;
  char *v19;
  unsigned __int8 *v20;
  char **v21;
  char *v22;
  char **v23;
  char *v24;
  llvm::raw_ostream *Partition;
  uint64_t v26;
  char **v27;
  char *v28;
  char **result;
  char *v30;
  void *__p[2];
  unsigned __int8 v32;
  llvm::SlotTracker *v33[4];

  if (a2 && !*(_BYTE *)(a2 + 16) && (*(_BYTE *)(a2 + 35) & 1) != 0)
  {
    v4 = *a1;
    v5 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v5) > 0x10)
    {
      v5[16] = 10;
      *(_OWORD *)v5 = *(_OWORD *)"; Materializable\n";
      v4[4] += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v4, "; Materializable\n", 0x11uLL);
    }
  }
  v6 = (llvm::SlotTracker *)a1[4];
  v7 = *(llvm::SlotTracker **)(a2 + 40);
  v33[0] = (llvm::SlotTracker *)&off_251C1E428;
  v33[1] = (llvm::SlotTracker *)(a1 + 5);
  v33[2] = v6;
  v33[3] = v7;
  WriteAsOperandInternal(*a1, (const llvm::Value *)a2, v33);
  v8 = *a1;
  v9 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v9) > 2)
  {
    v9[2] = 32;
    *(_WORD *)v9 = 15648;
    v8[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v8, " = ", 3uLL);
  }
  v10 = *a1;
  getLinkageNameWithSpace(__p, *(_DWORD *)(a2 + 32) & 0xF);
  if ((v32 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v32 & 0x80u) == 0)
    v12 = v32;
  else
    v12 = (size_t)__p[1];
  llvm::raw_ostream::write((llvm::raw_ostream *)v10, (const char *)v11, v12);
  if ((char)v32 < 0)
    operator delete(__p[0]);
  PrintDSOLocation((llvm::raw_ostream *)a2, (llvm::formatted_raw_ostream *)*a1);
  v13 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
  v14 = *a1;
  if (v13 == 1)
  {
    v15 = "hidden ";
    v16 = 7;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_23;
    v15 = "protected ";
    v16 = 10;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v14, v15, v16);
  v14 = *a1;
LABEL_23:
  v17 = v14[4];
  if ((unint64_t)(v14[3] - v17) > 5)
  {
    *((_WORD *)v17 + 2) = 8291;
    *(_DWORD *)v17 = 1853187689;
    v14[4] += 6;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v14, "ifunc ", 6uLL);
  }
  v18 = *a1;
  v19 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v19) > 1)
  {
    *(_WORD *)v19 = 8236;
    v18[4] += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v18, ", ", 2uLL);
  }
  v20 = *(unsigned __int8 **)(a2 - 32);
  if (v20)
  {
  }
  else
  {
    v21 = *a1;
    v22 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v22) > 0x11)
    {
      *((_WORD *)v22 + 8) = 15934;
      *(_OWORD *)v22 = *(_OWORD *)" <<NULL RESOLVER>>";
      v21[4] += 18;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v21, " <<NULL RESOLVER>>", 0x12uLL);
    }
  }
  if ((*(_BYTE *)(a2 + 33) & 0x80) != 0)
  {
    v23 = *a1;
    v24 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v24) > 0xC)
    {
      qmemcpy(v24, ", partition \"", 13);
      v23[4] += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v23, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v26, (llvm::raw_ostream *)*a1);
    v27 = *a1;
    v28 = (*a1)[4];
    if (v28 >= (*a1)[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v27, 34);
    }
    else
    {
      v27[4] = v28 + 1;
      *v28 = 34;
    }
  }
  result = *a1;
  v30 = (*a1)[4];
  if (v30 >= (*a1)[3])
    return (char **)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
  result[4] = v30 + 1;
  *v30 = 10;
  return result;
}

void WriteConstantInternal(llvm::raw_ostream *a1, const llvm::Constant *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  llvm::raw_ostream *v5;
  int v6;
  llvm::APInt *v7;
  size_t v8;
  const char *v9;
  const llvm::APFloat::Storage *v10;
  void *v11;
  char *v12;
  _BYTE *v14;
  char *v15;
  void *v17;
  const char *v18;
  size_t v19;
  _WORD *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  char v25;
  double v26;
  double v27;
  llvm::detail::IEEEFloat *v28;
  _BOOL4 isSignaling;
  char **v30;
  int v31;
  void **v32;
  _BYTE *v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  char **v41;
  _WORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  char **v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  char v55;
  char **v56;
  char **v57;
  char **p_src;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  llvm::raw_ostream *RawDataValues;
  uint64_t v63;
  char *v64;
  char v65;
  _BYTE *v66;
  _BYTE *v67;
  int v68;
  int v69;
  char *v70;
  _WORD *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  const llvm::Value *ElementAsConstant;
  int v79;
  int i;
  _WORD *v81;
  _BYTE *v82;
  const llvm::Value *v83;
  llvm::raw_ostream *v84;
  char v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  char *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  const llvm::Value *AggregateElement;
  int v98;
  uint64_t v99;
  _BYTE *v100;
  const llvm::Value *v101;
  char *OpcodeName;
  _BYTE *v103;
  const char *PredicateName;
  size_t v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  _BOOL4 v109;
  unsigned __int8 v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  int v115;
  void **v116;
  unsigned int v117;
  char v118;
  void *__src;
  void *v120;
  int v121;
  __int16 v122;
  char v123;
  char *v124;
  size_t __n[2];
  _QWORD v126[18];

  v5 = a1;
  v126[16] = *MEMORY[0x24BDAC8D0];
  v6 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v6 != 16)
  {
    if (a2 && v6 == 17)
    {
      v10 = (const llvm::Constant *)((char *)a2 + 32);
      v11 = (void *)*((_QWORD *)a2 + 4);
      v12 = (char *)a2 + 24;
      if (v11 == &llvm::semIEEEsingle || v11 == &llvm::semIEEEdouble)
      {
        if (v11 == &llvm::semPPCDoubleDouble)
        {
          v15 = (char *)*((_QWORD *)a2 + 5);
          v14 = v15 + 28;
        }
        else
        {
          v14 = (char *)a2 + 52;
          v15 = (char *)a2 + 24;
        }
        if ((*v14 & 7) != 0 && (v15[28] & 7) != 1)
        {
          v26 = llvm::APFloat::convertToDouble((void **)a2 + 3);
          v124 = (char *)v126;
          *(_OWORD *)__n = xmmword_24AA2AC90;
          llvm::APFloat::toString((uint64_t)v12, &v124, 6, 0, 0);
          llvm::APFloat::APFloat((uint64_t)&__src, &llvm::semIEEEdouble, v124, __n[0]);
          v27 = llvm::APFloat::convertToDouble(&__src);
          llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v120);
          if (v27 == v26)
          {
            llvm::raw_ostream::write(v5, v124, __n[0]);
            if (v124 != (char *)v126)
              free(v124);
            return;
          }
          if (v124 != (char *)v126)
            free(v124);
        }
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)__n, v10);
        if (v11 != &llvm::semIEEEdouble)
        {
          v28 = (_UNKNOWN *)__n[0] == &llvm::semPPCDoubleDouble
              ? (llvm::detail::IEEEFloat *)(__n[1] + 8)
              : (llvm::detail::IEEEFloat *)__n;
          isSignaling = llvm::detail::IEEEFloat::isSignaling(v28);
          llvm::APFloat::convert((uint64_t)&v124, &llvm::semIEEEdouble, 1, &v118);
          if (isSignaling)
          {
            llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v116, (llvm::APFloat *)&v124);
            v30 = (_UNKNOWN *)__n[0] == &llvm::semPPCDoubleDouble ? (char **)__n[1] : &v124;
            v31 = (*((unsigned __int8 *)v30 + 28) >> 3) & 1;
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v120, (uint64_t)&llvm::semIEEEdouble);
            llvm::APFloat::makeNaN((llvm::APFloat *)&__src, 1, v31, (const llvm::APInt *)&v116);
            llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)__n, &v120);
            llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v120);
            if (v117 >= 0x41)
            {
              if (v116)
                MEMORY[0x24BD1B380](v116, 0x1000C8000313F17);
            }
          }
        }
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v116, (llvm::APFloat *)&v124);
        if (v117 >= 0x41)
          v32 = v116;
        else
          v32 = (void **)&v116;
        __src = *v32;
        v120 = 0;
        v121 = 0;
        v122 = 257;
        v123 = 1;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&__src);
        if (v117 >= 0x41 && v116)
          MEMORY[0x24BD1B380](v116, 0x1000C8000313F17);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)__n);
        return;
      }
      v20 = (_WORD *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v20 > 1uLL)
      {
        *v20 = 30768;
        *((_QWORD *)a1 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a1, "0x", 2uLL);
      }
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&__src, (const llvm::Constant *)((char *)a2 + 24));
      v23 = *(void **)v10;
      if (*(_UNKNOWN **)v10 == &llvm::semX87DoubleExtended)
      {
        v33 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v33 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 75);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v33 + 1;
          *v33 = 75;
        }
        v36 = v120;
        v37 = (_DWORD)v120 - 16;
        if (v120 > 0x40)
        {
          v40 = (((unint64_t)v120 + 63) >> 3) & 0x3FFFFFF8;
          v38 = operator new[]();
          memcpy((void *)v38, __src, v40);
          llvm::APInt::tcShiftRight((llvm::APInt *)v38, (unint64_t *)((unint64_t)(v36 + 63) >> 6), v37);
          v39 = *(_QWORD *)v38;
        }
        else
        {
          v38 = (unint64_t)__src >> v37;
          v39 = (unint64_t)__src >> v37;
        }
        v124 = (char *)v39;
        __n[0] = 0;
        LODWORD(__n[1]) = 4;
        WORD2(__n[1]) = 257;
        BYTE6(__n[1]) = 0;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&v124);
        if (v36 >= 0x41 && v38)
          MEMORY[0x24BD1B380](v38, 0x1000C8000313F17);
        llvm::APInt::getLoBits((llvm::APInt *)&__src, 0x40u, (llvm::APInt *)&v116);
        if (v117 >= 0x41)
          v41 = (char **)v116;
        else
          v41 = (char **)&v116;
        v124 = *v41;
        __n[0] = 0;
        LODWORD(__n[1]) = 16;
        WORD2(__n[1]) = 257;
      }
      else
      {
        if (v23 == &llvm::semIEEEquad)
        {
          v35 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v35 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 76);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v35 + 1;
            *v35 = 76;
          }
          llvm::APInt::getLoBits((llvm::APInt *)&__src, 0x40u, (llvm::APInt *)&v116);
          if (v117 >= 0x41)
            v45 = (char **)v116;
          else
            v45 = (char **)&v116;
          v124 = *v45;
          __n[0] = 0;
          LODWORD(__n[1]) = 16;
          WORD2(__n[1]) = 257;
          BYTE6(__n[1]) = 0;
          llvm::raw_ostream::operator<<(v5, (uint64_t)&v124);
          if (v117 >= 0x41 && v116)
            MEMORY[0x24BD1B380](v116, 0x1000C8000313F17);
          v46 = v120;
          v47 = (_DWORD)v120 - 64;
          if (v120 > 0x40)
          {
            v50 = (((unint64_t)v120 + 63) >> 3) & 0x3FFFFFF8;
            v48 = operator new[]();
            memcpy((void *)v48, __src, v50);
            llvm::APInt::tcShiftRight((llvm::APInt *)v48, (unint64_t *)((unint64_t)(v46 + 63) >> 6), v47);
            v49 = *(_QWORD *)v48;
          }
          else
          {
            v48 = (unint64_t)__src >> v47;
            v49 = (unint64_t)__src >> v47;
          }
          v124 = (char *)v49;
          __n[0] = 0;
          LODWORD(__n[1]) = 16;
          WORD2(__n[1]) = 257;
          BYTE6(__n[1]) = 0;
          llvm::raw_ostream::operator<<(v5, (uint64_t)&v124);
          if (v46 < 0x41 || !v48)
            goto LABEL_146;
          v51 = v48;
          goto LABEL_140;
        }
        if (v23 != &llvm::semPPCDoubleDouble)
        {
          if (v23 == &llvm::semIEEEhalf)
          {
            v24 = (char *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v24 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v24 + 1;
              v25 = 72;
              goto LABEL_119;
            }
            v54 = v5;
            v55 = 72;
          }
          else
          {
            v24 = (char *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v24 < *((_QWORD *)v5 + 3))
            {
              *((_QWORD *)v5 + 4) = v24 + 1;
              v25 = 82;
LABEL_119:
              *v24 = v25;
LABEL_143:
              p_src = (char **)&__src;
              if (v120 >= 0x41)
                p_src = (char **)__src;
              v124 = *p_src;
              __n[0] = 0;
              LODWORD(__n[1]) = 4;
              WORD2(__n[1]) = 257;
              BYTE6(__n[1]) = 0;
              llvm::raw_ostream::operator<<(v5, (uint64_t)&v124);
              goto LABEL_146;
            }
            v54 = v5;
            v55 = 82;
          }
          llvm::raw_ostream::write(v54, v55);
          goto LABEL_143;
        }
        v44 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v44 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 77);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v44 + 1;
          *v44 = 77;
        }
        llvm::APInt::getLoBits((llvm::APInt *)&__src, 0x40u, (llvm::APInt *)&v116);
        if (v117 >= 0x41)
          v56 = (char **)v116;
        else
          v56 = (char **)&v116;
        v124 = *v56;
        __n[0] = 0;
        LODWORD(__n[1]) = 16;
        WORD2(__n[1]) = 257;
        BYTE6(__n[1]) = 0;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&v124);
        if (v117 >= 0x41 && v116)
          MEMORY[0x24BD1B380](v116, 0x1000C8000313F17);
        llvm::APInt::getHiBits((llvm::APInt *)&__src, 64, (llvm::APInt *)&v116);
        if (v117 >= 0x41)
          v57 = (char **)v116;
        else
          v57 = (char **)&v116;
        v124 = *v57;
        __n[0] = 0;
        LODWORD(__n[1]) = 16;
        WORD2(__n[1]) = 257;
      }
      BYTE6(__n[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v124);
      if (v117 < 0x41 || (v51 = (unint64_t)v116) == 0)
      {
LABEL_146:
        if (v120 >= 0x41 && __src)
          MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
        return;
      }
LABEL_140:
      MEMORY[0x24BD1B380](v51, 0x1000C8000313F17);
      goto LABEL_146;
    }
    if (v6 == 18 || v6 == 13)
    {
      v17 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v17 > 0xEuLL)
      {
        qmemcpy(v17, "zeroinitializer", 15);
        v22 = *((_QWORD *)a1 + 4) + 15;
LABEL_100:
        *((_QWORD *)v5 + 4) = v22;
        return;
      }
      v18 = "zeroinitializer";
      v19 = 15;
LABEL_31:
      llvm::raw_ostream::write(a1, v18, v19);
      return;
    }
    if (a2 && v6 == 4)
    {
      v21 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v21 > 0xCuLL)
      {
        qmemcpy(v21, "blockaddress(", 13);
        *((_QWORD *)a1 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a1, "blockaddress(", 0xDuLL);
      }
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 8), a3);
      v42 = (_WORD *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v42 > 1uLL)
      {
        *v42 = 8236;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ", ", 2uLL);
      }
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4), a3);
      v43 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) != v43)
      {
        *v43 = 41;
        v22 = *((_QWORD *)v5 + 4) + 1;
        goto LABEL_100;
      }
      v18 = ")";
      a1 = v5;
      v19 = 1;
      goto LABEL_31;
    }
    if (a2 && v6 == 6)
    {
      v34 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v34 > 0x14uLL)
      {
        qmemcpy(v34, "dso_local_equivalent ", 21);
        *((_QWORD *)a1 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(a1, "dso_local_equivalent ", 0x15uLL);
      }
      goto LABEL_121;
    }
    if (a2 && v6 == 7)
    {
      llvm::raw_ostream::operator<<(a1, "no_cfi ", 7uLL);
LABEL_121:
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4), a3);
      return;
    }
    if (a2 && v6 == 8)
    {
      v52 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v53 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v53 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 91);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v53 + 1;
        *v53 = 91;
      }
      v66 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v66 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v66 + 1;
        *v66 = 32;
      }
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), a3);
      v68 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      v69 = v68 - 1;
      if (v68 != 1)
      {
        v70 = (char *)a2 + 32;
        do
        {
          v71 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v71 > 1uLL)
          {
            *v71 = 8236;
            *((_QWORD *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          v72 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v72 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v72 + 1;
            *v72 = 32;
          }
          WriteAsOperandInternal(v5, *(const llvm::Value **)&v70[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], a3);
          v70 += 32;
          --v69;
        }
        while (v69);
      }
      v64 = (char *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v64 < *((_QWORD *)v5 + 3))
      {
        *((_QWORD *)v5 + 4) = v64 + 1;
LABEL_197:
        v65 = 93;
        goto LABEL_198;
      }
LABEL_199:
      v84 = v5;
      v85 = 93;
      goto LABEL_200;
    }
    if (a2 && v6 == 14)
    {
      v59 = *(_QWORD *)a2;
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 17)
      {
        v60 = *(_QWORD *)(v59 + 24);
        v61 = (_QWORD *)((char *)a1 + 32);
        if (*(_DWORD *)(v60 + 8) == 2061)
        {
          llvm::raw_ostream::operator<<(a1, "c\"", 2uLL);
          RawDataValues = (llvm::raw_ostream *)llvm::ConstantDataSequential::getRawDataValues(a2);
          llvm::printEscapedString(RawDataValues, v63, v5);
          v64 = (char *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v64 < *((_QWORD *)v5 + 3))
          {
            *v61 = v64 + 1;
            v65 = 34;
LABEL_198:
            *v64 = v65;
            return;
          }
          v84 = v5;
          v85 = 34;
LABEL_200:
          llvm::raw_ostream::write(v84, v85);
          return;
        }
      }
      else
      {
        v61 = (_QWORD *)((char *)a1 + 32);
        v60 = *(_QWORD *)(v59 + 24);
      }
      v73 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v73 >= *((_QWORD *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 91);
      }
      else
      {
        *v61 = v73 + 1;
        *v73 = 91;
      }
      v77 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v77 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *v61 = v77 + 1;
        *v77 = 32;
      }
      ElementAsConstant = (const llvm::Value *)llvm::ConstantDataSequential::getElementAsConstant(a2);
      WriteAsOperandInternal(v5, ElementAsConstant, a3);
      v79 = *(_DWORD *)(*(_QWORD *)a2 + 32);
      if (v79 != 1)
      {
        for (i = 1; i != v79; ++i)
        {
          v81 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v81 > 1uLL)
          {
            *v81 = 8236;
            *v61 += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          v82 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v82 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *v61 = v82 + 1;
            *v82 = 32;
          }
          v83 = (const llvm::Value *)llvm::ConstantDataSequential::getElementAsConstant(a2);
          WriteAsOperandInternal(v5, v83, a3);
        }
      }
      v64 = (char *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v64 < *((_QWORD *)v5 + 3))
      {
        *v61 = v64 + 1;
        goto LABEL_197;
      }
      goto LABEL_199;
    }
    if (a2 && v6 == 9)
    {
      if ((*(_BYTE *)(*(_QWORD *)a2 + 9) & 2) != 0)
      {
        v67 = (_BYTE *)*((_QWORD *)a1 + 4);
        if ((unint64_t)v67 >= *((_QWORD *)a1 + 3))
        {
          llvm::raw_ostream::write(a1, 60);
        }
        else
        {
          *((_QWORD *)a1 + 4) = v67 + 1;
          *v67 = 60;
        }
      }
      v86 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v86 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 123);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v86 + 1;
        *v86 = 123;
      }
      v87 = *((_DWORD *)a2 + 5);
      v88 = v87 & 0x7FFFFFF;
      if ((v87 & 0x7FFFFFF) != 0)
      {
        v89 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v89 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v89 + 1;
          *v89 = 32;
        }
        v90 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v90 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v90 + 1;
          *v90 = 32;
        }
        WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), a3);
        if (v88 >= 2)
        {
          v91 = v88 - 1;
          v92 = (char *)a2 + 32;
          do
          {
            llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
            v93 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v93 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v93 + 1;
              *v93 = 32;
            }
            WriteAsOperandInternal(v5, *(const llvm::Value **)&v92[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], a3);
            v92 += 32;
            --v91;
          }
          while (v91);
        }
        v94 = (_BYTE *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v94 >= *((_QWORD *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((_QWORD *)v5 + 4) = v94 + 1;
          *v94 = 32;
        }
      }
      v95 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v95 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 125);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v95 + 1;
        *v95 = 125;
      }
      if ((*(_BYTE *)(*(_QWORD *)a2 + 9) & 2) == 0)
        return;
LABEL_243:
      v64 = (char *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v64 < *((_QWORD *)v5 + 3))
      {
        *((_QWORD *)v5 + 4) = v64 + 1;
        v65 = 62;
        goto LABEL_198;
      }
      v84 = v5;
      v85 = 62;
    }
    else
    {
      switch(*((_BYTE *)a2 + 16))
      {
        case 0xA:
        case 0xF:
          v74 = *(_QWORD *)a2;
          v75 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          v76 = (_BYTE *)*((_QWORD *)a1 + 4);
          if ((unint64_t)v76 >= *((_QWORD *)a1 + 3))
          {
            llvm::raw_ostream::write(a1, 60);
          }
          else
          {
            *((_QWORD *)a1 + 4) = v76 + 1;
            *v76 = 60;
          }
          v96 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v96 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v96 + 1;
            *v96 = 32;
          }
          AggregateElement = (const llvm::Value *)llvm::Constant::getAggregateElement(a2, 0);
          WriteAsOperandInternal(v5, AggregateElement, a3);
          v98 = *(_DWORD *)(v74 + 32);
          if (v98 != 1)
          {
            v99 = 1;
            do
            {
              llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
              v100 = (_BYTE *)*((_QWORD *)v5 + 4);
              if ((unint64_t)v100 >= *((_QWORD *)v5 + 3))
              {
                llvm::raw_ostream::write(v5, 32);
              }
              else
              {
                *((_QWORD *)v5 + 4) = v100 + 1;
                *v100 = 32;
              }
              v101 = (const llvm::Value *)llvm::Constant::getAggregateElement(a2, (llvm::Type *)v99);
              WriteAsOperandInternal(v5, v101, a3);
              v99 = (v99 + 1);
            }
            while (v98 != (_DWORD)v99);
          }
          goto LABEL_243;
        case 0xC:
          v9 = "poison";
          v8 = 6;
          goto LABEL_13;
        case 0x13:
          v9 = "null";
          goto LABEL_232;
        case 0x14:
          v9 = "none";
LABEL_232:
          v8 = 4;
          goto LABEL_13;
        default:
          if ((v6 - 11) <= 1)
          {
            v9 = "undef";
            v8 = 5;
            goto LABEL_13;
          }
          if (!a2 || v6 != 5)
          {
            v9 = "<placeholder or erroneous Constant>";
            v8 = 35;
            goto LABEL_13;
          }
          OpcodeName = (char *)llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)a2 + 9));
          llvm::raw_ostream::operator<<(v5, OpcodeName);
          WriteOptimizationInfo(v5, a2);
          if (*((unsigned __int16 *)a2 + 9) - 53 <= 1)
          {
            v103 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v103 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v103 + 1;
              *v103 = 32;
            }
            PredicateName = llvm::CmpInst::getPredicateName(*((unsigned __int16 *)a2 + 12));
            llvm::raw_ostream::operator<<(v5, PredicateName, v105);
          }
          llvm::raw_ostream::operator<<(v5, " (", 2uLL);
          if (*((_WORD *)a2 + 9) == 34)
          {
            v106 = 24;
            if (*((_BYTE *)a2 + 16) == 62)
              v106 = 64;
            llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
            v107 = *((unsigned __int8 *)a2 + 17);
            v108 = v107 > 3;
            v109 = v107 > 3;
            if (v107 <= 3)
              v110 = 0;
            else
              v110 = (*((_BYTE *)a2 + 17) >> 2) - 1;
            if (v108)
              v111 = v110 + 1;
            else
              v111 = 0;
          }
          else
          {
            v111 = 0;
            v109 = 0;
          }
          v112 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          if (!(_DWORD)v112)
            goto LABEL_274;
          v113 = -32 * v112;
          if (v109)
            goto LABEL_268;
          while (1)
          {
            v114 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v114 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v114 + 1;
              *v114 = 32;
            }
            WriteAsOperandInternal(v5, *(const llvm::Value **)((char *)a2 + v113), a3);
            if (v113 == -32)
              break;
            llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
            v113 += 32;
            if (v109)
            {
LABEL_268:
              if (v111 == ((v113 + 32 * (unint64_t)(*((_DWORD *)a2 + 5) & 0x7FFFFFF)) >> 5))
                llvm::raw_ostream::operator<<(v5, "inrange ", 8uLL);
            }
          }
LABEL_274:
          v115 = *((unsigned __int16 *)a2 + 9);
          if ((v115 - 38) < 0xD)
          {
            llvm::raw_ostream::operator<<(v5, " to ", 4uLL);
            v115 = *((unsigned __int16 *)a2 + 9);
          }
          if (v115 == 63)
            PrintShuffleMask(v5, *(_QWORD *)a2, *((int **)a2 + 3), *((unsigned int *)a2 + 8));
          v64 = (char *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v64 < *((_QWORD *)v5 + 3))
          {
            *((_QWORD *)v5 + 4) = v64 + 1;
            v65 = 41;
            goto LABEL_198;
          }
          v84 = v5;
          v85 = 41;
          break;
      }
    }
    goto LABEL_200;
  }
  v7 = (const llvm::Constant *)((char *)a2 + 24);
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
  {
    if (*((_DWORD *)a2 + 8) >= 0x41u)
      v7 = *(llvm::APInt **)v7;
    if (*(_QWORD *)v7)
      v8 = 4;
    else
      v8 = 5;
    if (*(_QWORD *)v7)
      v9 = "true";
    else
      v9 = "false";
    a1 = v5;
LABEL_13:
    llvm::raw_ostream::operator<<(a1, v9, v8);
  }
  else
  {
    llvm::APInt::print(v7, v5, 1);
  }
}

