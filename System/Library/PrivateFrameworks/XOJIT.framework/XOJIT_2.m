void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t *v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p[2];
  uint64_t *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  std::string *v43;
  __int16 v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  llvm::formatv_object_base *v48[2];
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;

  if (a2[7] == 24)
  {
    v6 = a2[3];
    v7 = a2[4];
    v40 = v7;
    v41 = v6;
    if (v7 % 0x18)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v35);
      v8 = std::string::insert(&v35, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v29, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = (uint64_t *)&v40;
      v38 = 3076;
      v42[0] = __p;
      v43 = (std::string *)") which is not a multiple of its sh_entsize (";
      v44 = 770;
      v28.__r_.__value_.__r.__words[0] = a2[7];
      v45[0] = v42;
      v46 = &v28;
      v47 = 3074;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)")";
      v50 = 770;
      LODWORD(v27.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v25 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v7 / 0x18;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v27);
        v21 = std::string::insert(&v27, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v28, " has a sh_offset (0x");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v30 = 3588;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v32 = 770;
        __p[0] = &v31;
        v37 = (uint64_t *)&v40;
        v38 = 3586;
        v42[0] = __p;
        v43 = (std::string *)") that is greater than the file size (0x";
        v44 = 770;
        v26 = a1[1];
        v45[0] = v42;
        v46 = (std::string *)&v26;
        v47 = 3586;
        v48[0] = (llvm::formatv_object_base *)v45;
        v49 = (std::string *)")";
        v50 = 770;
        v52 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, &v52, &v33);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v33;
        v33 = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v27.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v35);
      v17 = std::string::insert(&v35, 0, "section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v29, " has a sh_offset (0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v41;
      v38 = 3588;
      v42[0] = __p;
      v43 = (std::string *)") + sh_size (0x";
      v44 = 770;
      v45[0] = v42;
      v46 = (std::string *)&v40;
      v47 = 3586;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)") that cannot be represented";
      v50 = 770;
      LODWORD(v28.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v28, &v34);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v34;
      v34 = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v29);
    v12 = std::string::insert(&v29, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, " has invalid sh_entsize: expected ");
    v15 = (uint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 24;
    v42[0] = __p;
    v43 = &v35;
    v44 = 2564;
    v45[0] = v42;
    v46 = (std::string *)", but got ";
    v47 = 770;
    v28.__r_.__value_.__r.__words[0] = a2[7];
    v48[0] = (llvm::formatv_object_base *)v45;
    v49 = &v28;
    v50 = 3074;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v51);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v51;
    v51 = 0;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v16);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a1;
  if (*(_WORD *)(*a1 + 18) == 8 && *(_BYTE *)(v4 + 4) == 2)
  {
    if (*(_BYTE *)(v4 + 5) == 1)
      v5 = *(_QWORD *)(a2 + 8) << 32;
    else
      v5 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 8);
  }
  v6 = HIDWORD(v5);
  if ((_DWORD)v6)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1, a3, v6, a4);
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = 0;
  }
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[74]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"R_AARCH64_LDST8_ABS_LO12_NC target is not a LDRB/STRB (imm12) instruction";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[81]>(uint64_t *a1, llvm::formatv_object_base *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm::formatv_object_base *v7;
  char v8;
  char v9;

  v4 = operator new();
  v5 = v4;
  v6 = 1;
  v9 = 1;
  if (*(_BYTE *)a2)
  {
    v7 = a2;
    v6 = 3;
  }
  v8 = v6;
  *(_QWORD *)v4 = off_251C15728;
  llvm::Twine::str(&v7, (std::string *)(v4 + 8));
  *a1 = v5;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[83]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"R_AARCH64_LDST128_ABS_LO12_NC target is not a LDR/STR (imm12, 128 bit) instruction";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[80]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"R_AARCH64_MOVW_UABS_G0_NC target is not a MOVK/MOVZ (imm16, LSL #0) instruction";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[78]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"R_AARCH64_MOVW_UABS_G3 target is not a MOVK/MOVZ (imm16, LSL #48) instruction";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 24 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 24 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = a2[4];
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::prepare(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v17;
  __int128 v18;
  char v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(*(_QWORD **)(a1 + 24), (uint64_t)&v18);
  if ((v19 & 1) != 0
    || (*(_OWORD *)(a1 + 32) = v18,
        v4 = *(_QWORD **)(a1 + 24),
        v5 = *(_QWORD *)(a1 + 32),
        v6 = *(_QWORD *)(a1 + 40),
        __p = llvm::object::defaultWarningHandler,
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(v4, v5, v6, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&__p, (uint64_t)&v18), (v19 & 1) != 0))
  {
LABEL_16:
    *a2 = v18;
    return;
  }
  *(_OWORD *)(a1 + 56) = v18;
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
  {
LABEL_15:
    *a2 = 0;
    return;
  }
  v8 = v7 << 6;
  v9 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 40);
  while (1)
  {
    v10 = (uint64_t)(v9 - 10);
    v11 = *(v9 - 9);
    if (v11 != 2)
      goto LABEL_8;
    if (*(_QWORD *)(a1 + 48))
      break;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = *(v9 - 9);
LABEL_8:
    if (v11 == 18)
    {
      v12 = *v9;
      if (*(_QWORD *)(a1 + 40) <= v12)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"sh_link is out of bound", a2);
        return;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(*(_QWORD **)(a1 + 24), v10, (uint64_t)&v18);
      if ((v19 & 1) != 0)
        goto LABEL_16;
      __p = (void *)(*(_QWORD *)(a1 + 32) + (v12 << 6));
      v17 = v18;
      llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>(a1 + 128, &__p, &v17, (uint64_t)&v15);
      if ((v19 & 1) != 0)
      {
        v13 = v18;
        *(_QWORD *)&v18 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v9 += 16;
    v8 -= 64;
    if (!v8)
      goto LABEL_15;
  }
  std::operator+<char>();
  v14 = operator new();
  v20 = 260;
  *(_QWORD *)&v18 = &__p;
  *(_QWORD *)v14 = off_251C15728;
  llvm::Twine::str((llvm::formatv_object_base **)&v18, (std::string *)(v14 + 8));
  *a2 = v14;
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySections(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t SectionByName;
  int v11;
  uint64_t Section;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  __int128 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 80);
    v6 = 1;
    do
    {
      v7 = *(_QWORD *)(a1 + 32) + (v4 << 6);
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(*(_QWORD **)(a1 + 24), (unsigned int *)v7, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)&v31);
      if ((v32 & 1) != 0)
      {
        v17 = v31;
        *(_QWORD *)&v31 = 0;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v7) & 1) != 0
          || !*(_DWORD *)(v7 + 4)
          || !*(_BYTE *)(a1 + 72)
          && (v29 = v31,
              std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v29) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))
        {
          v18 = 6;
          goto LABEL_24;
        }
        v9 = *(_QWORD *)(v7 + 8);
        SectionByName = llvm::jitlink::LinkGraph::findSectionByName(*(_QWORD *)(a1 + 8), v31, *((uint64_t *)&v31 + 1), v8);
        if (!SectionByName)
        {
          v11 = (v9 & 4) != 0 ? 5 : 1;
          Section = llvm::jitlink::LinkGraph::createSection(*(_QWORD *)(a1 + 8), v31, *((uint64_t *)&v31 + 1), v11 & 0xFFFFFFFD | (2 * (v9 & 1)));
          SectionByName = Section;
          if ((*(_BYTE *)(v7 + 8) & 2) == 0)
            *(_DWORD *)(Section + 20) = 2;
        }
        if (*(_DWORD *)(v7 + 4) == 8)
        {
          v13 = *(_QWORD *)(a1 + 8);
          v14 = *(_QWORD *)(v7 + 32);
          v15 = *(_QWORD *)(v7 + 16);
          v28 = *(_QWORD *)(v7 + 48);
          *(_QWORD *)&v29 = v15;
          *(_QWORD *)&v26 = v14;
          v27 = 0;
          v16 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v13, SectionByName, (uint64_t *)&v26, (uint64_t *)&v29, (unint64_t *)&v28, &v27);
LABEL_21:
          LODWORD(v29) = v6 - 1;
          v18 = 0;
          *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v5, &v29)+ 1) = v16;
          goto LABEL_24;
        }
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(*(_QWORD **)(a1 + 24), v7, (uint64_t)&v29);
        if ((v30 & 1) == 0)
        {
          v19 = *(_QWORD *)(a1 + 8);
          v20 = *(_QWORD *)(v7 + 16);
          v21 = *(_QWORD *)(v7 + 48);
          v26 = v29;
          v27 = v21;
          v28 = v20;
          v25 = 0;
          v16 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v19, SectionByName, (uint64_t *)&v26, &v28, (unint64_t *)&v27, &v25);
          if ((v30 & 1) != 0)
          {
            v22 = v29;
            *(_QWORD *)&v29 = 0;
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
          goto LABEL_21;
        }
        v17 = v29;
      }
      *a2 = v17;
      v18 = 1;
LABEL_24:
      if ((v32 & 1) != 0)
      {
        v23 = v31;
        *(_QWORD *)&v31 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      if (v18 != 6 && v18)
        return;
      v4 = v6;
    }
    while (*(_QWORD *)(a1 + 40) != v6++);
  }
  *a2 = 0;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySymbols(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t CommonSection;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  llvm::formatv_object_base *v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  char v26;
  int v27;
  uint64_t GraphBlock;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41[2];
  uint64_t v42[4];
  __int16 v43;
  const char *v44;
  __int16 v45;
  uint64_t v46[4];
  __int16 v47;
  uint64_t v48[4];
  __int16 v49;
  uint64_t v50[5];
  uint64_t v51[5];
  uint64_t v52[2];
  char v53;
  uint64_t v54;
  llvm::formatv_object_base *v55;
  char v56;
  llvm::formatv_object_base *v57;
  uint64_t v58;
  char v59;
  uint64_t v60[2];
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)(a1 + 48);
  if (v3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(_QWORD **)(a1 + 24), v3, (uint64_t)&v62);
    if ((v64 & 1) != 0)
    {
      *a2 = v62;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(*(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v60);
      if ((v61 & 1) != 0)
      {
        v5 = v60[0];
        v60[0] = 0;
        goto LABEL_48;
      }
      v5 = v63;
      if (v63)
      {
        v6 = 0;
        v40 = (uint64_t *)(a1 + 104);
        v7 = 1;
        while (1)
        {
          v8 = v62 + 24 * v6;
          if ((*(_BYTE *)(v8 + 4) & 0xF) != 4)
            break;
LABEL_18:
          v6 = v7;
          v24 = v63 == v7++;
          if (v24)
          {
            v5 = 0;
            goto LABEL_48;
          }
        }
        llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName((llvm::object *)v8, v60[0], v60[1], (uint64_t)&v57);
        if ((v59 & 1) != 0)
        {
          v22 = v57;
          v57 = 0;
        }
        else
        {
          v9 = *(unsigned __int8 *)(v8 + 4);
          v10 = v9 & 0xF;
          if (v10 == 5 || *(unsigned __int16 *)(v8 + 6) == 65522)
          {
            v11 = *(_QWORD *)(a1 + 8);
            CommonSection = llvm::jitlink::ELFLinkGraphBuilderBase::getCommonSection((llvm::jitlink::ELFLinkGraphBuilderBase *)a1);
            v14 = *(_QWORD *)(v8 + 8);
            v13 = *(_QWORD *)(v8 + 16);
            v55 = 0;
            v51[0] = v13;
            v50[0] = v14;
            v48[0] = 0;
            v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, CommonSection, v51, (uint64_t *)&v55, (unint64_t *)v50, v48);
            v17 = (uint64_t)v57;
            v16 = v58;
            v18 = *(_QWORD *)(v8 + 16);
            v19 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11, 40, 3);
            *v19 = v17;
            v19[1] = v16;
            v19[4] = v18;
            v19[2] = v15;
            v19[3] = 0x200000000000000;
            v20 = v15[2] + 56;
            v51[0] = (uint64_t)v19;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v20, v51, (uint64_t)&v55);
            LODWORD(v55) = v7 - 1;
            *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v55)+ 1) = v19;
            v21 = 8;
            goto LABEL_14;
          }
          if (!*(_WORD *)(v8 + 6))
          {
            if (v9 < 0x10)
              goto LABEL_35;
            v34 = v9 >> 4;
            if (v34 - 1 < 2)
            {
              v35 = llvm::jitlink::LinkGraph::addExternalSymbol(*(_QWORD *)(a1 + 8), (uint64_t)v57, v58, *(_QWORD *)(v8 + 16), v34 == 2);
LABEL_44:
              LODWORD(v55) = v7 - 1;
              v21 = 0;
              *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v55)+ 1) = v35;
              goto LABEL_14;
            }
            v48[0] = (uint64_t)"Invalid symbol binding ";
            v49 = 259;
            v37 = *(unsigned __int8 *)(v8 + 4) >> 4;
            v47 = 265;
            LODWORD(v46[0]) = v37;
            llvm::operator+(v48, v46, (uint64_t)v50);
            v44 = " for external symbol ";
            v45 = 259;
            llvm::operator+(v50, (uint64_t *)&v44, (uint64_t)v51);
            v43 = 261;
            v42[0] = (uint64_t)v57;
            v42[1] = v58;
            llvm::operator+(v51, v42, (uint64_t)&v55);
            getErrorErrorCat();
            v41[0] = 3;
            v41[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>(&v55, v41, a2);
LABEL_13:
            v21 = 1;
            goto LABEL_14;
          }
          v24 = v10 < 4 || v10 == 6;
          if (!v24)
            goto LABEL_35;
          llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolLinkageAndScope(v8, (uint64_t)v57, v58, (uint64_t)&v55);
          if ((v56 & 1) == 0)
          {
            v25 = (char)v55;
            v26 = BYTE1(v55);
            v27 = *(unsigned __int16 *)(v8 + 6);
            if (v27 != 0xFFFF)
              goto LABEL_29;
            v51[0] = *(_QWORD *)(a1 + 48);
            v55 = 0;
            v21 = 8;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)(a1 + 128), v51, &v55)|| v55 == (llvm::formatv_object_base *)(*(_QWORD *)(a1 + 128) + 24 * *(unsigned int *)(a1 + 144)))
            {
LABEL_14:
              if ((v59 & 1) != 0)
              {
                v23 = (uint64_t)v57;
                v57 = 0;
                if (v23)
                  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              }
              if ((v21 | 8) != 8)
                goto LABEL_49;
              goto LABEL_18;
            }
            v36 = *((_QWORD *)v55 + 2);
            v52[0] = *((_QWORD *)v55 + 1);
            v52[1] = v36;
            v53 = 1;
            v54 = 0;
            llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(v7 - 1, v52, (uint64_t)&v55);
            if ((v56 & 1) == 0)
            {
              v27 = (int)v55;
LABEL_29:
              GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v27);
              if (GraphBlock)
              {
                v29 = GraphBlock;
                v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v8);
                v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8, v30);
                v32 = *(_QWORD *)(a1 + 8);
                if (v58)
                  v33 = llvm::jitlink::LinkGraph::addDefinedSymbol(v32, v29, v31, (uint64_t)v57, v58, *(_QWORD *)(v8 + 16), v25, v26, (*(_BYTE *)(v8 + 4) & 0xF) == 2, 0);
                else
                  v33 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v32, v29, v31, *(_QWORD *)(v8 + 16), 0, 0);
                v35 = v33;
                v33[3] = v33[3] & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v30 << 63);
                goto LABEL_44;
              }
LABEL_35:
              v21 = 0;
              goto LABEL_14;
            }
          }
          v22 = v55;
        }
        *a2 = (uint64_t)v22;
        goto LABEL_13;
      }
LABEL_48:
      *a2 = v5;
LABEL_49:
      if ((v61 & 1) != 0)
      {
        v38 = v60[0];
        v60[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      if ((v64 & 1) != 0)
      {
        v39 = v62;
        v62 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24[4];
  const char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  llvm::formatv_object_base *v29[2];
  unint64_t *v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>(a1, (_QWORD *)a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
LABEL_11:
    *(_QWORD *)a5 = v10;
    goto LABEL_14;
  }
  v11 = *(unsigned int *)(a2 + 40);
  if (a4 > v11)
  {
    v12 = a3 + (v11 << 6);
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 != 2 && v13 != 11)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v13);
      v27 = 1283;
      *(_QWORD *)v24 = "SHT_SYMTAB_SHNDX section is linked with ";
      v25 = ELFSectionTypeName;
      v26 = v17;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v31 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, (unsigned int *)v20, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
      goto LABEL_14;
    }
    v15 = v34;
    v23 = *(_QWORD *)(v12 + 32) / 0x18uLL;
    if (v34 == v23)
    {
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)(a5 + 8) = v15;
    }
    else
    {
      v19 = v34;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      v20[2] = &v19;
      v21 = 2563;
      *(_QWORD *)v24 = v20;
      v25 = " entries, but the symbol table associated has ";
      v27 = 770;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = &v23;
      v31 = 3074;
      v32 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, &v32, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      v10 = v22;
      v22 = 0;
    }
    goto LABEL_11;
  }
  v29[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v30 = (unint64_t *)v11;
  v31 = 2051;
  v24[0] = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v24, (uint64_t *)a5);
  *(_BYTE *)(a5 + 16) |= 1u;
LABEL_14:
  if ((v35 & 1) != 0)
  {
    v18 = v33;
    v33 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t *v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p[2];
  uint64_t *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  std::string *v43;
  __int16 v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  llvm::formatv_object_base *v48[2];
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;

  if (a2[7] == 4)
  {
    v6 = a2[3];
    v7 = a2[4];
    v40 = v7;
    v41 = v6;
    if ((v7 & 3) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v35);
      v8 = std::string::insert(&v35, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v29, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = (uint64_t *)&v40;
      v38 = 3076;
      v42[0] = __p;
      v43 = (std::string *)") which is not a multiple of its sh_entsize (";
      v44 = 770;
      v28.__r_.__value_.__r.__words[0] = a2[7];
      v45[0] = v42;
      v46 = &v28;
      v47 = 3074;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)")";
      v50 = 770;
      LODWORD(v27.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v25 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v7 >> 2;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v27);
        v21 = std::string::insert(&v27, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v28, " has a sh_offset (0x");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v30 = 3588;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v32 = 770;
        __p[0] = &v31;
        v37 = (uint64_t *)&v40;
        v38 = 3586;
        v42[0] = __p;
        v43 = (std::string *)") that is greater than the file size (0x";
        v44 = 770;
        v26 = a1[1];
        v45[0] = v42;
        v46 = (std::string *)&v26;
        v47 = 3586;
        v48[0] = (llvm::formatv_object_base *)v45;
        v49 = (std::string *)")";
        v50 = 770;
        v52 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, &v52, &v33);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v33;
        v33 = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v27.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v35);
      v17 = std::string::insert(&v35, 0, "section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v29, " has a sh_offset (0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v41;
      v38 = 3588;
      v42[0] = __p;
      v43 = (std::string *)") + sh_size (0x";
      v44 = 770;
      v45[0] = v42;
      v46 = (std::string *)&v40;
      v47 = 3586;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)") that cannot be represented";
      v50 = 770;
      LODWORD(v28.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v28, &v34);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v34;
      v34 = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v29);
    v12 = std::string::insert(&v29, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, " has invalid sh_entsize: expected ");
    v15 = (uint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 4;
    v42[0] = __p;
    v43 = &v35;
    v44 = 2564;
    v45[0] = v42;
    v46 = (std::string *)", but got ";
    v47 = 770;
    v28.__r_.__value_.__r.__words[0] = a2[7];
    v48[0] = (llvm::formatv_object_base *)v45;
    v49 = &v28;
    v50 = 3074;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v51);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v51;
    v51 = 0;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v16);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  unint64_t v8;
  uint64_t v9;
  llvm::formatv_object_base *v10[4];
  __int16 v11;
  unsigned int v12;

  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 2 || v6 == 11)
  {
    v8 = *(unsigned int *)(a2 + 40);
    if (a4 <= v8)
    {
      v10[0] = (llvm::formatv_object_base *)"invalid section index: ";
      v10[2] = (llvm::formatv_object_base *)v8;
      v11 = 2051;
      v12 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v10, &v12, (uint64_t *)a5);
      *(_BYTE *)(a5 + 16) |= 1u;
    }
    else
    {
      v10[0] = (llvm::formatv_object_base *)llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, a3 + (v8 << 6), (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)v10, a5);
    }
  }
  else
  {
    v10[0] = (llvm::formatv_object_base *)"invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v11 = 259;
    v12 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v10, &v12, &v9);
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v9;
  }
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolLinkageAndScope(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  uint64_t v12;
  __int16 v13;
  _QWORD v14[2];
  const char *v15;
  __int16 v16;
  llvm::formatv_object_base *v17[2];
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v5 = (unint64_t)*(unsigned __int8 *)(a1 + 4) >> 4;
  if ((int)v5 > 1)
  {
    if ((_DWORD)v5 != 2 && (_DWORD)v5 != 10)
      goto LABEL_11;
    v6 = 0;
    LOWORD(v5) = 1;
    v7 = 1;
  }
  else
  {
    if ((_DWORD)v5)
    {
      if ((_DWORD)v5 == 1)
      {
        v6 = 0;
        v7 = 0;
        goto LABEL_13;
      }
LABEL_11:
      v11[0] = "Unrecognized symbol binding ";
      v12 = v5;
      v13 = 2307;
      v14[0] = v11;
      v15 = " for ";
      v16 = 770;
      v17[0] = (llvm::formatv_object_base *)v14;
      v18 = a2;
      v19 = a3;
      v20 = 1282;
      getErrorErrorCat();
      v9 = operator new();
      *(_QWORD *)v9 = off_251C127D0;
      llvm::Twine::str(v17, (std::string *)(v9 + 8));
      *(_QWORD *)(v9 + 32) = 3;
      *(_QWORD *)(v9 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v9 + 48) = 1;
LABEL_18:
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v9;
      return;
    }
    v7 = 0;
    LOWORD(v5) = 2;
    v6 = 2;
  }
LABEL_13:
  v10 = *(_BYTE *)(a1 + 5) & 3;
  if (v10 == 1)
  {
    v11[0] = "Unrecognized symbol visibility ";
    v12 = 1;
    v13 = 2307;
    v14[0] = v11;
    v15 = " for ";
    v16 = 770;
    v17[0] = (llvm::formatv_object_base *)v14;
    v18 = a2;
    v19 = a3;
    v20 = 1282;
    getErrorErrorCat();
    v9 = operator new();
    *(_QWORD *)v9 = off_251C127D0;
    llvm::Twine::str(v17, (std::string *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 3;
    *(_QWORD *)(v9 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v9 + 48) = 1;
    goto LABEL_18;
  }
  if (v10 != 2)
    LOWORD(v5) = v6;
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_WORD *)a4 = v7 | ((_WORD)v5 << 8);
}

void `anonymous namespace'::ELFJITLinker_aarch64::~ELFJITLinker_aarch64(_anonymous_namespace_::ELFJITLinker_aarch64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<`anonymous namespace'::ELFJITLinker_aarch64>::fixUpBlocks(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__src;
  int v21;

  if (*(_DWORD *)(a1 + 192))
  {
    v4 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a1 + 184);
    }
    v7 = *(_QWORD *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (_QWORD *)v7)
    {
      v8 = v6[2];
      v21 = *(_DWORD *)(v8 + 20);
      v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      v11 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9)
        goto LABEL_28;
      v12 = v9;
      v13 = v10;
      do
      {
        v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          v15 = v14[4];
          __src = (void *)v14[3];
          v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          v17 = (uint64_t)v16;
          if (v15)
            memmove(v16, __src, v15);
          v14[3] = v17;
          v14[4] = v15;
          v14[1] |= 4uLL;
        }
        v18 = v14[5];
        v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::aarch64::applyFixup(a1, v14, v18, a2);
            if (*a2)
              return;
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_27;
        }
        v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (_QWORD *)v7)
          break;
        if (*v6 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_10;
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<`anonymous namespace'::ELFJITLinker_aarch64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

llvm::object::ObjectFile *llvm::jitlink::createLinkGraphFromELFObject_i386@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  llvm::object::ObjectFile *result;
  void *v5;
  size_t v6;
  char *v7;
  llvm::jitlink::LinkGraph *v8;
  void *__p[2];
  char v10;
  void (**v11)();
  llvm::jitlink::LinkGraph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  llvm::object::ObjectFile *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v16[0] = *a1;
  v16[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v16, 1, (uint64_t)&v17);
  result = v17;
  if ((v18 & 1) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = result;
  }
  else
  {
    v5 = (void *)*((_QWORD *)v17 + 4);
    v6 = *((_QWORD *)v17 + 5);
    v7 = (char *)v17 + 56;
    llvm::object::ObjectFile::makeTriple(v17, (llvm::Triple *)__p);
    llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder_i386(&v11, v5, v6, (uint64_t)v7, (uint64_t)__p);
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::buildGraph((uint64_t)&v11, a2);
    v11 = off_251C159F8;
    MEMORY[0x24BD1B398](v15, 8);
    MEMORY[0x24BD1B398](v14, 8);
    MEMORY[0x24BD1B398](v13, 8);
    v8 = v12;
    v11 = (void (**)())&off_251C159D8;
    v12 = 0;
    if (v8)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v8);
      MEMORY[0x24BD1B3A4]();
    }
    if (v10 < 0)
      operator delete(__p[0]);
    result = v17;
    v17 = 0;
    if (result)
      return (llvm::object::ObjectFile *)(*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_i386(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_i386(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 *v42;
  __int128 *v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  llvm::jitlink::LinkGraph *v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  _QWORD *v62;
  llvm::jitlink::LinkGraph *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int64x2_t v76;
  _OWORD v77[2];
  __int128 v78;
  _OWORD v79[2];
  __int128 v80;
  uint64_t v81;
  _BYTE v82[24];
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  llvm::jitlink::LinkGraph *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[3];
  _QWORD v96[3];
  _QWORD v97[3];
  _QWORD v98[3];
  __int128 v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  v80 = 0u;
  v78 = 0u;
  memset(v79, 0, sizeof(v79));
  memset(v77, 0, sizeof(v77));
  v76 = 0u;
  v4 = (uint64_t)*a1 + 120;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, v4))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v93, *a2, v4);
    if (v95[0] < 8uLL)
    {
      *(_QWORD *)&v101 = llvm::jitlink::markAllSymbolsLive;
      v103 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v76.i64[1] >= *(_QWORD *)&v77[0])
      {
        v11 = (v76.i64[1] - v76.i64[0]) >> 5;
        if ((unint64_t)(v11 + 1) >> 59)
          goto LABEL_94;
        v12 = (*(_QWORD *)&v77[0] - v76.i64[0]) >> 4;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if (*(_QWORD *)&v77[0] - v76.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v13 = 0x7FFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        *((_QWORD *)&v83 + 1) = v77;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v77, v13);
        else
          v14 = 0;
        v19 = (uint64_t)&v14[32 * v11];
        *(_QWORD *)v82 = v14;
        *(_QWORD *)&v82[8] = v19;
        *(_QWORD *)&v83 = &v14[32 * v13];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19, &v101);
        v6 = v19 + 32;
        *(_QWORD *)&v82[16] = v19 + 32;
        v20 = (__int128 *)v76.i64[1];
        v21 = *(_QWORD *)&v82[8];
        if (v76.i64[1] == v76.i64[0])
        {
          v22 = vdupq_n_s64(v76.u64[1]);
        }
        else
        {
          do
          {
            v20 -= 2;
            v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v21 - 32, v20);
          }
          while (v20 != (__int128 *)v76.i64[0]);
          v22 = v76;
          v6 = *(_QWORD *)&v82[16];
        }
        v76.i64[0] = v21;
        v76.i64[1] = v6;
        *(int64x2_t *)&v82[8] = v22;
        v24 = *(_QWORD *)&v77[0];
        *(_QWORD *)&v77[0] = v83;
        *(_QWORD *)&v83 = v24;
        *(_QWORD *)v82 = v22.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v82);
      }
      else
      {
        v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v76.i64[1], &v101)+ 32;
      }
      v76.i64[1] = v6;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v101);
    }
    else
    {
      if (v76.i64[1] >= *(_QWORD *)&v77[0])
      {
        v7 = (v76.i64[1] - v76.i64[0]) >> 5;
        if ((unint64_t)(v7 + 1) >> 59)
          goto LABEL_94;
        v8 = (*(_QWORD *)&v77[0] - v76.i64[0]) >> 4;
        if (v8 <= v7 + 1)
          v8 = v7 + 1;
        if (*(_QWORD *)&v77[0] - v76.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v9 = 0x7FFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        *((_QWORD *)&v83 + 1) = v77;
        if (v9)
          v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v77, v9);
        else
          v10 = 0;
        v15 = (uint64_t)&v10[32 * v7];
        *(_QWORD *)v82 = v10;
        *(_QWORD *)&v82[8] = v15;
        *(_QWORD *)&v83 = &v10[32 * v9];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15, &v93);
        v5 = v15 + 32;
        *(_QWORD *)&v82[16] = v15 + 32;
        v16 = (__int128 *)v76.i64[1];
        v17 = *(_QWORD *)&v82[8];
        if (v76.i64[1] == v76.i64[0])
        {
          v18 = vdupq_n_s64(v76.u64[1]);
        }
        else
        {
          do
          {
            v16 -= 2;
            v17 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17 - 32, v16);
          }
          while (v16 != (__int128 *)v76.i64[0]);
          v18 = v76;
          v5 = *(_QWORD *)&v82[16];
        }
        v76.i64[0] = v17;
        v76.i64[1] = v5;
        *(int64x2_t *)&v82[8] = v18;
        v23 = *(_QWORD *)&v77[0];
        *(_QWORD *)&v77[0] = v83;
        *(_QWORD *)&v83 = v23;
        *(_QWORD *)v82 = v18.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v82);
      }
      else
      {
        v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v76.i64[1], &v93)+ 32;
      }
      v76.i64[1] = v5;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v93);
    v95[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
    if (*(_QWORD *)&v77[1] >= *((_QWORD *)&v77[1] + 1))
    {
      v26 = (uint64_t)(*(_QWORD *)&v77[1] - *((_QWORD *)&v77[0] + 1)) >> 5;
      if ((unint64_t)(v26 + 1) >> 59)
        goto LABEL_94;
      v27 = (uint64_t)(*((_QWORD *)&v77[1] + 1) - *((_QWORD *)&v77[0] + 1)) >> 4;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (*((_QWORD *)&v77[1] + 1) - *((_QWORD *)&v77[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      *((_QWORD *)&v83 + 1) = (char *)&v77[1] + 8;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v77[1] + 8, v28);
      else
        v29 = 0;
      v30 = (uint64_t)&v29[32 * v26];
      *(_QWORD *)v82 = v29;
      *(_QWORD *)&v82[8] = v30;
      *(_QWORD *)&v83 = &v29[32 * v28];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30, &v93);
      v25 = v30 + 32;
      *(_QWORD *)&v82[16] = v30 + 32;
      v32 = (__int128 *)*((_QWORD *)&v77[0] + 1);
      v31 = *(__int128 **)&v77[1];
      v33 = *(_QWORD *)&v82[8];
      if (*(_QWORD *)&v77[1] == *((_QWORD *)&v77[0] + 1))
      {
        v34 = vdupq_n_s64(*(unint64_t *)&v77[1]);
      }
      else
      {
        do
        {
          v31 -= 2;
          v33 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v33 - 32, v31);
        }
        while (v31 != v32);
        v34 = *(int64x2_t *)((char *)v77 + 8);
        v25 = *(_QWORD *)&v82[16];
      }
      *((_QWORD *)&v77[0] + 1) = v33;
      *(_QWORD *)&v77[1] = v25;
      *(int64x2_t *)&v82[8] = v34;
      v35 = *((_QWORD *)&v77[1] + 1);
      *((_QWORD *)&v77[1] + 1) = v83;
      *(_QWORD *)&v83 = v35;
      *(_QWORD *)v82 = v34.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v82);
    }
    else
    {
      v25 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v77[1], &v93)+ 32;
    }
    *(_QWORD *)&v77[1] = v25;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v93);
    *(_QWORD *)&v93 = llvm::jitlink::i386::optimizeGOTAndStubAccesses;
    v95[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
    if (*(_QWORD *)&v79[1] >= *((_QWORD *)&v79[1] + 1))
    {
      v37 = (uint64_t)(*(_QWORD *)&v79[1] - *((_QWORD *)&v79[0] + 1)) >> 5;
      if ((unint64_t)(v37 + 1) >> 59)
        goto LABEL_94;
      v38 = (uint64_t)(*((_QWORD *)&v79[1] + 1) - *((_QWORD *)&v79[0] + 1)) >> 4;
      if (v38 <= v37 + 1)
        v38 = v37 + 1;
      if (*((_QWORD *)&v79[1] + 1) - *((_QWORD *)&v79[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v39 = 0x7FFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      *((_QWORD *)&v83 + 1) = (char *)&v79[1] + 8;
      if (v39)
        v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v79[1] + 8, v39);
      else
        v40 = 0;
      v41 = (uint64_t)&v40[32 * v37];
      *(_QWORD *)v82 = v40;
      *(_QWORD *)&v82[8] = v41;
      *(_QWORD *)&v83 = &v40[32 * v39];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41, &v93);
      v36 = v41 + 32;
      *(_QWORD *)&v82[16] = v41 + 32;
      v43 = (__int128 *)*((_QWORD *)&v79[0] + 1);
      v42 = *(__int128 **)&v79[1];
      v44 = *(_QWORD *)&v82[8];
      if (*(_QWORD *)&v79[1] == *((_QWORD *)&v79[0] + 1))
      {
        v45 = vdupq_n_s64(*(unint64_t *)&v79[1]);
      }
      else
      {
        do
        {
          v42 -= 2;
          v44 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44 - 32, v42);
        }
        while (v42 != v43);
        v45 = *(int64x2_t *)((char *)v79 + 8);
        v36 = *(_QWORD *)&v82[16];
      }
      *((_QWORD *)&v79[0] + 1) = v44;
      *(_QWORD *)&v79[1] = v36;
      *(int64x2_t *)&v82[8] = v45;
      v46 = *((_QWORD *)&v79[1] + 1);
      *((_QWORD *)&v79[1] + 1) = v83;
      *(_QWORD *)&v83 = v46;
      *(_QWORD *)v82 = v45.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v82);
    }
    else
    {
      v36 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v79[1], &v93)+ 32;
    }
    *(_QWORD *)&v79[1] = v36;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v93);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v82, *a2, *a1, &v76);
  if (!*(_QWORD *)v82)
  {
    v49 = (_QWORD *)operator new();
    v50 = *a2;
    *a2 = 0;
    v51 = *a1;
    *a1 = 0;
    v52 = *(_QWORD *)&v77[0];
    v53 = v76;
    v76 = 0uLL;
    v54 = *((_QWORD *)&v77[1] + 1);
    v55 = *(_OWORD *)((char *)v77 + 8);
    memset(v77, 0, sizeof(v77));
    v56 = *(_QWORD *)&v79[0];
    v57 = v78;
    v78 = 0uLL;
    v58 = *((_QWORD *)&v79[1] + 1);
    v59 = *(_OWORD *)((char *)v79 + 8);
    memset(v79, 0, sizeof(v79));
    v60 = v81;
    v61 = v80;
    v80 = 0uLL;
    v81 = 0;
    v91 = v51;
    v92 = v50;
    *(int64x2_t *)v82 = v53;
    v93 = 0uLL;
    v83 = v55;
    *(_QWORD *)&v82[16] = v52;
    v84 = v54;
    v94 = 0;
    memset(v95, 0, sizeof(v95));
    v85 = v57;
    memset(v96, 0, sizeof(v96));
    v87 = v59;
    v86 = v56;
    v88 = v58;
    memset(v97, 0, sizeof(v97));
    v89 = v61;
    v90 = v60;
    memset(v98, 0, sizeof(v98));
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v49, &v92, (uint64_t *)&v91, (uint64_t)v82);
    *v62 = &off_251C15D38;
    *(_QWORD *)&v101 = &v89;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v101);
    *(_QWORD *)&v101 = &v87;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v101);
    *(_QWORD *)&v101 = &v85;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v101);
    *(_QWORD *)&v101 = &v83;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v101);
    *(_QWORD *)&v101 = v82;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v101);
    v63 = v91;
    v91 = 0;
    if (v63)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v63);
      MEMORY[0x24BD1B3A4]();
    }
    v64 = v92;
    v92 = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    *v49 = &off_251C15D10;
    v49[19] = 0;
    *(_QWORD *)&v99 = v49;
    v100 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::ELFJITLinker_i386::ELFJITLinker_i386(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1},llvm::jitlink::ELFJITLinker_i386::ELFJITLinker_i386(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
         + 2;
    v65 = v49[10];
    v66 = v49[11];
    if (v65 < v66)
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v49[10], &v99);
      v67 = v65 + 32;
      goto LABEL_92;
    }
    v68 = v49[9];
    v69 = (uint64_t)(v65 - v68) >> 5;
    if (!((unint64_t)(v69 + 1) >> 59))
    {
      v70 = v66 - v68;
      v71 = v70 >> 4;
      if (v70 >> 4 <= (unint64_t)(v69 + 1))
        v71 = v69 + 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
        v72 = 0x7FFFFFFFFFFFFFFLL;
      else
        v72 = v71;
      v104 = v49 + 11;
      if (v72)
        v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(v49 + 11), v72);
      else
        v73 = 0;
      v74 = (uint64_t)&v73[32 * v69];
      *(_QWORD *)&v101 = v73;
      *((_QWORD *)&v101 + 1) = v74;
      v103 = &v73[32 * v72];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v74, &v99);
      v102 = v74 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(v49 + 9, &v101);
      v67 = v49[10];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v101);
LABEL_92:
      v49[10] = v67;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v99);
      *(_QWORD *)v82 = v98;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
      *(_QWORD *)v82 = v97;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
      *(_QWORD *)v82 = v96;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
      *(_QWORD *)v82 = v95;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
      *(_QWORD *)v82 = &v93;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
      *(_QWORD *)v82 = v49;
      llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v49, (uint64_t *)v82);
      v48 = *(_QWORD *)v82;
      *(_QWORD *)v82 = 0;
      if (!v48)
        goto LABEL_75;
      goto LABEL_74;
    }
LABEL_94:
    abort();
  }
  v47 = *a2;
  v75 = *(_QWORD *)v82;
  *(_QWORD *)v82 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v47 + 24))(v47, &v75);
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v48 = *(_QWORD *)v82;
  if (*(_QWORD *)v82)
LABEL_74:
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
LABEL_75:
  *(_QWORD *)v82 = &v80;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
  *(_QWORD *)v82 = (char *)v79 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
  *(_QWORD *)v82 = &v78;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
  *(_QWORD *)v82 = (char *)v77 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
  *(_QWORD *)v82 = &v76;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v82);
}

uint64_t `anonymous namespace'::buildTables_ELF_i386@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t EntryForTarget;
  _QWORD *v20;
  char *v21;
  uint64_t v22[2];
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  uint64_t Section;
  __int128 v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  _OWORD v36[8];
  _OWORD v37[4];
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41[3];

  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  Section = 0;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v24 = v26;
  v25 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v36);
  v37[0] = v36[0];
  v37[1] = v36[1];
  v37[2] = v36[2];
  v37[3] = v36[3];
  llvm::jitlink::LinkGraph::blocks(this, &v29);
  v35[0] = v31;
  v35[1] = v32;
  v35[2] = v33;
  v35[3] = v34;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v38, v37, (uint64_t *)v35);
  v6 = v38;
  v21 = v39;
  if (v38 != v39)
  {
    v20 = a2;
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v6 + 40);
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 48);
      while (v8 != v7)
      {
        v9 = *(unsigned __int8 *)(v8 + 24);
        if (v9 == 9)
        {
          *(_BYTE *)(v8 + 24) = 8;
          EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::i386::GOTTableManager>::getEntryForTarget((uint64_t)v26, (uint64_t)this, *(_OWORD **)v8, v5);
LABEL_19:
          *(_QWORD *)v8 = EntryForTarget;
          goto LABEL_20;
        }
        if (v9 == 8)
        {
          if (Section)
            goto LABEL_20;
          Section = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__GOT", 6, 1);
          v9 = *(unsigned __int8 *)(v8 + 24);
        }
        if (v9 == 10)
        {
          v10 = *(_OWORD **)v8;
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 8) & 1) == 0)
          {
            *(_BYTE *)(v8 + 24) = 12;
            v36[0] = *v10;
            *(_QWORD *)&v29 = 0;
            v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v22, (uint64_t)v36, &v29, v5);
            v12 = v29;
            if (!v11)
              v12 = v22[0] + 24 * v23;
            if (v12 == v22[0] + 24 * v23)
            {
              v13 = v25;
              if (!v25)
              {
                v13 = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__STUBS", 8, 5);
                v25 = v13;
              }
              v14 = llvm::jitlink::TableManager<llvm::jitlink::i386::GOTTableManager>::getEntryForTarget((uint64_t)v24, (uint64_t)this, v10, v5);
              *(_QWORD *)&v36[0] = &llvm::jitlink::i386::PointerJumpStubContent;
              *((_QWORD *)&v36[0] + 1) = 6;
              *(_QWORD *)&v29 = 0;
              v40 = 0;
              v41[0] = 8;
              v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v13, (uint64_t *)v36, (uint64_t *)&v29, v41, &v40);
              llvm::jitlink::Block::addEdge(v15, 3, 2, v14, 0);
              v16 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v15, 0, 6, 1, 0);
              v29 = *v10;
              v30 = v16;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v22, &v29, &v30, v17, (uint64_t)v36);
              v12 = *(_QWORD *)&v36[0];
            }
            EntryForTarget = *(_QWORD *)(v12 + 16);
            goto LABEL_19;
          }
        }
LABEL_20:
        v8 += 32;
      }
      v6 += 8;
      if (v6 == v21)
      {
        v6 = v38;
        a2 = v20;
        break;
      }
    }
  }
  if (v6)
  {
    v39 = v6;
    operator delete(v6);
  }
  *a2 = 0;
  MEMORY[0x24BD1B398](v22[0], 8);
  return MEMORY[0x24BD1B398](v26[0], 8);
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::i386::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  int v7;
  uint64_t v8;
  uint64_t Section;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16[4];
  uint64_t v17;
  unint64_t v18;

  *(_OWORD *)v16 = *a3;
  *(_QWORD *)&v14 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v16, &v14, a4);
  v8 = v14;
  if (!v7)
    v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v8 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Section = *(_QWORD *)(a1 + 24);
    if (!Section)
    {
      Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__GOT", 6, 1);
      *(_QWORD *)(a1 + 24) = Section;
    }
    v16[0] = (uint64_t)&llvm::jitlink::i386::NullPointerContent;
    v16[1] = 4;
    *(_QWORD *)&v14 = 0;
    v18 = 8;
    v17 = 0;
    v10 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v16, (uint64_t *)&v14, &v18, &v17);
    llvm::jitlink::Block::addEdge(v10, 3, 0, (uint64_t)a3, 0);
    v11 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v10, 0, 4, 0, 0);
    v14 = *a3;
    v15 = v11;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v14, &v15, v12, (uint64_t)v16);
    v8 = v16[0];
  }
  return *(_QWORD *)(v8 + 16);
}

_QWORD *llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder_i386(_QWORD *a1, void *__src, size_t __len, uint64_t a4, uint64_t a5)
{
  void *__p[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *(_OWORD *)__p = *(_OWORD *)a5;
  v8 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v9 = *(_OWORD *)(a5 + 24);
  v10 = *(_QWORD *)(a5 + 40);
  llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((uint64_t)a1, a4, (uint64_t)__p, __src, __len, (uint64_t)llvm::jitlink::i386::getEdgeKindName);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  *a1 = &off_251C15CD0;
  return a1;
}

void llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_i386(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::ELFLinkGraphBuilder_i386<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t GraphBlock;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t i;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t GraphSymbol;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  __int128 v31;
  __int128 v32;
  uint64_t (**v33)(llvm::detail::format_adapter *__hidden);
  unsigned int *v34;
  _QWORD v35[2];
  uint64_t (**v36)(llvm::detail::format_adapter *__hidden);
  int v37;
  _QWORD v38[3];
  unsigned int v39;
  int v40;
  llvm::formatv_object_base *v41[4];
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  char v47;
  unsigned int *v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(unsigned int **)(a1 + 32);
    v6 = &v5[10 * v3];
    while (1)
    {
      v7 = v5[1];
      if (v7 == 4)
        break;
      if (v7 == 9)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(_QWORD **)(a1 + 24), v5[7], (uint64_t)&v48);
        if ((v49 & 1) != 0)
        {
          v25 = v48;
          *a2 = (uint64_t)v48;
        }
        else
        {
          v8 = *(_QWORD **)(a1 + 24);
          *(_QWORD *)&v31 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v8, v48, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v31, (uint64_t)&v46);
          if ((v47 & 1) != 0)
          {
            v26 = v46;
            *(_QWORD *)&v46 = 0;
            *a2 = v26;
          }
          else if ((*(_BYTE *)(a1 + 72)
                  || (v31 = v46,
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v31) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v48))
          {
            GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
            if (GraphBlock)
            {
              v10 = (_QWORD *)GraphBlock;
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(*(_QWORD **)(a1 + 24), v5, (uint64_t)&v43);
              v11 = v43;
              if ((v45 & 1) != 0)
              {
                v43 = 0;
              }
              else
              {
                if (v44)
                {
                  v12 = (unsigned __int8 *)(v43 + 4);
                  for (i = 8 * v44; i; i -= 8)
                  {
                    v14 = v48;
                    v15 = *(_DWORD *)v12;
                    v16 = *(_DWORD *)v12 >> 8;
                    v39 = v16;
                    if (v15 > 0xFF)
                    {
                      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(_QWORD **)(a1 + 24), *(unsigned int **)(a1 + 48), v16, (uint64_t)&v50);
                      if ((v51 & 1) != 0)
                      {
                        v20 = v50;
                        v50 = 0;
                        *a2 = v20;
                        goto LABEL_31;
                      }
                    }
                    else
                    {
                      v51 = 0;
                      v50 = 0;
                    }
                    GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v16);
                    if (GraphSymbol)
                    {
                      v40 = *v12;
                      v18 = 2;
                      switch(v40)
                      {
                        case 0:
                          goto LABEL_29;
                        case 1:
                          v18 = 3;
                          goto LABEL_29;
                        case 2:
                          v18 = 4;
                          goto LABEL_29;
                        case 3:
                          v18 = 9;
                          goto LABEL_29;
                        case 4:
                          v18 = 10;
                          goto LABEL_29;
                        case 9:
                          v18 = 8;
                          goto LABEL_29;
                        case 10:
                          v22 = *((unsigned int *)v12 - 1) + (unint64_t)v14[3] - *v10;
                          v23 = *(unsigned int *)(v10[3] + v22);
                          v18 = 7;
                          goto LABEL_30;
                        case 20:
                          v18 = 5;
                          goto LABEL_29;
                        case 21:
                          v18 = 6;
LABEL_29:
                          v23 = 0;
                          v22 = *((unsigned int *)v12 - 1) + (unint64_t)v14[3] - *v10;
LABEL_30:
                          *(_QWORD *)&v31 = GraphSymbol;
                          DWORD2(v31) = v22;
                          *(_QWORD *)&v32 = v23;
                          BYTE8(v32) = v18;
                          llvm::jitlink::Block::addEdge(v10, &v31);
                          *a2 = 0;
                          break;
                        default:
                          *(_QWORD *)&v31 = "{0:d}";
                          *((_QWORD *)&v31 + 1) = 5;
                          *(_QWORD *)&v32 = v35;
                          *((_QWORD *)&v32 + 1) = 1;
                          v33 = &off_251C12BB8;
                          v34 = (unsigned int *)&v40;
                          v35[0] = &v33;
                          v21 = operator new();
                          v41[0] = (llvm::formatv_object_base *)"Unsupported i386 relocation:";
                          v41[2] = (llvm::formatv_object_base *)&v31;
                          v42 = 1539;
                          *(_QWORD *)v21 = off_251C15728;
                          llvm::Twine::str(v41, (std::string *)(v21 + 8));
                          *a2 = v21;
                          break;
                      }
                    }
                    else
                    {
                      v19 = *(_DWORD *)(a1 + 112);
                      *(_QWORD *)&v31 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {"
                                        "0}, shndx: {1} Size of table: {2}";
                      *((_QWORD *)&v31 + 1) = 113;
                      *(_QWORD *)&v32 = v38;
                      *((_QWORD *)&v32 + 1) = 3;
                      v33 = &off_251C158D8;
                      v34 = &v39;
                      v35[0] = &off_251C15AB8;
                      v35[1] = v50 + 14;
                      v36 = &off_251C15650;
                      v37 = v19;
                      v38[0] = &v33;
                      v38[1] = v35;
                      v38[2] = &v36;
                      getErrorErrorCat();
                      v41[0] = (llvm::formatv_object_base *)3;
                      v41[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
                      llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v31, (uint64_t *)v41, a2);
                    }
LABEL_31:
                    if ((v51 & 1) != 0)
                    {
                      v24 = v50;
                      v50 = 0;
                      if (v24)
                        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                    }
                    if (*a2)
                      goto LABEL_45;
                    v12 += 8;
                  }
                }
                v11 = 0;
              }
              *a2 = v11;
LABEL_45:
              if ((v45 & 1) != 0)
              {
                v28 = v43;
                v43 = 0;
                if (v28)
                  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
              }
            }
            else
            {
              LOWORD(v33) = 1283;
              *(_QWORD *)&v31 = "Refencing a section that wasn't added to the graph: ";
              v32 = v46;
              getErrorErrorCat();
              v27 = operator new();
              *(_QWORD *)v27 = off_251C127D0;
              llvm::Twine::str((llvm::formatv_object_base **)&v31, (std::string *)(v27 + 8));
              *(_QWORD *)(v27 + 32) = 3;
              *(_QWORD *)(v27 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
              *(_BYTE *)(v27 + 48) = 1;
              *a2 = v27;
            }
          }
          else
          {
            *a2 = 0;
          }
          if ((v47 & 1) != 0)
          {
            v29 = v46;
            *(_QWORD *)&v46 = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          }
          if ((v49 & 1) != 0)
          {
            v30 = v48;
            v48 = 0;
            if (v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
          }
          v25 = (unsigned int *)*a2;
        }
        if (v25)
          return;
      }
      else
      {
        *a2 = 0;
      }
      v5 += 10;
      if (v5 == v6)
        goto LABEL_57;
    }
    getErrorErrorCat();
    *(_QWORD *)&v31 = 3;
    *((_QWORD *)&v31 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"No SHT_RELA in valid i386 ELF object files", (uint64_t *)&v31, a2);
  }
  else
  {
LABEL_57:
    *a2 = 0;
  }
}

void llvm::jitlink::ELFJITLinker_i386::~ELFJITLinker_i386(llvm::jitlink::ELFJITLinker_i386 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_i386>::fixUpBlocks(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  size_t v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  __int128 v31;
  const char *EdgeKindName;
  llvm::formatv_object_base *v33;
  llvm::formatv_object_base *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  int v39;
  std::string v41;
  void *__p[2];
  std::string::size_type v43;
  _QWORD v44[2];
  __int128 v45;
  __int16 v46;
  _QWORD v47[4];
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  llvm::formatv_object_base *v53[4];
  __int16 v54;
  int v55;
  __int16 v56;

  if (*(_DWORD *)(a2 + 192))
  {
    v4 = *(unsigned int *)(a2 + 200);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD **)(a2 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5)
          goto LABEL_52;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a2 + 184);
    }
    v7 = *(_QWORD *)(a2 + 184) + 24 * v4;
    if (v6 != (_QWORD *)v7)
    {
      v36 = (_QWORD *)v7;
      do
      {
        v8 = v6[2];
        v39 = *(_DWORD *)(v8 + 20);
        v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
        v38 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
        if ((uint64_t **)v38 != v9)
        {
          v11 = v9;
          v12 = v10;
          do
          {
            v13 = *v11;
            if (v39 == 2 && (v13[1] & 4) == 0)
            {
              v15 = (const void *)v13[3];
              v14 = v13[4];
              v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v14, 0);
              v17 = (uint64_t)v16;
              if (v14)
                memmove(v16, v15, v14);
              v13[3] = v17;
              v13[4] = v14;
              v13[1] |= 4uLL;
            }
            v19 = v13[5];
            v18 = v13[6];
            while (v19 != v18)
            {
              v20 = *(unsigned __int8 *)(v19 + 24);
              v21 = v20 - 2;
              if (v20 >= 2)
              {
                v22 = v13[3];
                v23 = *(unsigned int *)(v19 + 8);
                v24 = *v13 + v23;
                switch(v21)
                {
                  case 0u:
                    goto LABEL_31;
                  case 1u:
                    v26 = **(_DWORD **)(*(_QWORD *)v19 + 16);
                    v27 = *(_DWORD *)(*(_QWORD *)v19 + 24) + *(_DWORD *)(v19 + 16);
                    goto LABEL_28;
                  case 2u:
                  case 8u:
                  case 9u:
                  case 0xAu:
                    v25 = **(_DWORD **)(*(_QWORD *)v19 + 16)
                        - v24
                        + *(_DWORD *)(*(_QWORD *)v19 + 24)
                        + *(_DWORD *)(v19 + 16)
                        - 4;
                    goto LABEL_30;
                  case 3u:
                    v28 = (*(_QWORD *)(*(_QWORD *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *(_QWORD *)(v19 + 16)
                        + **(_QWORD **)(*(_QWORD *)v19 + 16);
                    if (((*(_DWORD *)(*(_QWORD *)v19 + 24)
                         + *(_DWORD *)(v19 + 16)
                         + **(_DWORD **)(*(_QWORD *)v19 + 16)) & 0xFFFF0000) == 0)
                      goto LABEL_24;
                    goto LABEL_26;
                  case 4u:
                    v28 = **(_QWORD **)(*(_QWORD *)v19 + 16)
                        - v24
                        + (*(_QWORD *)(*(_QWORD *)v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + *(_QWORD *)(v19 + 16)
                        - 4;
                    if ((_DWORD)v28 == (__int16)v28)
                    {
LABEL_24:
                      *(_WORD *)(v22 + v23) = v28;
LABEL_31:
                      *a3 = 0;
                    }
                    else
                    {
LABEL_26:
                      llvm::jitlink::makeTargetOutOfRangeError(a2, v13, v19, a3);
LABEL_40:
                      if (*a3)
                        return;
                    }
                    break;
                  case 5u:
                    v27 = **(_DWORD **)(*(_QWORD *)v19 + 16) - v24;
                    v26 = *(_DWORD *)(*(_QWORD *)v19 + 24) + *(_DWORD *)(v19 + 16);
LABEL_28:
                    v25 = v27 + v26;
                    goto LABEL_30;
                  case 6u:
                    v25 = *(_DWORD *)(*(_QWORD *)v19 + 24)
                        + **(_DWORD **)(*(_QWORD *)v19 + 16)
                        - (**(_DWORD **)(*(_QWORD *)(a1 + 152) + 16)
                         + *(_DWORD *)(*(_QWORD *)(a1 + 152) + 24))
                        + *(_DWORD *)(v19 + 16);
LABEL_30:
                    *(_DWORD *)(v22 + v23) = v25;
                    goto LABEL_31;
                  default:
                    std::operator+<char>();
                    v29 = std::string::append(&v41, ", section ");
                    v30 = v29->__r_.__value_.__r.__words[2];
                    *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                    v43 = v30;
                    v29->__r_.__value_.__l.__size_ = 0;
                    v29->__r_.__value_.__r.__words[2] = 0;
                    v29->__r_.__value_.__r.__words[0] = 0;
                    v31 = *(_OWORD *)v13[2];
                    v44[0] = __p;
                    v45 = v31;
                    v46 = 1284;
                    v47[0] = v44;
                    v47[2] = " unsupported edge kind ";
                    v48 = 770;
                    EdgeKindName = llvm::jitlink::i386::getEdgeKindName((llvm::jitlink::i386 *)*(unsigned __int8 *)(v19 + 24));
                    if (*EdgeKindName)
                    {
                      v33 = (llvm::formatv_object_base *)EdgeKindName;
                      v34 = (llvm::formatv_object_base *)v47;
                    }
                    else
                    {
                      v34 = (llvm::formatv_object_base *)v44;
                      v51 = v49;
                      v52 = v50;
                      v33 = (llvm::formatv_object_base *)" unsupported edge kind ";
                    }
                    v35 = operator new();
                    v53[0] = v34;
                    v53[2] = v33;
                    v54 = 770;
                    v55 = v51;
                    v56 = v52;
                    *(_QWORD *)v35 = off_251C15728;
                    llvm::Twine::str(v53, (std::string *)(v35 + 8));
                    *a3 = v35;
                    if (SHIBYTE(v43) < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v41.__r_.__value_.__l.__data_);
                    goto LABEL_40;
                }
              }
              v19 += 32;
            }
            while (++v11 != v12)
            {
              if (((unint64_t)*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_46;
            }
            v11 = v12;
LABEL_46:
            ;
          }
          while (v11 != (uint64_t **)v38);
        }
        for (v6 += 3; ; v6 += 3)
        {
          if (v6 == v36)
            goto LABEL_52;
          if (*v6 < 0xFFFFFFFFFFFFFFFELL)
            break;
        }
      }
      while (v6 != v36);
    }
  }
LABEL_52:
  *a3 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_i386>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::ELFJITLinker_i386::ELFJITLinker_i386(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17;
  unint64_t *SectionByName;
  unint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37[2];
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  unint64_t *v44;
  __int128 v45;
  _QWORD v46[3];

  v5 = *a1;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v39 = a2;
  v40 = v5;
  v6 = a2 + 208;
  v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  v9 = v8;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224));
  std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(&v41, v7, v9, v10, (uint64_t)v10);
  v12 = v41;
  v13 = v42;
  if (v41 != v42)
  {
    v35 = v5;
    v36 = a3;
    do
    {
      v14 = *(_QWORD **)v12;
      if (*(_QWORD *)(*(_QWORD *)v12 + 8) == 21)
      {
        v15 = *(_QWORD *)*v14 == 0x5F4C41424F4C475FLL && *(_QWORD *)(*v14 + 8) == 0x545F54455346464FLL;
        if (v15 && *(_QWORD *)(*v14 + 13) == 0x5F454C4241545F54)
        {
          v17 = v40;
          SectionByName = (unint64_t *)llvm::jitlink::LinkGraph::findSectionByName(v39, (uint64_t)"$__GOT", 6, v11);
          if (SectionByName)
          {
            v19 = SectionByName;
            *(_QWORD *)(v17 + 152) = v14;
            v44 = SectionByName;
            v46[0] = 0;
            v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(v37, &v44, v46);
            v21 = v46[0];
            if (!v20)
              v21 = v37[0] + 24 * v38;
            if (v21 == v37[0] + 24 * v38)
            {
              llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v43, (uint64_t)v19);
              v44 = v19;
              v45 = v43;
              llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>((uint64_t)v37, &v44, &v45, (uint64_t)v46);
              v21 = v46[0];
            }
            v22 = *(_QWORD *)(v21 + 8);
            if (v22)
              llvm::jitlink::LinkGraph::makeDefined(a2, v14, v22, 0, 0, 0, 2, 0);
            else
              llvm::jitlink::LinkGraph::makeAbsolute(a2, (uint64_t)v14, 0);
          }
        }
      }
      v12 += 8;
    }
    while (v12 != v13);
    v12 = v41;
    v5 = v35;
    a3 = v36;
  }
  if (v12)
  {
    v42 = v12;
    operator delete(v12);
  }
  if (!*(_QWORD *)(v5 + 152))
  {
    v23 = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"$__GOT", 6, v11);
    if (v23)
    {
      v24 = v23;
      v25 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v23 + 56);
      v27 = *(_QWORD *)(v24 + 56) + 8 * *(unsigned int *)(v24 + 72);
      if ((_QWORD *)v27 == v25)
      {
LABEL_39:
        llvm::jitlink::SectionRange::SectionRange(&v44, v24);
        v31 = v44;
        if (v44)
        {
          v32 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
          *(_QWORD *)v32 = "_GLOBAL_OFFSET_TABLE_";
          *(_QWORD *)(v32 + 8) = 21;
          *(_QWORD *)(v32 + 16) = v31;
          *(_OWORD *)(v32 + 24) = xmmword_24AA2DF30;
          v33 = v31[2] + 56;
          v41 = (char *)v32;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v41, (uint64_t)v46);
        }
        else
        {
          v32 = (unint64_t)llvm::jitlink::LinkGraph::addAbsoluteSymbol(a2, (uint64_t)"_GLOBAL_OFFSET_TABLE_", 21, 0, 0, 0, 2, 1);
        }
        *(_QWORD *)(v5 + 152) = v32;
      }
      else
      {
        while (1)
        {
          v28 = *v25;
          if (*(_QWORD *)(*v25 + 8) == 21)
          {
            v29 = **(_QWORD **)v28 == 0x5F4C41424F4C475FLL && *(_QWORD *)(*(_QWORD *)v28 + 8) == 0x545F54455346464FLL;
            if (v29 && *(_QWORD *)(*(_QWORD *)v28 + 13) == 0x5F454C4241545F54)
              break;
          }
          while (++v25 != v26)
          {
            if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_38;
          }
          v25 = v26;
LABEL_38:
          if (v25 == (_QWORD *)v27)
            goto LABEL_39;
        }
        *(_QWORD *)(v5 + 152) = v28;
      }
    }
  }
  *a3 = 0;
  return MEMORY[0x24BD1B398](v37[0], 8);
}

uint64_t llvm::jitlink::LinkGraph::makeAbsolute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[3];

  v6 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v6 + 8) & 3) != 0)
  {
    v7 = *(_QWORD *)(v6 + 16) + 56;
    v15[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v7, v15);
    v8 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
    v9 = v8[1] & 0xFFFFFFFFFFFFFFFCLL | 2;
    *v8 = a3;
    v8[1] = v9;
    v10 = *(_QWORD *)(a2 + 24) & 0xFE00000000000000;
    *(_QWORD *)(a2 + 16) = v8;
  }
  else
  {
    v15[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(a1 + 208, v15);
    v11 = *(_QWORD **)(a2 + 16);
    v12 = v11[1] | 2;
    *v11 = a3;
    v11[1] = v12;
    v10 = *(_QWORD *)(a2 + 24) & 0xF3FFFFFFFFFFFFFFLL | 0x800000000000000;
  }
  *(_QWORD *)(a2 + 24) = v10;
  v14 = a2;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 232, &v14, (uint64_t)v15);
}

_QWORD *std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a4)
  {
    v6 = 0;
    v7 = a2;
    while (1)
    {
      if (++v7 == a3)
      {
        v7 = a3;
LABEL_7:
        ++v6;
        if (v7 == a4)
          goto LABEL_10;
      }
      else if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_7;
      }
    }
  }
  v6 = 0;
LABEL_10:
  std::vector<llvm::jitlink::Symbol *>::__init_with_size[abi:nn180100]<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(a1, a2, a3, a4, a5, v6);
  return a1;
}

_QWORD *std::vector<llvm::jitlink::Symbol *>::__init_with_size[abi:nn180100]<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;

  if (a6)
  {
    v9 = (uint64_t)result;
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](result, a6);
    return (_QWORD *)std::vector<llvm::jitlink::Symbol *>::__construct_at_end<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(v9, a2, a3, a4);
  }
  return result;
}

uint64_t std::vector<llvm::jitlink::Symbol *>::__construct_at_end<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(result + 8);
  while (a2 != a4)
  {
    v5 = *a2++;
    *v4 = v5;
    while (a2 != a3)
    {
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_8;
      ++a2;
    }
    a2 = a3;
LABEL_8:
    ++v4;
  }
  *(_QWORD *)(result + 8) = v4;
  return result;
}

llvm::object::ObjectFile *llvm::jitlink::createLinkGraphFromELFObject_loongarch@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  llvm::object::ObjectFile *v4;
  void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  llvm::jitlink::LinkGraph *v9;
  void *v10;
  void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  llvm::jitlink::LinkGraph *v15;
  llvm::object::ObjectFile *result;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (**v25)();
  llvm::jitlink::LinkGraph *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30[2];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  llvm::object::ObjectFile *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v30[0] = *a1;
  v30[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v30, 1, (uint64_t)&v35);
  v4 = v35;
  if ((v36 & 1) != 0)
  {
    v35 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(llvm::object::ObjectFile *))(*(_QWORD *)v35 + 392))(v35) == 14)
  {
    v5 = (void *)*((_QWORD *)v35 + 4);
    v6 = *((_QWORD *)v35 + 5);
    v7 = (char *)v35 + 56;
    llvm::object::ObjectFile::makeTriple(v35, (llvm::Triple *)&v21);
    v31 = v21;
    v8 = v22;
    v21 = 0uLL;
    v22 = 0;
    v33 = v23;
    v32 = v8;
    v34 = v24;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((uint64_t)&v25, (uint64_t)v7, (uint64_t)&v31, v5, v6, (uint64_t)llvm::jitlink::loongarch::getEdgeKindName);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    v25 = (void (**)())&off_251C15D60;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::buildGraph((uint64_t)&v25, a2);
    v25 = off_251C15C00;
    MEMORY[0x24BD1B398](v29, 8);
    MEMORY[0x24BD1B398](v28, 8);
    MEMORY[0x24BD1B398](v27, 8);
    v9 = v26;
    v25 = (void (**)())&off_251C159D8;
    v26 = 0;
    if (v9)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v9);
      MEMORY[0x24BD1B3A4]();
    }
    if (SHIBYTE(v22) < 0)
    {
      v10 = (void *)v21;
LABEL_16:
      operator delete(v10);
    }
  }
  else
  {
    v11 = (void *)*((_QWORD *)v35 + 4);
    v12 = *((_QWORD *)v35 + 5);
    v13 = (char *)v35 + 56;
    llvm::object::ObjectFile::makeTriple(v35, (llvm::Triple *)__p);
    v31 = *(_OWORD *)__p;
    v14 = v18;
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    v33 = v19;
    v32 = v14;
    v34 = v20;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((uint64_t)&v25, (uint64_t)v13, (uint64_t)&v31, v11, v12, (uint64_t)llvm::jitlink::loongarch::getEdgeKindName);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    v25 = (void (**)())&off_251C15DA0;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::buildGraph((uint64_t)&v25, a2);
    v25 = off_251C159F8;
    MEMORY[0x24BD1B398](v29, 8);
    MEMORY[0x24BD1B398](v28, 8);
    MEMORY[0x24BD1B398](v27, 8);
    v15 = v26;
    v25 = (void (**)())&off_251C159D8;
    v26 = 0;
    if (v15)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v15);
      MEMORY[0x24BD1B3A4]();
    }
    if (SHIBYTE(v18) < 0)
    {
      v10 = __p[0];
      goto LABEL_16;
    }
  }
LABEL_17:
  result = v35;
  v35 = 0;
  if (result)
    return (llvm::object::ObjectFile *)(*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15C00;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

uint64_t `anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_loongarch(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  int64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  llvm::jitlink::LinkGraph *v68;
  uint64_t v69;
  int64x2_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  llvm::jitlink::LinkGraph *v80;
  uint64_t v81;
  uint64_t v82;
  int64x2_t v83;
  _OWORD v84[2];
  __int128 v85;
  _OWORD v86[2];
  __int128 v87;
  uint64_t v88;
  _BYTE v89[24];
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  llvm::jitlink::LinkGraph *v98;
  uint64_t v99;
  __int128 v100;
  char *v101;
  const char *v102;
  __int128 v103;
  _QWORD v104[3];
  _QWORD v105[3];
  _QWORD v106[3];
  _QWORD v107[6];

  v107[3] = *MEMORY[0x24BDAC8D0];
  v88 = 0;
  v87 = 0u;
  v85 = 0u;
  memset(v86, 0, sizeof(v86));
  memset(v84, 0, sizeof(v84));
  v83 = 0u;
  v4 = (uint64_t)*a1 + 120;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, v4))
  {
    v102 = ".eh_frame";
    *(_QWORD *)&v103 = 9;
    v104[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
            + 2;
    *((_QWORD *)&v90 + 1) = v84;
    *(_QWORD *)v89 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v84, 1uLL);
    *(_QWORD *)&v89[8] = *(_QWORD *)v89;
    *(_QWORD *)&v90 = *(_QWORD *)v89 + 32 * v5;
    v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)v89, (__int128 *)&v102)+ 32;
    *(_QWORD *)&v89[16] = v6;
    v7 = (__int128 *)v83.i64[1];
    v8 = *(_QWORD *)&v89[8];
    if (v83.i64[1] == v83.i64[0])
    {
      v9 = vdupq_n_s64(v83.u64[1]);
    }
    else
    {
      do
      {
        v7 -= 2;
        v8 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v8 - 32, v7);
      }
      while (v7 != (__int128 *)v83.i64[0]);
      v9 = v83;
      v6 = *(_QWORD *)&v89[16];
    }
    v83.i64[0] = v8;
    *(int64x2_t *)&v89[8] = v9;
    v10 = *(_QWORD *)&v84[0];
    *(_QWORD *)&v84[0] = v90;
    *(_QWORD *)&v90 = v10;
    *(_QWORD *)v89 = v9.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v89);
    v83.i64[1] = v6;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v102);
    v11 = *((_DWORD *)*a1 + 42);
    v104[0] = 0;
    v12 = operator new(0x20uLL, (std::align_val_t)8uLL);
    v103 = xmmword_24AA2ACD0;
    *v12 = ".eh_frame";
    v12[1] = 9;
    *((_DWORD *)v12 + 4) = v11;
    *((_DWORD *)v12 + 5) = 117768707;
    *((_BYTE *)v12 + 24) = 6;
    v102 = (const char *)v12;
    v104[0] = &llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v83.i64[1] >= *(_QWORD *)&v84[0])
    {
      v14 = (v83.i64[1] - v83.i64[0]) >> 5;
      if ((unint64_t)(v14 + 1) >> 59)
        goto LABEL_102;
      v15 = (*(_QWORD *)&v84[0] - v83.i64[0]) >> 4;
      if (v15 <= v14 + 1)
        v15 = v14 + 1;
      if (*(_QWORD *)&v84[0] - v83.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      *((_QWORD *)&v90 + 1) = v84;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v84, v16);
      else
        v17 = 0;
      v18 = (uint64_t)&v17[32 * v14];
      *(_QWORD *)v89 = v17;
      *(_QWORD *)&v89[8] = v18;
      *(_QWORD *)&v90 = &v17[32 * v16];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18, (__int128 *)&v102);
      v13 = v18 + 32;
      *(_QWORD *)&v89[16] = v18 + 32;
      v19 = (__int128 *)v83.i64[1];
      v20 = *(_QWORD *)&v89[8];
      if (v83.i64[1] == v83.i64[0])
      {
        v21 = vdupq_n_s64(v83.u64[1]);
      }
      else
      {
        do
        {
          v19 -= 2;
          v20 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v20 - 32, v19);
        }
        while (v19 != (__int128 *)v83.i64[0]);
        v21 = v83;
        v13 = *(_QWORD *)&v89[16];
      }
      v83.i64[0] = v20;
      v83.i64[1] = v13;
      *(int64x2_t *)&v89[8] = v21;
      v22 = *(_QWORD *)&v84[0];
      *(_QWORD *)&v84[0] = v90;
      *(_QWORD *)&v90 = v22;
      *(_QWORD *)v89 = v21.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v89);
    }
    else
    {
      v13 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v83.i64[1], (__int128 *)&v102)+ 32;
    }
    v83.i64[1] = v13;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v102);
    v102 = ".eh_frame";
    *(_QWORD *)&v103 = 9;
    v104[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameNullTerminator,llvm::jitlink::EHFrameNullTerminator,void>::Callbacks
            + 2;
    if (v13 >= *(_QWORD *)&v84[0])
    {
      v24 = (v83.i64[1] - v83.i64[0]) >> 5;
      if ((unint64_t)(v24 + 1) >> 59)
        goto LABEL_102;
      v25 = (*(_QWORD *)&v84[0] - v83.i64[0]) >> 4;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if (*(_QWORD *)&v84[0] - v83.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v26 = 0x7FFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      *((_QWORD *)&v90 + 1) = v84;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v84, v26);
      else
        v27 = 0;
      v28 = (uint64_t)&v27[32 * v24];
      *(_QWORD *)v89 = v27;
      *(_QWORD *)&v89[8] = v28;
      *(_QWORD *)&v90 = &v27[32 * v26];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28, (__int128 *)&v102);
      v23 = v28 + 32;
      *(_QWORD *)&v89[16] = v28 + 32;
      v29 = (__int128 *)v83.i64[1];
      v30 = *(_QWORD *)&v89[8];
      if (v83.i64[1] == v83.i64[0])
      {
        v31 = vdupq_n_s64(v83.u64[1]);
      }
      else
      {
        do
        {
          v29 -= 2;
          v30 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30 - 32, v29);
        }
        while (v29 != (__int128 *)v83.i64[0]);
        v31 = v83;
        v23 = *(_QWORD *)&v89[16];
      }
      v83.i64[0] = v30;
      v83.i64[1] = v23;
      *(int64x2_t *)&v89[8] = v31;
      v32 = *(_QWORD *)&v84[0];
      *(_QWORD *)&v84[0] = v90;
      *(_QWORD *)&v90 = v32;
      *(_QWORD *)v89 = v31.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v89);
    }
    else
    {
      v23 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v13, (__int128 *)&v102)+ 32;
    }
    v83.i64[1] = v23;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v102);
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v102, *a2, v4);
    if (v104[0] < 8uLL)
    {
      *(_QWORD *)&v100 = llvm::jitlink::markAllSymbolsLive;
      v101 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v83.i64[1] >= *(_QWORD *)&v84[0])
      {
        v39 = (v83.i64[1] - v83.i64[0]) >> 5;
        if ((unint64_t)(v39 + 1) >> 59)
          goto LABEL_102;
        v40 = (*(_QWORD *)&v84[0] - v83.i64[0]) >> 4;
        if (v40 <= v39 + 1)
          v40 = v39 + 1;
        if (*(_QWORD *)&v84[0] - v83.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v41 = 0x7FFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        *((_QWORD *)&v90 + 1) = v84;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v84, v41);
        else
          v42 = 0;
        v47 = (uint64_t)&v42[32 * v39];
        *(_QWORD *)v89 = v42;
        *(_QWORD *)&v89[8] = v47;
        *(_QWORD *)&v90 = &v42[32 * v41];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v47, &v100);
        v34 = v47 + 32;
        *(_QWORD *)&v89[16] = v47 + 32;
        v48 = (__int128 *)v83.i64[1];
        v49 = *(_QWORD *)&v89[8];
        if (v83.i64[1] == v83.i64[0])
        {
          v50 = vdupq_n_s64(v83.u64[1]);
        }
        else
        {
          do
          {
            v48 -= 2;
            v49 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v49 - 32, v48);
          }
          while (v48 != (__int128 *)v83.i64[0]);
          v50 = v83;
          v34 = *(_QWORD *)&v89[16];
        }
        v83.i64[0] = v49;
        v83.i64[1] = v34;
        *(int64x2_t *)&v89[8] = v50;
        v52 = *(_QWORD *)&v84[0];
        *(_QWORD *)&v84[0] = v90;
        *(_QWORD *)&v90 = v52;
        *(_QWORD *)v89 = v50.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v89);
      }
      else
      {
        v34 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v83.i64[1], &v100)+ 32;
      }
      v83.i64[1] = v34;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v100);
    }
    else
    {
      if (v83.i64[1] >= *(_QWORD *)&v84[0])
      {
        v35 = (v83.i64[1] - v83.i64[0]) >> 5;
        if ((unint64_t)(v35 + 1) >> 59)
          goto LABEL_102;
        v36 = (*(_QWORD *)&v84[0] - v83.i64[0]) >> 4;
        if (v36 <= v35 + 1)
          v36 = v35 + 1;
        if (*(_QWORD *)&v84[0] - v83.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v37 = 0x7FFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        *((_QWORD *)&v90 + 1) = v84;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v84, v37);
        else
          v38 = 0;
        v43 = (uint64_t)&v38[32 * v35];
        *(_QWORD *)v89 = v38;
        *(_QWORD *)&v89[8] = v43;
        *(_QWORD *)&v90 = &v38[32 * v37];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v43, (__int128 *)&v102);
        v33 = v43 + 32;
        *(_QWORD *)&v89[16] = v43 + 32;
        v44 = (__int128 *)v83.i64[1];
        v45 = *(_QWORD *)&v89[8];
        if (v83.i64[1] == v83.i64[0])
        {
          v46 = vdupq_n_s64(v83.u64[1]);
        }
        else
        {
          do
          {
            v44 -= 2;
            v45 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v45 - 32, v44);
          }
          while (v44 != (__int128 *)v83.i64[0]);
          v46 = v83;
          v33 = *(_QWORD *)&v89[16];
        }
        v83.i64[0] = v45;
        v83.i64[1] = v33;
        *(int64x2_t *)&v89[8] = v46;
        v51 = *(_QWORD *)&v84[0];
        *(_QWORD *)&v84[0] = v90;
        *(_QWORD *)&v90 = v51;
        *(_QWORD *)v89 = v46.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v89);
      }
      else
      {
        v33 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v83.i64[1], (__int128 *)&v102)+ 32;
      }
      v83.i64[1] = v33;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v102);
    v104[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v84[1] < *((_QWORD *)&v84[1] + 1))
    {
      v53 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v84[1], (__int128 *)&v102)+ 32;
LABEL_89:
      *(_QWORD *)&v84[1] = v53;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v102);
      goto LABEL_90;
    }
    v54 = (uint64_t)(*(_QWORD *)&v84[1] - *((_QWORD *)&v84[0] + 1)) >> 5;
    if (!((unint64_t)(v54 + 1) >> 59))
    {
      v55 = (uint64_t)(*((_QWORD *)&v84[1] + 1) - *((_QWORD *)&v84[0] + 1)) >> 4;
      if (v55 <= v54 + 1)
        v55 = v54 + 1;
      if (*((_QWORD *)&v84[1] + 1) - *((_QWORD *)&v84[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v56 = 0x7FFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      *((_QWORD *)&v90 + 1) = (char *)&v84[1] + 8;
      if (v56)
        v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v84[1] + 8, v56);
      else
        v57 = 0;
      v58 = (uint64_t)&v57[32 * v54];
      *(_QWORD *)v89 = v57;
      *(_QWORD *)&v89[8] = v58;
      *(_QWORD *)&v90 = &v57[32 * v56];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v58, (__int128 *)&v102);
      v53 = v58 + 32;
      *(_QWORD *)&v89[16] = v58 + 32;
      v60 = (__int128 *)*((_QWORD *)&v84[0] + 1);
      v59 = *(__int128 **)&v84[1];
      v61 = *(_QWORD *)&v89[8];
      if (*(_QWORD *)&v84[1] == *((_QWORD *)&v84[0] + 1))
      {
        v62 = vdupq_n_s64(*(unint64_t *)&v84[1]);
      }
      else
      {
        do
        {
          v59 -= 2;
          v61 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v61 - 32, v59);
        }
        while (v59 != v60);
        v62 = *(int64x2_t *)((char *)v84 + 8);
        v53 = *(_QWORD *)&v89[16];
      }
      *((_QWORD *)&v84[0] + 1) = v61;
      *(_QWORD *)&v84[1] = v53;
      *(int64x2_t *)&v89[8] = v62;
      v63 = *((_QWORD *)&v84[1] + 1);
      *((_QWORD *)&v84[1] + 1) = v90;
      *(_QWORD *)&v90 = v63;
      *(_QWORD *)v89 = v62.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v89);
      goto LABEL_89;
    }
LABEL_102:
    abort();
  }
LABEL_90:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v89, *a2, *a1, &v83);
  if (*(_QWORD *)v89)
  {
    v64 = *a2;
    v82 = *(_QWORD *)v89;
    *(_QWORD *)v89 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v64 + 24))(v64, &v82);
    if (v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
    v65 = *(_QWORD *)v89;
    if (*(_QWORD *)v89)
LABEL_94:
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  else
  {
    v66 = (_QWORD *)operator new();
    v67 = *a2;
    *a2 = 0;
    v68 = *a1;
    *a1 = 0;
    v69 = *(_QWORD *)&v84[0];
    v70 = v83;
    v83 = 0uLL;
    v71 = *((_QWORD *)&v84[1] + 1);
    v72 = *(_OWORD *)((char *)v84 + 8);
    memset(v84, 0, sizeof(v84));
    v73 = *(_QWORD *)&v86[0];
    v74 = v85;
    v85 = 0uLL;
    v75 = *((_QWORD *)&v86[1] + 1);
    v76 = *(_OWORD *)((char *)v86 + 8);
    memset(v86, 0, sizeof(v86));
    v77 = v88;
    v78 = v87;
    v87 = 0uLL;
    v88 = 0;
    v98 = v68;
    v99 = v67;
    *(int64x2_t *)v89 = v70;
    v102 = 0;
    v103 = 0uLL;
    v90 = v72;
    *(_QWORD *)&v89[16] = v69;
    v91 = v71;
    memset(v104, 0, sizeof(v104));
    v92 = v74;
    memset(v105, 0, sizeof(v105));
    v94 = v76;
    v93 = v73;
    v95 = v75;
    memset(v106, 0, sizeof(v106));
    v96 = v78;
    v97 = v77;
    memset(v107, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v66, &v99, (uint64_t *)&v98, (uint64_t)v89);
    *v79 = &off_251C15E08;
    *(_QWORD *)&v100 = &v96;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v100);
    *(_QWORD *)&v100 = &v94;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v100);
    *(_QWORD *)&v100 = &v92;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v100);
    *(_QWORD *)&v100 = &v90;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v100);
    *(_QWORD *)&v100 = v89;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v100);
    v80 = v98;
    v98 = 0;
    if (v80)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v80);
      MEMORY[0x24BD1B3A4]();
    }
    v81 = v99;
    v99 = 0;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    *v66 = &off_251C15DE0;
    *(_QWORD *)v89 = v107;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
    *(_QWORD *)v89 = v106;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
    *(_QWORD *)v89 = v105;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
    *(_QWORD *)v89 = v104;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
    *(_QWORD *)v89 = &v102;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
    *(_QWORD *)v89 = v66;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v66, (uint64_t *)v89);
    v65 = *(_QWORD *)v89;
    *(_QWORD *)v89 = 0;
    if (v65)
      goto LABEL_94;
  }
  *(_QWORD *)v89 = &v87;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
  *(_QWORD *)v89 = (char *)v86 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
  *(_QWORD *)v89 = &v85;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
  *(_QWORD *)v89 = (char *)v84 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
  *(_QWORD *)v89 = &v83;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v89);
}

uint64_t `anonymous namespace'::buildTables_ELF_loongarch@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v5;
  char *v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  char v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t Section;
  uint64_t EntryForTarget;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24[2];
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];
  _OWORD v38[8];
  _OWORD v39[4];
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43[3];

  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v26 = v28;
  v27 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v38);
  v39[0] = v38[0];
  v39[1] = v38[1];
  v39[2] = v38[2];
  v39[3] = v38[3];
  llvm::jitlink::LinkGraph::blocks(this, &v31);
  v37[0] = v33;
  v37[1] = v34;
  v37[2] = v35;
  v37[3] = v36;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v40, v39, (uint64_t *)v37);
  v6 = v40;
  v7 = v41;
  if (v40 != v41)
  {
    v23 = a2;
    while (1)
    {
      v9 = *(unsigned __int8 **)(*(_QWORD *)v6 + 40);
      v8 = *(unsigned __int8 **)(*(_QWORD *)v6 + 48);
      while (v9 != v8)
      {
        v10 = v9[24];
        if (v10 == 4)
        {
          v12 = *(_OWORD **)v9;
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 8) & 1) != 0)
            goto LABEL_23;
          v38[0] = *v12;
          *(_QWORD *)&v31 = 0;
          v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v24, (uint64_t)v38, &v31, v5);
          v14 = v31;
          if (!v13)
            v14 = v24[0] + 24 * v25;
          if (v14 == v24[0] + 24 * v25)
          {
            Section = v27;
            if (!v27)
            {
              Section = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__STUBS", 8, 5);
              v27 = Section;
            }
            EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::loongarch::GOTTableManager>::getEntryForTarget((uint64_t)v26, (uint64_t)this, v12, v5);
            if (*((_DWORD *)this + 42) == 8)
              v17 = &llvm::jitlink::loongarch::LA64StubContent;
            else
              v17 = &llvm::jitlink::loongarch::LA32StubContent;
            *(_QWORD *)&v38[0] = v17;
            *((_QWORD *)&v38[0] + 1) = 12;
            *(_QWORD *)&v31 = 0;
            v42 = 0;
            v43[0] = 4;
            v18 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, Section, (uint64_t *)v38, (uint64_t *)&v31, v43, &v42);
            llvm::jitlink::Block::addEdge(v18, 8, 0, EntryForTarget, 0);
            llvm::jitlink::Block::addEdge(v18, 9, 4, EntryForTarget, 0);
            v19 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v18, 0, 12, 1, 0);
            v31 = *v12;
            v32 = v19;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v24, &v31, &v32, v20, (uint64_t)v38);
            v14 = *(_QWORD *)&v38[0];
          }
          v21 = *(_QWORD *)(v14 + 16);
        }
        else
        {
          if (v10 == 10)
          {
            v11 = 8;
          }
          else
          {
            if (v10 != 11)
              goto LABEL_23;
            v11 = 9;
          }
          v9[24] = v11;
          v21 = llvm::jitlink::TableManager<llvm::jitlink::loongarch::GOTTableManager>::getEntryForTarget((uint64_t)v28, (uint64_t)this, *(_OWORD **)v9, v5);
        }
        *(_QWORD *)v9 = v21;
LABEL_23:
        v9 += 32;
      }
      v6 += 8;
      if (v6 == v7)
      {
        v6 = v40;
        a2 = v23;
        break;
      }
    }
  }
  if (v6)
  {
    v41 = v6;
    operator delete(v6);
  }
  *a2 = 0;
  MEMORY[0x24BD1B398](v24[0], 8);
  return MEMORY[0x24BD1B398](v28[0], 8);
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::loongarch::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  int v7;
  uint64_t v8;
  uint64_t Section;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  unint64_t *v15;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19[4];
  uint64_t v20;
  unint64_t v21;

  *(_OWORD *)v19 = *a3;
  *(_QWORD *)&v17 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v19, &v17, a4);
  v8 = v17;
  if (!v7)
    v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v8 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Section = *(_QWORD *)(a1 + 24);
    if (!Section)
    {
      Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__GOT", 6, 5);
      *(_QWORD *)(a1 + 24) = Section;
    }
    v10 = *(unsigned int *)(a2 + 168);
    v19[0] = (uint64_t)&llvm::jitlink::loongarch::NullPointerContent;
    v19[1] = v10;
    *(_QWORD *)&v17 = 0;
    v21 = v10;
    v20 = 0;
    v11 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v19, (uint64_t *)&v17, &v21, &v20);
    v12 = (uint64_t)v11;
    if (*(_DWORD *)(a2 + 168) == 8)
      v13 = 2;
    else
      v13 = 3;
    llvm::jitlink::Block::addEdge(v11, v13, 0, (uint64_t)a3, 0);
    v14 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, v12, 0, *(unsigned int *)(a2 + 168), 0, 0);
    v17 = *a3;
    v18 = v14;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v17, &v18, v15, (uint64_t)v19);
    v8 = v19[0];
  }
  return *(_QWORD *)(v8 + 16);
}

void `anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15C00;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  uint64_t GraphSymbol;
  signed int v16;
  char v17;
  uint64_t v18;
  int v19;
  const char *ELFRelocationTypeName;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  __int128 v34;
  uint64_t (**v35)(llvm::detail::format_adapter *__hidden);
  signed int *v36;
  _QWORD v37[2];
  uint64_t (**v38)(llvm::detail::format_adapter *__hidden);
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[4];
  __int16 v43;
  signed int v44;
  uint64_t v45;
  _UNKNOWN **v46;
  const char *v47;
  _UNKNOWN **v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  unsigned int *v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v5 + (v3 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 4)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*(_QWORD **)(a1 + 24), *(_DWORD *)(v5 + 44), (uint64_t)&v55);
        if ((v56 & 1) != 0)
        {
          v27 = v55;
          *a2 = (uint64_t)v55;
          if (v27)
            return;
        }
        else
        {
          v7 = *(_QWORD **)(a1 + 24);
          *(_QWORD *)&v33 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v7, v55, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v33, (uint64_t)&v53);
          if ((v54 & 1) != 0)
          {
            v28 = v53;
            *(_QWORD *)&v53 = 0;
            *a2 = v28;
          }
          else if ((*(_BYTE *)(a1 + 72)
                  || (v33 = v53,
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v33) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v55))
          {
            GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, *(_DWORD *)(v5 + 44));
            if (GraphBlock)
            {
              v9 = (_QWORD *)GraphBlock;
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(_QWORD **)(a1 + 24), (_QWORD *)v5, (uint64_t)&v50);
              v10 = v50;
              if ((v52 & 1) != 0)
              {
                v50 = 0;
              }
              else
              {
                if (v51)
                {
                  v11 = 24 * v51;
                  v12 = v50 + 8;
                  do
                  {
                    v13 = v55;
                    v14 = *(_DWORD *)(v12 + 4);
                    v41 = v14;
                    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(_QWORD **)(a1 + 24), v12 - 8, *(_QWORD **)(a1 + 48), (uint64_t)&v57);
                    if ((v58 & 1) != 0)
                    {
                      v18 = v57;
                      v57 = 0;
                      *a2 = v18;
                    }
                    else
                    {
                      GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v14);
                      if (GraphSymbol)
                      {
                        v16 = *(_DWORD *)v12;
                        v44 = v16;
                        if (v16 > 65)
                        {
                          switch(v16)
                          {
                            case 'B':
                              v17 = 4;
                              goto LABEL_30;
                            case 'C':
                            case 'D':
                            case 'E':
                            case 'F':
                            case 'I':
                            case 'J':
                              goto LABEL_24;
                            case 'G':
                              v17 = 8;
                              goto LABEL_30;
                            case 'H':
                              v17 = 9;
                              goto LABEL_30;
                            case 'K':
                              v17 = 10;
                              goto LABEL_30;
                            case 'L':
                              v17 = 11;
                              goto LABEL_30;
                            default:
                              if (v16 != 99)
                                goto LABEL_24;
                              v17 = 5;
                              break;
                          }
                          goto LABEL_30;
                        }
                        if (v16 == 1)
                        {
                          v17 = 3;
                          goto LABEL_30;
                        }
                        if (v16 == 2)
                        {
                          v17 = 2;
LABEL_30:
                          v24 = *(_QWORD *)(v12 + 8);
                          v25 = *(_DWORD *)(v12 - 8) + v13[4] - *(_DWORD *)v9;
                          *(_QWORD *)&v33 = GraphSymbol;
                          DWORD2(v33) = v25;
                          *(_QWORD *)&v34 = v24;
                          BYTE8(v34) = v17;
                          llvm::jitlink::Block::addEdge(v9, &v33);
                          *a2 = 0;
                          goto LABEL_31;
                        }
LABEL_24:
                        *(_QWORD *)&v33 = "{0:d}: ";
                        *((_QWORD *)&v33 + 1) = 7;
                        *(_QWORD *)&v34 = v37;
                        *((_QWORD *)&v34 + 1) = 1;
                        v35 = &off_251C12BB8;
                        v36 = &v44;
                        v37[0] = &v35;
                        v42[0] = "Unsupported loongarch relocation:";
                        v42[2] = &v33;
                        v43 = 1539;
                        ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)0x102, v16);
                        v22 = v21;
                        v23 = operator new();
                        v45 = (uint64_t)v42;
                        v46 = v22;
                        v47 = ELFRelocationTypeName;
                        v48 = v22;
                        v49 = 1282;
                        *(_QWORD *)v23 = off_251C15728;
                        llvm::Twine::str((llvm::formatv_object_base **)&v45, (std::string *)(v23 + 8));
                        *a2 = v23;
                      }
                      else
                      {
                        v19 = *(_DWORD *)(a1 + 112);
                        *(_QWORD *)&v33 = "Could not find symbol at given index, did you add it to JITSymbolTable? index:"
                                          " {0}, shndx: {1} Size of table: {2}";
                        *((_QWORD *)&v33 + 1) = 113;
                        *(_QWORD *)&v34 = v40;
                        *((_QWORD *)&v34 + 1) = 3;
                        v35 = &off_251C158D8;
                        v36 = &v41;
                        v37[0] = &off_251C15AB8;
                        v37[1] = v57 + 6;
                        v38 = &off_251C15650;
                        v39 = v19;
                        v40[0] = &v35;
                        v40[1] = v37;
                        v40[2] = &v38;
                        getErrorErrorCat();
                        v45 = 3;
                        v46 = &getErrorErrorCat(void)::ErrorErrorCat;
                        llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v33, &v45, a2);
                      }
                    }
LABEL_31:
                    if ((v58 & 1) != 0)
                    {
                      v26 = v57;
                      v57 = 0;
                      if (v26)
                        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
                    }
                    if (*a2)
                      goto LABEL_46;
                    v12 += 24;
                    v11 -= 24;
                  }
                  while (v11);
                }
                v10 = 0;
              }
              *a2 = v10;
LABEL_46:
              if ((v52 & 1) != 0)
              {
                v30 = v50;
                v50 = 0;
                if (v30)
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              }
            }
            else
            {
              LOWORD(v35) = 1283;
              *(_QWORD *)&v33 = "Refencing a section that wasn't added to the graph: ";
              v34 = v53;
              getErrorErrorCat();
              v29 = operator new();
              *(_QWORD *)v29 = off_251C127D0;
              llvm::Twine::str((llvm::formatv_object_base **)&v33, (std::string *)(v29 + 8));
              *(_QWORD *)(v29 + 32) = 3;
              *(_QWORD *)(v29 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
              *(_BYTE *)(v29 + 48) = 1;
              *a2 = v29;
            }
          }
          else
          {
            *a2 = 0;
          }
          if ((v54 & 1) != 0)
          {
            v31 = v53;
            *(_QWORD *)&v53 = 0;
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          }
          if ((v56 & 1) != 0)
          {
            v32 = v55;
            v55 = 0;
            if (v32)
              (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
          }
          if (*a2)
            return;
        }
      }
      else
      {
        *a2 = 0;
      }
      v5 += 64;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

void `anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_loongarch(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::ELFLinkGraphBuilder_loongarch<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t GraphSymbol;
  signed int v17;
  int v18;
  uint64_t v19;
  const char *ELFRelocationTypeName;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  __int128 v34;
  uint64_t (**v35)(llvm::detail::format_adapter *__hidden);
  _DWORD *v36;
  _QWORD v37[2];
  uint64_t (**v38)(llvm::detail::format_adapter *__hidden);
  int v39;
  _QWORD v40[3];
  unsigned int v41;
  _QWORD v42[4];
  __int16 v43;
  signed int v44;
  uint64_t v45;
  _UNKNOWN **v46;
  const char *v47;
  _UNKNOWN **v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  unsigned int *v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(unsigned int **)(a1 + 32);
    v6 = &v5[10 * v3];
    do
    {
      if (v5[1] == 4)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(_QWORD **)(a1 + 24), v5[7], (uint64_t)&v55);
        if ((v56 & 1) != 0)
        {
          v27 = v55;
          *a2 = (uint64_t)v55;
          if (v27)
            return;
        }
        else
        {
          v7 = *(_QWORD **)(a1 + 24);
          *(_QWORD *)&v33 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v7, v55, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v33, (uint64_t)&v53);
          if ((v54 & 1) != 0)
          {
            v28 = v53;
            *(_QWORD *)&v53 = 0;
            *a2 = v28;
          }
          else if ((*(_BYTE *)(a1 + 72)
                  || (v33 = v53,
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v33) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v55))
          {
            GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
            if (GraphBlock)
            {
              v9 = (_QWORD *)GraphBlock;
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(*(_QWORD **)(a1 + 24), v5, (uint64_t)&v50);
              v10 = v50;
              if ((v52 & 1) != 0)
              {
                v50 = 0;
              }
              else
              {
                if (v51)
                {
                  v11 = 12 * v51;
                  v12 = (unsigned int *)(v50 + 4);
                  do
                  {
                    v13 = v55;
                    v14 = *v12;
                    v15 = *v12 >> 8;
                    v41 = v15;
                    if (v14 > 0xFF)
                    {
                      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(_QWORD **)(a1 + 24), *(unsigned int **)(a1 + 48), v15, (uint64_t)&v57);
                      if ((v58 & 1) != 0)
                      {
                        v19 = v57;
                        v57 = 0;
                        *a2 = v19;
                        goto LABEL_33;
                      }
                    }
                    else
                    {
                      v58 = 0;
                      v57 = 0;
                    }
                    GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v15);
                    if (GraphSymbol)
                    {
                      v17 = *(unsigned __int8 *)v12;
                      v44 = v17;
                      if (v17 > 65)
                      {
                        switch(v17)
                        {
                          case 'B':
                            LOBYTE(v17) = 4;
                            goto LABEL_32;
                          case 'C':
                          case 'D':
                          case 'E':
                          case 'F':
                          case 'I':
                          case 'J':
                            goto LABEL_26;
                          case 'G':
                            LOBYTE(v17) = 8;
                            goto LABEL_32;
                          case 'H':
                            LOBYTE(v17) = 9;
                            goto LABEL_32;
                          case 'K':
                            LOBYTE(v17) = 10;
                            goto LABEL_32;
                          case 'L':
                            LOBYTE(v17) = 11;
                            goto LABEL_32;
                          default:
                            if (v17 != 99)
                              goto LABEL_26;
                            LOBYTE(v17) = 5;
                            break;
                        }
                        goto LABEL_32;
                      }
                      if (v17 == 1)
                      {
                        LOBYTE(v17) = 3;
LABEL_32:
                        v24 = (int)v12[1];
                        v25 = *(v12 - 1) + v13[3] - *(_DWORD *)v9;
                        *(_QWORD *)&v33 = GraphSymbol;
                        DWORD2(v33) = v25;
                        *(_QWORD *)&v34 = v24;
                        BYTE8(v34) = v17;
                        llvm::jitlink::Block::addEdge(v9, &v33);
                        *a2 = 0;
                        goto LABEL_33;
                      }
                      if (v17 == 2)
                        goto LABEL_32;
LABEL_26:
                      *(_QWORD *)&v33 = "{0:d}: ";
                      *((_QWORD *)&v33 + 1) = 7;
                      *(_QWORD *)&v34 = v37;
                      *((_QWORD *)&v34 + 1) = 1;
                      v35 = &off_251C12BB8;
                      v36 = &v44;
                      v37[0] = &v35;
                      v42[0] = "Unsupported loongarch relocation:";
                      v42[2] = &v33;
                      v43 = 1539;
                      ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)0x102, v17);
                      v22 = v21;
                      v23 = operator new();
                      v45 = (uint64_t)v42;
                      v46 = v22;
                      v47 = ELFRelocationTypeName;
                      v48 = v22;
                      v49 = 1282;
                      *(_QWORD *)v23 = off_251C15728;
                      llvm::Twine::str((llvm::formatv_object_base **)&v45, (std::string *)(v23 + 8));
                      *a2 = v23;
                    }
                    else
                    {
                      v18 = *(_DWORD *)(a1 + 112);
                      *(_QWORD *)&v33 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {"
                                        "0}, shndx: {1} Size of table: {2}";
                      *((_QWORD *)&v33 + 1) = 113;
                      *(_QWORD *)&v34 = v40;
                      *((_QWORD *)&v34 + 1) = 3;
                      v35 = &off_251C158D8;
                      v36 = &v41;
                      v37[0] = &off_251C15AB8;
                      v37[1] = v57 + 14;
                      v38 = &off_251C15650;
                      v39 = v18;
                      v40[0] = &v35;
                      v40[1] = v37;
                      v40[2] = &v38;
                      getErrorErrorCat();
                      v45 = 3;
                      v46 = &getErrorErrorCat(void)::ErrorErrorCat;
                      llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v33, &v45, a2);
                    }
LABEL_33:
                    if ((v58 & 1) != 0)
                    {
                      v26 = v57;
                      v57 = 0;
                      if (v26)
                        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
                    }
                    if (*a2)
                      goto LABEL_48;
                    v12 += 3;
                    v11 -= 12;
                  }
                  while (v11);
                }
                v10 = 0;
              }
              *a2 = v10;
LABEL_48:
              if ((v52 & 1) != 0)
              {
                v30 = v50;
                v50 = 0;
                if (v30)
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              }
            }
            else
            {
              LOWORD(v35) = 1283;
              *(_QWORD *)&v33 = "Refencing a section that wasn't added to the graph: ";
              v34 = v53;
              getErrorErrorCat();
              v29 = operator new();
              *(_QWORD *)v29 = off_251C127D0;
              llvm::Twine::str((llvm::formatv_object_base **)&v33, (std::string *)(v29 + 8));
              *(_QWORD *)(v29 + 32) = 3;
              *(_QWORD *)(v29 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
              *(_BYTE *)(v29 + 48) = 1;
              *a2 = v29;
            }
          }
          else
          {
            *a2 = 0;
          }
          if ((v54 & 1) != 0)
          {
            v31 = v53;
            *(_QWORD *)&v53 = 0;
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          }
          if ((v56 & 1) != 0)
          {
            v32 = v55;
            v55 = 0;
            if (v32)
              (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
          }
          if (*a2)
            return;
        }
      }
      else
      {
        *a2 = 0;
      }
      v5 += 10;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  unsigned int v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  void *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  uint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int16 v35;
  std::string v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  std::string v40;
  void *__p[2];
  std::string *v42;
  __int16 v43;
  uint64_t v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  _QWORD v48[2];
  std::string *v49;
  __int16 v50;
  llvm::formatv_object_base *v51[2];
  const char *v52;
  __int16 v53;
  uint64_t v54;
  unsigned int v55;

  if (a2[9] == 12)
  {
    v6 = a2[5];
    v7 = a2[5] / 0xC;
    if (a2[5] % 0xC)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v40);
      v8 = std::string::insert(&v40, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v34, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v36;
      v42 = (std::string *)v6;
      v43 = 2052;
      v45[0] = __p;
      v46 = (std::string *)") which is not a multiple of its sh_entsize (";
      v47 = 770;
      v12 = (std::string *)a2[9];
      v48[0] = v45;
      v49 = v12;
      v50 = 2050;
      v51[0] = (llvm::formatv_object_base *)v48;
      v52 = ")";
      v53 = 770;
      LODWORD(v33.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v51, (unsigned int *)&v33, &v44);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v44;
      v44 = 0;
    }
    else
    {
      v19 = a2[4];
      if (!__CFADD__((_DWORD)v19, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v19))
        {
          v28 = *a1 + v19;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v28;
          *(_QWORD *)(a3 + 8) = v7;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v32);
        v24 = std::string::insert(&v32, 0, "section ");
        v25 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v33, " has a sh_offset (0x");
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v30 = v6;
        v31 = v19;
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)&v31;
        v35 = 3588;
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
        v36.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v37 = 770;
        __p[0] = &v36;
        v42 = (std::string *)&v30;
        v43 = 3586;
        v45[0] = __p;
        v46 = (std::string *)") that is greater than the file size (0x";
        v47 = 770;
        v29 = a1[1];
        v48[0] = v45;
        v49 = (std::string *)&v29;
        v50 = 3586;
        v51[0] = (llvm::formatv_object_base *)v48;
        v52 = ")";
        v53 = 770;
        v55 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v51, &v55, &v38);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v38;
        v38 = 0;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        {
          v18 = (void *)v32.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v40);
      v20 = std::string::insert(&v40, 0, "section ");
      v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v34, " has a sh_offset (0x");
      v23 = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v33.__r_.__value_.__r.__words[0] = v19;
      __p[0] = &v36;
      v42 = &v33;
      v43 = 3588;
      v45[0] = __p;
      v46 = (std::string *)") + sh_size (0x";
      v47 = 770;
      v32.__r_.__value_.__r.__words[0] = v6;
      v48[0] = v45;
      v49 = &v32;
      v50 = 3586;
      v51[0] = (llvm::formatv_object_base *)v48;
      v52 = ") that cannot be represented";
      v53 = 770;
      LODWORD(v31) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v51, (unsigned int *)&v31, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = (void *)v40.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v34);
    v13 = std::string::insert(&v34, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v36, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v40.__r_.__value_.__r.__words[0] = 12;
    v45[0] = __p;
    v46 = &v40;
    v47 = 2564;
    v48[0] = v45;
    v49 = (std::string *)", but got ";
    v50 = 770;
    v17 = (const char *)a2[9];
    v51[0] = (llvm::formatv_object_base *)v48;
    v52 = v17;
    v53 = 2050;
    LODWORD(v33.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v51, (unsigned int *)&v33, &v54);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v54;
    v54 = 0;
    if (SHIBYTE(v42) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v18);
    }
  }
}

void `anonymous namespace'::ELFJITLinker_loongarch::~ELFJITLinker_loongarch(_anonymous_namespace_::ELFJITLinker_loongarch *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<`anonymous namespace'::ELFJITLinker_loongarch>::fixUpBlocks(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  size_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  __int128 v32;
  const char *EdgeKindName;
  llvm::formatv_object_base *v34;
  llvm::formatv_object_base *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int16 v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t **v46;
  int v47;
  std::string v49;
  void *__p[2];
  std::string::size_type v51;
  _QWORD v52[2];
  __int128 v53;
  __int16 v54;
  _QWORD v55[4];
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  llvm::formatv_object_base *v61[4];
  __int16 v62;
  int v63;
  __int16 v64;

  if (*(_DWORD *)(a1 + 192))
  {
    v3 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v3)
    {
      v4 = 24 * v3;
      v5 = *(_QWORD **)(a1 + 184);
      while (*v5 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v5 += 3;
        v4 -= 24;
        if (!v4)
          goto LABEL_60;
      }
    }
    else
    {
      v5 = *(_QWORD **)(a1 + 184);
    }
    v6 = *(_QWORD *)(a1 + 184) + 24 * v3;
    if (v5 != (_QWORD *)v6)
    {
      v45 = (_QWORD *)v6;
      do
      {
        v7 = v5[2];
        v47 = *(_DWORD *)(v7 + 20);
        v8 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v7 + 32);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(unsigned int *)(v7 + 48);
        v12 = a1;
        v46 = (uint64_t **)(v10 + 8 * v11);
        if (v46 != v8)
        {
          v13 = v8;
          v14 = v9;
          do
          {
            v15 = *v13;
            if (v47 == 2 && (v15[1] & 4) == 0)
            {
              v17 = (const void *)v15[3];
              v16 = v15[4];
              v18 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v12, v16, 0);
              v19 = (uint64_t)v18;
              if (v16)
                memmove(v18, v17, v16);
              v15[3] = v19;
              v15[4] = v16;
              v15[1] |= 4uLL;
            }
            v21 = (unsigned __int8 *)v15[5];
            v20 = (unsigned __int8 *)v15[6];
            while (v21 != v20)
            {
              v22 = v21[24];
              v23 = v22 - 2;
              if (v22 >= 2)
              {
                v24 = v15[3];
                v25 = *((unsigned int *)v21 + 2);
                v26 = *v15 + v25;
                v27 = (*(_QWORD *)(*(_QWORD *)v21 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(*(_QWORD *)v21 + 16);
                v28 = *((_QWORD *)v21 + 2);
                switch(v23)
                {
                  case 0u:
                    v29 = v27 + v28;
                    goto LABEL_34;
                  case 1u:
                    LODWORD(v36) = *(_DWORD *)(*(_QWORD *)v21 + 24) + **(_DWORD **)(*(_QWORD *)v21 + 16) + v28;
                    if ((unint64_t)(v27 + v28) >> 32)
                      goto LABEL_37;
                    goto LABEL_32;
                  case 2u:
                    v37 = v27 - v26 + v28;
                    if ((v37 + 0x8000000) >> 28)
                      goto LABEL_37;
                    if ((v37 & 3) != 0)
                    {
                      llvm::jitlink::makeAlignmentError(v26, v37, 4u, (uint64_t)v21, a2);
                      goto LABEL_47;
                    }
                    v43 = *(_DWORD *)(v24 + v25);
                    v42 = ((_DWORD)v37 << 8) & 0x3FFFC00 | (v37 >> 18) & 0x3FF;
LABEL_39:
                    v40 = v42 | v43;
                    goto LABEL_40;
                  case 3u:
                    v38 = v27 - v26;
                    goto LABEL_31;
                  case 4u:
                    v38 = v26 - v27;
LABEL_31:
                    v36 = v38 + v28;
                    if (v36 != (int)v36)
                      goto LABEL_37;
LABEL_32:
                    *(_DWORD *)(v24 + v25) = v36;
                    goto LABEL_41;
                  case 5u:
                    v29 = v27 + v28 - v26;
LABEL_34:
                    *(_QWORD *)(v24 + v25) = v29;
                    goto LABEL_41;
                  case 6u:
                    v39 = ((((v27 + v28) & 0x800) + v27 + v28) & 0xFFFFFFFFFFFFF000) - (v26 & 0xFFFFFFFFFFFFF000);
                    if (v39 == (int)v39)
                    {
                      v40 = *(_DWORD *)(v24 + v25) | (v39 >> 7);
LABEL_40:
                      *(_DWORD *)(v24 + v25) = v40;
LABEL_41:
                      *a2 = 0;
                    }
                    else
                    {
LABEL_37:
                      llvm::jitlink::makeTargetOutOfRangeError(v12, v15, (uint64_t)v21, a2);
LABEL_47:
                      if (*a2)
                        return;
                    }
                    break;
                  case 7u:
                    v41 = *(_WORD *)(*(_QWORD *)v21 + 24) + **(_WORD **)(*(_QWORD *)v21 + 16) + v28;
                    v42 = *(_DWORD *)(v24 + v25);
                    v43 = (v41 & 0xFFF) << 10;
                    goto LABEL_39;
                  default:
                    std::operator+<char>();
                    v30 = std::string::append(&v49, ", section ");
                    v31 = v30->__r_.__value_.__r.__words[2];
                    *(_OWORD *)__p = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
                    v51 = v31;
                    v30->__r_.__value_.__l.__size_ = 0;
                    v30->__r_.__value_.__r.__words[2] = 0;
                    v30->__r_.__value_.__r.__words[0] = 0;
                    v32 = *(_OWORD *)v15[2];
                    v52[0] = __p;
                    v53 = v32;
                    v54 = 1284;
                    v55[0] = v52;
                    v55[2] = " unsupported edge kind ";
                    v56 = 770;
                    EdgeKindName = llvm::jitlink::loongarch::getEdgeKindName((llvm::jitlink::loongarch *)v21[24]);
                    if (*EdgeKindName)
                    {
                      v34 = (llvm::formatv_object_base *)EdgeKindName;
                      v35 = (llvm::formatv_object_base *)v55;
                    }
                    else
                    {
                      v35 = (llvm::formatv_object_base *)v52;
                      v59 = v57;
                      v60 = v58;
                      v34 = (llvm::formatv_object_base *)" unsupported edge kind ";
                    }
                    v44 = operator new();
                    v61[0] = v35;
                    v61[2] = v34;
                    v62 = 770;
                    v63 = v59;
                    v64 = v60;
                    *(_QWORD *)v44 = off_251C15728;
                    llvm::Twine::str(v61, (std::string *)(v44 + 8));
                    *a2 = v44;
                    if (SHIBYTE(v51) < 0)
                      operator delete(__p[0]);
                    v12 = a1;
                    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v49.__r_.__value_.__l.__data_);
                    goto LABEL_47;
                }
              }
              v21 += 32;
            }
            while (++v13 != v14)
            {
              if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_54;
            }
            v13 = v14;
LABEL_54:
            ;
          }
          while (v13 != v46);
        }
        for (v5 += 3; ; v5 += 3)
        {
          if (v5 == v45)
            goto LABEL_60;
          if (*v5 < 0xFFFFFFFFFFFFFFFELL)
            break;
        }
      }
      while (v5 != v45);
    }
  }
LABEL_60:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<`anonymous namespace'::ELFJITLinker_loongarch>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

llvm::object::ObjectFile *llvm::jitlink::createLinkGraphFromELFObject_riscv@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  llvm::object::ObjectFile *v4;
  void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  llvm::jitlink::LinkGraph *v9;
  void *v10;
  void *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  llvm::jitlink::LinkGraph *v15;
  llvm::object::ObjectFile *result;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void (**v25)();
  llvm::jitlink::LinkGraph *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30[2];
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  llvm::object::ObjectFile *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v30[0] = *a1;
  v30[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v30, 1, (uint64_t)&v35);
  v4 = v35;
  if ((v36 & 1) != 0)
  {
    v35 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_17;
  }
  if ((*(unsigned int (**)(llvm::object::ObjectFile *))(*(_QWORD *)v35 + 392))(v35) == 28)
  {
    v5 = (void *)*((_QWORD *)v35 + 4);
    v6 = *((_QWORD *)v35 + 5);
    v7 = (char *)v35 + 56;
    llvm::object::ObjectFile::makeTriple(v35, (llvm::Triple *)&v21);
    v31 = v21;
    v8 = v22;
    v21 = 0uLL;
    v22 = 0;
    v33 = v23;
    v32 = v8;
    v34 = v24;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((uint64_t)&v25, (uint64_t)v7, (uint64_t)&v31, v5, v6, (uint64_t)llvm::jitlink::riscv::getEdgeKindName);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    v25 = (void (**)())&off_251C15E30;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::buildGraph((uint64_t)&v25, a2);
    v25 = off_251C15C00;
    MEMORY[0x24BD1B398](v29, 8);
    MEMORY[0x24BD1B398](v28, 8);
    MEMORY[0x24BD1B398](v27, 8);
    v9 = v26;
    v25 = (void (**)())&off_251C159D8;
    v26 = 0;
    if (v9)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v9);
      MEMORY[0x24BD1B3A4]();
    }
    if (SHIBYTE(v22) < 0)
    {
      v10 = (void *)v21;
LABEL_16:
      operator delete(v10);
    }
  }
  else
  {
    v11 = (void *)*((_QWORD *)v35 + 4);
    v12 = *((_QWORD *)v35 + 5);
    v13 = (char *)v35 + 56;
    llvm::object::ObjectFile::makeTriple(v35, (llvm::Triple *)__p);
    v31 = *(_OWORD *)__p;
    v14 = v18;
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
    v33 = v19;
    v32 = v14;
    v34 = v20;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((uint64_t)&v25, (uint64_t)v13, (uint64_t)&v31, v11, v12, (uint64_t)llvm::jitlink::riscv::getEdgeKindName);
    if (SHIBYTE(v32) < 0)
      operator delete((void *)v31);
    v25 = (void (**)())&off_251C15EA0;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::buildGraph((uint64_t)&v25, a2);
    v25 = off_251C159F8;
    MEMORY[0x24BD1B398](v29, 8);
    MEMORY[0x24BD1B398](v28, 8);
    MEMORY[0x24BD1B398](v27, 8);
    v15 = v26;
    v25 = (void (**)())&off_251C159D8;
    v26 = 0;
    if (v15)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v15);
      MEMORY[0x24BD1B3A4]();
    }
    if (SHIBYTE(v18) < 0)
    {
      v10 = __p[0];
      goto LABEL_16;
    }
  }
LABEL_17:
  result = v35;
  v35 = 0;
  if (result)
    return (llvm::object::ObjectFile *)(*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15C00;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_riscv(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  llvm::jitlink::LinkGraph *v40;
  uint64_t v41;
  int64x2_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  llvm::jitlink::LinkGraph *v52;
  uint64_t v53;
  uint64_t v54;
  int64x2_t v55;
  _OWORD v56[2];
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;
  _BYTE v61[24];
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  llvm::jitlink::LinkGraph *v70;
  uint64_t v71;
  __int128 v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  _QWORD v77[3];
  _QWORD v78[3];
  _QWORD v79[6];

  v79[3] = *MEMORY[0x24BDAC8D0];
  v60 = 0;
  v59 = 0u;
  v57 = 0u;
  memset(v58, 0, sizeof(v58));
  memset(v56, 0, sizeof(v56));
  v55 = 0u;
  v4 = (uint64_t)*a1 + 120;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, v4))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v74, *a2, v4);
    if (v76[0] < 8uLL)
    {
      *(_QWORD *)&v72 = llvm::jitlink::markAllSymbolsLive;
      v73 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v55.i64[1] >= *(_QWORD *)&v56[0])
      {
        v11 = (v55.i64[1] - v55.i64[0]) >> 5;
        if ((unint64_t)(v11 + 1) >> 59)
          goto LABEL_66;
        v12 = (*(_QWORD *)&v56[0] - v55.i64[0]) >> 4;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if (*(_QWORD *)&v56[0] - v55.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v13 = 0x7FFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        *((_QWORD *)&v62 + 1) = v56;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v56, v13);
        else
          v14 = 0;
        v19 = (uint64_t)&v14[32 * v11];
        *(_QWORD *)v61 = v14;
        *(_QWORD *)&v61[8] = v19;
        *(_QWORD *)&v62 = &v14[32 * v13];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19, &v72);
        v6 = v19 + 32;
        *(_QWORD *)&v61[16] = v19 + 32;
        v20 = (__int128 *)v55.i64[1];
        v21 = *(_QWORD *)&v61[8];
        if (v55.i64[1] == v55.i64[0])
        {
          v22 = vdupq_n_s64(v55.u64[1]);
        }
        else
        {
          do
          {
            v20 -= 2;
            v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v21 - 32, v20);
          }
          while (v20 != (__int128 *)v55.i64[0]);
          v22 = v55;
          v6 = *(_QWORD *)&v61[16];
        }
        v55.i64[0] = v21;
        v55.i64[1] = v6;
        *(int64x2_t *)&v61[8] = v22;
        v24 = *(_QWORD *)&v56[0];
        *(_QWORD *)&v56[0] = v62;
        *(_QWORD *)&v62 = v24;
        *(_QWORD *)v61 = v22.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v61);
      }
      else
      {
        v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v55.i64[1], &v72)+ 32;
      }
      v55.i64[1] = v6;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v72);
    }
    else
    {
      if (v55.i64[1] >= *(_QWORD *)&v56[0])
      {
        v7 = (v55.i64[1] - v55.i64[0]) >> 5;
        if ((unint64_t)(v7 + 1) >> 59)
          goto LABEL_66;
        v8 = (*(_QWORD *)&v56[0] - v55.i64[0]) >> 4;
        if (v8 <= v7 + 1)
          v8 = v7 + 1;
        if (*(_QWORD *)&v56[0] - v55.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v9 = 0x7FFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        *((_QWORD *)&v62 + 1) = v56;
        if (v9)
          v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v56, v9);
        else
          v10 = 0;
        v15 = (uint64_t)&v10[32 * v7];
        *(_QWORD *)v61 = v10;
        *(_QWORD *)&v61[8] = v15;
        *(_QWORD *)&v62 = &v10[32 * v9];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15, &v74);
        v5 = v15 + 32;
        *(_QWORD *)&v61[16] = v15 + 32;
        v16 = (__int128 *)v55.i64[1];
        v17 = *(_QWORD *)&v61[8];
        if (v55.i64[1] == v55.i64[0])
        {
          v18 = vdupq_n_s64(v55.u64[1]);
        }
        else
        {
          do
          {
            v16 -= 2;
            v17 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17 - 32, v16);
          }
          while (v16 != (__int128 *)v55.i64[0]);
          v18 = v55;
          v5 = *(_QWORD *)&v61[16];
        }
        v55.i64[0] = v17;
        v55.i64[1] = v5;
        *(int64x2_t *)&v61[8] = v18;
        v23 = *(_QWORD *)&v56[0];
        *(_QWORD *)&v56[0] = v62;
        *(_QWORD *)&v62 = v23;
        *(_QWORD *)v61 = v18.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v61);
      }
      else
      {
        v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v55.i64[1], &v74)+ 32;
      }
      v55.i64[1] = v5;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
    v76[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
    if (*(_QWORD *)&v56[1] < *((_QWORD *)&v56[1] + 1))
    {
      v25 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v56[1], &v74)+ 32;
LABEL_53:
      *(_QWORD *)&v56[1] = v25;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v74);
      goto LABEL_54;
    }
    v26 = (uint64_t)(*(_QWORD *)&v56[1] - *((_QWORD *)&v56[0] + 1)) >> 5;
    if (!((unint64_t)(v26 + 1) >> 59))
    {
      v27 = (uint64_t)(*((_QWORD *)&v56[1] + 1) - *((_QWORD *)&v56[0] + 1)) >> 4;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if (*((_QWORD *)&v56[1] + 1) - *((_QWORD *)&v56[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      *((_QWORD *)&v62 + 1) = (char *)&v56[1] + 8;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v56[1] + 8, v28);
      else
        v29 = 0;
      v30 = (uint64_t)&v29[32 * v26];
      *(_QWORD *)v61 = v29;
      *(_QWORD *)&v61[8] = v30;
      *(_QWORD *)&v62 = &v29[32 * v28];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30, &v74);
      v25 = v30 + 32;
      *(_QWORD *)&v61[16] = v30 + 32;
      v32 = (__int128 *)*((_QWORD *)&v56[0] + 1);
      v31 = *(__int128 **)&v56[1];
      v33 = *(_QWORD *)&v61[8];
      if (*(_QWORD *)&v56[1] == *((_QWORD *)&v56[0] + 1))
      {
        v34 = vdupq_n_s64(*(unint64_t *)&v56[1]);
      }
      else
      {
        do
        {
          v31 -= 2;
          v33 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v33 - 32, v31);
        }
        while (v31 != v32);
        v34 = *(int64x2_t *)((char *)v56 + 8);
        v25 = *(_QWORD *)&v61[16];
      }
      *((_QWORD *)&v56[0] + 1) = v33;
      *(_QWORD *)&v56[1] = v25;
      *(int64x2_t *)&v61[8] = v34;
      v35 = *((_QWORD *)&v56[1] + 1);
      *((_QWORD *)&v56[1] + 1) = v62;
      *(_QWORD *)&v62 = v35;
      *(_QWORD *)v61 = v34.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v61);
      goto LABEL_53;
    }
LABEL_66:
    abort();
  }
LABEL_54:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v61, *a2, *a1, &v55);
  if (*(_QWORD *)v61)
  {
    v36 = *a2;
    v54 = *(_QWORD *)v61;
    *(_QWORD *)v61 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 24))(v36, &v54);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    v37 = *(_QWORD *)v61;
    if (*(_QWORD *)v61)
LABEL_58:
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  else
  {
    v38 = (_QWORD *)operator new();
    v39 = *a2;
    *a2 = 0;
    v40 = *a1;
    *a1 = 0;
    v41 = *(_QWORD *)&v56[0];
    v42 = v55;
    v55 = 0uLL;
    v43 = *((_QWORD *)&v56[1] + 1);
    v44 = *(_OWORD *)((char *)v56 + 8);
    memset(v56, 0, sizeof(v56));
    v45 = *(_QWORD *)&v58[0];
    v46 = v57;
    v57 = 0uLL;
    v47 = *((_QWORD *)&v58[1] + 1);
    v48 = *(_OWORD *)((char *)v58 + 8);
    memset(v58, 0, sizeof(v58));
    v49 = v60;
    v50 = v59;
    v59 = 0uLL;
    v60 = 0;
    v70 = v40;
    v71 = v39;
    *(int64x2_t *)v61 = v42;
    v74 = 0uLL;
    v62 = v44;
    *(_QWORD *)&v61[16] = v41;
    v63 = v43;
    v75 = 0;
    memset(v76, 0, sizeof(v76));
    v64 = v46;
    memset(v77, 0, sizeof(v77));
    v66 = v48;
    v65 = v45;
    v67 = v47;
    memset(v78, 0, sizeof(v78));
    v68 = v50;
    v69 = v49;
    memset(v79, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v38, &v71, (uint64_t *)&v70, (uint64_t)v61);
    *v51 = &off_251C15F08;
    *(_QWORD *)&v72 = &v68;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    *(_QWORD *)&v72 = &v66;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    *(_QWORD *)&v72 = &v64;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    *(_QWORD *)&v72 = &v62;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    *(_QWORD *)&v72 = v61;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    v52 = v70;
    v70 = 0;
    if (v52)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v52);
      MEMORY[0x24BD1B3A4]();
    }
    v53 = v71;
    v71 = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    *v38 = &off_251C15EE0;
    *(_QWORD *)v61 = v79;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
    *(_QWORD *)v61 = v78;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
    *(_QWORD *)v61 = v77;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
    *(_QWORD *)v61 = v76;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
    *(_QWORD *)v61 = &v74;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
    *(_QWORD *)v61 = v38;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v38, (uint64_t *)v61);
    v37 = *(_QWORD *)v61;
    *(_QWORD *)v61 = 0;
    if (v37)
      goto LABEL_58;
  }
  *(_QWORD *)v61 = &v59;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
  *(_QWORD *)v61 = (char *)v58 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
  *(_QWORD *)v61 = &v57;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
  *(_QWORD *)v61 = (char *)v56 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
  *(_QWORD *)v61 = &v55;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v61);
}

uint64_t llvm::jitlink::PerGraphGOTAndPLTStubsBuilder<`anonymous namespace'::PerGraphGOTAndPLTStubsBuilder_ELF_riscv>::asPass@<X0>(llvm::jitlink::LinkGraph *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  char v11;
  __int128 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Section;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t GOTEntry;
  _QWORD *v23;
  unint64_t *v24;
  char *v26;
  llvm::jitlink::LinkGraph *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31[2];
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[4];
  _OWORD v42[8];
  _OWORD v43[4];
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47[3];

  v28 = 0;
  v29 = 0;
  v27 = a1;
  v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  llvm::jitlink::LinkGraph::blocks(a1, v42);
  v43[0] = v42[0];
  v43[1] = v42[1];
  v43[2] = v42[2];
  v43[3] = v42[3];
  llvm::jitlink::LinkGraph::blocks(a1, &v35);
  v41[0] = v37;
  v41[1] = v38;
  v41[2] = v39;
  v41[3] = v40;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v44, v43, (uint64_t *)v41);
  v6 = v44;
  v26 = v45;
  if (v44 != v45)
  {
    while (1)
    {
      v7 = *(uint64_t **)(*(_QWORD *)v6 + 40);
      v8 = *(uint64_t **)(*(_QWORD *)v6 + 48);
      while (v7 != v8)
      {
        v9 = *((unsigned __int8 *)v7 + 24);
        if (v9 == 7)
        {
          v12 = (__int128 *)*v7;
          v42[0] = *(_OWORD *)*v7;
          *(_QWORD *)&v35 = 0;
          v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v31, (uint64_t)v42, &v35, v5);
          v14 = v35;
          if (!v13)
            v14 = v31[0] + 24 * v32;
          if (v14 == v31[0] + 24 * v32)
          {
            v15 = (uint64_t)v27;
            Section = v34;
            v17 = (uint64_t)v27;
            if (!v34)
            {
              Section = llvm::jitlink::LinkGraph::createSection((uint64_t)v27, (uint64_t)"$__STUBS", 8, 5);
              v34 = Section;
              v17 = (uint64_t)v27;
            }
            if (*(_DWORD *)(v17 + 168) == 8)
            else
            *(_QWORD *)&v42[0] = v18;
            *((_QWORD *)&v42[0] + 1) = 16;
            *(_QWORD *)&v35 = 0;
            v46 = 0;
            v47[0] = 4;
            v19 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v15, Section, (uint64_t *)v42, (uint64_t *)&v35, v47, &v46);
            llvm::jitlink::Block::addEdge(v19, 6, 0, GOTEntry, 0);
            v23 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)v27, (uint64_t)v19, 0, 16, 1, 0);
            v35 = *v12;
            v36 = v23;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v31, &v35, &v36, v24, (uint64_t)v42);
            v14 = *(_QWORD *)&v42[0];
          }
          v10 = *(_QWORD *)(v14 + 16);
          v11 = 6;
        }
        else
        {
          if (v9 != 8)
            goto LABEL_18;
          v11 = 9;
        }
        *((_BYTE *)v7 + 24) = v11;
        *v7 = v10;
LABEL_18:
        v7 += 4;
      }
      v6 += 8;
      if (v6 == v26)
      {
        v6 = v44;
        break;
      }
    }
  }
  *a2 = 0;
  if (v6)
  {
    v45 = v6;
    operator delete(v6);
  }
  MEMORY[0x24BD1B398](v31[0], 8);
  return MEMORY[0x24BD1B398](v28, 8);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15C00;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t GraphSymbol;
  int v21;
  llvm::formatv_object_base *v22;
  int v23;
  llvm::formatv_object_base *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  const char *ELFRelocationTypeName;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t (**v39)(llvm::detail::format_adapter *__hidden);
  uint64_t *v40;
  uint64_t (**v41)(llvm::detail::format_adapter *__hidden);
  char *v42;
  uint64_t (***v43)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v44)(llvm::detail::format_adapter *__hidden);
  _QWORD v45[4];
  uint64_t v46;
  uint64_t v47[4];
  __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  unsigned int *v55;
  char v56;
  llvm::formatv_object_base *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v5 + (v3 << 6);
    while (1)
    {
      if (*(_DWORD *)(v5 + 4) != 4)
      {
        *a2 = 0;
        goto LABEL_52;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*(_QWORD **)(a1 + 24), *(_DWORD *)(v5 + 44), (uint64_t)&v55);
      if ((v56 & 1) != 0)
      {
        v25 = v55;
        *a2 = (uint64_t)v55;
        goto LABEL_51;
      }
      v7 = *(_QWORD **)(a1 + 24);
      *(_QWORD *)&v37 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v7, v55, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v37, (uint64_t)&v53);
      if ((v54 & 1) != 0)
      {
        v26 = v53;
        *(_QWORD *)&v53 = 0;
        *a2 = v26;
        goto LABEL_44;
      }
      if (!*(_BYTE *)(a1 + 72)
        && (v37 = v53,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v37) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278])|| (*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v55))
      {
        *a2 = 0;
        goto LABEL_44;
      }
      GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, *(_DWORD *)(v5 + 44));
      if (!GraphBlock)
      {
        LOWORD(v39) = 1283;
        *(_QWORD *)&v37 = "Refencing a section that wasn't added to the graph: ";
        v38 = v53;
        getErrorErrorCat();
        v27 = operator new();
        *(_QWORD *)v27 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v37, (std::string *)(v27 + 8));
        *(_QWORD *)(v27 + 32) = 3;
        *(_QWORD *)(v27 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v27 + 48) = 1;
        *a2 = v27;
        goto LABEL_44;
      }
      v35 = (_QWORD *)GraphBlock;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(_QWORD **)(a1 + 24), (_QWORD *)v5, (uint64_t)&v50);
      v9 = v50;
      if ((v52 & 1) != 0)
      {
        v50 = 0;
        goto LABEL_40;
      }
      if (!v51)
      {
LABEL_32:
        v9 = 0;
LABEL_40:
        *a2 = v9;
        goto LABEL_41;
      }
      v10 = 24 * v51;
      v11 = (_QWORD *)(v50 + 16);
      while (1)
      {
        v12 = *(v11 - 1);
        if ((_DWORD)v12 != 51)
          break;
        *a2 = 0;
LABEL_31:
        v11 += 3;
        v10 -= 24;
        if (!v10)
          goto LABEL_32;
      }
      v13 = v55;
      v14 = *v11;
      v46 = *v11;
      if ((_DWORD)v12 == 43)
        break;
      v49 = v12;
      v18 = v12 - 1;
      if ((v12 - 1) < 0x39 && ((0x1F818FF0FCF8003uLL >> v18) & 1) != 0)
      {
        v36 = byte_24AA2DFC8[v18];
        v19 = HIDWORD(v12);
        v49 = HIDWORD(v12);
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(_QWORD **)(a1 + 24), (uint64_t)(v11 - 2), *(_QWORD **)(a1 + 48), (uint64_t)&v57);
        if ((v58 & 1) != 0)
        {
          v22 = v57;
          v57 = 0;
          *a2 = (uint64_t)v22;
        }
        else
        {
          GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v19);
          if (GraphSymbol)
          {
            v21 = *((_DWORD *)v11 - 4) + v13[4] - *(_DWORD *)v35;
            *(_QWORD *)&v37 = GraphSymbol;
            DWORD2(v37) = v21;
            *(_QWORD *)&v38 = v14;
            BYTE8(v38) = v36;
            llvm::jitlink::Block::addEdge(v35, &v37);
            *a2 = 0;
          }
          else
          {
            v23 = *(_DWORD *)(a1 + 112);
            *(_QWORD *)&v37 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx:"
                              " {1} Size of table: {2}";
            *((_QWORD *)&v37 + 1) = 113;
            *(_QWORD *)&v38 = v45;
            *((_QWORD *)&v38 + 1) = 3;
            v39 = &off_251C158D8;
            v40 = (uint64_t *)&v49;
            v41 = &off_251C15AB8;
            v42 = (char *)v57 + 6;
            v43 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_251C15650;
            LODWORD(v44) = v23;
            v45[0] = &v39;
            v45[1] = &v41;
            v45[2] = &v43;
            getErrorErrorCat();
            v47[0] = 3;
            v47[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v37, v47, a2);
          }
        }
        if ((v58 & 1) != 0)
        {
          v24 = v57;
          v57 = 0;
          if (v24)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v24 + 8))(v24);
        }
        v17 = *a2;
LABEL_30:
        if (v17)
          goto LABEL_41;
        goto LABEL_31;
      }
      *(_QWORD *)&v37 = "{0:d}: ";
      *((_QWORD *)&v37 + 1) = 7;
      *(_QWORD *)&v38 = &v41;
      *((_QWORD *)&v38 + 1) = 1;
      v39 = &off_251C12BB8;
      v40 = (uint64_t *)&v49;
      v41 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&v39;
      v47[0] = (uint64_t)"Unsupported riscv relocation:";
      v47[2] = (uint64_t)&v37;
      v48 = 1539;
      ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)0xF3, v12);
      v33 = v32;
      v34 = operator new();
      v57 = (llvm::formatv_object_base *)v47;
      v58 = v33;
      v59 = ELFRelocationTypeName;
      v60 = v33;
      v61 = 1282;
      *(_QWORD *)v34 = off_251C15728;
      llvm::Twine::str(&v57, (std::string *)(v34 + 8));
      *a2 = v34;
LABEL_41:
      if ((v52 & 1) != 0)
      {
        v28 = v50;
        v50 = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      }
LABEL_44:
      if ((v54 & 1) != 0)
      {
        v29 = v53;
        *(_QWORD *)&v53 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      if ((v56 & 1) != 0)
      {
        v30 = v55;
        v55 = 0;
        if (v30)
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
      v25 = (unsigned int *)*a2;
LABEL_51:
      if (v25)
        return;
LABEL_52:
      v5 += 64;
      if (v5 == v6)
        goto LABEL_55;
    }
    if (v14
      && (v15 = (v14 - 1) | ((unint64_t)(v14 - 1) >> 1) | (((v14 - 1) | ((unint64_t)(v14 - 1) >> 1)) >> 2),
          v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8),
          v47[0] = (v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32)) + 1,
          v47[0] >= 3uLL))
    {
      *(_QWORD *)&v37 = "Unsupported relocation R_RISCV_ALIGN with alignment {0} larger than 2 (addend: {1})";
      *((_QWORD *)&v37 + 1) = 83;
      *(_QWORD *)&v38 = &v43;
      *((_QWORD *)&v38 + 1) = 2;
      v39 = &off_251C14EA8;
      v40 = v47;
      v41 = &off_251C15E70;
      v42 = (char *)&v46;
      v43 = &v39;
      v44 = &v41;
      v17 = operator new();
      v61 = 262;
      v57 = (llvm::formatv_object_base *)&v37;
      *(_QWORD *)v17 = off_251C15728;
      llvm::Twine::str(&v57, (std::string *)(v17 + 8));
      *a2 = v17;
    }
    else
    {
      v17 = 0;
      *a2 = 0;
    }
    goto LABEL_30;
  }
LABEL_55:
  *a2 = 0;
}

void llvm::detail::provider_format_adapter<long long &>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<long long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFLinkGraphBuilder_riscv(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::ELFLinkGraphBuilder_riscv<llvm::object::ELFType<(llvm::support::endianness)1,false>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  uint64_t GraphSymbol;
  int v22;
  int v23;
  llvm::formatv_object_base *v24;
  llvm::formatv_object_base *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  const char *ELFRelocationTypeName;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t (**v39)(llvm::detail::format_adapter *__hidden);
  uint64_t *v40;
  uint64_t (**v41)(llvm::detail::format_adapter *__hidden);
  char *v42;
  uint64_t (***v43)(llvm::detail::format_adapter *__hidden);
  uint64_t (***v44)(llvm::detail::format_adapter *__hidden);
  _QWORD v45[4];
  uint64_t v46;
  uint64_t v47[4];
  __int16 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  unsigned int *v55;
  char v56;
  llvm::formatv_object_base *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(unsigned int **)(a1 + 32);
    v6 = &v5[10 * v3];
    while (1)
    {
      if (v5[1] != 4)
      {
        *a2 = 0;
        goto LABEL_54;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(_QWORD **)(a1 + 24), v5[7], (uint64_t)&v55);
      if ((v56 & 1) != 0)
      {
        v26 = v55;
        *a2 = (uint64_t)v55;
        goto LABEL_53;
      }
      v7 = *(_QWORD **)(a1 + 24);
      *(_QWORD *)&v37 = llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v7, v55, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v37, (uint64_t)&v53);
      if ((v54 & 1) != 0)
      {
        v27 = v53;
        *(_QWORD *)&v53 = 0;
        *a2 = v27;
        goto LABEL_46;
      }
      if (!*(_BYTE *)(a1 + 72)
        && (v37 = v53,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v37) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278])|| (*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v55))
      {
        *a2 = 0;
        goto LABEL_46;
      }
      GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
      if (!GraphBlock)
      {
        LOWORD(v39) = 1283;
        *(_QWORD *)&v37 = "Refencing a section that wasn't added to the graph: ";
        v38 = v53;
        getErrorErrorCat();
        v28 = operator new();
        *(_QWORD *)v28 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v37, (std::string *)(v28 + 8));
        *(_QWORD *)(v28 + 32) = 3;
        *(_QWORD *)(v28 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v28 + 48) = 1;
        *a2 = v28;
        goto LABEL_46;
      }
      v36 = (_QWORD *)GraphBlock;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(*(_QWORD **)(a1 + 24), v5, (uint64_t)&v50);
      v9 = v50;
      if ((v52 & 1) != 0)
      {
        v50 = 0;
        goto LABEL_42;
      }
      if (!v51)
      {
LABEL_34:
        v9 = 0;
LABEL_42:
        *a2 = v9;
        goto LABEL_43;
      }
      v10 = 12 * v51;
      v11 = (int *)(v50 + 8);
      while (1)
      {
        v12 = *(v11 - 1);
        if (v12 != 51)
          break;
        *a2 = 0;
LABEL_33:
        v11 += 3;
        v10 -= 12;
        if (!v10)
          goto LABEL_34;
      }
      v13 = v55;
      v14 = *v11;
      v46 = v14;
      if (v12 == 43)
        break;
      v49 = v12;
      v18 = v12 - 1;
      if ((v12 - 1) < 0x39u && ((0x1F818FF0FCF8003uLL >> v18) & 1) != 0)
      {
        v19 = byte_24AA2DFC8[v18];
        v20 = v12 >> 8;
        v49 = v12 >> 8;
        if (v12 > 0xFF)
        {
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(_QWORD **)(a1 + 24), *(unsigned int **)(a1 + 48), v20, (uint64_t)&v57);
          if ((v58 & 1) == 0)
            goto LABEL_24;
          v24 = v57;
          v57 = 0;
          *a2 = (uint64_t)v24;
        }
        else
        {
          LOBYTE(v58) = 0;
          v57 = 0;
LABEL_24:
          GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v20);
          if (GraphSymbol)
          {
            v22 = *(v11 - 2) + v13[3] - *(_DWORD *)v36;
            *(_QWORD *)&v37 = GraphSymbol;
            DWORD2(v37) = v22;
            *(_QWORD *)&v38 = v14;
            BYTE8(v38) = v19;
            llvm::jitlink::Block::addEdge(v36, &v37);
            *a2 = 0;
          }
          else
          {
            v23 = *(_DWORD *)(a1 + 112);
            *(_QWORD *)&v37 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, shndx:"
                              " {1} Size of table: {2}";
            *((_QWORD *)&v37 + 1) = 113;
            *(_QWORD *)&v38 = v45;
            *((_QWORD *)&v38 + 1) = 3;
            v39 = &off_251C158D8;
            v40 = (uint64_t *)&v49;
            v41 = &off_251C15AB8;
            v42 = (char *)v57 + 14;
            v43 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_251C15650;
            LODWORD(v44) = v23;
            v45[0] = &v39;
            v45[1] = &v41;
            v45[2] = &v43;
            getErrorErrorCat();
            v47[0] = 3;
            v47[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v37, v47, a2);
          }
        }
        if ((v58 & 1) != 0)
        {
          v25 = v57;
          v57 = 0;
          if (v25)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v25 + 8))(v25);
        }
        v17 = *a2;
LABEL_32:
        if (v17)
          goto LABEL_43;
        goto LABEL_33;
      }
      *(_QWORD *)&v37 = "{0:d}: ";
      *((_QWORD *)&v37 + 1) = 7;
      *(_QWORD *)&v38 = &v41;
      *((_QWORD *)&v38 + 1) = 1;
      v39 = &off_251C12BB8;
      v40 = (uint64_t *)&v49;
      v41 = (uint64_t (**)(llvm::detail::format_adapter *__hidden))&v39;
      v47[0] = (uint64_t)"Unsupported riscv relocation:";
      v47[2] = (uint64_t)&v37;
      v48 = 1539;
      ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)0xF3, v12);
      v34 = v33;
      v35 = operator new();
      v57 = (llvm::formatv_object_base *)v47;
      v58 = v34;
      v59 = ELFRelocationTypeName;
      v60 = v34;
      v61 = 1282;
      *(_QWORD *)v35 = off_251C15728;
      llvm::Twine::str(&v57, (std::string *)(v35 + 8));
      *a2 = v35;
LABEL_43:
      if ((v52 & 1) != 0)
      {
        v29 = v50;
        v50 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
LABEL_46:
      if ((v54 & 1) != 0)
      {
        v30 = v53;
        *(_QWORD *)&v53 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      if ((v56 & 1) != 0)
      {
        v31 = v55;
        v55 = 0;
        if (v31)
          (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
      }
      v26 = (unsigned int *)*a2;
LABEL_53:
      if (v26)
        return;
LABEL_54:
      v5 += 10;
      if (v5 == v6)
        goto LABEL_57;
    }
    if ((_DWORD)v14
      && (v15 = (v14 - 1) | ((unint64_t)(v14 - 1) >> 1) | (((v14 - 1) | ((unint64_t)(v14 - 1) >> 1)) >> 2),
          v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8),
          v47[0] = (v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32)) + 1,
          v47[0] >= 3uLL))
    {
      *(_QWORD *)&v37 = "Unsupported relocation R_RISCV_ALIGN with alignment {0} larger than 2 (addend: {1})";
      *((_QWORD *)&v37 + 1) = 83;
      *(_QWORD *)&v38 = &v43;
      *((_QWORD *)&v38 + 1) = 2;
      v39 = &off_251C14EA8;
      v40 = v47;
      v41 = &off_251C15E70;
      v42 = (char *)&v46;
      v43 = &v39;
      v44 = &v41;
      v17 = operator new();
      v61 = 262;
      v57 = (llvm::formatv_object_base *)&v37;
      *(_QWORD *)v17 = off_251C15728;
      llvm::Twine::str(&v57, (std::string *)(v17 + 8));
      *a2 = v17;
    }
    else
    {
      v17 = 0;
      *a2 = 0;
    }
    goto LABEL_32;
  }
LABEL_57:
  *a2 = 0;
}

uint64_t llvm::jitlink::PerGraphGOTAndPLTStubsBuilder<`anonymous namespace'::PerGraphGOTAndPLTStubsBuilder_ELF_riscv>::getGOTEntry(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Section;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  unint64_t *v17;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21[4];
  uint64_t v22;
  unint64_t v23;

  v6 = a1 + 8;
  *(_OWORD *)v21 = *a2;
  *(_QWORD *)&v19 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 8), (uint64_t)v21, &v19, a4);
  v8 = v19;
  if (!v7)
    v8 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24);
  if (v8 == *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)a1;
    Section = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)a1;
    if (!Section)
    {
      Section = llvm::jitlink::LinkGraph::createSection(*(_QWORD *)a1, (uint64_t)"$__GOT", 6, 1);
      *(_QWORD *)(a1 + 56) = Section;
      v11 = *(_QWORD *)a1;
    }
    v12 = *(unsigned int *)(v11 + 168);
    v21[1] = v12;
    *(_QWORD *)&v19 = 0;
    v23 = v12;
    v22 = 0;
    v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v9, Section, v21, (uint64_t *)&v19, &v23, &v22);
    v14 = (uint64_t)v13;
    if (*(_DWORD *)(*(_QWORD *)a1 + 168) == 8)
      v15 = 3;
    else
      v15 = 2;
    llvm::jitlink::Block::addEdge(v13, v15, 0, (uint64_t)a2, 0);
    v16 = llvm::jitlink::LinkGraph::addAnonymousSymbol(*(_QWORD *)a1, v14, 0, *(unsigned int *)(*(_QWORD *)a1 + 168), 0, 0);
    v19 = *a2;
    v20 = v16;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(v6, &v19, &v20, v17, (uint64_t)v21);
    v8 = v21[0];
  }
  return *(_QWORD *)(v8 + 16);
}

void llvm::jitlink::ELFJITLinker_riscv::~ELFJITLinker_riscv(llvm::jitlink::ELFJITLinker_riscv *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_riscv>::fixUpBlocks(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  size_t v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  int v51;
  _DWORD *v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 192))
  {
    v3 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v3)
    {
      v4 = 24 * v3;
      v5 = *(_QWORD **)(a1 + 184);
      while (*v5 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v5 += 3;
        v4 -= 24;
        if (!v4)
          goto LABEL_92;
      }
    }
    else
    {
      v5 = *(_QWORD **)(a1 + 184);
    }
    v6 = *(_QWORD *)(a1 + 184) + 24 * v3;
    if (v5 != (_QWORD *)v6)
    {
      v49 = (_QWORD *)v6;
      do
      {
        v7 = v5[2];
        v51 = *(_DWORD *)(v7 + 20);
        v8 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v7 + 32);
        v10 = *(_QWORD *)(v7 + 32) + 8 * *(unsigned int *)(v7 + 48);
        if ((uint64_t **)v10 != v8)
        {
          v11 = v8;
          v12 = v9;
          do
          {
            v13 = *v11;
            if (v51 == 2 && (v13[1] & 4) == 0)
            {
              v15 = (const void *)v13[3];
              v14 = v13[4];
              v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v14, 0);
              v17 = (uint64_t)v16;
              if (v14)
                memmove(v16, v15, v14);
              v13[3] = v17;
              v13[4] = v14;
              v13[1] |= 4uLL;
            }
            v18 = (_QWORD *)v13[5];
            v19 = (_QWORD *)v13[6];
            while (v18 != v19)
            {
              v20 = *((unsigned __int8 *)v18 + 24);
              v21 = v20 >= 2;
              v22 = v20 - 2;
              if (v21)
              {
                v23 = *((unsigned int *)v18 + 2);
                v24 = (_DWORD *)(v13[3] + v23);
                v25 = *v13 + v23;
                switch(v22)
                {
                  case 0u:
                  case 0x1Bu:
                    v26 = **(_DWORD **)(*v18 + 16);
                    v27 = *(_DWORD *)(*v18 + 24);
                    goto LABEL_48;
                  case 1u:
                    v28 = **(_QWORD **)(*v18 + 16);
                    v29 = *(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL;
                    goto LABEL_50;
                  case 2u:
                    v30 = **(_QWORD **)(*v18 + 16) - v25 + (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + v18[2];
                    if ((unint64_t)((v30 >> 1) + 2048) >= 0x1000)
                      goto LABEL_79;
                    if (((**(_DWORD **)(*v18 + 16) - (_DWORD)v25 + *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4)) & 1) != 0)
                      goto LABEL_80;
                    v31 = ((_DWORD)v30 << 19) & 0x80000000 | (((v30 >> 5) & 0x3F) << 25) | (((v30 >> 1) & 0xF) << 8);
                    v32 = ((**(_DWORD **)(*v18 + 16)
                                        - v25
                                        + *(_DWORD *)(*v18 + 24)
                                        + *((_DWORD *)v18 + 4)) >> 4) & 0x80 | *v24 & 0x1FFF07F;
                    goto LABEL_44;
                  case 3u:
                    v30 = **(_QWORD **)(*v18 + 16) - v25 + (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + v18[2];
                    if ((unint64_t)((v30 >> 1) + 0x80000) >= 0x100000)
                      goto LABEL_79;
                    if (((**(_DWORD **)(*v18 + 16) - (_DWORD)v25 + *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4)) & 1) != 0)
                      goto LABEL_80;
                    *v24 = v30 & 0xFF000 | ((v30 >> 20) << 31) | (((v30 >> 1) & 0x3FF) << 21) | (((v30 >> 11) & 1) << 20) | *v24 & 0xFFF;
                    goto LABEL_74;
                  case 4u:
                    if ((**(_QWORD **)(*v18 + 16)
                        - v25
                        + (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL)
                        + v18[2]
                        + 2147485696u) >> 32)
                      goto LABEL_79;
                    v33 = v24[1] | ((**(_DWORD **)(*v18 + 16)
                                   - (_DWORD)v25
                                   + *(_DWORD *)(*v18 + 24)
                                   + *((_DWORD *)v18 + 4)) << 20);
                    *v24 |= (**(_DWORD **)(*v18 + 16) - v25 + *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4) + 2048) & 0xFFFFF000;
                    v24[1] = v33;
                    goto LABEL_74;
                  case 7u:
                    v34 = **(_QWORD **)(*v18 + 16) - v25 + (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + v18[2];
                    goto LABEL_38;
                  case 8u:
                    llvm::jitlink::getRISCVPCRelHi20((uint64_t)&v52, *(_QWORD *)(*(_QWORD *)(*v18 + 16) + 40), *(_QWORD *)(*(_QWORD *)(*v18 + 16) + 48), *(_QWORD *)(*v18 + 24));
                    if ((v53 & 1) != 0)
                      goto LABEL_76;
                    v35 = *(_DWORD *)(*(_QWORD *)v52 + 24)
                        + v52[4]
                        + **(_DWORD **)(*(_QWORD *)v52 + 16)
                        - (**(_DWORD **)(*v18 + 16)
                         + *(_DWORD *)(*v18 + 24));
                    goto LABEL_41;
                  case 9u:
                    llvm::jitlink::getRISCVPCRelHi20((uint64_t)&v52, *(_QWORD *)(*(_QWORD *)(*v18 + 16) + 40), *(_QWORD *)(*(_QWORD *)(*v18 + 16) + 48), *(_QWORD *)(*v18 + 24));
                    if ((v53 & 1) != 0)
                    {
LABEL_76:
                      v48 = (uint64_t)v52;
                      *a2 = (uint64_t)v52;
                      goto LABEL_77;
                    }
                    v36 = *(_DWORD *)(*(_QWORD *)v52 + 24)
                        + v52[4]
                        + **(_DWORD **)(*(_QWORD *)v52 + 16)
                        - (**(_DWORD **)(*v18 + 16)
                         + *(_DWORD *)(*v18 + 24));
LABEL_43:
                    v39 = v36 >> 5;
                    v32 = (v36 & 0x1F) << 7;
                    v31 = *v24 & 0x1FFF07F | (v39 << 25);
LABEL_44:
                    v37 = v31 | v32;
LABEL_73:
                    *v24 = v37;
                    goto LABEL_74;
                  case 0xAu:
                    v34 = (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + v18[2] + **(_QWORD **)(*v18 + 16);
LABEL_38:
                    if ((unint64_t)(v34 + 2147485696) >> 32)
                      goto LABEL_79;
                    v37 = (v34 + 2048) & 0xFFFFF000 | *v24 & 0xFFF;
                    goto LABEL_73;
                  case 0xBu:
                    v35 = *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4) + **(_DWORD **)(*v18 + 16);
LABEL_41:
                    v38 = *v24 & 0xFFFFF | ((unsigned __int16)v35 << 20);
                    goto LABEL_67;
                  case 0xCu:
                    v36 = *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4) + **(_DWORD **)(*v18 + 16);
                    goto LABEL_43;
                  case 0xDu:
                    v40 = **(_DWORD **)(*v18 + 16);
                    v41 = *(_DWORD *)(*v18 + 24) + *(unsigned __int8 *)v24;
                    goto LABEL_69;
                  case 0xEu:
                    v42 = **(_DWORD **)(*v18 + 16);
                    v43 = *(_DWORD *)(*v18 + 24) + *(unsigned __int16 *)v24;
                    goto LABEL_71;
                  case 0xFu:
                    v26 = **(_DWORD **)(*v18 + 16);
                    v27 = *(_DWORD *)(*v18 + 24) + *v24;
LABEL_48:
                    v37 = v27 + *((_DWORD *)v18 + 4) + v26;
                    goto LABEL_73;
                  case 0x10u:
                    v28 = **(_QWORD **)(*v18 + 16);
                    v29 = (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)v24;
LABEL_50:
                    v44 = v29 + v18[2] + v28;
                    goto LABEL_55;
                  case 0x11u:
                    v45 = *(unsigned __int8 *)v24
                        - (*(_DWORD *)(*v18 + 24)
                         + *((_DWORD *)v18 + 4))
                        - **(_DWORD **)(*v18 + 16);
                    goto LABEL_65;
                  case 0x12u:
                    v46 = *(unsigned __int16 *)v24
                        - (*(_DWORD *)(*v18 + 24)
                         + *((_DWORD *)v18 + 4))
                        - **(_DWORD **)(*v18 + 16);
                    goto LABEL_63;
                  case 0x13u:
                    v37 = *v24 - (*(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4)) - **(_DWORD **)(*v18 + 16);
                    goto LABEL_73;
                  case 0x14u:
                    v44 = *(_QWORD *)v24
                        - ((*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL)
                         + v18[2])
                        - **(_QWORD **)(*v18 + 16);
LABEL_55:
                    *(_QWORD *)v24 = v44;
                    goto LABEL_74;
                  case 0x15u:
                    v30 = **(_QWORD **)(*v18 + 16) - v25 + (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + v18[2];
                    if (v30 >> 1 != (char)(v30 >> 1))
                      goto LABEL_79;
                    if (((**(_DWORD **)(*v18 + 16) - (_DWORD)v25 + *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4)) & 1) != 0)
                      goto LABEL_80;
                    v47 = (16 * v30) & 0x1000 | (((v30 >> 3) & 3) << 10) | (v30 >> 1) & 0x60 | (8 * ((v30 >> 1) & 3));
                    v46 = *(_WORD *)v24 & 0xE383 | ((**(_DWORD **)(*v18 + 16)
                                                                 - v25
                                                                 + *(_DWORD *)(*v18 + 24)
                                                                 + *((_DWORD *)v18 + 4)) >> 3) & 4;
                    goto LABEL_62;
                  case 0x16u:
                    v30 = **(_QWORD **)(*v18 + 16) - v25 + (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + v18[2];
                    if ((unint64_t)((v30 >> 1) + 1024) >= 0x800)
                    {
LABEL_79:
                      llvm::jitlink::makeTargetOutOfRangeError(a1, v13, (uint64_t)v18, a2);
                      goto LABEL_81;
                    }
                    if (((**(_DWORD **)(*v18 + 16) - (_DWORD)v25 + *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4)) & 1) != 0)
                    {
LABEL_80:
                      llvm::jitlink::makeAlignmentError(v25, v30, 2u, (uint64_t)v18, a2);
LABEL_81:
                      v48 = *a2;
LABEL_77:
                      if (v48)
                        return;
                      break;
                    }
                    v47 = (2 * v30) & 0x1600 | (((v30 >> 4) & 1) << 11) | (v30 >> 2) & 0x100 | (((v30 >> 6) & 1) << 7) | (v30 >> 1) & 0x40 | (8 * ((v30 >> 1) & 7));
                    v46 = *(_WORD *)v24 & 0xE003 | ((**(_DWORD **)(*v18 + 16)
                                                                 - v25
                                                                 + *(_DWORD *)(*v18 + 24)
                                                                 + *((_DWORD *)v18 + 4)) >> 3) & 4;
LABEL_62:
                    LOWORD(v46) = v46 | v47;
LABEL_63:
                    *(_WORD *)v24 = v46;
LABEL_74:
                    *a2 = 0;
                    break;
                  case 0x17u:
                    v45 = *(_BYTE *)v24 & 0xC0 | (*(unsigned __int8 *)v24
                                                + *((_DWORD *)v18 + 4)
                                                - *(_DWORD *)(*v18 + 24)
                                                - **(_DWORD **)(*v18 + 16)) & 0x3F;
LABEL_65:
                    *(_BYTE *)v24 = v45;
                    goto LABEL_74;
                  case 0x18u:
                    v38 = *v24 & 0xFFFFFFC0 | (*(_DWORD *)(*v18 + 24)
                                             + *((_DWORD *)v18 + 4)
                                             + **(_DWORD **)(*v18 + 16)) & 0x3F;
LABEL_67:
                    *v24 = v38;
                    goto LABEL_74;
                  case 0x19u:
                    v40 = **(_DWORD **)(*v18 + 16);
                    v41 = *(_DWORD *)(*v18 + 24);
LABEL_69:
                    *(_BYTE *)v24 = v41 + *((_BYTE *)v18 + 16) + v40;
                    goto LABEL_74;
                  case 0x1Au:
                    v42 = **(_DWORD **)(*v18 + 16);
                    v43 = *(_DWORD *)(*v18 + 24);
LABEL_71:
                    *(_WORD *)v24 = v43 + *((_WORD *)v18 + 8) + v42;
                    goto LABEL_74;
                  case 0x1Cu:
                    v37 = **(_DWORD **)(*v18 + 16) - v25 + *(_DWORD *)(*v18 + 24) + *((_DWORD *)v18 + 4);
                    goto LABEL_73;
                  default:
                    goto LABEL_74;
                }
              }
              v18 += 4;
            }
            while (++v11 != v12)
            {
              if (((unint64_t)*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_86;
            }
            v11 = v12;
LABEL_86:
            ;
          }
          while (v11 != (uint64_t **)v10);
        }
        for (v5 += 3; ; v5 += 3)
        {
          if (v5 == v49)
            goto LABEL_92;
          if (*v5 < 0xFFFFFFFFFFFFFFFELL)
            break;
        }
      }
      while (v5 != v49);
    }
  }
LABEL_92:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_riscv>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::getRISCVPCRelHi20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (a3 == a2)
    goto LABEL_24;
  v5 = a4 & 0x1FFFFFFFFFFFFFFLL;
  v6 = (uint64_t)(a3 - a2) >> 5;
  while (1)
  {
    v7 = v6 >> 1;
    v8 = a2 + 32 * (v6 >> 1);
    v9 = *(unsigned int *)(v8 + 8);
    if (v5 <= v9)
      break;
    a2 = v8 + 32;
    v7 = v6 + ~v7;
LABEL_7:
    v6 = v7;
    if (!v7)
      goto LABEL_24;
  }
  if (v5 < v9)
  {
    a3 = a2 + 32 * (v6 >> 1);
    goto LABEL_7;
  }
  if (v6 >= 2)
  {
    do
    {
      v10 = v7 >> 1;
      v11 = a2 + 32 * (v7 >> 1);
      v12 = *(unsigned int *)(v11 + 8);
      v13 = v11 + 32;
      v7 += ~(v7 >> 1);
      if (v5 > v12)
        a2 = v13;
      else
        v7 = v10;
    }
    while (v7);
  }
  v14 = v8 + 32;
  if (a3 != v8 + 32)
  {
    v15 = (uint64_t)(a3 - (v8 + 32)) >> 5;
    a3 = v14;
    do
    {
      v16 = v15 >> 1;
      v17 = a3 + 32 * (v15 >> 1);
      v18 = *(unsigned int *)(v17 + 8);
      v19 = v17 + 32;
      v15 += ~(v15 >> 1);
      if (v5 < v18)
        v15 = v16;
      else
        a3 = v19;
    }
    while (v15);
  }
  while (a2 != a3)
  {
    if (*(_BYTE *)(a2 + 24) == 9)
    {
      *(_BYTE *)(a1 + 8) &= ~1u;
      goto LABEL_25;
    }
    a2 += 32;
  }
LABEL_24:
  llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"No HI20 PCREL relocation type be found for LO12 PCREL relocation type", &v20);
  *(_BYTE *)(a1 + 8) |= 1u;
  a2 = v20;
LABEL_25:
  *(_QWORD *)a1 = a2;
}

void llvm::jitlink::createLinkGraphFromELFObject_x86_64(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  llvm::jitlink::LinkGraph *v5;
  uint64_t v6;
  void (**v7)();
  llvm::jitlink::LinkGraph *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v12[0] = *a1;
  v12[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v12, 1, (uint64_t)&v13);
  v4 = v13;
  if ((v14 & 1) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else
  {
    llvm::jitlink::ELFLinkGraphBuilder_x86_64::ELFLinkGraphBuilder_x86_64(&v7, *(void **)(v13 + 32), *(_QWORD *)(v13 + 40), v13 + 56);
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::buildGraph((uint64_t)&v7, a2);
    v7 = off_251C15C00;
    MEMORY[0x24BD1B398](v11, 8);
    MEMORY[0x24BD1B398](v10, 8);
    MEMORY[0x24BD1B398](v9, 8);
    v5 = v8;
    v7 = (void (**)())&off_251C159D8;
    v8 = 0;
    if (v5)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v5);
      MEMORY[0x24BD1B3A4]();
    }
    v6 = v13;
    v13 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void llvm::jitlink::ELFLinkGraphBuilder_x86_64::~ELFLinkGraphBuilder_x86_64(llvm::jitlink::ELFLinkGraphBuilder_x86_64 *this)
{
  *(_QWORD *)this = off_251C15C00;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 16), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 13), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 10), 8);
  *(_QWORD *)this = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 1, 0);
}

{
  *(_QWORD *)this = off_251C15C00;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 16), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 13), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 10), 8);
  *(_QWORD *)this = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 1, 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::link_ELF_x86_64(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  int64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  __int128 *v80;
  __int128 *v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  llvm::jitlink::LinkGraph *v89;
  uint64_t v90;
  int64x2_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  int64x2_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  _QWORD *v100;
  llvm::jitlink::LinkGraph *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int64x2_t v114;
  _OWORD v115[2];
  int64x2_t v116;
  _OWORD v117[2];
  __int128 v118;
  uint64_t v119;
  _BYTE v120[24];
  __int128 v121;
  uint64_t v122;
  int64x2_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  llvm::jitlink::LinkGraph *v129;
  uint64_t v130;
  const char *v131;
  __int128 v132;
  _QWORD v133[3];
  _QWORD v134[3];
  _QWORD v135[3];
  _QWORD v136[3];
  __int128 v137;
  char *v138;
  __int128 v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  v119 = 0;
  v118 = 0u;
  v116 = 0u;
  memset(v117, 0, sizeof(v117));
  memset(v115, 0, sizeof(v115));
  v114 = 0u;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, (uint64_t)*a1 + 120))
  {
    v131 = ".eh_frame";
    *(_QWORD *)&v132 = 9;
    v133[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
            + 2;
    *((_QWORD *)&v121 + 1) = v115;
    *(_QWORD *)v120 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v115, 1uLL);
    *(_QWORD *)&v120[8] = *(_QWORD *)v120;
    *(_QWORD *)&v121 = *(_QWORD *)v120 + 32 * v4;
    v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)v120, (__int128 *)&v131)+ 32;
    *(_QWORD *)&v120[16] = v5;
    v6 = (__int128 *)v114.i64[1];
    v7 = *(_QWORD *)&v120[8];
    if (v114.i64[1] == v114.i64[0])
    {
      v8 = vdupq_n_s64(v114.u64[1]);
    }
    else
    {
      do
      {
        v6 -= 2;
        v7 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v7 - 32, v6);
      }
      while (v6 != (__int128 *)v114.i64[0]);
      v8 = v114;
      v5 = *(_QWORD *)&v120[16];
    }
    v114.i64[0] = v7;
    *(int64x2_t *)&v120[8] = v8;
    v9 = *(_QWORD *)&v115[0];
    *(_QWORD *)&v115[0] = v121;
    *(_QWORD *)&v121 = v9;
    *(_QWORD *)v120 = v8.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
    v114.i64[1] = v5;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
    v133[0] = 0;
    v10 = operator new(0x20uLL, (std::align_val_t)8uLL);
    v132 = xmmword_24AA2ACD0;
    *v10 = ".eh_frame";
    v10[1] = 9;
    *((_DWORD *)v10 + 4) = 8;
    *((_DWORD *)v10 + 5) = 101122563;
    *((_BYTE *)v10 + 24) = 9;
    v131 = (const char *)v10;
    v133[0] = &llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v114.i64[1] >= *(_QWORD *)&v115[0])
    {
      v12 = (v114.i64[1] - v114.i64[0]) >> 5;
      if ((unint64_t)(v12 + 1) >> 59)
        goto LABEL_146;
      v13 = (*(_QWORD *)&v115[0] - v114.i64[0]) >> 4;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (*(_QWORD *)&v115[0] - v114.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v14 = 0x7FFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      *((_QWORD *)&v121 + 1) = v115;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v115, v14);
      else
        v15 = 0;
      v16 = (uint64_t)&v15[32 * v12];
      *(_QWORD *)v120 = v15;
      *(_QWORD *)&v120[8] = v16;
      *(_QWORD *)&v121 = &v15[32 * v14];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v16, (__int128 *)&v131);
      v11 = v16 + 32;
      *(_QWORD *)&v120[16] = v16 + 32;
      v17 = (__int128 *)v114.i64[1];
      v18 = *(_QWORD *)&v120[8];
      if (v114.i64[1] == v114.i64[0])
      {
        v19 = vdupq_n_s64(v114.u64[1]);
      }
      else
      {
        do
        {
          v17 -= 2;
          v18 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18 - 32, v17);
        }
        while (v17 != (__int128 *)v114.i64[0]);
        v19 = v114;
        v11 = *(_QWORD *)&v120[16];
      }
      v114.i64[0] = v18;
      v114.i64[1] = v11;
      *(int64x2_t *)&v120[8] = v19;
      v20 = *(_QWORD *)&v115[0];
      *(_QWORD *)&v115[0] = v121;
      *(_QWORD *)&v121 = v20;
      *(_QWORD *)v120 = v19.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
    }
    else
    {
      v11 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v114.i64[1], (__int128 *)&v131)+ 32;
    }
    v114.i64[1] = v11;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
    v131 = ".eh_frame";
    *(_QWORD *)&v132 = 9;
    v133[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameNullTerminator,llvm::jitlink::EHFrameNullTerminator,void>::Callbacks
            + 2;
    if (v11 >= *(_QWORD *)&v115[0])
    {
      v22 = (v114.i64[1] - v114.i64[0]) >> 5;
      if ((unint64_t)(v22 + 1) >> 59)
        goto LABEL_146;
      v23 = (*(_QWORD *)&v115[0] - v114.i64[0]) >> 4;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (*(_QWORD *)&v115[0] - v114.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v24 = 0x7FFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      *((_QWORD *)&v121 + 1) = v115;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v115, v24);
      else
        v25 = 0;
      v26 = (uint64_t)&v25[32 * v22];
      *(_QWORD *)v120 = v25;
      *(_QWORD *)&v120[8] = v26;
      *(_QWORD *)&v121 = &v25[32 * v24];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v26, (__int128 *)&v131);
      v21 = v26 + 32;
      *(_QWORD *)&v120[16] = v26 + 32;
      v27 = (__int128 *)v114.i64[1];
      v28 = *(_QWORD *)&v120[8];
      if (v114.i64[1] == v114.i64[0])
      {
        v29 = vdupq_n_s64(v114.u64[1]);
      }
      else
      {
        do
        {
          v27 -= 2;
          v28 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28 - 32, v27);
        }
        while (v27 != (__int128 *)v114.i64[0]);
        v29 = v114;
        v21 = *(_QWORD *)&v120[16];
      }
      v114.i64[0] = v28;
      v114.i64[1] = v21;
      *(int64x2_t *)&v120[8] = v29;
      v30 = *(_QWORD *)&v115[0];
      *(_QWORD *)&v115[0] = v121;
      *(_QWORD *)&v121 = v30;
      *(_QWORD *)v120 = v29.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
    }
    else
    {
      v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v11, (__int128 *)&v131)+ 32;
    }
    v114.i64[1] = v21;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v131, *a2, (uint64_t)*a1 + 120);
    if (v133[0] < 8uLL)
    {
      *(_QWORD *)&v139 = llvm::jitlink::markAllSymbolsLive;
      v141 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v114.i64[1] >= *(_QWORD *)&v115[0])
      {
        v37 = (v114.i64[1] - v114.i64[0]) >> 5;
        if ((unint64_t)(v37 + 1) >> 59)
          goto LABEL_146;
        v38 = (*(_QWORD *)&v115[0] - v114.i64[0]) >> 4;
        if (v38 <= v37 + 1)
          v38 = v37 + 1;
        if (*(_QWORD *)&v115[0] - v114.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v39 = 0x7FFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        *((_QWORD *)&v121 + 1) = v115;
        if (v39)
          v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v115, v39);
        else
          v40 = 0;
        v45 = (uint64_t)&v40[32 * v37];
        *(_QWORD *)v120 = v40;
        *(_QWORD *)&v120[8] = v45;
        *(_QWORD *)&v121 = &v40[32 * v39];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v45, &v139);
        v32 = v45 + 32;
        *(_QWORD *)&v120[16] = v45 + 32;
        v46 = (__int128 *)v114.i64[1];
        v47 = *(_QWORD *)&v120[8];
        if (v114.i64[1] == v114.i64[0])
        {
          v48 = vdupq_n_s64(v114.u64[1]);
        }
        else
        {
          do
          {
            v46 -= 2;
            v47 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v47 - 32, v46);
          }
          while (v46 != (__int128 *)v114.i64[0]);
          v48 = v114;
          v32 = *(_QWORD *)&v120[16];
        }
        v114.i64[0] = v47;
        v114.i64[1] = v32;
        *(int64x2_t *)&v120[8] = v48;
        v50 = *(_QWORD *)&v115[0];
        *(_QWORD *)&v115[0] = v121;
        *(_QWORD *)&v121 = v50;
        *(_QWORD *)v120 = v48.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
      }
      else
      {
        v32 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v114.i64[1], &v139)+ 32;
      }
      v114.i64[1] = v32;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    }
    else
    {
      if (v114.i64[1] >= *(_QWORD *)&v115[0])
      {
        v33 = (v114.i64[1] - v114.i64[0]) >> 5;
        if ((unint64_t)(v33 + 1) >> 59)
          goto LABEL_146;
        v34 = (*(_QWORD *)&v115[0] - v114.i64[0]) >> 4;
        if (v34 <= v33 + 1)
          v34 = v33 + 1;
        if (*(_QWORD *)&v115[0] - v114.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v35 = 0x7FFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        *((_QWORD *)&v121 + 1) = v115;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v115, v35);
        else
          v36 = 0;
        v41 = (uint64_t)&v36[32 * v33];
        *(_QWORD *)v120 = v36;
        *(_QWORD *)&v120[8] = v41;
        *(_QWORD *)&v121 = &v36[32 * v35];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41, (__int128 *)&v131);
        v31 = v41 + 32;
        *(_QWORD *)&v120[16] = v41 + 32;
        v42 = (__int128 *)v114.i64[1];
        v43 = *(_QWORD *)&v120[8];
        if (v114.i64[1] == v114.i64[0])
        {
          v44 = vdupq_n_s64(v114.u64[1]);
        }
        else
        {
          do
          {
            v42 -= 2;
            v43 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v43 - 32, v42);
          }
          while (v42 != (__int128 *)v114.i64[0]);
          v44 = v114;
          v31 = *(_QWORD *)&v120[16];
        }
        v114.i64[0] = v43;
        v114.i64[1] = v31;
        *(int64x2_t *)&v120[8] = v44;
        v49 = *(_QWORD *)&v115[0];
        *(_QWORD *)&v115[0] = v121;
        *(_QWORD *)&v121 = v49;
        *(_QWORD *)v120 = v44.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
      }
      else
      {
        v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v114.i64[1], (__int128 *)&v131)+ 32;
      }
      v114.i64[1] = v31;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
    v133[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v115[1] >= *((_QWORD *)&v115[1] + 1))
    {
      v52 = (uint64_t)(*(_QWORD *)&v115[1] - *((_QWORD *)&v115[0] + 1)) >> 5;
      if ((unint64_t)(v52 + 1) >> 59)
        goto LABEL_146;
      v53 = (uint64_t)(*((_QWORD *)&v115[1] + 1) - *((_QWORD *)&v115[0] + 1)) >> 4;
      if (v53 <= v52 + 1)
        v53 = v52 + 1;
      if (*((_QWORD *)&v115[1] + 1) - *((_QWORD *)&v115[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v54 = 0x7FFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      *((_QWORD *)&v121 + 1) = (char *)&v115[1] + 8;
      if (v54)
        v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v115[1] + 8, v54);
      else
        v55 = 0;
      v56 = (uint64_t)&v55[32 * v52];
      *(_QWORD *)v120 = v55;
      *(_QWORD *)&v120[8] = v56;
      *(_QWORD *)&v121 = &v55[32 * v54];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v56, (__int128 *)&v131);
      v51 = v56 + 32;
      *(_QWORD *)&v120[16] = v56 + 32;
      v58 = (__int128 *)*((_QWORD *)&v115[0] + 1);
      v57 = *(__int128 **)&v115[1];
      v59 = *(_QWORD *)&v120[8];
      if (*(_QWORD *)&v115[1] == *((_QWORD *)&v115[0] + 1))
      {
        v60 = vdupq_n_s64(*(unint64_t *)&v115[1]);
      }
      else
      {
        do
        {
          v57 -= 2;
          v59 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v59 - 32, v57);
        }
        while (v57 != v58);
        v60 = *(int64x2_t *)((char *)v115 + 8);
        v51 = *(_QWORD *)&v120[16];
      }
      *((_QWORD *)&v115[0] + 1) = v59;
      *(_QWORD *)&v115[1] = v51;
      *(int64x2_t *)&v120[8] = v60;
      v61 = *((_QWORD *)&v115[1] + 1);
      *((_QWORD *)&v115[1] + 1) = v121;
      *(_QWORD *)&v121 = v61;
      *(_QWORD *)v120 = v60.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
    }
    else
    {
      v51 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v115[1], (__int128 *)&v131)+ 32;
    }
    *(_QWORD *)&v115[1] = v51;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
    v62 = operator new(0x20uLL, (std::align_val_t)8uLL);
    v132 = xmmword_24AA2ACD0;
    *v62 = 0;
    v62[1] = 0;
    *((_DWORD *)v62 + 4) = 0;
    v62[3] = llvm::jitlink::identifyELFSectionStartAndEndSymbols;
    v131 = (const char *)v62;
    v133[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>,llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>,void>::Callbacks
            + 4;
    MEMORY[0x24BD1B398](0, 8);
    if (v116.i64[1] >= *(_QWORD *)&v117[0])
    {
      v64 = (v116.i64[1] - v116.i64[0]) >> 5;
      if ((unint64_t)(v64 + 1) >> 59)
        goto LABEL_146;
      v65 = (*(_QWORD *)&v117[0] - v116.i64[0]) >> 4;
      if (v65 <= v64 + 1)
        v65 = v64 + 1;
      if (*(_QWORD *)&v117[0] - v116.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v66 = 0x7FFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      *((_QWORD *)&v121 + 1) = v117;
      if (v66)
        v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v117, v66);
      else
        v67 = 0;
      v68 = (uint64_t)&v67[32 * v64];
      *(_QWORD *)v120 = v67;
      *(_QWORD *)&v120[8] = v68;
      *(_QWORD *)&v121 = &v67[32 * v66];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v68, (__int128 *)&v131);
      v63 = v68 + 32;
      *(_QWORD *)&v120[16] = v68 + 32;
      v69 = (__int128 *)v116.i64[1];
      v70 = (__int128 *)v116.i64[0];
      v71 = *(_QWORD *)&v120[8];
      if (v116.i64[1] == v116.i64[0])
      {
        v72 = vdupq_n_s64(v116.u64[1]);
      }
      else
      {
        do
        {
          v69 -= 2;
          v71 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v71 - 32, v69);
        }
        while (v69 != v70);
        v72 = v116;
        v63 = *(_QWORD *)&v120[16];
      }
      v116.i64[0] = v71;
      v116.i64[1] = v63;
      *(int64x2_t *)&v120[8] = v72;
      v73 = *(_QWORD *)&v117[0];
      *(_QWORD *)&v117[0] = v121;
      *(_QWORD *)&v121 = v73;
      *(_QWORD *)v120 = v72.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
    }
    else
    {
      v63 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v116.i64[1], (__int128 *)&v131)+ 32;
    }
    v116.i64[1] = v63;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
    MEMORY[0x24BD1B398](0, 8);
    v131 = (const char *)llvm::jitlink::x86_64::optimizeGOTAndStubAccesses;
    v133[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v117[1] >= *((_QWORD *)&v117[1] + 1))
    {
      v75 = (uint64_t)(*(_QWORD *)&v117[1] - *((_QWORD *)&v117[0] + 1)) >> 5;
      if ((unint64_t)(v75 + 1) >> 59)
        goto LABEL_146;
      v76 = (uint64_t)(*((_QWORD *)&v117[1] + 1) - *((_QWORD *)&v117[0] + 1)) >> 4;
      if (v76 <= v75 + 1)
        v76 = v75 + 1;
      if (*((_QWORD *)&v117[1] + 1) - *((_QWORD *)&v117[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v77 = 0x7FFFFFFFFFFFFFFLL;
      else
        v77 = v76;
      *((_QWORD *)&v121 + 1) = (char *)&v117[1] + 8;
      if (v77)
        v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v117[1] + 8, v77);
      else
        v78 = 0;
      v79 = (uint64_t)&v78[32 * v75];
      *(_QWORD *)v120 = v78;
      *(_QWORD *)&v120[8] = v79;
      *(_QWORD *)&v121 = &v78[32 * v77];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v79, (__int128 *)&v131);
      v74 = v79 + 32;
      *(_QWORD *)&v120[16] = v79 + 32;
      v81 = (__int128 *)*((_QWORD *)&v117[0] + 1);
      v80 = *(__int128 **)&v117[1];
      v82 = *(_QWORD *)&v120[8];
      if (*(_QWORD *)&v117[1] == *((_QWORD *)&v117[0] + 1))
      {
        v83 = vdupq_n_s64(*(unint64_t *)&v117[1]);
      }
      else
      {
        do
        {
          v80 -= 2;
          v82 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v82 - 32, v80);
        }
        while (v80 != v81);
        v83 = *(int64x2_t *)((char *)v117 + 8);
        v74 = *(_QWORD *)&v120[16];
      }
      *((_QWORD *)&v117[0] + 1) = v82;
      *(_QWORD *)&v117[1] = v74;
      *(int64x2_t *)&v120[8] = v83;
      v84 = *((_QWORD *)&v117[1] + 1);
      *((_QWORD *)&v117[1] + 1) = v121;
      *(_QWORD *)&v121 = v84;
      *(_QWORD *)v120 = v83.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v120);
    }
    else
    {
      v74 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v117[1], (__int128 *)&v131)+ 32;
    }
    *(_QWORD *)&v117[1] = v74;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v131);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v120, *a2, *a1, &v114);
  if (!*(_QWORD *)v120)
  {
    v87 = (_QWORD *)operator new();
    v88 = *a2;
    *a2 = 0;
    v89 = *a1;
    *a1 = 0;
    v90 = *(_QWORD *)&v115[0];
    v91 = v114;
    v114 = 0uLL;
    v92 = *((_QWORD *)&v115[1] + 1);
    v93 = *(_OWORD *)((char *)v115 + 8);
    memset(v115, 0, sizeof(v115));
    v94 = *(_QWORD *)&v117[0];
    v95 = v116;
    v116 = 0uLL;
    v96 = *((_QWORD *)&v117[1] + 1);
    v97 = *(_OWORD *)((char *)v117 + 8);
    memset(v117, 0, sizeof(v117));
    v98 = v119;
    v99 = v118;
    v118 = 0uLL;
    v119 = 0;
    v129 = v89;
    v130 = v88;
    *(int64x2_t *)v120 = v91;
    v131 = 0;
    v132 = 0uLL;
    v121 = v93;
    *(_QWORD *)&v120[16] = v90;
    v122 = v92;
    memset(v133, 0, sizeof(v133));
    v123 = v95;
    memset(v134, 0, sizeof(v134));
    v125 = v97;
    v124 = v94;
    v126 = v96;
    memset(v135, 0, sizeof(v135));
    v127 = v99;
    v128 = v98;
    memset(v136, 0, sizeof(v136));
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v87, &v130, (uint64_t *)&v129, (uint64_t)v120);
    *v100 = &off_251C15F98;
    *(_QWORD *)&v139 = &v127;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v139);
    *(_QWORD *)&v139 = &v125;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v139);
    *(_QWORD *)&v139 = &v123;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v139);
    *(_QWORD *)&v139 = &v121;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v139);
    *(_QWORD *)&v139 = v120;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v139);
    v101 = v129;
    v129 = 0;
    if (v101)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v101);
      MEMORY[0x24BD1B3A4]();
    }
    v102 = v130;
    v130 = 0;
    if (v102)
      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
    *v87 = &off_251C15F70;
    v87[19] = 0;
    *(_QWORD *)&v137 = v87;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::ELFJITLinker_x86_64::ELFJITLinker_x86_64(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1},llvm::jitlink::ELFJITLinker_x86_64::ELFJITLinker_x86_64(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
         + 2;
    v103 = v87[10];
    v104 = v87[11];
    if (v103 < v104)
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v87[10], &v137);
      v105 = v103 + 32;
      goto LABEL_144;
    }
    v106 = v87[9];
    v107 = (uint64_t)(v103 - v106) >> 5;
    if (!((unint64_t)(v107 + 1) >> 59))
    {
      v108 = v104 - v106;
      v109 = v108 >> 4;
      if (v108 >> 4 <= (unint64_t)(v107 + 1))
        v109 = v107 + 1;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFE0)
        v110 = 0x7FFFFFFFFFFFFFFLL;
      else
        v110 = v109;
      v142 = v87 + 11;
      if (v110)
        v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(v87 + 11), v110);
      else
        v111 = 0;
      v112 = (uint64_t)&v111[32 * v107];
      *(_QWORD *)&v139 = v111;
      *((_QWORD *)&v139 + 1) = v112;
      v141 = &v111[32 * v110];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v112, &v137);
      v140 = v112 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(v87 + 9, &v139);
      v105 = v87[10];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
LABEL_144:
      v87[10] = v105;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v137);
      *(_QWORD *)v120 = v136;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
      *(_QWORD *)v120 = v135;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
      *(_QWORD *)v120 = v134;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
      *(_QWORD *)v120 = v133;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
      *(_QWORD *)v120 = &v131;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
      *(_QWORD *)v120 = v87;
      llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v87, (uint64_t *)v120);
      v86 = *(_QWORD *)v120;
      *(_QWORD *)v120 = 0;
      if (!v86)
        goto LABEL_127;
      goto LABEL_126;
    }
LABEL_146:
    abort();
  }
  v85 = *a2;
  v113 = *(_QWORD *)v120;
  *(_QWORD *)v120 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v85 + 24))(v85, &v113);
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v86 = *(_QWORD *)v120;
  if (*(_QWORD *)v120)
LABEL_126:
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
LABEL_127:
  *(_QWORD *)v120 = &v118;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
  *(_QWORD *)v120 = (char *)v117 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
  *(_QWORD *)v120 = &v116;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
  *(_QWORD *)v120 = (char *)v115 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
  *(_QWORD *)v120 = &v114;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v120);
}

uint64_t `anonymous namespace'::buildTables_ELF_x86_64@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t Section;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t *v19;
  uint64_t v20[2];
  unsigned int v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[4];
  _OWORD v37[8];
  _OWORD v38[4];
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42[3];

  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v25 = v27;
  v26 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v37);
  v38[0] = v37[0];
  v38[1] = v37[1];
  v38[2] = v37[2];
  v38[3] = v37[3];
  llvm::jitlink::LinkGraph::blocks(this, &v30);
  v36[0] = v32;
  v36[1] = v33;
  v36[2] = v34;
  v36[3] = v35;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v39, v38, (uint64_t *)v36);
  v5 = v39;
  v19 = v40;
  if (v39 != v40)
  {
    do
    {
      v6 = *v5;
      v8 = *(_QWORD *)(*v5 + 40);
      v7 = *(_QWORD *)(*v5 + 48);
      while (v8 != v7)
      {
        if ((llvm::jitlink::x86_64::GOTTableManager::visitEdge((uint64_t)v27, (uint64_t)this, v6, v8) & 1) == 0
          && (llvm::jitlink::x86_64::PLTTableManager::visitEdge((uint64_t)v23, (uint64_t)this, v6, (unint64_t *)v8) & 1) == 0
          && *(_BYTE *)(v8 + 24) == 23)
        {
          *(_BYTE *)(v8 + 24) = 7;
          v10 = *(__int128 **)v8;
          v37[0] = *(_OWORD *)*(_QWORD *)v8;
          *(_QWORD *)&v30 = 0;
          v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v20, (uint64_t)v37, &v30, v9);
          v12 = v30;
          if (!v11)
            v12 = v20[0] + 24 * v21;
          if (v12 == v20[0] + 24 * v21)
          {
            Section = v22;
            if (!v22)
            {
              Section = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__TLSINFO", 10, 1);
              v22 = Section;
            }
            v14 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this, 16, 0);
            *v14 = 0;
            v14[1] = 0;
            *(_QWORD *)&v37[0] = v14;
            *((_QWORD *)&v37[0] + 1) = 16;
            *(_QWORD *)&v30 = 0;
            v41 = 0;
            v42[0] = 8;
            v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, Section, (uint64_t *)v37, (uint64_t *)&v30, v42, &v41);
            llvm::jitlink::Block::addEdge(v15, 2, 8, (uint64_t)v10, 0);
            v16 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v15, 0, 16, 0, 0);
            v30 = *v10;
            v31 = v16;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v20, &v30, &v31, v17, (uint64_t)v37);
            v12 = *(_QWORD *)&v37[0];
          }
          *(_QWORD *)v8 = *(_QWORD *)(v12 + 16);
        }
        v8 += 32;
      }
      ++v5;
    }
    while (v5 != v19);
    v5 = v39;
  }
  if (v5)
  {
    v40 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x24BD1B398](v20[0], 8);
  MEMORY[0x24BD1B398](v23[0], 8);
  return MEMORY[0x24BD1B398](v27[0], 8);
}

uint64_t llvm::jitlink::identifyELFSectionStartAndEndSymbols(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  if (v5 < 7)
  {
    if (v5 < 5)
      return 0;
    goto LABEL_8;
  }
  if (*(_DWORD *)v4 != 1953718111 || *(_DWORD *)(v4 + 3) != 1953653108)
  {
LABEL_8:
    if (*(_DWORD *)v4 != 1852137311 || *(_BYTE *)(v4 + 4) != 100)
      return 0;
    result = llvm::jitlink::LinkGraph::findSectionByName(a1, v4 + 5, v5 - 5, a4);
    if (!result)
      return 0;
    return result;
  }
  result = llvm::jitlink::LinkGraph::findSectionByName(a1, v4 + 7, v5 - 7, a4);
  if (!result)
    return 0;
  return result;
}

_QWORD *llvm::jitlink::ELFLinkGraphBuilder_x86_64::ELFLinkGraphBuilder_x86_64(_QWORD *a1, void *a2, size_t a3, uint64_t a4)
{
  llvm::formatv_object_base *v9;
  __int16 v10;
  std::string __p[2];

  v9 = (llvm::formatv_object_base *)"x86_64-unknown-linux";
  v10 = 259;
  llvm::Triple::Triple(__p, &v9);
  llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((uint64_t)a1, a4, (uint64_t)__p, a2, a3, (uint64_t)llvm::jitlink::x86_64::getEdgeKindName);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  *a1 = &off_251C15F30;
  return a1;
}

void llvm::jitlink::ELFLinkGraphBuilder_x86_64::addRelocations(llvm::jitlink::ELFLinkGraphBuilder_x86_64 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t GraphBlock;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  int v15;
  uint64_t GraphSymbol;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  const char *ELFRelocationTypeName;
  _UNKNOWN **v23;
  _UNKNOWN **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  __int128 v34;
  __int128 v35;
  uint64_t (**v36)(llvm::detail::format_adapter *__hidden);
  _DWORD *v37;
  _QWORD v38[2];
  uint64_t (**v39)(llvm::detail::format_adapter *__hidden);
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[4];
  __int16 v44;
  unsigned int v45;
  uint64_t v46;
  _UNKNOWN **v47;
  const char *v48;
  _UNKNOWN **v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  char v55;
  unsigned int *v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 5);
  if (!v3)
  {
LABEL_61:
    *a2 = 0;
    return;
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + (v3 << 6);
  while (1)
  {
    v7 = *(_DWORD *)(v5 + 4);
    if (v7 == 9)
      break;
    if (v7 == 4)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*((_QWORD **)this + 3), *(_DWORD *)(v5 + 44), (uint64_t)&v56);
      if ((v57 & 1) == 0)
      {
        v8 = (_QWORD *)*((_QWORD *)this + 3);
        *(_QWORD *)&v34 = llvm::object::defaultWarningHandler;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v8, v56, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v34, (uint64_t)&v54);
        if ((v55 & 1) != 0)
        {
          v29 = v54;
          *(_QWORD *)&v54 = 0;
          *a2 = v29;
          goto LABEL_52;
        }
        if (!*((_BYTE *)this + 72)
          && (v34 = v54,
              std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v34) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278])|| (*(unsigned int (**)(llvm::jitlink::ELFLinkGraphBuilder_x86_64 *, unsigned int *))(*(_QWORD *)this + 40))(this, v56))
        {
          *a2 = 0;
          goto LABEL_52;
        }
        GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock((uint64_t)this, *(_DWORD *)(v5 + 44));
        if (!GraphBlock)
        {
          LOWORD(v36) = 1283;
          *(_QWORD *)&v34 = "Refencing a section that wasn't added to the graph: ";
          v35 = v54;
          getErrorErrorCat();
          v30 = operator new();
          *(_QWORD *)v30 = off_251C127D0;
          llvm::Twine::str((llvm::formatv_object_base **)&v34, (std::string *)(v30 + 8));
          *(_QWORD *)(v30 + 32) = 3;
          *(_QWORD *)(v30 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
          *(_BYTE *)(v30 + 48) = 1;
          *a2 = v30;
          goto LABEL_52;
        }
        v10 = (_QWORD *)GraphBlock;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*((_QWORD **)this + 3), (_QWORD *)v5, (uint64_t)&v51);
        v11 = v51;
        if ((v53 & 1) != 0)
        {
          v51 = 0;
        }
        else
        {
          if (v52)
          {
            v12 = 24 * v52;
            v13 = (_QWORD *)(v51 + 16);
            while (1)
            {
              v14 = v56;
              v15 = *((_DWORD *)v13 - 1);
              v42 = v15;
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*((_QWORD **)this + 3), (uint64_t)(v13 - 2), *((_QWORD **)this + 6), (uint64_t)&v58);
              if ((v59 & 1) != 0)
              {
                v20 = v58;
                v58 = 0;
                *a2 = v20;
              }
              else
              {
                GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol((uint64_t)this, v15);
                if (GraphSymbol)
                {
                  v17 = *((_DWORD *)v13 - 2);
                  v45 = v17;
                  switch(v17)
                  {
                    case 1u:
                      v18 = *v13;
                      v19 = 2;
                      goto LABEL_34;
                    case 2u:
                      v18 = *v13;
                      v19 = 7;
                      goto LABEL_34;
                    case 3u:
                    case 5u:
                    case 6u:
                    case 7u:
                    case 8u:
                    case 0xCu:
                    case 0xDu:
                    case 0xEu:
                    case 0xFu:
                    case 0x10u:
                    case 0x11u:
                    case 0x12u:
                    case 0x14u:
                    case 0x15u:
                    case 0x16u:
                    case 0x17u:
                    case 0x1Au:
                      goto LABEL_22;
                    case 4u:
                      v18 = *v13 + 4;
                      v19 = 11;
                      goto LABEL_34;
                    case 9u:
                      v18 = *v13;
                      v19 = 15;
                      goto LABEL_34;
                    case 0xAu:
                      v18 = *v13;
                      v19 = 3;
                      goto LABEL_34;
                    case 0xBu:
                      v18 = *v13;
                      v19 = 4;
                      goto LABEL_34;
                    case 0x13u:
                      v18 = *v13;
                      v19 = 23;
                      goto LABEL_34;
                    case 0x18u:
                    case 0x1Du:
                      v18 = *v13;
                      v19 = 6;
                      goto LABEL_34;
                    case 0x19u:
                      v18 = *v13;
                      v19 = 10;
                      goto LABEL_34;
                    case 0x1Bu:
                      v18 = *v13;
                      v19 = 17;
                      goto LABEL_34;
                    case 0x1Cu:
                      v18 = *v13;
                      v19 = 16;
                      goto LABEL_34;
                    default:
                      if (v17 == 41)
                      {
                        v18 = 0;
                        v19 = 21;
                      }
                      else
                      {
                        if (v17 != 42)
                        {
LABEL_22:
                          *(_QWORD *)&v34 = "{0:d}: ";
                          *((_QWORD *)&v34 + 1) = 7;
                          *(_QWORD *)&v35 = v38;
                          *((_QWORD *)&v35 + 1) = 1;
                          v36 = &off_251C12BB8;
                          v37 = &v45;
                          v38[0] = &v36;
                          v43[0] = "Unsupported x86-64 relocation type ";
                          v43[2] = &v34;
                          v44 = 1539;
                          ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)0x3E, v17);
                          v24 = v23;
                          v25 = operator new();
                          v46 = (uint64_t)v43;
                          v47 = v24;
                          v48 = ELFRelocationTypeName;
                          v49 = v24;
                          v50 = 1282;
                          *(_QWORD *)v25 = off_251C15728;
                          llvm::Twine::str((llvm::formatv_object_base **)&v46, (std::string *)(v25 + 8));
                          *a2 = v25;
                          break;
                        }
                        v18 = 0;
                        v19 = 20;
                      }
LABEL_34:
                      v26 = *((_DWORD *)v13 - 4) + v14[4] - *(_DWORD *)v10;
                      *(_QWORD *)&v34 = GraphSymbol;
                      DWORD2(v34) = v26;
                      *(_QWORD *)&v35 = v18;
                      BYTE8(v35) = v19;
                      llvm::jitlink::Block::addEdge(v10, &v34);
                      *a2 = 0;
                      break;
                  }
                }
                else
                {
                  v21 = *((_DWORD *)this + 28);
                  *(_QWORD *)&v34 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, "
                                    "shndx: {1} Size of table: {2}";
                  *((_QWORD *)&v34 + 1) = 113;
                  *(_QWORD *)&v35 = v41;
                  *((_QWORD *)&v35 + 1) = 3;
                  v36 = &off_251C158D8;
                  v37 = &v42;
                  v38[0] = &off_251C15AB8;
                  v38[1] = v58 + 6;
                  v39 = &off_251C15650;
                  v40 = v21;
                  v41[0] = &v36;
                  v41[1] = v38;
                  v41[2] = &v39;
                  getErrorErrorCat();
                  v46 = 3;
                  v47 = &getErrorErrorCat(void)::ErrorErrorCat;
                  llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v34, &v46, a2);
                }
              }
              if ((v59 & 1) != 0)
              {
                v27 = v58;
                v58 = 0;
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
              }
              if (*a2)
                break;
              v13 += 3;
              v12 -= 24;
              if (!v12)
                goto LABEL_40;
            }
LABEL_49:
            if ((v53 & 1) != 0)
            {
              v31 = v51;
              v51 = 0;
              if (v31)
                (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            }
LABEL_52:
            if ((v55 & 1) != 0)
            {
              v32 = v54;
              *(_QWORD *)&v54 = 0;
              if (v32)
                (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            }
            if ((v57 & 1) != 0)
            {
              v33 = v56;
              v56 = 0;
              if (v33)
                (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
            }
            v28 = (unsigned int *)*a2;
LABEL_59:
            if (v28)
              return;
            goto LABEL_60;
          }
LABEL_40:
          v11 = 0;
        }
        *a2 = v11;
        goto LABEL_49;
      }
      v28 = v56;
      *a2 = (uint64_t)v56;
      goto LABEL_59;
    }
    *a2 = 0;
LABEL_60:
    v5 += 64;
    if (v5 == v6)
      goto LABEL_61;
  }
  getErrorErrorCat();
  *(_QWORD *)&v34 = 3;
  *((_QWORD *)&v34 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"No SHT_REL in valid x64 ELF object files", (uint64_t *)&v34, a2);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[3];

  v6 = a2 + 208;
  v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  v9 = v8;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224));
  std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(&v24, v7, v9, v10, (uint64_t)v10);
  v11 = v24;
  v12 = v25;
  if (v24 == v25)
    goto LABEL_16;
  do
  {
    v13 = *v11;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a2, *v11);
    if (!v14)
      goto LABEL_14;
    v16 = v14;
    v17 = v15;
    v27 = v14;
    v29[0] = 0;
    v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, &v27, v29);
    v19 = v29[0];
    if (!v18)
      v19 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
    if (v19 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v26, v16);
      v27 = v16;
      v28 = v26;
      llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>(a1, &v27, &v28, (uint64_t)v29);
      v19 = v29[0];
    }
    v20 = *(_QWORD *)(v19 + 8);
    if ((v17 & 1) != 0)
    {
      if (v20)
      {
        v22 = a2;
        v23 = (_QWORD *)v13;
        v21 = 0;
        goto LABEL_12;
      }
    }
    else if (v20)
    {
      v20 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v20 + 32);
      v22 = a2;
      v23 = (_QWORD *)v13;
LABEL_12:
      llvm::jitlink::LinkGraph::makeDefined(v22, v23, v20, v21, 0, 0, 2, 0);
      goto LABEL_14;
    }
    llvm::jitlink::LinkGraph::makeAbsolute(a2, v13, v20);
LABEL_14:
    ++v11;
  }
  while (v11 != v12);
  v11 = v24;
LABEL_16:
  *a3 = 0;
  if (v11)
  {
    v25 = v11;
    operator delete(v11);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>>(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::jitlink::DefineExternalSectionStartAndEndSymbols<llvm::jitlink::SectionRangeSymbolDesc (&)(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)>>()
{
  JUMPOUT(0x24BD1B398);
}

void llvm::jitlink::ELFJITLinker_x86_64::~ELFJITLinker_x86_64(llvm::jitlink::ELFJITLinker_x86_64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_x86_64>::fixUpBlocks(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__src;
  uint64_t v22;
  int v23;

  if (*(_DWORD *)(a2 + 192))
  {
    v6 = *(unsigned int *)(a2 + 200);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      v8 = *(_QWORD **)(a2 + 184);
      while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(_QWORD **)(a2 + 184);
    }
    v9 = *(_QWORD *)(a2 + 184) + 24 * v6;
LABEL_10:
    if (v8 != (_QWORD *)v9)
    {
      v10 = v8[2];
      v23 = *(_DWORD *)(v10 + 20);
      v11 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32);
      v22 = *(_QWORD *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48);
      if ((uint64_t **)v22 == v11)
        goto LABEL_28;
      v13 = v11;
      v14 = v12;
      do
      {
        v15 = *v13;
        if (v23 == 2 && (v15[1] & 4) == 0)
        {
          v16 = v15[4];
          __src = (void *)v15[3];
          v17 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v16, 0);
          v18 = (uint64_t)v17;
          if (v16)
            memmove(v17, __src, v16);
          v15[3] = v18;
          v15[4] = v16;
          v15[1] |= 4uLL;
        }
        v19 = v15[5];
        v20 = v15[6];
        while (v19 != v20)
        {
          if (*(unsigned __int8 *)(v19 + 24) >= 2u)
          {
            llvm::jitlink::x86_64::applyFixup(a2, v15, v19, *(_QWORD *)(a1 + 152), a3);
            if (*a3)
              return;
          }
          v19 += 32;
        }
        while (++v13 != v14)
        {
          if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_27;
        }
        v13 = v14;
LABEL_27:
        ;
      }
      while (v13 != (uint64_t **)v22);
LABEL_28:
      while (1)
      {
        v8 += 3;
        if (v8 == (_QWORD *)v9)
          break;
        if (*v8 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_10;
      }
    }
  }
LABEL_6:
  *a3 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_x86_64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::ELFJITLinker_x86_64::ELFJITLinker_x86_64(std::unique_ptr<llvm::jitlink::JITLinkContext>,std::unique_ptr<llvm::jitlink::LinkGraph>,llvm::jitlink::PassConfiguration)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17;
  unint64_t *SectionByName;
  unint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37[2];
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  unint64_t *v44;
  __int128 v45;
  _QWORD v46[3];

  v5 = *a1;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v39 = a2;
  v40 = v5;
  v6 = a2 + 208;
  v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  v9 = v8;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
  v10 = (uint64_t *)(*(_QWORD *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224));
  std::vector<llvm::jitlink::Symbol *>::vector<llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,0>(&v41, v7, v9, v10, (uint64_t)v10);
  v12 = v41;
  v13 = v42;
  if (v41 != v42)
  {
    v35 = v5;
    v36 = a3;
    do
    {
      v14 = *(_QWORD **)v12;
      if (*(_QWORD *)(*(_QWORD *)v12 + 8) == 21)
      {
        v15 = *(_QWORD *)*v14 == 0x5F4C41424F4C475FLL && *(_QWORD *)(*v14 + 8) == 0x545F54455346464FLL;
        if (v15 && *(_QWORD *)(*v14 + 13) == 0x5F454C4241545F54)
        {
          v17 = v40;
          SectionByName = (unint64_t *)llvm::jitlink::LinkGraph::findSectionByName(v39, (uint64_t)"$__GOT", 6, v11);
          if (SectionByName)
          {
            v19 = SectionByName;
            *(_QWORD *)(v17 + 152) = v14;
            v44 = SectionByName;
            v46[0] = 0;
            v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(v37, &v44, v46);
            v21 = v46[0];
            if (!v20)
              v21 = v37[0] + 24 * v38;
            if (v21 == v37[0] + 24 * v38)
            {
              llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v43, (uint64_t)v19);
              v44 = v19;
              v45 = v43;
              llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>((uint64_t)v37, &v44, &v45, (uint64_t)v46);
              v21 = v46[0];
            }
            v22 = *(_QWORD *)(v21 + 8);
            if (v22)
              llvm::jitlink::LinkGraph::makeDefined(a2, v14, v22, 0, 0, 0, 2, 0);
            else
              llvm::jitlink::LinkGraph::makeAbsolute(a2, (uint64_t)v14, 0);
          }
        }
      }
      v12 += 8;
    }
    while (v12 != v13);
    v12 = v41;
    v5 = v35;
    a3 = v36;
  }
  if (v12)
  {
    v42 = v12;
    operator delete(v12);
  }
  if (!*(_QWORD *)(v5 + 152))
  {
    v23 = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"$__GOT", 6, v11);
    if (v23)
    {
      v24 = v23;
      v25 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v23 + 56);
      v27 = *(_QWORD *)(v24 + 56) + 8 * *(unsigned int *)(v24 + 72);
      if ((_QWORD *)v27 == v25)
      {
LABEL_39:
        llvm::jitlink::SectionRange::SectionRange(&v44, v24);
        v31 = v44;
        if (v44)
        {
          v32 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
          *(_QWORD *)v32 = "_GLOBAL_OFFSET_TABLE_";
          *(_QWORD *)(v32 + 8) = 21;
          *(_QWORD *)(v32 + 16) = v31;
          *(_OWORD *)(v32 + 24) = xmmword_24AA2DF30;
          v33 = v31[2] + 56;
          v41 = (char *)v32;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v41, (uint64_t)v46);
        }
        else
        {
          v32 = (unint64_t)llvm::jitlink::LinkGraph::addAbsoluteSymbol(a2, (uint64_t)"_GLOBAL_OFFSET_TABLE_", 21, 0, 0, 0, 2, 1);
        }
        *(_QWORD *)(v5 + 152) = v32;
      }
      else
      {
        while (1)
        {
          v28 = *v25;
          if (*(_QWORD *)(*v25 + 8) == 21)
          {
            v29 = **(_QWORD **)v28 == 0x5F4C41424F4C475FLL && *(_QWORD *)(*(_QWORD *)v28 + 8) == 0x545F54455346464FLL;
            if (v29 && *(_QWORD *)(*(_QWORD *)v28 + 13) == 0x5F454C4241545F54)
              break;
          }
          while (++v25 != v26)
          {
            if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_38;
          }
          v25 = v26;
LABEL_38:
          if (v25 == (_QWORD *)v27)
            goto LABEL_39;
        }
        *(_QWORD *)(v5 + 152) = v28;
      }
    }
  }
  *a3 = 0;
  return MEMORY[0x24BD1B398](v37[0], 8);
}

void llvm::jitlink::createLinkGraphFromCOFFObject(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  BOOL v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _OWORD v23[2];
  uint64_t v24;
  llvm::formatv_object_base *v25[4];
  __int16 v26;

  v4 = *(unsigned __int8 **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (llvm::identify_magic(*(unsigned __int8 **)a1, v5) != 24)
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Invalid COFF buffer", &v24);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v24;
    return;
  }
  if (v5 > 0x13)
  {
    if (v5 >= 0x44 && *v4 == 77 && v4[1] == 90)
    {
      v9 = *((unsigned int *)v4 + 15);
      if (*(_DWORD *)&v4[v9] != 17744)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[19]>((uint64_t *)a2);
LABEL_37:
        *(_BYTE *)(a2 + 8) |= 1u;
        return;
      }
      if (v5 < v9 + 24)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[22]>((uint64_t *)a2);
        goto LABEL_37;
      }
      v10 = 0;
      v4 += v9 + 4;
    }
    else
    {
      if (*(_WORD *)v4)
        goto LABEL_11;
      v10 = 0;
      if (*((__int16 *)v4 + 1) != -1 || v5 < 0x38)
        goto LABEL_12;
      if (*((unsigned __int16 *)v4 + 2) >= 2u
        && (*(_QWORD *)(v4 + 12) == 0x4BA9BAEED1BAA1C7
          ? (v18 = *(_QWORD *)(v4 + 20) == 0xB8DCA46AF6FA20AFLL)
          : (v18 = 0),
            v18))
      {
        v10 = v4;
        v4 = 0;
      }
      else
      {
LABEL_11:
        v10 = 0;
      }
    }
LABEL_12:
    v11 = v10 + 6;
    if (v4)
      v11 = v4;
    v12 = *(unsigned __int16 *)v11;
    if (v12 == 34404)
    {
      v13 = *(_OWORD *)(a1 + 16);
      v23[0] = *(_OWORD *)a1;
      v23[1] = v13;
      llvm::jitlink::createLinkGraphFromCOFFObject_x86_64(v23, a2);
      return;
    }
    v20 = 1283;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_QWORD *)(a1 + 24);
    v19[0] = "Unsupported target machine architecture in COFF object ";
    v19[2] = v14;
    v19[3] = v15;
    v21[0] = v19;
    v21[2] = ": ";
    v22 = 770;
    switch(v12)
    {
      case 332:
        v16 = "i386";
        v17 = 4;
        break;
      case 43620:
        v16 = "ARM64";
        v17 = 5;
        break;
      case 452:
        v16 = "ARM";
        v17 = 3;
        break;
      default:
        v16 = "unknown";
        v17 = 7;
        break;
    }
    v6 = operator new();
    v7 = v6;
    v25[0] = (llvm::formatv_object_base *)v21;
    v25[1] = (llvm::formatv_object_base *)v17;
    v25[2] = (llvm::formatv_object_base *)v16;
    v25[3] = (llvm::formatv_object_base *)v17;
    v8 = 1282;
    goto LABEL_33;
  }
  v6 = operator new();
  v7 = v6;
  v25[0] = (llvm::formatv_object_base *)"Truncated COFF buffer";
  v8 = 259;
LABEL_33:
  v26 = v8;
  *(_QWORD *)v6 = off_251C15728;
  llvm::Twine::str(v25, (std::string *)(v6 + 8));
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v7;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[22]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"Truncated COFF buffer";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[19]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"Incorrect PE magic";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::jitlink::link_COFF(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  llvm::jitlink::LinkGraph *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::jitlink::LinkGraph *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  llvm::jitlink::LinkGraph *v12;
  void **p_p;
  __int16 v14;

  v2 = *a1;
  if (*((_DWORD *)*a1 + 36) == 38)
  {
    *a1 = 0;
    v12 = v2;
    v3 = *a2;
    *a2 = 0;
    v11 = v3;
    llvm::jitlink::link_COFF_x86_64(&v12, &v11);
    v4 = v11;
    v11 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v12;
    v12 = 0;
    if (v5)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v5);
      MEMORY[0x24BD1B3A4]();
    }
  }
  else
  {
    v6 = *a2;
    std::operator+<char>();
    v7 = operator new();
    v14 = 260;
    p_p = &__p;
    *(_QWORD *)v7 = off_251C15728;
    llvm::Twine::str((llvm::formatv_object_base **)&p_p, (std::string *)(v7 + 8));
    v10 = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 24))(v6, &v10);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9 < 0)
      operator delete(__p);
  }
}

void COFFOptTable::~COFFOptTable(COFFOptTable *this)
{
  char *v2;

  *(_QWORD *)this = &unk_251C1C168;
  v2 = (char *)*((_QWORD *)this + 7);
  if (v2 != (char *)this + 80)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &unk_251C1C168;
  v2 = (char *)*((_QWORD *)this + 7);
  if (v2 != (char *)this + 80)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::COFFDirectiveParser::parse(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _BYTE *v10;
  size_t v11;
  const void *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  char v18;
  void *v19;
  unsigned int v20;
  void *v21;
  int v22;
  llvm::formatv_object_base *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  uint64_t v38;
  llvm::formatv_object_base *v39[4];
  char v40;
  char v41;
  void **v42;
  void *__src;
  unsigned int v44;
  int v45;
  _BYTE v46[128];
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  unsigned int v51;
  int v52;
  _BYTE v53[128];
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[128];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v63[32] = *MEMORY[0x24BDAC8D0];
  v61 = v63;
  v62 = 0x1000000000;
  v58 = v60;
  v59 = 0x1000000000;
  v7 = (uint64_t *)(a1 + 96);
  v42 = &v61;
  tokenizeWindowsCommandLineImpl(a2, a3, (uint64_t *)(a1 + 96), (void (*)(uint64_t, _BYTE *, size_t))llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::cl::TokenizeWindowsCommandLineNoCopy(llvm::StringRef,llvm::StringSaver &,llvm::SmallVectorImpl<llvm::StringRef> &)::$_0>, (uint64_t)&v42, 0, (void (*)(uint64_t))llvm::function_ref<void ()(void)>::callback_fn<llvm::cl::TokenizeWindowsCommandLineNoCopy(llvm::StringRef,llvm::StringSaver &,llvm::SmallVectorImpl<llvm::StringRef> &)::$_1>, (uint64_t)v39, 0);
  if ((_DWORD)v62)
  {
    v8 = (uint64_t *)v61;
    v9 = (uint64_t *)((char *)v61 + 16 * v62);
    v10 = (_BYTE *)(a2 + a3);
    do
    {
      v12 = (const void *)*v8;
      v11 = v8[1];
      v13 = (_BYTE *)(*v8 + v11);
      if (v13 == v10 || *v13)
      {
        v14 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*v7, v11 + 1, 0);
        v15 = (uint64_t)v14;
        if (v11)
          memcpy(v14, v12, v11);
        *(_BYTE *)(v15 + v11) = 0;
      }
      else
      {
        v15 = *v8;
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v58, v15);
      v8 += 2;
    }
    while (v8 != v9);
  }
  v38 = 0;
  llvm::opt::OptTable::ParseArgs((llvm::opt::OptTable *)optTable, v58, v59, (unsigned int *)&v38 + 1, &v38, 0, 0, (uint64_t)&v42);
  if ((_DWORD)v38)
  {
    v16 = (_BYTE *)*((_QWORD *)v50 + HIDWORD(v38));
    v17 = *v16;
    if (*v16)
    {
      v36[0] = "COFF directive parsing failed: ";
      v36[2] = v16;
      v37 = 771;
      v18 = 2;
    }
    else
    {
      v36[0] = "COFF directive parsing failed: ";
      v37 = 259;
      v18 = 3;
    }
    if (v17)
      v23 = (llvm::formatv_object_base *)v36;
    else
      v23 = (llvm::formatv_object_base *)"COFF directive parsing failed: ";
    v24 = operator new();
    v39[0] = v23;
    v39[2] = (llvm::formatv_object_base *)" missing argument";
    v40 = v18;
    v41 = 3;
    *(_QWORD *)v24 = off_251C15728;
    llvm::Twine::str(v39, (std::string *)(v24 + 8));
    *(_BYTE *)(a4 + 352) |= 1u;
    *(_QWORD *)a4 = v24;
    goto LABEL_42;
  }
  *(_BYTE *)(a4 + 352) &= ~1u;
  *(_QWORD *)a4 = &unk_251C16250;
  v19 = (void *)(a4 + 24);
  *(_QWORD *)(a4 + 8) = a4 + 24;
  *(_QWORD *)(a4 + 16) = 0x1000000000;
  v20 = v44;
  if (v44 && &v42 != (void ***)a4)
  {
    v21 = __src;
    if (__src != v46)
    {
      *(_QWORD *)(a4 + 8) = __src;
      v22 = v45;
      *(_DWORD *)(a4 + 16) = v20;
      *(_DWORD *)(a4 + 20) = v22;
      __src = v46;
      v45 = 0;
      goto LABEL_28;
    }
    if (v44 < 0x11)
    {
      v25 = v44;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 8, (void *)(a4 + 24), v44, 8);
      v25 = v44;
      if (!v44)
      {
LABEL_27:
        *(_DWORD *)(a4 + 16) = v20;
        goto LABEL_28;
      }
      v21 = __src;
      v19 = *(void **)(a4 + 8);
    }
    memcpy(v19, v21, 8 * v25);
    goto LABEL_27;
  }
LABEL_28:
  *(_QWORD *)(a4 + 152) = v47;
  *(_QWORD *)(a4 + 160) = v48;
  v47 = 0;
  v48 = 0;
  v26 = v51;
  *(_DWORD *)(a4 + 168) = v49;
  v49 = 0;
  v44 = 0;
  *(_QWORD *)a4 = &off_251C1C140;
  v27 = (void *)(a4 + 192);
  *(_QWORD *)(a4 + 176) = a4 + 192;
  *(_QWORD *)(a4 + 184) = 0x1000000000;
  if (!(_DWORD)v26 || &v42 == (void ***)a4)
    goto LABEL_39;
  v28 = v50;
  if (v50 == v53)
  {
    if (v26 < 0x11)
    {
      v30 = v26;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 176, (void *)(a4 + 192), v26, 8);
      v30 = v51;
      if (!v51)
      {
LABEL_37:
        *(_DWORD *)(a4 + 184) = v26;
        goto LABEL_38;
      }
      v28 = v50;
      v27 = *(void **)(a4 + 176);
    }
    memcpy(v27, v28, 8 * v30);
    goto LABEL_37;
  }
  *(_QWORD *)(a4 + 176) = v50;
  v29 = v52;
  *(_DWORD *)(a4 + 184) = v26;
  *(_DWORD *)(a4 + 188) = v29;
  v50 = v53;
  v52 = 0;
LABEL_38:
  v51 = 0;
LABEL_39:
  *(_QWORD *)(a4 + 320) = a4 + 320;
  *(_QWORD *)(a4 + 328) = a4 + 320;
  *(_QWORD *)(a4 + 336) = 0;
  v31 = v56;
  if (v56)
  {
    v33 = v54;
    v32 = v55;
    v34 = *v55;
    *(_QWORD *)(v34 + 8) = *(_QWORD *)(v54 + 8);
    **(_QWORD **)(v33 + 8) = v34;
    v35 = *(_QWORD *)(a4 + 320);
    *(_QWORD *)(v35 + 8) = v32;
    *v32 = v35;
    *(_QWORD *)(a4 + 320) = v33;
    *(_QWORD *)(v33 + 8) = a4 + 320;
    *(_QWORD *)(a4 + 336) = v31;
    v56 = 0;
  }
  *(_DWORD *)(a4 + 344) = v57;
LABEL_42:
  llvm::opt::InputArgList::~InputArgList((void **)&v42);
  if (v58 != v60)
    free(v58);
  if (v61 != v63)
    free(v61);
}

uint64_t llvm::opt::PrecomputedOptTable::getPrefixesUnion(llvm::opt::PrecomputedOptTable *this)
{
  return *((_QWORD *)this + 11);
}

void llvm::opt::PrecomputedOptTable::~PrecomputedOptTable(llvm::opt::PrecomputedOptTable *this)
{
  char *v2;

  *(_QWORD *)this = &unk_251C1C168;
  v2 = (char *)*((_QWORD *)this + 7);
  if (v2 != (char *)this + 80)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &unk_251C1C168;
  v2 = (char *)*((_QWORD *)this + 7);
  if (v2 != (char *)this + 80)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::opt::InputArgList::~InputArgList(void **this)
{
  void **v2;

  llvm::opt::InputArgList::releaseMemory((uint64_t)this);
  std::__list_imp<std::string>::clear(this + 40);
  v2 = (void **)this[22];
  if (v2 != this + 24)
    free(v2);
  llvm::opt::ArgList::~ArgList((llvm::opt::ArgList *)this);
}

void llvm::opt::ArgList::~ArgList(llvm::opt::ArgList *this)
{
  char *v2;

  *(_QWORD *)this = &unk_251C16250;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 19), 4);
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
    free(v2);
}

void std::__list_imp<std::string>::clear(void **a1)
{
  void **v2;
  _QWORD **v3;
  _QWORD *v4;
  void **v5;

  if (a1[2])
  {
    v3 = (_QWORD **)*a1;
    v2 = (void **)a1[1];
    v4 = *v2;
    v4[1] = *((_QWORD *)*a1 + 1);
    *v3[1] = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (void **)v2[1];
        std::__list_imp<std::string>::__delete_node[abi:nn180100]<>((int)a1, v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:nn180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t _GLOBAL__sub_I_COFFDirectiveParser_cpp()
{
  size_t *v0;

  v0 = (size_t *)llvm::opt::OptTable::OptTable((uint64_t)optTable, (uint64_t)&infoTable, 5, 1);
  optTable[0] = (uint64_t)&off_251C16228;
  qword_25795E490 = (uint64_t)&PrefixTable_init;
  unk_25795E498 = 4;
  llvm::opt::OptTable::buildPrefixChars(v0);
  optTable[0] = (uint64_t)&off_251C16150;
  return __cxa_atexit((void (*)(void *))COFFOptTable::~COFFOptTable, optTable, &dword_24A800000);
}

uint64_t llvm::jitlink::COFFLinkGraphBuilder::COFFLinkGraphBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  std::string v14;
  __int128 v15;
  uint64_t v16;
  std::string __p;
  __int128 v18;
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  *(_QWORD *)a1 = off_251C16278;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  v8 = *(void **)(a2 + 32);
  if (v8)
  {
    std::string::basic_string[abi:nn180100](__dst, v8, *(_QWORD *)(a2 + 40));
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v21 = 0;
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v14 = *(std::string *)a3;
  v15 = *(_OWORD *)(a3 + 24);
  v16 = *(_QWORD *)(a3 + 40);
  v9 = 1;
  llvm::Triple::setObjectFormat((llvm::Triple *)&v14, 1);
  __p = v14;
  memset(&v14, 0, sizeof(v14));
  v18 = v15;
  v19 = v16;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 376))(a2);
  v11 = *(_DWORD *)(a2 + 8) - 11;
  if (v11 <= 9)
    v9 = dword_24AA2E028[v11];
  v12 = operator new();
  v22 = *(_OWORD *)__dst;
  v23 = v21;
  __dst[0] = 0;
  __dst[1] = 0;
  v21 = 0;
  *(_QWORD *)(a1 + 88) = llvm::jitlink::LinkGraph::LinkGraph(v12, &v22, (__int128 *)&__p, v10, v9, a4);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x400000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 1;
  *(_QWORD *)(a1 + 192) = a1 + 96;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  return a1;
}

void llvm::jitlink::COFFLinkGraphBuilder::~COFFLinkGraphBuilder(llvm::jitlink::COFFLinkGraphBuilder *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = off_251C16278;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 38), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 35), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 32), 8);
  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 96);
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 11, 0);
  v6 = (void **)((char *)this + 56);
  std::vector<std::set<std::pair<unsigned long long,llvm::jitlink::Symbol *>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

void llvm::jitlink::COFFLinkGraphBuilder::buildGraph(llvm::jitlink::COFFLinkGraphBuilder *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 440))(*((_QWORD *)this + 10)) & 1) != 0)
  {
    llvm::jitlink::COFFLinkGraphBuilder::graphifySections(this, &v6);
    v5 = v6;
    if (v6
      || (llvm::jitlink::COFFLinkGraphBuilder::graphifySymbols((char **)this, v4, &v6), (v5 = v6) != 0)
      || ((*(void (**)(uint64_t *__return_ptr, llvm::jitlink::COFFLinkGraphBuilder *))(*(_QWORD *)this + 16))(&v6, this), (v5 = v6) != 0))
    {
      *(_BYTE *)(a2 + 8) |= 1u;
    }
    else
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v5 = *((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = 0;
    }
  }
  else
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Object is not a relocatable COFF file", &v7);
    *(_BYTE *)(a2 + 8) |= 1u;
    v5 = v7;
  }
  *(_QWORD *)a2 = v5;
}

void llvm::jitlink::COFFLinkGraphBuilder::graphifySections(llvm::jitlink::COFFLinkGraphBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  BOOL v26;
  char *v27;
  uint64_t i;
  llvm::object::COFFObjectFile *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  uint64_t SectionByName;
  uint64_t Section;
  unsigned int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD **v58;
  const char *v59;
  size_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90[4];
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96[2];
  char v97;
  uint64_t v98;
  char v99;
  void *v100;
  _QWORD *v101;
  unsigned int v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 10);
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
  {
    v5 = a2;
    v6 = *(unsigned __int16 *)(v4 + 2);
    if (v6 == 0xFFFF)
      v6 = 0;
  }
  else
  {
    v5 = a2;
    v6 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 44);
  }
  v7 = (v6 + 1);
  v8 = *((_QWORD *)this + 26);
  v9 = *((_QWORD *)this + 27);
  v10 = (v9 - v8) >> 3;
  if (v7 <= v10)
  {
    v26 = v7 >= v10;
    v25 = v5;
    if (!v26)
      *((_QWORD *)this + 27) = v8 + 8 * v7;
  }
  else
  {
    v11 = v7 - v10;
    v12 = (char *)this + 224;
    v13 = *((_QWORD *)this + 28);
    v14 = 8 * (v7 - v10);
    if (v7 - v10 <= (v13 - v9) >> 3)
    {
      bzero(*((void **)this + 27), 8 * (v7 - v10));
      *((_QWORD *)this + 27) = v9 + 8 * v11;
      v25 = v5;
    }
    else
    {
      v15 = v13 - v8;
      if (v15 >> 2 > v7)
        v7 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v7;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v12, v16);
      v18 = &v17[8 * v10];
      v20 = &v17[8 * v19];
      bzero(v18, v14);
      v21 = &v18[8 * v11];
      v23 = (char *)*((_QWORD *)this + 26);
      v22 = (char *)*((_QWORD *)this + 27);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v18 - 1) = v24;
          v18 -= 8;
        }
        while (v22 != v23);
        v22 = (char *)*((_QWORD *)this + 26);
      }
      v25 = v5;
      *((_QWORD *)this + 26) = v18;
      *((_QWORD *)this + 27) = v21;
      *((_QWORD *)this + 28) = v20;
      if (v22)
        operator delete(v22);
    }
  }
  v27 = (char *)this + 96;
  v87 = (uint64_t *)((char *)this + 280);
  for (i = 1; ; ++i)
  {
    v29 = (llvm::object::COFFObjectFile *)*((_QWORD *)this + 10);
    v30 = *((_QWORD *)v29 + 6);
    if (v30)
    {
      v31 = *(unsigned __int16 *)(v30 + 2);
      if (v31 == 0xFFFF)
        v31 = 0;
    }
    else
    {
      v31 = *(_DWORD *)(*((_QWORD *)v29 + 7) + 44);
    }
    if (i > v31)
    {
      *v25 = 0;
      return;
    }
    llvm::object::COFFObjectFile::getSection(v29, i, (uint64_t)&v98);
    if ((v99 & 1) != 0)
    {
      *v25 = v98;
      return;
    }
    v32 = v98;
    llvm::object::COFFObjectFile::getSectionName(*((llvm::object::COFFObjectFile **)this + 10), v98, (uint64_t)&v100);
    if ((v102 & 1) != 0)
    {
      v36 = v100;
      v100 = 0;
      if (v36)
        (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
      v35 = 0;
      v34 = 0;
    }
    else
    {
      v35 = v100;
      v34 = (uint64_t)v101;
    }
    v37 = *(_DWORD *)(v32 + 36);
    if ((v37 & 0x20000000) != 0)
      v38 = 5;
    else
      v38 = 1;
    if (v37 >= 0)
      v39 = v38;
    else
      v39 = v38 | 2;
    SectionByName = llvm::jitlink::LinkGraph::findSectionByName(*((_QWORD *)this + 11), (uint64_t)v35, v34, v33);
    if (!SectionByName)
    {
      Section = llvm::jitlink::LinkGraph::createSection(*((_QWORD *)this + 11), (uint64_t)v35, v34, v39);
      SectionByName = Section;
      if ((*(_BYTE *)(v32 + 37) & 8) != 0)
        *(_DWORD *)(Section + 20) = 2;
    }
    if (*(_DWORD *)(SectionByName + 16) != v39)
      break;
    v42 = *(_DWORD *)(v32 + 36);
    if ((v42 & 0x80) != 0)
    {
      v47 = (_QWORD *)*((_QWORD *)this + 10);
      v49 = v47[8];
      v48 = v47[9];
      if (*((_OWORD *)v47 + 4) == 0 || !v47[2])
      {
        v50 = *(_DWORD *)(v32 + 16);
        if (v49)
          goto LABEL_59;
      }
      else
      {
        v50 = *(_DWORD *)(v32 + 16);
        if (v50 >= *(_DWORD *)(v32 + 8))
          v50 = *(_DWORD *)(v32 + 8);
        if (v49)
        {
LABEL_59:
          v48 = *(unsigned int *)(v49 + 28);
LABEL_63:
          v51 = *((_QWORD *)this + 11);
          v52 = (void *)(v48 + *(unsigned int *)(v32 + 12));
          v53 = 1 << (((v42 >> 20) & 0xF) - 1);
          if (((v42 >> 20) & 0xF) == 0)
            v53 = 16;
          v100 = v52;
          v90[0] = v50;
          if ((v42 & 8) != 0)
            v54 = 1;
          else
            v54 = v53;
          *(_QWORD *)&v92 = v54;
          v96[0] = 0;
          v55 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v51, SectionByName, v90, (uint64_t *)&v100, (unint64_t *)&v92, v96);
          goto LABEL_111;
        }
      }
      if (v48)
        v48 = *(_QWORD *)(v48 + 24);
      goto LABEL_63;
    }
    v88 = 0;
    v89 = 0;
    llvm::object::COFFObjectFile::getSectionContents(*((_QWORD **)this + 10), (_DWORD *)v32, (unint64_t *)&v88, v25);
    if (*v25)
      return;
    v44 = (void *)v88;
    v43 = v89;
    if (v34 == 8 && *v35 == 0x657674636572642ELL)
    {
      llvm::jitlink::COFFDirectiveParser::parse((uint64_t)v27, v88, v89, (uint64_t)&v100);
      if ((v103 & 1) != 0)
      {
        v56 = (uint64_t)v100;
        v100 = 0;
        *v25 = v56;
      }
      else
      {
        v85 = v27;
        v86 = v25;
        if (v102)
        {
          v45 = 8 * v102;
          v46 = v101;
          while (!*v46)
          {
            ++v46;
            v45 -= 8;
            if (!v45)
              goto LABEL_94;
          }
        }
        else
        {
          v46 = v101;
        }
        v57 = &v101[v102];
        if (v46 == v57)
        {
LABEL_94:
          v25 = v86;
          *v86 = 0;
        }
        else
        {
          v58 = (_QWORD **)*v46;
          while (1)
          {
            v59 = (const char *)*v58[6];
            v96[0] = (uint64_t)v59;
            v60 = v59 ? strlen(v59) : 0;
            v96[1] = v60;
            v61 = *((_DWORD *)*v58 + 12);
            if (v61 != 5)
              break;
            v68 = *((_QWORD *)this + 11);
            v91 = 261;
            v90[0] = (uint64_t)v59;
            v90[1] = v60;
            *(_QWORD *)&v92 = llvm::jitlink::LinkGraph::allocateContent(v68, (unsigned __int8 *)v90);
            *((_QWORD *)&v92 + 1) = v69;
            v70 = llvm::jitlink::LinkGraph::addExternalSymbol(*((_QWORD *)this + 11), v92, v69, 0, 0);
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v87, &v92, v71, v72)[2] = v70;
            v75 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v87, &v92, v73, v74);
            *(_QWORD *)(v75[2] + 24) |= 0x1000000000000000uLL;
            do
            {
LABEL_88:
              if (++v46 == v57)
                goto LABEL_94;
              v58 = (_QWORD **)*v46;
            }
            while (!*v46);
            if (v46 == v57)
              goto LABEL_94;
          }
          if (v61 != 3)
            goto LABEL_88;
          v97 = 61;
          llvm::StringRef::split(v96, &v97, 1uLL, (uint64_t)&v92);
          v95 = v92;
          if (*((_QWORD *)&v92 + 1))
          {
            v62 = v94;
            if (v94)
            {
              v63 = v93;
              *(_QWORD *)&v92 = 0;
              v64 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(*((_QWORD *)this + 32), *((_DWORD *)this + 68), (uint64_t)&v95, (unint64_t *)&v92);
              v65 = (_QWORD *)v92;
              if ((v64 & 1) == 0)
              {
                v66 = *((_DWORD *)this + 66);
                v67 = *((_DWORD *)this + 68);
                if (4 * v66 + 4 >= 3 * v67)
                {
                  v67 *= 2;
                }
                else if (v67 + ~v66 - *((_DWORD *)this + 67) > v67 >> 3)
                {
                  goto LABEL_83;
                }
                llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::grow((uint64_t)this + 256, v67);
                *(_QWORD *)&v92 = 0;
                llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(*((_QWORD *)this + 32), *((_DWORD *)this + 68), (uint64_t)&v95, (unint64_t *)&v92);
                v65 = (_QWORD *)v92;
LABEL_83:
                ++*((_DWORD *)this + 66);
                if (*v65 != -1)
                  --*((_DWORD *)this + 67);
                *(_OWORD *)v65 = v95;
                v65[2] = 0;
                v65[3] = 0;
              }
              v65[2] = v63;
              v65[3] = v62;
              goto LABEL_88;
            }
          }
          v25 = v86;
          llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Invalid COFF /alternatename directive", v86);
        }
        v27 = v85;
      }
      if ((v103 & 1) != 0)
      {
        v76 = v100;
        v100 = 0;
        if (v76)
          (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
      }
      else
      {
        llvm::opt::InputArgList::~InputArgList(&v100);
      }
      if (*v25)
        return;
    }
    v77 = *((_QWORD *)this + 10);
    v78 = *(_QWORD *)(v77 + 64);
    if (v78)
    {
      v79 = *(unsigned int *)(v78 + 28);
    }
    else
    {
      v79 = *(_QWORD *)(v77 + 72);
      if (v79)
        v79 = *(_QWORD *)(v79 + 24);
    }
    v80 = *((_QWORD *)this + 11);
    v81 = v79 + *(unsigned int *)(v32 + 12);
    v82 = *(_DWORD *)(v32 + 36);
    v83 = 1 << (((v82 >> 20) & 0xF) - 1);
    if (((v82 >> 20) & 0xF) == 0)
      v83 = 16;
    if ((v82 & 8) != 0)
      v84 = 1;
    else
      v84 = v83;
    v100 = v44;
    v101 = (_QWORD *)v43;
    v90[0] = v81;
    *(_QWORD *)&v92 = v84;
    v96[0] = 0;
    v55 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v80, SectionByName, (uint64_t *)&v100, v90, (unint64_t *)&v92, v96);
LABEL_111:
    *(_QWORD *)(*((_QWORD *)this + 26) + 8 * i) = v55;
  }
  llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"MemProt should match", v25);
}

void llvm::jitlink::COFFLinkGraphBuilder::graphifySymbols(char **this@<X0>, unint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  unint64_t p_p;
  uint64_t v4;
  llvm::jitlink::COFFLinkGraphBuilder *v5;
  char *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *i;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  _BYTE *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  char *v75;
  std::string::size_type v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  int *v84;
  int v85;
  uint64_t v86;
  uint64_t Section;
  uint64_t v88;
  llvm::formatv_object_base *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  llvm::formatv_object_base *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  int v99;
  _QWORD *v100;
  std::string *v101;
  llvm::formatv_object_base **v102;
  int v103;
  int v104;
  unint64_t v105;
  int *v106;
  _DWORD *v107;
  int *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  std::string *v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  int v118;
  unsigned int *v119;
  char *v120;
  char *v121;
  __int128 v122;
  unsigned __int8 *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t *v127;
  unsigned int *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t *v131;
  unsigned int *v132;
  _WORD *v133;
  unsigned int *v134;
  _WORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t *v138;
  _QWORD *v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int *v142;
  _WORD *v143;
  const char *v144;
  _QWORD *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  unsigned int v157;
  int v158;
  llvm::formatv_object_base *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  BOOL v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm::formatv_object_base *v195;
  uint64_t *v196;
  uint64_t *v197;
  llvm::jitlink::COFFLinkGraphBuilder *v198;
  uint64_t v200;
  uint64_t v201;
  std::string __p;
  int v203;
  uint64_t v204[2];
  __int128 *v205;
  __int16 v206;
  int v207;
  __int16 v208;
  uint64_t v209[2];
  const char *v210;
  __int16 v211;
  int v212;
  std::string *v213;
  uint64_t v214;
  llvm::formatv_object_base **v215;
  __int16 v216;
  int v217;
  __int16 v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  llvm::formatv_object_base *v224;
  uint64_t v225;
  const char *v226;
  uint64_t v227;
  _QWORD v228[2];
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t (**v235)(llvm::detail::format_adapter *__hidden);
  int *v236;
  _QWORD v237[3];

  v5 = (llvm::jitlink::COFFLinkGraphBuilder *)this;
  v237[1] = *MEMORY[0x24BDAC8D0];
  v6 = this[10];
  v7 = *((_QWORD *)v6 + 6);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 2);
    if (v8 == 0xFFFF)
      v8 = 0;
  }
  else
  {
    v8 = *(_DWORD *)(*((_QWORD *)v6 + 7) + 44);
  }
  v9 = (v8 + 1);
  v11 = this[7];
  v10 = this[8];
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3);
  v13 = v9 - v12;
  if (v9 > v12)
  {
    v14 = this[9];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 3) >= v13)
    {
      v31 = &v10[24 * v13];
      v32 = 24 * v9 - 8 * ((v10 - v11) >> 3);
      v33 = v10 + 8;
      do
      {
        *v33 = 0;
        v33[1] = 0;
        *(v33 - 1) = v33;
        v33 += 3;
        v32 -= 24;
      }
      while (v32);
      this[8] = v31;
      goto LABEL_35;
    }
    v15 = 0x5555555555555556 * ((v14 - v11) >> 3);
    if (v15 <= v9)
      v15 = v9;
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v11) >> 3) >= 0x555555555555555)
      p_p = 0xAAAAAAAAAAAAAAALL;
    else
      p_p = v15;
    if (p_p > 0xAAAAAAAAAAAAAAALL)
LABEL_312:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v16 = (char *)operator new(24 * p_p);
    v17 = &v16[8 * ((v10 - v11) >> 3)];
    v18 = &v16[24 * v9];
    v19 = v17 + 8;
    v20 = 24 * v9 - 8 * ((v10 - v11) >> 3);
    do
    {
      *v19 = 0;
      v19[1] = 0;
      *(v19 - 1) = v19;
      v19 += 3;
      v20 -= 24;
    }
    while (v20);
    v21 = &v16[24 * p_p];
    if (v10 == v11)
    {
      *((_QWORD *)v5 + 7) = v17;
      *((_QWORD *)v5 + 8) = v18;
      *((_QWORD *)v5 + 9) = v21;
      if (!v10)
        goto LABEL_35;
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = &v17[v22];
        *((_QWORD *)v23 - 3) = *(_QWORD *)&v10[v22 - 24];
        v24 = &v10[v22 - 16];
        v25 = *(_QWORD *)v24;
        *(_QWORD *)&v17[v22 - 16] = *(_QWORD *)v24;
        v26 = (uint64_t)&v17[v22 - 16];
        v27 = *(_QWORD *)&v10[v22 - 8];
        *((_QWORD *)v23 - 1) = v27;
        if (v27)
        {
          *(_QWORD *)(v25 + 16) = v26;
          *(_QWORD *)&v10[v22 - 24] = v24;
          *(_QWORD *)v24 = 0;
          *(_QWORD *)&v10[v22 - 8] = 0;
        }
        else
        {
          *((_QWORD *)v23 - 3) = v26;
        }
        v22 -= 24;
      }
      while (&v10[v22] != v11);
      v10 = (char *)*((_QWORD *)v5 + 7);
      v28 = (char *)*((_QWORD *)v5 + 8);
      *((_QWORD *)v5 + 7) = &v17[v22];
      *((_QWORD *)v5 + 8) = v18;
      *((_QWORD *)v5 + 9) = v21;
      if (v28 != v10)
      {
        do
        {
          v29 = v28 - 24;
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)(v28 - 24), *((_QWORD **)v28 - 2));
          v28 = v29;
        }
        while (v29 != v10);
      }
      if (!v10)
        goto LABEL_35;
    }
    operator delete(v10);
    goto LABEL_35;
  }
  if (v9 < v12)
  {
    for (i = &v11[24 * v9]; v10 != i; v10 -= 24)
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)(v10 - 24), *((_QWORD **)v10 - 2));
    *((_QWORD *)v5 + 8) = i;
  }
LABEL_35:
  v34 = *((_QWORD *)v5 + 10);
  v35 = *(_QWORD *)(v34 + 48);
  if (v35)
  {
    v36 = *(unsigned __int16 *)(v35 + 2);
    if (v36 == 0xFFFF)
      v36 = 0;
  }
  else
  {
    v36 = *(_DWORD *)(*(_QWORD *)(v34 + 56) + 44);
  }
  v37 = (v36 + 1);
  v39 = (_BYTE *)*((_QWORD *)v5 + 1);
  v38 = (_BYTE *)*((_QWORD *)v5 + 2);
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v39) >> 3);
  v41 = v37 - v40;
  if (v37 <= v40)
  {
    if (v37 >= v40)
      goto LABEL_60;
    v49 = &v39[24 * v37];
LABEL_59:
    *((_QWORD *)v5 + 2) = v49;
    goto LABEL_60;
  }
  v42 = *((_QWORD *)v5 + 3);
  if (0xAAAAAAAAAAAAAAABLL * ((v42 - (uint64_t)v38) >> 3) >= v41)
  {
    v49 = &v38[24 * v41];
    do
    {
      *v38 = 0;
      v38[16] = 0;
      v38 += 24;
    }
    while (v38 != v49);
    goto LABEL_59;
  }
  v43 = 0x5555555555555556 * ((v42 - (uint64_t)v39) >> 3);
  if (v43 <= v37)
    v43 = v37;
  if (0xAAAAAAAAAAAAAAABLL * ((v42 - (uint64_t)v39) >> 3) >= 0x555555555555555)
    p_p = 0xAAAAAAAAAAAAAAALL;
  else
    p_p = v43;
  if (p_p > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_312;
  v44 = (char *)operator new(24 * p_p);
  v45 = &v44[8 * ((v38 - v39) >> 3)];
  v46 = &v44[24 * v37];
  v47 = v45;
  do
  {
    *v47 = 0;
    v47[16] = 0;
    v47 += 24;
  }
  while (v47 != v46);
  if (v38 != v39)
  {
    do
    {
      v48 = *(_OWORD *)(v38 - 24);
      *(v45 - 8) = *(v38 - 8);
      *(_OWORD *)(v45 - 24) = v48;
      v45 -= 24;
      v38 -= 24;
    }
    while (v38 != v39);
    v38 = v39;
  }
  *((_QWORD *)v5 + 1) = v45;
  *((_QWORD *)v5 + 2) = v46;
  *((_QWORD *)v5 + 3) = &v44[24 * p_p];
  if (v38)
    operator delete(v38);
LABEL_60:
  v50 = (_QWORD *)*((_QWORD *)v5 + 10);
  if (!v50[12] && !v50[13])
    goto LABEL_65;
  v51 = v50[6];
  if (v51)
  {
    if (*(__int16 *)(v51 + 2) != -1)
    {
      v52 = (unsigned int *)(v51 + 12);
      goto LABEL_67;
    }
LABEL_65:
    v53 = 0;
    v54 = (_QWORD *)((char *)v5 + 240);
    v55 = *((_QWORD *)v5 + 29);
    v56 = (*((_QWORD *)v5 + 30) - v55) >> 3;
    goto LABEL_79;
  }
  v52 = (unsigned int *)(v50[7] + 52);
LABEL_67:
  v53 = *v52;
  v54 = (_QWORD *)((char *)v5 + 240);
  v57 = *((_QWORD *)v5 + 30);
  v55 = *((_QWORD *)v5 + 29);
  v56 = (v57 - v55) >> 3;
  if (v53 > v56)
  {
    v58 = v53 - v56;
    v59 = *((_QWORD *)v5 + 31);
    if (v53 - v56 > (v59 - v57) >> 3)
    {
      v60 = v59 - v55;
      if (v60 >> 2 > v53)
        v53 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v53;
      v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)v5 + 248, v61);
      v63 = &v62[8 * v56];
      v65 = &v62[8 * v64];
      bzero(v63, 8 * v58);
      v66 = &v63[8 * v58];
      v68 = (char *)*((_QWORD *)v5 + 29);
      v67 = (char *)*((_QWORD *)v5 + 30);
      if (v67 != v68)
      {
        do
        {
          v69 = *((_QWORD *)v67 - 1);
          v67 -= 8;
          *((_QWORD *)v63 - 1) = v69;
          v63 -= 8;
        }
        while (v67 != v68);
        v67 = (char *)*((_QWORD *)v5 + 29);
      }
      *((_QWORD *)v5 + 29) = v63;
      *((_QWORD *)v5 + 30) = v66;
      *((_QWORD *)v5 + 31) = v65;
      if (v67)
        operator delete(v67);
      goto LABEL_83;
    }
    bzero(*((void **)v5 + 30), 8 * v58);
    v70 = v57 + 8 * v58;
    goto LABEL_82;
  }
LABEL_79:
  if (v56 > v53)
  {
    v70 = v55 + 8 * v53;
LABEL_82:
    *v54 = v70;
  }
LABEL_83:
  v71 = 0;
  v196 = (uint64_t *)((char *)v5 + 304);
  v197 = (uint64_t *)((char *)v5 + 280);
  v198 = v5;
  while (1)
  {
    v72 = (_QWORD *)*((_QWORD *)v5 + 10);
    if (v72[12] || (v73 = (_DWORD *)v72[13]) != 0)
    {
      v74 = v72[6];
      if (!v74)
      {
        v73 = (_DWORD *)(v72[7] + 52);
        goto LABEL_90;
      }
      if (*(__int16 *)(v74 + 2) != -1)
      {
        v73 = (_DWORD *)(v74 + 12);
LABEL_90:
        LODWORD(v73) = *v73;
        goto LABEL_92;
      }
      LODWORD(v73) = 0;
    }
LABEL_92:
    if (v71 >= (int)v73)
      break;
    llvm::object::COFFObjectFile::getSymbol(v72, v71, (uint64_t)&v221);
    if ((v223 & 1) != 0)
    {
      *a3 = v221;
      return;
    }
    if (v221)
      v75 = (char *)v221;
    else
      v75 = (char *)v222;
    llvm::object::COFFObjectFile::getSymbolName(v75, *((llvm::object::COFFObjectFile **)v5 + 10), (uint64_t)&v232);
    if ((v233 & 1) != 0)
    {
      if ((_QWORD)v232)
        (*(void (**)(_QWORD))(*(_QWORD *)v232 + 8))(v232);
      v77 = 0;
      v76 = 0;
    }
    else
    {
      v76 = *((_QWORD *)&v232 + 1);
      v77 = v232;
    }
    v78 = v221;
    v200 = v4;
    if (v221)
    {
      v79 = *(unsigned __int16 *)(v221 + 12);
      if (v79 >> 8 > 0xFE)
      {
        v80 = 0;
        v203 = (__int16)v79;
        goto LABEL_114;
      }
    }
    else
    {
      v79 = *(_DWORD *)(v222 + 12);
    }
    v203 = v79;
    if (v79 < 1)
    {
      v80 = 0;
      if (!v221)
        goto LABEL_109;
    }
    else
    {
      llvm::object::COFFObjectFile::getSection(*((llvm::object::COFFObjectFile **)v5 + 10), v79, (uint64_t)&v230);
      if ((v231 & 1) != 0)
      {
        *(_QWORD *)&v232 = "{0:d}: ";
        *((_QWORD *)&v232 + 1) = 7;
        v233 = v237;
        v234 = 1;
        v235 = &off_251C162A0;
        v236 = &v203;
        v237[0] = &v235;
        v204[0] = (uint64_t)"Invalid COFF section number:";
        v205 = &v232;
        v206 = 1539;
        v209[0] = (uint64_t)v204;
        v210 = " (";
        v211 = 770;
        v95 = v230;
        v230 = 0;
        v201 = v95;
        llvm::toString(&v201, &__p);
        v96 = v211;
        if (v211 == 1)
        {
          p_p = (unint64_t)&__p;
          v213 = &__p;
          v216 = 260;
          v98 = 3;
          v97 = 4;
          v4 = v214;
        }
        else if ((_BYTE)v211)
        {
          p_p = (unint64_t)&v213;
          v97 = 2;
          if (HIBYTE(v211) != 1)
            v96 = 2;
          v114 = (std::string *)v209;
          if (HIBYTE(v211) == 1)
            v114 = (std::string *)v209[0];
          v213 = v114;
          v214 = v209[1];
          v215 = (llvm::formatv_object_base **)&__p;
          LOBYTE(v216) = v96;
          HIBYTE(v216) = 4;
          v98 = 3;
        }
        else
        {
          v97 = 0;
          v216 = 256;
          v98 = 1;
        }
        v115 = operator new();
        v224 = (llvm::formatv_object_base *)p_p;
        v225 = v4;
        v226 = ")";
        LOBYTE(v228[0]) = v97;
        BYTE1(v228[0]) = v98;
        *(_QWORD *)v115 = off_251C15728;
        llvm::Twine::str(&v224, (std::string *)(v115 + 8));
        *a3 = v115;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v201)
          (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
        v116 = 0;
        goto LABEL_190;
      }
      v80 = v230;
      v78 = v221;
      if (!v221)
      {
LABEL_109:
        v81 = v222;
        v82 = *(unsigned __int8 *)(v222 + 18);
        switch(v82)
        {
          case 2:
            if (!*(_DWORD *)(v222 + 12) && !*(_DWORD *)(v222 + 8))
              goto LABEL_198;
            break;
          case 103:
            goto LABEL_186;
          case 105:
            v83 = p_p;
            v84 = (int *)(v222 + 20);
LABEL_137:
            v104 = *v84;
            v103 = v84[1];
            v106 = (int *)*((_QWORD *)v198 + 5);
            v105 = *((_QWORD *)v198 + 6);
            if ((unint64_t)v106 >= v105)
            {
              v108 = (int *)*((_QWORD *)v198 + 4);
              v109 = ((char *)v106 - (char *)v108) >> 5;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 59)
                abort();
              v111 = v105 - (_QWORD)v108;
              if (v111 >> 4 > v110)
                v110 = v111 >> 4;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFE0)
                v112 = 0x7FFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                if (v112 >> 59)
                  goto LABEL_312;
                v113 = (char *)operator new(32 * v112);
              }
              else
              {
                v113 = 0;
              }
              v120 = &v113[32 * v109];
              *(_DWORD *)v120 = v71;
              *((_DWORD *)v120 + 1) = v104;
              *((_DWORD *)v120 + 2) = v103;
              *((_QWORD *)v120 + 2) = v77;
              *((_QWORD *)v120 + 3) = v76;
              v121 = v120;
              p_p = v83;
              if (v106 == v108)
              {
                v5 = v198;
              }
              else
              {
                do
                {
                  v122 = *((_OWORD *)v106 - 1);
                  *((_OWORD *)v121 - 2) = *((_OWORD *)v106 - 2);
                  *((_OWORD *)v121 - 1) = v122;
                  v121 -= 32;
                  v106 -= 8;
                }
                while (v106 != v108);
                v5 = v198;
                v106 = (int *)*((_QWORD *)v198 + 4);
              }
              v107 = v120 + 32;
              *((_QWORD *)v5 + 4) = v121;
              *((_QWORD *)v5 + 5) = v120 + 32;
              *((_QWORD *)v5 + 6) = &v113[32 * v112];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *v106 = v71;
              v106[1] = v104;
              v106[2] = v103;
              v107 = v106 + 8;
              *((_QWORD *)v106 + 2) = v77;
              *((_QWORD *)v106 + 3) = v76;
              p_p = v83;
              v5 = v198;
            }
            *((_QWORD *)v5 + 5) = v107;
            goto LABEL_186;
        }
        goto LABEL_120;
      }
    }
LABEL_114:
    v85 = *(unsigned __int8 *)(v78 + 16);
    if (v85 == 105)
    {
      v83 = p_p;
      v84 = (int *)(v78 + 18);
      goto LABEL_137;
    }
    if (v85 == 103)
      goto LABEL_186;
    if (v85 == 2 && !*(_WORD *)(v78 + 12) && !*(_DWORD *)(v78 + 8))
    {
      v81 = v222;
LABEL_198:
      *(_QWORD *)&v232 = v77;
      *((_QWORD *)&v232 + 1) = v76;
      v224 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v197, (uint64_t)&v232, &v224, a2) & 1) == 0)
      {
        v128 = (unsigned int *)(v78 + 8);
        if (!v78)
          v128 = (unsigned int *)(v81 + 8);
        v129 = llvm::jitlink::LinkGraph::addExternalSymbol(*((_QWORD *)v5 + 11), v232, *((uint64_t *)&v232 + 1), *v128, 0);
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v197, &v232, v130, v131)[2] = v129;
      }
      a2 = (unint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v197, &v232, v126, v127)[2];
      if (!a2)
        goto LABEL_186;
LABEL_175:
      llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol((uint64_t *)v5, v203, v71, (unint64_t)a2);
      goto LABEL_186;
    }
    v81 = v222;
LABEL_120:
    __p.__r_.__value_.__r.__words[0] = v77;
    __p.__r_.__value_.__l.__size_ = v76;
    v230 = v78;
    v231 = v81;
    v212 = v71;
    if (llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v230))
    {
      v86 = *((_QWORD *)v5 + 11);
      Section = *((_QWORD *)v5 + 25);
      if (!Section)
      {
        Section = llvm::jitlink::LinkGraph::createSection(*((_QWORD *)v5 + 11), (uint64_t)"__common", 8, 3);
        *((_QWORD *)v5 + 25) = Section;
      }
      v88 = v230;
      if (!v230)
        v88 = v231;
      v89 = (llvm::formatv_object_base *)*(unsigned int *)(v88 + 8);
      *(_QWORD *)&v232 = 0;
      v224 = v89;
      v213 = (std::string *)v89;
      v209[0] = 0;
      v90 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v86, Section, (uint64_t *)&v224, (uint64_t *)&v232, (unint64_t *)&v213, v209);
      v91 = v230;
      if (!v230)
        v91 = v231;
      v92 = *(unsigned int *)(v91 + 8);
      v93 = (llvm::formatv_object_base *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v86, 40, 3);
      *(_QWORD *)v93 = v77;
      *((_QWORD *)v93 + 1) = v76;
      *((_QWORD *)v93 + 2) = v90;
      *((_QWORD *)v93 + 3) = 0x200000000000000;
      *((_QWORD *)v93 + 4) = v92;
      v94 = v90[2] + 56;
      v224 = v93;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v94, &v224, (uint64_t)&v232);
      v220 &= ~1u;
      v219 = (uint64_t)v93;
      goto LABEL_172;
    }
    if (v230)
    {
      v99 = *(unsigned __int16 *)(v230 + 12);
      if (v99 == 0xFFFF)
      {
        v119 = (unsigned int *)(v230 + 8);
LABEL_196:
        v4 = v200;
        v125 = llvm::jitlink::LinkGraph::addAbsoluteSymbol(*((_QWORD *)v5 + 11), v77, v76, *v119, 0, 0, 2, 0);
        v220 &= ~1u;
        v219 = (uint64_t)v125;
        goto LABEL_173;
      }
      if ((unsigned __int16)(v99 + 256) < 0x101u)
        goto LABEL_134;
    }
    else
    {
      v99 = *(_DWORD *)(v231 + 12);
      if (v99 == -1)
      {
        v119 = (unsigned int *)(v231 + 8);
        goto LABEL_196;
      }
      if (v99 <= 0)
      {
LABEL_134:
        *(_QWORD *)&v232 = "{0:d}";
        *((_QWORD *)&v232 + 1) = 5;
        v233 = v237;
        v234 = 1;
        v235 = &off_251C162A0;
        v236 = &v212;
        v237[0] = &v235;
        v100 = (_QWORD *)operator new();
        v224 = (llvm::formatv_object_base *)"Reserved section number used in regular symbol ";
        v226 = (const char *)&v232;
        LOWORD(v228[0]) = 1539;
        *v100 = off_251C15728;
        v101 = (std::string *)(v100 + 1);
        v102 = &v224;
LABEL_135:
        llvm::Twine::str(v102, v101);
        v220 |= 1u;
        v219 = (uint64_t)v100;
LABEL_172:
        v4 = v200;
        goto LABEL_173;
      }
    }
    if (v99 >= (int)((*((_QWORD *)v5 + 30) - *((_QWORD *)v5 + 29)) >> 3)
      || (v117 = *(_QWORD *)(*((_QWORD *)v5 + 26) + 8 * v99)) == 0)
    {
      v220 &= ~1u;
      v219 = 0;
      goto LABEL_172;
    }
    if (v230)
    {
      v118 = *(unsigned __int8 *)(v230 + 16);
      if (v118 == 2)
      {
        if ((*(_BYTE *)(v80 + 37) & 0x10) == 0)
        {
          v132 = (unsigned int *)(v230 + 8);
          v133 = (_WORD *)(v230 + 14);
LABEL_215:
          v4 = v200;
          v136 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((_QWORD *)v5 + 11), v117, *v132, v77, v76, 0, 0, 0, (*v133 & 0xF0) == 32, 0);
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v196, &__p, v137, v138)[2] = v136;
          goto LABEL_235;
        }
        v140 = *(unsigned __int16 *)(v230 + 12);
        v4 = v200;
        if (v140 >> 8 > 0xFE)
          v140 = (__int16)v140;
LABEL_225:
        if (*(_BYTE *)(*((_QWORD *)v5 + 1) + 24 * (int)v140 + 16))
        {
          llvm::jitlink::COFFLinkGraphBuilder::exportCOMDATSymbol((uint64_t)&v219, (uint64_t *)v5, v77, v76, v230, v231);
          goto LABEL_173;
        }
        v144 = "No pending COMDAT export for symbol ";
        goto LABEL_241;
      }
      if (v118 != 3)
      {
        if (v118 != 6)
          goto LABEL_207;
LABEL_212:
        v134 = (unsigned int *)(v230 + 8);
        v135 = (_WORD *)(v230 + 14);
        goto LABEL_219;
      }
      if (!*(_BYTE *)(v230 + 17) || (*(_BYTE *)(v80 + 37) & 0x10) == 0)
        goto LABEL_212;
      if (*(_BYTE *)(v230 + 32) == 5)
      {
        v141 = *(unsigned __int16 *)(v230 + 30);
        v142 = (unsigned int *)(v230 + 8);
        v143 = (_WORD *)(v230 + 14);
LABEL_230:
        v4 = v200;
        v136 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((_QWORD *)v5 + 11), v117, *v142, v77, v76, 0, 0, 2, (*v143 & 0xF0) == 32, 0);
        if ((int)v141 < 1 || (int)v141 >= (int)((*((_QWORD *)v5 + 30) - *((_QWORD *)v5 + 29)) >> 3))
          v145 = 0;
        else
          v145 = *(_QWORD **)(*((_QWORD *)v5 + 26) + 8 * v141);
        llvm::jitlink::Block::addEdge(v145, 1, 0, (uint64_t)v136, 0);
LABEL_235:
        v220 &= ~1u;
        v219 = (uint64_t)v136;
        goto LABEL_173;
      }
      v146 = (unsigned int *)(v230 + 18);
      v147 = *(unsigned __int16 *)(v230 + 12);
      if (v147 >> 8 >= 0xFF)
        v147 = (__int16)v147;
    }
    else
    {
      v118 = *(unsigned __int8 *)(v231 + 18);
      if (v118 == 2)
      {
        if ((*(_BYTE *)(v80 + 37) & 0x10) == 0)
        {
          v132 = (unsigned int *)(v231 + 8);
          v133 = (_WORD *)(v231 + 16);
          goto LABEL_215;
        }
        v140 = *(_DWORD *)(v231 + 12);
        v4 = v200;
        goto LABEL_225;
      }
      if (v118 != 3)
      {
        if (v118 != 6)
        {
LABEL_207:
          *(_QWORD *)&v232 = "{0:d}";
          *((_QWORD *)&v232 + 1) = 5;
          v233 = v237;
          v234 = 1;
          v235 = &off_251C156F8;
          LOBYTE(v236) = v118;
          v237[0] = &v235;
          v204[0] = (uint64_t)"Unsupported storage class ";
          v205 = &v232;
          v206 = 1539;
          v209[0] = (uint64_t)v204;
          v210 = " in symbol ";
          v211 = 770;
          v224 = (llvm::formatv_object_base *)"{0:d}";
          v225 = 5;
          v226 = (const char *)&v229;
          v227 = 1;
          v228[0] = &off_251C162A0;
          v228[1] = &v212;
          v229 = v228;
          v100 = (_QWORD *)operator new();
          v213 = (std::string *)v209;
          v215 = &v224;
          v216 = 1538;
          v217 = v207;
          v218 = v208;
          *v100 = off_251C15728;
          v101 = (std::string *)(v100 + 1);
          v102 = (llvm::formatv_object_base **)&v213;
          goto LABEL_135;
        }
LABEL_218:
        v134 = (unsigned int *)(v231 + 8);
        v135 = (_WORD *)(v231 + 16);
LABEL_219:
        v139 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((_QWORD *)v5 + 11), v117, *v134, v77, v76, 0, 0, 2, (*v135 & 0xF0) == 32, 0);
        v220 &= ~1u;
        v219 = (uint64_t)v139;
        goto LABEL_172;
      }
      if (!*(_BYTE *)(v231 + 19) || (*(_BYTE *)(v80 + 37) & 0x10) == 0)
        goto LABEL_218;
      if (*(_BYTE *)(v231 + 34) == 5)
      {
        v141 = *(unsigned __int16 *)(v231 + 32) | ((unint64_t)*(unsigned __int16 *)(v231 + 36) << 16);
        v142 = (unsigned int *)(v231 + 8);
        v143 = (_WORD *)(v231 + 16);
        goto LABEL_230;
      }
      v146 = (unsigned int *)(v231 + 20);
      v147 = *(_DWORD *)(v231 + 12);
    }
    v4 = v200;
    if (*(_BYTE *)(*((_QWORD *)v5 + 1) + 24 * (int)v147 + 16))
    {
      v144 = "COMDAT export request already exists before symbol ";
LABEL_241:
      v213 = (std::string *)v144;
      v216 = 259;
      *(_QWORD *)&v232 = "{0:d}";
      *((_QWORD *)&v232 + 1) = 5;
      v233 = v237;
      v234 = 1;
      v235 = &off_251C162A0;
      v236 = &v212;
      v237[0] = &v235;
      v211 = 262;
      v209[0] = (uint64_t)&v232;
      llvm::operator+((uint64_t *)&v213, v209, (uint64_t)&v224);
      llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>((uint64_t)&v224, v204);
      v220 |= 1u;
      v219 = v204[0];
      goto LABEL_173;
    }
    llvm::jitlink::COFFLinkGraphBuilder::createCOMDATExportRequest((uint64_t)&v219, (uint64_t)v5, v71, v230, v231, v146);
LABEL_173:
    if ((v220 & 1) != 0)
    {
      v116 = 0;
      *a3 = v219;
      goto LABEL_190;
    }
    a2 = (unint64_t *)v219;
    if (v219)
      goto LABEL_175;
LABEL_186:
    if (v221)
      v123 = (unsigned __int8 *)(v221 + 17);
    else
      v123 = (unsigned __int8 *)(v222 + 19);
    v71 += *v123;
    v116 = 1;
    v4 = v200;
LABEL_190:
    if ((v223 & 1) != 0)
    {
      v124 = v221;
      v221 = 0;
      if (v124)
        (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
    }
    ++v71;
    if ((v116 & 1) == 0)
      return;
  }
  v148 = *((_QWORD *)v5 + 4);
  v149 = *((_QWORD *)v5 + 5);
  if (v148 == v149)
  {
LABEL_261:
    *a3 = 0;
LABEL_262:
    v160 = v197;
    if (*((_DWORD *)v5 + 66))
    {
      v161 = *((unsigned int *)v5 + 68);
      if ((_DWORD)v161)
      {
        v162 = 32 * v161;
        v163 = (_OWORD *)*((_QWORD *)v5 + 32);
        while (*(_QWORD *)v163 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v163 += 2;
          v162 -= 32;
          if (!v162)
            goto LABEL_267;
        }
      }
      else
      {
        v163 = (_OWORD *)*((_QWORD *)v5 + 32);
      }
      v186 = *((_QWORD *)v5 + 32) + 32 * v161;
LABEL_301:
      if (v163 != (_OWORD *)v186)
      {
        *(_QWORD *)&v232 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v196, (uint64_t)(v163 + 1), &v232, a2))
        {
          *(_QWORD *)&v232 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v160, (uint64_t)v163, &v232, a2))
          {
            v188 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v196, v163 + 1, v187, a2)[2];
            v191 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(v197, v163, v189, v190);
            v192 = v188[2];
            v193 = v188[3] & 0x1FFFFFFFFFFFFFFLL;
            v194 = v188[4];
            v160 = v197;
            llvm::jitlink::LinkGraph::makeDefined(*((_QWORD *)v5 + 11), (_QWORD *)v191[2], v192, v193, v194, 1, 2, 0);
          }
        }
        while (1)
        {
          v163 += 2;
          if (v163 == (_OWORD *)v186)
            break;
          if (*(_QWORD *)v163 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_301;
        }
      }
    }
LABEL_267:
    v164 = *((_QWORD *)v5 + 10);
    v165 = *(_QWORD *)(v164 + 48);
    v166 = 1;
    if (!v165)
      goto LABEL_271;
LABEL_268:
    v167 = *(unsigned __int16 *)(v165 + 2);
    if (v167 == 0xFFFF)
      v167 = 0;
    while (1)
    {
      if (v166 > v167)
      {
        *a3 = 0;
        return;
      }
      v168 = (_QWORD *)(*((_QWORD *)v5 + 7) + 24 * v166);
      if (v168[2])
      {
        v171 = (_QWORD *)*v168;
        v170 = v168 + 1;
        v169 = v171;
        if (v170 != v171)
          break;
      }
LABEL_294:
      ++v166;
      if (v165)
        goto LABEL_268;
LABEL_271:
      v167 = *(_DWORD *)(*(_QWORD *)(v164 + 56) + 44);
    }
    v172 = 0;
    v173 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 26) + 8 * v166) + 32);
    while (1)
    {
      v174 = (_QWORD *)*v170;
      v175 = (_QWORD *)*v170;
      v176 = v170;
      if (*v170)
      {
        do
        {
          v177 = v175;
          v175 = (_QWORD *)v175[1];
        }
        while (v175);
      }
      else
      {
        do
        {
          v177 = (_QWORD *)v176[2];
          v178 = *v177 == (_QWORD)v176;
          v176 = v177;
        }
        while (v178);
      }
      v179 = (_QWORD *)*v170;
      v180 = v170;
      if (v174)
      {
        do
        {
          v181 = v179;
          v179 = (_QWORD *)v179[1];
        }
        while (v179);
      }
      else
      {
        do
        {
          v181 = (_QWORD *)v180[2];
          v178 = *v181 == (_QWORD)v180;
          v180 = v181;
        }
        while (v178);
      }
      v182 = v177[4];
      v183 = v181[5];
      if ((*(_QWORD *)(v183 + 24) & 0x1FFFFFFFFFFFFFFLL) != v173)
        v172 = v173 - v182;
      if (*(_QWORD *)(v183 + 32))
      {
        if (v174)
          goto LABEL_290;
      }
      else
      {
        *(_QWORD *)(v183 + 32) = v172;
        if (v174)
        {
          do
          {
LABEL_290:
            v184 = v174;
            v174 = (_QWORD *)v174[1];
          }
          while (v174);
          goto LABEL_293;
        }
      }
      do
      {
        v184 = (_QWORD *)v170[2];
        v178 = *v184 == (_QWORD)v170;
        v170 = v184;
      }
      while (v178);
LABEL_293:
      v173 = v182;
      v170 = v184;
      if (v184 == v169)
        goto LABEL_294;
    }
  }
  while (1)
  {
    v150 = *(unsigned int *)(v148 + 4);
    if ((v150 & 0x80000000) != 0
      || (v151 = *((_QWORD *)v5 + 29), (int)v150 >= (int)((unint64_t)(*((_QWORD *)v5 + 30) - v151) >> 3))
      || (v152 = *(_QWORD **)(v151 + 8 * v150)) == 0)
    {
      *(_QWORD *)&v232 = "{0:d}";
      *((_QWORD *)&v232 + 1) = 5;
      v233 = v237;
      v234 = 1;
      v235 = &off_251C162A0;
      v236 = (int *)v148;
      v237[0] = &v235;
      v185 = operator new();
      v224 = (llvm::formatv_object_base *)"Weak symbol alias requested but actual symbol not found for symbol ";
      v226 = (const char *)&v232;
      LOWORD(v228[0]) = 1539;
      *(_QWORD *)v185 = off_251C15728;
      llvm::Twine::str(&v224, (std::string *)(v185 + 8));
      *a3 = v185;
      return;
    }
    llvm::object::COFFObjectFile::getSymbol(*((_QWORD **)v5 + 10), *(_DWORD *)v148, (uint64_t)&v224);
    if ((v226 & 1) != 0)
    {
      v195 = v224;
      *a3 = (uint64_t)v224;
      goto LABEL_310;
    }
    v153 = v152[2];
    v154 = *(_QWORD *)(v153 + 8);
    if ((v154 & 1) != 0)
    {
      v156 = llvm::jitlink::LinkGraph::addDefinedSymbol(*((_QWORD *)v5 + 11), v153, v152[3] & 0x1FFFFFFFFFFFFFFLL, *(_QWORD *)(v148 + 16), *(_QWORD *)(v148 + 24), v152[4], 1, 2 * (*(_DWORD *)(v148 + 8) != 3), (v152[3] & 0x2000000000000000) != 0, 0);
      if (v224)
      {
        v157 = *((unsigned __int16 *)v224 + 6);
        if (v157 >> 8 <= 0xFE)
          v158 = *((unsigned __int16 *)v224 + 6);
        else
          v158 = (__int16)v157;
      }
      else
      {
        v158 = *(_DWORD *)(v225 + 12);
      }
      llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol((uint64_t *)v5, v158, *(_DWORD *)v148, (unint64_t)v156);
    }
    else
    {
      v155 = operator new();
      *(_QWORD *)&v232 = "Weak external symbol with external symbol as alternative not supported.";
      LOWORD(v235) = 259;
      *(_QWORD *)v155 = off_251C15728;
      llvm::Twine::str((llvm::formatv_object_base **)&v232, (std::string *)(v155 + 8));
      *a3 = v155;
    }
    if ((v226 & 1) != 0)
    {
      v159 = v224;
      v224 = 0;
      if (v159)
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v159 + 8))(v159);
    }
    if ((v154 & 1) == 0)
      break;
    v148 += 32;
    if (v148 == v149)
      goto LABEL_261;
  }
  v195 = (llvm::formatv_object_base *)*a3;
LABEL_310:
  if (!v195)
    goto LABEL_262;
}

uint64_t *llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol(uint64_t *result, int a2, int a3, unint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  *(_QWORD *)(result[29] + 8 * a3) = a4;
  if (a2 >= 1)
  {
    v5 = result[7] + 24 * a2;
    v6 = *(_QWORD *)(a4 + 24) & 0x1FFFFFFFFFFFFFFLL;
    v8 = (uint64_t **)(v5 + 8);
    v7 = *(uint64_t **)(v5 + 8);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = v7[4];
          if (v10 <= v6)
            break;
LABEL_6:
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_12;
        }
        if (v10 >= v6)
        {
          v11 = v9[5];
          if ((unint64_t)v11 > a4)
            goto LABEL_6;
          if ((unint64_t)v11 >= a4)
            return result;
        }
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_12;
        }
      }
    }
    v9 = (uint64_t **)(v5 + 8);
LABEL_12:
    v12 = (uint64_t *)operator new(0x30uLL);
    v12[4] = v6;
    v12[5] = a4;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v9;
    *v8 = v12;
    v13 = **(_QWORD **)v5;
    if (v13)
    {
      *(_QWORD *)v5 = v13;
      v14 = *v8;
    }
    else
    {
      v14 = v12;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), v14);
    ++*(_QWORD *)(v5 + 16);
  }
  return result;
}

BOOL llvm::object::COFFSymbolRef::isCommon(llvm::object::COFFSymbolRef *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v1 = *((_QWORD *)this + 1);
    v4 = *(unsigned __int8 *)(v1 + 18);
    if ((v4 == 2 || v4 == 104) && !*(_DWORD *)(v1 + 12))
      return *(_DWORD *)(v1 + 8) != 0;
    return 0;
  }
  v2 = *(unsigned __int8 *)(v1 + 16);
  v3 = v2 == 104 || v2 == 2;
  if (!v3 || *(_WORD *)(v1 + 12))
    return 0;
  return *(_DWORD *)(v1 + 8) != 0;
}

_QWORD *llvm::jitlink::COFFLinkGraphBuilder::exportCOMDATSymbol(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  _WORD *v15;
  _QWORD *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *result;
  __int128 v22;

  *(_QWORD *)&v22 = a3;
  *((_QWORD *)&v22 + 1) = a4;
  if (a5)
  {
    LODWORD(v10) = *(unsigned __int16 *)(a5 + 12);
    if (v10 >> 8 > 0xFE)
    {
      v11 = 0;
      v12 = a2 + 1;
      goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a6 + 12);
  }
  if ((int)v10 < 1 || (int)v10 >= (int)((unint64_t)(a2[30] - a2[29]) >> 3))
    v11 = 0;
  else
    v11 = *(_QWORD *)(a2[26] + 8 * v10);
  v12 = a2 + 1;
  if (!a5)
  {
    v13 = *v12 + 24 * *(int *)(a6 + 12);
    v14 = (unsigned int *)(a6 + 8);
    v15 = (_WORD *)(a6 + 16);
    goto LABEL_16;
  }
  LODWORD(v10) = *(unsigned __int16 *)(a5 + 12);
LABEL_11:
  if (v10 >> 8 >= 0xFF)
    v10 = (__int16)v10;
  else
    v10 = v10;
  v13 = *v12 + 24 * v10;
  v14 = (unsigned int *)(a5 + 8);
  v15 = (_WORD *)(a5 + 14);
LABEL_16:
  v16 = llvm::jitlink::LinkGraph::addDefinedSymbol(a2[11], v11, *v14, a3, a4, 0, *(_BYTE *)(v13 + 4), 0, (*v15 & 0xF0) == 32, 0);
  if (a5)
  {
    v17 = *(unsigned __int16 *)(a5 + 12);
    if (v17 >> 8 <= 0xFE)
      v18 = *(unsigned __int16 *)(a5 + 12);
    else
      v18 = (__int16)v17;
  }
  else
  {
    v18 = *(_DWORD *)(a6 + 12);
  }
  llvm::jitlink::COFFLinkGraphBuilder::setGraphSymbol(a2, v18, *(_DWORD *)v13, (unint64_t)v16);
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(a2 + 38, &v22, v19, v20);
  result[2] = v16;
  if (*(_BYTE *)(v13 + 16))
    *(_BYTE *)(v13 + 16) = 0;
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = v16;
  return result;
}

void llvm::jitlink::COFFLinkGraphBuilder::createCOMDATExportRequest(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  char v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD v13[4];
  _QWORD v14[2];
  _QWORD *v15;
  uint64_t v16;
  llvm::formatv_object_base *v17[4];
  __int16 v18;

  v7 = 0;
  switch(*((_BYTE *)a6 + 14))
  {
    case 1:
      goto LABEL_3;
    case 2:
    case 3:
    case 4:
    case 6:
      v7 = 1;
LABEL_3:
      v8 = *a6;
      if (a4)
      {
        v9 = *(unsigned __int16 *)(a4 + 12);
        if (v9 >> 8 > 0xFE)
          v9 = (__int16)v9;
      }
      else
      {
        v9 = *(_DWORD *)(a5 + 12);
      }
      v10 = *(_QWORD *)(a2 + 8) + 24 * (int)v9;
      v11 = *(unsigned __int8 *)(v10 + 16);
      *(_DWORD *)v10 = a3;
      *(_BYTE *)(v10 + 4) = v7;
      *(_QWORD *)(v10 + 8) = v8;
      if (!v11)
        *(_BYTE *)(v10 + 16) = 1;
      *(_BYTE *)(a1 + 8) &= ~1u;
      *(_QWORD *)a1 = 0;
      break;
    case 7:
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"IMAGE_COMDAT_SELECT_NEWEST is not supported.", &v16);
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v16;
      break;
    default:
      v13[0] = "{0:d}";
      v13[1] = 5;
      v13[2] = &v15;
      v13[3] = 1;
      v14[0] = &off_251C162D0;
      v14[1] = (char *)a6 + 14;
      v15 = v14;
      v12 = operator new();
      v17[0] = (llvm::formatv_object_base *)"Invalid comdat selection type: ";
      v17[2] = (llvm::formatv_object_base *)v13;
      v18 = 1539;
      *(_QWORD *)v12 = off_251C15728;
      llvm::Twine::str(v17, (std::string *)(v12 + 8));
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v12;
      break;
  }
}

void std::vector<std::set<std::pair<unsigned long long,llvm::jitlink::Symbol *>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::detail::provider_format_adapter<int &>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<int &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL4 isEqual;
  _BOOL4 v19;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = (a2 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8), a3, a4);
    v9 = a1 + 32 * v8;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(_QWORD *)(a3 + 8), *(void **)v9, *(_QWORD *)(v9 + 8)))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      v13 = v8;
      while (*(_QWORD *)v9 != -1)
      {
        if (v11)
          v14 = 0;
        else
          v14 = *(_QWORD *)v9 == -2;
        if (v14)
          v15 = v9;
        else
          v15 = v11;
        v16 = v12 + 1;
        v17 = (v13 + v12) & v7;
        v9 = a1 + 32 * v17;
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(_QWORD *)(a3 + 8), *(void **)v9, *(_QWORD *)(v9 + 8));
        v13 = v17;
        v11 = v15;
        v19 = isEqual;
        result = 1;
        v12 = v16;
        if (v19)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = xmmword_24AA2AC20;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = (_OWORD *)v4;
      do
      {
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>,llvm::StringRef,llvm::StringRef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, (unint64_t *)&v17);
          v14 = v17;
          *v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 32 * v15;
    do
    {
      *result = xmmword_24AA2AC20;
      result += 2;
      v16 -= 32;
    }
    while (v16);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned char const&>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned char const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned char,void>::format(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

const char *llvm::jitlink::getCOFFX86RelocationKindName(llvm::jitlink *this)
{
  if (((_DWORD)this - 25) >= 5)
    return llvm::jitlink::x86_64::getEdgeKindName(this);
  else
    return off_251C163C8[(char)((_BYTE)this - 25)];
}

void llvm::jitlink::createLinkGraphFromCOFFObject_x86_64(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  llvm::object::ObjectFile *v4;
  llvm::object::ObjectFile *v5;
  std::string __p;
  __int128 v7;
  uint64_t v8;
  std::string v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[20];
  llvm::object::ObjectFile *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v12[0] = *a1;
  v12[1] = v3;
  llvm::object::COFFObjectFile::create(v12, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v5 = v13;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v5;
  }
  else
  {
    v4 = v13;
    llvm::object::ObjectFile::makeTriple(v13, (llvm::Triple *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v9 = __p;
    v10 = v7;
    v11 = v8;
    llvm::jitlink::COFFLinkGraphBuilder::COFFLinkGraphBuilder((uint64_t)v12, (uint64_t)v4, (uint64_t)&v9, (uint64_t)llvm::jitlink::getCOFFX86RelocationKindName);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    *(_QWORD *)&v12[0] = &off_251C16300;
    llvm::jitlink::COFFLinkGraphBuilder::buildGraph((llvm::jitlink::COFFLinkGraphBuilder *)v12, a2);
    llvm::jitlink::COFFLinkGraphBuilder::~COFFLinkGraphBuilder((llvm::jitlink::COFFLinkGraphBuilder *)v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    (*(void (**)(llvm::object::ObjectFile *))(*(_QWORD *)v4 + 8))(v4);
  }
}

void llvm::jitlink::link_COFF_x86_64(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::jitlink::LinkGraph *v45;
  uint64_t v46;
  int64x2_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _QWORD *v56;
  llvm::jitlink::LinkGraph *v57;
  uint64_t v58;
  uint64_t v59;
  int64x2_t v60;
  _OWORD v61[2];
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  uint64_t v65;
  _BYTE v66[24];
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  llvm::jitlink::LinkGraph *v75;
  uint64_t v76;
  __int128 v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  _QWORD v81[3];
  _QWORD v82[3];
  _QWORD v83[3];
  _QWORD v84[6];

  v84[3] = *MEMORY[0x24BDAC8D0];
  v65 = 0;
  v64 = 0u;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  memset(v61, 0, sizeof(v61));
  v60 = 0u;
  v4 = (uint64_t)*a1 + 120;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, v4))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v79, *a2, v4);
    if (v81[0] < 8uLL)
    {
      *(_QWORD *)&v77 = llvm::jitlink::markAllSymbolsLive;
      v78 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v60.i64[1] < *(_QWORD *)&v61[0])
      {
        v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v60.i64[1], &v77)+ 32;
LABEL_49:
        v60.i64[1] = v6;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v77);
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v79);
        *(_QWORD *)&v79 = *a2;
        v81[0] = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::link_COFF_x86_64(std::unique_ptr<llvm::jitlink::LinkGraph>,std::unique_ptr<llvm::jitlink::JITLinkContext>)::$_0,llvm::jitlink::link_COFF_x86_64(std::unique_ptr<llvm::jitlink::LinkGraph>,std::unique_ptr<llvm::jitlink::JITLinkContext>)::$_0,void>::Callbacks
               + 2;
        if (*(_QWORD *)&v63[1] < *((_QWORD *)&v63[1] + 1))
        {
          v30 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v63[1], &v79)+ 32;
LABEL_65:
          *(_QWORD *)&v63[1] = v30;
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v79);
          goto LABEL_66;
        }
        v31 = (uint64_t)(*(_QWORD *)&v63[1] - *((_QWORD *)&v63[0] + 1)) >> 5;
        if (!((unint64_t)(v31 + 1) >> 59))
        {
          v32 = (uint64_t)(*((_QWORD *)&v63[1] + 1) - *((_QWORD *)&v63[0] + 1)) >> 4;
          if (v32 <= v31 + 1)
            v32 = v31 + 1;
          if (*((_QWORD *)&v63[1] + 1) - *((_QWORD *)&v63[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
            v33 = 0x7FFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          *((_QWORD *)&v67 + 1) = (char *)&v63[1] + 8;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v63[1] + 8, v33);
          else
            v34 = 0;
          v35 = (uint64_t)&v34[32 * v31];
          *(_QWORD *)v66 = v34;
          *(_QWORD *)&v66[8] = v35;
          *(_QWORD *)&v67 = &v34[32 * v33];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v35, &v79);
          v30 = v35 + 32;
          *(_QWORD *)&v66[16] = v35 + 32;
          v37 = (__int128 *)*((_QWORD *)&v63[0] + 1);
          v36 = *(__int128 **)&v63[1];
          v38 = *(_QWORD *)&v66[8];
          if (*(_QWORD *)&v63[1] == *((_QWORD *)&v63[0] + 1))
          {
            v39 = vdupq_n_s64(*(unint64_t *)&v63[1]);
          }
          else
          {
            do
            {
              v36 -= 2;
              v38 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v38 - 32, v36);
            }
            while (v36 != v37);
            v39 = *(int64x2_t *)((char *)v63 + 8);
            v30 = *(_QWORD *)&v66[16];
          }
          *((_QWORD *)&v63[0] + 1) = v38;
          *(_QWORD *)&v63[1] = v30;
          *(int64x2_t *)&v66[8] = v39;
          v40 = *((_QWORD *)&v63[1] + 1);
          *((_QWORD *)&v63[1] + 1) = v67;
          *(_QWORD *)&v67 = v40;
          *(_QWORD *)v66 = v39.i64[0];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v66);
          goto LABEL_65;
        }
LABEL_78:
        abort();
      }
      v11 = (v60.i64[1] - v60.i64[0]) >> 5;
      if ((unint64_t)(v11 + 1) >> 59)
        goto LABEL_78;
      v12 = (*(_QWORD *)&v61[0] - v60.i64[0]) >> 4;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if (*(_QWORD *)&v61[0] - v60.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v13 = 0x7FFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      *((_QWORD *)&v67 + 1) = v61;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v61, v13);
      else
        v14 = 0;
      v19 = (uint64_t)&v14[32 * v11];
      *(_QWORD *)v66 = v14;
      *(_QWORD *)&v66[8] = v19;
      *(_QWORD *)&v67 = &v14[32 * v13];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19, &v77);
      v6 = v19 + 32;
      *(_QWORD *)&v66[16] = v19 + 32;
      v20 = (__int128 *)v60.i64[1];
      v21 = *(_QWORD *)&v66[8];
      if (v60.i64[1] != v60.i64[0])
      {
        do
        {
          v20 -= 2;
          v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v21 - 32, v20);
        }
        while (v20 != (__int128 *)v60.i64[0]);
        goto LABEL_46;
      }
    }
    else
    {
      if (v60.i64[1] >= *(_QWORD *)&v61[0])
      {
        v7 = (v60.i64[1] - v60.i64[0]) >> 5;
        if ((unint64_t)(v7 + 1) >> 59)
          goto LABEL_78;
        v8 = (*(_QWORD *)&v61[0] - v60.i64[0]) >> 4;
        if (v8 <= v7 + 1)
          v8 = v7 + 1;
        if (*(_QWORD *)&v61[0] - v60.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v9 = 0x7FFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        *((_QWORD *)&v67 + 1) = v61;
        if (v9)
          v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v61, v9);
        else
          v10 = 0;
        v15 = (uint64_t)&v10[32 * v7];
        *(_QWORD *)v66 = v10;
        *(_QWORD *)&v66[8] = v15;
        *(_QWORD *)&v67 = &v10[32 * v9];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v15, &v79);
        v5 = v15 + 32;
        *(_QWORD *)&v66[16] = v5;
        v16 = (__int128 *)v60.i64[1];
        v17 = *(_QWORD *)&v66[8];
        if (v60.i64[1] == v60.i64[0])
        {
          v18 = vdupq_n_s64(v60.u64[1]);
        }
        else
        {
          do
          {
            v16 -= 2;
            v17 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17 - 32, v16);
          }
          while (v16 != (__int128 *)v60.i64[0]);
          v18 = v60;
          v5 = *(_QWORD *)&v66[16];
        }
        v60.i64[0] = v17;
        v60.i64[1] = v5;
        *(int64x2_t *)&v66[8] = v18;
        v22 = *(_QWORD *)&v61[0];
        *(_QWORD *)&v61[0] = v67;
        *(_QWORD *)&v67 = v22;
        *(_QWORD *)v66 = v18.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v66);
      }
      else
      {
        v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v60.i64[1], &v79)+ 32;
      }
      v60.i64[1] = v5;
      *(_QWORD *)&v77 = ".pdata";
      *((_QWORD *)&v77 + 1) = 6;
      v78 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::SEHFrameKeepAlivePass,llvm::jitlink::SEHFrameKeepAlivePass,void>::Callbacks
          + 2;
      if (v5 < *(_QWORD *)&v61[0])
      {
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5, &v77);
        v6 = v5 + 32;
        goto LABEL_49;
      }
      v23 = (uint64_t)(v5 - v60.i64[0]) >> 5;
      if ((unint64_t)(v23 + 1) >> 59)
        goto LABEL_78;
      v24 = (*(_QWORD *)&v61[0] - v60.i64[0]) >> 4;
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if (*(_QWORD *)&v61[0] - v60.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v25 = 0x7FFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      *((_QWORD *)&v67 + 1) = v61;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v61, v25);
      else
        v26 = 0;
      v27 = (uint64_t)&v26[32 * v23];
      *(_QWORD *)v66 = v26;
      *(_QWORD *)&v66[8] = v27;
      *(_QWORD *)&v67 = &v26[32 * v25];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v27, &v77);
      v6 = v27 + 32;
      *(_QWORD *)&v66[16] = v27 + 32;
      v20 = (__int128 *)v60.i64[1];
      v21 = *(_QWORD *)&v66[8];
      if (v60.i64[1] != v60.i64[0])
      {
        do
        {
          v20 -= 2;
          v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v21 - 32, v20);
        }
        while (v20 != (__int128 *)v60.i64[0]);
LABEL_46:
        v28 = v60;
        v6 = *(_QWORD *)&v66[16];
LABEL_48:
        v60.i64[0] = v21;
        v60.i64[1] = v6;
        *(int64x2_t *)&v66[8] = v28;
        v29 = *(_QWORD *)&v61[0];
        *(_QWORD *)&v61[0] = v67;
        *(_QWORD *)&v67 = v29;
        *(_QWORD *)v66 = v28.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v66);
        goto LABEL_49;
      }
    }
    v28 = vdupq_n_s64((unint64_t)v20);
    goto LABEL_48;
  }
LABEL_66:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v66, *a2, *a1, &v60);
  if (*(_QWORD *)v66)
  {
    v41 = *a2;
    v59 = *(_QWORD *)v66;
    *(_QWORD *)v66 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v41 + 24))(v41, &v59);
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    v42 = *(_QWORD *)v66;
    if (*(_QWORD *)v66)
LABEL_70:
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  else
  {
    v43 = (_QWORD *)operator new();
    v44 = *a2;
    *a2 = 0;
    v45 = *a1;
    *a1 = 0;
    v46 = *(_QWORD *)&v61[0];
    v47 = v60;
    v60 = 0uLL;
    v48 = *((_QWORD *)&v61[1] + 1);
    v49 = *(_OWORD *)((char *)v61 + 8);
    memset(v61, 0, sizeof(v61));
    v50 = *(_QWORD *)&v63[0];
    v51 = v62;
    v62 = 0uLL;
    v52 = *((_QWORD *)&v63[1] + 1);
    v53 = *(_OWORD *)((char *)v63 + 8);
    memset(v63, 0, sizeof(v63));
    v54 = v65;
    v55 = v64;
    v64 = 0uLL;
    v65 = 0;
    v75 = v45;
    v76 = v44;
    *(int64x2_t *)v66 = v47;
    v79 = 0uLL;
    v67 = v49;
    *(_QWORD *)&v66[16] = v46;
    v68 = v48;
    v80 = 0;
    memset(v81, 0, sizeof(v81));
    v69 = v51;
    memset(v82, 0, sizeof(v82));
    v71 = v53;
    v70 = v50;
    v72 = v52;
    memset(v83, 0, sizeof(v83));
    v73 = v55;
    v74 = v54;
    memset(v84, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v43, &v76, (uint64_t *)&v75, (uint64_t)v66);
    *v56 = &off_251C163B0;
    *(_QWORD *)&v77 = &v73;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
    *(_QWORD *)&v77 = &v71;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
    *(_QWORD *)&v77 = &v69;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
    *(_QWORD *)&v77 = &v67;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
    *(_QWORD *)&v77 = v66;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
    v57 = v75;
    v75 = 0;
    if (v57)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v57);
      MEMORY[0x24BD1B3A4]();
    }
    v58 = v76;
    v76 = 0;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    *v43 = &off_251C16388;
    *(_QWORD *)v66 = v84;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
    *(_QWORD *)v66 = v83;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
    *(_QWORD *)v66 = v82;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
    *(_QWORD *)v66 = v81;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
    *(_QWORD *)v66 = &v79;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
    *(_QWORD *)v66 = v43;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v43, (uint64_t *)v66);
    v42 = *(_QWORD *)v66;
    *(_QWORD *)v66 = 0;
    if (v42)
      goto LABEL_70;
  }
  *(_QWORD *)v66 = &v64;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
  *(_QWORD *)v66 = (char *)v63 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
  *(_QWORD *)v66 = &v62;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
  *(_QWORD *)v66 = (char *)v61 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
  *(_QWORD *)v66 = &v60;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v66);
}

void `anonymous namespace'::COFFLinkGraphBuilder_x86_64::~COFFLinkGraphBuilder_x86_64(_anonymous_namespace_::COFFLinkGraphBuilder_x86_64 *this)
{
  llvm::jitlink::COFFLinkGraphBuilder::~COFFLinkGraphBuilder(this);
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::COFFLinkGraphBuilder_x86_64::addRelocations(_anonymous_namespace_::COFFLinkGraphBuilder_x86_64 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t (**v56)(llvm::detail::format_adapter *__hidden);
  int *v57;
  _QWORD v58[2];
  _QWORD v59[2];
  llvm::formatv_object_base *v60[4];
  __int16 v61;
  _QWORD v62[2];
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 10);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4);
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 360))(v4);
  v48 = v5;
  v49 = v7;
  v10 = v7 == v9 && v5 == v8;
  if (!v10)
  {
    v11 = v8;
    v12 = v9;
    v45 = v9;
    v46 = v8;
    while (1)
    {
      llvm::object::COFFObjectFile::getSectionName(*((llvm::object::COFFObjectFile **)this + 10), v5, (uint64_t)v62);
      if ((v63 & 1) != 0)
        break;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 160))(v49, v48);
      if (v13 > 0x7FFFFFFE
        || (int)(v13 + 1) >= (int)((*((_QWORD *)this + 30) - *((_QWORD *)this + 29)) >> 3)
        || (v14 = *(_QWORD **)(*((_QWORD *)this + 26) + 8 * (v13 + 1))) == 0)
      {
        LOWORD(v56) = 1283;
        *(_QWORD *)&v53 = "Referencing a section that wasn't added to the graph: ";
        v54 = (_QWORD *)v62[0];
        v55 = v62[1];
        getErrorErrorCat();
        v19 = operator new();
        *(_QWORD *)v19 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v53, (std::string *)(v19 + 8));
        *(_QWORD *)(v19 + 32) = 3;
        *(_QWORD *)(v19 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v19 + 48) = 1;
        goto LABEL_14;
      }
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 272))(v49, v48);
      v17 = v16;
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 280))(v49, v48);
      v50 = v15;
      v51 = v17;
      v47 = v18;
      if (v15 == v18)
      {
LABEL_11:
        v19 = 0;
        *a2 = 0;
        v12 = v45;
        v11 = v46;
      }
      else
      {
        while (2)
        {
          v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 312))(v51, v15);
          if (v21 == (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 56))(*((_QWORD *)this + 10)))
          {
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 160))(v49, v48);
            *(_QWORD *)&v53 = "Invalid symbol index in relocation entry. index: {0}, section: {1}";
            *((_QWORD *)&v53 + 1) = 66;
            v54 = v59;
            v55 = 2;
            v56 = &off_251C16328;
            v57 = (int *)(v15 + 4);
          }
          else
          {
            v22 = (_QWORD *)*((_QWORD *)this + 10);
            v23 = v22[12];
            if (v23)
              v24 = 0;
            else
              v24 = v21;
            if (v23)
              v25 = v21;
            else
              v25 = 0;
            if (!v23)
              v23 = v22[13];
            if (v25)
              v26 = v25;
            else
              v26 = v24;
            v27 = v26 - v23;
            v10 = v22[6] == 0;
            v28 = 18;
            if (v10)
              v28 = 20;
            v29 = v27 / v28;
            v52 = v29;
            if ((v29 & 0x80000000) == 0)
            {
              v30 = *((_QWORD *)this + 29);
              if ((int)v29 < (int)((unint64_t)(*((_QWORD *)this + 30) - v30) >> 3))
              {
                v31 = *(_QWORD **)(v30 + 8 * v29);
                if (v31)
                {
                  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 152))(v49, v48);
                  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 304))(v51, v50);
                  v34 = v14[3];
                  v35 = v33 + v32 - *v14;
                  switch((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 320))(v51, v50))
                  {
                    case 1:
                      v36 = *(_QWORD *)(v34 + v35);
                      v37 = 27;
                      goto LABEL_49;
                    case 3:
                      v36 = *(int *)(v34 + v35);
                      v37 = 26;
                      goto LABEL_49;
                    case 4:
                      v36 = *(int *)(v34 + v35);
                      goto LABEL_48;
                    case 5:
                      v36 = *(int *)(v34 + v35) - 1;
                      goto LABEL_48;
                    case 6:
                      v36 = *(int *)(v34 + v35) - 2;
                      goto LABEL_48;
                    case 7:
                      v36 = *(int *)(v34 + v35) - 3;
                      goto LABEL_48;
                    case 8:
                      v36 = *(int *)(v34 + v35) - 4;
                      goto LABEL_48;
                    case 9:
                      v36 = *(int *)(v34 + v35) - 5;
LABEL_48:
                      v37 = 25;
                      goto LABEL_49;
                    case 10:
                      if (v25)
                      {
                        v38 = *(unsigned __int16 *)(v25 + 12);
                        if (v38 != 0xFFFF)
                        {
                          if (v38 >> 8 > 0xFE)
                            v38 = (__int16)v38;
LABEL_60:
                          v39 = (int)v38;
                          goto LABEL_67;
                        }
                      }
                      else
                      {
                        v38 = *(_DWORD *)(v24 + 12);
                        if (v38 != -1)
                          goto LABEL_60;
                      }
                      v40 = *((_QWORD *)this + 10);
                      v41 = *(_QWORD *)(v40 + 48);
                      if (v41)
                      {
                        v42 = *(unsigned __int16 *)(v41 + 2);
                        if (v42 == 0xFFFF)
                          v42 = 0;
                      }
                      else
                      {
                        v42 = *(_DWORD *)(*(_QWORD *)(v40 + 56) + 44);
                      }
                      v39 = (v42 + 1);
LABEL_67:
                      v36 = *(__int16 *)(v34 + v35);
                      v31 = llvm::jitlink::LinkGraph::addAbsoluteSymbol(*((_QWORD *)this + 11), (uint64_t)"secidx", 6, v39, 2, 0, 2, 0);
                      v37 = 28;
LABEL_49:
                      *(_QWORD *)&v53 = v31;
                      DWORD2(v53) = v35;
                      v54 = (_QWORD *)v36;
                      LOBYTE(v55) = v37;
                      llvm::jitlink::Block::addEdge(v14, &v53);
LABEL_50:
                      *a2 = 0;
                      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v51 + 296))(v51, &v50);
                      v15 = v50;
                      if (v50 == v47)
                        goto LABEL_11;
                      continue;
                    case 11:
                      if ((*(_BYTE *)(v31[2] + 8) & 1) == 0)
                        goto LABEL_50;
                      v36 = *(int *)(v34 + v35);
                      v37 = 29;
                      goto LABEL_49;
                    default:
                      v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 320))(v51, v50);
                      *(_QWORD *)&v53 = "{0:d}";
                      *((_QWORD *)&v53 + 1) = 5;
                      v54 = v58;
                      v55 = 1;
                      v56 = &off_251C144A8;
                      v57 = (int *)v44;
                      v58[0] = &v56;
                      v19 = operator new();
                      v60[0] = (llvm::formatv_object_base *)"Unsupported x86_64 relocation:";
                      v60[2] = (llvm::formatv_object_base *)&v53;
                      v61 = 1539;
                      *(_QWORD *)v19 = off_251C15728;
                      llvm::Twine::str(v60, (std::string *)(v19 + 8));
                      *a2 = v19;
                      v12 = v45;
                      v11 = v46;
                      goto LABEL_15;
                  }
                }
              }
            }
            v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 160))(v49, v48);
            *(_QWORD *)&v53 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, section: {1}";
            *((_QWORD *)&v53 + 1) = 96;
            v54 = v59;
            v55 = 2;
            v56 = &off_251C162A0;
            v57 = &v52;
          }
          break;
        }
        v58[0] = &off_251C144A8;
        v58[1] = v43;
        v59[0] = &v56;
        v59[1] = v58;
        getErrorErrorCat();
        v19 = operator new();
        v61 = 262;
        v60[0] = (llvm::formatv_object_base *)&v53;
        *(_QWORD *)v19 = off_251C127D0;
        llvm::Twine::str(v60, (std::string *)(v19 + 8));
        *(_QWORD *)(v19 + 32) = 3;
        *(_QWORD *)(v19 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v19 + 48) = 1;
        *a2 = v19;
        v12 = v45;
        v11 = v46;
      }
LABEL_15:
      if ((v63 & 1) != 0)
      {
        v20 = v62[0];
        v62[0] = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      }
      if (v19)
        return;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v49 + 136))(v49, &v48);
      v5 = v48;
      if (v49 == v12 && v48 == v11)
        goto LABEL_72;
    }
    v19 = v62[0];
    v62[0] = 0;
LABEL_14:
    *a2 = v19;
    goto LABEL_15;
  }
LABEL_72:
  *a2 = 0;
}

void llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul> const&>::~stream_operator_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul> const&>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  return write_unsigned<unsigned long>(a2, **(unsigned int **)(a1 + 8), 0, 0, 0);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::SEHFrameKeepAlivePass>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD **v18;
  uint64_t v19;
  _QWORD **v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  int v28;

  result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (result)
  {
    v7 = result;
    result = (uint64_t)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(result + 32);
    v9 = *(_QWORD *)(v7 + 32) + 8 * *(unsigned int *)(v7 + 48);
    if (v9 != result)
    {
      v10 = (uint64_t *)result;
      v11 = v8;
      do
      {
        v12 = *v10;
        v13 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, *v10, 0, 0, 0, 0);
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v15 = *(_QWORD *)(v12 + 40);
        v14 = *(_QWORD *)(v12 + 48);
        if (v15 == v14)
        {
          v17 = 0;
        }
        else
        {
          v16 = v13;
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v15 + 16) + 8) & 1) != 0)
            {
              v25 = *(_QWORD *)(*(_QWORD *)v15 + 16);
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v26, &v25, (uint64_t)&v22);
            }
            v15 += 32;
          }
          while (v15 != v14);
          v17 = v26;
          if ((_DWORD)v27)
          {
            v18 = v26;
            if (v28)
            {
              v19 = 0;
              while (((unint64_t)v26[v19] | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (v28 == ++v19)
                  goto LABEL_24;
              }
              v18 = &v26[v19];
            }
            v20 = &v26[v28];
            if (v18 != v20)
            {
              v21 = *v18;
LABEL_19:
              *(_QWORD *)&v22 = v16;
              DWORD2(v22) = 0;
              v23 = 0;
              v24 = 1;
              llvm::jitlink::Block::addEdge(v21, &v22);
              while (++v18 != v20)
              {
                v21 = *v18;
                if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  if (v18 != v20)
                    goto LABEL_19;
                  break;
                }
              }
              v17 = v26;
            }
          }
        }
LABEL_24:
        result = MEMORY[0x24BD1B398](v17, 8);
        while (++v10 != v11)
        {
          if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_29;
        }
        v10 = v11;
LABEL_29:
        ;
      }
      while (v10 != (uint64_t *)v9);
    }
  }
  *a4 = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::link_COFF_x86_64(std::unique_ptr<llvm::jitlink::LinkGraph>,std::unique_ptr<llvm::jitlink::JITLinkContext>)::$_0>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  _OWORD v39[3];
  __n128 v40;
  _OWORD v41[3];
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v46[8];
  _OWORD v47[3];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v4 = *a2;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v38 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v41);
  v39[0] = v41[0];
  v39[1] = v41[1];
  v5 = v42;
  v39[2] = v41[2];
  v40 = v42;
  v34 = v43;
  v35 = v44;
  v6 = (uint64_t *)v42.n128_u64[0];
  if (*(_QWORD *)&v41[0] == v43 && v42.n128_u64[0] == v44)
  {
LABEL_46:
    *a3 = 0;
    return MEMORY[0x24BD1B398](v36[0], 8, v5);
  }
  while (1)
  {
    v7 = *v6;
    v8 = *(_QWORD *)(v7 + 40);
    v9 = *(_QWORD *)(v7 + 48);
LABEL_4:
    if (v8 != v9)
      break;
    v5 = llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v39, (uint64_t)&v49);
    v6 = (uint64_t *)v40.n128_u64[0];
    if (*(_QWORD *)&v39[0] == v34 && v40.n128_u64[0] == v35)
      goto LABEL_46;
  }
  v10 = 12;
  switch(*(_BYTE *)(v8 + 24))
  {
    case 0x19:
      goto LABEL_38;
    case 0x1A:
      v11 = v38;
      if (v38)
        goto LABEL_23;
      llvm::jitlink::LinkGraph::defined_symbols(this, &v49);
      v47[0] = v49;
      v47[1] = v50;
      v47[2] = v51;
      v48 = v52;
      v14 = v53;
      v15 = v54;
      v16 = (uint64_t *)v52;
      if ((_QWORD)v49 == v53 && (_QWORD)v52 == v54)
        goto LABEL_19;
      break;
    case 0x1B:
      v10 = 2;
      goto LABEL_38;
    case 0x1C:
      v10 = 5;
      goto LABEL_38;
    case 0x1D:
      v24 = *(_QWORD *)(v8 + 16);
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 16);
      if (!v37)
        goto LABEL_32;
      v26 = ((v25 >> 4) ^ (v25 >> 9)) & (v37 - 1);
      v27 = *(_QWORD *)(v36[0] + 16 * v26);
      if (v27 == v25)
        goto LABEL_36;
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v26 + v28++;
        v26 = v29 & (v37 - 1);
        v27 = *(_QWORD *)(v36[0] + 16 * v26);
        if (v27 == v25)
          goto LABEL_36;
      }
LABEL_32:
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v49, v25);
      if ((_QWORD)v49)
        v30 = *(_QWORD *)v49;
      else
        v30 = 0;
      *(_QWORD *)&v47[0] = v25;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t)v36, (uint64_t *)v47)[1] = v30;
LABEL_36:
      *(_QWORD *)&v49 = v25;
      v23 = v24
          - llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t)v36, (uint64_t *)&v49)[1];
      goto LABEL_37;
    default:
      goto LABEL_39;
  }
  do
  {
    v17 = *v16;
    if (*(_QWORD *)(v17 + 8) == 11
      && **(_QWORD **)v17 == 0x426567616D495F5FLL
      && *(_QWORD *)(*(_QWORD *)v17 + 3) == 0x657361426567616DLL)
    {
      v11 = (*(_QWORD *)(v17 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v17 + 16);
      v38 = v11;
LABEL_23:
      v23 = *(_QWORD *)(v8 + 16) - v11;
LABEL_37:
      *(_QWORD *)(v8 + 16) = v23;
      v10 = 3;
LABEL_38:
      *(_BYTE *)(v8 + 24) = v10;
LABEL_39:
      v8 += 32;
      goto LABEL_4;
    }
    llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v47, (uint64_t)v46);
    v16 = (uint64_t *)v48;
  }
  while (*(_QWORD *)&v47[0] != v14 || (_QWORD)v48 != v15);
LABEL_19:
  v49 = 0uLL;
  LODWORD(v50) = 0;
  *(_QWORD *)&v47[0] = "__ImageBase";
  *((_QWORD *)&v47[0] + 1) = 11;
  *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::FindAndConstruct((uint64_t *)&v49, v47, v12, v13)+ 4) = 0;
  *(_QWORD *)&v47[0] = 0;
  v46[0] = 0;
  v20 = (_QWORD *)operator new();
  *v20 = &off_251C16358;
  v20[1] = v46;
  v20[2] = v47;
  v45 = v20;
  (*(void (**)(uint64_t, __int128 *, _QWORD **))(*(_QWORD *)v4 + 32))(v4, &v49, &v45);
  v21 = v45;
  v45 = 0;
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  v22 = v46[0];
  if (!v46[0])
  {
    v11 = *(_QWORD *)&v47[0];
    v38 = *(_QWORD *)&v47[0];
    MEMORY[0x24BD1B398](v49, 8);
    goto LABEL_23;
  }
  MEMORY[0x24BD1B398](v49, 8);
  *a3 = v22;
  return MEMORY[0x24BD1B398](v36[0], 8, v5);
}

void llvm::jitlink::createLookupContinuation<`anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1}>(`anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1})::Impl::~Impl()
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t *llvm::jitlink::createLookupContinuation<`anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1}>(`anonymous namespace'::COFFLinkGraphLowering_x86_64::getImageBaseAddress(llvm::jitlink::LinkGraph &,llvm::jitlink::JITLinkContext &)::{lambda(llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)#1})::Impl::run(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = *(_BYTE *)(a2 + 24) & 1;
  v2 = *(_QWORD **)a2;
  if (v12)
  {
    *(_QWORD *)a2 = 0;
    v5 = *(_QWORD **)(a1 + 8);
    v9 = 0;
    *v5 = v2;
    if (!v2)
LABEL_13:
      *v5 = 0;
  }
  else
  {
    v9 = *(_QWORD **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v3 = v10;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v11 = *(_DWORD *)(a2 + 16);
    v4 = v11;
    *(_DWORD *)(a2 + 16) = 0;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = &v2[4 * v4];
    if (v3)
    {
      if ((_DWORD)v4)
      {
        v7 = 32 * v4;
        while (*v2 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v2 += 4;
          v7 -= 32;
          if (!v7)
            goto LABEL_11;
        }
      }
      v6 = v2;
    }
LABEL_11:
    **(_QWORD **)(a1 + 16) = v6[2];
    if (v5 && !*v5)
      goto LABEL_13;
  }
  return llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t *)&v9);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

void `anonymous namespace'::COFFJITLinker_x86_64::~COFFJITLinker_x86_64(_anonymous_namespace_::COFFJITLinker_x86_64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<`anonymous namespace'::COFFJITLinker_x86_64>::fixUpBlocks(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__src;
  int v21;

  if (*(_DWORD *)(a1 + 192))
  {
    v4 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a1 + 184);
    }
    v7 = *(_QWORD *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (_QWORD *)v7)
    {
      v8 = v6[2];
      v21 = *(_DWORD *)(v8 + 20);
      v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      v11 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9)
        goto LABEL_28;
      v12 = v9;
      v13 = v10;
      do
      {
        v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          v15 = v14[4];
          __src = (void *)v14[3];
          v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          v17 = (uint64_t)v16;
          if (v15)
            memmove(v16, __src, v15);
          v14[3] = v17;
          v14[4] = v15;
          v14[1] |= 4uLL;
        }
        v18 = v14[5];
        v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::x86_64::applyFixup(a1, v14, v18, 0, a2);
            if (*a2)
              return;
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_27;
        }
        v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (_QWORD *)v7)
          break;
        if (*v6 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_10;
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<`anonymous namespace'::COFFJITLinker_x86_64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::jitlink::aarch32::encodeImmBT4BlT1BlxT2_J1J2(unint64_t this)
{
  return ((this >> 14) & 0x400 | (this >> 12) & 0x3FF | ((((unsigned __int16)(this >> 11) ^ (unsigned __int16)(this >> 10)) & 0x2000 | ((unsigned __int16)(this >> 11) ^ (unsigned __int16)(this >> 13)) & 0x800 | (this >> 1) & 0x7FF) << 16)) ^ 0x28000000;
}

void llvm::jitlink::aarch32::makeUnexpectedOpcodeError(uint64_t *a1, uint64_t (*a2)(uint64_t), __int16 *a3, __int16 *a4, uint64_t a5)
{
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  _QWORD v9[4];
  uint64_t (**v10)(llvm::detail::format_adapter *__hidden);
  __int16 v11;
  uint64_t (**v12)(llvm::detail::format_adapter *__hidden);
  __int16 v13;
  _QWORD v14[2];
  _QWORD v15[3];
  llvm::formatv_object_base *v16;
  __int16 v17;

  v6 = *a3;
  v7 = *a4;
  v9[0] = "Invalid opcode [ 0x{0:x4}, 0x{1:x4} ] for relocation: {2}";
  v9[1] = 57;
  v9[2] = v15;
  v9[3] = 3;
  v10 = &off_251C16400;
  v11 = v6;
  v12 = &off_251C16400;
  v13 = v7;
  v14[0] = &off_251C156C8;
  v14[1] = a2(a5);
  v15[0] = &v10;
  v15[1] = &v12;
  v15[2] = v14;
  v8 = operator new();
  v17 = 262;
  v16 = (llvm::formatv_object_base *)v9;
  *(_QWORD *)v8 = off_251C15728;
  llvm::Twine::str(&v16, (std::string *)(v8 + 8));
  *a1 = v8;
}

void llvm::jitlink::aarch32::readAddendData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  signed int v8;
  unsigned int v9;
  std::string *v10;
  std::string::size_type v11;
  __int128 v12;
  llvm::formatv_object_base *v13;
  llvm::formatv_object_base *v14;
  llvm::formatv_object_base *v15;
  uint64_t v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  _QWORD v20[2];
  __int128 v21;
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  llvm::formatv_object_base *v29[4];
  __int16 v30;
  int v31;
  __int16 v32;

  if ((*(_BYTE *)(a3 + 24) & 0xFE) == 2)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + *(unsigned int *)(a3 + 8));
    v9 = bswap32(v8);
    if ((*(_DWORD *)(a1 + 172) - 1) >= 2)
      v8 = v9;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v8;
  }
  else
  {
    std::operator+<char>();
    v10 = std::string::append(&v17, ", section ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v19 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = *(_OWORD *)*(_QWORD *)(a2 + 16);
    v20[0] = __p;
    v21 = v12;
    v22 = 1284;
    v23[0] = v20;
    v23[2] = " can not read implicit addend for aarch32 edge kind ";
    v24 = 770;
    v13 = (llvm::formatv_object_base *)(*(uint64_t (**)(_QWORD))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
    if (*(_BYTE *)v13)
    {
      v14 = v13;
      v15 = (llvm::formatv_object_base *)v23;
    }
    else
    {
      v15 = (llvm::formatv_object_base *)v20;
      v27 = v25;
      v28 = v26;
      v14 = (llvm::formatv_object_base *)" can not read implicit addend for aarch32 edge kind ";
    }
    v16 = operator new();
    v29[0] = v15;
    v29[2] = v14;
    v30 = 770;
    v31 = v27;
    v32 = v28;
    *(_QWORD *)v16 = off_251C15728;
    llvm::Twine::str(v29, (std::string *)(v16 + 8));
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v16;
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void llvm::jitlink::aarch32::readAddendArm(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v6;
  const char *v7;
  size_t v8;
  std::string *v11;
  std::string::size_type v12;
  __int128 v13;
  const char *v14;
  const char *v15;
  llvm::formatv_object_base *v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  _QWORD v22[2];
  __int128 v23;
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  llvm::formatv_object_base *v31[2];
  const char *v32;
  size_t v33;
  __int16 v34;
  int v35;
  __int16 v36;

  if (*(_BYTE *)(a3 + 24) == 4)
  {
    v6 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(4);
    v7 = v6;
    if (v6)
      v8 = strlen(v6);
    else
      v8 = 0;
    v17 = operator new();
    v31[0] = (llvm::formatv_object_base *)"Addend extraction for relocation type not yet implemented: ";
    v32 = v7;
    v33 = v8;
    v34 = 1283;
    *(_QWORD *)v17 = off_251C15728;
    llvm::Twine::str(v31, (std::string *)(v17 + 8));
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v17;
  }
  else
  {
    std::operator+<char>();
    v11 = std::string::append(&v19, ", section ");
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v21 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = *(_OWORD *)*(_QWORD *)(a2 + 16);
    v22[0] = __p;
    v23 = v13;
    v24 = 1284;
    v25[0] = v22;
    v25[2] = " can not read implicit addend for aarch32 edge kind ";
    v26 = 770;
    v14 = (const char *)(*(uint64_t (**)(_QWORD))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
    if (*v14)
    {
      v15 = v14;
      v16 = (llvm::formatv_object_base *)v25;
    }
    else
    {
      v16 = (llvm::formatv_object_base *)v22;
      v29 = v27;
      v30 = v28;
      v15 = " can not read implicit addend for aarch32 edge kind ";
    }
    v18 = operator new();
    v31[0] = v16;
    v32 = v15;
    v34 = 770;
    v35 = v29;
    v36 = v30;
    *(_QWORD *)v18 = off_251C15728;
    llvm::Twine::str(v31, (std::string *)(v18 + 8));
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v18;
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void llvm::jitlink::aarch32::readAddendThumb(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t (*v14)(uint64_t);
  uint64_t *v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  __int128 v19;
  const char *v20;
  const char *v21;
  llvm::formatv_object_base *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  size_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string::size_type v41;
  _QWORD v42[2];
  __int128 v43;
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  llvm::formatv_object_base *v51[2];
  const char *v52;
  size_t v53;
  __int16 v54;
  int v55;
  __int16 v56;

  v9 = *(unsigned __int8 *)(a3 + 24) - 5;
  v10 = (__int16 *)(*(_QWORD *)(a2 + 24) + *(unsigned int *)(a3 + 8));
  switch(v9)
  {
    case 0:
      v11 = (unsigned __int16)*v10;
      v12 = (unsigned __int16)v10[1];
      if ((v11 & 0xF800) != 0xF000 || v12 >> 14 <= 2)
      {
        v14 = *(uint64_t (**)(uint64_t))(a1 + 176);
        v15 = (uint64_t *)a5;
        v16 = 5;
        goto LABEL_25;
      }
      v26 = *a4;
      v27 = (uint64_t)((v11 << 54) | ((unint64_t)(v12 & 0x7FF) << 43)) >> 42;
      v28 = ((v12 << 10) ^ ((_DWORD)v11 << 13)) & 0x800000;
      v29 = ((v12 << 11) ^ ((_DWORD)v11 << 12)) & 0x400000;
      v30 = ((_DWORD)v11 << 14) & 0x1000000 | ((v11 & 0x3FF) << 12) | (2 * (v12 & 0x7FF));
      goto LABEL_20;
    case 1:
      v23 = (unsigned __int16)*v10;
      if ((v23 & 0xF800) != 0xF000 || (v24 = v10[1], (v24 & 0x80000000) == 0))
      {
        v14 = *(uint64_t (**)(uint64_t))(a1 + 176);
        v15 = (uint64_t *)a5;
        v16 = 6;
        goto LABEL_25;
      }
      v25 = (unsigned __int16)v10[1];
      if ((v24 & 0x1000) != 0)
      {
        v35 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(6);
        v36 = v35;
        if (v35)
          v37 = strlen(v35);
        else
          v37 = 0;
        v38 = operator new();
        v51[0] = (llvm::formatv_object_base *)"Relocation expects an unconditional B.W branch instruction: ";
        v52 = v36;
        v53 = v37;
        v54 = 1283;
        *(_QWORD *)v38 = off_251C15728;
        llvm::Twine::str(v51, (std::string *)(v38 + 8));
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v38;
        return;
      }
      v26 = *a4;
      v27 = (uint64_t)((v23 << 54) | ((unint64_t)(v10[1] & 0x7FF) << 43)) >> 42;
      v28 = ((v25 << 10) ^ ((_DWORD)v23 << 13)) & 0x800000;
      v29 = ((v25 << 11) ^ ((_DWORD)v23 << 12)) & 0x400000;
      v30 = ((_DWORD)v23 << 14) & 0x1000000 | ((v23 & 0x3FF) << 12) | (2 * (v25 & 0x7FF));
LABEL_20:
      v33 = (uint64_t)((unint64_t)((v30 | v28 | v29) ^ 0xC00000u) << 39) >> 39;
      if (!v26)
        v33 = v27;
      goto LABEL_22;
    case 2:
      v31 = *v10;
      if ((*v10 & 0xFBF0) == 0xF240)
      {
        v32 = v10[1];
        if ((v32 & 0x80000000) == 0)
          goto LABEL_18;
      }
      v14 = *(uint64_t (**)(uint64_t))(a1 + 176);
      v15 = (uint64_t *)a5;
      v16 = 7;
      goto LABEL_25;
    case 3:
      v31 = *v10;
      if ((*v10 & 0xFBF0) != 0xF2C0 || (v32 = v10[1], (v32 & 0x80000000) != 0))
      {
        v14 = *(uint64_t (**)(uint64_t))(a1 + 176);
        v15 = (uint64_t *)a5;
        v16 = 8;
LABEL_25:
        llvm::jitlink::aarch32::makeUnexpectedOpcodeError(v15, v14, v10, v10 + 1, v16);
        *(_BYTE *)(a5 + 8) |= 1u;
      }
      else
      {
LABEL_18:
        v33 = (__int16)((2 * v31) & 0x800 | (v31 << 12) | (v32 >> 4) & 0x700 | v32);
LABEL_22:
        *(_BYTE *)(a5 + 8) &= ~1u;
        *(_QWORD *)a5 = v33;
      }
      return;
    default:
      std::operator+<char>();
      v17 = std::string::append(&v39, ", section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v41 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = *(_OWORD *)*(_QWORD *)(a2 + 16);
      v42[0] = __p;
      v43 = v19;
      v44 = 1284;
      v45[0] = v42;
      v45[2] = " can not read implicit addend for aarch32 edge kind ";
      v46 = 770;
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
      if (*v20)
      {
        v21 = v20;
        v22 = (llvm::formatv_object_base *)v45;
      }
      else
      {
        v22 = (llvm::formatv_object_base *)v42;
        v49 = v47;
        v50 = v48;
        v21 = " can not read implicit addend for aarch32 edge kind ";
      }
      v34 = operator new();
      v51[0] = v22;
      v52 = v21;
      v54 = 770;
      v55 = v49;
      v56 = v50;
      *(_QWORD *)v34 = off_251C15728;
      llvm::Twine::str(v51, (std::string *)(v34 + 8));
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v34;
      if (SHIBYTE(v41) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      return;
  }
}

void llvm::jitlink::aarch32::applyFixupData(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  std::string *v14;
  std::string::size_type v15;
  __int128 v16;
  llvm::formatv_object_base *v17;
  llvm::formatv_object_base *v18;
  llvm::formatv_object_base *v19;
  uint64_t v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[2];
  __int128 v25;
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  llvm::formatv_object_base *v33[4];
  __int16 v34;
  int v35;
  __int16 v36;

  v8 = *((unsigned int *)a3 + 2);
  v9 = a3[24];
  v10 = *((_QWORD *)a3 + 2);
  v11 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(*(_QWORD *)a3 + 16);
  if (v9 == 3)
  {
    v12 = v11 + v10;
LABEL_5:
    if (v12 == (int)v12)
    {
      v13 = bswap32(v12);
      if (*(_DWORD *)(a1 + 172) == 1)
        v13 = v12;
      *(_DWORD *)(a2[3] + v8) = v13;
      *a4 = 0;
    }
    else
    {
      llvm::jitlink::makeTargetOutOfRangeError(a1, a2, (uint64_t)a3, a4);
    }
    return;
  }
  if (v9 == 2)
  {
    v12 = v11 + v10 - (*a2 + v8);
    goto LABEL_5;
  }
  std::operator+<char>();
  v14 = std::string::append(&v21, ", section ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(_OWORD *)a2[2];
  v24[0] = __p;
  v25 = v16;
  v26 = 1284;
  v27[0] = v24;
  v27[2] = " encountered unfixable aarch32 edge kind ";
  v28 = 770;
  v17 = (llvm::formatv_object_base *)(*(uint64_t (**)(_QWORD))(a1 + 176))(a3[24]);
  if (*(_BYTE *)v17)
  {
    v18 = v17;
    v19 = (llvm::formatv_object_base *)v27;
  }
  else
  {
    v19 = (llvm::formatv_object_base *)v24;
    v31 = v29;
    v32 = v30;
    v18 = (llvm::formatv_object_base *)" encountered unfixable aarch32 edge kind ";
  }
  v20 = operator new();
  v33[0] = v19;
  v33[2] = v18;
  v34 = 770;
  v35 = v31;
  v36 = v32;
  *(_QWORD *)v20 = off_251C15728;
  llvm::Twine::str(v33, (std::string *)(v20 + 8));
  *a4 = v20;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void llvm::jitlink::aarch32::applyFixupArm(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  const char *v6;
  const char *v7;
  size_t v8;
  std::string *v11;
  std::string::size_type v12;
  __int128 v13;
  const char *v14;
  const char *v15;
  llvm::formatv_object_base *v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  _QWORD v22[2];
  __int128 v23;
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  llvm::formatv_object_base *v31[2];
  const char *v32;
  size_t v33;
  __int16 v34;
  int v35;
  __int16 v36;

  if (*(_BYTE *)(a3 + 24) == 4)
  {
    v6 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(4);
    v7 = v6;
    if (v6)
      v8 = strlen(v6);
    else
      v8 = 0;
    v17 = operator new();
    v31[0] = (llvm::formatv_object_base *)"Fix-up for relocation type not yet implemented: ";
    v32 = v7;
    v33 = v8;
    v34 = 1283;
    *(_QWORD *)v17 = off_251C15728;
    llvm::Twine::str(v31, (std::string *)(v17 + 8));
    *a4 = v17;
  }
  else
  {
    std::operator+<char>();
    v11 = std::string::append(&v19, ", section ");
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v21 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = *(_OWORD *)*(_QWORD *)(a2 + 16);
    v22[0] = __p;
    v23 = v13;
    v24 = 1284;
    v25[0] = v22;
    v25[2] = " encountered unfixable aarch32 edge kind ";
    v26 = 770;
    v14 = (const char *)(*(uint64_t (**)(_QWORD))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
    if (*v14)
    {
      v15 = v14;
      v16 = (llvm::formatv_object_base *)v25;
    }
    else
    {
      v16 = (llvm::formatv_object_base *)v22;
      v29 = v27;
      v30 = v28;
      v15 = " encountered unfixable aarch32 edge kind ";
    }
    v18 = operator new();
    v31[0] = v16;
    v32 = v15;
    v34 = 770;
    v35 = v29;
    v36 = v30;
    *(_QWORD *)v18 = off_251C15728;
    llvm::Twine::str(v31, (std::string *)(v18 + 8));
    *a4 = v18;
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void llvm::jitlink::aarch32::applyFixupThumb(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  std::string *v19;
  std::string::size_type v20;
  __int128 v21;
  const char *v22;
  const char *v23;
  llvm::formatv_object_base *v24;
  int v25;
  __int16 v26;
  const char *v27;
  const char *v28;
  size_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  std::string v42;
  void *__p[2];
  std::string::size_type v44;
  _QWORD v45[2];
  __int128 v46;
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  llvm::formatv_object_base *v54[2];
  const char *v55;
  size_t v56;
  __int16 v57;
  int v58;
  __int16 v59;

  v9 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v10 = (v9 & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(*(_QWORD *)a3 + 16);
  v11 = v10 | 1;
  if (v9 < 0)
    v10 |= 1uLL;
  v12 = *(unsigned int *)(a3 + 8);
  v13 = (__int16 *)(a2[3] + v12);
  v14 = v13 + 1;
  v15 = *a2 + v12;
  v16 = *(_QWORD *)(a3 + 16);
  switch(*(_BYTE *)(a3 + 24))
  {
    case 5:
      v17 = (unsigned __int16)v13[1];
      if ((*v13 & 0xF800) == 0xF000 && v17 >> 14 > 2)
      {
        v34 = v10 - v15 + v16;
        if (v9 < 0 == ((v17 & 0x1000) == 0))
        {
          if (v9 < 0)
          {
            LOWORD(v17) = v17 & 0xEFFF;
            *v14 = v17;
            v34 |= 1uLL;
          }
          else
          {
            LOWORD(v17) = v17 & 0xEFFE;
            *v14 = v17;
            v34 = (v34 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          }
        }
        if (*a4)
        {
          if ((v34 + 0x1000000) >> 25)
            goto LABEL_57;
          *v13 = (v34 >> 14) & 0x400 | (v34 >> 12) & 0x3FF | 0xF000;
          LOWORD(v17) = (v17 & 0xD000 | ((v34 >> 11) ^ (v34 >> 13)) & 0x800 | ((v34 >> 11) ^ (v34 >> 10)) & 0x2000 | (v34 >> 1) & 0x7FF) ^ 0x2800;
        }
        else
        {
          if (v34 + 0x200000 >= 0x400000)
            goto LABEL_57;
          *v13 = (v34 >> 12) & 0x7FF | 0xF000;
          v17 = v17 & 0xD000 | 0x2800 | (v34 >> 1) & 0x7FF;
        }
        goto LABEL_30;
      }
      llvm::jitlink::aarch32::makeUnexpectedOpcodeError(a5, *(uint64_t (**)(uint64_t))(a1 + 176), v13, v13 + 1, 5);
      return;
    case 6:
      if ((*v13 & 0xF800) != 0xF000 || (v25 = v13[1], (v25 & 0x80000000) == 0))
      {
        llvm::jitlink::aarch32::makeUnexpectedOpcodeError(a5, *(uint64_t (**)(uint64_t))(a1 + 176), v13, v13 + 1, 6);
        return;
      }
      v26 = v13[1];
      if ((v25 & 0x1000) != 0)
      {
        v36 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(6);
        v28 = v36;
        if (v36)
          v29 = strlen(v36);
        else
          v29 = 0;
        v39 = operator new();
        v40 = v39;
        v41 = "Relocation expects an unconditional B.W branch instruction: ";
        goto LABEL_50;
      }
      if (v9 < 0)
      {
        v37 = v11 - v15 + v16;
        if (*a4)
        {
          if (!((v37 + 0x1000000) >> 25))
          {
            v38 = llvm::jitlink::aarch32::encodeImmBT4BlT1BlxT2_J1J2(v37);
            *v13 = v38 | 0xF000;
            v17 = v26 & 0xD000 | HIWORD(v38);
LABEL_30:
            *v14 = v17;
            goto LABEL_31;
          }
        }
        else if (v37 + 0x200000 < 0x400000)
        {
          *v13 = (v37 >> 12) & 0x7FF | 0xF000;
          v17 = (v37 >> 1) & 0x7FF | v25 & 0xD000 | 0x2800;
          goto LABEL_30;
        }
LABEL_57:
        llvm::jitlink::makeTargetOutOfRangeError(a1, a2, a3, a5);
        return;
      }
      v27 = (const char *)(*(uint64_t (**)(uint64_t))(a1 + 176))(6);
      v28 = v27;
      if (v27)
        v29 = strlen(v27);
      else
        v29 = 0;
      v39 = operator new();
      v40 = v39;
      v41 = "Branch relocation needs interworking stub when bridging to ARM: ";
LABEL_50:
      v54[0] = (llvm::formatv_object_base *)v41;
      v55 = v28;
      v56 = v29;
      v57 = 1283;
      *(_QWORD *)v39 = off_251C15728;
      llvm::Twine::str(v54, (std::string *)(v39 + 8));
      *a5 = v40;
      return;
    case 7:
      if ((*v13 & 0xFBF0) == 0xF240)
      {
        v30 = v13[1];
        if ((v30 & 0x80000000) == 0)
        {
          v31 = v10 + v16;
          *v13 = (v31 >> 1) & 0x400 | ((unsigned __int16)v31 >> 12) | 0xF240;
          LOWORD(v30) = v30 & 0x8F00 | v31 | (((v31 >> 8) & 7) << 12);
          goto LABEL_23;
        }
      }
      llvm::jitlink::aarch32::makeUnexpectedOpcodeError(a5, *(uint64_t (**)(uint64_t))(a1 + 176), v13, v13 + 1, 7);
      return;
    case 8:
      if ((*v13 & 0xFBF0) != 0xF2C0 || (v32 = v13[1], v32 < 0))
      {
        llvm::jitlink::aarch32::makeUnexpectedOpcodeError(a5, *(uint64_t (**)(uint64_t))(a1 + 176), v13, v13 + 1, 8);
      }
      else
      {
        v33 = v10 + v16;
        *v13 = ((v33 >> 16) >> 1) & 0x400 | (WORD1(v33) >> 12) | 0xF2C0;
        v30 = v32 & 0x8F00 | BYTE2(v33) | (v33 >> 12) & 0x7000;
LABEL_23:
        v13[1] = v30;
LABEL_31:
        *a5 = 0;
      }
      return;
    default:
      std::operator+<char>();
      v19 = std::string::append(&v42, ", section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v44 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = *(_OWORD *)a2[2];
      v45[0] = __p;
      v46 = v21;
      v47 = 1284;
      v48[0] = v45;
      v48[2] = " encountered unfixable aarch32 edge kind ";
      v49 = 770;
      v22 = (const char *)(*(uint64_t (**)(_QWORD))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
      if (*v22)
      {
        v23 = v22;
        v24 = (llvm::formatv_object_base *)v48;
      }
      else
      {
        v24 = (llvm::formatv_object_base *)v45;
        v52 = v50;
        v53 = v51;
        v23 = " encountered unfixable aarch32 edge kind ";
      }
      v35 = operator new();
      v54[0] = v24;
      v55 = v23;
      v57 = 770;
      v58 = v52;
      v59 = v53;
      *(_QWORD *)v35 = off_251C15728;
      llvm::Twine::str(v54, (std::string *)(v35 + 8));
      *a5 = v35;
      if (SHIBYTE(v44) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      return;
  }
}

_QWORD *llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::createEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *result;

  v5 = llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::addStub<10ul>(a1, a2, (uint64_t)&llvm::jitlink::aarch32::Thumbv7ABS, 4uLL);
  llvm::jitlink::Block::addEdge(v5, 7, 0, a3, 0);
  llvm::jitlink::Block::addEdge(v5, 8, 4, a3, 0);
  result = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v5, 0, v5[4], 1, 0);
  result[3] |= 0x8000000000000000;
  return result;
}

_QWORD *llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::addStub<10ul>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t Section;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13[2];

  Section = *(_QWORD *)(a1 + 24);
  if (!Section)
  {
    Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"__llvm_jitlink_STUBS", 20, 5);
    *(_QWORD *)(a1 + 24) = Section;
  }
  v13[0] = a3;
  v13[1] = 10;
  v11 = a4;
  v12 = 0;
  v10 = 0;
  return llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v13, &v12, &v11, &v10);
}

char *llvm::jitlink::aarch32::getCPUArchName(int a1)
{
  return off_251C16420[a1];
}

void llvm::detail::provider_format_adapter<unsigned short>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned short>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;

  v16 = a3;
  v17 = a4;
  v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      v12 = 0;
      v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78)
            goto LABEL_19;
          goto LABEL_16;
        }
LABEL_17:
        v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100)
        goto LABEL_17;
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6))
      v14 = 0;
    else
      v14 = v18;
    return llvm::write_integer(a2, *(unsigned __int16 *)(a1 + 8), v14, v12);
  }
  v7 = v15;
  v18 = 0;
  v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  v9 = v18;
  if (v8)
    v9 = 0;
  if ((v7 & 0xFFFFFFFE) == 2)
    v10 = v9 + 2;
  else
    v10 = v9;
  return llvm::write_hex(a2, *(unsigned __int16 *)(a1 + 8), v7, v10, 1);
}

const char *llvm::jitlink::aarch64::getEdgeKindName(llvm::jitlink::aarch64 *this)
{
  char v1;
  const char *v2;

  v1 = (_BYTE)this - 2;
  if (((_DWORD)this - 2) < 0x13 && ((0x7FFFDu >> v1) & 1) != 0)
    return off_251C164D8[v1];
  v2 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v2 = "Keep-Alive";
  if ((_DWORD)this)
    return v2;
  else
    return "INVALID RELOCATION";
}

_QWORD *llvm::jitlink::aarch64::createEmptyPointerSigningFunction@<X0>(llvm::jitlink::aarch64 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Section;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *result;
  unint64_t v17[8];
  _OWORD v18[3];
  __int128 v19;
  _OWORD v20[3];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  llvm::jitlink::LinkGraph::blocks(this, v20);
  v18[0] = v20[0];
  v18[1] = v20[1];
  v18[2] = v20[2];
  v19 = v21;
  v5 = v22;
  v6 = v23;
  v7 = (uint64_t *)v21;
  if (*(_QWORD *)&v20[0] == v22 && (_QWORD)v21 == v23)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v7;
      v10 = *(_QWORD *)(*v7 + 40);
      v11 = *(_QWORD *)(v9 + 48);
      while (v10 != v11)
      {
        if (*(_BYTE *)(v10 + 24) == 3)
          ++v8;
        v10 += 32;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v18, (uint64_t)v17);
      v7 = (uint64_t *)v19;
    }
    while (*(_QWORD *)&v18[0] != v5 || (_QWORD)v19 != v6);
  }
  Section = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__ptrauth_sign", 15, 5);
  *(_DWORD *)(Section + 20) = 1;
  v14 = (48 * v8) | 0xC;
  *(_QWORD *)&v20[0] = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this, v14, 0);
  *((_QWORD *)&v20[0] + 1) = v14;
  *(_QWORD *)&v18[0] = 0;
  v17[0] = 4;
  v24 = 0;
  v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, Section, (uint64_t *)v20, (uint64_t *)v18, v17, &v24);
  result = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v15, 0, v15[4], 1, 1);
  *a2 = 0;
  return result;
}

void llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::aarch64 *this@<X0>, unint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t SectionByName;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count_vtbl *v9;
  int v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int *v29;
  int64_t v30;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  llvm::jitlink::aarch64 *v38;
  uint64_t v40;
  uint64_t v41;
  char v42[8];
  char v43[8];
  _QWORD v44[4];
  _QWORD v45[2];
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49[8];
  char v50[8];
  _QWORD v51[4];
  _QWORD v52[2];
  _QWORD *v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  unint64_t v58;
  _OWORD v59[3];
  __int128 v60;
  void (***v61)(llvm::BinaryStreamWriter *__hidden);
  void (**v62)(llvm::BinaryStreamWriter *__hidden);
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  int v66[2];
  llvm::formatv_object_base *v67[4];
  __int16 v68;
  uint64_t v69;
  const void *v70[7];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)this, (uint64_t)"$__ptrauth_sign", 15, a2);
  v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 56);
  v37 = *v6;
  v7 = *(_QWORD *)(*v6 + 16);
  v8 = *(std::__shared_weak_count_vtbl **)(v7 + 24);
  v9 = *(std::__shared_weak_count_vtbl **)(v7 + 32);
  v10 = *((_DWORD *)this + 43);
  v62 = &off_251C12110;
  llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(&v63, v8, v9, v10);
  *(_QWORD *)v66 = 0;
  v61 = &v62;
  v38 = this;
  llvm::jitlink::LinkGraph::blocks(this, &v71);
  v59[0] = v71;
  v59[1] = v72;
  v59[2] = v73;
  v60 = v74;
  v11 = v75;
  v40 = v80;
  v12 = v74;
  if ((__int128 *)v71 != v75 || (_QWORD)v60 != v80)
  {
    do
    {
      v14 = *(_QWORD **)v12;
      v16 = *(unsigned int **)(*(_QWORD *)v12 + 40);
      v15 = *(unsigned int **)(*(_QWORD *)v12 + 48);
      while (v16 != v15)
      {
        if (*((_BYTE *)v16 + 24) == 3)
        {
          v17 = *((_QWORD *)v16 + 2);
          v58 = v17;
          if (v17 >> 51 != 4096)
          {
            v32 = *v14 + v16[2];
            v44[0] = "{0:x}";
            v44[1] = 5;
            v44[2] = &v46;
            v44[3] = 1;
            v45[0] = &off_251C144A8;
            v45[1] = v32;
            v46 = v45;
            v54[0] = "Pointer64Auth edge at ";
            v54[2] = v44;
            v55 = 1539;
            v56[0] = v54;
            v56[2] = " has invalid encoded addend  ";
            v57 = 770;
            v51[0] = "{0:x}";
            v51[1] = 5;
            v51[2] = &v53;
            v51[3] = 1;
            v52[0] = &off_251C14EA8;
            v52[1] = &v58;
            v53 = v52;
            v33 = operator new();
            v67[0] = (llvm::formatv_object_base *)v56;
            v67[2] = (llvm::formatv_object_base *)v51;
            v68 = 1538;
            *(_QWORD *)v33 = off_251C15728;
            llvm::Twine::str(v67, (std::string *)(v33 + 8));
            *a3 = v33;
            goto LABEL_56;
          }
          llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v50, (uint64_t *)&v61, 8, (*(_QWORD *)(*(_QWORD *)v16 + 24) & 0x1FFFFFFFFFFFFFFLL) + (int)v17 + **(_QWORD **)(*(_QWORD *)v16 + 16));
          llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v49, (uint64_t *)&v61, 9, *v14 + v16[2]);
          if ((v17 & 0x1000000000000) != 0)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65) - 1 >= 2)
              v18 = -368899670;
            else
              v18 = -1442249750;
            LODWORD(v44[0]) = v18;
            llvm::WritableBinaryStreamRef::writeBytes((uint64_t)&v63, *(unint64_t *)v66, (uint64_t)v44, 4, &v48);
            if (v48)
              goto LABEL_41;
            *(_QWORD *)v66 += 4;
            v48 = 0;
            if (WORD2(v17))
            {
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
              v20 = bswap32((32 * WORD2(v17)) | 0xF2E0000A);
              if ((v19 - 1) >= 2)
                v21 = v20;
              else
                v21 = (32 * WORD2(v17)) | 0xF2E0000A;
              LODWORD(v44[0]) = v21;
              llvm::WritableBinaryStreamRef::writeBytes((uint64_t)&v63, *(unint64_t *)v66, (uint64_t)v44, 4, &v48);
              if (v48)
                goto LABEL_41;
              *(_QWORD *)v66 += 4;
              v48 = 0;
            }
            goto LABEL_34;
          }
          if (WORD2(v17))
          {
            llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)&v48, (uint64_t *)&v61, 10, WORD2(v17));
            if (v48)
              goto LABEL_41;
LABEL_34:
            v22 = 320;
            v23 = -624885760;
            goto LABEL_36;
          }
          v23 = -624877568;
          v22 = 992;
LABEL_36:
          v24 = (v17 >> 39) & 0xC00 | v23 | v22 | 8;
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
          v26 = bswap32(v24);
          if ((v25 - 1) >= 2)
            v27 = v26;
          else
            v27 = v24;
          LODWORD(v44[0]) = v27;
          llvm::WritableBinaryStreamRef::writeBytes((uint64_t)&v63, *(unint64_t *)v66, (uint64_t)v44, 4, &v48);
          if (!v48)
          {
            *(_QWORD *)v66 += 4;
            v48 = 0;
          }
LABEL_41:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65) - 1 >= 2)
            v28 = 671154425;
          else
            v28 = -117440216;
          LODWORD(v44[0]) = v28;
          llvm::WritableBinaryStreamRef::writeBytes((uint64_t)&v63, *(unint64_t *)v66, (uint64_t)v44, 4, &v47);
          if (!v47)
          {
            *(_QWORD *)v66 += 4;
            v47 = 0;
          }
          v29 = (unsigned int *)v14[6];
          v30 = (char *)v29 - (char *)(v16 + 8);
          if (v29 != v16 + 8)
            memmove(v16, v16 + 8, v30 - 7);
          v15 = (unsigned int *)((char *)v16 + v30);
          v14[6] = (char *)v16 + v30;
        }
        else
        {
          v16 += 8;
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v59, (uint64_t)v44);
      v12 = v60;
    }
    while (*(__int128 **)&v59[0] != v11 || (_QWORD)v60 != v40);
  }
  llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v43, (uint64_t *)&v61, 0, 0);
  llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>((uint64_t)v42, (uint64_t *)&v61, 1, 1uLL);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65) - 1 >= 2)
    v13 = -1073520682;
  else
    v13 = -698416192;
  LODWORD(v71) = v13;
  llvm::WritableBinaryStreamRef::writeBytes((uint64_t)&v63, *(unint64_t *)v66, (uint64_t)&v71, 4, &v41);
  if (!v41)
  {
    *(_QWORD *)v66 += 4;
    v41 = 0;
  }
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<>>((*(_QWORD *)(v37 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v37 + 16), (uint64_t)&v69);
  *(_QWORD *)&v71 = v69;
  *((_QWORD *)&v71 + 1) = &v73;
  v72 = xmmword_24AA2ACE0;
  if (v70[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v71 + 8, v70);
  *((_QWORD *)&v74 + 1) = 0;
  v76 = 0;
  v79 = 0;
  v78 = 0u;
  v75 = &v78;
  v77 = 24;
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100]((uint64_t *)v38 + 32, (uint64_t)&v71);
  if (v75 != &v78)
    free(v75);
  if (*((__int128 **)&v71 + 1) != &v73)
    free(*((void **)&v71 + 1));
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v69);
  *a3 = 0;
LABEL_56:
  v62 = &off_251C12110;
  v34 = v64;
  if (v64)
  {
    p_shared_owners = (unint64_t *)&v64->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

uint64_t llvm::jitlink::aarch64::writeMovRegImm64Seq<llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction(llvm::jitlink::LinkGraph &)::$_0>(uint64_t result, uint64_t *a2, int a3, unint64_t a4)
{
  uint64_t *v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v7 = (uint64_t *)result;
  v8 = 0;
  v9 = 0;
  do
  {
    if ((v9 & 1) == 0 || (_WORD)a4)
    {
      if ((v9 & 1) != 0)
        v10 = -226492416;
      else
        v10 = -763363328;
      v11 = v8 | v10 | (32 * (unsigned __int16)a4) | a3;
      v12 = *a2;
      v13 = *a2 + 8;
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 24) + 16))(*(_QWORD *)(*a2 + 24));
      v15 = bswap32(v11);
      if ((v14 - 1) >= 2)
        v16 = v15;
      else
        v16 = v11;
      v17 = v16;
      result = llvm::WritableBinaryStreamRef::writeBytes(v13, *(_QWORD *)(v12 + 56), (uint64_t)&v17, 4, v7);
      if (*v7)
        return result;
      *(_QWORD *)(v12 + 56) += 4;
      *v7 = 0;
    }
    a4 >>= 16;
    v8 += 0x200000;
    v9 = 1;
  }
  while (v8 != 0x800000);
  *v7 = 0;
  return result;
}

const char *llvm::jitlink::i386::getEdgeKindName(llvm::jitlink::i386 *this)
{
  const char *v2;

  if (((_DWORD)this - 2) < 0xB)
    return off_251C16570[(char)((_BYTE)this - 2)];
  v2 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v2 = "Keep-Alive";
  if ((_DWORD)this)
    return v2;
  else
    return "INVALID RELOCATION";
}

void llvm::jitlink::i386::optimizeGOTAndStubAccesses(llvm::jitlink::i386 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[3];
  __int128 v14;
  _OWORD v15[3];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  llvm::jitlink::LinkGraph::blocks(this, v15);
  v13[0] = v15[0];
  v13[1] = v15[1];
  v13[2] = v15[2];
  v14 = v16;
  v4 = v17;
  v5 = v18;
  v6 = (_QWORD **)v16;
  if (*(_QWORD *)&v15[0] != v17 || (_QWORD)v16 != v18)
  {
    do
    {
      v7 = *v6;
      v8 = v7[5];
      for (i = v7[6]; v8 != i; v8 += 32)
      {
        if (*(_BYTE *)(v8 + 24) == 12)
        {
          v10 = **(_QWORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 40) + 16) + 40);
          if (!((**(_QWORD **)(v10 + 16)
                - (*v7
                 + *(unsigned int *)(v8 + 8))
                + (*(_QWORD *)(v10 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                + 2147483652u) >> 32))
          {
            *(_BYTE *)(v8 + 24) = 10;
            *(_QWORD *)v8 = v10;
          }
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v13, (uint64_t)&v12);
      v6 = (_QWORD **)v14;
    }
    while (*(_QWORD *)&v13[0] != v4 || (_QWORD)v14 != v5);
  }
  *a2 = 0;
}

const char *llvm::jitlink::loongarch::getEdgeKindName(llvm::jitlink::loongarch *this)
{
  const char *v2;

  if (((_DWORD)this - 2) < 0xA)
    return off_251C165C8[(char)((_BYTE)this - 2)];
  v2 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v2 = "Keep-Alive";
  if ((_DWORD)this)
    return v2;
  else
    return "INVALID RELOCATION";
}

const char *llvm::jitlink::riscv::getEdgeKindName(llvm::jitlink::riscv *this)
{
  const char *v2;

  if (((_DWORD)this - 2) < 0x1D)
    return off_251C16618[(char)((_BYTE)this - 2)];
  v2 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v2 = "Keep-Alive";
  if ((_DWORD)this)
    return v2;
  else
    return "INVALID RELOCATION";
}

const char *llvm::jitlink::x86_64::getEdgeKindName(llvm::jitlink::x86_64 *this)
{
  char v1;
  const char *v2;

  v1 = (_BYTE)this - 2;
  if (((_DWORD)this - 2) < 0x17 && ((0x5FFFFFu >> v1) & 1) != 0)
    return off_251C16700[v1];
  v2 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v2 = "Keep-Alive";
  if ((_DWORD)this)
    return v2;
  else
    return "INVALID RELOCATION";
}

void llvm::jitlink::x86_64::optimizeGOTAndStubAccesses(llvm::jitlink::x86_64 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  _BYTE v21[64];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[3];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  llvm::jitlink::LinkGraph::blocks(this, v24);
  v22[0] = v24[0];
  v22[1] = v24[1];
  v22[2] = v24[2];
  v23 = v25;
  v3 = v26;
  v4 = v27;
  v5 = (_QWORD **)v25;
  if (*(_QWORD *)&v24[0] != v26 || (_QWORD)v25 != v27)
  {
    do
    {
      v6 = *v5;
      v7 = v6[5];
      v8 = v6[6];
      while (v7 != v8)
      {
        v9 = *(unsigned __int8 *)(v7 + 24);
        if ((v9 - 18) >= 2)
        {
          if (v9 == 14)
          {
            v11 = **(_QWORD **)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 40) + 16) + 40);
            if (!((**(_QWORD **)(v11 + 16)
                  - (*v6
                   + *(unsigned int *)(v7 + 8))
                  + (*(_QWORD *)(v11 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                  + 2147483652u) >> 32))
            {
              *(_BYTE *)(v7 + 24) = 11;
LABEL_23:
              *(_QWORD *)v7 = v11;
            }
          }
        }
        else
        {
          v10 = *(unsigned int *)(v7 + 8);
          v11 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 40);
          v12 = (*(_QWORD *)(v11 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v11 + 16);
          v13 = v12 - (*v6 + v10) + 2147483652u;
          v14 = HIDWORD(v12);
          v15 = HIDWORD(v13);
          if (v14)
            v16 = v15 == 0;
          else
            v16 = 1;
          if (v16)
          {
            v17 = v6[3] + v10;
            v18 = *(unsigned __int8 *)(v17 - 2);
            if (v18 == 139 && !v15)
            {
              *(_BYTE *)(v17 - 2) = -115;
              *(_BYTE *)(v7 + 24) = 7;
              *(_QWORD *)v7 = v11;
              *(_QWORD *)(v7 + 16) -= 4;
              goto LABEL_24;
            }
            if (v18 == 255 && !v14)
            {
              if (*(_BYTE *)(v17 - 1) == 21)
              {
                *(_WORD *)(v17 - 2) = -6041;
              }
              else
              {
                *(_BYTE *)(v17 - 2) = -23;
                *(_BYTE *)(v17 + 3) = -112;
                --*(_DWORD *)(v7 + 8);
              }
              *(_BYTE *)(v7 + 24) = 3;
              goto LABEL_23;
            }
          }
        }
LABEL_24:
        v7 += 32;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v22, (uint64_t)v21);
      v5 = (_QWORD **)v23;
    }
    while (*(_QWORD *)&v22[0] != v3 || (_QWORD)v23 != v4);
  }
  *a2 = 0;
}

void llvm::orc::registerEHFrameSection(llvm::orc *this@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::orc *v4;
  uint64_t v5;
  llvm::orc *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v4 = this;
    v5 = *(unsigned int *)this;
    if (*(_DWORD *)this)
    {
      v6 = (llvm::orc *)&a2[(_QWORD)this];
      do
      {
        if (v5 == 0xFFFFFFFFLL)
          v7 = 12;
        else
          v7 = 4;
        if (v5 == 0xFFFFFFFFLL)
          v8 = *(_QWORD *)((char *)v4 + 4) + 12;
        else
          v8 = v5 + 4;
        if (*(_DWORD *)((char *)v4 + v7))
          __register_frame(v4);
        v4 = (llvm::orc *)((char *)v4 + v8);
        if (v4 == v6)
          break;
        v5 = *(unsigned int *)v4;
      }
      while (*(_DWORD *)v4);
    }
  }
  *a3 = 0;
}

void llvm::orc::deregisterEHFrameSection(llvm::orc *this@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::orc *v4;
  uint64_t v5;
  llvm::orc *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v4 = this;
    v5 = *(unsigned int *)this;
    if (*(_DWORD *)this)
    {
      v6 = (llvm::orc *)&a2[(_QWORD)this];
      do
      {
        if (v5 == 0xFFFFFFFFLL)
          v7 = 12;
        else
          v7 = 4;
        if (v5 == 0xFFFFFFFFLL)
          v8 = *(_QWORD *)((char *)v4 + 4) + 12;
        else
          v8 = v5 + 4;
        if (*(_DWORD *)((char *)v4 + v7))
          __deregister_frame(v4);
        v4 = (llvm::orc *)((char *)v4 + v8);
        if (v4 == v6)
          break;
        v5 = *(unsigned int *)v4;
      }
      while (*(_DWORD *)v4);
    }
  }
  *a3 = 0;
}

char *llvm_orc_registerEHFrameSectionWrapper(_QWORD *a1, unint64_t a2)
{
  char *v3;

  llvm::orc::shared::detail::WrapperFunctionHandlerHelper<llvm::Error ()(llvm::orc::ExecutorAddrRange),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>)>::ResultSerializer,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::apply<llvm::Error (&)(llvm::orc::ExecutorAddrRange)>(&v3, (void (*)(char **__return_ptr, _QWORD, _QWORD))registerEHFrameWrapper, a1, a2);
  return v3;
}

void registerEHFrameWrapper(llvm::orc *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::orc::registerEHFrameSection(a1, (char *)(a2 - (_QWORD)a1), a3);
}

char *llvm_orc_deregisterEHFrameSectionWrapper(_QWORD *a1, unint64_t a2)
{
  char *v3;

  llvm::orc::shared::detail::WrapperFunctionHandlerHelper<llvm::Error ()(llvm::orc::ExecutorAddrRange),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>)>::ResultSerializer,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::apply<llvm::Error (&)(llvm::orc::ExecutorAddrRange)>(&v3, (void (*)(char **__return_ptr, _QWORD, _QWORD))deregisterEHFrameWrapper, a1, a2);
  return v3;
}

void deregisterEHFrameWrapper(llvm::orc *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::orc::deregisterEHFrameSection(a1, (char *)(a2 - (_QWORD)a1), a3);
}

char *llvm::orc::shared::detail::WrapperFunctionHandlerHelper<llvm::Error ()(llvm::orc::ExecutorAddrRange),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>)>::ResultSerializer,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::apply<llvm::Error (&)(llvm::orc::ExecutorAddrRange)>(char **a1, void (*a2)(char **__return_ptr, _QWORD, _QWORD), _QWORD *a3, unint64_t a4)
{
  char *v5;
  __int128 *v6;
  std::string::size_type size;
  uint64_t v8;
  __int128 *v9;
  char v10;
  char *result;
  void *v12;
  char *v13;
  char v14;
  std::string __p;
  __int128 *v16;
  std::string::size_type v17;
  __int128 v18;

  if (a4 < 8 || (a4 & 0xFFFFFFFFFFFFFFF8) == 8)
    return llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Could not deserialize arguments for wrapper function call", a1);
  a2(&v13, *a3, a3[1]);
  v5 = v13;
  v13 = 0;
  v6 = (__int128 *)((char *)&v18 + 1);
  if (!v5)
  {
    v14 = 0;
    memset(&__p, 0, sizeof(__p));
LABEL_13:
    v10 = 0;
    v18 = xmmword_24AA2DBD0;
    v9 = &v18;
    v8 = 1;
    goto LABEL_14;
  }
  v14 = 1;
  *(_QWORD *)&v18 = v5;
  llvm::toString((uint64_t *)&v18, &__p);
  if ((_QWORD)v18)
    (*(void (**)(_QWORD))(*(_QWORD *)v18 + 8))(v18);
  if (!v14)
    goto LABEL_13;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v8 = size + 9;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = size + 9;
  if (size > 0xFFFFFFFFFFFFFFF6)
  {
    v9 = &v18;
    v16 = &v18;
    v17 = size + 9;
    if (size == -9)
      goto LABEL_19;
    v10 = 1;
  }
  else
  {
    v9 = (__int128 *)malloc_type_malloc(size + 9, 0xBCDE199DuLL);
    v6 = (__int128 *)((char *)v9 + 1);
    *(_QWORD *)&v18 = v9;
    v10 = v14;
  }
LABEL_14:
  *(_BYTE *)v9 = v10;
  v16 = v6;
  v17 = v8 - 1;
  if (!v14
    || llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v16, (uint64_t)&__p))
  {
    *(_OWORD *)a1 = v18;
    v18 = 0uLL;
    goto LABEL_20;
  }
LABEL_19:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", a1);
LABEL_20:
  if (*((_QWORD *)&v18 + 1) < 9uLL)
  {
    if (*((_QWORD *)&v18 + 1))
      goto LABEL_25;
    v12 = (void *)v18;
    if (!(_QWORD)v18)
      goto LABEL_25;
  }
  else
  {
    v12 = (void *)v18;
  }
  free(v12);
LABEL_25:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = v13;
  if (v13)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t llvm::orc::runAsMain(uint64_t (*a1)(_QWORD, char *), const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  const void **v37;
  const void *v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int64x2_t v50;
  char *v51;
  int v52;
  _BYTE *v53;
  size_t v54;
  const void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  void *__p[2];
  char *v78;
  uint64_t v79;
  int64x2_t v80;
  unint64_t v81;
  char **v82;

  *(_OWORD *)__p = 0uLL;
  v78 = 0;
  v8 = *(unsigned __int8 *)(a4 + 16);
  v9 = a3 + v8;
  if (a3 + v8)
  {
    if (v9 >> 61)
      goto LABEL_116;
    v82 = &v78;
    __p[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v9);
    __p[1] = __p[0];
    v80 = vdupq_n_s64(0);
    v11 = v78;
    v78 = (char *)__p[0] + 8 * v10;
    v81 = (unint64_t)v11;
    v79 = v80.i64[0];
    std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)&v79);
    v8 = *(unsigned __int8 *)(a4 + 16);
  }
  v12 = a3 + v8 + 1;
  if (a3 + v8 == -1)
  {
    v13 = 0;
    v15 = 0;
  }
  else
  {
    if (v12 >> 61)
      goto LABEL_116;
    v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    v15 = &v13[8 * v14];
    LODWORD(v8) = *(unsigned __int8 *)(a4 + 16);
  }
  v76 = a4;
  if ((_DWORD)v8)
  {
    v16 = *(_QWORD *)(a4 + 8) + 1;
    v17 = (void *)operator new[]();
    bzero(v17, v16);
    if (__p[1] >= v78)
    {
      v20 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_116;
      v21 = (v78 - (char *)__p[0]) >> 2;
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      if ((unint64_t)(v78 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v82 = &v78;
      if (v22)
        v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v22);
      else
        v23 = 0;
      v24 = (_QWORD *)(v22 + 8 * v20);
      v25 = v22 + 8 * v23;
      v81 = v25;
      *v24 = v17;
      v18 = (uint64_t)(v24 + 1);
      v80.i64[1] = (uint64_t)(v24 + 1);
      v26 = __p[1];
      if (__p[1] == __p[0])
      {
        v28 = vdupq_n_s64((unint64_t)__p[1]);
      }
      else
      {
        do
        {
          v27 = *--v26;
          *v26 = 0;
          *--v24 = v27;
        }
        while (v26 != __p[0]);
        v28 = *(int64x2_t *)__p;
        v18 = v80.i64[1];
        v25 = v81;
      }
      __p[0] = v24;
      v80 = v28;
      v29 = v78;
      v78 = (char *)v25;
      v81 = (unint64_t)v29;
      v79 = v28.i64[0];
      std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)&v79);
    }
    else
    {
      *(_QWORD *)__p[1] = v17;
      v18 = (uint64_t)__p[1] + 8;
    }
    __p[1] = (void *)v18;
    v30 = *(_QWORD *)(a4 + 8);
    if (v30)
    {
      memmove(*(void **)(v18 - 8), *(const void **)a4, v30);
      v31 = *(_QWORD *)(a4 + 8);
    }
    else
    {
      v31 = 0;
    }
    *(_BYTE *)(*(_QWORD *)(v18 - 8) + v31) = 0;
    v32 = *(_QWORD *)(v18 - 8);
    if (v13 >= v15)
    {
      v33 = (v15 - v13) >> 2;
      if (v33 <= 1)
        v33 = 1;
      if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v34);
      v15 = &v35[8 * v36];
      *(_QWORD *)v35 = v32;
      v19 = v35 + 8;
      if (v13)
        operator delete(v13);
      v13 = v35;
    }
    else
    {
      *(_QWORD *)v13 = v32;
      v19 = v13 + 8;
    }
  }
  else
  {
    v19 = v13;
  }
  if (a3)
  {
    v37 = &a2[3 * a3];
    do
    {
      if (*((char *)a2 + 23) < 0)
        v38 = a2[1];
      else
        v38 = (const void *)*((unsigned __int8 *)a2 + 23);
      v39 = (size_t)v38 + 1;
      v40 = (void *)operator new[]();
      bzero(v40, v39);
      if (__p[1] >= v78)
      {
        v42 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        if ((unint64_t)(v42 + 1) >> 61)
          goto LABEL_116;
        v43 = (v78 - (char *)__p[0]) >> 2;
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        if ((unint64_t)(v78 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        v82 = &v78;
        if (v44)
          v44 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v44);
        else
          v45 = 0;
        v46 = (_QWORD *)(v44 + 8 * v42);
        v47 = v44 + 8 * v45;
        v81 = v47;
        *v46 = v40;
        v41 = (uint64_t)(v46 + 1);
        v80.i64[1] = (uint64_t)(v46 + 1);
        v48 = __p[1];
        if (__p[1] == __p[0])
        {
          v50 = vdupq_n_s64((unint64_t)__p[1]);
        }
        else
        {
          do
          {
            v49 = *--v48;
            *v48 = 0;
            *--v46 = v49;
          }
          while (v48 != __p[0]);
          v50 = *(int64x2_t *)__p;
          v41 = v80.i64[1];
          v47 = v81;
        }
        __p[0] = v46;
        v80 = v50;
        v51 = v78;
        v78 = (char *)v47;
        v81 = (unint64_t)v51;
        v79 = v50.i64[0];
        std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer((uint64_t)&v79);
      }
      else
      {
        *(_QWORD *)__p[1] = v40;
        v41 = (uint64_t)__p[1] + 8;
      }
      __p[1] = (void *)v41;
      v52 = *((char *)a2 + 23);
      v53 = (_BYTE *)*((unsigned __int8 *)a2 + 23);
      if (v52 >= 0)
        v54 = *((unsigned __int8 *)a2 + 23);
      else
        v54 = (size_t)a2[1];
      if (v54)
      {
        if (v52 >= 0)
          v55 = a2;
        else
          v55 = *a2;
        memmove(*(void **)(v41 - 8), v55, v54);
        v53 = (_BYTE *)*((unsigned __int8 *)a2 + 23);
      }
      if ((v53 & 0x80) != 0)
        v53 = a2[1];
      v53[*(_QWORD *)(v41 - 8)] = 0;
      v56 = *(_QWORD *)(v41 - 8);
      if (v19 >= v15)
      {
        v58 = (v19 - v13) >> 3;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_116;
        if ((v15 - v13) >> 2 > v59)
          v59 = (v15 - v13) >> 2;
        if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8)
          v60 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        if (v60)
          v60 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v60);
        else
          v61 = 0;
        v62 = (char *)(v60 + 8 * v58);
        *(_QWORD *)v62 = v56;
        v57 = v62 + 8;
        while (v19 != v13)
        {
          v63 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v62 - 1) = v63;
          v62 -= 8;
        }
        v15 = (char *)(v60 + 8 * v61);
        if (v13)
          operator delete(v13);
        v13 = v62;
      }
      else
      {
        *(_QWORD *)v19 = v56;
        v57 = v19 + 8;
      }
      a2 += 3;
      v19 = v57;
    }
    while (a2 != v37);
  }
  else
  {
    v57 = v19;
  }
  if (v57 < v15)
  {
    *(_QWORD *)v57 = 0;
    v64 = a1(a3 + *(unsigned __int8 *)(v76 + 16), v13);
    goto LABEL_106;
  }
  v65 = (v57 - v13) >> 3;
  v66 = v65 + 1;
  if ((unint64_t)(v65 + 1) >> 61)
LABEL_116:
    abort();
  if ((v15 - v13) >> 2 > v66)
    v66 = (v15 - v13) >> 2;
  if ((unint64_t)(v15 - v13) >= 0x7FFFFFFFFFFFFFF8)
    v67 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v67 = v66;
  if (v67)
    v67 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v67);
  v68 = (char *)(v67 + 8 * v65);
  *(_QWORD *)v68 = 0;
  while (v57 != v13)
  {
    v69 = *((_QWORD *)v57 - 1);
    v57 -= 8;
    *((_QWORD *)v68 - 1) = v69;
    v68 -= 8;
  }
  if (v13)
    operator delete(v13);
  v13 = v68;
  v64 = a1(a3 + *(unsigned __int8 *)(v76 + 16), v68);
LABEL_106:
  v70 = v64;
  if (v13)
    operator delete(v13);
  if (__p[0])
  {
    v71 = __p[1];
    v72 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v74 = *--v71;
        v73 = v74;
        *v71 = 0;
        if (v74)
          MEMORY[0x24BD1B380](v73, 0x1000C8077774924);
      }
      while (v71 != __p[0]);
      v72 = __p[0];
    }
    operator delete(v72);
  }
  return v70;
}

uint64_t std::__split_buffer<std::unique_ptr<char []>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x24BD1B380](v4, 0x1000C8077774924);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void llvm::orc::shared::runFinalizeActions(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  llvm::orc::shared::WrapperFunctionCall *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  __int128 v26;
  _QWORD v27[2];
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  _QWORD *v35;

  v26 = 0uLL;
  v27[0] = 0;
  v5 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 == v4)
  {
    v4 = (_QWORD *)*a1;
LABEL_32:
    a1[1] = v4;
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_OWORD *)a2 = v26;
    *(_QWORD *)(a2 + 16) = v27[0];
    v26 = 0uLL;
    v27[0] = 0;
    goto LABEL_33;
  }
  v6 = 0;
  v7 = v5;
  do
  {
    if (v7[7])
      ++v6;
    v7 += 14;
  }
  while (v7 != v4);
  if (v6)
  {
    if (v6 > 0x492492492492492)
LABEL_49:
      abort();
    v35 = v27;
    v31 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v6);
    v32 = v31;
    v33 = v31;
    v34 = &v31[7 * v8];
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__swap_out_circular_buffer(&v26, &v31);
    std::__split_buffer<llvm::orc::shared::WrapperFunctionCall>::~__split_buffer((uint64_t)&v31);
    v5 = (_QWORD *)*a1;
    v4 = (_QWORD *)a1[1];
  }
  if (v5 == v4)
    goto LABEL_32;
  while (1)
  {
    if (*v5)
    {
      llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged((llvm::orc::shared::WrapperFunctionCall *)v5, (uint64_t *)&v25);
      v9 = v25;
      if (v25)
        break;
    }
    v10 = v5[7];
    if (v10)
    {
      v11 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1) >= v27[0])
      {
        v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v26 + 1) - v26) >> 3);
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) > 0x492492492492492)
          goto LABEL_49;
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v27[0] - v26) >> 3) > v14)
          v14 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v27[0] - v26) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27[0] - v26) >> 3)) >= 0x249249249249249)
          v15 = 0x492492492492492;
        else
          v15 = v14;
        v35 = v27;
        v16 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v15);
        v17 = &v16[7 * v13];
        v31 = v16;
        v32 = v17;
        v34 = &v16[7 * v18];
        *v17 = (void *)v5[7];
        v17[1] = v17 + 4;
        *((_OWORD *)v17 + 1) = xmmword_24AA2ACE0;
        if (v5[9])
          llvm::SmallVectorImpl<char>::operator=((uint64_t)(v17 + 1), (const void **)v5 + 8);
        v33 = v17 + 7;
        std::vector<llvm::orc::shared::WrapperFunctionCall>::__swap_out_circular_buffer(&v26, &v31);
        v12 = *((_QWORD *)&v26 + 1);
        std::__split_buffer<llvm::orc::shared::WrapperFunctionCall>::~__split_buffer((uint64_t)&v31);
      }
      else
      {
        **((_QWORD **)&v26 + 1) = v10;
        *(_QWORD *)(v11 + 8) = v11 + 32;
        *(_OWORD *)(v11 + 16) = xmmword_24AA2ACE0;
        if (v5[9])
          llvm::SmallVectorImpl<char>::operator=(v11 + 8, (const void **)v5 + 8);
        v12 = v11 + 56;
      }
      *((_QWORD *)&v26 + 1) = v12;
    }
    v5 += 14;
    if (v5 == v4)
    {
      v19 = (_QWORD *)*a1;
      v4 = (_QWORD *)a1[1];
      if (v4 != (_QWORD *)*a1)
      {
        do
        {
          v4 -= 14;
          std::allocator<llvm::orc::shared::AllocActionCallPair>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v4);
        }
        while (v4 != v19);
        v4 = v19;
      }
      goto LABEL_32;
    }
  }
  v25 = 0;
  v20 = 0;
  if (*((_QWORD *)&v26 + 1) != (_QWORD)v26)
  {
    v21 = (*((_QWORD *)&v26 + 1) - (_QWORD)v26) / 56;
    v22 = (llvm::orc::shared::WrapperFunctionCall *)(v26 + 56 * v21 - 56);
    do
    {
      llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged(v22, (uint64_t *)&v28);
      v30 = v28;
      v31 = v20;
      v28 = 0;
      llvm::ErrorList::join((uint64_t *)&v31, (uint64_t *)&v30, (uint64_t *)&v29);
      if (v30)
        (*((void (**)(void **))*v30 + 1))(v30);
      if (v31)
        (*((void (**)(void **))*v31 + 1))(v31);
      v20 = v29;
      v29 = 0;
      if (v28)
        (*((void (**)(void **))*v28 + 1))(v28);
      v22 = (llvm::orc::shared::WrapperFunctionCall *)((char *)v22 - 56);
      --v21;
    }
    while (v21);
  }
  v30 = v20;
  v31 = v9;
  llvm::ErrorList::join((uint64_t *)&v31, (uint64_t *)&v30, &v24);
  if (v30)
    (*((void (**)(void **))*v30 + 1))(v30);
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  *(_BYTE *)(a2 + 24) |= 1u;
  v23 = (uint64_t)v25;
  *(_QWORD *)a2 = v24;
  v24 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
LABEL_33:
  v31 = (void **)&v26;
  std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v31);
}

_QWORD *std::vector<llvm::orc::shared::WrapperFunctionCall>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + v7 - 56);
      *(_QWORD *)(v6 + v7 - 48) = v6 + v7 - 24;
      result = (_QWORD *)(v6 + v7 - 48);
      *(result - 1) = v8;
      *(_OWORD *)(result + 1) = xmmword_24AA2ACE0;
      if (*(_QWORD *)(v4 + v7 - 40))
        result = (_QWORD *)llvm::SmallVectorImpl<char>::operator=((uint64_t)result, (const void **)(v4 + v7 - 48));
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(56 * a1);
}

uint64_t std::__split_buffer<llvm::orc::shared::WrapperFunctionCall>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v4 = *(void **)(v2 - 48);
    if (v4 == (void *)(v2 - 24))
    {
      v2 -= 56;
    }
    else
    {
      free(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::orc::isMachOInitializerSection(void *__s2, size_t __n, void *a3, size_t a4)
{
  uint64_t v8;
  const void **v9;
  size_t v10;
  char *v11;
  uint64_t v12;

  v8 = 0;
  while (1)
  {
    v9 = (const void **)&llvm::orc::MachOInitSectionNames[v8];
    v10 = *((_QWORD *)&llvm::orc::MachOInitSectionNames[v8] + 1);
    if (v10 >= __n)
    {
      v11 = (char *)*v9;
      if (!__n || !memcmp(*v9, __s2, __n))
      {
        v12 = v10 >= 7 ? 7 : v10;
        if (v10 - v12 == a4 && (v10 < 8 || !memcmp(&v11[v12], a3, a4)))
          break;
      }
    }
    if (++v8 == 22)
      return 0;
  }
  return 1;
}

uint64_t llvm::orc::isMachOInitializerSection(void *__s2, size_t __n)
{
  __int128 *v4;

  v4 = llvm::orc::MachOInitSectionNames;
  while (*((_QWORD *)v4 + 1) != __n || __n && memcmp(*(const void **)v4, __s2, __n))
  {
      return 0;
  }
  return 1;
}

BOOL llvm::orc::isELFInitializerSection(uint64_t a1, unint64_t a2)
{
  BOOL v2;
  _BOOL8 result;

  result = 0;
  if (a2 >= 0xB)
  {
    v2 = *(_QWORD *)a1 == 0x72615F74696E692ELL && *(_QWORD *)(a1 + 3) == 0x79617272615F7469;
    if (v2 && (a2 < 0xC || *(_BYTE *)(a1 + 11) == 46))
      return 1;
  }
  return result;
}

double _GLOBAL__sub_I_ObjectFormats_cpp()
{
  double result;

  llvm::orc::MachOInitSectionNames = llvm::orc::MachOModInitFuncSectionName;
  unk_257965820 = llvm::orc::MachOObjCCatListSectionName;
  xmmword_257965830 = llvm::orc::MachOObjCCatList2SectionName;
  unk_257965840 = llvm::orc::MachOObjCClassListSectionName;
  xmmword_257965850 = llvm::orc::MachOObjCClassNameSectionName;
  unk_257965860 = llvm::orc::MachOObjCClassRefsSectionName;
  xmmword_257965870 = llvm::orc::MachOObjCConstSectionName;
  unk_257965880 = llvm::orc::MachOObjCDataSectionName;
  xmmword_257965890 = llvm::orc::MachOObjCImageInfoSectionName;
  unk_2579658A0 = llvm::orc::MachOObjCMethNameSectionName;
  xmmword_2579658B0 = llvm::orc::MachOObjCMethTypeSectionName;
  unk_2579658C0 = llvm::orc::MachOObjCNLCatListSectionName;
  xmmword_2579658D0 = llvm::orc::MachOObjCNLClassListSectionName;
  unk_2579658E0 = llvm::orc::MachOObjCProtoListSectionName;
  xmmword_2579658F0 = llvm::orc::MachOObjCProtoRefsSectionName;
  unk_257965900 = llvm::orc::MachOObjCSelRefsSectionName;
  xmmword_257965910 = llvm::orc::MachOSwift5ProtoSectionName;
  unk_257965920 = llvm::orc::MachOSwift5ProtosSectionName;
  xmmword_257965930 = llvm::orc::MachOSwift5TypesSectionName;
  unk_257965940 = llvm::orc::MachOSwift5TypeRefSectionName;
  result = *(double *)&llvm::orc::MachOSwift5FieldMetadataSectionName;
  xmmword_257965950 = llvm::orc::MachOSwift5FieldMetadataSectionName;
  unk_257965960 = llvm::orc::MachOSwift5EntrySectionName;
  return result;
}

void `anonymous namespace'::getOrcErrCat(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
    }
  }
}

uint64_t llvm::orc::DuplicateDefinition::convertToErrorCode(llvm::orc::DuplicateDefinition *this)
{
  return 2;
}

llvm::raw_ostream *llvm::orc::DuplicateDefinition::log(llvm::orc::DuplicateDefinition *this, llvm::raw_ostream *a2)
{
  void *v4;
  const char *v5;
  char *v6;
  const char *v7;
  int v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *result;
  _BYTE *v12;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x1FuLL)
  {
    qmemcpy(v4, "Duplicate definition of symbol '", 32);
    *((_QWORD *)a2 + 4) += 32;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Duplicate definition of symbol '", 0x20uLL);
  }
  v7 = (const char *)*((_QWORD *)this + 1);
  v6 = (char *)this + 8;
  v5 = v7;
  v8 = v6[23];
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[23];
  else
    v10 = *((_QWORD *)v6 + 1);
  result = llvm::raw_ostream::write(a2, v9, v10);
  v12 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v12)
    return llvm::raw_ostream::write(a2, "'", 1uLL);
  *v12 = 39;
  ++*((_QWORD *)a2 + 4);
  return result;
}

void llvm::orc::DuplicateDefinition::~DuplicateDefinition(void **this)
{
  *this = off_251C167C8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C167C8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::orc::DuplicateDefinition,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::DuplicateDefinition::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::DuplicateDefinition,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::DuplicateDefinition::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void `anonymous namespace'::OrcErrorCategory::~OrcErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24BD1B3A4);
}

const char *`anonymous namespace'::OrcErrorCategory::name(_anonymous_namespace_::OrcErrorCategory *this)
{
  return "orc";
}

_QWORD *`anonymous namespace'::OrcErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, off_251C16850[a1 - 1]);
}

_QWORD *llvm::JITSymbolFlags::fromObjectSymbol@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unsigned int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 40))(&v11, a1[1], *a1);
  if ((v12 & 1) != 0)
  {
    v7 = v11;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v7;
  }
  else
  {
    v5 = v11;
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 120))(&v9, a1[1], *a1);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v8;
    }
    else
    {
      v6 = (v5 >> 2) & 0x14 | (v5 >> 1) & 2;
      if ((_DWORD)v9 == 5)
        LOWORD(v6) = v6 | 0x20;
      *(_BYTE *)(a2 + 8) &= ~1u;
      *(_WORD *)a2 = (_WORD)v6 << 8;
    }
    if ((v12 & 1) != 0)
    {
      result = v11;
      v11 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::object::ObjectFile::getCommonSymbolSize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)a1 + 40))(&v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8;
    v8 = 0;
    llvm::report_fatal_error(&v7);
  }
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2);
  if ((v9 & 1) != 0)
  {
    v5 = v8;
    v8 = 0;
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  return v4;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  void *v15[3];
  __int128 v16[2];
  _QWORD v17[9];
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  const void *v25[3];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(*(llvm::formatv_object_base **)a1, *(llvm::formatv_object_base **)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (v6 = v22, *(_QWORD *)&v22 = 0, v6))
  {
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    v12 = v22;
    *(_OWORD *)__p = v23;
    v23 = 0uLL;
    v8 = v24;
    v24 = 0;
    v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    v15[2] = 0;
    if (v25[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16)
      free(v15[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::initContent((uint64_t)v17, &v11), (v9 = v11) != 0))
    {
      *(_BYTE *)(a3 + 152) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      *(_BYTE *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &off_251C168E8;
    if (v20 != &v21)
      free(v20);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::initContent(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = 40 * v10;
      v6 = (int *)(v9 + 4);
      while (1)
      {
        v7 = *v6;
        if (*v6 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 120);
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 136);
        if (!*(_QWORD *)(a1 + 136))
          goto LABEL_10;
LABEL_11:
        v6 += 10;
        v5 -= 40;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 128);
      if (*(_QWORD *)(a1 + 128))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C168E8;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;

  v12 = *a2;
  v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 13;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_251C168E8;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector((_QWORD *)(a1 + 72), a3 + 16);
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_QWORD *)(a3 + 48))
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C168E8;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int *v11;
  _QWORD *v12;
  _BOOL4 v13;
  unsigned int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v35);
  v7 = (_QWORD *)v35;
  if ((v36 & 1) != 0)
  {
    v35 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_88;
  }
  v8 = *(unsigned __int8 *)(v35 + 12);
  if ((v8 & 0xF0) == 0x20)
    v9 = 6;
  else
    v9 = 2;
  if (v8 < 0x10)
    v9 = 0;
  if (*(__int16 *)(v35 + 14) == -15)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (unsigned int *)a1[16];
  if (v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(v6, v11, (uint64_t)&v32);
    v12 = v32;
    if ((v34 & 1) != 0)
      goto LABEL_33;
    v13 = v7 == v32;
  }
  else
  {
    v13 = 0;
  }
  v14 = (unsigned int *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(v6, v14, (uint64_t)&v32);
    v12 = v32;
    if ((v34 & 1) == 0)
      goto LABEL_17;
LABEL_33:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v12;
    goto LABEL_88;
  }
  v12 = 0;
LABEL_17:
  v15 = v7 == v12 || v13;
  if ((v8 & 0xF) - 3 < 2)
    v15 = 1;
  if (v15)
    v16 = v10 | 0x80;
  else
    v16 = v10;
  v17 = *(unsigned __int16 *)(*v6 + 18);
  switch(v17)
  {
    case 183:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v32, a1, a2);
      if ((v34 & 1) != 0)
      {
        v31 = v32;
        v32 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v31);
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        if ((v34 & 1) != 0)
        {
          v20 = v32;
          v32 = 0;
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        }
        v18 = v16;
      }
      else
      {
        v18 = v16;
        if (v33 >= 2)
        {
          v18 = v10 | 0x80;
          if (*(_WORD *)v32 != 25636)
          {
            if (*(_WORD *)v32 == 30756)
              v18 = v10 | 0x80;
            else
              v18 = v16;
          }
        }
      }
      v16 = v18;
      break;
    case 40:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v32, a1, a2);
      if ((v34 & 1) != 0)
      {
        v31 = v32;
        v32 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v31);
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        if ((v34 & 1) != 0)
        {
          v21 = v32;
          v32 = 0;
          if (v21)
            (*(void (**)(_QWORD *))(*v21 + 8))(v21);
        }
        v19 = v16;
        goto LABEL_67;
      }
      if (v33)
      {
        v19 = v16;
        if (v33 == 1)
        {
LABEL_67:
          if ((*((_BYTE *)v7 + 12) & 0xF) == 2)
            v19 = v19 & 0xFFFFFEFF | ((*((_DWORD *)v7 + 1) & 1) << 8);
          v16 = v19;
          break;
        }
        if (*(_WORD *)v32 != 25636)
        {
          v19 = v10 | 0x80;
          if (*(_WORD *)v32 != 29732)
          {
            if (*(_WORD *)v32 == 24868)
              v19 = v10 | 0x80;
            else
              v19 = v16;
          }
          goto LABEL_67;
        }
      }
      v19 = v10 | 0x80;
      goto LABEL_67;
    case 243:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v32, a1, a2);
      if ((v34 & 1) != 0)
      {
        v22 = v32;
        v32 = 0;
        v30 = v22;
        llvm::consumeError(&v30);
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
      }
      else if (!v33)
      {
        v16 = v10 | 0x80;
      }
      if ((v34 & 1) != 0)
      {
        v23 = v32;
        v32 = 0;
        if (v23)
          (*(void (**)(_QWORD *))(*v23 + 8))(v23);
      }
      break;
  }
  if (*((_WORD *)v7 + 7))
  {
    v24 = *((unsigned __int8 *)v7 + 12);
    v25 = v24 & 0xF;
    if (v25 != 5 && *((unsigned __int16 *)v7 + 7) != 65522)
      goto LABEL_76;
  }
  else
  {
    v16 |= 1u;
    v24 = *((unsigned __int8 *)v7 + 12);
    v25 = v24 & 0xF;
    if (v25 != 5)
      goto LABEL_76;
  }
  v16 |= 0x10u;
LABEL_76:
  v26 = v24 >> 4;
  if (v26 <= 0xA && ((1 << v26) & 0x406) != 0)
  {
    v27 = *((_BYTE *)v7 + 13) & 3;
    if (v27 == 3 || (*((_BYTE *)v7 + 13) & 3) == 0)
      v16 |= 0x40u;
  }
  else
  {
    v27 = *((_BYTE *)v7 + 13) & 3;
  }
  if (v25 == 10)
    v28 = v16 | 0x20;
  else
    v28 = v16;
  if (v27 == 2)
    v28 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v28;
LABEL_88:
  if ((v36 & 1) != 0)
  {
    v29 = v35;
    v35 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    v2 = *(_DWORD *)(v1 + 20) > 0xFu;
  else
    v2 = 0;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[16];
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI((uint64_t)a1, v1, *(_DWORD *)(v1 + 20) >> 4);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm::object *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::object *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  llvm::object *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if ((v33 & 1) != 0)
  {
    v10 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, a2, (uint64_t)&v30);
  v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, *(_DWORD *)(v30 + 24), (uint64_t)&v28);
    v8 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
LABEL_37:
      if ((v31 & 1) != 0)
      {
        v18 = v30;
        v30 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      goto LABEL_40;
    }
    *(_QWORD *)&v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_34:
      if ((v29 & 1) != 0)
      {
        v17 = v28;
        v28 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    v9 = v25;
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      if ((*((_BYTE *)v32 + 12) & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if ((v25 & 1) != 0)
          {
            v12 = (_QWORD *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v12 = 0;
          }
          v20 = v12;
          llvm::consumeError(&v20);
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v14 = v21;
            v21 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
          if ((v25 & 1) != 0)
          {
            v15 = v24;
            *(_QWORD *)&v24 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          goto LABEL_31;
        }
        v13 = v21;
        v21 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v9 = v25;
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v9 & 1;
      if ((v9 & 1) != 0)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if ((v27 & 1) != 0)
    {
      v16 = v26[0];
      v26[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    goto LABEL_34;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v7;
LABEL_40:
  if ((v33 & 1) != 0)
  {
    v19 = v32;
    v32 = 0;
    if (v19)
      (*(void (**)(llvm::object *))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v26);
  if ((v27 & 1) != 0)
  {
    v7 = v26;
    goto LABEL_10;
  }
  v6 = v26;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v24);
  v7 = v24;
  if ((v25 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  v8 = *(unsigned __int16 *)(v24 + 14);
  if ((v8 - 65521) < 2 || v8 == 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v13 = v22;
    v22 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) == 1)
  {
    v10 = *(unsigned int **)(a1 + 136);
    if (v10)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable((_QWORD *)(a1 + 56), v10, (uint64_t)&v19);
      if ((v21 & 1) != 0)
      {
        v13 = v19;
        goto LABEL_18;
      }
      v12 = v19;
      v11 = v20;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    *(_QWORD *)&v16 = v12;
    *((_QWORD *)&v16 + 1) = v11;
    v17 = 1;
    v18 = 0;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), v24, v22, &v16, (uint64_t)&v19);
    v13 = v19;
    if ((v20 & 1) == 0)
    {
      if (v19)
        v6 += v19[3];
      goto LABEL_23;
    }
LABEL_18:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_24;
  }
LABEL_23:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
LABEL_24:
  if ((v23 & 1) != 0)
  {
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  if ((v25 & 1) != 0)
  {
    v15 = v24;
    v24 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  if ((v8 & 1) != 0)
  {
    v6 = (_QWORD *)v7;
    v7 = 0;
    llvm::report_fatal_error(&v6);
  }
  result = *(unsigned int *)(v7 + 4);
  if (*(__int16 *)(v7 + 14) != -15)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 40 || v4 == 8) && (*(_BYTE *)(v7 + 12) & 0xF) == 2)
      return result & 0xFFFFFFFE;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 14) == -14)
    return *(unsigned int *)(v4 + 4);
  else
    return 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 12) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_10;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_10;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_10;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_10;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_10:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v8 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSection(a1, v13, v11, a3);
      if ((v12 & 1) != 0)
      {
        v7 = v11;
        v11 = 0;
        if (v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    if ((v14 & 1) != 0)
    {
      v10 = v13;
      v13 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::formatv_object_base **@<X0>, uint64_t *@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  if ((v8 & 1) != 0)
  {
    v3 = v7;
    v7 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 20);
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a2[1] == 8)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = llvm::object::Binary::checkOffset((llvm::object *)v11, a2[4] + *(_QWORD *)&v11[0], a2[5], &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = a2[5];
      v10 = *v6 + a2[4];
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 32);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1)
    return 0;
  if ((*(_DWORD *)(a2 + 8) & 2) != 0)
    return (*(_DWORD *)(a2 + 8) & 4) == 0;
  return 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = (v2 & 4) != 0 || (*(_DWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 8)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v6);
  if ((v8 & 1) != 0)
  {
    v5 = (_QWORD *)v6;
    v6 = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v5);
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    if ((v8 & 1) != 0)
    {
      result = v6;
      v6 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6)
    return 0;
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485)
    return 1;
  if (v7 < 7)
    return 0;
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149)
    return 1;
  if (v7 != 10)
    return 0;
  return *(_QWORD *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 46));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_rel_end(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *RelSection;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = a2[1];
  if (v5 == 4 || v5 == 9)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, *((_DWORD *)RelSection + 6), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    return v4 | ((unint64_t)(a2[5] / a2[9] + HIDWORD(v4)) << 32);
  }
  return v4;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocatedSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, *(_DWORD *)(a2 + 28), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  _QWORD *Rel;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  return *(unsigned int *)Rel;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationSymbol(uint64_t a1, uint64_t a2)
{
  _QWORD *RelSection;
  _QWORD *Rel;
  unsigned int v6;

  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2);
  if (*((_DWORD *)RelSection + 1) == 9)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  v6 = *((_DWORD *)Rel + 1);
  if (v6 > 0xFF)
    return *((unsigned int *)RelSection + 6) | ((unint64_t)(v6 >> 8) << 32);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  _QWORD *Rel;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2);
  return *((unsigned __int8 *)Rel + 4);
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = a1 + 7;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(v4, v5, a3);
}

uint64_t llvm::object::ObjectFile::mapReflectionSectionNameToEnumValue()
{
  return 10;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *__p;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v37 = 0;
  v38 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v39);
  if ((v41 & 1) == 0 && v40)
  {
    v4 = 0;
    v5 = v39;
    v6 = v39 + 40 * v40;
    do
    {
      if (*(_DWORD *)(v5 + 4) == 6)
      {
        v7 = (int *)(*(unsigned int *)(v5 + 16) + *(_QWORD *)(a1 + 16));
        v8 = *v7;
        if (*v7)
        {
          do
          {
            if (v8 == 17 || v8 == 7 || v8 == 23)
            {
              v9 = v7[1];
              if (v4 >= v38)
              {
                v11 = __p;
                v12 = (v4 - __p) >> 3;
                v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61)
LABEL_56:
                  abort();
                v14 = v38 - __p;
                if ((v38 - __p) >> 2 > v13)
                  v13 = v14 >> 2;
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                  v15 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v15 = v13;
                if (v15)
                {
                  v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v38, v15);
                  v11 = __p;
                  v4 = v37;
                }
                else
                {
                  v16 = 0;
                }
                v17 = &v16[8 * v12];
                *(_QWORD *)v17 = v9;
                v10 = v17 + 8;
                while (v4 != v11)
                {
                  v18 = *((_QWORD *)v4 - 1);
                  v4 -= 8;
                  *((_QWORD *)v17 - 1) = v18;
                  v17 -= 8;
                }
                __p = v17;
                v38 = &v16[8 * v15];
                if (v11)
                  operator delete(v11);
              }
              else
              {
                *(_QWORD *)v4 = v9;
                v10 = v4 + 8;
              }
              v37 = v10;
              v4 = v10;
            }
            v19 = v7[2];
            v7 += 2;
            v8 = v19;
          }
          while (v19);
        }
      }
      v5 += 40;
    }
    while (v5 != v6);
    if (v40)
    {
      v20 = 0;
      v21 = v39;
      v22 = v39 + 40 * v40;
      v23 = a2 + 2;
      do
      {
        v24 = __p;
        if (__p != v37)
        {
          while (*(_QWORD *)v24 != *(_DWORD *)(v21 + 12))
          {
            v24 += 8;
            if (v24 == v37)
            {
              v24 = v37;
              break;
            }
          }
        }
        if (v24 != v37)
        {
          if ((unint64_t)v20 >= *v23)
          {
            v25 = (v20 - *a2) >> 4;
            if ((unint64_t)(v25 + 1) >> 60)
              goto LABEL_56;
            v26 = *v23 - (_QWORD)*a2;
            v27 = v26 >> 3;
            if (v26 >> 3 <= (unint64_t)(v25 + 1))
              v27 = v25 + 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
              v28 = 0xFFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a2 + 2), v28);
            v31 = &v29[16 * v25];
            *(_QWORD *)v31 = v21;
            *((_QWORD *)v31 + 1) = a1;
            v33 = *a2;
            v32 = a2[1];
            v34 = v31;
            if (v32 != *a2)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
                v34 -= 16;
                v32 -= 16;
              }
              while (v32 != v33);
              v32 = *a2;
            }
            v20 = v31 + 16;
            *a2 = v34;
            a2[1] = v31 + 16;
            a2[2] = &v29[16 * v30];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = a1;
            v20 += 16;
          }
          a2[1] = v20;
        }
        v21 += 40;
      }
      while (v21 != v22);
    }
  }
  if ((v41 & 1) != 0)
  {
    v35 = v39;
    v39 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if (__p)
    operator delete(__p);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + 40 * v2[1];
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getBytesInAddress()
{
  return 4;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  const char *result;
  int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 != 2)
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
    v3 = *(unsigned __int16 *)(v1 + 18);
    if (v3 > 82)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105)
            return "elf32-msp430";
          if (v3 == 164)
            return "elf32-hexagon";
        }
        else
        {
          if (v3 == 83)
            return "elf32-avr";
          if (v3 == 94)
            return "elf32-xtensa";
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224)
          return "elf32-amdgpu";
        if (v3 == 243)
          return "elf32-littleriscv";
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
    }
    else
    {
      if (v3 <= 17)
      {
        result = "elf32-m68k";
        switch(v3)
        {
          case 2:
            return "elf32-sparc";
          case 3:
            result = "elf32-i386";
            break;
          case 4:
            return result;
          case 6:
            result = "elf32-iamcu";
            break;
          case 8:
            result = "elf32-mips";
            break;
          default:
            return "elf32-unknown";
        }
        return result;
      }
      if (v3 > 39)
      {
        if (v3 == 40)
          return "elf32-littlearm";
        if (v3 == 62)
          return "elf32-x86-64";
      }
      else
      {
        if (v3 == 18)
          return "elf32-sparc";
        if (v3 == 20)
          return "elf32-powerpcle";
      }
    }
    return "elf32-unknown";
  }
  v5 = *(unsigned __int16 *)(v1 + 18);
  if (v5 > 182)
  {
    if (v5 > 246)
    {
      switch(v5)
      {
        case 247:
          return "elf64-bpf";
        case 251:
          return "elf64-ve";
        case 258:
          return "elf64-loongarch";
      }
    }
    else
    {
      switch(v5)
      {
        case 183:
          return "elf64-littleaarch64";
        case 224:
          return "elf64-amdgpu";
        case 243:
          return "elf64-littleriscv";
      }
    }
  }
  else if (v5 > 21)
  {
    switch(v5)
    {
      case 22:
        return "elf64-s390";
      case 43:
        return "elf64-sparc";
      case 62:
        return "elf64-x86-64";
    }
  }
  else
  {
    switch(v5)
    {
      case 3:
        return "elf64-i386";
      case 8:
        return "elf64-mips";
      case 21:
        return "elf64-powerpcle";
    }
  }
  return "elf64-unknown";
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getArch(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int16 *)(v1 + 18);
  if (v2 <= 0x52)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x27u)
    {
      result = 15;
      switch(*(_WORD *)(v1 + 18))
      {
        case 2:
        case 0x12:
          return 31;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2)
              return 19;
LABEL_54:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          result = 17;
          break;
        case 0x14:
          return 22;
        case 0x15:
          return 24;
        case 0x16:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (*(unsigned __int16 *)(v1 + 18) <= 0xDFu)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x68u)
    {
      if (v2 == 83)
        return 7;
      if (v2 == 94)
        return 40;
    }
    else
    {
      switch(v2)
      {
        case 0x69u:
          return 20;
        case 0xA4u:
          return 12;
        case 0xB7u:
          return 3;
      }
    }
    return 0;
  }
  switch(*(_WORD *)(v1 + 18))
  {
    case 0xF3:
      v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2)
          return 28;
        goto LABEL_54;
      }
      return 27;
    case 0xF4:
      return 55;
    case 0xF5:
    case 0xF6:
    case 0xF8:
    case 0xF9:
    case 0xFA:
      return 0;
    case 0xF7:
      return 8;
    case 0xFB:
      return 60;
    case 0xFC:
      return 10;
    default:
      if (v2 == 224)
      {
        v7 = *(unsigned __int8 *)(v1 + 36);
        v8 = v7 - 1;
        if ((v7 - 32) >= 0x28)
          v9 = 0;
        else
          v9 = 26;
        if (v8 >= 0x10)
          result = v9;
        else
          result = 25;
      }
      else
      {
        if (v2 != 258)
          return 0;
        v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 != 1)
        {
          if (v5 == 2)
            return 14;
          goto LABEL_54;
        }
        result = 13;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = *(unsigned int *)(v2 + 24);
  return result;
}

uint64_t llvm::object::ObjectFile::mapDebugSectionName(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned int *)(v4 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 12) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 12) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 16);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationAddend(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm::formatv_object_base *v7;
  __int16 v8;
  uint64_t v9;
  unsigned int v10;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(a1, a2)+ 1) == 4)
  {
    v6 = *((int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(a1, a2)+ 2);
    *(_BYTE *)(a3 + 8) &= ~1u;
  }
  else
  {
    v7 = (llvm::formatv_object_base *)"Section is not SHT_RELA";
    v8 = 259;
    v10 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(&v7, &v10, &v9);
    *(_BYTE *)(a3 + 8) |= 1u;
    v6 = v9;
  }
  *(_QWORD *)a3 = v6;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = 40 * v18;
  while (*v6 != 1879048195)
  {
    v6 += 10;
    v7 -= 40;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 1, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_begin(a1);
  v6 = v5;
  result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getPlatformFlags(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 36);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEType(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEMachine(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18);
}

_QWORD *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::__vallocate[abi:nn180100](a1, 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3));
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(40 * a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      v5 = (a2 - v7) / 0x28;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
LABEL_5:
    v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unsigned int *)v13[0];
    goto LABEL_5;
  }
  v10 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v10;
LABEL_8:
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v9 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v9;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int16 *)(a1 + 14);
  if (v5 != 0xFFFF)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v5 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
    goto LABEL_6;
  }
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>((unint64_t)(a1 - a2) >> 4, (uint64_t *)v8, (uint64_t)&v9);
  if ((v10 & 1) == 0)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    v5 = v9;
LABEL_6:
    *(_DWORD *)a4 = v5;
    return;
  }
  v7 = v9;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v7;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned int *)a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v18);
    if ((v20 & 1) != 0)
    {
      v11 = v18;
      goto LABEL_9;
    }
    v10 = v18;
    v9 = v19;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = v9;
  v16 = 1;
  v17 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1 + 7, a2, a3, &v15, (uint64_t)&v18);
  v11 = v18;
  if ((v19 & 1) != 0)
  {
LABEL_9:
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
    return;
  }
  if (v18)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = a1;
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v13;
    if ((v19 & 1) != 0)
    {
      v14 = v18;
      v18 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
}

_QWORD *llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(_QWORD **a1)
{
  _QWORD *result;
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v2, &v3);
  result = v2;
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

_QWORD **llvm::handleErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      v4 = (uint64_t *)v3[1];
      v5 = (uint64_t *)v3[2];
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v9 = v6;
          v7 = *v4;
          *v4 = 0;
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v7 + 48))(v7, &llvm::ErrorInfoBase::ID);
          v8 = v7;
          llvm::ErrorList::join(&v9, &v8, &v10);
          v6 = v10;
          *a2 = v10;
          v10 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          ++v4;
        }
        while (v4 != v5);
      }
      return (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
    }
    else
    {
      result = (_QWORD **)(*(uint64_t (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      *a2 = v3;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

_QWORD *llvm::object::Binary::checkOffset@<X0>(llvm::object *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  BOOL v6;
  _UNKNOWN **v7;
  _QWORD *result;

  v5 = a3 + a2;
  if (__CFADD__(a3, a2)
    || v5 < a3
    || (*(_QWORD *)a1 <= a2 ? (v6 = v5 > *(_QWORD *)a1 + *((_QWORD *)a1 + 1)) : (v6 = 1), v6))
  {
    v7 = llvm::object::object_category(a1);
    result = (_QWORD *)operator new();
    *result = &off_251C12820;
    result[1] = 4;
    result[2] = v7;
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelSection(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRel(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRela(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 8 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 8 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = a2[5];
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,true>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 12 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 12 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = a2[5];
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  llvm::object *v7;
  char *ELFRelocationTypeName;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  const char *v19;
  uint64_t v20;

  v6 = *a1;
  v7 = (llvm::object *)*(unsigned __int16 *)(*a1 + 18);
  if ((_DWORD)v7 == 8 && *(_BYTE *)(v6 + 4) == 2)
  {
    ELFRelocationTypeName = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, ELFRelocationTypeName, &ELFRelocationTypeName[v9]);
    v10 = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE1(a2));
    v12 = v11;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v10, &v10[v12]);
    v13 = llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), BYTE2(a2));
    v15 = v14;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    v16 = (char *)&v13[v15];
    v17 = a3;
    v18 = (char *)v13;
  }
  else
  {
    v19 = llvm::object::getELFRelocationTypeName(v7, a2);
    v16 = (char *)&v19[v20];
    v17 = a3;
    v18 = (char *)v19;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(v17, v18, v16);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = v1 && *(_DWORD *)(v1 + 20) > 0xFu;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toDRI(a1, v1, *(_DWORD *)(v1 + 20) >> 4);
  else
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamic_symbol_begin(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v6;
  void *__p[3];
  void *v8[3];
  __int128 v9[2];

  v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = v9;
  if (*(_QWORD *)(a2 + 104))
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (v8[0] != v9)
    free(v8[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  void *v15[3];
  __int128 v16[2];
  _QWORD v17[9];
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  const void *v25[3];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(*(llvm::formatv_object_base **)a1, *(llvm::formatv_object_base **)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (v6 = v22, *(_QWORD *)&v22 = 0, v6))
  {
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    v12 = v22;
    *(_OWORD *)__p = v23;
    v23 = 0uLL;
    v8 = v24;
    v24 = 0;
    v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    v15[2] = 0;
    if (v25[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16)
      free(v15[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::initContent((uint64_t)v17, &v11), (v9 = v11) != 0))
    {
      *(_BYTE *)(a3 + 152) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      *(_BYTE *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &off_251C16B20;
    if (v20 != &v21)
      free(v20);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::initContent(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = 40 * v10;
      v6 = (unsigned int *)(v9 + 4);
      while (1)
      {
        v7 = bswap32(*v6);
        if (v7 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 120);
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 136);
        if (!*(_QWORD *)(a1 + 136))
          goto LABEL_10;
LABEL_11:
        v6 += 10;
        v5 -= 40;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 128);
      if (*(_QWORD *)(a1 + 128))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C16B20;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;

  v12 = *a2;
  v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 14;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_251C16B20;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector((_QWORD *)(a1 + 72), a3 + 16);
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_QWORD *)(a3 + 48))
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C16B20;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int *v11;
  _QWORD *v12;
  _BOOL4 v13;
  unsigned int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v34);
  v7 = (_QWORD *)v34;
  if ((v35 & 1) != 0)
  {
    v34 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_87;
  }
  v8 = *(unsigned __int8 *)(v34 + 12);
  if ((v8 & 0xF0) == 0x20)
    v9 = 6;
  else
    v9 = 2;
  if (v8 < 0x10)
    v9 = 0;
  if (*(__int16 *)(v34 + 14) == -3585)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (unsigned int *)a1[16];
  if (v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(v6, v11, (uint64_t)&v31);
    v12 = v31;
    if ((v33 & 1) != 0)
      goto LABEL_33;
    v13 = v7 == v31;
  }
  else
  {
    v13 = 0;
  }
  v14 = (unsigned int *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(v6, v14, (uint64_t)&v31);
    v12 = v31;
    if ((v33 & 1) == 0)
      goto LABEL_17;
LABEL_33:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v12;
    goto LABEL_87;
  }
  v12 = 0;
LABEL_17:
  v15 = v7 == v12 || v13;
  if ((v8 & 0xF) - 3 < 2)
    v15 = 1;
  if (v15)
    v16 = v10 | 0x80;
  else
    v16 = v10;
  v17 = *(unsigned __int16 *)(*v6 + 18);
  switch(v17)
  {
    case 46848:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v31, a1, a2);
      if ((v33 & 1) != 0)
      {
        v30 = v31;
        v31 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v30);
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        if ((v33 & 1) != 0)
        {
          v19 = v31;
          v31 = 0;
          if (v19)
            (*(void (**)(_QWORD *))(*v19 + 8))(v19);
        }
        v18 = v16;
      }
      else
      {
        v18 = v16;
        if (v32 >= 2)
        {
          v18 = v10 | 0x80;
          if (*(_WORD *)v31 != 25636)
          {
            if (*(_WORD *)v31 == 30756)
              v18 = v10 | 0x80;
            else
              v18 = v16;
          }
        }
      }
LABEL_68:
      v16 = v18;
      break;
    case 10240:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v31, a1, a2);
      if ((v33 & 1) != 0)
      {
        v30 = v31;
        v31 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v30);
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        if ((v33 & 1) != 0)
        {
          v20 = v31;
          v31 = 0;
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        }
        v18 = v16;
      }
      else
      {
        if (!v32)
          goto LABEL_65;
        v18 = v16;
        if (v32 == 1)
          goto LABEL_66;
        if (*(_WORD *)v31 == 25636)
        {
LABEL_65:
          v18 = v10 | 0x80;
        }
        else
        {
          v18 = v10 | 0x80;
          if (*(_WORD *)v31 != 29732)
          {
            if (*(_WORD *)v31 == 24868)
              v18 = v10 | 0x80;
            else
              v18 = v16;
          }
        }
      }
LABEL_66:
      if ((*((_BYTE *)v7 + 12) & 0xF) == 2)
      {
        v16 = *((_WORD *)v7 + 3) & 0x100 | v18;
        break;
      }
      goto LABEL_68;
    case 62208:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v31, a1, a2);
      if ((v33 & 1) != 0)
      {
        v21 = v31;
        v31 = 0;
        v29 = v21;
        llvm::consumeError(&v29);
        if (v29)
          (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      }
      else if (!v32)
      {
        v16 = v10 | 0x80;
      }
      if ((v33 & 1) != 0)
      {
        v22 = v31;
        v31 = 0;
        if (v22)
          (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      }
      break;
  }
  if (*((_WORD *)v7 + 7))
  {
    v23 = *((unsigned __int8 *)v7 + 12);
    v24 = v23 & 0xF;
    if (v24 != 5 && *((unsigned __int16 *)v7 + 7) != 62207)
      goto LABEL_75;
  }
  else
  {
    v16 |= 1u;
    v23 = *((unsigned __int8 *)v7 + 12);
    v24 = v23 & 0xF;
    if (v24 != 5)
      goto LABEL_75;
  }
  v16 |= 0x10u;
LABEL_75:
  v25 = v23 >> 4;
  if (v25 <= 0xA && ((1 << v25) & 0x406) != 0)
  {
    v26 = *((_BYTE *)v7 + 13) & 3;
    if (v26 == 3 || (*((_BYTE *)v7 + 13) & 3) == 0)
      v16 |= 0x40u;
  }
  else
  {
    v26 = *((_BYTE *)v7 + 13) & 3;
  }
  if (v24 == 10)
    v27 = v16 | 0x20;
  else
    v27 = v16;
  if (v26 == 2)
    v27 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v27;
LABEL_87:
  if ((v35 & 1) != 0)
  {
    v28 = v34;
    v34 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    v2 = bswap32(*(_DWORD *)(v1 + 20)) > 0xF;
  else
    v2 = 0;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[16];
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI((uint64_t)a1, v1, bswap32(*(_DWORD *)(v1 + 20)) >> 4);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if ((v33 & 1) != 0)
  {
    v10 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, a2, (uint64_t)&v30);
  v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 24)), (uint64_t)&v28);
    v8 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
LABEL_37:
      if ((v31 & 1) != 0)
      {
        v18 = v30;
        v30 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      goto LABEL_40;
    }
    *(_QWORD *)&v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_34:
      if ((v29 & 1) != 0)
      {
        v17 = v28;
        v28 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    v9 = v25;
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      if ((v32[3] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if ((v25 & 1) != 0)
          {
            v12 = (_QWORD *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v12 = 0;
          }
          v20 = v12;
          llvm::consumeError(&v20);
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v14 = v21;
            v21 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
          if ((v25 & 1) != 0)
          {
            v15 = v24;
            *(_QWORD *)&v24 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          goto LABEL_31;
        }
        v13 = v21;
        v21 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v9 = v25;
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v9 & 1;
      if ((v9 & 1) != 0)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if ((v27 & 1) != 0)
    {
      v16 = v26[0];
      v26[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    goto LABEL_34;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v7;
LABEL_40:
  if ((v33 & 1) != 0)
  {
    v19 = v32;
    v32 = 0;
    if (v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v26);
  if ((v27 & 1) != 0)
  {
    v7 = v26;
    goto LABEL_10;
  }
  v6 = v26;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v24);
  v7 = v24;
  if ((v25 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  v8 = bswap32(*(unsigned __int16 *)(v24 + 14)) >> 16;
  if (v8 - 65521 < 2 || v8 == 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v13 = v22;
    v22 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) == 256)
  {
    v10 = *(unsigned int **)(a1 + 136);
    if (v10)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable((_QWORD *)(a1 + 56), v10, (uint64_t)&v19);
      if ((v21 & 1) != 0)
      {
        v13 = v19;
        goto LABEL_18;
      }
      v12 = v19;
      v11 = v20;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    *(_QWORD *)&v16 = v12;
    *((_QWORD *)&v16 + 1) = v11;
    v17 = 1;
    v18 = 0;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), v24, v22, &v16, (uint64_t)&v19);
    v13 = v19;
    if ((v20 & 1) == 0)
    {
      if (v19)
        v6 += bswap32(v19[3]);
      goto LABEL_23;
    }
LABEL_18:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_24;
  }
LABEL_23:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
LABEL_24:
  if ((v23 & 1) != 0)
  {
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  }
  if ((v25 & 1) != 0)
  {
    v15 = v24;
    v24 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  if ((v7 & 1) != 0)
  {
    v5 = (_QWORD *)v6;
    v6 = 0;
    llvm::report_fatal_error(&v5);
  }
  result = bswap32(*(_DWORD *)(v6 + 4));
  if (*(__int16 *)(v6 + 14) != -3585)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 10240 || v4 == 2048) && (*(_BYTE *)(v6 + 12) & 0xF) == 2)
      return result & 0xFFFFFFFE;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 14) == -3329)
    return bswap32(*(_DWORD *)(v4 + 4));
  else
    return 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 12) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_10;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_10;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_10;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_10;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_10:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v8 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSection(a1, v13, v11, a3);
      if ((v12 & 1) != 0)
      {
        v7 = v11;
        v11 = 0;
        if (v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      }
    }
    if ((v14 & 1) != 0)
    {
      v10 = v13;
      v13 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::formatv_object_base **@<X0>, uint64_t *@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 12));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  if ((v8 & 1) != 0)
  {
    v3 = v7;
    v7 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)v4) >> 3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 20));
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a2[1] == 0x8000000)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = llvm::object::Binary::checkOffset((llvm::object *)v11, bswap32(a2[4]) + *(_QWORD *)&v11[0], bswap32(a2[5]), &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = *v6 + bswap32(a2[4]);
      v10 = bswap32(a2[5]);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 32));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 10) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 11) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionData(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_DWORD *)(a2 + 4) != 0x1000000)
    return 0;
  v2 = bswap32(*(_DWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 11) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = bswap32(*(_DWORD *)(a2 + 8));
  if ((v2 & 2) == 0)
    return 0;
  if ((v2 & 4) != 0)
    return 1;
  return (v2 & 1) == 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 0x8000000)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 11) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v6);
  if ((v8 & 1) != 0)
  {
    v5 = (_QWORD *)v6;
    v6 = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v5);
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    if ((v8 & 1) != 0)
    {
      result = v6;
      v6 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6)
    return 0;
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485)
    return 1;
  if (v7 < 7)
    return 0;
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149)
    return 1;
  if (v7 != 10)
    return 0;
  return *(_QWORD *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5)
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 46)) >> 16));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_rel_end(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *RelSection;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = a2[1];
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, bswap32(*((_DWORD *)RelSection + 6)), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    return v4 | ((unint64_t)(bswap32(a2[5]) / bswap32(a2[9]) + HIDWORD(v4)) << 32);
  }
  return v4;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocatedSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 28)), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  unsigned int *Rel;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = (unsigned int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(a1, a2);
  else
    Rel = (unsigned int *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  return bswap32(*Rel);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationSymbol(uint64_t a1, uint64_t a2)
{
  _QWORD *RelSection;
  _QWORD *Rel;
  unsigned int v6;

  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2);
  if (*((_DWORD *)RelSection + 1) == 150994944)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  v6 = bswap32(*((_DWORD *)Rel + 1));
  if (v6 > 0xFF)
    return bswap32(*((_DWORD *)RelSection + 6)) | ((unint64_t)(v6 >> 8) << 32);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  _QWORD *Rel;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2);
  return *((unsigned __int8 *)Rel + 7);
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;

  v4 = a1 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char **v37;
  uint64_t v39;
  char *__p;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v43);
  if ((v45 & 1) == 0 && v44)
  {
    v37 = a2;
    v3 = 0;
    v4 = v43;
    v39 = v43 + 40 * v44;
    do
    {
      if (*(_DWORD *)(v4 + 4) == 100663296)
      {
        v5 = (int *)(bswap32(*(_DWORD *)(v4 + 16)) + *(_QWORD *)(a1 + 16));
        v6 = *v5;
        if (*v5)
        {
          do
          {
            if (v6 == 285212672 || v6 == 117440512 || v6 == 385875968)
            {
              v9 = bswap32(v5[1]);
              if (v3 >= v42)
              {
                v11 = __p;
                v12 = (v3 - __p) >> 3;
                v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61)
LABEL_62:
                  abort();
                v14 = v42 - __p;
                if ((v42 - __p) >> 2 > v13)
                  v13 = v14 >> 2;
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                  v15 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v15 = v13;
                if (v15)
                {
                  v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v42, v15);
                  v11 = __p;
                  v3 = v41;
                }
                else
                {
                  v16 = 0;
                }
                v17 = &v16[8 * v12];
                *(_QWORD *)v17 = v9;
                v10 = v17 + 8;
                while (v3 != v11)
                {
                  v18 = *((_QWORD *)v3 - 1);
                  v3 -= 8;
                  *((_QWORD *)v17 - 1) = v18;
                  v17 -= 8;
                }
                __p = v17;
                v42 = &v16[8 * v15];
                if (v11)
                  operator delete(v11);
              }
              else
              {
                *(_QWORD *)v3 = v9;
                v10 = v3 + 8;
              }
              v41 = v10;
              v3 = v10;
            }
            v19 = v5[2];
            v5 += 2;
            v6 = v19;
          }
          while (v19);
        }
      }
      v4 += 40;
    }
    while (v4 != v39);
    if (v44)
    {
      v20 = 0;
      v21 = v43;
      v22 = v43 + 40 * v44;
      v23 = v37 + 2;
      do
      {
        v24 = __p;
        if (__p != v41)
        {
          v25 = bswap32(*(_DWORD *)(v21 + 12));
          while (*(_QWORD *)v24 != v25)
          {
            v24 += 8;
            if (v24 == v41)
            {
              v24 = v41;
              break;
            }
          }
        }
        if (v24 != v41)
        {
          if ((unint64_t)v20 >= *v23)
          {
            v26 = (v20 - *v37) >> 4;
            if ((unint64_t)(v26 + 1) >> 60)
              goto LABEL_62;
            v27 = *v23 - (_QWORD)*v37;
            v28 = v27 >> 3;
            if (v27 >> 3 <= (unint64_t)(v26 + 1))
              v28 = v26 + 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
              v29 = 0xFFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v37 + 2), v29);
            v32 = &v30[16 * v26];
            *(_QWORD *)v32 = v21;
            *((_QWORD *)v32 + 1) = a1;
            v34 = *v37;
            v33 = v37[1];
            v35 = v32;
            if (v33 != *v37)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
                v35 -= 16;
                v33 -= 16;
              }
              while (v33 != v34);
              v33 = *v37;
            }
            v20 = v32 + 16;
            *v37 = v35;
            v37[1] = v32 + 16;
            v37[2] = &v30[16 * v31];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = a1;
            v20 += 16;
          }
          v37[1] = v20;
        }
        v21 += 40;
      }
      while (v21 != v22);
    }
  }
  if ((v45 & 1) != 0)
  {
    v36 = v43;
    v43 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  if (__p)
    operator delete(__p);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + 40 * v2[1];
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getBytesInAddress()
{
  return 4;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  signed int v3;
  const char *result;
  signed int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  if (v2 != 1)
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
  v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v3 > 82)
  {
    if (v3 <= 223)
    {
      if (v3 > 104)
      {
        if (v3 == 105)
          return "elf32-msp430";
        if (v3 == 164)
          return "elf32-hexagon";
      }
      else
      {
        if (v3 == 83)
          return "elf32-avr";
        if (v3 == 94)
          return "elf32-xtensa";
      }
    }
    else if (v3 <= 243)
    {
      if (v3 == 224)
        return "elf32-amdgpu";
      if (v3 == 243)
        return "elf32-littleriscv";
    }
    else
    {
      switch(v3)
      {
        case 244:
          return "elf32-lanai";
        case 252:
          return "elf32-csky";
        case 258:
          return "elf32-loongarch";
      }
    }
    return "elf32-unknown";
  }
  if (v3 > 17)
  {
    if (v3 > 39)
    {
      if (v3 == 40)
        return "elf32-bigarm";
      if (v3 == 62)
        return "elf32-x86-64";
    }
    else
    {
      if (v3 == 18)
        return "elf32-sparc";
      if (v3 == 20)
        return "elf32-powerpc";
    }
    return "elf32-unknown";
  }
  result = "elf32-m68k";
  switch(v3)
  {
    case 2:
      return "elf32-sparc";
    case 3:
      result = "elf32-i386";
      break;
    case 4:
      return result;
    case 6:
      result = "elf32-iamcu";
      break;
    case 8:
      result = "elf32-mips";
      break;
    default:
      return "elf32-unknown";
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getArch(uint64_t a1)
{
  uint64_t v1;
  signed int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 82)
  {
    if (v2 <= 39)
    {
      result = 15;
      switch(v2)
      {
        case 2:
        case 18:
          return 29;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2)
              return 18;
LABEL_47:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          result = 16;
          break;
        case 20:
          return 21;
        case 21:
          return 23;
        case 22:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (v2 <= 223)
  {
    if (v2 <= 104)
    {
      if (v2 == 83)
        return 7;
      if (v2 == 94)
        return 40;
    }
    else
    {
      switch(v2)
      {
        case 105:
          return 20;
        case 164:
          return 12;
        case 183:
          return 4;
      }
    }
    return 0;
  }
  switch(v2)
  {
    case 243:
      v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2)
          return 28;
        goto LABEL_47;
      }
      return 27;
    case 244:
      return 55;
    case 245:
    case 246:
    case 248:
    case 249:
    case 250:
      return 0;
    case 247:
      return 9;
    case 251:
      return 60;
    case 252:
      return 10;
    default:
      if (v2 != 258)
        return 0;
      v5 = *(unsigned __int8 *)(v1 + 4);
      if (v5 != 1)
      {
        if (v5 == 2)
          return 14;
        goto LABEL_47;
      }
      result = 13;
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = bswap32(*(_DWORD *)(v2 + 24));
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 256;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap32(*(_DWORD *)(v4 + 8));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 12) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 13);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 12) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 8));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 16));
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationAddend(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm::formatv_object_base *v7;
  __int16 v8;
  uint64_t v9;
  unsigned int v10;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(a1, a2)+ 1) == 0x4000000)
  {
    v6 = (int)bswap32(*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(a1, a2)+ 2));
    *(_BYTE *)(a3 + 8) &= ~1u;
  }
  else
  {
    v7 = (llvm::formatv_object_base *)"Section is not SHT_RELA";
    v8 = 259;
    v10 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(&v7, &v10, &v9);
    *(_BYTE *)(a3 + 8) |= 1u;
    v6 = v9;
  }
  *(_QWORD *)a3 = v6;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = 40 * v18;
  while (*v6 != 50331760)
  {
    v6 += 10;
    v7 -= 40;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 0, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_begin(a1);
  v6 = v5;
  result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getPlatformFlags(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 36));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEType(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16)) >> 16;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEMachine(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18)) >> 16;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      v5 = (a2 - v7) / 0x28;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
LABEL_5:
    v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unsigned int *)v13[0];
    goto LABEL_5;
  }
  v10 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v10;
LABEL_8:
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v9 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v9;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int16 *)(a1 + 14);
  if (v5 != 0xFFFF)
  {
    v6 = __rev16(v5);
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v6 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
    goto LABEL_6;
  }
  v7 = a3[1];
  v9[0] = *a3;
  v9[1] = v7;
  llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>((unint64_t)(a1 - a2) >> 4, (uint64_t *)v9, (uint64_t)&v10);
  if ((v11 & 1) == 0)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    v6 = v10;
LABEL_6:
    *(_DWORD *)a4 = v6;
    return;
  }
  v8 = v10;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned int *)a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v18);
    if ((v20 & 1) != 0)
    {
      v11 = v18;
      goto LABEL_9;
    }
    v10 = v18;
    v9 = v19;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = v9;
  v16 = 1;
  v17 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1 + 7, a2, a3, &v15, (uint64_t)&v18);
  v11 = v18;
  if ((v19 & 1) != 0)
  {
LABEL_9:
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
    return;
  }
  if (v18)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = a1;
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v13;
    if ((v19 & 1) != 0)
    {
      v14 = v18;
      v18 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelSection(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRel(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRela(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 8 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 8 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = bswap32(a2[5]);
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 12 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 12 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = bswap32(a2[5]);
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,true>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 201326592)
  {
    v6 = bswap32(a2[5]);
    if (v6 % 0xC)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 / 0xC;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 12;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)bswap32(a2[9]);
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unsigned int v5;
  char *ELFRelocationTypeName;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  const char *v18;
  uint64_t v19;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a1 + 18);
  if (v5 == 2048 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 2)
  {
    ELFRelocationTypeName = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)8, a2);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, ELFRelocationTypeName, &ELFRelocationTypeName[v8]);
    v9 = (char *)llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), BYTE1(a2));
    v11 = v10;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v9, &v9[v11]);
    v12 = llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), BYTE2(a2));
    v14 = v13;
    llvm::SmallVectorImpl<char>::append(a3, 1uLL, 47);
    v15 = (char *)&v12[v14];
    v16 = a3;
    v17 = (char *)v12;
  }
  else
  {
    v18 = llvm::object::getELFRelocationTypeName((llvm::object *)__rev16(v5), a2);
    v15 = (char *)&v18[v19];
    v16 = a3;
    v17 = (char *)v18;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(v16, v17, v15);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = v1 && bswap32(*(_DWORD *)(v1 + 20)) > 0xF;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toDRI(a1, v1, bswap32(*(_DWORD *)(v1 + 20)) >> 4);
  else
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamic_symbol_begin(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v6;
  void *__p[3];
  void *v8[3];
  __int128 v9[2];

  v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = v9;
  if (*(_QWORD *)(a2 + 104))
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (v8[0] != v9)
    free(v8[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  void *v15[3];
  __int128 v16[2];
  _QWORD v17[9];
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  const void *v25[3];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(*(llvm::formatv_object_base **)a1, *(llvm::formatv_object_base **)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (v6 = v22, *(_QWORD *)&v22 = 0, v6))
  {
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    v12 = v22;
    *(_OWORD *)__p = v23;
    v23 = 0uLL;
    v8 = v24;
    v24 = 0;
    v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    v15[2] = 0;
    if (v25[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16)
      free(v15[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::initContent((uint64_t)v17, &v11), (v9 = v11) != 0))
    {
      *(_BYTE *)(a3 + 152) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      *(_BYTE *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &off_251C16F90;
    if (v20 != &v21)
      free(v20);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::initContent(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = v10 << 6;
      v6 = (unsigned int *)(v9 + 4);
      while (1)
      {
        v7 = bswap32(*v6);
        if (v7 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 120);
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 136);
        if (!*(_QWORD *)(a1 + 136))
          goto LABEL_10;
LABEL_11:
        v6 += 16;
        v5 -= 64;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 128);
      if (*(_QWORD *)(a1 + 128))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C16F90;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;

  v12 = *a2;
  v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 16;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_251C16F90;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector((_QWORD *)(a1 + 72), a3 + 16);
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_QWORD *)(a3 + 48))
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C16F90;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t *v11;
  _QWORD *v12;
  _BOOL4 v13;
  unint64_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v34);
  v7 = (_QWORD *)v34;
  if ((v35 & 1) != 0)
  {
    v34 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_87;
  }
  v8 = *(unsigned __int8 *)(v34 + 4);
  if ((v8 & 0xF0) == 0x20)
    v9 = 6;
  else
    v9 = 2;
  if (v8 < 0x10)
    v9 = 0;
  if (*(__int16 *)(v34 + 6) == -3585)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (unint64_t *)a1[16];
  if (v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(v6, v11, (uint64_t)&v31);
    v12 = v31;
    if ((v33 & 1) != 0)
      goto LABEL_33;
    v13 = v7 == v31;
  }
  else
  {
    v13 = 0;
  }
  v14 = (unint64_t *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(v6, v14, (uint64_t)&v31);
    v12 = v31;
    if ((v33 & 1) == 0)
      goto LABEL_17;
LABEL_33:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v12;
    goto LABEL_87;
  }
  v12 = 0;
LABEL_17:
  v15 = v7 == v12 || v13;
  if ((v8 & 0xF) - 3 < 2)
    v15 = 1;
  if (v15)
    v16 = v10 | 0x80;
  else
    v16 = v10;
  v17 = *(unsigned __int16 *)(*v6 + 18);
  switch(v17)
  {
    case 46848:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v31, a1, a2);
      if ((v33 & 1) != 0)
      {
        v30 = v31;
        v31 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v30);
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        if ((v33 & 1) != 0)
        {
          v19 = v31;
          v31 = 0;
          if (v19)
            (*(void (**)(_QWORD *))(*v19 + 8))(v19);
        }
        v18 = v16;
      }
      else
      {
        v18 = v16;
        if (v32 >= 2)
        {
          v18 = v10 | 0x80;
          if (*(_WORD *)v31 != 25636)
          {
            if (*(_WORD *)v31 == 30756)
              v18 = v10 | 0x80;
            else
              v18 = v16;
          }
        }
      }
LABEL_68:
      v16 = v18;
      break;
    case 10240:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v31, a1, a2);
      if ((v33 & 1) != 0)
      {
        v30 = v31;
        v31 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v30);
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
        if ((v33 & 1) != 0)
        {
          v20 = v31;
          v31 = 0;
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        }
        v18 = v16;
      }
      else
      {
        if (!v32)
          goto LABEL_65;
        v18 = v16;
        if (v32 == 1)
          goto LABEL_66;
        if (*(_WORD *)v31 == 25636)
        {
LABEL_65:
          v18 = v10 | 0x80;
        }
        else
        {
          v18 = v10 | 0x80;
          if (*(_WORD *)v31 != 29732)
          {
            if (*(_WORD *)v31 == 24868)
              v18 = v10 | 0x80;
            else
              v18 = v16;
          }
        }
      }
LABEL_66:
      if ((*((_BYTE *)v7 + 4) & 0xF) == 2)
      {
        v16 = *((_WORD *)v7 + 7) & 0x100 | v18;
        break;
      }
      goto LABEL_68;
    case 62208:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v31, a1, a2);
      if ((v33 & 1) != 0)
      {
        v21 = v31;
        v31 = 0;
        v29 = v21;
        llvm::consumeError(&v29);
        if (v29)
          (*(void (**)(_QWORD *))(*v29 + 8))(v29);
      }
      else if (!v32)
      {
        v16 = v10 | 0x80;
      }
      if ((v33 & 1) != 0)
      {
        v22 = v31;
        v31 = 0;
        if (v22)
          (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      }
      break;
  }
  if (*((_WORD *)v7 + 3))
  {
    v23 = *((unsigned __int8 *)v7 + 4);
    v24 = v23 & 0xF;
    if (v24 != 5 && *((unsigned __int16 *)v7 + 3) != 62207)
      goto LABEL_75;
  }
  else
  {
    v16 |= 1u;
    v23 = *((unsigned __int8 *)v7 + 4);
    v24 = v23 & 0xF;
    if (v24 != 5)
      goto LABEL_75;
  }
  v16 |= 0x10u;
LABEL_75:
  v25 = v23 >> 4;
  if (v25 <= 0xA && ((1 << v25) & 0x406) != 0)
  {
    v26 = *((_BYTE *)v7 + 5) & 3;
    if (v26 == 3 || (*((_BYTE *)v7 + 5) & 3) == 0)
      v16 |= 0x40u;
  }
  else
  {
    v26 = *((_BYTE *)v7 + 5) & 3;
  }
  if (v24 == 10)
    v27 = v16 | 0x20;
  else
    v27 = v16;
  if (v26 == 2)
    v27 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v27;
LABEL_87:
  if ((v35 & 1) != 0)
  {
    v28 = v34;
    v34 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    v2 = bswap64(*(_QWORD *)(v1 + 32)) > 0x17;
  else
    v2 = 0;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[16];
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI((uint64_t)a1, v1, bswap64(*(_QWORD *)(v1 + 32)) / 0x18);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if ((v33 & 1) != 0)
  {
    v10 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, a2, (uint64_t)&v30);
  v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, bswap32(*(_DWORD *)(v30 + 40)), (uint64_t)&v28);
    v8 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
LABEL_37:
      if ((v31 & 1) != 0)
      {
        v18 = v30;
        v30 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      goto LABEL_40;
    }
    *(_QWORD *)&v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_34:
      if ((v29 & 1) != 0)
      {
        v17 = v28;
        v28 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    v9 = v25;
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      if ((v32[1] & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if ((v25 & 1) != 0)
          {
            v12 = (_QWORD *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v12 = 0;
          }
          v20 = v12;
          llvm::consumeError(&v20);
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v14 = v21;
            v21 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
          if ((v25 & 1) != 0)
          {
            v15 = v24;
            *(_QWORD *)&v24 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          goto LABEL_31;
        }
        v13 = v21;
        v21 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v9 = v25;
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v9 & 1;
      if ((v9 & 1) != 0)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if ((v27 & 1) != 0)
    {
      v16 = v26[0];
      v26[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    goto LABEL_34;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v7;
LABEL_40:
  if ((v33 & 1) != 0)
  {
    v19 = v32;
    v32 = 0;
    if (v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  char v21;
  unint64_t *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v26);
  if ((v27 & 1) != 0)
  {
    v7 = v26;
    goto LABEL_10;
  }
  v6 = v26;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v24);
  v7 = v24;
  if ((v25 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  v8 = bswap32(*(unsigned __int16 *)(v24 + 6)) >> 16;
  if (v8 - 65521 < 2 || v8 == 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v13 = v22;
    v22 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) == 256)
  {
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable((_QWORD *)(a1 + 56), v10, (uint64_t)&v19);
      if ((v21 & 1) != 0)
      {
        v13 = v19;
        goto LABEL_18;
      }
      v12 = v19;
      v11 = v20;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    *(_QWORD *)&v16 = v12;
    *((_QWORD *)&v16 + 1) = v11;
    v17 = 1;
    v18 = 0;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), v24, v22, &v16, (uint64_t)&v19);
    v13 = v19;
    if ((v20 & 1) == 0)
    {
      if (v19)
        v6 += bswap64(v19[2]);
      goto LABEL_23;
    }
LABEL_18:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_24;
  }
LABEL_23:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
LABEL_24:
  if ((v23 & 1) != 0)
  {
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(unint64_t *))(*v14 + 8))(v14);
  }
  if ((v25 & 1) != 0)
  {
    v15 = v24;
    v24 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  if ((v7 & 1) != 0)
  {
    v5 = (_QWORD *)v6;
    v6 = 0;
    llvm::report_fatal_error(&v5);
  }
  result = bswap64(*(_QWORD *)(v6 + 8));
  if (*(__int16 *)(v6 + 6) != -3585)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 10240 || v4 == 2048) && (*(_BYTE *)(v6 + 4) & 0xF) == 2)
      result &= ~1uLL;
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 6) == -3329)
    return bswap64(*(_QWORD *)(v4 + 8));
  else
    return 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 4) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_10;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_10;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_10;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_10;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_10:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v8 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSection(a1, v13, v11, a3);
      if ((v12 & 1) != 0)
      {
        v7 = v11;
        v11 = 0;
        if (v7)
          (*(void (**)(unint64_t *))(*v7 + 8))(v7);
      }
    }
    if ((v14 & 1) != 0)
    {
      v10 = v13;
      v13 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 64;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::formatv_object_base **@<X0>, uint64_t *@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 16));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  if ((v8 & 1) != 0)
  {
    v3 = v7;
    v7 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return (a2 - (uint64_t)v4) >> 6;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 32));
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContents@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (*(_DWORD *)(a2 + 4) == 0x8000000)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = llvm::object::Binary::checkOffset((llvm::object *)v11, bswap64(*(_QWORD *)(a2 + 24)) + *(_QWORD *)&v11[0], bswap64(*(_QWORD *)(a2 + 32)), &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = *v6 + bswap64(*(_QWORD *)(a2 + 24));
      v10 = bswap64(*(_QWORD *)(a2 + 32));
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
    }
  }
  return result;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 48));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 14) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 15) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionData(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_DWORD *)(a2 + 4) != 0x1000000)
    return 0;
  v2 = bswap64(*(_QWORD *)(a2 + 8));
  return (v2 & 2) != 0 && (v2 & 4) == 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 15) & 3) != 0 && *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 0x8000000;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = bswap64(*(_QWORD *)(a2 + 8));
  if ((v2 & 2) == 0)
    return 0;
  if ((v2 & 4) != 0)
    return 1;
  return (v2 & 1) == 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 0x8000000)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 15) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v6);
  if ((v8 & 1) != 0)
  {
    v5 = (_QWORD *)v6;
    v6 = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v5);
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    if ((v8 & 1) != 0)
    {
      result = v6;
      v6 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6)
    return 0;
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485)
    return 1;
  if (v7 < 7)
    return 0;
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149)
    return 1;
  if (v7 != 10)
    return 0;
  return *(_QWORD *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5)
                        / (unint64_t)(bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 58)) >> 16));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_rel_end(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *RelSection;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 0x4000000 || v5 == 150994944)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, bswap32(*((_DWORD *)RelSection + 10)), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    v4 += (bswap64(*(_QWORD *)(a2 + 32)) / bswap64(*(_QWORD *)(a2 + 56))) << 32;
  }
  return v4;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocatedSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = bswap32(*(_DWORD *)(a2 + 4));
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, bswap32(*(_DWORD *)(a2 + 44)), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  unint64_t *Rel;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(a1, a2);
  return bswap64(*Rel);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  _QWORD *RelSection;
  _QWORD *Rel;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection((uint64_t)a1, a2);
  if (*((_DWORD *)RelSection + 1) == 150994944)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel((uint64_t)a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela((uint64_t)a1, a2);
  v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 2048 && *(_BYTE *)(v6 + 4) == 2)
  {
    v7 = bswap64(Rel[1]);
    if (*(_BYTE *)(v6 + 5) == 1)
      v8 = v7 << 32;
    else
      v8 = v7;
  }
  else
  {
    v8 = bswap64(Rel[1]);
  }
  if (HIDWORD(v8))
    return v8 & 0xFFFFFFFF00000000 | bswap32(*((_DWORD *)RelSection + 10));
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  _QWORD *Rel;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(a1, a2)+ 1) == 150994944)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(a1, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 2048 && *(_BYTE *)(v5 + 4) == 2)
  {
    v6 = bswap64(Rel[1]);
    v7 = *(_BYTE *)(v5 + 5) == 1;
    v8 = (v6 >> 24) & 0xFF0000 | HIBYTE(v6) | (v6 >> 8) & 0xFF000000 | (v6 >> 40) & 0xFF00;
    if (!v7)
      LODWORD(v8) = v6;
  }
  else
  {
    LODWORD(v8) = bswap64(Rel[1]);
  }
  return v8;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;

  v4 = a1 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char **v37;
  uint64_t v39;
  unint64_t *__p;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v43);
  if ((v45 & 1) == 0 && v44)
  {
    v37 = a2;
    v3 = 0;
    v4 = v43;
    v39 = v43 + (v44 << 6);
    do
    {
      if (*(_DWORD *)(v4 + 4) == 100663296)
      {
        v5 = (uint64_t *)(bswap64(*(_QWORD *)(v4 + 24)) + *(_QWORD *)(a1 + 16));
        v6 = *v5;
        if (*v5)
        {
          do
          {
            if (v6 == 0x1100000000000000 || v6 == 0x700000000000000 || v6 == 0x1700000000000000)
            {
              v9 = bswap64(v5[1]);
              if (v3 >= v42)
              {
                v11 = __p;
                v12 = v3 - __p;
                v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61)
LABEL_62:
                  abort();
                v14 = (char *)v42 - (char *)__p;
                if (((char *)v42 - (char *)__p) >> 2 > v13)
                  v13 = v14 >> 2;
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                  v15 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v15 = v13;
                if (v15)
                {
                  v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v42, v15);
                  v11 = __p;
                  v3 = v41;
                }
                else
                {
                  v16 = 0;
                }
                v17 = (unint64_t *)&v16[8 * v12];
                *v17 = v9;
                v10 = v17 + 1;
                while (v3 != v11)
                {
                  v18 = *--v3;
                  *--v17 = v18;
                }
                __p = v17;
                v42 = (unint64_t *)&v16[8 * v15];
                if (v11)
                  operator delete(v11);
              }
              else
              {
                *v3 = v9;
                v10 = v3 + 1;
              }
              v41 = v10;
              v3 = v10;
            }
            v19 = v5[2];
            v5 += 2;
            v6 = v19;
          }
          while (v19);
        }
      }
      v4 += 64;
    }
    while (v4 != v39);
    if (v44)
    {
      v20 = 0;
      v21 = v43;
      v22 = v43 + (v44 << 6);
      v23 = v37 + 2;
      do
      {
        v24 = __p;
        if (__p != v41)
        {
          v25 = bswap64(*(_QWORD *)(v21 + 16));
          while (*v24 != v25)
          {
            if (++v24 == v41)
            {
              v24 = v41;
              break;
            }
          }
        }
        if (v24 != v41)
        {
          if ((unint64_t)v20 >= *v23)
          {
            v26 = (v20 - *v37) >> 4;
            if ((unint64_t)(v26 + 1) >> 60)
              goto LABEL_62;
            v27 = *v23 - (_QWORD)*v37;
            v28 = v27 >> 3;
            if (v27 >> 3 <= (unint64_t)(v26 + 1))
              v28 = v26 + 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
              v29 = 0xFFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v37 + 2), v29);
            v32 = &v30[16 * v26];
            *(_QWORD *)v32 = v21;
            *((_QWORD *)v32 + 1) = a1;
            v34 = *v37;
            v33 = v37[1];
            v35 = v32;
            if (v33 != *v37)
            {
              do
              {
                *((_OWORD *)v35 - 1) = *((_OWORD *)v33 - 1);
                v35 -= 16;
                v33 -= 16;
              }
              while (v33 != v34);
              v33 = *v37;
            }
            v20 = v32 + 16;
            *v37 = v35;
            v37[1] = v32 + 16;
            v37[2] = &v30[16 * v31];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = a1;
            v20 += 16;
          }
          v37[1] = v20;
        }
        v21 += 64;
      }
      while (v21 != v22);
    }
  }
  if ((v45 & 1) != 0)
  {
    v36 = v43;
    v43 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  if (__p)
    operator delete(__p);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + (v2[1] << 6);
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getBytesInAddress()
{
  return 8;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  signed int v3;
  const char *result;
  signed int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 == 2)
  {
    v5 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
    if (v5 > 182)
    {
      if (v5 > 246)
      {
        switch(v5)
        {
          case 247:
            return "elf64-bpf";
          case 251:
            return "elf64-ve";
          case 258:
            return "elf64-loongarch";
        }
      }
      else
      {
        switch(v5)
        {
          case 183:
            return "elf64-bigaarch64";
          case 224:
            return "elf64-amdgpu";
          case 243:
            return "elf64-littleriscv";
        }
      }
    }
    else if (v5 > 21)
    {
      switch(v5)
      {
        case 22:
          return "elf64-s390";
        case 43:
          return "elf64-sparc";
        case 62:
          return "elf64-x86-64";
      }
    }
    else
    {
      switch(v5)
      {
        case 3:
          return "elf64-i386";
        case 8:
          return "elf64-mips";
        case 21:
          return "elf64-powerpc";
      }
    }
    return "elf64-unknown";
  }
  if (v2 != 1)
    llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
  v3 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v3 > 82)
  {
    if (v3 <= 223)
    {
      if (v3 > 104)
      {
        if (v3 == 105)
          return "elf32-msp430";
        if (v3 == 164)
          return "elf32-hexagon";
      }
      else
      {
        if (v3 == 83)
          return "elf32-avr";
        if (v3 == 94)
          return "elf32-xtensa";
      }
    }
    else if (v3 <= 243)
    {
      if (v3 == 224)
        return "elf32-amdgpu";
      if (v3 == 243)
        return "elf32-littleriscv";
    }
    else
    {
      switch(v3)
      {
        case 244:
          return "elf32-lanai";
        case 252:
          return "elf32-csky";
        case 258:
          return "elf32-loongarch";
      }
    }
    return "elf32-unknown";
  }
  if (v3 > 17)
  {
    if (v3 > 39)
    {
      if (v3 == 40)
        return "elf32-bigarm";
      if (v3 == 62)
        return "elf32-x86-64";
    }
    else
    {
      if (v3 == 18)
        return "elf32-sparc";
      if (v3 == 20)
        return "elf32-powerpc";
    }
    return "elf32-unknown";
  }
  result = "elf32-m68k";
  switch(v3)
  {
    case 2:
      return "elf32-sparc";
    case 3:
      result = "elf32-i386";
      break;
    case 4:
      return result;
    case 6:
      result = "elf32-iamcu";
      break;
    case 8:
      result = "elf32-mips";
      break;
    default:
      return "elf32-unknown";
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getArch(uint64_t a1)
{
  uint64_t v1;
  signed int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = bswap32(*(unsigned __int16 *)(v1 + 18)) >> 16;
  if (v2 <= 82)
  {
    if (v2 <= 39)
    {
      result = 15;
      switch(v2)
      {
        case 2:
        case 18:
          return 29;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2)
              return 18;
LABEL_47:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          result = 16;
          break;
        case 20:
          return 21;
        case 21:
          return 23;
        case 22:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (v2 <= 223)
  {
    if (v2 <= 104)
    {
      if (v2 == 83)
        return 7;
      if (v2 == 94)
        return 40;
    }
    else
    {
      switch(v2)
      {
        case 105:
          return 20;
        case 164:
          return 12;
        case 183:
          return 4;
      }
    }
    return 0;
  }
  switch(v2)
  {
    case 243:
      v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2)
          return 28;
        goto LABEL_47;
      }
      return 27;
    case 244:
      return 55;
    case 245:
    case 246:
    case 248:
    case 249:
    case 250:
      return 0;
    case 247:
      return 9;
    case 251:
      return 60;
    case 252:
      return 10;
    default:
      if (v2 != 258)
        return 0;
      v5 = *(unsigned __int8 *)(v1 + 4);
      if (v5 != 1)
      {
        if (v5 == 2)
          return 14;
        goto LABEL_47;
      }
      result = 13;
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = bswap64(*(_QWORD *)(v2 + 24));
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 256;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return bswap64(v4[2]);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 4) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 8));
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return bswap64(*(_QWORD *)(a2 + 24));
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelocationAddend(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::formatv_object_base *v7;
  __int16 v8;
  unint64_t v9;
  unsigned int v10;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(a1, a2)+ 1) == 0x4000000)
  {
    v6 = bswap64(llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(a1, a2)[2]);
    *(_BYTE *)(a3 + 8) &= ~1u;
  }
  else
  {
    v7 = (llvm::formatv_object_base *)"Section is not SHT_RELA";
    v8 = 259;
    v10 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(&v7, &v10, (uint64_t *)&v9);
    *(_BYTE *)(a3 + 8) |= 1u;
    v6 = v9;
  }
  *(_QWORD *)a3 = v6;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = v18 << 6;
  while (*v6 != 50331760)
  {
    v6 += 16;
    v7 -= 64;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 0, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_begin(a1);
  v6 = v5;
  result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getPlatformFlags(uint64_t a1)
{
  return bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 48));
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEType(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16)) >> 16;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEMachine(uint64_t a1)
{
  return bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18)) >> 16;
}

_QWORD *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::__vallocate[abi:nn180100](a1, v5 >> 6);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a2 << 6);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unint64_t *))(*v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  llvm::formatv_object_base *v8[4];
  __int16 v9;
  unsigned int v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v5 = v11[0];
    v6 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_5;
  }
  if (v11[1] > (unint64_t)a2)
  {
    v5 = v11[0] + ((unint64_t)a2 << 6);
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v5;
    return;
  }
  v8[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v8[2] = (llvm::formatv_object_base *)a2;
  v9 = 2051;
  v10 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v8, &v10, (uint64_t *)a3);
  *(_BYTE *)(a3 + 8) |= 1u;
  if ((v12 & 1) != 0)
  {
    v7 = v11[0];
    v11[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 24 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 24 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = bswap64(a2[4]);
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  unsigned int v23[4];
  unint64_t *v24;
  __int16 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  llvm::formatv_object_base *v29[2];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  v5 = bswap64(v4);
  v33 = v5;
  if (v4)
  {
    v6 = *(unsigned __int16 *)(v3 + 58);
    if (v6 == 0x4000)
    {
      v7 = a1[1];
      if (v5 > 0xFFFFFFFFFFFFFFBFLL || v5 + 64 > v7)
      {
        v29[0] = (llvm::formatv_object_base *)"section header table goes past the end of the file: e_shoff = 0x";
        v30 = (const char *)&v33;
        v31 = 3587;
        v23[0] = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v23, &v28);
        *(_BYTE *)(a2 + 16) |= 1u;
        v9 = v28;
      }
      else
      {
        v12 = v3 + v5;
        v13 = *(unsigned __int16 *)(v3 + 60);
        v14 = __rev16(v13);
        v27 = v14;
        if (v13 || (v14 = bswap64(*(_QWORD *)(v12 + 32)), v27 = v14, !(v14 >> 58)))
        {
          v15 = __CFADD__(v5, v14 << 6);
          v16 = v5 + (v14 << 6);
          if (v15)
          {
            v18[0] = "invalid section header table offset (e_shoff = 0x";
            v18[2] = &v33;
            v19 = 3587;
            v20[0] = v18;
            v20[2] = ") or invalid number of sections specified in the first section header's sh_size field (0x";
            v21 = 770;
            *(_QWORD *)v23 = v20;
            v24 = &v27;
            v25 = 3586;
            v29[0] = (llvm::formatv_object_base *)v23;
            v30 = ")";
            v31 = 770;
            v34 = 3;
            llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, &v34, &v22);
            *(_BYTE *)(a2 + 16) |= 1u;
            v9 = v22;
          }
          else
          {
            if (v16 <= v7)
            {
              *(_BYTE *)(a2 + 16) &= ~1u;
              *(_QWORD *)a2 = v12;
              *(_QWORD *)(a2 + 8) = v14;
              return;
            }
            v29[0] = (llvm::formatv_object_base *)"section table goes past the end of file";
            v31 = 259;
            v23[0] = 3;
            llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v23, &v17);
            *(_BYTE *)(a2 + 16) |= 1u;
            v9 = v17;
          }
        }
        else
        {
          *(_QWORD *)v23 = "invalid number of sections specified in the NULL section's sh_size field (";
          v24 = &v27;
          v25 = 3075;
          v29[0] = (llvm::formatv_object_base *)v23;
          v30 = ")";
          v31 = 770;
          LODWORD(v20[0]) = 3;
          llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, (unsigned int *)v20, &v26);
          *(_BYTE *)(a2 + 16) |= 1u;
          v9 = v26;
        }
      }
    }
    else
    {
      v29[0] = (llvm::formatv_object_base *)"invalid e_shentsize in ELF header: ";
      v30 = (const char *)__rev16(v6);
      v31 = 2307;
      v23[0] = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v23, &v32);
      *(_BYTE *)(a2 + 16) |= 1u;
      v9 = v32;
    }
    *(_QWORD *)a2 = v9;
  }
  else
  {
    v10 = a1[2];
    v11 = a1[3];
    if (v10 == v11)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = (v11 - v10) >> 6;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  unint64_t *v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p[2];
  unint64_t *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[2];
  std::string *v43;
  __int16 v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  llvm::formatv_object_base *v48[2];
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;

  if (a2[7] == 0x1800000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v40 = v7;
    v41 = v6;
    if (v7 % 0x18)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v35);
      v8 = std::string::insert(&v35, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v29, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v40;
      v38 = 3076;
      v42[0] = __p;
      v43 = (std::string *)") which is not a multiple of its sh_entsize (";
      v44 = 770;
      v28.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v45[0] = v42;
      v46 = &v28;
      v47 = 3074;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)")";
      v50 = 770;
      LODWORD(v27.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v25 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v7 / 0x18;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v27);
        v21 = std::string::insert(&v27, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v28, " has a sh_offset (0x");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v30 = 3588;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v32 = 770;
        __p[0] = &v31;
        v37 = &v40;
        v38 = 3586;
        v42[0] = __p;
        v43 = (std::string *)") that is greater than the file size (0x";
        v44 = 770;
        v26 = a1[1];
        v45[0] = v42;
        v46 = (std::string *)&v26;
        v47 = 3586;
        v48[0] = (llvm::formatv_object_base *)v45;
        v49 = (std::string *)")";
        v50 = 770;
        v52 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, &v52, &v33);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v33;
        v33 = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v27.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v35);
      v17 = std::string::insert(&v35, 0, "section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v29, " has a sh_offset (0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v41;
      v38 = 3588;
      v42[0] = __p;
      v43 = (std::string *)") + sh_size (0x";
      v44 = 770;
      v45[0] = v42;
      v46 = (std::string *)&v40;
      v47 = 3586;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)") that cannot be represented";
      v50 = 770;
      LODWORD(v28.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v28, &v34);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v34;
      v34 = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v29);
    v12 = std::string::insert(&v29, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, " has invalid sh_entsize: expected ");
    v15 = (unint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 24;
    v42[0] = __p;
    v43 = &v35;
    v44 = 2564;
    v45[0] = v42;
    v46 = (std::string *)", but got ";
    v47 = 770;
    v28.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v48[0] = (llvm::formatv_object_base *)v45;
    v49 = &v28;
    v50 = 3074;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v51);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v51;
    v51 = 0;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v16);
    }
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string v11;
  std::string v12;
  std::string::size_type v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v12);
    if (v12.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, (int64_t)(a2 - v13[0]) >> 6);
    v5 = std::string::insert(&v11, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v12, "]");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  if ((v14 & 1) != 0)
  {
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10 + 8))(v10);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      v5 = (a2 - v7) >> 6;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  llvm::formatv_object_base *ELFSectionTypeName;
  llvm::formatv_object_base *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  llvm::formatv_object_base *v33[4];
  __int16 v34;
  unsigned int v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4) != 50331648)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v31);
    v10 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v32, ": expected SHT_STRTAB, but got ");
    v13 = v12->__r_.__value_.__r.__words[2];
    v36 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = (llvm::formatv_object_base *)llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
    v33[0] = (llvm::formatv_object_base *)&v36;
    v33[2] = ELFSectionTypeName;
    v33[3] = v15;
    v34 = 1284;
    a3(&v29, a4, v33);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v16 = v29.__r_.__value_.__r.__words[0];
    if (v29.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v16;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v36);
  v17 = v36;
  if ((v37 & 1) != 0)
  {
    *(_QWORD *)&v36 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
  }
  else
  {
    v18 = *((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v29);
      v23 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v31, " is empty");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v30);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v30;
      v30 = 0;
      goto LABEL_16;
    }
    if (*(_BYTE *)(*((_QWORD *)&v36 + 1) + v36 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v31, " is non-null terminated");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
LABEL_16:
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
  }
LABEL_23:
  if ((v37 & 1) != 0)
  {
    v27 = v36;
    *(_QWORD *)&v36 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int16 v21;
  void *__p[2];
  const char *v23;
  __int16 v24;
  uint64_t v25;
  std::string v26;
  _QWORD v27[2];
  unint64_t *v28;
  __int16 v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;
  _QWORD v33[2];
  unint64_t *v34;
  __int16 v35;
  llvm::formatv_object_base *v36[2];
  const char *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;

  v5 = bswap64(*(_QWORD *)(a2 + 24));
  v6 = bswap64(*(_QWORD *)(a2 + 32));
  v40 = v6;
  v41 = v5;
  if (__CFADD__(v5, v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v26);
    v7 = std::string::insert(&v26, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v20, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v23 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v27[0] = __p;
    v28 = &v41;
    v29 = 3588;
    v30[0] = v27;
    v31 = ") + sh_size (0x";
    v32 = 770;
    v33[0] = v30;
    v34 = &v40;
    v35 = 3586;
    v36[0] = (llvm::formatv_object_base *)v33;
    v37 = ") that cannot be represented";
    v38 = 770;
    LODWORD(v19.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v36, (unsigned int *)&v19, &v39);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v39;
    v39 = 0;
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v26.__r_.__value_.__r.__words[0];
LABEL_16:
      operator delete(v11);
    }
  }
  else if (v6 + v5 <= a1[1])
  {
    v16 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, a2, &v18);
    v12 = std::string::insert(&v18, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v19, " has a sh_offset (0x");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v20.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
    v21 = 3588;
    __p[0] = &v20;
    v23 = ") + sh_size (0x";
    v24 = 770;
    v27[0] = __p;
    v28 = &v40;
    v29 = 3586;
    v30[0] = v27;
    v31 = ") that is greater than the file size (0x";
    v32 = 770;
    v17 = a1[1];
    v33[0] = v30;
    v34 = (unint64_t *)&v17;
    v35 = 3586;
    v36[0] = (llvm::formatv_object_base *)v33;
    v37 = ")";
    v38 = 770;
    v42 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v36, &v42, &v25);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    v25 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v18.__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
LABEL_5:
    v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (unint64_t *)v13[0];
    goto LABEL_5;
  }
  v10 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v10;
LABEL_8:
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24[4];
  const char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  llvm::formatv_object_base *v29[2];
  unint64_t *v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>(a1, (unint64_t *)a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
LABEL_11:
    *(_QWORD *)a5 = v10;
    goto LABEL_14;
  }
  v11 = bswap32(*(_DWORD *)(a2 + 40));
  if (a4 > v11)
  {
    v12 = a3 + (v11 << 6);
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 != 0x2000000 && v13 != 184549376)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v13));
      v27 = 1283;
      *(_QWORD *)v24 = "SHT_SYMTAB_SHNDX section is linked with ";
      v25 = ELFSectionTypeName;
      v26 = v17;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v31 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, (unsigned int *)v20, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
      goto LABEL_14;
    }
    v15 = v34;
    v23 = bswap64(*(_QWORD *)(v12 + 32)) / 0x18;
    if (v34 == v23)
    {
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)(a5 + 8) = v15;
    }
    else
    {
      v19 = v34;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      v20[2] = &v19;
      v21 = 2563;
      *(_QWORD *)v24 = v20;
      v25 = " entries, but the symbol table associated has ";
      v27 = 770;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = &v23;
      v31 = 3074;
      v32 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, &v32, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      v10 = v22;
      v22 = 0;
    }
    goto LABEL_11;
  }
  v29[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v30 = (unint64_t *)v11;
  v31 = 2051;
  v24[0] = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v24, (uint64_t *)a5);
  *(_BYTE *)(a5 + 16) |= 1u;
LABEL_14:
  if ((v35 & 1) != 0)
  {
    v18 = v33;
    v33 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  unint64_t *v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p[2];
  unint64_t *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[2];
  std::string *v43;
  __int16 v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  llvm::formatv_object_base *v48[2];
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;

  if (a2[7] == 0x400000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v40 = v7;
    v41 = v6;
    if ((v7 & 3) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v35);
      v8 = std::string::insert(&v35, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v29, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v40;
      v38 = 3076;
      v42[0] = __p;
      v43 = (std::string *)") which is not a multiple of its sh_entsize (";
      v44 = 770;
      v28.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v45[0] = v42;
      v46 = &v28;
      v47 = 3074;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)")";
      v50 = 770;
      LODWORD(v27.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v25 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v7 >> 2;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v27);
        v21 = std::string::insert(&v27, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v28, " has a sh_offset (0x");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v30 = 3588;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v32 = 770;
        __p[0] = &v31;
        v37 = &v40;
        v38 = 3586;
        v42[0] = __p;
        v43 = (std::string *)") that is greater than the file size (0x";
        v44 = 770;
        v26 = a1[1];
        v45[0] = v42;
        v46 = (std::string *)&v26;
        v47 = 3586;
        v48[0] = (llvm::formatv_object_base *)v45;
        v49 = (std::string *)")";
        v50 = 770;
        v52 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, &v52, &v33);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v33;
        v33 = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v27.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v35);
      v17 = std::string::insert(&v35, 0, "section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v29, " has a sh_offset (0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v41;
      v38 = 3588;
      v42[0] = __p;
      v43 = (std::string *)") + sh_size (0x";
      v44 = 770;
      v45[0] = v42;
      v46 = (std::string *)&v40;
      v47 = 3586;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)") that cannot be represented";
      v50 = 770;
      LODWORD(v28.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v28, &v34);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v34;
      v34 = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v29);
    v12 = std::string::insert(&v29, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, " has invalid sh_entsize: expected ");
    v15 = (unint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 4;
    v42[0] = __p;
    v43 = &v35;
    v44 = 2564;
    v45[0] = v42;
    v46 = (std::string *)", but got ";
    v47 = 770;
    v28.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v48[0] = (llvm::formatv_object_base *)v45;
    v49 = &v28;
    v50 = 3074;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v51);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v51;
    v51 = 0;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v16);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v9 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v9;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int16 *)(a1 + 6);
  if (v5 != 0xFFFF)
  {
    v6 = __rev16(v5);
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v6 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
    goto LABEL_6;
  }
  v7 = a3[1];
  v9[0] = *a3;
  v9[1] = v7;
  llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>(-1431655765 * ((unint64_t)(a1 - a2) >> 3), (uint64_t *)v9, (uint64_t)&v10);
  if ((v11 & 1) == 0)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    v6 = v10;
LABEL_6:
    *(_DWORD *)a4 = v6;
    return;
  }
  v8 = v10;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v18);
    if ((v20 & 1) != 0)
    {
      v11 = v18;
      goto LABEL_9;
    }
    v10 = v18;
    v9 = v19;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = v9;
  v16 = 1;
  v17 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1 + 7, a2, a3, &v15, (uint64_t)&v18);
  v11 = v18;
  if ((v19 & 1) != 0)
  {
LABEL_9:
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
    return;
  }
  if (v18)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = a1;
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v13;
    if ((v19 & 1) != 0)
    {
      v14 = v18;
      v18 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v11 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  llvm::formatv_object_base *v14[4];
  __int16 v15;
  uint64_t v16;
  unsigned int v17;

  v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 != 0xFFFF)
  {
    v8 = __rev16(v7);
    if (v8)
    {
LABEL_3:
      if (a3 > v8)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getStringTable(a1, a2 + ((unint64_t)v8 << 6), a4, a5, a6);
        return;
      }
      v11[0] = "section header string table index ";
      v11[2] = v8;
      v12 = 2051;
      v14[0] = (llvm::formatv_object_base *)v11;
      v14[2] = (llvm::formatv_object_base *)" does not exist";
      v15 = 770;
      v17 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v14, &v17, &v13);
      *(_BYTE *)(a6 + 16) |= 1u;
      v10 = v13;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v9 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v9;
    return;
  }
  if (a3)
  {
    v8 = bswap32(*(_DWORD *)(a2 + 40));
    if (v8)
      goto LABEL_3;
    goto LABEL_7;
  }
  v14[0] = (llvm::formatv_object_base *)"e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v15 = 259;
  LODWORD(v11[0]) = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v14, (unsigned int *)v11, &v16);
  *(_BYTE *)(a6 + 16) |= 1u;
  v10 = v16;
LABEL_10:
  *(_QWORD *)a6 = v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;
  _QWORD v18[4];
  __int16 v19;
  llvm::formatv_object_base *v20[4];
  __int16 v21;
  uint64_t v22;
  unsigned int v23;

  if (*a2)
  {
    v6 = bswap32(*a2);
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v14);
      v9 = std::string::insert(&v14, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v15, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = v6;
      v18[0] = __p;
      v18[2] = &v13;
      v19 = 3588;
      v20[0] = (llvm::formatv_object_base *)v18;
      v20[2] = (llvm::formatv_object_base *)") offset which goes past the end of the section name string table";
      v21 = 770;
      v23 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v20, &v23, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v22;
      v22 = 0;
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRelSection(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRel(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getRela(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(unint64_t *))(*v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 16 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = bswap64(a2[4]);
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>,false>>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  unint64_t *v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p[2];
  unint64_t *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[2];
  std::string *v43;
  __int16 v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  llvm::formatv_object_base *v48[2];
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;

  if (a2[7] == 0x1000000000000000)
  {
    v6 = bswap64(a2[3]);
    v7 = bswap64(a2[4]);
    v40 = v7;
    v41 = v6;
    if ((v7 & 0xF) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v35);
      v8 = std::string::insert(&v35, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v29, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v40;
      v38 = 3076;
      v42[0] = __p;
      v43 = (std::string *)") which is not a multiple of its sh_entsize (";
      v44 = 770;
      v28.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
      v45[0] = v42;
      v46 = &v28;
      v47 = 3074;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)")";
      v50 = 770;
      LODWORD(v27.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v25 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v7 >> 4;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v27);
        v21 = std::string::insert(&v27, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v28, " has a sh_offset (0x");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v30 = 3588;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v32 = 770;
        __p[0] = &v31;
        v37 = &v40;
        v38 = 3586;
        v42[0] = __p;
        v43 = (std::string *)") that is greater than the file size (0x";
        v44 = 770;
        v26 = a1[1];
        v45[0] = v42;
        v46 = (std::string *)&v26;
        v47 = 3586;
        v48[0] = (llvm::formatv_object_base *)v45;
        v49 = (std::string *)")";
        v50 = 770;
        v52 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, &v52, &v33);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v33;
        v33 = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v27.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v35);
      v17 = std::string::insert(&v35, 0, "section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v29, " has a sh_offset (0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v41;
      v38 = 3588;
      v42[0] = __p;
      v43 = (std::string *)") + sh_size (0x";
      v44 = 770;
      v45[0] = v42;
      v46 = (std::string *)&v40;
      v47 = 3586;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)") that cannot be represented";
      v50 = 770;
      LODWORD(v28.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v28, &v34);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v34;
      v34 = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,true>>(a1, (uint64_t)a2, &v29);
    v12 = std::string::insert(&v29, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, " has invalid sh_entsize: expected ");
    v15 = (unint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 16;
    v42[0] = __p;
    v43 = &v35;
    v44 = 2564;
    v45[0] = v42;
    v46 = (std::string *)", but got ";
    v47 = 770;
    v28.__r_.__value_.__r.__words[0] = bswap64(a2[7]);
    v48[0] = (llvm::formatv_object_base *)v45;
    v49 = &v28;
    v50 = 3074;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v51);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v51;
    v51 = 0;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v16);
    }
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = v1 && bswap64(*(_QWORD *)(v1 + 32)) > 0x17;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::toDRI(a1, v1, bswap64(*(_QWORD *)(v1 + 32)) / 0x18);
  else
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::dynamic_symbol_begin(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v6;
  void *__p[3];
  void *v8[3];
  __int128 v9[2];

  v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = v9;
  if (*(_QWORD *)(a2 + 104))
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (v8[0] != v9)
    free(v8[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  void *v15[3];
  __int128 v16[2];
  _QWORD v17[9];
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  const void *v25[3];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(*(llvm::formatv_object_base **)a1, *(llvm::formatv_object_base **)(a1 + 8), (uint64_t)&v22);
  if ((v26 & 1) != 0 && (v6 = v22, *(_QWORD *)&v22 = 0, v6))
  {
    *(_BYTE *)(a3 + 152) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    v7 = *(_OWORD *)(a1 + 16);
    v16[0] = *(_OWORD *)a1;
    v16[1] = v7;
    v12 = v22;
    *(_OWORD *)__p = v23;
    v23 = 0uLL;
    v8 = v24;
    v24 = 0;
    v14 = v8;
    v15[0] = v16;
    v15[1] = 0;
    v15[2] = 0;
    if (v25[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v15, v25);
    llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile((uint64_t)v17, v16, (uint64_t)&v12, 0, 0, 0);
    if (v15[0] != v16)
      free(v15[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (a2
      && (llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::initContent((uint64_t)v17, &v11), (v9 = v11) != 0))
    {
      *(_BYTE *)(a3 + 152) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      *(_BYTE *)(a3 + 152) &= ~1u;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(a3, (uint64_t)v17);
    }
    v17[0] = &off_251C16D58;
    if (v20 != &v21)
      free(v20);
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
  }
  return llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected((uint64_t *)&v22);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::initContent(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v9);
  v4 = v9;
  if ((v11 & 1) == 0)
  {
    if (v10)
    {
      v5 = v10 << 6;
      v6 = (int *)(v9 + 4);
      while (1)
      {
        v7 = *v6;
        if (*v6 == 2)
          break;
        if (v7 != 18)
        {
          if (v7 != 11)
            goto LABEL_11;
          v8 = (_QWORD *)(a1 + 120);
          if (*(_QWORD *)(a1 + 120))
            goto LABEL_11;
LABEL_10:
          *v8 = v6 - 1;
          goto LABEL_11;
        }
        v8 = (_QWORD *)(a1 + 136);
        if (!*(_QWORD *)(a1 + 136))
          goto LABEL_10;
LABEL_11:
        v6 += 16;
        v5 -= 64;
        if (!v5)
          goto LABEL_15;
      }
      v8 = (_QWORD *)(a1 + 128);
      if (*(_QWORD *)(a1 + 128))
        goto LABEL_11;
      goto LABEL_10;
    }
LABEL_15:
    v4 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *a2 = v4;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C16D58;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;

  v12 = *a2;
  v11 = a2[1];
  *(_DWORD *)(a1 + 8) = 15;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_251C16D58;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector((_QWORD *)(a1 + 72), a3 + 16);
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (*(_QWORD *)(a3 + 48))
    llvm::SmallVectorImpl<char>::operator=(a1 + 96, a3 + 40);
  *(_QWORD *)(a1 + 120) = a4;
  *(_QWORD *)(a1 + 128) = a5;
  *(_QWORD *)(a1 + 136) = a6;
  return a1;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFObjectFile(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_251C16D58;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 15)
    free(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolFlags(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v35);
  v7 = (_QWORD *)v35;
  if ((v36 & 1) != 0)
  {
    v35 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    goto LABEL_88;
  }
  v8 = *(unsigned __int8 *)(v35 + 4);
  if ((v8 & 0xF0) == 0x20)
    v9 = 6;
  else
    v9 = 2;
  if (v8 < 0x10)
    v9 = 0;
  if (*(__int16 *)(v35 + 6) == -15)
    v10 = v9 | 8;
  else
    v10 = v9;
  v11 = (_QWORD *)a1[16];
  if (v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(v6, v11, (uint64_t)&v32);
    v12 = v32;
    if ((v34 & 1) != 0)
      goto LABEL_33;
    v13 = v7 == v32;
  }
  else
  {
    v13 = 0;
  }
  v14 = (_QWORD *)a1[15];
  if (v14)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(v6, v14, (uint64_t)&v32);
    v12 = v32;
    if ((v34 & 1) == 0)
      goto LABEL_17;
LABEL_33:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v12;
    goto LABEL_88;
  }
  v12 = 0;
LABEL_17:
  v15 = v7 == v12 || v13;
  if ((v8 & 0xF) - 3 < 2)
    v15 = 1;
  if (v15)
    v16 = v10 | 0x80;
  else
    v16 = v10;
  v17 = *(unsigned __int16 *)(*v6 + 18);
  switch(v17)
  {
    case 183:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v32, a1, a2);
      if ((v34 & 1) != 0)
      {
        v31 = v32;
        v32 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v31);
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        if ((v34 & 1) != 0)
        {
          v20 = v32;
          v32 = 0;
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
        }
        v18 = v16;
      }
      else
      {
        v18 = v16;
        if (v33 >= 2)
        {
          v18 = v10 | 0x80;
          if (*(_WORD *)v32 != 25636)
          {
            if (*(_WORD *)v32 == 30756)
              v18 = v10 | 0x80;
            else
              v18 = v16;
          }
        }
      }
      v16 = v18;
      break;
    case 40:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v32, a1, a2);
      if ((v34 & 1) != 0)
      {
        v31 = v32;
        v32 = 0;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v31);
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        if ((v34 & 1) != 0)
        {
          v21 = v32;
          v32 = 0;
          if (v21)
            (*(void (**)(_QWORD *))(*v21 + 8))(v21);
        }
        v19 = v16;
        goto LABEL_67;
      }
      if (v33)
      {
        v19 = v16;
        if (v33 == 1)
        {
LABEL_67:
          if ((*((_BYTE *)v7 + 4) & 0xF) == 2)
            v19 = v19 & 0xFFFFFEFF | ((v7[1] & 1) << 8);
          v16 = v19;
          break;
        }
        if (*(_WORD *)v32 != 25636)
        {
          v19 = v10 | 0x80;
          if (*(_WORD *)v32 != 29732)
          {
            if (*(_WORD *)v32 == 24868)
              v19 = v10 | 0x80;
            else
              v19 = v16;
          }
          goto LABEL_67;
        }
      }
      v19 = v10 | 0x80;
      goto LABEL_67;
    case 243:
      (*(void (**)(_QWORD **__return_ptr, _QWORD *, uint64_t))(*a1 + 80))(&v32, a1, a2);
      if ((v34 & 1) != 0)
      {
        v22 = v32;
        v32 = 0;
        v30 = v22;
        llvm::consumeError(&v30);
        if (v30)
          (*(void (**)(_QWORD *))(*v30 + 8))(v30);
      }
      else if (!v33)
      {
        v16 = v10 | 0x80;
      }
      if ((v34 & 1) != 0)
      {
        v23 = v32;
        v32 = 0;
        if (v23)
          (*(void (**)(_QWORD *))(*v23 + 8))(v23);
      }
      break;
  }
  if (*((_WORD *)v7 + 3))
  {
    v24 = *((unsigned __int8 *)v7 + 4);
    v25 = v24 & 0xF;
    if (v25 != 5 && *((unsigned __int16 *)v7 + 3) != 65522)
      goto LABEL_76;
  }
  else
  {
    v16 |= 1u;
    v24 = *((unsigned __int8 *)v7 + 4);
    v25 = v24 & 0xF;
    if (v25 != 5)
      goto LABEL_76;
  }
  v16 |= 0x10u;
LABEL_76:
  v26 = v24 >> 4;
  if (v26 <= 0xA && ((1 << v26) & 0x406) != 0)
  {
    v27 = *((_BYTE *)v7 + 5) & 3;
    if (v27 == 3 || (*((_BYTE *)v7 + 5) & 3) == 0)
      v16 |= 0x40u;
  }
  else
  {
    v27 = *((_BYTE *)v7 + 5) & 3;
  }
  if (v25 == 10)
    v28 = v16 | 0x20;
  else
    v28 = v16;
  if (v27 == 2)
    v28 |= 0x200u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v28;
LABEL_88:
  if ((v36 & 1) != 0)
  {
    v29 = v35;
    v35 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    v2 = *(_QWORD *)(v1 + 32) > 0x17uLL;
  else
    v2 = 0;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::symbol_end(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[16];
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI((uint64_t)a1, v1, *(_QWORD *)(v1 + 32) / 0x18uLL);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::is64Bit(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1) == 8;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolName(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm::object *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::object *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  llvm::object *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v32);
  if ((v33 & 1) != 0)
  {
    v10 = v32;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, a2, (uint64_t)&v30);
  v7 = v30;
  if ((v31 & 1) == 0)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, *(_DWORD *)(v30 + 40), (uint64_t)&v28);
    v8 = v28;
    if ((v29 & 1) != 0)
    {
      v28 = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
LABEL_37:
      if ((v31 & 1) != 0)
      {
        v18 = v30;
        v30 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      goto LABEL_40;
    }
    *(_QWORD *)&v24 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(v6, v28, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v24, (uint64_t)v26);
    if ((v27 & 1) != 0)
    {
      v11 = v26[0];
      v26[0] = 0;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v11;
LABEL_34:
      if ((v29 & 1) != 0)
      {
        v17 = v28;
        v28 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      goto LABEL_37;
    }
    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName(v32, v26[0], v26[1], (uint64_t)&v24);
    v9 = v25;
    if ((v25 & 1) != 0 || !*((_QWORD *)&v24 + 1))
    {
      if ((*((_BYTE *)v32 + 4) & 0xF) == 3)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 128))(&v21, a1, a2);
        if ((v23 & 1) == 0)
        {
          if ((v25 & 1) != 0)
          {
            v12 = (_QWORD *)v24;
            *(_QWORD *)&v24 = 0;
          }
          else
          {
            v12 = 0;
          }
          v20 = v12;
          llvm::consumeError(&v20);
          if (v20)
            (*(void (**)(_QWORD *))(*v20 + 8))(v20);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, v21);
          if ((v23 & 1) != 0)
          {
            v14 = v21;
            v21 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          }
          if ((v25 & 1) != 0)
          {
            v15 = v24;
            *(_QWORD *)&v24 = 0;
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          goto LABEL_31;
        }
        v13 = v21;
        v21 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v9 = v25;
      }
      *(_BYTE *)(a3 + 16) = *(_BYTE *)(a3 + 16) & 0xFE | v9 & 1;
      if ((v9 & 1) != 0)
      {
        *(_QWORD *)a3 = v24;
        goto LABEL_31;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
    }
    *(_OWORD *)a3 = v24;
LABEL_31:
    if ((v27 & 1) != 0)
    {
      v16 = v26[0];
      v26[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    goto LABEL_34;
  }
  v30 = 0;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = v7;
LABEL_40:
  if ((v33 & 1) != 0)
  {
    v19 = v32;
    v32 = 0;
    if (v19)
      (*(void (**)(llvm::object *))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  llvm::object::ObjectFile::getSymbolValue(a1, a2, (uint64_t)&v26);
  if ((v27 & 1) != 0)
  {
    v7 = v26;
    goto LABEL_10;
  }
  v6 = v26;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v24);
  v7 = v24;
  if ((v25 & 1) != 0)
  {
LABEL_10:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  v8 = *(unsigned __int16 *)(v24 + 6);
  if ((v8 - 65521) < 2 || v8 == 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v13 = v22;
    v22 = 0;
    goto LABEL_18;
  }
  if (*(_WORD *)(*(_QWORD *)(a1 + 56) + 16) == 1)
  {
    v10 = *(_QWORD *)(a1 + 136);
    if (v10)
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable((_QWORD *)(a1 + 56), v10, (uint64_t)&v19);
      if ((v21 & 1) != 0)
      {
        v13 = v19;
        goto LABEL_18;
      }
      v12 = v19;
      v11 = v20;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    *(_QWORD *)&v16 = v12;
    *((_QWORD *)&v16 + 1) = v11;
    v17 = 1;
    v18 = 0;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), v24, v22, &v16, (uint64_t)&v19);
    v13 = v19;
    if ((v20 & 1) == 0)
    {
      if (v19)
        v6 += v19[2];
      goto LABEL_23;
    }
LABEL_18:
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_24;
  }
LABEL_23:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
LABEL_24:
  if ((v23 & 1) != 0)
  {
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  }
  if ((v25 & 1) != 0)
  {
    v15 = v24;
    v24 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  int v4;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 56;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v7);
  if ((v8 & 1) != 0)
  {
    v6 = (_QWORD *)v7;
    v7 = 0;
    llvm::report_fatal_error(&v6);
  }
  result = *(_QWORD *)(v7 + 8);
  if (*(__int16 *)(v7 + 6) != -15)
  {
    v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 18);
    if ((v4 == 40 || v4 == 8) && (*(_BYTE *)(v7 + 4) & 0xF) == 2)
      result &= ~1uLL;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  if (*(__int16 *)(v4 + 6) == -14)
    return *(unsigned int *)(v4 + 8);
  else
    return 0;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getCommonSymbolSizeImpl(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolType(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v6);
  v4 = v6;
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    switch(*(_BYTE *)(v6 + 4) & 0xF)
    {
      case 0:
        *(_BYTE *)(a3 + 8) &= ~1u;
        *(_DWORD *)a3 = 0;
        return;
      case 1:
      case 5:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 2;
        goto LABEL_10;
      case 2:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 5;
        goto LABEL_10;
      case 3:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 3;
        goto LABEL_10;
      case 4:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 4;
        goto LABEL_10;
      default:
        *(_BYTE *)(a3 + 8) &= ~1u;
        v5 = 1;
LABEL_10:
        *(_DWORD *)a3 = v5;
        break;
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = a2;
  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1 + 7, a2, HIDWORD(a2), (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v8 = v13;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(v6, v3, (uint64_t)&v11);
    if ((v12 & 1) != 0)
    {
      v9 = v11;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSection(a1, v13, v11, a3);
      if ((v12 & 1) != 0)
      {
        v7 = v11;
        v11 = 0;
        if (v7)
          (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      }
    }
    if ((v14 & 1) != 0)
    {
      v10 = v13;
      v13 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 64;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v3)(llvm::formatv_object_base **@<X0>, uint64_t *@<X8>);

  v3 = llvm::object::defaultWarningHandler;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName((_QWORD *)(a1 + 56), a2, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v3, a3);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionAddress(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
  if ((v8 & 1) != 0)
  {
    v3 = v7;
    v7 = 0;
  }
  else
  {
    v3 = 0;
  }
  v6 = v3;
  llvm::handleAllErrors<llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionIndex(llvm::object::DataRefImpl)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v7;
  if ((v8 & 1) != 0)
  {
    v7 = 0;
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return (a2 - (uint64_t)v4) >> 6;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionSize(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (*(_DWORD *)(a2 + 4) == 8)
  {
    v4 = result[2];
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v6 = result + 2;
    v7 = *((_OWORD *)result + 2);
    v11[0] = *((_OWORD *)result + 1);
    v11[1] = v7;
    result = llvm::object::Binary::checkOffset((llvm::object *)v11, *(_QWORD *)(a2 + 24) + *(_QWORD *)&v11[0], *(_QWORD *)(a2 + 32), &v12);
    v8 = v12;
    if (v12)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *v6 + *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 48);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionCompressed(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 9) >> 3) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 8) >> 2) & 1;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) != 1)
    return 0;
  if ((*(_QWORD *)(a2 + 8) & 2) != 0)
    return (*(_QWORD *)(a2 + 8) & 4) == 0;
  return 0;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a2 + 8) & 3) != 0 && *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 8;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isBerkeleyText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (v2 & 4) != 0 || (*(_QWORD *)(a2 + 8) & 1) == 0;
  return (v2 & 2) != 0 && v3;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isBerkeleyData(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) & 1) != 0 || *(_DWORD *)(a2 + 4) == 8)
    return 0;
  else
    return (*(unsigned __int8 *)(a2 + 8) >> 1) & 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v6);
  if ((v8 & 1) != 0)
  {
    v5 = (_QWORD *)v6;
    v6 = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v5);
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    if ((v8 & 1) != 0)
    {
      result = v6;
      v6 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v7 < 6)
    return 0;
  if (*(_DWORD *)v6 == 1650811950 && *(_WORD *)(v6 + 4) == 26485)
    return 1;
  if (v7 < 7)
    return 0;
  if (*(_DWORD *)v6 == 1701083694 && *(_DWORD *)(v6 + 3) == 1735746149)
    return 1;
  if (v7 != 10)
    return 0;
  return *(_QWORD *)v6 == 0x646E695F6264672ELL && *(_WORD *)(v6 + 8) == 30821;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_rel_begin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v5);
  result = v5;
  if ((v6 & 1) == 0)
    return ((a2 - v5) / (unint64_t)*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 58));
  v5 = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_rel_end(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *RelSection;
  _QWORD *v9;
  const std::error_category *v10;
  _QWORD *v11;
  std::error_code v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 272))(a1);
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection((uint64_t)a1, v4);
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, *((_DWORD *)RelSection + 10), (uint64_t)&v16);
    if ((v17 & 1) != 0)
    {
      v9 = v16;
      v16 = 0;
      v11 = v9;
      *(_QWORD *)&v12.__val_ = llvm::errorToErrorCode(&v11);
      v12.__cat_ = v10;
      std::error_code::message(&v13, &v12);
      v15 = 260;
      v14 = &v13;
      llvm::report_fatal_error((llvm *)&v14, (const llvm::Twine *)1);
    }
    v4 += (*(_QWORD *)(a2 + 32) / *(_QWORD *)(a2 + 56)) << 32;
  }
  return v4;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocatedSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 4 || v5 == 9)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, *(_DWORD *)(a2 + 44), (uint64_t)&v10);
    v7 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v7;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v9;
  }
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  _QWORD *Rel;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(a1, a2);
  return *Rel;
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  _QWORD *RelSection;
  _QWORD *Rel;
  uint64_t v6;
  unint64_t v7;

  RelSection = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection((uint64_t)a1, a2);
  if (*((_DWORD *)RelSection + 1) == 9)
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel((uint64_t)a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela((uint64_t)a1, a2);
  v6 = a1[7];
  if (*(_WORD *)(v6 + 18) == 8 && *(_BYTE *)(v6 + 4) == 2)
  {
    if (*(_BYTE *)(v6 + 5) == 1)
      v7 = Rel[1] << 32;
    else
      v7 = Rel[1];
  }
  else
  {
    v7 = Rel[1];
  }
  if (HIDWORD(v7))
    return v7 & 0xFFFFFFFF00000000 | *((unsigned int *)RelSection + 10);
  else
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationType(uint64_t a1, uint64_t a2)
{
  _QWORD *Rel;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(a1, a2)+ 1) == 9)Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel(a1, a2);
  else
    Rel = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(a1, a2);
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_WORD *)(v5 + 18) == 8 && *(_BYTE *)(v5 + 4) == 2)
  {
    v6 = *(_BYTE *)(v5 + 5) == 1;
    v7 = (Rel[1] >> 24) & 0xFF0000 | HIBYTE(Rel[1]) | (Rel[1] >> 8) & 0xFF000000 | (Rel[1] >> 40) & 0xFF00;
    if (!v6)
      return Rel[1];
  }
  else
  {
    LODWORD(v7) = *((_DWORD *)Rel + 2);
  }
  return v7;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationTypeName(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  unsigned int v5;

  v4 = a1 + 7;
  v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 320))(a1);
  return llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(v4, v5, a3);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_relocation_sections(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *__p;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v37 = 0;
  v38 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v39);
  if ((v41 & 1) == 0 && v40)
  {
    v4 = 0;
    v5 = v39;
    v6 = v39 + (v40 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 6)
      {
        v7 = (uint64_t *)(*(_QWORD *)(v5 + 24) + *(_QWORD *)(a1 + 16));
        v8 = *v7;
        if (*v7)
        {
          do
          {
            if (v8 == 17 || v8 == 7 || v8 == 23)
            {
              v9 = v7[1];
              if (v4 >= v38)
              {
                v11 = __p;
                v12 = (v4 - __p) >> 3;
                v13 = v12 + 1;
                if ((unint64_t)(v12 + 1) >> 61)
LABEL_56:
                  abort();
                v14 = v38 - __p;
                if ((v38 - __p) >> 2 > v13)
                  v13 = v14 >> 2;
                if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
                  v15 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v15 = v13;
                if (v15)
                {
                  v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v38, v15);
                  v11 = __p;
                  v4 = v37;
                }
                else
                {
                  v16 = 0;
                }
                v17 = &v16[8 * v12];
                *(_QWORD *)v17 = v9;
                v10 = v17 + 8;
                while (v4 != v11)
                {
                  v18 = *((_QWORD *)v4 - 1);
                  v4 -= 8;
                  *((_QWORD *)v17 - 1) = v18;
                  v17 -= 8;
                }
                __p = v17;
                v38 = &v16[8 * v15];
                if (v11)
                  operator delete(v11);
              }
              else
              {
                *(_QWORD *)v4 = v9;
                v10 = v4 + 8;
              }
              v37 = v10;
              v4 = v10;
            }
            v19 = v7[2];
            v7 += 2;
            v8 = v19;
          }
          while (v19);
        }
      }
      v5 += 64;
    }
    while (v5 != v6);
    if (v40)
    {
      v20 = 0;
      v21 = v39;
      v22 = v39 + (v40 << 6);
      v23 = a2 + 2;
      do
      {
        v24 = __p;
        if (__p != v37)
        {
          while (*(_QWORD *)v24 != *(_QWORD *)(v21 + 16))
          {
            v24 += 8;
            if (v24 == v37)
            {
              v24 = v37;
              break;
            }
          }
        }
        if (v24 != v37)
        {
          if ((unint64_t)v20 >= *v23)
          {
            v25 = (v20 - *a2) >> 4;
            if ((unint64_t)(v25 + 1) >> 60)
              goto LABEL_56;
            v26 = *v23 - (_QWORD)*a2;
            v27 = v26 >> 3;
            if (v26 >> 3 <= (unint64_t)(v25 + 1))
              v27 = v25 + 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
              v28 = 0xFFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a2 + 2), v28);
            v31 = &v29[16 * v25];
            *(_QWORD *)v31 = v21;
            *((_QWORD *)v31 + 1) = a1;
            v33 = *a2;
            v32 = a2[1];
            v34 = v31;
            if (v32 != *a2)
            {
              do
              {
                *((_OWORD *)v34 - 1) = *((_OWORD *)v32 - 1);
                v34 -= 16;
                v32 -= 16;
              }
              while (v32 != v33);
              v32 = *a2;
            }
            v20 = v31 + 16;
            *a2 = v34;
            a2[1] = v31 + 16;
            a2[2] = &v29[16 * v30];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v20 = v21;
            *((_QWORD *)v20 + 1) = a1;
            v20 += 16;
          }
          a2[1] = v20;
        }
        v21 += 64;
      }
      while (v21 != v22);
    }
  }
  if ((v41 & 1) != 0)
  {
    v35 = v39;
    v39 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if (__p)
    operator delete(__p);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_begin(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v2);
  result = v2;
  if ((v3 & 1) != 0)
  {
    v2 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::section_end(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)v2);
  result = v2[0];
  if ((v3 & 1) == 0)
    return v2[0] + (v2[1] << 6);
  v2[0] = 0;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getBytesInAddress()
{
  return 8;
}

const char *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getFileFormatName(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  const char *result;
  int v5;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 4);
  if (v2 != 2)
  {
    if (v2 != 1)
      llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
    v3 = *(unsigned __int16 *)(v1 + 18);
    if (v3 > 82)
    {
      if (v3 <= 223)
      {
        if (v3 > 104)
        {
          if (v3 == 105)
            return "elf32-msp430";
          if (v3 == 164)
            return "elf32-hexagon";
        }
        else
        {
          if (v3 == 83)
            return "elf32-avr";
          if (v3 == 94)
            return "elf32-xtensa";
        }
      }
      else if (v3 <= 243)
      {
        if (v3 == 224)
          return "elf32-amdgpu";
        if (v3 == 243)
          return "elf32-littleriscv";
      }
      else
      {
        switch(v3)
        {
          case 244:
            return "elf32-lanai";
          case 252:
            return "elf32-csky";
          case 258:
            return "elf32-loongarch";
        }
      }
    }
    else
    {
      if (v3 <= 17)
      {
        result = "elf32-m68k";
        switch(v3)
        {
          case 2:
            return "elf32-sparc";
          case 3:
            result = "elf32-i386";
            break;
          case 4:
            return result;
          case 6:
            result = "elf32-iamcu";
            break;
          case 8:
            result = "elf32-mips";
            break;
          default:
            return "elf32-unknown";
        }
        return result;
      }
      if (v3 > 39)
      {
        if (v3 == 40)
          return "elf32-littlearm";
        if (v3 == 62)
          return "elf32-x86-64";
      }
      else
      {
        if (v3 == 18)
          return "elf32-sparc";
        if (v3 == 20)
          return "elf32-powerpcle";
      }
    }
    return "elf32-unknown";
  }
  v5 = *(unsigned __int16 *)(v1 + 18);
  if (v5 > 182)
  {
    if (v5 > 246)
    {
      switch(v5)
      {
        case 247:
          return "elf64-bpf";
        case 251:
          return "elf64-ve";
        case 258:
          return "elf64-loongarch";
      }
    }
    else
    {
      switch(v5)
      {
        case 183:
          return "elf64-littleaarch64";
        case 224:
          return "elf64-amdgpu";
        case 243:
          return "elf64-littleriscv";
      }
    }
  }
  else if (v5 > 21)
  {
    switch(v5)
    {
      case 22:
        return "elf64-s390";
      case 43:
        return "elf64-sparc";
      case 62:
        return "elf64-x86-64";
    }
  }
  else
  {
    switch(v5)
    {
      case 3:
        return "elf64-i386";
      case 8:
        return "elf64-mips";
      case 21:
        return "elf64-powerpcle";
    }
  }
  return "elf64-unknown";
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getArch(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(unsigned __int16 *)(v1 + 18);
  if (v2 <= 0x52)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x27u)
    {
      result = 15;
      switch(*(_WORD *)(v1 + 18))
      {
        case 2:
        case 0x12:
          return 31;
        case 3:
        case 6:
          return 37;
        case 4:
          return result;
        case 8:
          v6 = *(unsigned __int8 *)(v1 + 4);
          if (v6 != 1)
          {
            if (v6 == 2)
              return 19;
LABEL_54:
            llvm::report_fatal_error((llvm *)"Invalid ELFCLASS!", (const llvm::Twine *)1);
          }
          result = 17;
          break;
        case 0x14:
          return 22;
        case 0x15:
          return 24;
        case 0x16:
          return 32;
        default:
          return 0;
      }
      return result;
    }
    switch(v2)
    {
      case '(':
        return 1;
      case '+':
        return 30;
      case '>':
        return 38;
    }
    return 0;
  }
  if (*(unsigned __int16 *)(v1 + 18) <= 0xDFu)
  {
    if (*(unsigned __int16 *)(v1 + 18) <= 0x68u)
    {
      if (v2 == 83)
        return 7;
      if (v2 == 94)
        return 40;
    }
    else
    {
      switch(v2)
      {
        case 0x69u:
          return 20;
        case 0xA4u:
          return 12;
        case 0xB7u:
          return 3;
      }
    }
    return 0;
  }
  switch(*(_WORD *)(v1 + 18))
  {
    case 0xF3:
      v4 = *(unsigned __int8 *)(v1 + 4);
      if (v4 != 1)
      {
        if (v4 == 2)
          return 28;
        goto LABEL_54;
      }
      return 27;
    case 0xF4:
      return 55;
    case 0xF5:
    case 0xF6:
    case 0xF8:
    case 0xF9:
    case 0xFA:
      return 0;
    case 0xF7:
      return 8;
    case 0xFB:
      return 60;
    case 0xFC:
      return 10;
    default:
      if (v2 == 224)
      {
        v7 = *(unsigned __int8 *)(v1 + 48);
        v8 = v7 - 1;
        if ((v7 - 32) >= 0x28)
          v9 = 0;
        else
          v9 = 26;
        if (v8 >= 0x10)
          result = v9;
        else
          result = 25;
      }
      else
      {
        if (v2 != 258)
          return 0;
        v5 = *(unsigned __int8 *)(v1 + 4);
        if (v5 != 1)
        {
          if (v5 == 2)
            return 14;
          goto LABEL_54;
        }
        result = 13;
      }
      break;
  }
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStartAddress@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 56);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 24);
  return result;
}

BOOL llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isRelocatableObject(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16) == 1;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSize(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return v4[2];
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolBinding(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 4) >> 4;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolOther(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(unsigned __int8 *)(v4 + 5);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolELFType(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4;
    v4 = 0;
    llvm::report_fatal_error(&v3);
  }
  return *(_BYTE *)(v4 + 4) & 0xF;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionType(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionFlags(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionOffset(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationAddend(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  llvm::formatv_object_base *v7;
  __int16 v8;
  uint64_t v9;
  unsigned int v10;

  if (*((_DWORD *)llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(a1, a2)+ 1) == 4)
  {
    v6 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(a1, a2)[2];
    *(_BYTE *)(a3 + 8) &= ~1u;
  }
  else
  {
    v7 = (llvm::formatv_object_base *)"Section is not SHT_RELA";
    v8 = 259;
    v10 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(&v7, &v10, &v9);
    *(_BYTE *)(a3 + 8) |= 1u;
    v6 = v9;
  }
  *(_QWORD *)a3 = v6;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getBuildAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)(a1 + 56);
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v17);
  if ((v19 & 1) != 0)
  {
    v8 = v17;
    v17 = 0;
    *a3 = v8;
    goto LABEL_8;
  }
  if (!v18)
  {
LABEL_6:
    *a3 = 0;
    goto LABEL_8;
  }
  v6 = (_DWORD *)(v17 + 4);
  v7 = v18 << 6;
  while (*v6 != 1879048195)
  {
    v6 += 16;
    v7 -= 64;
    if (!v7)
      goto LABEL_6;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(v5, (uint64_t)(v6 - 1), (uint64_t)&v14);
  v10 = v14;
  if ((v16 & 1) != 0)
    goto LABEL_19;
  if (*v14 != 65 || v15 == 1)
  {
    v10 = 0;
LABEL_19:
    *a3 = (uint64_t)v10;
    goto LABEL_8;
  }
  llvm::ELFAttributeParser::parse(a2, (uint64_t)v14, v15, 1, a3);
  v12 = *a3;
  if ((v16 & 1) != 0)
  {
    v13 = v14;
    v14 = 0;
    if (v13)
      (*(void (**)(_BYTE *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (!v12)
    goto LABEL_6;
LABEL_8:
  if ((v19 & 1) != 0)
  {
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getDynamicSymbolIterators@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;

  v4 = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_begin(a1);
  v6 = v5;
  result = llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_end(a1);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = result;
  a2[3] = v8;
  return result;
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getPlatformFlags(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 48);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEType(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 16);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEMachine(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 18);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections((_QWORD *)(a1 + 56), (uint64_t)&v7);
    v5 = v7;
    if ((v8 & 1) != 0)
    {
      v7 = 0;
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v5 + 8))(v5);
        LODWORD(v5) = 0;
      }
      a3 = 0;
    }
    else
    {
      v5 = (a2 - v7) >> 6;
    }
  }
  else
  {
    a3 = 0;
    LODWORD(v5) = 0;
  }
  return v5 | ((unint64_t)a3 << 32);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
LABEL_5:
    v9 = a4[1];
    v12[0] = *a4;
    v12[1] = v9;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)a3, v12, a5);
    if ((v14 & 1) == 0)
      return;
    goto LABEL_8;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(a1, a3, (uint64_t)v13);
  if ((v14 & 1) == 0)
  {
    a3 = (_QWORD *)v13[0];
    goto LABEL_5;
  }
  v10 = v13[0];
  v13[0] = 0;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v10;
LABEL_8:
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = a4[1];
  v10[0] = *a4;
  v10[1] = v7;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(a2, a3, v10, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v9 = v11;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v9;
  }
  else if ((_DWORD)v11)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, v11, a5);
    if ((v12 & 1) != 0)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionIndex(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X4>, uint64_t a4@<X8>)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int16 *)(a1 + 6);
  if (v5 != 0xFFFF)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    if ((unsigned __int16)(v5 + 256) <= 0x100u)
    {
      *(_DWORD *)a4 = 0;
      return;
    }
    goto LABEL_6;
  }
  v6 = a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(-1431655765 * ((unint64_t)(a1 - a2) >> 3), (uint64_t *)v8, (uint64_t)&v9);
  if ((v10 & 1) == 0)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    v5 = v9;
LABEL_6:
    *(_DWORD *)a4 = v5;
    return;
  }
  v7 = v9;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v7;
}

void llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = a1[17];
  if (v8)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSHNDXTable(a1 + 7, v8, (uint64_t)&v18);
    if ((v20 & 1) != 0)
    {
      v11 = v18;
      goto LABEL_9;
    }
    v10 = v18;
    v9 = v19;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)&v15 = v10;
  *((_QWORD *)&v15 + 1) = v9;
  v16 = 1;
  v17 = 0;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1 + 7, a2, a3, &v15, (uint64_t)&v18);
  v11 = v18;
  if ((v19 & 1) != 0)
  {
LABEL_9:
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
    return;
  }
  if (v18)
  {
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = a1;
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v13;
    if ((v19 & 1) != 0)
    {
      v14 = v18;
      v18 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelSection(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection((_QWORD *)(a1 + 56), a2, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRel(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

_QWORD *llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRela(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::error_category *v4;
  _QWORD *v5;
  std::error_code v6;
  std::string v7;
  std::string *v8;
  __int16 v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>>>((_QWORD *)(a1 + 56), a2, HIDWORD(a2), (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v3 = v10;
    v10 = 0;
    v5 = v3;
    *(_QWORD *)&v6.__val_ = llvm::errorToErrorCode(&v5);
    v6.__cat_ = v4;
    std::error_code::message(&v7, &v6);
    v9 = 260;
    v8 = &v7;
    llvm::report_fatal_error((llvm *)&v8, (const llvm::Twine *)1);
  }
  return v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, a2, (uint64_t)&v9);
  v7 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(a1, v9, a3, a4);
    if ((v10 & 1) != 0)
    {
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getEntry<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 16 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = a2[4];
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,false>>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t *v15;
  void *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  std::string v35;
  void *__p[2];
  uint64_t *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  std::string *v43;
  __int16 v44;
  _QWORD v45[2];
  std::string *v46;
  __int16 v47;
  llvm::formatv_object_base *v48[2];
  std::string *v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;

  if (a2[7] == 16)
  {
    v6 = a2[3];
    v7 = a2[4];
    v40 = v7;
    v41 = v6;
    if ((v7 & 0xF) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v35);
      v8 = std::string::insert(&v35, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v29, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = (uint64_t *)&v40;
      v38 = 3076;
      v42[0] = __p;
      v43 = (std::string *)") which is not a multiple of its sh_entsize (";
      v44 = 770;
      v28.__r_.__value_.__r.__words[0] = a2[7];
      v45[0] = v42;
      v46 = &v28;
      v47 = 3074;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)")";
      v50 = 770;
      LODWORD(v27.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v39);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v39;
      v39 = 0;
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v25 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v7 >> 4;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v27);
        v21 = std::string::insert(&v27, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v28, " has a sh_offset (0x");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        v29.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v30 = 3588;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v32 = 770;
        __p[0] = &v31;
        v37 = (uint64_t *)&v40;
        v38 = 3586;
        v42[0] = __p;
        v43 = (std::string *)") that is greater than the file size (0x";
        v44 = 770;
        v26 = a1[1];
        v45[0] = v42;
        v46 = (std::string *)&v26;
        v47 = 3586;
        v48[0] = (llvm::formatv_object_base *)v45;
        v49 = (std::string *)")";
        v50 = 770;
        v52 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, &v52, &v33);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v33;
        v33 = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
          v16 = (void *)v27.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v35);
      v17 = std::string::insert(&v35, 0, "section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v29, " has a sh_offset (0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v31;
      v37 = &v41;
      v38 = 3588;
      v42[0] = __p;
      v43 = (std::string *)") + sh_size (0x";
      v44 = 770;
      v45[0] = v42;
      v46 = (std::string *)&v40;
      v47 = 3586;
      v48[0] = (llvm::formatv_object_base *)v45;
      v49 = (std::string *)") that cannot be represented";
      v50 = 770;
      LODWORD(v28.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v28, &v34);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v34;
      v34 = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v35.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v29);
    v12 = std::string::insert(&v29, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v31, " has invalid sh_entsize: expected ");
    v15 = (uint64_t *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v35.__r_.__value_.__r.__words[0] = 16;
    v42[0] = __p;
    v43 = &v35;
    v44 = 2564;
    v45[0] = v42;
    v46 = (std::string *)", but got ";
    v47 = 770;
    v28.__r_.__value_.__r.__words[0] = a2[7];
    v48[0] = (llvm::formatv_object_base *)v45;
    v49 = &v28;
    v50 = 3074;
    LODWORD(v27.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v48, (unsigned int *)&v27, &v51);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v51;
    v51 = 0;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v16);
    }
  }
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_begin(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = v1 && *(_QWORD *)(v1 + 32) > 0x17uLL;
  return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(a1, v1, v2);
}

unint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_end(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toDRI(a1, v1, *(_QWORD *)(v1 + 32) / 0x18uLL);
  else
    return llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamic_symbol_begin(a1);
}

uint64_t llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v6;
  void *__p[3];
  void *v8[3];
  __int128 v9[2];

  v4 = *(_OWORD *)(a2 + 32);
  v9[0] = *(_OWORD *)(a2 + 16);
  v9[1] = v4;
  v6 = *(_OWORD *)(a2 + 56);
  std::vector<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,true>>>::vector(__p, a2 + 72);
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = v9;
  if (*(_QWORD *)(a2 + 104))
    llvm::SmallVectorImpl<char>::operator=((uint64_t)v8, a2 + 96);
  llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile(a1, v9, (uint64_t)&v6, *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136));
  if (v8[0] != v9)
    free(v8[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::moveFromOldBuckets(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::ConstantDataArray::get<unsigned char>(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get((uint64_t **)(*(_QWORD *)a1 + 1944), a3);
  return llvm::ConstantDataSequential::getImpl(a2, a3, v5);
}

uint64_t std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v7 = (uint64_t)(v4 - 16);
    v8 = 16 * ((v4 - a4) >> 4);
    v9 = a2 - 16;
    do
    {
      result = std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100](v7, (__int128 *)(v9 + v8));
      v7 -= 16;
      v8 -= 16;
    }
    while (v8);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

_QWORD *std::shared_ptr<llvm::BitCodeAbbrev>::operator=[abi:nn180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__assign_with_size[abi:nn180100]<std::shared_ptr<llvm::BitCodeAbbrev>*,std::shared_ptr<llvm::BitCodeAbbrev>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      abort();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<llvm::BitCodeAbbrev>::operator=[abi:nn180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<llvm::BitCodeAbbrev>::operator=[abi:nn180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void llvm::AppleInternalGetFullBitcodeVersionString(_QWORD *a1@<X8>)
{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  llvm::formatv_object_base *v11;
  llvm::formatv_object_base *v12[2];
  char v13;
  __int16 v14;
  std::string __p;
  std::string v16;
  std::string v17;
  std::string v18;

  std::string::basic_string[abi:nn180100]<0>(v12, "");
  if (v13 < 0)
  {
    v11 = v12[1];
    operator delete(v12[0]);
    if (v11)
      goto LABEL_3;
LABEL_18:
    std::string::basic_string[abi:nn180100]<0>(a1, "");
    return;
  }
  if (!v13)
    goto LABEL_18;
LABEL_3:
  std::string::basic_string[abi:nn180100]<0>(&v16, "");
  v3 = std::string::insert(&v16, 0, "APPLE_1_");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v17, "_");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v14 = 265;
  LODWORD(v12[0]) = 0;
  llvm::Twine::str(v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)a1 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  a1[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

_QWORD *llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[1];
  v8 = v7 + ((a3 - a2) >> 3);
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    v7 = v5[1];
  }
  if (v4 != a3)
  {
    v9 = (_BYTE *)(*v5 + v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
    v7 = v5[1];
  }
  v5[1] = v7 + (v6 >> 3);
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

uint64_t llvm::MDNode::classof(_BYTE *a1)
{
  return (*a1 < 0x24uLL) & (0xFFFFFFFF0uLL >> *a1);
}

unsigned int *llvm::SmallVectorImpl<unsigned long long>::append<unsigned char const*,void>(unsigned int *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int v10;

  v4 = a2;
  v5 = result;
  v6 = (_DWORD)a3 - (_DWORD)a2;
  v7 = result[2];
  v8 = a3 - a2 + v7;
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *v4++;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + v6;
  return result;
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 == 84)
  {
    v2 = 0;
  }
  else if (v1 == 39)
  {
    v2 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    v2 = 2;
  }
  v3 = *((_DWORD *)this + 5);
  if (v3 < 0 && (v5 = (char *)this - 32 * (v3 & 0x7FFFFFF), v6 = *((_QWORD *)v5 - 1), (v6 & 0xFFFFFFFF0) != 0))
    v4 = (*((_DWORD *)v5 - 3) - *(_DWORD *)&v5[-v6]);
  else
    v4 = 0;
  return (uint64_t)this + -32 * v4 + -32 * v2 - 32;
}

llvm::cl::Option *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, int **a4, __n128 *a5)
{
  uint64_t v10;

  v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12458;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = off_251C12270;
  *(_QWORD *)(v10 + 152) = &off_251C121B0;
  *(_QWORD *)(v10 + 160) = &off_251C17200;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, int **a4, __n128 *a5)
{
  size_t v10;
  int v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v11 = **a4;
  *(_DWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v11;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17200;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17200;
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C171C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C171C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::BitCodeAbbrev>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

uint64_t _GLOBAL__sub_I_BitcodeWriter_cpp()
{
  uint64_t v0;
  __n128 v2;
  int v3;
  int *v4;
  int v5;

  v5 = 1;
  v3 = 25;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Number of metadatas above which we emit an index to enable lazy-loading";
  v2.n128_u64[1] = 71;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_3, "bitcode-mdindex-threshold", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_3, &dword_24A800000);
  v5 = 1;
  v3 = 512;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"The threshold (unit M) for flushing LLVM bitcode.";
  v2.n128_u64[1] = 49;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&FlushThreshold, "bitcode-flush-threshold", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &FlushThreshold, &dword_24A800000);
  v0 = llvm::cl::Option::Option((uint64_t)&qword_25795E568, 0, 0);
  byte_25795E5E8 = 0;
  qword_25795E5F0 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_25795E5F8 = 0;
  qword_25795E568 = (uint64_t)off_251C123A8;
  qword_25795E600 = (uint64_t)&off_251C12520;
  qword_25795E608[0] = &off_251C12410;
  qword_25795E620 = (uint64_t)qword_25795E608;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"write-relbf-to-summary", 0x16uLL);
  word_25795E572 = word_25795E572 & 0xFF9F | 0x20;
  byte_25795E5E8 = 0;
  word_25795E5F8 = 256;
  qword_25795E588 = (uint64_t)"Write relative block frequency to function summary ";
  unk_25795E590 = 51;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795E568);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795E568, &dword_24A800000);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::InsertIntoBucketImpl<llvm::Value const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::InsertIntoBucketImpl<llvm::Value const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::moveFromOldBuckets(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GlobalValue::isStrongDefinitionForLinker(llvm::GlobalValue *this)
{
  unsigned int v1;
  BOOL v3;
  unsigned int v4;

  v1 = *((_DWORD *)this + 8) & 0xF;
  if (v1 == 1)
    return 0;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if ((*((_DWORD *)this + 8) & 0x1000000) == 0
         && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
  {
    return 0;
  }
  v3 = v1 > 0xA;
  v4 = (0x1C3u >> v1) & 1;
  if (v3)
    return 1;
  else
    return v4;
}

uint64_t llvm::BranchInst::setSuccessor(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32;
  v4 = (_QWORD *)(result - 32 - 32 * a2);
  if (*v4)
  {
    v5 = v3 - 32 * a2;
    v7 = *(_QWORD **)(v5 + 16);
    v6 = (_QWORD *)(v5 + 16);
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v4 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 - 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v4;
  }
  return result;
}

uint64_t llvm::InvokeInst::setUnwindDest(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v3 = *(_QWORD *)(result - 56);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 48);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 56) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t llvm::CatchSwitchInst::setUnwindDest(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(result - 8);
  else
    v3 = result - 32 * (v2 & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v3 + 32))
  {
    **(_QWORD **)(v3 + 48) = *(_QWORD *)(v3 + 40);
    v5 = *(_QWORD *)(v3 + 40);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 48);
  }
  *v4 = a2;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v6 = (_QWORD *)(a2 + 8);
    v7 = v8;
    *(_QWORD *)(v3 + 40) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v3 + 40;
    *(_QWORD *)(v3 + 48) = v6;
    *v6 = v4;
  }
  return result;
}

uint64_t llvm::CleanupReturnInst::setUnwindDest(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v3 = (_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v2 + 32))
  {
    **(_QWORD **)(v2 + 48) = *(_QWORD *)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 40);
    if (v4)
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 48);
  }
  *v3 = a2;
  if (a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(a2 + 8);
    v6 = v7;
    *(_QWORD *)(v2 + 40) = v7;
    if (v7)
      *(_QWORD *)(v6 + 16) = v2 + 40;
    *(_QWORD *)(v2 + 48) = v5;
    *v5 = v3;
  }
  return result;
}

uint64_t llvm::PHINode::addIncoming(llvm::PHINode *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  char *v13;

  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) == *((_DWORD *)this + 15))
  {
    v7 = v6 & 0x7FFFFFF;
    if (v7 + (v7 >> 1) <= 2)
      v8 = 2;
    else
      v8 = v7 + (v7 >> 1);
    *((_DWORD *)this + 15) = v8;
    llvm::User::growHungoffUses(this, v8, 1);
    v6 = *((_DWORD *)this + 5);
  }
  v9 = (v6 + 1) & 0x7FFFFFF;
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | v9;
  result = llvm::PHINode::setIncomingValue((uint64_t)this, v9 - 1, (uint64_t)a2);
  v11 = *((_DWORD *)this + 5);
  v12 = v11 & 0x7FFFFFF;
  if ((v11 & 0x40000000) != 0)
    v13 = (char *)*((_QWORD *)this - 1);
  else
    v13 = (char *)this - 32 * v12;
  *(_QWORD *)&v13[32 * *((unsigned int *)this + 15) + 8 * (v12 - 1)] = a3;
  return result;
}

uint64_t llvm::PHINode::setIncomingValue(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

void llvm::DataLayout::getTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_24A8E1CD4()
{
  return 64;
}

uint64_t *llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t *result;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 32))(*((_QWORD *)this + 9), 13, a2, a3);
  if (!result)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 13, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  return result;
}

uint64_t *llvm::TrackingMDRef::operator=(uint64_t *a1, unsigned __int8 **a2)
{
  if (a2 != (unsigned __int8 **)a1)
  {
    if (*a1)
      llvm::MetadataTracking::untrack((uint64_t)a1, *a1);
    *a1 = (uint64_t)*a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack((uint64_t)a2, *a2, (uint64_t)a1);
      *a2 = 0;
    }
  }
  return a1;
}

llvm::PHINode *llvm::PHINode::PHINode(llvm::PHINode *this, llvm::Type *a2, int a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v8 = (llvm::Value *)llvm::Instruction::Instruction((uint64_t)this, (uint64_t)a2, 55, 0, 0, (uint64_t *)a5);
  *((_DWORD *)v8 + 15) = a3;
  llvm::Value::setName(v8, a4);
  v9 = *((unsigned int *)this + 15);
  v10 = operator new(40 * v9);
  *((_QWORD *)this - 1) = v10;
  if ((_DWORD)v9)
  {
    v11 = &v10[4 * v9];
    do
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = this;
      v10 += 4;
    }
    while (v10 != v11);
  }
  return this;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::InsertIntoBucketImpl<llvm::BasicBlock *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::InsertIntoBucketImpl<llvm::BasicBlock *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::moveFromOldBuckets(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)a1;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v8 - 1, &v13);
        v9 = v13;
        *v13 = *(v8 - 1);
        v10 = *v8;
        *v8 = 0;
        v9[1] = v10;
        ++*(_DWORD *)(a1 + 8);
        v11 = *v8;
        *v8 = 0;
        if (v11)
          std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)v8, v11);
      }
      v12 = v8 + 1;
      v8 += 2;
    }
    while (v12 != a3);
  }
}

void std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 24);
    if (v2 != (void *)(a2 + 40))
      free(v2);
    JUMPOUT(0x24BD1B3A4);
  }
}

_QWORD *llvm::SmallVectorImpl<llvm::BasicBlock *>::append<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  _QWORD *result;

  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      do
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          break;
        v8 = *(_QWORD *)(v7 + 24);
        v9 = *(unsigned __int8 *)(v8 + 16);
        v10 = v8 && v9 >= 0x1C;
      }
      while (!v10 || v9 - 29 >= 0xB);
      ++v6;
    }
    while (v7 != a3);
  }
  v12 = *(unsigned int *)(a1 + 8);
  if (v6 + v12 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + v12, 8);
    v12 = *(unsigned int *)(a1 + 8);
  }
  result = std::uninitialized_copy[abi:nn180100]<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,llvm::BasicBlock**>(a2, a3, (_QWORD *)(*(_QWORD *)a1 + 8 * v12));
  *(_DWORD *)(a1 + 8) += v6;
  return result;
}

_QWORD *std::uninitialized_copy[abi:nn180100]<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,llvm::BasicBlock**>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;

  while (a1 != a2)
  {
    *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40);
    do
    {
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        break;
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(unsigned __int8 *)(v3 + 16);
      v5 = v3 && v4 >= 0x1C;
    }
    while (!v5 || v4 - 29 >= 0xB);
    ++a3;
  }
  return a3;
}

unint64_t llvm::DataLayout::getTypeAllocSize(llvm::DataLayout *this, llvm::Type *a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;

  llvm::DataLayout::getTypeSizeInBits((uint64_t)this, (uint64_t)a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  llvm::DataLayout::getAlignment((uint64_t)this, (uint64_t)a2);
  return ((1 << v6) + v5 - 1) & -(1 << v6);
}

uint64_t *llvm::IRBuilderBase::CreateInsertNUWNSWBinOp(uint64_t *a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t *v11;
  uint64_t *result;
  _BYTE v13[32];
  __int16 v14;

  v14 = 257;
  v11 = (uint64_t *)llvm::BinaryOperator::Create(a2, a3, a4, (const llvm::Twine *)v13, 0);
  result = llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v11, a5);
  if (a6)
    *((_BYTE *)result + 17) |= 2u;
  if (a7)
    *((_BYTE *)result + 17) |= 4u;
  return result;
}

unsigned int *llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int *this, int a2, llvm::MDNode *a3)
{
  unsigned int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  llvm::MDNode *v7;
  int v8;

  v3 = this;
  v8 = a2;
  v7 = a3;
  if (a3)
  {
    v4 = this[2];
    if ((_DWORD)v4)
    {
      v5 = (_QWORD *)(*(_QWORD *)this + 8);
      v6 = 16 * v4;
      while (*((_DWORD *)v5 - 2) != a2)
      {
        v5 += 2;
        v6 -= 16;
        if (!v6)
          return (unsigned int *)llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(this, &v8, (uint64_t *)&v7);
      }
      *v5 = a3;
    }
    else
    {
      return (unsigned int *)llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(this, &v8, (uint64_t *)&v7);
    }
  }
  else
  {
    this = (unsigned int *)std::remove_if[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(*(_QWORD *)this, *(_QWORD *)this + 16 * this[2], a2);
    v3[2] = ((unint64_t)this - *(_QWORD *)v3) >> 4;
  }
  return this;
}

uint64_t llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(unsigned int *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v4 = a1[2];
  if (v4 >= a1[3])
  {
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a1, *a2, *a3);
    v5 = *(_QWORD *)a1;
    v7 = a1[2];
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)a1 + 16 * v4;
    *(_DWORD *)v6 = *a2;
    *(_QWORD *)(v6 + 8) = *a3;
    v7 = v4 + 1;
    a1[2] = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t std::remove_if[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(uint64_t result, uint64_t a2, int a3)
{
  uint64_t i;

  if (result != a2)
  {
    while (*(_DWORD *)result != a3)
    {
      result += 16;
      if (result == a2)
        return a2;
    }
  }
  if (result != a2)
  {
    for (i = result + 16; i != a2; i += 16)
    {
      if (*(_DWORD *)i != a3)
      {
        *(_DWORD *)result = *(_DWORD *)i;
        *(_QWORD *)(result + 8) = *(_QWORD *)(i + 8);
        result += 16;
      }
    }
  }
  return result;
}

llvm::SelectInst *llvm::SelectInst::SelectInst(llvm::SelectInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11;

  v11 = llvm::Instruction::Instruction((uint64_t)this, *(_QWORD *)a3, 57, (uint64_t)this - 96, 3, (uint64_t *)a6);
  llvm::SelectInst::init(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  llvm::Value::setName(this, a5);
  return this;
}

uint64_t llvm::SelectInst::init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v5 = *(_QWORD *)(result - 88);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(result - 80);
  }
  *v4 = a2;
  if (a2)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v6 = (_QWORD *)(a2 + 8);
    v7 = v8;
    *(_QWORD *)(result - 88) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v6;
    *v6 = v4;
  }
  v9 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v10 = *(_QWORD *)(result - 56);
    if (v10)
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(result - 48);
  }
  *v9 = a3;
  if (a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v11 = (_QWORD *)(a3 + 8);
    v12 = v13;
    *(_QWORD *)(result - 56) = v13;
    if (v13)
      *(_QWORD *)(v12 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v11;
    *v11 = v9;
  }
  v14 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v15 = *(_QWORD *)(result - 24);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(result - 16);
  }
  *v14 = a4;
  if (a4)
  {
    v18 = *(_QWORD *)(a4 + 8);
    v16 = (_QWORD *)(a4 + 8);
    v17 = v18;
    *(_QWORD *)(result - 24) = v18;
    if (v18)
      *(_QWORD *)(v17 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v16;
    *v16 = v14;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, &v5, &v4))return v4;
  else
    return *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
}

llvm::Instruction *llvm::GraphTraits<llvm::BasicBlock *>::child_end(uint64_t a1)
{
  uint64_t v1;
  llvm::Instruction *result;
  llvm::Instruction *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 == a1 + 40)
    return 0;
  result = 0;
  v3 = (llvm::Instruction *)(v1 - 24);
  if (v1)
    v4 = v1 - 24;
  else
    v4 = 0;
  if (*(unsigned __int8 *)(v4 + 16) - 29 <= 0xA)
  {
    llvm::Instruction::getNumSuccessors(v3);
    return v3;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_BasicBlockUtils_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&MaxDeoptOrUnreachableSuccessorCheckDepth, 0, 0);
  dword_25795E6A8 = 0;
  qword_25795E6B0 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_25795E6B8 = 0;
  MaxDeoptOrUnreachableSuccessorCheckDepth = (uint64_t)off_251C12270;
  qword_25795E6C0 = (uint64_t)&off_251C121B0;
  qword_25795E6C8 = (uint64_t)&off_251C17200;
  qword_25795E6E0 = (uint64_t)&qword_25795E6C8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"max-deopt-or-unreachable-succ-check-depth", 0x29uLL);
  dword_25795E6A8 = 8;
  byte_25795E6BC = 1;
  dword_25795E6B8 = 8;
  word_25795E632 = word_25795E632 & 0xFF9F | 0x20;
  qword_25795E648 = (uint64_t)"Set the maximum path length when checking whether a basic block is followed by a block that"
                             " either has a terminating deoptimizing call or is terminated with an unreachable";
  unk_25795E650 = 171;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&MaxDeoptOrUnreachableSuccessorCheckDepth);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &MaxDeoptOrUnreachableSuccessorCheckDepth, &dword_24A800000);
}

uint64_t llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>::getHashValue(_DWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = (a1[2] >> 4) ^ (a1[2] >> 9);
  v2 = (v1 | ((unint64_t)((*a1 >> 4) ^ (*a1 >> 9)) << 32)) + ~(v1 << 32);
  v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
}

void llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::destroyAll(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = (_QWORD *)(a1 + 8);
    v1 = 4;
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 16);
    if (!v1)
      return;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v3 = &v2[9 * v1];
  do
  {
    if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      for (i = 0; i != -8; i -= 4)
      {
        v5 = (_QWORD *)v2[i + 5];
        if (&v2[i + 7] != v5)
          free(v5);
      }
    }
    v2 += 9;
  }
  while (v2 != v3);
}

unint64_t llvm::DbgVariableIntrinsic::classof(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36), v2 <= 0x3B))
  {
    return (0xB00000000000000uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

void llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * a2 - 8 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

unsigned int *llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::move_iterator<llvm::BasicBlock **>,void>(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

double llvm::Module::setSourceFileName(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 200) = v12;
  return result;
}

double llvm::Module::setTargetTriple(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 224) = v12;
  return result;
}

void llvm::Module::setModuleInlineAsm(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  uint64_t v10;
  char *v11;
  __int128 __dst;
  unint64_t v13;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v13 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v13) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 104) = v13;
  if (*(char *)(a1 + 111) < 0)
  {
    v10 = *(_QWORD *)(a1 + 96);
    if (!v10)
      return;
    v11 = (char *)*v9;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 111);
    if (!*(_BYTE *)(a1 + 111))
      return;
    v11 = (char *)(a1 + 88);
  }
  if (v11[v10 - 1] != 10)
    std::string::push_back((std::string *)(a1 + 88), 10);
}

uint64_t llvm::GlobalIFunc::setResolver(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v4;
    *v4 = v2;
  }
  return result;
}

unsigned int *llvm::IRBuilderBase::SetInsertPoint(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MDNode *v6;
  llvm::MDNode *v7;

  *((_QWORD *)result + 6) = a2;
  *((_QWORD *)result + 7) = a3;
  if (a2 + 40 != a3)
  {
    v3 = result;
    v4 = a3 - 24;
    if (!a3)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    v7 = (llvm::MDNode *)v5;
    if (v5)
    {
      llvm::MetadataTracking::track((uint64_t)&v7, v5, 2);
      v6 = v7;
    }
    else
    {
      v6 = 0;
    }
    result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(v3, 0, v6);
    if (v7)
      return (unsigned int *)llvm::MetadataTracking::untrack((uint64_t)&v7, (uint64_t)v7);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::BasicBlock *>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 8);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_LCSSA_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&qword_25795E6F0, 0, 0);
  qword_25795E770 = 0;
  byte_25795E781 = 0;
  qword_25795E778 = (uint64_t)&off_251C12500;
  qword_25795E6F0 = (uint64_t)off_251C13488;
  qword_25795E788 = (uint64_t)&off_251C12520;
  qword_25795E790 = (uint64_t)&off_251C134F0;
  qword_25795E7A8 = (uint64_t)&qword_25795E790;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-loop-lcssa", 0x11uLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_25795E770, (uint64_t)&qword_25795E6F0, _MergedGlobals_4);
  word_25795E6FA = word_25795E6FA & 0xFF9F | 0x20;
  qword_25795E710 = (uint64_t)"Verify loop lcssa form (time consuming)";
  unk_25795E718 = 39;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795E6F0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_25795E6F0, &dword_24A800000);
}

uint64_t llvm::DbgVariableIntrinsic::setExpression(llvm::DbgVariableIntrinsic *this, llvm::DIExpression *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *((_QWORD *)a2 + 1);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = llvm::MetadataAsValue::get(v4, a2);
  return llvm::CallBase::setArgOperand((uint64_t)this, 2u, v5);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::next[abi:nn180100]<llvm::generic_gep_type_iterator<llvm::Use const*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v4[1] = a2;
  if (a3 >= 1)
  {
    v3 = a3 + 1;
    do
    {
      llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(v4);
      --v3;
    }
    while (v3 > 1);
  }
}

_QWORD *llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(_QWORD *a1)
{
  unint64_t IndexedType;
  int v3;
  unint64_t v4;

  IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)a1);
  v3 = *(unsigned __int8 *)(IndexedType + 8);
  if (IndexedType && v3 == 17 || IndexedType && (v3 & 0xFE) == 0x12)
  {
    v4 = *(_QWORD *)(IndexedType + 24) | 4;
  }
  else if (v3 == 16)
  {
    v4 = IndexedType & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    v4 = 0;
  }
  a1[1] = v4;
  *a1 += 32;
  return a1;
}

BOOL llvm::DbgDeclareInst::classof(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 57;
}

BOOL llvm::ConstrainedFPIntrinsic::classof(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 80) < 0x28;
}

uint64_t llvm::CallBase::setArgOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  v4 = (_QWORD *)(v3 + 32 * a2);
  v5 = v4;
  if (*v4)
  {
    v7 = (_QWORD *)v4[2];
    v6 = v4 + 2;
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v5 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    v12 = v3 + 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v5;
  }
  return result;
}

uint64_t llvm::InvokeInst::setNormalDest(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v3 = *(_QWORD *)(result - 88);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 80);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 88) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t SplatValue;
  int v10;
  llvm::Type *v11;
  char v12;
  uint64_t AggregateElement;
  int v14;
  unsigned int v15;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = (llvm::Constant *)((char *)a2 + 24);
    v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
LABEL_5:
      v6 = v5 == 0;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (!v8)
  {
LABEL_28:
    v12 = 0;
    return v12 & 1;
  }
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v7 + 8) == 18)
    {
      v10 = *(_DWORD *)(v7 + 32);
      if (v10)
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v11);
          if (!AggregateElement)
            break;
          v14 = *(unsigned __int8 *)(AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16)
              goto LABEL_28;
            v15 = *(_DWORD *)(AggregateElement + 32);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(AggregateElement + 24)) != v15)
                goto LABEL_28;
            }
            else if (*(_QWORD *)(AggregateElement + 24))
            {
              goto LABEL_28;
            }
            v12 = 1;
          }
          v11 = (llvm::Type *)((_DWORD)v11 + 1);
          if (v10 == (_DWORD)v11)
            return v12 & 1;
        }
      }
    }
    goto LABEL_28;
  }
  v4 = *(_DWORD *)(SplatValue + 32);
  if (v4 <= 0x40)
  {
    v5 = *(_QWORD *)(SplatValue + 24);
    goto LABEL_5;
  }
  v3 = (llvm::APInt *)(SplatValue + 24);
LABEL_30:
  v6 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
LABEL_31:
  v12 = v6;
  return v12 & 1;
}

uint64_t llvm::PatternMatch::undef_match::check(llvm::PatternMatch::undef_match *this, const llvm::Value *a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void *v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  _BYTE v24[16];
  char v25;
  const void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x24BDAC8D0];
  v2 = (*((_BYTE *)this + 16) - 11);
  if (v2 < 2)
    return 1;
  if (v2 < 0xFD)
    return 0;
  v19 = v23;
  v20 = v23;
  v21 = 8;
  v22 = 0;
  v27 = v29;
  v28 = 0x800000000;
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (char *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      goto LABEL_34;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (char *)this - 32 * v5;
    if (!v5)
      goto LABEL_34;
  }
  v7 = 32 * v5;
  while (1)
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)v6 + 16);
    if ((v8 - 11) >= 2)
      break;
LABEL_17:
    v6 += 32;
    v7 -= 32;
    if (!v7)
    {
      v10 = v28;
      while (v10)
      {
        while (1)
        {
          v11 = v27[--v10];
          LODWORD(v28) = v10;
          v12 = *(_DWORD *)(v11 + 20);
          if ((v12 & 0x40000000) == 0)
            break;
          v14 = *(_QWORD *)(v11 - 8);
          v13 = v12 & 0x7FFFFFF;
          if (!v13)
            goto LABEL_21;
LABEL_24:
          v15 = 32 * v13;
          do
          {
            v16 = *(unsigned __int8 *)(*(_QWORD *)v14 + 16);
            if ((v16 - 11) >= 2)
            {
              if ((v16 - 8) >= 3)
                v17 = 0;
              else
                v17 = *(const void **)v14;
              v26 = v17;
              if (!v17)
                goto LABEL_35;
              llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v19, v17, (uint64_t)v24);
              if (v25)
                llvm::SmallVectorImpl<llvm::ConstantAggregate const*>::emplace_back<llvm::ConstantAggregate const*&>((unsigned int *)&v27, (uint64_t *)&v26);
            }
            v14 += 32;
            v15 -= 32;
          }
          while (v15);
          v10 = v28;
          if (!(_DWORD)v28)
            goto LABEL_34;
        }
        v13 = v12 & 0x7FFFFFF;
        v14 = v11 - 32 * v13;
        if (v13)
          goto LABEL_24;
LABEL_21:
        ;
      }
LABEL_34:
      v3 = 1;
      goto LABEL_36;
    }
  }
  if ((v8 - 8) >= 3)
    v9 = 0;
  else
    v9 = *(const void **)v6;
  v26 = v9;
  if (v9)
  {
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v19, v9, (uint64_t)v24);
    if (v25)
      llvm::SmallVectorImpl<llvm::ConstantAggregate const*>::emplace_back<llvm::ConstantAggregate const*&>((unsigned int *)&v27, (uint64_t *)&v26);
    goto LABEL_17;
  }
LABEL_35:
  v3 = 0;
LABEL_36:
  if (v27 != v29)
    free(v27);
  if (v20 != v19)
    free(v20);
  return v3;
}

uint64_t llvm::SmallVectorImpl<llvm::ConstantAggregate const*>::emplace_back<llvm::ConstantAggregate const*&>(unsigned int *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = a1[2];
  if (v3 >= a1[3])
  {
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a1, *a2);
    v4 = a1[2];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = *a2;
    v4 = v3 + 1;
    a1[2] = v4;
  }
  return *(_QWORD *)a1 + 8 * v4 - 8;
}

uint64_t llvm::PatternMatch::apint_match::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  uint64_t result;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
    goto LABEL_3;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    result = llvm::Constant::getSplatValue(a2, (llvm::Type *)*(unsigned __int8 *)(a1 + 8));
    if (!result)
      return result;
    a2 = (llvm::Constant *)result;
    if (*(_BYTE *)(result + 16) == 16)
    {
LABEL_3:
      **(_QWORD **)a1 = (char *)a2 + 24;
      return 1;
    }
  }
  return 0;
}

BOOL llvm::DbgInfoIntrinsic::classof(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) & 0xFFFFFFFC) == 56;
}

unsigned int *llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 5);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 32;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 5);
  return result;
}

unint64_t llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t UniqueInteger;
  unsigned int *v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) == 0 || !v2)
  {
    UniqueInteger = llvm::Constant::getUniqueInteger(**(llvm::Constant ***)a1);
    if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
      v4 = *(unsigned int **)UniqueInteger;
    else
      v4 = (unsigned int *)UniqueInteger;
    return *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * *v4);
  }
  return v2;
}

uint64_t _GLOBAL__sub_I_Local_cpp()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_5, 0, 0);
  byte_25795E830 = 0;
  qword_25795E838 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_25795E840 = 0;
  _MergedGlobals_5 = (uint64_t)off_251C123A8;
  qword_25795E848 = (uint64_t)&off_251C12520;
  qword_25795E850 = (uint64_t)&off_251C12410;
  qword_25795E868 = (uint64_t)&qword_25795E850;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"phicse-debug-hash", 0x11uLL);
  byte_25795E830 = 0;
  word_25795E840 = 256;
  word_25795E7BA = word_25795E7BA & 0xFF9F | 0x20;
  qword_25795E7D0 = (uint64_t)"Perform extra assertion checking to verify that PHINodes's hash function is well-behaved w."
                             "r.t. its isEqual predicate";
  unk_25795E7D8 = 117;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_5);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_5, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_25795E870, 0, 0);
  dword_25795E8F0 = 0;
  qword_25795E8F8 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_25795E900 = 0;
  qword_25795E870 = (uint64_t)off_251C12270;
  qword_25795E908 = (uint64_t)&off_251C121B0;
  qword_25795E910[0] = &off_251C17200;
  qword_25795E928 = (uint64_t)qword_25795E910;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"phicse-num-phi-smallsize", 0x18uLL);
  dword_25795E8F0 = 32;
  byte_25795E904 = 1;
  dword_25795E900 = 32;
  word_25795E87A = word_25795E87A & 0xFF9F | 0x20;
  qword_25795E890 = (uint64_t)"When the basic block contains not more than this number of PHI nodes, perform a (faster!) e"
                             "xhaustive search instead of set-driven one.";
  unk_25795E898 = 134;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795E870);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795E870, &dword_24A800000);
}

uint64_t *llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t *result;
  char *v9;
  uint64_t *v10;
  _BYTE v11[32];
  __int16 v12;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 96))(*((_QWORD *)this + 9));
  if (!result)
  {
    v12 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_DWORD *)v9 + 21) = *((_DWORD *)v9 + 21) & 0x38000000 | 2;
    v10 = (uint64_t *)(v9 + 64);
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 4) = 0;
    *((_QWORD *)v9 + 5) = 0;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v9 + 64), a2, a3, (const llvm::Twine *)v11, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v10, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t *result;
  uint64_t *v9;
  _BYTE v10[32];
  __int16 v11;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 16))(*((_QWORD *)this + 9), 28, a2, a3);
  if (!result)
  {
    v11 = 257;
    v9 = (uint64_t *)llvm::BinaryOperator::Create(28, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t *result;
  uint64_t *v9;
  _BYTE v10[32];
  __int16 v11;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 16))(*((_QWORD *)this + 9), 29, a2, a3);
  if (!result)
  {
    v11 = 257;
    v9 = (uint64_t *)llvm::BinaryOperator::Create(29, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t *result;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 32))(*((_QWORD *)this + 9), 17, a2, a3);
  if (!result)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 17, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t *result;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 32))(*((_QWORD *)this + 9), 15, a2, a3);
  if (!result)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 15, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, _QWORD *a2, uint64_t a3, int *a4, llvm::Type *a5, uint64_t a6)
{
  uint64_t *result;
  char *v13;
  uint64_t *v14;
  _BYTE v15[32];
  __int16 v16;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v13 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v13 + 21) = *((_DWORD *)v13 + 21) & 0x38000000 | 2;
    v14 = (uint64_t *)(v13 + 64);
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = v13 + 64;
    *((_QWORD *)v13 + 4) = 0;
    *((_QWORD *)v13 + 5) = 0;
    *((_QWORD *)v13 + 6) = 0;
    *((_QWORD *)v13 + 7) = v13 + 64;
    v16 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::Value *)(v13 + 64), a2, a3, a4, a5, (const llvm::Twine *)v15, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v14, a6);
  }
  return result;
}

void llvm::SmallVectorImpl<int>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 4);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 4 * v2), 4 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::Type::isSized(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 == 13 || v2 < 6 && ((0x2Fu >> v2) & 1) != 0)
    return 1;
  v3 = v2 & 0xFE;
  v4 = v3 == 10 || (v2 & 0xFFFFFFFD) == 4;
  if (v4 || v2 == 15)
    return 1;
  if (v3 == 16 || v3 == 18 || v2 == 21)
    return llvm::Type::isSizedDerivedType(a1, a2);
  else
    return 0;
}

llvm::Value *llvm::GetElementPtrInst::Create(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4, const llvm::Twine *a5, uint64_t *a6)
{
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Type **v16;
  uint64_t v17;
  llvm::Type *v18;

  v12 = (a4 + 1);
  v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50, (int)a4 + 1);
  llvm::GetElementPtrInst::getGEPReturnType(TypeAtIndex, a2, a3, a4);
  llvm::Instruction::Instruction((uint64_t)v13, v14, 34, (uint64_t)v13 - 32 * v12, v12, a6);
  *((_QWORD *)v13 + 8) = TypeAtIndex;
  if (a4)
  {
    v16 = (llvm::Type **)((char *)a3 + 8);
    v17 = 8 * a4 - 8;
    do
    {
      if (!v17)
        break;
      v18 = *v16++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v18, v15);
      v17 -= 8;
    }
    while (TypeAtIndex);
  }
  *((_QWORD *)v13 + 9) = TypeAtIndex;
  llvm::GetElementPtrInst::init(v13, (uint64_t)a2, (uint64_t *)a3, a4, a5);
  return v13;
}

double llvm::GetElementPtrInst::getGEPReturnType(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Value *v5;
  uint64_t v7;
  unsigned int v8;
  llvm::Type *v9;
  llvm::Type **v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t **v13;
  double result;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v5 = a3;
  v7 = *a2;
  v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    v7 = **(_QWORD **)(v7 + 16);
    v8 = *(_DWORD *)(v7 + 8);
  }
  v9 = (llvm::Type *)(v8 >> 8);
  if (a4)
  {
    v10 = (llvm::Type **)((char *)a3 + 8);
    v11 = 8 * a4 - 8;
    do
    {
      if (!v11)
        break;
      v12 = *v10++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v12, a3);
      v11 -= 8;
    }
    while (TypeAtIndex);
  }
  if (*(_QWORD *)(v7 + 24))
    v13 = (uint64_t **)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, v9);
  else
    v13 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v7, v9);
  v15 = *a2;
  if (*a2 && (*(_DWORD *)(v15 + 8) & 0xFE) == 0x12)
  {
    v16 = *(_DWORD *)(v15 + 8);
    return llvm::VectorType::get(v13, (llvm::Type *)(*(unsigned int *)(v15 + 32) | ((unint64_t)(v16 == 19) << 32)));
  }
  if (a4)
  {
    v17 = 8 * a4;
    while (1)
    {
      v15 = **(_QWORD **)v5;
      if (v15 && (*(_DWORD *)(v15 + 8) & 0xFE) == 18)
        break;
      v5 = (llvm::Value *)((char *)v5 + 8);
      v17 -= 8;
      if (!v17)
        return result;
    }
    v16 = *(_DWORD *)(v15 + 8);
    return llvm::VectorType::get(v13, (llvm::Type *)(*(unsigned int *)(v15 + 32) | ((unint64_t)(v16 == 19) << 32)));
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateExtractValue(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t *v11;
  _BYTE v12[32];
  __int16 v13;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 80))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v13 = 257;
    v11 = (uint64_t *)llvm::ExtractValueInst::Create(a2, a3, a4, (const llvm::Twine *)v12, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v11, a5);
  }
  return result;
}

llvm::Value *llvm::ExtractValueInst::Create(uint64_t *a1, unsigned int *a2, uint64_t a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  _DWORD *v10;
  llvm::Value *v11;
  llvm::Type *IndexedType;

  v10 = operator new(0x80uLL);
  v11 = (llvm::Value *)(v10 + 8);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  IndexedType = (llvm::Type *)llvm::ExtractValueInst::getIndexedType(*a1, a2, a3);
  llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)(v10 + 8), IndexedType, 64, (llvm::Value *)a1, a5);
  *((_QWORD *)v10 + 12) = v10 + 28;
  v10 += 24;
  *((_QWORD *)v10 + 1) = 0x400000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(v10, a2, &a2[a3]);
  llvm::Value::setName(v11, a4);
  return v11;
}

uint64_t llvm::UnaryInstruction::UnaryInstruction(llvm::UnaryInstruction *this, llvm::Type *a2, char a3, llvm::Value *a4, llvm::Instruction *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = (_QWORD *)((char *)this - 32);
  result = llvm::Instruction::Instruction((uint64_t)this, (uint64_t)a2, a3, (uint64_t)this - 32, 1, (uint64_t *)a5);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v8 = *(_QWORD *)(result - 24);
    if (v8)
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(result - 16);
  }
  *v6 = a4;
  if (a4)
  {
    v11 = *((_QWORD *)a4 + 1);
    v10 = (_QWORD *)((char *)a4 + 8);
    v9 = v11;
    *(_QWORD *)(result - 24) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v10;
    *v10 = v6;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_ScalarEvolutionExpander_cpp()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 4;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"When performing SCEV expansion only if it is cheap to do, this controls the budget "
                                     "that is considered cheap (default = 4)";
  v1.n128_u64[1] = 121;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&llvm::SCEVCheapExpansionBudget, "scev-cheap-expansion-budget", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::SCEVCheapExpansionBudget, &dword_24A800000);
}

_BYTE *llvm::SmallVectorImpl<llvm::BasicBlock *>::insert<llvm::BasicBlock * const*,void>(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + v11, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::move_iterator<llvm::BasicBlock **>,void>(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (a4 != v5)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

uint64_t *llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Constant **a2, const llvm::Twine *a3)
{
  llvm::Value *AllOnesValue;

  AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(*a2, (llvm::Type *)a2);
  return llvm::IRBuilderBase::CreateXor(this, (llvm::Value *)a2, AllOnesValue, a3);
}

uint64_t *llvm::IRBuilderBase::CreateXor(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t *result;
  uint64_t *v9;
  _BYTE v10[32];
  __int16 v11;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 16))(*((_QWORD *)this + 9), 30, a2, a3);
  if (!result)
  {
    v11 = 257;
    v9 = (uint64_t *)llvm::BinaryOperator::Create(30, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v10, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 4);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_DWORD *)(*(_QWORD *)v5 + 4 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

uint64_t llvm::BasicBlock::Create(_QWORD *a1, const llvm::Twine *a2, llvm::Function *a3, llvm::BasicBlock *a4)
{
  uint64_t v8;

  v8 = operator new();
  return llvm::BasicBlock::BasicBlock(v8, a1, a2, a3, a4);
}

uint64_t llvm::SwitchInst::setSuccessor(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (2 * a2) | 1u;
  v4 = *(_DWORD *)(result + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(result - 8);
  else
    v5 = result - 32 * (v4 & 0x7FFFFFF);
  v6 = v5 + 32 * v3;
  if (*(_QWORD *)v6)
  {
    **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)v6 = a3;
  if (a3)
  {
    v10 = *(_QWORD *)(a3 + 8);
    v8 = (_QWORD *)(a3 + 8);
    v9 = v10;
    v11 = v5 + 32 * v3;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned long long>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;

  if (*(unsigned int *)(a1 + 12) < a2)
    return (uint64_t)llvm::SmallVectorTemplateBase<unsigned long long,true>::growAndAssign(a1, a2, a3);
  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
    v5 = a2;
  else
    v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    v6 = *(uint64_t **)a1;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
  }
  v7 = v4 - a2;
  if (v4 < a2)
  {
    v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void *llvm::SmallVectorTemplateBase<unsigned long long,true>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void *result;
  _QWORD *v7;
  unint64_t v8;

  *(_DWORD *)(a1 + 8) = 0;
  result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
  if (a2)
  {
    v7 = *(_QWORD **)a1;
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

BOOL llvm::DbgAssignIntrinsic::classof(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 56;
}

uint64_t *llvm::IRBuilderBase::CreateIntCast(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type ***a3, llvm::Type *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  BOOL v8;
  uint64_t *v10;
  char v11;
  __int16 v12;

  if (*(llvm::Type ****)a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      v12 = 257;
      llvm::CastInst::CreateIntegerCast(a2, a3, a4, (BOOL)&v11, 0, a6);
      return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v10, (uint64_t)a5);
    }
    else
    {
      a2 = (llvm::Value *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 144))(*((_QWORD *)this + 9));
      if (a2)
        v8 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
      else
        v8 = 0;
      if (v8)
        return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)a2, (uint64_t)a5);
    }
  }
  return (uint64_t *)a2;
}

_DWORD *llvm::SwitchInst::CaseHandle::setValue(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(v2 - 8);
  else
    v4 = v2 - 32 * (v3 & 0x7FFFFFF);
  v5 = (2 * result[2] + 2) & 0xFFFFFFFE;
  v6 = v4 + 32 * v5;
  if (*(_QWORD *)v6)
  {
    **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)v6 = a2;
  if (a2)
  {
    v10 = *(_QWORD *)(a2 + 8);
    v8 = (_QWORD *)(a2 + 8);
    v9 = v10;
    v11 = v4 + 32 * v5;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  return result;
}

void llvm::APInt::lshr(const void **this@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  void *v7;
  unsigned int LimitedValue;

  v6 = *((unsigned int *)this + 2);
  *(_DWORD *)(a3 + 8) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *(_QWORD *)a3 = v7;
    memcpy(v7, *this, ((v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a3 = *this;
  }
  LimitedValue = llvm::APInt::getLimitedValue(a2, v6);
  llvm::APInt::lshrInPlace((llvm::APInt **)a3, LimitedValue);
}

uint64_t *llvm::IRBuilderBase::CreateShl(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, int a5, int a6)
{
  uint64_t *result;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 32))(*((_QWORD *)this + 9), 25, a2, a3);
  if (!result)
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 25, (uint64_t *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  return result;
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, _BYTE **a4, __n128 *a5)
{
  uint64_t v10;

  v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12500;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = off_251C123A8;
  *(_QWORD *)(v10 + 152) = &off_251C12520;
  *(_QWORD *)(v10 + 160) = &off_251C12410;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, _BYTE **a4, __n128 *a5)
{
  size_t v10;
  _BYTE *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v11 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v11;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

void std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17248;
  return result;
}

void std::__function::__func<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1},std::allocator<llvm::cl::opt<int,false,llvm::cl::parser<int>>::{lambda(int const&)#1}>,void ()(int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17248;
}

uint64_t _GLOBAL__sub_I_SimplifyCFG_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v12;
  int v13;
  int *v14;
  int v15;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_6, 0, 0);
  byte_25795E9B0 = 0;
  qword_25795E9B8 = (uint64_t)&off_251C12500;
  unk_25795E9C0 = 0;
  _MergedGlobals_6 = (uint64_t)off_251C123A8;
  qword_25795E9C8 = (uint64_t)&off_251C12520;
  qword_25795E9D0 = (uint64_t)&off_251C12410;
  qword_25795E9E8 = (uint64_t)&qword_25795E9D0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"simplifycfg-require-and-preserve-domtree", 0x28uLL);
  word_25795E93A = word_25795E93A & 0xFF9F | 0x20;
  qword_25795E950 = (uint64_t)"Temorary development switch used to gradually uplift SimplifyCFG into preserving DomTree,";
  unk_25795E958 = 89;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_6);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_6, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_25795E9F0, 0, 0);
  dword_25795EA70 = 0;
  qword_25795EA78 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_25795EA80 = 0;
  qword_25795E9F0 = (uint64_t)off_251C12270;
  qword_25795EA88 = (uint64_t)&off_251C121B0;
  qword_25795EA90[0] = &off_251C17200;
  qword_25795EAA8 = (uint64_t)qword_25795EA90;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"phi-node-folding-threshold", 0x1AuLL);
  word_25795E9FA = word_25795E9FA & 0xFF9F | 0x20;
  dword_25795EA70 = 2;
  byte_25795EA84 = 1;
  dword_25795EA80 = 2;
  qword_25795EA10 = (uint64_t)"Control the amount of phi node folding to perform (default = 2)";
  unk_25795EA18 = 63;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795E9F0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795E9F0, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&qword_25795EAB0, 0, 0);
  dword_25795EB30 = 0;
  qword_25795EB40 = 0;
  qword_25795EB38 = (uint64_t)&off_251C12458;
  qword_25795EAB0 = (uint64_t)off_251C12270;
  qword_25795EB48 = (uint64_t)&off_251C121B0;
  qword_25795EB50 = (uint64_t)&off_251C17200;
  qword_25795EB68 = (uint64_t)&qword_25795EB50;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"two-entry-phi-node-folding-threshold", 0x24uLL);
  word_25795EABA = word_25795EABA & 0xFF9F | 0x20;
  dword_25795EB30 = 4;
  BYTE4(qword_25795EB40) = 1;
  LODWORD(qword_25795EB40) = 4;
  qword_25795EAD0 = (uint64_t)"Control the maximal total instruction cost that we are willing to speculatively execute to "
                             "fold a 2-entry PHI node into a select (default = 4)";
  unk_25795EAD8 = 142;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795EAB0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795EAB0, &dword_24A800000);
  llvm::cl::Option::Option((uint64_t)&qword_25795EB70, 0, 0);
  byte_25795EBF0 = 0;
  qword_25795EC00 = 0;
  qword_25795EBF8 = (uint64_t)&off_251C12500;
  qword_25795EB70 = (uint64_t)off_251C123A8;
  qword_25795EC08 = (uint64_t)&off_251C12520;
  qword_25795EC10 = (uint64_t)&off_251C12410;
  qword_25795EC28 = (uint64_t)&qword_25795EC10;
  llvm::cl::Option::setArgStr((uint64_t)&qword_25795EB70, (uint64_t *)"simplifycfg-hoist-common", 0x18uLL);
  word_25795EB7A = word_25795EB7A & 0xFF9F | 0x20;
  byte_25795EBF0 = 1;
  LOWORD(qword_25795EC00) = 257;
  qword_25795EB90 = (uint64_t)"Hoist common instructions up to the parent block";
  qword_25795EB98 = 48;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795EB70);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795EB70, &dword_24A800000);
  v3 = llvm::cl::Option::Option((uint64_t)&qword_25795EC30, 0, 0);
  dword_25795ECB0 = 0;
  qword_25795ECC0 = 0;
  qword_25795ECB8 = (uint64_t)&off_251C12458;
  qword_25795EC30 = (uint64_t)off_251C12270;
  qword_25795ECC8 = (uint64_t)&off_251C121B0;
  qword_25795ECD0 = (uint64_t)&off_251C17200;
  qword_25795ECE8 = (uint64_t)&qword_25795ECD0;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"simplifycfg-hoist-common-skip-limit", 0x23uLL);
  word_25795EC3A = word_25795EC3A & 0xFF9F | 0x20;
  dword_25795ECB0 = 20;
  BYTE4(qword_25795ECC0) = 1;
  LODWORD(qword_25795ECC0) = 20;
  qword_25795EC50 = (uint64_t)"Allow reordering across at most this many instructions when hoisting";
  qword_25795EC58 = 68;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795EC30);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795EC30, &dword_24A800000);
  v4 = llvm::cl::Option::Option((uint64_t)&qword_25795ECF0, 0, 0);
  byte_25795ED70 = 0;
  qword_25795ED80 = 0;
  qword_25795ED78 = (uint64_t)&off_251C12500;
  qword_25795ECF0 = (uint64_t)off_251C123A8;
  qword_25795ED88 = (uint64_t)&off_251C12520;
  qword_25795ED90 = (uint64_t)&off_251C12410;
  qword_25795EDA8 = (uint64_t)&qword_25795ED90;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"simplifycfg-sink-common", 0x17uLL);
  word_25795ECFA = word_25795ECFA & 0xFF9F | 0x20;
  byte_25795ED70 = 1;
  LOWORD(qword_25795ED80) = 257;
  qword_25795ED10 = (uint64_t)"Sink common instructions down to the end block";
  qword_25795ED18 = 46;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795ECF0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795ECF0, &dword_24A800000);
  v15 = 1;
  LOBYTE(v13) = 1;
  v14 = &v13;
  v12.n128_u64[0] = (unint64_t)"Hoist conditional stores if an unconditional store precedes";
  v12.n128_u64[1] = 59;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((llvm::cl::Option *)&unk_25795EDB0, "simplifycfg-hoist-cond-stores", &v15, (_BYTE **)&v14, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_25795EDB0, &dword_24A800000);
  v15 = 1;
  LOBYTE(v13) = 1;
  v14 = &v13;
  v12.n128_u64[0] = (unint64_t)"Hoist conditional stores even if an unconditional store does not precede - hoist m"
                                      "ultiple conditional stores into a single predicated store";
  v12.n128_u64[1] = 139;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((llvm::cl::Option *)&unk_25795EE70, "simplifycfg-merge-cond-stores", &v15, (_BYTE **)&v14, &v12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_25795EE70, &dword_24A800000);
  v5 = llvm::cl::Option::Option((uint64_t)&qword_25795EF30, 0, 0);
  byte_25795EFB0 = 0;
  qword_25795EFC0 = 0;
  qword_25795EFB8 = (uint64_t)&off_251C12500;
  qword_25795EF30 = (uint64_t)off_251C123A8;
  qword_25795EFC8 = (uint64_t)&off_251C12520;
  qword_25795EFD0 = (uint64_t)&off_251C12410;
  qword_25795EFE8 = (uint64_t)&qword_25795EFD0;
  llvm::cl::Option::setArgStr(v5, (uint64_t *)"simplifycfg-merge-cond-stores-aggressively", 0x2AuLL);
  word_25795EF3A = word_25795EF3A & 0xFF9F | 0x20;
  byte_25795EFB0 = 0;
  LOWORD(qword_25795EFC0) = 256;
  qword_25795EF50 = (uint64_t)"When merging conditional stores, do so even if the resultant basic blocks are unlikely to b"
                             "e if-converted as a result";
  qword_25795EF58 = 117;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795EF30);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795EF30, &dword_24A800000);
  v6 = llvm::cl::Option::Option((uint64_t)&qword_25795EFF0, 0, 0);
  byte_25795F070 = 0;
  qword_25795F080 = 0;
  qword_25795F078 = (uint64_t)&off_251C12500;
  qword_25795EFF0 = (uint64_t)off_251C123A8;
  qword_25795F088 = (uint64_t)&off_251C12520;
  qword_25795F090 = (uint64_t)&off_251C12410;
  qword_25795F0A8 = (uint64_t)&qword_25795F090;
  llvm::cl::Option::setArgStr(v6, (uint64_t *)"speculate-one-expensive-inst", 0x1CuLL);
  word_25795EFFA = word_25795EFFA & 0xFF9F | 0x20;
  byte_25795F070 = 1;
  LOWORD(qword_25795F080) = 257;
  qword_25795F010 = (uint64_t)"Allow exactly one expensive instruction to be speculatively executed";
  qword_25795F018 = 68;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795EFF0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795EFF0, &dword_24A800000);
  llvm::cl::Option::Option((uint64_t)&qword_25795F0B0, 0, 0);
  dword_25795F130 = 0;
  qword_25795F140 = 0;
  qword_25795F138 = (uint64_t)&off_251C12458;
  qword_25795F0B0 = (uint64_t)off_251C12270;
  qword_25795F148 = (uint64_t)&off_251C121B0;
  qword_25795F150 = (uint64_t)&off_251C17200;
  qword_25795F168 = (uint64_t)&qword_25795F150;
  llvm::cl::Option::setArgStr((uint64_t)&qword_25795F0B0, (uint64_t *)"max-speculation-depth", 0x15uLL);
  word_25795F0BA = word_25795F0BA & 0xFF9F | 0x20;
  dword_25795F130 = 10;
  BYTE4(qword_25795F140) = 1;
  LODWORD(qword_25795F140) = 10;
  qword_25795F0D0 = (uint64_t)"Limit maximum recursion depth when calculating costs of speculatively executed instructions";
  qword_25795F0D8 = 91;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F0B0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795F0B0, &dword_24A800000);
  v7 = llvm::cl::Option::Option((uint64_t)&qword_25795F170, 0, 0);
  dword_25795F1F0 = 0;
  qword_25795F200 = 0;
  qword_25795F1F8 = (uint64_t)&off_251C12478;
  qword_25795F170 = (uint64_t)off_251C122D8;
  qword_25795F208 = (uint64_t)&off_251C12180;
  qword_25795F210 = (uint64_t)&off_251C17248;
  qword_25795F228 = (uint64_t)&qword_25795F210;
  llvm::cl::Option::setArgStr(v7, (uint64_t *)"simplifycfg-max-small-block-size", 0x20uLL);
  word_25795F17A = word_25795F17A & 0xFF9F | 0x20;
  dword_25795F1F0 = 10;
  BYTE4(qword_25795F200) = 1;
  LODWORD(qword_25795F200) = 10;
  qword_25795F190 = (uint64_t)"Max size of a block which is still considered small enough to thread through";
  qword_25795F198 = 76;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F170);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &qword_25795F170, &dword_24A800000);
  v8 = llvm::cl::Option::Option((uint64_t)&qword_25795F230, 0, 0);
  dword_25795F2B0 = 0;
  qword_25795F2C0 = 0;
  qword_25795F2B8 = (uint64_t)&off_251C12458;
  qword_25795F230 = (uint64_t)off_251C12270;
  qword_25795F2C8 = (uint64_t)&off_251C121B0;
  qword_25795F2D0 = (uint64_t)&off_251C17200;
  qword_25795F2E8 = (uint64_t)&qword_25795F2D0;
  llvm::cl::Option::setArgStr(v8, (uint64_t *)"simplifycfg-branch-fold-threshold", 0x21uLL);
  word_25795F23A = word_25795F23A & 0xFF9F | 0x20;
  dword_25795F2B0 = 2;
  BYTE4(qword_25795F2C0) = 1;
  LODWORD(qword_25795F2C0) = 2;
  qword_25795F250 = (uint64_t)"Maximum cost of combining conditions when folding branches";
  qword_25795F258 = 58;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F230);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795F230, &dword_24A800000);
  v9 = llvm::cl::Option::Option((uint64_t)&qword_25795F2F0, 0, 0);
  dword_25795F370 = 0;
  qword_25795F380 = 0;
  qword_25795F378 = (uint64_t)&off_251C12458;
  qword_25795F2F0 = (uint64_t)off_251C12270;
  qword_25795F388 = (uint64_t)&off_251C121B0;
  qword_25795F390 = (uint64_t)&off_251C17200;
  qword_25795F3A8 = (uint64_t)&qword_25795F390;
  llvm::cl::Option::setArgStr(v9, (uint64_t *)"simplifycfg-branch-fold-common-dest-vector-multiplier", 0x35uLL);
  word_25795F2FA = word_25795F2FA & 0xFF9F | 0x20;
  dword_25795F370 = 2;
  BYTE4(qword_25795F380) = 1;
  LODWORD(qword_25795F380) = 2;
  qword_25795F310 = (uint64_t)"Multiplier to apply to threshold when determining whether or not to fold branch to common d"
                             "estination when vector operations are present";
  qword_25795F318 = 136;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F2F0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_25795F2F0, &dword_24A800000);
  v10 = llvm::cl::Option::Option((uint64_t)&qword_25795F3B0, 0, 0);
  byte_25795F430 = 0;
  qword_25795F440 = 0;
  qword_25795F438 = (uint64_t)&off_251C12500;
  qword_25795F3B0 = (uint64_t)off_251C123A8;
  qword_25795F448 = (uint64_t)&off_251C12520;
  qword_25795F450 = (uint64_t)&off_251C12410;
  qword_25795F468 = (uint64_t)&qword_25795F450;
  llvm::cl::Option::setArgStr(v10, (uint64_t *)"simplifycfg-merge-compatible-invokes", 0x24uLL);
  word_25795F3BA = word_25795F3BA & 0xFF9F | 0x20;
  byte_25795F430 = 1;
  LOWORD(qword_25795F440) = 257;
  qword_25795F3D0 = (uint64_t)"Allow SimplifyCFG to merge invokes together when appropriate";
  qword_25795F3D8 = 60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F3B0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795F3B0, &dword_24A800000);
  v15 = 1;
  v13 = 16;
  v14 = &v13;
  v12.n128_u64[0] = (unint64_t)"Limit cases to analyze when converting a switch to select";
  v12.n128_u64[1] = 57;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&unk_25795F470, "max-switch-cases-per-result", &v15, &v14, &v12);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_25795F470, &dword_24A800000);
}

uint64_t *llvm::TrackingMDRef::reset(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;

  v3 = result;
  if (*result)
    result = (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)result, *result);
  *v3 = a2;
  if (a2)
    return (uint64_t *)llvm::MetadataTracking::track((uint64_t)v3, a2, 2);
  return result;
}

uint64_t _GLOBAL__sub_I_AliasAnalysis_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&qword_25795F538, 0, 0);
  byte_25795F5B8 = 0;
  qword_25795F5C0 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_25795F5C8 = 0;
  qword_25795F538 = (uint64_t)off_251C123A8;
  qword_25795F5D0 = (uint64_t)&off_251C12520;
  qword_25795F5D8 = (uint64_t)&off_251C12410;
  qword_25795F5F0 = (uint64_t)&qword_25795F5D8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-basic-aa", 0x10uLL);
  word_25795F542 = word_25795F542 & 0xFF9F | 0x20;
  byte_25795F5B8 = 0;
  word_25795F5C8 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F538);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795F538, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_AliasSetTracker_cpp()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 250;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The maximum number of pointers may-alias sets may contain before degradation";
  v1.n128_u64[1] = 76;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&SaturationThreshold, "alias-set-saturation-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &SaturationThreshold, &dword_24A800000);
}

void _GLOBAL__sub_I_AssumeBundleQueries_cpp(llvm::DebugCounter *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int64x2_t v23;
  std::string *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  int first;
  std::string __str;
  void *__p[4];
  std::__split_buffer<std::string> v31;

  v1 = llvm::DebugCounter::instance(a1);
  strcpy((char *)__p, "assume-queries-counter");
  HIBYTE(__p[2]) = 22;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_24AA2E190;
  strcpy(__str.__r_.__value_.__l.__data_, "Controls which assumes gets created");
  v31.__first_ = (std::__split_buffer<std::string>::pointer)__p;
  v2 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v1 + 3, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
  v3 = *((_DWORD *)v2 + 14);
  if (!v3)
  {
    v4 = v2;
    v5 = v1[8];
    v6 = v1[6];
    v7 = v1[7];
    v8 = (uint64_t)(v7 - v6) / 24;
    *((_DWORD *)v2 + 14) = v8 + 1;
    if (v7 >= v5)
    {
      if ((unint64_t)(v8 + 1) > 0xAAAAAAAAAAAAAAALL)
        abort();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v6) >> 3);
      v11 = 2 * v10;
      if (2 * v10 <= v8 + 1)
        v11 = v8 + 1;
      if (v10 >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v11;
      v31.__end_cap_.__value_ = (std::allocator<std::string> *)(v1 + 8);
      if (v12)
      {
        v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v1 + 8), v12);
        v15 = v14;
      }
      else
      {
        v13 = 0;
        v15 = 0;
      }
      v17 = (std::string *)&v13[24 * v8];
      if (SHIBYTE(__p[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v18 = *(_OWORD *)__p;
        v17->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      v20 = v1[6];
      v19 = v1[7];
      if (v19 == v20)
      {
        v23 = vdupq_n_s64(v19);
        v21 = (uint64_t)v17;
      }
      else
      {
        v21 = (uint64_t)v17;
        do
        {
          v22 = *(_OWORD *)(v19 - 24);
          *(_QWORD *)(v21 - 8) = *(_QWORD *)(v19 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(_QWORD *)(v19 - 16) = 0;
          *(_QWORD *)(v19 - 8) = 0;
          *(_QWORD *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while (v19 != v20);
        v23 = *((int64x2_t *)v1 + 3);
      }
      v16 = (uint64_t)&v17[1];
      v1[6] = v21;
      v1[7] = v16;
      *(int64x2_t *)&v31.__begin_ = v23;
      v24 = (std::string *)v1[8];
      v1[8] = (uint64_t)&v13[24 * v15];
      v31.__end_cap_.__value_ = v24;
      v31.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v31);
    }
    else
    {
      if (SHIBYTE(__p[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v7, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v9 = *(_OWORD *)__p;
        *(void **)(v7 + 16) = __p[2];
        *(_OWORD *)v7 = v9;
      }
      v16 = v7 + 24;
    }
    v1[7] = v16;
    v3 = *((_DWORD *)v4 + 14);
  }
  LODWORD(v31.__first_) = v3;
  v25 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v1, &v31);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = -1;
  *((_BYTE *)v25 + 32) = 0;
  v26 = v25 + 10;
  if (*((char *)v25 + 63) < 0)
    operator delete(*(void **)v26);
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  v27 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v1, &v31);
  std::string::operator=((std::string *)(v27 + 10), &__str);
  first = (int)v31.__first_;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  AssumeQueryCounter = first;
}

uint64_t _GLOBAL__sub_I_AssumptionCache_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&VerifyAssumptionCache, 0, 0);
  byte_25795F740 = 0;
  qword_25795F748 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_25795F750 = 0;
  VerifyAssumptionCache = (uint64_t)off_251C123A8;
  qword_25795F758 = (uint64_t)&off_251C12520;
  qword_25795F760 = (uint64_t)&off_251C12410;
  qword_25795F778 = (uint64_t)&qword_25795F760;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-assumption-cache", 0x17uLL);
  word_25795F6CA = word_25795F6CA & 0xFF9F | 0x20;
  qword_25795F6E0 = (uint64_t)"Enable verification of assumption cache";
  unk_25795F6E8 = 39;
  byte_25795F740 = 0;
  word_25795F750 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&VerifyAssumptionCache);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &VerifyAssumptionCache, &dword_24A800000);
}

BOOL llvm::APInt::slt(llvm::APInt *this, uint64_t a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v3 = this;
  v4 = *((_DWORD *)this + 2);
  if (v4 < 0x41)
    goto LABEL_7;
  v5 = v4 - llvm::APInt::getNumSignBits(this) + 1;
  v4 = *((_DWORD *)v3 + 2);
  if (v5 < 0x41)
  {
    if (v4 > 0x40)
    {
      v8 = **(_QWORD **)v3;
      return v8 < a2;
    }
LABEL_7:
    v8 = (uint64_t)(*(_QWORD *)v3 << -(char)v4) >> -(char)v4;
    return v8 < a2;
  }
  v6 = v4 - 1;
  if (v4 >= 0x41)
    v3 = (llvm::APInt *)(*(_QWORD *)v3 + 8 * (v6 >> 6));
  return (*(_QWORD *)v3 >> v6) & 1;
}

uint64_t _GLOBAL__sub_I_BasicAliasAnalysis_cpp()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_8, 0, 0);
  byte_25795F800 = 0;
  qword_25795F808 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_25795F810 = 0;
  _MergedGlobals_8 = (uint64_t)off_251C123A8;
  qword_25795F818 = (uint64_t)&off_251C12520;
  qword_25795F820 = (uint64_t)&off_251C12410;
  qword_25795F838 = (uint64_t)&qword_25795F820;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"basic-aa-recphi", 0xFuLL);
  word_25795F78A = word_25795F78A & 0xFF9F | 0x20;
  byte_25795F800 = 1;
  word_25795F810 = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_8);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_8, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_25795F840, 0, 0);
  byte_25795F8C0 = 0;
  qword_25795F8C8 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_25795F8D0 = 0;
  qword_25795F840 = (uint64_t)off_251C123A8;
  qword_25795F8D8 = (uint64_t)&off_251C12520;
  qword_25795F8E0[0] = &off_251C12410;
  qword_25795F8F8 = (uint64_t)qword_25795F8E0;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"basic-aa-separate-storage", 0x19uLL);
  word_25795F84A = word_25795F84A & 0xFF9F | 0x20;
  byte_25795F8C0 = 0;
  word_25795F8D0 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795F840);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_25795F840, &dword_24A800000);
}

void llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C17290;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C172F8;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C17290;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C172F8;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C17388;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C173F0;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C17388;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C173F0;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::cl::parser<llvm::GVDAGType>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C172F8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

unint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_251C17348;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<llvm::GVDAGType>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C172F8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::GVDAGType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::GVDAGType>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

unsigned int *llvm::cl::generic_parser_base::getExtraOptionNames(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)(*((_QWORD *)result + 1) + 24))
  {
    v3 = result;
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    if ((_DWORD)result)
    {
      v4 = (int)result;
      v5 = 0;
      do
      {
        v6 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v3 + 24))(v3, v5);
        result = llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, v6, v7);
        v5 = (v5 + 1);
      }
      while (v4 != (_DWORD)v5);
    }
  }
  return result;
}

_QWORD *llvm::cl::parser<llvm::PGOViewCountsType>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C173F0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

unint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_251C17440;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<llvm::PGOViewCountsType>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C173F0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::PGOViewCountsType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::PGOViewCountsType>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

unsigned int *llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  unsigned int *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - __src) >> 3);
  v8 = result[2];
  if (v7 + v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v7 + v8, 40);
    LODWORD(v8) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 40 * v8), __src, v6);
    LODWORD(v8) = v5[2];
  }
  v5[2] = v8 + v7;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1},std::allocator<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1}>,void ()(llvm::GVDAGType const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1},std::allocator<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1}>,void ()(llvm::GVDAGType const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17480;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1},std::allocator<llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::{lambda(llvm::GVDAGType const&)#1}>,void ()(llvm::GVDAGType const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17480;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::GVDAGType>::OptionInfo,false>::grow(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_25795FCF8, &unk_25795FD08, a1, 48, &v8);
  v2 = (_OWORD *)qword_25795FCF8;
  if ((_DWORD)qword_25795FD00)
  {
    v3 = qword_25795FCF8 + 48 * qword_25795FD00;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_251C17368;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_251C17348;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_25795FCF8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_25795FD08)
    free(v2);
  qword_25795FCF8 = (uint64_t)v1;
  HIDWORD(qword_25795FD00) = v7;
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17510;
  return result;
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17510;
}

void std::__function::__func<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1},std::allocator<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1}>,void ()(llvm::PGOViewCountsType const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1},std::allocator<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1}>,void ()(llvm::PGOViewCountsType const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C174C8;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1},std::allocator<llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::{lambda(llvm::PGOViewCountsType const&)#1}>,void ()(llvm::PGOViewCountsType const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C174C8;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::PGOViewCountsType>::OptionInfo,false>::grow(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_25795FF50, &unk_25795FF60, a1, 48, &v8);
  v2 = (_OWORD *)qword_25795FF50;
  if ((_DWORD)qword_25795FF58)
  {
    v3 = qword_25795FF50 + 48 * qword_25795FF58;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_251C17460;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_251C17440;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_25795FF50;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_25795FF60)
    free(v2);
  qword_25795FF50 = (uint64_t)v1;
  HIDWORD(qword_25795FF58) = v7;
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _BYTE **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10;

  v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12500;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = off_251C123A8;
  *(_QWORD *)(v10 + 152) = &off_251C12520;
  *(_QWORD *)(v10 + 160) = &off_251C12410;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, _BYTE **a3, _WORD *a4, __n128 *a5)
{
  size_t v10;
  _BYTE *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  v11 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

llvm::cl::Option *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4)
{
  uint64_t v8;

  v8 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_BYTE *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = off_251C12550;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)v8 = &off_251C12340;
  *(_QWORD *)(v8 + 192) = &off_251C12590;
  *(_QWORD *)(v8 + 200) = &off_251C17510;
  *(_QWORD *)(v8 + 224) = v8 + 200;
  llvm::cl::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>,char [20],llvm::cl::OptionHidden,llvm::cl::desc>(v8, a2, a3, a4);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>,char [20],llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, __n128 *a4)
{
  size_t v8;
  __n128 result;

  v8 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v8);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  return result;
}

void *llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(4 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, 4 * v10);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::moveFromOldBuckets(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
    result = (uint64_t)memset(*(void **)result, 255, 4 * v6);
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      v7 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)v5, a2, &v7);
      *v7 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 4 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 4 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucketImpl<unsigned int>(a1, (uint64_t)a2, a2, v10);
    v7 = (_DWORD *)result;
    *(_DWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t _GLOBAL__sub_I_BlockFrequencyInfo_cpp()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  const char **p_src;
  uint64_t v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  const char **v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  unint64_t v27;
  char *v29;
  char *v30;
  int v31;
  char v32;
  const char *__src;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  const char *v49;
  uint64_t v50;
  __n128 v51;
  _QWORD v52[22];

  v52[20] = *MEMORY[0x24BDAC8D0];
  __src = "none";
  v34 = 4;
  LODWORD(v35) = 0;
  *((_QWORD *)&v35 + 1) = "do not display graphs.";
  v36 = 22;
  v37 = "fraction";
  v38 = 8;
  v39 = 1;
  v40 = "display a graph using the fractional block frequency representation.";
  v41 = 68;
  v42 = "integer";
  v43 = 7;
  v44 = 2;
  v45 = "display a graph using the raw integer fractional block frequency representation.";
  v46 = 80;
  v47[0] = "count";
  v47[1] = 5;
  v48 = 3;
  v49 = "display a graph using the real profile count if available.";
  v50 = 58;
  v51.n128_u64[0] = (unint64_t)v52;
  v51.n128_u64[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v51, &__src, &v51);
  v0 = llvm::cl::Option::Option((uint64_t)&qword_25795FC50, 0, 0);
  dword_25795FCD0 = 0;
  qword_25795FCD8 = (uint64_t)&off_251C17348;
  unk_25795FCE0 = 0;
  qword_25795FC50 = (uint64_t)off_251C17290;
  qword_25795FCE8 = (uint64_t)&off_251C172F8;
  qword_25795FCF0 = (uint64_t)&qword_25795FC50;
  qword_25795FCF8 = (uint64_t)&unk_25795FD08;
  qword_25795FD00 = 0x800000000;
  qword_25795FE88 = (uint64_t)&off_251C17480;
  qword_25795FEA0 = (uint64_t)&qword_25795FE88;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"view-block-freq-propagation-dags", 0x20uLL);
  word_25795FC5A = word_25795FC5A & 0xFF9F | 0x20;
  qword_25795FC70 = (uint64_t)"Pop up a window to show a dag displaying how block frequencies propagation through the CFG.";
  unk_25795FC78 = 91;
  if (v51.n128_u32[2])
  {
    v1 = v51.n128_u64[0];
    v2 = v51.n128_u64[0] + 40 * v51.n128_u32[2];
    do
    {
      v3 = *(uint64_t **)v1;
      v4 = *(_QWORD *)(v1 + 8);
      v5 = *(_DWORD *)(v1 + 16);
      v6 = *(_OWORD *)(v1 + 24);
      __src = *(const char **)v1;
      v34 = v4;
      v35 = v6;
      v36 = (uint64_t)&off_251C17348;
      BYTE4(v37) = 1;
      LODWORD(v37) = v5;
      v7 = qword_25795FCF8;
      if (qword_25795FD00 >= HIDWORD(qword_25795FD00))
      {
        v12 = qword_25795FD00 + 1;
        if (qword_25795FCF8 <= (unint64_t)&__src
          && qword_25795FCF8 + 48 * (unint64_t)qword_25795FD00 > (unint64_t)&__src)
        {
          v29 = (char *)&__src - qword_25795FCF8;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::GVDAGType>::OptionInfo,false>::grow(v12);
          v7 = qword_25795FCF8;
          p_src = (const char **)&v29[qword_25795FCF8];
          goto LABEL_5;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::GVDAGType>::OptionInfo,false>::grow(v12);
        v7 = qword_25795FCF8;
      }
      p_src = &__src;
LABEL_5:
      v9 = v7 + 48 * qword_25795FD00;
      v10 = *((_OWORD *)p_src + 1);
      *(_OWORD *)v9 = *(_OWORD *)p_src;
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v9 + 32) = &off_251C17368;
      v11 = *((_DWORD *)p_src + 10);
      *(_BYTE *)(v9 + 44) = *((_BYTE *)p_src + 44);
      *(_DWORD *)(v9 + 40) = v11;
      *(_QWORD *)(v9 + 32) = &off_251C17348;
      LODWORD(qword_25795FD00) = qword_25795FD00 + 1;
      llvm::cl::AddLiteralOption(qword_25795FCF0, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795FC50);
  if ((_QWORD *)v51.n128_u64[0] != v52)
    free((void *)v51.n128_u64[0]);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::GVDAGType,false,llvm::cl::parser<llvm::GVDAGType>>::~opt, &qword_25795FC50, &dword_24A800000);
  v13 = llvm::cl::Option::Option((uint64_t)&qword_25795FA80, 0, 0);
  qword_25795FB08 = 0;
  qword_25795FB00 = 0;
  qword_25795FB10 = 0;
  qword_25795FB20 = 0;
  qword_25795FB30 = 0;
  qword_25795FB28 = 0;
  byte_25795FB38 = 0;
  qword_25795FB18 = (uint64_t)off_251C12550;
  qword_25795FA80 = (uint64_t)&off_251C12340;
  qword_25795FB40 = (uint64_t)&off_251C12590;
  qword_25795FB48 = (uint64_t)&off_251C17510;
  qword_25795FB60 = (uint64_t)&qword_25795FB48;
  llvm::cl::Option::setArgStr(v13, (uint64_t *)"view-bfi-func-name", 0x12uLL);
  word_25795FA8A = word_25795FA8A & 0xFF9F | 0x20;
  qword_25795FAA0 = (uint64_t)"The option to specify the name of the function whose CFG will be displayed.";
  unk_25795FAA8 = 75;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795FA80);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &qword_25795FA80, &dword_24A800000);
  v14 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_9, 0, 0);
  dword_25795F980 = 0;
  qword_25795F988 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_25795F990 = 0;
  _MergedGlobals_9 = (uint64_t)off_251C12270;
  qword_25795F998 = (uint64_t)&off_251C121B0;
  qword_25795F9A0 = (uint64_t)&off_251C17200;
  qword_25795F9B8 = (uint64_t)&qword_25795F9A0;
  llvm::cl::Option::setArgStr(v14, (uint64_t *)"view-hot-freq-percent", 0x15uLL);
  dword_25795F980 = 10;
  byte_25795F994 = 1;
  dword_25795F990 = 10;
  word_25795F90A = word_25795F90A & 0xFF9F | 0x20;
  qword_25795F920 = (uint64_t)"An integer in percent used to specify the hot blocks/edges to be displayed in red: a block "
                             "or edge whose frequency is no less than the max frequency of the function multiplied by this percent.";
  unk_25795F928 = 192;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_9);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_9, &dword_24A800000);
  __src = "none";
  v34 = 4;
  LODWORD(v35) = 0;
  *((_QWORD *)&v35 + 1) = "do not show.";
  v36 = 12;
  v37 = "graph";
  v38 = 5;
  v39 = 1;
  v40 = "show a graph.";
  v41 = 13;
  v42 = "text";
  v43 = 4;
  v44 = 2;
  v45 = "show in text.";
  v46 = 13;
  v51.n128_u64[0] = (unint64_t)v52;
  v51.n128_u64[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v51, &__src, v47);
  v15 = llvm::cl::Option::Option((uint64_t)&qword_25795FEA8, 0, 0);
  dword_25795FF28 = 0;
  qword_25795FF38 = 0;
  qword_25795FF30 = (uint64_t)&off_251C17440;
  qword_25795FEA8 = (uint64_t)off_251C17388;
  qword_25795FF48 = v15;
  qword_25795FF40 = (uint64_t)&off_251C173F0;
  qword_25795FF50 = (uint64_t)&unk_25795FF60;
  qword_25795FF58 = 0x800000000;
  qword_2579600E0 = (uint64_t)&off_251C174C8;
  qword_2579600F8 = (uint64_t)&qword_2579600E0;
  llvm::cl::Option::setArgStr(v15, (uint64_t *)"pgo-view-counts", 0xFuLL);
  word_25795FEB2 = word_25795FEB2 & 0xFF9F | 0x20;
  qword_25795FEC8 = (uint64_t)"A BOOLean option to show CFG dag or text with block profile counts and branch probabilities"
                             " right after PGO profile annotation step. The profile counts are computed using branch prob"
                             "abilities from the runtime profile data and block frequency propagation algorithm. To view "
                             "the raw counts from the profile, use option -pgo-view-raw-counts instead. To limit graph di"
                             "splay to only one function, use filtering option -view-bfi-func-name.";
  qword_25795FED0 = 433;
  if (v51.n128_u32[2])
  {
    v16 = v51.n128_u64[0];
    v17 = v51.n128_u64[0] + 40 * v51.n128_u32[2];
    do
    {
      v18 = *(uint64_t **)v16;
      v19 = *(_QWORD *)(v16 + 8);
      v20 = *(_DWORD *)(v16 + 16);
      v21 = *(_OWORD *)(v16 + 24);
      __src = *(const char **)v16;
      v34 = v19;
      v35 = v21;
      v36 = (uint64_t)&off_251C17440;
      BYTE4(v37) = 1;
      LODWORD(v37) = v20;
      v22 = qword_25795FF50;
      if (qword_25795FF58 >= HIDWORD(qword_25795FF58))
      {
        v27 = qword_25795FF58 + 1;
        if (qword_25795FF50 <= (unint64_t)&__src
          && qword_25795FF50 + 48 * (unint64_t)qword_25795FF58 > (unint64_t)&__src)
        {
          v30 = (char *)&__src - qword_25795FF50;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::PGOViewCountsType>::OptionInfo,false>::grow(v27);
          v22 = qword_25795FF50;
          v23 = (const char **)&v30[qword_25795FF50];
          goto LABEL_17;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::PGOViewCountsType>::OptionInfo,false>::grow(v27);
        v22 = qword_25795FF50;
      }
      v23 = &__src;
LABEL_17:
      v24 = v22 + 48 * qword_25795FF58;
      v25 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *(_OWORD *)(v24 + 16) = v25;
      *(_QWORD *)(v24 + 32) = &off_251C17460;
      v26 = *((_DWORD *)v23 + 10);
      *(_BYTE *)(v24 + 44) = *((_BYTE *)v23 + 44);
      *(_DWORD *)(v24 + 40) = v26;
      *(_QWORD *)(v24 + 32) = &off_251C17440;
      LODWORD(qword_25795FF58) = qword_25795FF58 + 1;
      llvm::cl::AddLiteralOption(qword_25795FF48, v18, v19);
      v16 += 40;
    }
    while (v16 != v17);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_25795FEA8);
  if ((_QWORD *)v51.n128_u64[0] != v52)
    free((void *)v51.n128_u64[0]);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::PGOViewCountsType,false,llvm::cl::parser<llvm::PGOViewCountsType>>::~opt, &qword_25795FEA8, &dword_24A800000);
  v32 = 0;
  __src = &v32;
  v31 = 1;
  v51.n128_u64[0] = (unint64_t)"Print the block frequency info.";
  v51.n128_u64[1] = 31;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_25795F9C0, "print-bfi", (_BYTE **)&__src, &v31, &v51);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_25795F9C0, &dword_24A800000);
  LODWORD(__src) = 1;
  v51.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose block frequency info is printed.";
  v51.n128_u64[1] = 85;
  llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_25795FB68, "print-bfi-func-name", &__src, &v51);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &unk_25795FB68, &dword_24A800000);
}

void llvm::cl::opt<double,false,llvm::cl::parser<double>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C17558;
  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C17558;
  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = parseDouble(a1, a5, a6, (double *)&v11);
  if (v8)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<double,false,llvm::cl::parser<double>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<double,false,llvm::cl::parser<double>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 160), a1, a2);
}

void llvm::cl::opt<double,false,llvm::cl::parser<double>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  double v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if (a3)
  {
    v3 = *(double *)(a1 + 128);
LABEL_5:
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &off_251C175C0;
    v5[1] = v4;
    llvm::cl::parser<double>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, (uint64_t)v5, a2, v3);
    return;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(double *)(a1 + 128);
    if (*(double *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<double,false,llvm::cl::parser<double>>::setDefault(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

BOOL llvm::cl::OptionValueCopy<double>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(double *)(a1 + 8) != *(double *)(a2 + 8);
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4)
{
  uint64_t v8;

  v8 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_251C12500;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = off_251C123A8;
  *(_QWORD *)(v8 + 152) = &off_251C12520;
  *(_QWORD *)(v8 + 160) = &off_251C12410;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  llvm::cl::apply<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>,char [20],llvm::cl::OptionHidden,llvm::cl::desc>(v8, a2, a3, a4);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void std::__function::__func<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1},std::allocator<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1}>,void ()(double const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1},std::allocator<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1}>,void ()(double const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C175E0;
  return result;
}

void std::__function::__func<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1},std::allocator<llvm::cl::opt<double,false,llvm::cl::parser<double>>::{lambda(double const&)#1}>,void ()(double const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C175E0;
}

uint64_t _GLOBAL__sub_I_BlockFrequencyInfoImpl_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v4;
  int v5;

  v0 = llvm::cl::Option::Option((uint64_t)&llvm::CheckBFIUnknownBlockQueries, 0, 0);
  byte_257965B78 = 0;
  qword_257965B80 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257965B88 = 0;
  llvm::CheckBFIUnknownBlockQueries = (uint64_t)off_251C123A8;
  qword_257965B90 = (uint64_t)&off_251C12520;
  qword_257965B98 = (uint64_t)&off_251C12410;
  qword_257965BB0 = (uint64_t)&qword_257965B98;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"check-bfi-unknown-block-queries", 0x1FuLL);
  byte_257965B78 = 0;
  word_257965B88 = 256;
  word_257965B02 = word_257965B02 & 0xFF9F | 0x20;
  qword_257965B18 = (uint64_t)"Check if block frequency is queried for an unknown block for debugging missed BFI updates";
  unk_257965B20 = 89;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::CheckBFIUnknownBlockQueries);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::CheckBFIUnknownBlockQueries, &dword_24A800000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Apply an iterative post-processing to infer correct BFI counts";
  v4.n128_u64[1] = 62;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&llvm::UseIterativeBFIInference, "use-iterative-bfi-inference", &v5, &v4);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::UseIterativeBFIInference, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&llvm::IterativeBFIMaxIterationsPerBlock, 0, 0);
  dword_257965CF8 = 0;
  qword_257965D00 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257965D08 = 0;
  llvm::IterativeBFIMaxIterationsPerBlock = (uint64_t)off_251C12270;
  qword_257965D10 = (uint64_t)&off_251C121B0;
  qword_257965D18 = (uint64_t)&off_251C17200;
  qword_257965D30 = (uint64_t)&qword_257965D18;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"iterative-bfi-max-iterations-per-block", 0x26uLL);
  dword_257965CF8 = 1000;
  byte_257965D0C = 1;
  dword_257965D08 = 1000;
  word_257965C82 = word_257965C82 & 0xFF9F | 0x20;
  qword_257965C98 = (uint64_t)"Iterative inference: maximum number of update iterations per block";
  unk_257965CA0 = 66;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::IterativeBFIMaxIterationsPerBlock);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::IterativeBFIMaxIterationsPerBlock, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&llvm::IterativeBFIPrecision, 0, 0);
  xmmword_257965DB8 = 0u;
  *(_OWORD *)&qword_257965DC8 = 0u;
  *((_QWORD *)&xmmword_257965DB8 + 1) = &off_251C175C0;
  llvm::IterativeBFIPrecision = (uint64_t)off_251C17558;
  qword_257965DD8 = (uint64_t)&off_251C12210;
  qword_257965DE0 = (uint64_t)&off_251C175E0;
  qword_257965DF8 = (uint64_t)&qword_257965DE0;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"iterative-bfi-precision", 0x17uLL);
  *(_QWORD *)&xmmword_257965DB8 = 0x3D719799812DEA11;
  byte_257965DD0 = 1;
  qword_257965DC8 = 0x3D719799812DEA11;
  word_257965D42 = word_257965D42 & 0xFF9F | 0x20;
  qword_257965D58 = (uint64_t)"Iterative inference: delta convergence precision; smaller values typically lead to better r"
                             "esults at the cost of worsen runtime";
  unk_257965D60 = 127;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::IterativeBFIPrecision);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<double,false,llvm::cl::parser<double>>::~opt, &llvm::IterativeBFIPrecision, &dword_24A800000);
}

uint64_t std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;

  v5 = a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((_DWORD *)a2 + 8), v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = v11;
      else
        v17 = a2;
      if (v9)
        v13 = v11 + 1;
      else
        v13 = a2;
      if (*v13)
        return result;
      v5 = v17;
      goto LABEL_42;
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (*((_DWORD *)v11 + 8) < a3)
      goto LABEL_16;
    v18 = *v7;
    v13 = result + 1;
    v5 = result + 1;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v5 = v18;
          v19 = *((_DWORD *)v18 + 8);
          if (v19 <= a3)
            break;
          v18 = (uint64_t *)*v18;
          v13 = v5;
          if (!*v5)
            goto LABEL_42;
        }
        if (v19 >= a3)
          return result;
        v18 = (uint64_t *)v18[1];
        if (!v18)
          goto LABEL_30;
      }
    }
LABEL_42:
    v23 = operator new(0x68uLL);
    v23[8] = *a4;
    *((_QWORD *)v23 + 5) = v23 + 14;
    *((_QWORD *)v23 + 6) = 0xC00000000;
    if (a4[4])
      llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)(v23 + 10), (uint64_t)(a4 + 2));
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v5;
    *v13 = (uint64_t)v23;
    v24 = *(_QWORD *)*v6;
    if (v24)
    {
      *v6 = v24;
      v23 = (_DWORD *)*v13;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], (uint64_t *)v23);
    ++v6[2];
    return result;
  }
  if (v8 >= a3)
    return result;
  v13 = a2 + 1;
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
      v5 = v13;
      v14 = v13;
    }
    while (v12);
  }
  else
  {
    v14 = a2;
    do
    {
      v20 = v14;
      v14 = (uint64_t *)v14[2];
    }
    while ((uint64_t *)*v14 != v20);
  }
  if (v14 == (uint64_t *)v7)
    goto LABEL_42;
  if (*((_DWORD *)v14 + 8) > a3)
    goto LABEL_42;
  v21 = *v7;
  v13 = result + 1;
  v5 = result + 1;
  if (!*v7)
    goto LABEL_42;
  while (1)
  {
    while (1)
    {
      v5 = v21;
      v22 = *((_DWORD *)v21 + 8);
      if (v22 <= a3)
        break;
      v21 = (uint64_t *)*v21;
      v13 = v5;
      if (!*v5)
        goto LABEL_42;
    }
    if (v22 >= a3)
      return result;
    v21 = (uint64_t *)v21[1];
    if (!v21)
    {
LABEL_30:
      v13 = v5 + 1;
      goto LABEL_42;
    }
  }
}

void std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(*a1);
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *v3;
        *v3 = 0;
        if (v4)
          std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)v3, v4);
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
}

uint64_t _GLOBAL__sub_I_BranchProbabilityInfo_cpp()
{
  uint64_t v0;
  uint64_t i;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t j;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t k;
  _BYTE *v12;
  uint64_t v13;
  uint64_t m;
  _BYTE *v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[48];
  _DWORD v21[2];
  __n128 v22;
  uint64_t v23;
  _BYTE v24[48];
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[48];
  int v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE v32[48];
  int v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  void *__src;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE v43[48];
  void **p_src;
  uint64_t v45;
  _QWORD v46[7];

  v46[6] = *MEMORY[0x24BDAC8D0];
  LOBYTE(__src) = 0;
  p_src = &__src;
  LODWORD(v41) = 1;
  v22.n128_u64[0] = (unint64_t)"Print the branch probability info.";
  v22.n128_u64[1] = 34;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_2579601B8, "print-bpi", (_BYTE **)&p_src, &v41, &v22);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_2579601B8, &dword_24A800000);
  LODWORD(p_src) = 1;
  v22.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose branch probability info is printed.";
  v22.n128_u64[1] = 88;
  llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_257960278, "print-bpi-func-name", &p_src, &v22);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &unk_257960278, &dword_24A800000);
  _MergedGlobals_10 = 0x5000000000000001;
  dword_257960108 = 805306368;
  __src = (void *)0x3000000050000000;
  p_src = (void **)v46;
  v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &__src, &v38);
  v22.n128_u32[0] = 33;
  v22.n128_u64[1] = (unint64_t)v24;
  v23 = 0xC00000000;
  if ((_DWORD)v45)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  v18 = (void *)__PAIR64__(HIDWORD(_MergedGlobals_10), dword_257960108);
  v41 = v43;
  v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v18, &v19);
  v25 = 32;
  v26 = v28;
  v27 = 0xC00000000;
  if ((_DWORD)v42)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  v0 = 0;
  qword_257960138 = 0;
  qword_257960130 = 0;
  qword_257960128 = (uint64_t)&qword_257960130;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_257960128, &qword_257960130, v22.n128_u32[v0], (__n128 *)((char *)&v22 + v0 * 4));
    v0 += 18;
  }
  while (v0 != 36);
  for (i = 0; i != -18; i -= 9)
  {
    v2 = (&v26)[i];
    if (&v28[i * 8] != v2)
      free(v2);
  }
  if (v41 != v43)
    free(v41);
  if (p_src != v46)
    free(p_src);
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_257960128, &dword_24A800000);
  qword_25796010C = 0x3000000050000000;
  v40 = 0x5000000030000000;
  p_src = (void **)v46;
  v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &v40, &v41);
  v22.n128_u32[0] = 32;
  v22.n128_u64[1] = (unint64_t)v24;
  v23 = 0xC00000000;
  if ((_DWORD)v45)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  v36 = qword_25796010C;
  v41 = v43;
  v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v36, &__src);
  v25 = 33;
  v26 = v28;
  v27 = 0xC00000000;
  if ((_DWORD)v42)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  v21[0] = HIDWORD(qword_25796010C);
  v21[1] = qword_25796010C;
  __src = v39;
  v38 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&__src, v21, &v22);
  v29 = 40;
  v30 = v32;
  v31 = 0xC00000000;
  if ((_DWORD)v38)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v30, (uint64_t)&__src);
  v17 = qword_25796010C;
  v18 = v20;
  v19 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v18, &v17, &v18);
  v33 = 38;
  v34[0] = &v35;
  v34[1] = 0xC00000000;
  if ((_DWORD)v19)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v34, (uint64_t)&v18);
  v3 = 0;
  qword_257960150 = 0;
  qword_257960148 = 0;
  qword_257960140 = (uint64_t)&qword_257960148;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_257960140, &qword_257960148, v22.n128_u32[v3], (__n128 *)((char *)&v22 + v3 * 4));
    v3 += 18;
  }
  while (v3 != 72);
  v4 = 288;
  do
  {
    v5 = *(_BYTE **)&v20[v4 - 8];
    if (&v20[v4 + 8] != v5)
      free(v5);
    v4 -= 72;
  }
  while (v4);
  if (v18 != v20)
    free(v18);
  if (__src != v39)
    free(__src);
  if (v41 != v43)
    free(v41);
  if (p_src != v46)
    free(p_src);
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_257960140, &dword_24A800000);
  v18 = (void *)__PAIR64__(qword_25796010C, HIDWORD(qword_25796010C));
  p_src = (void **)v46;
  v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &v18, &v19);
  v22.n128_u32[0] = 32;
  v22.n128_u64[1] = (unint64_t)v24;
  v23 = 0xC00000000;
  if ((_DWORD)v45)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  v40 = qword_25796010C;
  v41 = v43;
  v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v40, &v41);
  v25 = 33;
  v26 = v28;
  v27 = 0xC00000000;
  if ((_DWORD)v42)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  v36 = qword_25796010C;
  __src = v39;
  v38 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&__src, &v36, &__src);
  v29 = 38;
  v30 = v32;
  v31 = 0xC00000000;
  if ((_DWORD)v38)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v30, (uint64_t)&__src);
  v6 = 0;
  qword_257960168 = 0;
  qword_257960160 = 0;
  qword_257960158 = (uint64_t)&qword_257960160;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_257960158, &qword_257960160, v22.n128_u32[v6], (__n128 *)((char *)&v22 + v6 * 4));
    v6 += 18;
  }
  while (v6 != 54);
  for (j = 0; j != -27; j -= 9)
  {
    v8 = (&v30)[j];
    if (&v32[j * 8] != v8)
      free(v8);
  }
  if (__src != v39)
    free(__src);
  if (v41 != v43)
    free(v41);
  if (p_src != v46)
    free(p_src);
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_257960158, &dword_24A800000);
  v41 = (_BYTE *)__PAIR64__(qword_25796010C, HIDWORD(qword_25796010C));
  p_src = (void **)v46;
  v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &v41, &v42);
  v9 = 40;
  v22.n128_u32[0] = 40;
  v22.n128_u64[1] = (unint64_t)v24;
  v23 = 0xC00000000;
  if ((_DWORD)v45)
  {
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
    v9 = v22.n128_u32[0];
  }
  qword_257960180 = 0;
  qword_257960178 = 0;
  qword_257960170 = (uint64_t)&qword_257960178;
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_257960170, &qword_257960178, v9, &v22);
  if ((_BYTE *)v22.n128_u64[1] != v24)
    free((void *)v22.n128_u64[1]);
  if (p_src != v46)
    free(p_src);
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_257960170, &dword_24A800000);
  __src = (void *)__PAIR64__(qword_25796010C, HIDWORD(qword_25796010C));
  p_src = (void **)v46;
  v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &__src, &v38);
  v22.n128_u32[0] = 32;
  v22.n128_u64[1] = (unint64_t)v24;
  v23 = 0xC00000000;
  if ((_DWORD)v45)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  v18 = (void *)qword_25796010C;
  v41 = v43;
  v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v18, &v19);
  v25 = 33;
  v26 = v28;
  v27 = 0xC00000000;
  if ((_DWORD)v42)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  v10 = 0;
  qword_257960198 = 0;
  qword_257960190 = 0;
  qword_257960188 = (uint64_t)&qword_257960190;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_257960188, &qword_257960190, v22.n128_u32[v10], (__n128 *)((char *)&v22 + v10 * 4));
    v10 += 18;
  }
  while (v10 != 36);
  for (k = 0; k != -18; k -= 9)
  {
    v12 = (&v26)[k];
    if (&v28[k * 8] != v12)
      free(v12);
  }
  if (v41 != v43)
    free(v41);
  if (p_src != v46)
    free(p_src);
  __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_257960188, &dword_24A800000);
  qword_257960114 = 0x8007FFFF800;
  unk_25796011C = 0x3000000050000000;
  __src = (void *)0x8007FFFF800;
  p_src = (void **)v46;
  v45 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&p_src, &__src, &v38);
  v22.n128_u32[0] = 7;
  v22.n128_u64[1] = (unint64_t)v24;
  v23 = 0xC00000000;
  if ((_DWORD)v45)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v22.n128_i64[1], (uint64_t)&p_src);
  v18 = (void *)__PAIR64__(qword_257960114, HIDWORD(qword_257960114));
  v41 = v43;
  v42 = 0xC00000000;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)&v41, &v18, &v19);
  v25 = 8;
  v26 = v28;
  v27 = 0xC00000000;
  if ((_DWORD)v42)
    llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)&v26, (uint64_t)&v41);
  v13 = 0;
  qword_2579601B0 = 0;
  qword_2579601A8 = 0;
  qword_2579601A0 = (uint64_t)&qword_2579601A8;
  do
  {
    std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::__emplace_hint_unique_key_args<llvm::CmpInst::Predicate,std::pair<llvm::CmpInst::Predicate const,llvm::SmallVector<llvm::BranchProbability,12u>> const&>(&qword_2579601A0, &qword_2579601A8, v22.n128_u32[v13], (__n128 *)((char *)&v22 + v13 * 4));
    v13 += 18;
  }
  while (v13 != 36);
  for (m = 0; m != -18; m -= 9)
  {
    v15 = (&v26)[m];
    if (&v28[m * 8] != v15)
      free(v15);
  }
  if (v41 != v43)
    free(v41);
  if (p_src != v46)
    free(p_src);
  return __cxa_atexit((void (*)(void *))std::map<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>::~map[abi:nn180100], &qword_2579601A0, &dword_24A800000);
}

llvm::cl::Option *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, int **a5)
{
  uint64_t v10;

  v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12458;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = off_251C12270;
  *(_QWORD *)(v10 + 152) = &off_251C121B0;
  *(_QWORD *)(v10 + 160) = &off_251C17200;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, char *__s, _WORD *a3, __n128 *a4, int **a5)
{
  size_t v10;
  __n128 result;
  int v12;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  return result;
}

uint64_t _GLOBAL__sub_I_CFG_cpp()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of BBs to explore for reachability analysis";
  v3.n128_u64[1] = 54;
  v1 = 32;
  v2 = &v1;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&DefaultMaxBBsToExplore, "dom-tree-reachability-max-bbs-to-explore", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &DefaultMaxBBsToExplore, &dword_24A800000);
}

uint64_t llvm::MemIntrinsic::classof(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36) - 197, v2 <= 7))
  {
    return (0xADu >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_CaptureTracking_cpp()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Maximal number of uses to explore.";
  v3.n128_u64[1] = 34;
  v1 = 100;
  v2 = &v1;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&DefaultMaxUsesToExplore, "capture-tracking-max-uses-to-explore", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &DefaultMaxUsesToExplore, &dword_24A800000);
}

unint64_t llvm::PointerType::getWithSamePointeeType(uint64_t a1, llvm::Type *a2)
{
  if (*(_QWORD *)(a1 + 24))
    return llvm::PointerType::get(*(llvm::PointerType ***)(a1 + 24), a2);
  else
    return llvm::PointerType::get(*(llvm::PointerType **)a1, a2);
}

_QWORD *llvm::APInt::getLowBitsSet@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  llvm::APInt *v4;

  v4 = llvm::APInt::APInt(a3, this, 0, 0);
  return llvm::APInt::setBits(v4, 0, a2);
}

uint64_t _GLOBAL__sub_I_DependenceAnalysis_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_11, 0, 0);
  byte_257960560 = 0;
  qword_257960568 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257960570 = 0;
  _MergedGlobals_11 = (uint64_t)off_251C123A8;
  qword_257960578 = (uint64_t)&off_251C12520;
  qword_257960580 = (uint64_t)&off_251C12410;
  qword_257960598 = (uint64_t)&qword_257960580;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"da-delinearize", 0xEuLL);
  byte_257960560 = 1;
  word_257960570 = 257;
  word_2579604EA = word_2579604EA & 0xFF9F | 0x20;
  qword_257960500 = (uint64_t)"Try to delinearize array references.";
  unk_257960508 = 36;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_11);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_11, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_2579605A0, 0, 0);
  byte_257960620 = 0;
  qword_257960628 = (uint64_t)&off_251C12500;
  unk_257960630 = 0;
  qword_2579605A0 = (uint64_t)off_251C123A8;
  qword_257960638 = (uint64_t)&off_251C12520;
  qword_257960640[0] = &off_251C12410;
  qword_257960658 = (uint64_t)qword_257960640;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"da-disable-delinearization-checks", 0x21uLL);
  word_2579605AA = word_2579605AA & 0xFF9F | 0x20;
  qword_2579605C0 = (uint64_t)"Disable checks that try to statically verify validity of delinearized subscripts. Enabling "
                             "this option may result in incorrect dependence vectors for languages that allow the subscri"
                             "pt of one dimension to underflow or overflow into another dimension.";
  unk_2579605C8 = 250;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579605A0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_2579605A0, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&qword_257960660, 0, 0);
  dword_2579606E0 = 0;
  qword_2579606F0 = 0;
  qword_2579606E8 = (uint64_t)&off_251C12458;
  qword_257960660 = (uint64_t)off_251C12270;
  qword_2579606F8 = (uint64_t)&off_251C121B0;
  qword_257960700 = (uint64_t)&off_251C17200;
  qword_257960718 = (uint64_t)&qword_257960700;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"da-miv-max-level-threshold", 0x1AuLL);
  dword_2579606E0 = 7;
  BYTE4(qword_2579606F0) = 1;
  LODWORD(qword_2579606F0) = 7;
  word_25796066A = word_25796066A & 0xFF9F | 0x20;
  qword_257960680 = (uint64_t)"Maximum depth allowed for the recursive algorithm used to explore MIV direction vectors.";
  unk_257960688 = 88;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960660);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257960660, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_GlobalsModRef_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&EnableUnsafeGlobalsModRefAliasResults, 0, 0);
  byte_2579607A0 = 0;
  qword_2579607A8 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_2579607B0 = 0;
  EnableUnsafeGlobalsModRefAliasResults = (uint64_t)off_251C123A8;
  qword_2579607B8 = (uint64_t)&off_251C12520;
  qword_2579607C0 = (uint64_t)&off_251C12410;
  qword_2579607D8 = (uint64_t)&qword_2579607C0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-unsafe-globalsmodref-alias-results", 0x29uLL);
  byte_2579607A0 = 0;
  word_2579607B0 = 256;
  word_25796072A = word_25796072A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableUnsafeGlobalsModRefAliasResults);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableUnsafeGlobalsModRefAliasResults, &dword_24A800000);
}

uint64_t llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[](_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;

  v24 = *a2;
  v25 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>::try_emplace<unsigned int const&>((uint64_t)a1, &v24, &v25, (uint64_t)&v22);
  v4 = v22;
  if (v23)
  {
    v5 = *a2;
    v6 = a1[5];
    v7 = (_QWORD *)a1[4];
    if ((unint64_t)v7 >= v6)
    {
      v11 = a1[3];
      v12 = ((uint64_t)v7 - v11) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        abort();
      v14 = v6 - v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a1 + 5), v15);
      else
        v16 = 0;
      v17 = &v16[16 * v12];
      v18 = &v16[16 * v15];
      *(_QWORD *)v17 = v5;
      *((_QWORD *)v17 + 1) = 0;
      v8 = v17 + 16;
      v20 = (char *)a1[3];
      v19 = (char *)a1[4];
      if (v19 != v20)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
          v17 -= 16;
          v19 -= 16;
        }
        while (v19 != v20);
        v19 = (char *)a1[3];
      }
      a1[3] = v17;
      a1[4] = v8;
      a1[5] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v7 = v5;
      v7[1] = 0;
      v8 = v7 + 2;
    }
    a1[4] = v8;
    v10 = a1[3];
    v9 = (((unint64_t)v8 - v10) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v9;
  }
  else
  {
    v9 = *(_DWORD *)(v22 + 8);
    v10 = a1[3];
  }
  return v10 + 16 * v9 + 8;
}

uint64_t llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::find(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, &v4, &v5)|| v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
  {
    return *(_QWORD *)(a1 + 32);
  }
  else
  {
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>::try_emplace<unsigned int const&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::InsertIntoBucketImpl<llvm::Value const*>(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

llvm::cl::Option *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, int **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10;

  v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12458;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = off_251C12270;
  *(_QWORD *)(v10 + 152) = &off_251C121B0;
  *(_QWORD *)(v10 + 160) = &off_251C17200;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>,char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, int **a3, _WORD *a4, __n128 *a5)
{
  size_t v10;
  int v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  v11 = **a3;
  *(_DWORD *)(a1 + 128) = v11;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v11;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t _GLOBAL__sub_I_IndirectCallPromotionAnalysis_cpp()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v3;
  int v4;
  int v5;
  int *v6;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_12, 0, 0);
  dword_257960860 = 0;
  qword_257960868 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257960870 = 0;
  _MergedGlobals_12 = (uint64_t)off_251C12270;
  qword_257960878 = (uint64_t)&off_251C121B0;
  qword_257960880 = (uint64_t)&off_251C17200;
  qword_257960898 = (uint64_t)&qword_257960880;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"icp-remaining-percent-threshold", 0x1FuLL);
  dword_257960860 = 30;
  byte_257960874 = 1;
  dword_257960870 = 30;
  word_2579607EA = word_2579607EA & 0xFF9F | 0x20;
  qword_257960800 = (uint64_t)"The percentage threshold against remaining unpromoted indirect call count for the promotion";
  unk_257960808 = 91;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_12);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_12, &dword_24A800000);
  v4 = 1;
  v5 = 5;
  v6 = &v5;
  v3.n128_u64[0] = (unint64_t)"The percentage threshold against total count for the promotion";
  v3.n128_u64[1] = 62;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_2579608A0, "icp-total-percent-threshold", &v6, &v4, &v3);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_2579608A0, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257960960, 0, 0);
  dword_2579609E0 = 0;
  qword_2579609F0 = 0;
  qword_2579609E8 = (uint64_t)&off_251C12458;
  qword_257960960 = (uint64_t)off_251C12270;
  qword_2579609F8 = (uint64_t)&off_251C121B0;
  qword_257960A00 = (uint64_t)&off_251C17200;
  qword_257960A18 = (uint64_t)&qword_257960A00;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"icp-max-prom", 0xCuLL);
  dword_2579609E0 = 3;
  BYTE4(qword_2579609F0) = 1;
  LODWORD(qword_2579609F0) = 3;
  word_25796096A = word_25796096A & 0xFF9F | 0x20;
  qword_257960980 = (uint64_t)"Max number of promotions for a single indirect call callsite";
  unk_257960988 = 60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960960);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257960960, &dword_24A800000);
}

uint64_t llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_one,llvm::ConstantInt>::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t SplatValue;
  int v10;
  llvm::Type *v11;
  char v12;
  uint64_t AggregateElement;
  int v14;
  unsigned int v15;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = (llvm::Constant *)((char *)a2 + 24);
    v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
LABEL_5:
      v6 = v5 == 1;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (!v8)
  {
LABEL_28:
    v12 = 0;
    return v12 & 1;
  }
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v7 + 8) == 18)
    {
      v10 = *(_DWORD *)(v7 + 32);
      if (v10)
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v11);
          if (!AggregateElement)
            break;
          v14 = *(unsigned __int8 *)(AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16)
              goto LABEL_28;
            v15 = *(_DWORD *)(AggregateElement + 32);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(AggregateElement + 24)) != v15 - 1)
                goto LABEL_28;
            }
            else if (*(_QWORD *)(AggregateElement + 24) != 1)
            {
              goto LABEL_28;
            }
            v12 = 1;
          }
          v11 = (llvm::Type *)((_DWORD)v11 + 1);
          if (v10 == (_DWORD)v11)
            return v12 & 1;
        }
      }
    }
    goto LABEL_28;
  }
  v4 = *(_DWORD *)(SplatValue + 32);
  if (v4 <= 0x40)
  {
    v5 = *(_QWORD *)(SplatValue + 24);
    goto LABEL_5;
  }
  v3 = (llvm::APInt *)(SplatValue + 24);
LABEL_30:
  v6 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4 - 1;
LABEL_31:
  v12 = v6;
  return v12 & 1;
}

uint64_t llvm::PatternMatch::is_zero::match<llvm::Constant>(uint64_t a1, llvm::Constant *a2)
{
  char v4;

  if (!a2)
    return 0;
  if ((llvm::Constant::isNullValue(a2) & 1) != 0)
    return 1;
  return llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_zero_int,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&v4, a2);
}

uint64_t llvm::SmallVectorImpl<llvm::Constant *>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;

  if (*(unsigned int *)(a1 + 12) < a2)
    return (uint64_t)llvm::SmallVectorTemplateBase<unsigned long long,true>::growAndAssign(a1, a2, a3);
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= a2)
    v4 = a2;
  else
    v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    v5 = *(uint64_t **)a1;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  v6 = v3 - a2;
  if (v3 < a2)
  {
    v7 = (uint64_t *)(*(_QWORD *)a1 + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

uint64_t llvm::ConstantFP::isExactlyValue(void **this, double a2)
{
  uint64_t IsEqual;
  char v5;
  _BYTE v6[8];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x24BDAC8D0];
  llvm::APFloat::APFloat((llvm::APFloat *)v6, a2);
  llvm::APFloat::convert((uint64_t)v6, this[4], 1, &v5);
  IsEqual = llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)(this + 3), (const llvm::APFloat *)v6);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v7);
  return IsEqual;
}

BOOL llvm::GCRelocateInst::classof(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 123;
}

uint64_t _GLOBAL__sub_I_Loads_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&llvm::DefMaxInstsToScan, 0, 0);
  dword_257960AA0 = 0;
  qword_257960AA8 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257960AB0 = 0;
  llvm::DefMaxInstsToScan = (uint64_t)off_251C12270;
  qword_257960AB8 = (uint64_t)&off_251C121B0;
  qword_257960AC0 = (uint64_t)&off_251C17200;
  qword_257960AD8 = (uint64_t)&qword_257960AC0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"available-load-scan-limit", 0x19uLL);
  dword_257960AA0 = 6;
  byte_257960AB4 = 1;
  dword_257960AB0 = 6;
  word_257960A2A = word_257960A2A & 0xFF9F | 0x20;
  qword_257960A40 = (uint64_t)"Use this to specify the default maximum number of instructions to scan backward from a give"
                             "n instruction, when searching for available loaded value";
  unk_257960A48 = 147;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::DefMaxInstsToScan);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::DefMaxInstsToScan, &dword_24A800000);
}

void llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C17628;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C17628;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v11;

  v11 = 0;
  v8 = llvm::cl::parser<unsigned int>::parse(a1 + 152, a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  **(_DWORD **)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = **(_DWORD **)(a1 + 128);
LABEL_5:
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = &off_251C12458;
    llvm::cl::parser<unsigned int>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, v3, (uint64_t)&v4, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 148))
  {
    v3 = **(_DWORD **)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  **(_DWORD **)(result + 128) = v1;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17690;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1},std::allocator<llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17690;
}

uint64_t llvm::cl::opt_storage<unsigned int,true,false>::setLocation(uint64_t result, uint64_t a2, _DWORD *a3)
{
  llvm::raw_ostream *v4;
  const char *v5;
  __int16 v6;

  if (*(_QWORD *)result)
  {
    v5 = "cl::location(x) specified more than once!";
    v6 = 259;
    v4 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v5, 0, 0, v4);
  }
  else
  {
    *(_QWORD *)result = a3;
    *(_BYTE *)(result + 20) = 1;
    *(_DWORD *)(result + 16) = *a3;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_LoopAccessAnalysis_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  __n128 v7;
  int v8;
  int *v9;

  v0 = llvm::cl::Option::Option((uint64_t)&qword_257960AF0, 0, 0);
  qword_257960B70 = 0;
  byte_257960B84 = 0;
  qword_257960B78 = (uint64_t)&off_251C12458;
  qword_257960AF0 = (uint64_t)off_251C17628;
  qword_257960B88 = (uint64_t)&off_251C121B0;
  qword_257960B90 = (uint64_t)&off_251C17690;
  qword_257960BA8 = (uint64_t)&qword_257960B90;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"force-vector-width", 0x12uLL);
  word_257960AFA = word_257960AFA & 0xFF9F | 0x20;
  qword_257960B10 = (uint64_t)"Sets the SIMD width. Zero is autoselect.";
  unk_257960B18 = 40;
  llvm::cl::opt_storage<unsigned int,true,false>::setLocation((uint64_t)&qword_257960B70, (uint64_t)&qword_257960AF0, _MergedGlobals_13);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960AF0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt, &qword_257960AF0, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257960BB0, 0, 0);
  byte_257960C44 = 0;
  qword_257960C30 = 0;
  unk_257960C38 = &off_251C12458;
  qword_257960BB0 = (uint64_t)off_251C17628;
  qword_257960C48 = (uint64_t)&off_251C121B0;
  qword_257960C50[0] = &off_251C17690;
  qword_257960C68 = (uint64_t)qword_257960C50;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"force-vector-interleave", 0x17uLL);
  word_257960BBA = word_257960BBA & 0xFF9F | 0x20;
  qword_257960BD0 = (uint64_t)"Sets the vectorization interleave count. Zero is autoselect.";
  unk_257960BD8 = 60;
  llvm::cl::opt_storage<unsigned int,true,false>::setLocation((uint64_t)&qword_257960C30, (uint64_t)&qword_257960BB0, &_MergedGlobals_13[1]);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960BB0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt, &qword_257960BB0, &dword_24A800000);
  llvm::cl::Option::Option((uint64_t)&qword_257960C70, 0, 0);
  qword_257960CF0 = 0;
  byte_257960D04 = 0;
  qword_257960CF8 = (uint64_t)&off_251C12458;
  qword_257960C70 = (uint64_t)off_251C17628;
  qword_257960D08 = (uint64_t)&off_251C121B0;
  qword_257960D10 = (uint64_t)&off_251C17690;
  qword_257960D28 = (uint64_t)&qword_257960D10;
  llvm::cl::Option::setArgStr((uint64_t)&qword_257960C70, (uint64_t *)"runtime-memory-check-threshold", 0x1EuLL);
  word_257960C7A = word_257960C7A & 0xFF9F | 0x20;
  qword_257960C90 = (uint64_t)"When performing memory disambiguation checks at runtime do not generate more than this numb"
                             "er of comparisons (default = 8).";
  unk_257960C98 = 123;
  llvm::cl::opt_storage<unsigned int,true,false>::setLocation((uint64_t)&qword_257960CF0, (uint64_t)&qword_257960C70, &_MergedGlobals_13[2]);
  *(_DWORD *)qword_257960CF0 = 8;
  byte_257960D04 = 1;
  dword_257960D00 = 8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960C70);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,true,llvm::cl::parser<unsigned int>>::~opt, &qword_257960C70, &dword_24A800000);
  v8 = 1;
  v7.n128_u64[0] = (unint64_t)"Maximum number of comparisons done when trying to merge runtime memory checks. (default = 100)";
  v7.n128_u64[1] = 94;
  v6 = 100;
  v9 = &v6;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_257960D30, "memory-check-merge-threshold", &v8, &v7, &v9);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_257960D30, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&qword_257960DF0, 0, 0);
  dword_257960E70 = 0;
  qword_257960E80 = 0;
  qword_257960E78 = (uint64_t)&off_251C12458;
  qword_257960DF0 = (uint64_t)off_251C12270;
  qword_257960E88 = (uint64_t)&off_251C121B0;
  qword_257960E90 = (uint64_t)&off_251C17200;
  qword_257960EA8 = (uint64_t)&qword_257960E90;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"max-dependences", 0xFuLL);
  word_257960DFA = word_257960DFA & 0xFF9F | 0x20;
  qword_257960E10 = (uint64_t)"Maximum number of dependences collected by loop-access analysis (default = 100)";
  qword_257960E18 = 79;
  dword_257960E70 = 100;
  BYTE4(qword_257960E80) = 1;
  LODWORD(qword_257960E80) = 100;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960DF0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257960DF0, &dword_24A800000);
  LOBYTE(v6) = 1;
  v9 = &v6;
  v8 = 1;
  v7.n128_u64[0] = (unint64_t)"Enable symbolic stride memory access versioning";
  v7.n128_u64[1] = 47;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [10],llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_257960EB0, "enable-mem-access-versioning", (_BYTE **)&v9, &v8, &v7);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &unk_257960EB0, &dword_24A800000);
  v3 = llvm::cl::Option::Option((uint64_t)&qword_257960F70, 0, 0);
  byte_257960FF0 = 0;
  qword_257961000 = 0;
  qword_257960FF8 = (uint64_t)&off_251C12500;
  qword_257960F70 = (uint64_t)off_251C123A8;
  qword_257961008 = (uint64_t)&off_251C12520;
  qword_257961010 = (uint64_t)&off_251C12410;
  qword_257961028 = (uint64_t)&qword_257961010;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"store-to-load-forwarding-conflict-detection", 0x2BuLL);
  word_257960F7A = word_257960F7A & 0xFF9F | 0x20;
  qword_257960F90 = (uint64_t)"Enable conflict detection in loop-access analysis";
  qword_257960F98 = 49;
  byte_257960FF0 = 1;
  LOWORD(qword_257961000) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257960F70);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257960F70, &dword_24A800000);
  v4 = llvm::cl::Option::Option((uint64_t)&qword_257961030, 0, 0);
  dword_2579610B0 = 0;
  qword_2579610C0 = 0;
  qword_2579610B8 = (uint64_t)&off_251C12458;
  qword_257961030 = (uint64_t)off_251C12270;
  qword_2579610C8 = (uint64_t)&off_251C121B0;
  qword_2579610D0 = (uint64_t)&off_251C17200;
  qword_2579610E8 = (uint64_t)&qword_2579610D0;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"max-forked-scev-depth", 0x15uLL);
  word_25796103A = word_25796103A & 0xFF9F | 0x20;
  qword_257961050 = (uint64_t)"Maximum recursion depth when finding forked SCEVs (default = 5)";
  qword_257961058 = 63;
  dword_2579610B0 = 5;
  BYTE4(qword_2579610C0) = 1;
  LODWORD(qword_2579610C0) = 5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961030);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257961030, &dword_24A800000);
}

llvm::cl::Option *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _BYTE **a3, _WORD *a4, __n128 *a5)
{
  uint64_t v10;

  v10 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 145) = 0;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12500;
  *(_QWORD *)v10 = off_251C13488;
  *(_QWORD *)(v10 + 152) = &off_251C12520;
  *(_QWORD *)(v10 + 160) = &off_251C134F0;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>,char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>,char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>(uint64_t a1, char *__s, _BYTE **a3, _WORD *a4, __n128 *a5)
{
  size_t v10;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v10);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)(a1 + 128), a1, *a3);
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

uint64_t _GLOBAL__sub_I_LoopInfo_cpp()
{
  __n128 v1;
  int v2;
  _BYTE *v3;

  v3 = &_MergedGlobals_14;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify loop info (time consuming)";
  v1.n128_u64[1] = 33;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_2579610F8, "verify-loop-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &unk_2579610F8, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_MemoryDependenceAnalysis_cpp()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 100;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The number of instructions to scan in a block in memory dependency analysis (default = 100)";
  v1.n128_u64[1] = 91;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_15, "memdep-block-scan-limit", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_15, &dword_24A800000);
  v4 = 1;
  v2 = 200;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"The number of blocks to scan during memory dependency analysis (default = 200)";
  v1.n128_u64[1] = 78;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&unk_257961278, "memdep-block-number-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_257961278, &dword_24A800000);
}

void llvm::cl::opt<float,false,llvm::cl::parser<float>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C176D8;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C176D8;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v8;
  float v9;
  uint64_t v10;
  float v12;
  double v13;

  v13 = 0.0;
  v8 = parseDouble(a1, a5, a6, &v13);
  if (v8)
    return v8;
  v9 = v13;
  v12 = v9;
  *(float *)(a1 + 128) = v9;
  *(_WORD *)(a1 + 12) = a2;
  v10 = *(_QWORD *)(a1 + 184);
  if (v10)
  {
    (*(void (**)(uint64_t, float *))(*(_QWORD *)v10 + 48))(v10, &v12);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<float,false,llvm::cl::parser<float>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<float,false,llvm::cl::parser<float>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<float,false,llvm::cl::parser<float>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  float v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *(float *)(a1 + 128);
LABEL_5:
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = &off_251C17740;
    llvm::cl::parser<float>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, (uint64_t)&v4, a2, v3);
    return;
  }
  if (*(_BYTE *)(a1 + 148))
  {
    v3 = *(float *)(a1 + 128);
    if (*(float *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<float,false,llvm::cl::parser<float>>::setDefault(uint64_t result)
{
  int v1;

  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  else
    v1 = 0;
  *(_DWORD *)(result + 128) = v1;
  return result;
}

BOOL llvm::cl::OptionValueCopy<float>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(float *)(a1 + 8) != *(float *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1},std::allocator<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1}>,void ()(float const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1},std::allocator<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1}>,void ()(float const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17760;
  return result;
}

void std::__function::__func<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1},std::allocator<llvm::cl::opt<float,false,llvm::cl::parser<float>>::{lambda(float const&)#1}>,void ()(float const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17760;
}

uint64_t _GLOBAL__sub_I_MemoryProfileInfo_cpp()
{
  uint64_t v0;
  uint64_t v1;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_16, 0, 0);
  dword_2579613B8 = 0;
  qword_2579613C0 = (uint64_t)&off_251C17740;
  *(_QWORD *)&dword_2579613C8 = 0;
  _MergedGlobals_16 = (uint64_t)off_251C176D8;
  qword_2579613D0 = (uint64_t)&off_251C12240;
  qword_2579613D8 = (uint64_t)&off_251C17760;
  qword_2579613F0 = (uint64_t)&qword_2579613D8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"memprof-accesses-per-byte-cold-threshold", 0x28uLL);
  dword_2579613B8 = 1092616192;
  byte_2579613CC = 1;
  dword_2579613C8 = 1092616192;
  word_257961342 = word_257961342 & 0xFF9F | 0x20;
  qword_257961358 = (uint64_t)"The threshold the accesses per byte must be under to consider an allocation cold";
  unk_257961360 = 80;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_16);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<float,false,llvm::cl::parser<float>>::~opt, &_MergedGlobals_16, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_2579613F8, 0, 0);
  dword_257961478 = 0;
  qword_257961480 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257961488 = 0;
  qword_2579613F8 = (uint64_t)off_251C12270;
  qword_257961490 = (uint64_t)&off_251C121B0;
  qword_257961498[0] = &off_251C17200;
  qword_2579614B0 = (uint64_t)qword_257961498;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"memprof-min-lifetime-cold-threshold", 0x23uLL);
  dword_257961478 = 200;
  byte_25796148C = 1;
  dword_257961488 = 200;
  word_257961402 = word_257961402 & 0xFF9F | 0x20;
  qword_257961418 = (uint64_t)"The minimum lifetime (s) for an allocation to be considered cold";
  unk_257961420 = 64;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579613F8);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_2579613F8, &dword_24A800000);
}

uint64_t llvm::User::dropAllReferences(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 20);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = *(_QWORD *)(this - 8);
    v2 = v1 & 0x7FFFFFF;
    if (!v2)
      return this;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = this - 32 * v2;
    if (!v2)
      return this;
  }
  v4 = 32 * v2;
  v5 = (_QWORD **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **v5 = *(v5 - 1);
      v6 = (uint64_t)*(v5 - 1);
      if (v6)
        *(_QWORD *)(v6 + 16) = *v5;
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
  return this;
}

_BYTE *llvm::GraphDiff<llvm::BasicBlock *,false>::getChildren<false>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  _BYTE *result;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _QWORD v23[4];
  _QWORD v24[4];

  v6 = *(_QWORD *)(a2 + 40);
  if (v6 == a2 + 40)
  {
    v9 = 0;
  }
  else
  {
    v7 = v6 - 24;
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v9 = 0;
    else
      v9 = v7;
  }
  v10 = llvm::GraphTraits<llvm::BasicBlock *>::child_end(a2);
  *a3 = a3 + 2;
  a3[1] = (_QWORD *)0x800000000;
  v24[0] = v10;
  v24[1] = v11;
  v24[2] = v10;
  v24[3] = v11;
  v23[0] = v9;
  v23[1] = 0;
  v23[2] = v9;
  v23[3] = 0;
  llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::reverse_iterator<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>((unsigned int *)a3, (uint64_t)v24, (uint64_t)v23);
  v24[0] = 0;
  *((_DWORD *)a3 + 2) = (unint64_t)((char *)std::remove[abi:nn180100]<llvm::BasicBlock **,decltype(nullptr)>(*a3, &(*a3)[*((unsigned int *)a3 + 2)])- (char *)*a3) >> 3;
  result = (_BYTE *)llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::find(a1, a2);
  v13 = result;
  if ((*(_BYTE *)a1 & 1) != 0)
    v14 = a1 + 296;
  else
    v14 = *(_QWORD *)(a1 + 8) + 72 * *(unsigned int *)(a1 + 16);
  if ((_BYTE *)v14 != result)
  {
    v15 = *((unsigned int *)result + 4);
    v16 = *a3;
    v17 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v15)
    {
      v18 = (uint64_t *)*((_QWORD *)v13 + 1);
      v19 = 8 * v15;
      do
      {
        v20 = *v18++;
        v24[0] = v20;
        v21 = (char *)std::remove[abi:nn180100]<llvm::BasicBlock **,llvm::BasicBlock *>(v16, &v16[v17], v24);
        v16 = *a3;
        v22 = (unint64_t)(v21 - (char *)*a3) >> 3;
        v17 = v22;
        *((_DWORD *)a3 + 2) = v22;
        v19 -= 8;
      }
      while (v19);
    }
    return llvm::SmallVectorImpl<llvm::BasicBlock *>::insert<llvm::BasicBlock * const*,void>((unsigned int *)a3, (uint64_t)&v16[v17], *((uint64_t **)v13 + 5), (uint64_t *)(*((_QWORD *)v13 + 5) + 8 * *((unsigned int *)v13 + 12)));
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::LookupBucketFor<llvm::BasicBlock const*>(a1, &v5, &v4))return v4;
  if ((*(_BYTE *)a1 & 1) != 0)
    return a1 + 296;
  return *(_QWORD *)(a1 + 8) + 72 * *(unsigned int *)(a1 + 16);
}

unsigned int *llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::reverse_iterator<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  llvm::Instruction *v11;
  unsigned int **v12;

  v5 = result;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a3 + 24);
  v8 = v6 - v7;
  v9 = result[2];
  v10 = v9 + (int)v6 - (int)v7;
  if (v10 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v10, 8);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a3 + 24);
    v9 = v5[2];
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v11 = *(llvm::Instruction **)(a2 + 16);
    v12 = (unsigned int **)(*(_QWORD *)v5 + 8 * v9);
    do
    {
      LODWORD(v6) = v6 - 1;
      result = (unsigned int *)llvm::Instruction::getSuccessor(v11);
      *v12++ = result;
    }
    while ((_DWORD)v7 != (_DWORD)v6);
  }
  v5[2] = v9 + v8;
  return result;
}

_QWORD *std::remove[abi:nn180100]<llvm::BasicBlock **,decltype(nullptr)>(_QWORD *result, _QWORD *a2)
{
  _QWORD *i;

  if (result != a2)
  {
    while (*result)
    {
      if (++result == a2)
      {
        result = a2;
        break;
      }
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i)
        *result++ = *i;
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::LookupBucketFor<llvm::BasicBlock const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 72 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 72 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *std::remove[abi:nn180100]<llvm::BasicBlock **,llvm::BasicBlock *>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *i;

  if (result != a2)
  {
    while (*result != *a3)
    {
      if (++result == a2)
      {
        result = a2;
        break;
      }
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

uint64_t _GLOBAL__sub_I_MemorySSA_cpp()
{
  uint64_t v0;
  uint64_t v1;
  int v3;
  _BYTE *v4;
  std::string __str;

  v0 = llvm::cl::Option::Option((uint64_t)qword_257961638, 0, 0);
  qword_2579616C0 = 0;
  unk_2579616C8 = 0;
  qword_2579616B8 = 0;
  qword_2579616E0 = 0;
  unk_2579616E8 = 0;
  byte_2579616F0 = 0;
  qword_2579616D8 = 0;
  qword_2579616D0 = (uint64_t)off_251C12550;
  qword_257961638[0] = (uint64_t)&off_251C12340;
  qword_2579616F8 = (uint64_t)&off_251C12590;
  qword_257961700 = (uint64_t)&off_251C17510;
  qword_257961718 = (uint64_t)&qword_257961700;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"dot-cfg-mssa", 0xCuLL);
  qword_257961668 = (uint64_t)"file name for generated dot file";
  unk_257961670 = 32;
  qword_257961658 = (uint64_t)"file name for generated dot file";
  unk_257961660 = 32;
  std::string::basic_string[abi:nn180100]<0>(&__str, "");
  std::string::operator=((std::string *)&qword_2579616B8, &__str);
  byte_2579616F0 = 1;
  std::string::operator=((std::string *)&qword_2579616D8, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_257961638);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, qword_257961638, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_17, 0, 0);
  dword_257961538 = 0;
  qword_257961540 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257961548 = 0;
  _MergedGlobals_17 = (uint64_t)off_251C12270;
  qword_257961550 = (uint64_t)&off_251C121B0;
  qword_257961558 = (uint64_t)&off_251C17200;
  qword_257961570 = (uint64_t)&qword_257961558;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"memssa-check-limit", 0x12uLL);
  word_2579614C2 = word_2579614C2 & 0xFF9F | 0x20;
  dword_257961538 = 100;
  byte_25796154C = 1;
  dword_257961548 = 100;
  qword_2579614D8 = (uint64_t)"The maximum number of stores/phis MemorySSAwill consider trying to walk past (default = 100)";
  unk_2579614E0 = 92;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_17);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_17, &dword_24A800000);
  v3 = 1;
  v4 = &llvm::VerifyMemorySSA;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"Enable verification of MemorySSA.";
  __str.__r_.__value_.__l.__size_ = 33;
  llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::opt<char [17],llvm::cl::LocationClass<BOOL>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&unk_257961578, "verify-memoryssa", &v4, &v3, (__n128 *)&__str);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &unk_257961578, &dword_24A800000);
}

void llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C177A8;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C17810;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C177A8;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C17810;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C17810;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  **(_DWORD **)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

unint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = **((_DWORD **)result + 16);
LABEL_5:
    v4 = &off_251C17860;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = **((_DWORD **)result + 16);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  **(_DWORD **)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C17810;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::FunctionSummary::ForceSummaryHotnessType>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void std::allocator<llvm::AllocInfo>::destroy[abi:nn180100](uint64_t a1, void **a2)
{
  void **v3;

  v3 = a2 + 8;
  std::vector<llvm::MIBInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*a2 != a2 + 3)
    free(*a2);
}

void std::vector<llvm::MIBInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::MIBInfo>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<llvm::MIBInfo>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    v4 = *(void **)(i - 64);
    if ((void *)(i - 48) != v4)
      free(v4);
  }
  a1[1] = v2;
}

void std::allocator<llvm::CallsiteInfo>::destroy[abi:nn180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)a2[9];
  if (v3 != a2 + 11)
    free(v3);
  v4 = (_QWORD *)a2[1];
  if (v4 != a2 + 3)
    free(v4);
}

void std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v5 = (void **)(a2 + 40);
  std::vector<llvm::FunctionSummary::ParamAccess::Call>::__destroy_vector::operator()[abi:nn180100](&v5);
  if (*(_DWORD *)(a2 + 32) >= 0x41u)
  {
    v3 = *(_QWORD *)(a2 + 24);
    if (v3)
      MEMORY[0x24BD1B380](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a2 + 16) >= 0x41u)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
      MEMORY[0x24BD1B380](v4, 0x1000C8000313F17);
  }
}

void std::vector<llvm::FunctionSummary::ParamAccess::Call>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<llvm::FunctionSummary::ParamAccess::Call>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::FunctionSummary::ParamAccess::Call>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_DWORD *)(a2 + 40) >= 0x41u)
  {
    v3 = *(_QWORD *)(a2 + 32);
    if (v3)
      MEMORY[0x24BD1B380](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a2 + 24) >= 0x41u)
  {
    if (*(_QWORD *)(a2 + 16))
      JUMPOUT(0x24BD1B380);
  }
}

void std::vector<llvm::FunctionSummary::ParamAccess>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<llvm::FunctionSummary::ParamAccess>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::FunctionSummary::FunctionSummary(uint64_t a1, int a2, int a3, int a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t *a8, __int128 *a9, __int128 *a10, __int128 *a11, __int128 *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void ***v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *__p;
  void *v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD v50[3];
  void **v51[2];

  v16 = a14;
  v17 = *((_QWORD *)a6 + 2);
  v18 = *a6;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 56) = v17;
  *(_QWORD *)a1 = &off_251C178A0;
  *(_DWORD *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 68) = a4;
  *(_QWORD *)(a1 + 72) = a5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a7 + 16);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v19 = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  v35 = (void ***)(a1 + 120);
  v20 = *a8;
  v21 = a8[1];
  if (*a8 != v21
    || *(_QWORD *)a9 != *((_QWORD *)a9 + 1)
    || *(_QWORD *)a10 != *((_QWORD *)a10 + 1)
    || *(_QWORD *)a11 != *((_QWORD *)a11 + 1)
    || *(_QWORD *)a12 != *((_QWORD *)a12 + 1))
  {
    v22 = a8[2];
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    v23 = *((_QWORD *)a9 + 2);
    v24 = *a9;
    *((_QWORD *)a9 + 1) = 0;
    *((_QWORD *)a9 + 2) = 0;
    *(_QWORD *)a9 = 0;
    v25 = *((_QWORD *)a10 + 2);
    v38 = v24;
    v39 = *a10;
    *((_QWORD *)a10 + 1) = 0;
    *((_QWORD *)a10 + 2) = 0;
    *(_QWORD *)a10 = 0;
    v26 = *((_QWORD *)a11 + 2);
    v27 = *a11;
    *((_QWORD *)a11 + 1) = 0;
    *((_QWORD *)a11 + 2) = 0;
    *(_QWORD *)a11 = 0;
    v28 = *((_QWORD *)a12 + 2);
    v36 = *a12;
    v37 = v27;
    *((_QWORD *)a12 + 1) = 0;
    *((_QWORD *)a12 + 2) = 0;
    *(_QWORD *)a12 = 0;
    v29 = operator new();
    *(_QWORD *)v29 = v20;
    *(_QWORD *)(v29 + 8) = v21;
    *(_QWORD *)(v29 + 16) = v22;
    v40 = 0;
    v41 = 0;
    *(_OWORD *)(v29 + 24) = v38;
    *(_QWORD *)(v29 + 40) = v23;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    *(_OWORD *)(v29 + 48) = v39;
    *(_QWORD *)(v29 + 64) = v25;
    __p = 0;
    v47 = 0;
    *(_OWORD *)(v29 + 72) = v37;
    *(_QWORD *)(v29 + 88) = v26;
    v48 = 0;
    memset(v49, 0, sizeof(v49));
    *(_OWORD *)(v29 + 96) = v36;
    *(_QWORD *)(v29 + 112) = v28;
    memset(v50, 0, sizeof(v50));
    v30 = *(_QWORD *)v19;
    *(_QWORD *)v19 = v29;
    if (v30)
      std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100](v19, v30);
    v51[0] = (void **)v50;
    std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](v51);
    v51[0] = (void **)v49;
    std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](v51);
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    v16 = a14;
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
  }
  if (*(_QWORD *)a13 != *(_QWORD *)(a13 + 8))
  {
    v31 = operator new();
    *(_OWORD *)v31 = *(_OWORD *)a13;
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(a13 + 16);
    *(_QWORD *)a13 = 0;
    *(_QWORD *)(a13 + 8) = 0;
    *(_QWORD *)(a13 + 16) = 0;
    v40 = 0;
    std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100]((void ***)(v19 + 8), (void **)v31);
    std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100]((void ***)&v40, 0);
  }
  if (*(_QWORD *)v16 != *(_QWORD *)(v16 + 8))
  {
    v32 = operator new();
    *(_OWORD *)v32 = *(_OWORD *)v16;
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v16 + 16);
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    v40 = 0;
    std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](v35, (void **)v32);
    std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100]((void ***)&v40, 0);
  }
  if (*(_QWORD *)a15 != *(_QWORD *)(a15 + 8))
  {
    v33 = operator new();
    *(_OWORD *)v33 = *(_OWORD *)a15;
    *(_QWORD *)(v33 + 16) = *(_QWORD *)(a15 + 16);
    *(_QWORD *)a15 = 0;
    *(_QWORD *)(a15 + 8) = 0;
    *(_QWORD *)(a15 + 16) = 0;
    v40 = 0;
    std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100]((void ***)(v19 + 24), (void **)v33);
    std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100]((void ***)&v40, 0);
  }
  return a1;
}

void llvm::FunctionSummary::~FunctionSummary(void ***this)
{
  void ***v2;
  uint64_t v3;
  void **v4;
  void **v5;

  *this = (void **)&off_251C178A0;
  v2 = this + 14;
  std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100](this + 16, 0);
  std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](this + 15, 0);
  std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100](v2, 0);
  v3 = (uint64_t)this[13];
  this[13] = 0;
  if (v3)
    std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100]((uint64_t)(this + 13), v3);
  v4 = this[10];
  if (v4)
  {
    this[11] = v4;
    operator delete(v4);
  }
  *this = (void **)&off_251C178C0;
  v5 = this[5];
  if (v5)
  {
    this[6] = v5;
    operator delete(v5);
  }
}

{
  void ***v2;
  uint64_t v3;
  void **v4;
  void **v5;

  *this = (void **)&off_251C178A0;
  v2 = this + 14;
  std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100](this + 16, 0);
  std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](this + 15, 0);
  std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100](v2, 0);
  v3 = (uint64_t)this[13];
  this[13] = 0;
  if (v3)
    std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100]((uint64_t)(this + 13), v3);
  v4 = this[10];
  if (v4)
  {
    this[11] = v4;
    operator delete(v4);
  }
  *this = (void **)&off_251C178C0;
  v5 = this[5];
  if (v5)
  {
    this[6] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x24BD1B3A4);
}

void llvm::GlobalValueSummary::~GlobalValueSummary(llvm::GlobalValueSummary *this)
{
  void *v2;

  *(_QWORD *)this = &off_251C178C0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_251C178C0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24BD1B3A4);
}

void std::default_delete<llvm::FunctionSummary::TypeIdInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (a2)
  {
    v6 = (void **)(a2 + 96);
    std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](&v6);
    v6 = (void **)(a2 + 72);
    std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](&v6);
    v3 = *(void **)(a2 + 48);
    if (v3)
    {
      *(_QWORD *)(a2 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 24);
    if (v4)
    {
      *(_QWORD *)(a2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x24BD1B3A4](a2, 0x30C4045335465);
  }
}

void ***std::unique_ptr<std::vector<llvm::FunctionSummary::ParamAccess>>::reset[abi:nn180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<llvm::FunctionSummary::ParamAccess>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x24BD1B3A4](v2, 0x20C40960023A9);
  }
  return result;
}

void ***std::unique_ptr<std::vector<llvm::CallsiteInfo>>::reset[abi:nn180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<llvm::CallsiteInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x24BD1B3A4](v2, 0x20C40960023A9);
  }
  return result;
}

void ***std::unique_ptr<std::vector<llvm::AllocInfo>>::reset[abi:nn180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<llvm::AllocInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (void ***)MEMORY[0x24BD1B3A4](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::FunctionSummary::ConstVCall>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<llvm::FunctionSummary::ConstVCall>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<llvm::AllocInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 11;
        std::allocator<llvm::AllocInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<llvm::CallsiteInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 17;
        std::allocator<llvm::CallsiteInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1},std::allocator<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1}>,void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1},std::allocator<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1}>,void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C178E0;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1},std::allocator<llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::{lambda(llvm::FunctionSummary::ForceSummaryHotnessType const&)#1}>,void ()(llvm::FunctionSummary::ForceSummaryHotnessType const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C178E0;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::OptionInfo,false>::grow(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_2579618B0, &unk_2579618C0, a1, 48, &v8);
  v2 = (_OWORD *)qword_2579618B0;
  if ((_DWORD)qword_2579618B8)
  {
    v3 = qword_2579618B0 + 48 * qword_2579618B8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_251C17880;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_251C17860;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_2579618B0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_2579618C0)
    free(v2);
  qword_2579618B0 = (uint64_t)v1;
  HIDWORD(qword_2579618B8) = v7;
}

uint64_t _GLOBAL__sub_I_ModuleSummaryAnalysis_cpp()
{
  uint64_t v0;
  llvm *v1;
  llvm::raw_ostream *v2;
  char *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  const char **p_src;
  uint64_t v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  _BYTE v20[160];
  const char *__src;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  __src = "none";
  v22 = 4;
  LODWORD(v23) = 0;
  *((_QWORD *)&v23 + 1) = "None.";
  v24 = 5;
  v25 = "all-non-critical";
  v26 = 16;
  v27 = 1;
  v28 = "All non-critical edges.";
  v29 = 23;
  v30 = "all";
  v31 = 3;
  v32 = 2;
  v33 = "All edges.";
  v34 = 10;
  v18 = v20;
  v19 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v18, &__src, &v35);
  v0 = llvm::cl::Option::Option((uint64_t)&qword_257961808, 0, 0);
  byte_25796189C = 0;
  qword_257961888 = 0;
  unk_257961890 = &off_251C17860;
  qword_257961808 = (uint64_t)off_251C177A8;
  qword_2579618A0 = (uint64_t)&off_251C17810;
  qword_2579618A8 = (uint64_t)&qword_257961808;
  qword_2579618B0 = (uint64_t)&unk_2579618C0;
  qword_2579618B8 = 0x800000000;
  qword_257961A40 = (uint64_t)&off_251C178E0;
  qword_257961A58 = (uint64_t)&qword_257961A40;
  v1 = (llvm *)llvm::cl::Option::setArgStr(v0, (uint64_t *)"force-summary-edges-cold", 0x18uLL);
  word_257961812 = word_257961812 & 0xFF9F | 0x20;
  if (qword_257961888)
  {
    __src = "cl::location(x) specified more than once!";
    LOWORD(v24) = 259;
    v2 = (llvm::raw_ostream *)llvm::errs(v1);
    llvm::cl::Option::error((uint64_t)&qword_257961808, (llvm::Twine *)&__src, 0, 0, v2);
  }
  else
  {
    qword_257961888 = (uint64_t)&llvm::ForceSummaryEdgesCold;
    byte_25796189C = 1;
    dword_257961898 = llvm::ForceSummaryEdgesCold;
  }
  qword_257961828 = (uint64_t)"Force all edges in the function summary to cold";
  unk_257961830 = 47;
  if ((_DWORD)v19)
  {
    v3 = v18;
    v4 = &v18[40 * v19];
    do
    {
      v5 = *(uint64_t **)v3;
      v6 = *((_QWORD *)v3 + 1);
      v7 = *((_DWORD *)v3 + 4);
      v8 = *(_OWORD *)(v3 + 24);
      __src = *(const char **)v3;
      v22 = v6;
      v23 = v8;
      v24 = (uint64_t)&off_251C17860;
      BYTE4(v25) = 1;
      LODWORD(v25) = v7;
      v9 = qword_2579618B0;
      if (qword_2579618B8 >= HIDWORD(qword_2579618B8))
      {
        v14 = qword_2579618B8 + 1;
        if (qword_2579618B0 <= (unint64_t)&__src
          && qword_2579618B0 + 48 * (unint64_t)qword_2579618B8 > (unint64_t)&__src)
        {
          v17 = (char *)&__src - qword_2579618B0;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::OptionInfo,false>::grow(v14);
          v9 = qword_2579618B0;
          p_src = (const char **)&v17[qword_2579618B0];
          goto LABEL_8;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>::OptionInfo,false>::grow(v14);
        v9 = qword_2579618B0;
      }
      p_src = &__src;
LABEL_8:
      v11 = v9 + 48 * qword_2579618B8;
      v12 = *((_OWORD *)p_src + 1);
      *(_OWORD *)v11 = *(_OWORD *)p_src;
      *(_OWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v11 + 32) = &off_251C17880;
      v13 = *((_DWORD *)p_src + 10);
      *(_BYTE *)(v11 + 44) = *((_BYTE *)p_src + 44);
      *(_DWORD *)(v11 + 40) = v13;
      *(_QWORD *)(v11 + 32) = &off_251C17860;
      LODWORD(qword_2579618B8) = qword_2579618B8 + 1;
      llvm::cl::AddLiteralOption(qword_2579618A8, v5, v6);
      v3 += 40;
    }
    while (v3 != v4);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961808);
  if (v18 != v20)
    free(v18);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::FunctionSummary::ForceSummaryHotnessType,true,llvm::cl::parser<llvm::FunctionSummary::ForceSummaryHotnessType>>::~opt, &qword_257961808, &dword_24A800000);
  v15 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_18, 0, 0);
  qword_2579617A0 = 0;
  unk_2579617A8 = 0;
  qword_2579617C8 = 0;
  unk_2579617D0 = 0;
  byte_2579617D8 = 0;
  qword_2579617B0 = 0;
  qword_2579617B8 = (uint64_t)off_251C12550;
  unk_2579617C0 = 0;
  _MergedGlobals_18 = (uint64_t)&off_251C12340;
  qword_2579617E0 = (uint64_t)&off_251C12590;
  qword_2579617E8 = (uint64_t)&off_251C17510;
  qword_257961800 = (uint64_t)&qword_2579617E8;
  llvm::cl::Option::setArgStr(v15, (uint64_t *)"module-summary-dot-file", 0x17uLL);
  word_25796172A = word_25796172A & 0xFF9F | 0x20;
  qword_257961750 = (uint64_t)"filename";
  unk_257961758 = 8;
  qword_257961740 = (uint64_t)"File to emit dot graph of new summary into";
  unk_257961748 = 42;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_18);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &_MergedGlobals_18, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_PHITransAddr_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&EnableAddPhiTranslation, 0, 0);
  byte_257961AE0 = 0;
  qword_257961AE8 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257961AF0 = 0;
  EnableAddPhiTranslation = (uint64_t)off_251C123A8;
  qword_257961AF8 = (uint64_t)&off_251C12520;
  qword_257961B00 = (uint64_t)&off_251C12410;
  qword_257961B18 = (uint64_t)&qword_257961B00;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"gvn-add-phi-translation", 0x17uLL);
  byte_257961AE0 = 0;
  word_257961AF0 = 256;
  word_257961A6A = word_257961A6A & 0xFF9F | 0x20;
  qword_257961A80 = (uint64_t)"Enable phi-translation of add instructions";
  unk_257961A88 = 42;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableAddPhiTranslation);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableAddPhiTranslation, &dword_24A800000);
}

_DWORD *llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::init(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::clear(unsigned int *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::shrink_and_clear(a1);
      return;
    }
    if ((_DWORD)v3)
    {
      v4 = 16 * v3;
      v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
      while (1)
      {
        v6 = *(v5 - 1);
        if (v6 == -8192)
          goto LABEL_12;
        if (v6 != -4096)
          break;
LABEL_13:
        v5 += 2;
        v4 -= 16;
        if (!v4)
          goto LABEL_14;
      }
      v7 = *v5;
      *v5 = 0;
      if (v7)
        std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)v5, v7);
LABEL_12:
      *(v5 - 1) = -4096;
      goto LABEL_13;
    }
LABEL_14:
    *((_QWORD *)a1 + 1) = 0;
  }
}

void llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::shrink_and_clear(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = a1[2];
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll(a1);
  if (!v2)
  {
    if (!a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    v4 = 0;
LABEL_11:
    MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
    llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::init(a1, v4);
    return;
  }
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v4 = 64;
  else
    v4 = v3;
  if (v4 != a1[4])
    goto LABEL_11;
  *((_QWORD *)a1 + 1) = 0;
  v5 = 16 * v4;
  v6 = *(_QWORD **)a1;
  do
  {
    *v6 = -4096;
    v6 += 2;
    v5 -= 16;
  }
  while (v5);
}

uint64_t _GLOBAL__sub_I_ProfileSummaryInfo_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_19, 0, 0);
  byte_257961BA0 = 0;
  qword_257961BA8 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257961BB0 = 0;
  _MergedGlobals_19 = (uint64_t)off_251C123A8;
  qword_257961BB8 = (uint64_t)&off_251C12520;
  qword_257961BC0 = (uint64_t)&off_251C12410;
  qword_257961BD8 = (uint64_t)&qword_257961BC0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"partial-profile", 0xFuLL);
  word_257961B2A = word_257961B2A & 0xFF9F | 0x20;
  byte_257961BA0 = 0;
  word_257961BB0 = 256;
  qword_257961B40 = (uint64_t)"Specify the current profile is used as a partial profile.";
  unk_257961B48 = 57;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_19);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_19, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257961BE0, 0, 0);
  byte_257961C60 = 0;
  qword_257961C68 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257961C70 = 0;
  qword_257961BE0 = (uint64_t)off_251C123A8;
  qword_257961C78 = (uint64_t)&off_251C12520;
  qword_257961C80[0] = &off_251C12410;
  qword_257961C98 = (uint64_t)qword_257961C80;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"scale-partial-sample-profile-working-set-size", 0x2DuLL);
  word_257961BEA = word_257961BEA & 0xFF9F | 0x20;
  byte_257961C60 = 1;
  word_257961C70 = 257;
  qword_257961C00 = (uint64_t)"If true, scale the working set size of the partial sample profile by the partial profile ra"
                             "tio to reflect the size of the program being compiled.";
  unk_257961C08 = 145;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961BE0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257961BE0, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&qword_257961CA0, 0, 0);
  xmmword_257961D20 = 0u;
  *(_OWORD *)&qword_257961D30 = 0u;
  *((_QWORD *)&xmmword_257961D20 + 1) = &off_251C175C0;
  qword_257961CA0 = (uint64_t)off_251C17558;
  qword_257961D40 = (uint64_t)&off_251C12210;
  qword_257961D48 = (uint64_t)&off_251C175E0;
  qword_257961D60 = (uint64_t)&qword_257961D48;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"partial-sample-profile-working-set-size-scale-factor", 0x34uLL);
  word_257961CAA = word_257961CAA & 0xFF9F | 0x20;
  *(_QWORD *)&xmmword_257961D20 = 0x3F80624DD2F1A9FCLL;
  byte_257961D38 = 1;
  qword_257961D30 = 0x3F80624DD2F1A9FCLL;
  qword_257961CC0 = (uint64_t)"The scale factor used to scale the working set size of the partial sample profile along wit"
                             "h the partial profile ratio. This includes the factor of the profile counter per block and "
                             "the factor to scale the working set size to use the same shared thresholds as PGO.";
  unk_257961CC8 = 264;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961CA0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<double,false,llvm::cl::parser<double>>::~opt, &qword_257961CA0, &dword_24A800000);
}

BOOL llvm::APInt::isPowerOf2(int8x8_t **this)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  int8x8_t *v5;
  int8x8_t v6;
  uint8x8_t v7;

  v1 = *((unsigned int *)this + 2);
  if (v1 > 0x40)
  {
    v3 = 0;
    v4 = (unint64_t)(v1 + 63) >> 6;
    v5 = *this;
    do
    {
      v6 = *v5++;
      v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      v3 += v7.i32[0];
      --v4;
    }
    while (v4);
    return v3 == 1;
  }
  else
  {
    return *this && ((unint64_t)*this & ((unint64_t)&(*this)[-1] + 7)) == 0;
  }
}

llvm::ConstantRange *llvm::ConstantRange::ConstantRange(llvm::ConstantRange *this, const llvm::ConstantRange *a2)
{
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;

  v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 2) = v4;
  if (v4 > 0x40)
  {
    v5 = (void *)operator new[]();
    *(_QWORD *)this = v5;
    memcpy(v5, *(const void **)a2, (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)this = *(_QWORD *)a2;
  }
  v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 6) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *((_QWORD *)this + 2) = v7;
    memcpy(v7, *((const void **)a2 + 2), (((unint64_t)*((unsigned int *)this + 6) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  }
  return this;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4, int **a5)
{
  uint64_t v10;
  size_t v11;
  int v12;

  v10 = llvm::cl::Option::Option(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_251C12458;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = off_251C12270;
  *(_QWORD *)(v10 + 152) = &off_251C121B0;
  *(_QWORD *)(v10 + 160) = &off_251C17200;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)a2, v11);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t _GLOBAL__sub_I_ScalarEvolution_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int *v13;
  __n128 v14;
  int v15;

  v15 = 2;
  v14.n128_u64[0] = (unint64_t)"Maximum number of iterations SCEV will symbolically execute a constant derived loop";
  v14.n128_u64[1] = 83;
  v12 = 100;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&_MergedGlobals_20[8], "scalar-evolution-max-iterations", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &_MergedGlobals_20[8], &dword_24A800000);
  v0 = llvm::cl::Option::Option((uint64_t)&qword_257961E30, 0, 0);
  byte_257961EC1 = 0;
  qword_257961EB0 = 0;
  unk_257961EB8 = &off_251C12500;
  qword_257961E30 = (uint64_t)off_251C13488;
  qword_257961EC8 = (uint64_t)&off_251C12520;
  qword_257961ED0[0] = &off_251C134F0;
  qword_257961EE8 = (uint64_t)qword_257961ED0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-scev", 0xBuLL);
  word_257961E3A = word_257961E3A & 0xFF9F | 0x20;
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_257961EB0, (uint64_t)&qword_257961E30, _MergedGlobals_20);
  qword_257961E50 = (uint64_t)"Verify ScalarEvolution's backedge taken counts (slow)";
  unk_257961E58 = 53;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961E30);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_257961E30, &dword_24A800000);
  llvm::cl::Option::Option((uint64_t)&qword_257961EF0, 0, 0);
  byte_257961F70 = 0;
  qword_257961F80 = 0;
  qword_257961F78 = (uint64_t)&off_251C12500;
  qword_257961EF0 = (uint64_t)off_251C123A8;
  qword_257961F88 = (uint64_t)&off_251C12520;
  qword_257961F90 = (uint64_t)&off_251C12410;
  qword_257961FA8 = (uint64_t)&qword_257961F90;
  llvm::cl::Option::setArgStr((uint64_t)&qword_257961EF0, (uint64_t *)"verify-scev-strict", 0x12uLL);
  word_257961EFA = word_257961EFA & 0xFF9F | 0x20;
  qword_257961F10 = (uint64_t)"Enable stricter verification with -verify-scev is passed";
  unk_257961F18 = 56;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961EF0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257961EF0, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257961FB0, 0, 0);
  byte_257962030 = 0;
  qword_257962040 = 0;
  qword_257962038 = (uint64_t)&off_251C12500;
  qword_257961FB0 = (uint64_t)off_251C123A8;
  qword_257962048 = (uint64_t)&off_251C12520;
  qword_257962050 = (uint64_t)&off_251C12410;
  qword_257962068 = (uint64_t)&qword_257962050;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"verify-scev-maps", 0x10uLL);
  word_257961FBA = word_257961FBA & 0xFF9F | 0x20;
  qword_257961FD0 = (uint64_t)"Verify no dangling value in ScalarEvolution's ExprValueMap (slow)";
  qword_257961FD8 = 65;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257961FB0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257961FB0, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&qword_257962070, 0, 0);
  byte_2579620F0 = 0;
  qword_257962100 = 0;
  qword_2579620F8 = (uint64_t)&off_251C12500;
  qword_257962070 = (uint64_t)off_251C123A8;
  qword_257962108 = (uint64_t)&off_251C12520;
  qword_257962110 = (uint64_t)&off_251C12410;
  qword_257962128 = (uint64_t)&qword_257962110;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"scev-verify-ir", 0xEuLL);
  word_25796207A = word_25796207A & 0xFF9F | 0x20;
  qword_257962090 = (uint64_t)"Verify IR correctness when making sensitive SCEV queries (slow)";
  qword_257962098 = 63;
  byte_2579620F0 = 0;
  LOWORD(qword_257962100) = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962070);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962070, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Threshold for inlining multiplication operands into a SCEV";
  v14.n128_u64[1] = 58;
  v12 = 32;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_257962130, "scev-mulops-inline-threshold", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_257962130, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Threshold for inlining addition operands into a SCEV";
  v14.n128_u64[1] = 52;
  v12 = 500;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_2579621F0, "scev-addops-inline-threshold", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_2579621F0, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Maximum depth of recursive SCEV complexity comparisons";
  v14.n128_u64[1] = 54;
  v12 = 32;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&unk_2579622B0, "scalar-evolution-max-scev-compare-depth", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_2579622B0, &dword_24A800000);
  v3 = llvm::cl::Option::Option((uint64_t)&qword_257962370, 0, 0);
  dword_2579623F0 = 0;
  qword_257962400 = 0;
  qword_2579623F8 = (uint64_t)&off_251C12458;
  qword_257962370 = (uint64_t)off_251C12270;
  qword_257962408 = (uint64_t)&off_251C121B0;
  qword_257962410 = (uint64_t)&off_251C17200;
  qword_257962428 = (uint64_t)&qword_257962410;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"scalar-evolution-max-scev-operations-implication-depth", 0x36uLL);
  word_25796237A = word_25796237A & 0xFF9F | 0x20;
  qword_257962390 = (uint64_t)"Maximum depth of recursive SCEV operations implication analysis";
  qword_257962398 = 63;
  dword_2579623F0 = 2;
  BYTE4(qword_257962400) = 1;
  LODWORD(qword_257962400) = 2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962370);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257962370, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Maximum depth of recursive value complexity comparisons";
  v14.n128_u64[1] = 55;
  v12 = 2;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_257962430, "scalar-evolution-max-value-compare-depth", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_257962430, &dword_24A800000);
  v4 = llvm::cl::Option::Option((uint64_t)&qword_2579624F0, 0, 0);
  dword_257962570 = 0;
  qword_257962580 = 0;
  qword_257962578 = (uint64_t)&off_251C12458;
  qword_2579624F0 = (uint64_t)off_251C12270;
  qword_257962588 = (uint64_t)&off_251C121B0;
  qword_257962590 = (uint64_t)&off_251C17200;
  qword_2579625A8 = (uint64_t)&qword_257962590;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"scalar-evolution-max-arith-depth", 0x20uLL);
  word_2579624FA = word_2579624FA & 0xFF9F | 0x20;
  qword_257962510 = (uint64_t)"Maximum depth of recursive arithmetics";
  qword_257962518 = 38;
  dword_257962570 = 32;
  BYTE4(qword_257962580) = 1;
  LODWORD(qword_257962580) = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579624F0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_2579624F0, &dword_24A800000);
  v5 = llvm::cl::Option::Option((uint64_t)&qword_2579625B0, 0, 0);
  dword_257962630 = 0;
  qword_257962640 = 0;
  qword_257962638 = (uint64_t)&off_251C12458;
  qword_2579625B0 = (uint64_t)off_251C12270;
  qword_257962648 = (uint64_t)&off_251C121B0;
  qword_257962650 = (uint64_t)&off_251C17200;
  qword_257962668 = (uint64_t)&qword_257962650;
  llvm::cl::Option::setArgStr(v5, (uint64_t *)"scalar-evolution-max-constant-evolving-depth", 0x2CuLL);
  word_2579625BA = word_2579625BA & 0xFF9F | 0x20;
  qword_2579625D0 = (uint64_t)"Maximum depth of recursive constant evolving";
  qword_2579625D8 = 44;
  dword_257962630 = 32;
  BYTE4(qword_257962640) = 1;
  LODWORD(qword_257962640) = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579625B0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_2579625B0, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Maximum depth of recursive SExt/ZExt/Trunc";
  v14.n128_u64[1] = 42;
  v12 = 8;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&unk_257962670, "scalar-evolution-max-cast-depth", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_257962670, &dword_24A800000);
  v6 = llvm::cl::Option::Option((uint64_t)&qword_257962730, 0, 0);
  dword_2579627B0 = 0;
  qword_2579627C0 = 0;
  qword_2579627B8 = (uint64_t)&off_251C12458;
  qword_257962730 = (uint64_t)off_251C12270;
  qword_2579627C8 = (uint64_t)&off_251C121B0;
  qword_2579627D0 = (uint64_t)&off_251C17200;
  qword_2579627E8 = (uint64_t)&qword_2579627D0;
  llvm::cl::Option::setArgStr(v6, (uint64_t *)"scalar-evolution-max-add-rec-size", 0x21uLL);
  word_25796273A = word_25796273A & 0xFF9F | 0x20;
  qword_257962750 = (uint64_t)"Max coefficients in AddRec during evolving";
  qword_257962758 = 42;
  dword_2579627B0 = 8;
  BYTE4(qword_2579627C0) = 1;
  LODWORD(qword_2579627C0) = 8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962730);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257962730, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Size of the expression which is considered huge";
  v14.n128_u64[1] = 47;
  v12 = 4096;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [41],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((llvm::cl::Option *)&unk_2579627F0, "scalar-evolution-huge-expr-threshold", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_2579627F0, &dword_24A800000);
  v7 = llvm::cl::Option::Option((uint64_t)&qword_2579628B0, 0, 0);
  dword_257962930 = 0;
  qword_257962940 = 0;
  qword_257962938 = (uint64_t)&off_251C12458;
  qword_2579628B0 = (uint64_t)off_251C12270;
  qword_257962948 = (uint64_t)&off_251C121B0;
  qword_257962950 = (uint64_t)&off_251C17200;
  qword_257962968 = (uint64_t)&qword_257962950;
  llvm::cl::Option::setArgStr(v7, (uint64_t *)"scev-range-iter-threshold", 0x19uLL);
  word_2579628BA = word_2579628BA & 0xFF9F | 0x20;
  qword_2579628D0 = (uint64_t)"Threshold for switching to iteratively computing SCEV ranges";
  qword_2579628D8 = 60;
  dword_257962930 = 32;
  BYTE4(qword_257962940) = 1;
  LODWORD(qword_257962940) = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579628B0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_2579628B0, &dword_24A800000);
  llvm::cl::Option::Option((uint64_t)&qword_257962970, 0, 0);
  byte_2579629F0 = 0;
  qword_257962A00 = 0;
  qword_2579629F8 = (uint64_t)&off_251C12500;
  qword_257962970 = (uint64_t)off_251C123A8;
  qword_257962A08 = (uint64_t)&off_251C12520;
  qword_257962A10 = (uint64_t)&off_251C12410;
  qword_257962A28 = (uint64_t)&qword_257962A10;
  llvm::cl::Option::setArgStr((uint64_t)&qword_257962970, (uint64_t *)"scalar-evolution-classify-expressions", 0x25uLL);
  word_25796297A = word_25796297A & 0xFF9F | 0x20;
  byte_2579629F0 = 1;
  LOWORD(qword_257962A00) = 257;
  qword_257962990 = (uint64_t)"When printing analysis, include information on every instruction";
  qword_257962998 = 64;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962970);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962970, &dword_24A800000);
  v8 = llvm::cl::Option::Option((uint64_t)&qword_257962A30, 0, 0);
  byte_257962AB0 = 0;
  qword_257962AC0 = 0;
  qword_257962AB8 = (uint64_t)&off_251C12500;
  qword_257962A30 = (uint64_t)off_251C123A8;
  qword_257962AC8 = (uint64_t)&off_251C12520;
  qword_257962AD0 = (uint64_t)&off_251C12410;
  qword_257962AE8 = (uint64_t)&qword_257962AD0;
  llvm::cl::Option::setArgStr(v8, (uint64_t *)"scalar-evolution-use-expensive-range-sharpening", 0x2FuLL);
  word_257962A3A = word_257962A3A & 0xFF9F | 0x20;
  byte_257962AB0 = 0;
  LOWORD(qword_257962AC0) = 256;
  qword_257962A50 = (uint64_t)"Use more powerful methods of sharpening expression ranges. May be costly in terms of compile time";
  qword_257962A58 = 97;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962A30);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962A30, &dword_24A800000);
  v15 = 1;
  v14.n128_u64[0] = (unint64_t)"Maximum amount of nodes to process while searching SCEVUnknown Phi strongly connected components";
  v14.n128_u64[1] = 96;
  v12 = 8;
  v13 = &v12;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [32],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)&unk_257962AF0, "scalar-evolution-max-scc-analysis-depth", &v15, &v14, &v13);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &unk_257962AF0, &dword_24A800000);
  v9 = llvm::cl::Option::Option((uint64_t)&qword_257962BB0, 0, 0);
  byte_257962C30 = 0;
  qword_257962C40 = 0;
  qword_257962C38 = (uint64_t)&off_251C12500;
  qword_257962BB0 = (uint64_t)off_251C123A8;
  qword_257962C48 = (uint64_t)&off_251C12520;
  qword_257962C50 = (uint64_t)&off_251C12410;
  qword_257962C68 = (uint64_t)&qword_257962C50;
  llvm::cl::Option::setArgStr(v9, (uint64_t *)"scalar-evolution-finite-loop", 0x1CuLL);
  word_257962BBA = word_257962BBA & 0xFF9F | 0x20;
  qword_257962BD0 = (uint64_t)"Handle <= and >= in finite loops";
  qword_257962BD8 = 32;
  byte_257962C30 = 1;
  LOWORD(qword_257962C40) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962BB0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962BB0, &dword_24A800000);
  v10 = llvm::cl::Option::Option((uint64_t)&qword_257962C70, 0, 0);
  byte_257962CF0 = 0;
  qword_257962D00 = 0;
  qword_257962CF8 = (uint64_t)&off_251C12500;
  qword_257962C70 = (uint64_t)off_251C123A8;
  qword_257962D08 = (uint64_t)&off_251C12520;
  qword_257962D10 = (uint64_t)&off_251C12410;
  qword_257962D28 = (uint64_t)&qword_257962D10;
  llvm::cl::Option::setArgStr(v10, (uint64_t *)"scalar-evolution-use-context-for-no-wrap-flag-strenghening", 0x3AuLL);
  word_257962C7A = word_257962C7A & 0xFF9F | 0x20;
  qword_257962C90 = (uint64_t)"Infer nuw/nsw flags using context where suitable";
  qword_257962C98 = 48;
  byte_257962CF0 = 1;
  LOWORD(qword_257962D00) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962C70);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962C70, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_StackSafetyAnalysis_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_21, 0, 0);
  dword_257962DB0 = 0;
  qword_257962DB8 = (uint64_t)&off_251C12478;
  *(_QWORD *)&dword_257962DC0 = 0;
  _MergedGlobals_21 = (uint64_t)off_251C122D8;
  qword_257962DC8 = (uint64_t)&off_251C12180;
  qword_257962DD0 = (uint64_t)&off_251C17248;
  qword_257962DE8 = (uint64_t)&qword_257962DD0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"stack-safety-max-iterations", 0x1BuLL);
  dword_257962DB0 = 20;
  byte_257962DC4 = 1;
  dword_257962DC0 = 20;
  word_257962D3A = word_257962D3A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_21);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &_MergedGlobals_21, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257962DF0, 0, 0);
  byte_257962E70 = 0;
  qword_257962E78 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257962E80 = 0;
  qword_257962DF0 = (uint64_t)off_251C123A8;
  qword_257962E88 = (uint64_t)&off_251C12520;
  qword_257962E90[0] = &off_251C12410;
  qword_257962EA8 = (uint64_t)qword_257962E90;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"stack-safety-print", 0x12uLL);
  byte_257962E70 = 0;
  word_257962E80 = 256;
  word_257962DFA = word_257962DFA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962DF0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962DF0, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&qword_257962EB0, 0, 0);
  byte_257962F30 = 0;
  qword_257962F40 = 0;
  qword_257962F38 = (uint64_t)&off_251C12500;
  qword_257962EB0 = (uint64_t)off_251C123A8;
  qword_257962F48 = (uint64_t)&off_251C12520;
  qword_257962F50 = (uint64_t)&off_251C12410;
  qword_257962F68 = (uint64_t)&qword_257962F50;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"stack-safety-run", 0x10uLL);
  byte_257962F30 = 0;
  LOWORD(qword_257962F40) = 256;
  word_257962EBA = word_257962EBA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257962EB0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257962EB0, &dword_24A800000);
}

void llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C17928;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C17990;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C17928;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C17990;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C17990;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

unint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_251C179E0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C17990;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::TargetLibraryInfoImpl::VectorLibrary>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t llvm::operator<(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;

  if (*a1 < *a2)
    return 1;
  if (*a2 < *a1)
    return 0;
  v2 = a1[1] & 0x7FFFFFFF;
  v3 = a2[1] & 0x7FFFFFFF;
  if (v2 < v3)
    return 1;
  if (v3 < v2)
    return 0;
  v5 = a1[2] & 0x7FFFFFFF;
  v6 = a2[2] & 0x7FFFFFFF;
  v8 = v6 >= v5 && (a1[3] & 0x7FFFFFFFu) < (a2[3] & 0x7FFFFFFFu);
  return v5 < v6 || v8;
}

void std::__function::__func<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1},std::allocator<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1}>,void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1},std::allocator<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1}>,void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C17A20;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1},std::allocator<llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::{lambda(llvm::TargetLibraryInfoImpl::VectorLibrary const&)#1}>,void ()(llvm::TargetLibraryInfoImpl::VectorLibrary const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C17A20;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::OptionInfo,false>::grow(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_257963018, &unk_257963028, a1, 48, &v8);
  v2 = (_OWORD *)qword_257963018;
  if ((_DWORD)qword_257963020)
  {
    v3 = qword_257963018 + 48 * qword_257963020;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_251C17A00;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_251C179E0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_257963018;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_257963028)
    free(v2);
  qword_257963018 = (uint64_t)v1;
  HIDWORD(qword_257963020) = v7;
}

uint64_t _GLOBAL__sub_I_TargetLibraryInfo_cpp()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t *v3;
  unint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  const char **p_src;
  uint64_t v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  char *v14;
  char *v15;
  uint64_t v16;
  _BYTE v17[160];
  const char *__src;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  __src = "none";
  v19 = 4;
  LODWORD(v20) = 0;
  *((_QWORD *)&v20 + 1) = "No vector functions library";
  v21 = 27;
  v22 = "Accelerate";
  v23 = 10;
  v24 = 1;
  v25 = "Accelerate framework";
  v26 = 20;
  v27 = "Darwin_libsystem_m";
  v28 = 18;
  v29 = 2;
  v30 = "Darwin libsystem_m";
  v31 = 18;
  v32 = "LIBMVEC-X86";
  v33 = 11;
  v34 = 3;
  v35 = "GLIBC Vector Math library";
  v36 = 25;
  v37 = "MASSV";
  v38 = 5;
  v39 = 4;
  v40 = "IBM MASS vector library";
  v41 = 23;
  v42 = "SVML";
  v43 = 4;
  v44 = 5;
  v45 = "Intel SVML library";
  v46 = 18;
  v47 = "sleefgnuabi";
  v48 = 11;
  v49 = 6;
  v50 = "SIMD Library for Evaluating Elementary Functions";
  v51 = 48;
  v15 = v17;
  v16 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v15, &__src, &v52);
  v0 = llvm::cl::Option::Option((uint64_t)&ClVectorLibrary, 0, 0);
  dword_257962FF0 = 0;
  qword_257962FF8 = (uint64_t)&off_251C179E0;
  *(_QWORD *)&dword_257963000 = 0;
  ClVectorLibrary = (uint64_t)off_251C17928;
  qword_257963008 = (uint64_t)&off_251C17990;
  qword_257963010 = (uint64_t)&ClVectorLibrary;
  qword_257963018 = (uint64_t)&unk_257963028;
  qword_257963020 = 0x800000000;
  qword_2579631A8 = (uint64_t)&off_251C17A20;
  qword_2579631C0 = (uint64_t)&qword_2579631A8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"vector-library", 0xEuLL);
  word_257962F7A = word_257962F7A & 0xFF9F | 0x20;
  qword_257962F90 = (uint64_t)"Vector functions library";
  unk_257962F98 = 24;
  dword_257962FF0 = 0;
  byte_257963004 = 1;
  dword_257963000 = 0;
  if ((_DWORD)v16)
  {
    v1 = v15;
    v2 = &v15[40 * v16];
    do
    {
      v3 = *(uint64_t **)v1;
      v4 = *((_QWORD *)v1 + 1);
      v5 = *((_DWORD *)v1 + 4);
      v6 = *(_OWORD *)(v1 + 24);
      __src = *(const char **)v1;
      v19 = v4;
      v20 = v6;
      v21 = (uint64_t)&off_251C179E0;
      BYTE4(v22) = 1;
      LODWORD(v22) = v5;
      v7 = qword_257963018;
      if (qword_257963020 >= HIDWORD(qword_257963020))
      {
        v12 = qword_257963020 + 1;
        if (qword_257963018 <= (unint64_t)&__src
          && qword_257963018 + 48 * (unint64_t)qword_257963020 > (unint64_t)&__src)
        {
          v14 = (char *)&__src - qword_257963018;
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::OptionInfo,false>::grow(v12);
          v7 = qword_257963018;
          p_src = (const char **)&v14[qword_257963018];
          goto LABEL_5;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>::OptionInfo,false>::grow(v12);
        v7 = qword_257963018;
      }
      p_src = &__src;
LABEL_5:
      v9 = v7 + 48 * qword_257963020;
      v10 = *((_OWORD *)p_src + 1);
      *(_OWORD *)v9 = *(_OWORD *)p_src;
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v9 + 32) = &off_251C17A00;
      v11 = *((_DWORD *)p_src + 10);
      *(_BYTE *)(v9 + 44) = *((_BYTE *)p_src + 44);
      *(_DWORD *)(v9 + 40) = v11;
      *(_QWORD *)(v9 + 32) = &off_251C179E0;
      LODWORD(qword_257963020) = qword_257963020 + 1;
      llvm::cl::AddLiteralOption(qword_257963010, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ClVectorLibrary);
  if (v15 != v17)
    free(v15);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::TargetLibraryInfoImpl::VectorLibrary,false,llvm::cl::parser<llvm::TargetLibraryInfoImpl::VectorLibrary>>::~opt, &ClVectorLibrary, &dword_24A800000);
}

_QWORD *llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(_QWORD *a1)
{
  unint64_t IndexedType;
  int v3;
  unint64_t v4;

  IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)a1);
  v3 = *(unsigned __int8 *)(IndexedType + 8);
  if (IndexedType && v3 == 17 || IndexedType && (v3 & 0xFE) == 0x12)
  {
    v4 = *(_QWORD *)(IndexedType + 24) | 4;
  }
  else if (v3 == 16)
  {
    v4 = IndexedType & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
    v4 = 0;
  }
  a1[1] = v4;
  *a1 += 8;
  return a1;
}

uint64_t _GLOBAL__sub_I_TargetTransformInfo_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_22, 0, 0);
  byte_257963248 = 0;
  qword_257963250 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257963258 = 0;
  _MergedGlobals_22 = (uint64_t)off_251C123A8;
  qword_257963260 = (uint64_t)&off_251C12520;
  qword_257963268 = (uint64_t)&off_251C12410;
  qword_257963280 = (uint64_t)&qword_257963268;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"costmodel-reduxcost", 0x13uLL);
  byte_257963248 = 0;
  word_257963258 = 256;
  word_2579631D2 = word_2579631D2 & 0xFF9F | 0x20;
  qword_2579631E8 = (uint64_t)"Recognize reduction patterns.";
  unk_2579631F0 = 29;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_22);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_22, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_257963288, 0, 0);
  dword_257963308 = 0;
  qword_257963310 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257963318 = 0;
  qword_257963288 = (uint64_t)off_251C12270;
  qword_257963320 = (uint64_t)&off_251C121B0;
  qword_257963328[0] = &off_251C17200;
  qword_257963340 = (uint64_t)qword_257963328;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"cache-line-size", 0xFuLL);
  dword_257963308 = 0;
  byte_25796331C = 1;
  dword_257963318 = 0;
  word_257963292 = word_257963292 & 0xFF9F | 0x20;
  qword_2579632A8 = (uint64_t)"Use this to override the target cache line size when specified by the user.";
  unk_2579632B0 = 75;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257963288);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_257963288, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&PredictableBranchThreshold, 0, 0);
  dword_257965E88 = 0;
  qword_257965E90 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257965E98 = 0;
  PredictableBranchThreshold = (uint64_t)off_251C12270;
  qword_257965EA0 = (uint64_t)&off_251C121B0;
  qword_257965EA8 = (uint64_t)&off_251C17200;
  qword_257965EC0 = (uint64_t)&qword_257965EA8;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"predictable-branch-threshold", 0x1CuLL);
  dword_257965E88 = 99;
  byte_257965E9C = 1;
  dword_257965E98 = 99;
  word_257965E12 = word_257965E12 & 0xFF9F | 0x20;
  qword_257965E28 = (uint64_t)"Use this to override the target's predictable branch threshold (%).";
  unk_257965E30 = 67;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PredictableBranchThreshold);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &PredictableBranchThreshold, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_TypeBasedAliasAnalysis_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&EnableTBAA, 0, 0);
  byte_257965F48 = 0;
  qword_257965F50 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257965F58 = 0;
  EnableTBAA = (uint64_t)off_251C123A8;
  qword_257965F60 = (uint64_t)&off_251C12520;
  qword_257965F68 = (uint64_t)&off_251C12410;
  qword_257965F80 = (uint64_t)&qword_257965F68;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-tbaa", 0xBuLL);
  byte_257965F48 = 1;
  word_257965F58 = 257;
  word_257965ED2 = word_257965ED2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableTBAA);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableTBAA, &dword_24A800000);
}

uint64_t _GLOBAL__sub_I_ScopedNoAliasAA_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&EnableScopedNoAlias, 0, 0);
  byte_257966008 = 0;
  qword_257966010 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257966018 = 0;
  EnableScopedNoAlias = (uint64_t)off_251C123A8;
  qword_257966020 = (uint64_t)&off_251C12520;
  qword_257966028 = (uint64_t)&off_251C12410;
  qword_257966040 = (uint64_t)&qword_257966028;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-scoped-noalias", 0x15uLL);
  byte_257966008 = 1;
  word_257966018 = 257;
  word_257965F92 = word_257965F92 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableScopedNoAlias);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &EnableScopedNoAlias, &dword_24A800000);
}

uint64_t llvm::IntrinsicInst::isAssumeLikeIntrinsic(llvm::IntrinsicInst *this)
{
  int v1;
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v8;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  result = 1;
  if (v1 <= 239)
  {
    if (v1 <= 0x3B && ((1 << v1) & 0xF00000000000080) != 0)
      return result;
    v4 = v1 - 127;
    v5 = v4 > 0x2C;
    v6 = (1 << v4) & 0x18C000000001;
    if (!v5 && v6 != 0)
      return result;
    return 0;
  }
  v8 = (v1 - 240) > 0x23 || ((1 << (v1 + 16)) & 0x800000301) == 0;
  if (v8 && v1 != 319)
    return 0;
  return result;
}

char *llvm::InsertValueInst::Create(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4, const llvm::Twine *a5, uint64_t *a6)
{
  _DWORD *v12;
  unsigned int *v13;

  v12 = operator new(0xA0uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 16;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = v12 + 16;
  v13 = (unsigned int *)llvm::Instruction::Instruction((uint64_t)(v12 + 16), *a1, 65, (uint64_t)v12, 2, a6);
  *((_QWORD *)v12 + 16) = v12 + 36;
  *((_QWORD *)v12 + 17) = 0x400000000;
  llvm::InsertValueInst::init(v13, (uint64_t)a1, a2, a3, a4, a5);
  return (char *)(v12 + 16);
}

uint64_t llvm::APInt::ashr@<X0>(const void **this@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  void *v7;
  unsigned int LimitedValue;

  v6 = *((unsigned int *)this + 2);
  *(_DWORD *)(a3 + 8) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *(_QWORD *)a3 = v7;
    memcpy(v7, *this, ((v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a3 = *this;
  }
  LimitedValue = llvm::APInt::getLimitedValue(a2, v6);
  return llvm::APInt::ashrInPlace(a3, LimitedValue);
}

uint64_t _GLOBAL__sub_I_ValueTracking_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&DomConditionsMaxUses, 0, 0);
  dword_2579633C8 = 0;
  qword_2579633D0 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_2579633D8 = 0;
  DomConditionsMaxUses = (uint64_t)off_251C12270;
  qword_2579633E0 = (uint64_t)&off_251C121B0;
  qword_2579633E8 = (uint64_t)&off_251C17200;
  qword_257963400 = (uint64_t)&qword_2579633E8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"dom-conditions-max-uses", 0x17uLL);
  word_257963352 = word_257963352 & 0xFF9F | 0x20;
  dword_2579633C8 = 20;
  byte_2579633DC = 1;
  dword_2579633D8 = 20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&DomConditionsMaxUses);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &DomConditionsMaxUses, &dword_24A800000);
}

uint64_t llvm::SmallVectorImpl<int>::assign(uint64_t a1, unint64_t a2, int a3)
{
  int *v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;

  if (*(unsigned int *)(a1 + 12) < a2)
    return (uint64_t)llvm::SmallVectorTemplateBase<int,true>::growAndAssign(a1, a2, a3);
  v3 = *(int **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
    v5 = a2;
  else
    v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    v6 = *(int **)a1;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
    v4 = *(unsigned int *)(a1 + 8);
  }
  v7 = v4 - a2;
  if (v4 < a2)
  {
    v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void *llvm::SmallVectorTemplateBase<int,true>::growAndAssign(uint64_t a1, unint64_t a2, int a3)
{
  void *result;
  _DWORD *v7;
  unint64_t v8;

  *(_DWORD *)(a1 + 8) = 0;
  result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 4);
  if (a2)
  {
    v7 = *(_DWORD **)a1;
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  return result;
}

uint64_t _GLOBAL__sub_I_VectorUtils_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&MaxInterleaveGroupFactor, 0, 0);
  dword_257963488 = 0;
  qword_257963490 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257963498 = 0;
  MaxInterleaveGroupFactor = (uint64_t)off_251C12270;
  qword_2579634A0 = (uint64_t)&off_251C121B0;
  qword_2579634A8 = (uint64_t)&off_251C17200;
  qword_2579634C0 = (uint64_t)&qword_2579634A8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"max-interleave-group-factor", 0x1BuLL);
  word_257963412 = word_257963412 & 0xFF9F | 0x20;
  qword_257963428 = (uint64_t)"Maximum factor for an interleaved access group (default = 8)";
  unk_257963430 = 60;
  dword_257963488 = 8;
  byte_25796349C = 1;
  dword_257963498 = 8;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&MaxInterleaveGroupFactor);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &MaxInterleaveGroupFactor, &dword_24A800000);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 40;
  v1 = v3[0];
  v3[1] = 8;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawLastModified(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 16;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawUID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 28;
  v1 = v3[0];
  v3[1] = 6;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawGID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 34;
  v1 = v3[0];
  v3[1] = 6;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getSizeOf()
{
  return 60;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 96;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawLastModified(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 60;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawUID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 72;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawGID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 84;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getOffset(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getSizeOf()
{
  return 114;
}

void createMemberHeaderParseError(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  llvm::formatv_object_base **v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*a2 + 64))(v19, a2, a4);
  if ((v20 & 1) != 0)
  {
    v8 = (const char *)v19[0];
    v19[0] = 0;
    v13 = v8;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v13);
    if (v13)
      (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
    v12 = a3 - *(_QWORD *)(a2[1] + 16);
    v16 = 773;
    v13 = "remaining size of archive too small for next archive member header ";
    v14 = 67;
    v15 = "at offset ";
    v10[0] = &v13;
    v10[2] = &v12;
    v11 = 3074;
    v7 = (llvm::formatv_object_base **)v10;
  }
  else
  {
    v16 = 773;
    v13 = "remaining size of archive too small for next archive member header ";
    v14 = 67;
    v15 = "for ";
    v17[0] = &v13;
    v17[2] = v19[0];
    v17[3] = v19[1];
    v18 = 1282;
    v7 = (llvm::formatv_object_base **)v17;
  }
  malformedError(a1, v7);
  if ((v20 & 1) != 0)
  {
    v9 = v19[0];
    v19[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void malformedError(uint64_t *a1, llvm::formatv_object_base **a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;
  std::string v11;
  __int16 v12;

  llvm::Twine::str(a2, &v8);
  v3 = std::string::insert(&v8, 0, "truncated or malformed archive (");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v11, ")");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v7 = operator new();
  v12 = 260;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v7, (llvm::formatv_object_base **)&v11, 3u);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;
  std::string v11;
  __int16 v12;

  llvm::Twine::str(a2, &v8);
  v3 = std::string::insert(&v8, 0, "truncated or malformed fat file (");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v11, ")");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v7 = operator new();
  v12 = 260;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v7, (llvm::formatv_object_base **)&v11, 3u);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void llvm::object::ArchiveMemberHeader::getRawName(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v6;
  int v7;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  llvm::formatv_object_base *v12[4];
  __int16 v13;
  _BYTE *v14;

  v3 = *((_QWORD *)this + 1);
  v4 = *(_BYTE *)(v3 + 98) & 7;
  if (v4 == 4 || v4 == 2)
  {
    v6 = (_BYTE *)*((_QWORD *)this + 2);
    if (*v6 == 32)
    {
      v14 = &v6[-*(_QWORD *)(v3 + 16)];
      v12[0] = (llvm::formatv_object_base *)"name contains a leading space for archive member header at offset ";
      v12[2] = (llvm::formatv_object_base *)&v14;
      v13 = 3075;
      malformedError((uint64_t *)a2, v12);
      *(_BYTE *)(a2 + 16) |= 1u;
      return;
    }
    v9 = 32;
  }
  else
  {
    v6 = (_BYTE *)*((_QWORD *)this + 2);
    v7 = *v6;
    if (v7 == 35 || v7 == 47)
      v9 = 32;
    else
      v9 = 47;
  }
  v10 = memchr(v6, v9, 0x10uLL);
  v11 = v10 - v6;
  if (!v10)
    v11 = -1;
  *(_BYTE *)(a2 + 16) &= ~1u;
  if (v11 == -1)
    v11 = 16;
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v11;
}

void getArchiveMemberDecField(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v10;
  int v11;
  const char *v12;
  char v13;
  char v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  unint64_t v22[4];
  __int16 v23;
  unint64_t *v24;
  unint64_t *v25;
  const char *v26;
  __int16 v27;
  llvm::formatv_object_base *v28[4];
  char v29;
  char v30;
  unint64_t v31;
  uint64_t v32;

  v22[0] = 0;
  v24 = (unint64_t *)a3;
  v25 = a4;
  if ((llvm::consumeUnsignedInteger((llvm *)&v24, (llvm::StringRef *)0xA, v22, a4) & 1) != 0 || v25)
  {
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 80))(a5);
    v11 = *((unsigned __int8 *)a2 + 32);
    if (*((_BYTE *)a2 + 32))
    {
      if (v11 == 1)
      {
        v12 = "characters in ";
        v18[0] = "characters in ";
        v19 = 259;
        v13 = 3;
      }
      else
      {
        v16 = (uint64_t *)*a2;
        v17 = a2[1];
        v13 = 2;
        if (*((_BYTE *)a2 + 33) != 1)
        {
          LOBYTE(v11) = 2;
          v16 = a2;
        }
        v18[0] = "characters in ";
        v18[2] = v16;
        v18[3] = v17;
        LOBYTE(v19) = 3;
        HIBYTE(v19) = v11;
        v12 = (const char *)v18;
      }
      v20[0] = v12;
      v20[2] = " field in archive member header are not all decimal numbers: '";
      LOBYTE(v21) = v13;
      HIBYTE(v21) = 3;
      v22[0] = (unint64_t)v20;
      v22[2] = a3;
      v22[3] = (unint64_t)a4;
      v23 = 1282;
      v24 = v22;
      v26 = "' for the archive member header at offset ";
      v27 = 770;
      v15 = 12;
      v14 = 2;
      v28[0] = (llvm::formatv_object_base *)&v24;
      v28[2] = (llvm::formatv_object_base *)&v32;
    }
    else
    {
      v14 = 0;
      v19 = 256;
      v21 = 256;
      v23 = 256;
      v27 = 256;
      v15 = 1;
    }
    v29 = v14;
    v30 = v15;
    malformedError((uint64_t *)&v31, v28);
    *(_BYTE *)(a1 + 8) |= 1u;
    v10 = v31;
  }
  else
  {
    v10 = v22[0];
    *(_BYTE *)(a1 + 8) &= ~1u;
  }
  *(_QWORD *)a1 = v10;
}

void llvm::object::BigArchiveMemberHeader::getRawName(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t last_not_of;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  llvm::formatv_object_base *v11[4];
  __int16 v12;
  unint64_t v13;
  const char *v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14 = "NameLen";
  v15 = 259;
  v4 = *((_QWORD *)this + 2) + 108;
  v16 = v4;
  v17 = 4;
  last_not_of = llvm::StringRef::find_last_not_of(&v16, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 4)
    v6 = last_not_of + 1;
  else
    v6 = 4;
  getArchiveMemberDecField((uint64_t)&v16, (uint64_t *)&v14, v4, (unint64_t *)v6, (uint64_t)this);
  if ((v17 & 1) != 0)
  {
    v10 = v16;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v10;
  }
  else
  {
    v7 = v16;
    v8 = (v16 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v9 = *((_QWORD *)this + 2) + 112;
    if (v8 != -2 && *(_WORD *)(v9 + v8) == 2656)
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v7;
    }
    else
    {
      v13 = v9 + v8 - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
      v11[2] = (llvm::formatv_object_base *)&v13;
      v12 = 3075;
      malformedError((uint64_t *)a2, v11);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
  }
}

void llvm::object::ArchiveMemberHeader::getName(llvm::object::ArchiveMemberHeader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  std::string *v37;
  std::string::size_type v38;
  llvm::formatv_object_base **v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  char *v44;
  llvm::formatv_object_base **v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE v61[40];
  _QWORD v62[4];
  __int16 v63;
  _BYTE v64[40];
  uint64_t v65[4];
  __int16 v66;
  uint64_t v67[4];
  __int16 v68;
  std::string v69;
  __int16 v70;
  void *__p[2];
  std::string::size_type v72;
  __int16 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  _BYTE v78[40];
  uint64_t v79;
  _QWORD v80[4];
  __int16 v81;
  void (**v82)(llvm::raw_string_ostream *__hidden);
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  int v89;
  void **v90;
  void *v91;
  llvm::formatv_object_base *v92[4];
  __int16 v93;
  __int128 v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0xF)
  {
    v82 = (void (**)(llvm::raw_string_ostream *__hidden))(*((_QWORD *)this + 2)
                                                                   - *(_QWORD *)(*((_QWORD *)this + 1) + 16));
    v92[0] = (llvm::formatv_object_base *)"archive header truncated before the name field for archive member header at offset ";
    v92[2] = (llvm::formatv_object_base *)&v82;
    v93 = 3075;
    malformedError((uint64_t *)a3, v92);
    *(_BYTE *)(a3 + 16) |= 1u;
    return;
  }
  (*(void (**)(__int128 *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 24))(&v94, this);
  v7 = v94;
  if ((v95 & 1) != 0)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
    return;
  }
  v8 = *((_QWORD *)&v94 + 1);
  if (*(_BYTE *)v94 != 47)
  {
    v9 = *((_QWORD *)&v94 + 1) - 3;
    if (*((_QWORD *)&v94 + 1) < 3uLL || (*(_WORD *)v94 == 12579 ? (v10 = *(_BYTE *)(v94 + 2) == 47) : (v10 = 0), !v10))
    {
      v11 = *((_QWORD *)&v94 + 1) - 1;
      if (*(_BYTE *)(v94 + *((_QWORD *)&v94 + 1) - 1) == 47)
      {
        if (*((_QWORD *)&v94 + 1) < v11)
          v11 = *((_QWORD *)&v94 + 1);
      }
      else
      {
        v15 = *((_QWORD *)&v94 + 1);
        do
        {
          v16 = v15;
          if (!v15)
            break;
          --v15;
        }
        while (*(_BYTE *)(v94 - 1 + v16) == 32);
        if (v16 >= *((_QWORD *)&v94 + 1))
          v11 = *((_QWORD *)&v94 + 1);
        else
          v11 = v16;
      }
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v7;
      goto LABEL_30;
    }
    v40 = *((_QWORD *)&v94 + 1) - 1;
    v41 = *((_QWORD *)&v94 + 1) - 1;
    do
    {
      v42 = v41 - 2;
      if (v41 == 2)
        break;
      v43 = *(unsigned __int8 *)(v94 + v41--);
    }
    while (v43 == 32);
    v74 = 0;
    if (v42 >= v9)
      v42 = *((_QWORD *)&v94 + 1) - 3;
    v82 = (void (**)(llvm::raw_string_ostream *__hidden))(v94 + 3);
    v83 = v42;
    if ((llvm::consumeUnsignedInteger((llvm *)&v82, (llvm::StringRef *)0xA, (unint64_t *)&v74, v6) & 1) == 0
      && !v83)
    {
      v44 = (char *)v74;
      v91 = v74;
      if ((unint64_t)&v44[(*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this
                                                                                                 + 104))(this)] <= a2)
      {
        v55 = *((_QWORD *)this + 2);
        v56 = (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 104))(this);
        v57 = v44;
        do
        {
          v58 = (unint64_t)v57;
          if (!v57)
            break;
          --v57;
        }
        while (!*(_BYTE *)(v55 + v56 - 1 + v58));
        if (v58 >= (unint64_t)v44)
          v59 = (unint64_t)v44;
        else
          v59 = v58;
        *(_BYTE *)(a3 + 16) &= ~1u;
        *(_QWORD *)a3 = v55 + v56;
        *(_QWORD *)(a3 + 8) = v59;
        goto LABEL_112;
      }
      v79 = *((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
      __p[0] = "long name length: ";
      v73 = 259;
      v70 = 268;
      v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
      llvm::operator+((uint64_t *)__p, (uint64_t *)&v69, (uint64_t)&v74);
      v67[0] = (uint64_t)" extends past the end of the member or archive for archive member header at offset ";
      v68 = 259;
      llvm::operator+((uint64_t *)&v74, v67, (uint64_t)&v82);
      v66 = 268;
      v65[0] = (uint64_t)&v79;
      llvm::operator+((uint64_t *)&v82, v65, (uint64_t)v61);
      v45 = (llvm::formatv_object_base **)v61;
      goto LABEL_109;
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    LODWORD(v83) = 0;
    v87 = 0;
    v88 = 0;
    v89 = 1;
    v85 = 0;
    v86 = 0;
    v84 = 0;
    v82 = &off_251C13AC0;
    v90 = &v74;
    llvm::raw_ostream::SetUnbuffered(&v82);
    do
    {
      v46 = v40 - 2;
      if (v40 == 2)
        break;
      v47 = *(unsigned __int8 *)(v7 + v40--);
    }
    while (v47 == 32);
    if (v46 >= v9)
      v48 = v9;
    else
      v48 = v46;
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v82, (char *)(v7 + 3), v48, 0);
    if (v86 != v84)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v82);
    v67[0] = *((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
    std::operator+<char>();
    v49 = std::string::append(&v69, "' for archive member header at offset ");
    v50 = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v72 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v62[0] = __p;
    v62[2] = v67;
    v63 = 3076;
    v39 = (llvm::formatv_object_base **)v62;
LABEL_80:
    malformedError((uint64_t *)a3, v39);
    *(_BYTE *)(a3 + 16) |= 1u;
    if (SHIBYTE(v72) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    v82 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v89 == 1 && v84)
      MEMORY[0x24BD1B380](v84, 0x1000C8077774924);
    if (SHIBYTE(v76) < 0)
      operator delete(v74);
    goto LABEL_112;
  }
  if (*((uint64_t *)&v94 + 1) > 12)
  {
    if (*((_QWORD *)&v94 + 1) == 13)
    {
      v12 = *(_QWORD *)(v94 + 5);
      v13 = *(_QWORD *)v94 == 0x424D595343453C2FLL;
      v14 = 0x534C4F424D59;
    }
    else
    {
      if (*((_QWORD *)&v94 + 1) != 14)
        goto LABEL_36;
      v12 = *(_QWORD *)(v94 + 6);
      v13 = *(_QWORD *)v94 == 0x5341484746583C2FLL;
      v14 = 0x50414D485341;
    }
    v17 = v14 & 0xFFFFFFFFFFFFLL | 0x2F3E000000000000;
    if (v13 && v12 == v17)
      goto LABEL_51;
  }
  else if (*((_QWORD *)&v94 + 1) == 1 || *((_QWORD *)&v94 + 1) == 2 && *(_BYTE *)(v94 + 1) == 47)
  {
LABEL_51:
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_OWORD *)a3 = v94;
    goto LABEL_112;
  }
LABEL_36:
  if (*((_QWORD *)&v94 + 1))
    v19 = (char *)(v94 + 1);
  else
    v19 = (char *)v94;
  v20 = *((_QWORD *)&v94 + 1) - (*((_QWORD *)&v94 + 1) != 0);
  v21 = (unsigned __int8 *)(*((_QWORD *)&v94 + 1) + v94 - 1);
  v22 = v20;
  do
  {
    v23 = v22;
    if (!v22)
      break;
    --v22;
    v24 = *v21--;
  }
  while (v24 == 32);
  v74 = 0;
  if (v23 >= v20)
    v25 = *((_QWORD *)&v94 + 1) - (*((_QWORD *)&v94 + 1) != 0);
  else
    v25 = v23;
  v82 = (void (**)(llvm::raw_string_ostream *__hidden))v19;
  v83 = v25;
  if ((llvm::consumeUnsignedInteger((llvm *)&v82, (llvm::StringRef *)0xA, (unint64_t *)&v74, v6) & 1) != 0
    || v83)
  {
    v74 = 0;
    v75 = 0;
    v76 = 0;
    LODWORD(v83) = 0;
    v87 = 0;
    v88 = 0;
    v89 = 1;
    v85 = 0;
    v86 = 0;
    v84 = 0;
    v82 = &off_251C13AC0;
    v90 = &v74;
    llvm::raw_ostream::SetUnbuffered(&v82);
    v32 = (unsigned __int8 *)(v8 + v7 - 1);
    v33 = v8 - (v8 != 0);
    do
    {
      v34 = v33;
      if (!v33)
        break;
      --v33;
      v35 = *v32--;
    }
    while (v35 == 32);
    if (v34 >= v20)
      v36 = v8 - (v8 != 0);
    else
      v36 = v34;
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v82, v19, v36, 0);
    if (v86 != v84)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v82);
    v67[0] = *((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
    std::operator+<char>();
    v37 = std::string::append(&v69, "' for archive member header at offset ");
    v38 = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v72 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v80[0] = __p;
    v80[2] = v67;
    v81 = 3076;
    v39 = (llvm::formatv_object_base **)v80;
    goto LABEL_80;
  }
  v26 = (char *)v74;
  v91 = v74;
  v27 = *((_QWORD *)this + 1);
  v28 = *(_QWORD *)(v27 + 72);
  if (v28 <= (unint64_t)v74)
  {
    v79 = *((_QWORD *)this + 2) - *(_QWORD *)(v27 + 16);
    __p[0] = "long name offset ";
    v73 = 259;
    v70 = 266;
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
    llvm::operator+((uint64_t *)__p, (uint64_t *)&v69, (uint64_t)&v74);
    v67[0] = (uint64_t)" past the end of the string table for archive member header at offset ";
    v68 = 259;
    llvm::operator+((uint64_t *)&v74, v67, (uint64_t)&v82);
    v66 = 268;
    v65[0] = (uint64_t)&v79;
    llvm::operator+((uint64_t *)&v82, v65, (uint64_t)v78);
    v45 = (llvm::formatv_object_base **)v78;
  }
  else
  {
    v29 = *(_QWORD *)(v27 + 64);
    if ((*(_BYTE *)(v27 + 98) & 6) != 0)
    {
      v30 = (char *)v74 + v29;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = &v26[v29];
      if (v29)
        v31 = strlen(v30);
      else
        v31 = 0;
      *(_QWORD *)(a3 + 8) = v31;
      goto LABEL_112;
    }
    v51 = memchr((char *)v74 + v29, 10, v28 - (_QWORD)v74);
    v52 = (uint64_t)v51 - v29;
    if (!v51)
      v52 = -1;
    if ((unint64_t)(v52 + 1) >= 2)
    {
      v53 = (char *)(v52 - 1);
      if (v53[v29] == 47)
      {
        if (v28 >= (unint64_t)v26)
          v54 = v26;
        else
          v54 = (char *)v28;
        if (v54 > v53)
          v53 = v26;
        if ((unint64_t)v53 >= v28)
          v53 = (char *)v28;
        *(_BYTE *)(a3 + 16) &= ~1u;
        v11 = v53 - v54;
        *(_QWORD *)a3 = &v54[v29];
LABEL_30:
        *(_QWORD *)(a3 + 8) = v11;
        goto LABEL_112;
      }
    }
    v74 = "string table at long name offset ";
    v77 = 259;
    v73 = 266;
    __p[0] = &v91;
    llvm::operator+((uint64_t *)&v74, (uint64_t *)__p, (uint64_t)&v82);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)"not terminated";
    v70 = 259;
    llvm::operator+((uint64_t *)&v82, (uint64_t *)&v69, (uint64_t)v64);
    v45 = (llvm::formatv_object_base **)v64;
  }
LABEL_109:
  malformedError((uint64_t *)a3, v45);
  *(_BYTE *)(a3 + 16) |= 1u;
LABEL_112:
  if ((v95 & 1) != 0)
  {
    v60 = v94;
    *(_QWORD *)&v94 = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
}

uint64_t llvm::object::BigArchiveMemberHeader::getName(llvm::object::BigArchiveMemberHeader *this)
{
  return (*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(_QWORD *)this + 24))(this);
}

void llvm::object::ArchiveMemberHeader::getSize(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t last_not_of;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  _QWORD v9[2];

  v7 = "size";
  v8 = 259;
  v4 = *((_QWORD *)this + 2) + 48;
  v9[0] = v4;
  v9[1] = 10;
  last_not_of = llvm::StringRef::find_last_not_of(v9, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0xA)
    v6 = last_not_of + 1;
  else
    v6 = 10;
  getArchiveMemberDecField(a2, (uint64_t *)&v7, v4, (unint64_t *)v6, (uint64_t)this);
}

void llvm::object::BigArchiveMemberHeader::getSize(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t last_not_of;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12 = "size";
  v13 = 259;
  v4 = *((_QWORD *)this + 2);
  v14[0] = v4;
  v14[1] = 20;
  last_not_of = llvm::StringRef::find_last_not_of(v14, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0x14)
    v6 = last_not_of + 1;
  else
    v6 = 20;
  getArchiveMemberDecField((uint64_t)&v16, (uint64_t *)&v12, v4, (unint64_t *)v6, (uint64_t)this);
  if ((v17 & 1) != 0)
  {
    v10 = v16;
LABEL_12:
    v11 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_13;
  }
  v14[0] = (uint64_t)"NameLen";
  v15 = 259;
  v7 = *((_QWORD *)this + 2) + 108;
  v18 = v7;
  v19 = 4;
  v8 = llvm::StringRef::find_last_not_of(&v18, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v8 + 1) < 4)
    v9 = v8 + 1;
  else
    v9 = 4;
  getArchiveMemberDecField((uint64_t)&v18, v14, v7, (unint64_t *)v9, (uint64_t)this);
  if ((v19 & 1) != 0)
  {
    v10 = v18;
    goto LABEL_12;
  }
  v10 = ((v18 + 1) & 0xFFFFFFFFFFFFFFFELL) + v16;
  v11 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_13:
  *(_BYTE *)(a2 + 8) = v11;
  *(_QWORD *)a2 = v10;
}

_QWORD *llvm::object::ArchiveMemberHeader::isThin@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  char v5;
  _DWORD *v6;
  BOOL v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(*(_QWORD *)this + 24))(&v8);
  if ((v10 & 1) != 0)
  {
    v6 = v8;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v6;
    return result;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 98) & 8) != 0)
  {
    switch(v9)
    {
      case 7:
        v7 = *v8 == 1297699631 && *(_DWORD *)((char *)v8 + 3) == 791950925;
        break;
      case 2:
        v7 = *(unsigned __int16 *)v8 == 12079;
        break;
      case 1:
        v7 = *(_BYTE *)v8 == 47;
        break;
      default:
        v5 = 1;
        goto LABEL_17;
    }
    v5 = !v7;
    goto LABEL_17;
  }
  v5 = 0;
LABEL_17:
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_BYTE *)a2 = v5;
  return result;
}

_QWORD *llvm::object::ArchiveMemberHeader::getNextChildLoc@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 104))(this);
  result = (*(_QWORD *(**)(_QWORD **__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 96))(&v10, this);
  if ((v11 & 1) != 0)
  {
    v6 = (unint64_t)v10;
    v10 = 0;
LABEL_8:
    *(_BYTE *)(a2 + 8) |= 1u;
    goto LABEL_9;
  }
  if ((_BYTE)v10)
    goto LABEL_5;
  result = (*(_QWORD *(**)(unint64_t *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 72))(&v8, this);
  if ((v9 & 1) != 0)
  {
    v6 = v8;
    goto LABEL_8;
  }
  v4 += v8;
LABEL_5:
  v6 = *((_QWORD *)this + 2) + ((v4 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 16) + *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  *(_BYTE *)(a2 + 8) &= ~1u;
  if (v6 == v7)
  {
    *(_QWORD *)a2 = 0;
    goto LABEL_10;
  }
LABEL_9:
  *(_QWORD *)a2 = v6;
LABEL_10:
  if ((v11 & 1) != 0)
  {
    result = v10;
    v10 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void llvm::object::BigArchiveMemberHeader::getNextChildLoc(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t last_not_of;
  uint64_t v6;
  unint64_t v7;
  char v8;
  const char *v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(llvm::object::BigArchiveMemberHeader *))(*(_QWORD *)this + 80))(this) == *(_QWORD *)(*((_QWORD *)this + 1) + 144))
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v9 = "NextOffset";
    v10 = 259;
    v4 = *((_QWORD *)this + 2) + 20;
    v11 = v4;
    v12 = 20;
    last_not_of = llvm::StringRef::find_last_not_of(&v11, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
    if ((unint64_t)(last_not_of + 1) < 0x14)
      v6 = last_not_of + 1;
    else
      v6 = 20;
    getArchiveMemberDecField((uint64_t)&v11, (uint64_t *)&v9, v4, (unint64_t *)v6, (uint64_t)this);
    if ((v12 & 1) != 0)
    {
      v7 = v11;
      v8 = *(_BYTE *)(a2 + 8) | 1;
    }
    else
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 16) + v11;
      v8 = *(_BYTE *)(a2 + 8) & 0xFE;
    }
    *(_BYTE *)(a2 + 8) = v8;
    *(_QWORD *)a2 = v7;
  }
}

void llvm::object::Archive::createArchiveMemberHeader(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  llvm::formatv_object_base *v13;
  std::string *v14;
  int v15;
  size_t v16;
  void **v17;
  std::string *v18;
  uint64_t v19;
  std::string::size_type v20;
  size_t size;
  void **v22;
  std::string *v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  std::string v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  std::string v32;
  llvm::formatv_object_base *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  void **v41;
  void *v42[2];
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v10 = *(_BYTE *)(a2 + 98) & 7;
  v11 = (_QWORD *)operator new();
  v12 = v11;
  if (v10 == 6)
  {
    v11[1] = a2;
    v11[2] = a3;
    *v11 = &off_251C17AE8;
    if (!a3)
      goto LABEL_67;
    if ((unint64_t)(a3 + 114) < *(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 24))
    {
      if (a4 <= 0x71)
      {
        createMemberHeaderParseError((uint64_t *)&v33, v11, a3, a4);
        if (a5)
        {
          *a5 = v33;
        }
        else if (v33)
        {
          (*(void (**)(void))(*(_QWORD *)v33 + 8))();
        }
      }
LABEL_64:
      if (!a5)
        goto LABEL_67;
LABEL_65:
      if (*a5)
        goto LABEL_67;
      goto LABEL_66;
    }
    if (!a5)
      goto LABEL_67;
    v33 = (llvm::formatv_object_base *)"malformed AIX big archive: remaining buffer is unable to contain next archive member";
    LOWORD(v37) = 259;
    malformedError((uint64_t *)&v27, &v33);
    v13 = (llvm::formatv_object_base *)v27.__r_.__value_.__r.__words[0];
  }
  else
  {
    v11[1] = a2;
    v11[2] = a3;
    *v11 = &off_251C17A68;
    if (!a3)
      goto LABEL_67;
    if (a4 > 0x3B)
    {
      if (*(_BYTE *)(a3 + 58) == 96)
      {
        if (!a5 || *(_BYTE *)(a3 + 59) == 10)
          goto LABEL_64;
      }
      else if (!a5)
      {
        goto LABEL_67;
      }
      v42[0] = 0;
      v42[1] = 0;
      v43 = 0;
      v34 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 1;
      v36 = 0;
      v37 = 0;
      v35 = 0;
      v33 = (llvm::formatv_object_base *)&off_251C13AC0;
      v41 = v42;
      llvm::raw_ostream::SetUnbuffered(&v33);
      llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v33, (char *)(v12[2] + 58), 2, 0);
      if (v37 != v35)
        llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v33);
      std::operator+<char>();
      v32 = *v14;
      v14->__r_.__value_.__r.__words[0] = 0;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      (*(void (**)(_QWORD *__return_ptr, _QWORD *, unint64_t))(*v12 + 64))(v44, v12, a4);
      if ((v45 & 1) != 0)
      {
        v20 = v44[0];
        v44[0] = 0;
        v27.__r_.__value_.__r.__words[0] = v20;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v27);
        if (v27.__r_.__value_.__r.__words[0])
          (*(void (**)(std::string::size_type))(*(_QWORD *)v27.__r_.__value_.__l.__data_ + 8))(v27.__r_.__value_.__r.__words[0]);
        v31 = a3 - *(_QWORD *)(a2 + 16);
        v15 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        else
          size = v32.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 10);
        if (v26 >= 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        if (size)
        {
          if (v15 >= 0)
            v23 = &v32;
          else
            v23 = (std::string *)v32.__r_.__value_.__r.__words[0];
          memmove(v22, v23, size);
        }
        strcpy((char *)v22 + size, "at offset ");
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        v27.__r_.__value_.__r.__words[2] = (std::string::size_type)&v31;
        v29 = 3076;
        malformedError(&v30, (llvm::formatv_object_base **)&v27);
        v19 = v30;
      }
      else
      {
        v15 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
        if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
        else
          v16 = v32.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)__p, v16 + 4);
        if (v26 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        if (v16)
        {
          if (v15 >= 0)
            v18 = &v32;
          else
            v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
          memmove(v17, v18, v16);
        }
        strcpy((char *)v17 + v16, "for ");
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        v27.__r_.__value_.__r.__words[2] = v44[0];
        v28 = v44[1];
        v29 = 1284;
        malformedError(&v31, (llvm::formatv_object_base **)&v27);
        v19 = v31;
      }
      *a5 = v19;
      if (v26 < 0)
        operator delete(__p[0]);
      if ((v45 & 1) != 0)
      {
        v24 = v44[0];
        v44[0] = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      if (v15 < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      v33 = (llvm::formatv_object_base *)off_251C13948;
      if (v40 == 1 && v35)
        MEMORY[0x24BD1B380](v35, 0x1000C8077774924);
      if (SHIBYTE(v43) < 0)
        operator delete(v42[0]);
      goto LABEL_65;
    }
    createMemberHeaderParseError((uint64_t *)&v33, v11, a3, a4);
    v13 = v33;
  }
  *a5 = v13;
  if (v13)
    goto LABEL_67;
LABEL_66:
  *a5 = 0;
LABEL_67:
  *a1 = v12;
  if (a5)
  {
    if (!*a5)
      *a5 = 0;
  }
}

uint64_t llvm::object::Archive::Child::Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  llvm::formatv_object_base *v31[5];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a3)
  {
    if (a2)
      v9 = *(_QWORD *)(a2 + 16) - a3 + *(_QWORD *)(a2 + 24);
    else
      v9 = 0;
    llvm::object::Archive::createArchiveMemberHeader(&v34, a2, a3, v9, a4);
    v10 = *v5;
    *v5 = v34;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (!*a4)
    {
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 16) = a3;
      *(_QWORD *)(a1 + 24) = v11;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(&v39);
      if ((v40 & 1) != 0)
      {
        v15 = v39;
        v39 = 0;
      }
      else
      {
        if ((_BYTE)v39)
          goto LABEL_12;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v5 + 72))(&v34);
        if ((v35 & 1) == 0)
        {
          v12 = v34 + v11;
          *(_QWORD *)(a1 + 16) = a3;
          *(_QWORD *)(a1 + 24) = v12;
LABEL_12:
          *(_WORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 24))(&v36);
          if ((v38 & 1) != 0)
          {
            *a4 = v36;
            v36 = 0;
          }
          else
          {
            if ((*(_BYTE *)(a2 + 98) & 7) == 6)
            {
              v14 = *(_WORD *)(a1 + 32) + ((v37 + 1) & 0xFFFE);
            }
            else
            {
              if (v37 < 3)
                goto LABEL_19;
              if (*(_WORD *)v36 != 12579 || *(_BYTE *)(v36 + 2) != 47)
                goto LABEL_19;
              v19 = v36 + 3;
              v20 = v37 - 1;
              do
              {
                v21 = v20 - 2;
                if (v20 == 2)
                  break;
                v22 = *(unsigned __int8 *)(v36 + v20--);
              }
              while (v22 == 32);
              v29[0] = 0;
              if (v21 >= v37 - 3)
                v23 = v37 - 3;
              else
                v23 = v21;
              v34 = v36 + 3;
              v35 = v23;
              if ((llvm::consumeUnsignedInteger((llvm *)&v34, (llvm::StringRef *)0xA, (unint64_t *)v29, v13) & 1) != 0
                || v35)
              {
                v33 = a3 - *(_QWORD *)(a2 + 16);
                v30 = 1283;
                v29[0] = (uint64_t)"long name length characters after the #1/ are not all decimal numbers: '";
                v29[2] = v19;
                v29[3] = v23;
                v27 = "' for archive member header at offset ";
                v28 = 259;
                llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)&v34);
                v26 = 268;
                v25 = &v33;
                llvm::operator+(&v34, (uint64_t *)&v25, (uint64_t)v31);
                malformedError(&v32, v31);
                *a4 = v32;
                if ((v38 & 1) != 0)
                {
                  v24 = v36;
                  v36 = 0;
                  if (v24)
                    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                }
                goto LABEL_19;
              }
              v14 = *(_WORD *)(a1 + 32) + LOWORD(v29[0]);
            }
            *(_WORD *)(a1 + 32) = v14;
          }
LABEL_19:
          if ((v40 & 1) != 0)
          {
            v16 = v39;
            v39 = 0;
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          if (!*a4)
            *a4 = 0;
          return a1;
        }
        v15 = v34;
      }
      *a4 = v15;
      goto LABEL_19;
    }
  }
  return a1;
}

_QWORD *llvm::object::Archive::Child::getName(llvm::object::Archive::Child *this, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  __int128 v10;
  char v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr))(**(_QWORD **)(a2 + 8) + 72))(&v12);
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    *((_BYTE *)this + 16) |= 1u;
    *(_QWORD *)this = v9;
  }
  else
  {
    v5 = v12;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(&v10, v6, (uint64_t)v5 + v7);
    if ((v11 & 1) != 0)
    {
      v8 = *((_BYTE *)this + 16) | 1;
      *(_QWORD *)this = v10;
    }
    else
    {
      *(_OWORD *)this = v10;
      v8 = *((_BYTE *)this + 16) & 0xFE;
    }
    *((_BYTE *)this + 16) = v8;
    if ((v13 & 1) != 0)
    {
      result = v12;
      v12 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

_QWORD *llvm::object::Archive::Child::getBuffer(llvm::object::Archive::Child *this, uint64_t a2)
{
  _QWORD *result;
  const void *v5;
  size_t v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  const void *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51[32];
  __int16 v52;
  unsigned __int8 v53[32];
  __int16 v54;
  _QWORD *v55;
  char v56;
  __int128 v57;
  unint64_t v58;
  __int16 v59;
  __int128 v60;
  unint64_t v61;
  char v62;
  __int16 v63;
  _BYTE __dst[24];
  uint64_t v65;
  __int16 v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr))(**(_QWORD **)(a2 + 8) + 96))(&v55);
  if ((v56 & 1) != 0)
  {
    v8 = v55;
    v55 = 0;
    goto LABEL_11;
  }
  if (!(_BYTE)v55)
  {
    if ((*(_BYTE *)(*(_QWORD *)a2 + 98) & 8) == 0)
    {
      v9 = *(_QWORD *)(a2 + 24) - *(unsigned __int16 *)(a2 + 32);
      __dst[8] = 0;
      *(_QWORD *)__dst = v9;
LABEL_16:
      v8 = (_QWORD *)(*(_QWORD *)(a2 + 16) + *(unsigned __int16 *)(a2 + 32));
      v10 = *(_QWORD *)__dst;
      *((_BYTE *)this + 16) &= ~1u;
      *((_QWORD *)this + 1) = v10;
      goto LABEL_17;
    }
    result = (*(_QWORD *(**)(_BYTE *__return_ptr))(**(_QWORD **)(a2 + 8) + 72))(__dst);
    if ((__dst[8] & 1) == 0)
      goto LABEL_16;
    v8 = *(_QWORD **)__dst;
LABEL_11:
    *((_BYTE *)this + 16) |= 1u;
LABEL_17:
    *(_QWORD *)this = v8;
    goto LABEL_80;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 8) + 96))(&v69);
  if ((v70 & 1) != 0)
  {
    v62 = -1;
    *(_QWORD *)&v60 = v69;
    goto LABEL_47;
  }
  llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)&v67, a2);
  v5 = (const void *)v67;
  if ((v68 & 1) != 0)
  {
    *(_QWORD *)&v67 = 0;
    v62 = -1;
    *(_QWORD *)&v60 = v5;
    goto LABEL_41;
  }
  v6 = *((_QWORD *)&v67 + 1);
  v66 = 261;
  *(_OWORD *)__dst = v67;
  if (!llvm::sys::path::is_absolute((llvm::sys::path *)__dst, 0))
  {
    v11 = *(unsigned __int8 **)(*(_QWORD *)a2 + 32);
    v12 = *(_QWORD *)(*(_QWORD *)a2 + 40);
    if (v12 >= v13)
      v14 = v13;
    else
      v14 = v12;
    if (v13 == -1)
    {
      v14 = 0;
      v15 = 0;
    }
    else
    {
      v15 = v11;
    }
    *(_QWORD *)__dst = &v65;
    *(_OWORD *)&__dst[8] = xmmword_24AA2AC90;
    llvm::SmallVectorImpl<char>::append<char const*,void>(__dst, v15, &v15[v14]);
    v63 = 261;
    *(_QWORD *)&v60 = v5;
    *((_QWORD *)&v60 + 1) = v6;
    v59 = 257;
    v54 = 257;
    v52 = 257;
    llvm::sys::path::append(__dst, 0, (unsigned __int8 *)&v60, (unsigned __int8 *)&v57, v53, v51);
    v16 = *(_QWORD *)&__dst[8];
    if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
      goto LABEL_84;
    v17 = *(const void **)__dst;
    if (*(_QWORD *)&__dst[8] >= 0x17uLL)
    {
      v21 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
        v21 = *(_QWORD *)&__dst[8] | 7;
      v22 = v21 + 1;
      v18 = (__int128 *)operator new(v21 + 1);
      *((_QWORD *)&v57 + 1) = v16;
      v58 = v22 | 0x8000000000000000;
      *(_QWORD *)&v57 = v18;
    }
    else
    {
      HIBYTE(v58) = __dst[8];
      v18 = &v57;
      if (!*(_QWORD *)&__dst[8])
      {
LABEL_39:
        *((_BYTE *)v18 + v16) = 0;
        v62 = 0;
        v60 = v57;
        v61 = v58;
        if (*(uint64_t **)__dst != &v65)
          free(*(void **)__dst);
        goto LABEL_41;
      }
    }
    memmove(v18, v17, v16);
    goto LABEL_39;
  }
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_84;
  if (v6 >= 0x17)
  {
    v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v19 = v6 | 7;
    v20 = v19 + 1;
    v7 = operator new(v19 + 1);
    *(_QWORD *)&__dst[8] = v6;
    *(_QWORD *)&__dst[16] = v20 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
  }
  else
  {
    __dst[23] = v6;
    v7 = __dst;
    if (!v6)
      goto LABEL_34;
  }
  memmove(v7, v5, v6);
LABEL_34:
  v7[v6] = 0;
  v62 = 0;
  v60 = *(_OWORD *)__dst;
  v61 = *(_QWORD *)&__dst[16];
LABEL_41:
  if ((v68 & 1) != 0 && (_QWORD)v67)
    (*(void (**)(_QWORD))(*(_QWORD *)v67 + 8))(v67);
  if ((v70 & 1) != 0)
  {
    v23 = v69;
    v69 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
LABEL_47:
  if ((v62 & 1) == 0)
  {
    v66 = 260;
    *(_QWORD *)__dst = &v60;
    getFileAux<llvm::MemoryBuffer>((const llvm::Twine *)__dst, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, 0, (uint64_t)&v57);
    if ((v58 & 1) != 0)
    {
      v25 = v57;
      if ((_DWORD)v57)
      {
        v26 = *((_QWORD *)&v57 + 1);
        v27 = (_QWORD *)operator new();
        *v27 = &off_251C12820;
        v27[1] = v25;
        v27[2] = v26;
        *((_BYTE *)this + 16) |= 1u;
        *(_QWORD *)this = v27;
LABEL_76:
        if ((v58 & 1) == 0)
        {
          v50 = v57;
          *(_QWORD *)&v57 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
        goto LABEL_79;
      }
    }
    else
    {
      std::system_category();
    }
    v28 = *(_QWORD **)a2;
    v30 = *(_QWORD **)(*(_QWORD *)a2 + 112);
    v29 = *(_QWORD *)(*(_QWORD *)a2 + 120);
    if ((unint64_t)v30 < v29)
    {
      v31 = v57;
      *(_QWORD *)&v57 = 0;
      *v30 = v31;
      v32 = v28;
      v33 = v30 + 1;
LABEL_75:
      v28[14] = v33;
      v47 = *(_QWORD *)(v32[14] - 8);
      v48 = *(_QWORD *)(v47 + 8);
      v49 = *(_QWORD *)(v47 + 16) - v48;
      *((_BYTE *)this + 16) &= ~1u;
      *(_QWORD *)this = v48;
      *((_QWORD *)this + 1) = v49;
      goto LABEL_76;
    }
    v34 = (_QWORD *)v28[13];
    v35 = v30 - v34;
    v36 = v35 + 1;
    if (!((unint64_t)(v35 + 1) >> 61))
    {
      v37 = v29 - (_QWORD)v34;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v39 = (char *)operator new(8 * v38);
      }
      else
      {
        v39 = 0;
      }
      v40 = &v39[8 * v35];
      v41 = &v39[8 * v38];
      v42 = v57;
      *(_QWORD *)&v57 = 0;
      *(_QWORD *)v40 = v42;
      v33 = v40 + 8;
      if (v30 == v34)
      {
        v28[13] = v40;
        v28[14] = v33;
        v28[15] = v41;
      }
      else
      {
        do
        {
          v43 = *--v30;
          *v30 = 0;
          *((_QWORD *)v40 - 1) = v43;
          v40 -= 8;
        }
        while (v30 != v34);
        v30 = (_QWORD *)v28[13];
        v44 = (_QWORD *)v28[14];
        v28[13] = v40;
        v28[14] = v33;
        v28[15] = v41;
        while (v44 != v30)
        {
          v46 = *--v44;
          v45 = v46;
          *v44 = 0;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
      }
      if (v30)
        operator delete(v30);
      v32 = *(_QWORD **)a2;
      goto LABEL_75;
    }
LABEL_84:
    abort();
  }
  v24 = v60;
  *(_QWORD *)&v60 = 0;
  *((_BYTE *)this + 16) |= 1u;
  *(_QWORD *)this = v24;
LABEL_79:
  result = (_QWORD *)llvm::Expected<std::string>::~Expected((uint64_t)&v60);
LABEL_80:
  if ((v56 & 1) != 0)
  {
    result = v55;
    v55 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void llvm::object::Archive::Child::getNext(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void **v8;
  size_t v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  void *v14[2];
  __int128 v15;
  __int16 v16;
  llvm::formatv_object_base *v17[4];
  __int16 v18;
  void *__p[2];
  char v20;
  llvm::formatv_object_base *v21[4];
  __int16 v22;
  uint64_t v23;
  uint64_t v24[2];
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(unint64_t *__return_ptr))(**((_QWORD **)this + 1) + 88))(&v26);
  v4 = v26;
  if ((v27 & 1) != 0)
  {
    v26 = 0;
    *(_BYTE *)(a2 + 40) |= 1u;
    *(_QWORD *)a2 = v4;
  }
  else if (v26)
  {
    v5 = *(_QWORD **)this;
    if (v26 <= *(_QWORD *)(*(_QWORD *)this + 16) + *(_QWORD *)(*(_QWORD *)this + 24))
    {
      v24[0] = 0;
      llvm::object::Archive::Child::Child((uint64_t)v14, (uint64_t)v5, v26, v24);
      v6 = v24[0];
      if (v24[0])
      {
        v24[0] = 0;
        *(_BYTE *)(a2 + 40) |= 1u;
        v7 = v14[1];
        *(_QWORD *)a2 = v6;
        v14[1] = 0;
        if (v7)
        {
          (*(void (**)(void *))(*(_QWORD *)v7 + 16))(v7);
          if (v24[0])
            (*(void (**)(uint64_t))(*(_QWORD *)v24[0] + 8))(v24[0]);
        }
      }
      else
      {
        *(_BYTE *)(a2 + 40) &= ~1u;
        *(_WORD *)(a2 + 32) = v16;
        v12 = *(_OWORD *)v14;
        v11 = v15;
        v14[1] = 0;
        *(_OWORD *)a2 = v12;
        *(_OWORD *)(a2 + 16) = v11;
      }
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(v14, "offset to next archive member past the end of the archive after member ");
      llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)v24, (uint64_t)this);
      if ((v25 & 1) != 0)
      {
        __p[0] = (void *)v24[0];
        v8 = __p;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)__p);
        if (__p[0])
          (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
        v23 = *((_QWORD *)this + 2) - *(_QWORD *)(*(_QWORD *)this + 16);
        if ((SBYTE7(v15) & 0x80u) == 0)
          v9 = BYTE7(v15);
        else
          v9 = (size_t)v14[1];
        std::string::basic_string[abi:nn180100]((uint64_t)__p, v9 + 10);
        if (v20 < 0)
          v8 = (void **)__p[0];
        if (v9)
        {
          if ((SBYTE7(v15) & 0x80u) == 0)
            v10 = v14;
          else
            v10 = (void **)v14[0];
          memmove(v8, v10, v9);
        }
        strcpy((char *)v8 + v9, "at offset ");
        v21[0] = (llvm::formatv_object_base *)__p;
        v21[2] = (llvm::formatv_object_base *)&v23;
        v22 = 3076;
        malformedError((uint64_t *)a2, v21);
        *(_BYTE *)(a2 + 40) |= 1u;
        if (v20 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v17[0] = (llvm::formatv_object_base *)v14;
        v17[2] = (llvm::formatv_object_base *)v24[0];
        v17[3] = (llvm::formatv_object_base *)v24[1];
        v18 = 1284;
        malformedError((uint64_t *)a2, v17);
        *(_BYTE *)(a2 + 40) |= 1u;
      }
      if (SBYTE7(v15) < 0)
        operator delete(v14[0]);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 40) &= ~1u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  if ((v27 & 1) != 0)
  {
    v13 = v26;
    v26 = 0;
    if (v13)
      (*(void (**)(unint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

_QWORD *llvm::object::Archive::Child::getMemoryBufferRef@<X0>(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  llvm::formatv_object_base *v5;
  llvm::formatv_object_base *v6;
  llvm::formatv_object_base *v7[4];
  __int16 v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  char v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)v13, (uint64_t)this);
  v5 = (llvm::formatv_object_base *)v13[0];
  if ((v14 & 1) != 0)
  {
    *(_BYTE *)(a2 + 32) |= 1u;
    *(_QWORD *)a2 = v5;
  }
  else
  {
    v6 = (llvm::formatv_object_base *)v13[1];
    result = llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v11, (uint64_t)this);
    if ((v12 & 1) != 0)
    {
      v8 = 261;
      v7[0] = v5;
      v7[1] = v6;
      v10 = (_QWORD *)v11;
      llvm::FileError::build(v7, 0, 0, (uint64_t *)&v10, &v9);
      result = v10;
      if (v10)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
      *(_BYTE *)(a2 + 32) |= 1u;
      *(_QWORD *)a2 = v9;
    }
    else
    {
      *(_BYTE *)(a2 + 32) &= ~1u;
      *(_OWORD *)a2 = v11;
      *(_QWORD *)(a2 + 16) = v5;
      *(_QWORD *)(a2 + 24) = v6;
    }
  }
  return result;
}

void llvm::object::Archive::Child::getAsBinary(llvm::object::Archive::Child *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;
  _OWORD v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  llvm::object::Archive::Child::getMemoryBufferRef(a1, (uint64_t)v7);
  if ((v8 & 1) != 0)
  {
    v3 = *(_QWORD *)&v7[0];
LABEL_6:
    *(_BYTE *)(a2 + 8) |= 1u;
    goto LABEL_7;
  }
  v4[0] = v7[0];
  v4[1] = v7[1];
  llvm::object::createBinary((uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v3 = v5;
    goto LABEL_6;
  }
  *(_BYTE *)(a2 + 8) &= ~1u;
  v3 = v5;
LABEL_7:
  *(_QWORD *)a2 = v3;
}

uint64_t llvm::object::Archive::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v10 = 0;
  if (*(_QWORD *)(a1 + 8) >= 8uLL && **(_QWORD **)a1 == 0xA3E66616769623CLL)
  {
    v7 = operator new();
    v8 = *(_OWORD *)(a1 + 16);
    v11 = *(_OWORD *)a1;
    v12 = v8;
    result = llvm::object::BigArchive::BigArchive(v7, &v11, &v10);
  }
  else
  {
    v4 = operator new();
    v5 = *(_OWORD *)(a1 + 16);
    v11 = *(_OWORD *)a1;
    v12 = v5;
    result = llvm::object::Archive::Archive(v4, &v11, &v10);
  }
  v9 = v10;
  if (v10)
  {
    v10 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v10;
    *(_QWORD *)a2 = v9;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = result;
  }
  return result;
}

uint64_t llvm::object::Archive::Archive(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  llvm::object *v14;
  unsigned int *v15;
  uint64_t v16;
  char v18;
  uint64_t v20;
  BOOL v22;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _UNKNOWN **v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int16 v52;
  unint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v37 = a2[1];
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v37;
  *(_QWORD *)a1 = &off_251C17B68;
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = (_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (_OWORD *)(a1 + 80);
  *(_WORD *)(a1 + 96) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (*(_QWORD *)(a1 + 24) >= 8uLL)
  {
    v11 = *(_QWORD **)(a1 + 16);
    switch(*v11)
    {
      case 0xA3E6E6968743C21:
        v12 = *(_BYTE *)(a1 + 98) | 8;
        break;
      case 0xA3E686372613C21:
        v12 = *(_BYTE *)(a1 + 98) & 0xF7;
        break;
      case 0xA3E66616769623CLL:
        *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF0 | 6;
LABEL_110:
        if (*a3)
          return a1;
        goto LABEL_3;
      default:
        goto LABEL_2;
    }
    *(_BYTE *)(a1 + 98) = v12 & 0xF8;
    llvm::object::Archive::child_begin(a1, a3, 0, (uint64_t)&v49);
    if (*a3)
    {
LABEL_108:
      v33 = v50;
      v50 = 0;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
      goto LABEL_110;
    }
    llvm::object::Archive::child_end((uint64_t)&v45);
    if (v53 <= 7 && v48 < 8 || (v13 = v47, (_QWORD)v51 == v47))
    {
      *a3 = 0;
LABEL_106:
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
      goto LABEL_108;
    }
    v14 = (llvm::object *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v50 + 24))(&v42);
    v15 = (unsigned int *)v42;
    if ((v44 & 1) != 0)
    {
      v42 = 0;
      goto LABEL_26;
    }
    v16 = v43;
    if (v43 == 12)
    {
      if (*(_QWORD *)v42 == 0x45444D59532E5F5FLL && *(_DWORD *)(v42 + 8) == 875978566)
      {
        v18 = 4;
        goto LABEL_33;
      }
    }
    else
    {
      if (v43 == 9)
      {
        if (*(_QWORD *)v42 != 0x45444D59532E5F5FLL || *(_BYTE *)(v42 + 8) != 70)
          goto LABEL_38;
        v18 = 2;
LABEL_33:
        *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | v18;
        llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v40, (uint64_t)&v49);
        if ((v41 & 1) == 0)
        {
          *v6 = v40;
LABEL_35:
          llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v49);
          v20 = *a3;
          if (*a3)
            goto LABEL_103;
          *v8 = v51;
          *(_WORD *)(a1 + 96) = v52;
LABEL_102:
          *a3 = v20;
          goto LABEL_103;
        }
LABEL_101:
        v20 = v40;
        goto LABEL_102;
      }
      if (v43 < 3)
      {
LABEL_42:
        if (v43 == 7)
        {
          if (*(_DWORD *)v42 != 1297699631 || *(_DWORD *)(v42 + 3) != 791950925)
          {
            v22 = 0;
            v16 = 7;
            goto LABEL_65;
          }
        }
        else
        {
          if (v43 != 1)
          {
            v22 = 0;
            goto LABEL_62;
          }
          if (*(_BYTE *)v42 != 47)
          {
            v22 = 0;
LABEL_81:
            *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | v22;
LABEL_82:
            *v8 = v51;
            *(_WORD *)(a1 + 96) = v52;
LABEL_83:
            *a3 = 0;
            goto LABEL_103;
          }
        }
        llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v40, (uint64_t)&v49);
        if ((v41 & 1) != 0)
          goto LABEL_101;
        *v6 = v40;
        if (v16 == 7)
        {
          v26 = 793991501;
          v27 = bswap32(*v15);
          if (v27 == 793991501
            && (v26 = 1295397935, v27 = bswap32(*(unsigned int *)((char *)v15 + 3)), v27 == 1295397935))
          {
            v28 = 0;
          }
          else if (v27 < v26)
          {
            v28 = -1;
          }
          else
          {
            v28 = 1;
          }
          v22 = v28 == 0;
        }
        else
        {
          v22 = 0;
        }
        llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v49);
        if (*a3)
          goto LABEL_103;
        if (v53 <= 7 && v48 < 8 || (_QWORD)v51 == v13)
          goto LABEL_83;
        v14 = (llvm::object *)(*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)v50 + 24))(&v38);
        v15 = (unsigned int *)v38;
        if ((v39 & 1) == 0)
        {
          v16 = *((_QWORD *)&v38 + 1);
LABEL_62:
          if (v16 != 2)
            goto LABEL_65;
          if (*(_WORD *)v15 != 12079)
          {
            v16 = 2;
LABEL_65:
            if (*(_BYTE *)v15 != 47)
              goto LABEL_81;
            if (v16 != 1)
            {
              v29 = llvm::object::object_category(v14);
              v30 = (_QWORD *)operator new();
              *v30 = &off_251C12820;
              v30[1] = 3;
              v30[2] = v29;
              *a3 = (uint64_t)v30;
              goto LABEL_103;
            }
            *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | 5;
            llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v40, (uint64_t)&v49);
            if ((v41 & 1) == 0)
            {
              *v6 = v40;
              llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v49);
              if (*a3)
                goto LABEL_103;
              if (v53 <= 7 && v48 < 8 || (_QWORD)v51 == v13)
                goto LABEL_82;
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v50 + 24))(&v38);
              llvm::Expected<llvm::StringRef>::moveAssign<llvm::StringRef>(&v42, &v38);
              if ((v39 & 1) != 0)
              {
                v25 = v38;
                *(_QWORD *)&v38 = 0;
                if (v25)
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              }
              if ((v44 & 1) != 0)
              {
                v20 = v42;
                v42 = 0;
                goto LABEL_102;
              }
              if (v43 != 2 || *(_WORD *)v42 != 12079)
                goto LABEL_82;
              llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v38, (uint64_t)&v49);
              if ((v39 & 1) == 0)
              {
                *v7 = v38;
                llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v49);
                if (!*a3)
                  goto LABEL_82;
LABEL_103:
                if ((v44 & 1) != 0)
                {
                  v32 = v42;
                  v42 = 0;
                  if (v32)
                    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
                }
                goto LABEL_106;
              }
              goto LABEL_140;
            }
            goto LABEL_101;
          }
          *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | v22;
          llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v40, (uint64_t)&v49);
          if ((v41 & 1) == 0)
          {
            *v7 = v40;
            goto LABEL_35;
          }
          goto LABEL_101;
        }
LABEL_26:
        *a3 = (uint64_t)v15;
        goto LABEL_103;
      }
    }
LABEL_38:
    if (*(_WORD *)v42 != 12579 || *(_BYTE *)(v42 + 2) != 47)
      goto LABEL_42;
    *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | 2;
    llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)&v40, (uint64_t)&v49);
    v20 = v40;
    if ((v41 & 1) != 0)
      goto LABEL_102;
    if (*((uint64_t *)&v40 + 1) > 15)
    {
      if (*((_QWORD *)&v40 + 1) != 19)
      {
        if (*((_QWORD *)&v40 + 1) != 16)
          goto LABEL_139;
        if (*(_QWORD *)v40 != 0x45444D59532E5F5FLL || *(_QWORD *)(v40 + 8) != 0x444554524F532046)
          goto LABEL_139;
        goto LABEL_137;
      }
      if (*(_QWORD *)v40 != 0x45444D59532E5F5FLL
        || *(_QWORD *)(v40 + 8) != 0x524F532034365F46
        || *(_QWORD *)(v40 + 11) != 0x444554524F532034)
      {
        goto LABEL_139;
      }
    }
    else
    {
      if (*((_QWORD *)&v40 + 1) == 9)
      {
        if (*(_QWORD *)v40 != 0x45444D59532E5F5FLL || *(_BYTE *)(v40 + 8) != 70)
          goto LABEL_139;
        goto LABEL_137;
      }
      if (*((_QWORD *)&v40 + 1) != 12)
        goto LABEL_139;
      if (*(_QWORD *)v40 != 0x45444D59532E5F5FLL || *(_DWORD *)(v40 + 8) != 875978566)
        goto LABEL_139;
    }
    *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | 4;
LABEL_137:
    llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v38, (uint64_t)&v49);
    if ((v39 & 1) != 0)
    {
LABEL_140:
      v20 = v38;
      goto LABEL_102;
    }
    *v6 = v38;
    llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++((llvm::object::Archive::ChildFallibleIterator *)&v49);
    if (*a3)
      goto LABEL_103;
LABEL_139:
    *v8 = v51;
    *(_WORD *)(a1 + 96) = v52;
    goto LABEL_103;
  }
LABEL_2:
  v45 = 2;
  llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)"file too small to be an archive", &v45, &v49);
  v9 = v49;
  *a3 = v49;
  if (!v9)
LABEL_3:
    *a3 = 0;
  return a1;
}

uint64_t llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>@<X0>(llvm::formatv_object_base *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  llvm::formatv_object_base *v9;
  char v10;
  char v11;

  v6 = operator new();
  v7 = 1;
  v11 = 1;
  if (*(_BYTE *)a1)
  {
    v9 = a1;
    v7 = 3;
  }
  v10 = v7;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v6, &v9, *a2);
  *a3 = result;
  return result;
}

uint64_t llvm::object::Archive::child_begin@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  _OWORD v18[2];
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  __int16 v22;
  _OWORD v23[2];
  __int16 v24;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    return llvm::object::Archive::child_end(a4);
  if (a3)
  {
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(_QWORD *)(a1 + 88);
    v11 = *(_WORD *)(a1 + 96);
    v20 = a1;
    v21[0] = 0;
    v21[1] = v9;
    v21[2] = v10;
    v22 = v11;
    llvm::object::Archive::createArchiveMemberHeader(v21, a1, v9, v10, 0);
    llvm::object::Archive::Child::Child((uint64_t)v23, (uint64_t)&v20);
    v12 = v24;
    v13 = v23[1];
    *(_OWORD *)a4 = v23[0];
    *(_OWORD *)(a4 + 16) = v13;
    *(_WORD *)(a4 + 32) = v12;
    *(_QWORD *)(a4 + 40) = a2;
    *((_QWORD *)&v23[0] + 1) = 0;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::object::Archive::Child::Child((uint64_t)&v20, a1, v14 + v15, a2);
    if (*a2)
    {
      llvm::object::Archive::child_end(a4);
    }
    else
    {
      llvm::object::Archive::Child::Child((uint64_t)v18, (uint64_t)&v20);
      v16 = v19;
      v17 = v18[1];
      *(_OWORD *)a4 = v18[0];
      *(_OWORD *)(a4 + 16) = v17;
      *(_WORD *)(a4 + 32) = v16;
      *(_QWORD *)(a4 + 40) = a2;
      *((_QWORD *)&v18[0] + 1) = 0;
    }
  }
  result = v21[0];
  v21[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t llvm::object::Archive::child_end@<X0>(uint64_t a1@<X8>)
{
  __int16 v3;
  __int128 v4;
  uint64_t result;
  _OWORD v6[3];
  _OWORD v7[2];
  __int16 v8;

  memset(v6, 0, 32);
  llvm::object::Archive::Child::Child((uint64_t)v7, (uint64_t)v6);
  v3 = v8;
  v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *((_QWORD *)&v7[0] + 1) = 0;
  result = *((_QWORD *)&v6[0] + 1);
  *((_QWORD *)&v6[0] + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

__n128 llvm::object::Archive::Symbol::getMember@<Q0>(llvm::object::Archive::Symbol *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  int v5;
  _DWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int16 v12;
  _UNKNOWN **v13;
  _QWORD *v14;
  __n128 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  unsigned __int16 v20;
  uint64_t v21;

  v3 = *(_QWORD *)this;
  v4 = *(unsigned int **)(*(_QWORD *)this + 48);
  v5 = *(_BYTE *)(*(_QWORD *)this + 98) & 7;
  if (v5 == 1)
  {
    v7 = v4 + 2;
LABEL_13:
    v8 = bswap64(*(_QWORD *)((char *)v7 + (8 * *((_DWORD *)this + 2))));
    goto LABEL_21;
  }
  if (v5 == 4 || v5 == 6)
  {
    v7 = v4 + 2;
  }
  else
  {
    v7 = v4 + 1;
    if ((*(_BYTE *)(*(_QWORD *)this + 98) & 7) == 0)
    {
      v8 = bswap32(*(_DWORD *)((char *)v7 + (4 * *((_DWORD *)this + 2))));
      goto LABEL_21;
    }
  }
  switch(v5)
  {
    case 2:
      v8 = *(unsigned int *)((char *)v7 + (8 * *((_DWORD *)this + 2)) + 4);
      break;
    case 4:
      v8 = *(_QWORD *)((char *)v7 + (16 * *((_DWORD *)this + 2)) + 8);
      break;
    case 6:
      goto LABEL_13;
    default:
      v9 = *v4;
      v10 = &v4[*v4 + 1];
      v11 = *((_DWORD *)this + 2);
      if (v11 >= *v10 || (v12 = *((_WORD *)v10 + v11 + 2) - 1, v9 <= v12))
      {
        v13 = llvm::object::object_category(this);
        v14 = (_QWORD *)operator new();
        *v14 = &off_251C12820;
        v14[1] = 3;
        v14[2] = v13;
        a2[2].n128_u8[8] |= 1u;
        a2->n128_u64[0] = (unint64_t)v14;
        return result;
      }
      v8 = v7[v12];
      break;
  }
LABEL_21:
  v16 = *(_QWORD *)(v3 + 16) + v8;
  v21 = 0;
  llvm::object::Archive::Child::Child((uint64_t)v19, v3, v16, &v21);
  v17 = v21;
  if (v21)
  {
    v21 = 0;
    a2[2].n128_u8[8] |= 1u;
    v18 = *((_QWORD *)&v19[0] + 1);
    a2->n128_u64[0] = v17;
    *((_QWORD *)&v19[0] + 1) = 0;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  else
  {
    a2[2].n128_u8[8] &= ~1u;
    a2[2].n128_u16[0] = v20;
    result = (__n128)v19[1];
    *a2 = (__n128)v19[0];
    a2[1] = result;
  }
  return result;
}

uint64_t llvm::object::Archive::Symbol::getNext(llvm::object::Archive::Symbol *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(*(_QWORD *)this + 98) & 7) != 2)
  {
    v3 = *(_QWORD *)(v1 + 56);
    if (v3 > HIDWORD(v2))
      memchr((void *)(*(_QWORD *)(v1 + 48) + HIDWORD(v2)), 0, v3 - HIDWORD(v2));
  }
  return v1;
}

unint64_t llvm::object::Archive::getNumberOfSymbols(llvm::object::Archive *this)
{
  unsigned int *v1;
  unint64_t result;

  if (!*((_QWORD *)this + 7))
    return 0;
  v1 = (unsigned int *)*((_QWORD *)this + 6);
  switch(*((_BYTE *)this + 98) & 7)
  {
    case 0:
      result = bswap32(*v1);
      break;
    case 1:
    case 6:
      result = bswap64(*(_QWORD *)v1);
      break;
    case 2:
      result = *v1 >> 3;
      break;
    case 4:
      result = *(_QWORD *)v1 >> 4;
      break;
    default:
      result = v1[*v1 + 1];
      break;
  }
  return result;
}

BOOL llvm::object::Archive::isEmpty(llvm::object::Archive *this)
{
  return *((_QWORD *)this + 3) == 8;
}

uint64_t llvm::object::BigArchive::BigArchive(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  const char *v9;
  llvm::formatv_object_base **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t last_not_of;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  char *v23;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::formatv_object_base *v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t *v37;
  __int16 v38;
  llvm::formatv_object_base *v39[4];
  __int16 v40;
  _QWORD *v41;
  char *v42;
  llvm::formatv_object_base *v43[4];
  __int16 v44;
  uint64_t v45;
  llvm::formatv_object_base *v46[4];
  __int16 v47;
  llvm::formatv_object_base *v48[4];
  __int16 v49;
  _QWORD v50[4];
  __int16 v51;
  unint64_t v52;
  __int128 v53[2];
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  __int16 v57;
  unint64_t v58;
  const char *v59;
  uint64_t v60;
  __int128 v61;
  __int16 v62;
  unint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v53[0] = *a2;
  v53[1] = v5;
  v6 = (_QWORD *)llvm::object::Archive::Archive(a1, v53, a3);
  *v6 = &off_251C17BA8;
  v6[17] = 0;
  v7 = v6 + 17;
  v6[18] = 0;
  v9 = (const char *)v6[2];
  v8 = v6[3];
  v6[16] = v9;
  v52 = v8;
  if (v8 <= 0x7F)
  {
    v59 = "malformed AIX big archive: incomplete fixed length header, the archive is only";
    *(_QWORD *)&v61 = &v52;
    v62 = 3075;
    v50[0] = &v59;
    v50[2] = " byte(s)";
    v51 = 770;
    v10 = (llvm::formatv_object_base **)v50;
LABEL_3:
    malformedError(&v54, v10);
    v11 = v54;
    goto LABEL_4;
  }
  v12 = 20;
  v59 = v9 + 68;
  v60 = 20;
  last_not_of = llvm::StringRef::find_last_not_of(&v59, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v54 = 0;
  if ((unint64_t)(last_not_of + 1) < 0x14)
    v12 = last_not_of + 1;
  v59 = v9 + 68;
  v60 = v12;
  if ((llvm::consumeUnsignedInteger((llvm *)&v59, (llvm::StringRef *)0xA, (unint64_t *)&v54, v14) & 1) != 0
    || v60)
  {
    v62 = 1283;
    v59 = "malformed AIX big archive: first member offset \"";
    *(_QWORD *)&v61 = v9 + 68;
    *((_QWORD *)&v61 + 1) = v12;
    v48[0] = (llvm::formatv_object_base *)&v59;
    v48[2] = (llvm::formatv_object_base *)"\" is not a number";
    v49 = 770;
    malformedError(&v54, v48);
    *a3 = v54;
    v9 = *(const char **)(a1 + 128);
  }
  else
  {
    *v7 = v54;
  }
  v15 = 20;
  v59 = v9 + 88;
  v60 = 20;
  v16 = llvm::StringRef::find_last_not_of(&v59, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v54 = 0;
  if ((unint64_t)(v16 + 1) < 0x14)
    v15 = v16 + 1;
  v59 = v9 + 88;
  v60 = v15;
  if ((llvm::consumeUnsignedInteger((llvm *)&v59, (llvm::StringRef *)0xA, (unint64_t *)&v54, v17) & 1) != 0
    || v60)
  {
    v62 = 1283;
    v59 = "malformed AIX big archive: last member offset \"";
    *(_QWORD *)&v61 = v9 + 88;
    *((_QWORD *)&v61 + 1) = v15;
    v46[0] = (llvm::formatv_object_base *)&v59;
    v46[2] = (llvm::formatv_object_base *)"\" is not a number";
    v47 = 770;
    malformedError(&v54, v46);
    *a3 = v54;
    v9 = *(const char **)(a1 + 128);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = v54;
  }
  v18 = v9 + 28;
  v19 = 20;
  v59 = v18;
  v60 = 20;
  v20 = llvm::StringRef::find_last_not_of(&v59, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v54 = 0;
  if ((unint64_t)(v20 + 1) < 0x14)
    v19 = v20 + 1;
  v59 = v18;
  v60 = v19;
  if ((llvm::consumeUnsignedInteger((llvm *)&v59, (llvm::StringRef *)0xA, (unint64_t *)&v54, v21) & 1) != 0
    || v60)
  {
    v62 = 1283;
    v59 = "malformed AIX big archive: global symbol table offset \"";
    *(_QWORD *)&v61 = v18;
    *((_QWORD *)&v61 + 1) = v19;
    v43[0] = (llvm::formatv_object_base *)&v59;
    v43[2] = (llvm::formatv_object_base *)"\" is not a number";
    v44 = 770;
    malformedError(&v54, v43);
    v22 = v54;
    *a3 = v54;
    if (v22)
      goto LABEL_37;
    goto LABEL_27;
  }
  v45 = v54;
  v22 = *a3;
  if (*a3)
    goto LABEL_37;
  if (!v54)
  {
LABEL_27:
    llvm::object::Archive::child_begin(a1, a3, 0, (uint64_t)&v59);
    if (!*a3)
    {
      llvm::object::Archive::child_end((uint64_t)&v54);
      if ((v63 > 7 || v58 >= 8) && (const char *)v61 != v56)
      {
        *(_OWORD *)(a1 + 80) = v61;
        *(_WORD *)(a1 + 96) = v62;
      }
      *a3 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
    }
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
    v22 = *a3;
LABEL_37:
    if (v22)
      return a1;
    goto LABEL_5;
  }
  v23 = (char *)(v54 + 114);
  v42 = (char *)(v54 + 114);
  if (v54 + 114 > v8)
  {
    v37 = &v45;
    v38 = 3587;
    v54 = (uint64_t)v36;
    v56 = " and size 0x";
    v57 = 770;
    v35 = 114;
    v36[0] = "global symbol table header at offset 0x";
    v59 = (const char *)&v54;
    *(_QWORD *)&v61 = &v35;
    v62 = 3586;
    v39[0] = (llvm::formatv_object_base *)&v59;
    v39[2] = (llvm::formatv_object_base *)" goes past the end of file";
    v40 = 770;
    malformedError((uint64_t *)&v41, v39);
    v11 = (uint64_t)v41;
    goto LABEL_4;
  }
  v25 = (const char *)(*(_QWORD *)(a1 + 16) + v54);
  v26 = 20;
  v59 = v25;
  v60 = 20;
  v27 = llvm::StringRef::find_last_not_of(&v59, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  v54 = 0;
  if ((unint64_t)(v27 + 1) < 0x14)
    v26 = v27 + 1;
  v59 = v25;
  v60 = v26;
  if ((llvm::consumeUnsignedInteger((llvm *)&v59, (llvm::StringRef *)0xA, (unint64_t *)&v54, v28) & 1) != 0
    || v60)
  {
    v62 = 1283;
    v59 = "malformed AIX big archive: global symbol table size \"";
    *(_QWORD *)&v61 = v25;
    *((_QWORD *)&v61 + 1) = v26;
    v33[0] = &v59;
    v33[2] = "\" is not a number";
    v34 = 770;
    v10 = (llvm::formatv_object_base **)v33;
    goto LABEL_3;
  }
  v29 = v54;
  v41 = (_QWORD *)v54;
  if ((unint64_t)&v23[v54] <= v8)
  {
    *(_QWORD *)(a1 + 48) = v25 + 114;
    *(_QWORD *)(a1 + 56) = v29;
    v30 = 8 * llvm::object::Archive::getNumberOfSymbols((llvm::object::Archive *)a1) + 8;
    *(_QWORD *)(a1 + 64) = &v25[v30 + 114];
    *(_QWORD *)(a1 + 72) = v29 - v30;
    goto LABEL_27;
  }
  v36[0] = "global symbol table content at offset 0x";
  v37 = (uint64_t *)&v42;
  v38 = 3587;
  v54 = (uint64_t)v36;
  v56 = " and size 0x";
  v57 = 770;
  v59 = (const char *)&v54;
  *(_QWORD *)&v61 = &v41;
  v62 = 3586;
  v31[0] = (llvm::formatv_object_base *)&v59;
  v31[2] = (llvm::formatv_object_base *)" goes past the end of file";
  v32 = 770;
  malformedError(&v35, v31);
  v11 = v35;
LABEL_4:
  *a3 = v11;
  if (!v11)
LABEL_5:
    *a3 = 0;
  return a1;
}

void llvm::object::Archive::~Archive(llvm::object::Archive *this)
{
  void **v1;

  *(_QWORD *)this = &off_251C17B68;
  v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_251C17B68;
  v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::Binary::initContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::object::Archive::getFirstChildOffset(llvm::object::Archive *this)
{
  return 8;
}

__n128 llvm::object::ArchiveMemberHeader::clone@<Q0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_251C17A68;
  *a2 = v4;
  return result;
}

void llvm::object::ArchiveMemberHeader::~ArchiveMemberHeader(llvm::object::ArchiveMemberHeader *this)
{
  JUMPOUT(0x24BD1B3A4);
}

__n128 llvm::object::BigArchiveMemberHeader::clone@<Q0>(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)((char *)this + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_251C17AE8;
  *a2 = v4;
  return result;
}

void llvm::object::BigArchiveMemberHeader::~BigArchiveMemberHeader(llvm::object::BigArchiveMemberHeader *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::BigArchiveMemberHeader::isThin(_BYTE *a1@<X8>)
{
  a1[8] &= ~1u;
  *a1 = 0;
}

void llvm::object::BigArchive::~BigArchive(llvm::object::BigArchive *this)
{
  void **v1;

  *(_QWORD *)this = &off_251C17B68;
  v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_251C17B68;
  v1 = (void **)((char *)this + 104);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x24BD1B3A4);
}

BOOL llvm::object::BigArchive::isEmpty(llvm::object::BigArchive *this)
{
  return (*(uint64_t (**)(llvm::object::BigArchive *))(*(_QWORD *)this + 40))(this) == 0;
}

uint64_t llvm::object::BigArchive::getFirstChildOffset(llvm::object::BigArchive *this)
{
  return *((_QWORD *)this + 17);
}

llvm::object::Archive::ChildFallibleIterator *llvm::fallible_iterator<llvm::object::Archive::ChildFallibleIterator>::operator++(llvm::object::Archive::ChildFallibleIterator *a1)
{
  uint64_t v2;
  uint64_t v4;

  llvm::object::Archive::ChildFallibleIterator::inc(a1, &v4);
  v2 = v4;
  if (v4)
  {
    v4 = 0;
    *(_QWORD *)(*((_QWORD *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) = v2;
    *((_QWORD *)a1 + 5) = *((_QWORD *)a1 + 5) & 3 | 4;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)a1 + 5) & 0xFFFFFFFFFFFFFFF8) = 0;
  }
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void llvm::object::Archive::ChildFallibleIterator::inc(llvm::object::Archive::ChildFallibleIterator *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  __int128 v8;
  __int16 v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  llvm::object::Archive::Child::getNext(this, (uint64_t)v7);
  v4 = v7[0];
  if ((v10 & 1) == 0)
  {
    v5 = v7[1];
    v6 = *((_QWORD *)this + 1);
    *(_QWORD *)this = v7[0];
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v4 = 0;
    *((_OWORD *)this + 1) = v8;
    *((_WORD *)this + 16) = v9;
  }
  *a2 = v4;
}

uint64_t llvm::object::Archive::Child::Child(uint64_t a1, uint64_t a2)
{
  void (***v3)(uint64_t *__return_ptr);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(void (****)(uint64_t *__return_ptr))(a2 + 8);
  if (v3)
  {
    (**v3)(&v8);
    v4 = v8;
    v8 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v6 = v8;
      v8 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  return a1;
}

uint64_t llvm::Expected<std::string>::~Expected(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    operator delete(*(void **)a1);
  }
  return a1;
}

_BYTE *llvm::Expected<llvm::StringRef>::moveAssign<llvm::StringRef>(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[16];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[16];
      }
    }
    v5 = a2[16];
    v3[16] = v4 & 0xFE | v5 & 1;
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v6;
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
    }
  }
  return result;
}

void llvm::object::createBinary(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_24A8F25E0
     + 4 * byte_24AA2E1FE[llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8))];
  __asm { BR              X9 }
}

void sub_24A8F25E0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v6 = v3[1];
  *(_OWORD *)(v5 - 144) = *v3;
  *(_OWORD *)(v5 - 128) = v6;
  llvm::object::SymbolicFile::createSymbolicFile(v5 - 144, a2, v4, v5 - 72);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(v2 + 8) & 0xFE | *(_BYTE *)(v5 - 64) & 1;
  *(_QWORD *)v2 = *(_QWORD *)(v5 - 72);
}

uint64_t llvm::object::COFFObjectFile::moveSymbolNext(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 112);
  if (*(_QWORD *)(result + 96))
    v3 = *(_QWORD *)a2 + 18 * *(unsigned __int8 *)(*(_QWORD *)a2 + 17) + 18;
  else
    v3 = *(_QWORD *)a2 + 20 * *(unsigned __int8 *)(*(_QWORD *)a2 + 19) + 20;
  if (v2 >= v3)
    v2 = v3;
  *(_QWORD *)a2 = v2;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t llvm::object::COFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v2)
    return 0;
  v3 = (v2 - 1) | ((unint64_t)(v2 - 1) >> 1) | (((v2 - 1) | ((unint64_t)(v2 - 1) >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  v5 = v4 | (v4 >> 16);
  if (v5 > 0x1E)
    return 32;
  else
    return v5 + 1;
}

void llvm::object::COFFObjectFile::getSymbolAddress(llvm::object::COFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  llvm::object::ObjectFile::getSymbolValue((uint64_t)a1, a2, (uint64_t)v17);
  v6 = v17[0];
  if (!*((_QWORD *)a1 + 12))
  {
    v13 = 0;
    v14 = a2;
LABEL_11:
    v7 = *(_DWORD *)(a2 + 12);
    v8 = *(unsigned __int8 *)(a2 + 18);
    if (v8 == 2)
    {
      if (!v7)
      {
        if (*(_DWORD *)(a2 + 8))
          llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v13);
        goto LABEL_21;
      }
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v13 = a2;
  v14 = 0;
  if (!a2)
    goto LABEL_11;
  if (*(__int16 *)(a2 + 12) >= 0xFFFFFF00)
    v7 = *(__int16 *)(a2 + 12);
  else
    v7 = *(unsigned __int16 *)(a2 + 12);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 2)
  {
    if (!*(_WORD *)(a2 + 12) && !*(_DWORD *)(a2 + 8))
      goto LABEL_21;
    goto LABEL_16;
  }
LABEL_15:
  if (v8 == 105)
  {
LABEL_21:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v6;
    return;
  }
LABEL_16:
  if (llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v13) || v7 <= 0)
    goto LABEL_21;
  llvm::object::COFFObjectFile::getSection(a1, v7, (uint64_t)&v15);
  v9 = v15;
  if ((v16 & 1) != 0)
  {
    v12 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v10 = *((_QWORD *)a1 + 8);
    if (v10)
    {
      v11 = *(unsigned int *)(v10 + 28);
    }
    else
    {
      v11 = *((_QWORD *)a1 + 9);
      if (v11)
        v11 = *(_QWORD *)(v11 + 24);
    }
    v9 = v6 + *(unsigned int *)(v15 + 12) + v11;
    v12 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v12;
  *(_QWORD *)a3 = v9;
}

void llvm::object::COFFObjectFile::getSection(llvm::object::COFFObjectFile *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  uint64_t v9[2];

  if (a2 <= 0)
  {
    v6 = 0;
LABEL_11:
    *(_BYTE *)(a3 + 8) &= ~1u;
    goto LABEL_12;
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(unsigned __int16 *)(v4 + 2);
    if (v5 == 0xFFFF)
      v5 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 7) + 44);
  }
  if (v5 >= a2)
  {
    v6 = *((_QWORD *)this + 11) + 40 * (a2 - 1);
    goto LABEL_11;
  }
  v9[0] = 3;
  v9[1] = (uint64_t)llvm::object::object_category(this);
  v8 = (llvm::formatv_object_base *)"section index out of bounds";
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v8, v9, &v7);
  *(_BYTE *)(a3 + 8) |= 1u;
  v6 = v7;
LABEL_12:
  *(_QWORD *)a3 = v6;
}

uint64_t llvm::object::COFFObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  _BYTE *v7;
  int v8;
  _BOOL4 v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(result + 96))
  {
    v13 = a2;
    v14 = 0;
    if (a2)
    {
      if (*(__int16 *)(a2 + 12) >= 0xFFFFFF00)
        v4 = *(__int16 *)(a2 + 12);
      else
        v4 = *(unsigned __int16 *)(a2 + 12);
      if ((*(_WORD *)(a2 + 14) & 0xF0) != 0x20)
      {
        v5 = *(unsigned __int8 *)(a2 + 16);
        if (v5 == 2)
        {
          if (!*(_WORD *)(a2 + 12) && !*(_DWORD *)(a2 + 8))
            goto LABEL_19;
          goto LABEL_20;
        }
LABEL_18:
        if (v5 == 105)
          goto LABEL_19;
        goto LABEL_20;
      }
LABEL_13:
      *(_BYTE *)(a3 + 8) &= ~1u;
      v6 = 5;
      goto LABEL_46;
    }
  }
  else
  {
    v13 = 0;
    v14 = a2;
  }
  if ((*(_WORD *)(a2 + 16) & 0xF0) == 0x20)
    goto LABEL_13;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(unsigned __int8 *)(a2 + 18);
  if (v5 != 2)
    goto LABEL_18;
  if (!v4)
  {
    if (!*(_DWORD *)(a2 + 8))
    {
LABEL_19:
      v6 = 0;
      *(_BYTE *)(a3 + 8) &= ~1u;
      goto LABEL_46;
    }
    v4 = 0;
  }
LABEL_20:
  result = llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v13);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v6 = 2;
  }
  else
  {
    if (v13)
      v7 = (_BYTE *)(v13 + 16);
    else
      v7 = (_BYTE *)(v14 + 18);
    if (*v7 == 103)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      v6 = 4;
    }
    else if (v4 == -2
           || (!v13
             ? ((v8 = *(unsigned __int8 *)(v14 + 18), v8 != 2) ? (v9 = 0) : (v9 = *(_DWORD *)(v14 + 12) == -1),
                v10 = (unsigned __int8 *)(v14 + 19))
             : ((v8 = *(unsigned __int8 *)(v13 + 16), v8 != 2) ? (v9 = 0) : (v9 = *(__int16 *)(v13 + 12) == -1),
                v10 = (unsigned __int8 *)(v13 + 17)),
               (v11 = *v10, v8 == 3) ? (v12 = 1) : (v12 = v9),
               v11 && v12))
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      v6 = 3;
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      if (v4 < 1)
        v6 = 1;
      else
        v6 = 2;
    }
  }
LABEL_46:
  *(_DWORD *)a3 = v6;
  return result;
}

BOOL llvm::object::COFFObjectFile::getSymbolFlags@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  _BOOL4 v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BOOL8 result;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
  {
    v28 = 0;
    v29 = a2;
LABEL_6:
    v7 = 0;
    v6 = (_BYTE *)(a2 + 18);
    v5 = 1;
    goto LABEL_7;
  }
  v28 = a2;
  v29 = 0;
  if (!a2)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v5 = 0;
  v4 = a2;
  v6 = (_BYTE *)(a2 + 16);
  v7 = a2;
  a2 = 0;
LABEL_7:
  if (*v6 == 2)
    goto LABEL_11;
  v8 = (_BYTE *)(v7 + 16);
  if (v5)
    v8 = (_BYTE *)(a2 + 18);
  if (*v8 == 105)
  {
LABEL_11:
    v9 = 2;
    if (v5)
      goto LABEL_12;
  }
  else
  {
    v9 = 0;
    if (v5)
    {
LABEL_12:
      if (*(_BYTE *)(a2 + 19) && *(_BYTE *)(a2 + 18) == 105)
      {
        if (*(_DWORD *)(a2 + 24) == 3)
          v10 = 4;
        else
          v10 = 5;
        v9 |= v10;
      }
      if (*(_DWORD *)(a2 + 12) == -1)
        v9 |= 8u;
      v11 = (unsigned __int8 *)(a2 + 18);
      goto LABEL_33;
    }
  }
  if (*(_BYTE *)(v7 + 17) && *(_BYTE *)(v7 + 16) == 105)
  {
    if (*(_DWORD *)(v7 + 22) == 3)
      v12 = 4;
    else
      v12 = 5;
    v9 |= v12;
  }
  v13 = *(unsigned __int16 *)(v7 + 12);
  v14 = v9 | 8;
  if (v13 != 0xFFFF)
    v14 = v9;
  if (v13 >> 8 >= 0xFF)
    v9 = v14;
  v11 = (unsigned __int8 *)(v7 + 16);
LABEL_33:
  v15 = *v11;
  v16 = v15 == 103;
  if (v4)
  {
    v17 = *(unsigned __int8 *)(v4 + 16);
    v18 = v17 == 2 && *(__int16 *)(v4 + 12) == -1;
    v19 = (unsigned __int8 *)(v4 + 17);
  }
  else
  {
    v17 = *(unsigned __int8 *)(a2 + 18);
    v18 = v17 == 2 && *(_DWORD *)(a2 + 12) == -1;
    v19 = (unsigned __int8 *)(a2 + 19);
  }
  v20 = *v19;
  v21 = v17 == 3 || v18;
  if (v15 == 103)
    v22 = 1;
  else
    v22 = v21;
  if (v20)
    v23 = v22;
  else
    v23 = v16;
  if (v23)
    v24 = v9 | 0x80;
  else
    v24 = v9;
  result = llvm::object::COFFSymbolRef::isCommon((llvm::object::COFFSymbolRef *)&v28);
  v26 = v24 | 0x10;
  if (!result)
    v26 = v24;
  v27 = v28;
  if (v28)
  {
    if (*(_BYTE *)(v28 + 16) == 2 && !*(_WORD *)(v28 + 12))
LABEL_62:
      v26 |= *(_DWORD *)(v27 + 8) == 0;
  }
  else
  {
    v27 = v29;
    if (*(_BYTE *)(v29 + 18) == 2 && !*(_DWORD *)(v29 + 12))
      goto LABEL_62;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v26;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

void llvm::object::COFFObjectFile::getSymbolSection(llvm::object::COFFObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 12) && a2)
  {
    v5 = *(unsigned __int16 *)(a2 + 12);
    if ((unsigned __int16)(v5 + 256) < 0x101u)
    {
LABEL_4:
      v6 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 360))(this);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
      return;
    }
  }
  else
  {
    v5 = *(_DWORD *)(a2 + 12);
    if (v5 <= 0)
      goto LABEL_4;
  }
  llvm::object::COFFObjectFile::getSection(this, v5, (uint64_t)&v9);
  v8 = v9;
  if ((v10 & 1) != 0)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = this;
  }
  *(_QWORD *)a3 = v8;
}

void llvm::object::COFFObjectFile::moveSectionNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 40;
}

void llvm::object::COFFObjectFile::getSectionName(llvm::object::COFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;
  _UNKNOWN **v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21[2];
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  *(_QWORD *)v21 = a2;
  v22 = 8;
  v25 = 0;
  llvm::StringRef::split((uint64_t *)v21, &v25, 1uLL, (uint64_t)&v23);
  v7 = v23;
  v8 = v24;
  if (v24 && *(_BYTE *)v23 == 47)
  {
    v9 = v24 - 2;
    if (v24 >= 2 && *(_WORD *)v23 == 12079)
    {
      if (v9 <= 6)
      {
        v11 = 0;
        if (v24 == 2)
          goto LABEL_8;
        v15 = (char *)(v23 + 2);
        do
        {
          v16 = *v15;
          v17 = *v15;
          if (*v15 < 65)
          {
            if ((char)v17 < 48)
            {
              if (v17 == 43)
              {
                v18 = 62;
              }
              else
              {
                if (v17 != 47)
                  goto LABEL_14;
                v18 = 63;
              }
            }
            else
            {
              if (v17 > 0x39)
                goto LABEL_14;
              v18 = v16 + 4;
            }
          }
          else if (v17 > 0x5A)
          {
            if (v17 - 97 > 0x19)
              goto LABEL_14;
            v18 = v16 - 71;
          }
          else
          {
            v18 = v16 - 65;
          }
          v11 = v18 + (v11 << 6);
          ++v15;
          --v9;
        }
        while (v9);
        if (!HIDWORD(v11))
          goto LABEL_8;
      }
LABEL_14:
      v14 = llvm::object::object_category(v5);
      v23 = 3;
      v24 = (unint64_t)v14;
      *(_QWORD *)v21 = "invalid section name";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)v21, &v23, &v20);
      *(_BYTE *)(a3 + 16) |= 1u;
      v13 = v20;
    }
    else
    {
      *(_QWORD *)v21 = 0;
      ++v23;
      --v24;
      v10 = llvm::consumeUnsignedInteger((llvm *)&v23, (llvm::StringRef *)0xA, (unint64_t *)v21, v6);
      if ((v10 & 1) == 0 && !v24)
      {
        LODWORD(v11) = v21[0];
        if (!v21[1])
        {
LABEL_8:
          llvm::object::COFFObjectFile::getString(a1, v11, a3);
          return;
        }
      }
      v12 = llvm::object::object_category((llvm::object *)v10);
      v23 = 3;
      v24 = (unint64_t)v12;
      *(_QWORD *)v21 = "invalid section name";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)v21, &v23, &v19);
      *(_BYTE *)(a3 + 16) |= 1u;
      v13 = v19;
    }
    *(_QWORD *)a3 = v13;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

uint64_t llvm::object::COFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 28);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 72);
    if (v3)
      v3 = *(_QWORD *)(v3 + 24);
  }
  return v3 + *(unsigned int *)(a2 + 12);
}

unint64_t llvm::object::COFFObjectFile::getSectionIndex(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((a2 - *(_QWORD *)(a1 + 88)) >> 3);
}

uint64_t llvm::object::COFFObjectFile::getSectionSize(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;

  if ((a1[8] || a1[9]) && a1[2])
  {
    v2 = *(_DWORD *)(a2 + 16);
    if (v2 >= *(_DWORD *)(a2 + 8))
      return *(unsigned int *)(a2 + 8);
  }
  else
  {
    return *(unsigned int *)(a2 + 16);
  }
  return v2;
}

double llvm::object::COFFObjectFile::getSectionContents@<D0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v7 = 0uLL;
  llvm::object::COFFObjectFile::getSectionContents(a1, a2, (unint64_t *)&v7, &v6);
  v5 = v6;
  if (v6)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
  }
  return result;
}

_QWORD *llvm::object::COFFObjectFile::getSectionContents@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  __int128 v11;
  unint64_t v12;
  _OWORD v13[2];

  v5 = a2[5];
  if (!(_DWORD)v5)
    goto LABEL_14;
  v7 = result[2];
  v8 = v7 + v5;
  if (result[8])
  {
    if (v7)
    {
LABEL_4:
      v9 = a2[4];
      if (v9 >= a2[2])
        v9 = a2[2];
      goto LABEL_12;
    }
  }
  else
  {
    if (result[9])
      v10 = v7 == 0;
    else
      v10 = 1;
    if (!v10)
      goto LABEL_4;
  }
  v9 = a2[4];
LABEL_12:
  v11 = *((_OWORD *)result + 2);
  v12 = v9;
  v13[0] = *((_OWORD *)result + 1);
  v13[1] = v11;
  result = llvm::object::Binary::checkOffset((llvm::object *)v13, v8, v9, a4);
  if (*a4)
    return result;
  *a3 = v8;
  a3[1] = v12;
LABEL_14:
  *a4 = 0;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSectionAlignment(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t result;
  BOOL v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a2 + 36);
  result = 1;
  if ((v2 & 8) == 0)
  {
    v4 = ((v2 >> 20) & 0xF) == 0;
    v5 = 1 << (((v2 >> 20) & 0xF) - 1);
    if (v4)
      return 16;
    else
      return v5;
  }
  return result;
}

uint64_t llvm::object::COFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::COFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 5) & 1;
}

uint64_t llvm::object::COFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 36) >> 6) & 1;
}

BOOL llvm::object::COFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  return (~*(_DWORD *)(a2 + 36) & 0xC0000080) == 0;
}

uint64_t llvm::object::COFFObjectFile::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD v4[2];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4[0];
    v4[0] = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v3);
    if (v3)
      (*(void (**)(_QWORD *))(*v3 + 8))(v3);
    if ((v5 & 1) != 0)
    {
      result = v4[0];
      v4[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v4[1] < 6uLL)
    return 0;
  return *(_DWORD *)v4[0] == 1650811950 && *(_WORD *)(v4[0] + 4) == 26485;
}

BOOL llvm::object::COFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) == 0;
}

unint64_t llvm::object::COFFObjectFile::section_rel_begin(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  unint64_t result;
  _OWORD v5[2];

  v3 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v3;
  result = getFirstReloc(a2, v5, *(_QWORD *)(a1 + 16));
  if (result)
  {
    if (*(_DWORD *)(a2 + 12))
      llvm::report_fatal_error((llvm *)"Sections with relocations should have an address of 0", (const llvm::Twine *)1);
  }
  return result;
}

unint64_t getFirstReloc(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  unsigned int NumberOfRelocations;
  unint64_t v8;
  __int128 v9;
  _QWORD *v10;
  _OWORD v12[2];
  _QWORD *v13;
  _OWORD v14[2];
  _QWORD *v15;

  v6 = a2[1];
  v14[0] = *a2;
  v14[1] = v6;
  NumberOfRelocations = getNumberOfRelocations(a1, v14, a3);
  if (!NumberOfRelocations)
    return 0;
  v8 = a3 + *(unsigned int *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 39) & 1) != 0)
    v8 += 10 * (*(_WORD *)(a1 + 32) == 0xFFFF);
  v9 = a2[1];
  v12[0] = *a2;
  v12[1] = v9;
  llvm::object::Binary::checkOffset((llvm::object *)v12, v8, 10 * NumberOfRelocations, &v13);
  v10 = v13;
  if (v13)
  {
    v13 = 0;
    v15 = v10;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v15);
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    return 0;
  }
  return v8;
}

unint64_t llvm::object::COFFObjectFile::section_rel_end(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  unint64_t result;
  __int128 v6;
  _OWORD v7[2];
  _OWORD v8[2];

  v3 = a1 + 16;
  v4 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v4;
  result = getFirstReloc(a2, v8, *(uint64_t *)&v8[0]);
  if (result)
  {
    v6 = *(_OWORD *)(v3 + 16);
    v7[0] = *(_OWORD *)v3;
    v7[1] = v6;
    result += 10 * getNumberOfRelocations(a2, v7, *(_QWORD *)v3);
  }
  return result;
}

uint64_t getNumberOfRelocations(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if ((*(_BYTE *)(a1 + 39) & 1) == 0)
    return *(unsigned __int16 *)(a1 + 32);
  result = *(unsigned __int16 *)(a1 + 32);
  if ((_DWORD)result == 0xFFFF)
  {
    v5 = a2[1];
    v9[0] = *a2;
    v9[1] = v5;
    v6 = (_DWORD *)(a3 + *(unsigned int *)(a1 + 24));
    llvm::object::Binary::checkOffset((llvm::object *)v9, (unint64_t)v6, 0xAuLL, &v8);
    v7 = v8;
    if (v8)
    {
      v8 = 0;
      *(_QWORD *)&v9[0] = v7;
      llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)v9);
      if (*(_QWORD *)&v9[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&v9[0] + 8))(*(_QWORD *)&v9[0]);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      return 0;
    }
    else
    {
      return (*v6 - 1);
    }
  }
  return result;
}

void llvm::object::COFFObjectFile::initSymbolTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  __int128 *v18;
  unsigned int v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  __int128 v29;
  unsigned int *v30;
  unint64_t v31;
  __int128 v32;
  llvm::object *v33;
  unsigned int v34;
  _UNKNOWN **v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  llvm::formatv_object_base *v40;

  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
  {
    v8 = (_QWORD *)(a2 + 56);
    v7 = *(_QWORD *)(a2 + 56);
    if (!v7)
    {
LABEL_35:
      v12 = 0;
      v24 = (int *)(v7 + 48);
      v23 = 1;
      goto LABEL_36;
    }
    v9 = (_QWORD *)(a2 + 104);
    v36 = *(_OWORD *)(a2 + 16);
    v37 = *(_OWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 96);
    goto LABEL_6;
  }
  v5 = *(unsigned __int16 *)(v4 + 2);
  if (v5 == 0xFFFF)
    v6 = 0;
  else
    v6 = *(_DWORD *)(v4 + 8);
  v18 = (__int128 *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 16) + v6;
  if ((*(_QWORD *)(a2 + 96) || *(_QWORD *)(a2 + 104)) && v5 != 0xFFFF)
    v19 = *(_DWORD *)(v4 + 12);
  else
    v19 = 0;
  v20 = *(_OWORD *)(a2 + 32);
  v38 = *v18;
  v39 = v20;
  llvm::object::Binary::checkOffset((llvm::object *)&v38, v11, 18 * v19, this);
  if (*(_QWORD *)this)
    return;
  *(_QWORD *)(a2 + 96) = v11;
  *(_QWORD *)this = 0;
  v8 = (_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 48);
  if (v7)
  {
    v9 = (_QWORD *)(a2 + 104);
    v36 = *v18;
    v37 = *(_OWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 16);
    if (v12)
    {
      if (*(__int16 *)(v12 + 2) == -1)
      {
        v14 = 0;
        v15 = 0;
        goto LABEL_8;
      }
      v14 = 0;
      v13 = (unsigned int *)(v12 + 8);
LABEL_7:
      v15 = *v13;
LABEL_8:
      v16 = v10 + v15;
      if (v11 || *v9)
      {
        if ((v14 & 1) != 0)
        {
          v17 = (unsigned int *)(v7 + 52);
LABEL_25:
          v21 = *v17;
LABEL_27:
          v22 = 18;
          if (v14)
            v22 = 20;
          v38 = v36;
          v39 = v37;
          llvm::object::Binary::checkOffset((llvm::object *)&v38, v10 + v15, v21 * (unint64_t)v22, this);
          if (*(_QWORD *)this)
            return;
          *(_QWORD *)(a2 + 104) = v16;
          *(_QWORD *)this = 0;
          v12 = *(_QWORD *)(a2 + 48);
          goto LABEL_31;
        }
        if (*(__int16 *)(v12 + 2) != -1)
        {
          v17 = (unsigned int *)(v12 + 12);
          goto LABEL_25;
        }
      }
      v21 = 0;
      goto LABEL_27;
    }
LABEL_6:
    v12 = 0;
    v13 = (unsigned int *)(v7 + 48);
    v14 = 1;
    goto LABEL_7;
  }
LABEL_31:
  if (!v12)
  {
    v7 = *v8;
    goto LABEL_35;
  }
  if (*(__int16 *)(v12 + 2) == -1)
  {
    v23 = 0;
    v25 = 0;
    goto LABEL_37;
  }
  v23 = 0;
  v24 = (int *)(v12 + 8);
LABEL_36:
  v25 = *v24;
LABEL_37:
  if (*(_QWORD *)(a2 + 96) || *(_QWORD *)(a2 + 104))
  {
    if ((v23 & 1) != 0)
    {
      v26 = (int *)(*v8 + 52);
LABEL_43:
      v27 = *v26;
      goto LABEL_45;
    }
    if (*(__int16 *)(v12 + 2) != -1)
    {
      v26 = (int *)(v12 + 12);
      goto LABEL_43;
    }
  }
  v27 = 0;
LABEL_45:
  if (v23)
    v28 = 20;
  else
    v28 = 18;
  v29 = *(_OWORD *)(a2 + 32);
  v30 = (unsigned int *)(*(_QWORD *)(a2 + 16) + (v25 + v27 * v28));
  v38 = *(_OWORD *)(a2 + 16);
  v39 = v29;
  llvm::object::Binary::checkOffset((llvm::object *)&v38, (unint64_t)v30, 4uLL, this);
  if (!*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    v31 = *v30;
    *(_DWORD *)(a2 + 120) = v31;
    v32 = *(_OWORD *)(a2 + 32);
    v38 = *(_OWORD *)(a2 + 16);
    v39 = v32;
    v33 = (llvm::object *)llvm::object::Binary::checkOffset((llvm::object *)&v38, (unint64_t)v30, v31, this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 112) = v30;
      *(_QWORD *)this = 0;
      v34 = *(_DWORD *)(a2 + 120);
      if (v34 > 3)
      {
        if (v34 != 4 && *((_BYTE *)v30 + v34 - 1))
        {
          v35 = llvm::object::object_category(v33);
          *(_QWORD *)&v38 = 3;
          *((_QWORD *)&v38 + 1) = v35;
          v40 = (llvm::formatv_object_base *)"string table missing null terminator";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v40, (uint64_t *)&v38, (uint64_t *)this);
          return;
        }
      }
      else
      {
        *(_DWORD *)(a2 + 120) = 4;
      }
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::getRvaPtr(llvm::object::COFFObjectFile *this, _QWORD *a2, unint64_t *a3, char *a4, uint64_t a5)
{
  unsigned int v7;
  void (**v10)(llvm::raw_string_ostream *__hidden);
  uint64_t v11;
  uint64_t v12;
  llvm::object *v13;
  uint64_t v14;
  void (**v16)(llvm::raw_string_ostream *__hidden);
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _UNKNOWN **v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v28;
  llvm::object *v29;
  llvm::object *v30;
  _UNKNOWN **v31;
  void *__p;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (**v36)(llvm::format_object_base *__hidden);
  const char *v37;
  uint64_t v38;
  void (**v39)(llvm::raw_string_ostream *__hidden);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int v46;
  void **p_p;
  uint64_t v48;
  _UNKNOWN **v49;

  v7 = a3;
  v10 = (void (**)(llvm::raw_string_ostream *__hidden))(*(uint64_t (**)(_QWORD *))(*a2 + 352))(a2);
  v12 = v11;
  v13 = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a2 + 360))(a2);
  v39 = v10;
  v40 = v12;
  if (v12 == v14 && v10 == (void (**)(llvm::raw_string_ostream *__hidden))v13)
  {
LABEL_15:
    v23 = llvm::object::object_category(v13);
    if (a5)
    {
      v48 = 3;
      v49 = v23;
      v36 = 0;
      v37 = 0;
      LODWORD(v40) = 0;
      v44 = 0;
      v45 = 0;
      v46 = 1;
      v42 = 0;
      v43 = 0;
      v41 = 0;
      v38 = 0;
      v39 = &off_251C13AC0;
      p_p = (void **)&v36;
      llvm::raw_ostream::SetUnbuffered(&v39);
      __p = &off_251C17E08;
      v33 = "RVA 0x%x for %s not found";
      LODWORD(v34) = v7;
      v35 = a5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v39, (uint64_t)&__p);
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)p_p, &v48, (uint64_t *)this);
      v39 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
      if (v46 == 1)
      {
        if (v41)
          MEMORY[0x24BD1B380](v41, 0x1000C8077774924);
      }
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        return;
      v24 = v36;
    }
    else
    {
      v48 = 3;
      v49 = v23;
      __p = 0;
      v33 = 0;
      v34 = 0;
      LODWORD(v40) = 0;
      v44 = 0;
      v45 = 0;
      v46 = 1;
      v42 = 0;
      v43 = 0;
      v41 = 0;
      v39 = &off_251C13AC0;
      p_p = &__p;
      llvm::raw_ostream::SetUnbuffered(&v39);
      v36 = &off_251C13928;
      v37 = "RVA 0x%x not found";
      LODWORD(v38) = v7;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v39, (uint64_t)&v36);
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)p_p, &v48, (uint64_t *)this);
      v39 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
      if (v46 == 1 && v41)
        MEMORY[0x24BD1B380](v41, 0x1000C8077774924);
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        return;
      v24 = __p;
    }
    operator delete(v24);
    return;
  }
  v16 = (void (**)(llvm::raw_string_ostream *__hidden))v13;
  v17 = v14;
  while (1)
  {
    v19 = *((_DWORD *)v10 + 2);
    v18 = *((_DWORD *)v10 + 3);
    v20 = v7 - v18;
    if (v7 >= v18 && v19 + v18 > v7)
      break;
    v13 = (llvm::object *)(*(uint64_t (**)(uint64_t, void (***)(llvm::raw_string_ostream *__hidden)))(*(_QWORD *)v12 + 136))(v12, &v39);
    v10 = v39;
    v12 = v40;
    if (v40 == v17 && v39 == v16)
      goto LABEL_15;
  }
  v25 = *((_DWORD *)v10 + 4);
  v26 = v25 + v18;
  if (v25 >= v19 || v26 > v7)
  {
    v28 = 0;
    *(_QWORD *)a4 = a2[2] + *((unsigned int *)v10 + 5) + v20;
  }
  else
  {
    v28 = (_QWORD *)operator new();
    v29 = (llvm::object *)std::system_category();
    v30 = (llvm::object *)llvm::object::object_category(v29);
    *v28 = &off_251C17DB8;
    v31 = llvm::object::object_category(v30);
    v28[1] = 9;
    v28[2] = v31;
  }
  *(_QWORD *)this = v28;
}

void llvm::object::COFFObjectFile::initImportTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v10[2];
  char v11[8];

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    goto LABEL_10;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (*v6 <= 1u)
    goto LABEL_10;
  v7 = (unint64_t *)*(unsigned int *)(v3 + 8);
  if (!(_DWORD)v7)
    goto LABEL_10;
  *(_QWORD *)v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v11, (uint64_t)"import table");
  if (!*(_QWORD *)this)
  {
    v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    v9 = *(_QWORD *)v11;
    llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 12), this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 128) = v9;
LABEL_10:
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::initDelayImportTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v10[2];
  char v11[8];

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    goto LABEL_10;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (*v6 <= 0xDu)
    goto LABEL_10;
  v7 = (unint64_t *)*(unsigned int *)(v3 + 104);
  if (!(_DWORD)v7)
    goto LABEL_10;
  *(_DWORD *)(a2 + 144) = (*(_DWORD *)(v3 + 108) >> 5) - 1;
  *(_QWORD *)v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v11, (uint64_t)"delay import table");
  if (!*(_QWORD *)this)
  {
    v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    v9 = *(_QWORD *)v11;
    llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 108), this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 136) = v9;
LABEL_10:
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::initExportTablePtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v10[2];
  char v11[8];

  v3 = *(unsigned int **)(a2 + 80);
  if (!v3)
    goto LABEL_10;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (!*v6)
    goto LABEL_10;
  v7 = (unint64_t *)*v3;
  if (!(_DWORD)v7)
    goto LABEL_10;
  *(_QWORD *)v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v11, (uint64_t)"export table");
  if (!*(_QWORD *)this)
  {
    v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    v9 = *(_QWORD *)v11;
    llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, v3[1], this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 152) = v9;
LABEL_10:
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::initBaseRelocPtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v10[2];
  char v11[8];

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    goto LABEL_10;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (*v6 <= 5u)
    goto LABEL_10;
  v7 = (unint64_t *)*(unsigned int *)(v3 + 40);
  if (!(_DWORD)v7)
    goto LABEL_10;
  *(_QWORD *)v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v11, (uint64_t)"base reloc table");
  if (!*(_QWORD *)this)
  {
    v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    v9 = *(_QWORD *)v11;
    llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 44), this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 160) = v9;
      *(_QWORD *)(a2 + 168) = v9 + *(unsigned int *)(v3 + 44);
LABEL_10:
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::initDebugDirectoryPtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  _OWORD v11[2];
  llvm::formatv_object_base *v12;
  char v13[8];
  _UNKNOWN **v14;

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    goto LABEL_12;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (*v6 <= 6u)
    goto LABEL_12;
  v7 = (unint64_t *)*(unsigned int *)(v3 + 48);
  if (!(_DWORD)v7)
    goto LABEL_12;
  HIDWORD(v8) = -1227133513 * *(_DWORD *)(v3 + 52);
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 2) >= 0x924924A)
  {
    *(_QWORD *)v13 = 3;
    v14 = llvm::object::object_category(this);
    v12 = (llvm::formatv_object_base *)"debug directory has uneven size";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v12, (uint64_t *)v13, (uint64_t *)this);
    return;
  }
  *(_QWORD *)v13 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v13, (uint64_t)"debug directory");
  if (!*(_QWORD *)this)
  {
    v9 = *(_OWORD *)(a2 + 32);
    v11[0] = *(_OWORD *)(a2 + 16);
    v11[1] = v9;
    v10 = *(_QWORD *)v13;
    llvm::object::Binary::checkOffset((llvm::object *)v11, *(unint64_t *)v13, *(unsigned int *)(v3 + 52), this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 176) = v10;
      *(_QWORD *)(a2 + 184) = v10 + *(unsigned int *)(v3 + 52);
LABEL_12:
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::initTLSDirectoryPtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _UNKNOWN **v12;
  int v13;
  _OWORD v14[2];
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  char v18[8];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  llvm::formatv_object_base *v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29[2];

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    goto LABEL_16;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (*v6 <= 9u)
    goto LABEL_16;
  v7 = (unint64_t *)*(unsigned int *)(v3 + 72);
  if (!(_DWORD)v7)
    goto LABEL_16;
  if (*(_QWORD *)(a2 + 72))
    v8 = 40;
  else
    v8 = 24;
  if (v8 == *(_DWORD *)(v3 + 76))
  {
    *(_QWORD *)v18 = 0;
    llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v18, (uint64_t)"TLS directory");
    if (!*(_QWORD *)this)
    {
      v9 = *(_OWORD *)(a2 + 32);
      v14[0] = *(_OWORD *)(a2 + 16);
      v14[1] = v9;
      v10 = *(_QWORD *)v18;
      llvm::object::Binary::checkOffset((llvm::object *)v14, *(unint64_t *)v18, *(unsigned int *)(v3 + 76), this);
      if (!*(_QWORD *)this)
      {
        v11 = 200;
        if (!*(_QWORD *)(a2 + 72))
          v11 = 192;
        *(_QWORD *)(a2 + v11) = v10;
LABEL_16:
        *(_QWORD *)this = 0;
      }
    }
  }
  else
  {
    v12 = llvm::object::object_category(this);
    v13 = *(_DWORD *)(v3 + 76);
    v29[0] = 3;
    v29[1] = (uint64_t)v12;
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
    v19 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 1;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    *(_QWORD *)v18 = &off_251C13AC0;
    v26 = (llvm::formatv_object_base *)v27;
    llvm::raw_ostream::SetUnbuffered(v18);
    v15[0] = &off_251C17E28;
    v15[1] = "TLS Directory size (%u) is not the expected size (%llu).";
    v16 = v13;
    v17 = v8;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v18, (uint64_t)v15);
    llvm::make_error<llvm::StringError,std::string,std::error_code>(v26, v29, (uint64_t *)this);
    *(_QWORD *)v18 = off_251C13948;
    if (v25 == 1 && v20)
      MEMORY[0x24BD1B380](v20, 0x1000C8077774924);
    if (SHIBYTE(v28) < 0)
      operator delete(v27[0]);
  }
}

void llvm::object::COFFObjectFile::initLoadConfigPtr(llvm::object::COFFObjectFile *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unint64_t *v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v10[2];
  char v11[8];

  v3 = *(_QWORD *)(a2 + 80);
  if (!v3)
    goto LABEL_10;
  v5 = *(_QWORD *)(a2 + 64);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *(_QWORD *)(a2 + 72) + 108);
  if (*v6 <= 0xAu)
    goto LABEL_10;
  v7 = (unint64_t *)*(unsigned int *)(v3 + 80);
  if (!(_DWORD)v7)
    goto LABEL_10;
  *(_QWORD *)v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (_QWORD *)a2, v7, v11, (uint64_t)"load config table");
  if (!*(_QWORD *)this)
  {
    v8 = *(_OWORD *)(a2 + 32);
    v10[0] = *(_OWORD *)(a2 + 16);
    v10[1] = v8;
    v9 = *(_QWORD *)v11;
    llvm::object::Binary::checkOffset((llvm::object *)v10, *(unint64_t *)v11, *(unsigned int *)(v3 + 84), this);
    if (!*(_QWORD *)this)
    {
      *(_QWORD *)(a2 + 208) = v9;
LABEL_10:
      *(_QWORD *)this = 0;
    }
  }
}

void llvm::object::COFFObjectFile::create(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = operator new();
  v5 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v5;
  *(_DWORD *)(v4 + 8) = 10;
  *(_QWORD *)v4 = &off_251C17BE8;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 108) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_DWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  llvm::object::COFFObjectFile::initialize((llvm::object::COFFObjectFile *)v4, &v7);
  v6 = v7;
  if (v7)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = v6;
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
  }
  *(_QWORD *)a2 = v4;
}

void llvm::object::COFFObjectFile::initialize(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  std::error_category *v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  _UNKNOWN **v9;
  const char *v10;
  _UNKNOWN **v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  _WORD *v16;
  llvm::object *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  unsigned int v25;
  __int128 v26;
  unsigned __int16 *v27;
  int v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  llvm::object *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _UNKNOWN **v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  llvm::formatv_object_base *v51;

  v4 = (std::error_category *)std::system_category();
  v5 = *((_QWORD *)this + 3);
  if (v5 <= 0x13)
  {
    v11 = llvm::object::object_category((llvm::object *)v4);
    v12 = (_QWORD *)operator new();
    *v12 = &off_251C12820;
    v12[1] = 4;
    v12[2] = v11;
    *a2 = (uint64_t)v12;
    return;
  }
  v6 = (_QWORD *)((char *)this + 16);
  if (v5 <= 0x43)
  {
    llvm::object::object_category((llvm::object *)v4);
    v13 = 0;
    v14 = 0;
    v7 = (_BYTE *)*v6;
  }
  else
  {
    v7 = (_BYTE *)*v6;
    if (*(_BYTE *)*v6 == 77 && v7[1] == 90)
    {
      v8 = *((unsigned int *)v7 + 15);
      if (*(_DWORD *)&v7[v8] != 17744)
      {
LABEL_6:
        v9 = llvm::object::object_category((llvm::object *)v4);
        *(_QWORD *)&v49 = 3;
        *((_QWORD *)&v49 + 1) = v9;
        v10 = "incorrect PE magic";
LABEL_7:
        v51 = (llvm::formatv_object_base *)v10;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v51, (uint64_t *)&v49, a2);
        return;
      }
      v14 = v8 + 4;
      v13 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v15 = *((_OWORD *)this + 2);
  v49 = *(_OWORD *)v6;
  v50 = v15;
  v16 = &v7[v14];
  v17 = (llvm::object *)llvm::object::Binary::checkOffset((llvm::object *)&v49, (unint64_t)&v7[v14], 0x14uLL, a2);
  if (!*a2)
  {
    *((_QWORD *)this + 6) = v16;
    *a2 = 0;
    if ((v13 & 1) == 0)
    {
      if (*v16)
        goto LABEL_28;
      if ((__int16)v16[1] == -1)
      {
        if (*((_QWORD *)this + 3) <= 0x37uLL)
        {
          llvm::object::object_category(v17);
        }
        else
        {
          v18 = *((_OWORD *)this + 2);
          v49 = *(_OWORD *)v6;
          v50 = v18;
          v19 = *((_QWORD *)this + 2) + v14;
          llvm::object::Binary::checkOffset((llvm::object *)&v49, v19, 0x38uLL, a2);
          if (*a2)
            return;
          *((_QWORD *)this + 7) = v19;
          *a2 = 0;
          if (*(unsigned __int16 *)(v19 + 4) >= 2u
            && *(_QWORD *)(v19 + 12) == 0x4BA9BAEED1BAA1C7
            && *(_QWORD *)(v19 + 20) == 0xB8DCA46AF6FA20AFLL)
          {
            *((_QWORD *)this + 6) = 0;
            v14 += 56;
            goto LABEL_43;
          }
          *((_QWORD *)this + 7) = 0;
        }
      }
      v16 = (_WORD *)*((_QWORD *)this + 6);
    }
    if (!v16)
    {
      v21 = 0;
      if (!v13)
        goto LABEL_30;
      goto LABEL_35;
    }
LABEL_28:
    std::system_category();
    v21 = *((_QWORD *)this + 6);
    if (*(__int16 *)(v21 + 2) == -1)
      goto LABEL_84;
    v14 += 20;
    if (!v13)
    {
LABEL_30:
      if (v21)
      {
LABEL_31:
        v22 = v14 + *(unsigned __int16 *)(v21 + 16);
        v23 = *((_OWORD *)this + 2);
        v47 = *(_OWORD *)v6;
        v48 = v23;
        v24 = *v6 + v22;
        v25 = *(unsigned __int16 *)(v21 + 2);
        if (v25 == 0xFFFF)
          v25 = 0;
LABEL_44:
        v49 = v47;
        v50 = v48;
        v34 = (llvm::object *)llvm::object::Binary::checkOffset((llvm::object *)&v49, v24, 40 * v25, a2);
        if (*a2)
          return;
        *((_QWORD *)this + 11) = v24;
        *a2 = 0;
        v35 = *((_QWORD *)this + 6);
        if (v35)
        {
          if (*(__int16 *)(v35 + 2) == -1)
            goto LABEL_55;
          v36 = (_DWORD *)(v35 + 8);
        }
        else
        {
          v36 = (_DWORD *)(*((_QWORD *)this + 7) + 48);
        }
        if (*v36)
        {
          llvm::object::COFFObjectFile::initSymbolTablePtr((llvm::object::COFFObjectFile *)&v49, (uint64_t)this);
          if ((_QWORD)v49)
          {
            v46 = (_QWORD *)v49;
            *(_QWORD *)&v49 = 0;
            llvm::consumeError(&v46);
            if (v46)
              (*(void (**)(_QWORD *))(*v46 + 8))(v46);
            *((_QWORD *)this + 12) = 0;
            *((_QWORD *)this + 13) = 0;
            *((_DWORD *)this + 30) = 0;
            *((_QWORD *)this + 14) = 0;
            if ((_QWORD)v49)
              (*(void (**)(_QWORD))(*(_QWORD *)v49 + 8))(v49);
          }
          goto LABEL_63;
        }
LABEL_55:
        if (*((_QWORD *)this + 12) || *((_QWORD *)this + 13))
        {
          if (v35)
          {
            if (*(__int16 *)(v35 + 2) == -1)
              goto LABEL_63;
            v37 = (_DWORD *)(v35 + 12);
          }
          else
          {
            v37 = (_DWORD *)(*((_QWORD *)this + 7) + 52);
          }
          if (*v37)
          {
            v38 = llvm::object::object_category(v34);
            *(_QWORD *)&v49 = 3;
            *((_QWORD *)&v49 + 1) = v38;
            v10 = "symbol table missing";
            goto LABEL_7;
          }
        }
LABEL_63:
        llvm::object::COFFObjectFile::initImportTablePtr((llvm::object::COFFObjectFile *)&v45, (uint64_t)this);
        ignoreStrippedErrors(a2, &v45);
        if (v45)
          (*(void (**)(_QWORD *))(*v45 + 8))(v45);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initDelayImportTablePtr((llvm::object::COFFObjectFile *)&v44, (uint64_t)this);
        ignoreStrippedErrors(a2, &v44);
        if (v44)
          (*(void (**)(_QWORD *))(*v44 + 8))(v44);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initExportTablePtr((llvm::object::COFFObjectFile *)&v43, (uint64_t)this);
        ignoreStrippedErrors(a2, &v43);
        if (v43)
          (*(void (**)(_QWORD *))(*v43 + 8))(v43);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initBaseRelocPtr((llvm::object::COFFObjectFile *)&v42, (uint64_t)this);
        ignoreStrippedErrors(a2, &v42);
        if (v42)
          (*(void (**)(_QWORD *))(*v42 + 8))(v42);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initDebugDirectoryPtr((llvm::object::COFFObjectFile *)&v41, (uint64_t)this);
        ignoreStrippedErrors(a2, &v41);
        if (v41)
          (*(void (**)(_QWORD *))(*v41 + 8))(v41);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initTLSDirectoryPtr((llvm::object::COFFObjectFile *)&v40, (uint64_t)this);
        ignoreStrippedErrors(a2, &v40);
        if (v40)
          (*(void (**)(_QWORD *))(*v40 + 8))(v40);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initLoadConfigPtr((llvm::object::COFFObjectFile *)&v39, (uint64_t)this);
        ignoreStrippedErrors(a2, &v39);
        if (v39)
          (*(void (**)(_QWORD *))(*v39 + 8))(v39);
        if (*a2)
          return;
LABEL_84:
        *a2 = 0;
        return;
      }
      goto LABEL_42;
    }
LABEL_35:
    v26 = *((_OWORD *)this + 2);
    v49 = *(_OWORD *)v6;
    v50 = v26;
    v27 = (unsigned __int16 *)(*v6 + v14);
    v4 = (std::error_category *)llvm::object::Binary::checkOffset((llvm::object *)&v49, (unint64_t)v27, 0x60uLL, a2);
    if (*a2)
      return;
    *a2 = 0;
    v28 = *v27;
    if (v28 == 267)
    {
      *((_QWORD *)this + 8) = v27;
      v29 = *((_QWORD *)this + 2) + v14 + 96;
      v30 = (unsigned int *)(v27 + 46);
    }
    else
    {
      if (v28 != 523)
        goto LABEL_6;
      *((_QWORD *)this + 9) = v27;
      v29 = *((_QWORD *)this + 2) + v14 + 112;
      v30 = (unsigned int *)(v27 + 54);
    }
    v31 = 8 * *v30;
    v32 = *((_OWORD *)this + 2);
    v49 = *(_OWORD *)v6;
    v50 = v32;
    llvm::object::Binary::checkOffset((llvm::object *)&v49, v29, v31, a2);
    if (*a2)
      return;
    *((_QWORD *)this + 10) = v29;
    *a2 = 0;
    v21 = *((_QWORD *)this + 6);
    if (v21)
      goto LABEL_31;
LABEL_42:
    v19 = *((_QWORD *)this + 7);
LABEL_43:
    v33 = *((_OWORD *)this + 2);
    v47 = *(_OWORD *)v6;
    v48 = v33;
    v24 = *v6 + v14;
    v25 = *(_DWORD *)(v19 + 44);
    goto LABEL_44;
  }
}

_QWORD *ignoreStrippedErrors(_QWORD *a1, _QWORD **a2)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;

  result = *a2;
  if (!*a2)
  {
    v5 = 0;
    goto LABEL_6;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, void *))(*result + 48))(result, &llvm::object::BinaryError::ID);
  v5 = *a2;
  if (!(_DWORD)result)
  {
LABEL_6:
    *a1 = v5;
    a1 = a2;
    goto LABEL_7;
  }
  *a2 = 0;
  v6 = v5;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v6);
  result = v6;
  if (v6)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
LABEL_7:
  *a1 = 0;
  return result;
}

uint64_t llvm::object::COFFObjectFile::symbol_begin(llvm::object::COFFObjectFile *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (!result)
    return *((_QWORD *)this + 13);
  return result;
}

uint64_t llvm::object::COFFObjectFile::symbol_end(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t llvm::object::COFFObjectFile::section_begin(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t llvm::object::COFFObjectFile::section_end(llvm::object::COFFObjectFile *this)
{
  uint64_t v1;
  int v2;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(unsigned __int16 *)(v1 + 2);
    if (v2 == 0xFFFF)
      v2 = 0;
  }
  else
  {
    v2 = *(_DWORD *)(*((_QWORD *)this + 7) + 44);
  }
  return *((_QWORD *)this + 11) + 40 * v2;
}

uint64_t llvm::object::COFFObjectFile::getBytesInAddress(llvm::object::COFFObjectFile *this)
{
  uint64_t v2;

  v2 = 8;
  if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 392))(this) != 38)
  {
    if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 392))(this) == 3)
      return 8;
    else
      return 4;
  }
  return v2;
}

const char *llvm::object::COFFObjectFile::getFileFormatName(llvm::object::COFFObjectFile *this)
{
  unsigned __int16 *v1;
  int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v1)
    v1 = (unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  v2 = *v1;
  if (v2 <= 34403)
  {
    if (v2 == 332)
      return "COFF-i386";
    if (v2 == 452)
      return "COFF-ARM";
  }
  else
  {
    switch(v2)
    {
      case 43620:
        return "COFF-ARM64";
      case 42561:
        return "COFF-ARM64EC";
      case 34404:
        return "COFF-x86-64";
    }
  }
  return "COFF-<unknown arch>";
}

uint64_t llvm::object::COFFObjectFile::getArch(llvm::object::COFFObjectFile *this)
{
  unsigned __int16 *v1;
  int v2;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v1)
    v1 = (unsigned __int16 *)(*((_QWORD *)this + 7) + 6);
  v2 = *v1;
  if (v2 <= 34403)
  {
    if (v2 == 332)
      return 37;
    if (v2 == 452)
      return 35;
  }
  else
  {
    if (v2 == 43620 || v2 == 42561)
      return 3;
    if (v2 == 34404)
      return 38;
  }
  return 0;
}

uint64_t llvm::object::COFFObjectFile::getStartAddress@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 64);
  *(_BYTE *)(a2 + 8) &= ~1u;
  if (v2)
    v2 = *(unsigned int *)(v2 + 16);
  *(_QWORD *)a2 = v2;
  return this;
}

void llvm::object::COFFObjectFile::getString(llvm::object::COFFObjectFile *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  _UNKNOWN **v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12[2];

  v4 = *((_DWORD *)this + 30);
  if (v4 > 4)
  {
    if (v4 <= a2)
    {
      v8 = llvm::object::object_category(this);
      v9 = (_QWORD *)operator new();
      *v9 = &off_251C12820;
      v9[1] = 4;
      v9[2] = v8;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v9;
    }
    else
    {
      v5 = *((_QWORD *)this + 14);
      v6 = v5 + a2;
      if (v5)
        v7 = strlen((const char *)(v5 + a2));
      else
        v7 = 0;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
    }
  }
  else
  {
    v12[0] = 3;
    v12[1] = (uint64_t)llvm::object::object_category(this);
    v11 = (llvm::formatv_object_base *)"string table empty";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, v12, &v10);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v10;
  }
}

void llvm::object::COFFObjectFile::getSymbolName(char *__s@<X1>, llvm::object::COFFObjectFile *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v5;

  if (*(_DWORD *)__s)
  {
    if (__s[7])
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = __s;
      *(_QWORD *)(a3 + 8) = 8;
    }
    else
    {
      v5 = strlen(__s);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = __s;
      *(_QWORD *)(a3 + 8) = v5;
    }
  }
  else
  {
    llvm::object::COFFObjectFile::getString(a2, *((_DWORD *)__s + 1), a3);
  }
}

void llvm::object::COFFObjectFile::moveRelocationNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 10;
}

uint64_t llvm::object::COFFObjectFile::getRelocationOffset(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t llvm::object::COFFObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = a1[12];
  if (!v3 && !a1[13])
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v4 = a1[6];
  if (v4)
  {
    if (*(__int16 *)(v4 + 2) == -1)
      return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    v5 = (unsigned int *)(v4 + 12);
  }
  else
  {
    v5 = (unsigned int *)(a1[7] + 52);
  }
  if (v2 >= *v5)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  if (v3)
  {
    v6 = 18;
  }
  else
  {
    v3 = a1[13];
    v6 = 20;
  }
  return v3 + v2 * (unint64_t)v6;
}

uint64_t llvm::object::COFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 8);
}

_QWORD *llvm::object::COFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  char *v6;
  uint64_t v7;
  char *v9;
  char **v10;

  v3 = *(__int16 *)(a2 + 8);
  v4 = *(unsigned __int16 **)(a1 + 48);
  if (!v4)
    v4 = (unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 6);
  v5 = *v4;
  v6 = "Unknown";
  v7 = 7;
  if (v5 > 34403)
  {
    if (v5 != 43620 && v5 != 42561)
    {
      if (v5 == 34404)
      {
        if (v3 < 0x11)
        {
          v9 = (char *)&unk_24AA2E228 + 8 * v3;
          v10 = off_251C17E38;
          goto LABEL_20;
        }
LABEL_21:
        v7 = 7;
        return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
      }
      return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
    }
    if (v3 >= 0x12)
      goto LABEL_21;
    v9 = (char *)&unk_24AA2E368 + 8 * v3;
    v10 = off_251C17F78;
LABEL_20:
    v7 = *(_QWORD *)v9;
    v6 = v10[v3];
    return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
  }
  if (v5 == 332)
  {
    if (v3 < 0x15)
    {
      v9 = (char *)&unk_24AA2E3F8 + 8 * v3;
      v10 = off_251C18008;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  if (v5 == 452)
  {
    if (v3 >= 0x17)
      goto LABEL_21;
    v9 = (char *)&unk_24AA2E2B0 + 8 * v3;
    v10 = off_251C17EC0;
    goto LABEL_20;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v6, &v6[v7]);
}

BOOL llvm::object::COFFObjectFile::isRelocatableObject(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 10) == 0;
}

const char *llvm::object::COFFObjectFile::mapDebugSectionName(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  if (a3 == 7 && *a2 == 1717528677 && *(_DWORD *)((char *)a2 + 3) == 1835102822)
    return "eh_frame";
  return result;
}

void llvm::object::COFFObjectFile::~COFFObjectFile(llvm::object::COFFObjectFile *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::object::COFFObjectFile::is64Bit(llvm::object::COFFObjectFile *this)
{
  return 0;
}

void llvm::object::ObjectFile::dynamic_relocation_sections(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::object::COFFObjectFile::getFeatures(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;
  void **v5;

  v3 = 0uLL;
  v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v3 = 0uLL;
  v4 = 0;
  v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

void llvm::object::ObjectFile::tryGetCPUName(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void llvm::object::SectionStrippedError::~SectionStrippedError(llvm::object::SectionStrippedError *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::object::SectionStrippedError,llvm::object::BinaryError>::dynamicClassID()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::SectionStrippedError,llvm::object::BinaryError>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

uint64_t llvm::format_object<unsigned int,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned int,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

const char *llvm::object::getELFRelocationTypeName(llvm::object *this, unsigned int a2)
{
  char **v2;
  char **v3;
  const char *result;

  if ((int)this <= 92)
  {
    if ((int)this <= 39)
    {
      switch((int)this)
      {
        case 2:
        case 18:
          goto LABEL_19;
        case 3:
        case 6:
          if (a2 >= 0x2C)
            return "Unknown";
          v2 = off_251C18360;
          return v2[a2];
        case 4:
          if (a2 >= 0x2B)
            return "Unknown";
          v2 = off_251C180B0;
          return v2[a2];
        case 8:
          if (a2 >= 0xFA)
            return "Unknown";
          v2 = off_251C184C0;
          return v2[a2];
        case 20:
          result = "R_PPC_NONE";
          switch(a2)
          {
            case 0u:
              return result;
            case 1u:
              result = "R_PPC_ADDR32";
              break;
            case 2u:
              result = "R_PPC_ADDR24";
              break;
            case 3u:
              result = "R_PPC_ADDR16";
              break;
            case 4u:
              result = "R_PPC_ADDR16_LO";
              break;
            case 5u:
              result = "R_PPC_ADDR16_HI";
              break;
            case 6u:
              result = "R_PPC_ADDR16_HA";
              break;
            case 7u:
              result = "R_PPC_ADDR14";
              break;
            case 8u:
              result = "R_PPC_ADDR14_BRTAKEN";
              break;
            case 9u:
              result = "R_PPC_ADDR14_BRNTAKEN";
              break;
            case 0xAu:
              result = "R_PPC_REL24";
              break;
            case 0xBu:
              result = "R_PPC_REL14";
              break;
            case 0xCu:
              result = "R_PPC_REL14_BRTAKEN";
              break;
            case 0xDu:
              result = "R_PPC_REL14_BRNTAKEN";
              break;
            case 0xEu:
              result = "R_PPC_GOT16";
              break;
            case 0xFu:
              result = "R_PPC_GOT16_LO";
              break;
            case 0x10u:
              result = "R_PPC_GOT16_HI";
              break;
            case 0x11u:
              result = "R_PPC_GOT16_HA";
              break;
            case 0x12u:
              result = "R_PPC_PLTREL24";
              break;
            case 0x13u:
              result = "R_PPC_COPY";
              break;
            case 0x14u:
              result = "R_PPC_GLOB_DAT";
              break;
            case 0x15u:
              result = "R_PPC_JMP_SLOT";
              break;
            case 0x16u:
              result = "R_PPC_RELATIVE";
              break;
            case 0x17u:
              result = "R_PPC_LOCAL24PC";
              break;
            case 0x18u:
              result = "R_PPC_UADDR32";
              break;
            case 0x19u:
              result = "R_PPC_UADDR16";
              break;
            case 0x1Au:
              result = "R_PPC_REL32";
              break;
            case 0x1Bu:
              result = "R_PPC_PLT32";
              break;
            case 0x1Cu:
              result = "R_PPC_PLTREL32";
              break;
            case 0x1Du:
              result = "R_PPC_PLT16_LO";
              break;
            case 0x1Eu:
              result = "R_PPC_PLT16_HI";
              break;
            case 0x1Fu:
              result = "R_PPC_PLT16_HA";
              break;
            case 0x20u:
              result = "R_PPC_SDAREL16";
              break;
            case 0x21u:
              result = "R_PPC_SECTOFF";
              break;
            case 0x22u:
              result = "R_PPC_SECTOFF_LO";
              break;
            case 0x23u:
              result = "R_PPC_SECTOFF_HI";
              break;
            case 0x24u:
              result = "R_PPC_SECTOFF_HA";
              break;
            case 0x25u:
              result = "R_PPC_ADDR30";
              break;
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
              return "Unknown";
            case 0x43u:
              result = "R_PPC_TLS";
              break;
            case 0x44u:
              result = "R_PPC_DTPMOD32";
              break;
            case 0x45u:
              result = "R_PPC_TPREL16";
              break;
            case 0x46u:
              result = "R_PPC_TPREL16_LO";
              break;
            case 0x47u:
              result = "R_PPC_TPREL16_HI";
              break;
            case 0x48u:
              result = "R_PPC_TPREL16_HA";
              break;
            case 0x49u:
              result = "R_PPC_TPREL32";
              break;
            case 0x4Au:
              result = "R_PPC_DTPREL16";
              break;
            case 0x4Bu:
              result = "R_PPC_DTPREL16_LO";
              break;
            case 0x4Cu:
              result = "R_PPC_DTPREL16_HI";
              break;
            case 0x4Du:
              result = "R_PPC_DTPREL16_HA";
              break;
            case 0x4Eu:
              result = "R_PPC_DTPREL32";
              break;
            case 0x4Fu:
              result = "R_PPC_GOT_TLSGD16";
              break;
            case 0x50u:
              result = "R_PPC_GOT_TLSGD16_LO";
              break;
            case 0x51u:
              result = "R_PPC_GOT_TLSGD16_HI";
              break;
            case 0x52u:
              result = "R_PPC_GOT_TLSGD16_HA";
              break;
            case 0x53u:
              result = "R_PPC_GOT_TLSLD16";
              break;
            case 0x54u:
              result = "R_PPC_GOT_TLSLD16_LO";
              break;
            case 0x55u:
              result = "R_PPC_GOT_TLSLD16_HI";
              break;
            case 0x56u:
              result = "R_PPC_GOT_TLSLD16_HA";
              break;
            case 0x57u:
              result = "R_PPC_GOT_TPREL16";
              break;
            case 0x58u:
              result = "R_PPC_GOT_TPREL16_LO";
              break;
            case 0x59u:
              result = "R_PPC_GOT_TPREL16_HI";
              break;
            case 0x5Au:
              result = "R_PPC_GOT_TPREL16_HA";
              break;
            case 0x5Bu:
              result = "R_PPC_GOT_DTPREL16";
              break;
            case 0x5Cu:
              result = "R_PPC_GOT_DTPREL16_LO";
              break;
            case 0x5Du:
              result = "R_PPC_GOT_DTPREL16_HI";
              break;
            case 0x5Eu:
              result = "R_PPC_GOT_DTPREL16_HA";
              break;
            case 0x5Fu:
              result = "R_PPC_TLSGD";
              break;
            case 0x60u:
              result = "R_PPC_TLSLD";
              break;
            default:
              switch(a2)
              {
                case 0xF8u:
                  result = "R_PPC_IRELATIVE";
                  break;
                case 0xF9u:
                  result = "R_PPC_REL16";
                  break;
                case 0xFAu:
                  result = "R_PPC_REL16_LO";
                  break;
                case 0xFBu:
                  result = "R_PPC_REL16_HI";
                  break;
                case 0xFCu:
                  result = "R_PPC_REL16_HA";
                  break;
                default:
                  return "Unknown";
              }
              break;
          }
          return result;
        case 21:
          if (a2 >= 0xFD)
            return "Unknown";
          v3 = off_251C19960;
          return v3[a2];
        case 22:
          if (a2 >= 0x42)
            return "Unknown";
          v3 = off_251C1A328;
          return v3[a2];
        default:
          return "Unknown";
      }
    }
    if ((int)this <= 61)
    {
      if ((_DWORD)this == 40)
      {
        if (a2 < 0xA1)
        {
          v3 = off_251C18C90;
          return v3[a2];
        }
      }
      else if ((_DWORD)this == 43)
      {
LABEL_19:
        if (a2 < 0x55)
        {
          v3 = off_251C1A538;
          return v3[a2];
        }
      }
      return "Unknown";
    }
    if ((_DWORD)this != 62)
    {
      if ((_DWORD)this == 83 && a2 < 0x24)
      {
        v3 = off_251C194E8;
        return v3[a2];
      }
      return "Unknown";
    }
    if (a2 < 0x2B)
    {
      v2 = off_251C18208;
      return v2[a2];
    }
    return "Unknown";
  }
  if ((int)this > 223)
  {
    switch((int)this)
    {
      case 243:
        if (a2 >= 0x3C)
          return "Unknown";
        v3 = off_251C1A148;
        return v3[a2];
      case 244:
        if (a2 >= 7)
          return "Unknown";
        v3 = off_251C19928;
        return v3[a2];
      case 245:
      case 246:
      case 248:
      case 249:
      case 250:
        return "Unknown";
      case 247:
        if (a2 >= 0xB)
          return "Unknown";
        v3 = off_251C1A858;
        return v3[a2];
      case 251:
        if (a2 >= 0x25)
          return "Unknown";
        v3 = off_251C1A908;
        return v3[a2];
      case 252:
        if (a2 >= 0x45)
          return "Unknown";
        v3 = off_251C1AA30;
        return v3[a2];
      default:
        if ((_DWORD)this != 224)
        {
          if ((_DWORD)this == 258 && a2 < 0x65)
          {
            v3 = off_251C1AC58;
            return v3[a2];
          }
          return "Unknown";
        }
        if (a2 >= 0xF)
          return "Unknown";
        v3 = off_251C1A7E0;
        break;
    }
    return v3[a2];
  }
  if ((int)this <= 163)
  {
    if ((_DWORD)this != 93)
    {
      if ((_DWORD)this == 94)
      {
        if (a2 < 0x39)
        {
          v3 = off_251C1AF80;
          return v3[a2];
        }
      }
      else if ((_DWORD)this == 105 && a2 < 0xB)
      {
        v3 = off_251C1A8B0;
        return v3[a2];
      }
      return "Unknown";
    }
    goto LABEL_24;
  }
  if ((_DWORD)this == 164)
  {
    if (a2 < 0x64)
    {
      v3 = off_251C19608;
      return v3[a2];
    }
    return "Unknown";
  }
  if ((_DWORD)this != 183)
  {
    if ((_DWORD)this != 195)
      return "Unknown";
LABEL_24:
    if (a2 < 0x6A)
    {
      v3 = off_251C19198;
      return v3[a2];
    }
    return "Unknown";
  }
  result = "R_AARCH64_NONE";
  switch(a2)
  {
    case 0u:
      return result;
    case 1u:
      result = "R_AARCH64_P32_ABS32";
      break;
    case 2u:
      result = "R_AARCH64_P32_ABS16";
      break;
    case 3u:
      result = "R_AARCH64_P32_PREL32";
      break;
    case 4u:
      result = "R_AARCH64_P32_PREL16";
      break;
    case 5u:
      result = "R_AARCH64_P32_MOVW_UABS_G0";
      break;
    case 6u:
      result = "R_AARCH64_P32_MOVW_UABS_G0_NC";
      break;
    case 7u:
      result = "R_AARCH64_P32_MOVW_UABS_G1";
      break;
    case 8u:
      result = "R_AARCH64_P32_MOVW_SABS_G0";
      break;
    case 9u:
      result = "R_AARCH64_P32_LD_PREL_LO19";
      break;
    case 0xAu:
      result = "R_AARCH64_P32_ADR_PREL_LO21";
      break;
    case 0xBu:
      result = "R_AARCH64_P32_ADR_PREL_PG_HI21";
      break;
    case 0xCu:
      result = "R_AARCH64_P32_ADD_ABS_LO12_NC";
      break;
    case 0xDu:
      result = "R_AARCH64_P32_LDST8_ABS_LO12_NC";
      break;
    case 0xEu:
      result = "R_AARCH64_P32_LDST16_ABS_LO12_NC";
      break;
    case 0xFu:
      result = "R_AARCH64_P32_LDST32_ABS_LO12_NC";
      break;
    case 0x10u:
      result = "R_AARCH64_P32_LDST64_ABS_LO12_NC";
      break;
    case 0x11u:
      result = "R_AARCH64_P32_LDST128_ABS_LO12_NC";
      break;
    case 0x12u:
      result = "R_AARCH64_P32_TSTBR14";
      break;
    case 0x13u:
      result = "R_AARCH64_P32_CONDBR19";
      break;
    case 0x14u:
      result = "R_AARCH64_P32_JUMP26";
      break;
    case 0x15u:
      result = "R_AARCH64_P32_CALL26";
      break;
    case 0x16u:
      result = "R_AARCH64_P32_MOVW_PREL_G0";
      break;
    case 0x17u:
      result = "R_AARCH64_P32_MOVW_PREL_G0_NC";
      break;
    case 0x18u:
      result = "R_AARCH64_P32_MOVW_PREL_G1";
      break;
    case 0x19u:
      result = "R_AARCH64_P32_GOT_LD_PREL19";
      break;
    case 0x1Au:
      result = "R_AARCH64_P32_ADR_GOT_PAGE";
      break;
    case 0x1Bu:
      result = "R_AARCH64_P32_LD32_GOT_LO12_NC";
      break;
    case 0x1Cu:
      result = "R_AARCH64_P32_LD32_GOTPAGE_LO14";
      break;
    case 0x1Du:
      result = "R_AARCH64_P32_PLT32";
      break;
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
    case 0x4Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
    case 0xEBu:
    case 0xECu:
    case 0xEDu:
    case 0xEEu:
    case 0xEFu:
    case 0xF0u:
    case 0xF1u:
    case 0xF2u:
    case 0xF3u:
    case 0xF4u:
    case 0xF5u:
    case 0xF6u:
    case 0xF7u:
    case 0xF8u:
    case 0xF9u:
    case 0xFAu:
    case 0xFBu:
    case 0xFCu:
    case 0xFDu:
    case 0xFEu:
    case 0xFFu:
    case 0x100u:
    case 0x119u:
    case 0x126u:
    case 0x127u:
    case 0x128u:
    case 0x129u:
    case 0x12Au:
      return "Unknown";
    case 0x50u:
      result = "R_AARCH64_P32_TLSGD_ADR_PREL21";
      break;
    case 0x51u:
      result = "R_AARCH64_P32_TLSGD_ADR_PAGE21";
      break;
    case 0x52u:
      result = "R_AARCH64_P32_TLSGD_ADD_LO12_NC";
      break;
    case 0x53u:
      result = "R_AARCH64_P32_TLSLD_ADR_PREL21";
      break;
    case 0x54u:
      result = "R_AARCH64_P32_TLSLD_ADR_PAGE21";
      break;
    case 0x55u:
      result = "R_AARCH64_P32_TLSLD_ADD_LO12_NC";
      break;
    case 0x56u:
      result = "R_AARCH64_P32_TLSLD_LD_PREL19";
      break;
    case 0x57u:
      result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G1";
      break;
    case 0x58u:
      result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0";
      break;
    case 0x59u:
      result = "R_AARCH64_P32_TLSLD_MOVW_DTPREL_G0_NC";
      break;
    case 0x5Au:
      result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_HI12";
      break;
    case 0x5Bu:
      result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12";
      break;
    case 0x5Cu:
      result = "R_AARCH64_P32_TLSLD_ADD_DTPREL_LO12_NC";
      break;
    case 0x5Du:
      result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12";
      break;
    case 0x5Eu:
      result = "R_AARCH64_P32_TLSLD_LDST8_DTPREL_LO12_NC";
      break;
    case 0x5Fu:
      result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12";
      break;
    case 0x60u:
      result = "R_AARCH64_P32_TLSLD_LDST16_DTPREL_LO12_NC";
      break;
    case 0x61u:
      result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12";
      break;
    case 0x62u:
      result = "R_AARCH64_P32_TLSLD_LDST32_DTPREL_LO12_NC";
      break;
    case 0x63u:
      result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12";
      break;
    case 0x64u:
      result = "R_AARCH64_P32_TLSLD_LDST64_DTPREL_LO12_NC";
      break;
    case 0x65u:
      result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12";
      break;
    case 0x66u:
      result = "R_AARCH64_P32_TLSLD_LDST128_DTPREL_LO12_NC";
      break;
    case 0x67u:
      result = "R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21";
      break;
    case 0x68u:
      result = "R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC";
      break;
    case 0x69u:
      result = "R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19";
      break;
    case 0x6Au:
      result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G1";
      break;
    case 0x6Bu:
      result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0";
      break;
    case 0x6Cu:
      result = "R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC";
      break;
    case 0x6Du:
      result = "R_AARCH64_P32_TLSLE_ADD_TPREL_HI12";
      break;
    case 0x6Eu:
      result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12";
      break;
    case 0x6Fu:
      result = "R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC";
      break;
    case 0x70u:
      result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12";
      break;
    case 0x71u:
      result = "R_AARCH64_P32_TLSLE_LDST8_TPREL_LO12_NC";
      break;
    case 0x72u:
      result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12";
      break;
    case 0x73u:
      result = "R_AARCH64_P32_TLSLE_LDST16_TPREL_LO12_NC";
      break;
    case 0x74u:
      result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12";
      break;
    case 0x75u:
      result = "R_AARCH64_P32_TLSLE_LDST32_TPREL_LO12_NC";
      break;
    case 0x76u:
      result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12";
      break;
    case 0x77u:
      result = "R_AARCH64_P32_TLSLE_LDST64_TPREL_LO12_NC";
      break;
    case 0x78u:
      result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12";
      break;
    case 0x79u:
      result = "R_AARCH64_P32_TLSLE_LDST128_TPREL_LO12_NC";
      break;
    case 0x7Au:
      result = "R_AARCH64_P32_TLSDESC_LD_PREL19";
      break;
    case 0x7Bu:
      result = "R_AARCH64_P32_TLSDESC_ADR_PREL21";
      break;
    case 0x7Cu:
      result = "R_AARCH64_P32_TLSDESC_ADR_PAGE21";
      break;
    case 0x7Du:
      result = "R_AARCH64_P32_TLSDESC_LD32_LO12";
      break;
    case 0x7Eu:
      result = "R_AARCH64_P32_TLSDESC_ADD_LO12";
      break;
    case 0x7Fu:
      result = "R_AARCH64_P32_TLSDESC_CALL";
      break;
    case 0xB4u:
      result = "R_AARCH64_P32_COPY";
      break;
    case 0xB5u:
      result = "R_AARCH64_P32_GLOB_DAT";
      break;
    case 0xB6u:
      result = "R_AARCH64_P32_JUMP_SLOT";
      break;
    case 0xB7u:
      result = "R_AARCH64_P32_RELATIVE";
      break;
    case 0xB8u:
      result = "R_AARCH64_P32_TLS_DTPREL";
      break;
    case 0xB9u:
      result = "R_AARCH64_P32_TLS_DTPMOD";
      break;
    case 0xBAu:
      result = "R_AARCH64_P32_TLS_TPREL";
      break;
    case 0xBBu:
      result = "R_AARCH64_P32_TLSDESC";
      break;
    case 0xBCu:
      result = "R_AARCH64_P32_IRELATIVE";
      break;
    case 0x101u:
      result = "R_AARCH64_ABS64";
      break;
    case 0x102u:
      result = "R_AARCH64_ABS32";
      break;
    case 0x103u:
      result = "R_AARCH64_ABS16";
      break;
    case 0x104u:
      result = "R_AARCH64_PREL64";
      break;
    case 0x105u:
      result = "R_AARCH64_PREL32";
      break;
    case 0x106u:
      result = "R_AARCH64_PREL16";
      break;
    case 0x107u:
      result = "R_AARCH64_MOVW_UABS_G0";
      break;
    case 0x108u:
      result = "R_AARCH64_MOVW_UABS_G0_NC";
      break;
    case 0x109u:
      result = "R_AARCH64_MOVW_UABS_G1";
      break;
    case 0x10Au:
      result = "R_AARCH64_MOVW_UABS_G1_NC";
      break;
    case 0x10Bu:
      result = "R_AARCH64_MOVW_UABS_G2";
      break;
    case 0x10Cu:
      result = "R_AARCH64_MOVW_UABS_G2_NC";
      break;
    case 0x10Du:
      result = "R_AARCH64_MOVW_UABS_G3";
      break;
    case 0x10Eu:
      result = "R_AARCH64_MOVW_SABS_G0";
      break;
    case 0x10Fu:
      result = "R_AARCH64_MOVW_SABS_G1";
      break;
    case 0x110u:
      result = "R_AARCH64_MOVW_SABS_G2";
      break;
    case 0x111u:
      result = "R_AARCH64_LD_PREL_LO19";
      break;
    case 0x112u:
      result = "R_AARCH64_ADR_PREL_LO21";
      break;
    case 0x113u:
      result = "R_AARCH64_ADR_PREL_PG_HI21";
      break;
    case 0x114u:
      result = "R_AARCH64_ADR_PREL_PG_HI21_NC";
      break;
    case 0x115u:
      result = "R_AARCH64_ADD_ABS_LO12_NC";
      break;
    case 0x116u:
      result = "R_AARCH64_LDST8_ABS_LO12_NC";
      break;
    case 0x117u:
      result = "R_AARCH64_TSTBR14";
      break;
    case 0x118u:
      result = "R_AARCH64_CONDBR19";
      break;
    case 0x11Au:
      result = "R_AARCH64_JUMP26";
      break;
    case 0x11Bu:
      result = "R_AARCH64_CALL26";
      break;
    case 0x11Cu:
      result = "R_AARCH64_LDST16_ABS_LO12_NC";
      break;
    case 0x11Du:
      result = "R_AARCH64_LDST32_ABS_LO12_NC";
      break;
    case 0x11Eu:
      result = "R_AARCH64_LDST64_ABS_LO12_NC";
      break;
    case 0x11Fu:
      result = "R_AARCH64_MOVW_PREL_G0";
      break;
    case 0x120u:
      result = "R_AARCH64_MOVW_PREL_G0_NC";
      break;
    case 0x121u:
      result = "R_AARCH64_MOVW_PREL_G1";
      break;
    case 0x122u:
      result = "R_AARCH64_MOVW_PREL_G1_NC";
      break;
    case 0x123u:
      result = "R_AARCH64_MOVW_PREL_G2";
      break;
    case 0x124u:
      result = "R_AARCH64_MOVW_PREL_G2_NC";
      break;
    case 0x125u:
      result = "R_AARCH64_MOVW_PREL_G3";
      break;
    case 0x12Bu:
      result = "R_AARCH64_LDST128_ABS_LO12_NC";
      break;
    case 0x12Cu:
      result = "R_AARCH64_MOVW_GOTOFF_G0";
      break;
    case 0x12Du:
      result = "R_AARCH64_MOVW_GOTOFF_G0_NC";
      break;
    case 0x12Eu:
      result = "R_AARCH64_MOVW_GOTOFF_G1";
      break;
    case 0x12Fu:
      result = "R_AARCH64_MOVW_GOTOFF_G1_NC";
      break;
    case 0x130u:
      result = "R_AARCH64_MOVW_GOTOFF_G2";
      break;
    case 0x131u:
      result = "R_AARCH64_MOVW_GOTOFF_G2_NC";
      break;
    case 0x132u:
      result = "R_AARCH64_MOVW_GOTOFF_G3";
      break;
    case 0x133u:
      result = "R_AARCH64_GOTREL64";
      break;
    case 0x134u:
      result = "R_AARCH64_GOTREL32";
      break;
    case 0x135u:
      result = "R_AARCH64_GOT_LD_PREL19";
      break;
    case 0x136u:
      result = "R_AARCH64_LD64_GOTOFF_LO15";
      break;
    case 0x137u:
      result = "R_AARCH64_ADR_GOT_PAGE";
      break;
    case 0x138u:
      result = "R_AARCH64_LD64_GOT_LO12_NC";
      break;
    case 0x139u:
      result = "R_AARCH64_LD64_GOTPAGE_LO15";
      break;
    case 0x13Au:
      result = "R_AARCH64_PLT32";
      break;
    default:
      switch(a2)
      {
        case 0x200u:
          result = "R_AARCH64_TLSGD_ADR_PREL21";
          break;
        case 0x201u:
          result = "R_AARCH64_TLSGD_ADR_PAGE21";
          break;
        case 0x202u:
          result = "R_AARCH64_TLSGD_ADD_LO12_NC";
          break;
        case 0x203u:
          result = "R_AARCH64_TLSGD_MOVW_G1";
          break;
        case 0x204u:
          result = "R_AARCH64_TLSGD_MOVW_G0_NC";
          break;
        case 0x205u:
          result = "R_AARCH64_TLSLD_ADR_PREL21";
          break;
        case 0x206u:
          result = "R_AARCH64_TLSLD_ADR_PAGE21";
          break;
        case 0x207u:
          result = "R_AARCH64_TLSLD_ADD_LO12_NC";
          break;
        case 0x208u:
          result = "R_AARCH64_TLSLD_MOVW_G1";
          break;
        case 0x209u:
          result = "R_AARCH64_TLSLD_MOVW_G0_NC";
          break;
        case 0x20Au:
          result = "R_AARCH64_TLSLD_LD_PREL19";
          break;
        case 0x20Bu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G2";
          break;
        case 0x20Cu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1";
          break;
        case 0x20Du:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC";
          break;
        case 0x20Eu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0";
          break;
        case 0x20Fu:
          result = "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC";
          break;
        case 0x210u:
          result = "R_AARCH64_TLSLD_ADD_DTPREL_HI12";
          break;
        case 0x211u:
          result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12";
          break;
        case 0x212u:
          result = "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC";
          break;
        case 0x213u:
          result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12";
          break;
        case 0x214u:
          result = "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC";
          break;
        case 0x215u:
          result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12";
          break;
        case 0x216u:
          result = "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC";
          break;
        case 0x217u:
          result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12";
          break;
        case 0x218u:
          result = "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC";
          break;
        case 0x219u:
          result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12";
          break;
        case 0x21Au:
          result = "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC";
          break;
        case 0x21Bu:
          result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1";
          break;
        case 0x21Cu:
          result = "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC";
          break;
        case 0x21Du:
          result = "R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21";
          break;
        case 0x21Eu:
          result = "R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC";
          break;
        case 0x21Fu:
          result = "R_AARCH64_TLSIE_LD_GOTTPREL_PREL19";
          break;
        case 0x220u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G2";
          break;
        case 0x221u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G1";
          break;
        case 0x222u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC";
          break;
        case 0x223u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G0";
          break;
        case 0x224u:
          result = "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC";
          break;
        case 0x225u:
          result = "R_AARCH64_TLSLE_ADD_TPREL_HI12";
          break;
        case 0x226u:
          result = "R_AARCH64_TLSLE_ADD_TPREL_LO12";
          break;
        case 0x227u:
          result = "R_AARCH64_TLSLE_ADD_TPREL_LO12_NC";
          break;
        case 0x228u:
          result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12";
          break;
        case 0x229u:
          result = "R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC";
          break;
        case 0x22Au:
          result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12";
          break;
        case 0x22Bu:
          result = "R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC";
          break;
        case 0x22Cu:
          result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12";
          break;
        case 0x22Du:
          result = "R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC";
          break;
        case 0x22Eu:
          result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12";
          break;
        case 0x22Fu:
          result = "R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC";
          break;
        case 0x230u:
          result = "R_AARCH64_TLSDESC_LD_PREL19";
          break;
        case 0x231u:
          result = "R_AARCH64_TLSDESC_ADR_PREL21";
          break;
        case 0x232u:
          result = "R_AARCH64_TLSDESC_ADR_PAGE21";
          break;
        case 0x233u:
          result = "R_AARCH64_TLSDESC_LD64_LO12";
          break;
        case 0x234u:
          result = "R_AARCH64_TLSDESC_ADD_LO12";
          break;
        case 0x235u:
          result = "R_AARCH64_TLSDESC_OFF_G1";
          break;
        case 0x236u:
          result = "R_AARCH64_TLSDESC_OFF_G0_NC";
          break;
        case 0x237u:
          result = "R_AARCH64_TLSDESC_LDR";
          break;
        case 0x238u:
          result = "R_AARCH64_TLSDESC_ADD";
          break;
        case 0x239u:
          result = "R_AARCH64_TLSDESC_CALL";
          break;
        case 0x23Au:
          result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12";
          break;
        case 0x23Bu:
          result = "R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC";
          break;
        case 0x23Cu:
          result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12";
          break;
        case 0x23Du:
          result = "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC";
          break;
        default:
          switch(a2)
          {
            case 0x400u:
              result = "R_AARCH64_COPY";
              break;
            case 0x401u:
              result = "R_AARCH64_GLOB_DAT";
              break;
            case 0x402u:
              result = "R_AARCH64_JUMP_SLOT";
              break;
            case 0x403u:
              result = "R_AARCH64_RELATIVE";
              break;
            case 0x404u:
              result = "R_AARCH64_TLS_DTPMOD64";
              break;
            case 0x405u:
              result = "R_AARCH64_TLS_DTPREL64";
              break;
            case 0x406u:
              result = "R_AARCH64_TLS_TPREL64";
              break;
            case 0x407u:
              result = "R_AARCH64_TLSDESC";
              break;
            case 0x408u:
              result = "R_AARCH64_IRELATIVE";
              break;
            default:
              return "Unknown";
          }
          break;
      }
      break;
  }
  return result;
}

const char *llvm::object::getELFSectionTypeName(llvm::object *this, int a2)
{
  const char *result;

  if ((int)this <= 61)
  {
    if ((_DWORD)this == 8 || (_DWORD)this == 10)
    {
      if (a2 > 1879048221)
      {
        if (a2 == 1879048222)
          return "SHT_MIPS_DWARF";
        if (a2 == 1879048234)
          return "SHT_MIPS_ABIFLAGS";
      }
      else
      {
        if (a2 == 1879048198)
          return "SHT_MIPS_REGINFO";
        if (a2 == 1879048205)
          return "SHT_MIPS_OPTIONS";
      }
    }
    else if ((_DWORD)this == 40 && (a2 - 1879048193) < 5)
    {
      return off_251C1B148[a2 - 1879048193];
    }
  }
  else if ((int)this > 163)
  {
    if ((_DWORD)this == 164)
    {
      if (a2 == 1879048192)
        return "SHT_HEX_ORDERED";
    }
    else if ((_DWORD)this == 243 && a2 == 1879048195)
    {
      return "SHT_RISCV_ATTRIBUTES";
    }
  }
  else if ((_DWORD)this == 62)
  {
    if (a2 == 1879048193)
      return "SHT_X86_64_UNWIND";
  }
  else if ((_DWORD)this == 105 && a2 == 1879048195)
  {
    return "SHT_MSP430_ATTRIBUTES";
  }
  if (a2 > 1879002111)
  {
    switch(a2)
    {
      case 1879002112:
        result = "SHT_LLVM_ODRTAB";
        break;
      case 1879002113:
        result = "SHT_LLVM_LINKER_OPTIONS";
        break;
      case 1879002114:
LABEL_60:
        result = "Unknown";
        break;
      case 1879002115:
        result = "SHT_LLVM_ADDRSIG";
        break;
      case 1879002116:
        result = "SHT_LLVM_DEPENDENT_LIBRARIES";
        break;
      case 1879002117:
        result = "SHT_LLVM_SYMPART";
        break;
      case 1879002118:
        result = "SHT_LLVM_PART_EHDR";
        break;
      case 1879002119:
        result = "SHT_LLVM_PART_PHDR";
        break;
      case 1879002120:
        result = "SHT_LLVM_BB_ADDR_MAP_V0";
        break;
      case 1879002121:
        result = "SHT_LLVM_CALL_GRAPH_PROFILE";
        break;
      case 1879002122:
        result = "SHT_LLVM_BB_ADDR_MAP";
        break;
      case 1879002123:
        result = "SHT_LLVM_OFFLOADING";
        break;
      default:
        switch(a2)
        {
          case 1879048181:
            result = "SHT_GNU_ATTRIBUTES";
            break;
          case 1879048182:
            result = "SHT_GNU_HASH";
            break;
          case 1879048183:
          case 1879048184:
          case 1879048185:
          case 1879048186:
          case 1879048187:
          case 1879048188:
            goto LABEL_60;
          case 1879048189:
            result = "SHT_GNU_verdef";
            break;
          case 1879048190:
            result = "SHT_GNU_verneed";
            break;
          case 1879048191:
            result = "SHT_GNU_versym";
            break;
          default:
            if (a2 != 1879047936)
              goto LABEL_60;
            result = "SHT_ANDROID_RELR";
            break;
        }
        break;
    }
  }
  else
  {
    result = "SHT_NULL";
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        return "SHT_PROGBITS";
      case 2:
        return "SHT_SYMTAB";
      case 3:
        return "SHT_STRTAB";
      case 4:
        return "SHT_RELA";
      case 5:
        return "SHT_HASH";
      case 6:
        return "SHT_DYNAMIC";
      case 7:
        return "SHT_NOTE";
      case 8:
        return "SHT_NOBITS";
      case 9:
        return "SHT_REL";
      case 10:
        return "SHT_SHLIB";
      case 11:
        return "SHT_DYNSYM";
      case 12:
      case 13:
        goto LABEL_60;
      case 14:
        return "SHT_INIT_ARRAY";
      case 15:
        return "SHT_FINI_ARRAY";
      case 16:
        return "SHT_PREINIT_ARRAY";
      case 17:
        return "SHT_GROUP";
      case 18:
        return "SHT_SYMTAB_SHNDX";
      case 19:
        return "SHT_RELR";
      default:
        if (a2 == 1610612737)
        {
          result = "SHT_ANDROID_REL";
        }
        else
        {
          if (a2 != 1610612738)
            goto LABEL_60;
          result = "SHT_ANDROID_RELA";
        }
        break;
    }
  }
  return result;
}

void llvm::object::ObjectFile::createELFObjectFile(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  llvm::formatv_object_base *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  llvm::formatv_object_base *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  llvm::formatv_object_base *v21[4];
  __int16 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a1 + 1) > 0xFuLL)
  {
    v4 = *(_WORD *)(*(_QWORD *)a1 + 4);
    if ((*(_QWORD *)a1 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v4 = 0;
    if ((*(_QWORD *)a1 & 1) != 0)
    {
LABEL_3:
      v21[0] = (llvm::formatv_object_base *)"Insufficient alignment";
      v22 = 259;
      LODWORD(v19) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v21, (unsigned int *)&v19, &v18);
      *(_BYTE *)(a3 + 8) |= 1u;
      v5 = v18;
LABEL_26:
      *(_QWORD *)a3 = v5;
      return;
    }
  }
  if (v4 == 2)
  {
    v9 = HIBYTE(v4);
    if (v9 == 2)
    {
      v12 = a1[1];
      v19 = *a1;
      v20 = v12;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::create((uint64_t)&v19, a2, (uint64_t)v21);
      if ((v23 & 1) == 0 || (v8 = v21[0], v21[0] = 0, !v8))
      {
        v8 = (llvm::formatv_object_base *)operator new();
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,true>>::ELFObjectFile((uint64_t)v8, (uint64_t)v21);
        goto LABEL_28;
      }
    }
    else
    {
      if (v9 != 1)
      {
        v21[0] = (llvm::formatv_object_base *)"Invalid ELF data";
        v22 = 259;
        LODWORD(v19) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v21, (unsigned int *)&v19, &v16);
        *(_BYTE *)(a3 + 8) |= 1u;
        v5 = v16;
        goto LABEL_26;
      }
      v10 = a1[1];
      v19 = *a1;
      v20 = v10;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create((uint64_t)&v19, a2, (uint64_t)v21);
      if ((v23 & 1) == 0 || (v8 = v21[0], v21[0] = 0, !v8))
      {
        v8 = (llvm::formatv_object_base *)operator new();
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFObjectFile((uint64_t)v8, (uint64_t)v21);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (v4 != 1)
    {
      v21[0] = (llvm::formatv_object_base *)"Invalid ELF class";
      v22 = 259;
      LODWORD(v19) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v21, (unsigned int *)&v19, &v15);
      *(_BYTE *)(a3 + 8) |= 1u;
      v5 = v15;
      goto LABEL_26;
    }
    v6 = HIBYTE(v4);
    if (v6 == 2)
    {
      v11 = a1[1];
      v19 = *a1;
      v20 = v11;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::create((uint64_t)&v19, a2, (uint64_t)v21);
      if ((v23 & 1) == 0 || (v8 = v21[0], v21[0] = 0, !v8))
      {
        v8 = (llvm::formatv_object_base *)operator new();
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFObjectFile((uint64_t)v8, (uint64_t)v21);
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 != 1)
      {
        v21[0] = (llvm::formatv_object_base *)"Invalid ELF data";
        v22 = 259;
        LODWORD(v19) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v21, (unsigned int *)&v19, &v17);
        *(_BYTE *)(a3 + 8) |= 1u;
        v5 = v17;
        goto LABEL_26;
      }
      v7 = a1[1];
      v19 = *a1;
      v20 = v7;
      llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create((uint64_t)&v19, a2, (uint64_t)v21);
      if ((v23 & 1) == 0 || (v8 = v21[0], v21[0] = 0, !v8))
      {
        v8 = (llvm::formatv_object_base *)operator new();
        llvm::object::ELFObjectFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFObjectFile((uint64_t)v8, (uint64_t)v21);
LABEL_28:
        v14 = v21[0];
        if ((v23 & 1) != 0)
        {
          v21[0] = 0;
          if (v14)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v14 + 8))(v14);
        }
        else
        {
          (*(void (**)(llvm::formatv_object_base **))v21[0])(v21);
        }
        v13 = 0;
        goto LABEL_33;
      }
    }
  }
  v13 = 1;
LABEL_33:
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v13;
  *(_QWORD *)a3 = v8;
}

void llvm::object::ELFObjectFileBase::getFeatures(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  llvm::RISCVISAInfo *v5;
  int v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  _BOOL4 v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  void ***v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  int v32;
  char *v33;
  int v34;
  uint64_t *v35;
  int v36;
  char *v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  int v41;
  int v42;
  __int128 *v43;
  llvm::RISCVISAInfo *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  void **v65;
  llvm::RISCVISAInfo *v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 544))(this);
  if (v4 <= 242)
  {
    if (v4 == 8)
    {
      v47 = 0uLL;
      v48 = 0;
      llvm::SubtargetFeatures::Split((char **)&v47, (uint64_t)"", 0);
      v7 = (char *)&loc_24A8F6C14
         + 4
         * word_24AA31998[((*(unsigned int (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this) >> 28) ^ 8];
      __asm { BR              X10 }
    }
    if (v4 == 40)
    {
      v63 = 0uLL;
      v64 = 0;
      llvm::SubtargetFeatures::Split((char **)&v63, (uint64_t)"", 0);
      v48 = 5;
      v49 = 0u;
      v50 = 0u;
      v51 = 1065353216;
      v52 = 0u;
      v53 = 0u;
      v54 = 1065353216;
      v55 = 0;
      v56 = &tagData;
      v58 = 0;
      v59 = 0;
      v57 = 52;
      v60 = 1;
      v61 = 0;
      v62 = 0;
      *(_QWORD *)&v47 = &off_251C11EA0;
      *((_QWORD *)&v47 + 1) = "aeabi";
      (*(void (**)(llvm::RISCVISAInfo **__return_ptr, llvm::object::ELFObjectFileBase *, __int128 *))(*(_QWORD *)this + 512))(&v66, this, &v47);
      v5 = v66;
      if (v66)
      {
        v66 = 0;
        *(_QWORD *)&v45 = v5;
        llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v45);
        if ((_QWORD)v45)
          (*(void (**)(_QWORD))(*(_QWORD *)v45 + 8))(v45);
        v46 = 0;
        v45 = 0uLL;
        llvm::SubtargetFeatures::Split((char **)&v45, (uint64_t)"", 0);
        if (v66)
          (*(void (**)(llvm::RISCVISAInfo *))(*(_QWORD *)v66 + 8))(v66);
        goto LABEL_92;
      }
      v9 = v49;
      v10 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v49, *((unint64_t *)&v49 + 1), 6u);
      if (v10)
        v11 = *((_DWORD *)v10 + 5) == 10;
      else
        v11 = 0;
      v14 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v9, *((unint64_t *)&v9 + 1), 7u);
      if (v14)
      {
        v15 = *((_DWORD *)v14 + 5);
        if (v15 == 65)
        {
          v20 = "aclass";
          v21 = 6;
        }
        else
        {
          if (v15 == 77)
          {
            llvm::SubtargetFeatures::AddFeature((char **)&v63, "mclass", 6uLL, 1);
            if (!v11)
              goto LABEL_53;
          }
          else
          {
            if (v15 != 82)
              goto LABEL_53;
            llvm::SubtargetFeatures::AddFeature((char **)&v63, "rclass", 6uLL, 1);
            if (!v11)
              goto LABEL_53;
          }
          v20 = "hwdiv";
          v21 = 5;
        }
        llvm::SubtargetFeatures::AddFeature((char **)&v63, v20, v21, 1);
      }
LABEL_53:
      v23 = *((_QWORD *)&v49 + 1);
      v22 = v49;
      v24 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v49, *((unint64_t *)&v49 + 1), 9u);
      if (!v24)
        goto LABEL_59;
      v25 = *((_DWORD *)v24 + 5);
      if (v25 == 2)
      {
        v26 = 1;
      }
      else
      {
        if (v25)
          goto LABEL_59;
        llvm::SubtargetFeatures::AddFeature((char **)&v63, "thumb", 5uLL, 0);
        v26 = 0;
      }
      llvm::SubtargetFeatures::AddFeature((char **)&v63, "thumb2", 6uLL, v26);
      v23 = *((_QWORD *)&v49 + 1);
      v22 = v49;
LABEL_59:
      v27 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v22, v23, 0xAu);
      if (v27)
      {
        switch(*((_DWORD *)v27 + 5))
        {
          case 0:
            llvm::SubtargetFeatures::AddFeature((char **)&v63, "vfp2sp", 6uLL, 0);
            llvm::SubtargetFeatures::AddFeature((char **)&v63, "vfp3d16sp", 9uLL, 0);
            v28 = "vfp4d16sp";
            v29 = 9;
            v30 = 0;
            goto LABEL_66;
          case 2:
            v28 = "vfp2";
            goto LABEL_65;
          case 3:
          case 4:
            v28 = "vfp3";
            goto LABEL_65;
          case 5:
          case 6:
            v28 = "vfp4";
LABEL_65:
            v29 = 4;
            v30 = 1;
LABEL_66:
            llvm::SubtargetFeatures::AddFeature((char **)&v63, v28, v29, v30);
            break;
          default:
            break;
        }
      }
      v31 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v49, *((unint64_t *)&v49 + 1), 0xCu);
      if (!v31)
      {
LABEL_76:
        v35 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v49, *((unint64_t *)&v49 + 1), 0x30u);
        if (!v35)
          goto LABEL_85;
        v36 = *((_DWORD *)v35 + 5);
        if (v36 == 2)
        {
          v37 = "mve.fp";
          v38 = 6;
        }
        else
        {
          if (v36 != 1)
          {
            if (v36)
              goto LABEL_85;
            llvm::SubtargetFeatures::AddFeature((char **)&v63, "mve", 3uLL, 0);
            v37 = "mve.fp";
            v38 = 6;
            v39 = 0;
LABEL_84:
            llvm::SubtargetFeatures::AddFeature((char **)&v63, v37, v38, v39);
LABEL_85:
            v40 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v49, *((unint64_t *)&v49 + 1), 0x2Cu);
            if (v40)
            {
              v41 = *((_DWORD *)v40 + 5);
              if (v41 == 1)
              {
                v42 = 0;
                goto LABEL_90;
              }
              if (v41 == 2)
              {
                v42 = 1;
LABEL_90:
                llvm::SubtargetFeatures::AddFeature((char **)&v63, "hwdiv", 5uLL, v42);
                llvm::SubtargetFeatures::AddFeature((char **)&v63, "hwdiv-arm", 9uLL, v42);
              }
            }
            v45 = v63;
            v46 = v64;
            v64 = 0;
            v63 = 0uLL;
LABEL_92:
            llvm::ELFAttributeParser::~ELFAttributeParser((llvm::ELFAttributeParser *)&v47);
            *(_QWORD *)&v47 = &v63;
            std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v47);
            *(_BYTE *)(a2 + 24) &= ~1u;
            *(_OWORD *)a2 = v45;
            *(_QWORD *)(a2 + 16) = v46;
            v45 = 0uLL;
            v46 = 0;
            v43 = &v45;
            goto LABEL_97;
          }
          llvm::SubtargetFeatures::AddFeature((char **)&v63, "mve.fp", 6uLL, 0);
          v37 = "mve";
          v38 = 3;
        }
        v39 = 1;
        goto LABEL_84;
      }
      v32 = *((_DWORD *)v31 + 5);
      if (v32 == 2)
      {
        llvm::SubtargetFeatures::AddFeature((char **)&v63, "neon", 4uLL, 1);
        v33 = "fp16";
      }
      else
      {
        if (v32 != 1)
        {
          if (v32)
            goto LABEL_76;
          llvm::SubtargetFeatures::AddFeature((char **)&v63, "neon", 4uLL, 0);
          v33 = "fp16";
          v34 = 0;
          goto LABEL_75;
        }
        v33 = "neon";
      }
      v34 = 1;
LABEL_75:
      llvm::SubtargetFeatures::AddFeature((char **)&v63, v33, 4uLL, v34);
      goto LABEL_76;
    }
    goto LABEL_15;
  }
  if (v4 != 243)
  {
    if (v4 != 258)
    {
LABEL_15:
      v47 = 0uLL;
      v48 = 0;
      llvm::SubtargetFeatures::Split((char **)&v47, (uint64_t)"", 0);
      *(_BYTE *)(a2 + 24) &= ~1u;
      *(_OWORD *)a2 = v47;
      *(_QWORD *)(a2 + 16) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_QWORD *)&v63 = &v47;
LABEL_48:
      v19 = (void ***)&v63;
      goto LABEL_98;
    }
    v47 = 0uLL;
    v48 = 0;
    llvm::SubtargetFeatures::Split((char **)&v47, (uint64_t)"", 0);
    v6 = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this) & 7;
    if (v6 != 2)
    {
      if (v6 != 3)
      {
LABEL_47:
        *(_BYTE *)(a2 + 24) &= ~1u;
        *(_OWORD *)a2 = v47;
        *(_QWORD *)(a2 + 16) = v48;
        v47 = 0uLL;
        v48 = 0;
        *(_QWORD *)&v63 = &v47;
        goto LABEL_48;
      }
      llvm::SubtargetFeatures::AddFeature((char **)&v47, "d", 1uLL, 1);
    }
    llvm::SubtargetFeatures::AddFeature((char **)&v47, "f", 1uLL, 1);
    goto LABEL_47;
  }
  v63 = 0uLL;
  v64 = 0;
  llvm::SubtargetFeatures::Split((char **)&v63, (uint64_t)"", 0);
  if (((*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this) & 1) != 0)
    llvm::SubtargetFeatures::AddFeature((char **)&v63, "c", 1uLL, 1);
  v48 = 5;
  v49 = 0u;
  v50 = 0u;
  v51 = 1065353216;
  v52 = 0u;
  v53 = 0u;
  v54 = 1065353216;
  v55 = 0;
  v56 = &tagData;
  v58 = 0;
  v59 = 0;
  v57 = 6;
  v60 = 1;
  v61 = 0;
  v62 = 0;
  *(_QWORD *)&v47 = &off_251C12EB0;
  *((_QWORD *)&v47 + 1) = "riscv";
  (*(void (**)(__int128 *__return_ptr, llvm::object::ELFObjectFileBase *, __int128 *))(*(_QWORD *)this + 512))(&v45, this, &v47);
  v8 = v45;
  if ((_QWORD)v45)
  {
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v8;
    goto LABEL_96;
  }
  if (!*((_QWORD *)&v52 + 1))
    goto LABEL_95;
  v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v52 + 8));
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = 5;
    if (*((_QWORD *)&v52 + 1) <= 5uLL)
      v13 = 5u % BYTE8(v52);
  }
  else
  {
    v13 = (DWORD2(v52) - 1) & 5;
  }
  v16 = *(uint64_t ***)(v52 + 8 * v13);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_95:
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_OWORD *)a2 = v63;
    *(_QWORD *)(a2 + 16) = v64;
    v63 = 0uLL;
    v64 = 0;
    goto LABEL_96;
  }
  while (1)
  {
    v18 = v17[1];
    if (v18 == 5)
      break;
    if (v12.u32[0] > 1uLL)
    {
      if (v18 >= *((_QWORD *)&v52 + 1))
        v18 %= *((_QWORD *)&v52 + 1);
    }
    else
    {
      v18 &= *((_QWORD *)&v52 + 1) - 1;
    }
    if (v18 != v13)
      goto LABEL_95;
LABEL_45:
    v17 = (uint64_t *)*v17;
    if (!v17)
      goto LABEL_95;
  }
  if (*((_DWORD *)v17 + 4) != 5)
    goto LABEL_45;
  llvm::RISCVISAInfo::parseNormalizedArchString(v17[3], v17[4], (uint64_t)&v66);
  v44 = v66;
  if ((v67 & 1) == 0)
  {
    llvm::SubtargetFeatures::AddFeature((char **)&v63, "64bit", 5uLL, *(_DWORD *)v66 != 32);
    llvm::RISCVISAInfo::toFeatureVector(v66, (std::string **)&v45);
    std::vector<std::string>::__insert_with_size[abi:nn180100]<std::string const*,std::string const*>((std::string **)&v63, *((uint64_t *)&v63 + 1), (std::string *)v45, *((std::string **)&v45 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v45 + 1) - v45) >> 3));
    v65 = (void **)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v65);
    llvm::Expected<std::unique_ptr<llvm::RISCVISAInfo>>::~Expected((uint64_t)&v66);
    goto LABEL_95;
  }
  v66 = 0;
  *(_BYTE *)(a2 + 24) |= 1u;
  *(_QWORD *)a2 = v44;
  llvm::Expected<std::unique_ptr<llvm::RISCVISAInfo>>::~Expected((uint64_t)&v66);
LABEL_96:
  llvm::ELFAttributeParser::~ELFAttributeParser((llvm::ELFAttributeParser *)&v47);
  v43 = &v63;
LABEL_97:
  *(_QWORD *)&v47 = v43;
  v19 = (void ***)&v47;
LABEL_98:
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v19);
}

uint64_t llvm::object::ELFObjectFileBase::tryGetCPUName@<X0>(llvm::object::ELFObjectFileBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char *v5;
  char v6;

  result = (*(uint64_t (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 544))(this);
  if ((_DWORD)result == 21)
  {
    *(_QWORD *)a2 = "future";
    *(_QWORD *)(a2 + 8) = 6;
    v6 = 1;
  }
  else
  {
    if ((_DWORD)result == 224)
    {
      v5 = (char *)&loc_24A8F73E8
         + 4
         * byte_24AA319B8[(*(unsigned __int8 (**)(llvm::object::ELFObjectFileBase *))(*(_QWORD *)this + 528))(this)
                        - 1];
      __asm { BR              X12 }
    }
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

void sub_24A8F7424()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7430()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F743C()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7448()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7454()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7460()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F746C()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7478()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7484()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7490()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F749C()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F74B8()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F74C4()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F74D0()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F74DC()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F74E8()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F74F4()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7500()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F750C()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7518()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7524()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7530()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F753C()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7548()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7554()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7560()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F756C()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7588()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7594()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75A0()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75AC()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75B8()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75C4()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75D0()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75DC()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F75E8()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F75F4()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7600()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F760C()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7618()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7624()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7630()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F763C()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7648()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7654()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7660()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F766C()
{
  JUMPOUT(0x24A8F73FCLL);
}

void sub_24A8F7678()
{
  JUMPOUT(0x24A8F7400);
}

void sub_24A8F7684()
{
  JUMPOUT(0x24A8F7400);
}

void llvm::object::ELFObjectFileBase::setARMSubArch(llvm::object::ELFObjectFileBase *this, llvm::Triple *a2)
{
  std::string::size_type v4;
  const char *v5;
  __int128 v6;
  uint64_t *v7;
  const std::string::value_type *v8;
  uint64_t *v9;
  unsigned int v10;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  std::string::size_type v14;
  _QWORD v15[3];
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  if (!*((_DWORD *)a2 + 7))
  {
    v15[2] = 5;
    v16 = 0u;
    v17 = 0u;
    v18 = 1065353216;
    v19 = 0u;
    v20 = 0u;
    v21 = 1065353216;
    v22 = 0;
    v23 = &tagData;
    v25 = 0;
    v26 = 0;
    v24 = 52;
    v27 = 1;
    v28 = 0;
    v29 = 0;
    v15[0] = &off_251C11EA0;
    v15[1] = "aeabi";
    (*(void (**)(std::string::size_type *__return_ptr, llvm::object::ELFObjectFileBase *, _QWORD *))(*(_QWORD *)this + 512))(&v14, this, v15);
    v4 = v14;
    if (v14)
    {
      v14 = 0;
      __p.__r_.__value_.__r.__words[0] = v4;
      llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&__p);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
      if (v14)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v14 + 8))(v14);
    }
    else
    {
      memset(&__p, 0, sizeof(__p));
      if ((*((_DWORD *)a2 + 6) - 35) >= 2)
        v5 = "arm";
      else
        v5 = "thumb";
      MEMORY[0x24BD1B104](&__p, v5);
      v6 = v16;
      v7 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v16, *((unint64_t *)&v16 + 1), 6u);
      if (v7)
      {
        v8 = "v4";
        switch(*((_DWORD *)v7 + 5))
        {
          case 1:
            goto LABEL_33;
          case 2:
            v8 = "v4t";
            goto LABEL_33;
          case 3:
            v8 = "v5t";
            goto LABEL_33;
          case 4:
            v8 = "v5te";
            goto LABEL_33;
          case 5:
            v8 = "v5tej";
            goto LABEL_33;
          case 6:
            v8 = "v6";
            goto LABEL_33;
          case 7:
            v8 = "v6kz";
            goto LABEL_33;
          case 8:
            v8 = "v6t2";
            goto LABEL_33;
          case 9:
            v8 = "v6k";
            goto LABEL_33;
          case 0xA:
            v9 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(v6, *((unint64_t *)&v6 + 1), 7u);
            if (v9 && *((_DWORD *)v9 + 5) == 77)
              v8 = "v7m";
            else
              v8 = "v7";
            goto LABEL_33;
          case 0xB:
            v8 = "v6m";
            goto LABEL_33;
          case 0xC:
            v8 = "v6sm";
            goto LABEL_33;
          case 0xD:
            v8 = "v7em";
            goto LABEL_33;
          case 0xE:
            v8 = "v8a";
            goto LABEL_33;
          case 0xF:
            v8 = "v8r";
            goto LABEL_33;
          case 0x10:
            v8 = "v8m.base";
            goto LABEL_33;
          case 0x11:
            v8 = "v8m.main";
            goto LABEL_33;
          case 0x15:
            v8 = "v8.1m.main";
            goto LABEL_33;
          case 0x16:
            v8 = "v9a";
LABEL_33:
            std::string::append(&__p, v8);
            break;
          default:
            break;
        }
      }
      v10 = *((_DWORD *)this + 2);
      if (v10 <= 0x14 && ((1 << v10) & 0x155800) != 0)
        std::string::append(&__p, "eb");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      llvm::Triple::setArchName(a2, p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    llvm::ELFAttributeParser::~ELFAttributeParser((llvm::ELFAttributeParser *)v15);
  }
}

_QWORD *llvm::object::ObjectFile::getStartAddress@<X0>(llvm::object::ObjectFile *this@<X0>, uint64_t a2@<X8>)
{
  _UNKNOWN **v3;
  _QWORD *result;

  v3 = llvm::object::object_category(this);
  result = (_QWORD *)operator new();
  *result = &off_251C12820;
  result[1] = 3;
  result[2] = v3;
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::RISCVISAInfo>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::unique_ptr<llvm::RISCVISAInfo>::reset[abi:nn180100]((uint64_t *)a1, 0);
  }
  return a1;
}

llvm::object::GenericBinaryError *llvm::object::GenericBinaryError::GenericBinaryError(llvm::object::GenericBinaryError *this, llvm::formatv_object_base **a2)
{
  llvm::object *v4;

  *(_QWORD *)this = &off_251C12820;
  *((_DWORD *)this + 2) = 0;
  v4 = (llvm::object *)std::system_category();
  *((_QWORD *)this + 2) = v4;
  *(_QWORD *)this = &off_251C1B218;
  llvm::object::object_category(v4);
  *((_QWORD *)this + 1) = 3;
  *((_QWORD *)this + 2) = &llvm::object::object_category(void)::error_category;
  *(_QWORD *)this = off_251C1B180;
  llvm::Twine::str(a2, (std::string *)this + 1);
  return this;
}

uint64_t llvm::object::GenericBinaryError::GenericBinaryError(uint64_t a1, llvm::formatv_object_base **a2, unsigned int a3)
{
  llvm::object *v6;
  llvm::object *v7;

  *(_QWORD *)a1 = &off_251C12820;
  *(_DWORD *)(a1 + 8) = 0;
  v6 = (llvm::object *)std::system_category();
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = &off_251C1B218;
  llvm::object::object_category(v6);
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 16) = &llvm::object::object_category(void)::error_category;
  *(_QWORD *)a1 = off_251C1B180;
  llvm::Twine::str(a2, (std::string *)(a1 + 24));
  llvm::object::object_category(v7);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = &llvm::object::object_category(void)::error_category;
  return a1;
}

llvm::raw_ostream *llvm::object::GenericBinaryError::log(llvm::object::GenericBinaryError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  size_t v8;

  v5 = (const char *)*((_QWORD *)this + 3);
  v3 = (char *)this + 24;
  v4 = v5;
  v6 = v3[23];
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = v3[23];
  else
    v8 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v7, v8);
}

_UNKNOWN **llvm::object::object_category(llvm::object *this)
{
  unsigned __int8 v1;

  {
  }
  return &llvm::object::object_category(void)::error_category;
}

void llvm::object::BinaryError::~BinaryError(llvm::object::BinaryError *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::object::BinaryError,llvm::ECError>::dynamicClassID()
{
  return &llvm::object::BinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::BinaryError,llvm::ECError>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::BinaryError::ID || v3;
}

void llvm::object::GenericBinaryError::~GenericBinaryError(void **this)
{
  *this = off_251C1B180;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_251C1B180;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::object::GenericBinaryError,llvm::object::BinaryError>::dynamicClassID()
{
  return &llvm::object::GenericBinaryError::ID;
}

uint64_t llvm::ErrorInfo<llvm::object::GenericBinaryError,llvm::object::BinaryError>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
  return a2 == &llvm::object::GenericBinaryError::ID || a2 == &llvm::object::BinaryError::ID || v3;
}

void `anonymous namespace'::_object_error_category::~_object_error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24BD1B3A4);
}

const char *`anonymous namespace'::_object_error_category::name(_anonymous_namespace_::_object_error_category *this)
{
  return "llvm.object";
}

_QWORD *`anonymous namespace'::_object_error_category::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, off_251C1B258[a1 - 1]);
}

void llvm::object::IRObjectFile::~IRObjectFile(llvm::object::IRObjectFile *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_251C1B2B0;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 25), 8);
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  llvm::SpecificBumpPtrAllocator<std::pair<std::string,unsigned int>>::DestroyAll((uint64_t)this + 80);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 80);
  v3 = (void **)((char *)this + 48);
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

{
  llvm::object::IRObjectFile::~IRObjectFile(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::IRObjectFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  *a2 += 8;
}

void llvm::object::IRObjectFile::printSymbolName(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::ModuleSymbolTable::printSymbolName(a1 + 72, a2, *a3);
  *a4 = 0;
}

uint64_t llvm::object::IRObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = llvm::ModuleSymbolTable::getSymbolFlags(a1 + 72, *a2);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = result;
  return result;
}

uint64_t llvm::object::IRObjectFile::symbol_begin(llvm::object::IRObjectFile *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t llvm::object::IRObjectFile::symbol_end(llvm::object::IRObjectFile *this)
{
  return *((_QWORD *)this + 23);
}

__n128 llvm::object::IRObjectFile::findBitcodeInObject@<Q0>(__n128 *this@<X0>, const llvm::object::ObjectFile *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::object *v8;
  uint64_t v9;
  llvm::object *v11;
  uint64_t v12;
  __n128 result;
  unint64_t v15;
  unint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = (*(uint64_t (**)(__n128 *, const llvm::object::ObjectFile *))(this->n128_u64[0] + 352))(this, a2);
  v7 = v6;
  v8 = (llvm::object *)(*(uint64_t (**)(__n128 *))(this->n128_u64[0] + 360))(this);
  v19 = v5;
  v20 = v7;
  if (v7 == v9 && v5 == (_QWORD)v8)
    goto LABEL_15;
  v11 = v8;
  v12 = v9;
  while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, v5))
  {
    v8 = (llvm::object *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 136))(v20, &v19);
    v5 = v19;
    v7 = v20;
    if (v20 == v12 && v19 == (_QWORD)v11)
      goto LABEL_15;
  }
  v8 = (llvm::object *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v20 + 176))(&v21, v20, v19);
  v15 = v21;
  if ((v23 & 1) != 0)
  {
    a3[2].n128_u8[0] |= 1u;
    a3->n128_u64[0] = v15;
    return result;
  }
  v16 = v22;
  if (v22 <= 1)
  {
LABEL_15:
    v17 = llvm::object::object_category(v8);
    v18 = (_QWORD *)operator new();
    *v18 = &off_251C12820;
    v18[1] = 7;
    v18[2] = v17;
    a3[2].n128_u8[0] |= 1u;
    a3->n128_u64[0] = (unint64_t)v18;
  }
  else
  {
    a3[2].n128_u8[0] &= ~1u;
    a3->n128_u64[0] = v15;
    a3->n128_u64[1] = v16;
    result = this[2];
    a3[1] = result;
  }
  return result;
}

__n128 *llvm::object::IRObjectFile::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  const llvm::object::ObjectFile *v8;
  __n128 *result;
  __n128 BitcodeInObject;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  llvm::Module **v37;
  __int128 v38;
  llvm::Module **v39;
  llvm::Module *v40;
  __int128 *v41;
  _UNKNOWN **v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[3];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  __n128 v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 *v63;
  __int128 *v64;
  char v65;
  __n128 v66;
  __int128 v67;
  char v68;
  __n128 *v69;
  int64x2_t v70;
  char *v71;
  _OWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v53 = *(_OWORD *)(a1 + 16);
  v7 = llvm::identify_magic(v6, v5);
  if (v7 > 0x1E)
    goto LABEL_54;
  if (((1 << v7) & 0x41000210) != 0)
  {
    *(_QWORD *)&v47 = v6;
    *((_QWORD *)&v47 + 1) = v5;
    v48 = v53;
    llvm::object::ObjectFile::createObjectFile((uint64_t)&v47, v7);
    result = v69;
    if ((v70.i8[0] & 1) != 0)
    {
      v68 = -1;
      v66.n128_u64[0] = (unint64_t)v69;
    }
    else
    {
      BitcodeInObject = llvm::object::IRObjectFile::findBitcodeInObject(v69, v8, &v66);
      result = v69;
      v69 = 0;
      if (result)
        result = (__n128 *)(*(uint64_t (**)(__n128 *, __n128))(result->n128_u64[0] + 8))(result, BitcodeInObject);
    }
    if ((v68 & 1) != 0)
      goto LABEL_55;
    goto LABEL_11;
  }
  if ((_DWORD)v7 != 1)
  {
LABEL_54:
    v42 = llvm::object::object_category((llvm::object *)v7);
    result = (__n128 *)operator new();
    result->n128_u64[0] = (unint64_t)&off_251C12820;
    result->n128_u64[1] = 2;
    result[1].n128_u64[0] = (unint64_t)v42;
    v66.n128_u64[0] = (unint64_t)result;
LABEL_55:
    v43 = v66.n128_u64[0];
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v43;
    return result;
  }
  v68 = 0;
  v66.n128_u64[0] = (unint64_t)v6;
  v66.n128_u64[1] = v5;
  v67 = v53;
LABEL_11:
  v52[0] = v66;
  v52[1] = (__n128)v67;
  llvm::getBitcodeModuleList(v52, (uint64_t)&v63);
  if ((v65 & 1) != 0)
  {
    v41 = v63;
    v63 = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v41;
    return (__n128 *)llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v63);
  }
  memset(v51, 0, 24);
  v11 = v63;
  v12 = v64;
  if (v63 == v64)
  {
LABEL_49:
    v35 = operator new();
    v36 = v67;
    *(__n128 *)(v35 + 16) = v66;
    *(_OWORD *)(v35 + 32) = v36;
    v37 = *(llvm::Module ***)&v51[0];
    v38 = *(_OWORD *)((char *)v51 + 8);
    memset(v51, 0, 24);
    *(_DWORD *)(v35 + 8) = 3;
    *(_QWORD *)v35 = &off_251C1B2B0;
    *(_QWORD *)(v35 + 48) = v37;
    *(_OWORD *)(v35 + 56) = v38;
    v46[1] = 0;
    v46[2] = 0;
    *(_QWORD *)(v35 + 72) = 0;
    v46[0] = 0;
    *(_QWORD *)(v35 + 80) = 0;
    *(_QWORD *)(v35 + 88) = 0;
    *(_QWORD *)(v35 + 96) = v35 + 112;
    *(_QWORD *)(v35 + 104) = 0x400000000;
    *(_QWORD *)(v35 + 144) = v35 + 160;
    *(_OWORD *)(v35 + 152) = 0u;
    *(_OWORD *)(v35 + 168) = 0u;
    *(_OWORD *)(v35 + 184) = 0u;
    *(_OWORD *)(v35 + 200) = 0u;
    v39 = (llvm::Module **)v38;
    *(_DWORD *)(v35 + 216) = 0;
    while (v37 != v39)
    {
      v40 = *v37++;
      llvm::ModuleSymbolTable::addModule((llvm::ModuleSymbolTable *)(v35 + 72), v40);
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v35;
    *(_QWORD *)&v47 = v46;
    std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v47);
    goto LABEL_58;
  }
  while (1)
  {
    v47 = *v11;
    v48 = v11[1];
    v49 = v11[2];
    v50 = v11[3];
    v54 = 0u;
    v55 = 0u;
    memset(v56, 0, sizeof(v56));
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0;
    llvm::BitcodeModule::getLazyModule(&v47, a2, 1uLL, 0, &v54, (uint64_t)&v61);
    if (!(_BYTE)v60)
      goto LABEL_19;
    v13 = (__int128 *)*((_QWORD *)&v59 + 1);
    if (*((__int128 **)&v59 + 1) == &v58)
    {
      v13 = &v58;
      v14 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v59 + 1))
        goto LABEL_19;
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_19:
    if (!BYTE8(v57))
      goto LABEL_25;
    v15 = (_QWORD *)v57;
    if ((_BYTE *)v57 == &v56[8])
    {
      v15 = &v56[8];
      v16 = 4;
    }
    else
    {
      if (!(_QWORD)v57)
        goto LABEL_25;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_25:
    if (!v56[0])
      goto LABEL_31;
    v17 = (__int128 *)*((_QWORD *)&v55 + 1);
    if (*((__int128 **)&v55 + 1) == &v54)
    {
      v17 = &v54;
      v18 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v55 + 1))
        goto LABEL_31;
      v18 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_31:
    if ((v62 & 1) != 0)
      break;
    v19 = *((_QWORD *)&v51[0] + 1);
    if (*((_QWORD *)&v51[0] + 1) >= *(_QWORD *)&v51[1])
    {
      v21 = (uint64_t)(*((_QWORD *)&v51[0] + 1) - *(_QWORD *)&v51[0]) >> 3;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        abort();
      v23 = *(_QWORD *)&v51[1] - *(_QWORD *)&v51[0];
      if ((uint64_t)(*(_QWORD *)&v51[1] - *(_QWORD *)&v51[0]) >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      v72 = &v51[1];
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v51[1], v24);
      else
        v25 = 0;
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      v71 = v27;
      v28 = v61;
      v61 = 0;
      *(_QWORD *)v26 = v28;
      v29 = v26 + 8;
      v70.i64[1] = (uint64_t)(v26 + 8);
      v30 = (_QWORD *)*((_QWORD *)&v51[0] + 1);
      v31 = *(_QWORD **)&v51[0];
      if (*((_QWORD *)&v51[0] + 1) == *(_QWORD *)&v51[0])
      {
        v33 = vdupq_n_s64(*((unint64_t *)&v51[0] + 1));
      }
      else
      {
        do
        {
          v32 = *--v30;
          *v30 = 0;
          *((_QWORD *)v26 - 1) = v32;
          v26 -= 8;
        }
        while (v30 != v31);
        v33 = (int64x2_t)v51[0];
        v29 = (_QWORD *)v70.i64[1];
        v27 = v71;
      }
      *(_QWORD *)&v51[0] = v26;
      *((_QWORD *)&v51[0] + 1) = v29;
      v70 = v33;
      v34 = *(char **)&v51[1];
      *(_QWORD *)&v51[1] = v27;
      v71 = v34;
      v69 = (__n128 *)v33.i64[0];
      std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer((uint64_t)&v69);
      *((_QWORD *)&v51[0] + 1) = v29;
    }
    else
    {
      v20 = v61;
      v61 = 0;
      **((_QWORD **)&v51[0] + 1) = v20;
      *((_QWORD *)&v51[0] + 1) = v19 + 8;
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)&v61);
    v11 += 4;
    if (v11 == v12)
      goto LABEL_49;
  }
  v44 = v61;
  v61 = 0;
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v44;
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)&v61);
LABEL_58:
  *(_QWORD *)&v47 = v51;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v47);
  v45 = v68;
  result = (__n128 *)llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v63);
  if ((v45 & 1) != 0)
  {
    result = (__n128 *)v66.n128_u64[0];
    if (v66.n128_u64[0])
      return (__n128 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v66.n128_u64[0] + 8))(v66.n128_u64[0]);
  }
  return result;
}

BOOL llvm::object::IRObjectFile::is64Bit(llvm::object::IRObjectFile *this)
{
  uint64_t v1;
  uint64_t v2;
  llvm::formatv_object_base *v3;
  llvm::formatv_object_base *v4;
  int v5;
  llvm::formatv_object_base *v6;
  int v7;
  llvm::formatv_object_base *v9[4];
  __int16 v10;
  std::string __p;
  int v12;

  v1 = **((_QWORD **)this + 6);
  v4 = *(llvm::formatv_object_base **)(v1 + 208);
  v2 = v1 + 208;
  v3 = v4;
  v5 = *(char *)(v2 + 23);
  if (v5 >= 0)
    v3 = (llvm::formatv_object_base *)v2;
  v6 = *(llvm::formatv_object_base **)(v2 + 8);
  if (v5 >= 0)
    v6 = (llvm::formatv_object_base *)v5;
  v10 = 261;
  v9[0] = v3;
  v9[1] = v6;
  llvm::Triple::Triple(&__p, v9);
  v7 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return getArchPointerBitWidth(v7) == 64;
}

uint64_t llvm::SpecificBumpPtrAllocator<std::pair<std::string,unsigned int>>::DestroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t j;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; i <= v8; i += 32)
      {
        if (*(char *)(i - 9) < 0)
          operator delete(*(void **)(i - 32));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(a1 + 64);
    v12 = &v11[2 * v10];
    do
    {
      v13 = *v11 + v11[1];
      for (j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32; j <= v13; j += 32)
      {
        if (*(char *)(j - 9) < 0)
          operator delete(*(void **)(j - 32));
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

void std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  llvm::Module **v2;
  llvm::Module **v4;
  void *v5;

  v1 = *a1;
  v2 = (llvm::Module **)**a1;
  if (v2)
  {
    v4 = (llvm::Module **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::Module>::reset[abi:nn180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<llvm::Module>::reset[abi:nn180100]((llvm::Module **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::Expected<llvm::BitcodeFileContents>::~Expected(uint64_t a1)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(a1 + 56);
  v3 = *(void **)a1;
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    if (v3)
      (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

char *_GLOBAL__sub_I_IRSymtab_cpp()
{
  uint64_t v0;
  char *result;
  char *v2;

  v0 = llvm::cl::Option::Option((uint64_t)&qword_2579634D0, 0, 0);
  byte_257963550 = 0;
  qword_257963558 = (uint64_t)&off_251C12500;
  unk_257963560 = 0;
  qword_2579634D0 = (uint64_t)off_251C123A8;
  qword_257963568 = (uint64_t)&off_251C12520;
  qword_257963570 = (uint64_t)&off_251C12410;
  qword_257963588 = (uint64_t)&qword_257963570;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-bitcode-version-upgrade", 0x1FuLL);
  word_2579634DA = word_2579634DA & 0xFF9F | 0x20;
  qword_2579634F0 = (uint64_t)"Disable automatic bitcode upgrade for version mismatch";
  unk_2579634F8 = 54;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579634D0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_2579634D0, &dword_24A800000);
  result = getenv("LLVM_OVERRIDE_PRODUCER");
  if (result)
    v2 = result;
  _MergedGlobals_23 = (uint64_t)v2;
  return result;
}

uint64_t llvm::object::MachOObjectFile::create@<X0>(__int128 *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18[2];
  uint64_t v19;

  v19 = 0;
  v12 = operator new();
  v13 = a1[1];
  v18[0] = *a1;
  v18[1] = v13;
  result = llvm::object::MachOObjectFile::MachOObjectFile(v12, v18, a2, a3, &v19, a4, a5);
  v15 = v19;
  v16 = *(_BYTE *)(a6 + 8);
  if (v19)
  {
    v17 = v16 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v15;
  }
  else
  {
    v17 = v16 & 0xFE;
  }
  *(_BYTE *)(a6 + 8) = v17;
  *(_QWORD *)a6 = result;
  return result;
}

uint64_t llvm::object::MachOObjectFile::MachOObjectFile(uint64_t a1, __int128 *a2, int a3, int a4, uint64_t *a5, int a6, unsigned int a7)
{
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int8x16_t v29;
  int8x8_t v30;
  uint64_t v31;
  unsigned int v32;
  int8x16_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  _QWORD *v38;
  int v39;
  const char *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  int8x16_t v49;
  unint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  const char *v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD *v63;
  char *v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  unint64_t v68;
  unsigned int v69;
  char *v70;
  int8x16_t *v71;
  const char *v72;
  uint64_t v73;
  int v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  const char *v83;
  uint64_t v84;
  int v85;
  _DWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  __int16 v94;
  const char *v95;
  const char *v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  const char *v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  const char *v131;
  unsigned int v132;
  unsigned __int8 *v133;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  _BOOL4 v148;
  BOOL v149;
  _BOOL4 v150;
  BOOL v154;
  int8x16_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  _BOOL4 v168;
  _BOOL4 v170;
  BOOL v174;
  unsigned int v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  char *v180;
  char *v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unsigned int v187;
  char *v188;
  const char *v189;
  unint64_t v190;
  int v191;
  uint64_t v192;
  const char *v193;
  char v194;
  uint64_t *v195;
  const char *v196;
  const char *v197;
  const char *v198;
  const char *v199;
  uint64_t *v200;
  int8x16_t *v201;
  int8x16_t *v202;
  BOOL v204;
  int v205;
  const char *v206;
  unsigned int v207;
  char v208;
  const char *v209;
  const char *v210;
  const char *v211;
  const char *v212;
  const char *v213;
  const char *v214;
  const char *v215;
  const char *v216;
  uint64_t v217;
  int v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  const char *v223;
  const char *v224;
  unsigned int v225;
  unsigned int v226;
  unint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unint64_t v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  unsigned int v234;
  unint64_t v235;
  unint64_t v236;
  unsigned int v237;
  unint64_t v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  int v246;
  int v247;
  unsigned int v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int8x16_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  __int128 *v263;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int8x16_t v275;
  _QWORD *v276;
  uint64_t *v277;
  uint64_t v278;
  const char *v279;
  __int16 v280;
  uint64_t v281[2];
  uint64_t v282;
  __int16 v283;
  uint64_t v284[2];
  const char *v285;
  __int16 v286;
  uint64_t v287[2];
  const char *v288;
  __int16 v289;
  uint64_t v290[2];
  const char *v291;
  __int16 v292;
  uint64_t *v293;
  uint64_t v294;
  unint64_t v295;
  __int16 v296;
  uint64_t v297[2];
  const char *v298;
  __int16 v299;
  int8x16_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  int8x16_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  char v310;
  int8x16_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  int8x16_t v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  char v321;
  uint64_t v322;

  v322 = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  v11 = a2[1];
  if (a4)
    v13 = 19;
  else
    v13 = 17;
  if (a4)
    v14 = 20;
  else
    v14 = 18;
  if (!a3)
    v13 = v14;
  *(_DWORD *)(a1 + 8) = v13;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)a1 = &off_251C1B308;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  v15 = (unsigned int *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = a1 + 120;
  v16 = (unsigned int *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = 0x100000000;
  *(_QWORD *)(a1 + 112) = 0x100000000;
  v17 = (void *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  v18 = a1 + 128;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  v19 = (_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 136) = 0x400000000;
  *(_QWORD *)(a1 + 216) = 0x100000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x100000000;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  v21 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  if ((v13 - 19) > 1)
  {
    if ((unint64_t)v20 > 0x1B)
    {
      if (v20 >= 28)
      {
        v32 = *(_DWORD *)v21;
        v31 = *(unsigned int *)(v21 + 4);
        v33 = *(int8x16_t *)(v21 + 8);
        v34 = *(_DWORD *)(v21 + 24);
        if (v13 == 18)
        {
          v32 = bswap32(v32);
          v31 = bswap32(v31);
          v33 = vrev32q_s8(v33);
          v34 = bswap32(v34);
        }
        *(_QWORD *)(a1 + 48) = v32 | (unint64_t)(v31 << 32);
        *(int8x16_t *)(a1 + 56) = v33;
        *(_DWORD *)(a1 + 72) = v34;
        v25 = 28;
LABEL_29:
        if (*a5)
          return a1;
        goto LABEL_30;
      }
      v23 = "Structure read out-of-range";
    }
    else
    {
      v23 = "the mach header extends past the end of the file";
    }
    v305.i64[0] = (uint64_t)v23;
    LOWORD(v307) = 259;
    malformedError((const llvm::Twine *)&v316, v305.i64);
    v26 = v316.i64[0];
    *a5 = v316.i64[0];
    v25 = 28;
    if (v26)
      return a1;
    goto LABEL_30;
  }
  if ((unint64_t)v20 <= 0x1F)
  {
    v22 = "the mach header extends past the end of the file";
    goto LABEL_16;
  }
  if (v20 >= 32)
  {
    v28 = *(_DWORD *)v21;
    v27 = *(unsigned int *)(v21 + 4);
    v29 = *(int8x16_t *)(v21 + 8);
    v30 = *(int8x8_t *)(v21 + 24);
    if (!a3 && a4)
    {
      v28 = bswap32(v28);
      v27 = bswap32(v27);
      v29 = vrev32q_s8(v29);
      v30 = vrev32_s8(v30);
    }
    *(_QWORD *)(a1 + 48) = v28 | (unint64_t)(v27 << 32);
    *(int8x16_t *)(a1 + 56) = v29;
    *(int8x8_t *)(a1 + 72) = v30;
    v25 = 32;
    goto LABEL_29;
  }
  v22 = "Structure read out-of-range";
LABEL_16:
  v305.i64[0] = (uint64_t)v22;
  LOWORD(v307) = 259;
  malformedError((const llvm::Twine *)&v316, v305.i64);
  v24 = v316.i64[0];
  *a5 = v316.i64[0];
  v25 = 32;
  if (v24)
    return a1;
LABEL_30:
  if (v25 + *(unsigned int *)(a1 + 68) > *(_QWORD *)(a1 + 24))
  {
    v305.i64[0] = (uint64_t)"load commands extend past the end of the file";
    LOWORD(v307) = 259;
    malformedError((const llvm::Twine *)&v316, v305.i64);
    v35 = v316.i64[0];
LABEL_35:
    *a5 = v35;
    goto LABEL_36;
  }
  v36 = *(_DWORD *)(a1 + 72);
  if (a6 && *(_DWORD *)(a1 + 52) != a6)
  {
    v316.i64[0] = (uint64_t)"universal header architecture: ";
    *(_QWORD *)&v317 = a7;
    LOWORD(v318) = 2051;
    v305.i64[0] = (uint64_t)&v316;
    *(_QWORD *)&v306 = "'s cputype does not match object file's mach header";
    LOWORD(v307) = 770;
    malformedError((const llvm::Twine *)&v300, v305.i64);
    v35 = v300.i64[0];
    goto LABEL_35;
  }
  v266 = v25 + *(unsigned int *)(a1 + 68);
  v38 = operator new(0x28uLL);
  v38[2] = 0;
  v38[3] = v266;
  v38[4] = "Mach-O headers";
  *v38 = &v276;
  v38[1] = &v276;
  v276 = v38;
  v277 = v38;
  v278 = 1;
  v267 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v267)
  {
    v41 = 0;
    goto LABEL_43;
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (*(_DWORD *)(a1 + 68) <= 7u)
  {
    v40 = "load command 0 extends past the end all load commands in the file";
    goto LABEL_567;
  }
  v45 = 28;
  if (v39)
    v45 = 32;
  getLoadCommandInfo((uint64_t)&v316, (const char *)a1, (_DWORD *)(*(_QWORD *)(a1 + 16) + v45), 0);
  if ((v317 & 1) != 0)
    goto LABEL_568;
  v262 = v36;
  v46 = 0;
  v258 = 0;
  v259 = 0;
  v261 = 0;
  v260 = 0;
  v41 = 0;
  v265 = 0;
  v263 = 0;
  v264 = (_QWORD *)(a1 + 16);
  v275 = v316;
  v273 = 0;
  v274 = 0;
  v271 = 0;
  v272 = 0;
  v269 = 0;
  v270 = 0;
  while (2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    {
      if ((v275.i8[12] & 7) != 0)
      {
        v47 = (v275.i8[12] & 3) == 0 && *(_DWORD *)(a1 + 60) == 4;
        if (!v47 || v275.i32[2] != 4)
        {
          v300.i64[0] = (uint64_t)"load command ";
          LOWORD(v302) = 259;
          LOWORD(v313) = 264;
          v311.i32[0] = v46;
          llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
          v223 = " cmdsize not a multiple of 8";
LABEL_574:
          v297[0] = (uint64_t)v223;
          v299 = 259;
          llvm::operator+(v316.i64, v297, (uint64_t)&v305);
          malformedError((const llvm::Twine *)&v293, v305.i64);
          v35 = (uint64_t)v293;
          goto LABEL_569;
        }
      }
    }
    else if ((v275.i8[12] & 3) != 0)
    {
      v300.i64[0] = (uint64_t)"load command ";
      LOWORD(v302) = 259;
      LOWORD(v313) = 264;
      v311.i32[0] = v46;
      llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
      v223 = " cmdsize not a multiple of 4";
      goto LABEL_574;
    }
    v49 = v275;
    v50 = *(unsigned int *)(a1 + 136);
    if (v50 >= *(unsigned int *)(a1 + 140))
    {
      v257 = v275;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v17, v50 + 1, 16);
      v49 = v257;
      v50 = *(unsigned int *)(a1 + 136);
    }
    *(int8x16_t *)(*(_QWORD *)(a1 + 128) + 16 * v50) = v49;
    ++*(_DWORD *)(a1 + 136);
    if (*(uint64_t *)((char *)v275.i64 + 4) <= 0)
    {
      switch(v275.i32[2])
      {
        case 0x80000018:
          v52 = a1;
          v53 = v46;
          v54 = "LC_LOAD_WEAK_DYLIB";
          goto LABEL_102;
        case 0x80000019:
        case 0x8000001A:
        case 0x8000001B:
        case 0x8000001D:
        case 0x8000001E:
        case 0x80000020:
        case 0x80000021:
          break;
        case 0x8000001C:
          if (v275.i32[3] > 0xBu)
          {
            v88 = *(_QWORD *)(a1 + 16);
            if (v275.i64[0] < v88 || v275.i64[0] + 12 > v88 + *(_QWORD *)(a1 + 24))
            {
LABEL_160:
              v305.i64[0] = (uint64_t)"Structure read out-of-range";
              v94 = 259;
LABEL_229:
              LOWORD(v307) = v94;
              malformedError((const llvm::Twine *)&v300, v305.i64);
LABEL_230:
              v35 = v300.i64[0];
              goto LABEL_143;
            }
            v89 = *(_DWORD *)(v275.i64[0] + 4);
            v90 = *(_DWORD *)(v275.i64[0] + 8);
            v91 = *(_DWORD *)(a1 + 8);
            v92 = bswap32(v89);
            v93 = bswap32(v90);
            if (((1 << v91) & 0x155800) == 0)
            {
              v93 = *(_DWORD *)(v275.i64[0] + 8);
              v92 = *(_DWORD *)(v275.i64[0] + 4);
            }
            if (v91 <= 0x14)
            {
              v90 = v93;
              v89 = v92;
            }
            if (v90 > 0xB)
            {
              v149 = v89 >= v90;
              v132 = v89 - v90;
              if (v132 != 0 && v149)
              {
                v133 = (unsigned __int8 *)(v275.i64[0] + v90);
                do
                {
                  if (!*v133++)
                    goto LABEL_180;
                  --v132;
                }
                while (v132);
                v316.i64[0] = (uint64_t)"load command ";
                *(_QWORD *)&v317 = v46;
                LOWORD(v318) = 2051;
                v305.i64[0] = (uint64_t)&v316;
                v60 = " LC_RPATH library name extends past the end of the load command";
              }
              else
              {
                v316.i64[0] = (uint64_t)"load command ";
                *(_QWORD *)&v317 = v46;
                LOWORD(v318) = 2051;
                v305.i64[0] = (uint64_t)&v316;
                v60 = " LC_RPATH path.offset field extends past the end of the load command";
              }
            }
            else
            {
              v316.i64[0] = (uint64_t)"load command ";
              *(_QWORD *)&v317 = v46;
              LOWORD(v318) = 2051;
              v305.i64[0] = (uint64_t)&v316;
              v60 = " LC_RPATH path.offset field too small, not past the end of the rpath_command struct";
            }
          }
          else
          {
            v316.i64[0] = (uint64_t)"load command ";
            *(_QWORD *)&v317 = v46;
            LOWORD(v318) = 2051;
            v305.i64[0] = (uint64_t)&v316;
            v60 = " LC_RPATH cmdsize too small";
          }
          *(_QWORD *)&v306 = v60;
LABEL_228:
          v94 = 770;
          goto LABEL_229;
        case 0x8000001F:
          v52 = a1;
          v53 = v46;
          v54 = "LC_REEXPORT_DYLIB";
          goto LABEL_102;
        case 0x80000022:
          v61 = a1;
          v62 = v46;
          v63 = (_QWORD *)(a1 + 304);
          v64 = "LC_DYLD_INFO_ONLY";
LABEL_105:
          checkDyldInfoCommand((llvm::Twine *)&v305, v61, (uint64_t)&v275, v62, v63, v64, (uint64_t *)&v276);
          goto LABEL_142;
        case 0x80000023:
          v52 = a1;
          v53 = v46;
          v54 = "LC_LOAD_UPWARD_DYLIB";
LABEL_102:
          checkDylibCommand((const llvm::Twine *)&v305, v52, (unint64_t *)&v275, v53, v54);
          v35 = v305.i64[0];
          *a5 = v305.i64[0];
          if (v35)
            goto LABEL_570;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v16, v275.i64[0]);
          goto LABEL_144;
        default:
          if (v275.i32[2] == -2147483597)
          {
            v55 = a1;
            v56 = v46;
            v57 = (uint64_t *)(a1 + 328);
            v58 = "LC_DYLD_EXPORTS_TRIE";
            v59 = "export trie";
            goto LABEL_141;
          }
          if (v275.i32[2] == -2147483596)
          {
            v55 = a1;
            v56 = v46;
            v57 = (uint64_t *)(a1 + 320);
            v58 = "LC_DYLD_CHAINED_FIXUPS";
            v59 = "chained fixups";
LABEL_141:
            checkLinkeditDataCommand((llvm::Twine *)&v305, v55, (uint64_t)&v275, v56, v57, v58, (uint64_t *)&v276, v59);
LABEL_142:
            v35 = v305.i64[0];
            goto LABEL_143;
          }
          break;
      }
LABEL_138:
      switch(v275.i32[2])
      {
        case 3:
        case 6:
        case 7:
        case 9:
        case 0xA:
        case 0x10:
        case 0x17:
          v297[0] = (uint64_t)"load command ";
          v299 = 259;
          v296 = 264;
          LODWORD(v293) = v46;
          llvm::operator+(v297, (uint64_t *)&v293, (uint64_t)&v311);
          v290[0] = (uint64_t)" for cmd value of: ";
          v292 = 259;
          llvm::operator+(v311.i64, v290, (uint64_t)&v300);
          v289 = 264;
          LODWORD(v287[0]) = v275.i32[2];
          llvm::operator+(v300.i64, v287, (uint64_t)&v316);
          v284[0] = (uint64_t)" is obsolete and not supported";
          v286 = 259;
          llvm::operator+(v316.i64, v284, (uint64_t)&v305);
          malformedError((const llvm::Twine *)v281, v305.i64);
          v35 = v281[0];
          goto LABEL_569;
        case 4:
          checkThreadCommand((uint64_t)&v305, a1, v275.u64[0], v275.u32[3], v46, "LC_THREAD");
          goto LABEL_142;
        case 5:
          checkThreadCommand((uint64_t)&v305, a1, v275.u64[0], v275.u32[3], v46, "LC_UNIXTHREAD");
          v35 = v305.i64[0];
          *a5 = v305.i64[0];
          if (v35)
            goto LABEL_570;
          if (!v260)
          {
            v260 = v275.i64[0];
            goto LABEL_144;
          }
          v40 = "more than one LC_UNIXTHREAD command";
          goto LABEL_567;
        case 8:
          goto LABEL_150;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x18:
        case 0x19:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
          goto LABEL_144;
        case 0x11:
          if (v275.i32[3] == 40)
          {
            if (v261)
            {
              v40 = "more than one LC_ROUTINES and or LC_ROUTINES_64 command";
              goto LABEL_567;
            }
LABEL_405:
            v261 = v275.i64[0];
            goto LABEL_144;
          }
          v224 = "LC_ROUTINES command ";
          break;
        case 0x12:
          if (v275.i32[3] <= 0xBu)
          {
            v300.i64[0] = (uint64_t)"load command ";
            LOWORD(v302) = 259;
            LOWORD(v313) = 264;
            v311.i32[0] = v46;
            llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
            v223 = " LC_SUB_FRAMEWORK cmdsize too small";
            goto LABEL_574;
          }
          v176 = getStruct<llvm::MachO::sub_framework_command>(a1, v275.u64[0]);
          v177 = v275.i64[0];
          v178 = v275.u32[3];
          v179 = v46;
          v180 = "LC_SUB_FRAMEWORK";
          v181 = "sub_framework_command";
          v182 = "umbrella";
LABEL_401:
          checkSubCommand((const llvm::Twine *)&v305, v177, v178, v179, v180, v181, v176, v182);
          goto LABEL_142;
        case 0x13:
          if (v275.i32[3] <= 0xBu)
          {
            v300.i64[0] = (uint64_t)"load command ";
            LOWORD(v302) = 259;
            LOWORD(v313) = 264;
            v311.i32[0] = v46;
            llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
            v223 = " LC_SUB_UMBRELLA cmdsize too small";
            goto LABEL_574;
          }
          v176 = getStruct<llvm::MachO::sub_framework_command>(a1, v275.u64[0]);
          v177 = v275.i64[0];
          v178 = v275.u32[3];
          v179 = v46;
          v180 = "LC_SUB_UMBRELLA";
          v181 = "sub_umbrella_command";
          v182 = "sub_umbrella";
          goto LABEL_401;
        case 0x14:
          if (v275.i32[3] <= 0xBu)
          {
            v300.i64[0] = (uint64_t)"load command ";
            LOWORD(v302) = 259;
            LOWORD(v313) = 264;
            v311.i32[0] = v46;
            llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
            v223 = " LC_SUB_CLIENT cmdsize too small";
            goto LABEL_574;
          }
          v176 = getStruct<llvm::MachO::sub_framework_command>(a1, v275.u64[0]);
          v177 = v275.i64[0];
          v178 = v275.u32[3];
          v179 = v46;
          v180 = "LC_SUB_CLIENT";
          v181 = "sub_client_command";
          v182 = "client";
          goto LABEL_401;
        case 0x15:
          if (v275.i32[3] <= 0xBu)
          {
            v300.i64[0] = (uint64_t)"load command ";
            LOWORD(v302) = 259;
            LOWORD(v313) = 264;
            v311.i32[0] = v46;
            llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
            v223 = " LC_SUB_LIBRARY cmdsize too small";
            goto LABEL_574;
          }
          v176 = getStruct<llvm::MachO::sub_framework_command>(a1, v275.u64[0]);
          v177 = v275.i64[0];
          v178 = v275.u32[3];
          v179 = v46;
          v180 = "LC_SUB_LIBRARY";
          v181 = "sub_library_command";
          v182 = "sub_library";
          goto LABEL_401;
        case 0x16:
          checkTwoLevelHintsCommand((llvm::Twine *)&v305, a1, (unint64_t *)&v275, v46, &v269, (uint64_t *)&v276);
          goto LABEL_142;
        case 0x1A:
          if (v275.i32[3] == 72)
          {
            if (!v261)
              goto LABEL_405;
            v40 = "more than one LC_ROUTINES_64 and or LC_ROUTINES command";
LABEL_567:
            v305.i64[0] = (uint64_t)v40;
            LOWORD(v307) = 259;
            malformedError((const llvm::Twine *)&v316, v305.i64);
LABEL_568:
            v35 = v316.i64[0];
            goto LABEL_569;
          }
          v224 = "LC_ROUTINES_64 command ";
          break;
        case 0x21:
          if (v275.i32[3] == 20)
          {
            v305 = 0uLL;
            LODWORD(v306) = 0;
            getStruct<llvm::MachO::encryption_info_command>(&v305, a1, (int8x16_t *)v275.i64[0]);
            v183 = v305.u32[2];
            v184 = v305.u32[3];
            v185 = *(_QWORD *)(a1 + 24);
            v186 = v275.i64[0];
            v187 = v46;
            v188 = "LC_ENCRYPTION_INFO";
LABEL_410:
            checkEncryptCommand((const llvm::Twine *)&v316, v185, v186, v187, v183, v184, &v270, v188);
            goto LABEL_411;
          }
          v224 = "LC_ENCRYPTION_INFO command ";
          break;
        case 0x2C:
          if (v275.i32[3] == 24)
          {
            v305 = 0uLL;
            *(_QWORD *)&v306 = 0;
            getStruct<llvm::MachO::encryption_info_command_64>((uint64_t)&v305, a1, (__int128 *)v275.i64[0]);
            v183 = v305.u32[2];
            v184 = v305.u32[3];
            v185 = *(_QWORD *)(a1 + 24);
            v186 = v275.i64[0];
            v187 = v46;
            v188 = "LC_ENCRYPTION_INFO_64";
            goto LABEL_410;
          }
          v224 = "LC_ENCRYPTION_INFO_64 command ";
          break;
        case 0x2D:
          checkLinkerOptCommand((const llvm::Twine *)&v305, a1, v275.u64[0], v275.u32[3], v46);
          goto LABEL_142;
        default:
          if (v275.i32[2] != -2147483608)
            goto LABEL_144;
          if (v275.i32[3] != 24)
          {
            v224 = "LC_MAIN command ";
            break;
          }
          if (!v258)
          {
            v258 = v275.i64[0];
            goto LABEL_144;
          }
          v40 = "more than one LC_MAIN command";
          goto LABEL_567;
      }
LABEL_580:
      v300.i64[0] = (uint64_t)v224;
      LOWORD(v302) = 259;
      LOWORD(v313) = 264;
      v311.i32[0] = v46;
      llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
      v223 = " has incorrect cmdsize";
      goto LABEL_574;
    }
    switch(v275.i32[2])
    {
      case 1:
        if (v275.i32[3] <= 0x37u)
        {
          v311.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v312 = v46;
          LOWORD(v313) = 2051;
          v300.i64[0] = (uint64_t)&v311;
          *(_QWORD *)&v301 = " ";
          LOWORD(v302) = 770;
          v51 = "LC_SEGMENT";
LABEL_94:
          v316.i64[0] = (uint64_t)&v300;
          *(_QWORD *)&v317 = v51;
          LOWORD(v318) = 770;
          v71 = &v316;
          v72 = " cmdsize too small";
          goto LABEL_174;
        }
        getStructOrErr<llvm::MachO::segment_command>((uint64_t)&v300, a1, v275.u64[0]);
        if ((BYTE8(v303) & 1) != 0)
          goto LABEL_230;
        v311 = v300;
        v312 = v301;
        v313 = v302;
        *(_QWORD *)&v314 = v303;
        if (v303 > 0x3C3C3C3 || 68 * (int)v303 > (v275.i32[3] - 56))
        {
          v293 = (uint64_t *)"load command ";
          v295 = v46;
          v296 = 2051;
          v297[0] = (uint64_t)&v293;
          v298 = " inconsistent cmdsize in ";
          v299 = 770;
          v316.i64[0] = (uint64_t)v297;
          *(_QWORD *)&v317 = "LC_SEGMENT";
          LOWORD(v318) = 770;
          v71 = &v316;
          goto LABEL_173;
        }
        v255 = v41;
        v135 = *(_QWORD *)(a1 + 24);
        v235 = v313;
        v246 = v303;
        if (!(_DWORD)v303)
        {
LABEL_310:
          if (v135 < v235)
          {
            v293 = (uint64_t *)"load command ";
            v295 = v46;
            v296 = 2051;
            v297[0] = (uint64_t)&v293;
            v298 = " fileoff field in ";
            v299 = 770;
            v316.i64[0] = (uint64_t)v297;
            *(_QWORD *)&v317 = "LC_SEGMENT";
            LOWORD(v318) = 770;
            v156 = &v316;
            goto LABEL_384;
          }
          if (DWORD1(v313) + v235 > v135)
          {
            v290[0] = (uint64_t)"load command ";
            v292 = 259;
            v289 = 264;
            LODWORD(v287[0]) = v46;
            llvm::operator+(v290, v287, (uint64_t)&v293);
            v284[0] = (uint64_t)" fileoff field plus filesize field in ";
            v286 = 259;
            llvm::operator+((uint64_t *)&v293, v284, (uint64_t)v297);
            v281[0] = (uint64_t)"LC_SEGMENT";
            v283 = 259;
            llvm::operator+(v297, v281, (uint64_t)&v316);
            v197 = " extends past the end of the file";
            goto LABEL_463;
          }
          if (HIDWORD(v312) && DWORD1(v313) > HIDWORD(v312))
          {
            v290[0] = (uint64_t)"load command ";
            v292 = 259;
            v289 = 264;
            LODWORD(v287[0]) = v46;
            llvm::operator+(v290, v287, (uint64_t)&v293);
            v284[0] = (uint64_t)" filesize field in ";
            v286 = 259;
            llvm::operator+((uint64_t *)&v293, v284, (uint64_t)v297);
            v281[0] = (uint64_t)"LC_SEGMENT";
            v283 = 259;
            llvm::operator+(v297, v281, (uint64_t)&v316);
            v197 = " greater than vmsize field";
LABEL_463:
            v279 = v197;
            v280 = 259;
            v201 = &v316;
LABEL_468:
            llvm::operator+(v201->i64, (uint64_t *)&v279, (uint64_t)&v305);
LABEL_469:
            v202 = &v305;
            goto LABEL_509;
          }
LABEL_470:
          v204 = strlen(&v311.i8[8]) == 10 && v311.i64[1] == 0x455A454741505F5FLL && (unsigned __int16)v312 == 20306;
          *(_BYTE *)(a1 + 344) |= v204;
LABEL_498:
          *a5 = 0;
          v41 = v255;
          goto LABEL_144;
        }
        v136 = 0;
        v229 = DWORD1(v313);
        v226 = DWORD2(v312);
        v241 = HIDWORD(v312);
        v232 = HIDWORD(v312) + (unint64_t)DWORD2(v312);
        v251 = *(_QWORD *)(a1 + 24);
        while (2)
        {
          v137 = v275.i64[0];
          v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
          if (v138)
            v139 = 80;
          else
            v139 = 68;
          v140 = 56;
          if (v138)
            v140 = 72;
          v141 = v140 + v137 + (v139 * v136);
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v15, v141);
          v238 = v141;
          getStructOrErr<llvm::MachO::section>((uint64_t)&v305, a1, v141);
          if ((BYTE8(v309) & 1) != 0)
            goto LABEL_459;
          v318 = v307;
          v319 = v308;
          LODWORD(v320) = v309;
          v316 = v305;
          v317 = v306;
          v142 = *(_DWORD *)(a1 + 60);
          v135 = v251;
          if (v142 == 9)
          {
            v144 = DWORD1(v318);
            v143 = DWORD2(v318);
LABEL_248:
            v145 = v144;
LABEL_285:
            if (v241 && v145 && v144 + (unint64_t)v318 > v232)
            {
              v281[0] = (uint64_t)"addr field plus size of section ";
              v282 = v136;
              v283 = 2051;
              v284[0] = (uint64_t)v281;
              v285 = " in ";
              v286 = 770;
              v212 = "LC_SEGMENT";
              goto LABEL_513;
            }
            if (v142 != 9 && v142 != 10 && DWORD2(v319) != 1 && DWORD2(v319) != 18)
            {
              checkOverlappingElement(&v268, (uint64_t *)&v276, v143, v144, "section contents");
              if (v268)
                goto LABEL_510;
            }
            if (v251 < v319)
            {
              v209 = "reloff field of section ";
              goto LABEL_503;
            }
            if (v319 + 8 * (unint64_t)DWORD1(v319) > v251)
            {
              v209 = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
              goto LABEL_503;
            }
            checkOverlappingElement(&v268, (uint64_t *)&v276, v319, 8 * DWORD1(v319), "section relocation entries");
            if (v268)
              goto LABEL_510;
            if (strlen((const char *)&v317) == 6)
            {
              v154 = (_DWORD)v317 == 1163157343 && WORD2(v317) == 21592;
              if (v154
                && strlen(v316.i8) == 14
                && v316.i64[0] == 0x5F6E696168635F5FLL
                && *(uint64_t *)((char *)v316.i64 + 6) == 0x7374726174735F6ELL)
              {
                *(_QWORD *)(a1 + 352) = v238;
              }
            }
            if (v246 == (_DWORD)++v136)
              goto LABEL_310;
            continue;
          }
          break;
        }
        v143 = DWORD2(v318);
        v148 = v142 != 10 && DWORD2(v319) != 1 && DWORD2(v319) != 18;
        v149 = !v148 || v251 >= DWORD2(v318);
        if (!v149)
        {
          v209 = "offset field of section ";
LABEL_503:
          v281[0] = (uint64_t)v209;
          v282 = v136;
          v283 = 2051;
          v284[0] = (uint64_t)v281;
          v285 = " in ";
          v286 = 770;
          v211 = "LC_SEGMENT";
          goto LABEL_507;
        }
        if ((_DWORD)v235)
          v150 = 0;
        else
          v150 = v148;
        v144 = DWORD1(v318);
        if (v150 && v266 > DWORD2(v318) && DWORD1(v318) != 0)
        {
          v281[0] = (uint64_t)"offset field of section ";
          v282 = v136;
          v283 = 2051;
          v284[0] = (uint64_t)v281;
          v285 = " in ";
          v286 = 770;
          v216 = "LC_SEGMENT";
          goto LABEL_519;
        }
        if (DWORD1(v318) + (unint64_t)DWORD2(v318) > v251 && v148)
        {
          v209 = "offset field plus size field of section ";
          goto LABEL_503;
        }
        if (DWORD1(v318) <= v229)
          v148 = 0;
        if (v148)
        {
          v281[0] = (uint64_t)"size field of section ";
          v282 = v136;
          v283 = 2051;
          v284[0] = (uint64_t)v281;
          v285 = " in ";
          v286 = 770;
          v214 = "LC_SEGMENT";
          goto LABEL_515;
        }
        if (v142 == 10 || !DWORD1(v318))
          goto LABEL_248;
        if (v318 >= v226)
        {
          v145 = 1;
          goto LABEL_285;
        }
        v281[0] = (uint64_t)"addr field of section ";
        v282 = v136;
        v283 = 2051;
        v284[0] = (uint64_t)v281;
        v285 = " in ";
        v286 = 770;
        v215 = "LC_SEGMENT";
LABEL_521:
        v287[0] = (uint64_t)v284;
        v288 = v215;
        v289 = 770;
        v290[0] = (uint64_t)v287;
        v291 = " command ";
        v292 = 770;
        v293 = v290;
        v295 = v46;
        v296 = 2050;
        v213 = " less than the segment's vmaddr";
LABEL_508:
        v297[0] = (uint64_t)&v293;
        v298 = v213;
        v299 = 770;
        v202 = (int8x16_t *)v297;
LABEL_509:
        malformedError((const llvm::Twine *)&v268, v202->i64);
LABEL_510:
        v41 = v255;
LABEL_175:
        v35 = v268;
LABEL_143:
        *a5 = v35;
        if (v35)
          goto LABEL_570;
LABEL_144:
        if (v46 >= (v267 - 1))
          goto LABEL_150;
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        v86 = (_DWORD *)(v275.i64[0] + v275.u32[3]);
        v87 = 28;
        if (v85)
          v87 = 32;
        if ((unint64_t)(v86 + 2) > *(_QWORD *)(a1 + 16) + (unint64_t)*(unsigned int *)(a1 + 68) + v87)
        {
          v316.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v317 = v46 + 1;
          LOWORD(v318) = 2051;
          v305.i64[0] = (uint64_t)&v316;
          *(_QWORD *)&v306 = " extends past the end all load commands in the file";
          LOWORD(v307) = 770;
          malformedError((const llvm::Twine *)&v300, v305.i64);
LABEL_558:
          v35 = v300.i64[0];
          goto LABEL_569;
        }
        getLoadCommandInfo((uint64_t)&v300, (const char *)a1, v86, v46 + 1);
        if ((v301 & 1) != 0)
          goto LABEL_558;
        v275 = v300;
LABEL_150:
        if (++v46 != v267)
          continue;
        if (v271 && v263)
        {
          v217 = getStruct<llvm::MachO::version_min_command>(a1, v271);
          if ((v262 & 0x8000000) != 0 && v217 != 36)
          {
            v40 = "MH_SIM_SUPPORT files only support LC_BUILD_VERSION and LC_VERSION_MIN_MACOSX load commands";
            goto LABEL_567;
          }
          if ((v262 & 0x8000000) == 0 && v217 != 36)
          {
            v40 = "LC_BUILD_VERSION and some LC_VERSION_MIN load command also found";
            goto LABEL_567;
          }
        }
LABEL_43:
        v42 = *(__int128 **)(a1 + 272);
        v43 = *(_QWORD *)(a1 + 280);
        if (!v42)
        {
          if (v43)
          {
            v40 = "contains LC_DYSYMTAB load command without a LC_SYMTAB load command";
            goto LABEL_567;
          }
LABEL_562:
          v218 = *(_DWORD *)(a1 + 60);
          if ((v218 == 6 || v218 == 9) && !v41)
          {
            v40 = "no LC_ID_DYLIB load command in dynamic library filetype";
            goto LABEL_567;
          }
          v35 = 0;
          *a5 = 0;
          goto LABEL_570;
        }
        if (!v43)
          goto LABEL_562;
        v300 = 0uLL;
        *(_QWORD *)&v301 = 0;
        getStruct<llvm::MachO::symtab_command>(a1, v42, (uint64_t)&v300);
        v308 = 0u;
        v309 = 0u;
        v306 = 0u;
        v307 = 0u;
        v305 = 0u;
        getStruct<llvm::MachO::dysymtab_command>(a1, *(int8x16_t **)(a1 + 280), &v305);
        if (v305.i32[3])
        {
          if (v305.i32[2] > (unsigned __int32)v300.i32[3])
          {
            v44 = "ilocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_561;
          }
          if (v305.u32[2] + (unint64_t)v305.u32[3] > v300.u32[3])
          {
            v44 = "ilocalsym plus nlocalsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_561;
          }
        }
        if (DWORD1(v306))
        {
          if (v306 > v300.i32[3])
          {
            v44 = "iextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_561;
          }
          if (v306 + (unint64_t)DWORD1(v306) > v300.u32[3])
          {
            v44 = "iextdefsym plus nextdefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
            goto LABEL_561;
          }
        }
        if (!HIDWORD(v306))
          goto LABEL_562;
        if (DWORD2(v306) > v300.i32[3])
        {
          v44 = "iundefsym in LC_DYSYMTAB load command extends past the end of the symbol table";
          goto LABEL_561;
        }
        if (DWORD2(v306) + (unint64_t)HIDWORD(v306) <= v300.u32[3])
          goto LABEL_562;
        v44 = "iundefsym plus nundefsym in LC_DYSYMTAB load  command extends past the end of the symbol table";
LABEL_561:
        v316.i64[0] = (uint64_t)v44;
        LOWORD(v318) = 259;
        malformedError((const llvm::Twine *)&v311, v316.i64);
        v35 = v311.i64[0];
LABEL_569:
        *a5 = v35;
LABEL_570:
        if (v278)
        {
          v220 = (uint64_t)v276;
          v219 = v277;
          v221 = *v277;
          *(_QWORD *)(v221 + 8) = v276[1];
          **(_QWORD **)(v220 + 8) = v221;
          v278 = 0;
          if (v219 != (uint64_t *)&v276)
          {
            do
            {
              v222 = (uint64_t *)v219[1];
              operator delete(v219);
              v219 = v222;
            }
            while (v222 != (uint64_t *)&v276);
            v35 = *a5;
          }
        }
LABEL_36:
        if (!v35)
          *a5 = 0;
        return a1;
      case 2:
        if (v275.i32[3] <= 0x17u)
        {
          v316.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v65 = " LC_SYMTAB cmdsize too small";
LABEL_84:
          v305.i64[0] = (uint64_t)&v316;
          *(_QWORD *)&v306 = v65;
          v66 = 770;
LABEL_216:
          LOWORD(v307) = v66;
          malformedError((const llvm::Twine *)v281, v305.i64);
          goto LABEL_217;
        }
        if (*(_QWORD *)(a1 + 272))
        {
          v95 = "more than one LC_SYMTAB command";
LABEL_215:
          v305.i64[0] = (uint64_t)v95;
          v66 = 259;
          goto LABEL_216;
        }
        v106 = *(_QWORD *)(a1 + 16);
        if (v275.i64[0] < v106)
          goto LABEL_214;
        v107 = *(_QWORD *)(a1 + 24);
        if (v275.i64[0] + 24 > v106 + v107)
          goto LABEL_214;
        v109 = *(_DWORD *)(v275.i64[0] + 4);
        v108 = *(_DWORD *)(v275.i64[0] + 8);
        v111 = *(_DWORD *)(v275.i64[0] + 12);
        v110 = *(_DWORD *)(v275.i64[0] + 16);
        v112 = *(_DWORD *)(v275.i64[0] + 20);
        v113 = *(_DWORD *)(a1 + 8);
        if (v113 <= 0x14 && ((1 << v113) & 0x155800) != 0)
        {
          v109 = bswap32(v109);
          v108 = bswap32(v108);
          v111 = bswap32(v111);
          v110 = bswap32(v110);
          v112 = bswap32(v112);
        }
        if (v109 == 24)
        {
          v245 = v110;
          v240 = v112;
          v250 = *(_QWORD *)(a1 + 24);
          if (v107 >= v108)
          {
            v255 = v41;
            v190 = v108;
            v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            if (v191)
              v192 = 16 * v111;
            else
              v192 = 12 * v111;
            v193 = "struct nlist_64";
            if (!v191)
              v193 = "struct nlist";
            if (v192 + v190 <= v250)
            {
              checkOverlappingElement(v281, (uint64_t *)&v276, v190, v192, "symbol table");
              v35 = v281[0];
              if (v281[0])
                goto LABEL_569;
              if (v250 >= v245)
              {
                if (v245 + (unint64_t)v240 <= v250)
                {
                  checkOverlappingElement(v281, (uint64_t *)&v276, v245, v240, "string table");
                  v35 = v281[0];
                  if (v281[0])
                    goto LABEL_569;
                  *(_QWORD *)(a1 + 272) = v275.i64[0];
                  goto LABEL_498;
                }
                v199 = "stroff field plus strsize field of LC_SYMTAB command ";
              }
              else
              {
                v199 = "stroff field of LC_SYMTAB command ";
              }
              v300.i64[0] = (uint64_t)v199;
              LOWORD(v302) = 259;
              LOWORD(v313) = 264;
              v311.i32[0] = v46;
              llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
              v297[0] = (uint64_t)" extends past the end of the file";
              v299 = 259;
              v195 = v297;
            }
            else
            {
              v297[0] = (uint64_t)"symoff field plus nsyms field times sizeof(";
              v299 = 259;
              v194 = 1;
              HIBYTE(v296) = 1;
              if (*v193)
              {
                v293 = (uint64_t *)v193;
                v194 = 3;
              }
              LOBYTE(v296) = v194;
              llvm::operator+(v297, (uint64_t *)&v293, (uint64_t)&v311);
              v290[0] = (uint64_t)") of LC_SYMTAB command ";
              v292 = 259;
              llvm::operator+(v311.i64, v290, (uint64_t)&v300);
              v289 = 264;
              LODWORD(v287[0]) = v46;
              llvm::operator+(v300.i64, v287, (uint64_t)&v316);
              v284[0] = (uint64_t)" extends past the end of the file";
              v286 = 259;
              v195 = v284;
            }
            llvm::operator+(v316.i64, v195, (uint64_t)&v305);
            malformedError((const llvm::Twine *)v281, v305.i64);
            v41 = v255;
LABEL_217:
            v35 = v281[0];
            goto LABEL_143;
          }
          v114 = "symoff field of LC_SYMTAB command ";
          goto LABEL_213;
        }
        v189 = "LC_SYMTAB command ";
        goto LABEL_420;
      case 0xB:
        if (v275.i32[3] <= 0x4Fu)
        {
          v316.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v65 = " LC_DYSYMTAB cmdsize too small";
          goto LABEL_84;
        }
        if (*(_QWORD *)(a1 + 280))
        {
          v95 = "more than one LC_DYSYMTAB command";
          goto LABEL_215;
        }
        v115 = *(_QWORD *)(a1 + 16);
        if (v275.i64[0] < v115 || (v116 = *(_QWORD *)(a1 + 24), v275.i64[0] + 80 > v115 + v116))
        {
LABEL_214:
          v95 = "Structure read out-of-range";
          goto LABEL_215;
        }
        v117 = *(_DWORD *)(v275.i64[0] + 4);
        v119 = *(_DWORD *)(v275.i64[0] + 32);
        v118 = *(_DWORD *)(v275.i64[0] + 36);
        v121 = *(_DWORD *)(v275.i64[0] + 40);
        v120 = *(_DWORD *)(v275.i64[0] + 44);
        v123 = *(_DWORD *)(v275.i64[0] + 48);
        v122 = *(_DWORD *)(v275.i64[0] + 52);
        v125 = *(_DWORD *)(v275.i64[0] + 56);
        v124 = *(_DWORD *)(v275.i64[0] + 60);
        v127 = *(_DWORD *)(v275.i64[0] + 64);
        v126 = *(_DWORD *)(v275.i64[0] + 68);
        v129 = *(_DWORD *)(v275.i64[0] + 72);
        v128 = *(_DWORD *)(v275.i64[0] + 76);
        v130 = *(_DWORD *)(a1 + 8);
        if (v130 <= 0x14 && ((1 << v130) & 0x155800) != 0)
        {
          v117 = bswap32(v117);
          v119 = bswap32(v119);
          v118 = bswap32(v118);
          v121 = bswap32(v121);
          v120 = bswap32(v120);
          v123 = bswap32(v123);
          v122 = bswap32(v122);
          v125 = bswap32(v125);
          v124 = bswap32(v124);
          v127 = bswap32(v127);
          v126 = bswap32(v126);
          v129 = bswap32(v129);
          v128 = bswap32(v128);
        }
        if (v117 != 80)
        {
          v189 = "LC_DYSYMTAB command ";
LABEL_420:
          v316.i64[0] = (uint64_t)v189;
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v131 = " has incorrect cmdsize";
          goto LABEL_421;
        }
        if (v116 < v119)
        {
          v114 = "tocoff field of LC_DYSYMTAB command ";
LABEL_213:
          v316.i64[0] = (uint64_t)v114;
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v131 = " extends past the end of the file";
LABEL_421:
          v305.i64[0] = (uint64_t)&v316;
          *(_QWORD *)&v306 = v131;
          LOWORD(v307) = 770;
LABEL_422:
          malformedError((const llvm::Twine *)v281, v305.i64);
          goto LABEL_217;
        }
        v253 = v120;
        v248 = v123;
        v243 = v122;
        v239 = v125;
        v237 = v124;
        v234 = v127;
        v231 = v126;
        v228 = v129;
        v225 = v128;
        v256 = *(_QWORD *)(a1 + 24);
        if (v119 + 8 * (unint64_t)v118 <= v116)
        {
          checkOverlappingElement(v281, (uint64_t *)&v276, v119, 8 * v118, "table of contents");
          v35 = v281[0];
          if (v281[0])
            goto LABEL_569;
          if (v256 >= v121)
          {
            v205 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            v206 = "struct dylib_module";
            if (v205)
              v206 = "struct dylib_module_64";
            v207 = 52;
            if (v205)
              v207 = 56;
            if (v121 + v207 * (unint64_t)v253 > v256)
            {
              v297[0] = (uint64_t)"modtaboff field plus nmodtab field times sizeof(";
              v299 = 259;
              v208 = 1;
              HIBYTE(v296) = 1;
              if (*v206)
              {
                v293 = (uint64_t *)v206;
                v208 = 3;
              }
              LOBYTE(v296) = v208;
              llvm::operator+(v297, (uint64_t *)&v293, (uint64_t)&v311);
              v290[0] = (uint64_t)") of LC_DYSYMTAB command ";
              v292 = 259;
              llvm::operator+(v311.i64, v290, (uint64_t)&v300);
              v289 = 264;
              LODWORD(v287[0]) = v46;
              llvm::operator+(v300.i64, v287, (uint64_t)&v316);
              v284[0] = (uint64_t)" extends past the end of the file";
              v286 = 259;
              v200 = v284;
              goto LABEL_458;
            }
            checkOverlappingElement(v281, (uint64_t *)&v276, v121, v207 * (unint64_t)v253, "module table");
            v35 = v281[0];
            if (v281[0])
              goto LABEL_569;
            if (v256 >= v248)
            {
              if (v248 + 4 * (unint64_t)v243 <= v256)
              {
                checkOverlappingElement(v281, (uint64_t *)&v276, v248, 4 * v243, "reference table");
                v35 = v281[0];
                if (v281[0])
                  goto LABEL_569;
                if (v256 >= v239)
                {
                  if (v239 + 4 * (unint64_t)v237 <= v256)
                  {
                    checkOverlappingElement(v281, (uint64_t *)&v276, v239, 4 * v237, "indirect table");
                    v35 = v281[0];
                    if (v281[0])
                      goto LABEL_569;
                    if (v256 >= v234)
                    {
                      if (v234 + 8 * (unint64_t)v231 <= v256)
                      {
                        checkOverlappingElement(v281, (uint64_t *)&v276, v234, 8 * v231, "external relocation table");
                        v35 = v281[0];
                        if (v281[0])
                          goto LABEL_569;
                        if (v256 >= v228)
                        {
                          if (v228 + 8 * (unint64_t)v225 <= v256)
                          {
                            checkOverlappingElement(v281, (uint64_t *)&v276, v228, 8 * v225, "local relocation table");
                            v35 = v281[0];
                            if (!v281[0])
                            {
                              *(_QWORD *)(a1 + 280) = v275.i64[0];
                              *a5 = 0;
                              goto LABEL_144;
                            }
                            goto LABEL_569;
                          }
                          v196 = "locreloff field plus nlocrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
                        }
                        else
                        {
                          v196 = "locreloff field of LC_DYSYMTAB command ";
                        }
                      }
                      else
                      {
                        v196 = "extreloff field plus nextrel field times sizeof(struct relocation_info) of LC_DYSYMTAB command ";
                      }
                    }
                    else
                    {
                      v196 = "extreloff field of LC_DYSYMTAB command ";
                    }
                  }
                  else
                  {
                    v196 = "indirectsymoff field plus nindirectsyms field times sizeof(uint32_t) of LC_DYSYMTAB command ";
                  }
                }
                else
                {
                  v196 = "indirectsymoff field of LC_DYSYMTAB command ";
                }
              }
              else
              {
                v196 = "extrefsymoff field plus nextrefsyms field times sizeof(struct dylib_reference) of LC_DYSYMTAB command ";
              }
            }
            else
            {
              v196 = "extrefsymoff field of LC_DYSYMTAB command ";
            }
          }
          else
          {
            v196 = "modtaboff field of LC_DYSYMTAB command ";
          }
        }
        else
        {
          v196 = "tocoff field plus ntoc field times sizeof(struct dylib_table_of_contents) of LC_DYSYMTAB command ";
        }
        v300.i64[0] = (uint64_t)v196;
        LOWORD(v302) = 259;
        LOWORD(v313) = 264;
        v311.i32[0] = v46;
        llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
        v297[0] = (uint64_t)" extends past the end of the file";
        v299 = 259;
        v200 = v297;
LABEL_458:
        llvm::operator+(v316.i64, v200, (uint64_t)&v305);
        goto LABEL_422;
      case 0xC:
        v54 = "LC_LOAD_DYLIB";
        goto LABEL_101;
      case 0xD:
        checkDylibCommand((const llvm::Twine *)&v316, a1, (unint64_t *)&v275, v46, "LC_ID_DYLIB");
        v35 = v316.i64[0];
        if (v316.i64[0])
          goto LABEL_569;
        if (v41)
        {
          v67 = "more than one LC_ID_DYLIB command";
LABEL_89:
          v305.i64[0] = (uint64_t)v67;
          LOWORD(v307) = 259;
          malformedError((const llvm::Twine *)&v316, v305.i64);
LABEL_411:
          v35 = v316.i64[0];
          goto LABEL_143;
        }
        v97 = *(_DWORD *)(a1 + 60);
        if (v97 != 6 && v97 != 9)
        {
          v67 = "LC_ID_DYLIB load command in non-dynamic library file type";
          goto LABEL_89;
        }
        v41 = v275.i64[0];
        goto LABEL_180;
      case 0xE:
        v68 = v275.i64[0];
        v69 = v275.u32[3];
        v70 = "LC_LOAD_DYLINKER";
        goto LABEL_110;
      case 0xF:
        v68 = v275.i64[0];
        v69 = v275.u32[3];
        v70 = "LC_ID_DYLINKER";
        goto LABEL_110;
      case 0x19:
        if (v275.i32[3] <= 0x47u)
        {
          v311.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v312 = v46;
          LOWORD(v313) = 2051;
          v300.i64[0] = (uint64_t)&v311;
          *(_QWORD *)&v301 = " ";
          LOWORD(v302) = 770;
          v51 = "LC_SEGMENT_64";
          goto LABEL_94;
        }
        getStructOrErr<llvm::MachO::segment_command_64>((uint64_t)&v316, a1, v275.u64[0]);
        if ((v321 & 1) == 0)
        {
          v313 = v318;
          v314 = v319;
          v315 = v320;
          v311 = v316;
          v312 = v317;
          if (v320 <= 0x3333333 && 80 * (int)v320 <= (v275.i32[3] - 72))
          {
            v252 = *(_QWORD *)(a1 + 24);
            v255 = v41;
            v236 = *((_QWORD *)&v313 + 1);
            v247 = v320;
            if ((_DWORD)v320)
            {
              v157 = 0;
              v227 = *((_QWORD *)&v312 + 1);
              v230 = v314;
              v242 = v313;
              v233 = v313 + *((_QWORD *)&v312 + 1);
              do
              {
                v158 = v275.i64[0];
                v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
                if (v159)
                  v160 = 80;
                else
                  v160 = 68;
                v161 = 56;
                if (v159)
                  v161 = 72;
                v162 = v161 + v158 + (v160 * v157);
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v15, v162);
                getStructOrErr<llvm::MachO::section_64>((uint64_t)&v305, a1, v162);
                if ((v310 & 1) != 0)
                {
LABEL_459:
                  v268 = v305.i64[0];
                  goto LABEL_510;
                }
                v302 = v307;
                v303 = v308;
                v304 = v309;
                v300 = v305;
                v301 = v306;
                v163 = *(_DWORD *)(a1 + 60);
                if (v163 == 9)
                {
                  v164 = v303;
                  v165 = *((_QWORD *)&v302 + 1);
                }
                else
                {
                  v164 = v303;
                  v168 = v163 != 10 && (_DWORD)v304 != 1 && (_DWORD)v304 != 18;
                  if (v168 && v252 < v303)
                  {
                    v210 = "offset field of section ";
                    goto LABEL_506;
                  }
                  if (v236)
                    v170 = 0;
                  else
                    v170 = v168;
                  v165 = *((_QWORD *)&v302 + 1);
                  if (v170 && v266 > v303 && *((_QWORD *)&v302 + 1) != 0)
                  {
                    v281[0] = (uint64_t)"offset field of section ";
                    v282 = v157;
                    v283 = 2051;
                    v284[0] = (uint64_t)v281;
                    v285 = " in ";
                    v286 = 770;
                    v216 = "LC_SEGMENT_64";
LABEL_519:
                    v287[0] = (uint64_t)v284;
                    v288 = v216;
                    v289 = 770;
                    v290[0] = (uint64_t)v287;
                    v291 = " command ";
                    v292 = 770;
                    v293 = v290;
                    v295 = v46;
                    v296 = 2050;
                    v213 = " not past the headers of the file";
                    goto LABEL_508;
                  }
                  if (*((_QWORD *)&v302 + 1) + (unint64_t)v303 > v252 && v168)
                  {
                    v210 = "offset field plus size field of section ";
LABEL_506:
                    v281[0] = (uint64_t)v210;
                    v282 = v157;
                    v283 = 2051;
                    v284[0] = (uint64_t)v281;
                    v285 = " in ";
                    v286 = 770;
                    v211 = "LC_SEGMENT_64";
LABEL_507:
                    v287[0] = (uint64_t)v284;
                    v288 = v211;
                    v289 = 770;
                    v290[0] = (uint64_t)v287;
                    v291 = " command ";
                    v292 = 770;
                    v293 = v290;
                    v295 = v46;
                    v296 = 2050;
                    v213 = " extends past the end of the file";
                    goto LABEL_508;
                  }
                  if (*((_QWORD *)&v302 + 1) <= v230)
                    v168 = 0;
                  if (v168)
                  {
                    v281[0] = (uint64_t)"size field of section ";
                    v282 = v157;
                    v283 = 2051;
                    v284[0] = (uint64_t)v281;
                    v285 = " in ";
                    v286 = 770;
                    v214 = "LC_SEGMENT_64";
LABEL_515:
                    v287[0] = (uint64_t)v284;
                    v288 = v214;
                    v289 = 770;
                    v290[0] = (uint64_t)v287;
                    v291 = " command ";
                    v292 = 770;
                    v293 = v290;
                    v295 = v46;
                    v296 = 2050;
                    v213 = " greater than the segment";
                    goto LABEL_508;
                  }
                  if (v163 != 10 && *((_QWORD *)&v302 + 1) && (unint64_t)v302 < v227)
                  {
                    v281[0] = (uint64_t)"addr field of section ";
                    v282 = v157;
                    v283 = 2051;
                    v284[0] = (uint64_t)v281;
                    v285 = " in ";
                    v286 = 770;
                    v215 = "LC_SEGMENT_64";
                    goto LABEL_521;
                  }
                }
                if (v242 && v165 && (uint64_t)v302 + v165 > v233)
                {
                  v281[0] = (uint64_t)"addr field plus size of section ";
                  v282 = v157;
                  v283 = 2051;
                  v284[0] = (uint64_t)v281;
                  v285 = " in ";
                  v286 = 770;
                  v212 = "LC_SEGMENT_64";
LABEL_513:
                  v287[0] = (uint64_t)v284;
                  v288 = v212;
                  v289 = 770;
                  v290[0] = (uint64_t)v287;
                  v291 = " command ";
                  v292 = 770;
                  v293 = v290;
                  v295 = v46;
                  v296 = 2050;
                  v213 = " greater than than the segment's vmaddr plus vmsize";
                  goto LABEL_508;
                }
                if (v163 != 9 && v163 != 10 && (_DWORD)v304 != 1 && (_DWORD)v304 != 18)
                {
                  checkOverlappingElement(&v268, (uint64_t *)&v276, v164, v165, "section contents");
                  if (v268)
                    goto LABEL_510;
                }
                if (v252 < DWORD2(v303))
                {
                  v210 = "reloff field of section ";
                  goto LABEL_506;
                }
                if (DWORD2(v303) + 8 * (unint64_t)HIDWORD(v303) > v252)
                {
                  v210 = "reloff field plus nreloc field times sizeof(struct relocation_info) of section ";
                  goto LABEL_506;
                }
                checkOverlappingElement(&v268, (uint64_t *)&v276, DWORD2(v303), 8 * HIDWORD(v303), "section relocation entries");
                if (v268)
                  goto LABEL_510;
                if (strlen((const char *)&v301) == 6)
                {
                  v174 = (_DWORD)v301 == 1163157343 && WORD2(v301) == 21592;
                  if (v174
                    && strlen(v300.i8) == 14
                    && v300.i64[0] == 0x5F6E696168635F5FLL
                    && *(uint64_t *)((char *)v300.i64 + 6) == 0x7374726174735F6ELL)
                  {
                    *(_QWORD *)(a1 + 352) = v162;
                  }
                }
                ++v157;
              }
              while (v247 != (_DWORD)v157);
            }
            if (v236 > v252)
            {
              v293 = (uint64_t *)"load command ";
              v295 = v46;
              v296 = 2051;
              v297[0] = (uint64_t)&v293;
              v298 = " fileoff field in ";
              v299 = 770;
              v300.i64[0] = (uint64_t)v297;
              *(_QWORD *)&v301 = "LC_SEGMENT_64";
              LOWORD(v302) = 770;
              v156 = &v300;
LABEL_384:
              v305.i64[0] = (uint64_t)v156;
              *(_QWORD *)&v306 = " extends past the end of the file";
              LOWORD(v307) = 770;
              goto LABEL_469;
            }
            if ((unint64_t)v314 + v236 <= v252)
            {
              if (!(_QWORD)v313 || (unint64_t)v314 <= (unint64_t)v313)
                goto LABEL_470;
              v290[0] = (uint64_t)"load command ";
              v292 = 259;
              v289 = 264;
              LODWORD(v287[0]) = v46;
              llvm::operator+(v290, v287, (uint64_t)&v293);
              v284[0] = (uint64_t)" filesize field in ";
              v286 = 259;
              llvm::operator+((uint64_t *)&v293, v284, (uint64_t)v297);
              v281[0] = (uint64_t)"LC_SEGMENT_64";
              v283 = 259;
              llvm::operator+(v297, v281, (uint64_t)&v300);
              v198 = " greater than vmsize field";
            }
            else
            {
              v290[0] = (uint64_t)"load command ";
              v292 = 259;
              v289 = 264;
              LODWORD(v287[0]) = v46;
              llvm::operator+(v290, v287, (uint64_t)&v293);
              v284[0] = (uint64_t)" fileoff field plus filesize field in ";
              v286 = 259;
              llvm::operator+((uint64_t *)&v293, v284, (uint64_t)v297);
              v281[0] = (uint64_t)"LC_SEGMENT_64";
              v283 = 259;
              llvm::operator+(v297, v281, (uint64_t)&v300);
              v198 = " extends past the end of the file";
            }
            v279 = v198;
            v280 = 259;
            v201 = &v300;
            goto LABEL_468;
          }
          v293 = (uint64_t *)"load command ";
          v295 = v46;
          v296 = 2051;
          v297[0] = (uint64_t)&v293;
          v298 = " inconsistent cmdsize in ";
          v299 = 770;
          v300.i64[0] = (uint64_t)v297;
          *(_QWORD *)&v301 = "LC_SEGMENT_64";
          LOWORD(v302) = 770;
          v71 = &v300;
LABEL_173:
          v72 = " for the number of sections";
LABEL_174:
          v305.i64[0] = (uint64_t)v71;
          *(_QWORD *)&v306 = v72;
          LOWORD(v307) = 770;
          malformedError((const llvm::Twine *)&v268, v305.i64);
          goto LABEL_175;
        }
        goto LABEL_411;
      case 0x1B:
        if (v275.i32[3] != 24)
        {
          v224 = "LC_UUID command ";
          goto LABEL_580;
        }
        if (!*(_QWORD *)(a1 + 336))
        {
          *(_QWORD *)(a1 + 336) = v275.i64[0];
          goto LABEL_144;
        }
        v40 = "more than one LC_UUID command";
        goto LABEL_567;
      case 0x1D:
        v58 = "LC_CODE_SIGNATURE";
        v59 = "code signature data";
        v57 = &v272;
        goto LABEL_116;
      case 0x1E:
        v58 = "LC_SEGMENT_SPLIT_INFO";
        v59 = "split info data";
        v57 = &v274;
        goto LABEL_116;
      case 0x20:
        v54 = "LC_LAZY_LOAD_DYLIB";
LABEL_101:
        v52 = a1;
        v53 = v46;
        goto LABEL_102;
      case 0x22:
        v64 = "LC_DYLD_INFO";
        v61 = a1;
        v62 = v46;
        v63 = (_QWORD *)(a1 + 304);
        goto LABEL_105;
      case 0x24:
        v73 = v275.i64[0];
        v74 = v275.i32[3];
        v75 = "LC_VERSION_MIN_MACOSX";
        goto LABEL_120;
      case 0x25:
        v73 = v275.i64[0];
        v74 = v275.i32[3];
        v75 = "LC_VERSION_MIN_IPHONEOS";
        goto LABEL_120;
      case 0x26:
        v58 = "LC_FUNCTION_STARTS";
        v59 = "function starts data";
        v55 = a1;
        v56 = v46;
        v57 = (uint64_t *)(a1 + 312);
        goto LABEL_141;
      case 0x27:
        v68 = v275.i64[0];
        v69 = v275.u32[3];
        v70 = "LC_DYLD_ENVIRONMENT";
LABEL_110:
        checkDyldCommand((const llvm::Twine *)&v305, a1, v68, v69, v46, v70);
        goto LABEL_142;
      case 0x29:
        v58 = "LC_DATA_IN_CODE";
        v59 = "data in code info";
        v55 = a1;
        v56 = v46;
        v57 = (uint64_t *)(a1 + 288);
        goto LABEL_141;
      case 0x2A:
        if (v275.i32[3] != 16)
        {
          v224 = "LC_SOURCE_VERSION command ";
          goto LABEL_580;
        }
        if (!v265)
        {
          v265 = v275.i64[0];
          goto LABEL_144;
        }
        v40 = "more than one LC_SOURCE_VERSION command";
        goto LABEL_567;
      case 0x2B:
        v58 = "LC_DYLIB_CODE_SIGN_DRS";
        v59 = "code signing RDs data";
        v57 = &v273;
LABEL_116:
        v55 = a1;
        v56 = v46;
        goto LABEL_141;
      case 0x2E:
        v58 = "LC_LINKER_OPTIMIZATION_HINT";
        v59 = "linker optimization hints";
        v55 = a1;
        v56 = v46;
        v57 = (uint64_t *)(a1 + 296);
        goto LABEL_141;
      case 0x2F:
        v73 = v275.i64[0];
        v74 = v275.i32[3];
        v75 = "LC_VERSION_MIN_TVOS";
        goto LABEL_120;
      case 0x30:
        v73 = v275.i64[0];
        v74 = v275.i32[3];
        v75 = "LC_VERSION_MIN_WATCHOS";
LABEL_120:
        checkVersCommand((const llvm::Twine *)&v305, v73, v74, v46, &v271, v75);
        goto LABEL_142;
      case 0x31:
        if (v275.i32[3] != 40)
        {
          v316.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v96 = " LC_NOTE has incorrect cmdsize";
LABEL_227:
          v305.i64[0] = (uint64_t)&v316;
          *(_QWORD *)&v306 = v96;
          goto LABEL_228;
        }
        v76 = *(_QWORD *)(a1 + 16);
        if (v275.i64[0] < v76)
          goto LABEL_160;
        v77 = *(_QWORD *)(a1 + 24);
        if (v275.i64[0] + 40 > v76 + v77)
          goto LABEL_160;
        v78 = *(_DWORD *)(a1 + 8);
        v79 = bswap64(*(_QWORD *)(v275.i64[0] + 24));
        v80 = bswap64(*(_QWORD *)(v275.i64[0] + 32));
        if (((1 << v78) & 0x155800) == 0)
        {
          v80 = *(_QWORD *)(v275.i64[0] + 32);
          v79 = *(_QWORD *)(v275.i64[0] + 24);
        }
        if (v78 <= 0x14)
          v81 = v80;
        else
          v81 = *(_QWORD *)(v275.i64[0] + 32);
        if (v78 <= 0x14)
          v82 = v79;
        else
          v82 = *(_QWORD *)(v275.i64[0] + 24);
        if (v82 > v77)
        {
          v83 = "offset field of LC_NOTE command ";
LABEL_226:
          v316.i64[0] = (uint64_t)v83;
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v96 = " extends past the end of the file";
          goto LABEL_227;
        }
        if (v82 + v81 > v77)
        {
          v83 = "size field plus offset field of LC_NOTE command ";
          goto LABEL_226;
        }
        checkOverlappingElement(&v300, (uint64_t *)&v276, v82, v81, "LC_NOTE data");
        v35 = v300.i64[0];
        if (v300.i64[0])
          goto LABEL_569;
        goto LABEL_180;
      case 0x32:
        if (v275.i64[0] < *v264
          || (v84 = v275.i64[0] + 24, (unint64_t)(v275.i64[0] + 24) > *v264 + *(_QWORD *)(a1 + 24)))
        {
          v305.i64[0] = (uint64_t)"Structure read out-of-range";
          LOWORD(v307) = 259;
          malformedError((const llvm::Twine *)v290, v305.i64);
LABEL_137:
          v35 = v290[0];
          goto LABEL_143;
        }
        v254 = v41;
        v98 = *(_DWORD *)(v275.i64[0] + 20);
        v99 = *(_DWORD *)(a1 + 8);
        v100 = bswap32(*(_DWORD *)(v275.i64[0] + 8));
        LODWORD(v101) = bswap32(v98);
        if (((1 << v99) & 0x155800) == 0)
        {
          LODWORD(v101) = *(_DWORD *)(v275.i64[0] + 20);
          v100 = *(_DWORD *)(v275.i64[0] + 8);
        }
        if (v99 <= 0x14)
          v101 = v101;
        else
          v101 = v98;
        if (v99 <= 0x14)
          v102 = v100;
        else
          v102 = *(_DWORD *)(v275.i64[0] + 8);
        v103 = 8 * v101;
        if (v103 + 24 == v275.u32[3])
        {
          v244 = v102;
          v249 = v101;
          llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)v19, v101);
          if (v249)
          {
            v104 = 0;
            do
            {
              *(_QWORD *)(*v19 + v104) = v84 + v104;
              v104 += 8;
            }
            while (v103 != v104);
          }
          if (v263)
          {
            v41 = v254;
            if ((v262 & 0x8000000) == 0 && v259)
            {
              v105 = "more than two LC_BUILD_VERSION load commands";
LABEL_431:
              v305.i64[0] = (uint64_t)v105;
              LOWORD(v307) = 259;
LABEL_432:
              malformedError((const llvm::Twine *)v290, v305.i64);
              goto LABEL_137;
            }
            v259 = v275.i64[0];
            v294 = 0;
            v293 = 0;
            v295 = 0;
            getStruct<llvm::MachO::encryption_info_command_64>((uint64_t)&v293, a1, v263);
            if ((_DWORD)v294 != 6 && (_DWORD)v294 != 1
              || (_DWORD)v294 == 1 && v244 != 6
              || (_DWORD)v294 == 6 && v244 != 1)
            {
              if ((v262 & 0x8000000) == 0)
              {
                v105 = "the two LC_BUILD_VERSION load commands are not for the platforms MACOS and MACCATALYST";
                goto LABEL_431;
              }
              if (v244 - 6 >= 4 && v244 != 1)
              {
                v300.i64[0] = (uint64_t)"the LC_BUILD_VERSION, command ";
                LOWORD(v302) = 259;
                LOWORD(v313) = 264;
                v311.i32[0] = v46;
                llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
                v297[0] = (uint64_t)", platform value is not allowed when the mach header flag MH_SIM_SUPPORT is set";
                v299 = 259;
                llvm::operator+(v316.i64, v297, (uint64_t)&v305);
                goto LABEL_432;
              }
            }
LABEL_180:
            *a5 = 0;
            goto LABEL_144;
          }
          v263 = (__int128 *)v275.i64[0];
          v41 = v254;
          if ((v262 & 0x8000000) == 0 || v244 - 6 < 4)
            goto LABEL_180;
          if (v244 == 1)
          {
            v41 = v254;
            goto LABEL_180;
          }
          v300.i64[0] = (uint64_t)"the LC_BUILD_VERSION, command ";
          LOWORD(v302) = 259;
          LOWORD(v313) = 264;
          v311.i32[0] = v46;
          llvm::operator+(v300.i64, v311.i64, (uint64_t)&v316);
          v297[0] = (uint64_t)", platform value is not allowed when the mach header flag MH_SIM_SUPPORT is set";
          v299 = 259;
          llvm::operator+(v316.i64, v297, (uint64_t)&v305);
        }
        else
        {
          v316.i64[0] = (uint64_t)"load command ";
          *(_QWORD *)&v317 = v46;
          LOWORD(v318) = 2051;
          v305.i64[0] = (uint64_t)&v316;
          *(_QWORD *)&v306 = " LC_BUILD_VERSION_COMMAND has incorrect cmdsize";
          LOWORD(v307) = 770;
        }
        malformedError((const llvm::Twine *)v290, v305.i64);
        v41 = v254;
        goto LABEL_137;
      default:
        goto LABEL_138;
    }
  }
}

uint64_t malformedError(const llvm::Twine *a1, uint64_t *a2)
{
  int v3;
  llvm::formatv_object_base *v4;
  char v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[4];
  __int16 v12;
  llvm::formatv_object_base *v13[4];
  char v14;
  char v15;

  v3 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    if (v3 == 1)
    {
      v4 = (llvm::formatv_object_base *)"truncated or malformed object (";
      v11[0] = "truncated or malformed object (";
      v12 = 259;
      v5 = 3;
    }
    else
    {
      v7 = (uint64_t *)*a2;
      v8 = a2[1];
      v5 = 2;
      if (*((_BYTE *)a2 + 33) != 1)
      {
        LOBYTE(v3) = 2;
        v7 = a2;
      }
      v11[0] = "truncated or malformed object (";
      v11[2] = v7;
      v11[3] = v8;
      LOBYTE(v12) = 3;
      HIBYTE(v12) = v3;
      v4 = (llvm::formatv_object_base *)v11;
    }
    v13[0] = v4;
    v13[2] = (llvm::formatv_object_base *)")";
    v6 = 3;
  }
  else
  {
    v5 = 0;
    v12 = 256;
    v6 = 1;
  }
  v14 = v5;
  v15 = v6;
  v9 = operator new();
  result = llvm::object::GenericBinaryError::GenericBinaryError(v9, v13, 3u);
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t checkLinkeditDataCommand(llvm::Twine *a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, _BYTE *a6, uint64_t *a7, _BYTE *a8)
{
  __int128 *v10;
  char v11;
  __int128 *v12;
  int v14;
  const char *v15;
  char v16;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t *v36;
  char v37;
  __int16 v38;
  const char *v39;
  char v40;
  char v41;
  const char *v42;
  const char *v43;
  __int16 v44;
  uint64_t v45[4];
  __int16 v46;
  const char *v47;
  __int16 v48;
  uint64_t v49[4];
  char v50;
  char v51;
  const char *v52;
  __int16 v53;
  uint64_t v54[2];
  unint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63[2];
  const char *v64;
  __int16 v65;

  if (*(_DWORD *)(a3 + 12) <= 0xFu)
  {
    v54[0] = (uint64_t)"load command ";
    v55 = a4;
    v56 = 2051;
    *(_QWORD *)&v57 = v54;
    *(_QWORD *)&v58 = " ";
    LOWORD(v59) = 770;
    if (*a6)
    {
      v10 = &v57;
      *(_QWORD *)&v60 = &v57;
      *(_QWORD *)&v61 = a6;
      LOWORD(v62) = 770;
      v11 = 2;
      v12 = &v60;
LABEL_4:
      v63[0] = (uint64_t)v12;
      v63[1] = (uint64_t)v10;
      v64 = " cmdsize too small";
      LOBYTE(v65) = v11;
LABEL_20:
      HIBYTE(v65) = 3;
      return malformedError(a1, v63);
    }
    v60 = v57;
    v61 = v58;
    v62 = v59;
    v11 = v59;
    if (v59 != 1)
    {
      v10 = (__int128 *)*((_QWORD *)&v60 + 1);
      v12 = &v60;
      if (BYTE1(v62) == 1)
        v12 = (__int128 *)v60;
      else
        v11 = 2;
      goto LABEL_4;
    }
    v63[0] = (uint64_t)" cmdsize too small";
    v38 = 259;
LABEL_56:
    v65 = v38;
    return malformedError(a1, v63);
  }
  if (*a5)
  {
    v14 = *a6;
    v15 = "more than one ";
    if (*a6)
    {
      *(_QWORD *)&v60 = "more than one ";
      *(_QWORD *)&v61 = a6;
      LOWORD(v62) = 771;
      v16 = 2;
    }
    else
    {
      *(_QWORD *)&v60 = "more than one ";
      LOWORD(v62) = 259;
      v16 = 3;
    }
    if (v14)
      v15 = (const char *)&v60;
    v63[0] = (uint64_t)v15;
    v64 = " command";
    LOBYTE(v65) = v16;
    goto LABEL_20;
  }
  v18 = *(_DWORD **)a3;
  v20 = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)a3 < v20 || *(_QWORD *)a3 + 16 > v20 + v19;
  if (v21)
  {
    v63[0] = (uint64_t)"Structure read out-of-range";
    v65 = 259;
    result = malformedError((const llvm::Twine *)&v60, v63);
    *(_QWORD *)a1 = v60;
    return result;
  }
  v23 = v18[1];
  v24 = v18[2];
  v25 = v18[3];
  v26 = *(_DWORD *)(a2 + 8);
  v21 = v26 > 0x14;
  v27 = (1 << v26) & 0x155800;
  v28 = v21 || v27 == 0;
  v29 = bswap32(v23);
  v30 = bswap32(v24);
  v31 = bswap32(v25);
  if (v28)
    v32 = v25;
  else
    v32 = v31;
  if (v28)
    v33 = v24;
  else
    v33 = v30;
  if (v28)
    v34 = v23;
  else
    v34 = v29;
  if (v34 != 16)
  {
    if (*a6)
    {
      *(_QWORD *)&v57 = a6;
      *(_QWORD *)&v58 = " command ";
      LOWORD(v59) = 771;
      v39 = (const char *)&v57;
      v40 = 2;
    }
    else
    {
      v39 = " command ";
      *(_QWORD *)&v57 = " command ";
      LOWORD(v59) = 259;
      v40 = 3;
    }
    *(_QWORD *)&v60 = v39;
    *(_QWORD *)&v61 = a4;
    LOBYTE(v62) = v40;
    BYTE1(v62) = 8;
    v42 = " has incorrect cmdsize";
LABEL_55:
    v63[0] = (uint64_t)&v60;
    v64 = v42;
    v38 = 770;
    goto LABEL_56;
  }
  if (v19 < v33)
  {
    v35 = *a6;
    v36 = (uint64_t *)"dataoff field of ";
    if (*a6)
    {
      v54[0] = (uint64_t)"dataoff field of ";
      v55 = (unint64_t)a6;
      v56 = 771;
      v37 = 2;
    }
    else
    {
      v54[0] = (uint64_t)"dataoff field of ";
      v56 = 259;
      v37 = 3;
    }
    if (v35)
      v36 = v54;
    *(_QWORD *)&v57 = v36;
    *(_QWORD *)&v58 = " command ";
    LOBYTE(v59) = v37;
    BYTE1(v59) = 3;
    *(_QWORD *)&v60 = &v57;
    *(_QWORD *)&v61 = a4;
    LOWORD(v62) = 2050;
    v42 = " extends past the end of the file";
    goto LABEL_55;
  }
  if (v33 + v32 > v19)
  {
    v52 = "dataoff field plus datasize field of ";
    v53 = 259;
    v41 = 1;
    v51 = 1;
    if (*a6)
    {
      v49[0] = (uint64_t)a6;
      v41 = 3;
    }
    v50 = v41;
    llvm::operator+((uint64_t *)&v52, v49, (uint64_t)v54);
    v47 = " command ";
    v48 = 259;
    llvm::operator+(v54, (uint64_t *)&v47, (uint64_t)&v57);
    v46 = 264;
    LODWORD(v45[0]) = a4;
    llvm::operator+((uint64_t *)&v57, v45, (uint64_t)&v60);
    v43 = " extends past the end of the file";
    v44 = 259;
    llvm::operator+((uint64_t *)&v60, (uint64_t *)&v43, (uint64_t)v63);
    return malformedError(a1, v63);
  }
  result = (uint64_t)checkOverlappingElement(a1, a7, v33, v32, a8);
  if (!*(_QWORD *)a1)
  {
    *a5 = *(_QWORD *)a3;
    *(_QWORD *)a1 = 0;
  }
  return result;
}

uint64_t checkDyldInfoCommand(llvm::Twine *a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5, _BYTE *a6, uint64_t *a7)
{
  __int128 *v10;
  char v11;
  __int128 *v12;
  const char *v14;
  __int16 v15;
  uint64_t result;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t *v48;
  char v49;
  const char *v50;
  char v51;
  const char *v52;
  char v53;
  const char *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  const char *v59;
  __int16 v60;
  uint64_t v61[4];
  __int16 v62;
  const char *v63;
  __int16 v64;
  uint64_t v65[4];
  char v66;
  char v67;
  const char *v68;
  __int16 v69;
  uint64_t v70[2];
  unint64_t v71;
  __int16 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79[2];
  const char *v80;
  __int16 v81;

  if (*(_DWORD *)(a3 + 12) <= 0x2Fu)
  {
    v70[0] = (uint64_t)"load command ";
    v71 = a4;
    v72 = 2051;
    *(_QWORD *)&v73 = v70;
    *(_QWORD *)&v74 = " ";
    LOWORD(v75) = 770;
    if (*a6)
    {
      v10 = &v73;
      *(_QWORD *)&v76 = &v73;
      *(_QWORD *)&v77 = a6;
      LOWORD(v78) = 770;
      v11 = 2;
      v12 = &v76;
LABEL_4:
      v79[0] = (uint64_t)v12;
      v79[1] = (uint64_t)v10;
      v80 = " cmdsize too small";
      LOBYTE(v81) = v11;
      HIBYTE(v81) = 3;
      return malformedError(a1, v79);
    }
    v76 = v73;
    v77 = v74;
    v78 = v75;
    v11 = v75;
    if (v75 != 1)
    {
      v10 = (__int128 *)*((_QWORD *)&v76 + 1);
      v12 = &v76;
      if (BYTE1(v78) == 1)
        v12 = (__int128 *)v76;
      else
        v11 = 2;
      goto LABEL_4;
    }
    v14 = " cmdsize too small";
    goto LABEL_7;
  }
  if (*a5)
  {
    v14 = "more than one LC_DYLD_INFO and or LC_DYLD_INFO_ONLY command";
LABEL_7:
    v79[0] = (uint64_t)v14;
    v15 = 259;
LABEL_8:
    v81 = v15;
    return malformedError(a1, v79);
  }
  v18 = *(_DWORD **)a3;
  v20 = *(_QWORD *)(a2 + 16);
  v19 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)a3 < v20 || *(_QWORD *)a3 + 48 > v20 + v19)
  {
    v79[0] = (uint64_t)"Structure read out-of-range";
    v81 = 259;
    result = malformedError((const llvm::Twine *)&v76, v79);
    *(_QWORD *)a1 = v76;
    return result;
  }
  v24 = v18[1];
  v23 = v18[2];
  v25 = v18[3];
  v26 = v18[4];
  v27 = v18[5];
  v28 = v18[6];
  v29 = v18[7];
  v30 = v18[8];
  v32 = v18[9];
  v31 = v18[10];
  v33 = v18[11];
  v34 = *(_DWORD *)(a2 + 8);
  if (v34 <= 0x14)
  {
    v35 = ((1 << v34) & 0x155800) == 0;
    v36 = bswap32(v24);
    v37 = bswap32(v23);
    v38 = bswap32(v25);
    v39 = bswap32(v26);
    v40 = bswap32(v27);
    v41 = bswap32(v28);
    v42 = bswap32(v29);
    v43 = bswap32(v30);
    v44 = bswap32(v32);
    v45 = bswap32(v31);
    v46 = bswap32(v33);
    if (!v35)
    {
      v33 = v46;
      v31 = v45;
      v32 = v44;
      v30 = v43;
      v29 = v42;
      v28 = v41;
      v27 = v40;
      v26 = v39;
      v25 = v38;
      v23 = v37;
      v24 = v36;
    }
  }
  if (v24 != 48)
  {
    if (*a6)
    {
      *(_QWORD *)&v73 = a6;
      *(_QWORD *)&v74 = " command ";
      LOWORD(v75) = 771;
      v50 = (const char *)&v73;
      v51 = 2;
    }
    else
    {
      v50 = " command ";
      *(_QWORD *)&v73 = " command ";
      LOWORD(v75) = 259;
      v51 = 3;
    }
    *(_QWORD *)&v76 = v50;
    *(_QWORD *)&v77 = a4;
    LOBYTE(v78) = v51;
    BYTE1(v78) = 8;
    v54 = " has incorrect cmdsize";
    goto LABEL_46;
  }
  if (v19 < v23)
  {
    v47 = *a6;
    v48 = (uint64_t *)"rebase_off field of ";
    if (*a6)
    {
      v70[0] = (uint64_t)"rebase_off field of ";
      v71 = (unint64_t)a6;
      v72 = 771;
      v49 = 2;
    }
    else
    {
      v70[0] = (uint64_t)"rebase_off field of ";
      v72 = 259;
      v49 = 3;
    }
    if (v47)
      v48 = v70;
    *(_QWORD *)&v73 = v48;
    *(_QWORD *)&v74 = " command ";
    LOBYTE(v75) = v49;
    BYTE1(v75) = 3;
    *(_QWORD *)&v76 = &v73;
    *(_QWORD *)&v77 = a4;
    LOWORD(v78) = 2050;
    v54 = " extends past the end of the file";
LABEL_46:
    v79[0] = (uint64_t)&v76;
    v80 = v54;
    v15 = 770;
    goto LABEL_8;
  }
  if (v23 + (unint64_t)v25 > v19)
  {
    v52 = "rebase_off field plus rebase_size field of ";
LABEL_34:
    v68 = v52;
    v69 = 259;
    v53 = 1;
    v67 = 1;
    if (*a6)
    {
      v65[0] = (uint64_t)a6;
      v53 = 3;
    }
    v66 = v53;
    llvm::operator+((uint64_t *)&v68, v65, (uint64_t)v70);
    v63 = " command ";
    v64 = 259;
    llvm::operator+(v70, (uint64_t *)&v63, (uint64_t)&v73);
    v62 = 264;
    LODWORD(v61[0]) = a4;
    llvm::operator+((uint64_t *)&v73, v61, (uint64_t)&v76);
    v59 = " extends past the end of the file";
    v60 = 259;
    llvm::operator+((uint64_t *)&v76, (uint64_t *)&v59, (uint64_t)v79);
    return malformedError(a1, v79);
  }
  v57 = v32;
  v55 = v33;
  v56 = v31;
  v58 = v19;
  result = (uint64_t)checkOverlappingElement(a1, a7, v23, v25, "dyld rebase info");
  if (!*(_QWORD *)a1)
  {
    if (v58 < v26)
    {
      v52 = "bind_off field of ";
      goto LABEL_34;
    }
    if (v26 + (unint64_t)v27 > v58)
    {
      v52 = "bind_off field plus bind_size field of ";
      goto LABEL_34;
    }
    result = (uint64_t)checkOverlappingElement(a1, a7, v26, v27, "dyld bind info");
    if (!*(_QWORD *)a1)
    {
      if (v58 < v28)
      {
        v52 = "weak_bind_off field of ";
        goto LABEL_34;
      }
      if (v28 + (unint64_t)v29 > v58)
      {
        v52 = "weak_bind_off field plus weak_bind_size field of ";
        goto LABEL_34;
      }
      result = (uint64_t)checkOverlappingElement(a1, a7, v28, v29, "dyld weak bind info");
      if (!*(_QWORD *)a1)
      {
        if (v58 < v30)
        {
          v52 = "lazy_bind_off field of ";
          goto LABEL_34;
        }
        if (v30 + (unint64_t)v57 > v58)
        {
          v52 = "lazy_bind_off field plus lazy_bind_size field of ";
          goto LABEL_34;
        }
        result = (uint64_t)checkOverlappingElement(a1, a7, v30, v57, "dyld lazy bind info");
        if (!*(_QWORD *)a1)
        {
          if (v58 < v56)
          {
            v52 = "export_off field of ";
            goto LABEL_34;
          }
          if (v56 + (unint64_t)v55 > v58)
          {
            v52 = "export_off field plus export_size field of ";
            goto LABEL_34;
          }
          result = (uint64_t)checkOverlappingElement(a1, a7, v56, v55, "dyld export info");
          if (!*(_QWORD *)a1)
          {
            *a5 = *(_QWORD *)a3;
            *(_QWORD *)a1 = 0;
          }
        }
      }
    }
  }
  return result;
}

const llvm::Twine *checkDylibCommand(const llvm::Twine *result, uint64_t a2, unint64_t *a3, unsigned int a4, _BYTE *a5)
{
  const llvm::Twine *v5;
  __int128 *v6;
  char v7;
  const char *v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  __int128 *v20;
  const char *v21;
  BOOL v22;
  unsigned int v23;
  unsigned __int8 *v24;
  __int128 *v26;
  const char *v27;
  const char *v28;
  __int128 *v29;
  const char *v30;
  _QWORD v31[2];
  uint64_t v32;
  __int16 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  const char *v40;
  __int128 *v41;
  const char *v42;
  __int16 v43;

  v5 = result;
  if (*((_DWORD *)a3 + 3) > 0x17u)
  {
    v10 = *a3;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *a3 < v11 || *a3 + 24 > v11 + *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v40 = "Structure read out-of-range";
      v43 = 259;
      result = (const llvm::Twine *)malformedError((const llvm::Twine *)&v37, (uint64_t *)&v40);
      *(_QWORD *)v5 = v37;
      return result;
    }
    v13 = *(_DWORD *)(v10 + 4);
    v14 = *(_DWORD *)(v10 + 8);
    v15 = *(_DWORD *)(a2 + 8);
    v12 = v15 > 0x14;
    v16 = (1 << v15) & 0x155800;
    v17 = v12 || v16 == 0;
    v18 = bswap32(v13);
    v19 = bswap32(v14);
    if (!v17)
    {
      v14 = v19;
      v13 = v18;
    }
    if (v14 > 0x17)
    {
      v22 = v13 >= v14;
      v23 = v13 - v14;
      if (v23 != 0 && v22)
      {
        v24 = (unsigned __int8 *)(v10 + v14);
        do
        {
          if (!*v24++)
          {
            *(_QWORD *)result = 0;
            return result;
          }
          --v23;
        }
        while (v23);
        v31[0] = "load command ";
        v32 = a4;
        v33 = 2051;
        *(_QWORD *)&v34 = v31;
        *(_QWORD *)&v35 = " ";
        LOWORD(v36) = 770;
        if (*a5)
        {
          v26 = &v34;
          *(_QWORD *)&v37 = &v34;
          *(_QWORD *)&v38 = a5;
          LOWORD(v39) = 770;
          v7 = 2;
          v27 = (const char *)&v37;
LABEL_30:
          v40 = v27;
          v41 = v26;
          v9 = " library name extends past the end of the load command";
          goto LABEL_5;
        }
        v37 = v34;
        v38 = v35;
        v39 = v36;
        v7 = v36;
        if (v36 != 1)
        {
          v26 = (__int128 *)*((_QWORD *)&v37 + 1);
          v27 = (const char *)&v37;
          if (BYTE1(v39) == 1)
            v27 = (const char *)v37;
          else
            v7 = 2;
          goto LABEL_30;
        }
        v28 = " library name extends past the end of the load command";
        goto LABEL_32;
      }
      v31[0] = "load command ";
      v32 = a4;
      v33 = 2051;
      *(_QWORD *)&v34 = v31;
      *(_QWORD *)&v35 = " ";
      LOWORD(v36) = 770;
      if (*a5)
      {
        v29 = &v34;
        *(_QWORD *)&v37 = &v34;
        *(_QWORD *)&v38 = a5;
        LOWORD(v39) = 770;
        v7 = 2;
        v30 = (const char *)&v37;
      }
      else
      {
        v37 = v34;
        v38 = v35;
        v39 = v36;
        v7 = v36;
        if (v36 == 1)
        {
          v28 = " name.offset field extends past the end of the load command";
          goto LABEL_32;
        }
        v29 = (__int128 *)*((_QWORD *)&v37 + 1);
        v30 = (const char *)&v37;
        if (BYTE1(v39) == 1)
          v30 = (const char *)v37;
        else
          v7 = 2;
      }
      v40 = v30;
      v41 = v29;
      v9 = " name.offset field extends past the end of the load command";
      goto LABEL_5;
    }
    v31[0] = "load command ";
    v32 = a4;
    v33 = 2051;
    *(_QWORD *)&v34 = v31;
    *(_QWORD *)&v35 = " ";
    LOWORD(v36) = 770;
    if (*a5)
    {
      v20 = &v34;
      *(_QWORD *)&v37 = &v34;
      *(_QWORD *)&v38 = a5;
      LOWORD(v39) = 770;
      v7 = 2;
      v21 = (const char *)&v37;
    }
    else
    {
      v37 = v34;
      v38 = v35;
      v39 = v36;
      v7 = v36;
      if (v36 == 1)
      {
        v28 = " name.offset field too small, not past the end of the dylib_command struct";
        goto LABEL_32;
      }
      v20 = (__int128 *)*((_QWORD *)&v37 + 1);
      v21 = (const char *)&v37;
      if (BYTE1(v39) == 1)
        v21 = (const char *)v37;
      else
        v7 = 2;
    }
    v40 = v21;
    v41 = v20;
    v9 = " name.offset field too small, not past the end of the dylib_command struct";
    goto LABEL_5;
  }
  v31[0] = "load command ";
  v32 = a4;
  v33 = 2051;
  *(_QWORD *)&v34 = v31;
  *(_QWORD *)&v35 = " ";
  LOWORD(v36) = 770;
  if (!*a5)
  {
    v37 = v34;
    v38 = v35;
    v39 = v36;
    v7 = v36;
    if (v36 != 1)
    {
      v6 = (__int128 *)*((_QWORD *)&v37 + 1);
      v8 = (const char *)&v37;
      if (BYTE1(v39) == 1)
        v8 = (const char *)v37;
      else
        v7 = 2;
      goto LABEL_4;
    }
    v28 = " cmdsize too small";
LABEL_32:
    v40 = v28;
    v43 = 259;
    return (const llvm::Twine *)malformedError(result, (uint64_t *)&v40);
  }
  v6 = &v34;
  *(_QWORD *)&v37 = &v34;
  *(_QWORD *)&v38 = a5;
  LOWORD(v39) = 770;
  v7 = 2;
  v8 = (const char *)&v37;
LABEL_4:
  v40 = v8;
  v41 = v6;
  v9 = " cmdsize too small";
LABEL_5:
  v42 = v9;
  LOBYTE(v43) = v7;
  HIBYTE(v43) = 3;
  return (const llvm::Twine *)malformedError(result, (uint64_t *)&v40);
}

const llvm::Twine *checkDyldCommand(const llvm::Twine *result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6)
{
  __int128 *v6;
  char v7;
  const char *v8;
  const char *v9;
  unint64_t v10;
  BOOL v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  __int128 *v20;
  const char *v21;
  BOOL v22;
  unsigned int v23;
  unsigned __int8 *v24;
  __int128 *v26;
  const char *v27;
  __int128 *v28;
  const char *v29;
  _QWORD v30[2];
  uint64_t v31;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  const char *v39;
  __int128 *v40;
  const char *v41;
  __int16 v42;

  if (a4 > 0xB)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = v10 > a3 || a3 + 12 > v10 + *(_QWORD *)(a2 + 24);
    if (!v11)
    {
      v13 = *(_DWORD *)(a3 + 4);
      v14 = *(_DWORD *)(a3 + 8);
      v15 = *(_DWORD *)(a2 + 8);
      v11 = v15 > 0x14;
      v16 = (1 << v15) & 0x155800;
      v17 = v11 || v16 == 0;
      v18 = bswap32(v13);
      v19 = bswap32(v14);
      if (!v17)
      {
        v14 = v19;
        v13 = v18;
      }
      if (v14 > 0xB)
      {
        v22 = v13 >= v14;
        v23 = v13 - v14;
        if (v23 != 0 && v22)
        {
          v24 = (unsigned __int8 *)(a3 + v14);
          do
          {
            if (!*v24++)
            {
              *(_QWORD *)result = 0;
              return result;
            }
            --v23;
          }
          while (v23);
          v30[0] = "load command ";
          v31 = a5;
          v32 = 2051;
          *(_QWORD *)&v33 = v30;
          *(_QWORD *)&v34 = " ";
          LOWORD(v35) = 770;
          if (*a6)
          {
            v26 = &v33;
            *(_QWORD *)&v36 = &v33;
            *(_QWORD *)&v37 = a6;
            LOWORD(v38) = 770;
            v7 = 2;
            v27 = (const char *)&v36;
LABEL_32:
            v39 = v27;
            v40 = v26;
            v9 = " dyld name extends past the end of the load command";
            goto LABEL_5;
          }
          v36 = v33;
          v37 = v34;
          v38 = v35;
          v7 = v35;
          if (v35 != 1)
          {
            v26 = (__int128 *)*((_QWORD *)&v36 + 1);
            v27 = (const char *)&v36;
            if (BYTE1(v38) == 1)
              v27 = (const char *)v36;
            else
              v7 = 2;
            goto LABEL_32;
          }
          v12 = " dyld name extends past the end of the load command";
          goto LABEL_12;
        }
        v30[0] = "load command ";
        v31 = a5;
        v32 = 2051;
        *(_QWORD *)&v33 = v30;
        *(_QWORD *)&v34 = " ";
        LOWORD(v35) = 770;
        if (*a6)
        {
          v28 = &v33;
          *(_QWORD *)&v36 = &v33;
          *(_QWORD *)&v37 = a6;
          LOWORD(v38) = 770;
          v7 = 2;
          v29 = (const char *)&v36;
        }
        else
        {
          v36 = v33;
          v37 = v34;
          v38 = v35;
          v7 = v35;
          if (v35 == 1)
          {
            v12 = " name.offset field extends past the end of the load command";
            goto LABEL_12;
          }
          v28 = (__int128 *)*((_QWORD *)&v36 + 1);
          v29 = (const char *)&v36;
          if (BYTE1(v38) == 1)
            v29 = (const char *)v36;
          else
            v7 = 2;
        }
        v39 = v29;
        v40 = v28;
        v9 = " name.offset field extends past the end of the load command";
        goto LABEL_5;
      }
      v30[0] = "load command ";
      v31 = a5;
      v32 = 2051;
      *(_QWORD *)&v33 = v30;
      *(_QWORD *)&v34 = " ";
      LOWORD(v35) = 770;
      if (*a6)
      {
        v20 = &v33;
        *(_QWORD *)&v36 = &v33;
        *(_QWORD *)&v37 = a6;
        LOWORD(v38) = 770;
        v7 = 2;
        v21 = (const char *)&v36;
      }
      else
      {
        v36 = v33;
        v37 = v34;
        v38 = v35;
        v7 = v35;
        if (v35 == 1)
        {
          v12 = " name.offset field too small, not past the end of the dylinker_command struct";
          goto LABEL_12;
        }
        v20 = (__int128 *)*((_QWORD *)&v36 + 1);
        v21 = (const char *)&v36;
        if (BYTE1(v38) == 1)
          v21 = (const char *)v36;
        else
          v7 = 2;
      }
      v39 = v21;
      v40 = v20;
      v9 = " name.offset field too small, not past the end of the dylinker_command struct";
      goto LABEL_5;
    }
    v12 = "Structure read out-of-range";
LABEL_12:
    v39 = v12;
    v42 = 259;
    return (const llvm::Twine *)malformedError(result, (uint64_t *)&v39);
  }
  v30[0] = "load command ";
  v31 = a5;
  v32 = 2051;
  *(_QWORD *)&v33 = v30;
  *(_QWORD *)&v34 = " ";
  LOWORD(v35) = 770;
  if (!*a6)
  {
    v36 = v33;
    v37 = v34;
    v38 = v35;
    v7 = v35;
    if (v35 != 1)
    {
      v6 = (__int128 *)*((_QWORD *)&v36 + 1);
      v8 = (const char *)&v36;
      if (BYTE1(v38) == 1)
        v8 = (const char *)v36;
      else
        v7 = 2;
      goto LABEL_4;
    }
    v12 = " cmdsize too small";
    goto LABEL_12;
  }
  v6 = &v33;
  *(_QWORD *)&v36 = &v33;
  *(_QWORD *)&v37 = a6;
  LOWORD(v38) = 770;
  v7 = 2;
  v8 = (const char *)&v36;
LABEL_4:
  v39 = v8;
  v40 = v6;
  v9 = " cmdsize too small";
LABEL_5:
  v41 = v9;
  LOBYTE(v42) = v7;
  HIBYTE(v42) = 3;
  return (const llvm::Twine *)malformedError(result, (uint64_t *)&v39);
}

const llvm::Twine *checkVersCommand(const llvm::Twine *result, uint64_t a2, int a3, unsigned int a4, _QWORD *a5, _BYTE *a6)
{
  const char *v6;
  __int128 *v7;
  char v8;
  __int128 *v9;
  _QWORD v10[4];
  __int16 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18[4];
  __int16 v19;

  if (a3 != 16)
  {
    v10[0] = "load command ";
    v10[2] = a4;
    v11 = 2051;
    *(_QWORD *)&v12 = v10;
    *(_QWORD *)&v13 = " ";
    LOWORD(v14) = 770;
    if (*a6)
    {
      v7 = &v12;
      *(_QWORD *)&v15 = &v12;
      *(_QWORD *)&v16 = a6;
      LOWORD(v17) = 770;
      v8 = 2;
      v9 = &v15;
    }
    else
    {
      v15 = v12;
      v16 = v13;
      v17 = v14;
      v8 = v14;
      if (v14 == 1)
      {
        v6 = " has incorrect cmdsize";
        goto LABEL_4;
      }
      v7 = (__int128 *)*((_QWORD *)&v15 + 1);
      v9 = &v15;
      if (BYTE1(v17) == 1)
        v9 = (__int128 *)v15;
      else
        v8 = 2;
    }
    v18[0] = (uint64_t)v9;
    v18[1] = (uint64_t)v7;
    v18[2] = (uint64_t)" has incorrect cmdsize";
    LOBYTE(v19) = v8;
    HIBYTE(v19) = 3;
    return (const llvm::Twine *)malformedError(result, v18);
  }
  if (*a5)
  {
    v6 = "more than one LC_VERSION_MIN_MACOSX, LC_VERSION_MIN_IPHONEOS, LC_VERSION_MIN_TVOS or LC_VERSION_MIN_WATCHOS command";
LABEL_4:
    v18[0] = (uint64_t)v6;
    v19 = 259;
    return (const llvm::Twine *)malformedError(result, v18);
  }
  *a5 = a2;
  *(_QWORD *)result = 0;
  return result;
}

int8x16_t getStruct<llvm::MachO::encryption_info_command>(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  unint64_t v3;
  BOOL v4;
  int8x16_t result;
  unsigned int v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 > (unint64_t)a3 || (unint64_t)a3[1].u64 + 4 > v3 + *(_QWORD *)(a2 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  result = *a3;
  *a1 = *a3;
  a1[1].i32[0] = a3[1].i32[0];
  v6 = *(_DWORD *)(a2 + 8);
  v4 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  if (!v4 && v7 != 0)
  {
    result = vrev32q_s8(*a1);
    *a1 = result;
    a1[1].i32[0] = bswap32(a1[1].u32[0]);
  }
  return result;
}

const llvm::Twine *checkEncryptCommand(const llvm::Twine *result, unint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, uint64_t a6, _QWORD *a7, _BYTE *a8)
{
  __int16 v8;
  int v9;
  const char *v10;
  char v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  char v15;
  char v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;

  if (!*a7)
  {
    if (a2 >= a5)
    {
      if (a6 + a5 <= a2)
      {
        *a7 = a3;
        *(_QWORD *)result = 0;
        return result;
      }
      v9 = *a8;
      v10 = "cryptoff field plus cryptsize field of ";
      if (*a8)
        goto LABEL_5;
    }
    else
    {
      v9 = *a8;
      v10 = "cryptoff field of ";
      if (*a8)
      {
LABEL_5:
        v12[0] = v10;
        v12[2] = a8;
        v13 = 771;
        v11 = 2;
LABEL_9:
        if (v9)
          v10 = (const char *)v12;
        v14[0] = v10;
        v14[2] = " command ";
        v15 = v11;
        v16 = 3;
        v17[0] = v14;
        v17[2] = a4;
        v18 = 2050;
        v19[0] = (uint64_t)v17;
        v19[2] = (uint64_t)" extends past the end of the file";
        v8 = 770;
        goto LABEL_12;
      }
    }
    v12[0] = v10;
    v13 = 259;
    v11 = 3;
    goto LABEL_9;
  }
  v19[0] = (uint64_t)"more than one LC_ENCRYPTION_INFO and or LC_ENCRYPTION_INFO_64 command";
  v8 = 259;
LABEL_12:
  v20 = v8;
  return (const llvm::Twine *)malformedError(result, v19);
}

double getStruct<llvm::MachO::encryption_info_command_64>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  __int128 v5;
  unsigned int v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = v3 > (unint64_t)a3 || (unint64_t)a3 + 24 > v3 + *(_QWORD *)(a2 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v5 = *a3;
  *(_OWORD *)a1 = *a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
  v6 = *(_DWORD *)(a2 + 8);
  v4 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  if (!v4 && v7 != 0)
  {
    *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
    *(int8x8_t *)&v5 = vrev32_s8(*(int8x8_t *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = v5;
  }
  return *(double *)&v5;
}

const llvm::Twine *checkLinkerOptCommand(const llvm::Twine *result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5)
{
  const llvm::Twine *v6;
  __int16 v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  _QWORD v27[2];
  uint64_t v28;
  __int16 v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;
  _QWORD v33[2];
  uint64_t v34;
  __int16 v35;
  const char *v36;
  const char *v37;
  __int16 v38;

  v6 = result;
  if (a4 <= 0xB)
  {
    v33[0] = "load command ";
    v34 = a5;
    v35 = 2051;
    v36 = (const char *)v33;
    v37 = " LC_LINKER_OPTION cmdsize too small";
    v7 = 770;
LABEL_6:
    v38 = v7;
    return (const llvm::Twine *)malformedError(v6, (uint64_t *)&v36);
  }
  v8 = *(_QWORD *)(a2 + 16);
  if (v8 > a3 || (v9 = (_BYTE *)(a3 + 12), a3 + 12 > v8 + *(_QWORD *)(a2 + 24)))
  {
    v36 = "Structure read out-of-range";
    v7 = 259;
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(a3 + 4);
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *(_DWORD *)(a2 + 8);
  v13 = v12 > 0x14;
  v14 = (1 << v12) & 0x155800;
  v15 = v13 || v14 == 0;
  v16 = bswap32(v10);
  v17 = bswap32(v11);
  if (v15)
    v18 = v11;
  else
    v18 = v17;
  if (!v15)
    v10 = v16;
  LODWORD(v19) = 0;
  v20 = v10 - 12;
  if (v10 != 12)
  {
    do
    {
      if (!*v9)
      {
        do
        {
          v21 = v20;
          v22 = *++v9;
          --v20;
          if (v22)
            v23 = 1;
          else
            v23 = v21 == 1;
        }
        while (!v23);
        if (v21 == 1)
          break;
      }
      v19 = (v19 + 1);
      result = (const llvm::Twine *)memchr(v9, 0, v20);
      if (!result || (v24 = (_DWORD)result - (_DWORD)v9, (_DWORD)result - (_DWORD)v9 == -1))
      {
        v27[0] = "load command ";
        v28 = a5;
        v29 = 2051;
        v30[0] = v27;
        v31 = " LC_LINKER_OPTION string #";
        v7 = 770;
        v32 = 770;
        v33[0] = v30;
        v34 = v19;
        v35 = 2050;
        v26 = " is not NULL terminated";
        goto LABEL_32;
      }
      if (v20 < v24)
        v24 = v20;
      v25 = v24 + 1;
      v9 += v25;
      v20 -= v25;
    }
    while (v20);
  }
  if ((_DWORD)v18 != (_DWORD)v19)
  {
    v27[0] = "load command ";
    v28 = a5;
    v29 = 2051;
    v30[0] = v27;
    v31 = " LC_LINKER_OPTION string count ";
    v7 = 770;
    v32 = 770;
    v33[0] = v30;
    v34 = v18;
    v35 = 2050;
    v26 = " does not match number of strings";
LABEL_32:
    v36 = (const char *)v33;
    v37 = v26;
    goto LABEL_6;
  }
  *(_QWORD *)v6 = 0;
  return result;
}

uint64_t getStruct<llvm::MachO::sub_framework_command>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > a2 || a2 + 12 > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a1 + 8);
  v3 = v5 > 0x14;
  v6 = (1 << v5) & 0x155800;
  v7 = v3 || v6 == 0;
  v8 = bswap32(v4);
  if (v7)
    return v4;
  else
    return v8;
}

const llvm::Twine *checkSubCommand(const llvm::Twine *result, uint64_t a2, unsigned int a3, unsigned int a4, _BYTE *a5, _BYTE *a6, unsigned int a7, _BYTE *a8)
{
  const char *v8;
  __int128 *v9;
  char v10;
  __int128 *v11;
  char v12;
  int v13;
  unsigned __int8 *v14;
  const char *v16;
  __int128 *v17;
  char v18;
  __int128 *v19;
  char v20;
  const char *v21;
  __int128 *v22;
  char v23;
  __int128 *v24;
  char v25;
  __int128 *v26;
  char v27;
  __int128 *v28;
  const char *v29;
  __int128 *v30;
  _QWORD v31[4];
  __int16 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if (a7 > 0xB)
  {
    v13 = a3 - a7;
    if (a3 > a7)
    {
      v14 = (unsigned __int8 *)(a2 + a7);
      do
      {
        if (!*v14++)
        {
          *(_QWORD *)result = 0;
          return result;
        }
        --v13;
      }
      while (v13);
      *(_QWORD *)&v33 = "load command ";
      *(_QWORD *)&v34 = a4;
      LOWORD(v35) = 2051;
      v16 = " ";
      *(_QWORD *)&v36 = &v33;
      *(_QWORD *)&v37 = " ";
      LOWORD(v38) = 770;
      if (*a5)
      {
        v17 = &v36;
        *(_QWORD *)&v39 = &v36;
        *(_QWORD *)&v40 = a5;
        LOWORD(v41) = 770;
        v18 = 2;
        v19 = &v39;
      }
      else
      {
        v39 = v36;
        v40 = v37;
        v41 = v38;
        v18 = v38;
        if (v38 == 1)
        {
          *(_QWORD *)&v42 = " ";
          LOWORD(v44) = 259;
          if (*a8)
          {
            v20 = 3;
            goto LABEL_15;
          }
LABEL_52:
          v45 = v42;
          v46 = v43;
          v47 = v44;
          v20 = v44;
          goto LABEL_53;
        }
        v17 = (__int128 *)*((_QWORD *)&v39 + 1);
        v19 = &v39;
        if (BYTE1(v41) == 1)
          v19 = (__int128 *)v39;
        else
          v18 = 2;
      }
      *(_QWORD *)&v42 = v19;
      *((_QWORD *)&v42 + 1) = v17;
      *(_QWORD *)&v43 = " ";
      LOBYTE(v44) = v18;
      BYTE1(v44) = 3;
      if (*a8)
      {
        v20 = 2;
        v16 = (const char *)&v42;
LABEL_15:
        *(_QWORD *)&v45 = v16;
        *(_QWORD *)&v46 = a8;
        LOBYTE(v47) = v20;
        BYTE1(v47) = 3;
LABEL_53:
        if (BYTE1(v47) == 1)
          v27 = v20;
        else
          v27 = 2;
        v30 = &v45;
        if (BYTE1(v47) == 1)
          v30 = (__int128 *)v45;
        *(_QWORD *)&v48 = v30;
        *((_QWORD *)&v48 + 1) = *((_QWORD *)&v45 + 1);
        v29 = " name extends past the end of the load command";
LABEL_59:
        *(_QWORD *)&v49 = v29;
        goto LABEL_60;
      }
      goto LABEL_52;
    }
    *(_QWORD *)&v33 = "load command ";
    *(_QWORD *)&v34 = a4;
    LOWORD(v35) = 2051;
    v21 = " ";
    *(_QWORD *)&v36 = &v33;
    *(_QWORD *)&v37 = " ";
    LOWORD(v38) = 770;
    if (*a5)
    {
      v22 = &v36;
      *(_QWORD *)&v39 = &v36;
      *(_QWORD *)&v40 = a5;
      LOWORD(v41) = 770;
      v23 = 2;
      v24 = &v39;
    }
    else
    {
      v39 = v36;
      v40 = v37;
      v41 = v38;
      v23 = v38;
      if (v38 == 1)
      {
        *(_QWORD *)&v42 = " ";
        LOWORD(v44) = 259;
        if (*a8)
        {
          v25 = 3;
          goto LABEL_20;
        }
LABEL_43:
        v45 = v42;
        v46 = v43;
        v47 = v44;
        v25 = v44;
        goto LABEL_44;
      }
      v22 = (__int128 *)*((_QWORD *)&v39 + 1);
      v24 = &v39;
      if (BYTE1(v41) == 1)
        v24 = (__int128 *)v39;
      else
        v23 = 2;
    }
    *(_QWORD *)&v42 = v24;
    *((_QWORD *)&v42 + 1) = v22;
    *(_QWORD *)&v43 = " ";
    LOBYTE(v44) = v23;
    BYTE1(v44) = 3;
    if (*a8)
    {
      v25 = 2;
      v21 = (const char *)&v42;
LABEL_20:
      *(_QWORD *)&v45 = v21;
      *(_QWORD *)&v46 = a8;
      LOBYTE(v47) = v25;
      BYTE1(v47) = 3;
LABEL_44:
      if (BYTE1(v47) == 1)
        v27 = v25;
      else
        v27 = 2;
      v28 = &v45;
      if (BYTE1(v47) == 1)
        v28 = (__int128 *)v45;
      *(_QWORD *)&v48 = v28;
      *((_QWORD *)&v48 + 1) = *((_QWORD *)&v45 + 1);
      v29 = ".offset field extends past the end of the load command";
      goto LABEL_59;
    }
    goto LABEL_43;
  }
  v31[0] = "load command ";
  v31[2] = a4;
  v32 = 2051;
  v8 = " ";
  *(_QWORD *)&v33 = v31;
  *(_QWORD *)&v34 = " ";
  LOWORD(v35) = 770;
  if (*a5)
  {
    v9 = &v33;
    *(_QWORD *)&v36 = &v33;
    *(_QWORD *)&v37 = a5;
    LOWORD(v38) = 770;
    v10 = 2;
    v11 = &v36;
    goto LABEL_4;
  }
  v36 = v33;
  v37 = v34;
  v38 = v35;
  v10 = v35;
  if (v35 != 1)
  {
    v9 = (__int128 *)*((_QWORD *)&v36 + 1);
    v11 = &v36;
    if (BYTE1(v38) == 1)
      v11 = (__int128 *)v36;
    else
      v10 = 2;
LABEL_4:
    *(_QWORD *)&v39 = v11;
    *((_QWORD *)&v39 + 1) = v9;
    *(_QWORD *)&v40 = " ";
    LOBYTE(v41) = v10;
    BYTE1(v41) = 3;
    if (*a8)
    {
      v12 = 2;
      v8 = (const char *)&v39;
LABEL_6:
      *(_QWORD *)&v42 = v8;
      *(_QWORD *)&v43 = a8;
      LOBYTE(v44) = v12;
      BYTE1(v44) = 3;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(_QWORD *)&v39 = " ";
  LOWORD(v41) = 259;
  if (*a8)
  {
    v12 = 3;
    goto LABEL_6;
  }
LABEL_30:
  v42 = v39;
  v43 = v40;
  v44 = v41;
  v12 = v41;
LABEL_31:
  v26 = (__int128 *)v42;
  v27 = 2;
  if (BYTE1(v44) != 1)
  {
    v12 = 2;
    v26 = &v42;
  }
  *(_QWORD *)&v45 = v26;
  *((_QWORD *)&v45 + 1) = *((_QWORD *)&v42 + 1);
  *(_QWORD *)&v46 = ".offset field too small, not past the end of the ";
  LOBYTE(v47) = v12;
  BYTE1(v47) = 3;
  if (*a6)
  {
    *(_QWORD *)&v48 = &v45;
    *(_QWORD *)&v49 = a6;
LABEL_60:
    LOBYTE(v50) = v27;
    BYTE1(v50) = 3;
    return (const llvm::Twine *)malformedError(result, (uint64_t *)&v48);
  }
  v48 = v45;
  v49 = v46;
  v50 = v47;
  return (const llvm::Twine *)malformedError(result, (uint64_t *)&v48);
}

uint64_t checkThreadCommand(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6)
{
  const llvm::Twine *v7;
  uint64_t v8;
  char v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  unsigned int *v13;
  const char *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  char v39;
  uint64_t *v40;
  const char *v41;
  char v42;
  const char *v43;
  __int16 v44;
  uint64_t v45[4];
  char v46;
  char v47;
  const char *v48;
  __int16 v49;
  uint64_t v50[4];
  __int16 v51;
  uint64_t v52[4];
  __int16 v53;
  uint64_t v54[2];
  uint64_t v55;
  __int16 v56;
  uint64_t v57[2];
  const char *v58;
  __int16 v59;
  uint64_t v60[2];
  uint64_t v61;
  __int16 v62;
  uint64_t v63[2];
  const char *v64;
  __int16 v65;
  uint64_t v66[2];
  uint64_t v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  __int16 v78;

  v7 = (const llvm::Twine *)result;
  if (a4 <= 7)
  {
    *(_QWORD *)&v69 = "load command ";
    *(_QWORD *)&v70 = a5;
    LOWORD(v71) = 2051;
    v8 = *a6;
    if (*a6)
    {
      *(_QWORD *)&v72 = &v69;
      *(_QWORD *)&v73 = a6;
      LOWORD(v74) = 770;
      v9 = 2;
      v10 = (const char *)&v72;
LABEL_4:
      v75 = v10;
      v76 = v8;
      v11 = " cmdsize too small";
      goto LABEL_5;
    }
    v72 = v69;
    v73 = v70;
    v74 = v71;
    v9 = v71;
    if (v71 != 1)
    {
      v8 = *((_QWORD *)&v72 + 1);
      v10 = (const char *)&v72;
      if (BYTE1(v74) == 1)
        v10 = (const char *)v72;
      else
        v9 = 2;
      goto LABEL_4;
    }
    v14 = " cmdsize too small";
LABEL_9:
    v75 = v14;
    v78 = 259;
    return malformedError(v7, (uint64_t *)&v75);
  }
  v12 = *(_QWORD *)(a2 + 16);
  if (v12 > a3 || (v13 = (unsigned int *)(a3 + 8), a3 + 8 > v12 + *(_QWORD *)(a2 + 24)))
  {
    v14 = "Structure read out-of-range";
    goto LABEL_9;
  }
  v15 = *(_DWORD *)(a3 + 4);
  v16 = *(_DWORD *)(a2 + 8);
  v17 = v16 > 0x14 || ((1 << v16) & 0x155800) == 0;
  v18 = bswap32(v15);
  if (!v17)
    v15 = v18;
  if (v15 < 9)
  {
LABEL_75:
    *(_QWORD *)v7 = 0;
    return result;
  }
  v19 = 0;
  v20 = a3 + v15;
  v21 = *(unsigned int *)(a2 + 52);
  result = 33554444;
  while (1)
  {
    if ((unint64_t)(v13 + 1) > v20)
    {
      v66[0] = (uint64_t)"load command ";
      v67 = a5;
      v68 = 2051;
      v26 = "flavor in ";
      goto LABEL_82;
    }
    LODWORD(v22) = *v13;
    v23 = bswap32(*v13);
    if (((1 << v16) & 0x155800) == 0)
      v23 = *v13;
    if (v16 <= 0x14)
      v22 = v23;
    else
      v22 = v22;
    if ((unint64_t)(v13 + 2) > v20)
    {
      v66[0] = (uint64_t)"load command ";
      v67 = a5;
      v68 = 2051;
      v26 = " count in ";
LABEL_82:
      *(_QWORD *)&v69 = v66;
      *(_QWORD *)&v70 = v26;
      v27 = 770;
      LOWORD(v71) = 770;
      if (*a6)
      {
        *(_QWORD *)&v72 = &v69;
        *(_QWORD *)&v73 = a6;
        LOWORD(v74) = 770;
        v9 = 2;
        v28 = (const char *)&v72;
      }
      else
      {
        v72 = v69;
        v73 = v70;
        v74 = v71;
        v9 = v71;
        if (v71 == 1)
        {
          v14 = " extends past end of command";
          goto LABEL_9;
        }
        v27 = *((_QWORD *)&v72 + 1);
        v28 = (const char *)&v72;
        if (BYTE1(v74) == 1)
          v28 = (const char *)v72;
        else
          v9 = 2;
      }
      v75 = v28;
      v76 = v27;
      v11 = " extends past end of command";
      goto LABEL_5;
    }
    v24 = v13[1];
    v25 = bswap32(v24);
    if (((1 << v16) & 0x155800) == 0)
      v25 = v13[1];
    if (v16 <= 0x14)
      v24 = v25;
    if ((int)v21 <= 16777222)
    {
      if ((_DWORD)v21 != 7)
      {
        if ((_DWORD)v21 != 12)
        {
          if ((_DWORD)v21 != 18)
            goto LABEL_91;
          if ((_DWORD)v22 != 1)
          {
LABEL_89:
            v54[0] = (uint64_t)"load command ";
            v55 = a5;
            v56 = 2051;
            v57[0] = (uint64_t)v54;
            v58 = " unknown flavor (";
            v34 = 770;
            v59 = 770;
            v60[0] = (uint64_t)v57;
            v61 = v22;
            v62 = 2050;
            v63[0] = (uint64_t)v60;
            v64 = ") for flavor number ";
            v65 = 770;
            v66[0] = (uint64_t)v63;
            v67 = v19;
            v68 = 2050;
            v29 = " in ";
            goto LABEL_101;
          }
          if (v24 == 40)
          {
            v13 += 42;
            if ((unint64_t)v13 > v20)
            {
              v66[0] = (uint64_t)"load command ";
              v67 = a5;
              v68 = 2051;
              v33 = " PPC_THREAD_STATE extends past end of command in ";
              goto LABEL_106;
            }
            goto LABEL_61;
          }
          v60[0] = (uint64_t)"load command ";
          v61 = a5;
          v62 = 2051;
          v63[0] = (uint64_t)v60;
          v64 = " count not PPC_THREAD_STATE_COUNT for flavor number ";
          v34 = 770;
          v65 = 770;
          v66[0] = (uint64_t)v63;
          v67 = v19;
          v68 = 2050;
          v29 = " which is a PPC_THREAD_STATE flavor in ";
LABEL_101:
          *(_QWORD *)&v69 = v66;
          *(_QWORD *)&v70 = v29;
          goto LABEL_107;
        }
        if ((_DWORD)v22 != 1)
          goto LABEL_89;
        if (v24 != 17)
        {
          v60[0] = (uint64_t)"load command ";
          v61 = a5;
          v62 = 2051;
          v63[0] = (uint64_t)v60;
          v64 = " count not ARM_THREAD_STATE_COUNT for flavor number ";
          v34 = 770;
          v65 = 770;
          v66[0] = (uint64_t)v63;
          v67 = v19;
          v68 = 2050;
          v29 = " which is a ARM_THREAD_STATE flavor in ";
          goto LABEL_101;
        }
        v13 += 19;
        if ((unint64_t)v13 > v20)
        {
          v66[0] = (uint64_t)"load command ";
          v67 = a5;
          v68 = 2051;
          v33 = " ARM_THREAD_STATE extends past end of command in ";
          goto LABEL_106;
        }
        goto LABEL_61;
      }
      if ((_DWORD)v22 == 1)
      {
        if (v24 == 16)
        {
          v13 += 18;
          if ((unint64_t)v13 <= v20)
            goto LABEL_61;
          v66[0] = (uint64_t)"load command ";
          v67 = a5;
          v68 = 2051;
          *(_QWORD *)&v69 = v66;
          *(_QWORD *)&v70 = " x86_THREAD_STATE32 extends past end of command in ";
          v34 = 770;
          goto LABEL_103;
        }
        v60[0] = (uint64_t)"load command ";
        v61 = a5;
        v62 = 2051;
        v63[0] = (uint64_t)v60;
        v64 = " count not x86_THREAD_STATE32_COUNT for flavor number ";
        v34 = 770;
        v65 = 770;
        v66[0] = (uint64_t)v63;
        v67 = v19;
        v68 = 2050;
        v32 = " which is a x86_THREAD_STATE32 flavor in ";
      }
      else
      {
        v54[0] = (uint64_t)"load command ";
        v55 = a5;
        v56 = 2051;
        v57[0] = (uint64_t)v54;
        v58 = " unknown flavor (";
        v34 = 770;
        v59 = 770;
        v60[0] = (uint64_t)v57;
        v61 = v22;
        v62 = 2050;
        v63[0] = (uint64_t)v60;
        v64 = ") for flavor number ";
        v65 = 770;
        v66[0] = (uint64_t)v63;
        v67 = v19;
        v68 = 2050;
        v32 = " in ";
      }
      *(_QWORD *)&v69 = v66;
      *(_QWORD *)&v70 = v32;
LABEL_103:
      LOWORD(v71) = 770;
      if (*a6)
        goto LABEL_108;
      v72 = v69;
      v73 = v70;
      v74 = v71;
      v9 = v71;
      if (v71 != 1)
      {
        v35 = BYTE1(v74);
        v34 = *((_QWORD *)&v72 + 1);
        v36 = (const char *)v72;
        goto LABEL_112;
      }
      goto LABEL_115;
    }
    if ((_DWORD)v21 == 16777223)
    {
      switch((int)v22)
      {
        case 4:
          if (v24 == 42)
          {
            v13 += 44;
            if ((unint64_t)v13 <= v20)
              goto LABEL_61;
            v63[0] = (uint64_t)"load command ";
            v65 = 259;
            v62 = 264;
            LODWORD(v60[0]) = a5;
            llvm::operator+(v63, v60, (uint64_t)v66);
            v41 = " x86_THREAD_STATE64 extends past end of command in ";
LABEL_128:
            v57[0] = (uint64_t)v41;
            v59 = 259;
            llvm::operator+(v66, v57, (uint64_t)&v69);
            v42 = 1;
            HIBYTE(v56) = 1;
            if (*a6)
            {
              v54[0] = (uint64_t)a6;
              v42 = 3;
            }
            LOBYTE(v56) = v42;
            llvm::operator+((uint64_t *)&v69, v54, (uint64_t)&v72);
            v52[0] = (uint64_t)" command";
            v53 = 259;
            v40 = v52;
          }
          else
          {
            v57[0] = (uint64_t)"load command ";
            v59 = 259;
            v56 = 264;
            LODWORD(v54[0]) = a5;
            llvm::operator+(v57, v54, (uint64_t)v60);
            v52[0] = (uint64_t)" count not x86_THREAD_STATE64_COUNT for flavor number ";
            v53 = 259;
            llvm::operator+(v60, v52, (uint64_t)v63);
            v51 = 264;
            LODWORD(v50[0]) = v19;
            llvm::operator+(v63, v50, (uint64_t)v66);
            v38 = " which is a x86_THREAD_STATE64 flavor in ";
LABEL_125:
            v48 = v38;
            v49 = 259;
            llvm::operator+(v66, (uint64_t *)&v48, (uint64_t)&v69);
            v39 = 1;
            v47 = 1;
            if (*a6)
            {
              v45[0] = (uint64_t)a6;
              v39 = 3;
            }
            v46 = v39;
            llvm::operator+((uint64_t *)&v69, v45, (uint64_t)&v72);
            v43 = " command";
            v44 = 259;
            v40 = (uint64_t *)&v43;
          }
          llvm::operator+((uint64_t *)&v72, v40, (uint64_t)&v75);
          return malformedError(v7, (uint64_t *)&v75);
        case 6:
          if (v24 == 4)
          {
            v13 += 6;
            if ((unint64_t)v13 <= v20)
              goto LABEL_61;
            v63[0] = (uint64_t)"load command ";
            v65 = 259;
            v62 = 264;
            LODWORD(v60[0]) = a5;
            llvm::operator+(v63, v60, (uint64_t)v66);
            v41 = " x86_EXCEPTION_STATE64 extends past end of command in ";
            goto LABEL_128;
          }
          v57[0] = (uint64_t)"load command ";
          v59 = 259;
          v56 = 264;
          LODWORD(v54[0]) = a5;
          llvm::operator+(v57, v54, (uint64_t)v60);
          v52[0] = (uint64_t)" count not x86_EXCEPTION_STATE64_COUNT for flavor number ";
          v53 = 259;
          llvm::operator+(v60, v52, (uint64_t)v63);
          v51 = 264;
          LODWORD(v50[0]) = v19;
          llvm::operator+(v63, v50, (uint64_t)v66);
          v38 = " which is a x86_EXCEPTION_STATE64 flavor in ";
          goto LABEL_125;
        case 7:
          if (v24 == 44)
          {
            v13 += 46;
            if ((unint64_t)v13 <= v20)
              goto LABEL_61;
            v63[0] = (uint64_t)"load command ";
            v65 = 259;
            v62 = 264;
            LODWORD(v60[0]) = a5;
            llvm::operator+(v63, v60, (uint64_t)v66);
            v41 = " x86_THREAD_STATE extends past end of command in ";
            goto LABEL_128;
          }
          v57[0] = (uint64_t)"load command ";
          v59 = 259;
          v56 = 264;
          LODWORD(v54[0]) = a5;
          llvm::operator+(v57, v54, (uint64_t)v60);
          v52[0] = (uint64_t)" count not x86_THREAD_STATE_COUNT for flavor number ";
          v53 = 259;
          llvm::operator+(v60, v52, (uint64_t)v63);
          v51 = 264;
          LODWORD(v50[0]) = v19;
          llvm::operator+(v63, v50, (uint64_t)v66);
          v38 = " which is a x86_THREAD_STATE flavor in ";
          goto LABEL_125;
        case 8:
          if (v24 == 133)
          {
            v13 += 135;
            if ((unint64_t)v13 <= v20)
              goto LABEL_61;
            v63[0] = (uint64_t)"load command ";
            v65 = 259;
            v62 = 264;
            LODWORD(v60[0]) = a5;
            llvm::operator+(v63, v60, (uint64_t)v66);
            v41 = " x86_FLOAT_STATE extends past end of command in ";
            goto LABEL_128;
          }
          v57[0] = (uint64_t)"load command ";
          v59 = 259;
          v56 = 264;
          LODWORD(v54[0]) = a5;
          llvm::operator+(v57, v54, (uint64_t)v60);
          v52[0] = (uint64_t)" count not x86_FLOAT_STATE_COUNT for flavor number ";
          v53 = 259;
          llvm::operator+(v60, v52, (uint64_t)v63);
          v51 = 264;
          LODWORD(v50[0]) = v19;
          llvm::operator+(v63, v50, (uint64_t)v66);
          v38 = " which is a x86_FLOAT_STATE flavor in ";
          goto LABEL_125;
        case 9:
          if (v24 == 6)
          {
            v13 += 8;
            if ((unint64_t)v13 <= v20)
              goto LABEL_61;
            v63[0] = (uint64_t)"load command ";
            v65 = 259;
            v62 = 264;
            LODWORD(v60[0]) = a5;
            llvm::operator+(v63, v60, (uint64_t)v66);
            v41 = " x86_EXCEPTION_STATE extends past end of command in ";
            goto LABEL_128;
          }
          v57[0] = (uint64_t)"load command ";
          v59 = 259;
          v56 = 264;
          LODWORD(v54[0]) = a5;
          llvm::operator+(v57, v54, (uint64_t)v60);
          v52[0] = (uint64_t)" count not x86_EXCEPTION_STATE_COUNT for flavor number ";
          v53 = 259;
          llvm::operator+(v60, v52, (uint64_t)v63);
          v51 = 264;
          LODWORD(v50[0]) = v19;
          llvm::operator+(v63, v50, (uint64_t)v66);
          v38 = " which is a x86_EXCEPTION_STATE flavor in ";
          goto LABEL_125;
        default:
          goto LABEL_89;
      }
    }
    if ((_DWORD)v21 != 16777228 && (_DWORD)v21 != 33554444)
    {
LABEL_91:
      v60[0] = (uint64_t)"unknown cputype (";
      v61 = v21;
      v62 = 2051;
      v63[0] = (uint64_t)v60;
      v64 = ") load command ";
      v30 = 770;
      v65 = 770;
      v66[0] = (uint64_t)v63;
      v67 = a5;
      v68 = 2050;
      *(_QWORD *)&v69 = v66;
      *(_QWORD *)&v70 = " for ";
      LOWORD(v71) = 770;
      if (*a6)
      {
        *(_QWORD *)&v72 = &v69;
        *(_QWORD *)&v73 = a6;
        LOWORD(v74) = 770;
        v9 = 2;
        v31 = (const char *)&v72;
      }
      else
      {
        v72 = v69;
        v73 = v70;
        v74 = v71;
        v9 = v71;
        if (v71 == 1)
        {
          v14 = " command can't be checked";
          goto LABEL_9;
        }
        v30 = *((_QWORD *)&v72 + 1);
        v31 = (const char *)&v72;
        if (BYTE1(v74) == 1)
          v31 = (const char *)v72;
        else
          v9 = 2;
      }
      v75 = v31;
      v76 = v30;
      v11 = " command can't be checked";
      goto LABEL_5;
    }
    if ((_DWORD)v22 != 7)
    {
      if ((_DWORD)v22 != 6)
        goto LABEL_89;
      if (v24 != 68)
      {
        v60[0] = (uint64_t)"load command ";
        v61 = a5;
        v62 = 2051;
        v63[0] = (uint64_t)v60;
        v64 = " count not ARM_THREAD_STATE64_COUNT for flavor number ";
        v34 = 770;
        v65 = 770;
        v66[0] = (uint64_t)v63;
        v67 = v19;
        v68 = 2050;
        v29 = " which is a ARM_THREAD_STATE64 flavor in ";
        goto LABEL_101;
      }
      v13 += 70;
      if ((unint64_t)v13 > v20)
      {
        v66[0] = (uint64_t)"load command ";
        v67 = a5;
        v68 = 2051;
        v33 = " ARM_THREAD_STATE64 extends past end of command in ";
        goto LABEL_106;
      }
      goto LABEL_61;
    }
    if (v24 != 4)
    {
      v60[0] = (uint64_t)"load command ";
      v61 = a5;
      v62 = 2051;
      v63[0] = (uint64_t)v60;
      v64 = " count not ARM_EXCEPTION_STATE64_COUNT for flavor number ";
      v34 = 770;
      v65 = 770;
      v66[0] = (uint64_t)v63;
      v67 = v19;
      v68 = 2050;
      v29 = " which is a ARM_EXCEPTION_STATE64 flavor in ";
      goto LABEL_101;
    }
    v13 += 6;
    if ((unint64_t)v13 > v20)
      break;
LABEL_61:
    ++v19;
    if ((unint64_t)v13 >= v20)
      goto LABEL_75;
  }
  v66[0] = (uint64_t)"load command ";
  v67 = a5;
  v68 = 2051;
  v33 = " ARM_EXCEPTION_STATE64 extends past end of command in ";
LABEL_106:
  *(_QWORD *)&v69 = v66;
  *(_QWORD *)&v70 = v33;
  v34 = 770;
LABEL_107:
  LOWORD(v71) = 770;
  if (*a6)
  {
LABEL_108:
    *(_QWORD *)&v72 = &v69;
    *(_QWORD *)&v73 = a6;
    LOWORD(v74) = 770;
    v9 = 2;
    v37 = (const char *)&v72;
    goto LABEL_109;
  }
  v72 = v69;
  v73 = v70;
  v74 = v71;
  v9 = v71;
  if (v71 == 1)
  {
LABEL_115:
    v14 = " command";
    goto LABEL_9;
  }
  v34 = *((_QWORD *)&v72 + 1);
  v36 = (const char *)v72;
  v35 = BYTE1(v74);
LABEL_112:
  v17 = v35 == 1;
  v37 = (const char *)&v72;
  if (v17)
    v37 = v36;
  else
    v9 = 2;
LABEL_109:
  v75 = v37;
  v76 = v34;
  v11 = " command";
LABEL_5:
  v77 = v11;
  LOBYTE(v78) = v9;
  HIBYTE(v78) = 3;
  return malformedError(v7, (uint64_t *)&v75);
}

_QWORD *checkTwoLevelHintsCommand(llvm::Twine *a1, uint64_t a2, unint64_t *a3, unsigned int a4, unint64_t *a5, uint64_t *a6)
{
  const char *v8;
  const char *v9;
  __int16 v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;

  if (*((_DWORD *)a3 + 3) != 16)
  {
    v26 = "load command ";
    v27 = a4;
    v28 = 2051;
    v9 = " LC_TWOLEVEL_HINTS has incorrect cmdsize";
LABEL_5:
    v29[0] = (uint64_t)&v26;
    v29[2] = (uint64_t)v9;
    v10 = 770;
LABEL_13:
    v30 = v10;
    return (_QWORD *)malformedError(a1, v29);
  }
  if (*a5)
  {
    v8 = "more than one LC_TWOLEVEL_HINTS command";
LABEL_12:
    v29[0] = (uint64_t)v8;
    v10 = 259;
    goto LABEL_13;
  }
  v12 = *a3;
  v14 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v15 = *a3 < v14 || *a3 + 16 > v14 + v13;
  if (v15)
  {
    v8 = "Structure read out-of-range";
    goto LABEL_12;
  }
  v18 = *(_DWORD *)(v12 + 8);
  v17 = *(_DWORD *)(v12 + 12);
  v19 = *(_DWORD *)(a2 + 8);
  v15 = v19 > 0x14;
  v20 = (1 << v19) & 0x155800;
  v21 = v15 || v20 == 0;
  v22 = bswap32(v18);
  v23 = bswap32(v17);
  if (v21)
  {
    v24 = v18;
  }
  else
  {
    v17 = v23;
    v24 = v22;
  }
  if (v13 < v24)
  {
    v25 = "offset field of LC_TWOLEVEL_HINTS command ";
LABEL_25:
    v26 = v25;
    v27 = a4;
    v28 = 2051;
    v9 = " extends past the end of the file";
    goto LABEL_5;
  }
  if (v24 + 4 * v17 > v13)
  {
    v25 = "offset field plus nhints times sizeof(struct twolevel_hint) field of LC_TWOLEVEL_HINTS command ";
    goto LABEL_25;
  }
  result = checkOverlappingElement(a1, a6, v24, 4 * v17, "two level hints");
  if (!*(_QWORD *)a1)
  {
    *a5 = *a3;
    *(_QWORD *)a1 = 0;
  }
  return result;
}

uint64_t getStruct<llvm::MachO::version_min_command>(uint64_t a1, _DWORD *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 4) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  LODWORD(v4) = *a2;
  LODWORD(v5) = a2[1];
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = bswap32(v5);
  if (v8)
    v4 = v4;
  else
    v4 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 | (v5 << 32);
}

double getStruct<llvm::MachO::symtab_command>@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  BOOL v4;
  __int128 v5;
  unsigned int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 > (unint64_t)a2 || (unint64_t)a2 + 24 > v3 + *(_QWORD *)(a1 + 24);
  if (v4)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v5 = *a2;
  *(_OWORD *)a3 = *a2;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)a2 + 2);
  v6 = *(_DWORD *)(a1 + 8);
  v4 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  if (!v4 && v7 != 0)
  {
    *(int8x16_t *)a3 = vrev32q_s8(*(int8x16_t *)a3);
    *(int8x8_t *)&v5 = vrev32_s8(*(int8x8_t *)(a3 + 16));
    *(_QWORD *)(a3 + 16) = v5;
  }
  return *(double *)&v5;
}

int8x16_t getStruct<llvm::MachO::dysymtab_command>@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  unint64_t v3;
  int8x16_t v5;
  int8x16_t result;
  unsigned int v7;
  int8x16_t v8;
  int8x16_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 > (unint64_t)a2 || (unint64_t)&a2[5] > v3 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v5 = a2[3];
  a3[2] = a2[2];
  a3[3] = v5;
  a3[4] = a2[4];
  result = a2[1];
  *a3 = *a2;
  a3[1] = result;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x14 && ((1 << v7) & 0x155800) != 0)
  {
    v8 = vrev32q_s8(a3[1]);
    *a3 = vrev32q_s8(*a3);
    a3[1] = v8;
    v9 = vrev32q_s8(a3[3]);
    a3[2] = vrev32q_s8(a3[2]);
    a3[3] = v9;
    result = vrev32q_s8(a3[4]);
    a3[4] = result;
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbol64TableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 2) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v4 = *a2;
  v5 = HIWORD(*a2);
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = __rev16(v5);
  if (v8)
    v11 = v4;
  else
    v11 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::getSymbolTableEntry(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)a2 + 12 > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v4 = *a2;
  v5 = HIWORD(*a2);
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  v8 = v3 || v7 == 0;
  v9 = bswap32(v4);
  v10 = __rev16(v5);
  if (v8)
    v11 = v4;
  else
    v11 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 & 0xFFFF00000000 | (v5 << 48) | v11;
}

uint64_t llvm::object::MachOObjectFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 12;
  if ((_DWORD)result)
    v4 = 16;
  *a2 += v4;
  return result;
}

size_t llvm::object::MachOObjectFile::getSymbolName@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t result;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  char v15;
  unint64_t SymbolIndex;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21[2];
  unint64_t *p_SymbolIndex;
  __int16 v23;

  v6 = (__int128 *)a1[34];
  if (v6)
  {
    v21[0] = 0;
    v21[1] = 0;
    p_SymbolIndex = 0;
    getStruct<llvm::MachO::symtab_command>((uint64_t)a1, v6, (uint64_t)v21);
    v7 = p_SymbolIndex;
  }
  else
  {
    v7 = 0;
  }
  v8 = a1[2];
  v9 = a1[3];
  result = getSymbolTableEntryBase((uint64_t)a1, a2);
  if (!(_DWORD)result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v15 = *(_BYTE *)(a3 + 16) & 0xFE;
    goto LABEL_15;
  }
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = (const char *)(v8 + result + v11);
  v13 = a1[2];
  if ((unint64_t)v12 < v13 || (unint64_t)v12 >= v13 + a1[3])
  {
    v17[0] = "bad string index: ";
    v17[2] = result;
    v18 = 2051;
    v19[0] = v17;
    v19[2] = " for symbol at index ";
    v20 = 770;
    SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex(a1, (uint64_t)a2);
    v21[0] = (uint64_t)v19;
    p_SymbolIndex = &SymbolIndex;
    v23 = 3074;
    result = malformedError((const llvm::Twine *)a3, v21);
    v15 = *(_BYTE *)(a3 + 16) | 1;
LABEL_15:
    *(_BYTE *)(a3 + 16) = v15;
    return result;
  }
  if (v8)
    result = strlen(v12);
  else
    result = 0;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t getSymbolTableEntryBase(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 > (unint64_t)a2 || (unint64_t)(a2 + 1) > v2 + *(_QWORD *)(a1 + 24);
  if (v3)
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v4 = *a2;
  v5 = HIWORD(*a2);
  v6 = *(_DWORD *)(a1 + 8);
  v3 = v6 > 0x14;
  v7 = (1 << v6) & 0x155800;
  v8 = v3 || v7 == 0;
  LODWORD(v9) = bswap32(v4);
  v10 = __rev16(v5);
  if (v8)
    v9 = v4;
  else
    v9 = v9;
  if (v8)
    v5 = v5;
  else
    v5 = v10;
  return v4 & 0xFFFF00000000 | (v5 << 48) | v9;
}

unint64_t llvm::object::MachOObjectFile::getSymbolIndex(_QWORD *a1, uint64_t a2)
{
  __int128 *v3;
  double v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (__int128 *)a1[34];
  if (!v3
    || (v9 = 0,
        v10 = 0,
        v11 = 0,
        v5 = getStruct<llvm::MachO::symtab_command>((uint64_t)a1, v3, (uint64_t)&v9),
        !a1[34]))
  {
    llvm::report_fatal_error((llvm *)"getSymbolIndex() called with no symbol table symbol", (const llvm::Twine *)1);
  }
  v6 = (*(uint64_t (**)(_QWORD *, double))(*a1 + 64))(a1, v5);
  v7 = 12;
  if (v6)
    v7 = 16;
  return (a2 - (a1[2] + (unint64_t)v10)) / v7;
}

uint64_t getSectionFlags(_QWORD *a1, unsigned int a2)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v5);
    return v9;
  }
  else
  {
    LODWORD(v9) = 0;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * a2), (uint64_t)&v5);
    return DWORD2(v8);
  }
}

uint64_t llvm::object::MachOObjectFile::getNValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    llvm::object::MachOObjectFile::getSymbol64TableEntry(a1, a2);
    return v4;
  }
  else
  {
    llvm::object::MachOObjectFile::getSymbolTableEntry(a1, a2);
    return v6;
  }
}

uint64_t llvm::object::MachOObjectFile::getSymbolAlignment(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 40))(v5);
  if ((v5[0] & 0x10) != 0)
    return (1 << (((unint64_t)getSymbolTableEntryBase(a1, a2) >> 56) & 0xF));
  else
    return 0;
}

uint64_t llvm::object::MachOObjectFile::getSymbolType@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = getSymbolTableEntryBase(a1, a2);
  if ((result & 0xE000000000) != 0)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v7 = 3;
LABEL_3:
    *(_DWORD *)a3 = v7;
    return result;
  }
  if ((BYTE4(result) & 0xE) != 0xE)
  {
    if ((result & 0xE00000000) == 0)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = 0;
      return result;
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    v7 = 1;
    goto LABEL_3;
  }
  result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(v14, a1, a2);
  if ((v15 & 1) != 0)
  {
    v13 = v14[0];
    v14[0] = 0;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v13;
  }
  else
  {
    v8 = v14[0];
    v9 = v14[1];
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
    if (v9 == v10 && v8 == result)
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      v12 = 1;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 208))(v9, v8);
      if ((result & 1) != 0
        || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 216))(v9, v8), (_DWORD)result))
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        v12 = 2;
      }
      else
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        v12 = 5;
      }
    }
    *(_DWORD *)a3 = v12;
  }
  if ((v15 & 1) != 0)
  {
    result = v14[0];
    v14[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unint64_t llvm::object::MachOObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  result = getSymbolTableEntryBase(a1, a2);
  v7 = result;
  v8 = HIDWORD(result);
  v9 = BYTE4(result) & 0xE;
  if ((result & 0xE000000000) != 0)
    v10 = (32 * ((BYTE4(result) & 0xE) == 10)) | 0x80;
  else
    v10 = 32 * ((BYTE4(result) & 0xE) == 10);
  if ((result & 0x100000000) != 0)
  {
    if ((result & 0xE00000000) != 0)
    {
      v12 = v10 | 2;
    }
    else
    {
      result = llvm::object::MachOObjectFile::getNValue(a1, a2);
      v12 = v10 | 3;
      if (result)
        v12 = v10 | 0x12;
    }
    v13 = v12 | 0x40;
    v14 = v12 | 0x200;
    if ((v8 & 0x10) != 0)
      v11 = v14;
    else
      v11 = v13;
  }
  else
  {
    v11 = v10 & 0xFFFFFDFF | (((HIDWORD(result) >> 4) & 1) << 9);
  }
  v15 = v11 | 4;
  if ((v7 & 0xC0000000000000) == 0)
    v15 = v11;
  v16 = v15 | (32 * HIWORD(v7)) & 0x100;
  if (v9 == 2)
    v16 |= 8u;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v16;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSymbolSection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t SymbolIndex;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;

  result = getSymbolTableEntryBase(a1, a2);
  if (BYTE5(result))
  {
    v7 = BYTE5(result) - 1;
    if (*(_DWORD *)(a1 + 88) <= v7)
    {
      v10[0] = "bad section index: ";
      v10[2] = BYTE5(result);
      v11 = 2307;
      v12[0] = v10;
      v12[2] = " for symbol at index ";
      v13 = 770;
      SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex((_QWORD *)a1, (uint64_t)a2);
      v14[0] = (uint64_t)v12;
      v14[2] = (uint64_t)&SymbolIndex;
      v15 = 3074;
      result = malformedError((const llvm::Twine *)a3, v14);
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = a1;
    }
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v8;
  }
  return result;
}

void llvm::object::MachOObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

size_t llvm::object::MachOObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  size_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  if (*(_BYTE *)(v4 + 15))
    result = 16;
  else
    result = strlen(*(const char **)(*(_QWORD *)(a1 + 80) + 8 * a2));
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::object::MachOObjectFile::getSectionAddress(_QWORD *a1, unsigned int a2)
{
  _BYTE v5[32];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)v5);
    return v6;
  }
  else
  {
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * a2), (uint64_t)v5);
    return v6;
  }
}

uint64_t llvm::object::MachOObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::MachOObjectFile::getSectionSize(_QWORD *a1, unsigned int a2)
{
  unint64_t result;
  unsigned int v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v9 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v9);
    result = *((_QWORD *)&v11 + 1);
    v5 = v12;
    v6 = v13;
  }
  else
  {
    LODWORD(v13) = 0;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * a2), (uint64_t)&v9);
    result = DWORD1(v11);
    v5 = DWORD2(v11);
    v6 = BYTE8(v12);
  }
  if (v6 != 1 && v6 != 12)
  {
    v7 = a1[3];
    v8 = v7 - v5;
    if (v8 >= result)
      v8 = result;
    if (v7 >= v5)
      return v8;
    else
      return 0;
  }
  return result;
}

void llvm::object::MachOObjectFile::getSectionContents(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v11 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v11);
    LODWORD(v6) = v14;
    v7 = *((_QWORD *)&v13 + 1);
  }
  else
  {
    LODWORD(v15) = 0;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * a2), (uint64_t)&v11);
    v7 = DWORD1(v13);
    LODWORD(v6) = DWORD2(v13);
  }
  v8 = a1[3];
  if (v8 >= v6)
    v6 = v6;
  else
    v6 = a1[3];
  v9 = a1[2] + v6;
  v10 = v8 - v6;
  if (v10 < v7)
    v7 = v10;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v7;
}

uint64_t llvm::object::MachOObjectFile::getSectionAlignment(_QWORD *a1, unsigned int a2)
{
  char v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)&v6);
    v4 = BYTE4(v9);
  }
  else
  {
    LODWORD(v10) = 0;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * a2), (uint64_t)&v6);
    v4 = BYTE12(v8);
  }
  return 1 << v4;
}

uint64_t llvm::object::MachOObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::isSectionText(_QWORD *a1, unsigned int a2)
{
  return getSectionFlags(a1, a2) >> 31;
}

BOOL llvm::object::MachOObjectFile::isSectionData(_QWORD *a1, unsigned int a2)
{
  int SectionFlags;
  _BOOL4 v4;

  SectionFlags = getSectionFlags(a1, a2);
  v4 = SectionFlags != 1 && SectionFlags != 12;
  return SectionFlags >= 0 && v4;
}

BOOL llvm::object::MachOObjectFile::isSectionBSS(_QWORD *a1, unsigned int a2)
{
  int SectionFlags;
  _BOOL4 v4;

  SectionFlags = getSectionFlags(a1, a2);
  v4 = SectionFlags == 1 || SectionFlags == 12;
  return SectionFlags >= 0 && v4;
}

uint64_t llvm::object::MachOObjectFile::isDebugSection(uint64_t a1)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v7);
  if ((v9 & 1) != 0)
  {
    v6 = (_QWORD *)v7;
    v7 = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v6);
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    if ((v9 & 1) != 0)
    {
      result = v7;
      v7 = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v8 < 7)
    return 0;
  if (*(_DWORD *)v7 == 1701076831 && *(_DWORD *)(v7 + 3) == 1735746149)
    return 1;
  if (v8 >= 8)
  {
    if (*(_QWORD *)v7 == 0x67756265647A5F5FLL)
      return 1;
    if (*(_DWORD *)v7 == 1885429599 && *(_DWORD *)(v7 + 3) == 1701605488)
      return 1;
    if (v8 == 11)
    {
      if (*(_QWORD *)v7 != 0x6E695F6264675F5FLL || *(_QWORD *)(v7 + 3) != 0x7865646E695F6264)
        return *(_QWORD *)v7 == 0x5F74666977735F5FLL && *(_QWORD *)(v7 + 3) == 0x7473615F74666977;
      return 1;
    }
    return 0;
  }
  return *(_DWORD *)v7 == 1885429599 && *(_DWORD *)(v7 + 3) == 1701605488;
}

BOOL llvm::object::MachOObjectFile::isSectionVirtual(_QWORD *a1, unsigned int a2)
{
  int SectionFlags;

  SectionFlags = getSectionFlags(a1, a2);
  return SectionFlags == 1 || SectionFlags == 12;
}

uint64_t llvm::object::MachOObjectFile::isSectionBitcode(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t result;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1[10] + 8 * a2);
  v5 = v4 + 16;
  if (*(_BYTE *)(v4 + 31))
    v6 = 16;
  else
    v6 = strlen((const char *)v5);
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*a1 + 144))(v12, a1, a2);
  if ((v13 & 1) != 0)
  {
    result = v12[0];
    v12[0] = 0;
    if (!result)
      return result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  if (v6 != 6)
    return 0;
  v7 = *(_DWORD *)v5 == 1280073567 && *(_WORD *)(v5 + 4) == 19798;
  v8 = !v7;
  if (v8 || v12[1] != 9)
    return 0;
  return *(_QWORD *)v12[0] == 0x646F637469625F5FLL && *(_BYTE *)(v12[0] + 8) == 101;
}

BOOL llvm::object::MachOObjectFile::isSectionStripped(_QWORD *a1, unsigned int a2)
{
  int v4;
  _BYTE v6[40];
  int v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * a2), (uint64_t)v6);
    v4 = v8;
  }
  else
  {
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * a2), (uint64_t)v6);
    v4 = v7;
  }
  return v4 == 0;
}

uint64_t llvm::object::MachOObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::MachOObjectFile::section_rel_end(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    getStruct<llvm::MachO::section_64>((uint64_t)a1, *(_OWORD **)(a1[10] + 8 * v3), (uint64_t)&v6);
    v4 = HIDWORD(v9);
  }
  else
  {
    LODWORD(v10) = 0;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    getStruct<llvm::MachO::section>((uint64_t)a1, *(_QWORD *)(a1[10] + 8 * v3), (uint64_t)&v6);
    v4 = DWORD1(v9);
  }
  return v3 | (v4 << 32);
}

void llvm::object::MachOObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::MachOObjectFile::getRelocationOffset(uint64_t a1, unint64_t a2)
{
  int Relocation;
  BOOL v4;
  unsigned int v5;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  v4 = Relocation >= 0 || *(_DWORD *)(a1 + 52) == 16777223;
  v5 = Relocation & 0xFFFFFF;
  if (v4)
    return Relocation;
  return v5;
}

uint64_t llvm::object::MachOObjectFile::getRelocation(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  int8x16_t *v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 60) == 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      getStruct<llvm::MachO::section_64>(a1, *(_OWORD **)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      v4 = DWORD2(v22);
    }
    else
    {
      LODWORD(v23) = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      getStruct<llvm::MachO::section>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2), (uint64_t)&v19);
      v4 = v22;
    }
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    v5 = *(int8x16_t **)(a1 + 280);
    if (v5)
    {
      getStruct<llvm::MachO::dysymtab_command>(a1, v5, &v19);
      v4 = v23;
      v6 = DWORD2(v23);
    }
    else
    {
      v6 = 0;
      v4 = 0;
    }
    if ((_DWORD)a2)
      v4 = v6;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (unsigned int *)(v7 + v4 + 8 * HIDWORD(a2));
  if ((unint64_t)v8 < v7 || (unint64_t)(v8 + 2) > v7 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v10 = *v8;
  v11 = v8[1];
  v12 = *(_DWORD *)(a1 + 8);
  v13 = bswap32(v10);
  v14 = bswap32(v11);
  if (((1 << v12) & 0x155800) == 0)
  {
    v13 = v10;
    v14 = v11;
  }
  v15 = v12 > 0x14;
  if (v12 <= 0x14)
    v16 = v13;
  else
    v16 = v10;
  if (v15)
    v17 = v11;
  else
    v17 = v14;
  return v16 | (v17 << 32);
}

uint64_t llvm::object::MachOObjectFile::getRelocationSymbol(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation;
  __n128 v4;
  unsigned int v6;
  int v8;
  __int128 *v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) != 16777223 && (int)Relocation < 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 > 0x14 || ((1 << v6) & 0x155800) == 0)
    v8 = HIDWORD(Relocation) & 0xFFFFFF;
  else
    v8 = HIDWORD(Relocation) >> 8;
  if (v6 > 0x14 || ((1 << v6) & 0x155800) == 0)
  {
    if (((HIDWORD(Relocation) >> 27) & 1) != 0)
      goto LABEL_15;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  }
  if ((Relocation & 0x1000000000) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
LABEL_15:
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v9 = *(__int128 **)(a1 + 272);
  if (v9)
  {
    v4.n128_f64[0] = getStruct<llvm::MachO::symtab_command>(a1, v9, (uint64_t)&v13);
    v10 = v14;
  }
  else
  {
    v10 = 0;
  }
  if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)a1 + 64))(a1, v4))
    v11 = 16;
  else
    v11 = 12;
  return *(_QWORD *)(a1 + 16) + (v10 + v11 * v8);
}

uint64_t llvm::object::MachOObjectFile::getRelocationType(uint64_t a1, unint64_t a2)
{
  uint64_t Relocation;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;

  Relocation = llvm::object::MachOObjectFile::getRelocation(a1, a2);
  if (*(_DWORD *)(a1 + 52) == 16777223 || (Relocation & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v5 > 0x14;
    v7 = (1 << v5) & 0x155800;
    v8 = v6 || v7 == 0;
    v4 = HIDWORD(Relocation) >> 28;
    if (!v8)
      return BYTE4(Relocation) & 0xF;
  }
  else
  {
    return BYTE3(Relocation) & 0xF;
  }
  return v4;
}

_QWORD *llvm::object::MachOObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  int v6;
  size_t v7;
  char *v8;
  char **v9;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
  v7 = 0;
  if (v6 <= 20)
  {
    v8 = 0;
    switch(v6)
    {
      case 0:
        goto LABEL_15;
      case 1:
        if (v5 > 9)
          goto LABEL_15;
        v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
        goto LABEL_17;
      case 2:
      case 4:
        return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v8, &v8[v7]);
      case 3:
      case 5:
        if (v5 > 0xB)
          goto LABEL_15;
        v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
        goto LABEL_17;
      default:
        v8 = 0;
        return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v8, &v8[v7]);
    }
  }
  if (v6 == 21)
  {
    if (v5 <= 0xF)
    {
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (v6 == 38)
  {
    if (v5 <= 9)
    {
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
      goto LABEL_17;
    }
LABEL_15:
    v8 = "Unknown";
    v7 = 7;
    return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v8, &v8[v7]);
  }
  v8 = 0;
  if (v6 == 37)
  {
    if (v5 <= 5)
    {
      v9 = llvm::object::MachOObjectFile::getRelocationTypeName(llvm::object::DataRefImpl,llvm::SmallVectorImpl<char> &)const::Table;
LABEL_17:
      v8 = v9[v5];
      v7 = strlen(v8);
      return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v8, &v8[v7]);
    }
    goto LABEL_15;
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v8, &v8[v7]);
}

uint64_t llvm::object::MachOObjectFile::symbol_begin(llvm::object::MachOObjectFile *this)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  getStruct<llvm::MachO::symtab_command>((uint64_t)this, v2, (uint64_t)&v5);
  if (!*((_QWORD *)this + 34) || HIDWORD(v6) == 0)
    return 0;
  else
    return llvm::object::MachOObjectFile::getSymbolByIndex(this, 0);
}

uint64_t llvm::object::MachOObjectFile::getSymbolByIndex(llvm::object::MachOObjectFile *this, unsigned int a2)
{
  __int128 *v3;
  __n128 v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (__int128 *)*((_QWORD *)this + 34);
  if (!v3
    || ((v9 = 0,
         v10 = 0,
         v11 = 0,
         v5.n128_f64[0] = getStruct<llvm::MachO::symtab_command>((uint64_t)this, v3, (uint64_t)&v9),
         *((_QWORD *)this + 34))
      ? (v6 = HIDWORD(v10) > a2)
      : (v6 = 0),
        !v6))
  {
    llvm::report_fatal_error((llvm *)"Requested symbol index is out of range.", (const llvm::Twine *)1);
  }
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *, __n128))(*(_QWORD *)this + 64))(this, v5))
    v7 = 16;
  else
    v7 = 12;
  return *((_QWORD *)this + 2) + v10 + v7 * a2;
}

uint64_t llvm::object::MachOObjectFile::symbol_end(llvm::object::MachOObjectFile *this)
{
  __int128 *v2;
  __n128 v3;
  uint64_t result;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (__int128 *)*((_QWORD *)this + 34);
  if (!v2)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v3.n128_f64[0] = getStruct<llvm::MachO::symtab_command>((uint64_t)this, v2, (uint64_t)&v8);
  result = 0;
  v5 = HIDWORD(v9);
  if (*((_QWORD *)this + 34))
    v6 = HIDWORD(v9) == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if ((*(unsigned int (**)(llvm::object::MachOObjectFile *, __n128))(*(_QWORD *)this + 64))(this, v3))
      v7 = 16;
    else
      v7 = 12;
    return *((_QWORD *)this + 2) + (v9 + v7 * v5);
  }
  return result;
}

uint64_t llvm::object::MachOObjectFile::section_begin(llvm::object::MachOObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::MachOObjectFile::section_end(llvm::object::MachOObjectFile *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t llvm::object::MachOObjectFile::getBytesInAddress(llvm::object::MachOObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 64))(this))
    return 8;
  else
    return 4;
}

const char *llvm::object::MachOObjectFile::getFileFormatName(llvm::object::MachOObjectFile *this)
{
  int v1;

  v1 = *((_DWORD *)this + 13);
  if (((*(uint64_t (**)(llvm::object::MachOObjectFile *))(*(_QWORD *)this + 64))(this) & 1) == 0)
  {
    if (v1 > 17)
    {
      if (v1 == 18)
        return "Mach-O 32-bit ppc";
      if (v1 == 33554444)
        return "Mach-O arm64 (ILP32)";
    }
    else
    {
      if (v1 == 7)
        return "Mach-O 32-bit i386";
      if (v1 == 12)
        return "Mach-O arm";
    }
    return "Mach-O 32-bit unknown";
  }
  if (v1 > 16777233)
  {
    if (v1 == 16777234)
      return "Mach-O 64-bit ppc64";
    if (v1 != 33554444)
      return "Mach-O 64-bit unknown";
    return "Mach-O arm64 (ILP32)";
  }
  if (v1 != 16777223)
  {
    if (v1 == 16777228)
      return "Mach-O arm64";
    return "Mach-O 64-bit unknown";
  }
  return "Mach-O 64-bit x86-64";
}

std::string *llvm::object::MachOObjectFile::getArchTriple@<X0>(std::string *this@<X0>, const char **a2@<X3>, int a3@<W1>, _QWORD *a4@<X2>, uint64_t a5@<X8>)
{
  const char *v6;
  llvm::formatv_object_base *v7;
  __int16 v8;

  if (a4)
    *a4 = 0;
  if (a2)
    *a2 = 0;
  if ((int)this <= 16777222)
  {
    if ((_DWORD)this == 7)
    {
      if ((a3 & 0xFFFFFF) == 3)
      {
        if (a2)
          *a2 = "i386";
        v6 = "i386-apple-darwin";
        goto LABEL_94;
      }
    }
    else
    {
      if ((_DWORD)this == 12)
      {
        switch(a3 & 0xFFFFFF)
        {
          case 5:
            if (a2)
              *a2 = "armv4t";
            v6 = "armv4t-apple-darwin";
            goto LABEL_94;
          case 6:
            if (a2)
              *a2 = "armv6";
            v6 = "armv6-apple-darwin";
            goto LABEL_94;
          case 7:
            if (a2)
              *a2 = "armv5e";
            v6 = "armv5e-apple-darwin";
            goto LABEL_94;
          case 8:
            if (a2)
              *a2 = "xscale";
            v6 = "xscale-apple-darwin";
            goto LABEL_94;
          case 9:
            if (a2)
              *a2 = "armv7";
            v6 = "armv7-apple-darwin";
            goto LABEL_94;
          case 0xB:
            if (a4)
              *a4 = "cortex-a7";
            if (a2)
              *a2 = "armv7s";
            v6 = "armv7s-apple-darwin";
            goto LABEL_94;
          case 0xC:
            if (a4)
              *a4 = "cortex-a7";
            if (a2)
              *a2 = "armv7k";
            v6 = "armv7k-apple-darwin";
            goto LABEL_94;
          case 0xE:
            if (a4)
              *a4 = "cortex-m0";
            if (a2)
              *a2 = "armv6m";
            v6 = "armv6m-apple-darwin";
            goto LABEL_94;
          case 0xF:
            if (a4)
              *a4 = "cortex-m3";
            if (a2)
              *a2 = "armv7m";
            v6 = "thumbv7m-apple-darwin";
            goto LABEL_94;
          case 0x10:
            if (a4)
              *a4 = "cortex-m4";
            if (a2)
              *a2 = "armv7em";
            v6 = "thumbv7em-apple-darwin";
            goto LABEL_94;
          default:
            goto LABEL_45;
        }
      }
      if ((_DWORD)this == 18 && (a3 & 0xFFFFFF) == 0)
      {
        if (a2)
          *a2 = "ppc";
        v6 = "ppc-apple-darwin";
        goto LABEL_94;
      }
    }
    goto LABEL_45;
  }
  if ((int)this > 16777233)
  {
    if ((_DWORD)this == 16777234)
    {
      if ((a3 & 0xFFFFFF) == 0)
      {
        if (a2)
          *a2 = "ppc64";
        v6 = "ppc64-apple-darwin";
        goto LABEL_94;
      }
    }
    else if ((_DWORD)this == 33554444 && (a3 & 0xFFFFFF) == 1)
    {
      if (a4)
        *a4 = "apple-s4";
      if (a2)
        *a2 = "arm64_32";
      v6 = "arm64_32-apple-darwin";
      goto LABEL_94;
    }
    goto LABEL_45;
  }
  if ((_DWORD)this == 16777223)
  {
    if ((a3 & 0xFFFFFF) == 8)
    {
      if (a2)
        *a2 = "x86_64h";
      v6 = "x86_64h-apple-darwin";
      goto LABEL_94;
    }
    if ((a3 & 0xFFFFFF) == 3)
    {
      if (a2)
        *a2 = "x86_64";
      v6 = "x86_64-apple-darwin";
      goto LABEL_94;
    }
    goto LABEL_45;
  }
  if ((_DWORD)this != 16777228)
    goto LABEL_45;
  if ((a3 & 0xFFFFFF) == 2)
  {
    if (a4)
      *a4 = "apple-a12";
    if (a2)
      *a2 = "arm64e";
    v6 = "arm64e-apple-darwin";
    goto LABEL_94;
  }
  if ((a3 & 0xFFFFFF) != 0)
  {
LABEL_45:
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    return this;
  }
  if (a4)
    *a4 = "cyclone";
  if (a2)
    *a2 = "arm64";
  v6 = "arm64-apple-darwin";
LABEL_94:
  v7 = (llvm::formatv_object_base *)v6;
  v8 = 259;
  return llvm::Triple::Triple((std::string *)a5, &v7);
}

uint64_t llvm::object::MachOObjectFile::getArch(llvm::object::MachOObjectFile *this)
{
  int v1;

  v1 = *((_DWORD *)this + 13);
  if (v1 > 16777222)
  {
    if (v1 > 16777233)
    {
      if (v1 == 16777234)
        return 23;
      if (v1 == 33554444)
        return 5;
    }
    else
    {
      if (v1 == 16777223)
        return 38;
      if (v1 == 16777228)
        return 3;
    }
    return 0;
  }
  if (v1 == 7)
    return 37;
  if (v1 != 12)
  {
    if (v1 == 18)
      return 21;
    return 0;
  }
  return 1;
}

int8x16_t getStruct<llvm::MachO::section>@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  __int128 v5;
  int8x16_t result;
  unsigned int v7;
  int8x16_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 > a2 || a2 + 68 > v3 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v5;
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a2 + 64);
  result = *(int8x16_t *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(int8x16_t *)(a3 + 16) = result;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x14 && ((1 << v7) & 0x155800) != 0)
  {
    result = vrev32q_s8(*(int8x16_t *)(a3 + 32));
    v8 = vrev32q_s8(*(int8x16_t *)(a3 + 48));
    *(int8x16_t *)(a3 + 32) = result;
    *(int8x16_t *)(a3 + 48) = v8;
    *(_DWORD *)(a3 + 64) = bswap32(*(_DWORD *)(a3 + 64));
  }
  return result;
}

double getStruct<llvm::MachO::section_64>@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  int8x16_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 > (unint64_t)a2 || (unint64_t)(a2 + 5) > v3 + *(_QWORD *)(a1 + 24))
    llvm::report_fatal_error((llvm *)"Malformed MachO file.", (const llvm::Twine *)1);
  v5 = a2[3];
  *(_OWORD *)(a3 + 32) = a2[2];
  *(_OWORD *)(a3 + 48) = v5;
  *(_OWORD *)(a3 + 64) = a2[4];
  v6 = a2[1];
  *(_OWORD *)a3 = *a2;
  *(_OWORD *)(a3 + 16) = v6;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 0x14 && ((1 << v7) & 0x155800) != 0)
  {
    v8 = vrev32q_s8(*(int8x16_t *)(a3 + 48));
    *(int8x16_t *)(a3 + 32) = vrev64q_s8(*(int8x16_t *)(a3 + 32));
    *(int8x16_t *)(a3 + 48) = v8;
    *(int8x8_t *)&v6 = vrev32_s8(*(int8x8_t *)(a3 + 64));
    *(_QWORD *)(a3 + 64) = v6;
    *(_DWORD *)(a3 + 72) = bswap32(*(_DWORD *)(a3 + 72));
  }
  return *(double *)&v6;
}

uint64_t getStructOrErr<llvm::MachO::section_64>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x8_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  __int128 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 80;
  v6 = v4 + *(_QWORD *)(a2 + 24);
  if (v4 <= a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v18 = "Structure read out-of-range";
    v19 = 259;
    result = malformedError((const llvm::Twine *)&v20, (uint64_t *)&v18);
    *(_BYTE *)(v3 + 80) |= 1u;
    *(_QWORD *)v3 = v20;
  }
  else
  {
    v10 = *(int8x16_t *)(a3 + 32);
    v9 = *(int8x16_t *)(a3 + 48);
    v11 = *(int8x8_t *)(a3 + 64);
    v13 = *(_DWORD *)(a3 + 72);
    v12 = *(_DWORD *)(a3 + 76);
    v14 = *(_DWORD *)(a2 + 8);
    v7 = v14 >= 0x14;
    v8 = v14 == 20;
    v15 = (1 << v14) & 0x155800;
    if ((v8 || !v7) && v15 != 0)
    {
      v10 = vrev64q_s8(v10);
      v9 = vrev32q_s8(v9);
      v11 = vrev32_s8(v11);
      v13 = bswap32(v13);
    }
    *(_BYTE *)(result + 80) &= ~1u;
    v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v17;
    *(int8x16_t *)(result + 32) = v10;
    *(int8x16_t *)(result + 48) = v9;
    *(int8x8_t *)(result + 64) = v11;
    *(_DWORD *)(result + 72) = v13;
    *(_DWORD *)(result + 76) = v12;
  }
  return result;
}

uint64_t getStructOrErr<llvm::MachO::section>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  int8x16_t v9;
  int8x16_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  __int128 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3 + 68;
  v6 = v4 + *(_QWORD *)(a2 + 24);
  if (v4 <= a3)
  {
    v7 = v5 >= v6;
    v8 = v5 == v6;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (!v8 && v7)
  {
    v16 = "Structure read out-of-range";
    v17 = 259;
    result = malformedError((const llvm::Twine *)&v18, (uint64_t *)&v16);
    *(_BYTE *)(v3 + 72) |= 1u;
    *(_QWORD *)v3 = v18;
  }
  else
  {
    v9 = *(int8x16_t *)(a3 + 32);
    v10 = *(int8x16_t *)(a3 + 48);
    v11 = *(_DWORD *)(a3 + 64);
    v12 = *(_DWORD *)(a2 + 8);
    v7 = v12 >= 0x14;
    v8 = v12 == 20;
    v13 = (1 << v12) & 0x155800;
    if ((v8 || !v7) && v13 != 0)
    {
      v9 = vrev32q_s8(v9);
      v10 = vrev32q_s8(v10);
      v11 = bswap32(v11);
    }
    *(_BYTE *)(result + 72) &= ~1u;
    v15 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v15;
    *(int8x16_t *)(result + 32) = v9;
    *(int8x16_t *)(result + 48) = v10;
    *(_DWORD *)(result + 64) = v11;
  }
  return result;
}

BOOL llvm::object::MachOObjectFile::is64Bit(llvm::object::MachOObjectFile *this)
{
  return (*((_DWORD *)this + 2) - 19) < 2;
}

BOOL llvm::object::MachOObjectFile::isRelocatableObject(llvm::object::MachOObjectFile *this)
{
  return *((_DWORD *)this + 15) == 1;
}

uint64_t llvm::object::ObjectFile::createMachOObjectFile@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  size_t v6;
  const void *v10;
  uint64_t result;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  _OWORD v22[2];
  _OWORD v23[2];
  _OWORD v24[2];
  _OWORD v25[2];

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 >= 4)
    v6 = 4;
  else
    v6 = *(_QWORD *)(a1 + 8);
  if (v5 < 4)
    goto LABEL_9;
  v10 = *(const void **)a1;
  if (!memcmp(*(const void **)a1, "\xFE\xED\xFA\xCE", v6))
  {
    v12 = *(_OWORD *)(a1 + 16);
    v25[0] = *(_OWORD *)a1;
    v25[1] = v12;
    v13 = v25;
    v14 = a4;
    v15 = 0;
LABEL_12:
    v17 = 0;
    return llvm::object::MachOObjectFile::create(v13, v15, v17, a2, a3, v14);
  }
  if (!memcmp(v10, &str_348, v6))
  {
    v16 = *(_OWORD *)(a1 + 16);
    v24[0] = *(_OWORD *)a1;
    v24[1] = v16;
    v13 = v24;
    v14 = a4;
    v15 = 1;
    goto LABEL_12;
  }
  if (!memcmp(v10, &str_349, v6))
  {
    v18 = *(_OWORD *)(a1 + 16);
    v23[0] = *(_OWORD *)a1;
    v23[1] = v18;
    v13 = v23;
    v14 = a4;
    v15 = 0;
  }
  else
  {
    if (memcmp(v10, &str_350, v6))
    {
LABEL_9:
      v20 = 2;
      result = llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)"Unrecognized MachO magic number", &v20, &v21);
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v21;
      return result;
    }
    v19 = *(_OWORD *)(a1 + 16);
    v22[0] = *(_OWORD *)a1;
    v22[1] = v19;
    v13 = v22;
    v14 = a4;
    v15 = 1;
  }
  v17 = 1;
  return llvm::object::MachOObjectFile::create(v13, v15, v17, a2, a3, v14);
}

const char *llvm::object::MachOObjectFile::mapDebugSectionName(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  if (a3 == 14 && *a2 == 0x74735F6775626564 && *(_QWORD *)((char *)a2 + 6) == 0x7366666F5F727473)
    return "debug_str_offsets";
  return result;
}

uint64_t llvm::object::MachOObjectFile::mapReflectionSectionNameToEnumValue(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (a3 == 14)
  {
    if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 6) == 0x6F746F72705F3574)
      return 6;
    return 10;
  }
  if (a3 == 15)
  {
    if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 7) == 0x736F746F72705F35)
      return 7;
    if (*a2 == 0x3574666977735F5FLL && *(_QWORD *)((char *)a2 + 7) == 0x6D756E65706D5F35)
      return 9;
    return 10;
  }
  if (a3 != 16)
    return 10;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x646D646C6569665FLL)
    return 0;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x7974636F7373615FLL)
    return 1;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x6E69746C6975625FLL)
    return 2;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x657275747061635FLL)
    return 3;
  if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x666572657079745FLL)
    return 4;
  if (*a2 != 0x3574666977735F5FLL || a2[1] != 0x7274736C6665725FLL)
  {
    if (*a2 == 0x3574666977735F5FLL && a2[1] == 0x73636E756663615FLL)
      return 8;
    return 10;
  }
  return 5;
}

void llvm::object::MachOObjectFile::~MachOObjectFile(llvm::object::MachOObjectFile *this)
{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = &off_251C1B308;
  v2 = (void **)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v2)
    std::default_delete<llvm::object::BindRebaseSegInfo>::operator()[abi:nn180100](v2);
  v3 = (char *)*((_QWORD *)this + 29);
  if (v3 != (char *)this + 248)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 26);
  if (v4 != (char *)this + 224)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 16);
  if (v5 != (char *)this + 144)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 13);
  if (v6 != (char *)this + 120)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 10);
  if (v7 != (char *)this + 96)
    free(v7);
}

{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)this = &off_251C1B308;
  v2 = (void **)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v2)
    std::default_delete<llvm::object::BindRebaseSegInfo>::operator()[abi:nn180100](v2);
  v3 = (char *)*((_QWORD *)this + 29);
  if (v3 != (char *)this + 248)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 26);
  if (v4 != (char *)this + 224)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 16);
  if (v5 != (char *)this + 144)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 13);
  if (v6 != (char *)this + 120)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 10);
  if (v7 != (char *)this + 96)
    free(v7);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::MachOObjectFile::getFeatures(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;
  void **v5;

  v3 = 0uLL;
  v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v3 = 0uLL;
  v4 = 0;
  v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

uint64_t getLoadCommandInfo(uint64_t result, const char *a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21[2];
  const char *v22;
  __int16 v23;

  v4 = result;
  v5 = *((_QWORD *)a2 + 2);
  if (v5 > (unint64_t)a3 || (v6 = v5 + *((_QWORD *)a2 + 3), (unint64_t)(a3 + 2) > v6))
  {
    v21[0] = (uint64_t)"Structure read out-of-range";
    v23 = 259;
    result = malformedError((const llvm::Twine *)result, v21);
    *(_BYTE *)(v4 + 16) |= 1u;
    return result;
  }
  LODWORD(v8) = *a3;
  LODWORD(v7) = a3[1];
  v9 = *((_DWORD *)a2 + 2);
  v10 = v9 >= 0x14;
  v12 = v9 == 20;
  v11 = (1 << v9) & 0x155800;
  v12 = !v12 && v10 || v11 == 0;
  v13 = bswap32(v8);
  v14 = bswap32(v7);
  if (v12)
    v7 = v7;
  else
    v7 = v14;
  if (v12)
    v8 = v8;
  else
    v8 = v13;
  if ((unint64_t)a3 + v7 > v6)
  {
    v17[0] = "load command ";
    v18 = a4;
    v19 = 2051;
    v21[0] = (uint64_t)v17;
    v22 = " extends past end of file";
    v23 = 770;
    result = malformedError((const llvm::Twine *)&v20, v21);
    *(_BYTE *)(v4 + 16) |= 1u;
    v15 = v20;
LABEL_17:
    *(_QWORD *)v4 = v15;
    return result;
  }
  if (v7 <= 7)
  {
    v17[0] = "load command ";
    v18 = a4;
    v19 = 2051;
    v21[0] = (uint64_t)v17;
    v22 = " with size less than 8 bytes";
    v23 = 770;
    result = malformedError((const llvm::Twine *)&v16, v21);
    *(_BYTE *)(v4 + 16) |= 1u;
    v15 = v16;
    goto LABEL_17;
  }
  *(_BYTE *)(result + 16) &= ~1u;
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = v8 | (v7 << 32);
  return result;
}

_QWORD *checkOverlappingElement(_QWORD *result, uint64_t *a2, unint64_t a3, uint64_t a4, _BYTE *a5)
{
  _QWORD *v5;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  __int128 *v21;
  char v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  char v26;
  char v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[4];
  __int16 v39;
  _QWORD v40[4];
  char v41;
  char v42;
  _QWORD v43[4];
  __int16 v44;
  uint64_t v45[4];
  char v46;
  char v47;
  uint64_t v48;
  unint64_t v49;

  v5 = result;
  v48 = a4;
  v49 = a3;
  if (!a4)
  {
LABEL_15:
    *v5 = 0;
    return result;
  }
  v10 = (uint64_t *)a2[1];
  if (v10 == a2)
  {
LABEL_13:
    result = operator new(0x28uLL);
    result[2] = a3;
    result[3] = a4;
    result[4] = a5;
    v14 = *a2;
    *result = *a2;
    result[1] = a2;
    *(_QWORD *)(v14 + 8) = result;
    *a2 = (uint64_t)result;
LABEL_14:
    ++a2[2];
    goto LABEL_15;
  }
  v11 = a4 + a3;
  v12 = v10[2];
  while ((v12 > a3 || v10[3] + v12 <= a3) && (v11 <= v12 || v11 >= v10[3] + v12) && (v12 < a3 || v11 < v10[3] + v12))
  {
    v10 = (uint64_t *)v10[1];
    if (v10 == a2)
      goto LABEL_13;
    v12 = v10[2];
    if (v11 <= v12)
    {
      result = operator new(0x28uLL);
      result[2] = a3;
      result[3] = a4;
      result[4] = a5;
      v13 = *v10;
      *(_QWORD *)(v13 + 8) = result;
      *result = v13;
      *v10 = (uint64_t)result;
      result[1] = v10;
      goto LABEL_14;
    }
  }
  v15 = " at offset ";
  if (*a5)
  {
    v23[0] = a5;
    v23[2] = " at offset ";
    v24 = 771;
    v16 = (const char *)v23;
    v17 = 2;
  }
  else
  {
    v23[0] = " at offset ";
    v24 = 259;
    v17 = 3;
    v16 = " at offset ";
  }
  v25[0] = v16;
  v25[2] = &v49;
  v26 = v17;
  v27 = 12;
  v28[0] = v25;
  v28[2] = " with a size of ";
  v18 = 770;
  v29 = 770;
  v30[0] = v28;
  v30[2] = &v48;
  v31 = 3074;
  *(_QWORD *)&v32 = v30;
  *(_QWORD *)&v33 = ", overlaps ";
  LOWORD(v34) = 770;
  v19 = (_BYTE *)v10[4];
  if (*v19)
  {
    *(_QWORD *)&v35 = &v32;
    *(_QWORD *)&v36 = v19;
    LOWORD(v37) = 770;
    v20 = 2;
    v21 = &v35;
  }
  else
  {
    v35 = v32;
    v36 = v33;
    v37 = v34;
    v20 = v34;
    if (v34 == 1)
    {
      v38[0] = " at offset ";
      v39 = 259;
      v22 = 3;
      goto LABEL_22;
    }
    v18 = *((_QWORD *)&v35 + 1);
    v21 = &v35;
    if (BYTE1(v37) == 1)
      v21 = (__int128 *)v35;
    else
      v20 = 2;
  }
  v38[0] = v21;
  v38[1] = v18;
  v38[2] = " at offset ";
  LOBYTE(v39) = v20;
  v22 = 2;
  v15 = (const char *)v38;
  HIBYTE(v39) = 3;
LABEL_22:
  v40[0] = v15;
  v40[2] = v10 + 2;
  v41 = v22;
  v42 = 12;
  v43[0] = v40;
  v43[2] = " with a size of ";
  v44 = 770;
  v45[0] = (uint64_t)v43;
  v45[2] = (uint64_t)(v10 + 3);
  v46 = 2;
  v47 = 12;
  return (_QWORD *)malformedError((const llvm::Twine *)result, v45);
}

void std::default_delete<llvm::object::BindRebaseSegInfo>::operator()[abi:nn180100](void **a1)
{
  void **v1;
  void **v2;

  v2 = a1 + 2;
  v1 = (void **)*a1;
  if (v1 != v2)
    free(v1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t getStructOrErr<llvm::MachO::segment_command_64>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unsigned int v10;
  int v11;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 > a3 || a3 + 72 > v4 + *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v13 = "Structure read out-of-range";
    v14 = 259;
    result = malformedError((const llvm::Twine *)&v15, (uint64_t *)&v13);
    *(_BYTE *)(v3 + 72) |= 1u;
    *(_QWORD *)v3 = v15;
  }
  else
  {
    v6 = *(int8x8_t *)a3;
    v7 = *(int8x16_t *)(a3 + 24);
    v8 = *(int8x16_t *)(a3 + 40);
    v9 = *(int8x16_t *)(a3 + 56);
    v10 = *(_DWORD *)(a2 + 8);
    v5 = v10 > 0x14;
    v11 = (1 << v10) & 0x155800;
    if (!v5 && v11 != 0)
    {
      v6 = vrev32_s8(v6);
      v7 = vrev64q_s8(v7);
      v8 = vrev64q_s8(v8);
      v9 = vrev32q_s8(v9);
    }
    *(_BYTE *)(result + 72) &= ~1u;
    *(int8x8_t *)result = v6;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
    *(int8x16_t *)(result + 24) = v7;
    *(int8x16_t *)(result + 40) = v8;
    *(int8x16_t *)(result + 56) = v9;
  }
  return result;
}

uint64_t getStructOrErr<llvm::MachO::segment_command>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unsigned int v9;
  int v10;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 > a3 || a3 + 56 > v4 + *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v12 = "Structure read out-of-range";
    v13 = 259;
    result = malformedError((const llvm::Twine *)&v14, (uint64_t *)&v12);
    *(_BYTE *)(v3 + 56) |= 1u;
    *(_QWORD *)v3 = v14;
  }
  else
  {
    v6 = *(int8x8_t *)a3;
    v7 = *(int8x16_t *)(a3 + 24);
    v8 = *(int8x16_t *)(a3 + 40);
    v9 = *(_DWORD *)(a2 + 8);
    v5 = v9 > 0x14;
    v10 = (1 << v9) & 0x155800;
    if (!v5 && v10 != 0)
    {
      v6 = vrev32_s8(v6);
      v7 = vrev32q_s8(v7);
      v8 = vrev32q_s8(v8);
    }
    *(_BYTE *)(result + 56) &= ~1u;
    *(int8x8_t *)result = v6;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
    *(int8x16_t *)(result + 24) = v7;
    *(int8x16_t *)(result + 40) = v8;
  }
  return result;
}

double llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  int8x16_t *v4;
  unsigned int v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x8_t v9;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  if (a2 && *(_DWORD *)(a2 + 52) > a3)
  {
    v3 = *(_QWORD *)(a2 + 16) + 8;
    if (*(_DWORD *)(a2 + 48) == -889275714)
    {
      v4 = (int8x16_t *)(v3 + 20 * a3);
      v5 = bswap32(v4[1].u32[0]);
      v6 = vrev32q_s8(*v4);
      *(int8x16_t *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 28) = v5;
    }
    else
    {
      v7 = v3 + 32 * a3;
      *(int8x8_t *)v6.i8 = vrev32_s8(*(int8x8_t *)v7);
      v8 = vrev64q_s8(*(int8x16_t *)(v7 + 8));
      v9 = vrev32_s8(*(int8x8_t *)(v7 + 24));
      *(_QWORD *)(a1 + 32) = v6.i64[0];
      *(int8x16_t *)(a1 + 40) = v8;
      *(int8x8_t *)(a1 + 56) = v9;
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return *(double *)v6.i64;
}

uint64_t llvm::object::MachOUniversalBinary::create@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  const char *v7;
  char v8;
  char v9;
  __int128 v10[2];
  const char *v11;

  v11 = 0;
  v4 = operator new();
  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  result = llvm::object::MachOUniversalBinary::MachOUniversalBinary(v4, v10, &v11);
  v7 = v11;
  v8 = *(_BYTE *)(a2 + 8);
  if (v11)
  {
    v9 = v8 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = (uint64_t)v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t llvm::object::MachOUniversalBinary::MachOUniversalBinary(uint64_t a1, __int128 *a2, const char **a3)
{
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  const char **v10;
  const char *v11;
  int v12;
  llvm::formatv_object_base *v13;
  char v14;
  const char *v15;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  __int16 *v36;
  _QWORD *v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  unsigned int *v46;
  const char *v47;
  int *v48;
  uint64_t v49;
  BOOL v50;
  unsigned int *v51;
  uint64_t v52;
  int *v53;
  const char *v54;
  llvm::formatv_object_base **v55;
  BOOL v56;
  unsigned int *v57;
  uint64_t v58;
  int *v59;
  const char *v60;
  BOOL v61;
  unsigned int *v62;
  uint64_t v63;
  int *v64;
  const char *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD v78[4];
  __int16 v79;
  _QWORD v80[4];
  __int16 v81;
  _QWORD v82[4];
  __int16 v83;
  _QWORD v84[4];
  __int16 v85;
  _QWORD v86[4];
  __int16 v87;
  _QWORD v88[4];
  __int16 v89;
  _QWORD v90[4];
  __int16 v91;
  uint64_t v92[4];
  __int16 v93;
  llvm::formatv_object_base *v94[4];
  __int16 v95;
  const char *v96;
  llvm::formatv_object_base *v97[4];
  __int16 v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  __int16 v103;
  _BYTE v104[12];
  uint64_t v105;
  llvm::formatv_object_base *v106[4];
  __int16 v107;
  _QWORD v108[4];
  __int16 v109;
  _QWORD v110[2];
  _QWORD *v111;
  __int16 v112;
  uint64_t v113[2];
  const char *v114;
  __int16 v115;
  uint64_t v116[2];
  uint64_t v117;
  __int16 v118;
  uint64_t v119[2];
  const char *v120;
  __int16 v121;
  _QWORD v122[4];
  __int16 v123;
  _QWORD v124[2];
  const char *v125;
  __int16 v126;
  _QWORD v127[2];
  const char *v128;
  __int16 v129;
  llvm::formatv_object_base *v130[4];
  __int16 v131;
  const char *v132;
  unsigned int v133;
  const char *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  llvm::formatv_object_base *v142[4];
  char v143;
  char v144;
  const char *v145;
  __int16 v146;
  const char *v147;
  __int16 v148;
  __int128 v149;
  __int128 v150;

  v6 = a2[1];
  v149 = *a2;
  v5 = v149;
  v150 = v6;
  *(_DWORD *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)a1 = &off_251C1B688;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 <= 7)
  {
    LODWORD(v99) = 2;
    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)"File too small to be a Mach-O universal file", (unsigned int *)&v99, (uint64_t *)&v132);
LABEL_16:
    v15 = v132;
    goto LABEL_17;
  }
  v8 = __rev32(**(_QWORD **)(a1 + 16));
  *(_QWORD *)(a1 + 48) = v8;
  if (!HIDWORD(v8))
  {
    v147 = "contains zero architecture types";
    v148 = 259;
    v10 = &v147;
    goto LABEL_15;
  }
  if ((_DWORD)v8 != -889275713)
  {
    if ((_DWORD)v8 == -889275714)
    {
      v9 = 20 * HIDWORD(v8) + 8;
      goto LABEL_9;
    }
    v145 = "bad magic number";
    v146 = 259;
    v10 = &v145;
LABEL_15:
    malformedError((uint64_t *)&v132, (llvm::formatv_object_base **)v10);
    goto LABEL_16;
  }
  v9 = (32 * HIDWORD(v8)) | 8;
LABEL_9:
  if (v7 >= v9)
  {
    v17 = 0;
    v18 = v9;
    do
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v132, a1, v17);
      v19 = *((_DWORD *)v132 + 12);
      v20 = HIDWORD(v134);
      v21 = v135;
      v22 = v139;
      if (v19 == -889275714)
        v23 = HIDWORD(v134);
      else
        v23 = v139;
      if (v19 != -889275714)
        v21 = v140;
      if (v21 + v23 > v7)
      {
        v45 = v19 == -889275714;
        if (v19 == -889275714)
          v46 = &v133;
        else
          v46 = &v137;
        v47 = (const char *)*v46;
        v124[0] = "offset plus size of cputype (";
        v125 = v47;
        v126 = 2051;
        v127[0] = v124;
        v128 = ") cpusubtype (";
        v129 = 770;
        v48 = &v138;
        if (v45)
          v48 = (int *)&v134;
        v49 = *v48 & 0xFFFFFF;
        v99 = v127;
        v101 = v49;
        v103 = 2050;
        v130[0] = (llvm::formatv_object_base *)&v99;
        v130[2] = (llvm::formatv_object_base *)") extends past the end of the file";
        v131 = 770;
        malformedError(v119, v130);
        v15 = (const char *)v119[0];
        goto LABEL_17;
      }
      if (v19 == -889275714)
        v24 = v136;
      else
        v24 = v141;
      if (v24 >= 0x10)
      {
        v110[0] = "align (2^";
        v111 = (_QWORD *)v24;
        v112 = 2051;
        v113[0] = (uint64_t)v110;
        v114 = ") too large for cputype (";
        v115 = 770;
        v50 = v19 == -889275714;
        if (v19 == -889275714)
          v51 = &v133;
        else
          v51 = &v137;
        v52 = *v51;
        v116[0] = (uint64_t)v113;
        v117 = v52;
        v118 = 2050;
        v119[0] = (uint64_t)v116;
        v120 = ") cpusubtype (";
        v121 = 770;
        v53 = &v138;
        if (v50)
          v53 = (int *)&v134;
        v54 = (const char *)(*v53 & 0xFFFFFF);
        v124[0] = v119;
        v125 = v54;
        v126 = 2050;
        v127[0] = v124;
        v128 = ") (maximum 2^";
        v129 = 770;
        v99 = v127;
        v101 = 15;
        v103 = 2050;
        v122[0] = &v99;
        v122[2] = ")";
        v123 = 770;
        v55 = (llvm::formatv_object_base **)v122;
        goto LABEL_105;
      }
      if (v19 == -889275714)
      {
        if ((~(-1 << v136) & HIDWORD(v134)) != 0)
          goto LABEL_99;
        v22 = HIDWORD(v134);
      }
      else if ((v139 & ~(-1 << v141)) != 0)
      {
        v20 = v139;
LABEL_99:
        v90[0] = v20;
        v110[0] = "offset: ";
        v111 = v90;
        v112 = 3075;
        v113[0] = (uint64_t)v110;
        v114 = " for cputype (";
        v115 = 770;
        v61 = v19 == -889275714;
        if (v19 == -889275714)
          v62 = &v133;
        else
          v62 = &v137;
        v63 = *v62;
        v116[0] = (uint64_t)v113;
        v117 = v63;
        v118 = 2050;
        v119[0] = (uint64_t)v116;
        v120 = ") cpusubtype (";
        v121 = 770;
        v64 = &v138;
        if (v61)
          v64 = (int *)&v134;
        v65 = (const char *)(*v64 & 0xFFFFFF);
        v124[0] = v119;
        v125 = v65;
        v126 = 2050;
        v127[0] = v124;
        v128 = ") not aligned on it's alignment (2^";
        v129 = 770;
        v99 = v127;
        v101 = v24;
        v103 = 2050;
        v108[0] = &v99;
        v108[2] = ")";
        v109 = 770;
        v55 = (llvm::formatv_object_base **)v108;
LABEL_105:
        malformedError(v92, v55);
        v15 = (const char *)v92[0];
        goto LABEL_17;
      }
      if (v22 < v18)
      {
        v56 = v19 == -889275714;
        if (v19 == -889275714)
          v57 = &v133;
        else
          v57 = &v137;
        v58 = *v57;
        v116[0] = (uint64_t)"cputype (";
        v117 = v58;
        v118 = 2051;
        v119[0] = (uint64_t)v116;
        v120 = ") cpusubtype (";
        v121 = 770;
        v59 = &v138;
        if (v56)
          v59 = (int *)&v134;
        v60 = (const char *)(*v59 & 0xFFFFFF);
        v124[0] = v119;
        v125 = v60;
        v126 = 2050;
        v127[0] = v124;
        v128 = ") offset ";
        v129 = 770;
        v110[0] = v23;
        v99 = v127;
        v101 = (uint64_t)v110;
        v103 = 3074;
        v106[0] = (llvm::formatv_object_base *)&v99;
        v106[2] = (llvm::formatv_object_base *)" overlaps universal headers";
        v107 = 770;
        malformedError(v113, v106);
        v15 = (const char *)v113[0];
        goto LABEL_17;
      }
      ++v17;
      v25 = *(_DWORD *)(a1 + 52);
    }
    while (v17 < v25);
    if (!v25)
      goto LABEL_18;
    v26 = 0;
    while (1)
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v132, a1, v26++);
      v27 = *(_DWORD *)(a1 + 52);
      if (v26 < v27)
        break;
LABEL_74:
      if (v26 >= v27)
        goto LABEL_18;
    }
    v73 = v132;
    v71 = (int)v134;
    v72 = v133;
    v28 = v137;
    v69 = v26;
    v70 = v138;
    v29 = HIDWORD(v134);
    v30 = v135;
    v31 = v139;
    v32 = v140;
    while (1)
    {
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v99, a1, v26);
      v33 = *((_DWORD *)v73 + 12);
      if (v33 == -889275714)
        v34 = v72;
      else
        v34 = v28;
      v35 = *((_DWORD *)v99 + 12);
      v36 = (__int16 *)&v100;
      if (v35 != -889275714)
        v36 = &v103;
      v37 = (_QWORD *)*(unsigned int *)v36;
      if ((_DWORD)v34 == (_DWORD)v37)
      {
        v38 = v71;
        if (v33 != -889275714)
          v38 = v70;
        v39 = &v101;
        if (v35 != -889275714)
          v39 = (uint64_t *)v104;
        if (((*(_DWORD *)v39 ^ v38) & 0xFFFFFF) == 0)
        {
          v119[0] = (uint64_t)"contains two of the same architecture (cputype (";
          v120 = (const char *)v34;
          v121 = 2051;
          v124[0] = v119;
          v125 = ") cpusubtype (";
          v126 = 770;
          v127[0] = v124;
          v128 = (const char *)(v38 & 0xFFFFFF);
          v129 = 2050;
          v97[0] = (llvm::formatv_object_base *)v127;
          v97[2] = (llvm::formatv_object_base *)"))";
          v98 = 770;
          malformedError(v116, v97);
          v15 = (const char *)v116[0];
          goto LABEL_17;
        }
      }
      if (v33 == -889275714)
        v40 = v29;
      else
        v40 = v31;
      v41 = HIDWORD(v101);
      if (v35 != -889275714)
        v41 = *(_QWORD *)&v104[4];
      if (v40 >= v41)
      {
        v42 = v102;
        if (v35 != -889275714)
          v42 = v105;
        if (v40 < v42 + v41)
          break;
      }
      if (v33 == -889275714)
        v43 = v30;
      else
        v43 = v32;
      v44 = v43 + v40;
      if (v43 + v40 > v41)
      {
        v42 = v102;
        if (v35 != -889275714)
          v42 = v105;
        if (v44 < v42 + v41)
          goto LABEL_110;
      }
      if (v40 <= v41)
      {
        v42 = v102;
        if (v35 != -889275714)
          v42 = v105;
        if (v44 >= v42 + v41)
          goto LABEL_110;
      }
      ++v26;
      v27 = *(_DWORD *)(a1 + 52);
      if (v26 >= v27)
      {
        v26 = v69;
        goto LABEL_74;
      }
    }
    if (v33 == -889275714)
      v43 = v30;
    else
      v43 = v32;
LABEL_110:
    v78[0] = "cputype (";
    v78[2] = v34;
    v79 = 2051;
    v80[0] = v78;
    v80[2] = ") cpusubtype (";
    v81 = 770;
    v45 = v33 == -889275714;
    v66 = v71;
    if (!v45)
      v66 = v70;
    v82[0] = v80;
    v82[2] = v66 & 0xFFFFFF;
    v83 = 2050;
    v84[0] = v82;
    v84[2] = ") at offset ";
    v85 = 770;
    v76 = v43;
    v77 = v40;
    v86[0] = v84;
    v86[2] = &v77;
    v87 = 3074;
    v88[0] = v86;
    v88[2] = " with a size of ";
    v89 = 770;
    v90[0] = v88;
    v90[2] = &v76;
    v91 = 3074;
    v92[0] = (uint64_t)v90;
    v92[2] = (uint64_t)", overlaps cputype (";
    v93 = 770;
    v110[0] = v92;
    v111 = v37;
    v112 = 2050;
    v113[0] = (uint64_t)v110;
    v114 = ") cpusubtype (";
    v115 = 770;
    if (v35 == -889275714)
      v67 = &v101;
    else
      v67 = (uint64_t *)v104;
    v68 = *(_DWORD *)v67 & 0xFFFFFF;
    v116[0] = (uint64_t)v113;
    v117 = v68;
    v118 = 2050;
    v119[0] = (uint64_t)v116;
    v120 = ") at offset ";
    v121 = 770;
    v74 = v42;
    v75 = v41;
    v124[0] = v119;
    v125 = (const char *)&v75;
    v126 = 3074;
    v127[0] = v124;
    v128 = " with a size of ";
    v129 = 770;
    v94[0] = (llvm::formatv_object_base *)v127;
    v94[2] = (llvm::formatv_object_base *)&v74;
    v95 = 3074;
    malformedError((uint64_t *)&v96, v94);
    v15 = v96;
  }
  else
  {
    v11 = "";
    if ((_DWORD)v8 != -889275714)
      v11 = "_64";
    v12 = *(unsigned __int8 *)v11;
    v13 = (llvm::formatv_object_base *)"fat_arch";
    if (*v11)
    {
      v132 = "fat_arch";
      v134 = v11;
      LOWORD(v137) = 771;
      v14 = 2;
    }
    else
    {
      v132 = "fat_arch";
      LOWORD(v137) = 259;
      v14 = 3;
    }
    if (v12)
      v13 = (llvm::formatv_object_base *)&v132;
    v142[0] = v13;
    v142[2] = (llvm::formatv_object_base *)" structs would extend past the end of the file";
    v143 = v14;
    v144 = 3;
    malformedError((uint64_t *)&v99, v142);
    v15 = (const char *)v99;
  }
LABEL_17:
  *a3 = v15;
  if (!v15)
LABEL_18:
    *a3 = 0;
  return a1;
}

void llvm::object::MachOUniversalBinary::~MachOUniversalBinary(llvm::object::MachOUniversalBinary *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::object::MinidumpFile::getDataSlice(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  llvm::formatv_object_base *v8;
  __int16 v9;

  if (a5 + a4 <= a3)
  {
    result = a2 + a4;
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)(a1 + 8) = a5;
  }
  else
  {
    v6 = operator new();
    v8 = (llvm::formatv_object_base *)"Unexpected EOF";
    v9 = 259;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v6, &v8, 4u);
    *(_BYTE *)(a1 + 16) |= 1u;
  }
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t llvm::object::MinidumpFile::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  llvm::formatv_object_base *v7;
  uint64_t v8;
  llvm::formatv_object_base *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  llvm::formatv_object_base *v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  llvm::formatv_object_base *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  char v35;
  llvm::formatv_object_base *v36;
  uint64_t v37;
  char v38;
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  result = llvm::object::MinidumpFile::getDataSlice((uint64_t)&v36, *(_QWORD *)a1, v5, 0, 32);
  v7 = v36;
  if ((v38 & 1) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v7;
    return result;
  }
  if (*(_DWORD *)v36 != 1347241037)
  {
    v18 = operator new();
    v39 = 261;
    v19 = "Invalid signature";
    v20 = 17;
LABEL_26:
    v36 = (llvm::formatv_object_base *)v19;
    v37 = v20;
    result = llvm::object::GenericBinaryError::GenericBinaryError(v18, &v36, 3u);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = result;
    return result;
  }
  if (*((unsigned __int16 *)v36 + 2) != 42899)
  {
    v18 = operator new();
    v39 = 261;
    v19 = "Invalid version";
    v20 = 15;
    goto LABEL_26;
  }
  v8 = *((unsigned int *)v36 + 2);
  result = llvm::object::MinidumpFile::getDataSlice((uint64_t)&v36, v4, v5, *((unsigned int *)v36 + 3), 12 * v8);
  v9 = v36;
  if ((v38 & 1) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    return result;
  }
  memset(v33, 0, 20);
  v10 = 0;
  if (!(_DWORD)v8)
  {
    v25 = 0;
    v32 = 0;
LABEL_31:
    v26 = operator new();
    v27 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v26 + 32) = v27;
    v33[0] = 0;
    v33[1] = 0;
    *(_DWORD *)(v26 + 8) = 6;
    LODWORD(v33[2]) = 0;
    *(_QWORD *)v26 = &off_251C1B6B8;
    *(_QWORD *)(v26 + 48) = v7;
    *(_QWORD *)(v26 + 56) = v9;
    *(_QWORD *)(v26 + 64) = v8;
    *(_QWORD *)(v26 + 72) = v25;
    *(_DWORD *)(v26 + 80) = v10;
    *(_QWORD *)(v26 + 84) = v32;
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = v26;
    MEMORY[0x24BD1B398](0, 8);
    return MEMORY[0x24BD1B398](v33[0], 8);
  }
  v30 = v8;
  v31 = 0;
  v11 = 0;
  v12 = 12 * v8;
  v29 = v36;
  v13 = (unsigned int *)((char *)v36 + 4);
  while (1)
  {
    v14 = *(v13 - 1);
    llvm::object::MinidumpFile::getDataSlice((uint64_t)&v34, v4, v5, v13[1], *v13);
    if ((v35 & 1) != 0)
    {
      v21 = v34;
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v21;
      return MEMORY[0x24BD1B398](v33[0], 8);
    }
    if (v14)
      break;
    if (*v13)
      goto LABEL_12;
LABEL_18:
    ++v11;
    v13 += 3;
    v12 -= 12;
    if (!v12)
    {
      v25 = v33[0];
      v32 = *(uint64_t *)((char *)&v33[1] + 4);
      v9 = v29;
      v8 = v30;
      goto LABEL_31;
    }
  }
  if (v14 >= 0xFFFFFFFE)
  {
    v22 = operator new();
    v39 = 261;
    v23 = "Cannot handle one of the minidump streams";
    v24 = 41;
    goto LABEL_33;
  }
LABEL_12:
  v36 = 0;
  v15 = v33[2];
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(v31, v33[2], v14, &v36) & 1) == 0)
  {
    if (4 * LODWORD(v33[1]) + 4 >= 3 * v15)
    {
      v17 = 2 * v15;
    }
    else
    {
      if (v15 + ~LODWORD(v33[1]) - HIDWORD(v33[1]) > v15 >> 3)
      {
LABEL_15:
        v16 = v36;
        v10 = ++LODWORD(v33[1]);
        if (*(_DWORD *)v36 != -1)
          --HIDWORD(v33[1]);
        *(_DWORD *)v36 = v14;
        *((_QWORD *)v16 + 1) = v11;
        goto LABEL_18;
      }
      v17 = v15;
    }
    llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::grow((uint64_t)v33, v17);
    v36 = 0;
    v31 = v33[0];
    llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(v33[0], v33[2], v14, &v36);
    goto LABEL_15;
  }
  v22 = operator new();
  v39 = 261;
  v23 = "Duplicate stream type";
  v24 = 21;
LABEL_33:
  v36 = (llvm::formatv_object_base *)v23;
  v37 = v24;
  v28 = llvm::object::GenericBinaryError::GenericBinaryError(v22, &v36, 3u);
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v28;
  return MEMORY[0x24BD1B398](v33[0], 8);
}

void llvm::object::MinidumpFile::~MinidumpFile(llvm::object::MinidumpFile *this)
{
  *(_QWORD *)this = &off_251C1B6B8;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 9), 8);
}

{
  *(_QWORD *)this = &off_251C1B6B8;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 9), 8);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>,llvm::minidump::StreamType,unsigned long,llvm::DenseMapInfo<llvm::minidump::StreamType,void>,llvm::detail::DenseMapPair<llvm::minidump::StreamType,unsigned long>>::LookupBucketFor<llvm::minidump::StreamType>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_DWORD *)v13;
          *((_QWORD *)v15 + 1) = *(_QWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -1;
      result += 4;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

void llvm::ModuleSymbolTable::addModule(llvm::ModuleSymbolTable *this, llvm::Module *a2)
{
  char *v4;
  char *v5;
  char *v6;
  llvm::ModuleSymbolTable **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  llvm::ModuleSymbolTable *v27;
  char *v28;
  llvm::ModuleSymbolTable **v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char **v36;

  if (!*(_QWORD *)this)
    *(_QWORD *)this = a2;
  v4 = (char *)a2 + 24;
  v5 = (char *)*((_QWORD *)a2 + 4);
  v6 = (char *)a2 + 8;
  v7 = (llvm::ModuleSymbolTable **)*((_QWORD *)a2 + 2);
  v8 = (char *)a2 + 40;
  v9 = (char *)*((_QWORD *)a2 + 6);
  v10 = (char *)a2 + 56;
  v11 = (char *)*((_QWORD *)a2 + 8);
  v28 = v5;
  v29 = v7;
  v30 = v9;
  v31 = v11;
  v32 = (char *)a2 + 24;
  v33 = (char *)a2 + 8;
  v34 = (char *)a2 + 40;
  v35 = (char *)a2 + 56;
  while (v5 != v4
       || v7 != (llvm::ModuleSymbolTable **)v6
       || v9 != v8
       || v11 != v10
       || v32 != v4
       || v33 != v6
       || v34 != v8
       || v35 != v10)
  {
    v12 = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::get<0ul,1ul,2ul,3ul>((uint64_t)&v28);
    v13 = v12;
    v15 = (uint64_t *)*((_QWORD *)this + 14);
    v14 = *((_QWORD *)this + 15);
    if ((unint64_t)v15 >= v14)
    {
      v17 = *((_QWORD *)this + 13);
      v18 = ((uint64_t)v15 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        abort();
      v19 = v14 - v17;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v21);
      else
        v22 = 0;
      v23 = (uint64_t *)(v21 + 8 * v18);
      *v23 = v13;
      v16 = v23 + 1;
      v25 = (char *)*((_QWORD *)this + 13);
      v24 = (char *)*((_QWORD *)this + 14);
      if (v24 != v25)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v23 = v26;
        }
        while (v24 != v25);
        v24 = (char *)*((_QWORD *)this + 13);
      }
      *((_QWORD *)this + 13) = v23;
      *((_QWORD *)this + 14) = v16;
      *((_QWORD *)this + 15) = v21 + 8 * v22;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v15 = v12;
      v16 = v15 + 1;
    }
    *((_QWORD *)this + 14) = v16;
    llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::increment<0ul,1ul,2ul,3ul>((uint64_t)&v28);
    v5 = v28;
    v7 = v29;
    v9 = v30;
    v11 = v31;
  }
  v27 = this;
  v28 = (char *)llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>::callback_fn<llvm::ModuleSymbolTable::addModule(llvm::Module *)::$_0>;
  v29 = &v27;
  v36 = &v28;
  initializeRecordStreamer((uint64_t)a2, (void (*)(uint64_t, std::string *))llvm::function_ref<void ()(llvm::RecordStreamer &)>::callback_fn<llvm::ModuleSymbolTable::CollectAsmSymbols(llvm::Module const&,llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>)::$_0>, (uint64_t)&v36);
}

void initializeRecordStreamer(uint64_t a1, void (*a2)(uint64_t, std::string *), uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  llvm::formatv_object_base *v11;
  std::string::size_type size;
  uint64_t (*MCRegInfo)(std::string *);
  uint64_t v14;
  llvm::formatv_object_base *v15;
  std::string::size_type v16;
  uint64_t MCAsmInfo;
  uint64_t v18;
  llvm::formatv_object_base *v19;
  std::string::size_type v20;
  uint64_t MCSubtargetInfo;
  uint64_t v22;
  uint64_t (*v23)(void);
  char *v24;
  _QWORD *v25;
  std::string::size_type v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t (*v31)(void ***, _QWORD, _QWORD);
  uint64_t v32;
  uint64_t ModuleFlag;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::formatv_object_base **v37;
  llvm::formatv_object_base *v38;
  llvm::formatv_object_base *v39;
  llvm::formatv_object_base *v40;
  std::string *v41;
  void (*v42)(std::string *);
  _QWORD *v43;
  uint64_t (*v44)(uint64_t, _QWORD *, uint64_t, _WORD *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::formatv_object_base *v48[4];
  __int16 v49;
  __int128 v50;
  _OWORD v51[3];
  uint64_t v52;
  _WORD v53[2];
  uint64_t v54;
  int v55;
  void *v56[2];
  void *v57[2];
  __int128 v58;
  void *v59[2];
  void *__p[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  std::string v64[2];
  void *v65[2];
  uint64_t v66;
  std::string __str;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  _QWORD v72[2];
  int v73;
  void **v74;
  __int128 v75;
  _QWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v3 = *(char *)(a1 + 111);
  if (v3 >= 0)
    v4 = a1 + 88;
  else
    v4 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 111);
  else
    v5 = *(_QWORD *)(a1 + 96);
  if (v5)
  {
    v65[0] = 0;
    v65[1] = 0;
    v66 = 0;
    LOWORD(v77) = 260;
    v74 = (void **)(a1 + 208);
    llvm::Triple::Triple(v64, (llvm::formatv_object_base **)&v74);
    v9 = llvm::TargetRegistry::lookupTarget((uint64_t)v64, (uint64_t)v65);
    v10 = (_QWORD *)v9;
    if ((v64[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = (llvm::formatv_object_base *)v64;
    else
      v11 = (llvm::formatv_object_base *)v64[0].__r_.__value_.__r.__words[0];
    if ((v64[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v64[0].__r_.__value_.__r.__words[2]);
    else
      size = v64[0].__r_.__value_.__l.__size_;
    MCRegInfo = llvm::Target::createMCRegInfo(v9, v11, (llvm::formatv_object_base *)size);
    if (MCRegInfo)
    {
      v14 = (uint64_t)MCRegInfo;
      v53[0] = 2048;
      v54 = 2;
      v55 = 2;
      *(_OWORD *)v56 = 0u;
      *(_OWORD *)v57 = 0u;
      v58 = 0u;
      *(_OWORD *)v59 = 0u;
      *(_OWORD *)__p = 0u;
      v61 = 0u;
      v62 = 0u;
      v63[0] = 0u;
      if ((v64[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = (llvm::formatv_object_base *)v64;
      else
        v15 = (llvm::formatv_object_base *)v64[0].__r_.__value_.__r.__words[0];
      if ((v64[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v64[0].__r_.__value_.__r.__words[2]);
      else
        v16 = v64[0].__r_.__value_.__l.__size_;
      v63[1] = 0uLL;
      MCAsmInfo = llvm::Target::createMCAsmInfo((uint64_t)v10, (uint64_t)MCRegInfo, v15, (llvm::formatv_object_base *)v16, (uint64_t)v53);
      if (MCAsmInfo)
      {
        v18 = MCAsmInfo;
        if ((v64[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = (llvm::formatv_object_base *)v64;
        else
          v19 = (llvm::formatv_object_base *)v64[0].__r_.__value_.__r.__words[0];
        if ((v64[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = HIBYTE(v64[0].__r_.__value_.__r.__words[2]);
        else
          v20 = v64[0].__r_.__value_.__l.__size_;
        MCSubtargetInfo = llvm::Target::createMCSubtargetInfo((uint64_t)v10, v19, (llvm::formatv_object_base *)v20, (uint64_t)"", 0, (uint64_t)"", 0);
        if (MCSubtargetInfo)
        {
          v22 = MCSubtargetInfo;
          v23 = (uint64_t (*)(void))v10[8];
          if (v23)
          {
            v47 = v23();
            if (v47)
            {
              LOWORD(v77) = 261;
              v74 = (void **)"";
              *(_QWORD *)&v75 = 0;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
              v24 = operator new(24, (unsigned __int8 **)&__str);
              *(_QWORD *)v24 = off_251C12C18;
              *((_QWORD *)v24 + 1) = v4;
              *((_QWORD *)v24 + 2) = v4 + v5;
              v52 = 0;
              v50 = 0u;
              memset(v51, 0, sizeof(v51));
              __str.__r_.__value_.__r.__words[2] = 0;
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = (unint64_t)v24;
              v77 = v51;
              v25 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v51, 1uLL);
              v26 = __str.__r_.__value_.__r.__words[0];
              v76 = &v25[3 * v27];
              v25[1] = __str.__r_.__value_.__l.__size_;
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
              *v25 = v26;
              v25[2] = *((_QWORD *)&__str.__r_.__value_.__l + 2);
              v28 = v25 + 3;
              v29 = v50;
              *(_QWORD *)&v50 = v25;
              v75 = v29;
              v30 = *(_QWORD **)&v51[0];
              *(_QWORD *)&v51[0] = v76;
              v76 = v30;
              v74 = (void **)v29;
              std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)&v74);
              *((_QWORD *)&v50 + 1) = v28;
              llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&__str);
              llvm::MCContext::MCContext((uint64_t)&v74, (__int128 *)v64, v18, v14, v22, (uint64_t)&v50, 0, 1, 0, 0);
              v31 = (uint64_t (*)(void ***, _QWORD, _QWORD))v10[7];
              if (v31)
              {
                v32 = v31(&v74, 0, 0);
              }
              else
              {
                v32 = operator new();
                bzero((void *)v32, 0x3B0uLL);
                *(_QWORD *)v32 = off_251C1CE80;
                *(_OWORD *)(v32 + 944) = 0u;
                bzero((void *)(v32 + 24), 0x341uLL);
                *(_BYTE *)(v32 + 888) = 0;
                *(_QWORD *)(v32 + 880) = 0;
                *(_OWORD *)(v32 + 864) = 0u;
                llvm::MCObjectFileInfo::initMCObjectFileInfo((llvm::MCObjectFileInfo *)v32, (llvm::MCContext *)&v74, 0, 0);
              }
              ModuleFlag = llvm::Module::getModuleFlag((llvm::Module *)a1, "SDK Version", 0xBuLL);
              *(_QWORD *)(v32 + 872) = getSDKVersionMD(ModuleFlag);
              *(_QWORD *)(v32 + 880) = v34;
              v78 = v32;
              v35 = llvm::Module::getModuleFlag((llvm::Module *)a1, "darwin.target_variant.triple", 0x1CuLL);
              if (v35 && **(_QWORD **)(v35 + 8))
              {
                v36 = llvm::Module::getModuleFlag((llvm::Module *)a1, "darwin.target_variant.triple", 0x1CuLL);
                if (v36)
                {
                  v37 = *(llvm::formatv_object_base ***)(v36 + 8);
                  v40 = *v37;
                  v39 = (llvm::formatv_object_base *)(v37 + 3);
                  v38 = v40;
                }
                else
                {
                  v38 = 0;
                  v39 = (llvm::formatv_object_base *)&str_35;
                }
                v49 = 261;
                v48[0] = v39;
                v48[1] = v38;
                llvm::Triple::Triple(&__str, v48);
                v41 = (std::string *)(v32 + 888);
                if (*(_BYTE *)(v32 + 936))
                {
                  std::string::operator=(v41, &__str);
                  *(_OWORD *)(v32 + 912) = v68;
                  *(_QWORD *)(v32 + 928) = v69;
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v41, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v32 + 904) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
                  }
                  *(_OWORD *)(v32 + 912) = v68;
                  *(_QWORD *)(v32 + 928) = v69;
                  *(_BYTE *)(v32 + 936) = 1;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
              }
              llvm::MCStreamer::MCStreamer((llvm::MCStreamer *)&__str, (llvm::MCContext *)&v74);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_251C1B708;
              v70 = a1;
              v71[1] = 0;
              v71[0] = 0;
              v72[1] = 0;
              v71[2] = 0x1000000000;
              v72[0] = 0;
              v73 = 0;
              v42 = (void (*)(std::string *))v10[26];
              if (v42)
                v42(&__str);
              v43 = (_QWORD *)llvm::createMCAsmParser((uint64_t)&v50, &v74, (uint64_t)&__str, v18, 0);
              v44 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, _WORD *))v10[14];
              if (v44)
              {
                v45 = v44(v22, v43, v47, v53);
                if (v45)
                {
                  v46 = v45;
                  (*(void (**)(_QWORD *, _QWORD))(*v43 + 72))(v43, 0);
                  v43[1] = v46;
                  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v46 + 16))(v46, v43);
                  if (((*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v43 + 80))(v43, 0, 0) & 1) == 0)
                    a2(a3, &__str);
                  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                }
              }
              (*(void (**)(_QWORD *))(*v43 + 8))(v43);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_251C1B708;
              llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll((unsigned int *)v72);
              MEMORY[0x24BD1B398](v72[0], 8);
              llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)v71);
              llvm::MCStreamer::~MCStreamer((llvm::MCStreamer *)&__str);
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              llvm::MCContext::~MCContext((llvm::MCContext *)&v74);
              llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)&v50);
              MEMORY[0x24BD1B3A4](v47, 0x10F0C40CB53E019);
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      v74 = (void **)v63 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v74);
      if (SHIBYTE(v61) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(__p[0]) < 0)
        operator delete(v59[0]);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[1]);
      if (SHIBYTE(v57[0]) < 0)
        operator delete(v56[0]);
      v74 = 0;
      std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)&v74, v14);
    }
    if (SHIBYTE(v64[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v66) < 0)
      operator delete(v65[0]);
  }
}

void llvm::ModuleSymbolTable::printSymbolName(uint64_t a1, llvm::raw_ostream *this, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  int v7;
  const char *v8;
  size_t v9;

  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((a3 & 4) != 0)
  {
    v7 = *(char *)(v4 + 23);
    if (v7 >= 0)
      v8 = (const char *)(a3 & 0xFFFFFFFFFFFFFFF8);
    else
      v8 = *(const char **)v4;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(v4 + 23);
    else
      v9 = *(_QWORD *)(v4 + 8);
    llvm::raw_ostream::write(this, v8, v9);
  }
  else
  {
    if ((*(_DWORD *)(v4 + 32) & 0x300) == 0x100)
    {
      v6 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 5)
      {
        *(_WORD *)(v6 + 4) = 24432;
        *(_DWORD *)v6 = 1835622239;
        *((_QWORD *)this + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(this, "__imp_", 6uLL);
      }
    }
    llvm::Mangler::getNameWithPrefix((llvm::Mangler *)(a1 + 128), this, (const llvm::GlobalValue *)v4, 0);
  }
}

uint64_t llvm::ModuleSymbolTable::getSymbolFlags(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t ValueName;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD v22[2];
  int v23;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 4) != 0)
    return *(unsigned int *)(v2 + 24);
  v3 = *(_DWORD *)(v2 + 32);
  v4 = *(unsigned __int8 *)(v2 + 16);
  if ((v3 & 0xF) == 1)
  {
    v5 = 1;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v2 + 16))
  {
    if (v4 == 3 && (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) == 0)
    {
      v5 = 1;
      v4 = 3;
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if ((v3 & 0x1000000) != 0 || *(_QWORD *)(v2 + 72) != v2 + 72)
  {
LABEL_12:
    if ((v3 & 0x30) == 0x10)
      v5 = ((v3 & 0xFu) - 7 > 1) << 9;
    else
      v5 = 0;
LABEL_15:
    v7 = v2 == 0;
    if (v2 && v4 == 3)
    {
      v7 = 0;
      v5 = v5 & 0xFFFFFBFF | ((*(_BYTE *)(v2 + 80) & 1) << 10);
    }
    goto LABEL_18;
  }
  v7 = v2 == 0;
  v5 = 1;
LABEL_18:
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v8 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(v2, (uint64_t)v22);
  MEMORY[0x24BD1B398](v22[0], 8);
  if (v8 && (*(unsigned __int8 *)(v8 + 16) | 2) == 2)
    v5 |= 0x800u;
  if (*(_BYTE *)(v2 + 16) == 1)
    v9 = v5 | 0x20;
  else
    v9 = v5;
  v10 = *(_DWORD *)(v2 + 32);
  v11 = v10 & 0xF;
  if (v11 == 8)
    v9 |= 0x80u;
  if ((v11 - 7) >= 2)
    v9 |= 2u;
  if (v11 == 10)
    v6 = v9 | 0x10;
  else
    v6 = v9;
  if ((v10 & 0xE) == 2
    || (v10 & 0xE) == 4
    || llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v2))
  {
    v6 = v6 | 4;
  }
  if ((*(_BYTE *)(v2 + 23) & 0x10) != 0)
  {
    ValueName = llvm::Value::getValueName((uint64_t ***)v2);
    if (*(_QWORD *)ValueName >= 5uLL && *(_DWORD *)(ValueName + 16) == 1836477548 && *(_BYTE *)(ValueName + 20) == 46)
      return v6 | 0x80;
  }
  v14 = *(_BYTE *)(v2 + 16) != 3 || v7;
  if ((v14 & 1) == 0 && (*(_BYTE *)(v2 + 34) & 0x80) != 0)
  {
    v15 = (uint64_t *)(***(_QWORD ***)v2 + 2552);
    v22[0] = v2;
    v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v15, v22);
    if (v16[2] == 13)
    {
      v17 = (unint64_t *)v16[1];
      v18 = 0x6C6C766D2E6D6574;
      v19 = bswap64(*v17);
      if (v19 == 0x6C6C766D2E6D6574
        && (v18 = 0x6D65746164617461,
            v19 = bswap64(*(unint64_t *)((char *)v17 + 5)),
            v19 == 0x6D65746164617461))
      {
        v20 = 0;
      }
      else if (v19 < v18)
      {
        v20 = -1;
      }
      else
      {
        v20 = 1;
      }
      if (v20)
        return v6;
      else
        return v6 | 0x80;
    }
  }
  return v6;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>::callback_fn<llvm::ModuleSymbolTable::addModule(llvm::Module *)::$_0>(_QWORD *a1, const void *a2, size_t a3, int a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 __dst;
  unint64_t v29;

  v7 = (_QWORD *)*a1;
  v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 8, 32, 3);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_27;
  v9 = v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v29 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v29) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  *(_QWORD *)(v9 + 16) = v29;
  *(_OWORD *)v9 = __dst;
  v29 = 0;
  __dst = 0uLL;
  *(_DWORD *)(v9 + 24) = a4;
  v13 = v9 | 4;
  v15 = (uint64_t *)v7[14];
  v14 = v7[15];
  if ((unint64_t)v15 < v14)
  {
    *v15 = v13;
    v16 = v15 + 1;
    goto LABEL_25;
  }
  v17 = v7[13];
  v18 = ((uint64_t)v15 - v17) >> 3;
  if ((unint64_t)(v18 + 1) >> 61)
LABEL_27:
    abort();
  v19 = v14 - v17;
  v20 = v19 >> 2;
  if (v19 >> 2 <= (unint64_t)(v18 + 1))
    v20 = v18 + 1;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  if (v21)
    v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v21);
  else
    v22 = 0;
  v23 = (uint64_t *)(v21 + 8 * v18);
  v24 = v21 + 8 * v22;
  *v23 = v13;
  v16 = v23 + 1;
  v26 = (char *)v7[13];
  v25 = (char *)v7[14];
  if (v25 != v26)
  {
    do
    {
      v27 = *((_QWORD *)v25 - 1);
      v25 -= 8;
      *--v23 = v27;
    }
    while (v25 != v26);
    v25 = (char *)v7[13];
  }
  v7[13] = v23;
  v7[14] = v16;
  v7[15] = v24;
  if (v25)
    operator delete(v25);
LABEL_25:
  v7[14] = v16;
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__dst);
}

void llvm::function_ref<void ()(llvm::RecordStreamer &)>::callback_fn<llvm::ModuleSymbolTable::CollectAsmSymbols(llvm::Module const&,llvm::function_ref<void ()(llvm::StringRef,llvm::object::BasicSymbolRef::Flags)>)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  llvm::RecordStreamer::flushSymverDirectives((llvm::RecordStreamer *)a2);
  v4 = *(_QWORD *)(a2 + 312);
  v5 = *(unsigned int *)(a2 + 320);
  if ((_DWORD)v5)
  {
    for (i = *(uint64_t **)(a2 + 312); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a2 + 312);
  }
  v8 = (uint64_t *)(v4 + 8 * v5);
  if (i != v8)
  {
    v9 = *i;
    do
    {
      v10 = *(_DWORD *)(v9 + 8) - 1;
      if (v10 > 5)
        v11 = 2048;
      else
        v11 = dword_24AA31B04[v10];
      (**(void (***)(_QWORD, uint64_t, _QWORD, uint64_t))a1)(*(_QWORD *)(*(_QWORD *)a1 + 8), v9 + 16, *(_QWORD *)v9, v11);
      do
      {
        v12 = i[1];
        ++i;
        v9 = v12;
        if (v12)
          v13 = v9 == -8;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != v8);
  }
}

_QWORD *llvm::object::ObjectFile::getSymbolValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8;
    if (v8)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v7;
      return result;
    }
    goto LABEL_7;
  }
  if ((v8 & 1) == 0)
  {
    if ((v8 & 0x10) != 0)
    {
      result = (_QWORD *)llvm::object::ObjectFile::getCommonSymbolSize(a1, a2);
LABEL_8:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_QWORD *)a3 = result;
      return result;
    }
LABEL_7:
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2);
    goto LABEL_8;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = 0;
  return result;
}

llvm::raw_ostream *llvm::object::ObjectFile::printSymbolName@<X0>(uint64_t a1@<X0>, llvm::raw_ostream *a2@<X1>, uint64_t a3@<X2>, const void **a4@<X8>)
{
  llvm::raw_ostream *result;
  char v7;
  const void *v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = (llvm::raw_ostream *)(*(_QWORD *(**)(const void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(v8, a1, a3);
  if ((v9 & 1) != 0)
  {
    *a4 = v8[0];
  }
  else
  {
    result = llvm::raw_ostream::operator<<(a2, v8[0], (size_t)v8[1]);
    v7 = v9;
    *a4 = 0;
    if ((v7 & 1) != 0)
    {
      result = (llvm::raw_ostream *)v8[0];
      v8[0] = 0;
      if (result)
        return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::object::ObjectFile::isSectionBitcode(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD v4[2];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v4);
  if ((v5 & 1) != 0)
  {
    v3 = (_QWORD *)v4[0];
    v4[0] = 0;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v3);
    if (v3)
      (*(void (**)(_QWORD *))(*v3 + 8))(v3);
    if ((v5 & 1) != 0)
    {
      result = v4[0];
      v4[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v4[1] != 7)
    return 0;
  return *(_DWORD *)v4[0] == 1986817070 && *(_DWORD *)(v4[0] + 3) == 1667394934;
}

uint64_t llvm::object::ObjectFile::isSectionStripped()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::isBerkeleyText(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

uint64_t llvm::object::ObjectFile::isBerkeleyData(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t llvm::object::ObjectFile::isDebugSection()
{
  return 0;
}

uint64_t llvm::object::ObjectFile::hasDebugInfo(llvm::object::ObjectFile *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v2 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 352))(this);
  v4 = v3;
  v5 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 360))(this);
  v13 = v2;
  v14 = v4;
  if (v4 == v6 && v2 == v5)
    return 0;
  v8 = v5;
  v9 = v6;
  do
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 264))(v4, v2);
    if ((v10 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 136))(v14, &v13);
    v2 = v13;
    v4 = v14;
  }
  while (v14 != v9 || v13 != v8);
  return v10;
}

uint64_t llvm::object::ObjectFile::getRelocatedSection@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

double llvm::object::ObjectFile::makeTriple@<D0>(llvm::object::ObjectFile *this@<X0>, llvm::Triple *a2@<X8>)
{
  uint64_t v4;
  int v5;
  char *ArchName;
  uint64_t v7;
  double result;
  int v9;
  llvm::formatv_object_base *v10;
  __int16 v11;

  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = (*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 392))(this);
  v5 = v4;
  ArchName = llvm::Triple::getArchName(v4, v4, 0);
  llvm::Triple::setArchName(a2, ArchName, v7);
  if ((v5 - 1) <= 1)
    (*(void (**)(llvm::object::ObjectFile *, llvm::Triple *))(*(_QWORD *)this + 416))(this, a2);
  v9 = *((_DWORD *)this + 2);
  if ((v9 - 17) <= 3)
    return llvm::Triple::setObjectFormat(a2, 5);
  if (v9 == 10)
  {
    if ((*(unsigned int (**)(llvm::object::ObjectFile *))(*(_QWORD *)this + 392))(this) == 35)
    {
      v10 = (llvm::formatv_object_base *)"thumbv7-windows";
      v11 = 259;
      return llvm::Triple::setTriple(a2, &v10);
    }
  }
  else if ((v9 - 11) <= 1)
  {
    llvm::Triple::setOSName(a2, (uint64_t)&str_85_0, 3);
    return llvm::Triple::setObjectFormat(a2, 8);
  }
  return result;
}

void llvm::object::ObjectFile::createObjectFile(uint64_t a1, int a2)
{
  if (!a2)
    a2 = llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  __asm { BR              X10 }
}

_QWORD *sub_24A9037F4(llvm::object *a1)
{
  uint64_t v1;
  _UNKNOWN **v2;
  _QWORD *result;

  v2 = llvm::object::object_category(a1);
  result = (_QWORD *)operator new();
  *result = &off_251C12820;
  result[1] = 2;
  result[2] = v2;
  *(_BYTE *)(v1 + 8) |= 1u;
  *(_QWORD *)v1 = result;
  return result;
}

_QWORD *llvm::object::OffloadBinary::create@<X0>(llvm::object *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  llvm::object *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16[2];

  v3 = *((_QWORD *)a1 + 1);
  if (v3 > 0x47
    && (v4 = a1, a1 = (llvm::object *)llvm::identify_magic(*(unsigned __int8 **)a1, v3), (_DWORD)a1 == 34)
    && (v5 = *(_QWORD *)v4, (*(_QWORD *)v4 & 7) == 0)
    && *(_DWORD *)(v5 + 4) == 1)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *((_QWORD *)v4 + 1);
    if (v6 <= v7)
    {
      v8 = *(_QWORD *)(v5 + 16);
      if (v8 <= v6 - 40 && *(_QWORD *)(v5 + 24) <= v6 - 32)
      {
        v9 = v5 + v8;
        if (*(_QWORD *)(v5 + v8 + 24) <= v7 && *(_QWORD *)(v9 + 8) <= v7)
        {
          v14 = operator new();
          v15 = *((_OWORD *)v4 + 1);
          v16[0] = *(_OWORD *)v4;
          v16[1] = v15;
          result = (_QWORD *)llvm::object::OffloadBinary::OffloadBinary(v14, v16, v5, v9);
          v13 = *(_BYTE *)(a2 + 8) & 0xFE;
          goto LABEL_13;
        }
      }
    }
    v10 = llvm::object::object_category(a1);
    result = (_QWORD *)operator new();
    v12 = 4;
  }
  else
  {
    v10 = llvm::object::object_category(a1);
    result = (_QWORD *)operator new();
    v12 = 3;
  }
  *result = &off_251C12820;
  result[1] = v12;
  result[2] = v10;
  v13 = *(_BYTE *)(a2 + 8) | 1;
LABEL_13:
  *(_BYTE *)(a2 + 8) = v13;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t llvm::object::OffloadBinary::OffloadBinary(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  size_t v16;
  char v17;
  unint64_t v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  const char *v43;
  __int128 v44;
  __int128 v45;
  int v46;
  unint64_t v47;

  v5 = *a2;
  v44 = a2[1];
  *(_DWORD *)(a1 + 8) = 8;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v44;
  *(_QWORD *)a1 = &off_251C1B6E0;
  *(_QWORD *)(a1 + 48) = 0;
  v39 = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = (char **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 112) = a4;
  v8 = *(_QWORD *)(a4 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = v7 + *(_QWORD *)(a4 + 8);
    v40 = v10;
    v41 = *(_QWORD *)(a4 + 16);
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 96);
      v12 = *(_QWORD *)(v10 + 16 * v9);
      v13 = v11 + v12;
      if (v11)
      {
        v14 = strlen((const char *)(v11 + v12));
        v15 = (const char *)(v11 + *(_QWORD *)(v10 + 16 * v9 + 8));
        v16 = strlen(v15);
      }
      else
      {
        v14 = 0;
        v16 = 0;
        v15 = *(const char **)(v10 + 16 * v9 + 8);
      }
      *(_QWORD *)&v45 = v13;
      *((_QWORD *)&v45 + 1) = v14;
      v46 = 0;
      v47 = 0;
      v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)&v45, &v47);
      v18 = v47;
      if ((v17 & 1) == 0)
        break;
      v19 = *(_DWORD *)(v47 + 16);
      v20 = *v6;
LABEL_30:
      v37 = &v20[32 * v19];
      *((_QWORD *)v37 + 2) = v15;
      *((_QWORD *)v37 + 3) = v16;
      if (++v9 == v8)
        return a1;
    }
    v21 = *(_DWORD *)(a1 + 56);
    v22 = *(_DWORD *)(a1 + 64);
    if (4 * v21 + 4 >= 3 * v22)
    {
      v22 *= 2;
    }
    else if (v22 + ~v21 - *(_DWORD *)(a1 + 60) > v22 >> 3)
    {
LABEL_10:
      v42 = v16;
      ++*(_DWORD *)(a1 + 56);
      if (*(_QWORD *)v18 != -1)
        --*(_DWORD *)(a1 + 60);
      *(_OWORD *)v18 = v45;
      *(_DWORD *)(v18 + 16) = 0;
      v24 = *(char **)(a1 + 80);
      v23 = *(_QWORD *)(a1 + 88);
      v43 = v15;
      if ((unint64_t)v24 >= v23)
      {
        v26 = v6;
        v27 = *v6;
        v28 = (v24 - *v6) >> 5;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59)
          abort();
        v30 = v23 - (_QWORD)v27;
        if (v30 >> 4 > v29)
          v29 = v30 >> 4;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v32 = (char *)operator new(32 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[32 * v28];
        *(_QWORD *)v33 = v13;
        *((_QWORD *)v33 + 1) = v14;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        v34 = v33;
        v6 = v26;
        if (v24 != v27)
        {
          do
          {
            v35 = *((_OWORD *)v24 - 1);
            *((_OWORD *)v34 - 2) = *((_OWORD *)v24 - 2);
            *((_OWORD *)v34 - 1) = v35;
            v34 -= 32;
            v24 -= 32;
          }
          while (v24 != v27);
          v24 = *v26;
        }
        v10 = v40;
        v8 = v41;
        v36 = &v32[32 * v31];
        v25 = v33 + 32;
        *(_QWORD *)(a1 + 72) = v34;
        *(_QWORD *)(a1 + 80) = v33 + 32;
        *(_QWORD *)(a1 + 88) = v36;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v24 = v13;
        *((_QWORD *)v24 + 1) = v14;
        v25 = v24 + 32;
        *((_QWORD *)v24 + 2) = 0;
        *((_QWORD *)v24 + 3) = 0;
      }
      *(_QWORD *)(a1 + 80) = v25;
      v20 = *(char **)(a1 + 72);
      v19 = ((unint64_t)(v25 - v20) >> 5) - 1;
      *(_DWORD *)(v18 + 16) = v19;
      v16 = v42;
      v15 = v43;
      goto LABEL_30;
    }
    llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(v39, v22);
    v47 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)&v45, &v47);
    v18 = v47;
    goto LABEL_10;
  }
  return a1;
}

void llvm::object::OffloadBinary::~OffloadBinary(llvm::object::OffloadBinary *this)
{
  void *v2;

  *(_QWORD *)this = &off_251C1B6E0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 6), 8);
}

{
  void *v2;

  *(_QWORD *)this = &off_251C1B6E0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 6), 8);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 isEqual;
  _BOOL4 v16;
  unint64_t v17;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = (a2 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8), a3, a4);
    v9 = a1 + 24 * v8;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(_QWORD *)(a3 + 8), *(void **)v9, *(_QWORD *)(v9 + 8)))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*(_QWORD *)v9 != -1)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *(_QWORD *)v9 == -2;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = a1 + 24 * v8;
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a3, *(_QWORD *)(a3 + 8), *(void **)v9, *(_QWORD *)(v9 + 8));
        v11 = v17;
        v16 = isEqual;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a4 = v9;
  return result;
}

_OWORD *llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_24AA2AC20;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>,llvm::StringRef,unsigned int,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,unsigned int>>::LookupBucketFor<llvm::StringRef>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, (unint64_t *)&v17);
          v14 = v17;
          *v17 = *(_OWORD *)v13;
          *((_DWORD *)v14 + 4) = *(_DWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 24 * v15;
    do
    {
      *result = xmmword_24AA2AC20;
      result = (_OWORD *)((char *)result + 24);
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

uint64_t *llvm::RecordStreamer::markDefined(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  llvm::StringMapImpl *v2;
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *result;
  uint64_t v8;

  v2 = (llvm::RecordStreamer *)((char *)this + 312);
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 - 1);
    v6 = *v5;
    v3 = v5 + 2;
    v4 = v6;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(v2, v3, v4);
  v8 = *(int *)(*result + 8);
  if (v8 <= 6 && ((0x6Fu >> v8) & 1) != 0)
    *(_DWORD *)(*result + 8) = dword_24AA31B40[v8];
  return result;
}

uint64_t *llvm::RecordStreamer::markUsed(llvm::RecordStreamer *this, const llvm::MCSymbol *a2)
{
  llvm::StringMapImpl *v2;
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *result;
  int v8;

  v2 = (llvm::RecordStreamer *)((char *)this + 312);
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 - 1);
    v6 = *v5;
    v3 = v5 + 2;
    v4 = v6;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(v2, v3, v4);
  v8 = *(_DWORD *)(*result + 8);
  if (v8 == 5 || v8 == 0)
    *(_DWORD *)(*result + 8) = 5;
  return result;
}

uint64_t *llvm::RecordStreamer::emitLabel(llvm::RecordStreamer *a1, llvm::MCSymbol *a2)
{
  llvm::MCStreamer::emitLabel((uint64_t)a1, a2, 0);
  return llvm::RecordStreamer::markDefined(a1, a2);
}

uint64_t llvm::RecordStreamer::emitAssignment(llvm::RecordStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  llvm::RecordStreamer::markDefined(this, a2);
  return llvm::MCStreamer::emitAssignment(this, a2, a3);
}

uint64_t llvm::RecordStreamer::emitSymbolAttribute(llvm::RecordStreamer *this, llvm::MCSymbol *a2, int a3)
{
  llvm::StringMapImpl *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  int v14;

  switch(a3)
  {
    case 24:
      goto LABEL_4;
    case 16:
LABEL_18:
      llvm::RecordStreamer::markUsed(this, a2);
      return 1;
    case 9:
LABEL_4:
      v6 = (llvm::RecordStreamer *)((char *)this + 312);
      if ((*(_BYTE *)a2 & 4) != 0)
      {
        v9 = (_QWORD *)*((_QWORD *)a2 - 1);
        v10 = *v9;
        v7 = v9 + 2;
        v8 = v10;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v11 = llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(v6, v7, v8);
      v12 = *(_DWORD *)(*v11 + 8);
      if (v12 <= 5)
      {
        v13 = 1 << v12;
        if ((v13 & 0x23) != 0)
        {
          if (a3 == 24)
            v14 = 6;
          else
            v14 = 1;
        }
        else
        {
          if ((v13 & 0xC) == 0)
            goto LABEL_17;
          if (a3 == 24)
            v14 = 4;
          else
            v14 = 3;
        }
        *(_DWORD *)(*v11 + 8) = v14;
      }
LABEL_17:
      if (a3 == 16)
        goto LABEL_18;
      break;
  }
  return 1;
}

uint64_t *llvm::RecordStreamer::emitZerofill(llvm::RecordStreamer *a1, int a2, llvm::MCSymbol *a3)
{
  return llvm::RecordStreamer::markDefined(a1, a3);
}

void llvm::RecordStreamer::emitELFSymverDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t *v25;

  v25 = 0;
  v9 = v25;
  if ((v8 & 1) != 0)
    goto LABEL_7;
  v10 = *(_DWORD *)(a1 + 344);
  v11 = *(_DWORD *)(a1 + 352);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_25;
  }
  if (v11 + ~v10 - *(_DWORD *)(a1 + 348) <= v11 >> 3)
  {
LABEL_25:
    llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::grow(a1 + 336, v11);
    v25 = 0;
    v9 = v25;
  }
  ++*(_DWORD *)(a1 + 344);
  if (*v9 != -4096)
    --*(_DWORD *)(a1 + 348);
  *v9 = a2;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0;
LABEL_7:
  v12 = v9[3];
  v13 = (_QWORD *)v9[2];
  if ((unint64_t)v13 >= v12)
  {
    v15 = v9[1];
    v16 = ((uint64_t)v13 - v15) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      abort();
    v18 = v12 - v15;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v9 + 3), v19);
    else
      v20 = 0;
    v21 = &v20[16 * v16];
    v22 = &v20[16 * v19];
    *(_QWORD *)v21 = a3;
    *((_QWORD *)v21 + 1) = a4;
    v14 = v21 + 16;
    v24 = (char *)v9[1];
    v23 = (char *)v9[2];
    if (v23 != v24)
    {
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v23 - 1);
        v21 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)v9[1];
    }
    v9[1] = (uint64_t)v21;
    v9[2] = (uint64_t)v14;
    v9[3] = (uint64_t)v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v13 = a3;
    v13[1] = a4;
    v14 = v13 + 2;
  }
  v9[2] = (uint64_t)v14;
}

void llvm::RecordStreamer::flushSymverDirectives(llvm::RecordStreamer *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const llvm::GlobalValue *v16;
  unint64_t v17;
  size_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  size_t *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD *);
  uint64_t v31;
  _QWORD *v32;
  llvm::RecordStreamer *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  _BYTE *v39;
  uint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  int Key;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  int v55;
  _QWORD *v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  const char *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  llvm::MCContext *v68;
  const llvm::MCSymbol *Symbol;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  const char *v79;
  _QWORD *v81;
  _QWORD *v82;
  __int128 *v83;
  _QWORD *v84;
  _BYTE *v85;
  _QWORD *v86;
  _BOOL4 v87;
  _QWORD v88[4];
  __int16 v89;
  _QWORD v90[2];
  _BYTE *v91;
  _QWORD *v92;
  __int128 v93;
  __int128 v94;
  _BYTE *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD v101[2];
  int v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  __int128 v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t *v113;
  __int128 v114;
  _QWORD v115[11];

  v1 = 0;
  v115[8] = *MEMORY[0x24BDAC8D0];
  v103 = 0;
  v104 = 0;
  v105 = 0x1000000000;
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  v113 = v115;
  v114 = xmmword_24AA2B2D0;
  v2 = (_QWORD *)*((_QWORD *)this + 38);
  v3 = v2 + 3;
  v4 = (_QWORD *)v2[4];
  v5 = v2 + 1;
  v6 = (_QWORD *)v2[2];
  v7 = v2 + 5;
  v8 = (_BYTE *)v2[6];
  v9 = v2 + 7;
  v10 = (_QWORD *)v2[8];
  *(_QWORD *)&v94 = v4;
  *((_QWORD *)&v94 + 1) = v6;
  v95 = v8;
  v96 = v10;
  v97 = v3;
  v98 = v5;
  v99 = v7;
  v100 = v9;
  v82 = v3;
  v84 = v9;
  v81 = v5;
  v86 = v7;
  while (v4 != v3 || v6 != v5 || v8 != (_BYTE *)v7 || v10 != v9 || v97 != v3 || v98 != v5 || v99 != v7 || v100 != v9)
  {
    v11 = 0;
    v112 = 0;
    v108 = 0;
    v110 = 0;
    *(_QWORD *)&v107 = 0;
    v106 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<0ul>;
    *((_QWORD *)&v107 + 1) = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<1ul>;
    v109 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<2ul>;
    v111 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<3ul>;
    do
    {
      v12 = *(uint64_t (**)(_QWORD *))((char *)&v106 + v11);
      v13 = *(uint64_t *)((char *)&v106 + v11 + 8);
      v14 = (_QWORD *)((char *)&v94 + (v13 >> 1));
      if ((v13 & 1) != 0)
        v12 = *(uint64_t (**)(_QWORD *))(*v14 + v12);
      v15 = v12(v14);
      v16 = (const llvm::GlobalValue *)v15;
      if (v15)
        break;
      v28 = v11 == 48;
      v11 += 16;
    }
    while (!v28);
    if ((*(_BYTE *)(v15 + 23) & 0x10) != 0)
    {
      *(_QWORD *)&v114 = 0;
      v17 = *(_QWORD *)llvm::Value::getValueName((uint64_t ***)v15) + 1;
      if (*((_QWORD *)&v114 + 1) < v17)
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v113, v115, v17, 1);
      llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v101, (uint64_t)&v113, v16, 0);
      v19 = v113;
      v18 = v114;
      v20 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v103, v113, v114);
      v1 = v103;
      v21 = v20;
      v22 = v103[v20];
      if (v22 == -8)
      {
        LODWORD(v105) = v105 - 1;
      }
      else if (v22)
      {
        v9 = v84;
        v7 = v86;
LABEL_32:
        *(_QWORD *)(v22 + 8) = v16;
        goto LABEL_33;
      }
      v23 = operator new(v18 + 17, (std::align_val_t)8uLL);
      v24 = v23;
      v25 = (char *)(v23 + 2);
      if (v18)
        memcpy(v23 + 2, v19, v18);
      v25[v18] = 0;
      *v24 = v18;
      v24[1] = 0;
      v1[v21] = v24;
      ++HIDWORD(v104);
      v26 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v103, v21);
      v1 = v103;
      v27 = v26;
      v3 = v82;
      v9 = v84;
      v5 = v81;
      v7 = v86;
      while (1)
      {
        v22 = v103[v27];
        v28 = !v22 || v22 == -8;
        if (!v28)
          break;
        ++v27;
      }
      goto LABEL_32;
    }
LABEL_33:
    v29 = 0;
    v112 = 0;
    v108 = 0;
    v110 = 0;
    *(_QWORD *)&v107 = 0;
    v106 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<0ul>;
    *((_QWORD *)&v107 + 1) = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<1ul>;
    v109 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<2ul>;
    v111 = llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<3ul>;
    do
    {
      v30 = *(uint64_t (**)(_QWORD *))((char *)&v106 + v29);
      v31 = *(uint64_t *)((char *)&v106 + v29 + 8);
      v32 = (_QWORD *)((char *)&v94 + (v31 >> 1));
      if ((v31 & 1) != 0)
        v30 = *(uint64_t (**)(_QWORD *))(*v32 + v30);
      if ((v30(v32) & 1) != 0)
        break;
      v28 = v29 == 48;
      v29 += 16;
    }
    while (!v28);
    v6 = (_QWORD *)*((_QWORD *)&v94 + 1);
    v4 = (_QWORD *)v94;
    v8 = v95;
    v10 = v96;
  }
  v33 = this;
  if (*((_DWORD *)this + 86))
  {
    v34 = *((unsigned int *)this + 88);
    if ((_DWORD)v34)
    {
      v35 = 32 * v34;
      v36 = (_QWORD *)*((_QWORD *)this + 42);
      while ((*v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v36 += 4;
        v35 -= 32;
        if (!v35)
          goto LABEL_113;
      }
    }
    else
    {
      v36 = (_QWORD *)*((_QWORD *)this + 42);
    }
    v37 = *((_QWORD *)this + 42) + 32 * v34;
    if (v36 != (_QWORD *)v37)
    {
      v38 = &v108;
      v78 = (uint64_t *)((char *)this + 312);
      v76 = v104;
      v39 = (_BYTE *)*v36;
      v77 = (_QWORD *)v37;
      while (1)
      {
        if ((*v39 & 4) != 0)
        {
          v42 = (_QWORD *)*((_QWORD *)v39 - 1);
          v43 = *v42;
          v40 = v42 + 2;
          v41 = v43;
        }
        else
        {
          v40 = 0;
          v41 = 0;
        }
        Key = llvm::StringMapImpl::FindKey(v78, v40, v41);
        v85 = v39;
        if (Key == -1 || Key == (unint64_t)*((unsigned int *)v33 + 80))
          break;
        v45 = *(_DWORD *)(*(_QWORD *)(*v78 + 8 * Key) + 8);
        v55 = v45 - 1;
        if ((v45 - 1) >= 6 || ((0x2Du >> v55) & 1) == 0)
          goto LABEL_55;
        v46 = dword_24AA31B5C[v55];
        if ((v45 - 2) < 3)
          goto LABEL_80;
        v87 = 0;
        v47 = 0;
LABEL_56:
        if ((*v39 & 4) != 0)
        {
          v50 = (_QWORD *)*((_QWORD *)v39 - 1);
          v51 = *v50;
          v48 = v50 + 2;
          v49 = v51;
        }
        else
        {
          v48 = 0;
          v49 = 0;
        }
        v52 = llvm::ValueSymbolTable::lookup(*(_QWORD *)(*((_QWORD *)v33 + 38) + 112), v48, v49);
        if (v52
          || ((*v39 & 4) != 0
            ? (v56 = (_QWORD *)*((_QWORD *)v39 - 1), v57 = *v56, v53 = v56 + 2, v54 = v57)
            : (v53 = 0, v54 = 0),
              (v58 = llvm::StringMapImpl::FindKey((uint64_t *)&v103, v53, v54), v58 != -1)
           && v58 != v76
           && (v52 = *(_QWORD *)(v1[v58] + 8)) != 0))
        {
          if (v47)
          {
            if ((*(_DWORD *)(v52 + 32) & 0xF) != 0)
            {
              if ((*(_DWORD *)(v52 + 32) & 0xFu) - 7 >= 2)
              {
                if ((*(_DWORD *)(v52 + 32) & 0xFu) - 2 > 8)
                  v46 = 0;
                else
                  v46 = dword_24AA31B74[(*(_DWORD *)(v52 + 32) & 0xF) - 2];
              }
              else
              {
                v46 = 17;
              }
            }
            else
            {
              v46 = 9;
            }
          }
          if (v87)
          {
LABEL_80:
            v59 = 1;
LABEL_93:
            v87 = v59;
            goto LABEL_94;
          }
          if ((*(_DWORD *)(v52 + 32) & 0xF) == 1)
          {
            v60 = 1;
LABEL_92:
            v59 = v60 ^ 1;
            goto LABEL_93;
          }
          if (*(_BYTE *)(v52 + 16))
          {
            if (*(_BYTE *)(v52 + 16) == 3)
            {
              v61 = (*(_DWORD *)(v52 + 20) & 0x7FFFFFF) == 0;
              goto LABEL_89;
            }
          }
          else if (*(_QWORD *)(v52 + 72) == v52 + 72)
          {
            v61 = (*(_DWORD *)(v52 + 32) & 0x1000000) == 0;
LABEL_89:
            v60 = v61;
            goto LABEL_92;
          }
          v60 = 0;
          goto LABEL_92;
        }
LABEL_94:
        v62 = (__int128 *)v36[1];
        v83 = (__int128 *)v36[2];
        if (v62 != v83)
        {
          v63 = "@";
          if (v87)
            v63 = "@@";
          v79 = v63;
          do
          {
            v64 = v46;
            v93 = *v62;
            llvm::StringRef::split((uint64_t *)&v93, "@@@", 3uLL, (uint64_t)v90);
            v65 = v38;
            v106 = v38;
            v107 = xmmword_24AA2AC90;
            if (v92 && *v91 != 64)
            {
              v89 = 773;
              v88[0] = v90[0];
              v88[1] = v90[1];
              v88[2] = v79;
              *(_QWORD *)&v94 = v88;
              v95 = v91;
              v96 = v92;
              LOWORD(v97) = 1282;
              llvm::Twine::toStringRef((unsigned __int8 *)&v94, (uint64_t)&v106);
              *(_QWORD *)&v93 = v66;
              *((_QWORD *)&v93 + 1) = v67;
            }
            v68 = (llvm::MCContext *)*((_QWORD *)this + 1);
            LOWORD(v97) = 261;
            v94 = v93;
            Symbol = (const llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v68, (const llvm::Twine *)&v94);
            v70 = *((_QWORD *)this + 1);
            v71 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v70 + 184, 24, 3);
            v72 = *(unsigned __int8 *)(*(_QWORD *)(v70 + 144) + 18) << 16;
            *(_BYTE *)v71 = 2;
            *(_DWORD *)(v71 + 1) = v72 | (*(unsigned __int8 *)(v71 + 4) << 24);
            *(_QWORD *)(v71 + 8) = 0;
            *(_QWORD *)(v71 + 16) = v85;
            if (v87)
              llvm::RecordStreamer::markDefined(this, Symbol);
            llvm::MCStreamer::emitAssignment(this, Symbol, (const llvm::MCExpr **)v71);
            v38 = v65;
            v46 = v64;
            if ((_DWORD)v64)
              (*(void (**)(llvm::RecordStreamer *, const llvm::MCSymbol *, uint64_t))(*(_QWORD *)this + 296))(this, Symbol, v64);
            if (v106 != v65)
              free(v106);
            ++v62;
          }
          while (v62 != v83);
        }
        v36 += 4;
        v33 = this;
        if (v36 != v77)
        {
          while (1)
          {
            v39 = (_BYTE *)*v36;
            if ((*v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
              break;
            v36 += 4;
            if (v36 == v77)
              goto LABEL_113;
          }
          if (v36 != v77)
            continue;
        }
        goto LABEL_113;
      }
      v45 = 0;
LABEL_55:
      v46 = 0;
      v87 = (v45 - 2) < 3;
      v47 = 1;
      goto LABEL_56;
    }
  }
LABEL_113:
  if (v113 != v115)
    free(v113);
  MEMORY[0x24BD1B398](v101[0], 8);
  if (HIDWORD(v104))
  {
    v73 = v104;
    if ((_DWORD)v104)
    {
      v74 = v1;
      do
      {
        if (*v74 != -8 && *v74 != 0)
          MEMORY[0x24BD1B398]();
        ++v74;
        --v73;
      }
      while (v73);
    }
  }
  free(v1);
}

void llvm::RecordStreamer::~RecordStreamer(llvm::RecordStreamer *this)
{
  *(_QWORD *)this = off_251C1B708;
  llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll((unsigned int *)this + 84);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 42), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 312);
  llvm::MCStreamer::~MCStreamer(this);
}

{
  *(_QWORD *)this = off_251C1B708;
  llvm::DenseMapBase<llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>,llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::destroyAll((unsigned int *)this + 84);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 42), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 312);
  llvm::MCStreamer::~MCStreamer(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::MCStreamer::getAssemblerPtr(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::isVerboseAsm(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::hasRawTextSupport(llvm::MCStreamer *this)
{
  return 0;
}

uint64_t llvm::MCStreamer::isIntegratedAssemblerRequired(llvm::MCStreamer *this)
{
  return 0;
}

const char *llvm::MCStreamer::getMnemonic()
{
  return "";
}

uint64_t llvm::MCStreamer::emitIntValueInHex(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 512))(this);
}

uint64_t llvm::MCStreamer::emitIntValueInHexWithPadding(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 512))(this);
}

void llvm::MCStreamer::emitRelocDirective(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t llvm::MCStreamer::mayHaveInstructions()
{
  return 1;
}

uint64_t *llvm::StringMap<llvm::RecordStreamer::State,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = v11 + 16;
  if (a3)
    memcpy(v11 + 16, a2, a3);
  v13[a3] = 0;
  *(_QWORD *)v12 = a3;
  *((_DWORD *)v12 + 2) = 0;
  *i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

_QWORD *llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          v15[3] = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<0ul>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<1ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<2ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::incrementHelper<3ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  if (v1 != v2)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<0ul>(_QWORD *a1)
{
  if (*a1 == a1[4] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<1ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 40) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<2ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == *(_QWORD *)(a1 + 48) || v1 == 0)
    return 0;
  else
    return v1 - 48;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,true>>::getHelper<3ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 == *(_QWORD *)(a1 + 56) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

void llvm::object::SymbolicFile::createSymbolicFile(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v5;
  __int128 v7;
  __n128 *v8;
  __int128 v9;
  const llvm::object::ObjectFile *v10;
  __int128 v11;
  __n128 *v12;
  __int128 v13;
  _UNKNOWN **v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __n128 *v18;
  unint64_t v19;
  __n128 *v20;
  _OWORD v21[2];
  _OWORD v22[2];
  _OWORD v23[2];
  _OWORD v24[2];
  __n128 *v25;
  char v26;
  __n128 v27;
  char v28;
  __n128 *v29;
  char v30;
  uint64_t v31;

  v5 = (_OWORD *)a1;
  v31 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    a1 = llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
    a2 = a1;
  }
  if (a2 > 0x1E)
  {
LABEL_19:
    v14 = llvm::object::object_category((llvm::object *)a1);
    v15 = operator new();
    *(_QWORD *)v15 = &off_251C12820;
    *(_QWORD *)(v15 + 8) = 2;
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(_BYTE *)(a4 + 8) | 1;
LABEL_21:
    *(_BYTE *)(a4 + 8) = v16;
    *(_QWORD *)a4 = v15;
    return;
  }
  if (((1 << a2) & 0x772FFFF8) == 0)
  {
    if (a2 == 1 && a3)
    {
      v13 = v5[1];
      v24[0] = *v5;
      v24[1] = v13;
      llvm::object::IRObjectFile::create((uint64_t)v24, a3, (uint64_t)&v27);
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (((1 << a2) & 0x742FFDE8) != 0)
  {
    v7 = v5[1];
    v23[0] = *v5;
    v23[1] = v7;
    llvm::object::ObjectFile::createObjectFile((uint64_t)v23, a2);
LABEL_7:
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v27.n128_u8[8] & 1;
    v8 = (__n128 *)v27.n128_u64[0];
LABEL_8:
    *(_QWORD *)a4 = v8;
    return;
  }
  if (((1 << a2) & 0x1000210) == 0)
  {
    v15 = operator new();
    v17 = v5[1];
    *(_OWORD *)(v15 + 16) = *v5;
    *(_OWORD *)(v15 + 32) = v17;
    *(_DWORD *)(v15 + 8) = 2;
    *(_QWORD *)v15 = &off_251C1BC28;
    v16 = *(_BYTE *)(a4 + 8) & 0xFE;
    goto LABEL_21;
  }
  v9 = v5[1];
  v22[0] = *v5;
  v22[1] = v9;
  llvm::object::ObjectFile::createObjectFile((uint64_t)v22, a2);
  if (!a3 || (v30 & 1) != 0)
  {
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v30 & 1;
    v8 = v29;
    goto LABEL_8;
  }
  llvm::object::IRObjectFile::findBitcodeInObject(v29, v10, &v27);
  if ((v28 & 1) != 0)
  {
    v18 = (__n128 *)v27.n128_u64[0];
    v27.n128_u64[0] = 0;
    v25 = v18;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v25);
    if (v25)
      (*(void (**)(__n128 *))(v25->n128_u64[0] + 8))(v25);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v30 & 1;
    v12 = v29;
    v29 = 0;
  }
  else
  {
    v11 = v5[1];
    v21[0] = v27;
    v21[1] = v11;
    llvm::object::IRObjectFile::create((uint64_t)v21, a3, (uint64_t)&v25);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v26 & 1;
    v12 = v25;
  }
  *(_QWORD *)a4 = v12;
  if ((v28 & 1) != 0)
  {
    v19 = v27.n128_u64[0];
    v27.n128_u64[0] = 0;
    if (v19)
      (*(void (**)(unint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v29;
  v29 = 0;
  if (v20)
    (*(void (**)(__n128 *))(v20->n128_u64[0] + 8))(v20);
}

void llvm::object::COFFImportFile::~COFFImportFile(llvm::object::COFFImportFile *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::object::COFFImportFile::moveSymbolNext(uint64_t a1, _QWORD *a2)
{
  ++*a2;
}

llvm::raw_ostream *llvm::object::COFFImportFile::printSymbolName@<X0>(llvm::raw_ostream *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *result;

  if (!a3)
  {
    v7 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 5)
    {
      *(_WORD *)(v7 + 4) = 24432;
      *(_DWORD *)v7 = 1835622239;
      *((_QWORD *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, "__imp_", 6uLL);
    }
  }
  v8 = (const char *)(*(_QWORD *)(a2 + 16) + 20);
  v9 = strlen(v8);
  result = llvm::raw_ostream::operator<<(this, v8, v9);
  *a4 = 0;
  return result;
}

void llvm::object::COFFImportFile::getSymbolFlags(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_DWORD *)a1 = 2;
}

uint64_t llvm::object::COFFImportFile::symbol_begin(llvm::object::COFFImportFile *this)
{
  return 0;
}

uint64_t llvm::object::COFFImportFile::symbol_end(llvm::object::COFFImportFile *this)
{
  if ((*(_WORD *)(*((_QWORD *)this + 2) + 18) & 3) == 1)
    return 1;
  else
    return 2;
}

uint64_t llvm::object::COFFImportFile::is64Bit(llvm::object::COFFImportFile *this)
{
  return 0;
}

BOOL llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::count(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  _BOOL8 result;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = *(uint64_t **)(a1 + 40);
    if (v2)
    {
      v3 = *a2;
      result = 1;
      do
      {
        v5 = *((_DWORD *)v2 + 7);
        if (v3 >= v5)
        {
          if (v5 >= v3)
            return result;
          ++v2;
        }
        v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
    return 0;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *(_QWORD *)a1 + 4 * v7;
    if ((_DWORD)v7)
    {
      v9 = 4 * v7;
      while (*v6 != *a2)
      {
        ++v6;
        v9 -= 4;
        if (!v9)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v6 = (_DWORD *)v8;
    }
    return v6 != (_DWORD *)v8;
  }
}

uint64_t llvm::MachO::SymbolSet::symbols@<X0>(uint64_t this@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  int64x2_t v8;

  v3 = *(_QWORD *)(this + 96);
  v4 = *(unsigned int *)(this + 112);
  if (*(_DWORD *)(this + 104))
  {
    v5 = this;
    v8.i64[0] = *(_QWORD *)(this + 96);
    v8.i64[1] = v3 + 32 * v4;
    this = llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v8);
    v6 = v8;
    v3 = *(_QWORD *)(v5 + 96);
    v4 = *(unsigned int *)(v5 + 112);
  }
  else
  {
    v6 = vdupq_n_s64(v3 + 32 * v4);
  }
  *a2 = v6;
  v7 = v3 + 32 * v4;
  a2[1].i64[0] = v7;
  a2[1].i64[1] = v7;
  return this;
}

uint64_t llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned __int8 **v2;
  uint64_t v3;
  unsigned __int8 *v4;
  char v5;
  _QWORD v6[2];
  char v7;
  _QWORD v8[2];
  char *v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char v13;

  v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  v5 = 3;
  v6[0] = 0;
  v6[1] = 0;
  v1 = *(unsigned __int8 **)result;
  if (*(_QWORD *)result != *(_QWORD *)(result + 8))
  {
    v2 = (unsigned __int8 **)result;
    do
    {
      v11 = v1;
      v12 = v1 + 8;
      v9 = &v7;
      v10 = v8;
      result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v13, &v11, (unsigned __int8 **)&v9);
      if ((result & 1) == 0)
      {
        v3 = (uint64_t)(*v2 + 8);
        v11 = *v2;
        v12 = (unsigned __int8 *)v3;
        v9 = &v5;
        v10 = v6;
        result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v13, &v11, (unsigned __int8 **)&v9);
        if (!(_DWORD)result)
          break;
      }
      v4 = v2[1];
      v1 = *v2 + 32;
      *v2 = v1;
    }
    while (v1 != v4);
  }
  return result;
}

BOOL std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v4;
  size_t v5;
  unsigned __int8 *v6;

  if (**a2 != **a3)
    return 0;
  v4 = a2[1];
  v5 = *((_QWORD *)v4 + 1);
  v6 = a3[1];
  if (v5 != *((_QWORD *)v6 + 1))
    return 0;
  if (v5)
    return memcmp(*(const void **)v4, *(const void **)v6, v5) == 0;
  return 1;
}

uint64_t llvm::object::TapiUniversal::TapiUniversal(uint64_t a1, __int128 *a2, llvm::MachO::InterfaceFile **a3)
{
  __int128 v5;
  __int128 v6;
  llvm::MachO::InterfaceFile **v7;
  __int128 v8;
  llvm::MachO::InterfaceFile *v9;
  llvm::MachO::InterfaceFile *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  llvm::MachO::InterfaceFile *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  llvm::MachO::InterfaceFile **v80;
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  llvm::MachO::InterfaceFile *v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v6 = a2[1];
  v82 = *a2;
  v5 = v82;
  v83 = v6;
  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = &off_251C1BC80;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (llvm::MachO::InterfaceFile **)(a1 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 64) = 0u;
  v8 = a2[1];
  v81[0] = *a2;
  v81[1] = v8;
  llvm::MachO::TextAPIReader::get((uint64_t *)v81, (uint64_t)&v84);
  v9 = v84;
  v84 = 0;
  if ((v85 & 1) == 0)
  {
    v80 = a3;
    std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](v7, v9);
    v10 = *v7;
    v11 = *((char *)*v7 + 287);
    if (v11 >= 0)
      v12 = (uint64_t)*v7 + 264;
    else
      v12 = *((_QWORD *)*v7 + 33);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)*v7 + 287);
    else
      v13 = *((_QWORD *)*v7 + 34);
    v14 = *((unsigned int *)v10 + 26);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = 0;
      v16 = (unsigned __int8 *)*((_QWORD *)v10 + 12);
      v17 = 24 * v14;
      do
      {
        v18 = *v16;
        v16 += 24;
        v19 = 1 << v18;
        if (v18 == 16)
          v20 = 0;
        else
          v20 = v19;
        v15 = v20 | v15;
        v17 -= 24;
      }
      while (v17);
      if ((v15 & 1) != 0)
      {
        v21 = 0;
        v22 = 0;
LABEL_25:
        v26 = v22;
        v27 = *(_QWORD *)(a1 + 64);
        while (1)
        {
          v28 = *(_QWORD *)(a1 + 72);
          if (v27 < v28)
            break;
          v29 = *(_QWORD *)(a1 + 56);
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v29) >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_98:
            abort();
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v29) >> 3);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x555555555555555)
            v33 = 0xAAAAAAAAAAAAAAALL;
          else
            v33 = v31;
          if (v33)
            v33 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v33);
          else
            v34 = 0;
          v35 = v33 + 24 * v30;
          *(_QWORD *)v35 = v12;
          *(_QWORD *)(v35 + 8) = v13;
          *(_BYTE *)(v35 + 16) = v26;
          v37 = *(char **)(a1 + 56);
          v36 = *(char **)(a1 + 64);
          v38 = v35;
          if (v36 != v37)
          {
            do
            {
              v39 = *(_OWORD *)(v36 - 24);
              *(_BYTE *)(v38 - 8) = *(v36 - 8);
              *(_OWORD *)(v38 - 24) = v39;
              v38 -= 24;
              v36 -= 24;
            }
            while (v36 != v37);
            v36 = *(char **)(a1 + 56);
          }
          v27 = v35 + 24;
          *(_QWORD *)(a1 + 56) = v38;
          *(_QWORD *)(a1 + 64) = v35 + 24;
          *(_QWORD *)(a1 + 72) = v33 + 24 * v34;
          if (v36)
            operator delete(v36);
          *(_QWORD *)(a1 + 64) = v27;
          if (v21 != -1)
            goto LABEL_43;
LABEL_49:
          v21 = v26;
          if (v26 == -1)
            goto LABEL_50;
        }
        *(_QWORD *)v27 = v12;
        *(_QWORD *)(v27 + 8) = v13;
        *(_BYTE *)(v27 + 16) = v26;
        v27 += 24;
        *(_QWORD *)(a1 + 64) = v27;
LABEL_43:
        v40 = v26;
        if ((v26 & 0xFFFFFFE0) != 0)
          v41 = v26;
        else
          v41 = 31;
        while (v41 != v40)
        {
          v42 = v40 + 1;
          v43 = v15 >> v40++;
          if ((v43 & 2) != 0)
          {
            v26 = v42;
            goto LABEL_49;
          }
        }
        goto LABEL_50;
      }
    }
    else
    {
      v15 = 0;
    }
    v24 = 0;
    while (v24 != 31)
    {
      v22 = v24 + 1;
      v25 = v15 >> v24++;
      if ((v25 & 2) != 0)
      {
        if (v22 == -1)
          break;
        v21 = v22;
        goto LABEL_25;
      }
    }
LABEL_50:
    v44 = *v7;
    v45 = (uint64_t *)*((_QWORD *)*v7 + 47);
    v46 = (uint64_t *)*((_QWORD *)v44 + 48);
    if (v45 != v46)
    {
      while (1)
      {
        v47 = *v45;
        v48 = *(char *)(*v45 + 287);
        v49 = v48 >= 0 ? *v45 + 264 : *(_QWORD *)(*v45 + 264);
        v50 = v48 >= 0 ? *(unsigned __int8 *)(*v45 + 287) : *(_QWORD *)(*v45 + 272);
        v51 = *(unsigned int *)(v47 + 104);
        if ((_DWORD)v51)
        {
          LODWORD(v52) = 0;
          v53 = *(unsigned __int8 **)(v47 + 96);
          v54 = 24 * v51;
          do
          {
            v55 = *v53;
            v53 += 24;
            v56 = 1 << v55;
            if (v55 == 16)
              v57 = 0;
            else
              v57 = v56;
            v52 = v57 | v52;
            v54 -= 24;
          }
          while (v54);
          if ((v52 & 1) != 0)
          {
            v58 = 0;
            v59 = 0;
            goto LABEL_71;
          }
        }
        else
        {
          v52 = 0;
        }
        v60 = 0;
        do
        {
          if (v60 == 31)
            goto LABEL_95;
          v59 = v60 + 1;
          v61 = v52 >> v60++;
        }
        while ((v61 & 2) == 0);
        if (v59 != -1)
          break;
LABEL_95:
        v45 += 2;
        if (v45 == v46)
          goto LABEL_96;
      }
      v58 = v59;
LABEL_71:
      v62 = v59;
      v63 = *(_QWORD *)(a1 + 64);
      while (1)
      {
        v64 = *(_QWORD *)(a1 + 72);
        if (v63 >= v64)
        {
          v65 = *(_QWORD *)(a1 + 56);
          v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v65) >> 3);
          v67 = v66 + 1;
          if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_98;
          v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v65) >> 3);
          if (2 * v68 > v67)
            v67 = 2 * v68;
          if (v68 >= 0x555555555555555)
            v69 = 0xAAAAAAAAAAAAAAALL;
          else
            v69 = v67;
          if (v69)
            v69 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v69);
          else
            v70 = 0;
          v71 = v69 + 24 * v66;
          *(_QWORD *)v71 = v49;
          *(_QWORD *)(v71 + 8) = v50;
          *(_BYTE *)(v71 + 16) = v62;
          v73 = *(char **)(a1 + 56);
          v72 = *(char **)(a1 + 64);
          v74 = v71;
          if (v72 != v73)
          {
            do
            {
              v75 = *(_OWORD *)(v72 - 24);
              *(_BYTE *)(v74 - 8) = *(v72 - 8);
              *(_OWORD *)(v74 - 24) = v75;
              v74 -= 24;
              v72 -= 24;
            }
            while (v72 != v73);
            v72 = *(char **)(a1 + 56);
          }
          v63 = v71 + 24;
          *(_QWORD *)(a1 + 56) = v74;
          *(_QWORD *)(a1 + 64) = v71 + 24;
          *(_QWORD *)(a1 + 72) = v69 + 24 * v70;
          if (v72)
            operator delete(v72);
          *(_QWORD *)(a1 + 64) = v63;
          if (v58 == -1)
            goto LABEL_94;
        }
        else
        {
          *(_QWORD *)v63 = v49;
          *(_QWORD *)(v63 + 8) = v50;
          *(_BYTE *)(v63 + 16) = v62;
          v63 += 24;
          *(_QWORD *)(a1 + 64) = v63;
        }
        v76 = v62;
        v77 = 31;
        if ((v62 & 0xFFFFFFE0) != 0)
          v77 = v62;
        do
        {
          if (v77 == v76)
            goto LABEL_95;
          v78 = v76 + 1;
          v79 = v52 >> v76++;
        }
        while ((v79 & 2) == 0);
        v62 = v78;
LABEL_94:
        v58 = v62;
        if (v62 == -1)
          goto LABEL_95;
      }
    }
LABEL_96:
    a3 = v80;
    if (!*v80)
      goto LABEL_17;
    goto LABEL_18;
  }
  *a3 = v9;
  if (!v9)
LABEL_17:
    *a3 = 0;
LABEL_18:
  llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&v84);
  return a1;
}

void llvm::object::TapiUniversal::~TapiUniversal(llvm::object::TapiUniversal *this)
{
  void *v2;

  *(_QWORD *)this = &off_251C1BC80;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100]((llvm::MachO::InterfaceFile **)this + 6, 0);
}

{
  llvm::object::TapiUniversal::~TapiUniversal(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::object::TapiUniversal::create@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  llvm::MachO::InterfaceFile *v7;
  char v8;
  char v9;
  __int128 v10[2];
  llvm::MachO::InterfaceFile *v11;

  v11 = 0;
  v4 = operator new();
  v5 = a1[1];
  v10[0] = *a1;
  v10[1] = v5;
  result = llvm::object::TapiUniversal::TapiUniversal(v4, v10, &v11);
  v7 = v11;
  v8 = *(_BYTE *)(a2 + 8);
  if (v11)
  {
    v9 = v8 | 1;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = (uint64_t)v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

llvm::MachO::InterfaceFile *std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](llvm::MachO::InterfaceFile **a1, llvm::MachO::InterfaceFile *a2)
{
  llvm::MachO::InterfaceFile *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MachO::InterfaceFile::~InterfaceFile(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void llvm::MachO::InterfaceFile::~InterfaceFile(llvm::MachO::InterfaceFile *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;

  v2 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v3)
    std::default_delete<llvm::MachO::SymbolSet>::operator()[abi:nn180100]((uint64_t)this + 448, v3);
  v5 = (void **)((char *)this + 424);
  std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](&v5);
  v5 = (void **)((char *)this + 400);
  std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100](&v5);
  v5 = (void **)((char *)this + 376);
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v5);
  v5 = (void **)((char *)this + 352);
  std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](&v5);
  v5 = (void **)((char *)this + 328);
  std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](&v5);
  v5 = (void **)((char *)this + 304);
  std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100](&v5);
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  v4 = (char *)*((_QWORD *)this + 12);
  if (v4 != (char *)this + 112)
    free(v4);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this);
}

void std::default_delete<llvm::MachO::SymbolSet>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::destroyAll(a2 + 96);
    MEMORY[0x24BD1B398](*(_QWORD *)(a2 + 96), 8);
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(a2);
    JUMPOUT(0x24BD1B3A4);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  char v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[2];
  char *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v6 = 0;
    v7[0] = 0;
    v7[1] = 0;
    v4 = 3;
    v5[0] = 0;
    v5[1] = 0;
    v2 = 32 * v1;
    v3 = *(unsigned __int8 **)result;
    do
    {
      v10 = v3;
      v11 = v3 + 8;
      v8 = &v6;
      v9 = v7;
      result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v12, &v10, (unsigned __int8 **)&v8);
      if ((result & 1) == 0)
      {
        v10 = v3;
        v11 = v3 + 8;
        v8 = &v4;
        v9 = v5;
        result = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v12, &v10, (unsigned __int8 **)&v8);
      }
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void std::vector<llvm::MachO::InterfaceFileRef>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 160;
        std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 24);
  if (v3 != (void *)(a2 + 40))
    free(v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<llvm::MachO::Target,std::string>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<llvm::MachO::Target,std::string>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected(uint64_t a1)
{
  llvm::MachO::InterfaceFile *v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v2 = *(llvm::MachO::InterfaceFile **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(llvm::MachO::InterfaceFile *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100]((llvm::MachO::InterfaceFile **)a1, 0);
  }
  return a1;
}

_QWORD *llvm::object::ObjectFile::createWasmObjectFile@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  _QWORD *result;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11[2];

  v10 = 0;
  v4 = (_QWORD *)operator new();
  v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  result = llvm::object::WasmObjectFile::WasmObjectFile(v4, v11, &v10);
  v7 = v10;
  v8 = *(_BYTE *)(a2 + 8);
  if (v10)
  {
    v9 = v8 | 1;
    (*(void (**)(_QWORD *))(*result + 8))(result);
    result = (_QWORD *)v7;
  }
  else
  {
    v9 = v8 & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v9;
  *(_QWORD *)a2 = result;
  return result;
}

_QWORD *llvm::object::WasmObjectFile::WasmObjectFile(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  size_t v10;
  llvm::object *v11;
  llvm::object *v12;
  const char *v13;
  _UNKNOWN **v14;
  void *v16;
  unsigned __int8 *v17;
  void *v18;
  int v19;
  int Varuint32;
  uint64_t v21;
  std::string::size_type v22;
  char *v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t String;
  unint64_t v27;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int *v33;
  uint64_t v34;
  int v35;
  void **v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *size;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  std::string::size_type v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int Varuint1;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  unint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  __int128 v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _OWORD *v193;
  _BYTE *v194;
  uint64_t v195;
  _OWORD *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  _OWORD *v204;
  char *v205;
  char *v206;
  _OWORD *v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  __int128 v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  unint64_t v248;
  __int128 v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  unsigned int v256;
  char v257;
  unsigned __int8 *v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  char *v264;
  void *v265;
  char *v266;
  int64_t v267;
  unint64_t v268;
  int64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  const void *v279;
  int64_t v280;
  char *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  const void *v292;
  int64_t v293;
  unint64_t v294;
  char *v295;
  unsigned int v296;
  std::string::size_type v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  unsigned int v302;
  uint64_t v303;
  unint64_t **v304;
  _QWORD *v305;
  void **v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  unint64_t *v312;
  char *v313;
  uint64_t v314;
  unint64_t **v315;
  unint64_t v316;
  unsigned __int8 *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t *v327;
  unint64_t *v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  char *v339;
  char *v340;
  char *v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  int v347;
  char v348;
  int v349;
  unsigned int v350;
  std::string::size_type v351;
  std::string::size_type v352;
  uint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  char *v364;
  char *v365;
  unint64_t v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  std::string::size_type v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  char *v381;
  char *v382;
  char *v383;
  __int128 v384;
  uint64_t v385;
  _BYTE *v386;
  unsigned int v387;
  unsigned int v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  char *v400;
  char *v401;
  unint64_t v402;
  __int128 v403;
  unsigned int *v404;
  uint64_t v405;
  void **v406;
  uint64_t v410;
  const char *v411;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  __int128 v416;
  __int128 v417;
  char *v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  char *v423;
  char *v424;
  char *v425;
  __int128 v426;
  char *v427;
  char *v428;
  __int128 v429;
  __int128 v430;
  char *v431;
  void *v432;
  llvm::object *v433;
  uint64_t v434;
  const char *v435;
  _UNKNOWN **v436;
  uint64_t *v437;
  std::string *v438;
  std::string::size_type v439;
  _UNKNOWN **v440;
  uint64_t v441;
  const char *v442;
  llvm::object::GenericBinaryError *v443;
  unint64_t v444;
  uint64_t *v445;
  int v446;
  uint64_t v447;
  uint64_t *v448;
  _QWORD *v449;
  uint64_t *v450;
  unsigned int v451;
  int v452;
  uint64_t v453;
  int v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  void *v461[3];
  unsigned int *v462;
  char *v463;
  char *v464;
  std::string v465;
  _QWORD v466[2];
  int v467;
  void *v468[16];
  _BYTE v469[32];
  _QWORD *v470;
  uint64_t v471;

  v471 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = a2[1];
  *((_DWORD *)a1 + 2) = 21;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = v5;
  a1[9] = 0;
  v7 = a1 + 9;
  *a1 = &off_251C1BCA8;
  a1[10] = 0;
  a1[11] = 0;
  *((_BYTE *)a1 + 504) = 0;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_BYTE *)a1 + 496) = 0;
  a1[72] = 0;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 35) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  *((_DWORD *)a1 + 146) = -1;
  *((_WORD *)a1 + 294) = 0;
  *((_BYTE *)a1 + 590) = 0;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)((char *)a1 + 692) = 0u;
  v9 = (unsigned int *)a1[2];
  v8 = a1[3];
  if (v8 >= 4)
    v10 = 4;
  else
    v10 = a1[3];
  a1[6] = v9;
  a1[7] = v10;
  if (v8 < 4 || memcmp(v9, &unk_24AA31C1F, v10))
  {
    v11 = (llvm::object *)operator new();
    v12 = v11;
    v13 = "invalid magic number";
LABEL_7:
    v468[0] = (void *)v13;
    LOWORD(v468[4]) = 259;
LABEL_8:
    v14 = llvm::object::object_category(v11);
    *(_QWORD *)v12 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)v468, (std::string *)((char *)v12 + 8));
    *((_QWORD *)v12 + 4) = 3;
    *((_QWORD *)v12 + 5) = v14;
    *((_BYTE *)v12 + 48) = 1;
    *a3 = (uint64_t)v12;
    return a1;
  }
  v462 = v9;
  v464 = (char *)v9 + v8;
  if ((uint64_t)v8 <= 7)
  {
    v11 = (llvm::object *)operator new();
    v12 = v11;
    v13 = "missing version number";
    goto LABEL_7;
  }
  v16 = (void *)v9[1];
  *((_DWORD *)a1 + 16) = (_DWORD)v16;
  if ((_DWORD)v16 != 1)
  {
    v468[0] = "invalid version number: ";
    v468[2] = v16;
    LOWORD(v468[4]) = 2051;
    v11 = (llvm::object *)operator new();
    v12 = v11;
    goto LABEL_8;
  }
  v449 = v7;
  v456 = a3;
  v466[0] = 0;
  v466[1] = 0;
  v467 = 0;
  if (v8 < 9)
    goto LABEL_541;
  v17 = (unsigned __int8 *)(v9 + 2);
  v450 = a1 + 64;
  v445 = a1 + 56;
  v448 = a1 + 35;
LABEL_15:
  HIDWORD(v458) = 0;
  *(_QWORD *)&v459 = 0;
  v460 = 0u;
  memset(v461, 0, sizeof(v461));
  DWORD2(v459) = -1;
  *(_QWORD *)((char *)&v458 + 4) = ((_DWORD)v17 - (_DWORD)v462);
  v19 = *v17;
  v18 = (void *)*v17;
  v463 = (char *)(v17 + 1);
  LODWORD(v458) = v19;
  Varuint32 = readVaruint32((uint64_t)&v462);
  if (!Varuint32)
  {
    v433 = (llvm::object *)operator new();
    v434 = (uint64_t)v433;
    v435 = "zero length section";
LABEL_528:
    v468[0] = (void *)v435;
    LOWORD(v468[4]) = 259;
    v436 = llvm::object::object_category(v433);
    *(_QWORD *)v434 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)v468, (std::string *)(v434 + 8));
    *(_QWORD *)(v434 + 32) = 3;
    *(_QWORD *)(v434 + 40) = v436;
    *(_BYTE *)(v434 + 48) = 1;
    v437 = v456;
    goto LABEL_533;
  }
  LODWORD(v21) = Varuint32;
  v22 = (std::string::size_type)v463;
  v23 = &v463[Varuint32];
  if (v23 > v464)
  {
    v433 = (llvm::object *)operator new();
    v434 = (uint64_t)v433;
    v435 = "section too large";
    goto LABEL_528;
  }
  v24 = 0;
  v25 = v18;
  String = 0;
  switch((int)v18)
  {
    case 0:
      v468[0] = v463;
      v468[1] = v463;
      v468[2] = v23;
      String = readString((uint64_t)v468);
      *((_QWORD *)&v458 + 1) = String;
      *(_QWORD *)&v459 = v27;
      v22 += (LODWORD(v468[1]) - LODWORD(v468[0]));
      v21 = (v21 - (LODWORD(v468[1]) - LODWORD(v468[0])));
      if (v27 == 8)
      {
        if (*(_QWORD *)String == 0x302E6B6E696C7964)
        {
          v25 = 14;
          v24 = 8;
          goto LABEL_39;
        }
        v24 = 8;
      }
      else
      {
        v24 = v27;
        if (v27 == 7)
        {
          if (*(_DWORD *)String == 1802398060 && *(_DWORD *)(String + 3) == 1735289195)
          {
            v25 = 15;
            v24 = 7;
            goto LABEL_39;
          }
          v24 = 7;
        }
        else if (v27 == 6)
        {
          if (*(_DWORD *)String == 1768716644 && *(_WORD *)(String + 4) == 27502)
          {
            v25 = 14;
            v24 = 6;
            goto LABEL_39;
          }
          v24 = 6;
        }
        else if (v27 < 6)
        {
          if (v27 != 4)
            goto LABEL_478;
          if (*(_DWORD *)String != 1701667182)
          {
            v24 = 4;
            goto LABEL_478;
          }
          v25 = 17;
          v24 = 4;
          goto LABEL_39;
        }
      }
      if (*(_DWORD *)String == 1869374834 && *(_WORD *)(String + 4) == 11875)
      {
        v25 = 16;
      }
      else if (v24 == 15)
      {
        if (*(_QWORD *)String != 0x665F746567726174 || *(_QWORD *)(String + 7) != 0x7365727574616566)
        {
          v24 = 15;
LABEL_478:
          v453 = String;
          *(_QWORD *)&v460 = v22;
          *((_QWORD *)&v460 + 1) = v21;
          v463 = (char *)(v22 + v21);
          *v456 = 0;
          v465.__r_.__value_.__l.__size_ = v22;
          v465.__r_.__value_.__r.__words[2] = v22 + v21;
          v465.__r_.__value_.__r.__words[0] = v22;
LABEL_479:
          llvm::object::WasmObjectFile::parseCustomSection(&v457, (uint64_t)a1, v453, v24, (uint64_t)&v465);
          goto LABEL_480;
        }
        v25 = 19;
        v24 = 15;
      }
      else
      {
        if (v24 != 9)
          goto LABEL_478;
        if (*(_QWORD *)String != 0x72656375646F7270 || *(_BYTE *)(String + 8) != 115)
        {
          v24 = 9;
          goto LABEL_478;
        }
        v25 = 18;
        v24 = 9;
      }
LABEL_39:
      v453 = String;
      v29 = 0;
      v468[0] = &v468[2];
      v468[1] = (void *)0x1400000000;
      memset(v469, 0, 20);
      LODWORD(v30) = v25;
      while (1)
      {
        v31 = llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v30];
        v32 = v29;
        if (v31)
        {
          v33 = &llvm::object::WasmSectionOrderChecker::DisallowedPredecessors[20 * (int)v30 + 1];
          do
          {
            if (!v469[v31])
            {
              v34 = v31;
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v468, v31);
              v469[v34] = 1;
            }
            v35 = *v33++;
            v31 = v35;
          }
          while (v35);
          v32 = v468[1];
        }
        if (!v32)
          break;
        v36 = (void **)v468[0];
        v30 = *((int *)v468[0] + v32 - 1);
        v29 = v32 - 1;
        LODWORD(v468[1]) = v32 - 1;
        if (*((_BYTE *)v466 + v30))
          goto LABEL_50;
      }
      *((_BYTE *)v466 + v25) = 1;
      v36 = (void **)v468[0];
LABEL_50:
      if (v36 != &v468[2])
        free(v36);
      if (v32)
      {
        llvm::to_string<unsigned int>((unsigned int *)&v458, &v465);
        v438 = std::string::insert(&v465, 0, "out of order section type: ");
        v439 = v438->__r_.__value_.__r.__words[2];
        *(_OWORD *)v469 = *(_OWORD *)&v438->__r_.__value_.__l.__data_;
        *(_QWORD *)&v469[16] = v439;
        v438->__r_.__value_.__l.__size_ = 0;
        v438->__r_.__value_.__r.__words[2] = 0;
        v438->__r_.__value_.__r.__words[0] = 0;
        v434 = operator new();
        LOWORD(v468[4]) = 260;
        v468[0] = v469;
        v440 = llvm::object::object_category((llvm::object *)v434);
        *(_QWORD *)v434 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)v468, (std::string *)(v434 + 8));
        *(_QWORD *)(v434 + 32) = 3;
        *(_QWORD *)(v434 + 40) = v440;
        *(_BYTE *)(v434 + 48) = 1;
        if ((v469[23] & 0x80000000) != 0)
          operator delete(*(void **)v469);
        v437 = v456;
        if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v465.__r_.__value_.__l.__data_);
LABEL_533:
        *v437 = v434;
LABEL_539:
        if (v461[0])
        {
          v461[1] = v461[0];
          operator delete(v461[0]);
        }
        goto LABEL_541;
      }
      break;
    case 1:
      goto LABEL_39;
    case 2:
      v24 = 0;
      String = 0;
      v25 = 2;
      goto LABEL_39;
    case 3:
      v24 = 0;
      String = 0;
      v25 = 3;
      goto LABEL_39;
    case 4:
      v24 = 0;
      String = 0;
      v25 = 4;
      goto LABEL_39;
    case 5:
      v24 = 0;
      String = 0;
      v25 = 5;
      goto LABEL_39;
    case 6:
      v24 = 0;
      String = 0;
      v25 = 7;
      goto LABEL_39;
    case 7:
      v24 = 0;
      String = 0;
      v25 = 8;
      goto LABEL_39;
    case 8:
      v24 = 0;
      String = 0;
      v25 = 9;
      goto LABEL_39;
    case 9:
      v24 = 0;
      String = 0;
      v25 = 10;
      goto LABEL_39;
    case 10:
      v24 = 0;
      String = 0;
      v25 = 12;
      goto LABEL_39;
    case 11:
      v24 = 0;
      String = 0;
      v25 = 13;
      goto LABEL_39;
    case 12:
      v24 = 0;
      String = 0;
      v25 = 11;
      goto LABEL_39;
    case 13:
      v24 = 0;
      String = 0;
      v25 = 6;
      goto LABEL_39;
    default:
      v453 = 0;
      break;
  }
  *(_QWORD *)&v460 = v22;
  *((_QWORD *)&v460 + 1) = v21;
  v463 = (char *)(v22 + v21);
  *v456 = 0;
  v465.__r_.__value_.__l.__size_ = v22;
  v465.__r_.__value_.__r.__words[2] = v22 + v21;
  v465.__r_.__value_.__r.__words[0] = v22;
  switch((int)v18)
  {
    case 0:
      goto LABEL_479;
    case 1:
      v37 = readVaruint32((uint64_t)&v465);
      if (v37 > (unint64_t)((a1[37] - *v448) >> 6))
      {
        v38 = a1[36] - *v448;
        v468[4] = a1 + 37;
        v468[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v37);
        v468[1] = (char *)v468[0] + v38;
        v468[2] = (char *)v468[0] + v38;
        v468[3] = (char *)v468[0] + 64 * v39;
        std::vector<llvm::wasm::WasmSignature>::__swap_out_circular_buffer(v448, v468);
        std::__split_buffer<llvm::wasm::WasmSignature>::~__split_buffer((uint64_t)v468);
      }
      while (2)
      {
        if (v37)
        {
          v468[0] = &v468[2];
          v468[1] = (void *)0x100000000;
          v468[3] = &v468[5];
          v468[4] = (void *)0x400000000;
          LODWORD(v468[7]) = 0;
          size = (unsigned __int8 *)v465.__r_.__value_.__l.__size_;
          if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
            goto LABEL_545;
          ++v465.__r_.__value_.__l.__size_;
          v41 = *size;
          if (v41 == 96)
          {
            v42 = readVaruint32((uint64_t)&v465);
            v43 = v42;
            if (HIDWORD(v468[4]) < v42)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v468[3], &v468[5], v42, 4);
              goto LABEL_63;
            }
            if (v42)
            {
LABEL_63:
              while (1)
              {
                v44 = (unsigned __int8 *)v465.__r_.__value_.__l.__size_;
                if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
                  break;
                --v43;
                ++v465.__r_.__value_.__l.__size_;
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v468[3], *v44);
                if (!v43)
                  goto LABEL_65;
              }
LABEL_545:
              llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const llvm::Twine *)1);
            }
LABEL_65:
            v45 = readVaruint32((uint64_t)&v465);
            if (v45)
            {
              v46 = v45;
              do
              {
                v47 = (unsigned __int8 *)v465.__r_.__value_.__l.__size_;
                if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
                  goto LABEL_545;
                --v46;
                ++v465.__r_.__value_.__l.__size_;
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v468, *v47);
              }
              while (v46);
            }
            v49 = a1[36];
            v48 = a1[37];
            if (v49 >= v48)
            {
              v51 = (uint64_t)(v49 - *v448) >> 6;
              if ((unint64_t)(v51 + 1) >> 58)
                goto LABEL_546;
              v52 = v48 - *v448;
              v53 = v52 >> 5;
              if (v52 >> 5 <= (unint64_t)(v51 + 1))
                v53 = v51 + 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFC0)
                v54 = 0x3FFFFFFFFFFFFFFLL;
              else
                v54 = v53;
              v470 = a1 + 37;
              if (v54)
                v54 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v54);
              else
                v55 = 0;
              v56 = v54 + (v51 << 6);
              *(_QWORD *)v469 = v54;
              *(_QWORD *)&v469[8] = v56;
              *(_QWORD *)&v469[24] = v54 + (v55 << 6);
              std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(v56, v468);
              *(_QWORD *)&v469[16] = v56 + 64;
              std::vector<llvm::wasm::WasmSignature>::__swap_out_circular_buffer(v448, v469);
              v50 = a1[36];
              std::__split_buffer<llvm::wasm::WasmSignature>::~__split_buffer((uint64_t)v469);
            }
            else
            {
              std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(a1[36], v468);
              v50 = v49 + 64;
            }
            a1[36] = v50;
          }
          else
          {
            *(_DWORD *)v469 = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"invalid signature type", (unsigned int *)v469);
          }
          if (v468[3] != &v468[5])
            free(v468[3]);
          if (v468[0] != &v468[2])
            free(v468[0]);
          --v37;
          if (v41 != 96)
            goto LABEL_480;
          continue;
        }
        break;
      }
      if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
        goto LABEL_403;
      LODWORD(v468[0]) = 3;
      v111 = "type section ended prematurely";
      goto LABEL_442;
    case 2:
      v57 = readVaruint32((uint64_t)&v465);
      v59 = a1[35];
      v58 = a1[36];
      v60 = v57;
      v61 = a1[50];
      if (0x8E38E38E38E38E39 * ((a1[52] - v61) >> 3) < v57)
      {
        v62 = (unsigned __int128)((a1[51] - v61) * (__int128)0xE38E38E38E38E39) >> 64;
        v63 = (v62 >> 2) + ((unint64_t)v62 >> 63);
        v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmImport>>(v57);
        v67 = (char *)a1[50];
        v66 = (char *)a1[51];
        v68 = &v64[72 * v63];
        if (v66 != v67)
        {
          do
          {
            *(_OWORD *)(v68 - 72) = *(_OWORD *)(v66 - 72);
            v69 = *(_OWORD *)(v66 - 56);
            v70 = *(_OWORD *)(v66 - 40);
            v71 = *(_OWORD *)(v66 - 24);
            *((_QWORD *)v68 - 1) = *((_QWORD *)v66 - 1);
            *(_OWORD *)(v68 - 24) = v71;
            *(_OWORD *)(v68 - 40) = v70;
            *(_OWORD *)(v68 - 56) = v69;
            v68 -= 72;
            v66 -= 72;
          }
          while (v66 != v67);
          v66 = (char *)a1[50];
        }
        a1[50] = v68;
        a1[51] = &v64[72 * v63];
        a1[52] = &v64[72 * v65];
        if (v66)
          operator delete(v66);
      }
      if (!v60)
        goto LABEL_130;
      v72 = 0;
      v454 = 0;
      v444 = (unint64_t)(v58 - v59) >> 6;
      v451 = v60;
      while (2)
      {
        v73 = readString((uint64_t)&v465);
        v75 = v74;
        v76 = readString((uint64_t)&v465);
        v78 = *(_OWORD *)&v465.__r_.__value_.__r.__words[1];
        if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
          goto LABEL_545;
        v79 = ++v465.__r_.__value_.__l.__size_;
        v80 = *(_BYTE *)v78;
        v81 = v76;
        v82 = v77;
        switch(*(_BYTE *)v78)
        {
          case 0:
            ++*((_DWORD *)a1 + 170);
            v83 = readVaruint32((uint64_t)&v465);
            if (v83 >= v444)
              goto LABEL_438;
            goto LABEL_109;
          case 1:
            readTableType(v468, (uint64_t)&v465);
            v84 = v468[0];
            v85 = LOBYTE(v468[0]);
            *(_OWORD *)v469 = *(_OWORD *)((char *)v468 + 4);
            *(_OWORD *)&v469[12] = *(_OWORD *)&v468[2];
            ++*((_DWORD *)a1 + 169);
            if ((v85 - 111) < 2)
            {
              Varuint1 = BYTE1(v84);
              v87 = HIWORD(v84);
              goto LABEL_110;
            }
            LODWORD(v468[0]) = 3;
            v404 = (unsigned int *)v468;
LABEL_444:
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"invalid table element type", v404);
            goto LABEL_480;
          case 2:
            readLimits((uint64_t)v468, (uint64_t)&v465);
            v85 = LOBYTE(v468[0]);
            Varuint1 = BYTE1(v468[0]);
            v454 = HIWORD(LODWORD(v468[0]));
            *(_OWORD *)v469 = *(_OWORD *)((char *)v468 + 4);
            *(_DWORD *)&v469[16] = HIDWORD(v468[2]);
            if (((uint64_t)v468[0] & 4) != 0)
              *((_BYTE *)a1 + 590) = 1;
            goto LABEL_111;
          case 3:
            ++*((_DWORD *)a1 + 168);
            if (v79 == *((_QWORD *)&v78 + 1))
              goto LABEL_545;
            v465.__r_.__value_.__l.__size_ = v78 + 2;
            v85 = *(unsigned __int8 *)(v78 + 1);
            Varuint1 = readVaruint1((uint64_t)&v465);
            goto LABEL_111;
          case 4:
            ++*((_DWORD *)a1 + 171);
            if (v79 == *((_QWORD *)&v78 + 1))
              goto LABEL_545;
            v465.__r_.__value_.__l.__size_ = v78 + 2;
            if (*(_BYTE *)(v78 + 1))
            {
              v405 = operator new();
              v468[0] = "invalid attribute";
              LOWORD(v468[4]) = 259;
              v406 = v468;
LABEL_521:
              v457 = llvm::object::GenericBinaryError::GenericBinaryError(v405, (llvm::formatv_object_base **)v406, 3u);
              goto LABEL_480;
            }
            v83 = readVaruint32((uint64_t)&v465);
            if (v83 >= v444)
              goto LABEL_445;
LABEL_109:
            v85 = v83;
            Varuint1 = BYTE1(v83);
            v87 = HIWORD(v83);
LABEL_110:
            v454 = v87;
LABEL_111:
            v88 = a1[51];
            v89 = a1[52];
            if (v88 >= v89)
            {
              v92 = a1[50];
              v93 = 0x8E38E38E38E38E39 * ((uint64_t)(v88 - v92) >> 3);
              v94 = v93 + 1;
              if (v93 + 1 > 0x38E38E38E38E38ELL)
                goto LABEL_546;
              v95 = 0x8E38E38E38E38E39 * ((uint64_t)(v89 - v92) >> 3);
              if (2 * v95 > v94)
                v94 = 2 * v95;
              if (v95 >= 0x1C71C71C71C71C7)
                v96 = 0x38E38E38E38E38ELL;
              else
                v96 = v94;
              if (v96)
              {
                v446 = v72;
                v97 = v81;
                v98 = v82;
                v99 = v73;
                v100 = v75;
                v101 = v85;
                v102 = Varuint1;
                v96 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmImport>>(v96);
                Varuint1 = v102;
                v85 = v101;
                v75 = v100;
                v73 = v99;
                v82 = v98;
                v81 = v97;
                v72 = v446;
              }
              else
              {
                v103 = 0;
              }
              v104 = v96 + 72 * v93;
              *(_QWORD *)v104 = v73;
              *(_QWORD *)(v104 + 8) = v75;
              *(_QWORD *)(v104 + 16) = v81;
              *(_QWORD *)(v104 + 24) = v82;
              *(_BYTE *)(v104 + 32) = v80;
              *(_DWORD *)(v104 + 40) = (v454 << 16) | (Varuint1 << 8) | v85;
              *(_OWORD *)(v104 + 44) = *(_OWORD *)v469;
              *(_OWORD *)(v104 + 56) = *(_OWORD *)&v469[12];
              v106 = (char *)a1[50];
              v105 = (char *)a1[51];
              v107 = v104;
              if (v105 == v106)
              {
                v91 = v451;
              }
              else
              {
                v91 = v451;
                do
                {
                  *(_OWORD *)(v107 - 72) = *(_OWORD *)(v105 - 72);
                  v108 = *(_OWORD *)(v105 - 56);
                  v109 = *(_OWORD *)(v105 - 40);
                  v110 = *(_OWORD *)(v105 - 24);
                  *(_QWORD *)(v107 - 8) = *((_QWORD *)v105 - 1);
                  *(_OWORD *)(v107 - 24) = v110;
                  *(_OWORD *)(v107 - 40) = v109;
                  *(_OWORD *)(v107 - 56) = v108;
                  v107 -= 72;
                  v105 -= 72;
                }
                while (v105 != v106);
                v105 = (char *)a1[50];
              }
              v90 = v104 + 72;
              a1[50] = v107;
              a1[51] = v104 + 72;
              a1[52] = v96 + 72 * v103;
              if (v105)
                operator delete(v105);
            }
            else
            {
              *(_QWORD *)v88 = v73;
              *(_QWORD *)(v88 + 8) = v75;
              *(_QWORD *)(v88 + 16) = v81;
              *(_QWORD *)(v88 + 24) = v82;
              *(_BYTE *)(v88 + 32) = v80;
              *(_DWORD *)(v88 + 40) = (v454 << 16) | (Varuint1 << 8) | v85;
              *(_OWORD *)(v88 + 44) = *(_OWORD *)v469;
              *(_OWORD *)(v88 + 56) = *(_OWORD *)&v469[12];
              v90 = v88 + 72;
              v91 = v451;
            }
            a1[51] = v90;
            if (++v72 != v91)
              continue;
LABEL_130:
            if (v465.__r_.__value_.__l.__size_ != v465.__r_.__value_.__r.__words[2])
            {
              LODWORD(v468[0]) = 3;
              v111 = "import section ended prematurely";
              goto LABEL_442;
            }
LABEL_403:
            *v456 = 0;
LABEL_481:
            v415 = a1[10];
            v414 = a1[11];
            if (v415 < v414)
            {
              v416 = v458;
              v417 = v460;
              *(_OWORD *)(v415 + 16) = v459;
              *(_OWORD *)(v415 + 32) = v417;
              *(_OWORD *)v415 = v416;
              std::vector<llvm::wasm::WasmRelocation>::vector((_QWORD *)(v415 + 48), (uint64_t)v461);
              v418 = (char *)(v415 + 72);
              goto LABEL_503;
            }
            v419 = 0x8E38E38E38E38E39 * ((uint64_t)(v415 - *v449) >> 3);
            v420 = v419 + 1;
            if (v419 + 1 > 0x38E38E38E38E38ELL)
LABEL_546:
              abort();
            v421 = 0x8E38E38E38E38E39 * ((uint64_t)(v414 - *v449) >> 3);
            if (2 * v421 > v420)
              v420 = 2 * v421;
            if (v421 >= 0x1C71C71C71C71C7)
              v422 = 0x38E38E38E38E38ELL;
            else
              v422 = v420;
            if (v422)
            {
              if (v422 > 0x38E38E38E38E38ELL)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v423 = (char *)operator new(72 * v422);
            }
            else
            {
              v423 = 0;
            }
            v424 = &v423[72 * v419];
            v425 = &v423[72 * v422];
            v426 = v459;
            *(_OWORD *)v424 = v458;
            *((_OWORD *)v424 + 1) = v426;
            *((_OWORD *)v424 + 2) = v460;
            std::vector<llvm::wasm::WasmRelocation>::vector((_QWORD *)v424 + 6, (uint64_t)v461);
            v418 = v424 + 72;
            v427 = (char *)a1[9];
            v428 = (char *)a1[10];
            if (v428 == v427)
            {
              a1[9] = v424;
              a1[10] = v418;
              a1[11] = v425;
            }
            else
            {
              do
              {
                v429 = *(_OWORD *)(v428 - 72);
                v430 = *(_OWORD *)(v428 - 56);
                *(_OWORD *)(v424 - 40) = *(_OWORD *)(v428 - 40);
                *(_OWORD *)(v424 - 56) = v430;
                *(_OWORD *)(v424 - 72) = v429;
                *((_QWORD *)v424 - 2) = 0;
                *((_QWORD *)v424 - 1) = 0;
                *((_QWORD *)v424 - 3) = 0;
                *(_OWORD *)(v424 - 24) = *(_OWORD *)(v428 - 24);
                *((_QWORD *)v424 - 1) = *((_QWORD *)v428 - 1);
                v424 -= 72;
                *((_QWORD *)v428 - 3) = 0;
                *((_QWORD *)v428 - 2) = 0;
                *((_QWORD *)v428 - 1) = 0;
                v428 -= 72;
              }
              while (v428 != v427);
              v428 = (char *)a1[9];
              v431 = (char *)a1[10];
              a1[9] = v424;
              a1[10] = v418;
              a1[11] = v425;
              while (v431 != v428)
              {
                v432 = (void *)*((_QWORD *)v431 - 3);
                if (v432)
                {
                  *((_QWORD *)v431 - 2) = v432;
                  operator delete(v432);
                }
                v431 -= 72;
              }
            }
            if (v428)
              operator delete(v428);
LABEL_503:
            a1[10] = v418;
            if (v461[0])
              operator delete(v461[0]);
            v17 = (unsigned __int8 *)v463;
            if (v463 < v464)
              goto LABEL_15;
LABEL_541:
            if (!*v456)
              *v456 = 0;
            return a1;
          default:
            LODWORD(v468[0]) = 3;
            v111 = "unexpected import kind";
            goto LABEL_442;
        }
      }
    case 3:
      v112 = readVaruint32((uint64_t)&v465);
      if (v112 > (unint64_t)((a1[66] - *v450) >> 7))
      {
        v113 = a1[65] - *v450;
        v468[4] = a1 + 66;
        v468[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmFunction>>(v112);
        v468[1] = (char *)v468[0] + v113;
        v468[2] = (char *)v468[0] + v113;
        v468[3] = (char *)v468[0] + 128 * v114;
        std::vector<llvm::wasm::WasmFunction>::__swap_out_circular_buffer(v450, v468);
        std::__split_buffer<llvm::wasm::WasmFunction>::~__split_buffer((uint64_t)v468);
      }
      if (!v112)
        goto LABEL_151;
      v115 = (a1[36] - a1[35]) >> 6;
      while (1)
      {
        v116 = readVaruint32((uint64_t)&v465);
        if (v116 >= v115)
          break;
        LOBYTE(v468[8]) = 0;
        LOBYTE(v468[10]) = 0;
        memset(&v468[1], 0, 40);
        memset(&v468[11], 0, 32);
        HIDWORD(v468[0]) = v116;
        v117 = a1[65];
        v118 = a1[66];
        if (v117 >= v118)
        {
          v119 = (uint64_t)(v117 - *v450) >> 7;
          if ((unint64_t)(v119 + 1) >> 57)
            goto LABEL_546;
          v120 = v118 - *v450;
          v121 = v120 >> 6;
          if (v120 >> 6 <= (unint64_t)(v119 + 1))
            v121 = v119 + 1;
          if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFF80)
            v122 = 0x1FFFFFFFFFFFFFFLL;
          else
            v122 = v121;
          v470 = a1 + 66;
          if (v122)
            v122 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmFunction>>(v122);
          else
            v123 = 0;
          v124 = v122 + (v119 << 7);
          *(_QWORD *)v469 = v122;
          *(_QWORD *)&v469[8] = v124;
          *(_QWORD *)&v469[24] = v122 + (v123 << 7);
          *(void **)v124 = v468[0];
          std::vector<llvm::wasm::WasmLocalDecl>::vector((_QWORD *)(v124 + 8), (uint64_t)&v468[1]);
          *(_OWORD *)(v124 + 32) = *(_OWORD *)&v468[4];
          *(_OWORD *)(v124 + 48) = *(_OWORD *)&v468[6];
          *(_OWORD *)(v124 + 64) = *(_OWORD *)&v468[8];
          *(_OWORD *)(v124 + 80) = *(_OWORD *)&v468[10];
          *(_OWORD *)(v124 + 96) = *(_OWORD *)&v468[12];
          *(_OWORD *)(v124 + 108) = *(_OWORD *)((char *)&v468[13] + 4);
          *(_QWORD *)&v469[16] = v124 + 128;
          std::vector<llvm::wasm::WasmFunction>::__swap_out_circular_buffer(v450, v469);
          v125 = a1[65];
          std::__split_buffer<llvm::wasm::WasmFunction>::~__split_buffer((uint64_t)v469);
          v126 = v468[1];
          a1[65] = v125;
          if (v126)
            operator delete(v126);
        }
        else
        {
          *(void **)v117 = v468[0];
          std::vector<llvm::wasm::WasmLocalDecl>::vector((_QWORD *)(v117 + 8), (uint64_t)&v468[1]);
          *(_OWORD *)(v117 + 64) = *(_OWORD *)&v468[8];
          *(_OWORD *)(v117 + 80) = *(_OWORD *)&v468[10];
          *(_OWORD *)(v117 + 96) = *(_OWORD *)&v468[12];
          *(_OWORD *)(v117 + 108) = *(_OWORD *)((char *)&v468[13] + 4);
          *(_OWORD *)(v117 + 32) = *(_OWORD *)&v468[4];
          *(_OWORD *)(v117 + 48) = *(_OWORD *)&v468[6];
          a1[65] = v117 + 128;
        }
        if (!--v112)
        {
LABEL_151:
          if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
            goto LABEL_403;
          LODWORD(v468[0]) = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"function section ended prematurely", (unsigned int *)v468);
          goto LABEL_480;
        }
      }
LABEL_438:
      LODWORD(v468[0]) = 3;
      v111 = "invalid function type";
      goto LABEL_442;
    case 4:
      *((_DWORD *)a1 + 176) = 954437177 * ((a1[10] - a1[9]) >> 3);
      v127 = readVaruint32((uint64_t)&v465);
      v128 = v127;
      v129 = a1[38];
      if (0x6DB6DB6DB6DB6DB7 * ((a1[40] - v129) >> 3) < (unint64_t)v127)
      {
        v130 = (unsigned __int128)((a1[39] - v129) * (__int128)0x4924924924924925) >> 64;
        v131 = (v130 >> 4) + ((unint64_t)v130 >> 63);
        v132 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v127);
        v135 = (char *)a1[38];
        v134 = (char *)a1[39];
        v136 = &v132[56 * v131];
        if (v134 != v135)
        {
          do
          {
            v137 = *(_OWORD *)(v134 - 56);
            v138 = *(_OWORD *)(v134 - 40);
            v139 = *(_OWORD *)(v134 - 24);
            *((_QWORD *)v136 - 1) = *((_QWORD *)v134 - 1);
            *(_OWORD *)(v136 - 24) = v139;
            *(_OWORD *)(v136 - 40) = v138;
            *(_OWORD *)(v136 - 56) = v137;
            v136 -= 56;
            v134 -= 56;
          }
          while (v134 != v135);
          v134 = (char *)a1[38];
        }
        a1[38] = v136;
        a1[39] = &v132[56 * v131];
        a1[40] = &v132[56 * v133];
        if (v134)
          operator delete(v134);
      }
      if (!v128)
        goto LABEL_178;
      while (1)
      {
        readTableType(v469, (uint64_t)&v465);
        *(_OWORD *)((char *)v468 + 4) = *(_OWORD *)v469;
        *(_OWORD *)((char *)&v468[2] + 4) = *(_OWORD *)&v469[16];
        v141 = a1[38];
        v140 = a1[39];
        v142 = (uint64_t)(v140 - v141) / 56;
        v143 = *((_DWORD *)a1 + 169) + v142;
        v144 = a1[40];
        if (v140 >= v144)
        {
          v146 = v142 + 1;
          if ((unint64_t)(v142 + 1) > 0x492492492492492)
            goto LABEL_546;
          v147 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v144 - v141) >> 3);
          if (2 * v147 > v146)
            v146 = 2 * v147;
          if (v147 >= 0x249249249249249)
            v148 = 0x492492492492492;
          else
            v148 = v146;
          if (v148)
            v148 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::WrapperFunctionCall>>(v148);
          else
            v149 = 0;
          v150 = v148 + 56 * v142;
          *(_DWORD *)v150 = v143;
          *(_OWORD *)(v150 + 4) = *(_OWORD *)v468;
          *(_OWORD *)(v150 + 20) = *(_OWORD *)&v468[2];
          *(_DWORD *)(v150 + 36) = v468[4];
          *(_QWORD *)(v150 + 40) = 0;
          *(_QWORD *)(v150 + 48) = 0;
          v152 = (char *)a1[38];
          v151 = (char *)a1[39];
          v153 = v150;
          if (v151 != v152)
          {
            do
            {
              v154 = *(_OWORD *)(v151 - 56);
              v155 = *(_OWORD *)(v151 - 40);
              v156 = *(_OWORD *)(v151 - 24);
              *(_QWORD *)(v153 - 8) = *((_QWORD *)v151 - 1);
              *(_OWORD *)(v153 - 24) = v156;
              *(_OWORD *)(v153 - 40) = v155;
              *(_OWORD *)(v153 - 56) = v154;
              v153 -= 56;
              v151 -= 56;
            }
            while (v151 != v152);
            v151 = (char *)a1[38];
          }
          v145 = v150 + 56;
          a1[38] = v153;
          a1[39] = v150 + 56;
          a1[40] = v148 + 56 * v149;
          if (v151)
            operator delete(v151);
        }
        else
        {
          *(_DWORD *)v140 = v143;
          *(_OWORD *)(v140 + 4) = *(_OWORD *)v468;
          *(_OWORD *)(v140 + 20) = *(_OWORD *)&v468[2];
          *(_DWORD *)(v140 + 36) = v468[4];
          *(_QWORD *)(v140 + 40) = 0;
          *(_QWORD *)(v140 + 48) = 0;
          v145 = v140 + 56;
        }
        a1[39] = v145;
        if (*(unsigned __int8 *)(v145 - 48) - 111 >= 2)
          break;
        if (!--v128)
        {
LABEL_178:
          if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
            goto LABEL_403;
          LODWORD(v468[0]) = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)"table section ended prematurely", (unsigned int *)v468, &v457);
          goto LABEL_480;
        }
      }
      *(_DWORD *)v469 = 3;
      v404 = (unsigned int *)v469;
      goto LABEL_444;
    case 5:
      v157 = readVaruint32((uint64_t)&v465);
      v158 = v157;
      v159 = a1[41];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[43] - v159) >> 3) < v157)
      {
        v160 = (unsigned __int128)((a1[42] - v159) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v161 = (v160 >> 2) + ((unint64_t)v160 >> 63);
        v163 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v157);
        v165 = (char *)a1[41];
        v164 = (char *)a1[42];
        v166 = &v163[24 * v161];
        if (v164 != v165)
        {
          do
          {
            v167 = *(_OWORD *)(v164 - 24);
            *((_QWORD *)v166 - 1) = *((_QWORD *)v164 - 1);
            *(_OWORD *)(v166 - 24) = v167;
            v166 -= 24;
            v164 -= 24;
          }
          while (v164 != v165);
          v164 = (char *)a1[41];
        }
        a1[41] = v166;
        a1[42] = &v163[24 * v161];
        a1[43] = &v163[24 * v162];
        if (v164)
          operator delete(v164);
      }
      if (!v158)
        goto LABEL_206;
      do
      {
        memset(v468, 0, 24);
        readLimits((uint64_t)v468, (uint64_t)&v465);
        if (((uint64_t)v468[0] & 4) != 0)
          *((_BYTE *)a1 + 590) = 1;
        v169 = a1[42];
        v168 = a1[43];
        if (v169 >= v168)
        {
          v171 = a1[41];
          v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v169 - v171) >> 3);
          v173 = v172 + 1;
          if (v172 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_546;
          v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168 - v171) >> 3);
          if (2 * v174 > v173)
            v173 = 2 * v174;
          if (v174 >= 0x555555555555555)
            v175 = 0xAAAAAAAAAAAAAAALL;
          else
            v175 = v173;
          if (v175)
            v175 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v175);
          else
            v176 = 0;
          v177 = v175 + 24 * v172;
          *(_OWORD *)v177 = *(_OWORD *)v468;
          *(void **)(v177 + 16) = v468[2];
          v179 = (char *)a1[41];
          v178 = (char *)a1[42];
          v180 = v177;
          if (v178 != v179)
          {
            do
            {
              v181 = *(_OWORD *)(v178 - 24);
              *(_QWORD *)(v180 - 8) = *((_QWORD *)v178 - 1);
              *(_OWORD *)(v180 - 24) = v181;
              v180 -= 24;
              v178 -= 24;
            }
            while (v178 != v179);
            v178 = (char *)a1[41];
          }
          v170 = v177 + 24;
          a1[41] = v180;
          a1[42] = v177 + 24;
          a1[43] = v175 + 24 * v176;
          if (v178)
            operator delete(v178);
        }
        else
        {
          *(_OWORD *)v169 = *(_OWORD *)v468;
          *(void **)(v169 + 16) = v468[2];
          v170 = v169 + 24;
        }
        a1[42] = v170;
        --v158;
      }
      while (v158);
LABEL_206:
      if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
        goto LABEL_403;
      LODWORD(v468[0]) = 3;
      v111 = "memory section ended prematurely";
      goto LABEL_442;
    case 6:
      *((_DWORD *)a1 + 175) = 954437177 * ((a1[10] - a1[9]) >> 3);
      v182 = readVaruint32((uint64_t)&v465);
      v183 = a1[44];
      if (v182 > (unint64_t)((a1[46] - v183) >> 6))
      {
        v184 = a1[45] - v183;
        v185 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v182);
        v188 = (char *)a1[44];
        v187 = (char *)a1[45];
        v189 = &v185[v184 & 0xFFFFFFFFFFFFFFC0];
        if (v187 != v188)
        {
          do
          {
            v190 = *((_OWORD *)v187 - 4);
            v191 = *((_OWORD *)v187 - 3);
            v192 = *((_OWORD *)v187 - 1);
            *((_OWORD *)v189 - 2) = *((_OWORD *)v187 - 2);
            *((_OWORD *)v189 - 1) = v192;
            *((_OWORD *)v189 - 4) = v190;
            *((_OWORD *)v189 - 3) = v191;
            v189 -= 64;
            v187 -= 64;
          }
          while (v187 != v188);
          v187 = (char *)a1[44];
        }
        a1[44] = v189;
        a1[45] = &v185[v184 & 0xFFFFFFFFFFFFFFC0];
        a1[46] = &v185[64 * v186];
        if (v187)
          operator delete(v187);
      }
      if (!v182)
        goto LABEL_235;
      v193 = (_OWORD *)a1[45];
      do
      {
        memset(&v468[4], 0, 32);
        LODWORD(v468[0]) = *((_DWORD *)a1 + 168) + (((unint64_t)v193 - a1[44]) >> 6);
        v194 = (_BYTE *)v465.__r_.__value_.__l.__size_;
        if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
          goto LABEL_545;
        ++v465.__r_.__value_.__l.__size_;
        BYTE4(v468[0]) = *v194;
        BYTE5(v468[0]) = readVaruint1((uint64_t)&v465);
        readInitExpr((uint64_t)&v457, (uint64_t)&v468[1], (uint64_t)&v465);
        v195 = v457;
        if (v457)
          goto LABEL_538;
        v196 = (_OWORD *)a1[45];
        v197 = a1[46];
        if ((unint64_t)v196 >= v197)
        {
          v198 = a1[44];
          v199 = ((uint64_t)v196 - v198) >> 6;
          v200 = v199 + 1;
          if ((unint64_t)(v199 + 1) >> 58)
            goto LABEL_546;
          v201 = v197 - v198;
          if (v201 >> 5 > v200)
            v200 = v201 >> 5;
          if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFC0)
            v202 = 0x3FFFFFFFFFFFFFFLL;
          else
            v202 = v200;
          if (v202)
            v202 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v202);
          else
            v203 = 0;
          v204 = (_OWORD *)(v202 + (v199 << 6));
          *v204 = *(_OWORD *)v468;
          v204[1] = *(_OWORD *)&v468[2];
          v204[2] = *(_OWORD *)&v468[4];
          v204[3] = *(_OWORD *)&v468[6];
          v206 = (char *)a1[44];
          v205 = (char *)a1[45];
          v207 = v204;
          if (v205 != v206)
          {
            do
            {
              v208 = *((_OWORD *)v205 - 4);
              v209 = *((_OWORD *)v205 - 3);
              v210 = *((_OWORD *)v205 - 1);
              *(v207 - 2) = *((_OWORD *)v205 - 2);
              *(v207 - 1) = v210;
              *(v207 - 4) = v208;
              *(v207 - 3) = v209;
              v207 -= 4;
              v205 -= 64;
            }
            while (v205 != v206);
            v205 = (char *)a1[44];
          }
          v193 = v204 + 4;
          a1[44] = v207;
          a1[45] = v204 + 4;
          a1[46] = v202 + (v203 << 6);
          if (v205)
            operator delete(v205);
        }
        else
        {
          *v196 = *(_OWORD *)v468;
          v196[1] = *(_OWORD *)&v468[2];
          v196[2] = *(_OWORD *)&v468[4];
          v196[3] = *(_OWORD *)&v468[6];
          v193 = v196 + 4;
        }
        a1[45] = v193;
        --v182;
      }
      while (v182);
LABEL_235:
      if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
        goto LABEL_403;
      LODWORD(v468[0]) = 3;
      v111 = "global section ended prematurely";
      goto LABEL_442;
    case 7:
      v211 = readVaruint32((uint64_t)&v465);
      v212 = v211;
      v213 = a1[53];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[55] - v213) >> 3) < v211)
      {
        v214 = (unsigned __int128)((a1[54] - v213) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v215 = (v214 >> 2) + ((unint64_t)v214 >> 63);
        v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v211);
        v219 = (char *)a1[53];
        v218 = (char *)a1[54];
        v220 = &v216[24 * v215];
        if (v218 != v219)
        {
          do
          {
            v221 = *(_OWORD *)(v218 - 24);
            *((_QWORD *)v220 - 1) = *((_QWORD *)v218 - 1);
            *(_OWORD *)(v220 - 24) = v221;
            v220 -= 24;
            v218 -= 24;
          }
          while (v218 != v219);
          v218 = (char *)a1[53];
        }
        a1[53] = v220;
        a1[54] = &v216[24 * v215];
        a1[55] = &v216[24 * v217];
        if (v218)
          operator delete(v218);
      }
      if (!v212)
        goto LABEL_271;
      v222 = 0;
      while (1)
      {
        v223 = readString((uint64_t)&v465);
        v225 = (unsigned __int8 *)v465.__r_.__value_.__l.__size_;
        if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
          goto LABEL_545;
        v226 = v223;
        v227 = v224;
        ++v465.__r_.__value_.__l.__size_;
        v228 = *v225;
        v229 = readVaruint32((uint64_t)&v465);
        v230 = v229;
        switch(v228)
        {
          case 0:
            v231 = *((unsigned int *)a1 + 170);
            if (v229 < v231 || (v232 = a1[64], v231 + ((a1[65] - v232) >> 7) <= (unint64_t)v229))
            {
              LODWORD(v468[0]) = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"invalid function export", (unsigned int *)v468);
              goto LABEL_480;
            }
            v233 = v232 + ((unint64_t)(v229 - v231) << 7);
            *(_QWORD *)(v233 + 64) = v226;
            v234 = v233 + 64;
            v235 = *(unsigned __int8 *)(v234 + 16);
            *(_QWORD *)(v234 + 8) = v227;
            if (!v235)
              *(_BYTE *)(v234 + 16) = 1;
LABEL_254:
            v237 = a1[54];
            v236 = a1[55];
            if (v237 >= v236)
            {
              v239 = a1[53];
              v240 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - v239) >> 3);
              v241 = v240 + 1;
              if (v240 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_546;
              v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v236 - v239) >> 3);
              if (2 * v242 > v241)
                v241 = 2 * v242;
              if (v242 >= 0x555555555555555)
                v243 = 0xAAAAAAAAAAAAAAALL;
              else
                v243 = v241;
              if (v243)
                v243 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v243);
              else
                v244 = 0;
              v245 = v243 + 24 * v240;
              *(_QWORD *)v245 = v226;
              *(_QWORD *)(v245 + 8) = v227;
              *(_BYTE *)(v245 + 16) = v228;
              *(_DWORD *)(v245 + 20) = v230;
              v247 = (char *)a1[53];
              v246 = (char *)a1[54];
              v248 = v245;
              if (v246 != v247)
              {
                do
                {
                  v249 = *(_OWORD *)(v246 - 24);
                  *(_QWORD *)(v248 - 8) = *((_QWORD *)v246 - 1);
                  *(_OWORD *)(v248 - 24) = v249;
                  v248 -= 24;
                  v246 -= 24;
                }
                while (v246 != v247);
                v246 = (char *)a1[53];
              }
              v238 = v245 + 24;
              a1[53] = v248;
              a1[54] = v245 + 24;
              a1[55] = v243 + 24 * v244;
              if (v246)
                operator delete(v246);
            }
            else
            {
              *(_QWORD *)v237 = v226;
              *(_QWORD *)(v237 + 8) = v227;
              *(_BYTE *)(v237 + 16) = v228;
              v238 = v237 + 24;
              *(_DWORD *)(v237 + 20) = v229;
            }
            a1[54] = v238;
            if (++v222 == v212)
            {
LABEL_271:
              if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
                goto LABEL_403;
              LODWORD(v468[0]) = 3;
              v111 = "export section ended prematurely";
              goto LABEL_442;
            }
            break;
          case 1:
          case 2:
            goto LABEL_254;
          case 3:
            if ((unint64_t)*((unsigned int *)a1 + 168) + ((uint64_t)(a1[45] - a1[44]) >> 6) > v229)
              goto LABEL_254;
            LODWORD(v468[0]) = 3;
            v111 = "invalid global export";
            goto LABEL_442;
          case 4:
            if ((unint64_t)*((unsigned int *)a1 + 171)
               - 0x5555555555555555 * ((uint64_t)(a1[48] - a1[47]) >> 3) > v229)
              goto LABEL_254;
            v441 = operator new();
            v442 = "invalid tag export";
            goto LABEL_536;
          default:
            LODWORD(v468[0]) = 3;
            v111 = "unexpected export kind";
            goto LABEL_442;
        }
      }
    case 8:
      v250 = readVaruint32((uint64_t)&v465);
      *((_DWORD *)a1 + 146) = v250;
      if ((unint64_t)*((unsigned int *)a1 + 170) + ((uint64_t)(a1[65] - a1[64]) >> 7) > v250)
        goto LABEL_403;
      LODWORD(v468[0]) = 3;
      v111 = "invalid start function";
      goto LABEL_442;
    case 9:
      v251 = readVaruint32((uint64_t)&v465);
      v252 = v251;
      if (0xCCCCCCCCCCCCCCCDLL * ((a1[58] - *v445) >> 4) < v251)
      {
        v253 = a1[57] - *v445;
        v468[4] = a1 + 58;
        v468[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmElemSegment>>(v251);
        v468[1] = (char *)v468[0] + v253;
        v468[2] = (char *)v468[0] + v253;
        v468[3] = (char *)v468[0] + 80 * v254;
        std::vector<llvm::wasm::WasmElemSegment>::__swap_out_circular_buffer(v445, v468);
        std::__split_buffer<llvm::wasm::WasmElemSegment>::~__split_buffer((uint64_t)v468);
      }
      if (!v252)
        goto LABEL_331;
      while (1)
      {
        memset(&v468[5], 0, 40);
        v255 = readVaruint32((uint64_t)&v465);
        LODWORD(v468[0]) = v255;
        if (v255 >= 8)
        {
          *(_DWORD *)v469 = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"Unsupported flags for element segment", (unsigned int *)v469);
          goto LABEL_515;
        }
        if ((v255 & 2) != 0)
          v256 = readVaruint32((uint64_t)&v465);
        else
          v256 = 0;
        HIDWORD(v468[0]) = v256;
        if ((unint64_t)*((unsigned int *)a1 + 169) + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[39] - a1[38]) >> 3) <= v256)
        {
          v410 = operator new();
          v411 = "invalid TableNumber";
          goto LABEL_513;
        }
        v257 = (char)v468[0];
        if (((uint64_t)v468[0] & 1) != 0)
        {
          LOBYTE(v468[2]) = 0;
          LOBYTE(v468[3]) = 65;
          LODWORD(v468[4]) = 0;
        }
        else
        {
          readInitExpr((uint64_t)&v457, (uint64_t)&v468[2], (uint64_t)&v465);
          if (v457)
            goto LABEL_515;
          v257 = (char)v468[0];
        }
        if ((v257 & 3) != 0)
        {
          v258 = (unsigned __int8 *)v465.__r_.__value_.__l.__size_;
          if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
            goto LABEL_545;
          ++v465.__r_.__value_.__l.__size_;
          v259 = *v258;
          LOBYTE(v468[1]) = v259;
          if ((v257 & 4) != 0)
          {
            if ((v259 - 113) <= 0xFFFFFFFD)
            {
              *(_DWORD *)v469 = 3;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"invalid reference type", (unsigned int *)v469);
              goto LABEL_515;
            }
LABEL_512:
            v410 = operator new();
            v411 = "elem segment init expressions not yet implemented";
LABEL_513:
            *(_QWORD *)v469 = v411;
            LOWORD(v470) = 259;
            v457 = llvm::object::GenericBinaryError::GenericBinaryError(v410, (llvm::formatv_object_base **)v469, 3u);
LABEL_515:
            if (v468[7])
            {
              v468[8] = v468[7];
              operator delete(v468[7]);
            }
            goto LABEL_480;
          }
          if (v259)
          {
            *(_DWORD *)v469 = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"invalid elemtype", (unsigned int *)v469);
            goto LABEL_515;
          }
          LOBYTE(v468[1]) = 112;
        }
        else
        {
          LOBYTE(v468[1]) = 112;
          if ((v257 & 4) != 0)
            goto LABEL_512;
        }
        v260 = readVaruint32((uint64_t)&v465);
        if (v260)
        {
          v261 = v260;
          do
          {
            v262 = readVaruint32((uint64_t)&v465);
            v263 = v262;
            v264 = (char *)v468[8];
            if (v468[8] >= v468[9])
            {
              v266 = (char *)v468[7];
              v267 = ((char *)v468[8] - (char *)v468[7]) >> 2;
              v268 = v267 + 1;
              if ((unint64_t)(v267 + 1) >> 62)
                goto LABEL_546;
              v269 = (char *)v468[9] - (char *)v468[7];
              if (((char *)v468[9] - (char *)v468[7]) >> 1 > v268)
                v268 = v269 >> 1;
              if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL)
                v270 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v270 = v268;
              if (v270)
              {
                v271 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v468[9], v270);
                v266 = (char *)v468[7];
                v264 = (char *)v468[8];
              }
              else
              {
                v271 = 0;
              }
              v272 = &v271[4 * v267];
              *(_DWORD *)v272 = v263;
              v265 = v272 + 4;
              while (v264 != v266)
              {
                v273 = *((_DWORD *)v264 - 1);
                v264 -= 4;
                *((_DWORD *)v272 - 1) = v273;
                v272 -= 4;
              }
              v468[7] = v272;
              v468[8] = v265;
              v468[9] = &v271[4 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_DWORD *)v468[8] = v262;
              v265 = v264 + 4;
            }
            v468[8] = v265;
            --v261;
          }
          while (v261);
        }
        v275 = a1[57];
        v274 = a1[58];
        if (v275 >= v274)
        {
          v283 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v275 - *v445) >> 4);
          v284 = v283 + 1;
          if (v283 + 1 > 0x333333333333333)
            goto LABEL_546;
          v285 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v274 - *v445) >> 4);
          if (2 * v285 > v284)
            v284 = 2 * v285;
          if (v285 >= 0x199999999999999)
            v286 = 0x333333333333333;
          else
            v286 = v284;
          v470 = a1 + 58;
          if (v286)
            v286 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmElemSegment>>(v286);
          else
            v287 = 0;
          v288 = v286 + 80 * v283;
          *(_QWORD *)v469 = v286;
          *(_QWORD *)&v469[8] = v288;
          *(_QWORD *)&v469[24] = v286 + 80 * v287;
          v289 = *(_OWORD *)v468;
          v290 = *(_OWORD *)&v468[2];
          v291 = *(_OWORD *)&v468[4];
          *(void **)(v288 + 48) = v468[6];
          *(_OWORD *)(v288 + 16) = v290;
          *(_OWORD *)(v288 + 32) = v291;
          *(_QWORD *)(v288 + 56) = 0;
          *(_OWORD *)v288 = v289;
          *(_QWORD *)(v288 + 64) = 0;
          *(_QWORD *)(v288 + 72) = 0;
          v292 = v468[7];
          v293 = (char *)v468[8] - (char *)v468[7];
          if (v468[8] != v468[7])
          {
            v294 = v286 + 80 * v283;
            std::vector<unsigned int>::__vallocate[abi:nn180100]((_QWORD *)(v288 + 56), v293 >> 2);
            v295 = *(char **)(v294 + 64);
            memmove(v295, v292, v293);
            *(_QWORD *)(v294 + 64) = &v295[v293];
          }
          *(_QWORD *)&v469[16] = v288 + 80;
          std::vector<llvm::wasm::WasmElemSegment>::__swap_out_circular_buffer(v445, v469);
          v282 = a1[57];
          std::__split_buffer<llvm::wasm::WasmElemSegment>::~__split_buffer((uint64_t)v469);
        }
        else
        {
          v276 = *(_OWORD *)v468;
          v277 = *(_OWORD *)&v468[2];
          v278 = *(_OWORD *)&v468[4];
          *(void **)(v275 + 48) = v468[6];
          *(_OWORD *)(v275 + 16) = v277;
          *(_OWORD *)(v275 + 32) = v278;
          *(_QWORD *)(v275 + 56) = 0;
          *(_OWORD *)v275 = v276;
          *(_QWORD *)(v275 + 64) = 0;
          *(_QWORD *)(v275 + 72) = 0;
          v279 = v468[7];
          v280 = (char *)v468[8] - (char *)v468[7];
          if (v468[8] != v468[7])
          {
            std::vector<unsigned int>::__vallocate[abi:nn180100]((_QWORD *)(v275 + 56), v280 >> 2);
            v281 = *(char **)(v275 + 64);
            memmove(v281, v279, v280);
            *(_QWORD *)(v275 + 64) = &v281[v280];
          }
          v282 = v275 + 80;
        }
        a1[57] = v282;
        if (v468[7])
        {
          v468[8] = v468[7];
          operator delete(v468[7]);
        }
        if (!--v252)
        {
LABEL_331:
          if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
            goto LABEL_403;
          LODWORD(v468[0]) = 3;
          v111 = "elem section ended prematurely";
          goto LABEL_442;
        }
      }
    case 10:
      *((_DWORD *)a1 + 172) = 954437177 * ((a1[10] - a1[9]) >> 3);
      v296 = readVaruint32((uint64_t)&v465);
      if (v296 != (uint64_t)(a1[65] - a1[64]) >> 7)
      {
        LODWORD(v468[0]) = 3;
        v111 = "invalid function count";
        goto LABEL_442;
      }
      v297 = v465.__r_.__value_.__l.__size_;
      if (!v296)
        goto LABEL_363;
      v298 = 0;
      v447 = v296;
      while (1)
      {
        v455 = a1[64];
        v299 = v455 + (v298 << 7);
        v300 = readVaruint32((uint64_t)&v465);
        v301 = LODWORD(v465.__r_.__value_.__r.__words[1]) + v300;
        *(_DWORD *)(v299 + 56) = LODWORD(v465.__r_.__value_.__r.__words[1]) - v297;
        *(_DWORD *)v299 = *((_DWORD *)a1 + 170) + v298;
        v452 = v301;
        *(_DWORD *)(v299 + 48) = v297 - LODWORD(v465.__r_.__value_.__l.__data_);
        *(_DWORD *)(v299 + 52) = v301 - v297;
        v302 = readVaruint32((uint64_t)&v465);
        v304 = (unint64_t **)(v299 + 8);
        v303 = *(_QWORD *)(v299 + 8);
        v305 = (_QWORD *)(v299 + 24);
        if (v302 > (unint64_t)((*(_QWORD *)(v299 + 24) - v303) >> 3))
        {
          v307 = *(_QWORD *)(v299 + 16);
          v306 = (void **)(v299 + 16);
          v308 = v307 - v303;
          v310 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v302);
          v311 = (char *)*v306;
          v312 = *v304;
          v313 = &v310[v308 & 0xFFFFFFFFFFFFFFF8];
          if (*v306 != *v304)
          {
            do
            {
              v314 = *((_QWORD *)v311 - 1);
              v311 -= 8;
              *((_QWORD *)v313 - 1) = v314;
              v313 -= 8;
            }
            while (v311 != (char *)v312);
            v311 = (char *)*v304;
          }
          *v304 = (unint64_t *)v313;
          *v306 = &v310[v308 & 0xFFFFFFFFFFFFFFF8];
          *v305 = &v310[8 * v309];
          if (v311)
            operator delete(v311);
        }
        if (v302)
          break;
LABEL_362:
        v331 = (v452 - LODWORD(v465.__r_.__value_.__r.__words[1]));
        v332 = v455 + (v298 << 7);
        *(_QWORD *)(v332 + 32) = v465.__r_.__value_.__l.__size_;
        *(_QWORD *)(v332 + 40) = v331;
        *(_DWORD *)(v332 + 120) = -1;
        v297 = v465.__r_.__value_.__l.__size_ + v331;
        v465.__r_.__value_.__l.__size_ += v331;
        if (++v298 == v447)
        {
LABEL_363:
          if (v297 == v465.__r_.__value_.__r.__words[2])
            goto LABEL_403;
          LODWORD(v468[0]) = 3;
          v111 = "code section ended prematurely";
          goto LABEL_442;
        }
      }
      v315 = (unint64_t **)(v455 + (v298 << 7) + 16);
      while (1)
      {
        v316 = readVaruint32((uint64_t)&v465);
        v317 = (unsigned __int8 *)v465.__r_.__value_.__l.__size_;
        if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
          goto LABEL_545;
        v318 = v316;
        ++v465.__r_.__value_.__l.__size_;
        v319 = *v317;
        v320 = *v315;
        if ((unint64_t)*v315 >= *v305)
        {
          v322 = v320 - *v304;
          if ((unint64_t)(v322 + 1) >> 61)
            goto LABEL_546;
          v323 = *v305 - (_QWORD)*v304;
          v324 = v323 >> 2;
          if (v323 >> 2 <= (unint64_t)(v322 + 1))
            v324 = v322 + 1;
          if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFF8)
            v325 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v325 = v324;
          if (v325)
            v325 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v325);
          else
            v326 = 0;
          v327 = (unint64_t *)(v325 + 8 * v322);
          *v327 = v319 | (v318 << 32);
          v321 = v327 + 1;
          v328 = *v315;
          v329 = *v304;
          if (*v315 != *v304)
          {
            do
            {
              v330 = *--v328;
              *--v327 = v330;
            }
            while (v328 != v329);
            v328 = *v304;
          }
          *v304 = v327;
          *v315 = v321;
          *v305 = v325 + 8 * v326;
          if (v328)
            operator delete(v328);
        }
        else
        {
          *v320 = v319 | (v316 << 32);
          v321 = v320 + 1;
        }
        *v315 = v321;
        if (!--v302)
          goto LABEL_362;
      }
    case 11:
      *((_DWORD *)a1 + 173) = 954437177 * ((a1[10] - a1[9]) >> 3);
      v333 = readVaruint32((uint64_t)&v465);
      if (*((_BYTE *)a1 + 504) && a1[62] != v333)
      {
        v443 = (llvm::object::GenericBinaryError *)operator new();
        v468[0] = "number of data segments does not match DataCount section";
        LOWORD(v468[4]) = 259;
        v195 = (uint64_t)llvm::object::GenericBinaryError::GenericBinaryError(v443, (llvm::formatv_object_base **)v468);
LABEL_538:
        *v456 = v195;
        goto LABEL_539;
      }
      v334 = a1[59];
      if (0x4EC4EC4EC4EC4EC5 * ((a1[61] - v334) >> 3) < (unint64_t)v333)
      {
        v335 = (unsigned __int128)((a1[60] - v334) * (__int128)0x4EC4EC4EC4EC4EC5) >> 64;
        v336 = (v335 >> 5) + ((unint64_t)v335 >> 63);
        v337 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::WasmSegment>>(v333);
        v340 = (char *)a1[59];
        v339 = (char *)a1[60];
        v341 = &v337[104 * v336];
        if (v339 != v340)
        {
          do
          {
            v342 = *(_OWORD *)(v339 - 104);
            v343 = *(_OWORD *)(v339 - 88);
            *(_OWORD *)(v341 - 72) = *(_OWORD *)(v339 - 72);
            *(_OWORD *)(v341 - 88) = v343;
            *(_OWORD *)(v341 - 104) = v342;
            v344 = *(_OWORD *)(v339 - 56);
            v345 = *(_OWORD *)(v339 - 40);
            v346 = *(_OWORD *)(v339 - 24);
            *((_QWORD *)v341 - 1) = *((_QWORD *)v339 - 1);
            *(_OWORD *)(v341 - 24) = v346;
            *(_OWORD *)(v341 - 40) = v345;
            *(_OWORD *)(v341 - 56) = v344;
            v341 -= 104;
            v339 -= 104;
          }
          while (v339 != v340);
          v339 = (char *)a1[59];
        }
        a1[59] = v341;
        a1[60] = &v337[104 * v336];
        a1[61] = &v337[104 * v338];
        if (v339)
          operator delete(v339);
      }
      if (!v333)
      {
        v351 = v465.__r_.__value_.__r.__words[2];
        v372 = v465.__r_.__value_.__l.__size_;
LABEL_440:
        if (v372 == v351)
          goto LABEL_403;
        LODWORD(v468[0]) = 3;
        v111 = "data section ended prematurely";
LABEL_442:
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)v111, (unsigned int *)v468);
LABEL_480:
        v413 = v457;
        *v456 = v457;
        if (!v413)
          goto LABEL_481;
        goto LABEL_539;
      }
      while (1)
      {
        memset(&v468[5], 0, 48);
        v347 = readVaruint32((uint64_t)&v465);
        v348 = v347;
        LODWORD(v468[1]) = v347;
        v349 = (v347 & 2) != 0 ? readVaruint32((uint64_t)&v465) : 0;
        HIDWORD(v468[1]) = v349;
        if ((v348 & 1) != 0)
        {
          LOBYTE(v468[2]) = 0;
          LOBYTE(v468[3]) = 65;
          LODWORD(v468[4]) = 0;
        }
        else
        {
          readInitExpr((uint64_t)&v457, (uint64_t)&v468[2], (uint64_t)&v465);
          if (v457)
            goto LABEL_480;
        }
        v350 = readVaruint32((uint64_t)&v465);
        v351 = v465.__r_.__value_.__r.__words[2];
        v352 = v465.__r_.__value_.__l.__size_;
        if (v465.__r_.__value_.__r.__words[2] - v465.__r_.__value_.__l.__size_ < v350)
          break;
        v353 = v350;
        v468[7] = (void *)v465.__r_.__value_.__l.__size_;
        v468[8] = (void *)v350;
        v468[11] = 0;
        LODWORD(v468[12]) = -1;
        LODWORD(v468[0]) = LODWORD(v465.__r_.__value_.__r.__words[1]) - LODWORD(v465.__r_.__value_.__l.__data_);
        v465.__r_.__value_.__l.__size_ += v350;
        v354 = a1[60];
        v355 = a1[61];
        if (v354 >= v355)
        {
          v357 = a1[59];
          v358 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v354 - v357) >> 3);
          v359 = v358 + 1;
          if ((unint64_t)(v358 + 1) > 0x276276276276276)
            goto LABEL_546;
          v360 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v355 - v357) >> 3);
          if (2 * v360 > v359)
            v359 = 2 * v360;
          if (v360 >= 0x13B13B13B13B13BLL)
            v361 = 0x276276276276276;
          else
            v361 = v359;
          if (v361)
            v361 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::WasmSegment>>(v361);
          else
            v362 = 0;
          v363 = v361 + 104 * v358;
          *(_OWORD *)v363 = *(_OWORD *)v468;
          *(_OWORD *)(v363 + 16) = *(_OWORD *)&v468[2];
          *(_OWORD *)(v363 + 32) = *(_OWORD *)&v468[4];
          *(void **)(v363 + 96) = v468[12];
          *(_OWORD *)(v363 + 80) = *(_OWORD *)&v468[10];
          *(_OWORD *)(v363 + 64) = *(_OWORD *)&v468[8];
          *(_OWORD *)(v363 + 48) = *(_OWORD *)&v468[6];
          v365 = (char *)a1[59];
          v364 = (char *)a1[60];
          v366 = v363;
          if (v364 != v365)
          {
            do
            {
              v367 = *(_OWORD *)(v364 - 104);
              v368 = *(_OWORD *)(v364 - 88);
              *(_OWORD *)(v366 - 72) = *(_OWORD *)(v364 - 72);
              *(_OWORD *)(v366 - 88) = v368;
              *(_OWORD *)(v366 - 104) = v367;
              v369 = *(_OWORD *)(v364 - 56);
              v370 = *(_OWORD *)(v364 - 40);
              v371 = *(_OWORD *)(v364 - 24);
              *(_QWORD *)(v366 - 8) = *((_QWORD *)v364 - 1);
              *(_OWORD *)(v366 - 24) = v371;
              *(_OWORD *)(v366 - 40) = v370;
              *(_OWORD *)(v366 - 56) = v369;
              v366 -= 104;
              v364 -= 104;
            }
            while (v364 != v365);
            v364 = (char *)a1[59];
          }
          v356 = v363 + 104;
          a1[59] = v366;
          a1[60] = v363 + 104;
          a1[61] = v361 + 104 * v362;
          if (v364)
            operator delete(v364);
        }
        else
        {
          *(_OWORD *)(v354 + 48) = *(_OWORD *)&v468[6];
          *(_OWORD *)(v354 + 64) = *(_OWORD *)&v468[8];
          *(_OWORD *)(v354 + 80) = *(_OWORD *)&v468[10];
          *(void **)(v354 + 96) = v468[12];
          *(_OWORD *)v354 = *(_OWORD *)v468;
          *(_OWORD *)(v354 + 16) = *(_OWORD *)&v468[2];
          *(_OWORD *)(v354 + 32) = *(_OWORD *)&v468[4];
          v356 = v354 + 104;
        }
        a1[60] = v356;
        if (!--v333)
        {
          v372 = v352 + v353;
          goto LABEL_440;
        }
      }
      v405 = operator new();
      *(_QWORD *)v469 = "invalid segment size";
      LOWORD(v470) = 259;
      v406 = (void **)v469;
      goto LABEL_521;
    case 12:
      v373 = readVaruint32((uint64_t)&v465);
      if (!*((_BYTE *)a1 + 504))
        *((_BYTE *)a1 + 504) = 1;
      a1[62] = v373;
      goto LABEL_403;
    case 13:
      *((_DWORD *)a1 + 174) = 954437177 * ((a1[10] - a1[9]) >> 3);
      v374 = readVaruint32((uint64_t)&v465);
      v375 = v374;
      v376 = a1[47];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[49] - v376) >> 3) < v374)
      {
        v377 = (unsigned __int128)((a1[48] - v376) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v378 = (v377 >> 2) + ((unint64_t)v377 >> 63);
        v379 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v374);
        v382 = (char *)a1[47];
        v381 = (char *)a1[48];
        v383 = &v379[24 * v378];
        if (v381 != v382)
        {
          do
          {
            v384 = *(_OWORD *)(v381 - 24);
            *((_QWORD *)v383 - 1) = *((_QWORD *)v381 - 1);
            *(_OWORD *)(v383 - 24) = v384;
            v383 -= 24;
            v381 -= 24;
          }
          while (v381 != v382);
          v381 = (char *)a1[47];
        }
        a1[47] = v383;
        a1[48] = &v379[24 * v378];
        a1[49] = &v379[24 * v380];
        if (v381)
          operator delete(v381);
      }
      if (!v375)
        goto LABEL_432;
      v385 = (a1[36] - a1[35]) >> 6;
      while (1)
      {
        v386 = (_BYTE *)v465.__r_.__value_.__l.__size_;
        if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
          goto LABEL_545;
        ++v465.__r_.__value_.__l.__size_;
        if (*v386)
          break;
        v387 = readVaruint32((uint64_t)&v465);
        if (v387 >= v385)
        {
LABEL_445:
          LODWORD(v468[0]) = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"invalid tag type", (unsigned int *)v468);
          goto LABEL_480;
        }
        v388 = v387;
        v390 = a1[47];
        v389 = a1[48];
        v391 = (uint64_t)(v389 - v390) / 24;
        v392 = *((_DWORD *)a1 + 171) + v391;
        v393 = a1[49];
        if (v389 >= v393)
        {
          v395 = v391 + 1;
          if ((unint64_t)(v391 + 1) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_546;
          v396 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v393 - v390) >> 3);
          if (2 * v396 > v395)
            v395 = 2 * v396;
          if (v396 >= 0x555555555555555)
            v397 = 0xAAAAAAAAAAAAAAALL;
          else
            v397 = v395;
          if (v397)
            v397 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v397);
          else
            v398 = 0;
          v399 = v397 + 24 * v391;
          *(_DWORD *)v399 = v392;
          *(_DWORD *)(v399 + 4) = v388;
          *(_QWORD *)(v399 + 8) = 0;
          *(_QWORD *)(v399 + 16) = 0;
          v401 = (char *)a1[47];
          v400 = (char *)a1[48];
          v402 = v399;
          if (v400 != v401)
          {
            do
            {
              v403 = *(_OWORD *)(v400 - 24);
              *(_QWORD *)(v402 - 8) = *((_QWORD *)v400 - 1);
              *(_OWORD *)(v402 - 24) = v403;
              v402 -= 24;
              v400 -= 24;
            }
            while (v400 != v401);
            v400 = (char *)a1[47];
          }
          v394 = v399 + 24;
          a1[47] = v402;
          a1[48] = v399 + 24;
          a1[49] = v397 + 24 * v398;
          if (v400)
            operator delete(v400);
        }
        else
        {
          *(_DWORD *)v389 = v392;
          *(_DWORD *)(v389 + 4) = v387;
          v394 = v389 + 24;
          *(_QWORD *)(v389 + 8) = 0;
          *(_QWORD *)(v389 + 16) = 0;
        }
        a1[48] = v394;
        if (!--v375)
        {
LABEL_432:
          if (v465.__r_.__value_.__l.__size_ == v465.__r_.__value_.__r.__words[2])
            goto LABEL_403;
          LODWORD(v468[0]) = 3;
          llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(&v457, (llvm::formatv_object_base *)"tag section ended prematurely", (unsigned int *)v468);
          goto LABEL_480;
        }
      }
      v441 = operator new();
      v442 = "invalid attribute";
LABEL_536:
      v468[0] = (void *)v442;
      LOWORD(v468[4]) = 259;
LABEL_537:
      v195 = llvm::object::GenericBinaryError::GenericBinaryError(v441, (llvm::formatv_object_base **)v468, 3u);
      goto LABEL_538;
    default:
      v468[0] = "invalid section type: ";
      v468[2] = v18;
      LOWORD(v468[4]) = 2051;
      v441 = operator new();
      goto LABEL_537;
  }
}

void llvm::object::WasmObjectFile::parseCustomSection(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t ULEB128;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int Varuint32;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t String;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int *v28;
  unint64_t v29;
  _DWORD *v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  char *v59;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t *v114;
  char *v115;
  char *v116;
  unint64_t *v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  const char *v194;
  int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  void *v202;
  unint64_t v203;
  unint64_t v204;
  char v205;
  char v206;
  char v207;
  char v208;
  unint64_t v209;
  void *v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  unint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  char *v234;
  char v235;
  char *v236;
  char v237;
  void *v238;
  void *v239;
  void *v240;
  uint64_t *v241;
  void *v242;
  char v243;
  int v244;
  unint64_t v245;
  char v246;
  unint64_t v247;
  char v248;
  char v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  char v260;
  char v261;
  uint64_t v262;
  unint64_t v263;
  int v264;
  char *v265;
  char *v266;
  unint64_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  _QWORD *v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  __int128 v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  char *v298;
  uint64_t *v299;
  char *v300;
  __int128 *v301;
  uint64_t v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  int v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char *v321;
  uint64_t *v322;
  char *v323;
  char *v324;
  uint64_t *v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  unint64_t v333;
  uint64_t *v334;
  _QWORD *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  __int128 v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  int v355;
  unint64_t v356;
  uint64_t *v357;
  _QWORD *v358;
  _QWORD *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  char *v363;
  char *v364;
  char *v365;
  __int128 v366;
  __int128 v367;
  unsigned int v369;
  uint64_t v370;
  uint64_t v371;
  std::string::size_type v372;
  char v373;
  const void *v374;
  size_t v375;
  unsigned int v376;
  uint64_t v377;
  _QWORD *v378;
  char **v379;
  BOOL v380;
  unsigned int v381;
  uint64_t v382;
  BOOL v383;
  void *v384;
  const void *v385;
  size_t v386;
  size_t v387;
  char v388;
  unsigned int v389;
  const void *v390;
  void *v391;
  uint64_t v392;
  void **v393;
  _BYTE *v394;
  const void *v395;
  _BYTE *v396;
  unint64_t v397;
  unint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unint64_t v403;
  char *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  char *v409;
  char *v410;
  char *v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  char v415;
  char *v416;
  uint64_t v417;
  char *v418;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  int v424;
  int v425;
  unsigned int v426;
  uint64_t v427;
  void **v428;
  void **v429;
  _QWORD *v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t Varint32;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char *v440;
  char *v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  unint64_t v446;
  char *v447;
  char *v448;
  char *v449;
  __int128 v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  unsigned __int8 *v460;
  unsigned int v461;
  BOOL v462;
  uint64_t v463;
  uint64_t v465;
  unint64_t v466;
  const void *v467;
  size_t v468;
  __int128 *v469;
  uint64_t v470;
  uint64_t v471;
  char v472;
  unsigned int v473;
  char *v474;
  char *v475;
  uint64_t v476;
  _BYTE *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void **v481;
  unint64_t v482;
  unint64_t v483;
  std::string *v484;
  __int128 v485;
  void **v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v490;
  char *v491;
  char *v492;
  char *v493;
  std::string *v494;
  char *v495;
  char v496;
  __int128 v497;
  void **v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  std::string *v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  char *v509;
  char *v510;
  uint64_t v511;
  char **v512;
  unsigned __int8 *v513;
  char **v514;
  unint64_t v515;
  char **v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  char *v520;
  unsigned int v521;
  uint64_t v522;
  unsigned __int8 *v523;
  void *v524;
  unint64_t v525;
  unsigned int v527;
  unsigned int v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  void *__src[4];
  __int16 v536;
  std::string v537;
  __int16 v538;
  void *v539[2];
  unint64_t v540;
  __int16 v541;
  _BYTE __dst[24];
  uint64_t v543;
  __int16 v544;
  unint64_t v545;
  unint64_t v546;
  _BYTE v547[7];
  _BYTE v548[7];
  _BYTE v549[7];
  __int16 v550;
  char v551;
  void *__p;
  char *v553;
  unint64_t v554;
  void *v555;
  char *v556;
  unint64_t v557;
  void *v558;
  char *v559;
  unint64_t v560;
  void *v561;
  char *v562;
  unint64_t v563;
  _QWORD v564[3];
  _BYTE v565[15];
  _QWORD v566[2];
  _QWORD v567[2];
  __int128 v568;
  _QWORD v569[2];
  __int16 v570;
  uint64_t *v571;
  _QWORD *v572;
  uint64_t v573;
  void *v574;
  uint64_t v575;
  unint64_t v576;
  unint64_t v577;
  __int16 v578;
  uint64_t *v579;
  _QWORD *v580;
  uint64_t v581;
  char **v582;
  char *v583;
  uint64_t v584;
  uint64_t v585;

  v6 = a5;
  v7 = (_QWORD *)a2;
  v8 = a1;
  v585 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 4uLL:
      if (*(_DWORD *)a3 != 1701667182)
        goto LABEL_766;
      v568 = 0uLL;
      LODWORD(v569[0]) = 0;
      memset(__dst, 0, 20);
      v539[0] = 0;
      v539[1] = 0;
      LODWORD(v540) = 0;
      v9 = *(unsigned __int8 **)(a5 + 8);
      while (2)
      {
        v10 = *(unsigned __int8 **)(v6 + 16);
        if (v9 < v10)
        {
          *(_QWORD *)(v6 + 8) = v9 + 1;
          v11 = *v9;
          Varuint32 = readVaruint32(v6);
          v13 = v11 > 9 || ((1 << v11) & 0x282) == 0;
          v523 = (unsigned __int8 *)(*(_QWORD *)(v6 + 8) + Varuint32);
          if (v13)
          {
            *(_QWORD *)(v6 + 8) += Varuint32;
          }
          else
          {
            v14 = readVaruint32(v6);
            if (v14)
            {
              v15 = v14;
              v528 = v11;
              do
              {
                v16 = readVaruint32(v6);
                String = readString(v6);
                v19 = v18;
                if (v11 == 7)
                {
                  v537.__r_.__value_.__r.__words[0] = v16;
                  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)__dst, &v537, (uint64_t)&v574);
                  if (!(_BYTE)v576)
                  {
                    LODWORD(v574) = 3;
                    v509 = "global named more than once";
LABEL_745:
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)v509, (unsigned int *)&v574);
                    goto LABEL_764;
                  }
                  if ((unint64_t)*((unsigned int *)v7 + 168) + ((uint64_t)(v7[45] - v7[44]) >> 6) <= v16
                    || v19 == 0)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid global name entry", (unsigned int *)&v574);
                    goto LABEL_764;
                  }
                  v23 = 1;
                }
                else if (v11 == 1)
                {
                  v537.__r_.__value_.__r.__words[0] = v16;
                  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v568, &v537, (uint64_t)&v574);
                  if (!(_BYTE)v576)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"function named more than once", (unsigned int *)&v574);
                    goto LABEL_764;
                  }
                  v20 = *((unsigned int *)v7 + 170);
                  v21 = v7[64];
                  if (v20 + ((v7[65] - v21) >> 7) <= (unint64_t)v16 || v19 == 0)
                  {
                    LODWORD(v574) = 3;
                    v509 = "invalid function name entry";
                    goto LABEL_745;
                  }
                  v23 = 0;
                  v24 = v16 >= v20;
                  v25 = v16 - v20;
                  if (v24)
                  {
                    v26 = v21 + (v25 << 7);
                    *(_QWORD *)(v26 + 104) = String;
                    *(_QWORD *)(v26 + 112) = v19;
                  }
                }
                else
                {
                  v537.__r_.__value_.__r.__words[0] = v16;
                  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v539, &v537, (uint64_t)&v574);
                  if (!(_BYTE)v576)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"segment named more than once", (unsigned int *)&v574);
                    goto LABEL_764;
                  }
                  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7[60] - v7[59]) >> 3) < (unint64_t)v16)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)"invalid data segment name entry", (unsigned int *)&v574, a1);
                    goto LABEL_764;
                  }
                  v23 = 2;
                }
                v28 = (int *)v7[71];
                v29 = v7[72];
                if ((unint64_t)v28 >= v29)
                {
                  v31 = (int *)v7[70];
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v31) >> 3) + 1;
                  if (v32 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_773;
                  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v31) >> 3);
                  if (2 * v33 > v32)
                    v32 = 2 * v33;
                  if (v33 >= 0x555555555555555)
                    v34 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v34 = v32;
                  if (v34)
                  {
                    if (v34 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_774;
                    v35 = (char *)operator new(24 * v34);
                  }
                  else
                  {
                    v35 = 0;
                  }
                  v36 = &v35[8 * (((char *)v28 - (char *)v31) >> 3)];
                  *(_DWORD *)v36 = v23;
                  *((_DWORD *)v36 + 1) = v16;
                  *((_QWORD *)v36 + 1) = String;
                  *((_QWORD *)v36 + 2) = v19;
                  v37 = v36;
                  if (v28 == v31)
                  {
                    v8 = a1;
                    v7 = (_QWORD *)a2;
                    v11 = v528;
                  }
                  else
                  {
                    v8 = a1;
                    v7 = (_QWORD *)a2;
                    v11 = v528;
                    do
                    {
                      v38 = *(_OWORD *)(v28 - 6);
                      *((_QWORD *)v37 - 1) = *((_QWORD *)v28 - 1);
                      *(_OWORD *)(v37 - 24) = v38;
                      v37 -= 24;
                      v28 -= 6;
                    }
                    while (v28 != v31);
                    v28 = *(int **)(a2 + 560);
                  }
                  v7[70] = v37;
                  v30 = v36 + 24;
                  v7[71] = v36 + 24;
                  v7[72] = &v35[24 * v34];
                  if (v28)
                    operator delete(v28);
                  v6 = a5;
                }
                else
                {
                  *v28 = v23;
                  v28[1] = v16;
                  v30 = v28 + 6;
                  *((_QWORD *)v28 + 1) = String;
                  *((_QWORD *)v28 + 2) = v19;
                  v8 = a1;
                  v6 = a5;
                  v11 = v528;
                }
                v7[71] = v30;
                --v15;
              }
              while (v15);
            }
          }
          v9 = v523;
          if (*(unsigned __int8 **)(v6 + 8) != v523)
          {
            LODWORD(v574) = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)"name sub-section ended prematurely", (unsigned int *)&v574);
            goto LABEL_764;
          }
          continue;
        }
        break;
      }
      if (v9 == v10)
      {
        *v8 = 0;
      }
      else
      {
        LODWORD(v574) = 3;
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)"name section ended prematurely", (unsigned int *)&v574);
      }
LABEL_764:
      MEMORY[0x24BD1B398](v539[0], 8);
      MEMORY[0x24BD1B398](*(_QWORD *)__dst, 8);
      MEMORY[0x24BD1B398](v568, 8);
      goto LABEL_765;
    case 6uLL:
      if (*(_DWORD *)a3 != 1768716644 || *(_WORD *)(a3 + 4) != 27502)
        goto LABEL_560;
      *(_BYTE *)(a2 + 589) = 1;
      *(_DWORD *)(a2 + 96) = readVaruint32(a5);
      *((_DWORD *)v7 + 25) = readVaruint32(v6);
      *((_DWORD *)v7 + 26) = readVaruint32(v6);
      *((_DWORD *)v7 + 27) = readVaruint32(v6);
      v40 = readVaruint32(v6);
      if (!v40)
        goto LABEL_81;
      v41 = v40;
      do
      {
        v42 = readString(v6);
        v44 = v42;
        v45 = v43;
        v47 = (uint64_t *)v7[15];
        v46 = v7[16];
        if ((unint64_t)v47 >= v46)
        {
          v49 = v7[14];
          v50 = ((uint64_t)v47 - v49) >> 4;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 60)
            goto LABEL_773;
          v52 = v46 - v49;
          if (v52 >> 3 > v51)
            v51 = v52 >> 3;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
            v53 = 0xFFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(v7 + 16), v53);
          else
            v54 = 0;
          v55 = (uint64_t *)&v54[16 * v50];
          *v55 = v44;
          v55[1] = v45;
          v57 = (char *)v7[14];
          v56 = (char *)v7[15];
          v58 = v55;
          if (v56 != v57)
          {
            do
            {
              *((_OWORD *)v58 - 1) = *((_OWORD *)v56 - 1);
              v58 -= 2;
              v56 -= 16;
            }
            while (v56 != v57);
            v56 = (char *)v7[14];
          }
          v48 = v55 + 2;
          v7[14] = v58;
          v7[15] = v55 + 2;
          v7[16] = &v54[16 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v47 = v42;
          v47[1] = v43;
          v48 = v47 + 2;
        }
        v7[15] = v48;
        --v41;
      }
      while (v41);
LABEL_81:
      v8 = a1;
      if (*(_QWORD *)(v6 + 8) == *(_QWORD *)(v6 + 16))
        goto LABEL_766;
      LODWORD(v574) = 3;
      v59 = "dylink section ended prematurely";
      goto LABEL_83;
    case 7uLL:
      if (*(_DWORD *)a3 != 1802398060 || *(_DWORD *)(a3 + 3) != 1735289195)
        goto LABEL_560;
      *(_BYTE *)(a2 + 588) = 1;
      v61 = readVaruint32(a5);
      *((_DWORD *)v7 + 148) = v61;
      if (v61 != 2)
      {
        v539[0] = "unexpected metadata version: ";
        v540 = v61;
        v541 = 2051;
        *(_QWORD *)__dst = v539;
        *(_QWORD *)&__dst[16] = " (Expected: ";
        v544 = 770;
        *(_QWORD *)&v568 = __dst;
        v569[0] = 2;
        v570 = 2050;
        v574 = &v568;
        v576 = (unint64_t)")";
        v578 = 770;
        v501 = operator new();
        *v8 = llvm::object::GenericBinaryError::GenericBinaryError(v501, (llvm::formatv_object_base **)&v574, 3u);
        return;
      }
      v62 = *(unsigned __int8 **)(v6 + 8);
      v63 = *(unsigned __int8 **)(v6 + 16);
      v511 = (uint64_t)(v7 + 80);
      v513 = v63;
LABEL_91:
      if (v62 < v63)
      {
        *(_QWORD *)(v6 + 8) = v62 + 1;
        *(_QWORD *)(v6 + 16) = v63;
        v64 = *v62;
        v65 = *(_QWORD *)(v6 + 8) + readVaruint32(v6);
        *(_QWORD *)(v6 + 16) = v65;
        switch(v64)
        {
          case 5:
            v66 = readVaruint32(v6);
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7[60] - v7[59]) >> 3) >= (unint64_t)v66)
            {
              if (v66)
              {
                v67 = 0;
                v68 = 104 * v66;
                do
                {
                  v69 = readString(v6);
                  v70 = v7[59] + v67;
                  *(_QWORD *)(v70 + 72) = v69;
                  *(_QWORD *)(v70 + 80) = v71;
                  *(_DWORD *)(v7[59] + v67 + 88) = readVaruint32(v6);
                  *(_DWORD *)(v7[59] + v67 + 92) = readVaruint32(v6);
                  v67 += 104;
                }
                while (v68 != v67);
              }
              goto LABEL_375;
            }
            LODWORD(v574) = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)"too many segment names", (unsigned int *)&v574);
            goto LABEL_765;
          case 6:
            v72 = readVaruint32(v6);
            v73 = v72;
            v74 = v7[75];
            if (v72 > (unint64_t)((v7[77] - v74) >> 3))
            {
              v75 = v7[76] - v74;
              v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v72);
              v78 = (char *)v7[76];
              v79 = (char *)v7[75];
              v80 = &v77[v75 & 0xFFFFFFFFFFFFFFF8];
              if (v78 != v79)
              {
                do
                {
                  v81 = *((_QWORD *)v78 - 1);
                  v78 -= 8;
                  *((_QWORD *)v80 - 1) = v81;
                  v80 -= 8;
                }
                while (v78 != v79);
                v78 = (char *)v7[75];
              }
              v7[75] = v80;
              v7[76] = &v77[v75 & 0xFFFFFFFFFFFFFFF8];
              v7[77] = &v77[8 * v76];
              if (v78)
                operator delete(v78);
            }
            if (!v73)
              goto LABEL_375;
            v82 = 0;
            while (1)
            {
              v83 = readVaruint32(v6);
              v84 = readVaruint32(v6);
              ULEB128 = v84;
              v85 = v7[67];
              if (v84 >= (unint64_t)((v7[68] - v85) >> 5) || *(_BYTE *)(*(_QWORD *)(v85 + 32 * v84) + 16))
                break;
              v86 = (unint64_t *)v7[76];
              v87 = v7[77];
              if ((unint64_t)v86 >= v87)
              {
                v89 = v7[75];
                v90 = ((uint64_t)v86 - v89) >> 3;
                if ((unint64_t)(v90 + 1) >> 61)
                  goto LABEL_773;
                v91 = v87 - v89;
                v92 = v91 >> 2;
                if (v91 >> 2 <= (unint64_t)(v90 + 1))
                  v92 = v90 + 1;
                if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
                  v93 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v93 = v92;
                if (v93)
                  v93 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v93);
                else
                  v94 = 0;
                v95 = (unint64_t *)(v93 + 8 * v90);
                *v95 = v83 | (ULEB128 << 32);
                v88 = v95 + 1;
                v96 = (char *)v7[76];
                v97 = (char *)v7[75];
                if (v96 == v97)
                {
                  v8 = a1;
                }
                else
                {
                  v8 = a1;
                  do
                  {
                    v98 = *((_QWORD *)v96 - 1);
                    v96 -= 8;
                    *--v95 = v98;
                  }
                  while (v96 != v97);
                  v96 = (char *)v7[75];
                }
                v7[75] = v95;
                v7[76] = v88;
                v7[77] = v93 + 8 * v94;
                if (v96)
                  operator delete(v96);
              }
              else
              {
                *v86 = v83 | ((unint64_t)v84 << 32);
                v88 = v86 + 1;
                v8 = a1;
              }
              v7[76] = v88;
              if (++v82 == v73)
                goto LABEL_375;
            }
            v574 = "invalid function symbol: ";
            v576 = v84;
LABEL_724:
            v578 = 2051;
            v502 = operator new();
            goto LABEL_726;
          case 7:
            v99 = readVaruint32(v6);
            v568 = 0uLL;
            v569[0] = 0x800000000;
            if (!v99)
              goto LABEL_168;
            v100 = v99;
            v101 = 0;
            while (2)
            {
              ULEB128 = readString(v6);
              v103 = v102;
              if (!v102
                || (llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&v568, (uint64_t *)ULEB128, v102), (v104 & 1) == 0))
              {
                v574 = "bad/duplicate COMDAT name ";
                v576 = ULEB128;
                v577 = v103;
                v578 = 1283;
                v296 = operator new();
                v8 = a1;
                *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v296, (llvm::formatv_object_base **)&v574, 3u);
                goto LABEL_356;
              }
              v105 = (unint64_t *)v7[79];
              v106 = v7[80];
              if ((unint64_t)v105 >= v106)
              {
                v108 = v7[78];
                v109 = ((uint64_t)v105 - v108) >> 4;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 60)
LABEL_773:
                  abort();
                v111 = v106 - v108;
                if (v111 >> 3 > v110)
                  v110 = v111 >> 3;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
                  v112 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v112 = v110;
                if (v112)
                  v113 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v511, v112);
                else
                  v113 = 0;
                v114 = (unint64_t *)&v113[16 * v109];
                *v114 = ULEB128;
                v114[1] = v103;
                v115 = (char *)v7[79];
                v116 = (char *)v7[78];
                v117 = v114;
                if (v115 == v116)
                {
                  v8 = a1;
                }
                else
                {
                  v8 = a1;
                  do
                  {
                    *((_OWORD *)v117 - 1) = *((_OWORD *)v115 - 1);
                    v117 -= 2;
                    v115 -= 16;
                  }
                  while (v115 != v116);
                  v115 = (char *)v7[78];
                }
                v7[78] = v117;
                v107 = v114 + 2;
                v7[79] = v114 + 2;
                v7[80] = &v113[16 * v112];
                if (v115)
                  operator delete(v115);
              }
              else
              {
                *v105 = ULEB128;
                v105[1] = v103;
                v107 = v105 + 2;
                v8 = a1;
              }
              v7[79] = v107;
              if (!readVaruint32(v6))
              {
                v118 = readVaruint32(v6);
                if (!v118)
                {
LABEL_167:
                  if (++v101 == v100)
                  {
LABEL_168:
                    v8 = a1;
                    *a1 = 0;
                    goto LABEL_356;
                  }
                  continue;
                }
                v119 = v118;
                while (1)
                {
                  v120 = readVaruint32(v6);
                  v121 = readVaruint32(v6);
                  if (v120)
                  {
                    if (v120 == 1)
                    {
                      v127 = *((unsigned int *)v7 + 170);
                      if (v121 < v127
                        || (v128 = v7[64], v127 + ((v7[65] - v128) >> 7) <= (unint64_t)v121))
                      {
                        LODWORD(v574) = 3;
                        v8 = a1;
                        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"COMDAT function index out of range", (unsigned int *)&v574);
                        goto LABEL_356;
                      }
                      v129 = v128 + ((unint64_t)(v121 - v127) << 7);
                      v130 = *(_DWORD *)(v129 + 120);
                      v123 = (_DWORD *)(v129 + 120);
                      if (v130 != -1)
                      {
                        LODWORD(v574) = 3;
                        v8 = a1;
                        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"function in two COMDATs", (unsigned int *)&v574);
                        goto LABEL_356;
                      }
                    }
                    else
                    {
                      if (v120 != 5)
                      {
                        LODWORD(v574) = 3;
                        v8 = a1;
                        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid COMDAT entry type", (unsigned int *)&v574);
                        goto LABEL_356;
                      }
                      v122 = v7[9];
                      if (0x8E38E38E38E38E39 * ((v7[10] - v122) >> 3) <= v121)
                      {
                        LODWORD(v574) = 3;
                        v8 = a1;
                        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"COMDAT section index out of range", (unsigned int *)&v574);
                        goto LABEL_356;
                      }
                      if (*(_DWORD *)(v122 + 72 * v121))
                      {
                        LODWORD(v574) = 3;
                        v8 = a1;
                        v297 = a1;
                        v298 = "non-custom section in a COMDAT";
                        goto LABEL_348;
                      }
                      v123 = (_DWORD *)(v122 + 72 * v121 + 24);
                    }
                  }
                  else
                  {
                    v124 = v7[59];
                    if (0x4EC4EC4EC4EC4EC5 * ((v7[60] - v124) >> 3) <= (unint64_t)v121)
                    {
                      LODWORD(v574) = 3;
                      v8 = a1;
                      v297 = a1;
                      v298 = "COMDAT data index out of range";
LABEL_348:
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v297, (llvm::formatv_object_base *)v298, (unsigned int *)&v574);
                      goto LABEL_356;
                    }
                    v125 = v124 + 104 * v121;
                    v126 = *(_DWORD *)(v125 + 96);
                    v123 = (_DWORD *)(v125 + 96);
                    if (v126 != -1)
                    {
                      LODWORD(v574) = 3;
                      v8 = a1;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"data segment in two COMDATs", (unsigned int *)&v574);
                      goto LABEL_356;
                    }
                  }
                  *v123 = v101;
                  if (!--v119)
                    goto LABEL_167;
                }
              }
              break;
            }
            LODWORD(v574) = 3;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)"unsupported COMDAT flags", (unsigned int *)&v574);
LABEL_356:
            v301 = &v568;
            goto LABEL_374;
          case 8:
            v131 = readVaruint32(v6);
            v132 = v131;
            v133 = v7[81];
            v521 = v131;
            if (0xEEEEEEEEEEEEEEEFLL * ((v7[83] - v133) >> 3) < v131)
            {
              v134 = (v7[82] - v133) / 120;
              v135 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSymbolInfo>>(v131);
              v137 = (char *)v7[82];
              v138 = (char *)v7[81];
              v139 = &v135[120 * v134];
              if (v137 != v138)
              {
                do
                {
                  v140 = *(_OWORD *)(v137 - 120);
                  v141 = *(_OWORD *)(v137 - 104);
                  v142 = *(_OWORD *)(v137 - 88);
                  *(_OWORD *)(v139 - 72) = *(_OWORD *)(v137 - 72);
                  *(_OWORD *)(v139 - 88) = v142;
                  *(_OWORD *)(v139 - 104) = v141;
                  *(_OWORD *)(v139 - 120) = v140;
                  v143 = *(_OWORD *)(v137 - 56);
                  v144 = *(_OWORD *)(v137 - 40);
                  v145 = *(_OWORD *)(v137 - 24);
                  *((_QWORD *)v139 - 1) = *((_QWORD *)v137 - 1);
                  *(_OWORD *)(v139 - 24) = v145;
                  *(_OWORD *)(v139 - 40) = v144;
                  *(_OWORD *)(v139 - 56) = v143;
                  v139 -= 120;
                  v137 -= 120;
                }
                while (v137 != v138);
                v137 = (char *)v7[81];
              }
              v7[81] = v139;
              v7[82] = &v135[120 * v134];
              v7[83] = &v135[120 * v136];
              if (v137)
                operator delete(v137);
            }
            v146 = v7[67];
            if (v132 > (v7[69] - v146) >> 5)
            {
              v147 = v7[68] - v146;
              v148 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(v132);
              v150 = (char *)v7[68];
              v151 = (char *)v7[67];
              v152 = &v148[v147 & 0xFFFFFFFFFFFFFFE0];
              if (v150 != v151)
              {
                do
                {
                  v153 = *((_OWORD *)v150 - 1);
                  *((_OWORD *)v152 - 2) = *((_OWORD *)v150 - 2);
                  *((_OWORD *)v152 - 1) = v153;
                  v152 -= 32;
                  v150 -= 32;
                }
                while (v150 != v151);
                v150 = (char *)v7[67];
              }
              v7[67] = v152;
              v7[68] = &v148[v147 & 0xFFFFFFFFFFFFFFE0];
              v7[69] = &v148[32 * v149];
              if (v150)
                operator delete(v150);
            }
            v564[0] = 0;
            v564[1] = 0;
            v564[2] = 0x800000000;
            v561 = 0;
            v562 = 0;
            v563 = 0;
            v558 = 0;
            v559 = 0;
            v560 = 0;
            v555 = 0;
            v556 = 0;
            v557 = 0;
            v154 = (uint64_t)(v7[51] - v7[50]) >> 3;
            __p = 0;
            v553 = 0;
            v554 = 0;
            std::vector<llvm::wasm::WasmImport *>::reserve(&v561, 0x8E38E38E38E38E39 * v154);
            std::vector<llvm::wasm::WasmImport *>::reserve(&v558, 0x8E38E38E38E38E39 * ((uint64_t)(v7[51] - v7[50]) >> 3));
            std::vector<llvm::wasm::WasmImport *>::reserve(&v555, 0x8E38E38E38E38E39 * ((uint64_t)(v7[51] - v7[50]) >> 3));
            std::vector<llvm::wasm::WasmImport *>::reserve(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(v7[51] - v7[50]) >> 3));
            v155 = v7[50];
            v156 = v7[51];
            if (v155 == v156)
              goto LABEL_252;
            while (2)
            {
              switch(*(_BYTE *)(v155 + 32))
              {
                case 0:
                  v157 = v559;
                  if ((unint64_t)v559 >= v560)
                  {
                    ULEB128 = (unint64_t)v558;
                    v165 = (v559 - (_BYTE *)v558) >> 3;
                    v166 = v165 + 1;
                    if ((unint64_t)(v165 + 1) >> 61)
                      goto LABEL_773;
                    v167 = v560 - (_QWORD)v558;
                    if ((uint64_t)(v560 - (_QWORD)v558) >> 2 > v166)
                      v166 = v167 >> 2;
                    if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8)
                      v168 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v168 = v166;
                    if (v168)
                      v168 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v168);
                    else
                      v169 = 0;
                    v185 = (char *)(v168 + 8 * v165);
                    *(_QWORD *)v185 = v155;
                    v158 = v185 + 8;
                    if (v157 != (char *)ULEB128)
                    {
                      do
                      {
                        v186 = *((_QWORD *)v157 - 1);
                        v157 -= 8;
                        *((_QWORD *)v185 - 1) = v186;
                        v185 -= 8;
                      }
                      while (v157 != (char *)ULEB128);
                      v157 = (char *)v558;
                    }
                    v558 = v185;
                    v560 = v168 + 8 * v169;
                    if (v157)
                      operator delete(v157);
                  }
                  else
                  {
                    *(_QWORD *)v559 = v155;
                    v158 = v157 + 8;
                  }
                  v559 = v158;
                  goto LABEL_251;
                case 1:
                  v159 = v553;
                  if ((unint64_t)v553 >= v554)
                  {
                    ULEB128 = (unint64_t)__p;
                    v170 = (v553 - (_BYTE *)__p) >> 3;
                    v171 = v170 + 1;
                    if ((unint64_t)(v170 + 1) >> 61)
                      goto LABEL_773;
                    v172 = v554 - (_QWORD)__p;
                    if ((uint64_t)(v554 - (_QWORD)__p) >> 2 > v171)
                      v171 = v172 >> 2;
                    if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
                      v173 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v173 = v171;
                    if (v173)
                      v173 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v173);
                    else
                      v174 = 0;
                    v187 = (char *)(v173 + 8 * v170);
                    *(_QWORD *)v187 = v155;
                    v160 = v187 + 8;
                    if (v159 != (char *)ULEB128)
                    {
                      do
                      {
                        v188 = *((_QWORD *)v159 - 1);
                        v159 -= 8;
                        *((_QWORD *)v187 - 1) = v188;
                        v187 -= 8;
                      }
                      while (v159 != (char *)ULEB128);
                      v159 = (char *)__p;
                    }
                    __p = v187;
                    v554 = v173 + 8 * v174;
                    if (v159)
                      operator delete(v159);
                  }
                  else
                  {
                    *(_QWORD *)v553 = v155;
                    v160 = v159 + 8;
                  }
                  v553 = v160;
                  goto LABEL_251;
                case 3:
                  v161 = v562;
                  if ((unint64_t)v562 >= v563)
                  {
                    ULEB128 = (unint64_t)v561;
                    v175 = (v562 - (_BYTE *)v561) >> 3;
                    v176 = v175 + 1;
                    if ((unint64_t)(v175 + 1) >> 61)
                      goto LABEL_773;
                    v177 = v563 - (_QWORD)v561;
                    if ((uint64_t)(v563 - (_QWORD)v561) >> 2 > v176)
                      v176 = v177 >> 2;
                    if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8)
                      v178 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v178 = v176;
                    if (v178)
                      v178 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v178);
                    else
                      v179 = 0;
                    v189 = (char *)(v178 + 8 * v175);
                    *(_QWORD *)v189 = v155;
                    v162 = v189 + 8;
                    if (v161 != (char *)ULEB128)
                    {
                      do
                      {
                        v190 = *((_QWORD *)v161 - 1);
                        v161 -= 8;
                        *((_QWORD *)v189 - 1) = v190;
                        v189 -= 8;
                      }
                      while (v161 != (char *)ULEB128);
                      v161 = (char *)v561;
                    }
                    v561 = v189;
                    v563 = v178 + 8 * v179;
                    if (v161)
                      operator delete(v161);
                  }
                  else
                  {
                    *(_QWORD *)v562 = v155;
                    v162 = v161 + 8;
                  }
                  v562 = v162;
                  goto LABEL_251;
                case 4:
                  v163 = v556;
                  if ((unint64_t)v556 >= v557)
                  {
                    ULEB128 = (unint64_t)v555;
                    v180 = (v556 - (_BYTE *)v555) >> 3;
                    v181 = v180 + 1;
                    if ((unint64_t)(v180 + 1) >> 61)
                      goto LABEL_773;
                    v182 = v557 - (_QWORD)v555;
                    if ((uint64_t)(v557 - (_QWORD)v555) >> 2 > v181)
                      v181 = v182 >> 2;
                    if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
                      v183 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v183 = v181;
                    if (v183)
                      v183 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v183);
                    else
                      v184 = 0;
                    v191 = (char *)(v183 + 8 * v180);
                    *(_QWORD *)v191 = v155;
                    v164 = v191 + 8;
                    if (v163 != (char *)ULEB128)
                    {
                      do
                      {
                        v192 = *((_QWORD *)v163 - 1);
                        v163 -= 8;
                        *((_QWORD *)v191 - 1) = v192;
                        v191 -= 8;
                      }
                      while (v163 != (char *)ULEB128);
                      v163 = (char *)v555;
                    }
                    v555 = v191;
                    v557 = v183 + 8 * v184;
                    if (v163)
                      operator delete(v163);
                  }
                  else
                  {
                    *(_QWORD *)v556 = v155;
                    v164 = v163 + 8;
                  }
                  v556 = v164;
LABEL_251:
                  v155 += 72;
                  if (v155 != v156)
                    continue;
LABEL_252:
                  if (!v521)
                  {
LABEL_340:
                    v8 = a1;
                    *a1 = 0;
                    v7 = (_QWORD *)a2;
                    goto LABEL_365;
                  }
                  break;
                default:
                  goto LABEL_251;
              }
              break;
            }
            while (2)
            {
              v193 = *(unsigned __int8 **)(v6 + 8);
              if (v193 == *(unsigned __int8 **)(v6 + 16))
                goto LABEL_775;
              *(_QWORD *)(v6 + 8) = v193 + 1;
              v194 = (const char *)*v193;
              v195 = readVaruint32(v6);
              v196 = v195;
              v197 = v195 & 0x10;
              switch((int)v194)
              {
                case 0:
                  v198 = readVaruint32(v6);
                  v199 = *(unsigned int *)(a2 + 680);
                  v527 = v198;
                  if (v199 + ((uint64_t)(*(_QWORD *)(a2 + 520) - *(_QWORD *)(a2 + 512)) >> 7) <= (unint64_t)v198
                    || ((v197 >> 4) ^ 1) != v199 <= v198)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid function symbol index", (unsigned int *)&v574);
                    goto LABEL_364;
                  }
                  if (v197)
                  {
                    v232 = v198;
                    v233 = v558;
                    goto LABEL_289;
                  }
                  v200 = readString(v6);
                  v202 = (void *)v200;
                  v524 = v201;
                  v203 = *(_QWORD *)(a2 + 512) + ((unint64_t)(v527 - *(_DWORD *)(a2 + 680)) << 7);
                  v204 = *(_QWORD *)(a2 + 280) + ((unint64_t)*(unsigned int *)(v203 + 4) << 6);
                  if (*(_QWORD *)(v203 + 96))
                    goto LABEL_275;
                  v205 = 0;
                  v206 = 0;
                  v207 = 0;
                  v208 = 0;
                  v209 = 0;
                  v520 = 0;
                  *(_QWORD *)(v203 + 88) = v200;
                  *(_QWORD *)(v203 + 96) = v201;
                  goto LABEL_301;
                case 1:
                  v202 = (void *)readString(v6);
                  v524 = v210;
                  if (v197)
                    goto LABEL_263;
                  v527 = readVaruint32(v6);
                  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a2 + 480) - *(_QWORD *)(a2 + 472)) >> 3) <= (unint64_t)v527)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid data symbol index", (unsigned int *)&v574);
                    goto LABEL_364;
                  }
                  ULEB128 = readULEB128(v6);
                  v546 = ULEB128;
                  v517 = readULEB128(v6);
                  v545 = *(_QWORD *)(*(_QWORD *)(a2 + 472) + 104 * v527 + 64);
                  if (ULEB128 > v545)
                  {
                    v536 = 1283;
                    __src[2] = v202;
                    __src[3] = v524;
                    v537.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
                    v538 = 770;
                    v539[0] = &v537;
                    v540 = (unint64_t)&v546;
                    v541 = 3074;
                    *(_QWORD *)__dst = v539;
                    *(_QWORD *)&__dst[16] = " segment size: ";
                    v544 = 770;
                    *(_QWORD *)&v568 = __dst;
                    v569[0] = &v545;
                    v570 = 2562;
                    v574 = &v568;
                    v576 = (unint64_t)")";
                    v578 = 770;
LABEL_362:
                    v302 = operator new();
                    goto LABEL_363;
                  }
LABEL_263:
                  v205 = 0;
                  v206 = 0;
                  v207 = 0;
                  v208 = 0;
                  v204 = 0;
LABEL_276:
                  v209 = 0;
                  goto LABEL_277;
                case 2:
                  v211 = readVaruint32(v6);
                  v212 = *(unsigned int *)(a2 + 672);
                  v527 = v211;
                  if (v212 + ((uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 6) <= (unint64_t)v211
                    || ((v197 >> 4) ^ 1) != v212 <= v211)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    v299 = a1;
                    v300 = "invalid global symbol index";
LABEL_351:
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v299, (llvm::formatv_object_base *)v300, (unsigned int *)&v574);
                    goto LABEL_364;
                  }
                  if (v197)
                  {
                    if ((v196 & 3) == 1)
                      goto LABEL_359;
                    v234 = (char *)*((_QWORD *)v561 + v211);
                    if ((v196 & 0x40) != 0)
                    {
                      v202 = (void *)readString(a5);
                      v524 = v239;
                      v235 = v234[16];
                      v566[0] = *(_QWORD *)(v234 + 17);
                      *(_QWORD *)((char *)v566 + 7) = *((_QWORD *)v234 + 3);
                      v205 = 1;
                    }
                    else
                    {
                      v205 = 0;
                      v235 = 0;
                      v202 = (void *)*((_QWORD *)v234 + 2);
                      v524 = (void *)*((_QWORD *)v234 + 3);
                    }
                    v204 = 0;
                    v520 = 0;
                    v209 = (unint64_t)(v234 + 40);
                    goto LABEL_300;
                  }
                  v213 = readString(v6);
                  v202 = (void *)v213;
                  v524 = v214;
                  v215 = *(_QWORD *)(a2 + 352) + ((unint64_t)(v527 - *(_DWORD *)(a2 + 672)) << 6);
                  v209 = v215 + 4;
                  if (*(_QWORD *)(v215 + 56))
                  {
                    v205 = 0;
                    v206 = 0;
                    v207 = 0;
                    v208 = 0;
                    v204 = 0;
LABEL_277:
                    v520 = 0;
                  }
                  else
                  {
                    v205 = 0;
                    v206 = 0;
                    v207 = 0;
                    v208 = 0;
                    v204 = 0;
                    v520 = 0;
                    *(_QWORD *)(v215 + 48) = v213;
                    *(_QWORD *)(v215 + 56) = v214;
                  }
                  goto LABEL_301;
                case 3:
                  if ((v195 & 3) == 2)
                  {
                    v216 = readVaruint32(v6);
                    v205 = 0;
                    v206 = 0;
                    v207 = 0;
                    v208 = 0;
                    v204 = 0;
                    v209 = 0;
                    v520 = 0;
                    v527 = v216;
                    v217 = *(_QWORD *)(a2 + 72) + 72 * v216;
                    v202 = *(void **)(v217 + 8);
                    v524 = *(void **)(v217 + 16);
LABEL_301:
                    if ((v196 & 3) != 2)
                    {
                      v241 = (uint64_t *)v202;
                      v242 = v202;
                      v243 = v207;
                      v244 = v196;
                      v245 = ULEB128;
                      v246 = v205;
                      v247 = v209;
                      v248 = v208;
                      llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)v564, v241, (unint64_t)v524);
                      v208 = v248;
                      v209 = v247;
                      v205 = v246;
                      ULEB128 = v245;
                      v196 = v244;
                      v207 = v243;
                      v202 = v242;
                      if ((v249 & 1) == 0)
                      {
                        v574 = "duplicate symbol name ";
                        v576 = (unint64_t)v242;
                        v577 = (unint64_t)v524;
                        v578 = 1283;
                        v295 = operator new();
                        v8 = a1;
                        *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v295, (llvm::formatv_object_base **)&v574, 3u);
                        v6 = a5;
                        goto LABEL_364;
                      }
                    }
                    v519 = v204;
                    v250 = *(_QWORD *)(a2 + 656);
                    v251 = *(_QWORD *)(a2 + 664);
                    if (v250 >= v251)
                    {
                      v515 = ULEB128;
                      v254 = *(_QWORD *)(a2 + 648);
                      v255 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v250 - v254) >> 3);
                      v256 = v255 + 1;
                      if (v255 + 1 > 0x222222222222222)
                        goto LABEL_773;
                      v257 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v251 - v254) >> 3);
                      if (2 * v257 > v256)
                        v256 = 2 * v257;
                      if (v257 >= 0x111111111111111)
                        v258 = 0x222222222222222;
                      else
                        v258 = v256;
                      if (v258)
                      {
                        v259 = v196;
                        v260 = v205;
                        v261 = v208;
                        v258 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSymbolInfo>>(v258);
                        v208 = v261;
                        v205 = v260;
                        v196 = v259;
                      }
                      else
                      {
                        v262 = 0;
                      }
                      v263 = v258 + 120 * v255;
                      *(_QWORD *)v263 = v202;
                      *(_QWORD *)(v263 + 8) = v524;
                      *(_BYTE *)(v263 + 16) = (_BYTE)v194;
                      *(_WORD *)(v263 + 17) = v550;
                      *(_BYTE *)(v263 + 19) = v551;
                      *(_DWORD *)(v263 + 20) = v196;
                      *(_BYTE *)(v263 + 24) = v208;
                      *(_QWORD *)(v263 + 25) = v567[0];
                      *(_QWORD *)(v263 + 32) = *(_QWORD *)((char *)v567 + 7);
                      *(_BYTE *)(v263 + 40) = v207;
                      *(_DWORD *)(v263 + 44) = *(_DWORD *)&v549[3];
                      *(_DWORD *)(v263 + 41) = *(_DWORD *)v549;
                      *(_BYTE *)(v263 + 48) = v206;
                      *(_QWORD *)(v263 + 49) = v566[0];
                      *(_QWORD *)(v263 + 56) = *(_QWORD *)((char *)v566 + 7);
                      *(_BYTE *)(v263 + 64) = v205;
                      *(_DWORD *)(v263 + 65) = *(_DWORD *)v548;
                      *(_DWORD *)(v263 + 68) = *(_DWORD *)&v548[3];
                      *(_BYTE *)(v263 + 72) = 0;
                      *(_QWORD *)(v263 + 73) = *(_QWORD *)v565;
                      *(_QWORD *)(v263 + 80) = *(_QWORD *)&v565[7];
                      *(_BYTE *)(v263 + 88) = 0;
                      v264 = *(_DWORD *)v547;
                      *(_DWORD *)(v263 + 92) = *(_DWORD *)&v547[3];
                      *(_DWORD *)(v263 + 89) = v264;
                      *(_DWORD *)(v263 + 96) = v527;
                      ULEB128 = v515;
                      *(_QWORD *)(v263 + 104) = v515;
                      *(_QWORD *)(v263 + 112) = v517;
                      v265 = *(char **)(a2 + 656);
                      v266 = *(char **)(a2 + 648);
                      v267 = v263;
                      if (v265 == v266)
                      {
                        v274 = (_QWORD *)a2;
                        v6 = a5;
                      }
                      else
                      {
                        v6 = a5;
                        do
                        {
                          v268 = *(_OWORD *)(v265 - 120);
                          v269 = *(_OWORD *)(v265 - 104);
                          v270 = *(_OWORD *)(v265 - 88);
                          *(_OWORD *)(v267 - 72) = *(_OWORD *)(v265 - 72);
                          *(_OWORD *)(v267 - 88) = v270;
                          *(_OWORD *)(v267 - 104) = v269;
                          *(_OWORD *)(v267 - 120) = v268;
                          v271 = *(_OWORD *)(v265 - 56);
                          v272 = *(_OWORD *)(v265 - 40);
                          v273 = *(_OWORD *)(v265 - 24);
                          *(_QWORD *)(v267 - 8) = *((_QWORD *)v265 - 1);
                          *(_OWORD *)(v267 - 24) = v273;
                          *(_OWORD *)(v267 - 40) = v272;
                          *(_OWORD *)(v267 - 56) = v271;
                          v267 -= 120;
                          v265 -= 120;
                        }
                        while (v265 != v266);
                        v274 = (_QWORD *)a2;
                        v265 = *(char **)(a2 + 648);
                      }
                      v274[81] = v267;
                      v253 = v263 + 120;
                      v274[82] = v263 + 120;
                      v274[83] = v258 + 120 * v262;
                      if (v265)
                        operator delete(v265);
                    }
                    else
                    {
                      *(_QWORD *)v250 = v202;
                      *(_QWORD *)(v250 + 8) = v524;
                      *(_BYTE *)(v250 + 16) = (_BYTE)v194;
                      *(_WORD *)(v250 + 17) = v550;
                      *(_BYTE *)(v250 + 19) = v551;
                      *(_DWORD *)(v250 + 20) = v196;
                      *(_BYTE *)(v250 + 24) = v208;
                      *(_QWORD *)(v250 + 25) = v567[0];
                      *(_QWORD *)(v250 + 32) = *(_QWORD *)((char *)v567 + 7);
                      *(_BYTE *)(v250 + 40) = v207;
                      *(_DWORD *)(v250 + 44) = *(_DWORD *)&v549[3];
                      *(_DWORD *)(v250 + 41) = *(_DWORD *)v549;
                      *(_BYTE *)(v250 + 48) = v206;
                      *(_QWORD *)(v250 + 49) = v566[0];
                      *(_QWORD *)(v250 + 56) = *(_QWORD *)((char *)v566 + 7);
                      *(_BYTE *)(v250 + 64) = v205;
                      *(_DWORD *)(v250 + 65) = *(_DWORD *)v548;
                      *(_DWORD *)(v250 + 68) = *(_DWORD *)&v548[3];
                      *(_BYTE *)(v250 + 72) = 0;
                      *(_QWORD *)(v250 + 73) = *(_QWORD *)v565;
                      *(_QWORD *)(v250 + 80) = *(_QWORD *)&v565[7];
                      *(_BYTE *)(v250 + 88) = 0;
                      v252 = *(_DWORD *)v547;
                      *(_DWORD *)(v250 + 92) = *(_DWORD *)&v547[3];
                      *(_DWORD *)(v250 + 89) = v252;
                      *(_DWORD *)(v250 + 96) = v527;
                      v253 = v250 + 120;
                      *(_QWORD *)(v250 + 104) = ULEB128;
                      *(_QWORD *)(v250 + 112) = v517;
                      v6 = a5;
                    }
                    *(_QWORD *)(a2 + 656) = v253;
                    v275 = v253 - 120;
                    v276 = *(unint64_t **)(a2 + 544);
                    v277 = *(_QWORD *)(a2 + 552);
                    if ((unint64_t)v276 >= v277)
                    {
                      v279 = v209;
                      v280 = *(_QWORD *)(a2 + 536);
                      v281 = ((uint64_t)v276 - v280) >> 5;
                      v282 = v281 + 1;
                      if ((unint64_t)(v281 + 1) >> 59)
                        goto LABEL_773;
                      v283 = v277 - v280;
                      if (v283 >> 4 > v282)
                        v282 = v283 >> 4;
                      if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFE0)
                        v284 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v284 = v282;
                      v285 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(v284);
                      v287 = &v285[32 * v281];
                      *(_QWORD *)v287 = v275;
                      *((_QWORD *)v287 + 1) = v279;
                      *((_QWORD *)v287 + 2) = v520;
                      *((_QWORD *)v287 + 3) = v519;
                      v288 = *(char **)(a2 + 544);
                      v289 = *(char **)(a2 + 536);
                      v290 = v287;
                      if (v288 == v289)
                      {
                        v292 = (_QWORD *)a2;
                      }
                      else
                      {
                        do
                        {
                          v291 = *((_OWORD *)v288 - 1);
                          *((_OWORD *)v290 - 2) = *((_OWORD *)v288 - 2);
                          *((_OWORD *)v290 - 1) = v291;
                          v290 -= 32;
                          v288 -= 32;
                        }
                        while (v288 != v289);
                        v292 = (_QWORD *)a2;
                        v288 = *(char **)(a2 + 536);
                      }
                      v292[67] = v290;
                      v278 = v287 + 32;
                      v292[68] = v287 + 32;
                      v292[69] = &v285[32 * v286];
                      if (v288)
                        operator delete(v288);
                    }
                    else
                    {
                      *v276 = v275;
                      v276[1] = v209;
                      v278 = v276 + 4;
                      v276[2] = (unint64_t)v520;
                      v276[3] = v519;
                    }
                    *(_QWORD *)(a2 + 544) = v278;
                    if (!--v521)
                      goto LABEL_340;
                    continue;
                  }
                  v302 = operator new();
                  v574 = "section symbols must have local binding";
                  v578 = 259;
LABEL_363:
                  v8 = a1;
                  *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v302, (llvm::formatv_object_base **)&v574, 3u);
LABEL_364:
                  v7 = (_QWORD *)a2;
LABEL_365:
                  if (__p)
                    operator delete(__p);
                  if (v555)
                    operator delete(v555);
                  if (v558)
                    operator delete(v558);
                  if (v561)
                    operator delete(v561);
                  v301 = (__int128 *)v564;
LABEL_374:
                  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)v301);
                  if (*v8)
                    return;
LABEL_375:
                  v62 = *(unsigned __int8 **)(v6 + 8);
                  v63 = v513;
                  if (v62 != *(unsigned __int8 **)(v6 + 16))
                  {
                    LODWORD(v574) = 3;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)"linking sub-section ended prematurely", (unsigned int *)&v574);
                    goto LABEL_765;
                  }
                  break;
                case 4:
                  v218 = readVaruint32(v6);
                  v219 = *(unsigned int *)(a2 + 684);
                  v527 = v218;
                  if (v219 - 0x5555555555555555 * ((uint64_t)(*(_QWORD *)(a2 + 384) - *(_QWORD *)(a2 + 376)) >> 3) <= (unint64_t)v218
                    || ((v197 >> 4) ^ 1) != v219 <= v218)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid tag symbol index", (unsigned int *)&v574);
                    goto LABEL_364;
                  }
                  if (v197)
                  {
                    if ((v196 & 3) == 1)
                    {
LABEL_359:
                      LODWORD(v574) = 3;
                      v8 = a1;
                      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"undefined weak global symbol", (unsigned int *)&v574);
                      goto LABEL_364;
                    }
                    v232 = v218;
                    v233 = v555;
LABEL_289:
                    v236 = (char *)v233[v232];
                    if ((v196 & 0x40) != 0)
                    {
                      v202 = (void *)readString(a5);
                      v524 = v238;
                      v237 = v236[16];
                      v566[0] = *(_QWORD *)(v236 + 17);
                      *(_QWORD *)((char *)v566 + 7) = *((_QWORD *)v236 + 3);
                      v205 = 1;
                    }
                    else
                    {
                      v205 = 0;
                      v237 = 0;
                      v202 = (void *)*((_QWORD *)v236 + 2);
                      v524 = (void *)*((_QWORD *)v236 + 3);
                    }
                    v209 = 0;
                    v520 = 0;
                    v204 = *(_QWORD *)(a2 + 280) + ((unint64_t)*((unsigned int *)v236 + 10) << 6);
                    v208 = *v236;
                    v567[0] = *(_QWORD *)(v236 + 1);
                    *(_QWORD *)((char *)v567 + 7) = *((_QWORD *)v236 + 1);
                    v207 = 1;
                    v206 = v237;
                  }
                  else
                  {
                    v220 = readString(v6);
                    v202 = (void *)v220;
                    v524 = v221;
                    v222 = v527 - *(_DWORD *)(a2 + 684);
                    v223 = *(_QWORD *)(a2 + 376);
                    v224 = v223 + 24 * v222;
                    v204 = *(_QWORD *)(a2 + 280) + ((unint64_t)*(unsigned int *)(v224 + 4) << 6);
                    if (*(_QWORD *)(v224 + 16))
                    {
LABEL_275:
                      v205 = 0;
                      v206 = 0;
                      v207 = 0;
                      v208 = 0;
                      goto LABEL_276;
                    }
                    v205 = 0;
                    v206 = 0;
                    v207 = 0;
                    v208 = 0;
                    v209 = 0;
                    v520 = 0;
                    v293 = v223 + 24 * v222;
                    *(_QWORD *)(v293 + 8) = v220;
                    *(_QWORD *)(v293 + 16) = v221;
                  }
                  goto LABEL_301;
                case 5:
                  v225 = readVaruint32(v6);
                  v226 = *(unsigned int *)(a2 + 676);
                  v527 = v225;
                  if (v226 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3) <= (unint64_t)v225
                    || ((v197 >> 4) ^ 1) != v226 <= v225)
                  {
                    LODWORD(v574) = 3;
                    v8 = a1;
                    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid table symbol index", (unsigned int *)&v574);
                    goto LABEL_364;
                  }
                  if (v197)
                  {
                    if ((v196 & 3) == 1)
                    {
                      LODWORD(v574) = 3;
                      v8 = a1;
                      v299 = a1;
                      v300 = "undefined weak table symbol";
                      goto LABEL_351;
                    }
                    v234 = (char *)*((_QWORD *)__p + v225);
                    if ((v196 & 0x40) != 0)
                    {
                      v202 = (void *)readString(a5);
                      v524 = v240;
                      v235 = v234[16];
                      v566[0] = *(_QWORD *)(v234 + 17);
                      *(_QWORD *)((char *)v566 + 7) = *((_QWORD *)v234 + 3);
                      v205 = 1;
                    }
                    else
                    {
                      v205 = 0;
                      v235 = 0;
                      v202 = (void *)*((_QWORD *)v234 + 2);
                      v524 = (void *)*((_QWORD *)v234 + 3);
                    }
                    v204 = 0;
                    v209 = 0;
                    v520 = v234 + 40;
LABEL_300:
                    v208 = *v234;
                    v567[0] = *(_QWORD *)(v234 + 1);
                    *(_QWORD *)((char *)v567 + 7) = *((_QWORD *)v234 + 1);
                    v207 = 1;
                    v206 = v235;
                  }
                  else
                  {
                    v227 = readString(v6);
                    v202 = (void *)v227;
                    v524 = v228;
                    v229 = v527 - *(_DWORD *)(a2 + 676);
                    v230 = *(_QWORD *)(a2 + 304);
                    v231 = v230 + 56 * v229;
                    v520 = (char *)(v231 + 8);
                    v205 = 0;
                    v206 = 0;
                    v207 = 0;
                    v208 = 0;
                    v204 = 0;
                    v209 = 0;
                    if (!*(_QWORD *)(v231 + 48))
                    {
                      v294 = v230 + 56 * v229;
                      *(_QWORD *)(v294 + 40) = v227;
                      *(_QWORD *)(v294 + 48) = v228;
                    }
                  }
                  goto LABEL_301;
                default:
                  v574 = "invalid symbol type: ";
                  v576 = (unint64_t)v194;
                  v578 = 2051;
                  goto LABEL_362;
              }
              goto LABEL_91;
            }
          default:
            *(_QWORD *)(v6 + 8) = v65;
            goto LABEL_375;
        }
      }
      if (v62 == v63)
        goto LABEL_766;
      LODWORD(v574) = 3;
      v508 = "linking section ended prematurely";
      goto LABEL_759;
    case 8uLL:
      if (*(_QWORD *)a3 != 0x302E6B6E696C7964)
        goto LABEL_560;
      *(_BYTE *)(a2 + 589) = 1;
      v303 = *(unsigned __int8 **)(a5 + 8);
      v304 = *(unsigned __int8 **)(a5 + 16);
      if (v303 < v304)
      {
        v529 = a2 + 128;
        v525 = *(_QWORD *)(a5 + 16);
        while (1)
        {
          *(_QWORD *)(v6 + 8) = v303 + 1;
          *(_QWORD *)(v6 + 16) = v304;
          v305 = *v303;
          v306 = *(_QWORD *)(v6 + 8) + readVaruint32(v6);
          *(_QWORD *)(v6 + 16) = v306;
          switch(v305)
          {
            case 1:
              *((_DWORD *)v7 + 24) = readVaruint32(v6);
              *((_DWORD *)v7 + 25) = readVaruint32(v6);
              *((_DWORD *)v7 + 26) = readVaruint32(v6);
              *((_DWORD *)v7 + 27) = readVaruint32(v6);
              goto LABEL_449;
            case 2:
              v307 = readVaruint32(v6);
              if (!v307)
                goto LABEL_449;
              v308 = v307;
              do
              {
                v309 = readString(v6);
                v311 = v309;
                v312 = v310;
                v314 = (uint64_t *)v7[15];
                v313 = v7[16];
                if ((unint64_t)v314 >= v313)
                {
                  v316 = v7[14];
                  v317 = ((uint64_t)v314 - v316) >> 4;
                  v318 = v317 + 1;
                  if ((unint64_t)(v317 + 1) >> 60)
                    goto LABEL_773;
                  v319 = v313 - v316;
                  if (v319 >> 3 > v318)
                    v318 = v319 >> 3;
                  if ((unint64_t)v319 >= 0x7FFFFFFFFFFFFFF0)
                    v320 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v320 = v318;
                  if (v320)
                    v321 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v529, v320);
                  else
                    v321 = 0;
                  v322 = (uint64_t *)&v321[16 * v317];
                  *v322 = v311;
                  v322[1] = v312;
                  v324 = (char *)v7[14];
                  v323 = (char *)v7[15];
                  v325 = v322;
                  if (v323 != v324)
                  {
                    do
                    {
                      *((_OWORD *)v325 - 1) = *((_OWORD *)v323 - 1);
                      v325 -= 2;
                      v323 -= 16;
                    }
                    while (v323 != v324);
                    v323 = (char *)v7[14];
                  }
                  v315 = v322 + 2;
                  v7[14] = v325;
                  v7[15] = v322 + 2;
                  v7[16] = &v321[16 * v320];
                  if (v323)
                    operator delete(v323);
                }
                else
                {
                  *v314 = v309;
                  v314[1] = v310;
                  v315 = v314 + 2;
                }
                v7[15] = v315;
                --v308;
              }
              while (v308);
              goto LABEL_449;
            case 3:
              v326 = readVaruint32(v6);
              if (!v326)
                goto LABEL_449;
              v327 = v326;
              do
              {
                v328 = readString(v6);
                v330 = v329;
                v331 = readVaruint32(v6);
                v332 = v331;
                v334 = (uint64_t *)v7[21];
                v333 = v7[22];
                if ((unint64_t)v334 >= v333)
                {
                  v336 = (_QWORD *)v7[20];
                  v337 = 0xAAAAAAAAAAAAAAABLL * (v334 - v336) + 1;
                  if (v337 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_773;
                  v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v333 - (_QWORD)v336) >> 3);
                  if (2 * v338 > v337)
                    v337 = 2 * v338;
                  if (v338 >= 0x555555555555555)
                    v339 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v339 = v337;
                  if (v339)
                  {
                    if (v339 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_774;
                    v340 = (char *)operator new(24 * v339);
                  }
                  else
                  {
                    v340 = 0;
                  }
                  v341 = &v340[8 * (v334 - v336)];
                  *(_QWORD *)v341 = v328;
                  *((_QWORD *)v341 + 1) = v330;
                  *((_DWORD *)v341 + 4) = v332;
                  v342 = v341;
                  if (v334 == v336)
                  {
                    v6 = a5;
                  }
                  else
                  {
                    v6 = a5;
                    do
                    {
                      v343 = *(_OWORD *)(v334 - 3);
                      *((_DWORD *)v342 - 2) = *((_DWORD *)v334 - 2);
                      *(_OWORD *)(v342 - 24) = v343;
                      v342 -= 24;
                      v334 -= 3;
                    }
                    while (v334 != v336);
                    v334 = (uint64_t *)v7[20];
                  }
                  v335 = v341 + 24;
                  v7[20] = v342;
                  v7[21] = v341 + 24;
                  v7[22] = &v340[24 * v339];
                  if (v334)
                    operator delete(v334);
                }
                else
                {
                  *v334 = v328;
                  v334[1] = v330;
                  v335 = v334 + 3;
                  *((_DWORD *)v334 + 4) = v331;
                  v6 = a5;
                }
                v7[21] = v335;
                --v327;
              }
              while (v327);
              goto LABEL_449;
            case 4:
              v344 = readVaruint32(v6);
              if (!v344)
                goto LABEL_449;
              v345 = v344;
              break;
            default:
              *(_QWORD *)(v6 + 8) = v306;
              goto LABEL_449;
          }
          do
          {
            v346 = v6;
            v347 = readString(v6);
            v349 = v348;
            v350 = readString(v346);
            v351 = v7;
            v353 = v352;
            v354 = readVaruint32(v346);
            v355 = v354;
            v357 = (uint64_t *)v351[18];
            v356 = v351[19];
            if ((unint64_t)v357 >= v356)
            {
              v359 = (_QWORD *)v351[17];
              v360 = 0xCCCCCCCCCCCCCCCDLL * (v357 - v359) + 1;
              if (v360 > 0x666666666666666)
                goto LABEL_773;
              v361 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v356 - (_QWORD)v359) >> 3);
              if (2 * v361 > v360)
                v360 = 2 * v361;
              if (v361 >= 0x333333333333333)
                v362 = 0x666666666666666;
              else
                v362 = v360;
              if (v362)
              {
                if (v362 > 0x666666666666666)
                  goto LABEL_774;
                v363 = (char *)operator new(40 * v362);
              }
              else
              {
                v363 = 0;
              }
              v364 = &v363[8 * (v357 - v359)];
              *(_QWORD *)v364 = v347;
              *((_QWORD *)v364 + 1) = v349;
              *((_QWORD *)v364 + 2) = v350;
              *((_QWORD *)v364 + 3) = v353;
              *((_DWORD *)v364 + 8) = v355;
              v365 = v364;
              if (v357 == v359)
              {
                v7 = (_QWORD *)a2;
                v6 = a5;
              }
              else
              {
                v7 = (_QWORD *)a2;
                v6 = a5;
                do
                {
                  v366 = *(_OWORD *)(v357 - 5);
                  v367 = *(_OWORD *)(v357 - 3);
                  *((_DWORD *)v365 - 2) = *((_DWORD *)v357 - 2);
                  *(_OWORD *)(v365 - 24) = v367;
                  *(_OWORD *)(v365 - 40) = v366;
                  v365 -= 40;
                  v357 -= 5;
                }
                while (v357 != v359);
                v357 = *(uint64_t **)(a2 + 136);
              }
              v358 = v364 + 40;
              v7[17] = v365;
              v7[18] = v364 + 40;
              v7[19] = &v363[40 * v362];
              if (v357)
                operator delete(v357);
            }
            else
            {
              *v357 = v347;
              v357[1] = v349;
              v357[2] = v350;
              v357[3] = v353;
              v358 = v357 + 5;
              *((_DWORD *)v357 + 8) = v354;
              v6 = a5;
              v7 = v351;
            }
            v7[18] = v358;
            --v345;
          }
          while (v345);
LABEL_449:
          v303 = *(unsigned __int8 **)(v6 + 8);
          if (v303 != *(unsigned __int8 **)(v6 + 16))
            break;
          v304 = (unsigned __int8 *)v525;
          v8 = a1;
          if ((unint64_t)v303 >= v525)
            goto LABEL_766;
        }
        v502 = operator new();
        v574 = "dylink.0 sub-section ended prematurely";
        v578 = 259;
LABEL_726:
        *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v502, (llvm::formatv_object_base **)&v574, 3u);
        return;
      }
      if (v303 == v304)
        goto LABEL_766;
      LODWORD(v574) = 3;
      llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"dylink.0 section ended prematurely", (unsigned int *)&v574);
      goto LABEL_765;
    case 9uLL:
      if (*(_QWORD *)a3 != 0x72656375646F7270 || *(_BYTE *)(a3 + 8) != 115)
        goto LABEL_560;
      *(_QWORD *)&v568 = v569;
      *((_QWORD *)&v568 + 1) = 0x300000000;
      v573 = 0;
      v572 = 0;
      v571 = (uint64_t *)&v572;
      v369 = readVaruint32(a5);
      if (!v369)
        goto LABEL_554;
      v370 = 0;
      v516 = (char **)(v7 + 29);
      v518 = v369;
      v512 = (char **)(v7 + 26);
      v514 = (char **)(v7 + 23);
      do
      {
        v522 = v370;
        v371 = readString(v6);
        v537.__r_.__value_.__r.__words[0] = v371;
        v537.__r_.__value_.__l.__size_ = v372;
        if (v573)
        {
          std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v571, (__int128 *)&v537, &v537);
          if (!v373)
            goto LABEL_748;
        }
        else
        {
          v374 = (const void *)v371;
          v375 = v372;
          v376 = DWORD2(v568);
          if (!DWORD2(v568))
            goto LABEL_471;
          v377 = 16 * DWORD2(v568);
          v378 = (_QWORD *)(v568 + 8);
          while (*v378 != v375 || v375 && memcmp((const void *)*(v378 - 1), v374, v375))
          {
            v378 += 2;
            v377 -= 16;
            if (!v377)
              goto LABEL_470;
          }
          if (v377)
          {
LABEL_748:
            v417 = operator new();
            v418 = "producers section does not have unique fields";
LABEL_749:
            v574 = v418;
            v578 = 259;
            v507 = llvm::object::GenericBinaryError::GenericBinaryError(v417, (llvm::formatv_object_base **)&v574, 3u);
            goto LABEL_750;
          }
LABEL_470:
          if (v376 >= 3)
          {
            do
            {
              std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v571, (__int128 *)(v568 + 16 * v376 - 16), (_OWORD *)(v568 + 16 * v376 - 16));
              v376 = --DWORD2(v568);
            }
            while (DWORD2(v568));
            std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v571, (__int128 *)&v537, &v537);
          }
          else
          {
LABEL_471:
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v568, (uint64_t)v374, v375);
          }
        }
        if (v537.__r_.__value_.__l.__size_ == 3)
        {
          v380 = *(_WORD *)v537.__r_.__value_.__l.__data_ == 25715
              && *(_BYTE *)(v537.__r_.__value_.__r.__words[0] + 2) == 107;
          v379 = v516;
        }
        else
        {
          if (v537.__r_.__value_.__l.__size_ != 12)
          {
            if (v537.__r_.__value_.__l.__size_ != 8
              || (v379 = v514, *(_QWORD *)v537.__r_.__value_.__l.__data_ != 0x65676175676E616CLL))
            {
LABEL_736:
              v506 = operator new();
              v574 = "producers section field is not named one of language, processed-by, or sdk";
              v578 = 259;
              v507 = llvm::object::GenericBinaryError::GenericBinaryError(v506, (llvm::formatv_object_base **)&v574, 3u);
              v8 = a1;
LABEL_750:
              *v8 = v507;
              goto LABEL_751;
            }
            goto LABEL_489;
          }
          v380 = *(_QWORD *)v537.__r_.__value_.__l.__data_ == 0x65737365636F7270
              && *(_DWORD *)(v537.__r_.__value_.__r.__words[0] + 8) == 2036477284;
          v379 = v512;
        }
        if (!v380)
          goto LABEL_736;
LABEL_489:
        v381 = readVaruint32(v6);
        v574 = &v576;
        v575 = 0x800000000;
        v580 = 0;
        v581 = 0;
        v579 = (uint64_t *)&v580;
        if (!v381)
        {
LABEL_548:
          v383 = 0;
          v8 = a1;
          goto LABEL_550;
        }
        v382 = 0;
        v530 = v381;
        v383 = 1;
        while (1)
        {
          __src[0] = (void *)readString(v6);
          __src[1] = v384;
          v385 = (const void *)readString(v6);
          v387 = v386;
          if (v581)
          {
            std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v579, (__int128 *)__src, __src);
            if (!v388)
              break;
            goto LABEL_506;
          }
          v389 = v575;
          v390 = __src[0];
          v391 = __src[1];
          if (!(_DWORD)v575)
            goto LABEL_503;
          v392 = 16 * v575;
          v393 = (void **)((char *)v574 + 8);
          while (*v393 != v391 || v391 && memcmp(*(v393 - 1), v390, (size_t)v391))
          {
            v393 += 2;
            v392 -= 16;
            if (!v392)
              goto LABEL_502;
          }
          if (v392)
            break;
LABEL_502:
          if (v389 < 8)
          {
LABEL_503:
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v574, (uint64_t)v390, (uint64_t)v391);
            goto LABEL_506;
          }
          do
          {
            std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v579, (__int128 *)v574 + v389 - 1, (_OWORD *)v574 + v389 - 1);
            v389 = v575 - 1;
            LODWORD(v575) = v575 - 1;
          }
          while ((_DWORD)v575);
          std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(&v579, (__int128 *)__src, __src);
LABEL_506:
          v394 = __src[1];
          if (__src[1] > (void *)0x7FFFFFFFFFFFFFF7)
            goto LABEL_773;
          v395 = __src[0];
          if (__src[1] >= (void *)0x17)
          {
            v397 = ((unint64_t)__src[1] & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)__src[1] | 7) != 0x17)
              v397 = (unint64_t)__src[1] | 7;
            v398 = v397 + 1;
            v396 = operator new(v397 + 1);
            *(_QWORD *)&__dst[8] = v394;
            *(_QWORD *)&__dst[16] = v398 | 0x8000000000000000;
            *(_QWORD *)__dst = v396;
LABEL_513:
            memmove(v396, v395, (size_t)v394);
            goto LABEL_514;
          }
          __dst[23] = __src[1];
          v396 = __dst;
          if (__src[1])
            goto LABEL_513;
LABEL_514:
          v394[(_QWORD)v396] = 0;
          if (v387 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_773;
          if (v387 >= 0x17)
          {
            v400 = (v387 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v387 | 7) != 0x17)
              v400 = v387 | 7;
            v401 = v400 + 1;
            v399 = operator new(v400 + 1);
            v539[1] = (void *)v387;
            v540 = v401 | 0x8000000000000000;
            v539[0] = v399;
          }
          else
          {
            HIBYTE(v540) = v387;
            v399 = v539;
            if (!v387)
              goto LABEL_522;
          }
          memmove(v399, v385, v387);
LABEL_522:
          *((_BYTE *)v399 + v387) = 0;
          v402 = v379[1];
          v403 = (unint64_t)v379[2];
          if ((unint64_t)v402 >= v403)
          {
            v404 = *v379;
            v405 = 0xAAAAAAAAAAAAAAABLL * ((v402 - *v379) >> 4);
            v406 = v405 + 1;
            if (v405 + 1 > 0x555555555555555)
              goto LABEL_773;
            v407 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v403 - (_QWORD)v404) >> 4);
            if (2 * v407 > v406)
              v406 = 2 * v407;
            if (v407 >= 0x2AAAAAAAAAAAAAALL)
              v408 = 0x555555555555555;
            else
              v408 = v406;
            if (v408)
            {
              if (v408 > 0x555555555555555)
                goto LABEL_774;
              v409 = (char *)operator new(48 * v408);
              v402 = v379[1];
            }
            else
            {
              v409 = 0;
            }
            v410 = &v409[48 * v405];
            *(_OWORD *)v410 = *(_OWORD *)__dst;
            *((_QWORD *)v410 + 2) = *(_QWORD *)&__dst[16];
            memset(__dst, 0, sizeof(__dst));
            *(_OWORD *)(v410 + 24) = *(_OWORD *)v539;
            *((_QWORD *)v410 + 5) = v540;
            v539[0] = 0;
            v539[1] = 0;
            v540 = 0;
            if (v402 == v404)
            {
              v415 = 0;
              v416 = v410 + 48;
              *v379 = v410;
              v379[1] = v410 + 48;
              v379[2] = &v409[48 * v408];
            }
            else
            {
              v411 = &v409[48 * v405];
              do
              {
                v412 = *((_OWORD *)v402 - 3);
                *((_QWORD *)v411 - 4) = *((_QWORD *)v402 - 4);
                *((_OWORD *)v411 - 3) = v412;
                *((_QWORD *)v402 - 5) = 0;
                *((_QWORD *)v402 - 4) = 0;
                *((_QWORD *)v402 - 6) = 0;
                v413 = *(_OWORD *)(v402 - 24);
                *((_QWORD *)v411 - 1) = *((_QWORD *)v402 - 1);
                *(_OWORD *)(v411 - 24) = v413;
                v411 -= 48;
                *((_QWORD *)v402 - 2) = 0;
                *((_QWORD *)v402 - 1) = 0;
                *((_QWORD *)v402 - 3) = 0;
                v402 -= 48;
              }
              while (v402 != v404);
              v404 = *v379;
              v414 = (uint64_t)v379[1];
              v415 = HIBYTE(v540);
              v416 = v410 + 48;
              *v379 = v411;
              v379[1] = v410 + 48;
              v379[2] = &v409[48 * v408];
              while ((char *)v414 != v404)
              {
                v414 -= 48;
                std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v414);
              }
            }
            if (v404)
              operator delete(v404);
            v379[1] = v416;
            if (v415 < 0)
              operator delete(v539[0]);
          }
          else
          {
            *(_OWORD *)v402 = *(_OWORD *)__dst;
            *((_QWORD *)v402 + 2) = *(_QWORD *)&__dst[16];
            memset(__dst, 0, sizeof(__dst));
            *(_OWORD *)(v402 + 24) = *(_OWORD *)v539;
            *((_QWORD *)v402 + 5) = v540;
            v379[1] = v402 + 48;
          }
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v383 = ++v382 < v530;
          v6 = a5;
          if (v382 == v530)
            goto LABEL_548;
        }
        *(_DWORD *)__dst = 3;
        v8 = a1;
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)"producers section contains repeated producer", (unsigned int *)__dst, a1);
        v6 = a5;
LABEL_550:
        std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v579, v580);
        if (v574 != &v576)
          free(v574);
        if (v383)
          goto LABEL_751;
        v370 = v522 + 1;
      }
      while (v522 + 1 != v518);
LABEL_554:
      if (*(_QWORD *)(v6 + 8) != *(_QWORD *)(v6 + 16))
      {
        v417 = operator new();
        v418 = "producers section ended prematurely";
        goto LABEL_749;
      }
      *v8 = 0;
LABEL_751:
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v571, v572);
      if ((_QWORD *)v568 != v569)
        free((void *)v568);
LABEL_765:
      if (!*v8)
LABEL_766:
        *v8 = 0;
      return;
    case 0xFuLL:
      if (*(_QWORD *)a3 != 0x665F746567726174 || *(_QWORD *)(a3 + 7) != 0x7365727574616566)
        goto LABEL_560;
      v574 = &v576;
      v575 = 0x800000000;
      v584 = 0;
      v583 = 0;
      v582 = &v583;
      v458 = readVaruint32(a5);
      if (!v458)
        goto LABEL_718;
      v459 = 0;
      v532 = v458;
      break;
    default:
      if (a4 < 6)
        goto LABEL_766;
LABEL_560:
      if (*(_DWORD *)a3 != 1869374834 || *(_WORD *)(a3 + 4) != 11875)
        goto LABEL_766;
      v421 = readVaruint32(a5);
      v422 = v7[9];
      if (0x8E38E38E38E38E39 * ((v7[10] - v422) >> 3) <= v421)
      {
        LODWORD(v574) = 3;
        llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)"invalid section index", (unsigned int *)&v574);
        goto LABEL_765;
      }
      v423 = v421;
      v424 = readVaruint32(v6);
      if (!v424)
        goto LABEL_716;
      v425 = v424;
      v426 = 0;
      v427 = v422 + 72 * v423;
      v531 = *(unsigned int *)(v427 + 40);
      v428 = (void **)(v427 + 48);
      v429 = (void **)(v427 + 56);
      v430 = (_QWORD *)(v427 + 64);
      while (1)
      {
        v431 = readVaruint32(v6);
        v432 = readVaruint32(v6);
        if (v432 < v426)
          break;
        v426 = v432;
        v433 = readVaruint32(v6);
        v434 = v433;
        switch(v431)
        {
          case 0u:
          case 1u:
          case 2u:
          case 0xCu:
          case 0x12u:
          case 0x13u:
          case 0x18u:
            v435 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v435) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v435 + 32 * v433) + 16))
            {
              goto LABEL_740;
            }
            Varint32 = 0;
            goto LABEL_579;
          case 3u:
          case 4u:
          case 5u:
          case 0xBu:
          case 0x15u:
          case 0x17u:
            v437 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v437) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v437 + 32 * v433) + 16) != 1)
            {
              goto LABEL_738;
            }
            Varint32 = (int)readVarint32(v6);
            goto LABEL_579;
          case 6u:
            if (v433 < (unint64_t)((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 6))
              goto LABEL_628;
            LODWORD(v574) = 3;
            v510 = "invalid relocation type index";
            goto LABEL_739;
          case 7u:
            v451 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v451) >> 5)
              || *(unsigned __int8 *)(*(_QWORD *)(v451 + 32 * v433) + 16) >= 3u)
            {
              goto LABEL_762;
            }
            goto LABEL_628;
          case 8u:
            v452 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v452) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v452 + 32 * v433) + 16))
            {
              goto LABEL_740;
            }
            goto LABEL_619;
          case 9u:
            v453 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v453) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v453 + 32 * v433) + 16) != 3)
            {
              LODWORD(v574) = 3;
              v59 = "invalid relocation section index";
              v8 = a1;
LABEL_83:
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)v59, (unsigned int *)&v574);
              goto LABEL_765;
            }
LABEL_619:
            Varint32 = (int)readVarint32(v6);
            goto LABEL_584;
          case 0xAu:
            v454 = *(_QWORD *)(a2 + 536);
            if (v433 < (unint64_t)((*(_QWORD *)(a2 + 544) - v454) >> 5)
              && *(_BYTE *)(*(_QWORD *)(v454 + 32 * v433) + 16) == 4)
            {
              goto LABEL_628;
            }
            LODWORD(v574) = 3;
            v8 = a1;
            llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid relocation tag index", (unsigned int *)&v574);
            goto LABEL_765;
          case 0xDu:
            v455 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v455) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v455 + 32 * v433) + 16) != 2)
            {
LABEL_762:
              LODWORD(v574) = 3;
              v499 = "invalid relocation global index";
              goto LABEL_729;
            }
            Varint32 = 0;
LABEL_584:
            v439 = 4;
LABEL_585:
            if (v431 <= 0x16u && ((1 << v431) & 0x490000) != 0)
LABEL_587:
              v439 = 8;
LABEL_588:
            if (v439 + (unint64_t)v426 > v531)
            {
              LODWORD(v574) = 3;
              v8 = a1;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid relocation offset", (unsigned int *)&v574);
              goto LABEL_765;
            }
            v440 = (char *)*v429;
            if ((unint64_t)*v429 >= *v430)
            {
              v442 = 0xAAAAAAAAAAAAAAABLL * ((v440 - (_BYTE *)*v428) >> 3);
              v443 = v442 + 1;
              if (v442 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_773;
              if (0x5555555555555556 * ((uint64_t)(*v430 - (_QWORD)*v428) >> 3) > v443)
                v443 = 0x5555555555555556 * ((uint64_t)(*v430 - (_QWORD)*v428) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v430 - (_QWORD)*v428) >> 3) >= 0x555555555555555)
                v444 = 0xAAAAAAAAAAAAAAALL;
              else
                v444 = v443;
              if (v444)
                v444 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v444);
              else
                v445 = 0;
              v446 = v444 + 24 * v442;
              *(_BYTE *)v446 = v431;
              *(_WORD *)(v446 + 1) = 0;
              *(_BYTE *)(v446 + 3) = 0;
              *(_DWORD *)(v446 + 4) = v434;
              *(_QWORD *)(v446 + 8) = v426;
              *(_QWORD *)(v446 + 16) = Varint32;
              v447 = (char *)*v429;
              v448 = (char *)*v428;
              v449 = (char *)v446;
              if (*v429 == *v428)
              {
                v6 = a5;
              }
              else
              {
                v6 = a5;
                do
                {
                  v450 = *(_OWORD *)(v447 - 24);
                  *((_QWORD *)v449 - 1) = *((_QWORD *)v447 - 1);
                  *(_OWORD *)(v449 - 24) = v450;
                  v449 -= 24;
                  v447 -= 24;
                }
                while (v447 != v448);
                v447 = (char *)*v428;
              }
              *v428 = v449;
              v441 = (char *)(v446 + 24);
              *v429 = (void *)(v446 + 24);
              *v430 = v444 + 24 * v445;
              if (v447)
                operator delete(v447);
            }
            else
            {
              *v440 = v431;
              *(_WORD *)(v440 + 1) = 0;
              v440[3] = 0;
              *((_DWORD *)v440 + 1) = v434;
              v441 = v440 + 24;
              *((_QWORD *)v440 + 1) = v426;
              *((_QWORD *)v440 + 2) = Varint32;
              v6 = a5;
            }
            *v429 = v441;
            if (!--v425)
            {
LABEL_716:
              v8 = a1;
              if (*(_QWORD *)(v6 + 8) == *(_QWORD *)(v6 + 16))
                goto LABEL_766;
              LODWORD(v574) = 3;
              v499 = "reloc section ended prematurely";
LABEL_730:
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[32],llvm::object::object_error>((llvm::formatv_object_base *)v499, (unsigned int *)&v574, v8);
              goto LABEL_765;
            }
            break;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x19u:
            v438 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v438) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v438 + 32 * v433) + 16) != 1)
            {
LABEL_738:
              LODWORD(v574) = 3;
              v510 = "invalid relocation data index";
LABEL_739:
              v8 = a1;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)v510, (unsigned int *)&v574);
              goto LABEL_765;
            }
            Varint32 = readLEB128(v6);
LABEL_579:
            if ((v431 - 14) > 3u)
              v439 = 5;
            else
              v439 = qword_24AA32268[(char)(v431 - 14)];
            if (v431 <= 0x17u && ((1 << v431) & 0x802324) != 0)
              goto LABEL_584;
            goto LABEL_585;
          case 0x14u:
            v456 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v456) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v456 + 32 * v433) + 16) != 5)
            {
              LODWORD(v574) = 3;
              v8 = a1;
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"invalid relocation table index", (unsigned int *)&v574);
              goto LABEL_765;
            }
LABEL_628:
            Varint32 = 0;
            v439 = 5;
            goto LABEL_588;
          case 0x16u:
            v457 = *(_QWORD *)(a2 + 536);
            if (v433 >= (unint64_t)((*(_QWORD *)(a2 + 544) - v457) >> 5)
              || *(_BYTE *)(*(_QWORD *)(v457 + 32 * v433) + 16))
            {
LABEL_740:
              LODWORD(v574) = 3;
              v508 = "invalid relocation function index";
              v8 = a1;
LABEL_759:
              llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v8, (llvm::formatv_object_base *)v508, (unsigned int *)&v574);
              goto LABEL_765;
            }
            Varint32 = readLEB128(v6);
            goto LABEL_587;
          default:
            v574 = "invalid relocation type: ";
            v576 = v431;
            goto LABEL_724;
        }
      }
      LODWORD(v574) = 3;
      v499 = "relocations not in offset order";
LABEL_729:
      v8 = a1;
      goto LABEL_730;
  }
LABEL_635:
  *(_QWORD *)&__dst[8] = 0;
  *(_QWORD *)&__dst[16] = 0;
  v543 = 0;
  v460 = *(unsigned __int8 **)(v6 + 8);
  if (v460 == *(unsigned __int8 **)(v6 + 16))
LABEL_775:
    llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const llvm::Twine *)1);
  *(_QWORD *)(v6 + 8) = v460 + 1;
  v461 = *v460;
  __dst[0] = v461;
  v462 = v461 > 0x3D;
  v463 = (1 << v461) & 0x2000280000000000;
  if (v462 || v463 == 0)
  {
    LODWORD(v568) = 3;
    v8 = a1;
    llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(a1, (llvm::formatv_object_base *)"unknown feature policy prefix", (unsigned int *)&v568);
    goto LABEL_754;
  }
  v465 = readString(v6);
  if (v466 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_773;
  v467 = (const void *)v465;
  v468 = v466;
  if (v466 >= 0x17)
  {
    v470 = (v466 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v466 | 7) != 0x17)
      v470 = v466 | 7;
    v471 = v470 + 1;
    v469 = (__int128 *)operator new(v470 + 1);
    *((_QWORD *)&v568 + 1) = v468;
    v569[0] = v471 | 0x8000000000000000;
    *(_QWORD *)&v568 = v469;
  }
  else
  {
    HIBYTE(v569[0]) = v466;
    v469 = &v568;
    if (!v466)
      goto LABEL_648;
  }
  memmove(v469, v467, v468);
LABEL_648:
  *((_BYTE *)v469 + v468) = 0;
  if (SHIBYTE(v543) < 0)
    operator delete(*(void **)&__dst[8]);
  *(_OWORD *)&__dst[8] = v568;
  v543 = v569[0];
  if (v584)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v582, (const void **)&__dst[8], (uint64_t)&__dst[8]);
    if (v472)
      goto LABEL_681;
LABEL_731:
    std::operator+<char>();
    v503 = std::string::append(&v537, "\"");
    v504 = v503->__r_.__value_.__r.__words[2];
    *(_OWORD *)v539 = *(_OWORD *)&v503->__r_.__value_.__l.__data_;
    v540 = v504;
    v503->__r_.__value_.__l.__size_ = 0;
    v503->__r_.__value_.__r.__words[2] = 0;
    v503->__r_.__value_.__r.__words[0] = 0;
    v505 = operator new();
    v570 = 260;
    *(_QWORD *)&v568 = v539;
    v8 = a1;
    *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v505, (llvm::formatv_object_base **)&v568, 3u);
    if (SHIBYTE(v540) < 0)
      operator delete(v539[0]);
    if (SHIBYTE(v537.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v537.__r_.__value_.__l.__data_);
LABEL_754:
    if (SHIBYTE(v543) < 0)
      operator delete(*(void **)&__dst[8]);
    goto LABEL_756;
  }
  v473 = v575;
  if (!(_DWORD)v575)
    goto LABEL_675;
  v474 = (char *)v574;
  v475 = (char *)v574 + 24 * v575;
  if (v543 >= 0)
    v476 = HIBYTE(v543);
  else
    v476 = *(_QWORD *)&__dst[16];
  if (v543 >= 0)
    v477 = &__dst[8];
  else
    v477 = *(_BYTE **)&__dst[8];
  while (1)
  {
    v478 = v474[23];
    if ((v478 & 0x80u) == 0)
      v479 = v474[23];
    else
      v479 = *((_QWORD *)v474 + 1);
    if (v479 == v476)
    {
      if ((v478 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v474, v477, *((_QWORD *)v474 + 1)))
        {
LABEL_673:
          if (v474 != v475)
            goto LABEL_731;
LABEL_674:
          if (v473 >= 8)
          {
            do
            {
              while (1)
              {
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v582, (const void **)v574 + 3 * v473 - 3, (uint64_t)v574 + 24 * v473 - 24);
                v473 = v575 - 1;
                LODWORD(v575) = v473;
                v481 = (void **)((char *)v574 + 24 * v473);
                if (*((char *)v481 + 23) < 0)
                  break;
                if (!v473)
                  goto LABEL_680;
              }
              operator delete(*v481);
              v473 = v575;
            }
            while ((_DWORD)v575);
LABEL_680:
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v582, (const void **)&__dst[8], (uint64_t)&__dst[8]);
          }
          else
          {
LABEL_675:
            llvm::SmallVectorTemplateBase<std::string,false>::push_back((uint64_t)&v574, (unint64_t)&__dst[8]);
          }
LABEL_681:
          v483 = *(_QWORD *)(a2 + 264);
          v482 = *(_QWORD *)(a2 + 272);
          if (v483 < v482)
          {
            *(_BYTE *)v483 = __dst[0];
            v484 = (std::string *)(v483 + 8);
            v6 = a5;
            if (SHIBYTE(v543) < 0)
            {
              std::string::__init_copy_ctor_external(v484, *(const std::string::value_type **)&__dst[8], *(std::string::size_type *)&__dst[16]);
            }
            else
            {
              v485 = *(_OWORD *)&__dst[8];
              *(_QWORD *)(v483 + 24) = v543;
              *(_OWORD *)&v484->__r_.__value_.__l.__data_ = v485;
            }
            v492 = (char *)(v483 + 32);
            goto LABEL_709;
          }
          v486 = *(void ***)(a2 + 256);
          v487 = (uint64_t)(v483 - (_QWORD)v486) >> 5;
          v488 = v487 + 1;
          if ((unint64_t)(v487 + 1) >> 59)
            goto LABEL_773;
          v489 = v482 - (_QWORD)v486;
          if (v489 >> 4 > v488)
            v488 = v489 >> 4;
          if ((unint64_t)v489 >= 0x7FFFFFFFFFFFFFE0)
            v490 = 0x7FFFFFFFFFFFFFFLL;
          else
            v490 = v488;
          if (v490)
          {
            if (v490 >> 59)
LABEL_774:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v491 = (char *)operator new(32 * v490);
          }
          else
          {
            v491 = 0;
          }
          v493 = &v491[32 * v487];
          *v493 = __dst[0];
          v494 = (std::string *)(v493 + 8);
          if (SHIBYTE(v543) < 0)
          {
            std::string::__init_copy_ctor_external(v494, *(const std::string::value_type **)&__dst[8], *(std::string::size_type *)&__dst[16]);
            v486 = *(void ***)(a2 + 256);
            v483 = *(_QWORD *)(a2 + 264);
          }
          else
          {
            *(_OWORD *)&v494->__r_.__value_.__l.__data_ = *(_OWORD *)&__dst[8];
            *((_QWORD *)v493 + 3) = v543;
          }
          if ((void **)v483 == v486)
          {
            v492 = v493 + 32;
            *(_QWORD *)(a2 + 256) = v493;
            *(_QWORD *)(a2 + 264) = v493 + 32;
            *(_QWORD *)(a2 + 272) = &v491[32 * v490];
LABEL_714:
            v6 = a5;
            if (!v486)
              goto LABEL_709;
LABEL_708:
            operator delete(v486);
            goto LABEL_709;
          }
          v495 = &v491[32 * v487];
          do
          {
            v496 = *(_BYTE *)(v483 - 32);
            v483 -= 32;
            *(v495 - 32) = v496;
            v495 -= 32;
            v497 = *(_OWORD *)(v483 + 8);
            *((_QWORD *)v495 + 3) = *(_QWORD *)(v483 + 24);
            *(_OWORD *)(v495 + 8) = v497;
            *(_QWORD *)(v483 + 16) = 0;
            *(_QWORD *)(v483 + 24) = 0;
            *(_QWORD *)(v483 + 8) = 0;
          }
          while ((void **)v483 != v486);
          v486 = *(void ***)(a2 + 256);
          v498 = *(void ***)(a2 + 264);
          v492 = v493 + 32;
          *(_QWORD *)(a2 + 256) = v495;
          *(_QWORD *)(a2 + 264) = v493 + 32;
          *(_QWORD *)(a2 + 272) = &v491[32 * v490];
          if (v498 == v486)
            goto LABEL_714;
          v6 = a5;
          do
          {
            if (*((char *)v498 - 1) < 0)
              operator delete(*(v498 - 3));
            v498 -= 4;
          }
          while (v498 != v486);
          if (v486)
            goto LABEL_708;
LABEL_709:
          *(_QWORD *)(a2 + 264) = v492;
          if (SHIBYTE(v543) < 0)
            operator delete(*(void **)&__dst[8]);
          if (++v459 == v532)
          {
LABEL_718:
            if (*(_QWORD *)(v6 + 8) == *(_QWORD *)(v6 + 16))
            {
              v8 = a1;
              *a1 = 0;
            }
            else
            {
              v500 = operator new();
              *(_QWORD *)&v568 = "target features section ended prematurely";
              v570 = 259;
              v8 = a1;
              *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v500, (llvm::formatv_object_base **)&v568, 3u);
            }
LABEL_756:
            std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)&v582, v583);
            llvm::SmallVector<std::string,2u>::~SmallVector((char **)&v574);
            goto LABEL_765;
          }
          goto LABEL_635;
        }
      }
      else
      {
        if (!v474[23])
          goto LABEL_673;
        v480 = 0;
        while (v474[v480] == v477[v480])
        {
          if (v478 == ++v480)
            goto LABEL_673;
        }
      }
    }
    v474 += 24;
    if (v474 == v475)
      goto LABEL_674;
  }
}

unint64_t readVaruint32(uint64_t a1)
{
  unint64_t result;

  result = readULEB128(a1);
  if (HIDWORD(result))
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint32 range", (const llvm::Twine *)1);
  return result;
}

uint64_t readString(uint64_t a1)
{
  unsigned int ULEB128;
  uint64_t result;
  unint64_t v4;

  ULEB128 = readULEB128(a1);
  result = *(_QWORD *)(a1 + 8);
  v4 = result + ULEB128;
  if (v4 > *(_QWORD *)(a1 + 16))
    llvm::report_fatal_error((llvm *)"EOF while reading string", (const llvm::Twine *)1);
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(uint64_t *a1, llvm::formatv_object_base *a2, unsigned int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t result;
  llvm::formatv_object_base *v9;
  char v10;
  char v11;

  v6 = operator new();
  v7 = 1;
  v11 = 1;
  if (*(_BYTE *)a2)
  {
    v9 = a2;
    v7 = 3;
  }
  v10 = v7;
  result = llvm::object::GenericBinaryError::GenericBinaryError(v6, &v9, *a3);
  *a1 = result;
  return result;
}

void std::vector<llvm::wasm::WasmImport *>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t readVarint32(uint64_t a1)
{
  uint64_t result;

  result = readLEB128(a1);
  if (result != (int)result)
    llvm::report_fatal_error((llvm *)"LEB is outside Varint32 range", (const llvm::Twine *)1);
  return result;
}

unint64_t readVaruint1(uint64_t a1)
{
  unint64_t result;

  result = readLEB128(a1);
  if (result >= 2)
    llvm::report_fatal_error((llvm *)"LEB is outside Varuint1 range", (const llvm::Twine *)1);
  return result;
}

uint64_t readLimits(uint64_t a1, uint64_t a2)
{
  char Varuint32;
  uint64_t result;

  Varuint32 = readVaruint32(a2);
  *(_BYTE *)a1 = Varuint32;
  result = readULEB128(a2);
  *(_QWORD *)(a1 + 8) = result;
  if ((Varuint32 & 1) != 0)
  {
    result = readULEB128(a2);
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t readTableType(_BYTE *a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 8);
  if (v2 == *(_BYTE **)(a2 + 16))
    llvm::report_fatal_error((llvm *)"EOF while reading uint8", (const llvm::Twine *)1);
  *(_QWORD *)(a2 + 8) = v2 + 1;
  *a1 = *v2;
  return readLimits((uint64_t)(a1 + 8), a2);
}

uint64_t readInitExpr(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  llvm::formatv_object_base *v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;

  v3 = *(unsigned __int8 **)(a3 + 8);
  *(_BYTE *)a2 = 0;
  v4 = *(_QWORD *)(a3 + 16);
  if (v3 == (unsigned __int8 *)v4)
    goto LABEL_38;
  v7 = (uint64_t *)result;
  v8 = (int *)(v3 + 1);
  *(_QWORD *)(a3 + 8) = v3 + 1;
  v9 = *v3;
  *(_BYTE *)(a2 + 8) = v9;
  switch(v9)
  {
    case 'A':
      result = readVarint32(a3);
      *(_DWORD *)(a2 + 16) = result;
      goto LABEL_14;
    case 'B':
      result = readLEB128(a3);
      *(_QWORD *)(a2 + 16) = result;
      goto LABEL_14;
    case 'C':
      if ((unint64_t)(v3 + 5) > v4)
        goto LABEL_40;
      v10 = *v8;
      *(_QWORD *)(a3 + 8) = v3 + 5;
      *(_DWORD *)(a2 + 16) = v10;
      goto LABEL_14;
    case 'D':
      if ((unint64_t)(v3 + 9) > v4)
      {
LABEL_40:
        v17 = "EOF while reading float64";
LABEL_39:
        llvm::report_fatal_error((llvm *)v17, (const llvm::Twine *)1);
      }
      v11 = *(_QWORD *)v8;
      *(_QWORD *)(a3 + 8) = v3 + 9;
      *(_QWORD *)(a2 + 16) = v11;
      goto LABEL_14;
    default:
      if (v9 == 35)
      {
        result = readULEB128(a3);
        *(_DWORD *)(a2 + 16) = result;
      }
      else
      {
        if (v9 != 208)
          goto LABEL_17;
        result = readULEB128(a3);
        if ((_DWORD)result != 111)
        {
          LODWORD(v18[0]) = 3;
          return llvm::make_error<llvm::object::GenericBinaryError,char const(&)[33],llvm::object::object_error>(v7, (llvm::formatv_object_base *)"invalid type for ref.null", (unsigned int *)v18);
        }
      }
LABEL_14:
      v4 = *(_QWORD *)(a3 + 16);
      if (*(_BYTE *)a2)
        goto LABEL_18;
      v12 = *(_BYTE **)(a3 + 8);
      if (v12 == (_BYTE *)v4)
      {
LABEL_38:
        v17 = "EOF while reading uint8";
        goto LABEL_39;
      }
      *(_QWORD *)(a3 + 8) = v12 + 1;
      if (*v12 == 11)
        goto LABEL_35;
LABEL_17:
      *(_BYTE *)a2 = 1;
LABEL_18:
      *(_QWORD *)(a3 + 8) = v3;
      if (v3 == (unsigned __int8 *)v4)
        goto LABEL_38;
      v13 = v3;
      while (1)
      {
        *(_QWORD *)(a3 + 8) = v13 + 1;
        v14 = (llvm::formatv_object_base *)*v13;
        if (*v13 <= 0x69u)
          break;
        v15 = ((_DWORD)v14 - 106) > 0x14 || ((1 << ((_BYTE)v14 - 106)) & 0x1C0007) == 0;
        ++v13;
        if (!v15)
          goto LABEL_30;
        if ((_DWORD)v14 != 208)
          goto LABEL_36;
LABEL_29:
        result = readULEB128(a3);
        v13 = *(unsigned __int8 **)(a3 + 8);
        v4 = *(_QWORD *)(a3 + 16);
LABEL_30:
        if (v13 == (unsigned __int8 *)v4)
          goto LABEL_38;
      }
      if (((_DWORD)v14 - 65) < 4 || (_DWORD)v14 == 35)
        goto LABEL_29;
      if ((_DWORD)v14 == 11)
      {
        *(_QWORD *)(a2 + 24) = v3;
        *(_QWORD *)(a2 + 32) = v13 + 1 - v3;
LABEL_35:
        *v7 = 0;
      }
      else
      {
LABEL_36:
        v18[0] = (llvm::formatv_object_base *)"invalid opcode in init_expr: ";
        v18[2] = v14;
        v19 = 2051;
        v16 = operator new();
        result = llvm::object::GenericBinaryError::GenericBinaryError(v16, v18, 3u);
        *v7 = result;
      }
      return result;
  }
}

void llvm::object::WasmObjectFile::moveSymbolNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getSymbolFlags@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 3) == 1)
  {
    v5 = 6;
  }
  else if ((v4 & 3) == 2)
  {
    v5 = 0;
  }
  else
  {
    v5 = 2;
  }
  if ((v4 & 0xC) == 4)
    v5 |= 0x200u;
  v6 = v5 | (v4 >> 4) & 1;
  if (*(_BYTE *)(v3 + 16))
    v7 = v6;
  else
    v7 = v6 | 0x800;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v7;
  return result;
}

uint64_t llvm::object::WasmObjectFile::symbol_begin(llvm::object::WasmObjectFile *this)
{
  return 1;
}

unint64_t llvm::object::WasmObjectFile::symbol_end(llvm::object::WasmObjectFile *this)
{
  return ((unint64_t)((*((_QWORD *)this + 68) - *((_QWORD *)this + 67)) >> 5) << 32) | 1;
}

__n128 llvm::object::WasmObjectFile::getSymbolName@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = *(__n128 **)(*(_QWORD *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  a3[1].n128_u8[0] &= ~1u;
  result = *v3;
  *a3 = *v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + (((unint64_t)a2 >> 27) & 0x1FFFFFFFE0));
  if (*(_BYTE *)(v3 + 16))
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  v4 = *(unsigned int *)(v3 + 96);
  v5 = *(unsigned int *)(a1 + 680);
  if (v4 < v5)
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  v6 = *(_QWORD *)(a1 + 512);
  if (v5 + ((*(_QWORD *)(a1 + 520) - v6) >> 7) <= v4)
    return (uint64_t)llvm::object::ObjectFile::getSymbolValue(a1, a2, a3);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = *(unsigned int *)(v6 + ((unint64_t)(v4 - v5) << 7) + 48);
  return a1;
}

uint64_t llvm::object::WasmObjectFile::getSymbolValueImpl(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 536) + ((a2 >> 27) & 0x1FFFFFFFE0));
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (((1 << v4) & 0x35) != 0)
    return *(unsigned int *)(v3 + 96);
  result = 0;
  if (v4 == 1)
  {
    v6 = *(_DWORD *)(v3 + 96);
    v7 = *(_QWORD *)(a1 + 472);
    if (*(_BYTE *)(v7 + 104 * v6 + 24) == 65)
      v8 = *(int *)(v7 + 104 * v6 + 32);
    else
      v8 = *(_QWORD *)(v7 + 104 * v6 + 32);
    return *(_QWORD *)(v3 + 104) + v8;
  }
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = dword_24AA32288[*(char *)(*(_QWORD *)(*(_QWORD *)(result + 536) + ((a2 >> 27) & 0x1FFFFFFFE0)) + 16)];
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v3;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSymbolSection@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1[67] + ((a2 >> 27) & 0x1FFFFFFFE0));
  if ((*(_BYTE *)(v4 + 20) & 0x10) == 0)
    __asm { BR              X11 }
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
  result = v6;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

void llvm::object::WasmObjectFile::moveSectionNext(uint64_t a1, _DWORD *a2)
{
  ++*a2;
}

void llvm::object::WasmObjectFile::getSectionName(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  llvm::wasm *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::formatv_object_base *v9;
  uint64_t v10[2];

  v4 = *(_QWORD *)(a1 + 72);
  v5 = (llvm::wasm *)*(unsigned int *)(v4 + 72 * a2);
  if ((_DWORD)v5)
  {
    if (v5 < 0xE)
    {
      v6 = llvm::wasm::sectionTypeToString(v5);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
    }
    else
    {
      v10[0] = 6;
      v10[1] = (uint64_t)llvm::object::object_category(v5);
      v9 = (llvm::formatv_object_base *)"";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v9, v10, &v8);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v8;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_OWORD *)a3 = *(_OWORD *)(v4 + 72 * a2 + 8);
  }
}

uint64_t llvm::object::WasmObjectFile::getSectionAddress()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::getSectionIndex(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t llvm::object::WasmObjectFile::getSectionSize(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 40);
}

__n128 llvm::object::WasmObjectFile::getSectionContents@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 72) + 72 * a2);
  a3[1].n128_u8[0] &= ~1u;
  result = v3[2];
  *a3 = result;
  return result;
}

uint64_t llvm::object::WasmObjectFile::getSectionAlignment()
{
  return 1;
}

uint64_t llvm::object::WasmObjectFile::isSectionCompressed()
{
  return 0;
}

BOOL llvm::object::WasmObjectFile::isSectionText(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2) == 10;
}

BOOL llvm::object::WasmObjectFile::isSectionData(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2) == 11;
}

uint64_t llvm::object::WasmObjectFile::isSectionBSS()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::isSectionVirtual()
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_rel_begin(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t llvm::object::WasmObjectFile::section_rel_end(uint64_t a1, unsigned int a2)
{
  return a2 | ((unint64_t)(-1431655765
                                * ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 56)
                                                - *(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48)) >> 3)) << 32);
}

void llvm::object::WasmObjectFile::moveRelocationNext(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a2 + 4);
}

uint64_t llvm::object::WasmObjectFile::getRelocationOffset(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2) + 8);
}

unint64_t llvm::object::WasmObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1[9] + 72 * a2 + 48);
  if (*(_BYTE *)(v2 + 24 * HIDWORD(a2)) == 6)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  else
    return ((unint64_t)*(unsigned int *)(v2 + 24 * HIDWORD(a2) + 4) << 32) | 1;
}

uint64_t llvm::object::WasmObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
}

_QWORD *llvm::object::WasmObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;

  v3 = *(char *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72 * a2 + 48) + 24 * HIDWORD(a2));
  if (v3 > 0x19)
  {
    v4 = "Unknown";
    v5 = 7;
  }
  else
  {
    v4 = off_251C1BE68[v3];
    v5 = qword_24AA322A0[v3];
  }
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, v4, &v4[v5]);
}

uint64_t llvm::object::WasmObjectFile::section_begin(llvm::object::WasmObjectFile *this)
{
  return 0;
}

uint64_t llvm::object::WasmObjectFile::section_end(llvm::object::WasmObjectFile *this)
{
  return 954437177 * ((*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3);
}

uint64_t llvm::object::WasmObjectFile::getBytesInAddress(llvm::object::WasmObjectFile *this)
{
  if (*((_BYTE *)this + 590))
    return 8;
  else
    return 4;
}

const char *llvm::object::WasmObjectFile::getFileFormatName(llvm::object::WasmObjectFile *this)
{
  return "WASM";
}

uint64_t llvm::object::WasmObjectFile::getArch(llvm::object::WasmObjectFile *this)
{
  if (*((_BYTE *)this + 590))
    return 57;
  else
    return 56;
}

void llvm::object::WasmObjectFile::getFeatures(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;
  void **v5;

  v3 = 0uLL;
  v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v3 = 0uLL;
  v4 = 0;
  v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

uint64_t llvm::object::WasmObjectFile::isRelocatableObject(llvm::object::WasmObjectFile *this)
{
  return *((unsigned __int8 *)this + 588);
}

void llvm::object::WasmObjectFile::~WasmObjectFile(llvm::object::WasmObjectFile *this)
{
  llvm::object::WasmObjectFile::~WasmObjectFile(this);
  JUMPOUT(0x24BD1B3A4);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void **v35;

  *(_QWORD *)this = &off_251C1BCA8;
  v2 = (void *)*((_QWORD *)this + 81);
  if (v2)
  {
    *((_QWORD *)this + 82) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 78);
  if (v3)
  {
    *((_QWORD *)this + 79) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 75);
  if (v4)
  {
    *((_QWORD *)this + 76) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 70);
  if (v5)
  {
    *((_QWORD *)this + 71) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 67);
  if (v6)
  {
    *((_QWORD *)this + 68) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 64);
  if (v7)
  {
    v8 = *((_QWORD *)this + 65);
    v9 = (void *)*((_QWORD *)this + 64);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 120);
        if (v10)
        {
          *(_QWORD *)(v8 - 112) = v10;
          operator delete(v10);
        }
        v8 -= 128;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v7;
    operator delete(v9);
  }
  v11 = (void *)*((_QWORD *)this + 59);
  if (v11)
  {
    *((_QWORD *)this + 60) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 56);
  if (v12)
  {
    v13 = *((_QWORD *)this + 57);
    v14 = (void *)*((_QWORD *)this + 56);
    if (v13 != v12)
    {
      do
      {
        v15 = *(void **)(v13 - 24);
        if (v15)
        {
          *(_QWORD *)(v13 - 16) = v15;
          operator delete(v15);
        }
        v13 -= 80;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 56);
    }
    *((_QWORD *)this + 57) = v12;
    operator delete(v14);
  }
  v16 = (void *)*((_QWORD *)this + 53);
  if (v16)
  {
    *((_QWORD *)this + 54) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 50);
  if (v17)
  {
    *((_QWORD *)this + 51) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 47);
  if (v18)
  {
    *((_QWORD *)this + 48) = v18;
    operator delete(v18);
  }
  v19 = (void *)*((_QWORD *)this + 44);
  if (v19)
  {
    *((_QWORD *)this + 45) = v19;
    operator delete(v19);
  }
  v20 = (void *)*((_QWORD *)this + 41);
  if (v20)
  {
    *((_QWORD *)this + 42) = v20;
    operator delete(v20);
  }
  v21 = (void *)*((_QWORD *)this + 38);
  if (v21)
  {
    *((_QWORD *)this + 39) = v21;
    operator delete(v21);
  }
  v22 = *((_QWORD *)this + 35);
  if (v22)
  {
    v23 = *((_QWORD *)this + 36);
    v24 = (void *)*((_QWORD *)this + 35);
    if (v23 != v22)
    {
      do
      {
        v23 -= 64;
        std::allocator<llvm::wasm::WasmSignature>::destroy[abi:nn180100](v23);
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v22;
    operator delete(v24);
  }
  v25 = *((_QWORD *)this + 32);
  if (v25)
  {
    v26 = *((_QWORD *)this + 33);
    v27 = (void *)*((_QWORD *)this + 32);
    if (v26 != v25)
    {
      do
      {
        if (*(char *)(v26 - 1) < 0)
          operator delete(*(void **)(v26 - 24));
        v26 -= 32;
      }
      while (v26 != v25);
      v27 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v25;
    operator delete(v27);
  }
  v35 = (void **)((char *)this + 232);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](&v35);
  v35 = (void **)((char *)this + 208);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](&v35);
  v35 = (void **)((char *)this + 184);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](&v35);
  v28 = (void *)*((_QWORD *)this + 20);
  if (v28)
  {
    *((_QWORD *)this + 21) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 17);
  if (v29)
  {
    *((_QWORD *)this + 18) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 14);
  if (v30)
  {
    *((_QWORD *)this + 15) = v30;
    operator delete(v30);
  }
  v31 = *((_QWORD *)this + 9);
  if (v31)
  {
    v32 = *((_QWORD *)this + 10);
    v33 = (void *)*((_QWORD *)this + 9);
    if (v32 != v31)
    {
      do
      {
        v34 = *(void **)(v32 - 24);
        if (v34)
        {
          *(_QWORD *)(v32 - 16) = v34;
          operator delete(v34);
        }
        v32 -= 72;
      }
      while (v32 != v31);
      v33 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v31;
    operator delete(v33);
  }
}

uint64_t llvm::object::WasmObjectFile::is64Bit(llvm::object::WasmObjectFile *this)
{
  return 0;
}

void llvm::to_string<unsigned int>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  __int128 v4;
  void (**v5)(llvm::raw_string_ostream *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = &off_251C13AC0;
  v13 = v14;
  llvm::raw_ostream::SetUnbuffered(&v5);
  write_unsigned<unsigned long>((llvm::raw_ostream *)&v5, *a1, 0, 0, 0);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  }
  else
  {
    v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
  v5 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v12 == 1 && v7)
    MEMORY[0x24BD1B380](v7, 0x1000C8077774924);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

uint64_t readULEB128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = "malformed uleb128, extends past end";
  do
  {
    if (v5 + v2 == v6)
      goto LABEL_9;
    v8 = *(_BYTE *)(v5 + v2);
    v9 = v8 & 0x7F;
    if (v4 >= 0x40 && (v8 & 0x7F) != 0 || (unint64_t)(v9 << v4) >> v4 != v9)
    {
      v7 = "uleb128 too big for uint64";
LABEL_9:
      llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
    }
    v3 += v9 << v4;
    v4 += 7;
    ++v2;
  }
  while (v8 < 0);
  *(_QWORD *)(a1 + 8) = v5 + v2;
  return v3;
}

uint64_t readLEB128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = "malformed sleb128, extends past end";
  do
  {
    if (v4 + v1 == *(_QWORD *)(a1 + 16))
      goto LABEL_20;
    v6 = *(_BYTE *)(v4 + v1);
    v7 = v6 & 0x7F;
    if (v3 < 0x40)
    {
      if (v3 == 63 && (_DWORD)v7 != 127 && (_DWORD)v7 != 0)
      {
LABEL_19:
        v5 = "sleb128 too big for int64";
LABEL_20:
        llvm::report_fatal_error((llvm *)v5, (const llvm::Twine *)1);
      }
    }
    else if (((v2 >> 63) & 0x7F) != v7)
    {
      goto LABEL_19;
    }
    v2 |= v7 << v3;
    v3 += 7;
    ++v1;
  }
  while (v6 < 0);
  v9 = (v6 & 0x40) == 0 || v3 > 0x3F;
  v10 = -1 << v3;
  if (v9)
    v10 = 0;
  *(_QWORD *)(a1 + 8) = v4 + v1;
  return v2 | v10;
}

void std::allocator<llvm::wasm::WasmSignature>::destroy[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:nn180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<llvm::wasm::WasmRelocation>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(0xAAAAAAAAAAAAAAABLL * (v5 >> 3));
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[24 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[8 * (v5 >> 3)];
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSymbolInfo>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(120 * a1);
}

void llvm::SmallVectorTemplateBase<std::string,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8)), *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t *std::vector<llvm::wasm::WasmSignature>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = (_DWORD *)*result;
  v4 = (_DWORD *)result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 64;
    v4 -= 16;
    result = (uint64_t *)std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(unint64_t a1)
{
  if (a1 >> 58)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a1 << 6);
}

uint64_t std::allocator<llvm::wasm::WasmSignature>::construct[abi:nn180100]<llvm::wasm::WasmSignature,llvm::wasm::WasmSignature>(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (a2[2])
    llvm::SmallVectorImpl<llvm::wasm::ValType>::operator=(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  result = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  if (a2[8])
    result = llvm::SmallVectorImpl<llvm::wasm::ValType>::operator=(result, (uint64_t)(a2 + 6));
  *(_DWORD *)(a1 + 56) = a2[14];
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::wasm::ValType>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 4 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 4 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 4);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v9), (const void *)(*(_QWORD *)a2 + 4 * v9), *(_QWORD *)a2 + 4 * v10 - (*(_QWORD *)a2 + 4 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t std::__split_buffer<llvm::wasm::WasmSignature>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator<llvm::wasm::WasmSignature>::destroy[abi:nn180100](i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmImport>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(72 * a1);
}

uint64_t *std::vector<llvm::wasm::WasmFunction>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v2 + v5 - 128);
      *(_QWORD *)(v6 - 120) = 0;
      *(_QWORD *)(v6 - 112) = 0;
      *(_QWORD *)(v6 - 104) = 0;
      *(_OWORD *)(v6 - 120) = *(_OWORD *)(v2 + v5 - 120);
      *(_QWORD *)(v6 - 104) = *(_QWORD *)(v2 + v5 - 104);
      *(_QWORD *)(v7 - 112) = 0;
      *(_QWORD *)(v7 - 104) = 0;
      *(_QWORD *)(v7 - 120) = 0;
      v9 = *(_OWORD *)(v2 + v5 - 48);
      v8 = *(_OWORD *)(v2 + v5 - 32);
      v10 = *(_OWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 20) = *(_OWORD *)(v2 + v5 - 20);
      *(_OWORD *)(v6 - 48) = v9;
      *(_OWORD *)(v6 - 32) = v8;
      *(_OWORD *)(v6 - 64) = v10;
      v11 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 80) = v11;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmFunction>>(unint64_t a1)
{
  if (a1 >> 57)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a1 << 7);
}

uint64_t std::__split_buffer<llvm::wasm::WasmFunction>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 128;
    v4 = *(void **)(v2 - 120);
    if (v4)
    {
      *(_QWORD *)(v2 - 112) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 128;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<llvm::wasm::WasmLocalDecl>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v3 - *(_QWORD *)a2 < 0)
      abort();
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v5 >> 3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * v7];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t *std::vector<llvm::wasm::WasmElemSegment>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 80;
      v6 = *(_OWORD *)(v3 - 80);
      v7 = *(_OWORD *)(v3 - 48);
      v8 = *(_QWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 80) = v6;
      *(_QWORD *)(v4 - 32) = v8;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmElemSegment>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<llvm::wasm::WasmElemSegment>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 80;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::object::WasmSegment>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(104 * a1);
}

uint64_t llvm::object::WindowsResource::createWindowsResource@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm::formatv_object_base *v4;
  llvm::formatv_object_base *v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::formatv_object_base *v14[4];
  __int16 v15;

  if (*(_QWORD *)(a1 + 8) > 0x1FuLL)
  {
    result = operator new();
    v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(result + 16) = *(_OWORD *)a1;
    *(_OWORD *)(result + 32) = v9;
    *(_DWORD *)(result + 8) = 7;
    *(_QWORD *)result = &off_251C1BF48;
    *(_QWORD *)(result + 48) = &off_251C11FE0;
    v10 = *(_QWORD *)(result + 16);
    v11 = *(_QWORD *)(result + 24);
    v12 = 32;
    if (v11 < 0x20)
      v12 = *(_QWORD *)(result + 24);
    v13 = v10 + v12;
    *(_DWORD *)(result + 56) = 1;
    *(_QWORD *)(result + 64) = v13;
    *(_QWORD *)(result + 72) = v10 + v11 - v13;
    v8 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  else
  {
    v4 = *(llvm::formatv_object_base **)(a1 + 16);
    v5 = *(llvm::formatv_object_base **)(a1 + 24);
    v15 = 773;
    v14[0] = v4;
    v14[1] = v5;
    v14[2] = (llvm::formatv_object_base *)": too small to be a resource file";
    v6 = operator new();
    result = llvm::object::GenericBinaryError::GenericBinaryError(v6, v14, 2u);
    v8 = *(_BYTE *)(a2 + 8) | 1;
  }
  *(_BYTE *)(a2 + 8) = v8;
  *(_QWORD *)a2 = result;
  return result;
}

void llvm::object::WindowsResource::~WindowsResource(llvm::object::WindowsResource *this)
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *result;
  std::string *v13;
  std::string::size_type v14;
  unint64_t v15;
  uint64_t v16;
  llvm::object *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;

  v6 = a2[6];
  v7 = *(_QWORD *)(a3 + 40);
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 64))(a2))
  {
    v8 = *(_DWORD *)(a3 + 56);
LABEL_3:
    v9 = bswap32(v8);
    goto LABEL_5;
  }
  v9 = bswap32(*(_DWORD *)(a3 + 56));
  if (v9 >= 0xFFFF)
  {
    v16 = a2[8];
    v17 = (llvm::object *)(*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
    v18 = a2[6];
    if (!*(_WORD *)(v18 + 2))
    {
LABEL_18:
      v21 = llvm::object::object_category(v17);
      result = (_QWORD *)operator new();
      *result = &off_251C12820;
      result[1] = 3;
      result[2] = v21;
      *(_BYTE *)(a1 + 16) |= 1u;
      *(_QWORD *)a1 = result;
      return result;
    }
    v19 = (_DWORD *)(v16 + 36);
    v20 = 40 * __rev16(*(unsigned __int16 *)(v18 + 2));
    while (*v19 != 0x800000
         || bswap32(*((unsigned __int16 *)v19 - 2)) >> 16 != (unsigned __int16)(-29127 * ((a3 - v16) >> 3)
                                                                              + 1))
    {
      v19 += 10;
      v20 -= 40;
      if (!v20)
        goto LABEL_18;
    }
    v8 = *(v19 - 7);
    goto LABEL_3;
  }
LABEL_5:
  v10 = v6 + bswap64(v7);
  v11 = *((_OWORD *)a2 + 2);
  v34 = *((_OWORD *)a2 + 1);
  v35 = v11;
  result = llvm::object::Binary::checkOffset((llvm::object *)&v34, v10, 14 * v9, v32);
  if (v32[0])
  {
    v24 = (_QWORD *)v32[0];
    llvm::toString((uint64_t *)&v24, &v25);
    v13 = std::string::append(&v25, ": relocations with offset 0x");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v27 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = bswap64(*(_QWORD *)(a3 + 40));
    v22 = 14 * v9;
    v23 = v15;
    v28[0] = __p;
    v28[2] = &v23;
    v29 = 3588;
    v30[0] = v28;
    v30[2] = " and size 0x";
    v31 = 770;
    v32[0] = v30;
    v32[2] = &v22;
    v33 = 3586;
    *(_QWORD *)&v34 = v32;
    *(_QWORD *)&v35 = " go past the end of the file";
    v36 = 770;
    v38 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>((llvm::formatv_object_base **)&v34, &v38, &v37);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v37;
    v37 = 0;
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    result = v24;
    if (v24)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 8))(v24);
  }
  else
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v9;
  }
  return result;
}

_QWORD *llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *result;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  llvm::object *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::string v25;
  void *__p[2];
  std::string::size_type v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;
  uint64_t v37;
  unsigned int v38;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_DWORD *)(a3 + 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
  {
    v8 = bswap32(*(unsigned __int16 *)(a3 + 32)) >> 16;
  }
  else
  {
    v9 = *(unsigned __int16 *)(a3 + 32);
    if (v9 == 0xFFFF)
    {
      v16 = *(_QWORD *)(a2 + 64);
      v17 = (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
      v18 = *(_QWORD *)(a2 + 48);
      if (!*(_WORD *)(v18 + 2))
      {
LABEL_18:
        v21 = llvm::object::object_category(v17);
        result = (_QWORD *)operator new();
        *result = &off_251C12820;
        result[1] = 3;
        result[2] = v21;
        *(_BYTE *)(a1 + 16) |= 1u;
        *(_QWORD *)a1 = result;
        return result;
      }
      v19 = (_DWORD *)(v16 + 36);
      v20 = 40 * __rev16(*(unsigned __int16 *)(v18 + 2));
      while (*v19 != 0x800000
           || bswap32(*((unsigned __int16 *)v19 - 2)) >> 16 != (unsigned __int16)(-13107
                                                                                * ((a3 - v16) >> 3)
                                                                                + 1))
      {
        v19 += 10;
        v20 -= 40;
        if (!v20)
          goto LABEL_18;
      }
      v8 = bswap32(*(v19 - 7));
    }
    else
    {
      v8 = __rev16(v9);
    }
  }
  v10 = v6 + bswap32(v7);
  v11 = *(_OWORD *)(a2 + 32);
  v34 = *(_OWORD *)(a2 + 16);
  v35 = v11;
  result = llvm::object::Binary::checkOffset((llvm::object *)&v34, v10, 10 * v8, v32);
  if (v32[0])
  {
    v24 = (_QWORD *)v32[0];
    llvm::toString((uint64_t *)&v24, &v25);
    v13 = std::string::append(&v25, ": relocations with offset 0x");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v27 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = bswap32(*(_DWORD *)(a3 + 24));
    v22 = 10 * v8;
    v23 = v15;
    v28[0] = __p;
    v28[2] = &v23;
    v29 = 3588;
    v30[0] = v28;
    v30[2] = " and size 0x";
    v31 = 770;
    v32[0] = v30;
    v32[2] = &v22;
    v33 = 3586;
    *(_QWORD *)&v34 = v32;
    *(_QWORD *)&v35 = " go past the end of the file";
    v36 = 770;
    v38 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>((llvm::formatv_object_base **)&v34, &v38, &v37);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v37;
    v37 = 0;
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    result = v24;
    if (v24)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v24 + 8))(v24);
  }
  else
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v8;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::moveSymbolNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;

  v3 = *a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = v3;
  if ((result & 1) != 0)
    goto LABEL_5;
  if (!v3)
  {
    v5 = 0;
LABEL_5:
    v6 = (unsigned __int8 *)(v5 + 17);
    goto LABEL_6;
  }
  v6 = (unsigned __int8 *)(v3 + 17);
LABEL_6:
  *a2 = v3 + 18 * *v6 + 18;
  return result;
}

void llvm::object::XCOFFObjectFile::getStringTableEntry(llvm::object::XCOFFObjectFile *this, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  llvm::formatv_object_base *v16[4];
  __int16 v17;
  uint64_t v18;
  unsigned int v19;

  if (a3 > 3)
  {
    v4 = *(_QWORD *)(a2 + 88);
    v5 = *(unsigned int *)(a2 + 80);
    if (v4)
      v6 = v5 > a3;
    else
      v6 = 0;
    if (v6)
    {
      v7 = (const char *)(v4 + a3);
      *((_BYTE *)this + 16) &= ~1u;
      *(_QWORD *)this = v7;
      *((_QWORD *)this + 1) = strlen(v7);
    }
    else
    {
      v9 = a3;
      v10[0] = "entry with offset 0x";
      v10[2] = &v9;
      v11 = 3587;
      v12[0] = v10;
      v12[2] = " in a string table with size 0x";
      v13 = 770;
      v8 = v5;
      v14[0] = v12;
      v14[2] = &v8;
      v15 = 3586;
      v16[0] = (llvm::formatv_object_base *)v14;
      v16[2] = (llvm::formatv_object_base *)" is invalid";
      v17 = 770;
      v19 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v16, &v19, &v18);
      *((_BYTE *)this + 16) |= 1u;
      *(_QWORD *)this = v18;
    }
  }
  else
  {
    *((_BYTE *)this + 16) &= ~1u;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

void llvm::object::XCOFFObjectFile::getSymbolName(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::object::XCOFFSymbolRef *a3@<X8>)
{
  int v5;
  uint64_t v6;
  _QWORD v7[3];

  v7[1] = 0;
  v7[2] = 0;
  v7[0] = a1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = 1;
  if (v5)
    v6 = 2;
  v7[v6] = a2;
  llvm::object::XCOFFSymbolRef::getName(a3, (uint64_t)v7);
}

void llvm::object::XCOFFSymbolRef::getName(llvm::object::XCOFFSymbolRef *this, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if ((*(char *)(v6 + 16) & 0x80000000) == 0)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_DWORD *)(v6 + 8);
LABEL_11:
      llvm::object::XCOFFObjectFile::getStringTableEntry(this, v7, bswap32(v8));
      return;
    }
LABEL_9:
    *((_BYTE *)this + 16) &= ~1u;
    *(_QWORD *)this = "Unimplemented Debug Name";
    *((_QWORD *)this + 1) = 24;
    return;
  }
  if (*(char *)(v3 + 16) < 0)
    goto LABEL_9;
  if (!*(_DWORD *)v3)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(v3 + 4);
    goto LABEL_11;
  }
  v4 = memchr(*(void **)(a2 + 8), 0, 8uLL);
  v5 = (uint64_t)v4 - v3;
  *((_BYTE *)this + 16) &= ~1u;
  if (!v4)
    v5 = 8;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v5;
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((result & 1) != 0)
    v6 = bswap64(*(_QWORD *)a2);
  else
    v6 = bswap32(*(_DWORD *)(a2 + 8));
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) != 0)
    return bswap64(*(_QWORD *)a2);
  else
    return bswap32(*(_DWORD *)(a2 + 8));
}

uint64_t llvm::object::XCOFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v9 = a1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 8;
  if (v3)
    v4 = 16;
  *(uint64_t *)((char *)&v9 + v4) = a2;
  v5 = v10;
  if (!v10)
    v5 = v11;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 != 2 && v6 != 111 && v6 != 107)
    return 0;
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v13, &v9);
  v7 = v13[0];
  if ((v14 & 1) != 0)
  {
    v12 = (_QWORD *)v13[0];
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v12);
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    return 0;
  }
  if (!v13[0])
    v7 = v13[1];
  return (1 << (*(_BYTE *)(v7 + 10) >> 3));
}

void llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef(llvm::object::XCOFFSymbolRef *this, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[2];
  unint64_t v23;
  __int16 v24;
  llvm::formatv_object_base *v25[2];
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v29;
  const char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if (!v4)
    v4 = a2[2];
  v5 = *(unsigned __int8 *)(v4 + 17);
  llvm::object::XCOFFSymbolRef::getName((llvm::object::XCOFFSymbolRef *)&v30, (uint64_t)a2);
  v6 = v32;
  if ((v32 & 1) != 0)
  {
    v7 = v30;
    v30 = 0;
    if (v7)
    {
      *((_BYTE *)this + 16) |= 1u;
      *(_QWORD *)this = v7;
      return;
    }
  }
  v8 = (_QWORD *)*a2;
  v9 = a2[1];
  if (!v9)
    v9 = a2[2];
  v10 = (v9 - v8[9]) / 0x12uLL;
  if (!v5)
  {
    v17 = 1283;
    v16[0] = "csect symbol \"";
    v16[2] = v30;
    v16[3] = v31;
    v18[0] = v16;
    v19 = "\" with index ";
    v21 = 770;
    v22[0] = v18;
    v23 = v10;
    v24 = 2050;
    v25[0] = (llvm::formatv_object_base *)v22;
    v26 = (unint64_t)" contains no auxiliary entry";
    v27 = 770;
    v29 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v25, &v29, &v28);
    *((_BYTE *)this + 16) |= 1u;
    *(_QWORD *)this = v28;
    v28 = 0;
    if ((v6 & 1) == 0)
      return;
    goto LABEL_23;
  }
  v11 = (*(uint64_t (**)(_QWORD *))(*v8 + 64))(v8);
  v12 = a2[1];
  if (v11)
  {
    while (1)
    {
      v13 = a2[1];
      if (!v12)
        v13 = a2[2];
      v14 = v13 + 18 * v5;
      if (*(unsigned __int8 *)(v14 + 17) == 251)
        break;
      LOBYTE(v5) = v5 - 1;
      if (!(_BYTE)v5)
      {
        v21 = 1283;
        v18[0] = "a csect auxiliary entry has not been found for symbol \"";
        v19 = v30;
        v20 = v31;
        v22[0] = v18;
        v23 = (unint64_t)"\" with index ";
        v24 = 770;
        v25[0] = (llvm::formatv_object_base *)v22;
        v26 = v10;
        v27 = 2050;
        LODWORD(v16[0]) = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v25, (unsigned int *)v16, &v15);
        *((_BYTE *)this + 16) |= 1u;
        *(_QWORD *)this = v15;
        v15 = 0;
        if ((v6 & 1) != 0)
          goto LABEL_23;
        return;
      }
    }
    *((_BYTE *)this + 16) &= ~1u;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = v14;
    if ((v6 & 1) == 0)
      return;
    goto LABEL_23;
  }
  if (!v12)
    v12 = a2[2];
  *((_BYTE *)this + 16) &= ~1u;
  *(_QWORD *)this = v12 + 18 * v5;
  *((_QWORD *)this + 1) = 0;
  if ((v6 & 1) != 0)
  {
LABEL_23:
    if (v30)
      (*(void (**)(const char *))(*(_QWORD *)v30 + 8))(v30);
  }
}

unint64_t llvm::object::XCOFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = 0;
  v8 = a1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 8;
  if (v3)
    v4 = 16;
  *(uint64_t *)((char *)&v8 + v4) = a2;
  v5 = v9;
  if (!v9)
    v5 = v10;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 2 || v6 == 111 || (result = 0, v6 == 107))
  {
    llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)&v12, &v8);
    if ((v14 & 1) != 0)
    {
      v11 = v12;
      llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v11);
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      return 0;
    }
    else if (v12)
    {
      return bswap32(*(_DWORD *)v12);
    }
    else
    {
      return bswap64(v13[3] | ((unint64_t)*v13 << 32));
    }
  }
  return result;
}

void llvm::object::XCOFFObjectFile::getSymbolType(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  const void *v22;
  size_t v23;
  BOOL v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  size_t v35;
  size_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v31 = 0;
  v29 = a1;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v7 = 1;
  if (v6)
    v7 = 2;
  (&v29)[v7] = a2;
  v8 = v30;
  v9 = v31;
  if (v30)
    v10 = v30;
  else
    v10 = v31;
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 != 2 && v11 != 107 && v11 != 111)
    goto LABEL_28;
  if (v30)
    v12 = v30;
  else
    v12 = v31;
  if ((*(_WORD *)(v12 + 14) & 0x2000) != 0)
  {
LABEL_25:
    *(_BYTE *)(a3 + 8) &= ~1u;
    v18 = 5;
LABEL_52:
    *(_DWORD *)a3 = v18;
    return;
  }
  llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)&v35, &v29);
  v13 = v35;
  if ((v37 & 1) != 0)
  {
    v33 = (_QWORD *)v35;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v33);
    v19 = v33;
    if (!v33)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (!v35)
    v13 = v36;
  if ((*(_BYTE *)(v13 + 10) & 7) != 2 || *(_BYTE *)(v13 + 11))
    goto LABEL_28;
  if (v8)
    v14 = v8;
  else
    v14 = v9;
  llvm::object::XCOFFObjectFile::getSectionByNum((llvm::object::XCOFFObjectFile *)&v33, a1, (int)bswap32(*(unsigned __int16 *)(v14 + 12)) >> 16);
  if ((v34 & 1) != 0)
  {
    v32 = v33;
    llvm::consumeError(&v32);
    v19 = v32;
    if (!v32)
      goto LABEL_28;
LABEL_27:
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    goto LABEL_28;
  }
  v15 = v33;
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v17 = 36;
  if (v16)
    v17 = 64;
  if ((*(_DWORD *)((_BYTE *)v15 + v17) & 0x20000000) != 0)
    goto LABEL_25;
LABEL_28:
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) != 103)
    {
      v20 = (int)bswap32(*(unsigned __int16 *)(v8 + 12)) >> 16;
      if (v20 <= 0)
        goto LABEL_50;
      goto LABEL_35;
    }
LABEL_33:
    *(_BYTE *)(a3 + 8) &= ~1u;
    v18 = 4;
    goto LABEL_52;
  }
  if (*(_BYTE *)(v9 + 16) == 103)
    goto LABEL_33;
  v20 = (int)bswap32(*(unsigned __int16 *)(v9 + 12)) >> 16;
  if (v20 < 1)
    goto LABEL_50;
LABEL_35:
  llvm::object::XCOFFObjectFile::getSectionByNum((llvm::object::XCOFFObjectFile *)&v33, a1, v20);
  if ((v34 & 1) != 0)
  {
    v27 = v33;
  }
  else
  {
    v21 = v33;
    llvm::object::XCOFFSymbolRef::getName((llvm::object::XCOFFSymbolRef *)&v35, (uint64_t)&v29);
    if ((v37 & 1) == 0)
    {
      v22 = (const void *)v35;
      v23 = v36;
      if (v36 != 3 || (*(_WORD *)v35 == 20308 ? (v24 = *(_BYTE *)(v35 + 2) == 67) : (v24 = 0), !v24))
      {
        (*(void (**)(_QWORD *))(*a1 + 64))(a1);
        v25 = memchr(v21, 0, 8uLL);
        v26 = v25 - (_BYTE *)v21;
        if (!v25)
          v26 = 8;
        if (v26 != v23 || v23 && memcmp(v21, v22, v23))
        {
          if (((*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 208))(a1, v21) & 1) != 0
            || (*(unsigned int (**)(_QWORD *, _QWORD *))(*a1 + 216))(a1, v21))
          {
            *(_BYTE *)(a3 + 8) &= ~1u;
            v18 = 2;
            goto LABEL_52;
          }
          v28 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 264))(a1, v21);
          *(_BYTE *)(a3 + 8) &= ~1u;
          if (v28)
          {
            v18 = 3;
            goto LABEL_52;
          }
LABEL_51:
          v18 = 1;
          goto LABEL_52;
        }
      }
LABEL_50:
      *(_BYTE *)(a3 + 8) &= ~1u;
      goto LABEL_51;
    }
    v27 = (_QWORD *)v35;
  }
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v27;
}

void llvm::object::XCOFFObjectFile::getSectionByNum(llvm::object::XCOFFObjectFile *this, _QWORD *a2, int a3)
{
  llvm::object::XCOFFObjectFile *v4;
  unsigned int v5;
  _UNKNOWN **v7;
  llvm::formatv_object_base *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD v13[4];
  __int16 v14;
  llvm::formatv_object_base *v15[4];
  __int16 v16;
  uint64_t v17;
  std::string v18;
  llvm::formatv_object_base *v19;
  uint64_t v20[2];

  v4 = this;
  v5 = a3 - 1;
  if (a3 >= 1
    && (this = (llvm::object::XCOFFObjectFile *)(*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2),
        a3 <= (int)(bswap32(*(unsigned __int16 *)(a2[6] + 2)) >> 16)))
  {
    v10 = a2[8];
    v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 64))(a2);
    v12 = 40;
    if (v11)
      v12 = 72;
    v9 = v10 + v12 * (unint64_t)v5;
    *((_BYTE *)v4 + 8) &= ~1u;
  }
  else
  {
    v7 = llvm::object::object_category(this);
    v13[0] = "the section index (";
    v13[2] = a3;
    v14 = 2307;
    v15[0] = (llvm::formatv_object_base *)v13;
    v15[2] = (llvm::formatv_object_base *)") is invalid";
    v16 = 770;
    llvm::Twine::str(v15, &v18);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = (llvm::formatv_object_base *)&v18;
    else
      v8 = (llvm::formatv_object_base *)v18.__r_.__value_.__r.__words[0];
    v20[0] = 6;
    v20[1] = (uint64_t)v7;
    v19 = v8;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v19, v20, &v17);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    *((_BYTE *)v4 + 8) |= 1u;
    v9 = v17;
  }
  *(_QWORD *)v4 = v9;
}

void llvm::object::XCOFFObjectFile::getSymbolSection(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *))(*a1 + 64))(a1);
  v6 = bswap32(*(unsigned __int16 *)(a2 + 12)) >> 16;
  if ((unsigned __int16)(v6 + 2) > 2u)
  {
    llvm::object::XCOFFObjectFile::getSectionByNum((llvm::object::XCOFFObjectFile *)&v10, a1, (__int16)v6);
    v9 = v10;
    if ((v11 & 1) != 0)
    {
      *(_BYTE *)(a3 + 16) |= 1u;
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = a1;
    }
    *(_QWORD *)a3 = v9;
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 360))(a1);
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v8;
  }
}

uint64_t llvm::object::XCOFFObjectFile::moveSectionNext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = 40;
  if ((_DWORD)result)
    v5 = 72;
  *a2 = v3 + v5;
  return result;
}

_BYTE *llvm::object::XCOFFObjectFile::getSectionName@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *result;
  uint64_t v6;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result = memchr(a2, 0, 8uLL);
  v6 = result - (_BYTE *)a2;
  *(_BYTE *)(a3 + 16) &= ~1u;
  if (!result)
    v6 = 8;
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionAddress(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return bswap64(*(_QWORD *)(a2 + 16));
  else
    return bswap32(*(_DWORD *)(a2 + 12));
}

uint64_t llvm::object::XCOFFObjectFile::getSectionIndex(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v5 = 40;
  if (v4)
    v5 = 72;
  return (a2 - a1[8]) / v5 + 1;
}

unint64_t llvm::object::XCOFFObjectFile::getSectionSize(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return bswap64(*(_QWORD *)(a2 + 24));
  else
    return bswap32(*(_DWORD *)(a2 + 16));
}

_QWORD *llvm::object::XCOFFObjectFile::getSectionContents@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  llvm::formatv_object_base *v23[4];
  __int16 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;

  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) &= ~1u;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
      v7 = bswap64(*(_QWORD *)(a2 + 32));
    else
      v7 = bswap32(*(_DWORD *)(a2 + 20));
    v29 = v7;
    v8 = *(_QWORD *)(a1 + 16) + v7;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2);
    v28 = v9;
    v10 = *(_OWORD *)(a1 + 32);
    v26[0] = *(_OWORD *)(a1 + 16);
    v26[1] = v10;
    result = llvm::object::Binary::checkOffset((llvm::object *)v26, v8, v9, &v27);
    if (v27)
    {
      v13 = v27;
      v27 = 0;
      llvm::toString(&v13, &v14);
      v11 = std::string::append(&v14, ": section data with offset 0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v16 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v17[0] = __p;
      v17[2] = &v29;
      v18 = 3588;
      v19[0] = v17;
      v19[2] = " and size 0x";
      v20 = 770;
      v21[0] = v19;
      v21[2] = &v28;
      v22 = 3586;
      v23[0] = (llvm::formatv_object_base *)v21;
      v23[2] = (llvm::formatv_object_base *)" goes past the end of the file";
      v24 = 770;
      v30 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v23, &v30, &v25);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v25;
      v25 = 0;
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      result = (_QWORD *)v27;
      if (v27)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v8;
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionCompressed()
{
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::isSectionText(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(unsigned __int8 *)(a2 + v4 + 3) >> 5) & 1;
}

BOOL llvm::object::XCOFFObjectFile::isSectionData(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(_WORD *)(a2 + v4 + 2) & 0x4004) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionBSS(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(_WORD *)(a2 + v4 + 2) & 0x8008) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isDebugSection(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 36;
  if (v3)
    v4 = 64;
  return (*(_WORD *)(a2 + v4 + 2) & 0x1020) != 0;
}

BOOL llvm::object::XCOFFObjectFile::isSectionVirtual(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return *(_QWORD *)(a2 + 32) == 0;
  else
    return *(_DWORD *)(a2 + 20) == 0;
}

uint64_t llvm::object::XCOFFObjectFile::section_rel_begin(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>((uint64_t)v6, a1, a2);
  else
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>((uint64_t)v6, (uint64_t)a1, a2);
  result = v6[0];
  if ((v7 & 1) != 0 && v6[0])
  {
    v5 = (_QWORD *)v6[0];
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v5);
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    return 0;
  }
  return result;
}

char *llvm::object::XCOFFObjectFile::section_rel_end(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader64,llvm::object::XCOFFRelocation64>((uint64_t)&v9, a1, a2);
    v4 = v9;
    if ((v11 & 1) == 0 || !v9)
    {
      v5 = v10;
      v6 = 14;
      return (char *)v4 + v5 * v6;
    }
  }
  else
  {
    llvm::object::XCOFFObjectFile::relocations<llvm::object::XCOFFSectionHeader32,llvm::object::XCOFFRelocation32>((uint64_t)&v9, (uint64_t)a1, a2);
    v4 = v9;
    if ((v11 & 1) == 0 || !v9)
    {
      v5 = v10;
      v6 = 10;
      return (char *)v4 + v5 * v6;
    }
  }
  v8 = v4;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v8);
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return 0;
}

uint64_t llvm::object::XCOFFObjectFile::moveRelocationNext(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 10;
  if ((_DWORD)result)
    v4 = 14;
  *a2 += v4;
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationOffset(_QWORD *a1, unint64_t *a2)
{
  int v4;
  uint64_t v5;
  void (*v6)(_QWORD *);
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t *i;
  unint64_t v14;
  uint64_t result;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *j;
  unsigned int v23;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v5 = a1[8];
  v6 = *(void (**)(_QWORD *))(*a1 + 64);
  if (v4)
  {
    v7 = *a2;
    v6(a1);
    v8 = a1[6];
    v9 = *(unsigned __int16 *)(v8 + 2);
    if (*(_WORD *)(v8 + 2))
    {
      v10 = 0;
      v11 = bswap64(v7);
      v12 = __rev16(v9);
      for (i = (unint64_t *)(v5 + 24); ; i += 9)
      {
        v14 = bswap64(*(i - 1));
        result = v11 - v14;
        if (v11 >= v14 && v11 < bswap64(*i) + v14)
          break;
        if (v12 <= (unsigned __int16)++v10)
          return -1;
      }
      return result;
    }
    return -1;
  }
  v16 = *(_DWORD *)a2;
  v6(a1);
  v17 = a1[6];
  v18 = *(unsigned __int16 *)(v17 + 2);
  if (!*(_WORD *)(v17 + 2))
    return -1;
  v19 = 0;
  v20 = bswap32(v16);
  v21 = __rev16(v18);
  for (j = (unsigned int *)(v5 + 16); ; j += 10)
  {
    v23 = bswap32(*(j - 1));
    result = v20 - v23;
    if (v20 >= v23 && v20 < bswap32(*j) + v23)
      break;
    if (v21 <= (unsigned __int16)++v19)
      return -1;
  }
  return result;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationSymbol(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 64))(a1))
  {
    v4 = bswap32(*(_DWORD *)(a2 + 8));
    v5 = bswap32(*(_DWORD *)(a1[6] + 20));
  }
  else
  {
    v4 = bswap32(*(_DWORD *)(a2 + 4));
    v6 = bswap32(*(_DWORD *)(a1[6] + 12));
    v5 = v6 & ~(v6 >> 31);
  }
  if (v4 >= v5)
    return (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  else
    return a1[9] + 18 * v4;
}

uint64_t llvm::object::XCOFFObjectFile::getRelocationType(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v4 = 9;
  if (v3)
    v4 = 13;
  return *(unsigned __int8 *)(a2 + v4);
}

_QWORD *llvm::object::XCOFFObjectFile::getRelocationTypeName(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  char *RelocationTypeString;
  uint64_t v8;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = 9;
  if (v5)
    v6 = 13;
  RelocationTypeString = (char *)llvm::XCOFF::getRelocationTypeString(*(unsigned __int8 *)(a2 + v6));
  return llvm::SmallVectorImpl<char>::append<char const*,void>(a3, RelocationTypeString, &RelocationTypeString[v8]);
}

void llvm::object::XCOFFObjectFile::getSymbolFlags(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v25 = 0;
  v23 = a1;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v7 = 1;
  if (v6)
    v7 = 2;
  (&v23)[v7] = a2;
  v8 = v24;
  v9 = v25;
  if (v24)
    v10 = v24;
  else
    v10 = v25;
  v11 = *(unsigned __int16 *)(v10 + 12);
  v12 = *(unsigned __int8 *)(v10 + 16);
  if (v12 == 111)
    v13 = 6;
  else
    v13 = 2;
  v14 = v13 | (8 * (v11 == 0xFFFF));
  if (v12 == 111 || v12 == 2)
    v16 = v14;
  else
    v16 = 8 * (v11 == 0xFFFF);
  if (v12 == 2 || v12 == 111 || v12 == 107)
  {
    llvm::object::XCOFFSymbolRef::getXCOFFCsectAuxRef((llvm::object::XCOFFSymbolRef *)v26, &v23);
    v17 = v26[0];
    if ((v27 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v17;
      return;
    }
    if (!v26[0])
      v17 = v26[1];
    if ((*(_BYTE *)(v17 + 10) & 7) == 3)
      v16 |= 0x10u;
    v11 = *(unsigned __int16 *)(v10 + 12);
  }
  v18 = v16 | (v11 == 0);
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1) & 1) != 0
    || (v19 = a1[7]) != 0 && *(_WORD *)(v19 + 2) == 512)
  {
    if (v8)
      v20 = v8;
    else
      v20 = v9;
    v21 = (*(unsigned __int16 *)(v20 + 14) << 8) & 0x7000;
    v22 = v18 | 0x200;
    if (v21 != 0x2000)
      v22 = v18;
    if (v21 == 0x4000)
      v18 |= 0x40u;
    else
      v18 = v22;
  }
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v18;
}

uint64_t llvm::object::XCOFFObjectFile::symbol_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t llvm::object::XCOFFObjectFile::symbol_end(llvm::object::XCOFFObjectFile *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;

  v2 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  v3 = *((_QWORD *)this + 6);
  if (v2)
  {
    v4 = bswap32(*(_DWORD *)(v3 + 20));
  }
  else
  {
    v5 = bswap32(*(_DWORD *)(v3 + 12));
    v4 = v5 & ~(v5 >> 31);
  }
  return *((_QWORD *)this + 9) + 18 * v4;
}

uint64_t llvm::object::XCOFFObjectFile::section_begin(llvm::object::XCOFFObjectFile *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t llvm::object::XCOFFObjectFile::section_end(llvm::object::XCOFFObjectFile *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 8);
  (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  v3 = bswap32(*(unsigned __int16 *)(*((_QWORD *)this + 6) + 2)) >> 16;
  v4 = (*(uint64_t (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  v5 = 40;
  if (v4)
    v5 = 72;
  return v2 + v5 * (unint64_t)v3;
}

uint64_t llvm::object::XCOFFObjectFile::getBytesInAddress(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this))
    return 8;
  else
    return 4;
}

const char *llvm::object::XCOFFObjectFile::getFileFormatName(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this))
    return "aix5coff64-rs6000";
  else
    return "aixcoff-rs6000";
}

uint64_t llvm::object::XCOFFObjectFile::getArch(llvm::object::XCOFFObjectFile *this)
{
  if ((*(unsigned int (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this))
    return 23;
  else
    return 21;
}

void llvm::object::XCOFFObjectFile::getFeatures(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;
  void **v5;

  v3 = 0uLL;
  v4 = 0;
  llvm::SubtargetFeatures::Split((char **)&v3, (uint64_t)"", 0);
  *(_BYTE *)(a1 + 24) &= ~1u;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v3 = 0uLL;
  v4 = 0;
  v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
}

BOOL llvm::object::XCOFFObjectFile::isRelocatableObject(llvm::object::XCOFFObjectFile *this)
{
  (*(void (**)(llvm::object::XCOFFObjectFile *))(*(_QWORD *)this + 64))(this);
  return (*(_WORD *)(*((_QWORD *)this + 6) + 18) & 0x100) == 0;
}

void llvm::object::XCOFFObjectFile::getStartAddress(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = 0;
}

const char *llvm::object::XCOFFObjectFile::mapDebugSectionName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *result;

  result = (const char *)a2;
  switch(a3)
  {
    case 5:
      if (*(_DWORD *)a2 == 1953724260 && *(_BYTE *)(a2 + 4) == 114)
      {
        return "debug_str";
      }
      else if (*(_DWORD *)a2 == 1869379428 && *(_BYTE *)(a2 + 4) == 99)
      {
        return "debug_loc";
      }
      else if (!(*(_DWORD *)a2 ^ 0x616D7764 | *(unsigned __int8 *)(a2 + 4) ^ 0x63))
      {
        return "debug_macinfo";
      }
      break;
    case 7:
      if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1936551522)
      {
        return "debug_pubnames";
      }
      else if (*(_DWORD *)a2 == 1651537764 && *(_DWORD *)(a2 + 3) == 1887007842)
      {
        return "debug_pubtypes";
      }
      else if (*(_DWORD *)a2 == 1918990180 && *(_DWORD *)(a2 + 3) == 1701277298)
      {
        return "debug_aranges";
      }
      else if (*(_DWORD *)a2 == 1650554724 && *(_DWORD *)(a2 + 3) == 1986359906)
      {
        return "debug_abbrev";
      }
      else if (*(_DWORD *)a2 == 1852995428 && *(_DWORD *)(a2 + 3) == 1936025454)
      {
        return "debug_ranges";
      }
      else if (*(_DWORD *)a2 == 1919317860 && *(_DWORD *)(a2 + 3) == 1701667186)
      {
        return "debug_frame";
      }
      break;
    case 6:
      if (*(_DWORD *)a2 == 1852405604 && *(_WORD *)(a2 + 4) == 28518)
      {
        return "debug_info";
      }
      else if (*(_DWORD *)a2 == 1768716132 && *(_WORD *)(a2 + 4) == 25966)
      {
        return "debug_line";
      }
      break;
  }
  return result;
}

BOOL llvm::object::XCOFFObjectFile::is64Bit(llvm::object::XCOFFObjectFile *this)
{
  return *((_DWORD *)this + 2) == 12;
}

llvm::object *llvm::object::XCOFFObjectFile::create@<X0>(int a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  llvm::object *result;
  unsigned int v15;
  unint64_t v16;
  void (**v17)(llvm::object::XCOFFObjectFile *__hidden);
  unsigned int v18;
  int v19;
  unsigned int v20;
  std::string *v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  llvm::object *v54;
  std::string v55;
  std::string v56;
  _QWORD v57[2];
  unint64_t *v58;
  __int16 v59;
  _QWORD v60[2];
  const char *v61;
  __int16 v62;
  _QWORD v63[2];
  std::string *v64;
  __int16 v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  unsigned int v73;

  v6 = operator new();
  v7 = a2[1];
  *(_OWORD *)(v6 + 16) = *a2;
  *(_OWORD *)(v6 + 32) = v7;
  *(_DWORD *)(v6 + 8) = a1;
  *(_QWORD *)v6 = &off_251C1BF70;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 88) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(v6 + 80) = 0;
  v8 = *(_QWORD *)(v6 + 16);
  v10 = *a2;
  v9 = a2[1];
  v50 = *a2;
  v51 = v9;
  v11 = a2[1];
  if (a1 == 12)
    v12 = 24;
  else
    v12 = 20;
  v66 = v10;
  v67 = v11;
  llvm::object::Binary::checkOffset((llvm::object *)&v66, v8, v12, v63);
  v13 = v63[0];
  if (v63[0])
    goto LABEL_5;
  *(_QWORD *)(v6 + 48) = v8;
  v52 = v12;
  v15 = *(unsigned __int16 *)(v8 + 16);
  if (*(_WORD *)(v8 + 16))
  {
    v16 = v8 + v12;
    v66 = v50;
    v67 = v51;
    llvm::object::Binary::checkOffset((llvm::object *)&v66, v16, __rev16(v15), v63);
    v13 = v63[0];
    if (v63[0])
    {
LABEL_5:
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v13;
      return (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    *(_QWORD *)(v6 + 56) = v16;
    v17 = *(void (***)(llvm::object::XCOFFObjectFile *__hidden))v6;
  }
  else
  {
    v17 = &off_251C1BF70;
  }
  v17[8]((llvm::object::XCOFFObjectFile *)v6);
  v52 += bswap32(*(unsigned __int16 *)(*(_QWORD *)(v6 + 48) + 16)) >> 16;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  if (*(_WORD *)(*(_QWORD *)(v6 + 48) + 2))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    v18 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v6 + 48) + 2)) >> 16;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    v20 = 40;
    if (v19)
      v20 = 72;
    v55.__r_.__value_.__r.__words[0] = v20 * (unint64_t)v18;
    v66 = v50;
    v67 = v51;
    llvm::object::Binary::checkOffset((llvm::object *)&v66, v8 + v52, v55.__r_.__value_.__r.__words[0], v63);
    if (v63[0])
    {
      v48 = v63[0];
      llvm::toString(&v48, &v56);
      v21 = std::string::append(&v56, ": section headers with offset 0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      v70 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      *(_QWORD *)&v71 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v57[0] = &v70;
      v58 = &v52;
      v59 = 3588;
      v60[0] = v57;
      v61 = " and size 0x";
      v62 = 770;
      v63[0] = v60;
      v64 = &v55;
      v65 = 3586;
      *(_QWORD *)&v66 = v63;
      *(_QWORD *)&v67 = " go past the end of the file";
      v68 = 770;
      LODWORD(v72) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>((llvm::formatv_object_base **)&v66, (unsigned int *)&v72, &v49);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v49;
      v49 = 0;
      if (SBYTE7(v71) < 0)
        operator delete((void *)v70);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v23 = v48;
      if (!v48)
        return (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      goto LABEL_35;
    }
    *(_QWORD *)(v6 + 64) = v8 + v52;
  }
  result = (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v24 = *(_QWORD *)(v6 + 48);
  if ((_DWORD)result)
  {
    v25 = bswap32(*(_DWORD *)(v24 + 20));
    if (!v25)
      goto LABEL_45;
LABEL_26:
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    v28 = *(_QWORD *)(v6 + 48);
    if (v27)
      v29 = bswap64(*(_QWORD *)(v28 + 8));
    else
      v29 = bswap32(*(_DWORD *)(v28 + 8));
    v52 = v29;
    v30 = 18 * v25;
    v47 = v30;
    v66 = v50;
    v67 = v51;
    v31 = v8 + v29;
    llvm::object::Binary::checkOffset((llvm::object *)&v66, v31, v30, v63);
    if (v63[0])
    {
      v45 = v63[0];
      llvm::toString(&v45, &v56);
      v32 = std::string::append(&v56, ": symbol table with offset 0x");
      v33 = v32->__r_.__value_.__r.__words[2];
      v70 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      *(_QWORD *)&v71 = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v57[0] = &v70;
      v58 = &v52;
      v59 = 3588;
      v60[0] = v57;
      v61 = " and size 0x";
      v62 = 770;
      v63[0] = v60;
      v64 = (std::string *)&v47;
      v65 = 3586;
      *(_QWORD *)&v66 = v63;
      *(_QWORD *)&v67 = " goes past the end of the file";
      v68 = 770;
      LODWORD(v55.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>((llvm::formatv_object_base **)&v66, (unsigned int *)&v55, &v46);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v46;
      v46 = 0;
      if (SBYTE7(v71) < 0)
        operator delete((void *)v70);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v23 = v45;
      if (!v45)
        return (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
LABEL_35:
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      return (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    v34 = (_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 72) = v31;
    v35 = v52 + v30;
    v52 = v35;
    v72 = v35;
    v36 = *(_OWORD *)(v6 + 32);
    v70 = *(_OWORD *)(v6 + 16);
    v71 = v36;
    result = (llvm::object *)llvm::object::Binary::checkOffset((llvm::object *)&v70, *(_QWORD *)(v6 + 16) + v35, 4uLL, v63);
    v37 = v63[0];
    if (v63[0])
    {
      v63[0] = 0;
      *(_QWORD *)&v66 = v37;
      llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&v66);
      if ((_QWORD)v66)
        (*(void (**)(_QWORD))(*(_QWORD *)v66 + 8))(v66);
      result = (llvm::object *)v63[0];
      if (v63[0])
        result = (llvm::object *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v63[0] + 8))(v63[0]);
      v38 = 0;
      v39 = 0;
      goto LABEL_44;
    }
    v39 = (unsigned int *)(*v34 + v35);
    v38 = bswap32(*v39);
    if (v38 < 5)
    {
      v39 = 0;
      v38 = 4;
LABEL_44:
      *(_QWORD *)(v6 + 80) = v38;
      *(_QWORD *)(v6 + 88) = v39;
      goto LABEL_45;
    }
    v40 = *(_OWORD *)(v6 + 32);
    v66 = *(_OWORD *)v34;
    v67 = v40;
    result = (llvm::object *)llvm::object::Binary::checkOffset((llvm::object *)&v66, (unint64_t)v39, v38, v63);
    if (v63[0])
    {
      v54 = (llvm::object *)v63[0];
      llvm::toString((uint64_t *)&v54, &v55);
      v41 = std::string::append(&v55, ": string table with offset 0x");
      v42 = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v57[0] = &v56;
      v58 = &v72;
      v59 = 3588;
      v60[0] = v57;
      v61 = " and size 0x";
      v62 = 770;
      v53 = v38;
      v63[0] = v60;
      v64 = (std::string *)&v53;
      v65 = 3586;
      *(_QWORD *)&v66 = v63;
      *(_QWORD *)&v67 = " goes past the end of the file";
      v68 = 770;
      v73 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>((llvm::formatv_object_base **)&v66, &v73, (uint64_t *)&v69);
      v43 = v69;
      v69 = 0;
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      result = v54;
      if (v54)
        result = (llvm::object *)(*(uint64_t (**)(llvm::object *))(*(_QWORD *)v54 + 8))(v54);
      if (!v43)
      {
        *(_QWORD *)(v6 + 80) = 0;
        goto LABEL_45;
      }
    }
    else
    {
      if (!*((_BYTE *)v39 + (v38 - 1)))
        goto LABEL_44;
      v44 = llvm::object::object_category(result);
      v43 = (_QWORD *)operator new();
      *v43 = &off_251C12820;
      v43[1] = 5;
      v43[2] = v44;
    }
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v43;
    return (llvm::object *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v26 = bswap32(*(_DWORD *)(v24 + 12));
  v25 = v26 & ~(v26 >> 31);
  if (v25)
    goto LABEL_26;
LABEL_45:
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v6;
  return result;
}

void llvm::object::XCOFFObjectFile::~XCOFFObjectFile(llvm::object::XCOFFObjectFile *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::opt::Arg::Arg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v11;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a9;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 40) = a6;
  *(_BYTE *)(a1 + 44) &= 0xFCu;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  v11 = (unsigned int *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_QWORD *)(a1 + 80) = 0;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(a1 + 48), a7);
  llvm::SmallVectorTemplateBase<void *,true>::push_back(v11, a8);
  return a1;
}

void llvm::opt::Arg::~Arg(llvm::opt::Arg *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v2 = *((unsigned int *)this + 14);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 6) + v3);
        if (v5)
          MEMORY[0x24BD1B380](v5, 0x1000C8077774924);
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100]((llvm::opt::Arg **)this + 10, 0);
  v6 = (char *)*((_QWORD *)this + 6);
  if (v6 != (char *)this + 64)
    free(v6);
}

uint64_t llvm::opt::ArgList::MakeArgString(llvm::opt::ArgList *this, const llvm::Twine *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  __int128 v8;
  _QWORD v9[33];

  v9[32] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef((unsigned __int8 *)a2, (uint64_t)&v7);
  v5 = (*(uint64_t (**)(llvm::opt::ArgList *, uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v3, v4);
  if (v7 != v9)
    free(v7);
  return v5;
}

llvm::opt::Arg *std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100](llvm::opt::Arg **a1, llvm::opt::Arg *a2)
{
  llvm::opt::Arg *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::opt::Arg::~Arg(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::opt::ArgList::append(llvm::opt::ArgList *this, llvm::opt::Arg *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];

  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)this + 2, (uint64_t)a2);
  result = llvm::opt::Option::getUnaliasedOption(a2);
  if (result)
  {
    v6 = result;
    v7 = v5;
    do
    {
      LODWORD(v14[0]) = *(_DWORD *)(v6 + 48);
      *(_QWORD *)((char *)v14 + 4) = 0xFFFFFFFFLL;
      v12 = v14[0];
      v13 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::try_emplace<std::pair<unsigned int,unsigned int>>((uint64_t)this + 152, &v12, (uint64_t *)((char *)&v12 + 4), (uint64_t)v14);
      v8 = v14[0];
      v9 = *((_DWORD *)this + 4);
      v10 = v9 - 1;
      if ((v9 - 1) >= *(_DWORD *)(v14[0] + 4))
        v10 = *(_DWORD *)(v14[0] + 4);
      *(_DWORD *)(v14[0] + 4) = v10;
      *(_DWORD *)(v8 + 8) = v9;
      if (!*(_WORD *)(v6 + 60))
        break;
      v11 = *(_QWORD *)(v7 + 8);
      v6 = v11 + 80 * (*(unsigned __int16 *)(v6 + 60) - 1);
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::opt::Option::getUnaliasedOption(llvm::opt::Option *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  result = *(_QWORD *)this;
  if (*(_WORD *)(result + 62))
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(_QWORD *)(v3 + 8);
    v5[0] = v4 + 80 * (*(unsigned __int16 *)(result + 62) - 1);
    v5[1] = v3;
    if (v4)
      return llvm::opt::Option::getUnaliasedOption((llvm::opt::Option *)v5);
  }
  return result;
}

uint64_t llvm::opt::InputArgList::releaseMemory(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 16);
  if ((_DWORD)v1)
  {
    v2 = 8 * v1;
    for (i = *(uint64_t **)(this + 8); !*i; ++i)
    {
      v2 -= 8;
      if (!v2)
        return this;
    }
  }
  else
  {
    i = *(uint64_t **)(this + 8);
  }
  v4 = *(_QWORD *)(this + 8) + 8 * v1;
  if (i != (uint64_t *)v4)
  {
    this = *i;
LABEL_9:
    if (this)
    {
      llvm::opt::Arg::~Arg((llvm::opt::Arg *)this);
      this = MEMORY[0x24BD1B3A4]();
    }
    while (++i != (uint64_t *)v4)
    {
      this = *i;
      if (*i)
      {
        if (i != (uint64_t *)v4)
          goto LABEL_9;
        return this;
      }
    }
  }
  return this;
}

uint64_t llvm::opt::InputArgList::MakeArgStringRef(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 __dst;
  unint64_t v16;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = *(unsigned int *)(a1 + 184);
  v7 = a1 + 320;
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v16 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v11 = (char *)operator new(0x28uLL);
  v12 = v11 + 16;
  *((_OWORD *)v11 + 1) = __dst;
  *((_QWORD *)v11 + 4) = v16;
  v13 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)v11 = v13;
  *((_QWORD *)v11 + 1) = v7;
  *(_QWORD *)(v13 + 8) = v11;
  *(_QWORD *)(a1 + 320) = v11;
  ++*(_QWORD *)(a1 + 336);
  if (v11[39] < 0)
    v12 = (_QWORD *)*v12;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(a1 + 176), (uint64_t)v12);
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v6);
}

uint64_t llvm::opt::InputArgList::getArgString(llvm::opt::InputArgList *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 22) + 8 * a2);
}

uint64_t llvm::opt::InputArgList::getNumInputArgStrings(llvm::opt::InputArgList *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::try_emplace<std::pair<unsigned int,unsigned int>>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<unsigned int>(a1, (uint64_t)a2, a2, v12);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a2;
    *(_QWORD *)(result + 4) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 12 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 12 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 12 * v3;
      v13 = v4;
      do
      {
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>,unsigned int,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::pair<unsigned int,unsigned int>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13, &v17);
          v14 = v17;
          *v17 = *(_DWORD *)v13;
          *(_QWORD *)(v14 + 1) = *(_QWORD *)(v13 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 12;
        v12 -= 12;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 12 * v15;
    do
    {
      *result = -1;
      result += 3;
      v16 -= 12;
    }
    while (v16);
  }
  return result;
}

unsigned int *std::make_unique[abi:nn180100]<llvm::opt::Arg,llvm::opt::Option const&,llvm::StringRef &,unsigned int,char const*>(uint64_t *a1, _OWORD *a2, _OWORD *a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *result;

  v10 = operator new();
  v11 = *a4;
  v12 = *a5;
  *(_OWORD *)v10 = *a2;
  *(_QWORD *)(v10 + 16) = 0;
  *(_OWORD *)(v10 + 24) = *a3;
  *(_DWORD *)(v10 + 40) = v11;
  *(_BYTE *)(v10 + 44) &= 0xFCu;
  *(_QWORD *)(v10 + 48) = v10 + 64;
  *(_QWORD *)(v10 + 56) = 0x200000000;
  *(_QWORD *)(v10 + 80) = 0;
  result = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v10 + 48), v12);
  *a1 = v10;
  return result;
}

unsigned int *llvm::opt::Option::accept@<X0>(llvm::opt::Option *a1@<X0>, llvm::opt::ArgList *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unsigned int *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  int v14;
  const char *v15;
  unsigned int *result;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  const char *ArgString;
  const char *v23;
  size_t v24;
  int v25;
  uint64_t v26;
  void **v27;
  const char *v28;
  const char *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  __int16 v35;
  uint64_t v36;

  if (!a5 || *(_BYTE *)(*(_QWORD *)a1 + 52) != 3)
  {
    *(_QWORD *)&v34[0] = a3;
    *((_QWORD *)&v34[0] + 1) = a4;
    v15 = (const char *)(**(uint64_t (***)(llvm::opt::ArgList *, _QWORD))a2)(a2, *a6);
    if (v15)
      strlen(v15);
    __asm { BR              X11 }
  }
  v13 = operator new();
  v14 = *a6;
  *(_OWORD *)v13 = *(_OWORD *)a1;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = a3;
  *(_QWORD *)(v13 + 32) = a4;
  *(_DWORD *)(v13 + 40) = v14;
  *(_BYTE *)(v13 + 44) &= 0xFCu;
  *(_QWORD *)(v13 + 48) = v13 + 64;
  *(_QWORD *)(v13 + 56) = 0x200000000;
  *(_QWORD *)(v13 + 80) = 0;
  result = (unsigned int *)llvm::opt::Option::getUnaliasedOption(a1);
  if (*(_DWORD *)(*(_QWORD *)a1 + 48) == result[12])
  {
    *a7 = v13;
    return result;
  }
  v18 = result;
  v19 = v17;
  if (*((_QWORD *)result + 1))
    v20 = *(_OWORD *)*(_QWORD *)result;
  else
    v20 = 0uLL;
  v21 = *((_OWORD *)result + 1);
  v34[0] = v20;
  v34[1] = v21;
  v35 = 1285;
  ArgString = (const char *)llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)v34);
  v23 = ArgString;
  if (ArgString)
    v24 = strlen(ArgString);
  else
    v24 = 0;
  v25 = *(_DWORD *)(v13 + 40);
  v26 = operator new();
  *(_QWORD *)v26 = v18;
  *(_QWORD *)(v26 + 8) = v19;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = v23;
  *(_QWORD *)(v26 + 32) = v24;
  *(_DWORD *)(v26 + 40) = v25;
  *(_BYTE *)(v26 + 44) &= 0xFCu;
  *(_QWORD *)(v26 + 48) = v26 + 64;
  v27 = (void **)(v26 + 48);
  *(_QWORD *)(v26 + 56) = 0x200000000;
  *(_QWORD *)(v26 + 80) = 0;
  *a7 = v26;
  v36 = 0;
  result = (unsigned int *)std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100]((llvm::opt::Arg **)(v26 + 80), (llvm::opt::Arg *)v13);
  if (*(_BYTE *)(*(_QWORD *)a1 + 52) != 3)
  {
    if (v26 == v13)
    {
LABEL_35:
      *(_BYTE *)(v26 + 44) = *(_BYTE *)(v26 + 44) & 0xFD | *(_BYTE *)(v13 + 44) & 2;
      *(_BYTE *)(v13 + 44) &= ~2u;
      return result;
    }
    v31 = *(unsigned int *)(v13 + 56);
    v32 = *(unsigned int *)(v26 + 56);
    if (v32 >= v31)
    {
      if ((_DWORD)v31)
        result = (unsigned int *)memmove(*v27, *(const void **)(v13 + 48), 8 * v31);
      goto LABEL_34;
    }
    if (*(_DWORD *)(v26 + 60) >= v31)
    {
      if ((_DWORD)v32)
      {
        result = (unsigned int *)memmove(*v27, *(const void **)(v13 + 48), 8 * v32);
        goto LABEL_32;
      }
    }
    else
    {
      *(_DWORD *)(v26 + 56) = 0;
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v27, (void *)(v26 + 64), v31, 8);
    }
    v32 = 0;
LABEL_32:
    v33 = *(unsigned int *)(v13 + 56);
    if (v32 != v33)
      result = (unsigned int *)memcpy((char *)*v27 + 8 * v32, (const void *)(*(_QWORD *)(v13 + 48) + 8 * v32), 8 * v33 - 8 * v32);
LABEL_34:
    *(_DWORD *)(v26 + 56) = v31;
    goto LABEL_35;
  }
  v28 = *(const char **)(*(_QWORD *)a1 + 64);
  if (v28 && *v28)
  {
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v27, (uint64_t)v28);
      result = (unsigned int *)strlen(v28);
      v29 = &v28[(_QWORD)result];
      v30 = *((unsigned __int8 *)v29 + 1);
      v28 = v29 + 1;
    }
    while (v30);
  }
  if (*((_BYTE *)v18 + 52) == 4 && !*(_QWORD *)(*(_QWORD *)a1 + 64))
    return llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v27, (uint64_t)"");
  return result;
}

uint64_t llvm::opt::OptTable::OptTable(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)result = &unk_251C1C168;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 24) = a4;
  *(_BYTE *)(result + 25) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = result + 80;
  *(_OWORD *)(result + 64) = xmmword_24AA2ACB0;
  if ((_DWORD)a3)
  {
    v4 = 0;
    v5 = a2 + 48;
    do
    {
      v6 = *(unsigned __int8 *)(v5 + 4);
      if (*(_BYTE *)(v5 + 4))
      {
        if (v6 == 2)
        {
          *(_DWORD *)(result + 44) = *(_DWORD *)v5;
        }
        else
        {
          if (v6 != 1)
          {
            *(_DWORD *)(result + 48) = v4;
            return result;
          }
          *(_DWORD *)(result + 40) = *(_DWORD *)v5;
        }
      }
      ++v4;
      v5 += 80;
    }
    while (a3 != v4);
  }
  return result;
}

char *llvm::opt::OptTable::buildPrefixChars(size_t *this)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;

  result = (char *)(*(uint64_t (**)(size_t *))*this)(this);
  if (v3)
  {
    v4 = (uint64_t)result;
    v5 = &result[16 * v3];
    do
    {
      v6 = *(_QWORD *)(v4 + 8);
      if (v6)
      {
        v7 = *(char **)v4;
        do
        {
          v8 = *v7;
          v9 = (char *)this[7];
          v10 = this[8];
          result = (char *)memchr(v9, *v7, v10);
          if (result)
            v11 = result;
          else
            v11 = &v9[v10];
          if (v11 - v9 == v10)
            result = (char *)llvm::SmallVectorTemplateBase<char,true>::push_back(this + 7, v8);
          ++v7;
          --v6;
        }
        while (v6);
      }
      v4 += 16;
    }
    while ((char *)v4 != v5);
  }
  return result;
}

void *llvm::opt::OptTable::parseOneArgGrouped@<X0>(llvm::opt::OptTable *this@<X0>, llvm::opt::InputArgList *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t first_not_of;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int matched;
  unsigned int v25;
  void *result;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  const char *ArgString;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  unsigned int v41;
  unint64_t v43;
  uint64_t v44;
  llvm::opt::OptTable *v45;
  uint64_t v46;
  unint64_t v47;
  __int16 v48;
  _QWORD v49[2];
  _QWORD v50[2];

  v7 = *(_QWORD *)(*((_QWORD *)a2 + 22) + 8 * *a3);
  v50[0] = v7;
  if (v7)
    v8 = strlen((const char *)v7);
  else
    v8 = 0;
  v50[1] = v8;
  v9 = (**(uint64_t (***)(llvm::opt::OptTable *))this)(this);
  v43 = v8;
  if (isInput(v9, v10, (_BYTE *)v7, v8))
  {
    v11 = *((_DWORD *)this + 10);
    if (v11)
    {
LABEL_6:
      v12 = *((_QWORD *)this + 1) + 80 * (v11 - 1);
LABEL_35:
      v32 = (*a3)++;
      v33 = operator new();
      *(_QWORD *)v33 = v12;
      *(_QWORD *)(v33 + 8) = this;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = v7;
      *(_QWORD *)(v33 + 32) = v43;
      *(_DWORD *)(v33 + 40) = v32;
      *(_BYTE *)(v33 + 44) &= 0xFCu;
      *(_QWORD *)(v33 + 48) = v33 + 64;
      *(_QWORD *)(v33 + 56) = 0x200000000;
      *(_QWORD *)(v33 + 80) = 0;
      result = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v33 + 48), v7);
      *a4 = v33;
      return result;
    }
LABEL_34:
    this = 0;
    v12 = 0;
    goto LABEL_35;
  }
  v13 = v8;
  v14 = *((_QWORD *)this + 1);
  v15 = v14 + 80 * *((_QWORD *)this + 2);
  first_not_of = llvm::StringRef::find_first_not_of(v50, *((unsigned __int8 **)this + 7), *((_QWORD *)this + 8), 0);
  if (first_not_of >= v13)
    v17 = v13;
  else
    v17 = first_not_of;
  v18 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::opt::OptTable::Info const*,llvm::opt::OptTable::Info const*,llvm::StringRef,std::__identity,std::__less<void,void>>(v14 + 80 * *((unsigned int *)this + 12), v15, (char *)(v7 + v17), v13 - v17);
  if (v18 != v15)
  {
    v19 = (uint64_t *)v18;
    v20 = 0;
    v21 = *a3;
    v22 = v43;
    do
    {
      v23 = v7;
      matched = matchOption(v19, (char *)v7, v22, *((unsigned __int8 *)this + 24));
      if (matched)
      {
        v25 = matched;
        v44 = (uint64_t)v19;
        v45 = this;
        result = llvm::opt::Option::accept((llvm::opt::Option *)&v44, a2, *(_QWORD *)(*((_QWORD *)a2 + 22) + 8 * v21), matched, 0, a3, a4);
        if (*a4)
          return result;
        result = std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100]((llvm::opt::Arg **)a4, 0);
        if (v25 == 2 && *(_BYTE *)(v44 + 52) == 3)
          v20 = v19;
        v7 = v23;
        v22 = v43;
        if ((_DWORD)v21 != *a3)
        {
          *a4 = 0;
          return result;
        }
      }
      v19 += 10;
    }
    while (v19 != (uint64_t *)v15);
    if (v20)
    {
      v49[0] = v20;
      v49[1] = this;
      if (*(_BYTE *)(v7 + 2) == 61)
      {
        v27 = *((_DWORD *)this + 11);
        if (v27)
        {
          v28 = *((_QWORD *)this + 1) + 80 * (v27 - 1);
        }
        else
        {
          this = 0;
          v28 = 0;
        }
        *a3 = v21 + 1;
        v31 = operator new();
        *(_QWORD *)v31 = v28;
        *(_QWORD *)(v31 + 8) = this;
        *(_QWORD *)(v31 + 16) = 0;
        *(_QWORD *)(v31 + 24) = v7;
        *(_QWORD *)(v31 + 32) = v43;
        *(_DWORD *)(v31 + 40) = v21;
        *(_BYTE *)(v31 + 44) &= 0xFCu;
        *(_QWORD *)(v31 + 48) = v31 + 64;
        *(_QWORD *)(v31 + 56) = 0x200000000;
        *(_QWORD *)(v31 + 80) = 0;
        result = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v31 + 48), v7);
        *a4 = v31;
        return result;
      }
      if (v43 >= 2)
        v29 = 2;
      else
        v29 = v43;
      llvm::opt::Option::accept((llvm::opt::Option *)v49, a2, v7, v29, 1, a3, a4);
      if (*a4)
      {
        v30 = *a3;
        v44 = 45;
        v46 = v7 + v29;
        v47 = v43 - v29;
        v48 = 1287;
        result = (void *)llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)&v44);
        *(_QWORD *)(*((_QWORD *)a2 + 22) + 8 * v30) = result;
        return result;
      }
      std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100]((llvm::opt::Arg **)a4, 0);
    }
  }
  if (*(_BYTE *)(v7 + 1) == 45)
  {
    v11 = *((_DWORD *)this + 11);
    if (v11)
      goto LABEL_6;
    goto LABEL_34;
  }
  v48 = 261;
  if (v43 >= 2)
    v34 = 2;
  else
    v34 = v43;
  v44 = v7;
  v45 = (llvm::opt::OptTable *)v34;
  ArgString = (const char *)llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)&v44);
  v36 = *a3;
  v44 = 45;
  v46 = v7 + v34;
  v47 = v43 - v34;
  v48 = 1287;
  *(_QWORD *)(*((_QWORD *)a2 + 22) + 8 * v36) = llvm::opt::ArgList::MakeArgString(a2, (const llvm::Twine *)&v44);
  v37 = *((_DWORD *)this + 11);
  if (v37)
  {
    v38 = *((_QWORD *)this + 1) + 80 * (v37 - 1);
  }
  else
  {
    this = 0;
    v38 = 0;
  }
  v39 = operator new();
  if (ArgString)
    v40 = strlen(ArgString);
  else
    v40 = 0;
  v41 = *a3;
  *(_QWORD *)v39 = v38;
  *(_QWORD *)(v39 + 8) = this;
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = ArgString;
  *(_QWORD *)(v39 + 32) = v40;
  *(_DWORD *)(v39 + 40) = v41;
  *(_BYTE *)(v39 + 44) &= 0xFCu;
  *(_QWORD *)(v39 + 48) = v39 + 64;
  *(_QWORD *)(v39 + 56) = 0x200000000;
  *(_QWORD *)(v39 + 80) = 0;
  result = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v39 + 48), (uint64_t)ArgString);
  *a4 = v39;
  return result;
}

uint64_t isInput(uint64_t a1, uint64_t a2, _BYTE *__s1, size_t a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t result;

  v6 = a1;
  if ((a4 != 1 || *__s1 != 45) && a2)
  {
    v7 = a1 + 16 * a2;
    do
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (a4 >= v8)
      {
        if (!v8)
          return 0;
        result = memcmp(__s1, *(const void **)v6, v8);
        if (!(_DWORD)result)
          return result;
      }
      v6 += 16;
    }
    while (v6 != v7);
  }
  return 1;
}

uint64_t matchOption(uint64_t *a1, char *__s1, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;

  v4 = a1[1];
  if (!v4)
    return 0;
  v9 = *a1;
  v10 = *a1 + 16 * v4;
  while (1)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (a3 < v11 || v11 && memcmp(__s1, *(const void **)v9, *(_QWORD *)(v9 + 8)))
      goto LABEL_16;
    v12 = a3 >= v11 ? v11 : a3;
    v13 = &__s1[v12];
    v14 = a3 - v12;
    v15 = (const char *)a1[2];
    v16 = a1[3];
    if (!a4)
      break;
    if (v14 >= v16 && !ascii_strncasecmp(v13, v15, a1[3]))
      return (v16 + v11);
LABEL_16:
    v9 += 16;
    if (v9 == v10)
      return 0;
  }
  if (v14 < v16 || v16 && memcmp(v13, v15, a1[3]))
    goto LABEL_16;
  return (v16 + v11);
}

void *llvm::opt::OptTable::ParseOneArg@<X0>(llvm::opt::OptTable *this@<X0>, const llvm::opt::ArgList *a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unsigned int v12;
  const char *v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t first_not_of;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int matched;
  int v29;
  BOOL v30;
  int v31;
  unsigned int v33;
  uint64_t v34;
  void *result;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t *v44;
  _QWORD v45[2];
  _QWORD v46[2];

  v12 = *a3;
  v13 = (const char *)(**(uint64_t (***)(const llvm::opt::ArgList *, _QWORD))a2)(a2, *a3);
  v14 = (char *)v13;
  v46[0] = v13;
  if (v13)
    v15 = strlen(v13);
  else
    v15 = 0;
  v46[1] = v15;
  v16 = (**(uint64_t (***)(llvm::opt::OptTable *))this)(this);
  if (isInput(v16, v17, v14, v15))
  {
    v18 = *((_DWORD *)this + 10);
    if (v18)
    {
      v19 = *((_QWORD *)this + 1) + 80 * (v18 - 1);
    }
    else
    {
      this = 0;
      v19 = 0;
    }
    v38 = (*a3)++;
    v39 = operator new();
    *(_QWORD *)v39 = v19;
    *(_QWORD *)(v39 + 8) = this;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)(v39 + 24) = v14;
    *(_QWORD *)(v39 + 32) = v15;
    *(_DWORD *)(v39 + 40) = v38;
    *(_BYTE *)(v39 + 44) &= 0xFCu;
    *(_QWORD *)(v39 + 48) = v39 + 64;
    *(_QWORD *)(v39 + 56) = 0x200000000;
    *(_QWORD *)(v39 + 80) = 0;
    result = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v39 + 48), (uint64_t)v14);
    *a6 = v39;
  }
  else
  {
    v42 = a4;
    v43 = a5;
    v44 = a6;
    v20 = *((_QWORD *)this + 1);
    v21 = v20 + 80 * *((unsigned int *)this + 12);
    v22 = v20 + 80 * *((_QWORD *)this + 2);
    first_not_of = llvm::StringRef::find_first_not_of(v46, *((unsigned __int8 **)this + 7), *((_QWORD *)this + 8), 0);
    if (first_not_of >= v15)
      v24 = v15;
    else
      v24 = first_not_of;
    v25 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::opt::OptTable::Info const*,llvm::opt::OptTable::Info const*,llvm::StringRef,std::__identity,std::__less<void,void>>(v21, v22, &v14[v24], v15 - v24);
    if (v25 == v22)
    {
LABEL_28:
      if (*v14 == 47)
        v36 = *((_DWORD *)this + 10);
      else
        v36 = *((_DWORD *)this + 11);
      if (v36)
      {
        v37 = *((_QWORD *)this + 1) + 80 * (v36 - 1);
      }
      else
      {
        this = 0;
        v37 = 0;
      }
      v40 = (*a3)++;
      v41 = operator new();
      *(_QWORD *)v41 = v37;
      *(_QWORD *)(v41 + 8) = this;
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)(v41 + 24) = v14;
      *(_QWORD *)(v41 + 32) = v15;
      *(_DWORD *)(v41 + 40) = v40;
      *(_BYTE *)(v41 + 44) &= 0xFCu;
      *(_QWORD *)(v41 + 48) = v41 + 64;
      *(_QWORD *)(v41 + 56) = 0x200000000;
      *(_QWORD *)(v41 + 80) = 0;
      result = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v41 + 48), (uint64_t)v14);
      *v44 = v41;
    }
    else
    {
      v26 = v25;
      while (1)
      {
        v27 = *((unsigned __int8 *)this + 24);
        v26 += 80;
        while (1)
        {
          matched = matchOption((uint64_t *)(v26 - 80), v14, v15, v27 != 0);
          if (matched)
            break;
          v30 = v26 == v22;
          v26 += 80;
          if (v30)
            goto LABEL_28;
        }
        v29 = *(_DWORD *)(v26 - 24);
        v30 = (v29 & v42) != 0 || v42 == 0;
        v45[0] = v26 - 80;
        v45[1] = this;
        v31 = v29 & v43;
        if (v30 && v31 == 0)
        {
          v33 = matched;
          v34 = (**(uint64_t (***)(const llvm::opt::ArgList *, _QWORD))a2)(a2, *a3);
          result = llvm::opt::Option::accept((llvm::opt::Option *)v45, a2, v34, v33, 0, a3, v44);
          if (*v44)
            return result;
          result = std::unique_ptr<llvm::opt::Arg>::reset[abi:nn180100]((llvm::opt::Arg **)v44, 0);
          if (v12 != *a3)
            break;
        }
        if (v26 == v22)
          goto LABEL_28;
      }
      *v44 = 0;
    }
  }
  return result;
}

llvm::opt::Arg *llvm::opt::OptTable::ParseArgs@<X0>(llvm::opt::OptTable *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _DWORD *a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  unsigned int v12;
  unsigned int *v15;
  uint64_t v16;
  llvm::opt::Arg *result;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  llvm::opt::Arg *v21;
  llvm::opt::Arg *v22;
  unsigned int v23;

  v12 = a3;
  *(_QWORD *)(a8 + 16) = 0x1000000000;
  *(_QWORD *)(a8 + 152) = 0;
  *(_QWORD *)(a8 + 160) = 0;
  *(_DWORD *)(a8 + 168) = 0;
  *(_QWORD *)a8 = &off_251C1C140;
  *(_QWORD *)(a8 + 8) = a8 + 24;
  *(_QWORD *)(a8 + 176) = a8 + 192;
  v15 = (unsigned int *)(a8 + 176);
  *(_QWORD *)(a8 + 184) = 0x1000000000;
  v16 = a8 + 320;
  *(_QWORD *)(a8 + 320) = v16;
  *(_QWORD *)(a8 + 328) = v16;
  *(_QWORD *)(a8 + 336) = 0;
  *(_DWORD *)(a8 + 344) = a3;
  result = (llvm::opt::Arg *)llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(v15, a2, &a2[8 * a3]);
  *a5 = 0;
  *a4 = 0;
  v23 = 0;
  if (v12)
  {
    v18 = 0;
    do
    {
      v19 = *(_BYTE **)(*(_QWORD *)v15 + 8 * v18);
      if (v19)
      {
        if (*v19)
        {
          if (*((_BYTE *)a1 + 25))
            result = (llvm::opt::Arg *)llvm::opt::OptTable::parseOneArgGrouped(a1, (llvm::opt::InputArgList *)a8, &v23, (uint64_t *)&v22);
          else
            result = (llvm::opt::Arg *)llvm::opt::OptTable::ParseOneArg(a1, (const llvm::opt::ArgList *)a8, &v23, a6, a7, (uint64_t *)&v22);
          v21 = v22;
          if (v22)
          {
            v22 = 0;
            llvm::opt::ArgList::append((llvm::opt::ArgList *)a8, v21);
            result = v22;
            v22 = 0;
            if (result)
            {
              llvm::opt::Arg::~Arg(result);
              result = (llvm::opt::Arg *)MEMORY[0x24BD1B3A4]();
            }
            v20 = 0;
          }
          else
          {
            *a4 = v18;
            *a5 = v23 + ~v18;
            v20 = 3;
          }
          v18 = v23;
        }
        else
        {
          v23 = ++v18;
          v20 = 2;
        }
        if (v20 == 3)
          return result;
      }
      else
      {
        v23 = ++v18;
      }
    }
    while (v18 < v12);
  }
  return result;
}

uint64_t std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::opt::OptTable::Info const*,llvm::opt::OptTable::Info const*,llvm::StringRef,std::__identity,std::__less<void,void>>(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = a2;
  if (a2 != a1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
    v4 = a1;
    do
    {
      v8 = v4 + 80 * (v7 >> 1);
      v9 = *(_QWORD *)(v8 + 24);
      if (a4 >= v9)
        v10 = *(_QWORD *)(v8 + 24);
      else
        v10 = a4;
      v11 = ascii_strncasecmp(*(const char **)(v8 + 16), a3, v10);
      if (v9 > a4)
        v12 = -1;
      else
        v12 = 1;
      if (v9 == a4)
        v12 = 0;
      if (v11)
        v12 = v11;
      if (v12 >= 0)
        v7 >>= 1;
      else
        v7 += ~(v7 >> 1);
      if (v12 < 0)
        v4 = v8 + 80;
    }
    while (v7);
  }
  return v4;
}

void llvm::readWideAPInt(unint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, llvm::APInt *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v16 = v18;
  v17 = 0x800000000;
  llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)&v16, a2);
  v8 = v16;
  if (a2)
  {
    v9 = 8 * a2;
    v10 = (unint64_t *)v16;
    do
    {
      v12 = *a1++;
      v11 = v12;
      v13 = -(uint64_t)(v12 >> 1);
      if (v12 == 1)
        v13 = 0x8000000000000000;
      if ((v11 & 1) != 0)
        v14 = v13;
      else
        v14 = v11 >> 1;
      *v10++ = v14;
      v9 -= 8;
    }
    while (v9);
  }
  v15 = v17;
  *((_DWORD *)a4 + 2) = a3;
  llvm::APInt::initFromArray(a4, v8, v15);
  if (v16 != v18)
    free(v16);
}

_UNKNOWN **llvm::BitcodeErrorCategory(llvm *this)
{
  unsigned __int8 v1;

  {
  }
  return &llvm::BitcodeErrorCategory(void)::ErrorCategory;
}

uint64_t llvm::getBitcodeModuleList@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  llvm::getBitcodeFileContents((unsigned __int8 **)v6, (uint64_t)&v7);
  if ((v9 & 1) != 0)
  {
    v4 = v7;
    v7 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
  }
  else
  {
    *(_BYTE *)(a2 + 24) &= ~1u;
    v4 = v7;
    *(_OWORD *)(a2 + 8) = v8;
    v7 = 0;
    v8 = 0uLL;
  }
  *(_QWORD *)a2 = v4;
  return llvm::Expected<llvm::BitcodeFileContents>::~Expected((uint64_t)&v7);
}

void llvm::getBitcodeFileContents(unsigned __int8 **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  llvm::formatv_object_base *v15;
  llvm::formatv_object_base *v16;
  const std::error_category *v17;
  llvm::formatv_object_base *v18;
  const std::error_category *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::formatv_object_base *v65;
  uint64_t v66;
  uint64_t v67;
  llvm::formatv_object_base *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74[2];
  _QWORD v75[33];
  char v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  llvm::formatv_object_base *v86;
  char v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  if ((v3 & 3) != 0)
  {
    *(_QWORD *)&v77 = "Invalid bitcode signature";
    LOWORD(v79) = 259;
    error((const llvm::Twine *)&v67, (llvm::formatv_object_base **)&v77);
    v76 = -1;
    v4 = v67;
LABEL_3:
    *(_QWORD *)&v69 = v4;
    goto LABEL_108;
  }
  v6 = *a1;
  v7 = &v3[(_QWORD)*a1];
  if (v3 && *v6 == 222 && v6[1] == 192 && v6[2] == 23 && v6[3] == 11)
  {
    if ((v3 & 0xFFFFFFF0) == 0
      || (v8 = *((unsigned int *)v6 + 2), v9 = *((unsigned int *)v6 + 3), v9 + v8 > (unint64_t)v3))
    {
      *(_QWORD *)&v77 = "Invalid bitcode wrapper header";
      LOWORD(v79) = 259;
      error((const llvm::Twine *)&v66, (llvm::formatv_object_base **)&v77);
      v76 = -1;
      v4 = v66;
      goto LABEL_3;
    }
    v6 += v8;
    v7 = &v6[v9];
  }
  *(_QWORD *)&v77 = v6;
  *((_QWORD *)&v77 + 1) = v7 - v6;
  v78 = 0uLL;
  v79 = 0x200000000;
  v80 = 0uLL;
  v81 = 0;
  v82 = (char *)&v84;
  v83 = 0x800000000;
  v85 = 0;
  if ((unint64_t)(v7 - v6) <= 3)
  {
    *(_QWORD *)&v69 = 92;
    *((_QWORD *)&v69 + 1) = std::generic_category();
    *(_QWORD *)&v88 = "file too small to contain bitcode header";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v88, (uint64_t *)&v69, (uint64_t *)&v65);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    LOWORD(v68) = 17218;
    while (1)
    {
      v12 = v10;
      v13 = *((char *)&v68 + v11);
      llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v77, 8u, (uint64_t)&v88);
      if ((BYTE8(v88) & 1) != 0)
      {
        v16 = (llvm::formatv_object_base *)v88;
LABEL_29:
        v65 = v16;
        goto LABEL_33;
      }
      if ((_QWORD)v88 != v13)
        break;
      v10 = 1;
      v11 = 1;
      if ((v12 & 1) != 0)
      {
        v14 = 0;
        v88 = xmmword_24AA32390;
        while (1)
        {
          v15 = (llvm::formatv_object_base *)*(unsigned int *)((char *)&v88 + v14);
          llvm::SimpleBitstreamCursor::Read((llvm::SimpleBitstreamCursor *)&v77, 4u, (uint64_t)&v86);
          if ((v87 & 1) != 0)
          {
            v16 = v86;
            goto LABEL_29;
          }
          if (v86 != v15)
            break;
          v14 += 4;
          if (v14 == 16)
            goto LABEL_35;
        }
        v19 = std::generic_category();
        *(_QWORD *)&v69 = 92;
        *((_QWORD *)&v69 + 1) = v19;
        v68 = (llvm::formatv_object_base *)"file doesn't start with bitcode header";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v68, (uint64_t *)&v69, (uint64_t *)&v65);
        if ((v87 & 1) != 0)
        {
          v18 = v86;
          v86 = 0;
          if (v18)
            goto LABEL_32;
        }
        goto LABEL_33;
      }
    }
    v17 = std::generic_category();
    *(_QWORD *)&v69 = 92;
    *((_QWORD *)&v69 + 1) = v17;
    v86 = (llvm::formatv_object_base *)"file doesn't start with bitcode header";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v86, (uint64_t *)&v69, (uint64_t *)&v65);
    if ((BYTE8(v88) & 1) != 0)
    {
      v18 = (llvm::formatv_object_base *)v88;
      *(_QWORD *)&v88 = 0;
      if (v18)
LABEL_32:
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
LABEL_33:
  if (v65)
  {
    v76 = -1;
    *(_QWORD *)&v69 = v65;
  }
  else
  {
LABEL_35:
    v76 = 0;
    v71 = v79;
    v69 = v77;
    v70 = v78;
    v72 = v80;
    v20 = v81;
    v81 = 0;
    v80 = 0uLL;
    v73 = v20;
    v74[0] = (char *)v75;
    v74[1] = (char *)0x800000000;
    if ((_DWORD)v83)
      llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)v74, (uint64_t)&v82);
    v75[32] = v85;
  }
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(&v82);
  *(_QWORD *)&v88 = &v80;
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  if ((v76 & 1) != 0)
  {
LABEL_108:
    v56 = v69;
    *(_QWORD *)&v69 = 0;
    *(_BYTE *)(a2 + 56) |= 1u;
    *(_QWORD *)a2 = v56;
    goto LABEL_109;
  }
  v21 = 8 * v70 - v71;
  v22 = v21 >> 3;
  if ((v21 >> 3) + 8 < *((_QWORD *)&v69 + 1))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v61 = 0;
    v62 = 0;
    v27 = 0;
    while (1)
    {
      llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v69, 0, (uint64_t)&v88);
      if ((BYTE8(v88) & 1) != 0)
      {
        v28 = v88;
        *(_QWORD *)&v88 = 0;
        goto LABEL_48;
      }
      if (v88 < 2)
        break;
      if ((_DWORD)v88 != 2)
      {
        if ((_DWORD)v88 != 3)
        {
          v29 = 0;
          goto LABEL_51;
        }
        llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v69, SDWORD1(v88), (uint64_t)&v77);
        if ((BYTE8(v77) & 1) == 0)
          goto LABEL_84;
LABEL_83:
        v28 = v77;
        if (!(_QWORD)v77)
        {
LABEL_84:
          v29 = 2;
          goto LABEL_51;
        }
LABEL_48:
        *(_BYTE *)(a2 + 56) |= 1u;
        *(_QWORD *)a2 = v28;
LABEL_50:
        v29 = 1;
        goto LABEL_51;
      }
      if (SDWORD1(v88) <= 22)
      {
        if (DWORD1(v88) == 8)
        {
          v59 = v26;
          v60 = v27;
          v35 = v21 & 0xFFFFFFFFFFFFFFF8;
          v36 = -1;
LABEL_71:
          v37 = v70;
          v38 = v71;
          llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v69, (uint64_t *)&v77);
          v33 = v77;
          if (!(_QWORD)v77)
          {
            v39 = 8 * v37 - (v35 + v38);
            v40 = ((8 * (_QWORD)v70 - (unint64_t)v71) >> 3) - v22;
            v41 = v69 + v22;
            v42 = a1[2];
            v43 = a1[3];
            if ((unint64_t)v24 >= v25)
            {
              v45 = (v24 - v23) >> 6;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 58)
                abort();
              if ((uint64_t)(v25 - (_QWORD)v23) >> 5 > v46)
                v46 = (uint64_t)(v25 - (_QWORD)v23) >> 5;
              if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFC0)
                v47 = 0x3FFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
              {
                v48 = v40;
                v58 = v39;
                v47 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::wasm::WasmSignature>>(v47);
                v39 = v58;
                v40 = v48;
              }
              else
              {
                v49 = 0;
              }
              v50 = (_QWORD *)(v47 + (v45 << 6));
              *v50 = v41;
              v50[1] = v40;
              v50[2] = v42;
              v50[3] = v43;
              v50[4] = 0;
              v50[5] = 0;
              v50[6] = v36;
              v50[7] = v39;
              if (v24 == v23)
              {
                v55 = (char *)(v47 + (v45 << 6));
              }
              else
              {
                v51 = v47 + (v45 << 6);
                do
                {
                  v52 = *((_OWORD *)v24 - 4);
                  v53 = *((_OWORD *)v24 - 3);
                  v54 = *((_OWORD *)v24 - 1);
                  v55 = (char *)(v51 - 64);
                  *(_OWORD *)(v51 - 32) = *((_OWORD *)v24 - 2);
                  *(_OWORD *)(v51 - 16) = v54;
                  *(_OWORD *)(v51 - 64) = v52;
                  *(_OWORD *)(v51 - 48) = v53;
                  v24 -= 64;
                  v51 -= 64;
                }
                while (v24 != v23);
              }
              v25 = v47 + (v49 << 6);
              v24 = (char *)(v50 + 8);
              if (v23)
                operator delete(v23);
              v29 = 2;
              v23 = v55;
            }
            else
            {
              *(_QWORD *)v24 = v41;
              *((_QWORD *)v24 + 1) = v40;
              *((_QWORD *)v24 + 2) = v42;
              *((_QWORD *)v24 + 3) = v43;
              *((_QWORD *)v24 + 4) = 0;
              *((_QWORD *)v24 + 5) = 0;
              *((_QWORD *)v24 + 6) = v36;
              *((_QWORD *)v24 + 7) = v39;
              v24 += 64;
              v29 = 2;
            }
            goto LABEL_97;
          }
LABEL_95:
          *(_BYTE *)(a2 + 56) |= 1u;
          *(_QWORD *)a2 = v33;
          goto LABEL_96;
        }
        if (DWORD1(v88) == 13)
        {
          v59 = v26;
          v60 = v27;
          v31 = v70;
          v32 = v71;
          llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v69, (uint64_t *)&v77);
          v33 = v77;
          if (!(_QWORD)v77)
          {
            llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v69, 0, (uint64_t)&v77);
            if ((BYTE8(v77) & 1) == 0)
            {
              if ((_QWORD)v77 == 0x800000002)
              {
                v34 = 8 * v31;
                v35 = v21 & 0xFFFFFFFFFFFFFFF8;
                v36 = v34 - ((v21 & 0xFFFFFFFFFFFFFFF8) + v32);
                goto LABEL_71;
              }
              *(_QWORD *)&v77 = "Malformed block";
              LOWORD(v79) = 259;
              error((const llvm::Twine *)&v63, (llvm::formatv_object_base **)&v77);
              *(_BYTE *)(a2 + 56) |= 1u;
              *(_QWORD *)a2 = v63;
              v63 = 0;
LABEL_96:
              v29 = 1;
LABEL_97:
              v26 = v59;
              v27 = v60;
              goto LABEL_51;
            }
            v33 = v77;
          }
          goto LABEL_95;
        }
LABEL_82:
        llvm::BitstreamCursor::SkipBlock((llvm::BitstreamCursor *)&v69, (uint64_t *)&v77);
        goto LABEL_83;
      }
      if (DWORD1(v88) == 23)
      {
        readBlobInRecord((llvm::BitstreamCursor *)&v77, (llvm::BitstreamCursor *)&v69, 23);
        if ((v78 & 1) != 0)
          goto LABEL_85;
        if (v24 != v23)
        {
          v44 = v24;
          do
          {
            if (*((_QWORD *)v44 - 3))
              break;
            *((_OWORD *)v44 - 2) = v77;
            v44 -= 64;
          }
          while (v44 != v23);
        }
        v29 = 2;
        if (v62 && !v61)
        {
          v61 = *((_QWORD *)&v77 + 1);
          v27 = v77;
        }
      }
      else
      {
        if (DWORD1(v88) != 25)
          goto LABEL_82;
        readBlobInRecord((llvm::BitstreamCursor *)&v77, (llvm::BitstreamCursor *)&v69, 25);
        if ((v78 & 1) != 0)
        {
LABEL_85:
          v28 = v77;
          goto LABEL_48;
        }
        if (v62)
          goto LABEL_84;
        v29 = 2;
        v62 = *((_QWORD *)&v77 + 1);
        v26 = v77;
      }
LABEL_51:
      if ((BYTE8(v88) & 1) != 0)
      {
        v30 = v88;
        *(_QWORD *)&v88 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      if ((v29 | 2) != 2)
      {
        if (v23)
          operator delete(v23);
        goto LABEL_109;
      }
      v21 = 8 * v70 - v71;
      v22 = v21 >> 3;
      if ((v21 >> 3) + 8 >= *((_QWORD *)&v69 + 1))
        goto LABEL_115;
    }
    *(_QWORD *)&v77 = "Malformed block";
    LOWORD(v79) = 259;
    error((const llvm::Twine *)&v64, (llvm::formatv_object_base **)&v77);
    *(_BYTE *)(a2 + 56) |= 1u;
    *(_QWORD *)a2 = v64;
    v64 = 0;
    goto LABEL_50;
  }
  v26 = 0;
  v61 = 0;
  v62 = 0;
  v27 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
LABEL_115:
  *(_BYTE *)(a2 + 56) &= ~1u;
  *(_QWORD *)a2 = v23;
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v26;
  *(_QWORD *)(a2 + 32) = v62;
  *(_QWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 48) = v61;
LABEL_109:
  if ((v76 & 1) != 0)
  {
    v57 = v69;
    *(_QWORD *)&v69 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
  else
  {
    llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(v74);
    *(_QWORD *)&v77 = &v72;
    std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v77);
  }
}

void llvm::BitstreamCursor::advance(llvm::BitstreamCursor *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int8 *)(a3 + 8);
  while (*((_DWORD *)this + 8) || *((_QWORD *)this + 1) > *((_QWORD *)this + 2))
  {
    llvm::BitstreamCursor::ReadCode(this, (uint64_t)&v12);
    if ((v13 & 1) != 0)
    {
      v7 = v12;
      v12 = 0;
      goto LABEL_12;
    }
    if ((_DWORD)v12 != 2)
    {
      if ((_DWORD)v12 != 1)
      {
        if (!(_DWORD)v12)
        {
          if ((a2 & 1) != 0 || !llvm::BitstreamCursor::ReadBlockEnd(this))
          {
            v6 &= ~1u;
            *(_BYTE *)(a3 + 8) = v6;
            v8 = 1;
            *(_QWORD *)a3 = 1;
            goto LABEL_22;
          }
          v6 &= ~1u;
          *(_BYTE *)(a3 + 8) = v6;
          *(_QWORD *)a3 = 0;
          goto LABEL_21;
        }
LABEL_16:
        v7 = ((unint64_t)v12 << 32) | 3;
LABEL_19:
        v6 &= ~1u;
LABEL_20:
        *(_BYTE *)(a3 + 8) = v6;
        *(_QWORD *)a3 = v7;
LABEL_21:
        v8 = 1;
        goto LABEL_22;
      }
      llvm::SimpleBitstreamCursor::ReadVBR(this, 8u, (uint64_t)&v10);
      if ((v11 & 1) == 0)
      {
        v7 = ((unint64_t)v10 << 32) | 2;
        goto LABEL_19;
      }
      v7 = v10;
LABEL_12:
      v6 |= 1u;
      goto LABEL_20;
    }
    if ((a2 & 2) != 0)
      goto LABEL_16;
    llvm::BitstreamCursor::ReadAbbrevRecord(this, (uint64_t *)&v10);
    v7 = v10;
    if (v10)
      goto LABEL_12;
    v8 = 2;
LABEL_22:
    if ((v13 & 1) != 0)
    {
      v9 = v12;
      v12 = 0;
      if (v9)
        (*(void (**)(unint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    if (v8 == 1)
      return;
  }
  *(_BYTE *)(a3 + 8) = v6 & 0xFE;
  *(_QWORD *)a3 = 0;
}

void error(const llvm::Twine *a1, llvm::formatv_object_base **a2)
{
  uint64_t v4;

  llvm::BitcodeErrorCategory(a1);
  v4 = operator new();
  *(_QWORD *)v4 = off_251C127D0;
  llvm::Twine::str(a2, (std::string *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = 1;
  *(_QWORD *)(v4 + 40) = &llvm::BitcodeErrorCategory(void)::ErrorCategory;
  *(_BYTE *)(v4 + 48) = 1;
  *(_QWORD *)a1 = v4;
}

{
  _UNKNOWN **v4;
  uint64_t v5;

  v4 = llvm::BitcodeErrorCategory(a1);
  v5 = operator new();
  *(_QWORD *)v5 = off_251C127D0;
  llvm::Twine::str(a2, (std::string *)(v5 + 8));
  *(_QWORD *)(v5 + 32) = 1;
  *(_QWORD *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 48) = 1;
  *(_QWORD *)a1 = v5;
}

void llvm::BitstreamCursor::SkipBlock(llvm::BitstreamCursor *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  BOOL v5;
  char v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const std::error_category *v11;
  llvm::formatv_object_base *v12;
  unint64_t v13;
  llvm::formatv_object_base *v14[4];
  void *__p[2];
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  const std::error_category *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  llvm::SimpleBitstreamCursor::ReadVBR(this, 4u, (uint64_t)&v18);
  if ((v19 & 1) != 0
    || ((v4 = *((_DWORD *)this + 8), v5 = v4 >= 0x20, v6 = v4 - 32, v5)
      ? (*((_QWORD *)this + 3) >>= v6, v7 = 32)
      : (v7 = 0),
        *((_DWORD *)this + 8) = v7,
        llvm::SimpleBitstreamCursor::Read(this, 0x20u, (uint64_t)&v18),
        (v19 & 1) != 0))
  {
    *a2 = v18;
  }
  else
  {
    v8 = *((unsigned int *)this + 8);
    v9 = *((_QWORD *)this + 1);
    v10 = *((_QWORD *)this + 2);
    if ((_DWORD)v8 || v9 > v10)
    {
      v12 = (llvm::formatv_object_base *)(8 * v10 - v8);
      v13 = (unint64_t)v12 + 32 * v18;
      if (v9 >= v13 >> 3)
      {
        llvm::SimpleBitstreamCursor::JumpToBit(this, v13, a2);
        if (!*a2)
          *a2 = 0;
      }
      else
      {
        v17[0] = 92;
        v17[1] = (uint64_t)std::generic_category();
        __p[0] = 0;
        __p[1] = 0;
        v16 = 0;
        LODWORD(v19) = 0;
        v23 = 0;
        v24 = 0;
        v25 = 1;
        v21 = 0;
        v22 = 0;
        v20 = 0;
        v18 = (uint64_t)&off_251C13AC0;
        v26 = __p;
        llvm::raw_ostream::SetUnbuffered(&v18);
        v14[0] = (llvm::formatv_object_base *)&off_251C1C3C8;
        v14[1] = (llvm::formatv_object_base *)"can't skip to bit %zu from %llu";
        v14[2] = (llvm::formatv_object_base *)v13;
        v14[3] = v12;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v18, (uint64_t)v14);
        llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)v26, v17, a2);
        v18 = (uint64_t)off_251C13948;
        if (v25 == 1 && v20)
          MEMORY[0x24BD1B380](v20, 0x1000C8077774924);
        if (SHIBYTE(v16) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      v11 = std::generic_category();
      v18 = 92;
      v19 = v11;
      v14[0] = (llvm::formatv_object_base *)"can't skip block: already at end of stream";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(v14, &v18, a2);
    }
  }
}

void readBlobInRecord(llvm::BitstreamCursor *a1, llvm::BitstreamCursor *a2, int a3)
{
  void *v5;
  int v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  void *v17[2];
  _WORD v18[12];
  void *v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(a2, 0, a3, (uint64_t *)v17);
  v5 = v17[0];
  if (v17[0])
  {
    *((_BYTE *)a1 + 16) |= 1u;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    v14 = 0uLL;
    v6 = *((unsigned __int8 *)a1 + 16);
    do
    {
      llvm::BitstreamCursor::advance(a2, 0, (uint64_t)&v19);
      if ((v20 & 1) != 0)
      {
        v7 = 0;
        v8 = v19;
        v19 = 0;
LABEL_8:
        v6 |= 1u;
        *((_BYTE *)a1 + 16) = v6;
        *(_QWORD *)a1 = v8;
      }
      else
      {
        switch((int)v19)
        {
          case 0:
            v17[0] = "Malformed block";
            v18[8] = 259;
            error((const llvm::Twine *)&v13, (llvm::formatv_object_base **)v17);
            v7 = 0;
            v6 |= 1u;
            *((_BYTE *)a1 + 16) = v6;
            *(_QWORD *)a1 = v13;
            v13 = 0;
            break;
          case 1:
            v7 = 0;
            v6 &= ~1u;
            *((_BYTE *)a1 + 16) = v6;
            *(_OWORD *)a1 = v14;
            break;
          case 2:
            llvm::BitstreamCursor::SkipBlock(a2, (uint64_t *)v17);
            v8 = v17[0];
            if (!v17[0])
              goto LABEL_19;
            v7 = 0;
            goto LABEL_8;
          case 3:
            v12 = 0uLL;
            v17[0] = v18;
            v17[1] = (void *)0x100000000;
            llvm::BitstreamCursor::readRecord(a2, SHIDWORD(v19), (unsigned int *)v17, (unsigned __int8 **)&v12, (uint64_t)&v15);
            v9 = v16;
            if ((v16 & 1) != 0)
            {
              v10 = v15;
              v6 |= 1u;
              *((_BYTE *)a1 + 16) = v6;
              *(_QWORD *)a1 = v10;
            }
            else if ((_DWORD)v15 == 1)
            {
              v14 = v12;
            }
            if (v17[0] != v18)
              free(v17[0]);
            if ((v9 & 1) == 0)
              goto LABEL_19;
            v7 = 0;
            break;
          default:
LABEL_19:
            v7 = 1;
            break;
        }
      }
      if ((v20 & 1) != 0)
      {
        v11 = v19;
        v19 = 0;
        if (v11)
          (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    while ((v7 & 1) != 0);
  }
}

void llvm::BitcodeModule::getModuleImpl(__int128 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, char a5@<W4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v14;
  unint64_t v15;
  llvm::MetadataLoader::MetadataLoaderImpl *v16;
  llvm::MetadataLoader::MetadataLoaderImpl **v17;
  int v18;
  void **v19;
  char v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::string *v31;
  size_t size;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  void **v36;
  unint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  llvm::MetadataLoader::MetadataLoaderImpl *v50;
  llvm::MetadataLoader::MetadataLoaderImpl *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  llvm::MetadataLoader::MetadataLoaderImpl **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void ***v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  llvm::MetadataLoader::MetadataLoaderImpl *v71;
  uint64_t v72;
  std::string *__src;
  __int128 v74;
  int v75;
  int v76;
  _BYTE *v77;
  char v78;
  char v79;
  int v80;
  int v81;
  std::string v82;
  _QWORD v83[4];
  __int16 v84;
  uint64_t v85[4];
  __int16 v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string __p;
  _QWORD v90[3];
  _QWORD *v91;
  char v92;
  _QWORD v93[3];
  _QWORD *v94;
  char v95;
  _QWORD v96[3];
  _QWORD *v97;
  char v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string v109;
  unsigned __int8 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 __dst;
  unint64_t v122;
  __int128 *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  char v128;
  void **p_dst;
  uint64_t v130;
  const char *v131;
  void ***p_p_dst;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  char v137;
  std::string::size_type v138;
  char v139;
  llvm::MetadataLoader::MetadataLoaderImpl *v140[2];
  __int128 v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _BYTE v148[24];
  _BYTE *v149;
  char v150;
  uint64_t v151;
  uint64_t v152;

  v152 = *MEMORY[0x24BDAC8D0];
  v111 = *a1;
  v112 = 0uLL;
  v14 = (unint64_t)&v114;
  v113 = 0x200000000;
  v114 = 0;
  v116 = 0;
  v115 = 0;
  v117 = (char *)&v119;
  v118 = 0x800000000;
  v120 = 0;
  memset(&v82, 0, sizeof(v82));
  v15 = *((_QWORD *)a1 + 6);
  if (v15 == -1)
    goto LABEL_37;
  llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)&v111, v15, v140);
  v16 = v140[0];
  if (v140[0])
  {
LABEL_38:
    *(_BYTE *)(a7 + 8) |= 1u;
    *(_QWORD *)a7 = v16;
    goto LABEL_39;
  }
  v17 = v140;
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v111, 0, 13, (uint64_t *)v140);
  if (v140[0])
  {
    v110 |= 1u;
    v109.__r_.__value_.__l.__data_ = (std::string::pointer)v140[0];
    if ((v110 & 1) != 0)
      goto LABEL_35;
    goto LABEL_5;
  }
  v78 = a5;
  v80 = a4;
  v75 = a3;
  v140[0] = (llvm::MetadataLoader::MetadataLoaderImpl *)&v141;
  v140[1] = (llvm::MetadataLoader::MetadataLoaderImpl *)0x4000000000;
  memset(&__p, 0, sizeof(__p));
  v18 = v110;
  while (1)
  {
    llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)&v111, 0, (uint64_t)&p_dst);
    if ((v130 & 1) == 0)
      break;
    v19 = p_dst;
    if (p_dst)
    {
      v110 = v18 | 1;
      goto LABEL_29;
    }
LABEL_11:
    LODWORD(v140[1]) = 0;
    llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)&v111, (int)v17, (unsigned int *)v140, 0, (uint64_t)&v138);
    if ((v139 & 1) != 0)
    {
      v20 = 0;
      v21 = v138;
      v138 = 0;
      v18 |= 1u;
      v110 = v18;
      v109.__r_.__value_.__r.__words[0] = v21;
      goto LABEL_20;
    }
    if ((_DWORD)v138 == 1)
    {
      std::string::append[abi:nn180100]<unsigned long long const*,0>(&__p, (std::string *)v140[0], (std::string *)((char *)v140[0] + 8 * LODWORD(v140[1])));
LABEL_18:
      v20 = 1;
      goto LABEL_20;
    }
    if ((_DWORD)v138 == 2)
    {
      if (*(_DWORD *)v140[0])
      {
        a4 = *(unsigned int *)v140[0] | a4 & 0xFFFFFFFF00000000;
        v83[0] = "Incompatible epoch: Bitcode '";
        v83[2] = a4;
        v84 = 2051;
        v85[0] = (uint64_t)v83;
        v85[2] = (uint64_t)"' vs current: '";
        v86 = 770;
        v14 &= 0xFFFFFFFF00000000;
        *(_QWORD *)&__dst = v85;
        v122 = v14;
        LOWORD(v124[0]) = 2306;
        p_dst = (void **)&__dst;
        v131 = "'";
        LOWORD(v133[0]) = 770;
        error((const llvm::Twine *)&v87, (llvm::formatv_object_base **)&p_dst);
        v20 = 0;
        v18 |= 1u;
        v110 = v18;
        v109.__r_.__value_.__r.__words[0] = v87;
        v87 = 0;
        goto LABEL_20;
      }
      goto LABEL_18;
    }
    p_dst = (void **)"Invalid value";
    LOWORD(v133[0]) = 259;
    error((const llvm::Twine *)&v88, (llvm::formatv_object_base **)&p_dst);
    v20 = 0;
    v18 |= 1u;
    v110 = v18;
    v109.__r_.__value_.__r.__words[0] = v88;
    v88 = 0;
LABEL_20:
    if ((v139 & 1) != 0)
    {
      v22 = v138;
      v138 = 0;
      if (v22)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 8))(v22);
    }
    if ((v20 & 1) == 0)
      goto LABEL_30;
  }
  if ((_DWORD)p_dst == 3)
  {
    LODWORD(v17) = HIDWORD(p_dst);
    goto LABEL_11;
  }
  if ((_DWORD)p_dst == 1)
  {
    v110 = v18 & 0xFE;
    v109 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_30;
  }
  p_dst = (void **)"Malformed block";
  LOWORD(v133[0]) = 259;
  error((const llvm::Twine *)&__dst, (llvm::formatv_object_base **)&p_dst);
  v110 = v18 | 1;
  v19 = (void **)__dst;
LABEL_29:
  v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
LABEL_30:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a3 = v75;
  a5 = v78;
  LODWORD(a4) = v80;
  if ((__int128 *)v140[0] != &v141)
    free(v140[0]);
  if ((v110 & 1) == 0)
  {
LABEL_5:
    v82 = v109;
    *((_BYTE *)&v109.__r_.__value_.__s + 23) = 0;
    v109.__r_.__value_.__s.__data_[0] = 0;
    llvm::Expected<std::string>::~Expected((uint64_t)&v109);
    goto LABEL_37;
  }
LABEL_35:
  v23 = v109.__r_.__value_.__r.__words[0];
  v109.__r_.__value_.__r.__words[0] = 0;
  llvm::Expected<std::string>::~Expected((uint64_t)&v109);
  if (v23)
  {
    *(_BYTE *)(a7 + 8) |= 1u;
    *(_QWORD *)a7 = v23;
    goto LABEL_39;
  }
LABEL_37:
  llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)&v111, *((_QWORD *)a1 + 7), v140);
  v16 = v140[0];
  if (v140[0])
    goto LABEL_38;
  v77 = a6;
  v24 = operator new();
  v99 = v111;
  v100 = v112;
  v25 = HIDWORD(v113);
  v26 = v114;
  v27 = v115;
  v101 = v113;
  v102 = v114;
  v28 = v116;
  v103 = v115;
  v104 = v116;
  v115 = 0;
  v116 = 0;
  v114 = 0;
  v105 = (char *)&v107;
  v106 = 0x800000000;
  v76 = a3;
  v79 = a5;
  v81 = a4;
  if ((_DWORD)v118)
  {
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)&v105, (uint64_t)&v117);
    v25 = HIDWORD(v101);
    v26 = v102;
    v27 = v103;
    v28 = v104;
    v29 = v106;
  }
  else
  {
    v29 = 0;
  }
  v30 = v120;
  v108 = v120;
  v74 = a1[2];
  v31 = &v82;
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = (std::string *)v82.__r_.__value_.__r.__words[0];
  __src = v31;
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    size = v82.__r_.__value_.__l.__size_;
  v33 = (_QWORD *)(v24 + 8);
  *(_OWORD *)v140 = v99;
  v141 = v100;
  v142 = __PAIR64__(v25, v101);
  v143 = v26;
  v144 = v27;
  v145 = v28;
  v103 = 0;
  v104 = 0;
  v102 = 0;
  v146 = v148;
  v147 = 0x800000000;
  if (v29)
  {
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=((uint64_t)&v146, (uint64_t)&v105);
    v30 = v108;
    v25 = HIDWORD(v142);
    v26 = v143;
    v27 = v144;
    v28 = v145;
    v29 = v147;
  }
  v151 = v30;
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *v33 = 0;
  *(_QWORD *)(v24 + 96) = v24 + 112;
  v34 = v142;
  v35 = v141;
  *(_OWORD *)(v24 + 32) = *(_OWORD *)v140;
  *(_OWORD *)(v24 + 48) = v35;
  *(_QWORD *)(v24 + 64) = v34;
  *(_QWORD *)(v24 + 72) = v26;
  *(_DWORD *)(v24 + 68) = v25;
  *(_QWORD *)(v24 + 80) = v27;
  *(_QWORD *)(v24 + 88) = v28;
  v144 = 0;
  v145 = 0;
  v143 = 0;
  *(_QWORD *)(v24 + 104) = 0x800000000;
  if (v29)
    llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(v24 + 96, (uint64_t)&v146);
  *(_OWORD *)(v24 + 376) = v74;
  *(_BYTE *)(v24 + 392) = 0;
  v36 = (void **)(v24 + 400);
  *(_QWORD *)(v24 + 400) = 0;
  *(_OWORD *)(v24 + 408) = 0u;
  *(_QWORD *)(v24 + 368) = v33;
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(&v146);
  p_dst = (void **)&v143;
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&p_dst);
  *(_QWORD *)v24 = &off_251C1C1D8;
  *(_OWORD *)(v24 + 568) = 0u;
  *(_DWORD *)(v24 + 584) = 0;
  *(_OWORD *)(v24 + 592) = 0u;
  *(_DWORD *)(v24 + 608) = 0;
  *(_OWORD *)(v24 + 616) = 0u;
  *(_QWORD *)(v24 + 424) = a2;
  *(_QWORD *)(v24 + 432) = 0;
  *(_OWORD *)(v24 + 440) = 0u;
  *(_BYTE *)(v24 + 456) = 0;
  *(_OWORD *)(v24 + 464) = 0u;
  *(_OWORD *)(v24 + 480) = 0u;
  *(_OWORD *)(v24 + 496) = 0u;
  *(_OWORD *)(v24 + 512) = 0u;
  *(_OWORD *)(v24 + 528) = 0u;
  *(_OWORD *)(v24 + 544) = 0u;
  *(_DWORD *)(v24 + 560) = 0;
  *(_QWORD *)(v24 + 632) = v24 + 648;
  *(_QWORD *)(v24 + 640) = 0x400000000;
  *(_QWORD *)(v24 + 680) = v24 + 696;
  *(_OWORD *)(v24 + 688) = 0u;
  *(_QWORD *)(v24 + 704) = 1;
  v37 = *(_QWORD *)(v24 + 40);
  p_dst = (void **)&off_251C1C220;
  v130 = v24;
  p_p_dst = &p_dst;
  *(_QWORD *)(v24 + 728) = 0;
  *(_OWORD *)(v24 + 712) = 0u;
  if (v37 >= 0xFFFFFFFF)
    LODWORD(v37) = -1;
  *(_DWORD *)(v24 + 736) = v37;
  *(_QWORD *)(v24 + 768) = v24 + 744;
  *(_QWORD *)(v24 + 744) = &off_251C1C220;
  *(_QWORD *)(v24 + 752) = v24;
  *(_BYTE *)(v24 + 776) = 0;
  *(_BYTE *)(v24 + 784) = 0;
  *(_OWORD *)(v24 + 792) = 0uLL;
  *(_OWORD *)(v24 + 808) = 0uLL;
  *(_OWORD *)(v24 + 820) = 0uLL;
  *(_QWORD *)(v24 + 840) = v24 + 856;
  *(_QWORD *)(v24 + 848) = 0x4000000000;
  *(_OWORD *)(v24 + 1472) = 0u;
  *(_OWORD *)(v24 + 1432) = 0u;
  *(_OWORD *)(v24 + 1448) = 0u;
  *(_OWORD *)(v24 + 1400) = 0u;
  *(_OWORD *)(v24 + 1416) = 0u;
  *(_OWORD *)(v24 + 1368) = 0u;
  *(_OWORD *)(v24 + 1384) = 0u;
  *(_QWORD *)(v24 + 1464) = v24 + 1472;
  *(_BYTE *)(v24 + 1560) = 0;
  *(_DWORD *)(v24 + 1584) = 0;
  *(_OWORD *)(v24 + 1568) = 0u;
  *(_DWORD *)(v24 + 1768) = 0;
  *(_OWORD *)(v24 + 1752) = 0u;
  *(_QWORD *)(v24 + 1792) = 0;
  *(_OWORD *)(v24 + 1776) = 0u;
  *(_OWORD *)(v24 + 1488) = 0u;
  *(_OWORD *)(v24 + 1504) = 0u;
  *(_OWORD *)(v24 + 1520) = 0u;
  *(_OWORD *)(v24 + 1536) = 0u;
  *(_DWORD *)(v24 + 1552) = 0;
  *(_OWORD *)(v24 + 1620) = 0u;
  *(_OWORD *)(v24 + 1592) = 0u;
  *(_OWORD *)(v24 + 1608) = 0u;
  *(_OWORD *)(v24 + 1699) = 0u;
  *(_OWORD *)(v24 + 1672) = 0u;
  *(_OWORD *)(v24 + 1688) = 0u;
  *(_OWORD *)(v24 + 1640) = 0u;
  *(_OWORD *)(v24 + 1656) = 0u;
  *(_DWORD *)(v24 + 1744) = 0;
  *(_QWORD *)(v24 + 1736) = 0;
  *(_OWORD *)(v24 + 1720) = 0u;
  *(_QWORD *)(v24 + 1800) = v24 + 1824;
  *(_OWORD *)(v24 + 1808) = xmmword_24AA2ACB0;
  *(_BYTE *)(v24 + 1832) = 0;
  *(_BYTE *)(v24 + 1864) = 0;
  *(_QWORD *)(v24 + 1888) = 0;
  *(_OWORD *)(v24 + 1872) = 0uLL;
  if (size >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (size >= 0x17)
  {
    v39 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v39 = size | 7;
    v40 = v39 + 1;
    v38 = (__int128 *)operator new(v39 + 1);
    v122 = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst = v38;
    *((_QWORD *)&__dst + 1) = size;
    goto LABEL_63;
  }
  HIBYTE(v122) = size;
  v38 = &__dst;
  if (size)
LABEL_63:
    memmove(v38, __src, size);
  *((_BYTE *)v38 + size) = 0;
  if (*(char *)(v24 + 423) < 0)
    operator delete(*v36);
  *(_OWORD *)v36 = __dst;
  *(_QWORD *)(v24 + 416) = v122;
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(&v105);
  v140[0] = (llvm::MetadataLoader::MetadataLoaderImpl *)&v102;
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)v140);
  v41 = (uint64_t *)operator new();
  v42 = *(_QWORD *)(llvm::Module::Module((uint64_t)v41, *((const void **)a1 + 2), *((_QWORD *)a1 + 3), a2) + 152);
  v41[19] = v24;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  LOBYTE(v90[0]) = 0;
  v92 = 0;
  if (v77[32])
  {
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v90, (uint64_t)v77);
    v92 = 1;
  }
  LOBYTE(v93[0]) = 0;
  v95 = 0;
  if (v77[72])
  {
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v93, (uint64_t)(v77 + 40));
    v95 = 1;
  }
  v43 = v96;
  LOBYTE(v96[0]) = 0;
  v98 = 0;
  v44 = v77[112];
  if (v77[112])
  {
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v96, (uint64_t)(v77 + 80));
    v98 = 1;
  }
  *(_QWORD *)(v24 + 432) = v41;
  v45 = v133;
  v46 = v135;
  LOBYTE(v135[0]) = 0;
  v137 = 0;
  p_dst = (void **)&off_251C1C2F8;
  v130 = v24;
  p_p_dst = &p_dst;
  v133[0] = &off_251C1C340;
  v133[1] = v24;
  v134 = v133;
  if (!v44)
    goto LABEL_83;
  if (v97)
  {
    if (v97 == v96)
    {
      v136 = v135;
      (*(void (**)(_QWORD *, _QWORD *))(v96[0] + 24))(v96, v135);
    }
    else
    {
      v136 = (_QWORD *)(*(uint64_t (**)(void))(*v97 + 16))();
    }
  }
  else
  {
    v136 = 0;
  }
  v137 = 1;
  if (p_p_dst)
  {
    if (p_p_dst != &p_dst)
    {
      v123 = (__int128 *)((uint64_t (*)(void))(*p_p_dst)[2])();
      goto LABEL_85;
    }
LABEL_83:
    v123 = &__dst;
    ((void (*)(uint64_t, _QWORD *))p_dst[3])((uint64_t)&p_dst, &__dst);
  }
  else
  {
    v123 = 0;
  }
LABEL_85:
  v47 = v124;
  if (v134)
  {
    if (v134 == v133)
    {
      v125 = v124;
      (*(void (**)(uint64_t, _QWORD *))(v133[0] + 24))((uint64_t)v133, v124);
    }
    else
    {
      v125 = (_QWORD *)(*(uint64_t (**)(void))(*v134 + 16))();
    }
  }
  else
  {
    v125 = 0;
  }
  v48 = v126;
  v126[0] = 0;
  v128 = 0;
  if (v137)
  {
    if (v136)
    {
      if (v136 == v135)
      {
        v127 = v126;
        (*(void (**)(_QWORD *, _BYTE *))(v135[0] + 24))(v135, v126);
      }
      else
      {
        v127 = (_BYTE *)(*(uint64_t (**)(void))(*v136 + 16))();
      }
    }
    else
    {
      v127 = 0;
    }
    v128 = 1;
  }
  LOBYTE(v83[0]) = v79;
  std::make_unique[abi:nn180100]<llvm::MetadataLoader::MetadataLoaderImpl,llvm::BitstreamCursor &,llvm::Module &,llvm::BitcodeReaderValueList &,llvm::MetadataLoaderCallbacks,BOOL &>(v24 + 32, v41, v24 + 712, &__dst, (char *)v83, (uint64_t *)v140);
  v49 = *(unsigned __int8 *)(v24 + 784);
  v50 = v140[0];
  v140[0] = 0;
  if (v49)
  {
    std::unique_ptr<llvm::MetadataLoader::MetadataLoaderImpl>::reset[abi:nn180100]((llvm::MetadataLoader::MetadataLoaderImpl **)(v24 + 776), v50);
    v51 = v140[0];
    v140[0] = 0;
    v52 = v93;
    if (v51)
    {
      llvm::MetadataLoader::MetadataLoaderImpl::~MetadataLoaderImpl(v51);
      MEMORY[0x24BD1B3A4]();
    }
  }
  else
  {
    *(_QWORD *)(v24 + 776) = v50;
    *(_BYTE *)(v24 + 784) = 1;
    v140[0] = 0;
    v52 = v93;
  }
  if (v128)
  {
    if (v127 == v126)
    {
      v53 = 4;
LABEL_106:
      (*(void (**)(_QWORD *))(*v48 + 8 * v53))(v48);
    }
    else if (v127)
    {
      v53 = 5;
      v48 = v127;
      goto LABEL_106;
    }
  }
  if (v125 == v124)
  {
    v54 = 4;
LABEL_111:
    (*(void (**)(_QWORD *))(*v47 + 8 * v54))(v47);
  }
  else if (v125)
  {
    v54 = 5;
    v47 = v125;
    goto LABEL_111;
  }
  v55 = v123;
  if (v123 == &__dst)
  {
    v56 = 4;
    v55 = &__dst;
LABEL_116:
    (*(void (**)(void))(*(_QWORD *)v55 + 8 * v56))();
  }
  else if (v123)
  {
    v56 = 5;
    goto LABEL_116;
  }
  LOBYTE(v140[0]) = 0;
  LOBYTE(v142) = 0;
  if (v92)
  {
    if (v91)
    {
      if (v91 == v90)
      {
        *((_QWORD *)&v141 + 1) = v140;
        (*(void (**)(_QWORD *, llvm::MetadataLoader::MetadataLoaderImpl **))(v90[0] + 24))(v90, v140);
      }
      else
      {
        *((_QWORD *)&v141 + 1) = (*(uint64_t (**)(void))(*v91 + 16))();
      }
    }
    else
    {
      *((_QWORD *)&v141 + 1) = 0;
    }
    LOBYTE(v142) = 1;
  }
  v57 = (char *)&v143;
  LOBYTE(v143) = 0;
  LOBYTE(v147) = 0;
  if (v95)
  {
    if (v94)
    {
      if (v94 == v93)
      {
        v146 = (char *)&v143;
        (*(void (**)(_QWORD *, uint64_t *))(v93[0] + 24))(v93, &v143);
      }
      else
      {
        v146 = (char *)(*(uint64_t (**)(void))(*v94 + 16))();
      }
    }
    else
    {
      v146 = 0;
    }
    LOBYTE(v147) = 1;
  }
  v58 = v148;
  v148[0] = 0;
  v150 = 0;
  if (v98)
  {
    if (v97)
    {
      if (v97 == v96)
      {
        v149 = v148;
        (*(void (**)(_QWORD *, _BYTE *))(v96[0] + 24))(v96, v148);
      }
      else
      {
        v149 = (_BYTE *)(*(uint64_t (**)(void))(*v97 + 16))();
      }
    }
    else
    {
      v149 = 0;
    }
    v150 = 1;
  }
  if (v150)
  {
    if (v149 == v148)
    {
      v59 = 4;
LABEL_143:
      (*(void (**)(_QWORD *))(*v58 + 8 * v59))(v58);
    }
    else if (v149)
    {
      v59 = 5;
      v58 = v149;
      goto LABEL_143;
    }
  }
  if ((_BYTE)v147)
  {
    if (v146 == (char *)&v143)
    {
      v60 = 4;
LABEL_149:
      (*(void (**)(char *))(*(_QWORD *)v57 + 8 * v60))(v57);
    }
    else if (v146)
    {
      v60 = 5;
      v57 = v146;
      goto LABEL_149;
    }
  }
  if ((_BYTE)v142)
  {
    v61 = (llvm::MetadataLoader::MetadataLoaderImpl **)*((_QWORD *)&v141 + 1);
    if (*((llvm::MetadataLoader::MetadataLoaderImpl ***)&v141 + 1) == v140)
    {
      v62 = 4;
      v61 = v140;
LABEL_155:
      (*((void (**)(void))*v61 + v62))();
    }
    else if (*((_QWORD *)&v141 + 1))
    {
      v62 = 5;
      goto LABEL_155;
    }
  }
  if (v137)
  {
    if (v136 == v135)
    {
      v63 = 4;
LABEL_161:
      (*(void (**)(_QWORD *))(*v46 + 8 * v63))(v46);
    }
    else if (v136)
    {
      v63 = 5;
      v46 = v136;
      goto LABEL_161;
    }
  }
  if (v134 == v133)
  {
    v64 = 4;
LABEL_166:
    (*(void (**)(_QWORD *))(*v45 + 8 * v64))(v45);
  }
  else if (v134)
  {
    v64 = 5;
    v45 = v134;
    goto LABEL_166;
  }
  v65 = p_p_dst;
  if (p_p_dst == &p_dst)
  {
    v66 = 4;
    v65 = &p_dst;
LABEL_171:
    ((void (*)(void))(*v65)[v66])();
  }
  else if (p_p_dst)
  {
    v66 = 5;
    goto LABEL_171;
  }
  if (v98)
  {
    if (v97 == v96)
    {
      v67 = 4;
LABEL_177:
      (*(void (**)(_QWORD *))(*v43 + 8 * v67))(v43);
    }
    else if (v97)
    {
      v67 = 5;
      v43 = v97;
      goto LABEL_177;
    }
  }
  if (v95)
  {
    if (v94 == v93)
    {
      v68 = 4;
LABEL_183:
      (*(void (**)(_QWORD *))(*v52 + 8 * v68))(v52);
    }
    else if (v94)
    {
      v68 = 5;
      v52 = v94;
      goto LABEL_183;
    }
  }
  if (v92)
  {
    v69 = v91;
    if (v91 == v90)
    {
      v70 = 4;
      v69 = v90;
LABEL_189:
      (*(void (**)(void))(*v69 + 8 * v70))();
    }
    else if (v91)
    {
      v70 = 5;
      goto LABEL_189;
    }
  }
  v71 = (llvm::MetadataLoader::MetadataLoaderImpl *)v85[0];
  if (v85[0])
    goto LABEL_196;
  if (v76)
  {
    v72 = v41[19];
    if (v72)
    {
      v41[19] = 0;
      (*(void (**)(llvm::MetadataLoader::MetadataLoaderImpl **__return_ptr, uint64_t))(*(_QWORD *)v72 + 24))(v140, v72);
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
      goto LABEL_195;
    }
    goto LABEL_197;
  }
LABEL_195:
  v71 = v140[0];
  if (v140[0])
  {
LABEL_196:
    *(_BYTE *)(a7 + 8) |= 1u;
    *(_QWORD *)a7 = v71;
    llvm::Module::~Module((llvm::Module *)v41);
    MEMORY[0x24BD1B3A4]();
  }
  else
  {
LABEL_197:
    *(_BYTE *)(a7 + 8) &= ~1u;
    *(_QWORD *)a7 = v41;
  }
LABEL_39:
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector(&v117);
  v140[0] = (llvm::MetadataLoader::MetadataLoaderImpl *)&v114;
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)v140);
}

void llvm::SimpleBitstreamCursor::JumpToBit(llvm::SimpleBitstreamCursor *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  *((_DWORD *)this + 8) = 0;
  v4 = a2 & 0x3F;
  if (v4)
  {
    llvm::SimpleBitstreamCursor::Read(this, v4, (uint64_t)&v6);
    if ((v7 & 1) != 0)
      v5 = v6;
    else
      v5 = 0;
    *a3 = v5;
  }
  else
  {
    *a3 = 0;
  }
}

void `anonymous namespace'::BitcodeReader::materializeForwardReferencedFunctions(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  llvm::formatv_object_base *v10[4];
  __int16 v11;

  if (*(_BYTE *)(a2 + 1713))
  {
LABEL_15:
    *(_QWORD *)this = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 1713) = 1;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + 1680);
      if (!v4)
        break;
      v5 = *(void ***)(a2 + 1648);
      v6 = *(_QWORD *)(a2 + 1672);
      v7 = (*(_QWORD **)((char *)v5 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)))[v6 & 0x1FF];
      *(_QWORD *)(a2 + 1680) = v4 - 1;
      *(_QWORD *)(a2 + 1672) = v6 + 1;
      if (v6 + 1 >= 0x400)
      {
        operator delete(*v5);
        *(_QWORD *)(a2 + 1648) += 8;
        *(_QWORD *)(a2 + 1672) -= 512;
      }
      {
        if ((*(_BYTE *)(v7 + 35) & 1) == 0)
        {
          v10[0] = (llvm::formatv_object_base *)"Never resolved function from blockaddress";
          v11 = 259;
          return;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v7);
        if (*(_QWORD *)this)
          return;
      }
    }
    v8 = *(_QWORD **)(a2 + 1688);
    v9 = *(_QWORD **)(a2 + 1696);
    if (v8 == v9)
    {
LABEL_14:
      *(_QWORD *)(a2 + 1696) = v8;
      *(_BYTE *)(a2 + 1713) = 0;
      goto LABEL_15;
    }
    while (1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *v8);
      if (*(_QWORD *)this)
        break;
      if (++v8 == v9)
      {
        v8 = *(_QWORD **)(a2 + 1688);
        goto LABEL_14;
      }
    }
  }
}

void llvm::BitcodeModule::getLazyModule(__int128 *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  char v23;
  _BYTE v24[24];
  _BYTE *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v18[0] = 0;
  v20 = 0;
  if (a5[32])
  {
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v18, (uint64_t)a5);
    v20 = 1;
  }
  v12 = v21;
  v21[0] = 0;
  v23 = 0;
  if (a5[72])
  {
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v21, (uint64_t)(a5 + 40));
    v23 = 1;
  }
  v13 = v24;
  v24[0] = 0;
  v26 = 0;
  if (a5[112])
  {
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v24, (uint64_t)(a5 + 80));
    v26 = 1;
  }
  llvm::BitcodeModule::getModuleImpl(a1, a2, 0, a3, a4, v18, a6);
  if (v26)
  {
    if (v25 == v24)
    {
      v14 = 4;
    }
    else
    {
      if (!v25)
        goto LABEL_13;
      v14 = 5;
      v13 = v25;
    }
    (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
  }
LABEL_13:
  if (!v23)
    goto LABEL_19;
  if (v22 == v21)
  {
    v15 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_19;
    v15 = 5;
    v12 = v22;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v15))(v12);
LABEL_19:
  if (!v20)
    return;
  v16 = v19;
  if (v19 == v18)
  {
    v17 = 4;
    v16 = v18;
  }
  else
  {
    if (!v19)
      return;
    v17 = 5;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
}

void `anonymous namespace'::BitcodeErrorCategoryType::~BitcodeErrorCategoryType(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24BD1B3A4);
}

const char *`anonymous namespace'::BitcodeErrorCategoryType::name(_anonymous_namespace_::BitcodeErrorCategoryType *this)
{
  return "llvm.bitcode";
}

_QWORD *`anonymous namespace'::BitcodeErrorCategoryType::message@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "Corrupted bitcode");
}

void llvm::SimpleBitstreamCursor::Read(llvm::SimpleBitstreamCursor *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void (**v9)(llvm::raw_string_ostream *__hidden);
  char v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  const std::error_category *v15;
  llvm::formatv_object_base *v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(llvm::raw_string_ostream *__hidden);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  void **v27;
  void *__p[2];
  uint64_t v29;
  llvm::formatv_object_base *v30[2];
  int v31;
  unsigned int v32;
  __int16 v33;

  v6 = *((_DWORD *)this + 8);
  if (a2 <= v6)
  {
    v8 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v8 >> a2;
    *((_DWORD *)this + 8) = v6 - a2;
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v8 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
    return;
  }
  if (v6)
    v7 = *((_QWORD *)this + 3);
  else
    v7 = 0;
  llvm::SimpleBitstreamCursor::fillCurWord(this, (uint64_t *)&v19);
  v9 = v19;
  if (v19)
  {
    v10 = *(_BYTE *)(a3 + 8) | 1;
LABEL_16:
    *(_BYTE *)(a3 + 8) = v10;
    *(_QWORD *)a3 = v9;
    return;
  }
  v11 = a2 - v6;
  v12 = *((_DWORD *)this + 8);
  v13 = v12 >= a2 - v6;
  v14 = v12 - (a2 - v6);
  if (v13)
  {
    v18 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v18 >> v11;
    *((_DWORD *)this + 8) = v14;
    v9 = (void (**)(llvm::raw_string_ostream *__hidden))(((v18 & (0xFFFFFFFFFFFFFFFFLL >> (v6 - a2))) << v6) | v7);
    v10 = *(_BYTE *)(a3 + 8) & 0xFE;
    goto LABEL_16;
  }
  v15 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  v20 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v19 = &off_251C13AC0;
  v27 = __p;
  llvm::raw_ostream::SetUnbuffered(&v19);
  v30[0] = (llvm::formatv_object_base *)&off_251C1C3A8;
  v30[1] = (llvm::formatv_object_base *)"Unexpected end of file reading %u of %u bits";
  v31 = *((_DWORD *)this + 8);
  v32 = v11;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v19, (uint64_t)v30);
  v16 = (llvm::formatv_object_base *)v27;
  v17 = operator new();
  v33 = 260;
  v30[0] = v16;
  *(_QWORD *)v17 = off_251C127D0;
  llvm::Twine::str(v30, (std::string *)(v17 + 8));
  *(_QWORD *)(v17 + 32) = 5;
  *(_QWORD *)(v17 + 40) = v15;
  *(_BYTE *)(v17 + 48) = 1;
  v19 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v26 == 1 && v21)
    MEMORY[0x24BD1B380](v21, 0x1000C8077774924);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v17;
}

void llvm::SimpleBitstreamCursor::fillCurWord(llvm::SimpleBitstreamCursor *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD v11[4];
  void (**v12)(llvm::raw_string_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  llvm::formatv_object_base *v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23[2];

  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v6 = v5 - v4;
  if (v5 <= v4)
  {
    v23[0] = 5;
    v23[1] = (uint64_t)std::generic_category();
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = &off_251C13AC0;
    v20 = (llvm::formatv_object_base *)v21;
    llvm::raw_ostream::SetUnbuffered(&v12);
    v11[0] = &off_251C1C388;
    v11[1] = "Unexpected end of file reading %u of %u bytes";
    v11[2] = *((_QWORD *)this + 2);
    v11[3] = v5;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v11);
    llvm::make_error<llvm::StringError,std::string,std::error_code>(v20, v23, a2);
    v12 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v19 == 1 && v14)
      MEMORY[0x24BD1B380](v14, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
  else
  {
    v7 = (_QWORD *)(*(_QWORD *)this + v4);
    if (v5 >= v4 + 8)
    {
      *((_QWORD *)this + 3) = *v7;
      v6 = 8;
    }
    else
    {
      *((_QWORD *)this + 3) = 0;
      if (v6)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = *(unsigned __int8 *)v7;
          v7 = (_QWORD *)((char *)v7 + 1);
          v9 |= (unint64_t)v10 << (v8 & 0xF8);
          *((_QWORD *)this + 3) = v9;
          v8 += 8;
        }
        while (8 * (v5 - v4) != v8);
      }
    }
    *((_QWORD *)this + 2) = v4 + v6;
    *((_DWORD *)this + 8) = 8 * v6;
    *a2 = 0;
  }
}

uint64_t llvm::format_object<unsigned long,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned int,unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

void llvm::BitstreamCursor::ReadCode(llvm::BitstreamCursor *this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::SimpleBitstreamCursor::Read(this, *((_DWORD *)this + 9), (uint64_t)&v4);
  v3 = v5;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a2 + 8) & 0xFE | v5 & 1;
  if ((v3 & 1) != 0)
    *(_QWORD *)a2 = v4;
  else
    *(_DWORD *)a2 = v4;
}

BOOL llvm::BitstreamCursor::ReadBlockEnd(llvm::BitstreamCursor *this)
{
  int v1;
  unsigned int v2;
  BOOL v3;
  char v4;
  int v5;

  v1 = *((_DWORD *)this + 18);
  if (v1)
  {
    v2 = *((_DWORD *)this + 8);
    v3 = v2 >= 0x20;
    v4 = v2 - 32;
    if (v3)
    {
      *((_QWORD *)this + 3) >>= v4;
      v5 = 32;
    }
    else
    {
      v5 = 0;
    }
    *((_DWORD *)this + 8) = v5;
    llvm::BitstreamCursor::popBlockScope(this);
  }
  return v1 == 0;
}

void llvm::BitstreamCursor::popBlockScope(llvm::BitstreamCursor *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *((_QWORD *)this + 8) + 32 * *((unsigned int *)this + 18);
  *((_DWORD *)this + 9) = *(_DWORD *)(v2 - 32);
  std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate((void **)this + 5);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(v2 - 24);
  *((_QWORD *)this + 7) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v2 - 24) = 0;
  *(_QWORD *)(v2 - 16) = 0;
  *(_QWORD *)(v2 - 8) = 0;
  v3 = (*((_DWORD *)this + 18) - 1);
  *((_DWORD *)this + 18) = v3;
  v4 = (void **)(*((_QWORD *)this + 8) + 32 * v3 + 8);
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v4);
}

void llvm::SimpleBitstreamCursor::ReadVBR(llvm::SimpleBitstreamCursor *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  llvm::formatv_object_base *v10;
  uint64_t v11;
  llvm::formatv_object_base *v12;
  uint64_t v13;
  const std::error_category *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::formatv_object_base *v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  const std::error_category *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  llvm::SimpleBitstreamCursor::Read(this, a2, (uint64_t)&v21);
  v20 = v22 & 1;
  if ((v22 & 1) != 0)
  {
    v13 = v21;
    *(_BYTE *)(a3 + 8) |= 1u;
LABEL_18:
    *(_QWORD *)a3 = v13;
  }
  else
  {
    v6 = v21;
    LODWORD(v19) = v21;
    v7 = 1 << (a2 - 1);
    if ((v21 & v7) != 0)
    {
      v8 = (v7 - 1) & v21;
      v9 = a2 - 1;
      while (v9 <= 0x1F)
      {
        llvm::SimpleBitstreamCursor::Read(this, a2, (uint64_t)&v17);
        LOBYTE(v22) = v22 & 0xFE | v18 & 1;
        if ((v18 & 1) != 0)
        {
          v10 = v17;
          v17 = 0;
          v21 = (uint64_t)v10;
        }
        else
        {
          LODWORD(v21) = (_DWORD)v17;
        }
        llvm::Expected<unsigned int>::moveAssign<unsigned int>(&v19, &v21);
        if ((v22 & 1) != 0)
        {
          v11 = v21;
          v21 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        if ((v18 & 1) != 0)
        {
          v12 = v17;
          v17 = 0;
          if (v12)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v12 + 8))(v12);
        }
        if ((v20 & 1) != 0)
        {
          *(_BYTE *)(a3 + 8) |= 1u;
          v13 = v19;
          goto LABEL_18;
        }
        v8 |= (v19 & ((_DWORD)v7 - 1)) << v9;
        v9 += a2 - 1;
        if ((v19 & v7) == 0)
        {
          *(_BYTE *)(a3 + 8) &= ~1u;
          *(_DWORD *)a3 = v8;
          return;
        }
      }
      v14 = std::generic_category();
      v21 = 92;
      v22 = v14;
      v17 = (llvm::formatv_object_base *)"Unterminated VBR";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v17, &v21, &v16);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v16;
      v16 = 0;
      if ((v20 & 1) != 0)
      {
        v15 = v19;
        v19 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = v6;
    }
  }
}

_BYTE *llvm::Expected<unsigned int>::moveAssign<unsigned int>(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[8];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[8];
      }
    }
    v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v6;
    }
    else
    {
      *(_DWORD *)v3 = *(_DWORD *)a2;
    }
  }
  return result;
}

uint64_t llvm::format_object<unsigned long,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

std::string *std::string::append[abi:nn180100]<unsigned long long const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *p_p;
  std::string *v14;
  _BYTE *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  void *__p;
  std::string::size_type v25;
  int64_t v26;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    v7 = (char *)a3 - (char *)a2;
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  v12 = v7 >> 3;
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v12)
    {
      std::string::__grow_by(this, v9, size - v9 + v12, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      v16 = v4->__r_.__value_.__r.__words[0];
      v4 = (std::string *)((char *)v4 + 8);
      *v15++ = v16;
    }
    *v15 = 0;
    v17 = v12 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    if (v7 < 0)
      abort();
    if ((unint64_t)v7 > 0xB7)
    {
      v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v18 = v12 | 7;
      v19 = v18 + 1;
      p_p = operator new(v18 + 1);
      v25 = v12;
      v26 = v19 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v26) = (unint64_t)v7 >> 3;
      p_p = &__p;
    }
    while (v4 != a3)
    {
      v20 = v4->__r_.__value_.__r.__words[0];
      v4 = (std::string *)((char *)v4 + 8);
      *p_p++ = v20;
    }
    *p_p = 0;
    if (v26 >= 0)
      v21 = (const std::string::value_type *)&__p;
    else
      v21 = (const std::string::value_type *)__p;
    if (v26 >= 0)
      v22 = HIBYTE(v26);
    else
      v22 = v25;
    std::string::append(this, v21, v22);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
  }
  return this;
}

uint64_t llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::operator=(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v27;

  if (a1 != a2)
  {
    v5 = (char *)(a2 + 16);
    v4 = *(char **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      v10 = *(char **)a1;
      if ((_DWORD)v6)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *>((uint64_t)&v27, (uint64_t)v4, (uint64_t)&v4[32 * v6], (uint64_t)v10);
        v12 = v11;
        v10 = *(char **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v12 = *(char **)a1;
      }
      v21 = &v10[32 * v7];
      if (v21 != v12)
      {
        do
        {
          v22 = v21 - 32;
          v27 = (void **)(v21 - 24);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v27);
          v21 = v22;
        }
        while (v22 != v12);
      }
      *(_DWORD *)(a1 + 8) = v6;
      v23 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)a2 - 24;
        v25 = 32 * v23;
        do
        {
          v27 = (void **)(v24 + v25);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v27);
          v25 -= 32;
        }
        while (v25);
      }
      goto LABEL_29;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *>((uint64_t)&v27, (uint64_t)v4, (uint64_t)&v4[32 * v7], *(_QWORD *)a1);
LABEL_15:
        v13 = *(char **)a2;
        v14 = *(unsigned int *)(a2 + 8);
        if (v7 != v14)
        {
          v15 = &v13[32 * v14];
          v16 = *(_QWORD *)a1 + 32 * v7;
          v17 = &v13[32 * v7];
          do
          {
            *(_DWORD *)v16 = *(_DWORD *)v17;
            *(_QWORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)(v16 + 8) = 0;
            *(_OWORD *)(v16 + 8) = *(_OWORD *)(v17 + 8);
            *(_QWORD *)(v16 + 24) = *((_QWORD *)v17 + 3);
            *((_QWORD *)v17 + 1) = 0;
            *((_QWORD *)v17 + 2) = 0;
            *((_QWORD *)v17 + 3) = 0;
            v17 += 32;
            v16 += 32;
          }
          while (v17 != v15);
          v13 = *(char **)a2;
        }
        *(_DWORD *)(a1 + 8) = v6;
        v18 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v18)
        {
          v19 = v13 - 24;
          v20 = 32 * v18;
          do
          {
            v27 = (void **)&v19[v20];
            std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v27);
            v20 -= 32;
          }
          while (v20);
        }
LABEL_29:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
    }
    else
    {
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)a1 - 24;
        v9 = 32 * v7;
        do
        {
          v27 = (void **)(v8 + v9);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v27);
          v9 -= 32;
        }
        while (v9);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(a1, v6);
    }
    v7 = 0;
    goto LABEL_15;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::BitstreamCursor::Block>::assignRemote(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;
  void **v9;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = v4 - 24;
    v7 = 32 * v5;
    do
    {
      v9 = (void **)&v6[v7];
      std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v9);
      v7 -= 32;
    }
    while (v7);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 32, &v6);
  llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *,llvm::BitstreamCursor::Block *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__vdeallocate((void **)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

void llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = *a1 + 32 * v2;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v3;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      v3 += 32;
      a2 += 32;
    }
    while (v3 != v4);
    v5 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v5)
    {
      v6 = *a1 - 24;
      v7 = 32 * v5;
      do
      {
        v8 = (void **)(v6 + v7);
        std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v8);
        v7 -= 32;
      }
      while (v7);
    }
  }
}

void `anonymous namespace'::BitcodeReader::~BitcodeReader(_anonymous_namespace_::BitcodeReader *this)
{
  void *v2;
  _anonymous_namespace_::BitcodeReader *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void **v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  llvm::ValueHandleBase **v30;
  _anonymous_namespace_::BitcodeReader *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  void **v39;

  *(_QWORD *)this = &off_251C1C1D8;
  v2 = (void *)*((_QWORD *)this + 234);
  if (v2)
  {
    *((_QWORD *)this + 235) = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 1864))
  {
    v3 = (_anonymous_namespace_::BitcodeReader *)*((_QWORD *)this + 232);
    if (v3 == (_anonymous_namespace_::BitcodeReader *)((char *)this + 1832))
    {
      v4 = 4;
      v3 = (_anonymous_namespace_::BitcodeReader *)((char *)this + 1832);
    }
    else
    {
      if (!v3)
        goto LABEL_9;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
LABEL_9:
  v5 = (char *)*((_QWORD *)this + 225);
  if (v5 != (char *)this + 1824)
    free(v5);
  v39 = (void **)((char *)this + 1776);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v39);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 219), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 216), 8);
  v6 = (void *)*((_QWORD *)this + 211);
  if (v6)
  {
    *((_QWORD *)this + 212) = v6;
    operator delete(v6);
  }
  v7 = (void **)*((_QWORD *)this + 206);
  v8 = (void **)*((_QWORD *)this + 207);
  *((_QWORD *)this + 210) = 0;
  v9 = (char *)v8 - (char *)v7;
  if ((unint64_t)((char *)v8 - (char *)v7) >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v7 = (void **)(*((_QWORD *)this + 206) + 8);
      *((_QWORD *)this + 206) = v7;
      v8 = (void **)*((_QWORD *)this + 207);
      v9 = (char *)v8 - (char *)v7;
    }
    while ((unint64_t)((char *)v8 - (char *)v7) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 256;
    goto LABEL_19;
  }
  if (v10 == 2)
  {
    v11 = 512;
LABEL_19:
    *((_QWORD *)this + 209) = v11;
  }
  if (v7 != v8)
  {
    do
    {
      v12 = *v7++;
      operator delete(v12);
    }
    while (v7 != v8);
    v13 = *((_QWORD *)this + 206);
    v14 = *((_QWORD *)this + 207);
    if (v14 != v13)
      *((_QWORD *)this + 207) = v14 + ((v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v15 = (void *)*((_QWORD *)this + 205);
  if (v15)
    operator delete(v15);
  v16 = *((unsigned int *)this + 408);
  v17 = *((_QWORD *)this + 202);
  if ((_DWORD)v16)
  {
    v18 = (_QWORD *)(v17 + 16);
    v19 = 32 * v16;
    do
    {
      if ((*(v18 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v20 = (void *)*(v18 - 1);
        if (v20)
        {
          *v18 = v20;
          operator delete(v20);
        }
      }
      v18 += 4;
      v19 -= 32;
    }
    while (v19);
    v17 = *((_QWORD *)this + 202);
  }
  MEMORY[0x24BD1B398](v17, 8);
  v21 = (void *)*((_QWORD *)this + 199);
  if (v21)
  {
    *((_QWORD *)this + 200) = v21;
    operator delete(v21);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 196), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 192), 8);
  v22 = (void *)*((_QWORD *)this + 189);
  if (v22)
  {
    *((_QWORD *)this + 190) = v22;
    operator delete(v22);
  }
  v23 = (void *)*((_QWORD *)this + 186);
  if (v23)
  {
    *((_QWORD *)this + 187) = v23;
    operator delete(v23);
  }
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(*((_QWORD **)this + 184));
  v24 = (void *)*((_QWORD *)this + 180);
  if (v24)
  {
    *((_QWORD *)this + 181) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 177);
  if (v25)
  {
    *((_QWORD *)this + 178) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 174);
  if (v26)
  {
    *((_QWORD *)this + 175) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 171);
  if (v27)
  {
    *((_QWORD *)this + 172) = v27;
    operator delete(v27);
  }
  v28 = (char *)*((_QWORD *)this + 105);
  if (v28 != (char *)this + 856)
    free(v28);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 102), 8);
  v29 = (void *)*((_QWORD *)this + 99);
  if (v29)
  {
    *((_QWORD *)this + 100) = v29;
    operator delete(v29);
  }
  if (*((_BYTE *)this + 784))
    std::unique_ptr<llvm::MetadataLoader::MetadataLoaderImpl>::reset[abi:nn180100]((llvm::MetadataLoader::MetadataLoaderImpl **)this + 97, 0);
  v30 = (llvm::ValueHandleBase **)((char *)this + 712);
  v31 = (_anonymous_namespace_::BitcodeReader *)*((_QWORD *)this + 96);
  if (v31 == (_anonymous_namespace_::BitcodeReader *)((char *)this + 744))
  {
    v32 = 4;
    v31 = (_anonymous_namespace_::BitcodeReader *)((char *)this + 744);
  }
  else
  {
    if (!v31)
      goto LABEL_58;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_58:
  if (*v30)
  {
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 712, *v30);
    operator delete(*v30);
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 616);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 74), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 71), 8);
  v33 = *((unsigned int *)this + 140);
  v34 = *((_QWORD *)this + 68);
  if ((_DWORD)v33)
  {
    v35 = 32 * v33;
    v36 = (_QWORD *)(v34 + 24);
    do
    {
      if (*((_DWORD *)v36 - 6) <= 0xFFFFFFFD)
      {
        v37 = (_QWORD *)*(v36 - 2);
        if (v36 != v37)
          free(v37);
      }
      v36 += 4;
      v35 -= 32;
    }
    while (v35);
    v34 = *((_QWORD *)this + 68);
  }
  MEMORY[0x24BD1B398](v34, 8);
  v38 = (void *)*((_QWORD *)this + 65);
  if (v38)
  {
    *((_QWORD *)this + 66) = v38;
    operator delete(v38);
  }
  v39 = (void **)((char *)this + 496);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v39);
  v39 = (void **)((char *)this + 472);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v39);
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  llvm::SmallVector<llvm::BitstreamCursor::Block,8u>::~SmallVector((char **)this + 12);
  v39 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v39);
  v39 = (void **)((char *)this + 8);
  std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](&v39);
}

{
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::BitcodeReader::materialize(_anonymous_namespace_::BitcodeReader *this@<X0>, llvm::GlobalValue *a2@<X1>, _anonymous_namespace_::BitcodeReader *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::GlobalValue *v10;
  int v11;
  int v12;
  llvm::Function *v13;
  llvm::Function *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm *v24;
  llvm::MDNode *v25;
  llvm::Function *v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _BOOL4 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  const llvm::MDNode *Metadata;
  _QWORD *v47;
  BOOL v49;
  char *v50;
  char *k;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int v77;
  int v78;
  unsigned int v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  llvm::formatv_object_base *v83;
  __int16 v84;
  uint64_t v85;
  char v86;
  void *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (!a2 || *((_BYTE *)a2 + 16) || (*((_BYTE *)a2 + 35) & 1) == 0)
  {
    *(_QWORD *)a3 = 0;
    return;
  }
  v6 = *((_QWORD *)this + 196);
  v7 = *((unsigned int *)this + 396);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = v6 + 16 * v8;
    v10 = *(llvm::GlobalValue **)v9;
    if (*(llvm::GlobalValue **)v9 == a2)
      goto LABEL_13;
    v11 = 1;
    while (v10 != (llvm::GlobalValue *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(llvm::GlobalValue **)(v6 + 16 * v8);
      if (v10 == a2)
      {
        v9 = v6 + 16 * v8;
        goto LABEL_13;
      }
    }
  }
  v9 = v6 + 16 * v7;
LABEL_13:
  if (!*(_QWORD *)(v9 + 8))
  {
    while (1)
    {
      if (*(_QWORD *)(v9 + 8))
      {
        *(_QWORD *)a3 = 0;
        break;
      }
      llvm::SimpleBitstreamCursor::JumpToBit((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), *((_QWORD *)this + 55), a3);
      if (*(_QWORD *)a3)
        return;
      if (*((_DWORD *)this + 16) || *((_QWORD *)this + 5) > *((_QWORD *)this + 6))
      {
        if (*((_BYTE *)this + 1560))
        {
          v87 = &v89;
          v88 = 0x4000000000;
          llvm::BitstreamCursor::advance((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), 0, (uint64_t)&v85);
          if ((v86 & 1) != 0)
          {
            v18 = v85;
            v85 = 0;
            *(_QWORD *)a3 = v18;
          }
          else
          {
            if ((_DWORD)v85 == 2)
            {
              if (HIDWORD(v85) == 12)
              {
                if (!*(_QWORD *)a3)
                {
                  *((_QWORD *)this + 55) = 8 * *((_QWORD *)this + 6) - *((unsigned int *)this + 16);
                  *(_QWORD *)a3 = 0;
                }
                goto LABEL_42;
              }
              v19 = "Expect function block";
            }
            else
            {
              v19 = "Expect SubBlock";
            }
            v83 = (llvm::formatv_object_base *)v19;
            v84 = 259;
          }
LABEL_42:
          if ((v86 & 1) != 0)
          {
            v20 = v85;
            v85 = 0;
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
          if (v87 != &v89)
            free(v87);
          goto LABEL_47;
        }
        v87 = "Trying to materialize functions before seeing function blocks";
      }
      else
      {
        v87 = "Could not find function in stream";
      }
      LOWORD(v91) = 259;
LABEL_47:
      if (*(_QWORD *)a3)
        return;
    }
  }
  (*(void (**)(_anonymous_namespace_::BitcodeReader *))(*(_QWORD *)this + 32))(this);
  if (!*(_QWORD *)a3)
  {
    llvm::SimpleBitstreamCursor::JumpToBit((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), *(_QWORD *)(v9 + 8), a3);
    if (!*(_QWORD *)a3)
    {
      if (!*(_QWORD *)a3)
      {
        *((_DWORD *)a2 + 8) &= ~0x1000000u;
        if (*((_BYTE *)this + 1714))
          llvm::stripDebugInfo(a2, v13);
        if (*((_DWORD *)this + 386))
        {
          v15 = *((unsigned int *)this + 388);
          if ((_DWORD)v15)
          {
            v16 = 16 * v15;
            v17 = (uint64_t *)*((_QWORD *)this + 192);
            while ((*v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v17 += 2;
              v16 -= 16;
              if (!v16)
                goto LABEL_61;
            }
          }
          else
          {
            v17 = (uint64_t *)*((_QWORD *)this + 192);
          }
          v21 = *((_QWORD *)this + 192) + 16 * v15;
          if (v17 != (uint64_t *)v21)
          {
            v22 = *v17;
LABEL_53:
            v23 = *(_QWORD *)(v22 + 8);
            while (v23)
            {
              v24 = *(llvm **)(v23 + 24);
              v23 = *(_QWORD *)(v23 + 8);
              if (v24 && *((_BYTE *)v24 + 16) == 84)
                llvm::UpgradeIntrinsicCall(v24, (llvm::CallBase *)v17[1], v14);
            }
            while (1)
            {
              v17 += 2;
              if (v17 == (uint64_t *)v21)
                break;
              v22 = *v17;
              if ((*v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v17 != (uint64_t *)v21)
                  goto LABEL_53;
                break;
              }
            }
          }
        }
LABEL_61:
        v25 = (llvm::MDNode *)llvm::MetadataLoader::lookupSubprogramForFunction((_anonymous_namespace_::BitcodeReader *)((char *)this + 776), a2);
        if (v25)
          llvm::Value::setMetadata((uint64_t)a2, 0, v25);
        if (!*(_BYTE *)(*((_QWORD *)this + 97) + 1040))
        {
          llvm::instructions((char **)&v87, (Function *)a2);
          v27 = (_QWORD *)v88;
          v28 = v89;
          v80 = v92;
          v29 = v91 == v87 || v89 == v92;
          v30 = !v29;
          v81 = v91;
          v82 = v87;
          if ((_QWORD *)v88 != v91 || v30)
          {
            do
            {
              if (v28)
                v45 = (llvm::Value *)(v28 - 3);
              else
                v45 = 0;
              if (*((_QWORD *)v45 + 6) || (*((_BYTE *)v45 + 23) & 0x20) != 0)
              {
                Metadata = (const llvm::MDNode *)llvm::Value::getMetadata(v45, 1);
                if (Metadata)
                {
                  if ((llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream ***)this + 215, v45, Metadata) & 1) == 0)
                  {
                    *(_BYTE *)(*((_QWORD *)this + 97) + 1040) = 1;
                    v34 = *((_QWORD *)a2 + 5);
                    v35 = v34 + 24;
                    for (i = *(_QWORD *)(v34 + 32); i != v35; i = *(_QWORD *)(i + 8))
                    {
                      v37 = i - 56;
                      if (!i)
                        v37 = 0;
                      if ((*(_BYTE *)(v37 + 35) & 1) == 0)
                      {
                        v38 = v37 + 72;
                        for (j = *(_QWORD *)(v37 + 80); j != v38; j = *(_QWORD *)(j + 8))
                        {
                          v40 = j - 24;
                          if (!j)
                            v40 = 0;
                          v41 = *(_QWORD *)(v40 + 48);
                          if (v41 != v40 + 40)
                          {
LABEL_104:
                            while (j != v38)
                            {
                              if (v41)
                                v42 = v41 - 24;
                              else
                                v42 = 0;
                              if (*(_QWORD *)(v42 + 48) || (*(_BYTE *)(v42 + 23) & 0x20) != 0)
                                llvm::Value::setMetadata(v42, 1, 0);
                              v41 = *(_QWORD *)(v41 + 8);
                              v43 = j - 24;
                              if (!j)
                                v43 = 0;
                              if (v41 == v43 + 40)
                              {
                                while (1)
                                {
                                  j = *(_QWORD *)(j + 8);
                                  if (j == v38)
                                    goto LABEL_105;
                                  v44 = j - 24;
                                  if (!j)
                                    v44 = 0;
                                  v41 = *(_QWORD *)(v44 + 48);
                                  if (v41 != v44 + 40)
                                    goto LABEL_104;
                                }
                              }
                            }
                            break;
                          }
                        }
                      }
LABEL_105:
                      ;
                    }
                  }
                }
              }
              v28 = (_QWORD *)v28[1];
              v47 = v27 - 3;
              if (!v27)
                v47 = 0;
              if (v28 == v47 + 5)
              {
                v31 = (_QWORD *)v27[1];
                v32 = v82;
                v27 = v82;
                if (v31 != v82)
                {
                  v27 = v31;
                  while (1)
                  {
                    v33 = v27 - 3;
                    if (!v27)
                      v33 = 0;
                    v28 = (_QWORD *)v33[6];
                    if (v28 != v33 + 5)
                      break;
                    v27 = (_QWORD *)v27[1];
                    if (v27 == v82)
                    {
                      v27 = v82;
                      break;
                    }
                  }
                }
              }
              else
              {
                v32 = v82;
              }
              v49 = v81 != v32 && v28 != v80;
            }
            while (v27 != v81 || v49);
          }
        }
        v50 = (char *)a2 + 72;
        for (k = (char *)*((_QWORD *)a2 + 10); ; k = (char *)*((_QWORD *)k + 1))
        {
          if (k == v50)
            goto LABEL_190;
          v52 = k - 24;
          if (!k)
            v52 = 0;
          v53 = (char *)*((_QWORD *)v52 + 6);
          if (v53 != v52 + 40)
            break;
        }
        if (k == v50)
        {
LABEL_190:
          llvm::UpgradeFunctionAttributes(a2, v26);
          return;
        }
        while (1)
        {
          if (v53)
            v54 = (uint64_t)(v53 - 24);
          else
            v54 = 0;
          if (*(_QWORD *)(v54 + 48) || (*(_BYTE *)(v54 + 23) & 0x20) != 0)
          {
            v55 = llvm::Value::getMetadata((llvm::Value *)v54, 2);
            if (v55)
            {
              v56 = *(_QWORD *)(v55 - 16);
              v57 = (v56 & 2) != 0 ? *(uint64_t **)(v55 - 32) : (uint64_t *)(v55 - 16 - 8 * ((v56 >> 2) & 0xF));
              v58 = *v57;
              if (v58)
              {
                if (!*(_BYTE *)v58)
                {
                  v73 = *(_QWORD **)(v58 + 8);
                  if (*v73 != 14)
                    goto LABEL_150;
                  v74 = v73[3];
                  v75 = *(_QWORD *)((char *)v73 + 30);
                  if (v74 != 0x775F68636E617262 || v75 != 0x737468676965775FLL)
                    goto LABEL_150;
                  v77 = *(unsigned __int8 *)(v54 + 16);
                  if (v53 && v77 == 30)
                  {
                    if ((*(_DWORD *)(v54 + 20) & 0x7FFFFFF) == 3)
                      v78 = 2;
                    else
                      v78 = 1;
                  }
                  else if (v53 && v77 == 31)
                  {
                    v78 = (*(_DWORD *)(v54 + 20) >> 1) & 0x3FFFFFF;
                  }
                  else if (v77 == 84)
                  {
                    v78 = 1;
                  }
                  else if (v53 && v77 == 32)
                  {
                    v78 = (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) - 1;
                  }
                  else
                  {
                    if (v77 != 85)
                      goto LABEL_150;
                    v78 = 2;
                  }
                  if ((v56 & 2) != 0)
                    v79 = *(_DWORD *)(v55 - 24);
                  else
                    v79 = (v56 >> 6) & 0xF;
                  if (v79 != v78 + 1 && (*(_QWORD *)(v54 + 48) || (*(_BYTE *)(v54 + 23) & 0x20) != 0))
                    llvm::Value::setMetadata(v54, 2, 0);
                }
              }
            }
          }
          v59 = *(unsigned __int8 *)(v54 + 16) - 33;
          v60 = v59 > 0x33;
          v61 = (1 << v59) & 0x8000000000041;
          if (!v60 && v61 != 0)
          {
            llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(*(_QWORD *)(v54 + 72) + 16), 3, (uint64_t *)&v87);
            *(_QWORD *)(v54 + 64) = llvm::AttributeList::removeAttributesAtIndex((_QWORD *)(v54 + 64), **(uint64_t ***)v54, 0, (uint64_t)&v87);
            std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v89, v90);
            v63 = llvm::CallBase::arg_end((llvm::CallBase *)v54);
            v64 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
            if (((v63 - v54 + 32 * v64) & 0x1FFFFFFFE0) != 0)
            {
              v65 = 0;
              v66 = -v64;
              v67 = v54;
              do
              {
                llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(v67 + 32 * v66), 3, (uint64_t *)&v87);
                *(_QWORD *)(v54 + 64) = llvm::AttributeList::removeAttributesAtIndex((_QWORD *)(v54 + 64), **(uint64_t ***)v54, ++v65, (uint64_t)&v87);
                std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v89, v90);
                v68 = llvm::CallBase::arg_end((llvm::CallBase *)v54);
                v69 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
                v66 = -v69;
                v67 += 32;
              }
              while (v65 < ((unint64_t)(v68 - v54 + 32 * v69) >> 5));
            }
          }
LABEL_150:
          v53 = (char *)*((_QWORD *)v53 + 1);
          v70 = k - 24;
          if (!k)
            v70 = 0;
          if (v53 == v70 + 40)
          {
            k = (char *)*((_QWORD *)k + 1);
            v71 = (char *)a2 + 72;
            while (k != (char *)a2 + 72)
            {
              v72 = k - 24;
              if (!k)
                v72 = 0;
              v53 = (char *)*((_QWORD *)v72 + 6);
              if (v53 != v72 + 40)
                goto LABEL_154;
              k = (char *)*((_QWORD *)k + 1);
            }
            goto LABEL_190;
          }
          v71 = (char *)a2 + 72;
LABEL_154:
          if (k == v71)
            goto LABEL_190;
        }
      }
    }
  }
}

void `anonymous namespace'::BitcodeReader::materializeModule(_anonymous_namespace_::BitcodeReader *this@<X0>, uint64_t *a2@<X8>)
{
  llvm::Module *v4;
  llvm::Function *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::CallBase **v21;
  uint64_t v22;
  llvm::CallBase *v23;
  uint64_t v24;
  llvm *v25;
  _QWORD *v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  llvm::Module *v35;
  llvm::Module *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::formatv_object_base *v42;
  __int16 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 32))(a2);
  if (!*a2)
  {
    *((_BYTE *)this + 1713) = 1;
    v6 = *((_QWORD *)this + 54);
    v7 = v6 + 24;
    for (i = *(_QWORD *)(v6 + 32); i != v7; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v9 = i - 56;
      else
        v9 = 0;
      (*(void (**)(_anonymous_namespace_::BitcodeReader *, uint64_t))(*(_QWORD *)this + 16))(this, v9);
      if (*a2)
        return;
    }
    v11 = *((_QWORD *)this + 55);
    v10 = *((_QWORD *)this + 56);
    if (*(_OWORD *)((char *)this + 440) == 0)
      goto LABEL_33;
    v50 = 0;
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v44 = 0u;
    if ((_BYTE)v50)
    {
      v13 = (__int128 *)*((_QWORD *)&v49 + 1);
      if (*((__int128 **)&v49 + 1) == &v48)
      {
        v14 = 4;
        v13 = &v48;
      }
      else
      {
        if (!*((_QWORD *)&v49 + 1))
          goto LABEL_20;
        v14 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
    }
LABEL_20:
    if (!BYTE8(v47))
      goto LABEL_26;
    v15 = (_QWORD *)v47;
    if ((_OWORD *)v47 == (_OWORD *)((char *)v46 + 8))
    {
      v16 = 4;
      v15 = (_QWORD *)v46 + 1;
    }
    else
    {
      if (!(_QWORD)v47)
        goto LABEL_26;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_26:
    if (!LOBYTE(v46[0]))
      goto LABEL_32;
    v17 = (__int128 *)*((_QWORD *)&v45 + 1);
    if (*((__int128 **)&v45 + 1) == &v44)
    {
      v18 = 4;
      v17 = &v44;
    }
    else
    {
      if (!*((_QWORD *)&v45 + 1))
        goto LABEL_32;
      v18 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_32:
    if (*a2)
      return;
LABEL_33:
    if (*((_DWORD *)this + 406))
    {
      v42 = (llvm::formatv_object_base *)"Never resolved function from blockaddress";
      v43 = 259;
      return;
    }
    if (*((_DWORD *)this + 386))
    {
      v19 = *((unsigned int *)this + 388);
      if ((_DWORD)v19)
      {
        v20 = 16 * v19;
        v21 = (llvm::CallBase **)*((_QWORD *)this + 192);
        while (((unint64_t)*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v21 += 2;
          v20 -= 16;
          if (!v20)
            goto LABEL_55;
        }
      }
      else
      {
        v21 = (llvm::CallBase **)*((_QWORD *)this + 192);
      }
      v22 = *((_QWORD *)this + 192) + 16 * v19;
      if (v21 != (llvm::CallBase **)v22)
      {
        v23 = *v21;
LABEL_44:
        v24 = *((_QWORD *)v23 + 1);
        if (v24)
        {
          do
          {
            v25 = *(llvm **)(v24 + 24);
            if (v25 && *((_BYTE *)v25 + 16) == 84)
              llvm::UpgradeIntrinsicCall(v25, v21[1], v5);
            v24 = *(_QWORD *)(v24 + 8);
          }
          while (v24);
          v23 = *v21;
          if (*((_QWORD *)*v21 + 1))
          {
            llvm::Value::doRAUW(v23, v21[1], (llvm::Value *)1);
            v23 = *v21;
          }
        }
        llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase(*((_QWORD *)v23 + 5) + 24, (uint64_t)v23 + 56);
        while (1)
        {
          v21 += 2;
          if (v21 == (llvm::CallBase **)v22)
            break;
          v23 = *v21;
          if (((unint64_t)*v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v21 != (llvm::CallBase **)v22)
              goto LABEL_44;
            break;
          }
        }
      }
    }
LABEL_55:
    v26 = (_QWORD *)((char *)this + 1536);
    v27 = *((_DWORD *)this + 386);
    if (v27)
    {
      v28 = *((_DWORD *)this + 388);
      if (v28 > 4 * v27 && v28 >= 0x41)
      {
        v29 = 1 << (33 - __clz(v27 - 1));
        if (v29 <= 64)
          v30 = 64;
        else
          v30 = v29;
LABEL_64:
        if (v30 == v28)
        {
          *((_QWORD *)this + 193) = 0;
          v31 = (_QWORD *)*((_QWORD *)this + 192);
          v32 = 16 * v28;
          do
          {
            *v31 = -4096;
            v31 += 2;
            v32 -= 16;
          }
          while (v32);
        }
        else
        {
          MEMORY[0x24BD1B398](*v26, 8);
          if (v30)
          {
            v37 = (4 * v30 / 3u + 1) | ((unint64_t)(4 * v30 / 3u + 1) >> 1);
            v38 = v37 | (v37 >> 2) | ((v37 | (v37 >> 2)) >> 4);
            LODWORD(v38) = (((v38 | (v38 >> 8)) >> 16) | v38 | (v38 >> 8)) + 1;
            *((_DWORD *)this + 388) = v38;
            v39 = operator new(16 * v38, (std::align_val_t)8uLL);
            *((_QWORD *)this + 192) = v39;
            *((_QWORD *)this + 193) = 0;
            v40 = *((unsigned int *)this + 388);
            if ((_DWORD)v40)
            {
              v41 = 16 * v40;
              do
              {
                *v39 = -4096;
                v39 += 2;
                v41 -= 16;
              }
              while (v41);
            }
          }
          else
          {
            *v26 = 0;
            *((_QWORD *)this + 193) = 0;
            *((_DWORD *)this + 388) = 0;
          }
        }
        goto LABEL_72;
      }
    }
    else
    {
      if (!*((_DWORD *)this + 387))
      {
LABEL_72:
        llvm::UpgradeDebugInfo(*((llvm **)this + 54), v4);
        llvm::UpgradeModuleFlags(*((llvm **)this + 54), v35);
        llvm::UpgradeARCRuntime(*((llvm **)this + 54), v36);
        *a2 = 0;
        return;
      }
      v28 = *((_DWORD *)this + 388);
      if (v28 > 0x40)
      {
        v30 = 0;
        goto LABEL_64;
      }
    }
    if (v28)
    {
      v33 = (_QWORD *)*v26;
      v34 = 16 * v28;
      do
      {
        *v33 = -4096;
        v33 += 2;
        v34 -= 16;
      }
      while (v34);
    }
    *((_QWORD *)this + 193) = 0;
    goto LABEL_72;
  }
}

void `anonymous namespace'::BitcodeReader::materializeMetadata(_anonymous_namespace_::BitcodeReader *this@<X0>, const llvm::Twine *a2@<X8>)
{
  unint64_t *v4;
  unint64_t *v5;
  llvm::Module *v6;
  uint64_t ModuleFlag;
  uint64_t v8;
  unint64_t inserted;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[4];
  __int16 v16;

  v4 = (unint64_t *)*((_QWORD *)this + 199);
  v5 = (unint64_t *)*((_QWORD *)this + 200);
  if (v4 == v5)
  {
LABEL_5:
    v6 = (llvm::Module *)*((_QWORD *)this + 54);
    v15[0] = (uint64_t)"llvm.linker.options";
    v16 = 259;
    if (llvm::Module::getNamedMetadata(v6, (const llvm::Twine *)v15))
      goto LABEL_6;
    ModuleFlag = llvm::Module::getModuleFlag(*((llvm::Module **)this + 54), "Linker Options", 0xEuLL);
    if (!ModuleFlag)
      goto LABEL_6;
    v8 = ModuleFlag;
    inserted = llvm::Module::getOrInsertNamedMetadata(*((_QWORD *)this + 54), (uint64_t *)"llvm.linker.options", (llvm::formatv_object_base *)0x13);
    v10 = *(_QWORD *)(v8 - 16);
    if ((v10 & 2) != 0)
    {
      v11 = *(uint64_t **)(v8 - 32);
      v12 = *(unsigned int *)(v8 - 24);
      if (!*(_DWORD *)(v8 - 24))
      {
LABEL_6:
        *((_QWORD *)this + 200) = *((_QWORD *)this + 199);
        *(_QWORD *)a2 = 0;
        return;
      }
    }
    else
    {
      v11 = (uint64_t *)(v8 - 16 - 8 * ((v10 >> 2) & 0xF));
      v12 = (v10 >> 6) & 0xF;
      if (!v12)
        goto LABEL_6;
    }
    v13 = 8 * v12;
    do
    {
      v14 = *v11++;
      v15[0] = v14;
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(_QWORD *)(inserted + 48), v15);
      v13 -= 8;
    }
    while (v13);
    goto LABEL_6;
  }
  while (1)
  {
    llvm::SimpleBitstreamCursor::JumpToBit((_anonymous_namespace_::BitcodeReader *)((char *)this + 32), *v4, a2);
    if (*(_QWORD *)a2)
      break;
    llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*((llvm::MetadataLoader::MetadataLoaderImpl **)this + 97), 1, a2);
    if (*(_QWORD *)a2)
      break;
    if (++v4 == v5)
      goto LABEL_5;
  }
}

uint64_t `anonymous namespace'::BitcodeReader::setStripDebugInfo(uint64_t this)
{
  *(_BYTE *)(this + 1714) = 1;
  return this;
}

_QWORD *`anonymous namespace'::BitcodeReader::getIdentifiedStructTypes@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (_BYTE *)this[234];
  v4 = (_BYTE *)this[235];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](a2, v5 >> 3);
    v6 = (char *)a2[1];
    this = memmove(v6, v3, v5);
    a2[1] = &v6[v5];
  }
  return this;
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C1C220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C1C220;
  a2[1] = v2;
  return result;
}

void std::__function::__func<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0,std::allocator<`anonymous namespace'::BitcodeReader::BitcodeReader(llvm::BitstreamCursor,llvm::StringRef,llvm::StringRef,llvm::LLVMContext &)::$_0>,llvm::Expected<llvm::Value *> ()(unsigned int,llvm::BasicBlock *)>::operator()(uint64_t a1@<X0>, unsigned int *a2@<X1>, const llvm::Twine **a3@<X2>, _anonymous_namespace_::BitcodeReader *a4@<X8>)
{
}

void `anonymous namespace'::BitcodeReader::materializeValue(_anonymous_namespace_::BitcodeReader *this, _QWORD *a2, llvm::BasicBlock *a3, const llvm::Twine *a4)
{
  _anonymous_namespace_::BitcodeReader *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  llvm::GlobalValue *v12;
  llvm::Type *v13;
  llvm::Type *v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  llvm::GlobalValue **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  llvm::BasicBlock *v34;
  llvm::ConstantExpr *v35;
  llvm::Value *v36;
  llvm::Value *ShuffleVector;
  uint64_t Compare;
  int v39;
  uint64_t v40;
  int v41;
  const char *OpcodeName;
  char v43;
  llvm::Value *v44;
  llvm::Value *v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  char v54;
  uint64_t v55;
  BOOL v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  llvm::BlockAddress *v60;
  uint64_t v61;
  _QWORD *v62;
  llvm::Function *v63;
  __int16 v64;
  llvm::CmpInst **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::GetElementPtrInst *v79;
  uint64_t *v80;
  llvm::SelectInst *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::ExtractElementInst *v84;
  llvm::Value *v85;
  llvm::InsertElementInst *v86;
  llvm::Value *v87;
  llvm::Value *v88;
  char *v89;
  llvm::Value *v90;
  llvm::Value *v91;
  llvm::Value *v92;
  uint64_t v93;
  uint64_t v94;
  llvm::Value *v95;
  llvm::Type *v96;
  llvm::ConstantInt *v97;
  llvm::Value **v98;
  llvm::Value *v99;
  llvm::Value *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _DWORD *inserted;
  _QWORD *v113;
  llvm::Value **v114;
  llvm::ConstantInt *v115;
  llvm::ConstantInt *v116;
  uint64_t *v117;
  _anonymous_namespace_::BitcodeReader *v118;
  llvm::Twine *v119;
  int v120;
  uint64_t v122;
  llvm::BlockAddress *__src;
  llvm::Value *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void *v132;
  uint64_t v133;
  _QWORD v134[2];
  __int16 v135;
  void *v136;
  uint64_t v137;
  _BYTE v138[48];
  void *v139;
  uint64_t v140;
  _BYTE v141[48];
  void *v142;
  uint64_t v143;
  _BYTE v144[48];
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;

  v5 = this;
  v148 = *MEMORY[0x24BDAC8D0];
  v131 = (int)a3;
  v6 = a2[89];
  if (((unint64_t)(a2[90] - v6) >> 5) > a3)
  {
    v7 = *(_QWORD *)(v6 + 32 * a3 + 16);
    if (v7)
    {
      if (*(unsigned __int8 *)(v7 + 16) != 255)
      {
        *((_BYTE *)this + 8) &= ~1u;
        *(_QWORD *)this = v7;
        return;
      }
    }
  }
  v145 = 1;
  for (i = 8; i != 72; i += 16)
    *(_DWORD *)((char *)&v145 + i) = -1;
  v142 = v144;
  v143 = 0xC00000000;
  v120 = (int)a3;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v142, (int)a3);
  v9 = v143;
  if (!(_DWORD)v143)
  {
LABEL_173:
    v132 = 0;
    if (llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)&v145, v120, &v132))
    {
      v111 = *((_QWORD *)v132 + 1);
    }
    else
    {
      inserted = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucketImpl<unsigned int>(&v145, &v131, v132);
      v111 = 0;
      *inserted = v120;
      *((_QWORD *)inserted + 1) = 0;
    }
    *((_BYTE *)v5 + 8) &= ~1u;
    goto LABEL_178;
  }
  v119 = (llvm::Twine *)(a2 + 1);
  v117 = (uint64_t *)((char *)a4 + 40);
  while (1)
  {
    while (1)
    {
      v10 = (char *)v142 + 4 * v9;
      v11 = *((unsigned int *)v10 - 1);
      if ((llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)&v145, *((_DWORD *)v10 - 1), &v132) & 1) == 0)break;
LABEL_14:
      LODWORD(v143) = --v9;
      if (!v9)
        goto LABEL_173;
    }
    v16 = a2[89];
    if (v11 >= ((unint64_t)(a2[90] - v16) >> 5))
      break;
    v17 = *(uint64_t ****)(v16 + 32 * v11 + 16);
    if (!v17)
      break;
    if (*((unsigned __int8 *)v17 + 16) != 255)
    {
      LODWORD(v139) = v11;
      v140 = (uint64_t)v17;
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&v132, (uint64_t)&v145, (int *)&v139, &v140);
      v9 = v143;
      goto LABEL_14;
    }
    v139 = v141;
    v140 = 0x600000000;
    v18 = *((unsigned int *)v17 + 7);
    if ((_DWORD)v18)
    {
      v19 = 4 * v18;
      do
      {
        v20 = *(_DWORD *)((char *)v17 + v19 + 44);
        v132 = 0;
        v21 = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)&v145, v20, &v132);
        if ((v145 & 1) != 0)
          v22 = &v148;
        else
          v22 = (uint64_t *)(v146 + 16 * v147);
        if (v21)
          v23 = v132 == v22;
        else
          v23 = 1;
        if (v23)
        {
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v142, v20);
        }
        else
        {
          if ((v145 & 1) != 0)
            v24 = &v149;
          else
            v24 = (uint64_t *)(v146 + 16 * v147 + 8);
          if (v21)
            v24 = (uint64_t *)((char *)v132 + 8);
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v139, *v24);
        }
        v19 -= 4;
      }
      while (v19);
      v25 = v140;
      v26 = (llvm::GlobalValue **)v139;
      if ((_DWORD)v140 != *((_DWORD *)v17 + 7))
      {
        v41 = 2;
        goto LABEL_95;
      }
      if ((_DWORD)v140)
      {
        v27 = (char *)v139 + 8 * v140 - 8;
        if (v27 > v139)
        {
          v28 = (char *)v139 + 8;
          do
          {
            v29 = *((_QWORD *)v28 - 1);
            *((_QWORD *)v28 - 1) = *(_QWORD *)v27;
            *(_QWORD *)v27 = v29;
            v27 -= 8;
            v30 = v28 >= v27;
            v28 += 8;
          }
          while (!v30);
          v26 = (llvm::GlobalValue **)v139;
        }
      }
      v136 = v138;
      v137 = 0x600000000;
      if ((_DWORD)v25)
      {
        v31 = 8 * v25;
        do
        {
          v12 = *v26;
          if (*v26)
            v32 = *((unsigned __int8 *)*v26 + 16) > 0x14u;
          else
            v32 = 1;
          if (!v32)
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v136, (uint64_t)v12);
          ++v26;
          v31 -= 8;
        }
        while (v31);
      }
    }
    else
    {
      v136 = v138;
      v137 = 0x600000000;
    }
    v33 = *((unsigned __int8 *)v17 + 24);
    if (v33 <= 0xF9)
    {
      if (byte_2579636D0)
        goto LABEL_57;
      if (v33 - 13 > 0x11)
      {
        switch(v33)
        {
          case 0xCu:
            goto LABEL_57;
          case 0x39u:
            goto LABEL_57;
          case 0x22u:
            v57 = (uint64_t *)v17[5];
            v58 = *((unsigned __int8 *)v57 + 8);
            if (v58 == 19)
              goto LABEL_57;
            if (v58 == 21)
            {
              getTargetTypeInfo(v57);
              if (*(_BYTE *)(v59 + 8) == 19)
                goto LABEL_57;
            }
            break;
        }
      }
      else if (((1 << v33) & 0x1FD4000) != 0)
      {
        goto LABEL_57;
      }
    }
    v34 = (llvm::BasicBlock *)v137;
    if ((_DWORD)v137 == (_DWORD)v140)
    {
      v35 = (llvm::ConstantExpr *)*((unsigned __int8 *)v17 + 24);
      if (((_DWORD)v35 - 38) > 0xC)
      {
        if (((_DWORD)v35 - 13) > 0x11)
        {
          switch(*((_BYTE *)v17 + 24))
          {
            case 0xFA:
              if (*(_BYTE *)(*(_QWORD *)v136 + 16))
                v60 = 0;
              else
                v60 = *(llvm::BlockAddress **)v136;
              __src = v60;
              if (!v60)
              {
                v132 = "blockaddress operand must be a function";
                v135 = 259;
                *((_BYTE *)v5 + 8) |= 1u;
                *(_QWORD *)v5 = v127;
                v127 = 0;
                goto LABEL_91;
              }
              v61 = *((unsigned int *)v17 + 8);
              if (!(_DWORD)v61)
              {
                v132 = "Invalid ID";
                v135 = 259;
                *((_BYTE *)v5 + 8) |= 1u;
                *(_QWORD *)v5 = v126;
                v126 = 0;
                goto LABEL_91;
              }
              if (*((llvm::BlockAddress **)v60 + 9) == (llvm::BlockAddress *)((char *)v60 + 72))
              {
                v104 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::FindAndConstruct((uint64_t)(a2 + 202), (uint64_t *)&__src);
                v106 = v104 + 1;
                v105 = v104[1];
                v107 = v104[2];
                if (v105 == v107)
                {
                  v108 = v104;
                  std::deque<llvm::Function *>::push_back(a2 + 205, &__src);
                  v105 = v108[1];
                  v107 = v108[2];
                }
                v109 = (v61 + 1);
                if (v109 > (v107 - v105) >> 3)
                {
                  std::vector<llvm::BasicBlock *>::resize(v106, v109);
                  v105 = *v106;
                }
                v63 = *(llvm::Function **)(v105 + 8 * v61);
                if (!v63)
                {
                  v110 = (_QWORD *)a2[53];
                  v135 = 257;
                  *(_QWORD *)(*v106 + 8 * v61) = llvm::BasicBlock::Create(v110, (const llvm::Twine *)&v132, 0, 0);
                  v63 = *(llvm::Function **)(*v106 + 8 * v61);
                }
                goto LABEL_171;
              }
              v62 = (_QWORD *)*((_QWORD *)v60 + 10);
              while (v62 != (_QWORD *)((char *)v60 + 72))
              {
                v62 = (_QWORD *)v62[1];
                if (!--v61)
                {
                  if (v62)
                    v63 = (llvm::Function *)(v62 - 3);
                  else
                    v63 = 0;
LABEL_171:
                  Compare = (uint64_t)llvm::BlockAddress::get(v60, v63, v34);
                  goto LABEL_72;
                }
              }
              v132 = "Invalid ID";
              v135 = 259;
              *((_BYTE *)v5 + 8) |= 1u;
              *(_QWORD *)v5 = v125;
              v125 = 0;
              break;
            case 0xFB:
              v75 = *(unsigned __int8 **)v136;
              if (*(_QWORD *)v136 && v75[16] < 4u)
              {
                Compare = llvm::DSOLocalEquivalent::get((llvm::DSOLocalEquivalent *)v75, v12);
                goto LABEL_72;
              }
              v132 = "dso_local operand must be GlobalValue";
              v135 = 259;
              *((_BYTE *)v5 + 8) |= 1u;
              *(_QWORD *)v5 = v128;
              v128 = 0;
              goto LABEL_91;
            case 0xFC:
              v76 = *(unsigned __int8 **)v136;
              if (*(_QWORD *)v136 && v76[16] < 4u)
              {
                Compare = llvm::NoCFIValue::get((llvm::NoCFIValue *)v76, v12);
                goto LABEL_72;
              }
              v132 = "no_cfi operand must be GlobalValue";
              v135 = 259;
              *((_BYTE *)v5 + 8) |= 1u;
              *(_QWORD *)v5 = v129;
              v129 = 0;
              goto LABEL_91;
            case 0xFD:
              Compare = (uint64_t)llvm::ConstantVector::get((uint64_t ****)v136, (llvm::Type *)v137);
              goto LABEL_72;
            case 0xFE:
              Compare = (uint64_t)llvm::ConstantArray::get((llvm::PoisonValue *)*v17, (llvm::Type *)v136, (unint64_t *)v137);
              goto LABEL_72;
            case 0xFF:
              Compare = (uint64_t)llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)*v17, (llvm::Type *)v136, (unint64_t *)v137);
              goto LABEL_72;
            default:
              switch(*((_BYTE *)v17 + 24))
              {
                case '5':
                case '6':
                  Compare = (uint64_t)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)*((unsigned __int8 *)v17 + 25), *(uint64_t ****)v136, *((llvm::Constant **)v136 + 1), 0);
                  goto LABEL_72;
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                  goto LABEL_184;
                case '=':
                  Compare = (uint64_t)llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)v136, *((llvm::Constant **)v136 + 1), 0, v13);
                  goto LABEL_72;
                case '>':
                  Compare = (uint64_t)llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)v136, *((llvm::Constant **)v136 + 1), *((llvm::Constant **)v136 + 2), 0, v14);
                  goto LABEL_72;
                case '?':
                  v132 = v134;
                  v133 = 0x1000000000;
                  llvm::ShuffleVectorInst::getShuffleMask(*((unsigned int **)v136 + 2), (unsigned int *)&v132);
                  ShuffleVector = (llvm::Value *)llvm::ConstantExpr::getShuffleVector(*(llvm::ConstantExpr **)v136, *((llvm::ConstantExpr **)v136 + 1), (int *)v132, v133, 0);
                  if (v132 != v134)
                    free(v132);
                  goto LABEL_73;
                default:
                  LODWORD(v77) = *((_DWORD *)v17 + 8);
                  v78 = (_DWORD)v77 != -1;
                  if ((_DWORD)v77 == -1)
                    v77 = 0;
                  else
                    v77 = v77;
                  Compare = llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)v17[5], *(uint64_t **)v136, (llvm::Value *)((char *)v136 + 8), v137 - 1, *((_BYTE *)v17 + 25) != 0, v77 | (v78 << 32), 0);
                  goto LABEL_72;
              }
          }
          goto LABEL_91;
        }
        Compare = (uint64_t)llvm::ConstantExpr::get(v35, *(llvm::Constant **)v136, *((llvm::Constant **)v136 + 1), (llvm::Constant *)*((unsigned __int8 *)v17 + 25), 0, v15);
LABEL_72:
        ShuffleVector = (llvm::Value *)Compare;
      }
      else
      {
        llvm::UpgradeBitCastExpr(v35, *(_QWORD *)v136, (llvm::Constant *)*v17, v13);
        ShuffleVector = v36;
        if (!v36)
        {
          Compare = llvm::ConstantExpr::getCast(*((unsigned __int8 *)v17 + 24));
          goto LABEL_72;
        }
      }
LABEL_73:
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2[89] + 32 * v11), (uint64_t)ShuffleVector);
      LODWORD(__src) = v11;
      v124 = ShuffleVector;
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&v132, (uint64_t)&v145, (int *)&__src, &v124);
      LODWORD(v143) = v143 - 1;
      v41 = 2;
      goto LABEL_92;
    }
LABEL_57:
    if (!a4)
    {
      OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int8 *)v17 + 24));
      if (*OpcodeName)
      {
        v132 = "Value referenced by initializer is an unsupported constant expression of type ";
        v134[0] = OpcodeName;
        v43 = 3;
      }
      else
      {
        v132 = "Value referenced by initializer is an unsupported constant expression of type ";
        v43 = 1;
      }
      LOBYTE(v135) = 3;
      HIBYTE(v135) = v43;
      *((_BYTE *)v5 + 8) |= 1u;
      *(_QWORD *)v5 = v122;
      v122 = 0;
LABEL_91:
      v41 = 1;
      goto LABEL_92;
    }
    v118 = v5;
    v39 = *((unsigned __int8 *)v17 + 24);
    if ((v39 - 38) > 0xC)
    {
      if (v39 != 12)
      {
        if ((v39 - 13) > 0x11)
        {
          if (*((unsigned __int8 *)v17 + 24) <= 0xFCu)
          {
            switch(*((_BYTE *)v17 + 24))
            {
              case '5':
              case '6':
                v64 = *((unsigned __int8 *)v17 + 25);
                v65 = *(llvm::CmpInst ***)v139;
                v66 = *((_QWORD *)v139 + 1);
                v132 = "constexpr";
                v135 = 259;
                v40 = llvm::CmpInst::Create(v39, v64, v65, v66, (const llvm::Twine *)&v132, (uint64_t)a4);
                goto LABEL_65;
              case '7':
              case '8':
              case ':':
              case ';':
              case '<':
LABEL_184:
                __break(1u);
                return;
              case '9':
                v81 = *(llvm::SelectInst **)v139;
                v82 = (llvm::Value *)*((_QWORD *)v139 + 1);
                v83 = (llvm::Value *)*((_QWORD *)v139 + 2);
                v132 = "constexpr";
                v135 = 259;
                v40 = (uint64_t)llvm::SelectInst::Create(v81, v82, v83, (llvm::Value *)&v132, a4, v15);
                goto LABEL_65;
              case '=':
                v84 = *(llvm::ExtractElementInst **)v139;
                v85 = (llvm::Value *)*((_QWORD *)v139 + 1);
                v132 = "constexpr";
                v135 = 259;
                v40 = (uint64_t)llvm::ExtractElementInst::Create(v84, v85, (llvm::Value *)&v132, a4, v14);
                goto LABEL_65;
              case '>':
                v86 = *(llvm::InsertElementInst **)v139;
                v87 = (llvm::Value *)*((_QWORD *)v139 + 1);
                v88 = (llvm::Value *)*((_QWORD *)v139 + 2);
                v132 = "constexpr";
                v135 = 259;
                v40 = (uint64_t)llvm::InsertElementInst::Create(v86, v87, v88, (llvm::Value *)&v132, a4, v15);
                goto LABEL_65;
              case '?':
                v89 = (char *)operator new(0xA8uLL);
                v45 = (llvm::Value *)(v89 + 64);
                *((_DWORD *)v89 + 21) = *((_DWORD *)v89 + 21) & 0x38000000 | 2;
                *(_QWORD *)v89 = 0;
                *((_QWORD *)v89 + 1) = 0;
                *((_QWORD *)v89 + 2) = 0;
                *((_QWORD *)v89 + 3) = v89 + 64;
                *((_QWORD *)v89 + 4) = 0;
                *((_QWORD *)v89 + 5) = 0;
                *((_QWORD *)v89 + 6) = 0;
                *((_QWORD *)v89 + 7) = v89 + 64;
                v90 = *(llvm::Value **)v139;
                v91 = (llvm::Value *)*((_QWORD *)v139 + 1);
                v92 = (llvm::Value *)*((_QWORD *)v139 + 2);
                v132 = "constexpr";
                v135 = 259;
                llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::ShuffleVectorInst *)(v89 + 64), v90, v91, v92, (const llvm::Twine *)&v132, a4);
                goto LABEL_66;
              default:
                v79 = (llvm::GetElementPtrInst *)v17[5];
                v80 = *(uint64_t **)v139;
                v132 = "constexpr";
                v135 = 259;
                v45 = (llvm::Value *)llvm::GetElementPtrInst::Create(v79, v80, (llvm::Value *)((char *)v139 + 8), v140 - 1, (const llvm::Twine *)&v132, (uint64_t)a4);
                if (!*((_BYTE *)v17 + 25))
                  goto LABEL_66;
                goto LABEL_88;
            }
          }
          if ((v39 - 254) >= 2)
          {
            v93 = ***v17;
            v94 = llvm::PoisonValue::get((llvm::PoisonValue *)*v17, v12);
            v95 = (llvm::Value *)v94;
            if ((_DWORD)v140)
            {
              v96 = 0;
              v97 = (llvm::ConstantInt *)(v93 + 1992);
              v98 = (llvm::Value **)v139;
              v114 = (llvm::Value **)((char *)v139 + 8 * v140);
              v116 = v97;
              do
              {
                v99 = (llvm::Value *)llvm::ConstantInt::get(v116, v96, 0);
                v100 = *v98;
                v132 = "constexpr.ins";
                v135 = 259;
                v101 = (char *)operator new(0xA0uLL);
                v102 = 0;
                v45 = (llvm::Value *)(v101 + 96);
                *((_DWORD *)v101 + 29) = *((_DWORD *)v101 + 29) & 0x38000000 | 3;
                do
                {
                  v103 = &v101[v102];
                  *(_QWORD *)v103 = 0;
                  *((_QWORD *)v103 + 1) = 0;
                  *((_QWORD *)v103 + 2) = 0;
                  *((_QWORD *)v103 + 3) = v45;
                  v102 += 32;
                }
                while (v102 != 96);
                llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v101 + 96), v95, v100, v99, (const llvm::Twine *)&v132, a4);
                v96 = (llvm::Type *)((char *)v96 + 1);
                ++v98;
                v95 = v45;
              }
              while (v98 != v114);
            }
            else
            {
              v45 = (llvm::Value *)v94;
            }
          }
          else
          {
            v67 = llvm::PoisonValue::get((llvm::PoisonValue *)*v17, v12);
            v68 = (uint64_t *)v67;
            if ((_DWORD)v140)
            {
              v69 = 0;
              v113 = v139;
              v70 = 8 * v140;
              do
              {
                v115 = (llvm::ConstantInt *)v113[v69];
                LODWORD(__src) = v69;
                v132 = "constexpr.ins";
                v135 = 259;
                v71 = (char *)operator new(0xA0uLL);
                *((_QWORD *)v71 + 1) = 0;
                *((_QWORD *)v71 + 2) = 0;
                *(_QWORD *)v71 = 0;
                *((_QWORD *)v71 + 5) = 0;
                *((_QWORD *)v71 + 6) = 0;
                *((_QWORD *)v71 + 4) = 0;
                v72 = *v68;
                *(_OWORD *)(v71 + 88) = 0u;
                v73 = (uint64_t *)(v71 + 88);
                *((_QWORD *)v71 + 8) = v72;
                v45 = (llvm::Value *)(v71 + 64);
                *((_QWORD *)v71 + 3) = v71 + 64;
                *((_QWORD *)v71 + 7) = v71 + 64;
                *((_QWORD *)v71 + 9) = 0;
                v71[80] = 93;
                v71[81] = 0;
                *((_WORD *)v71 + 41) = 0;
                *((_DWORD *)v71 + 21) = 2;
                *((_DWORD *)v71 + 30) = 0;
                *(_OWORD *)(v71 + 104) = 0u;
                llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v117, (uint64_t)(v71 + 64));
                v74 = *v117;
                *v73 = *v117;
                v73[1] = (uint64_t)v117;
                *(_QWORD *)(v74 + 8) = v73;
                *v117 = (uint64_t)v73;
                v73[5] = (uint64_t)(v73 + 7);
                v73[6] = 0x400000000;
                llvm::InsertValueInst::init((unsigned int *)v45, (uint64_t)v68, (uint64_t)v115, &__src, 1, (const llvm::Twine *)&v132);
                ++v69;
                v68 = (uint64_t *)v45;
                v70 -= 8;
              }
              while (v70);
            }
            else
            {
              v45 = (llvm::Value *)v67;
            }
          }
        }
        else
        {
          v46 = *(uint64_t **)v139;
          v47 = *((_QWORD *)v139 + 1);
          v132 = "constexpr";
          v135 = 259;
          v48 = llvm::BinaryOperator::Create(v39, v46, v47, (const llvm::Twine *)&v132, (uint64_t)a4);
          v45 = (llvm::Value *)v48;
          v49 = v48[16];
          HIDWORD(v51) = v49 - 41;
          LODWORD(v51) = v49 - 41;
          v50 = v51 >> 1;
          v32 = v50 > 6;
          v52 = (1 << v50) & 0x47;
          if (!v32 && v52 != 0)
          {
            v54 = *((_BYTE *)v17 + 25);
            if ((v54 & 2) != 0)
            {
              v48[17] |= 4u;
              v54 = *((_BYTE *)v17 + 25);
            }
            if ((v54 & 1) != 0)
              v48[17] |= 2u;
          }
          v32 = v49 > 0x37;
          v55 = (1 << v49) & 0xC1800000000000;
          v56 = v32 || v55 == 0;
          if (!v56 && (*((_BYTE *)v17 + 25) & 1) != 0)
LABEL_88:
            *((_BYTE *)v45 + 17) |= 2u;
        }
        goto LABEL_66;
      }
      v44 = *(llvm::Value **)v139;
      v132 = "constexpr";
      v135 = 259;
      v40 = (uint64_t)llvm::UnaryOperator::Create(12, v44, (const llvm::Twine *)&v132, (uint64_t)a4);
    }
    else
    {
      v132 = "constexpr";
      v135 = 259;
      llvm::CastInst::Create(v39);
    }
LABEL_65:
    v45 = (llvm::Value *)v40;
LABEL_66:
    LODWORD(__src) = v11;
    v124 = v45;
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&v132, (uint64_t)&v145, (int *)&__src, &v124);
    v41 = 0;
    LODWORD(v143) = v143 - 1;
    v5 = v118;
LABEL_92:
    if (v136 != v138)
      free(v136);
    v26 = (llvm::GlobalValue **)v139;
LABEL_95:
    if (v26 != (llvm::GlobalValue **)v141)
      free(v26);
    if ((v41 | 2) != 2)
      goto LABEL_179;
    v9 = v143;
    if (!(_DWORD)v143)
      goto LABEL_173;
  }
  v132 = "Invalid value ID";
  v135 = 259;
  *((_BYTE *)v5 + 8) |= 1u;
  v111 = v130;
LABEL_178:
  *(_QWORD *)v5 = v111;
LABEL_179:
  if (v142 != v144)
    free(v142);
  if ((v145 & 1) == 0)
    MEMORY[0x24BD1B398](v146, 8);
}

void `anonymous namespace'::BitcodeReaderBase::error(_anonymous_namespace_::BitcodeReaderBase *this, const llvm::Twine *a2, llvm::formatv_object_base **a3)
{
  std::string *v5;
  std::string::size_type v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  void **v13;
  std::string::size_type v14;
  void *__p[2];
  uint64_t v16;
  __int16 v17;
  void *v18[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;

  llvm::Twine::str(a3, &v23);
  if (*((char *)a2 + 415) < 0)
  {
    if (!*((_QWORD *)a2 + 50))
      goto LABEL_27;
  }
  else if (!*((_BYTE *)a2 + 415))
  {
    goto LABEL_27;
  }
  std::operator+<char>();
  v5 = std::string::append(&v20, "' Reader: 'LLVM ");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  llvm::AppleInternalGetFullBitcodeVersionString(v18);
  if ((v19 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (void **)v18[0];
  if ((v19 & 0x80u) == 0)
    v8 = v19;
  else
    v8 = (std::string::size_type)v18[1];
  v9 = std::string::append(&v21, (const std::string::value_type *)v7, v8);
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v22, "')");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v16 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v16 >= 0)
    v14 = HIBYTE(v16);
  else
    v14 = (std::string::size_type)__p[1];
  std::string::append(&v23, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
LABEL_27:
  v17 = 260;
  __p[0] = &v23;
  error(this, (llvm::formatv_object_base **)__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void std::deque<llvm::Function *>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
LABEL_35:
      a1[2] += 8;
LABEL_36:
      v4 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_37;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v4;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
      goto LABEL_35;
    }
    v30 = v27 >> 2;
    if (v25 == v26)
      v31 = 1;
    else
      v31 = v30;
    v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v31);
    v34 = v33;
    v35 = &v32[8 * v24];
    v36 = &v32[8 * v33];
    v37 = operator new(0x1000uLL);
    if (v24 == v34)
    {
      v38 = 8 * v24;
      if (v6 < 1)
      {
        v73 = v37;
        v74 = v38 >> 2;
        if (v5 == v4)
          v75 = 1;
        else
          v75 = v74;
        v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v75);
        v35 = &v76[8 * (v75 >> 2)];
        v36 = &v76[8 * v77];
        if (v32)
          operator delete(v32);
        v32 = v76;
        v37 = v73;
      }
      else
      {
        v39 = v38 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v35 -= 8 * (v40 >> 1);
      }
    }
    *(_QWORD *)v35 = v37;
    v78 = v35 + 8;
    v79 = a1[2];
    if (v79 == a1[1])
    {
      v94 = v35;
      v80 = v35 + 8;
LABEL_82:
      v95 = (char *)*a1;
      *a1 = v32;
      a1[1] = v94;
      a1[2] = v80;
      a1[3] = v36;
      if (v95)
        operator delete(v95);
      goto LABEL_36;
    }
    while (1)
    {
      if (v35 == v32)
      {
        if (v78 < v36)
        {
          v82 = (v36 - v78) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v80 = &v78[8 * (v83 >> 1)];
          v81 = &v35[8 * (v83 >> 1)];
          if (v78 == v35)
            v35 = v78;
          else
            memmove(&v35[8 * (v83 >> 1)], v35, v78 - v35);
          goto LABEL_78;
        }
        if (v36 == v35)
          v84 = 1;
        else
          v84 = (v36 - v35) >> 2;
        v85 = 2 * v84;
        v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v84);
        v32 = v86;
        v81 = &v86[(v85 + 6) & 0xFFFFFFFFFFFFFFF8];
        v80 = v81;
        v88 = v78 - v35;
        if (v78 != v35)
        {
          v80 = &v81[v88 & 0xFFFFFFFFFFFFFFF8];
          v89 = 8 * (v88 >> 3);
          v90 = v81;
          v91 = v35;
          do
          {
            v92 = *(_QWORD *)v91;
            v91 += 8;
            *(_QWORD *)v90 = v92;
            v90 += 8;
            v89 -= 8;
          }
          while (v89);
        }
        v36 = &v86[8 * v87];
        operator delete(v35);
      }
      else
      {
        v80 = v78;
        v81 = v35;
      }
      v35 = v32;
LABEL_78:
      v32 = v35;
      v93 = *(_QWORD *)(v79 - 8);
      v79 -= 8;
      *((_QWORD *)v81 - 1) = v93;
      v94 = v81 - 8;
      v78 = v80;
      v35 = v94;
      if (v79 == a1[1])
        goto LABEL_82;
    }
  }
LABEL_37:
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void std::vector<llvm::BasicBlock *>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    abort();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v11);
  v13 = &v12[8 * v5];
  v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  v16 = &v13[8 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

llvm::InsertElementInst *llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  _DWORD *v11;
  uint64_t v12;
  llvm::InsertElementInst *v13;
  _QWORD *v14;

  v11 = operator new(0xA0uLL);
  v12 = 0;
  v13 = (llvm::InsertElementInst *)(v11 + 24);
  v11[29] = v11[29] & 0x38000000 | 3;
  do
  {
    v14 = &v11[v12];
    *v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v13;
    v12 += 8;
  }
  while (v12 != 24);
  return llvm::InsertElementInst::InsertElementInst(v13, this, a2, a3, a4, a5);
}

_QWORD *llvm::GetElementPtrInst::Create(llvm::GetElementPtrInst *TypeAtIndex, uint64_t *a2, llvm::Value *a3, uint64_t a4, const llvm::Twine *a5, uint64_t a6)
{
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  llvm::Value *v16;
  uint64_t v17;
  llvm::Type **v18;
  uint64_t v19;
  llvm::Type *v20;

  v12 = a4 + 1;
  v13 = llvm::User::operator new((llvm::User *)0x50, (int)a4 + 1);
  llvm::GetElementPtrInst::getGEPReturnType(TypeAtIndex, a2, a3, a4);
  *v13 = v14;
  v13[1] = 0;
  v15 = *((_DWORD *)v13 + 5) & 0xC0000000 | v12 & 0x7FFFFFF;
  *((_DWORD *)v13 + 4) = 62;
  *((_DWORD *)v13 + 5) = v15;
  *(_OWORD *)(v13 + 5) = 0u;
  *((_DWORD *)v13 + 14) = 0;
  *(_OWORD *)(v13 + 3) = 0u;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a6 + 40, (uint64_t)v13);
  v17 = *(_QWORD *)(a6 + 40);
  v13[4] = a6 + 40;
  v13[3] = v17;
  *(_QWORD *)(v17 + 8) = v13 + 3;
  *(_QWORD *)(a6 + 40) = v13 + 3;
  v13[8] = TypeAtIndex;
  if (a4)
  {
    v18 = (llvm::Type **)((char *)a3 + 8);
    v19 = 8 * a4 - 8;
    do
    {
      if (!v19)
        break;
      v20 = *v18++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v20, v16);
      v19 -= 8;
    }
    while (TypeAtIndex);
  }
  v13[9] = TypeAtIndex;
  llvm::GetElementPtrInst::init((llvm::Value *)v13, (uint64_t)a2, (uint64_t *)a3, a4, a5);
  return v13;
}

llvm::Value *llvm::SelectInst::Create(llvm::SelectInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  char *v11;
  uint64_t v12;
  llvm::Value *v13;
  char *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;

  v11 = (char *)operator new(0xA0uLL);
  v12 = 0;
  v13 = (llvm::Value *)(v11 + 96);
  *((_DWORD *)v11 + 29) = *((_DWORD *)v11 + 29) & 0x38000000 | 3;
  do
  {
    v14 = &v11[v12];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = v13;
    v12 += 32;
  }
  while (v12 != 96);
  *(_OWORD *)(v11 + 120) = 0u;
  v15 = v11 + 120;
  *((_QWORD *)v11 + 12) = *(_QWORD *)a2;
  *((_QWORD *)v11 + 13) = 0;
  v16 = *((_DWORD *)v11 + 29) & 0xC0000000 | 3;
  *((_DWORD *)v11 + 28) = 85;
  *((_DWORD *)v11 + 29) = v16;
  *(_OWORD *)(v11 + 136) = 0u;
  *((_DWORD *)v11 + 38) = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a5 + 40, (uint64_t)v13);
  v17 = *((_QWORD *)a5 + 5);
  *v15 = v17;
  v15[1] = (char *)a5 + 40;
  *(_QWORD *)(v17 + 8) = v15;
  *((_QWORD *)a5 + 5) = v15;
  llvm::SelectInst::init((uint64_t)v13, (uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  llvm::Value::setName(v13, a4);
  return v13;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  _DWORD *v9;

  v9 = operator new(0x80uLL);
  v9[21] = v9[21] & 0x38000000 | 2;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v9 + 16;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = v9 + 16;
  return llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v9 + 16), this, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::try_emplace<llvm::Value *>(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _DWORD *v16;

  v16 = 0;
  result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v14 = 0;
    v15 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucketImpl<unsigned int>((_DWORD *)a2, a3, v16);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v15 = v12 + 16 * v13;
    v14 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v15;
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::InsertIntoBucketImpl<unsigned int>(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow((uint64_t)a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1)
    --a1[1];
  return a3;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::moveFromOldBuckets(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x24BD1B398);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      *((_QWORD *)v9 + 1) = *(_QWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::moveFromOldBuckets(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::Value *,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>,unsigned int,llvm::Value *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::Value *>>::LookupBucketFor<unsigned int>((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::MCSymbol const*,std::vector<llvm::StringRef>,llvm::DenseMapInfo<llvm::MCSymbol const*,void>,llvm::detail::DenseMapPair<llvm::MCSymbol const*,std::vector<llvm::StringRef>>>::grow(a1, v7);
    v8 = 0;
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, llvm::ValueHandleBase *a2)
{
  llvm::ValueHandleBase *v4;
  uint64_t v5;

  v4 = *(llvm::ValueHandleBase **)(a1 + 8);
  while (v4 != a2)
  {
    v5 = *((_QWORD *)v4 - 2);
    v4 = (llvm::ValueHandleBase *)((char *)v4 - 32);
    if (v5 != -8192 && v5 != -4096 && v5 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(v4);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 56);
  std::vector<std::pair<unsigned int,std::string>>::__destroy_vector::operator()[abi:nn180100](&v3);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  v3 = (void **)(a2 + 8);
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void std::vector<std::pair<unsigned int,std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned int,std::string>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<unsigned int,std::string>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void `anonymous namespace'::BitcodeReader::parseFunctionBody(_anonymous_namespace_::BitcodeReader *this, llvm::Function *a2, llvm::Function *a3)
{
  _anonymous_namespace_::BitcodeReader *v5;
  llvm::BitstreamCursor *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  unsigned int v13;
  int ContainedTypeID;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  _QWORD *v18;
  _WORD *v19;
  const llvm::Twine *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  llvm::Instruction *v25;
  int v26;
  _WORD *v27;
  _QWORD *v28;
  _BOOL4 v29;
  unsigned int v30;
  llvm::GetElementPtrInst *v31;
  uint64_t v32;
  _WORD *v33;
  int v34;
  llvm::CmpInst **v35;
  unsigned int v36;
  llvm::MCAsmLexer *v37;
  unsigned int v38;
  uint64_t v39;
  llvm::CmpInst *v40;
  int v41;
  int v42;
  llvm::Type *v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  llvm::Type *v49;
  int v50;
  uint64_t *v51;
  unsigned int v52;
  llvm::Type *v53;
  int v54;
  unsigned int v55;
  llvm::MCAsmLexer *v56;
  char *v57;
  _anonymous_namespace_::BitcodeReaderBase *v58;
  _anonymous_namespace_::BitcodeReaderBase *v59;
  char *v60;
  _anonymous_namespace_::BitcodeReaderBase *v61;
  uint64_t *v62;
  uint64_t v63;
  llvm::Value *v64;
  llvm::GetElementPtrInst *v65;
  llvm::Function *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _WORD *v71;
  int v72;
  uint64_t *v73;
  unsigned int v74;
  unsigned int v75;
  llvm::MCAsmLexer *FnValueByID;
  uint64_t v77;
  uint64_t v78;
  unsigned int DecodedBinaryOpcode;
  unsigned int v80;
  llvm::Value *v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  int v87;
  _WORD *v88;
  uint64_t v89;
  llvm::Value *TypeByID;
  llvm *DecodedCastOpcode;
  llvm::Instruction **v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  llvm::Value *v97;
  unsigned int *v98;
  llvm::BasicBlock *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  llvm::Value *v105;
  unsigned int v106;
  llvm::MCAsmLexer *v107;
  llvm::Value *v108;
  int v109;
  unsigned int v110;
  llvm::MCAsmLexer *v111;
  llvm::Value *v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  const llvm::Twine *v117;
  llvm::Instruction *v118;
  llvm::ExtractElementInst *v119;
  llvm::InsertElementInst *v120;
  llvm::Type *v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  llvm::MCAsmLexer *v126;
  llvm::Value *v127;
  const llvm::Twine *v128;
  llvm::Instruction *v129;
  llvm::InsertElementInst *v130;
  unsigned int *v131;
  int v132;
  llvm::Value *v133;
  int v134;
  unsigned int v135;
  llvm::MCAsmLexer *v136;
  llvm::Value *v137;
  _DWORD *v138;
  llvm::Value *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  llvm::BranchInst *v146;
  void *v147;
  unint64_t v148;
  unsigned int v149;
  llvm::Type *v150;
  unsigned int v151;
  llvm::MCAsmLexer *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  llvm::Type *v159;
  _DWORD *v160;
  llvm::Value *v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  llvm::BasicBlock *v168;
  uint64_t *v169;
  uint64_t *v170;
  _WORD *v171;
  uint64_t v172;
  llvm::BasicBlock *v173;
  _QWORD *v174;
  _QWORD *v175;
  llvm::MCAsmLexer *ValueSigned;
  llvm::Value *v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  llvm::PointerType **v182;
  char *v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  unsigned int v187;
  uint64_t v188;
  llvm::Type *v189;
  _WORD *v190;
  int v191;
  llvm::Type *v192;
  llvm::MCAsmLexer *v193;
  int v194;
  unsigned int v195;
  char *v196;
  int v197;
  unsigned int v198;
  int v199;
  llvm::Value *v200;
  unsigned int v201;
  unsigned int v202;
  llvm::MCAsmLexer *v203;
  llvm::Value *v204;
  llvm::Type *v205;
  char *v206;
  _WORD *v207;
  int v208;
  llvm::Type *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 **v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int16 v218;
  unsigned int v219;
  uint64_t *v220;
  unsigned int v221;
  llvm::Type *v222;
  int v223;
  unsigned int v224;
  llvm::Type **v225;
  unsigned int v226;
  llvm::MCAsmLexer *v227;
  uint64_t v228;
  _anonymous_namespace_::BitcodeReaderBase *v229;
  llvm::Value *v230;
  llvm::Instruction *v231;
  uint64_t v232;
  unsigned int *v233;
  uint64_t v234;
  int v235;
  uint64_t *v236;
  unsigned int v237;
  uint64_t v238;
  llvm::Type *v239;
  unsigned int v240;
  uint64_t *v241;
  int v242;
  llvm::Type **v243;
  unsigned int v244;
  llvm::MCAsmLexer *v245;
  uint64_t v246;
  char *v247;
  llvm::Type *v248;
  int v249;
  unsigned int v250;
  llvm::MCAsmLexer *v251;
  llvm::BasicBlock *v252;
  llvm::Instruction *v253;
  unint64_t v254;
  uint64_t v255;
  llvm::Value *v256;
  llvm::Type *v257;
  int v258;
  unsigned int v259;
  llvm::MCAsmLexer *v260;
  llvm::BasicBlock *v261;
  llvm::Instruction *v262;
  unint64_t v263;
  uint64_t v264;
  llvm::Value *v265;
  llvm::Type *v266;
  int v267;
  _WORD *v268;
  unsigned int v269;
  llvm::MCAsmLexer *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  llvm::Value *v274;
  int DecodedUnaryOpcode;
  llvm::UnaryInstruction *v276;
  int v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _DWORD *v281;
  _WORD *v282;
  char *v283;
  char *v284;
  uint64_t v285;
  BOOL v286;
  _QWORD *v287;
  unint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  llvm::Instruction *v300;
  llvm::LandingPadInst *v301;
  llvm::Function *v302;
  __int16 v303;
  uint64_t v304;
  llvm::Value *v305;
  llvm::Value *v306;
  int v307;
  uint64_t v308;
  char *v309;
  unsigned int v310;
  llvm::Type *v311;
  unsigned int v312;
  llvm::Type *v313;
  _QWORD *v314;
  llvm::MCAsmLexer *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int m;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  int v325;
  int v326;
  uint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  const char *v332;
  _anonymous_namespace_::BitcodeReaderBase *v333;
  BOOL v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  llvm::Type *v338;
  int v339;
  unsigned int v340;
  unint64_t v341;
  uint64_t v342;
  llvm::BasicBlock *v343;
  int v344;
  _DWORD *v345;
  llvm::User *v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int *v351;
  uint64_t v352;
  int v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t *v362;
  llvm::Value *v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unsigned int v378;
  llvm::Type *v379;
  llvm::MCAsmLexer *v380;
  uint64_t v381;
  llvm::Type *v382;
  unsigned int v383;
  unint64_t v384;
  llvm::Type *v385;
  _DWORD *v386;
  llvm::Value *v387;
  uint64_t *v388;
  llvm::Type *v389;
  _WORD *v390;
  unint64_t v391;
  unsigned int v392;
  _anonymous_namespace_::BitcodeReader *v393;
  unsigned int v394;
  llvm::Type *v395;
  unsigned int v396;
  llvm::MCAsmLexer *v397;
  llvm::Value *v398;
  uint64_t v399;
  _DWORD *v400;
  uint64_t v401;
  llvm::BasicBlock *v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  _anonymous_namespace_::BitcodeReaderBase *v409;
  char *v410;
  unsigned int v411;
  uint64_t *v412;
  void *v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  unint64_t v420;
  unint64_t v421;
  char *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  int v426;
  uint64_t v427;
  _DWORD *v428;
  _DWORD *v429;
  uint64_t v430;
  _DWORD *SplatValue;
  _QWORD *v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t *v435;
  int v436;
  int v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  _anonymous_namespace_::BitcodeReaderBase *v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  unint64_t v447;
  uint64_t v448;
  llvm::BasicBlock *v449;
  uint64_t v450;
  uint64_t v451;
  BOOL v452;
  unsigned int v453;
  unsigned int v454;
  int v455;
  int v456;
  llvm::MDNode *MetadataFwdRefOrLoad;
  uint64_t v458;
  uint64_t *v459;
  uint64_t *v460;
  _QWORD *v461;
  uint64_t v462;
  _DWORD *v463;
  llvm::Value *v464;
  llvm::CatchSwitchInst *v465;
  llvm::BasicBlock **v466;
  uint64_t v467;
  llvm::BasicBlock *v468;
  BOOL v469;
  uint64_t v470;
  uint64_t v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  _anonymous_namespace_::BitcodeReaderBase *v475;
  uint64_t *v476;
  llvm::Type *v477;
  _WORD *v478;
  unint64_t v479;
  llvm::Type **v480;
  char *v481;
  unsigned int v482;
  unint64_t v483;
  uint64_t v484;
  llvm::BasicBlock *v485;
  _DWORD *v486;
  llvm::User *v487;
  uint64_t v488;
  llvm::MCAsmLexer *v489;
  llvm::Type *v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  llvm::MDNode *v506;
  uint64_t v507;
  unint64_t v508;
  llvm::BasicBlock *v509;
  _QWORD *v510;
  unsigned int DecodedRMWOperation;
  __int16 v512;
  uint64_t v513;
  uint64_t v514;
  _anonymous_namespace_::BitcodeReaderBase *v515;
  int v516;
  _QWORD *v517;
  _anonymous_namespace_::BitcodeReaderBase *v518;
  unint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  llvm::MDNode *Impl;
  char *v523;
  unint64_t v524;
  char v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  int v529;
  uint64_t v530;
  int v531;
  void **v532;
  llvm::Type *v533;
  _DWORD *v534;
  llvm::Value *v535;
  uint64_t v536;
  llvm::Type *v537;
  int v538;
  unsigned int v539;
  llvm::MCAsmLexer *v540;
  llvm::Value *v541;
  llvm::Instruction *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  __int16 v546;
  llvm::Type *v547;
  char *v548;
  llvm::Type *v549;
  void **v550;
  llvm::BasicBlock *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  llvm::BasicBlock *v555;
  unsigned __int8 v556;
  uint64_t v557;
  uint64_t v558;
  unsigned int v559;
  int v560;
  llvm::Type *v561;
  unint64_t v562;
  uint64_t v563;
  llvm::MCAsmLexer *v564;
  unsigned int v565;
  void *v566;
  unint64_t v567;
  int v568;
  _anonymous_namespace_::BitcodeReaderBase *v569;
  uint64_t data_low;
  char *v571;
  _DWORD *v572;
  _DWORD *v573;
  uint64_t v574;
  uint64_t v575;
  _QWORD *v576;
  uint64_t v577;
  int v578;
  unsigned __int8 v579;
  char *v580;
  void **v581;
  unint64_t v582;
  int v583;
  uint64_t v584;
  uint64_t v585;
  char *v586;
  uint64_t v587;
  _anonymous_namespace_::BitcodeReaderBase *v588;
  uint64_t v589;
  unsigned int v590;
  int v591;
  llvm::MCAsmLexer *v592;
  unsigned int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unsigned int v598;
  int v599;
  llvm::Type *v600;
  unint64_t v601;
  uint64_t v602;
  llvm::MCAsmLexer *v603;
  unsigned int v604;
  char *v605;
  unsigned __int8 v606;
  _DWORD *v607;
  uint64_t v608;
  int v609;
  char *v610;
  uint64_t v611;
  _DWORD *n;
  unint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  const char *v616;
  uint64_t v617;
  uint64_t v618;
  unsigned __int8 v619;
  _DWORD *v620;
  uint64_t v621;
  uint64_t v622;
  _DWORD *v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unsigned __int8 v628;
  _DWORD *v629;
  uint64_t v630;
  _DWORD *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unsigned __int32 v635;
  uint64_t **v636;
  unint64_t v637;
  uint64_t v638;
  BOOL v639;
  uint64_t v640;
  uint64_t *v641;
  uint64_t *v642;
  uint64_t v643;
  _DWORD *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t i;
  void *v648;
  uint64_t v649;
  char v650;
  uint64_t v651;
  uint64_t k;
  __int16 v653;
  uint64_t v654;
  const char *v655;
  uint64_t v656;
  uint64_t v657;
  char v658;
  _DWORD *v659;
  uint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  char v663;
  __int16 v664;
  _DWORD *v665;
  _QWORD *v666;
  __int16 v667;
  llvm::BasicBlock *v668;
  char *v669;
  uint64_t v670;
  __int16 v671;
  unsigned int v672;
  uint64_t v673;
  _DWORD *v674;
  std::string::size_type v675;
  unsigned __int32 v676;
  uint64_t v677;
  int v678;
  std::string::size_type v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  std::string *v683;
  std::string::size_type size;
  uint64_t v685;
  uint64_t ii;
  int v687;
  unsigned __int8 v688;
  const char *v689;
  uint64_t v690;
  uint64_t v691;
  _DWORD *v692;
  _DWORD *v693;
  uint64_t v694;
  uint64_t v695;
  _QWORD *v696;
  unsigned int v697;
  uint64_t v698;
  char *v699;
  uint64_t v700;
  uint64_t v701;
  _WORD *v702;
  char *v703;
  char *v704;
  llvm::BasicBlock *v705;
  llvm::BasicBlock *v706;
  llvm::BasicBlock *v707;
  _DWORD *v708;
  _QWORD *v709;
  llvm::Instruction *v710;
  _QWORD *v711;
  llvm::Instruction *v712;
  void *v713;
  unint64_t v714;
  unsigned int j;
  uint64_t v716;
  llvm::Value *v717;
  llvm::Value *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  _DWORD *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  unint64_t v728;
  _anonymous_namespace_::BitcodeReaderBase *v729;
  _anonymous_namespace_::BitcodeReaderBase *v730;
  _anonymous_namespace_::BitcodeReaderBase *v731;
  _anonymous_namespace_::BitcodeReaderBase *v732;
  llvm::Type *v733;
  int v734;
  llvm::Type *v735;
  int v736;
  llvm::Type *v737;
  int v738;
  __int16 v739;
  __int16 v740;
  _WORD *v741;
  _WORD *v742;
  llvm::Type **v743;
  _WORD *v744;
  _WORD *v745;
  _WORD *v746;
  _WORD *v747;
  uint64_t *v748;
  uint64_t v749;
  _QWORD *v750;
  _QWORD *v751;
  _QWORD *v752;
  _QWORD *v753;
  _QWORD *v754;
  _QWORD *v755;
  _QWORD *v756;
  _QWORD *v757;
  _QWORD *v758;
  _QWORD *v759;
  _QWORD *v760;
  _QWORD *v761;
  unsigned int v762;
  llvm::Value *v763;
  __int16 v764;
  int v765;
  __int16 v766;
  int v767;
  llvm::Value *v768;
  char v769;
  int32x2_t *v770;
  unint64_t v771;
  unint64_t v772;
  llvm::BasicBlock *v773;
  llvm::BasicBlock ***v774;
  unsigned int *v775;
  llvm::BitcodeReaderValueList *v776;
  llvm::Twine *v777;
  unsigned int v778[2];
  llvm::Value *v779;
  llvm::Value *v780;
  unsigned int v781;
  int v782;
  unsigned int data;
  llvm::BasicBlock *v784;
  llvm::Value *v785;
  char v786;
  llvm::Value *v787;
  llvm::Type *v788;
  unsigned int v789;
  __int16 v790;
  unint64_t v791;
  std::string v792;
  unsigned int v793[2];
  _DWORD *v794;
  unsigned int v795;
  unsigned int v796[2];
  unsigned int v797;
  unsigned __int8 *v798;
  unsigned __int8 *v799;
  unsigned int VirtualTypeID;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t *v804[3];
  unsigned __int8 *v805;
  unsigned int v806;
  llvm::BasicBlock *v807;
  llvm::Function *v808;
  void *v809;
  uint64_t v810;
  _BYTE v811[16];
  __int16 v812;
  llvm::Value *v813;
  uint64_t v814;
  _BYTE v815[16];
  __int16 v816;
  __n128 __p;
  _QWORD v818[2];
  __int16 v819;
  void *v820;
  void *v821;
  uint64_t v822;
  int v823;
  _WORD v824[20];
  uint64_t v825;
  uint64_t v826;
  char v827;
  uint64_t v828;
  char v829;
  void *v830;
  int v831[2];
  _WORD v832[256];
  _QWORD v833[13];
  void *v834;
  uint64_t v835;
  _QWORD v836[14];

  v5 = this;
  v836[12] = *MEMORY[0x24BDAC8D0];
  v808 = a3;
  v6 = (llvm::Function *)((char *)a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::Function *)((char *)a2 + 32), 0, 12, (uint64_t *)this);
  if (*(_QWORD *)v5)
    return;
  v7 = *((_QWORD *)a2 + 97);
  if (*(_DWORD *)(v7 + 24) >= 2u)
  {
    v830 = "Invalid function metadata: incoming forward references";
    v832[8] = 259;
    return;
  }
  v777 = (llvm::Function *)((char *)a2 + 8);
  v775 = (unsigned int *)((char *)a2 + 840);
  *((_DWORD *)a2 + 212) = 0;
  v771 = *((_QWORD *)a2 + 90) - *((_QWORD *)a2 + 89);
  v772 = *(unsigned int *)(v7 + 8);
  v8 = *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>,llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::FindAndConstruct((uint64_t)a2 + 592, (uint64_t *)&v808)+ 8);
  v9 = llvm::Function::args(a3);
  if ((llvm::Value *)v9 != v10)
  {
    v11 = (llvm::Value *)v9;
    v12 = v10;
    v13 = 1;
    do
    {
      llvm::BitcodeReaderValueList::push_back((llvm::Function *)((char *)a2 + 712), v11, ContainedTypeID);
      v11 = (llvm::Value *)((char *)v11 + 40);
      ++v13;
    }
    while (v11 != v12);
  }
  v776 = (llvm::Function *)((char *)a2 + 712);
  v15 = *((_QWORD *)a2 + 90) - *((_QWORD *)a2 + 89);
  v807 = 0;
  v806 = 0;
  v833[0] = 1;
  v16 = 1;
  v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v833[v16] = v17;
    v16 += 3;
  }
  while (v16 != 13);
  v773 = 0;
  v18 = v836;
  v834 = v836;
  v835 = 0x400000000;
  v804[2] = (uint64_t *)a2;
  v805 = 0;
  v19 = v832;
  v804[0] = (uint64_t *)&v807;
  v804[1] = (uint64_t *)&v806;
  v774 = (llvm::BasicBlock ***)((char *)a2 + 1488);
  v801 = 0;
  v802 = 0;
  v803 = 0;
  v830 = v832;
  *(_QWORD *)v831 = 0x4000000000;
  v770 = (int32x2_t *)((char *)a2 + 1616);
  *(_QWORD *)v778 = v15 >> 5;
  v20 = (llvm::Function *)((char *)a2 + 8);
  while (2)
  {
    llvm::BitstreamCursor::advance(v6, 0, (uint64_t)&v828);
    if ((v829 & 1) != 0)
    {
      v22 = v828;
      v828 = 0;
      *(_QWORD *)v5 = v22;
      goto LABEL_16;
    }
    v21 = HIDWORD(v828);
    switch((_DWORD)v828)
    {
      case 2:
        switch(HIDWORD(v828))
        {
          case 0xB:
            if (*(_QWORD *)v5)
              goto LABEL_16;
            *(_QWORD *)v778 = (*((_QWORD *)a2 + 90) - *((_QWORD *)a2 + 89)) >> 5;
            v23 = 4;
            goto LABEL_17;
          case 0xE:
            goto LABEL_38;
          case 0xF:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadata(*((llvm::MetadataLoader::MetadataLoaderImpl **)a2 + 97), 0, v5);
            goto LABEL_38;
          case 0x10:
            llvm::MetadataLoader::MetadataLoaderImpl::parseMetadataAttachment(*((_QWORD *)a2 + 97), v808, *((_QWORD *)a2 + 105), (uint64_t *)v5);
            goto LABEL_38;
          case 0x12:
            goto LABEL_38;
          default:
            llvm::BitstreamCursor::SkipBlock(v6, (uint64_t *)v5);
LABEL_38:
            if (*(_QWORD *)v5)
              v23 = 1;
            else
              v23 = 4;
            break;
        }
        goto LABEL_17;
      case 1:
        v23 = 7;
        goto LABEL_17;
      case 0:
        v820 = "Malformed block";
        v824[0] = 259;
LABEL_16:
        v23 = 1;
        goto LABEL_17;
    }
    v831[0] = 0;
    VirtualTypeID = -1;
    llvm::BitstreamCursor::readRecord(v6, SHIDWORD(v828), (unsigned int *)&v830, 0, (uint64_t)&v826);
    if ((v827 & 1) != 0)
    {
      v32 = v826;
      v826 = 0;
      *(_QWORD *)v5 = v32;
LABEL_32:
      v23 = 1;
      goto LABEL_839;
    }
    v26 = v826;
    switch((int)v826)
    {
      case 1:
        if (!v831[0] || !*(_QWORD *)v830)
          goto LABEL_407;
        std::vector<llvm::BasicBlock *>::resize(v774, *(_QWORD *)v830);
        v66 = v808;
        v67 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::find((uint64_t)v770, (uint64_t)v808);
        if (*((_QWORD *)a2 + 202) + 32 * *((unsigned int *)a2 + 408) == v67)
        {
          v744 = v19;
          v459 = (uint64_t *)*((_QWORD *)a2 + 186);
          v460 = (uint64_t *)*((_QWORD *)a2 + 187);
          while (v459 != v460)
          {
            v461 = (_QWORD *)*((_QWORD *)a2 + 53);
            v824[0] = 257;
            v462 = operator new();
            *v459++ = llvm::BasicBlock::BasicBlock(v462, v461, (const llvm::Twine *)&v820, v66, 0);
          }
        }
        else
        {
          v780 = (llvm::Value *)v67;
          v68 = *(_QWORD *)(v67 + 16) - *(_QWORD *)(v67 + 8);
          v69 = *((_QWORD *)a2 + 187) - *((_QWORD *)a2 + 186);
          if (v68 >> 3 > (unint64_t)(v69 >> 3))
          {
            v70 = "Invalid ID";
            goto LABEL_324;
          }
          v744 = v19;
          v756 = v18;
          if ((v69 & 0x7FFFFFFF8) != 0)
          {
            v497 = 0;
            v498 = ((unint64_t)v68 >> 3);
            v499 = ((unint64_t)v69 >> 3);
            v500 = (uint64_t *)((char *)v66 + 72);
            do
            {
              if (v497 < v498 && (v501 = *((_QWORD *)v780 + 1), (v502 = *(_QWORD *)(v501 + 8 * v497)) != 0))
              {
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v66 + 72, *(_QWORD *)(v501 + 8 * v497));
                v503 = *v500;
                *(_QWORD *)(v502 + 24) = *v500;
                *(_QWORD *)(v502 + 32) = v500;
                v504 = v502 + 24;
                *(_QWORD *)(v503 + 8) = v504;
                *v500 = v504;
                (*v774)[v497] = *(llvm::BasicBlock **)(*((_QWORD *)v780 + 1) + 8 * v497);
              }
              else
              {
                v505 = (_QWORD *)*((_QWORD *)a2 + 53);
                v824[0] = 257;
                *(_QWORD *)(*((_QWORD *)a2 + 186) + 8 * v497) = llvm::BasicBlock::Create(v505, (const llvm::Twine *)&v820, v66, 0);
              }
              ++v497;
            }
            while (v499 != v497);
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::erase(v770, v780);
          v18 = v756;
          v20 = (llvm::Function *)((char *)a2 + 8);
        }
        v807 = **v774;
        v23 = 4;
        v19 = v744;
        goto LABEL_839;
      case 2:
        v71 = v19;
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_705;
        }
        v72 = (int)v813;
        if (v831[0] == (_DWORD)v813)
          goto LABEL_705;
        v73 = (uint64_t *)__p.n128_u64[0];
        v74 = v809;
        v75 = *((_BYTE *)a2 + 1712)
            ? v778[0] - *((_QWORD *)v830 + v813)
            : *((_QWORD *)v830 + v813);
        if (!FnValueByID)
          goto LABEL_705;
        v77 = (v72 + 2);
        if (v831[0] < v77)
          goto LABEL_705;
        v78 = (uint64_t)FnValueByID;
        DecodedBinaryOpcode = getDecodedBinaryOpcode(*((_QWORD *)v830 + (v72 + 1)), *v73);
        if (DecodedBinaryOpcode == -1)
          goto LABEL_705;
        v80 = DecodedBinaryOpcode;
        v824[0] = 257;
        v81 = llvm::BinaryOperator::Create(DecodedBinaryOpcode, v73, v78, (const llvm::Twine *)&v820, 0);
        VirtualTypeID = v74;
        v82 = (uint64_t)v81;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v81);
        v779 = (llvm::Value *)v82;
        if (v831[0] <= v77)
          goto LABEL_1045;
        HIDWORD(v84) = v80 - 13;
        LODWORD(v84) = v80 - 13;
        v83 = v84 >> 1;
        if (v83 > 6 || ((1 << v83) & 0x47) == 0)
        {
          if (v80 <= 0x1B && ((1 << v80) & 0xC180000) != 0)
          {
            if ((*((_QWORD *)v830 + v77) & 1) != 0)
              *(_BYTE *)(v82 + 17) |= 2u;
          }
          else if (llvm::FPMathOperator::classof(v82))
          {
            v687 = *((_QWORD *)v830 + v77) & 0x7E | (*((_QWORD *)v830 + v77) >> 7) & 1 | -(*((_QWORD *)v830 + v77) & 1);
            if (v687)
              *(_BYTE *)(v82 + 17) |= 2 * (_BYTE)v687;
          }
LABEL_1045:
          v23 = 9;
          v19 = v71;
          goto LABEL_1070;
        }
        v19 = v71;
        v85 = v830;
        v86 = *((_QWORD *)v830 + v77);
        if ((v86 & 2) != 0)
        {
          *(_BYTE *)(v82 + 17) |= 4u;
          v86 = v85[v77];
        }
        v20 = (llvm::Function *)((char *)a2 + 8);
        if ((v86 & 1) != 0)
          *(_BYTE *)(v82 + 17) |= 2u;
        goto LABEL_895;
      case 3:
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v793[0] = 0;
        {
          goto LABEL_829;
        }
        v87 = (int)v809;
        if (v831[0] != (_DWORD)v809 + 2)
          goto LABEL_829;
        v88 = v19;
        v89 = *((_QWORD *)v830 + v809);
        VirtualTypeID = v89;
        DecodedCastOpcode = (llvm *)getDecodedCastOpcode(*((_QWORD *)v830 + (v87 + 1)));
        if ((_DWORD)DecodedCastOpcode == -1 || !TypeByID)
        {
          v820 = "Invalid record";
          v824[0] = 259;
          v229 = v5;
          goto LABEL_280;
        }
        v93 = (int)DecodedCastOpcode;
        v750 = v18;
        v813 = 0;
        v94 = (uint64_t *)__p.n128_u64[0];
        llvm::UpgradeBitCastInst(DecodedCastOpcode, (uint64_t *)__p.n128_u64[0], TypeByID, (llvm::Type *)&v813, v92);
        if (v95)
        {
          v96 = v95;
          v97 = v813;
          if (v813)
          {
            v98 = (unsigned int *)((char *)a2 + 840);
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v813);
            v99 = v807;
            v100 = (char *)v807 + 40;
            llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v807 + 40, (uint64_t)v97);
            v101 = *((_QWORD *)v99 + 5);
            *((_QWORD *)v97 + 3) = v101;
            *((_QWORD *)v97 + 4) = v100;
            v102 = (char *)v97 + 24;
            *(_QWORD *)(v101 + 8) = v102;
            *((_QWORD *)v99 + 5) = v102;
            v19 = v88;
            v20 = (llvm::Function *)((char *)a2 + 8);
          }
          else
          {
            v19 = v88;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v98 = (unsigned int *)((char *)a2 + 840);
          }
          v544 = v96;
        }
        else
        {
          if (!llvm::CastInst::castIsValid(v93, *v94, (uint64_t)TypeByID))
          {
            v820 = "Invalid cast";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v19 = v88;
            goto LABEL_933;
          }
          v824[0] = 257;
          llvm::CastInst::Create(v93);
          v544 = v543;
          v19 = v88;
          v20 = (llvm::Function *)((char *)a2 + 8);
          v98 = (unsigned int *)((char *)a2 + 840);
        }
        v18 = v750;
        v779 = (llvm::Value *)v544;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v98, v544);
LABEL_895:
        v23 = 9;
        goto LABEL_833;
      case 4:
      case 30:
      case 43:
        v27 = v19;
        v28 = v18;
        v793[0] = 0;
        if ((_DWORD)v826 == 43)
        {
          v29 = *(_QWORD *)v830 != 0;
          v793[0] = 2;
          v30 = *((_DWORD *)v830 + 2);
        }
        else
        {
          v31 = 0;
          v29 = v826 == 30;
          v30 = -1;
        }
        v813 = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          v820 = "Invalid record";
          v824[0] = 259;
          v59 = v5;
LABEL_91:
          v779 = 0;
          v23 = 1;
          v18 = v28;
          goto LABEL_92;
        }
        if (v31)
        {
          v62 = (uint64_t *)v813;
          v63 = *(_QWORD *)v813;
          if ((*(_DWORD *)(*(_QWORD *)v813 + 8) & 0xFE) == 0x12)
            v63 = **(_QWORD **)(v63 + 16);
          v64 = (llvm::Value *)&v822;
          v65 = *(llvm::GetElementPtrInst **)(v63 + 24);
          if (v65 && v65 != v31)
          {
            v820 = "Explicit gep type does not match pointee type of pointer operand";
            v824[0] = 259;
            v59 = v5;
            v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_91;
          }
        }
        else
        {
          v62 = (uint64_t *)v813;
          if ((*(_DWORD *)(*(_QWORD *)v813 + 8) & 0xFE) == 0x12)
          v64 = (llvm::Value *)&v822;
        }
        v820 = &v822;
        v821 = (void *)0x1000000000;
        if (v831[0] == v793[0])
        {
          v304 = 0;
LABEL_396:
          v819 = 257;
          v305 = llvm::GetElementPtrInst::Create(v31, v62, v64, v304, (const llvm::Twine *)&__p, 0);
          VirtualTypeID = v30;
          v306 = v305;
          v307 = *((_DWORD *)v305 + 5);
          v19 = v27;
          v20 = (llvm::Function *)((char *)a2 + 8);
          v779 = v305;
          if ((v307 & 0x7FFFFFF) != 1)
          {
            v308 = 24;
            if (*((_BYTE *)v305 + 16) == 62)
              v308 = 64;
            if ((v307 & 0x40000000) != 0)
              v309 = (char *)*((_QWORD *)v305 - 1);
            else
              v309 = (char *)v305 - 32 * (v307 & 0x7FFFFFF);
            v423 = *(_QWORD *)((char *)v305 + v308);
            v424 = (unint64_t)(v309 + 32);
            std::next[abi:nn180100]<llvm::generic_gep_type_iterator<llvm::Use const*>,0>((uint64_t)(v309 + 32), v423 | 4, 1);
            __p.n128_u64[0] = v424;
            __p.n128_u64[1] = v425;
            v426 = *((_DWORD *)v306 + 5);
            if ((v426 & 0x40000000) != 0)
            {
              v428 = (_DWORD *)*((_QWORD *)v306 - 1);
              v427 = v426 & 0x7FFFFFF;
            }
            else
            {
              v427 = v426 & 0x7FFFFFF;
              v428 = (_DWORD *)((char *)v306 - 32 * v427);
            }
            if (v427 != 2)
            {
              v429 = v428 + 16;
              v430 = 32 * v427 - 64;
              do
              {
                if ((__p.n128_u8[8] & 4) != 0)
                {
                  v433 = 0;
                }
                else
                {
                  SplatValue = *(_DWORD **)v429;
                  if ((*(_DWORD *)(**(_QWORD **)v429 + 8) & 0xFE) == 0x12)
                    SplatValue = (_DWORD *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
                  v432 = SplatValue + 6;
                  if (SplatValue[8] >= 0x41u)
                    v432 = (_QWORD *)*v432;
                  v433 = *(_DWORD *)v432;
                }
                llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(&__p);
                v429 += 8;
                v430 -= 32;
              }
              while (v430);
            }
            v306 = v779;
          }
          v434 = *(_QWORD *)v306;
          if ((*(_DWORD *)(*(_QWORD *)v306 + 8) & 0xFE) == 0x12)
            v434 = **(_QWORD **)(v434 + 16);
          if ((*(_DWORD *)(*(_QWORD *)v306 + 8) & 0xFE) == 0x12)
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v306);
          if (v29)
            *((_BYTE *)v306 + 17) |= 2u;
          v23 = 9;
        }
        else
        {
          while (1)
          {
            v809 = 0;
            v796[0] = 0;
            {
              break;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, (uint64_t)v809);
            if (v831[0] == v793[0])
            {
              v64 = (llvm::Value *)v820;
              v304 = v821;
              goto LABEL_396;
            }
          }
          __p.n128_u64[0] = (unint64_t)"Invalid record";
          v819 = 259;
          v20 = (llvm::Function *)((char *)a2 + 8);
          v779 = 0;
          v23 = 1;
          v19 = v27;
        }
        v435 = (uint64_t *)v820;
        v18 = v28;
        if (v820 != &v822)
          goto LABEL_939;
        goto LABEL_833;
      case 5:
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        v103 = **((_QWORD **)a2 + 53);
        {
          goto LABEL_384;
        }
        v104 = (int)v813;
        if (v831[0] == (_DWORD)v813)
          goto LABEL_384;
        v105 = (llvm::Value *)__p.n128_u64[0];
        v106 = *((_BYTE *)a2 + 1712)
             ? v778[0] - *((_QWORD *)v830 + v813)
             : *((_QWORD *)v830 + v813);
        if ((v781 = v809,
        {
LABEL_384:
          v820 = "Invalid record";
          v824[0] = 259;
          v61 = v5;
          v20 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_385;
        }
        v112 = v111;
        v824[0] = 257;
        v113 = operator new(0xA0uLL);
        v114 = 0;
        v115 = (uint64_t)(v113 + 24);
        v113[29] = v113[29] & 0x38000000 | 3;
        do
        {
          v116 = &v113[v114];
          *v116 = 0;
          v116[1] = 0;
          v116[2] = 0;
          v116[3] = v115;
          v114 += 8;
        }
        while (v114 != 24);
        llvm::SelectInst::SelectInst((llvm::SelectInst *)(v113 + 24), v112, v105, v108, (const llvm::Twine *)&v820, 0);
        VirtualTypeID = v781;
        v779 = (llvm::Value *)v115;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v115);
        v23 = 9;
        goto LABEL_1070;
      case 6:
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v813 = 0;
        v793[0] = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_829;
        }
        if ((*(_DWORD *)(*(_QWORD *)__p.n128_u64[0] + 8) & 0xFE) != 0x12)
        {
          v410 = "Invalid type for value";
          goto LABEL_559;
        }
        v824[0] = 257;
        v119 = llvm::ExtractElementInst::Create((llvm::ExtractElementInst *)__p.n128_u64[0], v813, (llvm::Value *)&v820, v117, v118);
LABEL_350:
        v142 = (unsigned int *)((char *)a2 + 840);
        v779 = v119;
        v141 = (uint64_t)v119;
        goto LABEL_351;
      case 7:
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v813 = 0;
        v793[0] = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_829;
        }
        v120 = (llvm::InsertElementInst *)__p.n128_u64[0];
        if ((*(_DWORD *)(*(_QWORD *)__p.n128_u64[0] + 8) & 0xFE) != 0x12)
        {
          v183 = "Invalid type for value";
          goto LABEL_830;
        }
        v88 = v19;
        v121 = *(llvm::Type **)(*(_QWORD *)__p.n128_u64[0] + 24);
        v122 = v793[0];
        v124 = (int)v809;
        if (v831[0] == (_DWORD)v809)
          goto LABEL_278;
        v125 = *((_BYTE *)a2 + 1712)
             ? v778[0] - *((_QWORD *)v830 + v809)
             : *((_QWORD *)v830 + v809);
        if (!v126)
          goto LABEL_278;
        v127 = v126;
        LODWORD(v809) = v124 + 1;
        {
          goto LABEL_278;
        }
        v824[0] = 257;
        v130 = llvm::InsertElementInst::Create(v120, v127, v813, (llvm::Value *)&v820, v128, v129);
        VirtualTypeID = v122;
        v131 = (unsigned int *)((char *)a2 + 840);
        v779 = v130;
LABEL_157:
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v131, (uint64_t)v130);
        goto LABEL_158;
      case 8:
        v88 = v19;
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v813 = 0;
        v793[0] = 0;
        {
          goto LABEL_278;
        }
        v132 = (int)v809;
        if (v831[0] == (_DWORD)v809)
          goto LABEL_278;
        v133 = (llvm::Value *)__p.n128_u64[0];
        v134 = v793[0];
        v135 = *((_BYTE *)a2 + 1712)
             ? v778[0] - *((_QWORD *)v830 + v809)
             : *((_QWORD *)v830 + v809);
        if (!v136)
          goto LABEL_278;
        v137 = v136;
        LODWORD(v809) = v132 + 1;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_278;
        }
        if ((*(_DWORD *)(*(_QWORD *)v133 + 8) & 0xFE) != 0x12 || (*(_DWORD *)(*(_QWORD *)v137 + 8) & 0xFE) != 0x12)
          goto LABEL_241;
        v751 = v18;
        v138 = operator new(0xA8uLL);
        v138[21] = v138[21] & 0x38000000 | 2;
        v139 = (llvm::Value *)(v138 + 16);
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v138 + 1) = 0;
        *((_QWORD *)v138 + 2) = 0;
        *((_QWORD *)v138 + 3) = v138 + 16;
        *((_QWORD *)v138 + 4) = 0;
        *((_QWORD *)v138 + 5) = 0;
        *((_QWORD *)v138 + 6) = 0;
        *((_QWORD *)v138 + 7) = v138 + 16;
        v824[0] = 257;
        llvm::ShuffleVectorInst::ShuffleVectorInst((llvm::ShuffleVectorInst *)(v138 + 16), v133, v137, v813, (const llvm::Twine *)&v820, 0);
        v140 = *((_QWORD *)v138 + 8);
        v18 = v751;
        v131 = (unsigned int *)((char *)a2 + 840);
        v779 = v139;
        v130 = v139;
        goto LABEL_157;
      case 9:
      case 28:
        v33 = v19;
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          v57 = "Invalid record";
        }
        else
        {
          v38 = v34 + 1;
          if (v831[0] > (v34 + 1))
          {
            v39 = (uint64_t)v37;
            v40 = *v35;
            v41 = *((_DWORD *)*v35 + 2);
            LOBYTE(v42) = v41;
            if ((v41 & 0xFE) == 0x12)
              v42 = *(_DWORD *)(**((_QWORD **)v40 + 2) + 8);
            v43 = (llvm::Type *)*((_QWORD *)v830 + v38);
            if ((v42 < 4u || v42 == 5 || (v42 & 0xFD) == 4)
              && v831[0] > (v34 + 2))
            {
              LODWORD(v813) = v34 + 2;
              v44 = *((_QWORD *)v830 + (v34 + 2)) & 0x7E | (*((_QWORD *)v830
                                                                                        + (v34 + 2)) >> 7) & 1 | -(*((_QWORD *)v830 + (v34 + 2)) & 1);
              v38 = v34 + 2;
            }
            else
            {
              v44 = 0;
            }
            if (v831[0] == v38 + 1)
            {
              if ((v41 & 0xFE) == 0x12)
                v41 = *(_DWORD *)(**((_QWORD **)v40 + 2) + 8);
              v767 = v44;
              v533 = v43;
              if (v41 < 4u || v41 == 5 || (v41 & 0xFD) == 4)
              {
                v534 = operator new(0x80uLL);
                v534[21] = v534[21] & 0x38000000 | 2;
                v535 = (llvm::Value *)(v534 + 16);
                *(_QWORD *)v534 = 0;
                *((_QWORD *)v534 + 1) = 0;
                *((_QWORD *)v534 + 2) = 0;
                *((_QWORD *)v534 + 3) = v534 + 16;
                *((_QWORD *)v534 + 4) = 0;
                *((_QWORD *)v534 + 5) = 0;
                *((_QWORD *)v534 + 6) = 0;
                *((_QWORD *)v534 + 7) = v534 + 16;
                v824[0] = 257;
                llvm::FCmpInst::FCmpInst((_WORD *)v534 + 32, v533, v35, v39, (const llvm::Twine *)&v820);
              }
              else
              {
                v623 = operator new(0x80uLL);
                v623[21] = v623[21] & 0x38000000 | 2;
                v535 = (llvm::Value *)(v623 + 16);
                *(_QWORD *)v623 = 0;
                *((_QWORD *)v623 + 1) = 0;
                *((_QWORD *)v623 + 2) = 0;
                *((_QWORD *)v623 + 3) = v623 + 16;
                *((_QWORD *)v623 + 4) = 0;
                *((_QWORD *)v623 + 5) = 0;
                *((_QWORD *)v623 + 6) = 0;
                *((_QWORD *)v623 + 7) = v623 + 16;
                v824[0] = 257;
                llvm::ICmpInst::ICmpInst((_WORD *)v623 + 32, v533, v35, v39, (const llvm::Twine *)&v820);
              }
              v779 = v535;
              v536 = *(_QWORD *)v535;
              v286 = (*(_DWORD *)(*(_QWORD *)v535 + 8) & 0xFE) == 18;
              v19 = v33;
              v20 = (llvm::Function *)((char *)a2 + 8);
              if (v286)
                v536 = **(_QWORD **)(v536 + 16);
              if ((*((_DWORD *)*v35 + 2) & 0xFE) == 0x12)
              if (v767)
                *((_BYTE *)v779 + 17) |= 2 * (_BYTE)v767;
              v233 = (unsigned int *)((char *)a2 + 840);
              v232 = (uint64_t)v779;
LABEL_284:
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v233, v232);
LABEL_285:
              v23 = 9;
              goto LABEL_833;
            }
LABEL_802:
            v820 = "Invalid record";
            v824[0] = 259;
            v58 = v5;
            v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_78:
LABEL_79:
            v779 = 0;
            v23 = 1;
            v19 = v33;
            goto LABEL_833;
          }
          v57 = "Invalid record: operand number exceeded available operands";
        }
        v820 = v57;
        v824[0] = 259;
        v58 = v5;
        goto LABEL_78;
      case 10:
        if (!v831[0])
        {
          v157 = llvm::ReturnInst::Create(*((_QWORD **)a2 + 53), 0);
          goto LABEL_752;
        }
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_558;
        }
        v141 = llvm::ReturnInst::Create(*((_QWORD **)a2 + 53), __p.n128_i64[0]);
        v142 = (unsigned int *)((char *)a2 + 840);
        v779 = (llvm::Value *)v141;
LABEL_351:
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v142, v141);
        v23 = 9;
        goto LABEL_833;
      case 11:
        if ((v831[0] | 2) != 3)
          goto LABEL_407;
        v143 = *(unsigned int *)v830;
        v144 = *((_QWORD *)a2 + 186);
        v145 = (*((_QWORD *)a2 + 187) - v144) >> 3;
        if (v145 <= v143)
          goto LABEL_323;
        v146 = *(llvm::BranchInst **)(v144 + 8 * v143);
        if (!v146)
          goto LABEL_323;
        if (v831[0] == 1)
        {
          v147 = (void *)llvm::BranchInst::Create(*(llvm::BranchInst **)(v144 + 8 * v143), (llvm::BasicBlock *)v21, v25);
          goto LABEL_731;
        }
        v190 = v19;
        v508 = *((unsigned int *)v830 + 2);
        if (v145 <= v508)
          v509 = 0;
        else
          v509 = *(llvm::BasicBlock **)(v144 + 8 * v508);
        v537 = (llvm::Type *)(**((_QWORD **)a2 + 53) + 1920);
        if (v831[0] == 2
          || (*((_BYTE *)a2 + 1712) ? (v539 = v778[0] - *((_DWORD *)v830 + 4)) : (v539 = *((_DWORD *)v830 + 4)),
        {
LABEL_811:
          v820 = "Invalid record";
          v824[0] = 259;
          v20 = (llvm::Function *)((char *)a2 + 8);
          v23 = 1;
          v19 = v190;
          goto LABEL_839;
        }
        v157 = llvm::BranchInst::Create(v146, v509, v540, v541, v542);
LABEL_519:
        v19 = v190;
        v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_752;
      case 12:
        v148 = *(_QWORD *)v830;
        if (*(_QWORD *)v830 >> 16 == 1205)
        {
          v742 = v19;
          v149 = *((_DWORD *)v830 + 2);
          v151 = *((_DWORD *)v150 + 2);
          if (v831[0] == 2)
          {
            v152 = 0;
          }
          else
          {
            if (*((_BYTE *)a2 + 1712))
              v340 = v778[0] - *((_DWORD *)v830 + 4);
            else
              v340 = *((_DWORD *)v830 + 4);
          }
          v341 = *((unsigned int *)v830 + 6);
          v342 = *((_QWORD *)a2 + 186);
          if (v341 < (*((_QWORD *)a2 + 187) - v342) >> 3)
          {
            if (v152)
            {
              v343 = *(llvm::BasicBlock **)(v342 + 8 * v341);
              if (v343)
              {
                v344 = *((_DWORD *)v830 + 8);
                v345 = operator new(0x48uLL);
                v346 = (llvm::User *)(v345 + 2);
                v345[7] = v345[7] & 0x38000000 | 0x40000000;
                *(_QWORD *)v345 = 0;
                llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v345 + 2), v152, v343, v344, 0);
                llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v346);
                v779 = v346;
                v734 = v344;
                if (!v344)
                  goto LABEL_501;
                v347 = 0;
                v348 = v151 >> 8;
                v349 = 5;
                v755 = v18;
LABEL_459:
                v765 = v347;
                v820 = &v822;
                v821 = (void *)0x100000000;
                v350 = v349 + 1;
                v351 = (unsigned int *)v830;
                v352 = *((_QWORD *)v830 + v349);
                if (!(_DWORD)v352)
                  goto LABEL_491;
                v353 = 0;
LABEL_461:
                v354 = v350 + 1;
                v355 = *((_QWORD *)v830 + v350);
                LODWORD(v356) = 1;
                __p.n128_u32[2] = 1;
                __p.n128_u64[0] = 0;
                if (v348 >= 0x41)
                {
                  v356 = *((_QWORD *)v830 + v354);
                  v354 = v350 + 2;
                }
                llvm::readWideAPInt((unint64_t *)v830 + v354, v356, v348, (llvm::APInt *)&v813);
                if (__p.n128_u32[2] >= 0x41 && __p.n128_u64[0])
                  MEMORY[0x24BD1B380](__p.n128_u64[0], 0x1000C8000313F17);
                __p.n128_u64[0] = (unint64_t)v813;
                __p.n128_u32[2] = v814;
                v350 = v356 + v354;
                if (v355)
                {
                  v359 = llvm::ConstantInt::get(*((llvm::IntegerType **)a2 + 53), (llvm::APInt *)&__p, v357, v358);
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, v359);
                  v346 = v779;
                  goto LABEL_486;
                }
                v346 = v779;
                if (v348 < 0x41)
                  LODWORD(v360) = 1;
                else
                  v360 = *((_QWORD *)v830 + v350++);
                llvm::readWideAPInt((unint64_t *)v830 + v350, v360, v348, (llvm::APInt *)&v813);
                while (1)
                {
                  if (__p.n128_u32[2] > 0x40)
                  {
                    v363 = v813;
                    v364 = (((unint64_t)__p.n128_u32[2] + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v364)
                        goto LABEL_479;
                      v365 = *(_QWORD *)(__p.n128_u64[0] - 8 + v364);
                      v366 = *(_QWORD *)((char *)v813 + v364 - 8);
                      v364 -= 8;
                    }
                    while (v365 == v366);
                    if (v365 > v366)
                    {
LABEL_480:
                      if (v814 >= 0x41 && v363 != 0)
                        MEMORY[0x24BD1B380]();
                      v350 += v360;
LABEL_486:
                      if (__p.n128_u32[2] >= 0x41 && __p.n128_u64[0])
                        MEMORY[0x24BD1B380](__p.n128_u64[0], 0x1000C8000313F17);
                      if (++v353 == (_DWORD)v352)
                      {
                        v351 = (unsigned int *)v830;
LABEL_491:
                        v369 = v351[2 * v350];
                        v370 = *((_QWORD *)a2 + 186);
                        if (v369 >= (*((_QWORD *)a2 + 187) - v370) >> 3)
                          v371 = 0;
                        else
                          v371 = *(_QWORD *)(v370 + 8 * v369);
                        v372 = (uint64_t *)v820;
                        if ((_DWORD)v821)
                        {
                          v373 = 8 * v821;
                          do
                          {
                            v374 = *v372++;
                            llvm::SwitchInst::addCase(v346, v374, v371);
                            v373 -= 8;
                          }
                          while (v373);
                          v372 = (uint64_t *)v820;
                        }
                        v18 = v755;
                        if (v372 != &v822)
                          free(v372);
                        v349 = v350 + 1;
                        v347 = v765 + 1;
                        if (v765 + 1 == v734)
                        {
LABEL_501:
                          v19 = v742;
                          goto LABEL_815;
                        }
                        goto LABEL_459;
                      }
                      goto LABEL_461;
                    }
                  }
                  else
                  {
                    v363 = v813;
                    if (__p.n128_u64[0] > (unint64_t)v813)
                      goto LABEL_480;
                  }
LABEL_479:
                  v367 = llvm::ConstantInt::get(*((llvm::IntegerType **)a2 + 53), (llvm::APInt *)&__p, v361, v362);
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, v367);
                  llvm::APInt::operator++((uint64_t)&__p);
                }
              }
            }
          }
        }
        else
        {
          if (v831[0] < 3u || (v831[0] & 1) == 0)
          {
LABEL_407:
            v156 = "Invalid record";
            goto LABEL_838;
          }
          v742 = v19;
          v314 = v18;
          if (v831[0] == 1)
          {
            v315 = 0;
          }
          else
          {
            if (*((_BYTE *)a2 + 1712))
              v482 = v778[0] - *((_DWORD *)v830 + 2);
            else
              v482 = *((_DWORD *)v830 + 2);
          }
          v483 = *((unsigned int *)v830 + 4);
          v484 = *((_QWORD *)a2 + 186);
          if (v483 >= (*((_QWORD *)a2 + 187) - v484) >> 3
            || !v313
            || !v315
            || (v485 = *(llvm::BasicBlock **)(v484 + 8 * v483)) == 0)
          {
            v820 = "Invalid record";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v23 = 1;
            v18 = v314;
            v19 = v742;
            goto LABEL_839;
          }
          v737 = (llvm::Type *)(v831[0] + 0x1FFFFFFFDLL);
          v486 = operator new(0x48uLL);
          v487 = (llvm::User *)(v486 + 2);
          v486[7] = v486[7] & 0x38000000 | 0x40000000;
          *(_QWORD *)v486 = 0;
          llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v486 + 2), v315, v485, (unint64_t)v737 >> 1, 0);
          v779 = v487;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v487);
          if (!((unint64_t)v737 >> 1))
          {
            v18 = v314;
            v19 = v742;
            v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_834;
          }
          v488 = 0;
          v18 = v314;
          while (1)
          {
            if (v489)
              v490 = *((_BYTE *)v489 + 16) == 16 ? v489 : 0;
            else
              v490 = 0;
            v491 = *((unsigned int *)v830 + 2 * (v488 + 4));
            v492 = *((_QWORD *)a2 + 186);
            if (v491 >= (*((_QWORD *)a2 + 187) - v492) >> 3)
              break;
            if (!v490)
              break;
            v493 = *(_QWORD *)(v492 + 8 * v491);
            if (!v493)
              break;
            llvm::SwitchInst::addCase(v487, (uint64_t)v490, v493);
            v488 += 2;
            if (((unint64_t)v737 & 0x1FFFFFFFELL) == v488)
              goto LABEL_501;
          }
          llvm::Instruction::~Instruction((llvm::UndefValue **)v487, v490);
          llvm::User::operator delete(v581);
        }
        v820 = "Invalid record";
        v824[0] = 259;
        v20 = (llvm::Function *)((char *)a2 + 8);
        v23 = 1;
        v19 = v742;
        goto LABEL_839;
      case 13:
        if (v831[0] <= 3u)
          goto LABEL_407;
        v153 = (*(_DWORD *)v830 - 1);
        v154 = *((_QWORD *)a2 + 180);
        if (v153 >= (*((_QWORD *)a2 + 181) - v154) >> 3)
          v155 = 0;
        else
          v155 = *(_QWORD *)(v154 + 8 * v153);
        v375 = *((unsigned int *)v830 + 4);
        v376 = *((_QWORD *)a2 + 186);
        v377 = (*((_QWORD *)a2 + 187) - v376) >> 3;
        if (v377 <= v375)
          v785 = 0;
        else
          v785 = *(llvm::Value **)(v376 + 8 * v375);
        v414 = *((_QWORD *)v830 + 1);
        LODWORD(v792.__r_.__value_.__l.__data_) = 4;
        v415 = *((unsigned int *)v830 + 6);
        if (v377 <= v415)
          v735 = 0;
        else
          v735 = *(llvm::Type **)(v376 + 8 * v415);
        v766 = v414;
        if ((v414 & 0x2000) != 0)
        {
          LODWORD(v792.__r_.__value_.__l.__data_) = 5;
          v419 = *((_DWORD *)v830 + 8);
          if (!v420 || (v418 = v420, *(_BYTE *)(v420 + 8) != 14))
          {
            v410 = "Explicit invoke type is not a function type";
            goto LABEL_559;
          }
        }
        else
        {
          v418 = 0;
          v419 = -1;
        }
        v809 = 0;
        v796[0] = 0;
        {
          goto LABEL_572;
        }
        v443 = v809;
        v444 = *(_QWORD *)v809;
        if (!*(_QWORD *)v809 || *(_BYTE *)(v444 + 8) != 15)
        {
          v410 = "Callee is not a pointer";
          goto LABEL_559;
        }
        if (v418)
        {
          v445 = *(_QWORD *)(v444 + 24);
          if (v445 && v445 != v418)
          {
            v410 = "Explicit invoke type does not match pointee type of callee operand";
            goto LABEL_559;
          }
        }
        else
        {
          v566 = v809;
          if (!v567 || (v443 = v566, v418 = v567, *(_BYTE *)(v567 + 8) != 14))
          {
            v410 = "Callee is not of pointer to function type";
            goto LABEL_559;
          }
        }
        v568 = v831[0];
        v569 = (_anonymous_namespace_::BitcodeReaderBase *)(*(_DWORD *)(v418 + 12) - 1);
        data_low = LODWORD(v792.__r_.__value_.__l.__data_);
        if (v831[0] < ((_DWORD)v569 + LODWORD(v792.__r_.__value_.__l.__data_)))
        {
          v60 = "Insufficient operands to call";
          goto LABEL_84;
        }
        v746 = v19;
        v820 = &v822;
        v821 = (void *)0x1000000000;
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x1000000000;
        v760 = v18;
        v720 = (uint64_t)v443;
        v725 = v155;
        if (!(_DWORD)v569)
          goto LABEL_925;
        v732 = v569;
        v587 = 0;
        while (1)
        {
          v588 = (_anonymous_namespace_::BitcodeReaderBase *)(v587 + 1);
          v589 = data_low;
          v590 = data_low + v587;
          if (v590 == v831[0])
          {
            v592 = 0;
          }
          else
          {
            v593 = *((_BYTE *)a2 + 1712) ? v778[0] - *((_QWORD *)v830 + v590) : *((_QWORD *)v830 + v590);
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, (uint64_t)v592);
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v591);
          if (!*((_QWORD *)v820 + v821 - 1))
            break;
          ++v587;
          data_low = v589;
          if (v732 == v588)
          {
            v568 = v831[0];
            LODWORD(data_low) = v589 + (_DWORD)v588;
LABEL_925:
            LODWORD(v792.__r_.__value_.__l.__data_) = data_low;
            if (*(_DWORD *)(v418 + 8) >= 0x100u)
            {
              if (v568 != (_DWORD)data_low)
              {
                do
                {
                  *(_QWORD *)v793 = 0;
                  v797 = 0;
                  {
                    goto LABEL_1008;
                  }
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, *(uint64_t *)v793);
                  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v797);
                }
                while (v831[0] != LODWORD(v792.__r_.__value_.__l.__data_));
              }
LABEL_1002:
              v621 = v801;
              if (v801 == v802)
              {
                v622 = v801;
              }
              else
              {
                llvm::UpgradeOperandBundles(&v801);
                v622 = v801;
                v621 = v802;
              }
              v816 = 257;
              v779 = (llvm::Value *)llvm::InvokeInst::Create(v418, v720, (uint64_t)v785, (uint64_t)v735, (uint64_t *)v820, v821, v622, 0xAAAAAAAAAAAAAAABLL * ((v621 - v622) >> 4), (const llvm::Twine *)&v813, 0);
              v646 = v801;
              for (i = v802;
                    i != v646;
                    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)&v803, i))
              {
                i -= 48;
              }
              v802 = v646;
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v779);
              *((_WORD *)v779 + 9) = *((_WORD *)v779 + 9) & 0xF003 | (4 * (v766 & 0x3FF));
              *((_QWORD *)v779 + 8) = v725;
              if (*(_QWORD *)v5)
              {
                llvm::Value::deleteValue(v779);
                v23 = 1;
              }
              else
              {
                v23 = 9;
              }
              v18 = v760;
              v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1078:
              v648 = (void *)__p.n128_u64[0];
              v19 = v746;
              if ((_QWORD *)__p.n128_u64[0] == v818)
              {
LABEL_818:
                v435 = (uint64_t *)v820;
                v545 = &v822;
                goto LABEL_938;
              }
LABEL_1185:
              free(v648);
              goto LABEL_818;
            }
            if (v568 == (_DWORD)data_low)
              goto LABEL_1002;
LABEL_1008:
            v813 = (llvm::Value *)"Invalid record";
            v816 = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v18 = v760;
            goto LABEL_1078;
          }
        }
        LODWORD(v792.__r_.__value_.__l.__data_) = v589 + v587;
        goto LABEL_1008;
      case 15:
        v157 = (uint64_t)operator new(0x40uLL);
        *(_DWORD *)(v157 + 20) &= 0x38000000u;
        *(_QWORD *)v157 = **((_QWORD **)a2 + 53) + 1608;
        *(_QWORD *)(v157 + 8) = 0;
        *(_BYTE *)(v157 + 16) = 35;
        *(_OWORD *)(v157 + 33) = 0u;
        *(_OWORD *)(v157 + 44) = 0u;
        *(_OWORD *)(v157 + 17) = 0u;
        goto LABEL_752;
      case 16:
        if (!v831[0]
          || (v762 = *(_DWORD *)v830,
        {
          v156 = "Invalid phi record";
          goto LABEL_838;
        }
        v752 = v18;
        v728 = v831[0] - 1;
        v824[0] = 257;
        v159 = (llvm::Type *)v158;
        v160 = operator new(0x48uLL);
        v161 = (llvm::Value *)(v160 + 2);
        v160[7] = v160[7] & 0x38000000 | 0x40000000;
        v722 = v160;
        *(_QWORD *)v160 = 0;
        v733 = v159;
        llvm::PHINode::PHINode((llvm::PHINode *)(v160 + 2), v159, v728 >> 1, (const llvm::Twine *)&v820, 0);
        if ((v831[0] & 1) == 0 && !llvm::FPMathOperator::classof((uint64_t)v161))
        {
          llvm::Value::deleteValue(v161);
          v820 = "Invalid phi record";
          v824[0] = 259;
          v23 = 1;
          v18 = v752;
          goto LABEL_839;
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v161);
        v820 = (void *)1;
        v162 = 8;
        v18 = v752;
        do
        {
          *(void **)((char *)&v820 + v162) = (void *)-4096;
          v162 += 16;
        }
        while (v162 != 72);
        v779 = v161;
        v163 = v728 >> 1;
        if (v728 < 2)
          goto LABEL_206;
        v164 = 1;
        v165 = 1;
        do
        {
          v166 = *((unsigned int *)v830 + 2 * v164 + 2);
          v167 = *((_QWORD *)a2 + 186);
          if (v166 >= (*((_QWORD *)a2 + 187) - v167) >> 3 || (v168 = *(llvm::BasicBlock **)(v167 + 8 * v166)) == 0)
          {
            llvm::Value::deleteValue(v779);
            __p.n128_u64[0] = (unint64_t)"Invalid phi BB";
            v819 = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            goto LABEL_736;
          }
          v169 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::find((uint64_t)&v820, *(_QWORD *)(v167 + 8 * v166));
          v170 = (uint64_t *)((char *)v821 + 16 * v822);
          if ((v820 & 1) != 0)
            v170 = &v825;
          if (v170 == v169)
          {
            v171 = v19;
            __p.n128_u64[0] = (unint64_t)v168;
            __p.n128_u64[1] = (unint64_t)v807;
            v172 = llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::lookup((uint64_t)v833, (uint64_t)&__p);
            if (v172)
            {
              v173 = (llvm::BasicBlock *)v172;
            }
            else
            {
              v173 = v773;
              if (!v773)
              {
                v174 = (_QWORD *)*((_QWORD *)a2 + 53);
                __p.n128_u64[0] = (unint64_t)"phi.constexpr";
                v819 = 259;
                v173 = (llvm::BasicBlock *)llvm::BasicBlock::Create(v174, (const llvm::Twine *)&__p, v808, 0);
                v773 = v173;
              }
            }
            v175 = v18;
            if (*((_BYTE *)a2 + 1712))
            {
            }
            else
            {
              if (v164 == v831[0])
                goto LABEL_913;
            }
            v177 = ValueSigned;
            if (!ValueSigned)
            {
LABEL_913:
              llvm::Value::deleteValue(v779);
              llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(*((_QWORD *)v773 + 7) + 72, (uint64_t)v773 + 24);
              __p.n128_u64[0] = (unint64_t)"Invalid phi record";
              v819 = 259;
              v20 = (llvm::Function *)((char *)a2 + 8);
              v779 = 0;
              v23 = 1;
              v18 = v175;
              v19 = v171;
              goto LABEL_736;
            }
            if (v173 == v773)
            {
              if (*((llvm::BasicBlock **)v173 + 5) == (llvm::BasicBlock *)((char *)v173 + 40))
              {
                v773 = v173;
              }
              else
              {
                __p.n128_u64[0] = (unint64_t)v168;
                __p.n128_u64[1] = (unint64_t)v807;
                v818[0] = v173;
                llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::insert((uint64_t)v833, &__p);
                v773 = 0;
              }
            }
            llvm::PHINode::addIncoming(v779, v177, v168);
            v813 = v168;
            v814 = (uint64_t)v177;
            llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::try_emplace<llvm::Value *>((uint64_t)&__p, (uint64_t)&v820, (uint64_t *)&v813, &v814);
            v18 = v175;
            v19 = v171;
            v163 = v728 >> 1;
          }
          else
          {
            llvm::PHINode::addIncoming(v779, (llvm::Value *)v169[1], v168);
          }
          v286 = v163 == v165++;
          v164 += 2;
        }
        while (!v286);
LABEL_206:
        VirtualTypeID = v762;
        if ((v831[0] & 1) != 0)
        {
          v23 = 9;
          v20 = (llvm::Function *)((char *)a2 + 8);
        }
        else
        {
          v178 = *((_DWORD *)v830 + 2 * v831[0] - 2);
          v179 = v178 & 0x7E | (v178 >> 7) & 1 | -(v178 & 1);
          v20 = (llvm::Function *)((char *)a2 + 8);
          if (v179)
            *((_BYTE *)v722 + 25) |= 2 * (_BYTE)v179;
          v23 = 9;
        }
LABEL_736:
        if ((v820 & 1) == 0)
          MEMORY[0x24BD1B398](v821, 8);
        goto LABEL_833;
      case 19:
        if ((v831[0] & 0xFFFFFFFE) != 4)
          goto LABEL_407;
        v180 = *((_QWORD *)v830 + 3);
        LODWORD(v813) = *(_DWORD *)v830;
        if ((v180 & 0x40) != 0)
        {
          v182 = (llvm::PointerType **)v181;
        }
        else
        {
          if (!v182)
          {
            v183 = "Missing element type for old-style alloca";
            goto LABEL_830;
          }
        }
        v27 = v19;
        v378 = *((_DWORD *)v830 + 2);
        LOWORD(v809) = 0;
        if (*(_QWORD *)v5)
          goto LABEL_1028;
        if (!v182 || !v380)
        {
          v820 = "Invalid record";
          v824[0] = 259;
          v518 = v5;
          goto LABEL_1027;
        }
        v381 = *((_QWORD *)a2 + 54);
        if (v831[0] == 5)
          v382 = (llvm::Type *)*((_QWORD *)v830 + 4);
        else
          v382 = (llvm::Type *)*(unsigned int *)(v381 + 260);
        v788 = v382;
        v820 = v824;
        v821 = v824;
        v822 = 4;
        v823 = 0;
        if (BYTE1(v809))
        {
          v759 = v18;
          v556 = v809;
        }
        else
        {
          if ((llvm::Type::isSized((uint64_t)v182, (llvm::SmallPtrSetImplBase *)&v820) & 1) == 0)
          {
            __p.n128_u64[0] = (unint64_t)"alloca of unsized type";
            v819 = 259;
            v779 = 0;
            v23 = 1;
LABEL_899:
            v19 = v27;
            if (v821 != v820)
              free(v821);
            goto LABEL_833;
          }
          v759 = v18;
          llvm::DataLayout::getAlignment(v381 + 256, (uint64_t)v182);
          v556 = v579;
          LOWORD(v809) = v579 | 0x100;
        }
        v580 = (char *)operator new(0x68uLL);
        *((_DWORD *)v580 + 13) = *((_DWORD *)v580 + 13) & 0x38000000 | 1;
        *(_QWORD *)v580 = 0;
        *((_QWORD *)v580 + 1) = 0;
        *((_QWORD *)v580 + 2) = 0;
        *((_QWORD *)v580 + 3) = v580 + 32;
        v819 = 257;
        llvm::AllocaInst::AllocaInst((uint64_t)(v580 + 32), v182, v788, v380, v556, (const llvm::Twine *)&__p, 0);
        *((_WORD *)v580 + 25) = v180 & 0x80 | (((v180 >> 5) & 1) << 6) | *((_WORD *)v580 + 25) & 0xFF3F;
        v779 = (llvm::Value *)(v580 + 32);
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)(v580 + 32));
        v23 = 9;
        v18 = v759;
        v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_899;
      case 20:
        LODWORD(v809) = 0;
        v813 = 0;
        v793[0] = 0;
        {
          goto LABEL_829;
        }
        v184 = v809;
        v185 = (_DWORD)v809 + 3;
        if (v831[0] != (_DWORD)v809 + 2 && v831[0] != v185)
          goto LABEL_829;
        v186 = (uint64_t *)v813;
        if (*(_BYTE *)(*(_QWORD *)v813 + 8) != 15)
          goto LABEL_546;
        v27 = v19;
        if (v831[0] == v185)
        {
          v187 = (_DWORD)v809 + 1;
          LODWORD(v809) = (_DWORD)v809 + 1;
          v188 = *((_QWORD *)v830 + v184);
          VirtualTypeID = v188;
        }
        else
        {
          if (!v524)
          {
            v586 = "Missing element type for old-style load";
            goto LABEL_911;
          }
          v189 = (llvm::Type *)v524;
          v187 = v184;
        }
        if (*(_QWORD *)v5)
          goto LABEL_1028;
        LOWORD(v792.__r_.__value_.__l.__data_) = 0;
        if (*(_QWORD *)v5)
          goto LABEL_1028;
        v820 = v824;
        v821 = v824;
        v822 = 4;
        v823 = 0;
        if (v792.__r_.__value_.__s.__data_[1])
        {
          v525 = v792.__r_.__value_.__s.__data_[0];
        }
        else
        {
          if ((llvm::Type::isSized((uint64_t)v189, (llvm::SmallPtrSetImplBase *)&v820) & 1) == 0)
          {
            __p.n128_u64[0] = (unint64_t)"load of unsized type";
            v819 = 259;
            v779 = 0;
            v23 = 1;
LABEL_1032:
            if (v821 != v820)
              free(v821);
LABEL_1069:
            v19 = v27;
LABEL_1070:
            v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_833;
          }
          llvm::DataLayout::getAlignment(*((_QWORD *)a2 + 54) + 256, (uint64_t)v189);
          v525 = v628;
          LOWORD(v792.__r_.__value_.__l.__data_) = v628 | 0x100;
        }
        v629 = operator new(0x60uLL);
        v630 = (uint64_t)(v629 + 8);
        v629[13] = v629[13] & 0x38000000 | 1;
        *(_QWORD *)v629 = 0;
        *((_QWORD *)v629 + 1) = 0;
        *((_QWORD *)v629 + 2) = 0;
        *((_QWORD *)v629 + 3) = v629 + 8;
        v819 = 257;
        llvm::LoadInst::LoadInst((llvm::UnaryInstruction *)(v629 + 8), v189, (llvm::Value *)v186, (const llvm::Twine *)&__p, *((_QWORD *)v830 + v187 + 1) != 0, v525, 0);
        v779 = (llvm::Value *)v630;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v630);
        v23 = 9;
        goto LABEL_1032;
      case 23:
        if (v831[0] <= 2u)
          goto LABEL_407;
        v190 = v19;
        v191 = *(_DWORD *)v830;
        if (v831[0] == 1)
        {
          v193 = 0;
        }
        else
        {
          if (*((_BYTE *)a2 + 1712))
            v383 = v778[0] - *((_DWORD *)v830 + 2);
          else
            v383 = *((_DWORD *)v830 + 2);
        }
        VirtualTypeID = *((_DWORD *)v830 + 4);
        if (!v192)
          goto LABEL_811;
        if (!v193)
          goto LABEL_811;
        v385 = (llvm::Type *)v384;
        if (!v384)
          goto LABEL_811;
        v386 = operator new(0x60uLL);
        v386[13] = v386[13] & 0x38000000 | 1;
        *(_QWORD *)v386 = 0;
        *((_QWORD *)v386 + 1) = 0;
        *((_QWORD *)v386 + 2) = 0;
        *((_QWORD *)v386 + 3) = v386 + 8;
        v824[0] = 257;
        v387 = v193;
        v157 = (uint64_t)(v386 + 8);
        llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)(v386 + 8), v385, 60, v387, 0);
        llvm::Value::setName((llvm::Value *)v157, (const llvm::Twine *)&v820);
        goto LABEL_519;
      case 24:
      case 44:
        v793[0] = 0;
        v813 = 0;
        v809 = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        v796[0] = 0;
        {
          goto LABEL_829;
        }
        if (v26 == 44)
        {
          {
            goto LABEL_829;
          }
          v45 = v793[0];
LABEL_553:
          if (v831[0] != v45 + 2)
            goto LABEL_829;
          v33 = v19;
          v412 = (uint64_t *)v813;
          v413 = v809;
          if (*(_QWORD *)v5)
            goto LABEL_79;
          LOWORD(v797) = 0;
          if (*(_QWORD *)v5)
            goto LABEL_79;
          v820 = v824;
          v821 = v824;
          v822 = 4;
          v823 = 0;
          if (BYTE1(v797))
          {
            v786 = v797;
          }
          else
          {
            if ((llvm::Type::isSized(*v412, (llvm::SmallPtrSetImplBase *)&v820) & 1) == 0)
            {
              __p.n128_u64[0] = (unint64_t)"store of unsized type";
              v819 = 259;
              v779 = 0;
              v23 = 1;
LABEL_965:
              v435 = (uint64_t *)v821;
              v19 = v33;
              v20 = (llvm::Function *)((char *)a2 + 8);
              if (v821 != v820)
                goto LABEL_939;
              goto LABEL_833;
            }
            llvm::DataLayout::getAlignment(*((_QWORD *)a2 + 54) + 256, *v412);
            v786 = v606;
            LOWORD(v797) = v606 | 0x100;
          }
          v607 = operator new(0x80uLL);
          v608 = (uint64_t)(v607 + 16);
          v607[21] = v607[21] & 0x38000000 | 2;
          *(_QWORD *)v607 = 0;
          *((_QWORD *)v607 + 1) = 0;
          *((_QWORD *)v607 + 2) = 0;
          *((_QWORD *)v607 + 3) = v607 + 16;
          *((_QWORD *)v607 + 4) = 0;
          *((_QWORD *)v607 + 5) = 0;
          *((_QWORD *)v607 + 6) = 0;
          *((_QWORD *)v607 + 7) = v607 + 16;
          llvm::StoreInst::StoreInst((uint64_t)(v607 + 16), (uint64_t)v412, (uint64_t)v413, *((_QWORD *)v830 + v45 + 1) != 0, v786, 0, 1, 0);
          v779 = (llvm::Value *)v608;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v608);
          v23 = 9;
          goto LABEL_965;
        }
        v796[0] = v310;
        v312 = v793[0];
        if (v831[0] == v793[0])
        {
          v813 = 0;
        }
        else
        {
          if (*((_BYTE *)a2 + 1712))
            v411 = v778[0] - *((_QWORD *)v830 + v793[0]);
          else
            v411 = *((_QWORD *)v830 + v793[0]);
          if (v813)
          {
            v45 = v312 + 1;
            v793[0] = v312 + 1;
            goto LABEL_553;
          }
        }
LABEL_558:
        v410 = "Invalid record";
        goto LABEL_559;
      case 26:
        LODWORD(v809) = 0;
        v813 = 0;
        v793[0] = 0;
        {
          goto LABEL_829;
        }
        v194 = v831[0];
        v195 = v809;
        if ((_DWORD)v809 == v831[0])
        {
          v196 = "EXTRACTVAL: Invalid instruction with 0 indices";
          goto LABEL_545;
        }
        v388 = (uint64_t *)v813;
        v389 = *(llvm::Type **)v813;
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x400000000;
        VirtualTypeID = v793[0];
        while (2)
        {
          if ((*((_DWORD *)v389 + 2) & 0xFE) == 0x10)
          {
            v390 = v19;
            v391 = *((_QWORD *)v830 + v195);
            if (HIDWORD(v391))
            {
              LODWORD(v809) = v195;
              v523 = "Invalid value";
            }
            else if (*((_DWORD *)v389 + 2) == 16)
            {
              if (v391 < *((unsigned int *)v389 + 3))
              {
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((_QWORD *)v830 + v195));
                v389 = *(llvm::Type **)(*((_QWORD *)v389 + 2) + 8 * v391);
                v392 = VirtualTypeID;
                v393 = a2;
                v394 = v391;
                goto LABEL_528;
              }
              LODWORD(v809) = v195;
              v523 = "EXTRACTVAL: Invalid struct index";
            }
            else
            {
              if (v391 < *((_QWORD *)v389 + 4))
              {
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((_QWORD *)v830 + v195));
                v389 = (llvm::Type *)**((_QWORD **)v389 + 2);
                v392 = VirtualTypeID;
                v393 = a2;
                v394 = 0;
LABEL_528:
                ++v195;
                v19 = v390;
                if (v194 == v195)
                {
                  LODWORD(v809) = v194;
                  v824[0] = 257;
                  v779 = llvm::ExtractValueInst::Create(v388, (unsigned int *)__p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v820, 0);
                  llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v779);
                  v23 = 9;
                  v20 = (llvm::Function *)((char *)a2 + 8);
                  break;
                }
                continue;
              }
              LODWORD(v809) = v195;
              v523 = "EXTRACTVAL: Invalid array index";
            }
            v820 = v523;
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v19 = v390;
          }
          else
          {
            LODWORD(v809) = v195;
            v820 = "EXTRACTVAL: Invalid type";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
          }
          break;
        }
        v435 = (uint64_t *)__p.n128_u64[0];
        v469 = __p.n128_u64[0] == (_QWORD)v818;
        goto LABEL_882;
      case 27:
        v793[0] = 0;
        v813 = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_829;
        }
        v809 = 0;
        v796[0] = 0;
        {
          goto LABEL_829;
        }
        v197 = v831[0];
        v198 = v793[0];
        if (v793[0] == v831[0])
        {
          v196 = "INSERTVAL: Invalid instruction with 0 indices";
          goto LABEL_545;
        }
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x400000000;
        v476 = (uint64_t *)v813;
        v477 = *(llvm::Type **)v813;
        do
        {
          if ((*((_DWORD *)v477 + 2) & 0xFE) != 0x10)
          {
            v793[0] = v198;
            v481 = "INSERTVAL: Invalid type";
            goto LABEL_876;
          }
          v478 = v19;
          v479 = *((_QWORD *)v830 + v198);
          if (HIDWORD(v479))
          {
            v793[0] = v198;
            v571 = "Invalid value";
            goto LABEL_936;
          }
          if (*((_DWORD *)v477 + 2) == 16)
          {
            if (v479 < *((unsigned int *)v477 + 3))
            {
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((_QWORD *)v830 + v198));
              v480 = (llvm::Type **)(*((_QWORD *)v477 + 2) + 8 * v479);
              goto LABEL_672;
            }
            v793[0] = v198;
            v571 = "INSERTVAL: Invalid struct index";
LABEL_936:
            v820 = v571;
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v19 = v478;
            goto LABEL_937;
          }
          if (v479 >= *((_QWORD *)v477 + 4))
          {
            v793[0] = v198;
            v571 = "INSERTVAL: Invalid array index";
            goto LABEL_936;
          }
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, *((_QWORD *)v830 + v198));
          v480 = (llvm::Type **)*((_QWORD *)v477 + 2);
LABEL_672:
          v477 = *v480;
          ++v198;
          v19 = v478;
        }
        while (v197 != v198);
        v793[0] = v197;
        if (v477 != *(llvm::Type **)v809)
        {
          v481 = "Inserted value type doesn't match aggregate type";
LABEL_876:
          v820 = v481;
          v824[0] = 259;
          v20 = (llvm::Function *)((char *)a2 + 8);
          v779 = 0;
          v23 = 1;
          goto LABEL_937;
        }
        v824[0] = 257;
        v605 = llvm::InsertValueInst::Create(v476, (uint64_t)v809, __p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v820, 0);
        VirtualTypeID = v792.__r_.__value_.__l.__data_;
        v779 = (llvm::Value *)v605;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v605);
        v23 = 9;
        v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_937:
        v435 = (uint64_t *)__p.n128_u64[0];
        v545 = v818;
LABEL_938:
        if (v435 != v545)
LABEL_939:
          free(v435);
LABEL_833:
        if (v23 == 9)
        {
LABEL_834:
          v551 = v807;
          if (v807)
          {
            if (v801 != v802)
            {
              llvm::Value::deleteValue(v779);
              v156 = "Operand bundles found with no consumer";
              goto LABEL_838;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v807 + 40, (uint64_t)v779);
            v553 = *((_QWORD *)v551 + 5);
            *((_QWORD *)v779 + 3) = v553;
            *((_QWORD *)v779 + 4) = (char *)v551 + 40;
            *(_QWORD *)(v553 + 8) = (char *)v779 + 24;
            *((_QWORD *)v551 + 5) = (char *)v779 + 24;
            if (*((unsigned __int8 *)v779 + 16) - 29 <= 0xA)
            {
              ++v806;
              v554 = *((_QWORD *)a2 + 186);
              if (v806 >= (unint64_t)((*((_QWORD *)a2 + 187) - v554) >> 3))
                v555 = 0;
              else
                v555 = *(llvm::BasicBlock **)(v554 + 8 * v806);
              v807 = v555;
            }
            if (*(_BYTE *)(*(_QWORD *)v779 + 8) == 7)
            {
              v23 = 0;
            }
            else
            {
              llvm::BitcodeReaderValueList::assignValue(v776, v779, v778[0], VirtualTypeID, (uint64_t *)v5);
              v23 = *(_QWORD *)v5 != 0;
              ++v778[0];
            }
          }
          else
          {
            llvm::Value::deleteValue(v779);
            v156 = "Invalid instruction with no BB";
LABEL_838:
            v820 = v156;
            v824[0] = 259;
            v23 = 1;
          }
        }
LABEL_839:
        if ((v827 & 1) != 0)
        {
          v552 = v826;
          v826 = 0;
          if (v552)
            (*(void (**)(uint64_t))(*(_QWORD *)v552 + 8))(v552);
        }
LABEL_17:
        if ((v829 & 1) != 0)
        {
          v24 = v828;
          v828 = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
        if (!v23 || v23 == 4)
          continue;
        if (v23 == 7)
        {
          if (v801 != v802)
          {
            v699 = "Operand bundles found with no consumer";
            goto LABEL_1212;
          }
          v700 = *((_QWORD *)a2 + 90);
          v701 = *(_QWORD *)(v700 - 16);
          if (v701 && *(_BYTE *)(v701 + 16) == 21 && !*(_QWORD *)(v701 + 24))
          {
            v714 = (unint64_t)(v700 - *(_QWORD *)v776) >> 5;
            for (j = v771 >> 5; (_DWORD)v714 != j; ++j)
            {
              v716 = *(_QWORD *)(*(_QWORD *)v776 + 32 * j + 16);
              if (v716 && *(_BYTE *)(v716 + 16) == 21 && !*(_QWORD *)(v716 + 24))
              {
                v717 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v716, (llvm::Type *)v21);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v716, v717, (llvm::Value *)1);
                llvm::Value::~Value((llvm::Value *)v716, v718);
                MEMORY[0x24BD1B3A4]();
              }
            }
            v699 = "Never resolved value found in function";
LABEL_1212:
            v820 = v699;
            v824[0] = 259;
          }
          else
          {
            if (*(_DWORD *)(*((_QWORD *)a2 + 97) + 24) >= 2u)
            {
              v699 = "Invalid function metadata: outgoing forward refs";
              goto LABEL_1212;
            }
            v702 = v19;
            if (v773)
              llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(*((_QWORD *)v773 + 7) + 72, (uint64_t)v773 + 24);
            if ((_DWORD)v835)
            {
              v703 = (char *)v834;
              v704 = (char *)v834 + 24 * v835;
              do
              {
                v706 = *(llvm::BasicBlock **)v703;
                v705 = (llvm::BasicBlock *)*((_QWORD *)v703 + 1);
                v707 = (llvm::BasicBlock *)*((_QWORD *)v703 + 2);
                v708 = operator new(0x60uLL);
                v708[13] = v708[13] & 0x38000000 | 1;
                *(_QWORD *)v708 = 0;
                *((_QWORD *)v708 + 1) = 0;
                *((_QWORD *)v708 + 2) = 0;
                *((_QWORD *)v708 + 3) = v708 + 8;
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v708 + 8), v705, v707);
                v709 = (_QWORD *)*((_QWORD *)v706 + 5);
                if (v709 == (_QWORD *)((char *)v706 + 40))
                {
                  v712 = 0;
                }
                else
                {
                  v710 = (llvm::Instruction *)(v709 - 3);
                  if (v709)
                    v711 = v709 - 3;
                  else
                    v711 = 0;
                  if (*((unsigned __int8 *)v711 + 16) - 29 >= 0xB)
                    v712 = 0;
                  else
                    v712 = v710;
                }
                llvm::Instruction::replaceSuccessorWith(v712, v705, v707);
                llvm::BasicBlock::replacePhiUsesWith((uint64_t)v705, v706, v707);
                llvm::BasicBlock::moveBefore(v707, v705);
                v703 += 24;
              }
              while (v703 != v704);
            }
            std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::resize(v776, (v771 >> 5));
            llvm::SmallVectorImpl<llvm::TrackingMDRef>::resizeImpl<false>(*((_QWORD *)a2 + 97), v772);
            v713 = (void *)*((_QWORD *)a2 + 186);
            *v774 = 0;
            *((_QWORD *)a2 + 187) = 0;
            *((_QWORD *)a2 + 188) = 0;
            if (v713)
              operator delete(v713);
            *(_QWORD *)v5 = 0;
            v19 = v702;
          }
        }
        if (v830 != v19)
          free(v830);
        v830 = &v801;
        std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v830);
        if (v805)
          llvm::MetadataTracking::untrack((uint64_t)&v805, (uint64_t)v805);
        if (v834 != v18)
          free(v834);
        if ((v833[0] & 1) == 0)
          MEMORY[0x24BD1B398](v833[1], 8);
        return;
      case 29:
        v88 = v19;
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v813 = 0;
        v793[0] = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_278;
        }
        v199 = (int)v809;
        if (v831[0] == (_DWORD)v809)
          goto LABEL_278;
        v200 = (llvm::Value *)__p.n128_u64[0];
        v201 = v793[0];
        v202 = *((_BYTE *)a2 + 1712)
             ? v778[0] - *((_QWORD *)v830 + v809)
             : *((_QWORD *)v830 + v809);
        if (!v203)
          goto LABEL_278;
        v204 = v203;
        LODWORD(v809) = v199 + 1;
        {
          goto LABEL_278;
        }
        v205 = *(llvm::Type **)v813;
        if (*(_QWORD *)v813 && (*((_DWORD *)v205 + 2) & 0xFE) == 0x12)
          v205 = (llvm::Type *)*((_QWORD *)v205 + 3);
        if (v205 != (llvm::Type *)(**((_QWORD **)a2 + 53) + 1920))
        {
LABEL_241:
          v206 = "Invalid type for value";
          goto LABEL_279;
        }
        v768 = v813;
        v789 = v201;
        v824[0] = 257;
        v572 = operator new(0xA0uLL);
        v573 = v572;
        v574 = 0;
        v575 = (uint64_t)(v572 + 24);
        v572[29] = v572[29] & 0x38000000 | 3;
        do
        {
          v576 = &v572[v574];
          *v576 = 0;
          v576[1] = 0;
          v576[2] = 0;
          v576[3] = v575;
          v574 += 8;
        }
        while (v574 != 24);
        llvm::SelectInst::SelectInst((llvm::SelectInst *)(v572 + 24), v768, v200, v204, (const llvm::Twine *)&v820, 0);
        VirtualTypeID = v789;
        v779 = (llvm::Value *)v575;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v575);
        v577 = v809;
        if (v831[0] > v809 && llvm::FPMathOperator::classof((uint64_t)v779))
        {
          v578 = *((_QWORD *)v830 + v577) & 0x7E | (*((_QWORD *)v830 + v577) >> 7) & 1 | -(*((_QWORD *)v830 + v577) & 1);
          if (v578)
            *((_BYTE *)v573 + 113) |= 2 * (_BYTE)v578;
          v23 = 9;
          v19 = v88;
          v20 = (llvm::Function *)((char *)a2 + 8);
        }
        else
        {
LABEL_158:
          v23 = 9;
          v19 = v88;
          v20 = (llvm::Function *)((char *)a2 + 8);
        }
        goto LABEL_833;
      case 31:
        if (v831[0] <= 1u)
          goto LABEL_407;
        v207 = v19;
        v208 = *(_DWORD *)v830;
        if (v831[0] == 1)
          goto LABEL_633;
        v395 = v209;
        v396 = *((_BYTE *)a2 + 1712) ? v778[0] - *((_DWORD *)v830 + 2) : *((_DWORD *)v830 + 2);
        if (!v395)
          goto LABEL_633;
        v398 = v397;
        if (!v397)
          goto LABEL_633;
        v399 = (v831[0] - 2);
        v400 = operator new(0x48uLL);
        v401 = (uint64_t)(v400 + 2);
        v400[7] = v400[7] & 0x38000000 | 0x40000000;
        *(_QWORD *)v400 = 0;
        llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v400 + 2), v398, v399, 0);
        v779 = (llvm::Value *)v401;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v401);
        if (!(_DWORD)v399)
        {
          v19 = v207;
LABEL_815:
          v20 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_834;
        }
        v403 = 0;
        v19 = v207;
        v20 = (llvm::Function *)((char *)a2 + 8);
        while (1)
        {
          v404 = *((unsigned int *)v830 + 2 * (v403 + 2));
          v405 = *((_QWORD *)a2 + 186);
          if (v404 >= (*((_QWORD *)a2 + 187) - v405) >> 3)
            break;
          v402 = *(llvm::BasicBlock **)(v405 + 8 * v404);
          if (!v402)
            break;
          llvm::IndirectBrInst::addDestination(v779, v402);
          if (v399 == ++v403)
            goto LABEL_834;
        }
        llvm::Instruction::~Instruction((llvm::UndefValue **)v779, v402);
        llvm::User::operator delete(v532);
        v156 = "Invalid record";
        goto LABEL_838;
      case 33:
        if (!v210)
          goto LABEL_407;
        v211 = v210;
        v799 = v805;
        if (v805)
          llvm::MetadataTracking::track((uint64_t)&v799, (uint64_t)v805, 2);
        llvm::TrackingMDRef::operator=((uint64_t *)(v211 + 48), &v799);
        v21 = (uint64_t)v799;
        if (!v799)
          goto LABEL_251;
        v212 = &v799;
        goto LABEL_250;
      case 34:
        if (v831[0] <= 2u)
          goto LABEL_407;
        v213 = (*(_DWORD *)v830 - 1);
        v214 = *((_QWORD *)a2 + 180);
        v750 = v18;
        if (v213 >= (*((_QWORD *)a2 + 181) - v214) >> 3)
          v215 = 0;
        else
          v215 = *(_QWORD *)(v214 + 8 * v213);
        v406 = 2;
        LODWORD(v792.__r_.__value_.__l.__data_) = 2;
        v407 = *((_QWORD *)v830 + 1);
        if ((v407 & 0x20000) != 0)
        {
          v406 = 3;
          LODWORD(v792.__r_.__value_.__l.__data_) = 3;
          v408 = *((_DWORD *)v830 + 4) & 0x7E | (*((_DWORD *)v830 + 4) >> 7) & 1 | -(*((_DWORD *)v830 + 4) & 1);
          if (!v408)
          {
            v820 = "Fast math flags indicator set for call with no FMF";
            v824[0] = 259;
            v515 = v5;
            goto LABEL_932;
          }
        }
        else
        {
          v408 = 0;
        }
        v736 = v408;
        if ((v407 & 0x8000) != 0)
        {
          LODWORD(v792.__r_.__value_.__l.__data_) = v406 + 1;
          v417 = *((_QWORD *)v830 + v406);
          if (!v421 || (v416 = v421, *(_BYTE *)(v421 + 8) != 14))
          {
            v422 = "Explicit call type is not a function type";
            goto LABEL_931;
          }
        }
        else
        {
          v416 = 0;
          LODWORD(v417) = -1;
        }
        v809 = 0;
        v796[0] = 0;
        {
          v422 = "Invalid record";
LABEL_931:
          v820 = v422;
          v824[0] = 259;
          v515 = v5;
          v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_932:
          v779 = 0;
          v23 = 1;
LABEL_933:
          v18 = v750;
          goto LABEL_833;
        }
        v470 = *(_QWORD *)v809;
        if (!*(_QWORD *)v809 || *(_BYTE *)(v470 + 8) != 15)
        {
          v422 = "Callee is not a pointer type";
          goto LABEL_931;
        }
        v787 = (llvm::Value *)v809;
        if (v416)
        {
          v471 = *(_QWORD *)(v470 + 24);
          if (v471 && v471 != v416)
          {
            v422 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_931;
          }
        }
        else
        {
          if (!v582 || (v416 = v582, *(_BYTE *)(v582 + 8) != 14))
          {
            v422 = "Callee is not of pointer to function type";
            goto LABEL_931;
          }
        }
        v583 = v831[0];
        v584 = (*(_DWORD *)(v416 + 12) - 1);
        v585 = LODWORD(v792.__r_.__value_.__l.__data_);
        if (v831[0] < (v584 + LODWORD(v792.__r_.__value_.__l.__data_)))
        {
          v422 = "Insufficient operands to call";
          goto LABEL_931;
        }
        v726 = v215;
        v729 = v5;
        v763 = v6;
        v747 = v19;
        v820 = &v822;
        v821 = (void *)0x1000000000;
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x1000000000;
        if (!(_DWORD)v584)
          goto LABEL_955;
        v594 = v584;
        v595 = 0;
        while (1)
        {
          v596 = v595 + 1;
          v597 = v585;
          v598 = v585 + v595;
          v600 = *(llvm::Type **)(*(_QWORD *)(v416 + 16) + 8 * v595 + 8);
          if (*((_BYTE *)v600 + 8) != 8)
            break;
          v601 = *((unsigned int *)v830 + 2 * v598);
          v602 = *((_QWORD *)a2 + 186);
          if (v601 >= (*((_QWORD *)a2 + 187) - v602) >> 3)
            goto LABEL_947;
          v603 = *(llvm::MCAsmLexer **)(v602 + 8 * v601);
LABEL_952:
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, (uint64_t)v603);
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v599);
          if (!*((_QWORD *)v820 + v821 - 1))
          {
            LODWORD(v792.__r_.__value_.__l.__data_) = v597 + v595;
            goto LABEL_1047;
          }
          ++v595;
          v585 = v597;
          if (v594 == v596)
          {
            v583 = v831[0];
            LODWORD(v585) = v597 + v596;
LABEL_955:
            LODWORD(v792.__r_.__value_.__l.__data_) = v585;
            if (*(_DWORD *)(v416 + 8) < 0x100u)
            {
              if (v583 != (_DWORD)v585)
                goto LABEL_1047;
            }
            else if (v583 != (_DWORD)v585)
            {
              while (1)
              {
                *(_QWORD *)v793 = 0;
                v797 = 0;
                {
                  break;
                }
                llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, *(uint64_t *)v793);
                llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__p, v797);
                if (v831[0] == LODWORD(v792.__r_.__value_.__l.__data_))
                  goto LABEL_1039;
              }
LABEL_1047:
              v813 = (llvm::Value *)"Invalid record";
              v816 = 259;
              v779 = 0;
LABEL_1106:
              v23 = 1;
              goto LABEL_1107;
            }
LABEL_1039:
            v633 = v801;
            if (v801 == v802)
            {
              v634 = v801;
            }
            else
            {
              llvm::UpgradeOperandBundles(&v801);
              v634 = v801;
              v633 = v802;
            }
            v816 = 257;
            v779 = (llvm::Value *)llvm::CallInst::Create(v416, (uint64_t)v787, (uint64_t *)v820, v821, v634, 0xAAAAAAAAAAAAAAABLL * ((v633 - v634) >> 4), (const llvm::Twine *)&v813, 0);
            v651 = v801;
            for (k = v802;
                  k != v651;
                  std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)&v803, k))
            {
              k -= 48;
            }
            v802 = v651;
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v779);
            v653 = v407 & 1;
            if ((v407 & 0x4000) != 0)
              v653 = 2;
            if ((v407 & 0x10000) != 0)
              v653 = 3;
            *((_WORD *)v779 + 9) = v653 & 0xF003 | (4 * ((v407 >> 1) & 0x3FF)) | *((_WORD *)v779 + 9) & 0xF000;
            *((_QWORD *)v779 + 8) = v726;
            if (*(_QWORD *)v729)
            {
              llvm::Value::deleteValue(v779);
              goto LABEL_1106;
            }
            if (v736)
            {
              if (!llvm::FPMathOperator::classof((uint64_t)v779))
              {
                v813 = (llvm::Value *)"Fast-math-flags specified for call without floating-point scalar or vector return type";
                v816 = 259;
                goto LABEL_1106;
              }
              *((_BYTE *)v779 + 17) |= 2 * (_BYTE)v736;
            }
            v23 = 9;
LABEL_1107:
            if ((_QWORD *)__p.n128_u64[0] != v818)
              free((void *)__p.n128_u64[0]);
            if (v820 != &v822)
              free(v820);
            v19 = v747;
            v18 = v750;
            goto LABEL_1204;
          }
        }
        if (v598 != v831[0])
        {
          if (*((_BYTE *)a2 + 1712))
            v604 = v778[0] - *((_QWORD *)v830 + v598);
          else
            v604 = *((_QWORD *)v830 + v598);
          goto LABEL_952;
        }
LABEL_947:
        v603 = 0;
        goto LABEL_952;
      case 35:
        if (!v216 || v831[0] <= 3u)
          goto LABEL_407;
        v217 = v216;
        v782 = v831[0] == 5 && *((_QWORD *)v830 + 4) != 0;
        v207 = v19;
        v453 = *(_DWORD *)v830;
        v454 = *((_DWORD *)v830 + 2);
        v455 = *((_DWORD *)v830 + 4);
        v456 = *((_DWORD *)v830 + 6);
        if (v455)
        {
          MetadataFwdRefOrLoad = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(*((llvm::MetadataLoader::MetadataLoaderImpl **)a2 + 97), v455 - 1);
          if (!MetadataFwdRefOrLoad
            || (v458 = (uint64_t)MetadataFwdRefOrLoad, (llvm::MDNode::classof(MetadataFwdRefOrLoad) & 1) == 0))
          {
LABEL_633:
            v820 = "Invalid record";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v23 = 1;
            v19 = v207;
            goto LABEL_839;
          }
        }
        else
        {
          v458 = 0;
        }
        v757 = v18;
        if (v456)
        {
          v506 = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(*((llvm::MetadataLoader::MetadataLoaderImpl **)a2 + 97), v456 - 1);
          if (!v506 || (v507 = (uint64_t)v506, (llvm::MDNode::classof(v506) & 1) == 0))
          {
            v820 = "Invalid record";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v23 = 1;
            v18 = v757;
            v19 = v207;
            goto LABEL_839;
          }
        }
        else
        {
          v507 = 0;
        }
        v520 = *(_QWORD *)(v458 + 8);
        v521 = (_QWORD *)(v520 & 0xFFFFFFFFFFFFFFF8);
        if ((v520 & 4) != 0)
          v521 = (_QWORD *)*v521;
        Impl = llvm::DILocation::getImpl(v521, v453, v454, v458, v507, v782, 0, 1);
        v820 = Impl;
        if (Impl)
          llvm::MetadataTracking::track((uint64_t)&v820, (uint64_t)Impl, 2);
        llvm::TrackingMDRef::operator=((uint64_t *)&v805, (unsigned __int8 **)&v820);
        v18 = v757;
        v19 = v207;
        v20 = (llvm::Function *)((char *)a2 + 8);
        if (v820)
          llvm::MetadataTracking::untrack((uint64_t)&v820, (uint64_t)v820);
        v798 = v805;
        if (v805)
          llvm::MetadataTracking::track((uint64_t)&v798, (uint64_t)v805, 2);
        llvm::TrackingMDRef::operator=((uint64_t *)(v217 + 48), &v798);
        v21 = (uint64_t)v798;
        if (v798)
        {
          v212 = &v798;
LABEL_250:
          llvm::MetadataTracking::untrack((uint64_t)v212, v21);
        }
LABEL_251:
        v23 = 4;
        goto LABEL_839;
      case 36:
        if (v831[0] != 2)
          goto LABEL_407;
        v218 = 4;
        switch(*(_DWORD *)v830)
        {
          case 0:
          case 1:
          case 2:
            v820 = "Invalid record";
            v824[0] = 259;
            v23 = 1;
            goto LABEL_839;
          case 3:
            goto LABEL_747;
          case 4:
            v218 = 5;
            goto LABEL_747;
          case 5:
            v218 = 6;
            goto LABEL_747;
          default:
            v218 = 7;
LABEL_747:
            v519 = *((_QWORD *)v830 + 1);
            if ((*((_QWORD *)v830 + 1) & 0xFFFFFFFELL) != 0)
            {
              if (*((_QWORD *)a2 + 226) <= v519)
                LOBYTE(v519) = 1;
              else
                LOBYTE(v519) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v519);
            }
            v157 = (uint64_t)operator new(0x40uLL);
            *(_DWORD *)(v157 + 20) &= 0x38000000u;
            *(_QWORD *)v157 = **((_QWORD **)a2 + 53) + 1608;
            *(_QWORD *)(v157 + 8) = 0;
            *(_BYTE *)(v157 + 16) = 63;
            *(_OWORD *)(v157 + 17) = 0u;
            *(_OWORD *)(v157 + 33) = 0u;
            *(_OWORD *)(v157 + 44) = 0u;
            *(_WORD *)(v157 + 18) = v218;
            *(_BYTE *)(v157 + 60) = v519;
            break;
        }
        goto LABEL_752;
      case 37:
        v219 = v831[0];
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_829;
        }
        v220 = (uint64_t *)__p.n128_u64[0];
        if (*(_BYTE *)(*(_QWORD *)__p.n128_u64[0] + 8) != 15)
        {
          v196 = "Cmpxchg operand is not a pointer type";
LABEL_545:
          v820 = v196;
          v824[0] = 259;
          v409 = v5;
          v20 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_831;
        }
        v88 = v19;
        v223 = (int)v813;
        if (v831[0] == (_DWORD)v813
          || (*((_BYTE *)a2 + 1712)
            ? (v224 = v778[0] - *((_QWORD *)v830 + v813))
            : (v224 = *((_QWORD *)v830 + v813)),
        {
LABEL_278:
          v206 = "Invalid record";
LABEL_279:
          v820 = v206;
          v824[0] = 259;
          v229 = v5;
          v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_280:
          v779 = 0;
          v23 = 1;
          goto LABEL_281;
        }
        if (v831[0] == v223 + 1
          || (*((_BYTE *)a2 + 1712)
            ? (v226 = v778[0] - *((_QWORD *)v830 + (v223 + 1)))
            : (v226 = *((_QWORD *)v830 + (v223 + 1))),
              (v743 = v225,
        {
          v820 = "Invalid record";
          v824[0] = 259;
          v20 = (llvm::Function *)((char *)a2 + 8);
          v779 = 0;
          v23 = 1;
          v19 = v88;
          goto LABEL_833;
        }
        v723 = (uint64_t)v227;
        v729 = v5;
        v763 = v6;
        v228 = *((_QWORD *)v830 + (v223 + 3));
        switch((int)v228)
        {
          case 0:
          case 1:
LABEL_277:
            v820 = "Invalid record";
            v824[0] = 259;
            v5 = v729;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v19 = v88;
            goto LABEL_1094;
          case 2:
            break;
          case 3:
            LODWORD(v228) = 4;
            break;
          case 4:
            LODWORD(v228) = 5;
            break;
          case 5:
            LODWORD(v228) = 6;
            break;
          default:
            LODWORD(v228) = 7;
            break;
        }
        v791 = *((_QWORD *)v830 + (v223 + 4));
        if ((*((_QWORD *)v830 + (v223 + 4)) & 0xFFFFFFFELL) != 0)
        {
          if (*((_QWORD *)a2 + 226) <= v791)
            LOBYTE(v791) = 1;
          else
            LOBYTE(v791) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v791);
        }
        if (*(_QWORD *)v5)
        {
          v779 = 0;
          v23 = 1;
        }
        else
        {
          if (v219 > 6)
          {
            v654 = *((_QWORD *)v830 + (v223 + 5));
            switch((int)v654)
            {
              case 0:
              case 1:
                goto LABEL_277;
              case 2:
                goto LABEL_1130;
              case 3:
                LOWORD(v654) = 4;
                goto LABEL_1130;
              case 4:
                LOWORD(v654) = 5;
                goto LABEL_1130;
              case 5:
                LOWORD(v654) = 6;
                goto LABEL_1130;
              default:
                LOWORD(v654) = 7;
                goto LABEL_1130;
            }
          }
          LODWORD(v654) = dword_24AA32660[(int)v228 - 2];
LABEL_1130:
          llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)a2 + 54) + 256, (uint64_t)*v743);
          v657 = v656;
          if ((_BYTE)v655)
          v658 = __clz((unint64_t)(v657 + 7) >> 3);
          v659 = operator new(0xA0uLL);
          v660 = 0;
          v661 = (uint64_t)(v659 + 24);
          v659[29] = v659[29] & 0x38000000 | 3;
          do
          {
            v662 = &v659[v660];
            *v662 = 0;
            v662[1] = 0;
            v662[2] = 0;
            v662[3] = v661;
            v660 += 8;
          }
          while (v660 != 24);
          v663 = v791;
          v779 = (llvm::Value *)(v659 + 24);
          v664 = v228;
          v665 = v659;
          llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v661, (uint64_t)v220, (uint64_t ***)v743, v723, 63 - v658, v664, v654, v663, 0);
          v666 = v830;
          v667 = *((_WORD *)v665 + 57) & 0xFFFE | (*((_QWORD *)v830 + (v223 + 2)) != 0);
          *((_WORD *)v665 + 57) = v667;
          if (v219 > 7)
          {
            *((_WORD *)v665 + 57) = v667 & 0xFFFD | (2 * (v666[v223 + 6] != 0));
            v673 = *((_QWORD *)v665 + 12);
            v820 = (void *)__PAIR64__(v672, v221);
          }
          else
          {
            v668 = v807;
            v669 = (char *)v807 + 40;
            llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)v807 + 40, (uint64_t)v779);
            v670 = *((_QWORD *)v668 + 5);
            *((_QWORD *)v665 + 15) = v670;
            *((_QWORD *)v665 + 16) = v669;
            *(_QWORD *)(v670 + 8) = v665 + 30;
            *((_QWORD *)v668 + 5) = v665 + 30;
            v793[0] = 0;
            v824[0] = 257;
            v779 = llvm::ExtractValueInst::Create((uint64_t *)v779, v793, 1, (const llvm::Twine *)&v820, 0);
          }
          VirtualTypeID = v221;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v779);
          v23 = 9;
        }
        v19 = v88;
        goto LABEL_1204;
      case 38:
      case 59:
        v46 = v831[0];
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v793[0] = 0;
        {
          v60 = "Invalid record";
LABEL_84:
          v820 = v60;
          v824[0] = 259;
          v61 = v5;
LABEL_385:
          v779 = 0;
          v23 = 1;
          goto LABEL_833;
        }
        v813 = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = -1;
        if (v26 == 38)
        {
          v741 = v19;
          LODWORD(v792.__r_.__value_.__l.__data_) = v48;
          v50 = (int)v809;
          if (v831[0] == (_DWORD)v809)
          {
            v813 = 0;
LABEL_661:
            v820 = "Invalid record";
            v824[0] = 259;
            v779 = 0;
            v23 = 1;
            v19 = v741;
            goto LABEL_833;
          }
          if (*((_BYTE *)a2 + 1712))
            v472 = v778[0] - *((_QWORD *)v830 + v809);
          else
            v472 = *((_QWORD *)v830 + v809);
          if (!v813)
            goto LABEL_661;
          v754 = v18;
          v336 = v50 + 1;
          LODWORD(v809) = v50 + 1;
        }
        else
        {
          {
LABEL_572:
            v410 = "Invalid record";
            goto LABEL_559;
          }
          v741 = v19;
          v754 = v18;
          v336 = v809;
        }
        v473 = v336 + 4;
        v474 = v336 + 5;
        if (v46 != v336 + 4 && v46 != v474)
        {
          v820 = "Invalid record";
          v824[0] = 259;
          v475 = v5;
LABEL_727:
          v779 = 0;
          v23 = 1;
          v19 = v741;
          v18 = v754;
          goto LABEL_833;
        }
        v510 = v830;
        DecodedRMWOperation = getDecodedRMWOperation(*((_QWORD *)v830 + v336));
        if (DecodedRMWOperation >= 0x11)
        {
LABEL_726:
          v820 = "Invalid record";
          v824[0] = 259;
          v475 = v5;
          v20 = (llvm::Function *)((char *)a2 + 8);
          goto LABEL_727;
        }
        v512 = DecodedRMWOperation;
        v513 = v510[v336 + 1];
        v514 = v510[v336 + 2];
        switch((int)v514)
        {
          case 0:
          case 1:
            goto LABEL_726;
          case 2:
            break;
          case 3:
            LOWORD(v514) = 4;
            break;
          case 4:
            LOWORD(v514) = 5;
            break;
          case 5:
            LOWORD(v514) = 6;
            break;
          default:
            LOWORD(v514) = 7;
            break;
        }
        v613 = v510[v336 + 3];
        if ((v510[v336 + 3] & 0xFFFFFFFELL) != 0)
        {
          v19 = v741;
          if (*((_QWORD *)a2 + 226) <= v613)
            LOBYTE(v613) = 1;
          else
            LOBYTE(v613) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v613);
        }
        else
        {
          v19 = v741;
        }
        LOWORD(v820) = 0;
        v286 = v46 == v474;
        v790 = v514;
        v769 = v613;
        v614 = v513;
        if (v286)
        {
          if (*(_QWORD *)v5)
          {
            v779 = 0;
            v23 = 1;
            v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1000:
            v18 = v754;
            goto LABEL_833;
          }
          v739 = v512;
          v748 = (uint64_t *)v813;
          if (BYTE1(v820))
          {
            v619 = v820;
            v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_999:
            v620 = operator new(0x80uLL);
            v620[21] = v620[21] & 0x38000000 | 2;
            *(_QWORD *)v620 = 0;
            *((_QWORD *)v620 + 1) = 0;
            *((_QWORD *)v620 + 2) = 0;
            *((_QWORD *)v620 + 3) = v620 + 16;
            *((_QWORD *)v620 + 4) = 0;
            *((_QWORD *)v620 + 5) = 0;
            *((_QWORD *)v620 + 6) = 0;
            *((_QWORD *)v620 + 7) = v620 + 16;
            llvm::AtomicRMWInst::AtomicRMWInst((uint64_t)(v620 + 16), v739, v47, v748, v619, v790, v769, 0);
            VirtualTypeID = v792.__r_.__value_.__l.__data_;
            *((_WORD *)v620 + 41) = *((_WORD *)v620 + 41) & 0xFFFE | (v614 != 0);
            v779 = (llvm::Value *)(v620 + 16);
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)(v620 + 16));
            v23 = 9;
            goto LABEL_1000;
          }
          v615 = (uint64_t *)v813;
        }
        else
        {
          v615 = (uint64_t *)v813;
        }
        v739 = v512;
        v748 = v615;
        llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)a2 + 54) + 256, *v615);
        v618 = v617;
        v20 = (llvm::Function *)((char *)a2 + 8);
        if ((_BYTE)v616)
        v619 = 63 - __clz((unint64_t)(v618 + 7) >> 3);
        LOWORD(v820) = v619 | 0x100;
        goto LABEL_999;
      case 39:
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_829;
        }
        v232 = llvm::ResumeInst::Create((llvm::ResumeInst *)__p.n128_u64[0], v230, v231);
        v233 = (unsigned int *)((char *)a2 + 840);
        v779 = (llvm::Value *)v232;
        goto LABEL_284;
      case 40:
      case 47:
        if ((_DWORD)v826 == 47)
        {
          if (v831[0] <= 2u)
            goto LABEL_829;
        }
        else if (v831[0] <= 3u)
        {
          goto LABEL_829;
        }
        LODWORD(v813) = 1;
        VirtualTypeID = *(_DWORD *)v830;
        if (!v299)
          goto LABEL_829;
        v301 = (llvm::LandingPadInst *)v299;
        if (v26 == 40)
        {
          __p.n128_u64[0] = 0;
          LODWORD(v809) = 0;
          {
            goto LABEL_829;
          }
          v88 = v19;
          v302 = v808;
          if ((*((_WORD *)v808 + 9) & 8) != 0)
          {
            v516 = *((_DWORD *)v808 + 5);
            if ((v516 & 0x40000000) != 0)
              v517 = (_QWORD *)*((_QWORD *)v808 - 1);
            else
              v517 = (_QWORD *)((char *)v808 - 32 * (v516 & 0x7FFFFFF));
            if (*v517 != __p.n128_u64[0])
            {
              v820 = "Personality function mismatch";
              v824[0] = 259;
              v19 = v88;
              goto LABEL_832;
            }
          }
          else
          {
            v303 = __p.n128_u64[0] != 0;
            llvm::Function::setHungoffOperand<0>((uint64_t)v808, __p.n128_i64[0]);
            *((_WORD *)v302 + 9) = *((_WORD *)v302 + 9) & 0xFFF7 | (8 * v303);
          }
          v335 = v813;
        }
        else
        {
          v88 = v19;
          v335 = 1;
        }
        v546 = *((_QWORD *)v830 + v335) != 0;
        LODWORD(v813) = v335 + 2;
        v547 = (llvm::Type *)*((_QWORD *)v830 + v335 + 1);
        v824[0] = 257;
        v548 = llvm::LandingPadInst::Create(v301, v547, (const llvm::Twine *)&v820, 0, v300);
        *((_WORD *)v548 + 9) = *((_WORD *)v548 + 9) & 0xFFFE | v546;
        if (!(_DWORD)v547)
          goto LABEL_826;
        while (1)
        {
          LODWORD(v813) = (_DWORD)v813 + 1;
          __p.n128_u64[0] = 0;
          LODWORD(v809) = 0;
          {
            break;
          }
          llvm::LandingPadInst::addClause((llvm::LandingPadInst *)v548, (llvm::Constant *)__p.n128_u64[0]);
          LODWORD(v547) = (_DWORD)v547 - 1;
          if (!(_DWORD)v547)
          {
LABEL_826:
            v779 = (llvm::Value *)v548;
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v548);
            v23 = 9;
LABEL_281:
            v19 = v88;
            goto LABEL_833;
          }
        }
        v19 = v88;
        if (v548)
        {
          llvm::Instruction::~Instruction((llvm::UndefValue **)v548, v549);
          llvm::User::operator delete(v550);
        }
LABEL_829:
        v183 = "Invalid record";
LABEL_830:
        v820 = v183;
        v824[0] = 259;
        v409 = v5;
LABEL_831:
LABEL_832:
        v779 = 0;
        v23 = 1;
        goto LABEL_833;
      case 41:
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_829;
        }
        v234 = v813;
        v235 = (_DWORD)v813 + 5;
        if (v831[0] != (_DWORD)v813 + 4 && v831[0] != v235)
          goto LABEL_829;
        v236 = (uint64_t *)__p.n128_u64[0];
        if (*(_BYTE *)(*(_QWORD *)__p.n128_u64[0] + 8) != 15)
        {
LABEL_546:
          v410 = "Load operand is not a pointer type";
LABEL_559:
          v820 = v410;
          v824[0] = 259;
          v779 = 0;
          v23 = 1;
          goto LABEL_833;
        }
        v27 = v19;
        if (v831[0] == v235)
        {
          v237 = (_DWORD)v813 + 1;
          LODWORD(v813) = (_DWORD)v813 + 1;
          v238 = *((_QWORD *)v830 + v234);
          VirtualTypeID = v238;
        }
        else
        {
          if (!v526)
          {
            v586 = "Missing element type for old style atomic load";
LABEL_911:
            v820 = v586;
            v824[0] = 259;
            v779 = 0;
            v23 = 1;
LABEL_92:
            v19 = v27;
            goto LABEL_833;
          }
          v239 = (llvm::Type *)v526;
          v237 = v234;
        }
        if (*(_QWORD *)v5)
          goto LABEL_1028;
        v527 = *((_QWORD *)v830 + v237 + 2);
        switch((int)v527)
        {
          case 0:
          case 4:
          case 5:
            goto LABEL_1026;
          case 1:
            break;
          case 2:
            LOWORD(v527) = 2;
            break;
          case 3:
            LOWORD(v527) = 4;
            break;
          default:
            LOWORD(v527) = 7;
            break;
        }
        v626 = *((_QWORD *)v830 + v237);
        if (!v626)
        {
LABEL_1026:
          v820 = "Invalid record";
          v824[0] = 259;
          v518 = v5;
          v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1027:
LABEL_1028:
          v779 = 0;
          v23 = 1;
          v19 = v27;
          goto LABEL_833;
        }
        v761 = v18;
        v627 = *((_QWORD *)v830 + v237 + 3);
        if ((*((_QWORD *)v830 + v237 + 3) & 0xFFFFFFFELL) != 0)
        {
          if (*((_QWORD *)a2 + 226) <= v627)
            LOBYTE(v627) = 1;
          else
            LOBYTE(v627) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v627);
        }
        LOWORD(v793[0]) = 0;
        if (*(_QWORD *)v5)
          goto LABEL_1065;
        if (BYTE1(v793[0]))
        {
          v644 = operator new(0x60uLL);
          v645 = (uint64_t)(v644 + 8);
          v644[13] = v644[13] & 0x38000000 | 1;
          *(_QWORD *)v644 = 0;
          *((_QWORD *)v644 + 1) = 0;
          *((_QWORD *)v644 + 2) = 0;
          *((_QWORD *)v644 + 3) = v644 + 8;
          v824[0] = 257;
          llvm::LoadInst::LoadInst((llvm::UnaryInstruction *)(v644 + 8), v239, (llvm::Value *)v236, (const llvm::Twine *)&v820, *((_QWORD *)v830 + v237 + 1) != 0, v793[0], v527, v627, 0);
          v779 = (llvm::Value *)v645;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v645);
          v23 = 9;
        }
        else
        {
          v820 = "Alignment missing from atomic load";
          v824[0] = 259;
LABEL_1065:
          v779 = 0;
          v23 = 1;
        }
        v18 = v761;
        goto LABEL_1069;
      case 42:
      case 45:
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v813 = 0;
        v793[0] = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_829;
        }
        v51 = (uint64_t *)v813;
        if (*(_BYTE *)(*(_QWORD *)v813 + 8) != 15)
          goto LABEL_829;
        if (v26 == 45)
        {
          {
            goto LABEL_829;
          }
          v52 = v809;
LABEL_701:
          if (v831[0] != v52 + 4)
            goto LABEL_829;
          v33 = v19;
          v495 = __p.n128_u64[0];
          if (*(_QWORD *)v5)
            goto LABEL_79;
          v496 = *((_QWORD *)v830 + v52 + 2);
          switch((int)v496)
          {
            case 0:
            case 3:
            case 5:
              goto LABEL_802;
            case 1:
              break;
            case 2:
              LOWORD(v496) = 2;
              break;
            case 4:
              LOWORD(v496) = 5;
              break;
            default:
              LOWORD(v496) = 7;
              break;
          }
          v624 = *((_QWORD *)v830 + v52 + 3);
          v753 = v18;
          if ((*((_QWORD *)v830 + v52 + 3) & 0xFFFFFFFELL) != 0)
          {
            if (*((_QWORD *)a2 + 226) <= v624)
              LOBYTE(v624) = 1;
            else
              LOBYTE(v624) = *(_BYTE *)(*((_QWORD *)a2 + 225) + v624);
          }
          v625 = *((_QWORD *)v830 + v52);
          if (!v625)
          {
LABEL_1018:
            v247 = "Invalid record";
LABEL_1019:
            v820 = v247;
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v18 = v753;
            v19 = v33;
            goto LABEL_833;
          }
          LOWORD(v796[0]) = 0;
          v729 = v5;
          if (!*(_QWORD *)v5)
          {
            if (BYTE1(v796[0]))
            {
              v631 = operator new(0x80uLL);
              v632 = (uint64_t)(v631 + 16);
              v631[21] = v631[21] & 0x38000000 | 2;
              *(_QWORD *)v631 = 0;
              *((_QWORD *)v631 + 1) = 0;
              *((_QWORD *)v631 + 2) = 0;
              *((_QWORD *)v631 + 3) = v631 + 16;
              *((_QWORD *)v631 + 4) = 0;
              *((_QWORD *)v631 + 5) = 0;
              *((_QWORD *)v631 + 6) = 0;
              *((_QWORD *)v631 + 7) = v631 + 16;
              llvm::StoreInst::StoreInst((uint64_t)(v631 + 16), v495, (uint64_t)v51, *((_QWORD *)v830 + v52 + 1) != 0, v796[0], v496, v624, 0);
              v779 = (llvm::Value *)v632;
              llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v632);
              v23 = 9;
              goto LABEL_1037;
            }
            v820 = "Alignment missing from atomic store";
            v824[0] = 259;
          }
          v779 = 0;
          v23 = 1;
LABEL_1037:
          v18 = v753;
          v19 = v33;
          v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1205:
          v5 = v729;
          goto LABEL_833;
        }
        v71 = v19;
        LODWORD(v792.__r_.__value_.__l.__data_) = v337;
        v339 = (int)v809;
        if (v831[0] == (_DWORD)v809)
        {
          __p.n128_u64[0] = 0;
        }
        else
        {
          if (*((_BYTE *)a2 + 1712))
            v494 = v778[0] - *((_QWORD *)v830 + v809);
          else
            v494 = *((_QWORD *)v830 + v809);
          if (__p.n128_u64[0])
          {
            v52 = v339 + 1;
            LODWORD(v809) = v339 + 1;
            v19 = v71;
            v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_701;
          }
        }
LABEL_705:
        v820 = "Invalid record";
        v824[0] = 259;
        v779 = 0;
        v23 = 1;
        v19 = v71;
        v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_833;
      case 46:
        v240 = v831[0];
        LODWORD(v809) = 0;
        __p.n128_u64[0] = 0;
        v793[0] = 0;
        {
          goto LABEL_829;
        }
        v241 = (uint64_t *)__p.n128_u64[0];
        if (*(_BYTE *)(*(_QWORD *)__p.n128_u64[0] + 8) != 15)
        {
          v183 = "Cmpxchg operand is not a pointer type";
          goto LABEL_830;
        }
        v813 = 0;
        LODWORD(v792.__r_.__value_.__l.__data_) = 0;
        {
          goto LABEL_829;
        }
        v33 = v19;
        v242 = (int)v809;
        if (v831[0] == (_DWORD)v809)
          goto LABEL_802;
        v243 = (llvm::Type **)v813;
        v244 = *((_BYTE *)a2 + 1712)
             ? v778[0] - *((_QWORD *)v830 + v809)
             : *((_QWORD *)v830 + v809);
        data = v792.__r_.__value_.__l.__data_;
        if (!v245)
          goto LABEL_802;
        v753 = v18;
        LODWORD(v809) = v242 + 1;
        if (v240 < v242 + 4 || v240 > v242 + 7)
          goto LABEL_1018;
        v246 = *((_QWORD *)v830 + (v242 + 2));
        switch((int)v246)
        {
          case 0:
          case 1:
            v247 = "Invalid cmpxchg success ordering";
            goto LABEL_1019;
          case 2:
            break;
          case 3:
            LOWORD(v246) = 4;
            break;
          case 4:
            LOWORD(v246) = 5;
            break;
          case 5:
            LOWORD(v246) = 6;
            break;
          default:
            LOWORD(v246) = 7;
            break;
        }
        v727 = *((_QWORD *)v830 + (v242 + 1));
        v729 = v5;
        v740 = v246;
        v749 = (uint64_t)v245;
        v763 = v6;
        v649 = *((_QWORD *)v830 + (v242 + 3));
        if ((v649 & 0xFFFFFFFE) != 0)
        {
          if (*((_QWORD *)a2 + 226) <= (unint64_t)v649)
            v650 = 1;
          else
            v650 = *(_BYTE *)(*((_QWORD *)a2 + 225) + v649);
        }
        else
        {
          v650 = v649;
        }
        if (*(_QWORD *)v5)
        {
          v779 = 0;
          v23 = 1;
          v19 = v33;
          v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1094:
          v6 = v763;
          goto LABEL_833;
        }
        v721 = *((_QWORD *)v830 + (v242 + 4));
        if (v721 > 5)
        {
          v671 = 7;
        }
        else
        {
          if (((1 << v721) & 0x33) != 0)
          {
            v820 = "Invalid cmpxchg failure ordering";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v779 = 0;
            v23 = 1;
            v19 = v33;
            goto LABEL_1094;
          }
          if ((_DWORD)v721 == 2)
            goto LABEL_1191;
          v671 = 4;
        }
        LOWORD(v721) = v671;
LABEL_1191:
        v719 = *((_QWORD *)v830 + (v242 + 5));
        LOWORD(v796[0]) = 0;
        if (v240 != v242 + 7)
          goto LABEL_1197;
        if (*(_QWORD *)v5)
        {
          v779 = 0;
          v23 = 1;
          goto LABEL_1203;
        }
        if (BYTE1(v796[0]))
        {
          v688 = v796[0];
        }
        else
        {
LABEL_1197:
          llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)a2 + 54) + 256, (uint64_t)*v243);
          v691 = v690;
          if ((_BYTE)v689)
          v688 = 63 - __clz((unint64_t)(v691 + 7) >> 3);
        }
        v692 = operator new(0xA0uLL);
        v693 = v692;
        v694 = 0;
        v695 = (uint64_t)(v692 + 24);
        v692[29] = v692[29] & 0x38000000 | 3;
        do
        {
          v696 = &v692[v694];
          *v696 = 0;
          v696[1] = 0;
          v696[2] = 0;
          v696[3] = v695;
          v694 += 8;
        }
        while (v694 != 24);
        llvm::AtomicCmpXchgInst::AtomicCmpXchgInst((uint64_t)(v692 + 24), (uint64_t)v241, (uint64_t ***)v243, v749, v688, v740, v721, v650, 0);
        *((_WORD *)v693 + 57) = (v727 != 0) | (unsigned __int16)(2 * (v719 != 0)) | *((_WORD *)v693 + 57) & 0xFFFC;
        v698 = *((_QWORD *)v693 + 12);
        v820 = (void *)__PAIR64__(v697, data);
        v779 = (llvm::Value *)v695;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v695);
        v23 = 9;
LABEL_1203:
        v18 = v753;
        v19 = v33;
LABEL_1204:
        v20 = (llvm::Function *)((char *)a2 + 8);
        v6 = v763;
        goto LABEL_1205;
      case 48:
        if ((unint64_t)v831[0] - 1 >= 2)
          goto LABEL_407;
        v248 = (llvm::Type *)(**((_QWORD **)a2 + 53) + 1776);
        if (!v831[0])
          goto LABEL_323;
        v250 = *((_BYTE *)a2 + 1712) ? v778[0] - *(_DWORD *)v830 : *(_DWORD *)v830;
        if (!v251)
          goto LABEL_323;
        if (v831[0] == 2)
        {
          v254 = *((unsigned int *)v830 + 2);
          v255 = *((_QWORD *)a2 + 186);
          if (v254 >= (*((_QWORD *)a2 + 187) - v255) >> 3 || (v256 = *(llvm::Value **)(v255 + 8 * v254)) == 0)
          {
LABEL_323:
            v70 = "Invalid record";
LABEL_324:
            v820 = v70;
            v824[0] = 259;
            goto LABEL_32;
          }
        }
        else
        {
          v256 = 0;
        }
        v147 = llvm::CleanupReturnInst::Create(v251, v256, v252, v253);
LABEL_731:
        v157 = (uint64_t)v147;
LABEL_752:
        v779 = (llvm::Value *)v157;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v157);
        goto LABEL_834;
      case 49:
        if (v831[0] != 2)
          goto LABEL_407;
        v257 = (llvm::Type *)(**((_QWORD **)a2 + 53) + 1776);
        if (!v831[0])
          goto LABEL_323;
        v259 = *((_BYTE *)a2 + 1712) ? v778[0] - *(_DWORD *)v830 : *(_DWORD *)v830;
        if (!v260)
          goto LABEL_323;
        v263 = *((unsigned int *)v830 + 2);
        v264 = *((_QWORD *)a2 + 186);
        if (v263 >= (*((_QWORD *)a2 + 187) - v264) >> 3)
          goto LABEL_323;
        v265 = *(llvm::Value **)(v264 + 8 * v263);
        if (!v265)
          goto LABEL_323;
        v147 = llvm::CatchReturnInst::Create(v260, v265, v261, v262);
        goto LABEL_731;
      case 50:
      case 51:
        if (v831[0] <= 1u)
          goto LABEL_407;
        v53 = (llvm::Type *)(**((_QWORD **)a2 + 53) + 1776);
        if (v831[0])
        {
          if (*((_BYTE *)a2 + 1712))
            v55 = v778[0] - *(_DWORD *)v830;
          else
            v55 = *(_DWORD *)v830;
        }
        else
        {
          v56 = 0;
        }
        v325 = 2;
        LODWORD(v809) = 2;
        v326 = *((_DWORD *)v830 + 2);
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x200000000;
        if (!v326)
          goto LABEL_425;
        do
        {
          v813 = 0;
          v793[0] = 0;
          {
            goto LABEL_428;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, (uint64_t)v813);
          --v326;
        }
        while (v326);
        v325 = (int)v809;
LABEL_425:
        if (v831[0] == v325)
        {
          v824[0] = 257;
          if (v26 == 51)
            v327 = llvm::CleanupPadInst::Create(v56, (uint64_t *)__p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v820);
          else
            v327 = llvm::CatchPadInst::Create(v56, (uint64_t *)__p.n128_u64[0], __p.n128_u32[2], (const llvm::Twine *)&v820);
          v450 = (uint64_t)v327;
          v779 = (llvm::Value *)v450;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, v450);
          v23 = 9;
          goto LABEL_937;
        }
LABEL_428:
        v820 = "Invalid record";
        v824[0] = 259;
        v779 = 0;
        v23 = 1;
        goto LABEL_937;
      case 52:
        if (v831[0] <= 1u)
          goto LABEL_407;
        v266 = (llvm::Type *)(**((_QWORD **)a2 + 53) + 1776);
        if (v831[0])
        {
          v268 = v19;
          if (*((_BYTE *)a2 + 1712))
            v269 = v778[0] - *(_DWORD *)v830;
          else
            v269 = *(_DWORD *)v830;
        }
        else
        {
          v268 = v19;
          v270 = 0;
        }
        v436 = *((_DWORD *)v830 + 2);
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x200000000;
        if (v436)
        {
          v437 = 0;
          while (1)
          {
            v438 = *((unsigned int *)v830 + 2 * (v437 + 2));
            v439 = *((_QWORD *)a2 + 186);
            if (v438 >= (*((_QWORD *)a2 + 187) - v439) >> 3)
              break;
            v440 = *(_QWORD *)(v439 + 8 * v438);
            if (!v440)
              break;
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, v440);
            if (v436 == ++v437)
            {
              v441 = v437 + 2;
              goto LABEL_616;
            }
          }
          v820 = "Invalid record";
          v824[0] = 259;
          v442 = v5;
LABEL_644:
          v779 = 0;
          v23 = 1;
          v19 = v268;
          goto LABEL_645;
        }
        v441 = 2;
LABEL_616:
        v446 = v441 + 1;
        if (v831[0] == v441 + 1)
        {
          v447 = *((unsigned int *)v830 + 2 * v441);
          v448 = *((_QWORD *)a2 + 186);
          if (v447 >= (*((_QWORD *)a2 + 187) - v448) >> 3 || (v449 = *(llvm::BasicBlock **)(v448 + 8 * v447)) == 0)
          {
LABEL_643:
            v820 = "Invalid record";
            v824[0] = 259;
            v442 = v5;
            v20 = (llvm::Function *)((char *)a2 + 8);
            goto LABEL_644;
          }
          v441 = v446;
        }
        else
        {
          v449 = 0;
        }
        if (v831[0] == v441)
        {
          v824[0] = 257;
          v463 = operator new(0x48uLL);
          v463[7] = v463[7] & 0x38000000 | 0x40000000;
          *(_QWORD *)v463 = 0;
          v464 = v270;
          v465 = (llvm::CatchSwitchInst *)(v463 + 2);
          llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v463 + 2), v464, v449, v436, (const llvm::Twine *)&v820, 0);
          if (__p.n128_u32[2])
          {
            v466 = (llvm::BasicBlock **)__p.n128_u64[0];
            v467 = 8 * __p.n128_u32[2];
            do
            {
              v468 = *v466++;
              llvm::CatchSwitchInst::addHandler(v465, v468);
              v467 -= 8;
            }
            while (v467);
          }
          v779 = v465;
          llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v465);
          v23 = 9;
          v19 = v268;
          v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_645:
          v435 = (uint64_t *)__p.n128_u64[0];
          v469 = __p.n128_u64[0] == (_QWORD)v818;
LABEL_882:
          if (!v469)
            goto LABEL_939;
          goto LABEL_833;
        }
        goto LABEL_643;
      case 55:
        if (!v831[0])
          goto LABEL_407;
        v271 = v830;
        v272 = *((_QWORD *)a2 + 222);
        if (*(_QWORD *)v830 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 223) - v272) >> 3))
          goto LABEL_407;
        __p = 0uLL;
        v818[0] = 0;
        LODWORD(v809) = 1;
        if (v831[0] == 1)
          goto LABEL_337;
        while (1)
        {
          v813 = 0;
          v793[0] = 0;
          {
            break;
          }
          std::vector<llvm::Value *>::push_back[abi:nn180100]((void **)&__p, &v813);
          if (v831[0] == (_DWORD)v809)
          {
            v271 = v830;
            v272 = *((_QWORD *)a2 + 222);
LABEL_337:
            std::vector<llvm::OperandBundleDefT<llvm::Value *>>::emplace_back<std::string &,std::vector<llvm::Value *>>(&v801, v272 + 24 * *v271, &__p);
            v23 = 4;
            goto LABEL_739;
          }
        }
        v820 = "Invalid record";
        v824[0] = 259;
        v23 = 1;
LABEL_739:
        if (__p.n128_u64[0])
        {
          __p.n128_u64[1] = __p.n128_u64[0];
          operator delete((void *)__p.n128_u64[0]);
        }
        goto LABEL_839;
      case 56:
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_829;
        }
        v273 = ((_DWORD)v813 + 1);
        if (v831[0] < v273)
          goto LABEL_829;
        v274 = (llvm::Value *)__p.n128_u64[0];
        DecodedUnaryOpcode = getDecodedUnaryOpcode(*((_QWORD *)v830 + v813), *(_QWORD *)__p.n128_u64[0]);
        if (DecodedUnaryOpcode == -1)
          goto LABEL_829;
        v824[0] = 257;
        v276 = llvm::UnaryOperator::Create(DecodedUnaryOpcode, v274, (const llvm::Twine *)&v820, 0);
        VirtualTypeID = v809;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v276);
        v779 = v276;
        if (v831[0] > v273 && llvm::FPMathOperator::classof((uint64_t)v276))
        {
          v277 = *((_QWORD *)v830 + v273) & 0x7E | (*((_QWORD *)v830 + v273) >> 7) & 1 | -(*((_QWORD *)v830 + v273) & 1);
          if (v277)
            *((_BYTE *)v276 + 17) |= 2 * (_BYTE)v277;
        }
        goto LABEL_285;
      case 57:
        v278 = (*(_DWORD *)v830 - 1);
        v279 = *((_QWORD *)a2 + 180);
        if (v278 >= (*((_QWORD *)a2 + 181) - v279) >> 3)
          v280 = 0;
        else
          v280 = *(_QWORD *)(v279 + 8 * v278);
        v316 = *((unsigned int *)v830 + 4);
        v317 = *((_QWORD *)a2 + 186);
        if (v316 >= (*((_QWORD *)a2 + 187) - v317) >> 3)
          v784 = 0;
        else
          v784 = *(llvm::BasicBlock **)(v317 + 8 * v316);
        v318 = *((_QWORD *)v830 + 1);
        v319 = *((_DWORD *)v830 + 6);
        v820 = &v822;
        v821 = (void *)0x1000000000;
        if (v319)
        {
          for (m = 0; m != v319; ++m)
          {
            v321 = *((unsigned int *)v830 + 2 * (m + 4));
            v322 = *((_QWORD *)a2 + 186);
            if (v321 >= (*((_QWORD *)a2 + 187) - v322) >> 3)
              v323 = 0;
            else
              v323 = *(_QWORD *)(v322 + 8 * v321);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v820, v323);
          }
          v324 = m + 4;
        }
        else
        {
          v324 = 4;
        }
        v797 = v324;
        v764 = v318;
        if ((v318 & 0x8000) != 0)
        {
          v797 = v324 + 1;
          v329 = *((_QWORD *)v830 + v324);
          if (!v330 || (v328 = v330, *(_BYTE *)(v330 + 8) != 14))
          {
            v332 = "Explicit call type is not a function type";
            goto LABEL_817;
          }
        }
        else
        {
          v328 = 0;
          LODWORD(v329) = -1;
        }
        *(_QWORD *)v796 = 0;
        v795 = 0;
        {
          v332 = "Invalid record";
LABEL_817:
          __p.n128_u64[0] = (unint64_t)v332;
          v819 = 259;
          v779 = 0;
          v23 = 1;
          goto LABEL_818;
        }
        v333 = *(_anonymous_namespace_::BitcodeReaderBase **)v796;
        if (**(_QWORD **)v796)
          v334 = *(_BYTE *)(**(_QWORD **)v796 + 8) == 15;
        else
          v334 = 0;
        if (!v334)
        {
          v332 = "Callee is not a pointer type";
          goto LABEL_817;
        }
        if (v328)
        {
          v451 = *(_QWORD *)(**(_QWORD **)v796 + 24);
          if (v451)
            v452 = v451 == v328;
          else
            v452 = 1;
          if (!v452)
          {
            v332 = "Explicit call type does not match pointee type of callee operand";
            goto LABEL_817;
          }
        }
        else
        {
          v730 = *(_anonymous_namespace_::BitcodeReaderBase **)v796;
          v333 = v730;
          if (!v528 || (v328 = v528, *(_BYTE *)(v528 + 8) != 14))
          {
            v332 = "Callee is not of pointer to function type";
            goto LABEL_817;
          }
        }
        v758 = v18;
        v529 = v831[0];
        v530 = (*(_DWORD *)(v328 + 12) - 1);
        v531 = v797;
        if (v831[0] < v530 + v797)
        {
          __p.n128_u64[0] = (unint64_t)"Insufficient operands to call";
          v819 = 259;
          v779 = 0;
          v23 = 1;
          v18 = v758;
          goto LABEL_818;
        }
        v731 = v333;
        v738 = v329;
        v724 = v280;
        v745 = v19;
        __p.n128_u64[0] = (unint64_t)v818;
        __p.n128_u64[1] = 0x1000000000;
        v813 = (llvm::Value *)v815;
        v814 = 0x1000000000;
        if ((_DWORD)v530)
        {
          v557 = 0;
          while (1)
          {
            v558 = v557 + 1;
            v559 = v531 + v557;
            v561 = *(llvm::Type **)(*(_QWORD *)(v328 + 16) + 8 * v557 + 8);
            if (*((_BYTE *)v561 + 8) == 8)
            {
              v562 = *((unsigned int *)v830 + 2 * (v531 + v557));
              v563 = *((_QWORD *)a2 + 186);
              if (v562 >= (*((_QWORD *)a2 + 187) - v563) >> 3)
                break;
              v564 = *(llvm::MCAsmLexer **)(v563 + 8 * v562);
            }
            else
            {
              if (v559 == v831[0])
                break;
              v565 = *((_BYTE *)a2 + 1712) ? v778[0] - *((_QWORD *)v830 + v559) : *((_QWORD *)v830 + v559);
            }
            if (!v564)
              break;
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, (uint64_t)v564);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v813, v560);
            ++v557;
            if (v530 == v558)
            {
              v529 = v831[0];
              v531 += v558;
              goto LABEL_866;
            }
          }
          v797 = v531 + v557;
          goto LABEL_981;
        }
LABEL_866:
        v797 = v531;
        if (*(_DWORD *)(v328 + 8) < 0x100u)
        {
          if (v529 != v531)
          {
LABEL_981:
            v809 = "Invalid record";
            v812 = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_982:
            v779 = 0;
            v23 = 1;
            v19 = v745;
            v18 = v758;
            goto LABEL_1182;
          }
        }
        else if (v529 != v531)
        {
          do
          {
            *(_QWORD *)v793 = 0;
            LODWORD(v792.__r_.__value_.__l.__data_) = 0;
            {
              goto LABEL_981;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__p, *(uint64_t *)v793);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v813, (int)v792.__r_.__value_.__l.__data_);
          }
          while (v831[0] != v797);
        }
        if (v801 != v802)
          llvm::UpgradeOperandBundles(&v801);
        if (*((_BYTE *)v731 + 16) == 24)
        {
          v609 = *((char *)v731 + 71);
          if (v609 >= 0)
            v610 = (char *)v731 + 48;
          else
            v610 = (char *)*((_QWORD *)v731 + 6);
          if (v609 >= 0)
            v611 = *((unsigned __int8 *)v731 + 71);
          else
            v611 = *((_QWORD *)v731 + 7);
          llvm::InlineAsm::ParseConstraints(v610, v611, (uint64_t *)v793);
          for (n = *(_DWORD **)v793; n != v794; n += 20)
          {
            if (*n == 3)
              goto LABEL_1175;
          }
          v635 = __p.n128_u32[2] - (_DWORD)v821;
          v636 = (uint64_t **)__p.n128_u64[0];
          if (__p.n128_u32[2] > __p.n128_u32[2] - v821)
          {
            v637 = 0;
            while (1)
            {
              v638 = *(_QWORD *)(__p.n128_u64[0] + 8 * v635 + 8 * v637);
              v639 = v638 && *(_BYTE *)(v638 + 16) == 4;
              if (!v639
                || v637 > v821
                || *(llvm::Function **)(v638 - 64) != v808
                || *(_QWORD *)(v638 - 32) != *((_QWORD *)v820 + v637))
              {
                break;
              }
              if (__p.n128_u32[2] - (unint64_t)v635 == ++v637)
                goto LABEL_1059;
            }
            v809 = "callbr argument does not match indirect dest";
            v812 = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v809 = v793;
            std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v809);
            goto LABEL_982;
          }
LABEL_1059:
          __p.n128_u32[2] -= v821;
          LODWORD(v814) = v635;
          v809 = v811;
          v810 = 0x600000000;
          if (v635)
          {
            v640 = 8 * v635;
            do
            {
              v641 = *v636++;
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v809, *v641);
              v640 -= 8;
            }
            while (v640);
            v642 = (uint64_t *)v809;
            v643 = v810;
          }
          else
          {
            v643 = 0;
            v642 = (uint64_t *)v811;
          }
          v328 = llvm::FunctionType::get(**(uint64_t ****)(v328 + 16), v642, v643, (unint64_t *)(*(_DWORD *)(v328 + 8) > 0xFFu));
          if (*((char *)v731 + 71) < 0)
            std::string::__init_copy_ctor_external(&v792, *((const std::string::value_type **)v731 + 6), *((_QWORD *)v731 + 7));
          else
            v792 = *(std::string *)((_BYTE *)v731 + 2);
          v674 = v794;
          if (*(_DWORD **)v793 != v794)
          {
            v675 = 0;
            v676 = 0;
            v677 = *(_QWORD *)v793 + 80;
            do
            {
              v678 = *(_DWORD *)(v677 - 80);
              if (!v678 || v678 == 1 && *(_BYTE *)(v677 - 67))
              {
                if (v676 >= v635)
                  std::string::insert(&v792, v675, "!");
                ++v676;
              }
              v679 = std::string::find(&v792, 44, v675);
              v675 = v679 + 1;
              if (v679 == -1)
                break;
              v286 = v677 == (_QWORD)v674;
              v677 += 80;
            }
            while (!v286);
          }
          v680 = *((char *)v731 + 47);
          if (v680 >= 0)
            v681 = (uint64_t)v731 + 24;
          else
            v681 = *((_QWORD *)v731 + 3);
          if (v680 >= 0)
            v682 = *((unsigned __int8 *)v731 + 47);
          else
            v682 = *((_QWORD *)v731 + 4);
          if ((v792.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v683 = &v792;
          else
            v683 = (std::string *)v792.__r_.__value_.__r.__words[0];
          if ((v792.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v792.__r_.__value_.__r.__words[2]);
          else
            size = v792.__r_.__value_.__l.__size_;
          v731 = (_anonymous_namespace_::BitcodeReaderBase *)llvm::InlineAsm::get((llvm::PointerType **)v328, v681, v682, (uint64_t)v683, size, *((_BYTE *)v731 + 80), *((_BYTE *)v731 + 81), *((_DWORD *)v731 + 21), *((_BYTE *)v731 + 88));
          *(_QWORD *)v796 = v731;
          if (SHIBYTE(v792.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v792.__r_.__value_.__l.__data_);
          if (v809 != v811)
            free(v809);
LABEL_1175:
          v809 = v793;
          std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v809);
        }
        v812 = 257;
        v779 = (llvm::Value *)llvm::CallBrInst::Create(v328, (uint64_t)v731, v784, (uint64_t)v820, (int)v821, (uint64_t *)__p.n128_u64[0], __p.n128_u32[2], v331, v801, 0xAAAAAAAAAAAAAAABLL * ((v802 - v801) >> 4), (const llvm::Twine *)&v809, 0);
        v685 = v801;
        for (ii = v802;
              ii != v685;
              std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100]((uint64_t)&v803, ii))
        {
          ii -= 48;
        }
        v802 = v685;
        llvm::SmallVectorTemplateBase<void *,true>::push_back(v775, (uint64_t)v779);
        *((_WORD *)v779 + 9) = *((_WORD *)v779 + 9) & 0xF003 | (2 * v764) & 0xFFC;
        *((_QWORD *)v779 + 8) = v724;
        if (*(_QWORD *)v5)
        {
          llvm::Value::deleteValue(v779);
          v23 = 1;
        }
        else
        {
          v23 = 9;
        }
        v19 = v745;
        v18 = v758;
        v20 = (llvm::Function *)((char *)a2 + 8);
LABEL_1182:
        if (v813 != (llvm::Value *)v815)
          free(v813);
        v648 = (void *)__p.n128_u64[0];
        if ((_QWORD *)__p.n128_u64[0] == v818)
          goto LABEL_818;
        goto LABEL_1185;
      case 58:
        LODWORD(v813) = 0;
        __p.n128_u64[0] = 0;
        LODWORD(v809) = 0;
        {
          goto LABEL_829;
        }
        if (v831[0] != (_DWORD)v813)
          goto LABEL_558;
        v281 = operator new(0x60uLL);
        v119 = (llvm::ExtractElementInst *)(v281 + 8);
        v281[13] = v281[13] & 0x38000000 | 1;
        *(_QWORD *)v281 = 0;
        *((_QWORD *)v281 + 1) = 0;
        *((_QWORD *)v281 + 2) = 0;
        *((_QWORD *)v281 + 3) = v281 + 8;
        v824[0] = 257;
        llvm::FreezeInst::FreezeInst((llvm::FreezeInst *)(v281 + 8), (llvm::Type **)__p.n128_u64[0], (const llvm::Twine *)&v820, 0);
        VirtualTypeID = v809;
        goto LABEL_350;
      case 60:
        if (!v831[0])
          goto LABEL_407;
        v282 = v19;
        v283 = (char *)v830;
        v284 = (char *)v830 + 8 * v831[0];
        do
        {
          v285 = *(_QWORD *)(*(_QWORD *)v776 + 32 * *(unsigned int *)v283 + 16);
          if (v285)
            v286 = *(_BYTE *)(v285 + 16) == 0;
          else
            v286 = 0;
          if (!v286)
          {
            v820 = "Invalid record";
            v824[0] = 259;
            v20 = (llvm::Function *)((char *)a2 + 8);
            v23 = 1;
            v19 = v282;
            goto LABEL_839;
          }
          v287 = (_QWORD *)*((_QWORD *)a2 + 212);
          v288 = *((_QWORD *)a2 + 213);
          if ((unint64_t)v287 >= v288)
          {
            v290 = *((_QWORD *)a2 + 211);
            v291 = ((uint64_t)v287 - v290) >> 3;
            if ((unint64_t)(v291 + 1) >> 61)
              abort();
            v292 = v288 - v290;
            v293 = v292 >> 2;
            if (v292 >> 2 <= (unint64_t)(v291 + 1))
              v293 = v291 + 1;
            if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF8)
              v294 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v294 = v293;
            if (v294)
              v294 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v294);
            else
              v21 = 0;
            v295 = (_QWORD *)(v294 + 8 * v291);
            *v295 = v285;
            v289 = v295 + 1;
            v296 = (char *)*((_QWORD *)a2 + 212);
            v297 = (char *)*((_QWORD *)a2 + 211);
            if (v296 != v297)
            {
              do
              {
                v298 = *((_QWORD *)v296 - 1);
                v296 -= 8;
                *--v295 = v298;
              }
              while (v296 != v297);
              v296 = (char *)*((_QWORD *)a2 + 211);
            }
            *((_QWORD *)a2 + 211) = v295;
            *((_QWORD *)a2 + 212) = v289;
            *((_QWORD *)a2 + 213) = v294 + 8 * v21;
            if (v296)
              operator delete(v296);
          }
          else
          {
            *v287 = v285;
            v289 = v287 + 1;
          }
          *((_QWORD *)a2 + 212) = v289;
          v283 += 8;
          v23 = 4;
        }
        while (v283 != v284);
        v19 = v282;
        v20 = (llvm::Function *)((char *)a2 + 8);
        goto LABEL_839;
      default:
        v156 = "Invalid value";
        goto LABEL_838;
    }
  }
}

char **llvm::instructions(char **this, Function *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  v2 = (char *)a2 + 72;
  v3 = (char *)*((_QWORD *)a2 + 10);
  if (v3 == (char *)a2 + 72)
  {
    v6 = 0;
LABEL_13:
    v3 = (char *)a2 + 72;
  }
  else
  {
    v4 = v3 - 24;
    if (!v3)
      v4 = 0;
    v5 = v4 + 40;
    v6 = (char *)*((_QWORD *)v4 + 6);
    if (v6 == v5)
    {
      v7 = (char *)*((_QWORD *)v3 + 1);
      v3 = (char *)a2 + 72;
      if (v7 != v2)
      {
        v3 = v7;
        while (1)
        {
          v8 = v3 - 24;
          if (!v3)
            v8 = 0;
          v9 = v8 + 40;
          v6 = (char *)*((_QWORD *)v8 + 6);
          if (v6 != v9)
            break;
          v3 = (char *)*((_QWORD *)v3 + 1);
          if (v3 == v2)
            goto LABEL_13;
        }
      }
    }
  }
  *this = v2;
  this[1] = v3;
  this[2] = v6;
  this[3] = v2;
  this[4] = v2;
  this[5] = 0;
  return this;
}

void `anonymous namespace'::BitcodeReader::rememberAndSkipFunctionBody(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  uint64_t v3;
  llvm::BitstreamCursor *v4;
  uint64_t v5;
  llvm::formatv_object_base *v6[4];
  __int16 v7;

  v3 = *(_QWORD *)(a2 + 1520);
  if (*(_QWORD *)(a2 + 1512) == v3)
  {
    v6[0] = (llvm::formatv_object_base *)"Insufficient function protos";
    v7 = 259;
  }
  else
  {
    v6[0] = *(llvm::formatv_object_base **)(v3 - 8);
    *(_QWORD *)(a2 + 1520) = v3 - 8;
    v4 = (llvm::BitstreamCursor *)(a2 + 32);
    v5 = 8 * *(_QWORD *)(a2 + 48) - *(unsigned int *)(a2 + 64);
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(a2 + 1568, (uint64_t *)v6)[1] = v5;
    llvm::BitstreamCursor::SkipBlock(v4, (uint64_t *)this);
    if (!*(_QWORD *)this)
      *(_QWORD *)this = 0;
  }
}

uint64_t `anonymous namespace'::BitcodeReader::getContainedTypeID(_anonymous_namespace_::BitcodeReader *this, int a2, unsigned int a3)
{
  BOOL v5;
  uint64_t v7;

  v7 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::LookupBucketFor<unsigned int>(*((_QWORD *)this + 68), *((_DWORD *)this + 140), a2, &v7))v5 = v7 == *((_QWORD *)this + 68) + 32 * *((unsigned int *)this + 140);
  else
    v5 = 1;
  if (v5 || *(_DWORD *)(v7 + 16) <= a3)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(*(_QWORD *)(v7 + 8) + 4 * a3);
}

uint64_t llvm::BitcodeReaderValueList::push_back(llvm::BitcodeReaderValueList *this, llvm::Value *a2, int a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v8 = *((_QWORD *)this + 2);
  result = (uint64_t)this + 16;
  v7 = v8;
  v9 = *(_QWORD *)(result - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *(_QWORD *)this) >> 5;
    if ((unint64_t)(v11 + 1) >> 59)
      abort();
    v12 = v7 - *(_QWORD *)this;
    v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v17[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[32 * v11];
    v17[0] = v15;
    v17[1] = v16;
    v17[3] = &v15[32 * v14];
    *(_QWORD *)v16 = 6;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v16);
    *((_DWORD *)v16 + 6) = a3;
    v17[2] = v16 + 32;
    std::vector<std::pair<llvm::WeakTrackingVH,unsigned int>>::__swap_out_circular_buffer((unint64_t **)this, v17);
    v10 = *((_QWORD *)this + 1);
    result = std::__split_buffer<std::pair<llvm::WeakTrackingVH,unsigned int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_QWORD *)v9 = 6;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
      result = llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v9);
    *(_DWORD *)(v9 + 24) = a3;
    v10 = v9 + 32;
  }
  *((_QWORD *)this + 1) = v10;
  return result;
}

void `anonymous namespace'::BitcodeReader::parseConstants(_anonymous_namespace_::BitcodeReader *this, uint64_t a2)
{
  llvm::BitstreamCursor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *String;
  char *v16;
  unsigned int v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  unint64_t *v25;
  void *v26;
  uint64_t v27;
  std::string::size_type v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Type *v31;
  int v32;
  __int16 v33;
  unsigned int v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  int64x2_t *v39;
  unsigned int *v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  std::string *p_s;
  std::string::size_type size;
  std::string *v50;
  std::string::size_type v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t FP;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  std::string::size_type v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  int DecodedBinaryOpcode;
  unsigned int v89;
  unint64_t v90;
  char v91;
  _DWORD *v92;
  int DecodedCastOpcode;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  char v100;
  _QWORD *v101;
  int DecodedUnaryOpcode;
  unint64_t v103;
  llvm::PointerType **v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  const char *v108;
  uint64_t v109;
  unsigned int v110;
  unint64_t TypeByID;
  int v112;
  char *v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  llvm::Value *v119;
  std::string::value_type v120;
  int v121;
  std::string::size_type v122;
  uint64_t v123;
  uint64_t v124;
  std::string::size_type v125;
  std::string::size_type v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  char v135;
  std::string *v136;
  std::string::size_type v137;
  std::string *v138;
  std::string::size_type v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::string::value_type v151;
  uint64_t v152;
  unsigned int v153;
  llvm::PointerType **PtrElementTypeByID;
  uint64_t v155;
  unsigned int VirtualTypeID;
  uint64_t v157;
  std::string v158;
  std::string __s;
  __int16 v160;
  void *v161;
  __int128 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  char v168;
  void *__src;
  uint64_t v170;
  _QWORD v171[66];

  v171[64] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::BitstreamCursor *)(a2 + 32);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 11, (uint64_t *)this);
  if (!*(_QWORD *)this)
  {
    __src = v171;
    v170 = 0x4000000000;
    v5 = **(_QWORD **)(a2 + 424) + 1992;
    v6 = (*(_QWORD *)(a2 + 720) - *(_QWORD *)(a2 + 712)) >> 5;
    v155 = a2 + 616;
    PtrElementTypeByID = 0;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(v4, 0, (uint64_t)&v167);
      if ((v168 & 1) != 0)
      {
        v7 = v167;
        v167 = 0;
        *(_QWORD *)this = v7;
      }
      else
      {
        if ((_DWORD)v167 == 2)
          goto LABEL_7;
        if ((_DWORD)v167 != 1)
        {
          if ((_DWORD)v167)
          {
            LODWORD(v170) = 0;
            v8 = **(_QWORD **)(a2 + 424);
            llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v167), (unsigned int *)&__src, 0, (uint64_t)&v165);
            if ((v166 & 1) != 0)
            {
              v14 = v165;
              v165 = 0;
              *(_QWORD *)this = v14;
LABEL_307:
              v12 = 1;
            }
            else
            {
              v10 = v165;
              switch((int)v165)
              {
                case 1:
                  if (!(_DWORD)v170
                    || (v18 = *(_QWORD *)__src,
                        v19 = *(_QWORD *)(a2 + 520),
                        *(_QWORD *)__src >= (unint64_t)((*(_QWORD *)(a2 + 528) - v19) >> 3))
                    || (v20 = *(_QWORD *)(v19 + 8 * v18)) == 0)
                  {
                    v11 = "Invalid settype record";
                    goto LABEL_306;
                  }
                  if (v20 == v8 + 1608)
                  {
                    v11 = "Invalid constant type";
                    goto LABEL_306;
                  }
                  v5 = *(_QWORD *)(v19 + 8 * v18);
                  v12 = 2;
                  VirtualTypeID = v18;
                  break;
                case 2:
                  v21 = *(unsigned __int8 *)(v5 + 8);
                  if (v21 <= 0xE && ((1 << v21) & 0x4180) != 0
                    || v21 == 21 && (getTargetTypeInfo((uint64_t *)v5), (v115 & 1) == 0))
                  {
                    v11 = "Invalid type for a constant null value";
                    goto LABEL_306;
                  }
                  v157 = v5;
                  llvm::Constant::getNullValue(v5);
                  goto LABEL_340;
                case 4:
                  if (*(_BYTE *)(v5 + 8) != 13 || !(_DWORD)v170)
                  {
                    v11 = "Invalid integer const record";
                    goto LABEL_306;
                  }
                  v22 = *(_QWORD *)__src;
                  if ((*(_QWORD *)__src & 1) != 0)
                  {
                    if (v22 == 1)
                      v23 = 0x8000000000000000;
                    else
                      v23 = -(uint64_t)(v22 >> 1);
                  }
                  else
                  {
                    v23 = v22 >> 1;
                  }
                  v157 = v5;
                  v73 = llvm::ConstantInt::get((llvm::ConstantInt *)v5, (llvm::Type *)v23, 0);
                  goto LABEL_340;
                case 5:
                  if (*(_DWORD *)(v5 + 8) != 13 || !(_DWORD)v170)
                  {
                    v11 = "Invalid wide integer const record";
                    goto LABEL_306;
                  }
                  v157 = v5;
                  llvm::readWideAPInt((unint64_t *)__src, v170, *(_DWORD *)(v5 + 8) >> 8, (llvm::APInt *)&v161);
                  String = (llvm::Value *)llvm::ConstantInt::get(*(llvm::IntegerType **)(a2 + 424), (llvm::APInt *)&v161, v24, v25);
                  if (v162 >= 0x41)
                  {
                    v26 = v161;
                    if (v161)
LABEL_301:
                      MEMORY[0x24BD1B380](v26, 0x1000C8000313F17);
                  }
                  goto LABEL_341;
                case 6:
                  if ((_DWORD)v170)
                  {
                    v157 = v5;
                    switch(*(_BYTE *)(v5 + 8))
                    {
                      case 0:
                        v27 = *(_QWORD *)(a2 + 424);
                        v28 = *(unsigned __int16 *)__src;
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 16;
                        __s.__r_.__value_.__r.__words[0] = v28;
                        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v162, (const llvm::APInt **)&__s);
                        goto LABEL_296;
                      case 1:
                        v27 = *(_QWORD *)(a2 + 424);
                        v125 = *(unsigned __int16 *)__src;
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 16;
                        __s.__r_.__value_.__r.__words[0] = v125;
                        llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v162, (const llvm::APInt **)&__s);
                        goto LABEL_296;
                      case 2:
                        v27 = *(_QWORD *)(a2 + 424);
                        v122 = *(unsigned int *)__src;
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 32;
                        __s.__r_.__value_.__r.__words[0] = v122;
                        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v162, (const llvm::APInt **)&__s);
                        goto LABEL_296;
                      case 3:
                        v27 = *(_QWORD *)(a2 + 424);
                        v126 = *(_QWORD *)__src;
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 64;
                        __s.__r_.__value_.__r.__words[0] = v126;
                        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v162, (const llvm::APInt **)&__s);
LABEL_296:
                        String = (llvm::Value *)llvm::ConstantFP::get(v27, (uint64_t)&v161);
                        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v162);
                        goto LABEL_341;
                      case 4:
                        __s.__r_.__value_.__r.__words[0] = *((unsigned __int16 *)__src + 4) | (*(_QWORD *)__src << 16);
                        __s.__r_.__value_.__l.__size_ = *((unsigned __int16 *)__src + 3);
                        v123 = *(_QWORD *)(a2 + 424);
                        LODWORD(v158.__r_.__value_.__r.__words[1]) = 80;
                        llvm::APInt::initFromArray((llvm::APInt *)&v158, &__s, 2u);
                        llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt((llvm::detail::IEEEFloat *)&v162, (const llvm::APInt **)&v158);
                        String = (llvm::Value *)llvm::ConstantFP::get(v123, (uint64_t)&v161);
                        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v162);
                        if (LODWORD(v158.__r_.__value_.__r.__words[1]) >= 0x41)
                        {
                          v26 = (void *)v158.__r_.__value_.__r.__words[0];
                          if (v158.__r_.__value_.__r.__words[0])
                            goto LABEL_301;
                        }
                        goto LABEL_341;
                      case 5:
                        v127 = *(_QWORD *)(a2 + 424);
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 128;
                        llvm::APInt::initFromArray((llvm::APInt *)&__s, __src, v170);
                        llvm::detail::IEEEFloat::initFromQuadrupleAPInt((llvm::detail::IEEEFloat *)&v162, (const llvm::APInt **)&__s);
                        goto LABEL_299;
                      case 6:
                        v127 = *(_QWORD *)(a2 + 424);
                        LODWORD(__s.__r_.__value_.__r.__words[1]) = 128;
                        llvm::APInt::initFromArray((llvm::APInt *)&__s, __src, v170);
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v162, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&__s);
LABEL_299:
                        String = (llvm::Value *)llvm::ConstantFP::get(v127, (uint64_t)&v161);
                        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v162);
                        if (LODWORD(__s.__r_.__value_.__r.__words[1]) >= 0x41)
                        {
                          v26 = (void *)__s.__r_.__value_.__r.__words[0];
                          if (__s.__r_.__value_.__r.__words[0])
                            goto LABEL_301;
                        }
                        goto LABEL_341;
                      default:
                        goto LABEL_205;
                    }
                  }
                  v11 = "Invalid float const record";
                  goto LABEL_306;
                case 7:
                  if (!(_DWORD)v170)
                  {
                    v11 = "Invalid aggregate record";
                    goto LABEL_306;
                  }
                  v29 = 0;
                  v161 = (char *)&v162 + 8;
                  *(_QWORD *)&v162 = 0x1000000000;
                  v30 = 8 * v170;
                  do
                  {
                    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v161, *(_DWORD *)((char *)__src + v29));
                    v29 += 8;
                  }
                  while (v30 != v29);
                  v32 = *(_DWORD *)(v5 + 8);
                  v157 = v5;
                  if (v32 == 16)
                  {
                    v33 = 255;
                    goto LABEL_257;
                  }
                  if (v32 == 17)
                  {
                    v33 = 254;
LABEL_257:
                    LOWORD(__s.__r_.__value_.__l.__data_) = v33;
                    HIDWORD(__s.__r_.__value_.__r.__words[0]) = 0;
                    __s.__r_.__value_.__l.__size_ = 0;
                    goto LABEL_258;
                  }
                  if ((v32 & 0xFE) == 0x12)
                  {
                    v33 = 253;
                    goto LABEL_257;
                  }
                  v116 = (unint64_t)llvm::UndefValue::get((llvm::UndefValue *)v5, v31);
LABEL_258:
                  String = (llvm::Value *)v116;
                  v16 = (char *)v161;
                  v117 = (char *)&v162 + 8;
LABEL_288:
                  if (v16 != v117)
LABEL_289:
                    free(v16);
LABEL_341:
                  llvm::BitcodeReaderValueList::assignValue((llvm::BitcodeReaderValueList *)(a2 + 712), String, v6, VirtualTypeID, (uint64_t *)this);
                  v12 = *(_QWORD *)this != 0;
                  if (!*(_QWORD *)this)
                    LODWORD(v6) = v6 + 1;
LABEL_343:
                  v5 = v157;
                  break;
                case 8:
                case 9:
                  if (!(_DWORD)v170)
                  {
                    v11 = "Invalid string record";
                    goto LABEL_306;
                  }
                  v157 = v5;
                  v161 = &v163;
                  v162 = xmmword_24AA2D860;
                  llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v161, (char *)__src, (char *)__src + 8 * v170);
                  String = (llvm::Value *)llvm::ConstantDataArray::getString(*(_QWORD *)(a2 + 424), (char *)v161, (llvm::Type *)v162, v10 == 9);
                  v16 = (char *)v161;
                  if (v161 != &v163)
                    goto LABEL_289;
                  goto LABEL_341;
                case 10:
                  v34 = v170;
                  if (v170 <= 2)
                  {
                    v11 = "Invalid binary op constexpr record";
                    goto LABEL_306;
                  }
                  v87 = (char *)__src;
                  DecodedBinaryOpcode = getDecodedBinaryOpcode(*(_DWORD *)__src, v5);
                  v157 = v5;
                  if (DecodedBinaryOpcode < 0)
                    goto LABEL_205;
                  if (v34 < 4)
                    goto LABEL_199;
                  HIDWORD(v90) = DecodedBinaryOpcode - 13;
                  LODWORD(v90) = DecodedBinaryOpcode - 13;
                  v89 = v90 >> 1;
                  if (v89 < 7 && ((0x47u >> v89) & 1) != 0)
                  {
                    v129 = 3;
                  }
                  else
                  {
                    if ((DecodedBinaryOpcode - 19) >= 9
                      || ((0x183u >> (DecodedBinaryOpcode - 19)) & 1) == 0)
                    {
LABEL_199:
                      v91 = 0;
                      goto LABEL_337;
                    }
                    v129 = 1;
                  }
                  v91 = v129 & v87[24];
LABEL_337:
                  LOBYTE(v161) = DecodedBinaryOpcode;
                  BYTE1(v161) = v91;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)(v87 + 8));
                  v95 = a2 + 616;
                  goto LABEL_338;
                case 11:
                  if (v170 <= 2)
                    goto LABEL_59;
                  v92 = __src;
                  DecodedCastOpcode = getDecodedCastOpcode(*(_DWORD *)__src);
                  if (DecodedCastOpcode < 0)
                    goto LABEL_204;
                  v94 = DecodedCastOpcode;
                  {
LABEL_59:
                    v11 = "Invalid cast constexpr record";
                    goto LABEL_306;
                  }
                  LOWORD(v161) = v94;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  v56 = *((_QWORD *)__src + 2);
                  goto LABEL_203;
                case 12:
                case 20:
                case 24:
                  if (v170 <= 1)
                  {
                    v11 = "Constant GEP record must have at least two elements";
                    goto LABEL_306;
                  }
                  v157 = v5;
                  if ((_DWORD)v165 != 24 && (v170 & 1) == 0)
                  {
                    v17 = 0;
                    String = 0;
LABEL_186:
                    LOBYTE(v84) = v10 == 20;
                    LODWORD(v85) = -1;
                    v86 = __src;
                    goto LABEL_235;
                  }
                  if (v10 != 24)
                  {
                    v17 = 1;
                    goto LABEL_186;
                  }
                  v86 = __src;
                  v84 = *((_QWORD *)__src + 1) & 1;
                  v85 = *((_QWORD *)__src + 1) >> 1;
                  v17 = 2;
LABEL_235:
                  v161 = (char *)&v162 + 8;
                  *(_QWORD *)&v162 = 0x1000000000;
                  if ((_DWORD)v170 == v17)
                  {
LABEL_236:
                    v108 = "Invalid gep with no operands";
                    goto LABEL_275;
                  }
                  v145 = v85;
                  v151 = v84;
                  v109 = v86[v17];
                  do
                  {
                    {
                      v108 = "Invalid getelementptr constexpr record";
                      goto LABEL_275;
                    }
                    v110 = v17 + 1;
                    v17 += 2;
                    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v161, *((_QWORD *)__src + v110));
                  }
                  while (v17 != (_DWORD)v170);
                  if (!(_DWORD)v162)
                    goto LABEL_236;
                  if ((*(_DWORD *)(TypeByID + 8) & 0xFE) == 0x12)
                  {
                    if (!TypeByID)
                      goto LABEL_274;
                    v112 = *(unsigned __int8 *)(TypeByID + 8);
                  }
                  else
                  {
                    v112 = *(_DWORD *)(TypeByID + 8);
                  }
                  if (v112 != 15)
                  {
LABEL_274:
                    v108 = "GEP base operand must be pointer or vector of pointer";
LABEL_275:
                    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
                    v160 = 259;
                    String = 0;
LABEL_276:
                    v12 = 1;
                    goto LABEL_277;
                  }
                  if (String)
                  {
                    v119 = *(llvm::Value **)(TypeByID + 24);
                    if (v119)
                    {
                      v120 = v151;
                      v121 = v145;
                      if (v119 != String)
                      {
                        v108 = "Explicit gep operator type does not match pointee type of pointer operand";
                        goto LABEL_275;
                      }
                    }
                    else
                    {
                      v120 = v151;
                      v121 = v145;
                    }
                  }
                  else
                  {
                    v120 = v151;
                    v121 = v145;
                    if (!String)
                    {
                      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)"Missing element type for old-style constant GEP";
                      v160 = 259;
                      goto LABEL_276;
                    }
                  }
                  __s.__r_.__value_.__s.__data_[0] = 34;
                  __s.__r_.__value_.__s.__data_[1] = v120;
                  HIDWORD(__s.__r_.__value_.__r.__words[0]) = v121;
                  __s.__r_.__value_.__l.__size_ = (std::string::size_type)String;
                  v12 = 5;
LABEL_277:
                  if (v161 != (char *)&v162 + 8)
                    free(v161);
LABEL_279:
                  if (v12 != 5)
                    goto LABEL_343;
                  goto LABEL_341;
                case 13:
                  if (v170 <= 2)
                  {
                    v11 = "Invalid select constexpr record";
                    goto LABEL_306;
                  }
                  v42 = 57;
LABEL_207:
                  LOWORD(v161) = v42;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)__src);
                  v55 = *((_QWORD *)__src + 2);
                  goto LABEL_208;
                case 14:
                  if (v170 <= 2)
                    goto LABEL_181;
                  if (!v35 || (*(_DWORD *)(v35 + 8) & 0xFE) != 0x12)
                    goto LABEL_181;
                  v36 = __src;
                  v37 = (unsigned int *)((char *)__src + 16);
                  if ((_DWORD)v170 != 4)
                    goto LABEL_68;
                  {
LABEL_181:
                    v11 = "Invalid extractelement constexpr record";
                    goto LABEL_306;
                  }
                  v36 = __src;
                  v37 = (unsigned int *)((char *)__src + 24);
LABEL_68:
                  v38 = *(_QWORD *)v37;
                  LOWORD(v161) = 61;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  LODWORD(__s.__r_.__value_.__l.__data_) = v36[1];
                  HIDWORD(__s.__r_.__value_.__r.__words[0]) = v38;
                  goto LABEL_304;
                case 15:
                  if (v170 < 3 || (*(_DWORD *)(v5 + 8) & 0xFE) != 0x12 || !v5)
                    goto LABEL_191;
                  v39 = (int64x2_t *)__src;
                  v40 = (unsigned int *)((char *)__src + 16);
                  if ((_DWORD)v170 != 4)
                    goto LABEL_75;
                  {
LABEL_191:
                    v11 = "Invalid insertelement constexpr record";
                    goto LABEL_306;
                  }
                  v39 = (int64x2_t *)__src;
                  v40 = (unsigned int *)((char *)__src + 24);
LABEL_75:
                  v41 = *(_QWORD *)v40;
                  LOWORD(v161) = 62;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*v39);
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = v41;
                  goto LABEL_209;
                case 16:
                  if (v170 < 3 || (*(_DWORD *)(v5 + 8) & 0xFE) != 0x12 || !v5)
                    goto LABEL_110;
                  v42 = 63;
                  goto LABEL_207;
                case 17:
                  if (v170 <= 3)
                  {
                    v11 = "Invalid cmp constexpt record";
                    goto LABEL_306;
                  }
                  if (!v98)
                  {
                    v11 = "Invalid cmp constexpr record";
                    goto LABEL_306;
                  }
                  v99 = *(_DWORD *)(v98 + 8);
                  if ((v99 & 0xFE) == 0x12)
                    v99 = *(_DWORD *)(**(_QWORD **)(v98 + 16) + 8);
                  if (v99 < 6u && ((0x2Fu >> v99) & 1) != 0)
                  {
                    v100 = 54;
                  }
                  else if ((v99 & 0xFD) == 4)
                  {
                    v100 = 54;
                  }
                  else
                  {
                    v100 = 53;
                  }
                  v128 = *((_QWORD *)__src + 3);
                  LOBYTE(v161) = v100;
                  BYTE1(v161) = v128;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)((char *)__src + 8));
LABEL_304:
                  v95 = a2 + 616;
                  v157 = v5;
LABEL_338:
                  v96 = v5;
                  v97 = 2;
                  goto LABEL_339;
                case 18:
                  if (v170 <= 1)
                    goto LABEL_180;
                  memset(&__s, 0, sizeof(__s));
                  memset(&v158, 0, sizeof(v158));
                  v43 = *((_QWORD *)__src + 1);
                  v44 = (v43 + 2);
                  v157 = v5;
                  if (v44 >= v170
                    || v170 < v43 + *((_QWORD *)__src + v44) + 3)
                  {
                    goto LABEL_225;
                  }
                  v142 = *(_QWORD *)__src;
                  v148 = *((_QWORD *)__src + v44);
                  if ((_DWORD)v43)
                  {
                    v45 = 0;
                    do
                      std::string::push_back(&__s, *((_QWORD *)__src + (v45++ + 2)));
                    while (v43 != v45);
                  }
                  if ((_DWORD)v148)
                  {
                    v46 = v148;
                    v47 = v43 + 3;
                    do
                    {
                      std::string::push_back(&v158, *((_QWORD *)__src + v47++));
                      --v46;
                    }
                    while (v46);
                  }
                  llvm::UpgradeInlineAsmString(&__s);
                  if (!PtrElementTypeByID)
                    goto LABEL_265;
                  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_s = &__s;
                  else
                    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
                  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
                  else
                    size = __s.__r_.__value_.__l.__size_;
                  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v50 = &v158;
                  else
                    v50 = (std::string *)v158.__r_.__value_.__r.__words[0];
                  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v51 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
                  else
                    v51 = v158.__r_.__value_.__l.__size_;
                  v52 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)p_s, size, (uint64_t)v50, v51, v142 & 1, v142 > 1, 0, 0);
                  goto LABEL_328;
                case 19:
                  v53 = *(_DWORD *)(v5 + 8);
                  if (!v54 || v170 < 4 || (v53 & 0xFE) != 0x12 || (*(_DWORD *)(v54 + 8) & 0xFE) != 0x12)
                  {
LABEL_110:
                    v11 = "Invalid shufflevector constexpr record";
                    goto LABEL_306;
                  }
                  LOWORD(v161) = 63;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  __s.__r_.__value_.__l.__data_ = (std::string::pointer)vmovn_s64(*(int64x2_t *)((char *)__src + 8));
                  v55 = *((_QWORD *)__src + 3);
LABEL_208:
                  LODWORD(__s.__r_.__value_.__r.__words[1]) = v55;
LABEL_209:
                  v95 = a2 + 616;
                  v157 = v5;
                  v96 = v5;
                  v97 = 3;
                  goto LABEL_339;
                case 21:
                  if (v170 > 2
                  {
                    LOWORD(v161) = 250;
                    *(_QWORD *)&v162 = 0;
                    v56 = *((_QWORD *)__src + 1);
                    HIDWORD(v161) = *((_QWORD *)__src + 2);
                    goto LABEL_203;
                  }
                  v11 = "Invalid blockaddress record";
                  goto LABEL_306;
                case 22:
                  if (!(_DWORD)v170)
                  {
                    v11 = "Invalid data record";
                    goto LABEL_306;
                  }
                  v57 = v5;
                  v58 = *(_QWORD *)(v5 + 24);
                  v59 = *(_DWORD *)(v58 + 8);
                  v60 = v59 >> 8;
                  v61 = v59 == 13 && v60 == 8;
                  v157 = v57;
                  if (v61)
                  {
                    v161 = &v163;
                    v162 = xmmword_24AA2D860;
                    llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v161, (char *)__src, (char *)__src + 8 * v170);
                    v114 = *(_QWORD *)(a2 + 424);
                    if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                      FP = llvm::ConstantDataVector::get(v114, (llvm::Type *)v161, (llvm::Type *)v162);
                    else
                      FP = llvm::ConstantDataArray::get<unsigned char>(v114, (llvm::Type *)v161, (llvm::Type *)v162);
                    goto LABEL_287;
                  }
                  if (v59 == 13 && v60 == 16)
                  {
                    v161 = &v163;
                    v162 = xmmword_24AA2D860;
                    llvm::SmallVectorImpl<unsigned short>::append<unsigned long long *,void>(&v161, (char *)__src, (char *)__src + 8 * v170);
                    v62 = *(_QWORD *)(a2 + 424);
                    if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                      FP = llvm::ConstantDataVector::get(v62, (llvm::Type *)v161, (llvm::Type *)v162);
                    else
                      FP = llvm::ConstantDataArray::get<unsigned short>(v62, (llvm::Type *)v161, (llvm::Type *)v162);
LABEL_287:
                    String = (llvm::Value *)FP;
                    v16 = (char *)v161;
                    v117 = (char *)&v163;
                    goto LABEL_288;
                  }
                  if (v59 == 13 && v60 == 32)
                  {
                    v161 = (char *)&v162 + 8;
                    *(_QWORD *)&v162 = 0x1000000000;
                    llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v161, (char *)__src, (char *)__src + 8 * v170);
                    v118 = *(_QWORD *)(a2 + 424);
                    if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                      v116 = llvm::ConstantDataVector::get(v118, (llvm::Type *)v161, (llvm::Type *)v162);
                    else
                      v116 = llvm::ConstantDataArray::get<unsigned int>(v118, (llvm::Type *)v161, (llvm::Type *)v162);
                  }
                  else
                  {
                    if (v59 != 13 || v60 != 64)
                    {
                      switch((char)v59)
                      {
                        case 0:
                        case 1:
                          v161 = &v163;
                          v162 = xmmword_24AA2D860;
                          llvm::SmallVectorImpl<unsigned short>::append<unsigned long long *,void>(&v161, (char *)__src, (char *)__src + 8 * v170);
                          if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                            FP = llvm::ConstantDataVector::getFP((uint64_t **)v58, (llvm::Type *)v161, (llvm::Type *)v162);
                          else
                            FP = llvm::ConstantDataArray::getFP((uint64_t **)v58, (llvm::Type *)v161, (llvm::Type *)v162);
                          goto LABEL_287;
                        case 2:
                          v161 = (char *)&v162 + 8;
                          *(_QWORD *)&v162 = 0x1000000000;
                          llvm::SmallVectorImpl<unsigned int>::append<unsigned long long *,void>((unsigned int *)&v161, (char *)__src, (char *)__src + 8 * v170);
                          if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                            v116 = llvm::ConstantDataVector::getFP((uint64_t **)v58, (llvm::Type *)v161, (llvm::Type *)v162);
                          else
                            v116 = llvm::ConstantDataArray::getFP((uint64_t **)v58, (llvm::Type *)v161, (llvm::Type *)v162);
                          goto LABEL_258;
                        case 3:
                          v161 = (char *)&v162 + 8;
                          *(_QWORD *)&v162 = 0x1000000000;
                          llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v161, __src, (_BYTE *)__src + 8 * v170);
                          if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                            v116 = llvm::ConstantDataVector::getFP((uint64_t **)v58, (llvm::Type *)v161, (llvm::Type *)v162);
                          else
                            v116 = llvm::ConstantDataArray::getFP((uint64_t **)v58, (llvm::Type *)v161, (llvm::Type *)v162);
                          goto LABEL_258;
                        default:
                          v113 = "Invalid type for value";
                          goto LABEL_246;
                      }
                    }
                    v161 = (char *)&v162 + 8;
                    *(_QWORD *)&v162 = 0x1000000000;
                    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v161, __src, (_BYTE *)__src + 8 * v170);
                    v124 = *(_QWORD *)(a2 + 424);
                    if ((*(_DWORD *)(v57 + 8) & 0xFE) == 0x12)
                      v116 = llvm::ConstantDataVector::get(v124, (llvm::Type *)v161, (llvm::Type *)v162);
                    else
                      v116 = llvm::ConstantDataArray::get<unsigned long long>(v124, (llvm::Type *)v161, (llvm::Type *)v162);
                  }
                  goto LABEL_258;
                case 23:
                  if (v170 <= 1)
                    goto LABEL_180;
                  memset(&__s, 0, sizeof(__s));
                  memset(&v158, 0, sizeof(v158));
                  v64 = *((_QWORD *)__src + 1);
                  v65 = (v64 + 2);
                  v157 = v5;
                  if (v65 >= v170
                    || v170 < v64 + *((_QWORD *)__src + v65) + 3)
                  {
                    goto LABEL_225;
                  }
                  v143 = *(_QWORD *)__src;
                  v149 = *((_QWORD *)__src + v65);
                  if ((_DWORD)v64)
                  {
                    v66 = 0;
                    do
                      std::string::push_back(&__s, *((_QWORD *)__src + (v66++ + 2)));
                    while (v64 != v66);
                  }
                  if ((_DWORD)v149)
                  {
                    v67 = v149;
                    v68 = v64 + 3;
                    do
                    {
                      std::string::push_back(&v158, *((_QWORD *)__src + v68++));
                      --v67;
                    }
                    while (v67);
                  }
                  llvm::UpgradeInlineAsmString(&__s);
                  if (!PtrElementTypeByID)
                    goto LABEL_265;
                  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v69 = &__s;
                  else
                    v69 = (std::string *)__s.__r_.__value_.__r.__words[0];
                  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v70 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
                  else
                    v70 = __s.__r_.__value_.__l.__size_;
                  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v71 = &v158;
                  else
                    v71 = (std::string *)v158.__r_.__value_.__r.__words[0];
                  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v72 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
                  else
                    v72 = v158.__r_.__value_.__l.__size_;
                  v52 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)v69, v70, (uint64_t)v71, v72, v143 & 1, (v143 & 2) != 0, v143 >> 2, 0);
                  goto LABEL_328;
                case 25:
                  if (v170 <= 1)
                  {
                    v11 = "Invalid unary op constexpr record";
                    goto LABEL_306;
                  }
                  v101 = __src;
                  DecodedUnaryOpcode = getDecodedUnaryOpcode(*(_DWORD *)__src, v5);
                  v157 = v5;
                  if (DecodedUnaryOpcode < 0)
                  {
LABEL_205:
                    v73 = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)v5, v9);
                    goto LABEL_340;
                  }
                  LOWORD(v161) = DecodedUnaryOpcode;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  LODWORD(__s.__r_.__value_.__l.__data_) = v101[1];
                  v95 = a2 + 616;
                  goto LABEL_220;
                case 26:
                  v157 = v5;
                  v73 = llvm::PoisonValue::get((llvm::PoisonValue *)v5, v9);
                  goto LABEL_340;
                case 27:
                  if (v170 > 1
                  {
                    v74 = 251;
                    goto LABEL_178;
                  }
                  v11 = "Invalid dso_local record";
                  goto LABEL_306;
                case 28:
                  if (v170 <= 1)
                    goto LABEL_180;
                  memset(&__s, 0, sizeof(__s));
                  memset(&v158, 0, sizeof(v158));
                  v75 = *((_QWORD *)__src + 1);
                  v76 = (v75 + 2);
                  v157 = v5;
                  if (v76 >= v170
                    || v170 < v75 + *((_QWORD *)__src + v76) + 3)
                  {
                    goto LABEL_225;
                  }
                  v144 = *(_QWORD *)__src;
                  v150 = *((_QWORD *)__src + v76);
                  if ((_DWORD)v75)
                  {
                    v77 = 0;
                    do
                      std::string::push_back(&__s, *((_QWORD *)__src + (v77++ + 2)));
                    while (v75 != v77);
                  }
                  if ((_DWORD)v150)
                  {
                    v78 = v150;
                    v79 = v75 + 3;
                    do
                    {
                      std::string::push_back(&v158, *((_QWORD *)__src + v79++));
                      --v78;
                    }
                    while (v78);
                  }
                  llvm::UpgradeInlineAsmString(&__s);
                  if (!PtrElementTypeByID)
                  {
LABEL_265:
                    v107 = "Missing element type for old-style inlineasm";
                    goto LABEL_226;
                  }
                  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v80 = &__s;
                  else
                    v80 = (std::string *)__s.__r_.__value_.__r.__words[0];
                  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v81 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
                  else
                    v81 = __s.__r_.__value_.__l.__size_;
                  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v82 = &v158;
                  else
                    v82 = (std::string *)v158.__r_.__value_.__r.__words[0];
                  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v83 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
                  else
                    v83 = v158.__r_.__value_.__l.__size_;
                  v52 = llvm::InlineAsm::get(PtrElementTypeByID, (uint64_t)v80, v81, (uint64_t)v82, v83, v144 & 1, (v144 & 2) != 0, (v144 >> 2) & 1, (v144 & 8) != 0);
                  goto LABEL_328;
                case 29:
                  if (v170 <= 1
                  {
                    v11 = "Invalid no_cfi record";
                    goto LABEL_306;
                  }
                  v74 = 252;
LABEL_178:
                  LOWORD(v161) = v74;
                  HIDWORD(v161) = 0;
                  *(_QWORD *)&v162 = 0;
                  v56 = *((_QWORD *)__src + 1);
LABEL_203:
                  LODWORD(__s.__r_.__value_.__l.__data_) = v56;
                  v95 = a2 + 616;
                  v157 = v5;
LABEL_220:
                  v96 = v5;
                  v97 = 1;
LABEL_339:
LABEL_340:
                  String = (llvm::Value *)v73;
                  goto LABEL_341;
                case 30:
                  if (v170 <= 2)
                  {
LABEL_180:
                    v11 = "Invalid inlineasm record";
LABEL_306:
                    v161 = v11;
                    v164 = 259;
                    goto LABEL_307;
                  }
                  v157 = v5;
                  if (!v103 || (v104 = (llvm::PointerType **)v103, *(_BYTE *)(v103 + 8) != 14))
                  {
                    v113 = "Invalid inlineasm record";
LABEL_246:
                    v161 = v113;
                    v164 = 259;
                    v12 = 1;
                    goto LABEL_343;
                  }
                  memset(&__s, 0, sizeof(__s));
                  memset(&v158, 0, sizeof(v158));
                  v105 = *((_QWORD *)__src + 2);
                  v106 = (v105 + 3);
                  if (v106 < v170
                    && v170 >= v105 + *((_QWORD *)__src + v106) + 4)
                  {
                    v141 = *((_QWORD *)__src + v106);
                    v146 = *((_QWORD *)__src + 1);
                    v152 = *((_QWORD *)__src + 2);
                    if ((_DWORD)v105)
                    {
                      v130 = 0;
                      v131 = *((_QWORD *)__src + 2);
                      do
                        std::string::push_back(&__s, *((_QWORD *)__src + (v130++ + 3)));
                      while (v131 != v130);
                    }
                    if ((_DWORD)v141)
                    {
                      v132 = v141;
                      v133 = v152 + 4;
                      do
                      {
                        std::string::push_back(&v158, *((_QWORD *)__src + v133++));
                        --v132;
                      }
                      while (v132);
                    }
                    v153 = (v146 >> 2) & 1;
                    v134 = (v146 >> 3) & 1;
                    v135 = v146 & 1;
                    v147 = (v146 >> 1) & 1;
                    llvm::UpgradeInlineAsmString(&__s);
                    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v136 = &__s;
                    else
                      v136 = (std::string *)__s.__r_.__value_.__r.__words[0];
                    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v137 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
                    else
                      v137 = __s.__r_.__value_.__l.__size_;
                    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v138 = &v158;
                    else
                      v138 = (std::string *)v158.__r_.__value_.__r.__words[0];
                    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v139 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
                    else
                      v139 = v158.__r_.__value_.__l.__size_;
                    v52 = llvm::InlineAsm::get(v104, (uint64_t)v136, v137, (uint64_t)v138, v139, v135, v147, v153, v134);
LABEL_328:
                    String = (llvm::Value *)v52;
                    v12 = 5;
                  }
                  else
                  {
LABEL_225:
                    v107 = "Invalid inlineasm record";
LABEL_226:
                    v161 = v107;
                    v164 = 259;
                    String = 0;
                    v12 = 1;
                  }
                  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v158.__r_.__value_.__l.__data_);
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__s.__r_.__value_.__l.__data_);
                  goto LABEL_279;
                default:
LABEL_204:
                  v157 = v5;
                  goto LABEL_205;
              }
            }
            if ((v166 & 1) != 0)
            {
              v140 = v165;
              v165 = 0;
              if (v140)
                (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
            }
            goto LABEL_18;
          }
LABEL_7:
          v161 = "Malformed block";
LABEL_16:
          v164 = 259;
          goto LABEL_17;
        }
        if ((_DWORD)v6 != ((*(_QWORD *)(a2 + 720) - *(_QWORD *)(a2 + 712)) >> 5))
        {
          v161 = "Invalid constant reference";
          goto LABEL_16;
        }
        *(_QWORD *)this = 0;
      }
LABEL_17:
      v12 = 1;
LABEL_18:
      if ((v168 & 1) != 0)
      {
        v13 = v167;
        v167 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      if ((v12 | 2) != 2)
      {
        if (__src != v171)
          free(__src);
        return;
      }
    }
  }
}

void `anonymous namespace'::BitcodeReader::parseValueSymbolTable(_anonymous_namespace_::BitcodeReader *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  std::string::size_type v12;
  int v13;
  std::string::size_type v14;
  uint64_t v15;
  unint64_t v16;
  llvm::formatv_object_base *v17;
  llvm::formatv_object_base *v18;
  int v19;
  void *v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  unint64_t v28;
  llvm::formatv_object_base *v29;
  llvm::formatv_object_base *v30;
  uint64_t v31;
  void *v32;
  llvm::formatv_object_base *v33;
  uint64_t v34;
  char v35;
  llvm::formatv_object_base *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  void *v41;
  __int128 v42;
  uint64_t v43;
  __int16 v44;
  std::string __p[2];
  void *v46;
  uint64_t v47;
  _WORD v48[256];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v9 = 0;
LABEL_36:
    v19 = *(_DWORD *)(a2 + 68);
    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, (uint64_t *)this);
    if (*(_QWORD *)this)
      return;
    v46 = v48;
    v47 = 0x4000000000;
    v20 = (void *)(*(_QWORD *)(a2 + 432) + 208);
    v44 = 260;
    v41 = v20;
    llvm::Triple::Triple(__p, (llvm::formatv_object_base **)&v41);
    v41 = &v43;
    v42 = xmmword_24AA2AC90;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)(a2 + 32), 0, (uint64_t)&v39);
      if ((v40 & 1) != 0)
      {
        v21 = v39;
        v39 = 0;
        *(_QWORD *)this = v21;
      }
      else
      {
        if ((_DWORD)v39 != 2)
        {
          if ((_DWORD)v39 == 1)
          {
            if (!a3
              || (llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)(a2 + 32), v9, this),
                  !*(_QWORD *)this))
            {
              *(_QWORD *)this = 0;
            }
            goto LABEL_44;
          }
          if ((_DWORD)v39)
          {
            LODWORD(v47) = 0;
            llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a2 + 32), SHIDWORD(v39), (unsigned int *)&v46, 0, (uint64_t)&v34);
            if ((v35 & 1) != 0)
            {
              v24 = v34;
              v34 = 0;
              *(_QWORD *)this = v24;
            }
            else
            {
              switch((_DWORD)v34)
              {
                case 3:
                  if ((v37 & 1) == 0)
                  {
                    *(_QWORD *)this = 0;
                    if (v36)
                    {
                      if (!*((_BYTE *)v36 + 16))
                      {
                        v33 = v36;
                        v28 = 32 * *((_QWORD *)v46 + 1) - 32;
                        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(a2 + 1568, (uint64_t *)&v33)[1] = v28 + (v19 + 8);
                        if (v28 > *(_QWORD *)(a2 + 448))
                          *(_QWORD *)(a2 + 448) = v28;
                      }
                    }
                    goto LABEL_73;
                  }
                  v30 = v36;
                  *(_QWORD *)this = v36;
                  if (!v30)
                  {
LABEL_73:
                    v22 = 0;
                    goto LABEL_74;
                  }
                  break;
                case 2:
                  if ((_DWORD)v47)
                  {
                    llvm::SmallVectorImpl<char>::append<unsigned long long const*,void>(&v41, (char *)v46 + 8, (char *)v46 + 8 * v47);
                    v25 = *(unsigned int *)v46;
                    v26 = *(_QWORD *)(a2 + 1488);
                    if (v25 < (*(_QWORD *)(a2 + 1496) - v26) >> 3)
                    {
                      v27 = *(llvm::Value **)(v26 + 8 * v25);
                      if (v27)
                      {
                        v38 = 261;
                        v36 = (llvm::formatv_object_base *)v41;
                        v37 = v42;
                        llvm::Value::setName(v27, (const llvm::Twine *)&v36);
                        v22 = 0;
                        *(_QWORD *)&v42 = 0;
                        goto LABEL_74;
                      }
                    }
                  }
                  v36 = (llvm::formatv_object_base *)"Invalid bbentry record";
                  v38 = 259;
                  break;
                case 1:
                  if ((v37 & 1) != 0)
                  {
                    v29 = v36;
                    *(_QWORD *)this = v36;
                    v22 = v29 != 0;
                  }
                  else
                  {
                    v22 = 0;
                    *(_QWORD *)this = 0;
                  }
LABEL_74:
                  if ((v35 & 1) != 0)
                  {
                    v31 = v34;
                    v34 = 0;
                    if (v31)
                      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                  }
                  goto LABEL_45;
                default:
                  goto LABEL_73;
              }
            }
            v22 = 1;
            goto LABEL_74;
          }
        }
        v36 = (llvm::formatv_object_base *)"Malformed block";
        v38 = 259;
      }
LABEL_44:
      v22 = 1;
LABEL_45:
      if ((v40 & 1) != 0)
      {
        v23 = v39;
        v39 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      if (v22)
      {
        if (v41 != &v43)
          free(v41);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (v46 != v48)
          free(v46);
        return;
      }
    }
  }
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(unsigned int *)(a2 + 64);
  llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)(a2 + 32), 32 * a3, &v46);
  v8 = v46;
  if (v46)
    goto LABEL_84;
  llvm::BitstreamCursor::advance((llvm::BitstreamCursor *)(a2 + 32), 0, (uint64_t)&v41);
  if ((v42 & 1) != 0)
  {
    v8 = v41;
    goto LABEL_84;
  }
  if (v41 == (void *)0xE00000002)
  {
    v9 = 8 * v6 - v7;
    if (*(_BYTE *)(a2 + 392))
    {
      v10 = *(_DWORD *)(a2 + 68);
      llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 32), 0, 14, (uint64_t *)this);
      if (*(_QWORD *)this)
        return;
      v11 = (v10 + 8);
      v46 = v48;
      v47 = 0x4000000000;
      while (1)
      {
        llvm::BitstreamCursor::advanceSkippingSubblocks((llvm::BitstreamCursor *)(a2 + 32), 0, (uint64_t)__p);
        if ((__p[0].__r_.__value_.__s.__data_[8] & 1) != 0)
        {
          v12 = __p[0].__r_.__value_.__r.__words[0];
          __p[0].__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)this = v12;
        }
        else
        {
          if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 2)
          {
            if (LODWORD(__p[0].__r_.__value_.__l.__data_) == 1)
            {
              *(_QWORD *)this = 0;
              goto LABEL_15;
            }
            if (LODWORD(__p[0].__r_.__value_.__l.__data_))
            {
              LODWORD(v47) = 0;
              llvm::BitstreamCursor::readRecord((llvm::SimpleBitstreamCursor *)(a2 + 32), SHIDWORD(__p[0].__r_.__value_.__r.__words[0]), (unsigned int *)&v46, 0, (uint64_t)&v36);
              if ((v37 & 1) == 0)
              {
                if ((_DWORD)v36 == 3)
                {
                  v15 = *(_QWORD *)(a2 + 712);
                  if (((unint64_t)(*(_QWORD *)(a2 + 720) - v15) >> 5) > *(_QWORD *)v46
                    && *(_QWORD *)(v15 + 32 * *(_QWORD *)v46 + 16))
                  {
                    v41 = *(void **)(v15 + 32 * *(_QWORD *)v46 + 16);
                    v16 = 32 * *((_QWORD *)v46 + 1) - 32;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>,llvm::jitlink::Section *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::jitlink::Section *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Section *,llvm::orc::ExecutorAddr>>::FindAndConstruct(a2 + 1568, (uint64_t *)&v41)[1] = v16 + v11;
                    if (v16 > *(_QWORD *)(a2 + 448))
                      *(_QWORD *)(a2 + 448) = v16;
                    v13 = 0;
                    goto LABEL_32;
                  }
                  v41 = "Invalid value reference in symbol table";
                  v44 = 259;
LABEL_31:
                  v13 = 1;
                }
                else
                {
                  v13 = 0;
                }
LABEL_32:
                if ((v37 & 1) != 0)
                {
                  v18 = v36;
                  v36 = 0;
                  if (v18)
                    (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v18 + 8))(v18);
                }
                goto LABEL_16;
              }
              v17 = v36;
              v36 = 0;
              *(_QWORD *)this = v17;
              goto LABEL_31;
            }
          }
          v41 = "Malformed block";
          v44 = 259;
        }
LABEL_15:
        v13 = 1;
LABEL_16:
        if ((__p[0].__r_.__value_.__s.__data_[8] & 1) != 0)
        {
          v14 = __p[0].__r_.__value_.__r.__words[0];
          __p[0].__r_.__value_.__r.__words[0] = 0;
          if (v14)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v14 + 8))(v14);
        }
        if (v13)
        {
          if (v46 != v48)
            free(v46);
          if (!*(_QWORD *)this)
          {
            llvm::SimpleBitstreamCursor::JumpToBit((llvm::SimpleBitstreamCursor *)(a2 + 32), v9, this);
            if (!*(_QWORD *)this)
            {
              v8 = 0;
              goto LABEL_84;
            }
          }
          return;
        }
      }
    }
    goto LABEL_36;
  }
  v46 = "Expected value symbol table subblock";
  v48[8] = 259;
  error((const llvm::Twine *)__p, (llvm::formatv_object_base **)&v46);
  v8 = (void *)__p[0].__r_.__value_.__r.__words[0];
  if ((v42 & 1) != 0)
  {
    v32 = v41;
    v41 = 0;
    if (v32)
      (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  }
LABEL_84:
  *(_QWORD *)this = v8;
}

void `anonymous namespace'::BitcodeReader::parseUseLists(_anonymous_namespace_::BitcodeReader *this, _QWORD *a2)
{
  _QWORD *v2;
  llvm::BitstreamCursor *v4;
  const llvm::Twine *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  const llvm::Twine *v44;
  llvm::formatv_object_base *v45[2];
  unsigned int v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[512];
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v2 = a2;
  v72 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::BitstreamCursor *)(a2 + 4);
  llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)(a2 + 4), 0, 18, (uint64_t *)this);
  if (!*(_QWORD *)this)
  {
    v5 = (const llvm::Twine *)(v2 + 1);
    v6 = v54;
    v52 = v54;
    v53 = 0x4000000000;
    while (1)
    {
      llvm::BitstreamCursor::advanceSkippingSubblocks(v4, 0, (uint64_t)&v50);
      if ((v51 & 1) != 0)
      {
        v7 = v50;
        v50 = 0;
        *(_QWORD *)this = v7;
        goto LABEL_10;
      }
      switch((_DWORD)v50)
      {
        case 2:
          goto LABEL_7;
        case 1:
          *(_QWORD *)this = 0;
          goto LABEL_10;
        case 0:
LABEL_7:
          v45[0] = (llvm::formatv_object_base *)"Malformed block";
          v47 = 259;
LABEL_10:
          v8 = 1;
          goto LABEL_11;
      }
      LODWORD(v53) = 0;
      llvm::BitstreamCursor::readRecord(v4, SHIDWORD(v50), (unsigned int *)&v52, 0, (uint64_t)&v48);
      if ((v49 & 1) != 0)
      {
        v13 = v48;
        v48 = 0;
        *(_QWORD *)this = v13;
LABEL_43:
        v8 = 1;
        goto LABEL_79;
      }
      if ((_DWORD)v48 == 1)
      {
        if (v53 <= 2)
          goto LABEL_42;
        v14 = *((unsigned int *)v52 + 2 * v53 - 2);
        v11 = v53 - 1;
        LODWORD(v53) = v53 - 1;
        v12 = (uint64_t *)(v2[89] + 32 * v14 + 16);
      }
      else
      {
        if ((_DWORD)v48 != 2)
        {
          v8 = 0;
          goto LABEL_79;
        }
        if (v53 <= 2)
        {
LABEL_42:
          v45[0] = (llvm::formatv_object_base *)"Invalid record";
          v47 = 259;
          goto LABEL_43;
        }
        v10 = *((unsigned int *)v52 + 2 * v53 - 2);
        v11 = v53 - 1;
        LODWORD(v53) = v53 - 1;
        v12 = (uint64_t *)(v2[186] + 8 * v10);
      }
      v43 = v6;
      v44 = v5;
      v15 = *v12;
      v45[0] = (llvm::formatv_object_base *)1;
      for (i = 1; i != 33; i += 2)
        v45[i] = (llvm::formatv_object_base *)-4096;
      v19 = *(_QWORD *)(v15 + 8);
      v18 = (uint64_t *)(v15 + 8);
      v17 = v19;
      if (!v19)
      {
        v20 = 0;
        goto LABEL_47;
      }
      v42 = v2;
      v20 = 0;
      while (1)
      {
        v21 = v20++;
        v11 = v53;
        if (v53 < v20)
          break;
        v22 = *((_QWORD *)v52 + v21);
        v55 = 0;
        v23 = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v45, v17, &v55);
        v24 = v55;
        if ((v23 & 1) == 0)
        {
          v25 = LODWORD(v45[0]) >> 1;
          if (((uint64_t)v45[0] & 1) != 0)
            v26 = 16;
          else
            v26 = v46;
          if (4 * v25 + 4 >= 3 * v26)
          {
            v26 *= 2;
          }
          else if (v26 + ~v25 - HIDWORD(v45[0]) > v26 >> 3)
          {
LABEL_35:
            LODWORD(v45[0]) += 2;
            if (*(_QWORD *)v24 != -4096)
              --HIDWORD(v45[0]);
            *(_QWORD *)v24 = v17;
            *(_DWORD *)(v24 + 8) = 0;
            goto LABEL_38;
          }
          llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::grow((uint64_t)v45, v26);
          v55 = 0;
          llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Use const*,unsigned int,16u,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>,llvm::Use const*,unsigned int,llvm::DenseMapInfo<llvm::Use const*,void>,llvm::detail::DenseMapPair<llvm::Use const*,unsigned int>>::LookupBucketFor<llvm::Use const*>((uint64_t)v45, v17, &v55);
          v24 = v55;
          goto LABEL_35;
        }
LABEL_38:
        *(_DWORD *)(v24 + 8) = v22;
        v17 = *(_QWORD *)(v17 + 8);
        if (!v17)
        {
          v11 = v53;
          v20 = v21 + 1;
          break;
        }
      }
      v2 = v42;
LABEL_47:
      v27 = (char)v45[0];
      if (v11 >= v20 && v11 == LODWORD(v45[0]) >> 1)
      {
        v29 = *v18;
        if (*v18)
        {
          v30 = *(_QWORD *)(v29 + 8);
          if (v30)
          {
            v71 = 0;
            v69 = 0u;
            v70 = 0u;
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v56 = 0u;
            *(_QWORD *)(v29 + 8) = 0;
            v55 = v29;
            v31 = *(_QWORD *)(v30 + 8);
            if (v31)
            {
              v32 = 1;
              do
              {
                v33 = v30;
                v30 = v31;
                v34 = v32;
                *(_QWORD *)(v33 + 8) = 0;
                if (v32)
                {
                  v35 = 0;
                  while (1)
                  {
                    v36 = *(&v55 + v35);
                    if (!v36)
                      break;
                    *(&v55 + v35++) = 0;
                    if (v34 == v35)
                    {
                      LODWORD(v35) = v34;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v35) = 0;
                }
                if ((_DWORD)v35 == (_DWORD)v34)
                  v32 = v34 + 1;
                else
                  v32 = v34;
                *(&v55 + v35) = v33;
                v31 = *(_QWORD *)(v30 + 8);
              }
              while (v31);
              *v18 = v30;
              if (!v32)
              {
                do
                {
LABEL_74:
                  v40 = *(_QWORD *)(v30 + 8);
                  v39 = (uint64_t *)(v30 + 8);
                  v39[1] = (uint64_t)v18;
                  v18 = v39;
                  v30 = v40;
                }
                while (v40);
                goto LABEL_75;
              }
            }
            else
            {
              *v18 = v30;
              v32 = 1;
            }
            v37 = v32;
            v38 = &v55;
            do
            {
              if (*v38)
              {
                *v18 = v30;
              }
              ++v38;
              --v37;
            }
            while (v37);
            if (v30)
              goto LABEL_74;
LABEL_75:
            v27 = (char)v45[0];
          }
        }
      }
      if ((v27 & 1) == 0)
        MEMORY[0x24BD1B398](v45[1], 8);
      v8 = 0;
      v6 = v43;
      v5 = v44;
LABEL_79:
      if ((v49 & 1) != 0)
      {
        v41 = v48;
        v48 = 0;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      }
LABEL_11:
      if ((v51 & 1) != 0)
      {
        v9 = v50;
        v50 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      if (v8)
      {
        if (v52 != v6)
          free(v52);
        return;
      }
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  else
    return *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 16);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>,llvm::Function *,std::vector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::vector<llvm::BasicBlock *>>>::erase(int32x2_t *a1, _QWORD *a2)
{
  void *v4;
  int32x2_t result;

  v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
  *a2 = -8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void std::vector<llvm::Function *>::push_back[abi:nn180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

uint64_t `anonymous namespace'::BitcodeReader::parseFunctionBody(llvm::Function *)::$_1::operator()(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = **a1;
  if (!v1 || (v2 = *(_QWORD *)(v1 + 40), v2 == v1 + 40))
  {
    v5 = *(_DWORD *)a1[1];
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1[2][186] + 8 * (v5 - 1));
    if (!v6)
      return 0;
    v7 = *(_QWORD *)(v6 + 40);
    if (v7 == v6 + 40)
      return 0;
    v3 = v7 - 24;
    v4 = v7 == 0;
  }
  else
  {
    v3 = v2 - 24;
    v4 = v2 == 0;
  }
  if (v4)
    return 0;
  else
    return v3;
}

BOOL `anonymous namespace'::BitcodeReader::getValueTypePair(_BYTE *a1, uint64_t *a2, _DWORD *a3, unsigned int a4, llvm::MCAsmLexer **a5, int *a6, llvm::BasicBlock *a7)
{
  uint64_t v7;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  llvm::MCAsmLexer *FnValueByID;
  uint64_t v19;
  llvm::Type *TypeByID;

  v7 = *a3;
  if (*((_DWORD *)a2 + 2) == (_DWORD)v7)
    return 1;
  v12 = v7 + 1;
  v13 = *a2;
  v14 = *(_QWORD *)(*a2 + 8 * v7);
  *a3 = v7 + 1;
  if (a1[1712])
    v15 = a4 - v14;
  else
    v15 = v14;
  if (v15 >= a4)
  {
    if (*((_DWORD *)a2 + 2) != v12)
    {
      *a3 = v7 + 2;
      v19 = *(_QWORD *)(v13 + 8 * v12);
      *a6 = v19;
      goto LABEL_10;
    }
    return 1;
  }
  v16 = *(_DWORD *)(*((_QWORD *)a1 + 89) + 32 * v15 + 24);
  *a6 = v16;
  FnValueByID = llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(a1 + 712), v15, 0, v16, a7);
LABEL_10:
  *a5 = FnValueByID;
  return FnValueByID == 0;
}

uint64_t getDecodedUnaryOpcode(int a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;

  LOBYTE(v2) = *(_DWORD *)(a2 + 8);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  v3 = v2 < 4u || v2 == 5;
  v4 = v2 & 0xFD;
  if (!v3 && v4 != 4)
    return 0xFFFFFFFFLL;
  if (a1)
    return 0xFFFFFFFFLL;
  return 12;
}

uint64_t getDecodedBinaryOpcode(int a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t result;
  BOOL v9;
  unsigned int v10;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 8) & 0xFE;
  LOBYTE(v4) = *(_DWORD *)(a2 + 8);
  if (v3 == 18)
    v4 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  if (v4 >= 6u)
  {
    if ((v4 & 0xFD) == 4)
    {
      v5 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v5 = 1;
    if (((0x2Fu >> v4) & 1) != 0 || (v4 & 0xFD) == 4)
      goto LABEL_13;
  }
  if (v3 == 18)
    v2 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  if (v2 != 13)
    return 0xFFFFFFFFLL;
  v5 = 0;
LABEL_13:
  switch(a1)
  {
    case 0:
      v6 = v5 == 0;
      v7 = 13;
      goto LABEL_22;
    case 1:
      v6 = v5 == 0;
      v7 = 15;
      goto LABEL_22;
    case 2:
      v6 = v5 == 0;
      v7 = 17;
      goto LABEL_22;
    case 3:
      v9 = v5 == 0;
      v10 = 19;
      goto LABEL_31;
    case 4:
      v6 = v5 == 0;
      v7 = 20;
      goto LABEL_22;
    case 5:
      v9 = v5 == 0;
      v10 = 22;
      goto LABEL_31;
    case 6:
      v6 = v5 == 0;
      v7 = 23;
LABEL_22:
      if (v6)
        return v7;
      else
        return v7 + 1;
    case 7:
      v9 = v5 == 0;
      v10 = 25;
      goto LABEL_31;
    case 8:
      v9 = v5 == 0;
      v10 = 26;
      goto LABEL_31;
    case 9:
      v9 = v5 == 0;
      v10 = 27;
      goto LABEL_31;
    case 10:
      v9 = v5 == 0;
      v10 = 28;
      goto LABEL_31;
    case 11:
      v9 = v5 == 0;
      v10 = 29;
      goto LABEL_31;
    case 12:
      v9 = v5 == 0;
      v10 = 30;
LABEL_31:
      if (v9)
        result = v10;
      else
        result = 0xFFFFFFFFLL;
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t `anonymous namespace'::BitcodeReader::getTypeByID(_anonymous_namespace_::BitcodeReader *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;

  v2 = a2;
  v3 = *((_QWORD *)this + 65);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 66) - v3) >> 3))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * a2);
  if (!v4)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 53);
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*v6 + 2072, 32, 3);
    v4 = v7;
    *(_QWORD *)v7 = v6;
    *(_DWORD *)(v7 + 8) = 16;
    *(_QWORD *)(v7 + 20) = 0;
    *(_QWORD *)(v7 + 12) = 0;
    *(_DWORD *)(v7 + 28) = 0;
    v8 = (unint64_t *)*((_QWORD *)this + 235);
    v9 = *((_QWORD *)this + 236);
    if ((unint64_t)v8 >= v9)
    {
      v11 = *((_QWORD *)this + 234);
      v12 = ((uint64_t)v8 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v13 = v9 - v11;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)this + 1888, v15);
      else
        v16 = 0;
      v17 = (unint64_t *)&v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v4;
      v10 = v17 + 1;
      v19 = (char *)*((_QWORD *)this + 235);
      v20 = (char *)*((_QWORD *)this + 234);
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)*((_QWORD *)this + 234);
      }
      *((_QWORD *)this + 234) = v17;
      *((_QWORD *)this + 235) = v10;
      *((_QWORD *)this + 236) = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    *((_QWORD *)this + 235) = v10;
    *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v2) = v4;
  }
  return v4;
}

uint64_t getDecodedCastOpcode(unsigned int a1)
{
  if (a1 >= 0xD)
    return 0xFFFFFFFFLL;
  else
    return a1 + 38;
}

uint64_t `anonymous namespace'::BitcodeReader::getVirtualTypeID(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;

  if (a4)
    v8 = *(unsigned int *)a3;
  else
    v8 = 0xFFFFFFFFLL;
  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = v8;
  *(_QWORD *)&v29 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(_QWORD *)(a1 + 568), *(_DWORD *)(a1 + 584), &v32, &v29))v9 = (_QWORD)v29 == *(_QWORD *)(a1 + 568) + 24 * *(unsigned int *)(a1 + 584);
  else
    v9 = 1;
  if (!v9)
    return *(unsigned int *)(v29 + 16);
  v10 = *(_QWORD **)(a1 + 528);
  v11 = *(_QWORD *)(a1 + 520);
  v14 = ((uint64_t)v10 - v11) >> 3;
  v31 = v14;
  v12 = *(_QWORD *)(a1 + 536);
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v15 = v12 - v11;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 536, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = a2;
    v13 = v19 + 8;
    v21 = *(char **)(a1 + 528);
    v22 = *(char **)(a1 + 520);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = *(char **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 520) = v19;
    *(_QWORD *)(a1 + 528) = v13;
    *(_QWORD *)(a1 + 536) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v10 = a2;
    v13 = v10 + 1;
  }
  *(_QWORD *)(a1 + 528) = v13;
  if (a4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>,unsigned int,llvm::SmallVector<unsigned int,1u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,1u>>>::FindAndConstruct(a1 + 544, &v31);
    llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)(v24 + 8), a3, &a3[4 * a4]);
  }
  v29 = v32;
  v30 = v14;
  v33 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(_QWORD *)(a1 + 568), *(_DWORD *)(a1 + 584), &v29, &v33) & 1) == 0)
  {
    v25 = *(_DWORD *)(a1 + 576);
    v26 = *(_DWORD *)(a1 + 584);
    if (4 * v25 + 4 >= 3 * v26)
    {
      v26 *= 2;
    }
    else if (v26 + ~v25 - *(_DWORD *)(a1 + 580) > v26 >> 3)
    {
      goto LABEL_30;
    }
    llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::grow(a1 + 568, v26);
    v33 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>,std::pair<llvm::Type *,unsigned int>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,unsigned int>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(*(_QWORD *)(a1 + 568), *(_DWORD *)(a1 + 584), &v29, &v33);
LABEL_30:
    v27 = v33;
    ++*(_DWORD *)(a1 + 576);
    if (*(_QWORD *)v27 != -4096 || *(_DWORD *)(v27 + 8) != -1)
      --*(_DWORD *)(a1 + 580);
    *(_QWORD *)v27 = v29;
    *(_DWORD *)(v27 + 8) = DWORD2(v29);
    *(_DWORD *)(v27 + 16) = v30;
  }
  return v14;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  _DWORD *v8;

  v8 = operator new(0x80uLL);
  v8[21] = v8[21] & 0x38000000 | 2;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 16;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 7) = v8 + 16;
  return llvm::ExtractElementInst::ExtractElementInst((llvm::ExtractElementInst *)(v8 + 16), this, a2, a3, 0);
}

llvm::InsertElementInst *llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  _DWORD *v10;
  uint64_t v11;
  llvm::InsertElementInst *v12;
  _QWORD *v13;

  v10 = operator new(0xA0uLL);
  v11 = 0;
  v12 = (llvm::InsertElementInst *)(v10 + 24);
  v10[29] = v10[29] & 0x38000000 | 3;
  do
  {
    v13 = &v10[v11];
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v12;
    v11 += 8;
  }
  while (v11 != 24);
  return llvm::InsertElementInst::InsertElementInst(v12, this, a2, a3, a4, 0);
}

_WORD *llvm::FCmpInst::FCmpInst(_WORD *a1, llvm::Type *a2, llvm::CmpInst **a3, uint64_t a4, const llvm::Twine *a5)
{
  __int16 v8;
  uint64_t v10;

  v8 = (__int16)a2;
  llvm::CmpInst::makeCmpResultType(*a3, a2);
  return llvm::CmpInst::CmpInst(a1, v10, 54, v8, (uint64_t)a3, a4, a5, 0, 0);
}

_WORD *llvm::ICmpInst::ICmpInst(_WORD *a1, llvm::Type *a2, llvm::CmpInst **a3, uint64_t a4, const llvm::Twine *a5)
{
  __int16 v8;
  uint64_t v10;

  v8 = (__int16)a2;
  llvm::CmpInst::makeCmpResultType(*a3, a2);
  return llvm::CmpInst::CmpInst(a1, v10, 53, v8, (uint64_t)a3, a4, a5, 0, 0);
}

uint64_t llvm::ReturnInst::Create(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = llvm::User::operator new((llvm::User *)0x40, a2 != 0);
  return llvm::ReturnInst::ReturnInst((uint64_t)v4, a1, a2, 0);
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  _DWORD *v4;

  v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 8;
  return llvm::BranchInst::BranchInst((llvm::BranchInst *)(v4 + 8), this, 0);
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  _DWORD *v8;
  uint64_t v9;
  llvm::BranchInst *v10;
  _QWORD *v11;

  v8 = operator new(0xA0uLL);
  v9 = 0;
  v10 = (llvm::BranchInst *)(v8 + 24);
  v8[29] = v8[29] & 0x38000000 | 3;
  do
  {
    v11 = &v8[v9];
    *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v9 += 8;
  }
  while (v9 != 24);
  return llvm::BranchInst::BranchInst(v10, this, a2, a3, 0);
}

_QWORD *llvm::CleanupReturnInst::Create(llvm::CleanupReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  unsigned int v6;
  _QWORD *v7;

  if (a2)
    v6 = 2;
  else
    v6 = 1;
  v7 = llvm::User::operator new((llvm::User *)0x40, v6);
  *v7 = ***(_QWORD ***)this + 1608;
  v7[1] = 0;
  *((_BYTE *)v7 + 16) = 36;
  *((_BYTE *)v7 + 17) = 0;
  *((_WORD *)v7 + 9) = 0;
  *((_DWORD *)v7 + 5) = *((_DWORD *)v7 + 5) & 0xC0000000 | v6;
  *((_DWORD *)v7 + 14) = 0;
  *(_OWORD *)(v7 + 5) = 0u;
  *(_OWORD *)(v7 + 3) = 0u;
  llvm::CleanupReturnInst::init((uint64_t)v7, (uint64_t)this, (uint64_t)a2);
  return v7;
}

char *llvm::CatchReturnInst::Create(llvm::CatchReturnInst *this, llvm::Value *a2, llvm::BasicBlock *a3, llvm::Instruction *a4)
{
  char *v6;
  char *v7;

  v6 = (char *)operator new(0x80uLL);
  *((_DWORD *)v6 + 21) = *((_DWORD *)v6 + 21) & 0x38000000 | 2;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 8) = ***(_QWORD ***)a2 + 1608;
  v7 = v6 + 64;
  *((_DWORD *)v6 + 21) = 2;
  *((_QWORD *)v6 + 3) = v6 + 64;
  *((_QWORD *)v6 + 7) = v6 + 64;
  *((_QWORD *)v6 + 9) = 0;
  v6[80] = 37;
  v6[81] = 0;
  *((_WORD *)v6 + 41) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *((_DWORD *)v6 + 30) = 0;
  llvm::CatchReturnInst::init((uint64_t)(v6 + 64), (uint64_t)this, (uint64_t)a2);
  return v7;
}

_QWORD *llvm::CleanupPadInst::Create(_QWORD *a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4)
{
  int v8;
  _QWORD *v9;
  unsigned int v10;

  v8 = a3 + 1;
  v9 = llvm::User::operator new((llvm::User *)0x40, (int)a3 + 1);
  *v9 = *a1;
  v9[1] = 0;
  v10 = *((_DWORD *)v9 + 5) & 0xC0000000 | v8 & 0x7FFFFFF;
  *((_DWORD *)v9 + 4) = 79;
  *((_DWORD *)v9 + 5) = v10;
  *((_DWORD *)v9 + 14) = 0;
  *(_OWORD *)(v9 + 5) = 0u;
  *(_OWORD *)(v9 + 3) = 0u;
  llvm::FuncletPadInst::init((llvm::Value *)v9, (uint64_t)a1, a2, a3, a4);
  return v9;
}

_QWORD *llvm::CatchPadInst::Create(_QWORD *a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4)
{
  int v8;
  _QWORD *v9;
  unsigned int v10;

  v8 = a3 + 1;
  v9 = llvm::User::operator new((llvm::User *)0x40, (int)a3 + 1);
  *v9 = *a1;
  v9[1] = 0;
  v10 = *((_DWORD *)v9 + 5) & 0xC0000000 | v8 & 0x7FFFFFF;
  *((_DWORD *)v9 + 4) = 80;
  *((_DWORD *)v9 + 5) = v10;
  *((_DWORD *)v9 + 14) = 0;
  *(_OWORD *)(v9 + 5) = 0u;
  *(_OWORD *)(v9 + 3) = 0u;
  llvm::FuncletPadInst::init((llvm::Value *)v9, (uint64_t)a1, a2, a3, a4);
  return v9;
}

llvm::MCAsmLexer *`anonymous namespace'::BitcodeReader::getFnValueByID(llvm::MetadataLoader::MetadataLoaderImpl **this, unsigned int a2, llvm::Type *a3, int a4, llvm::BasicBlock *a5)
{
  _QWORD *v5;
  llvm::MDNode *MetadataFwdRefOrLoad;

  if (!a3 || *((_BYTE *)a3 + 8) != 9)
    return llvm::BitcodeReaderValueList::getValueFwdRef((llvm::BitcodeReaderValueList *)(this + 89), a2, a3, a4, a5);
  v5 = *(_QWORD **)a3;
  MetadataFwdRefOrLoad = llvm::MetadataLoader::MetadataLoaderImpl::getMetadataFwdRefOrLoad(this[97], a2);
  return (llvm::MCAsmLexer *)llvm::MetadataAsValue::get(v5, MetadataFwdRefOrLoad);
}

char *llvm::InvokeInst::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, const llvm::Twine *a9, uint64_t *a10)
{
  int v16;
  uint64_t v17;
  _QWORD *v18;
  signed int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v16 = 0;
  if (a8)
  {
    v17 = 48 * a8;
    v18 = (_QWORD *)(a7 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  v19 = a6 + v16 + 3;
  v20 = llvm::User::operator new((llvm::User *)0x50, v19, 16 * (int)a8);
  v21 = llvm::Instruction::Instruction((uint64_t)v20, **(_QWORD **)(a1 + 16), 5, (uint64_t)&v20[-32 * v19], v19, a10);
  *(_QWORD *)(v21 + 64) = 0;
  llvm::InvokeInst::init(v21, a1, a2, a3, a4, a5, a6, v22, a7, a8, a9);
  return v20;
}

void `anonymous namespace'::BitcodeReader::propagateAttributeTypes(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t **a2, llvm::CallBase *this, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t AttributeAtIndex;
  unint64_t PtrElementTypeByID;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _anonymous_namespace_::BitcodeReaderBase *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  const llvm::Twine *v32;
  _anonymous_namespace_::BitcodeReaderBase *v33;
  int v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t v37;
  void **v39[4];
  __int16 v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t *)*((_QWORD *)this + 8);
  v42 = v7;
  v41 = 0;
  if (((llvm::CallBase::arg_end(this) - ((_QWORD)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
  {
    do
    {
      v8 = 0;
      v43 = 0x4A00000046;
      LODWORD(v44) = 72;
      v9 = v7;
      do
      {
        if (v9)
        {
          v10 = v41;
          if (v41 + 2 < *((_DWORD *)v9 + 2))
          {
            v11 = v9[v41 + 7];
            if (v11)
            {
              v12 = *(_DWORD *)((char *)&v43 + v8);
              if (((*(unsigned __int8 *)(v11 + v12 / 8 + 12) >> (v12 & 7)) & 1) != 0)
              {
                AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)&v42, v41 + 1, *(_DWORD *)((char *)&v43 + v8));
                if (!AttributeAtIndex || !*(_QWORD *)(AttributeAtIndex + 16))
                {
                  if (!PtrElementTypeByID)
                  {
                    v32 = (const llvm::Twine *)(a2 + 1);
                    v39[0] = (void **)"Missing element type for typed attribute upgrade";
                    v40 = 259;
                    v33 = a1;
LABEL_34:
                    return;
                  }
                  v15 = llvm::Attribute::get(a2[53], v12, PtrElementTypeByID);
                  v7 = llvm::AttributeList::addParamAttribute(&v42, a2[53], &v41, 1, v15);
                  v42 = v7;
                  v9 = v7;
                }
              }
            }
          }
        }
        v8 += 4;
      }
      while (v8 != 12);
      v16 = ++v41;
    }
    while (v16 != ((unint64_t)(llvm::CallBase::arg_end(this)
                                                   - ((_QWORD)this
                                                    - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) >> 5));
  }
  v17 = *((_QWORD *)this - 4);
  if (*(_BYTE *)(v17 + 16) == 24)
  {
    v41 = 0;
    v20 = *(char **)(v17 + 48);
    v18 = v17 + 48;
    v19 = v20;
    v21 = *(char *)(v18 + 23);
    if (v21 >= 0)
      v22 = (char *)v18;
    else
      v22 = v19;
    v23 = *(_QWORD *)(v18 + 8);
    if (v21 >= 0)
      v24 = v21;
    else
      v24 = v23;
    llvm::InlineAsm::ParseConstraints(v22, v24, &v43);
    v25 = v43;
    v26 = v44;
    if (v43 != v44)
    {
      v27 = 0;
      v28 = a1;
      while (!*(_DWORD *)v25)
      {
        if (*(_BYTE *)(v25 + 13))
          goto LABEL_27;
LABEL_30:
        v41 = ++v27;
LABEL_31:
        v25 += 80;
        if (v25 == v26)
          goto LABEL_38;
      }
      if (*(_DWORD *)v25 != 1 || !*(_BYTE *)(v25 + 13))
        goto LABEL_31;
LABEL_27:
      if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v42, v27))
      {
        if (!v29)
        {
          v39[0] = (void **)"Missing element type for inline asm upgrade";
          v40 = 259;
          v39[0] = (void **)&v43;
          std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v39);
          return;
        }
        v30 = a2[53];
        v31 = llvm::Attribute::get(v30, 71, v29);
        v7 = llvm::AttributeList::addParamAttribute(&v42, v30, &v41, 1, v31);
        v42 = v7;
        v27 = v41;
      }
      goto LABEL_30;
    }
    v28 = a1;
LABEL_38:
    v39[0] = (void **)&v43;
    std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v39);
    v17 = *((_QWORD *)this - 4);
    if (!v17 || *(_BYTE *)(v17 + 16))
      goto LABEL_63;
  }
  else
  {
    v28 = a1;
    if (*(_BYTE *)(v17 + 16))
      goto LABEL_63;
  }
  if (*(_QWORD *)(v17 + 24) == *((_QWORD *)this + 9))
  {
    v34 = *(_DWORD *)(v17 + 36);
    if (v34 > 954)
    {
      if (v34 <= 2604)
      {
        if (v34 != 955 && v34 != 2599)
          goto LABEL_63;
      }
      else if (v34 != 2605 && v34 != 3007 && v34 != 3005)
      {
        goto LABEL_63;
      }
    }
    else if (v34 > 479)
    {
      if (v34 != 480 && v34 != 953)
        goto LABEL_63;
    }
    else if ((v34 - 245) >= 2 && v34 != 477)
    {
      goto LABEL_63;
    }
    v35 = 1;
    if (v34 <= 3004 && v34 != 953)
      v35 = v34 == 955;
    LODWORD(v43) = v35;
    if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&v42, v35))
    {
      if (!v36)
      {
        v32 = (const llvm::Twine *)(a2 + 1);
        v39[0] = (void **)"Missing element type for elementtype upgrade";
        v40 = 259;
        v33 = v28;
        goto LABEL_34;
      }
      v37 = llvm::Attribute::get(a2[53], 71, v36);
      v7 = llvm::AttributeList::addParamAttribute(&v42, a2[53], &v43, 1, v37);
    }
  }
LABEL_63:
  *((_QWORD *)this + 8) = v7;
  *(_QWORD *)v28 = 0;
}

uint64_t llvm::ResumeInst::Create(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  _DWORD *v4;

  v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 8;
  return llvm::ResumeInst::ResumeInst((llvm::ResumeInst *)(v4 + 8), this, 0);
}

char *llvm::CallBrInst::Create(uint64_t a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::Twine *a11, uint64_t *a12)
{
  int v16;
  uint64_t v17;
  _QWORD *v18;
  signed int v19;
  char *v20;
  uint64_t v21;

  v16 = 0;
  if (a10)
  {
    v17 = 48 * a10;
    v18 = (_QWORD *)(a9 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  v19 = a5 + a7 + v16 + 2;
  v20 = llvm::User::operator new((llvm::User *)0x58, v19, 16 * (int)a10);
  v21 = llvm::Instruction::Instruction((uint64_t)v20, **(_QWORD **)(a1 + 16), 11, (uint64_t)&v20[-32 * v19], v19, a12);
  *(_QWORD *)(v21 + 64) = 0;
  llvm::CallBrInst::init(v21, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  return v20;
}

uint64_t *llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::Value *,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>,llvm::BasicBlock *,llvm::Value *,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::Value *>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;

  v2 = a1 + 8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v3 = 4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      v4 = 0;
      return (uint64_t *)(v2 + 16 * v4);
    }
  }
  v6 = v3 - 1;
  LODWORD(v7) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = (uint64_t *)(v2 + 16 * v7);
  v8 = *v5;
  if (*v5 == a2)
    return v5;
  v10 = 1;
  while (v8 != -4096)
  {
    v11 = v7 + v10++;
    v7 = v11 & v6;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == a2)
      return (uint64_t *)(v2 + 16 * v7);
  }
  if ((*(_DWORD *)a1 & 1) != 0)
    return (uint64_t *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  return (uint64_t *)(v2 + 16 * v4);
}

uint64_t llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::lookup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, a2, &v6))
  {
    v3 = v6;
    if ((*(_DWORD *)a1 & 1) == 0)
      goto LABEL_8;
LABEL_6:
    v4 = a1 + 104;
    goto LABEL_9;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v3 = a1 + 104;
    goto LABEL_6;
  }
  v3 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
LABEL_8:
  v4 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
LABEL_9:
  if (v4 == v3)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 24 * *(unsigned int *)(v3 + 16) + 16);
}

llvm::MCAsmLexer *`anonymous namespace'::BitcodeReader::getValueSigned(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5, llvm::Type *a6, int a7, llvm::BasicBlock *a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  if (a3 == a4)
    return 0;
  v9 = *(_QWORD *)(a2 + 8 * a4);
  LODWORD(v10) = 0;
  if (v9 != 1)
    v10 = -(uint64_t)(v9 >> 1);
  if ((v9 & 1) != 0)
    LODWORD(v11) = v10;
  else
    v11 = v9 >> 1;
  if (*(_BYTE *)(a1 + 1712))
    v12 = a5 - v11;
  else
    v12 = v11;
}

__n128 llvm::MapVector<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *,llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,llvm::SmallVector<std::pair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,llvm::BasicBlock *>,4u>>::insert(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  __n128 result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  char *v13;
  __n128 v14;
  int v15;
  uint64_t v16;

  v2 = a2;
  v14 = *a2;
  v15 = 0;
  v16 = 0;
  if ((llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, (uint64_t)&v14, &v16) & 1) != 0)return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 4;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3)
  {
    goto LABEL_7;
  }
  llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::grow(a1, v6);
  v16 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,4u,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>,std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int,llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>,llvm::detail::DenseMapPair<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,unsigned int>>::LookupBucketFor<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>>(a1, (uint64_t)&v14, &v16);
LABEL_7:
  v7 = v16;
  *(_DWORD *)a1 += 2;
  if (*(_QWORD *)v7 != -4096 || *(_QWORD *)(v7 + 8) != -4096)
    --*(_DWORD *)(a1 + 4);
  *(__n128 *)v7 = v14;
  *(_DWORD *)(v7 + 16) = v15;
  v8 = a1 + 104;
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(unsigned int *)(a1 + 112);
  if (v10 >= *(_DWORD *)(a1 + 116))
  {
    v12 = v10 + 1;
    if (v9 <= (unint64_t)v2 && v9 + 24 * v10 > (unint64_t)v2)
    {
      v13 = (char *)v2 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 120), v12, 24);
      v9 = *(_QWORD *)(a1 + 104);
      v2 = (__n128 *)&v13[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 120), v12, 24);
      v9 = *(_QWORD *)(a1 + 104);
    }
  }
  v11 = (__n128 *)(v9 + 24 * *(unsigned int *)(a1 + 112));
  result = *v2;
  v11[1].n128_u64[0] = v2[1].n128_u64[0];
  *v11 = result;
  LODWORD(v11) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = (_DWORD)v11 + 1;
  *(_DWORD *)(v7 + 16) = (_DWORD)v11;
  return result;
}

void `anonymous namespace'::BitcodeReader::parseAlignmentValue(_anonymous_namespace_::BitcodeReaderBase *a1, uint64_t a2, unint64_t a3, _WORD *a4)
{
  __int16 v4;
  llvm::formatv_object_base *v5;
  __int16 v6;

  if (a3 < 0x22)
  {
    if (a3)
      v4 = (a3 - 1) | 0x100;
    else
      v4 = 0;
    *a4 = v4;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    v5 = (llvm::formatv_object_base *)"Invalid alignment value";
    v6 = 259;
  }
}

void `anonymous namespace'::BitcodeReader::typeCheckLoadStoreInst(_anonymous_namespace_::BitcodeReader *this, llvm::Type *a2, llvm::Type *a3, uint64_t a4)
{
  llvm::Type *v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  const llvm::Twine *v10;
  const char *v11;
  llvm::formatv_object_base *v12;
  __int16 v13;

  if (*(_BYTE *)(a4 + 8) == 15)
  {
    v4 = *(llvm::Type **)(a4 + 24);
    if (v4)
      v5 = v4 == a3;
    else
      v5 = 1;
    if (v5)
    {
      v6 = *((unsigned __int8 *)a3 + 8);
      v7 = v6 > 0xE;
      v8 = (1 << v6) & 0x5B80;
      if (v7 || v8 == 0)
      {
        *(_QWORD *)this = 0;
        return;
      }
      v10 = (llvm::Type *)((char *)a2 + 8);
      v11 = "Cannot load/store from pointer";
    }
    else
    {
      v10 = (llvm::Type *)((char *)a2 + 8);
      v11 = "Explicit load/store type does not match pointee type of pointer operand";
    }
  }
  else
  {
    v10 = (llvm::Type *)((char *)a2 + 8);
    v11 = "Load/Store operand is not a pointer type";
  }
  v12 = (llvm::formatv_object_base *)v11;
  v13 = 259;
}

uint64_t getDecodedRMWOperation(uint64_t result)
{
  if (result >= 0x11)
    return 17;
  else
    return result;
}

void std::vector<llvm::Value *>::push_back[abi:nn180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void std::vector<llvm::OperandBundleDefT<llvm::Value *>>::emplace_back<std::string &,std::vector<llvm::Value *>>(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 4);
    if (v11 + 1 > 0x555555555555555)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v13;
    v20 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>(v6, v14);
    else
      v15 = 0;
    v16 = v15;
    v17 = &v15[48 * v11];
    v19 = &v15[48 * v14];
    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::construct[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *>,std::string &,std::vector<llvm::Value *>>((uint64_t)v17, a2, a3);
    v18 = v17 + 48;
    std::vector<llvm::OperandBundleDefT<llvm::Value *>>::__swap_out_circular_buffer(a1, &v16);
    v10 = a1[1];
    std::__split_buffer<llvm::OperandBundleDefT<llvm::Value *>>::~__split_buffer(&v16);
  }
  else
  {
    std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::construct[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *>,std::string &,std::vector<llvm::Value *>>(*(_QWORD *)(v6 - 8), a2, a3);
    v10 = v9 + 48;
  }
  a1[1] = v10;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>,llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *((_DWORD *)v15 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

