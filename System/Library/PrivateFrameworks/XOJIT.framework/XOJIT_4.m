uint64_t printAsOperandImpl(const llvm::Value *a1, llvm::raw_ostream *a2, int a3, llvm::ModuleSlotTracker *this)
{
  uint64_t v7;
  _BYTE *v8;
  llvm::SlotTracker *Machine;
  llvm::SlotTracker *v10;
  llvm::SlotTracker *v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *__p;
  void *v34;
  uint64_t v35;

  v7 = *((_QWORD *)this + 3);
  v14 = 0;
  v15 = 0;
  v13 = v7;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v34 = 0;
  v35 = 0;
  if (a3)
  {
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      *v8 = 32;
    }
  }
  Machine = (llvm::SlotTracker *)llvm::ModuleSlotTracker::getMachine(this);
  v10 = (llvm::SlotTracker *)*((_QWORD *)this + 3);
  v12[0] = (llvm::SlotTracker *)&off_251C1E428;
  v12[1] = (llvm::SlotTracker *)&v13;
  v12[2] = Machine;
  v12[3] = v10;
  WriteAsOperandInternal((char **)a2, a1, v12);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  MEMORY[0x24BD1B398](v30, 8);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  MEMORY[0x24BD1B398](v23, 8);
  MEMORY[0x24BD1B398](v20, 8);
  MEMORY[0x24BD1B398](v17, 8);
  return MEMORY[0x24BD1B398](v14, 8);
}

void printMetadataImpl(llvm::raw_ostream *a1, unsigned __int8 *a2, llvm::ModuleSlotTracker *a3, uint64_t a4, char a5, int a6)
{
  uint64_t Machine;
  uint64_t v12;
  int v13;
  const llvm::MDNode *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void (**v40)(llvm::formatted_raw_ostream *__hidden);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[24];

  v41 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 1;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v40 = &off_251C12AF0;
  v48 = 0;
  v49 = 0;
  v50 = &v52;
  v51 = xmmword_24AA2D790;
  llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v40, a1);
  v18 = 0;
  v19 = 0;
  v17 = a4;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  __p = 0;
  v38 = 0;
  v39 = 0;
  Machine = llvm::ModuleSlotTracker::getMachine(a3);
  if (!a6 || (a5 & 1) != 0)
  {
    v12 = operator new();
    *(_QWORD *)v12 = &off_251C1E428;
    *(_QWORD *)(v12 + 8) = &v17;
    *(_QWORD *)(v12 + 16) = Machine;
    *(_QWORD *)(v12 + 24) = a4;
  }
  else
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = Machine;
    *(_QWORD *)(v12 + 24) = a4;
    *(_QWORD *)v12 = &off_251C1E450;
    *(_QWORD *)(v12 + 8) = &v17;
    *(_DWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = v12 + 56;
    *(_QWORD *)(v12 + 184) = v12 + 216;
    *(_QWORD *)(v12 + 48) = 0x400000000;
    *(_QWORD *)(v12 + 192) = v12 + 216;
    *(_QWORD *)(v12 + 200) = 4;
    *(_DWORD *)(v12 + 208) = 0;
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(v12 + 184), a2, (uint64_t)v53);
    *(_QWORD *)(v12 + 248) = &v40;
  }
  WriteAsOperandInternal((llvm::raw_ostream *)&v40, (uint64_t **)a2, (uint64_t *)v12);
  v13 = llvm::MDNode::classof(a2);
  if (v13)
    v14 = (const llvm::MDNode *)a2;
  else
    v14 = 0;
  if ((a5 & 1) == 0)
  {
    if (v13)
    {
      v15 = *a2;
      if (v15 != 6 && v15 != 33)
      {
        v16 = (_WORD *)v44;
        if ((unint64_t)(v43 - v44) > 2)
        {
          *(_BYTE *)(v44 + 2) = 32;
          *v16 = 15648;
          v44 += 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v40, " = ", 3uLL);
        }
        WriteMDNodeBodyInternal((llvm::raw_ostream *)&v40, v14, (_anonymous_namespace_::AsmWriterContext *)v12);
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  MEMORY[0x24BD1B398](v34, 8);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  MEMORY[0x24BD1B398](v27, 8);
  MEMORY[0x24BD1B398](v24, 8);
  MEMORY[0x24BD1B398](v21, 8);
  MEMORY[0x24BD1B398](v18, 8);
  llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v40);
}

void llvm::SlotTracker::~SlotTracker(llvm::SlotTracker *this)
{
  llvm::SlotTracker::~SlotTracker(this);
  JUMPOUT(0x24BD1B3A4);
}

{
  llvm::SlotTracker *v2;
  uint64_t v3;
  llvm::SlotTracker *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_251C1E370;
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 296);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 33), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 232);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 25), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 21), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 17), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 13), 8);
  v2 = (llvm::SlotTracker *)*((_QWORD *)this + 11);
  if (v2 == (llvm::SlotTracker *)((char *)this + 64))
  {
    v3 = 4;
    v2 = (llvm::SlotTracker *)((char *)this + 64);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (llvm::SlotTracker *)*((_QWORD *)this + 7);
  if (v4 == (llvm::SlotTracker *)((char *)this + 32))
  {
    v5 = 4;
    v4 = (llvm::SlotTracker *)((char *)this + 32);
  }
  else
  {
    if (!v4)
      return;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
}

uint64_t llvm::SlotTracker::getNextMetadataSlot(llvm::SlotTracker *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::getHelper<0ul>(_QWORD *a1)
{
  if (*a1 == a1[2] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::getHelper<1ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 24) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

BOOL llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::incrementHelper<0ul>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::incrementHelper<1ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

void `anonymous namespace'::AssemblyWriter::printMetadataAttachments(uint64_t a1, _DWORD *a2, const void *a3, size_t __n)
{
  unsigned int v4;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  uint64_t v23[4];

  v4 = a2[2];
  if (v4)
  {
    if (!*(_DWORD *)(a1 + 320))
    {
      v9 = (_QWORD *)(a1 + 312);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
      v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0)
        v11 = (_QWORD *)*v11;
      llvm::LLVMContext::getMDKindNames((uint64_t)v11, v9);
      v4 = a2[2];
    }
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 8);
    v23[0] = (uint64_t)&off_251C1E428;
    v23[1] = a1 + 40;
    v23[2] = v12;
    v23[3] = v13;
    if (v4)
    {
      v14 = *(uint64_t ****)a2;
      v15 = *(_QWORD *)a2 + 16 * v4;
      do
      {
        v16 = *(unsigned int *)v14;
        llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, a3, __n);
        v17 = *(llvm::raw_ostream **)a1;
        v19 = *(char **)(*(_QWORD *)a1 + 24);
        v18 = *(char **)(*(_QWORD *)a1 + 32);
        if (*(_DWORD *)(a1 + 320) <= v16)
        {
          if ((unint64_t)(v19 - v18) > 0xF)
          {
            *(_OWORD *)v18 = *(_OWORD *)"!<unknown kind #";
            *((_QWORD *)v17 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "!<unknown kind #", 0x10uLL);
          }
          write_unsigned<unsigned long>(v17, v16, 0, 0, 0);
          v20 = (_BYTE *)*((_QWORD *)v17 + 4);
          if (*((_BYTE **)v17 + 3) == v20)
          {
            llvm::raw_ostream::write(v17, ">", 1uLL);
          }
          else
          {
            *v20 = 62;
            ++*((_QWORD *)v17 + 4);
          }
        }
        else
        {
          if (v19 == v18)
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "!", 1uLL);
          }
          else
          {
            *v18 = 33;
            ++*((_QWORD *)v17 + 4);
          }
          printMetadataIdentifier(*(llvm::raw_ostream **)(*(_QWORD *)(a1 + 312) + 16 * v16), *(_QWORD *)(*(_QWORD *)(a1 + 312) + 16 * v16 + 8), *(llvm::raw_ostream **)a1);
        }
        v21 = *(llvm::raw_ostream **)a1;
        v22 = *(_BYTE **)(*(_QWORD *)a1 + 32);
        if ((unint64_t)v22 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
        {
          llvm::raw_ostream::write(v21, 32);
        }
        else
        {
          *((_QWORD *)v21 + 4) = v22 + 1;
          *v22 = 32;
        }
        WriteAsOperandInternal(*(llvm::raw_ostream **)a1, v14[1], v23);
        v14 += 2;
      }
      while (v14 != (uint64_t ***)v15);
    }
  }
}

void getLinkageNameWithSpace(_QWORD *a1, int a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string v5;

  if (a2)
  {
    std::string::basic_string[abi:nn180100]<0>(&v5, off_251C1E468[a2 - 1]);
    v3 = std::string::append(&v5, " ");
    v4 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)a1 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a1[2] = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(a1, "");
  }
}

llvm::raw_ostream *PrintDSOLocation(llvm::raw_ostream *result, llvm::formatted_raw_ostream *this)
{
  int v2;
  uint64_t v4;

  v2 = *((_DWORD *)result + 8);
  if ((v2 & 0x4000) != 0 && (*((_DWORD *)result + 8) & 0xFu) - 7 >= 2)
  {
    if ((v2 & 0x30) == 0
      || (result = (llvm::raw_ostream *)llvm::GlobalValue::hasExternalWeakLinkage(result), (_DWORD)result))
    {
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 9)
      {
        *(_WORD *)(v4 + 8) = 8300;
        *(_QWORD *)v4 = *(_QWORD *)"dso_local ";
        *((_QWORD *)this + 4) += 10;
      }
      else
      {
        return llvm::raw_ostream::write(this, "dso_local ", 0xAuLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *PrintCallingConv(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  size_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  void *v20;
  _OWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  int v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  char v33;
  const char *v34;
  const char *v35;
  __int128 v36;

  v3 = result;
  switch((int)result)
  {
    case 8:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "fastcc";
        goto LABEL_63;
      }
      *(_WORD *)(v4 + 4) = 25443;
      v22 = 1953718630;
      goto LABEL_140;
    case 9:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "coldcc";
        goto LABEL_63;
      }
      *(_WORD *)(v4 + 4) = 25443;
      v22 = 1684828003;
      goto LABEL_140;
    case 10:
      v6 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v6) <= 4)
      {
        v5 = "ghccc";
        v7 = this;
        v8 = 5;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      *(_BYTE *)(v6 + 4) = 99;
      *(_DWORD *)v6 = 1667459175;
      v23 = *((_QWORD *)this + 4) + 5;
      goto LABEL_165;
    case 12:
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0xA)
      {
        v5 = "webkit_jscc";
        goto LABEL_71;
      }
      v24 = 1667461994;
      v25 = "webkit_jscc";
      goto LABEL_145;
    case 13:
      v11 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 <= 7uLL)
      {
        v5 = "anyregcc";
        goto LABEL_66;
      }
      v26 = 0x676572796E61;
      goto LABEL_142;
    case 14:
      v12 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 0xEuLL)
      {
        v5 = "preserve_mostcc";
        goto LABEL_38;
      }
      v27 = "preserve_mostcc";
      goto LABEL_126;
    case 15:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xDuLL)
      {
        v5 = "preserve_allcc";
        goto LABEL_53;
      }
      v28 = "preserve_allcc";
      goto LABEL_134;
    case 16:
      v14 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 6uLL)
      {
        v5 = "swiftcc";
        goto LABEL_58;
      }
      *(int *)((char *)v14 + 3) = 1667462246;
      v29 = 1718187891;
      goto LABEL_137;
    case 17:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xDuLL)
      {
        v5 = "cxx_fast_tlscc";
        goto LABEL_53;
      }
      v28 = "cxx_fast_tlscc";
      goto LABEL_134;
    case 18:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "tailcc";
        goto LABEL_63;
      }
      *(_WORD *)(v4 + 4) = 25443;
      v22 = 1818845556;
      goto LABEL_140;
    case 19:
      v12 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 0xEuLL)
      {
        v5 = "cfguard_checkcc";
        goto LABEL_38;
      }
      v27 = "cfguard_checkcc";
      goto LABEL_126;
    case 20:
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0xA)
      {
        v5 = "swifttailcc";
        goto LABEL_71;
      }
      v24 = 1667460201;
      v25 = "swifttailcc";
      goto LABEL_145;
    case 64:
      v15 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0xCuLL)
      {
        v5 = "x86_stdcallcc";
        goto LABEL_86;
      }
      v30 = "x86_stdcallcc";
      goto LABEL_153;
    case 65:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xDuLL)
      {
        v5 = "x86_fastcallcc";
        goto LABEL_53;
      }
      v28 = "x86_fastcallcc";
      goto LABEL_134;
    case 66:
      v16 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v16) <= 9)
      {
        v5 = "arm_apcscc";
        goto LABEL_100;
      }
      v31 = 25443;
      v32 = "arm_apcscc";
      goto LABEL_161;
    case 67:
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0xA)
      {
        v5 = "arm_aapcscc";
        goto LABEL_71;
      }
      v24 = 1667461987;
      v25 = "arm_aapcscc";
      goto LABEL_145;
    case 68:
      v12 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 0xEuLL)
      {
        v5 = "arm_aapcs_vfpcc";
LABEL_38:
        v7 = this;
        v8 = 15;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v27 = "arm_aapcs_vfpcc";
LABEL_126:
      *v12 = *(_QWORD *)v27;
      *(_QWORD *)((char *)v12 + 7) = *(_QWORD *)(v27 + 7);
      v23 = *((_QWORD *)this + 4) + 15;
      goto LABEL_165;
    case 69:
      v15 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0xCuLL)
      {
        v5 = "msp430_intrcc";
        goto LABEL_86;
      }
      v30 = "msp430_intrcc";
      goto LABEL_153;
    case 70:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xDuLL)
      {
        v5 = "x86_thiscallcc";
        goto LABEL_53;
      }
      v28 = "x86_thiscallcc";
      goto LABEL_134;
    case 71:
      v16 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v16) <= 9)
      {
        v5 = "ptx_kernel";
        goto LABEL_100;
      }
      v31 = 27749;
      v32 = "ptx_kernel";
      goto LABEL_161;
    case 72:
      v16 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v16) <= 9)
      {
        v5 = "ptx_device";
        goto LABEL_100;
      }
      v31 = 25955;
      v32 = "ptx_device";
      goto LABEL_161;
    case 75:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "spir_func";
        goto LABEL_93;
      }
      v33 = 99;
      v34 = "spir_func";
      goto LABEL_157;
    case 76:
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0xA)
      {
        v5 = "spir_kernel";
        goto LABEL_71;
      }
      v24 = 1818586738;
      v25 = "spir_kernel";
      goto LABEL_145;
    case 77:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xDuLL)
      {
        v5 = "intel_ocl_bicc";
LABEL_53:
        v7 = this;
        v8 = 14;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v28 = "intel_ocl_bicc";
LABEL_134:
      *v13 = *(_QWORD *)v28;
      *(_QWORD *)((char *)v13 + 6) = *(_QWORD *)(v28 + 6);
      v23 = *((_QWORD *)this + 4) + 14;
      goto LABEL_165;
    case 78:
      v15 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0xCuLL)
      {
        v5 = "x86_64_sysvcc";
        goto LABEL_86;
      }
      v30 = "x86_64_sysvcc";
      goto LABEL_153;
    case 79:
      v14 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 6uLL)
      {
        v5 = "win64cc";
LABEL_58:
        v7 = this;
        v8 = 7;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      *(int *)((char *)v14 + 3) = 1667445814;
      v29 = 913205623;
LABEL_137:
      *v14 = v29;
      v23 = *((_QWORD *)this + 4) + 7;
      goto LABEL_165;
    case 80:
      v18 = (_OWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v18 <= 0xFuLL)
      {
        v5 = "x86_vectorcallcc";
        v7 = this;
        v8 = 16;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      *v18 = *(_OWORD *)"x86_vectorcallcc";
      v23 = *((_QWORD *)this + 4) + 16;
      goto LABEL_165;
    case 81:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "hhvmcc";
LABEL_63:
        v7 = this;
        v8 = 6;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      *(_WORD *)(v4 + 4) = 25443;
      v22 = 1836476520;
LABEL_140:
      *(_DWORD *)v4 = v22;
      v23 = *((_QWORD *)this + 4) + 6;
      goto LABEL_165;
    case 82:
      v11 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 <= 7uLL)
      {
        v5 = "hhvm_ccc";
LABEL_66:
        v7 = this;
        v8 = 8;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v26 = 0x635F6D766868;
LABEL_142:
      *v11 = v26 & 0xFFFFFFFFFFFFLL | 0x6363000000000000;
      v23 = *((_QWORD *)this + 4) + 8;
      goto LABEL_165;
    case 83:
      v16 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v16) <= 9)
      {
        v5 = "x86_intrcc";
        goto LABEL_100;
      }
      v31 = 25443;
      v32 = "x86_intrcc";
      goto LABEL_161;
    case 84:
      v10 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 0xA)
      {
        v5 = "avr_intrcc ";
LABEL_71:
        v7 = this;
        v8 = 11;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v24 = 543384434;
      v25 = "avr_intrcc ";
LABEL_145:
      *(_DWORD *)(v10 + 7) = v24;
      *(_QWORD *)v10 = *(_QWORD *)v25;
      v23 = *((_QWORD *)this + 4) + 11;
      goto LABEL_165;
    case 85:
      v15 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0xCuLL)
      {
        v5 = "avr_signalcc ";
        goto LABEL_86;
      }
      v30 = "avr_signalcc ";
      goto LABEL_153;
    case 87:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_vs";
        goto LABEL_93;
      }
      v33 = 115;
      v34 = "amdgpu_vs";
      goto LABEL_157;
    case 88:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_gs";
        goto LABEL_93;
      }
      v33 = 115;
      v34 = "amdgpu_gs";
      goto LABEL_157;
    case 89:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_ps";
        goto LABEL_93;
      }
      v33 = 115;
      v34 = "amdgpu_ps";
      goto LABEL_157;
    case 90:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_cs";
        goto LABEL_93;
      }
      v33 = 115;
      v34 = "amdgpu_cs";
      goto LABEL_157;
    case 91:
      v15 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0xCuLL)
      {
        v5 = "amdgpu_kernel";
        goto LABEL_86;
      }
      v30 = "amdgpu_kernel";
      goto LABEL_153;
    case 92:
      v15 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 0xCuLL)
      {
        v5 = "x86_regcallcc";
LABEL_86:
        v7 = this;
        v8 = 13;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v30 = "x86_regcallcc";
LABEL_153:
      *v15 = *(_QWORD *)v30;
      *(_QWORD *)((char *)v15 + 5) = *(_QWORD *)(v30 + 5);
      v23 = *((_QWORD *)this + 4) + 13;
      goto LABEL_165;
    case 93:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_hs";
        goto LABEL_93;
      }
      v33 = 115;
      v34 = "amdgpu_hs";
      goto LABEL_157;
    case 95:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_ls";
        goto LABEL_93;
      }
      v33 = 115;
      v34 = "amdgpu_ls";
      goto LABEL_157;
    case 96:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
      {
        v5 = "amdgpu_es";
LABEL_93:
        v7 = this;
        v8 = 9;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v33 = 115;
      v34 = "amdgpu_es";
LABEL_157:
      *(_BYTE *)(v17 + 8) = v33;
      *(_QWORD *)v17 = *(_QWORD *)v34;
      v23 = *((_QWORD *)this + 4) + 9;
      goto LABEL_165;
    case 97:
      v19 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v19) <= 0x11)
      {
        v5 = "aarch64_vector_pcs";
        v7 = this;
        v8 = 18;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      *(_WORD *)(v19 + 16) = 29539;
      *(_OWORD *)v19 = *(_OWORD *)"aarch64_vector_pcs";
      v23 = *((_QWORD *)this + 4) + 18;
      goto LABEL_165;
    case 98:
      v20 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v20 <= 0x15uLL)
      {
        v5 = "aarch64_sve_vector_pcs";
        v7 = this;
        v8 = 22;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      qmemcpy(v20, "aarch64_sve_vector_pcs", 22);
      v23 = *((_QWORD *)this + 4) + 22;
      goto LABEL_165;
    case 100:
      v16 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v16) <= 9)
      {
        v5 = "amdgpu_gfx";
LABEL_100:
        v7 = this;
        v8 = 10;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      v31 = 30822;
      v32 = "amdgpu_gfx";
LABEL_161:
      *(_WORD *)(v16 + 8) = v31;
      *(_QWORD *)v16 = *(_QWORD *)v32;
      v23 = *((_QWORD *)this + 4) + 10;
      goto LABEL_165;
    case 102:
      v21 = (_OWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v21 <= 0x1FuLL)
      {
        v5 = "aarch64_sme_preservemost_from_x0";
        goto LABEL_105;
      }
      v35 = "aarch64_sme_preservemost_from_x0";
      goto LABEL_164;
    case 103:
      v21 = (_OWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v21 > 0x1FuLL)
      {
        v35 = "aarch64_sme_preservemost_from_x2";
LABEL_164:
        v36 = *((_OWORD *)v35 + 1);
        *v21 = *(_OWORD *)v35;
        v21[1] = v36;
        v23 = *((_QWORD *)this + 4) + 32;
LABEL_165:
        *((_QWORD *)this + 4) = v23;
      }
      else
      {
        v5 = "aarch64_sme_preservemost_from_x2";
LABEL_105:
        v7 = this;
        v8 = 32;
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      return result;
    default:
      v9 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 25443;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "cc", 2uLL);
      }
      return write_unsigned<unsigned long>(this, v3, 0, 0, 0);
  }
}

void WriteAsOperandInternal(char **a1, const llvm::Value *a2, llvm::SlotTracker **a3)
{
  unsigned int v5;
  char *v6;
  unint64_t v7;
  uint64_t ValueName;
  int v9;
  llvm::SlotTracker *v10;
  int LocalSlot;
  int GlobalSlot;
  char v13;
  llvm::SlotTracker *v14;
  llvm::SlotTracker *v15;
  llvm::SlotTracker *v16;
  llvm::SlotTracker *v17;
  char *v18;
  char *v19;
  int v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  char *v23;
  llvm::raw_ostream *v24;
  uint64_t *v25;
  llvm::raw_ostream *v26;
  int v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  char *v30;

  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    ValueName = llvm::Value::getValueName((uint64_t ***)a2);
    if (*((unsigned __int8 *)a2 + 16) >= 4u)
      v9 = 3;
    else
      v9 = 0;
    PrintLLVMName((llvm::raw_ostream *)a1, (unsigned __int8 *)(ValueName + 16), *(_QWORD *)ValueName, v9);
    return;
  }
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 <= 0x14)
  {
    if (v5 >= 4)
    {
      WriteConstantInternal((llvm::raw_ostream *)a1, a2, (_anonymous_namespace_::AsmWriterContext *)a3);
      return;
    }
    goto LABEL_12;
  }
  if (v5 == 23)
  {
    WriteAsOperandInternal((llvm::raw_ostream *)a1, *((llvm::DIExpression **)a2 + 3));
    return;
  }
  if (v5 != 24)
  {
LABEL_12:
    v10 = a3[2];
    if (v10)
    {
      if (v5 <= 3)
      {
        GlobalSlot = llvm::SlotTracker::getGlobalSlot(v10, a2);
        v13 = 64;
      }
      else
      {
        LocalSlot = llvm::SlotTracker::getLocalSlot(v10, a2);
        if (LocalSlot != -1)
        {
          GlobalSlot = LocalSlot;
          v13 = 37;
LABEL_39:
          v18 = a1[4];
          if (v18 >= a1[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a1, v13);
          }
          else
          {
            a1[4] = v18 + 1;
            *v18 = v13;
          }
          llvm::write_integer((llvm::raw_ostream *)a1, GlobalSlot, 0, 0);
          return;
        }
        createSlotTracker(a2);
        if (!v16)
        {
LABEL_41:
          v19 = a1[4];
          if ((unint64_t)(a1[3] - v19) > 7)
          {
            *(_QWORD *)v19 = 0x3E6665726461623CLL;
            a1[4] += 8;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a1, "<badref>", 8uLL);
          }
          return;
        }
        v17 = v16;
        GlobalSlot = llvm::SlotTracker::getLocalSlot(v16, a2);
        (*(void (**)(llvm::SlotTracker *))(*(_QWORD *)v17 + 8))(v17);
        v13 = 37;
      }
    }
    else
    {
      createSlotTracker(a2);
      if (!v14)
        goto LABEL_41;
      v15 = v14;
      if (*((unsigned __int8 *)a2 + 16) <= 3u)
      {
        GlobalSlot = llvm::SlotTracker::getGlobalSlot(v14, a2);
        v13 = 64;
      }
      else
      {
        GlobalSlot = llvm::SlotTracker::getLocalSlot(v14, a2);
        v13 = 37;
      }
      (*(void (**)(llvm::SlotTracker *))(*(_QWORD *)v15 + 8))(v15);
    }
    if (GlobalSlot != -1)
      goto LABEL_39;
    goto LABEL_41;
  }
  v6 = a1[4];
  if ((unint64_t)(a1[3] - v6) > 3)
  {
    *(_DWORD *)v6 = 544043873;
    v7 = (unint64_t)(a1[4] + 4);
    a1[4] = (char *)v7;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, "asm ", 4uLL);
    v7 = (unint64_t)a1[4];
  }
  if (*((_BYTE *)a2 + 80))
  {
    if ((unint64_t)&a1[3][-v7] > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 544498533;
      *(_QWORD *)v7 = *(_QWORD *)"sideeffect ";
      v7 = (unint64_t)(a1[4] + 11);
      a1[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, "sideeffect ", 0xBuLL);
      v7 = (unint64_t)a1[4];
    }
  }
  if (*((_BYTE *)a2 + 81))
  {
    if ((unint64_t)&a1[3][-v7] > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 543908705;
      *(_QWORD *)v7 = *(_QWORD *)"alignstack ";
      v7 = (unint64_t)(a1[4] + 11);
      a1[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, "alignstack ", 0xBuLL);
      v7 = (unint64_t)a1[4];
    }
  }
  if (*((_DWORD *)a2 + 21) == 1)
  {
    if ((unint64_t)&a1[3][-v7] > 0xC)
    {
      qmemcpy((void *)v7, "inteldialect ", 13);
      v7 = (unint64_t)(a1[4] + 13);
      a1[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, "inteldialect ", 0xDuLL);
      v7 = (unint64_t)a1[4];
    }
  }
  if (*((_BYTE *)a2 + 88))
  {
    if ((unint64_t)&a1[3][-v7] > 6)
    {
      *(_DWORD *)(v7 + 3) = 543452777;
      *(_DWORD *)v7 = 1769434741;
      v7 = (unint64_t)(a1[4] + 7);
      a1[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, "unwind ", 7uLL);
      v7 = (unint64_t)a1[4];
    }
  }
  if (v7 >= (unint64_t)a1[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 34);
  }
  else
  {
    a1[4] = (char *)(v7 + 1);
    *(_BYTE *)v7 = 34;
  }
  v20 = *((char *)a2 + 47);
  if (v20 >= 0)
    v21 = (const llvm::Value *)((char *)a2 + 24);
  else
    v21 = (llvm::raw_ostream *)*((_QWORD *)a2 + 3);
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)a2 + 47);
  else
    v22 = *((_QWORD *)a2 + 4);
  llvm::printEscapedString(v21, v22, (llvm::raw_ostream *)a1);
  v23 = a1[4];
  if ((unint64_t)(a1[3] - v23) > 3)
  {
    *(_DWORD *)v23 = 572533794;
    a1[4] += 4;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, "\", \"", 4uLL);
  }
  v26 = (llvm::raw_ostream *)*((_QWORD *)a2 + 6);
  v25 = (uint64_t *)((char *)a2 + 48);
  v24 = v26;
  v27 = *((char *)v25 + 23);
  if (v27 >= 0)
    v28 = (llvm::raw_ostream *)v25;
  else
    v28 = v24;
  if (v27 >= 0)
    v29 = *((unsigned __int8 *)v25 + 23);
  else
    v29 = v25[1];
  llvm::printEscapedString(v28, v29, (llvm::raw_ostream *)a1);
  v30 = a1[4];
  if (v30 >= a1[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 34);
  }
  else
  {
    a1[4] = v30 + 1;
    *v30 = 34;
  }
}

void `anonymous namespace'::AssemblyWriter::writeAttributeSet(llvm::raw_ostream **this, const llvm::AttributeSet *a2)
{
  llvm::Attribute *v3;
  llvm::Attribute *v4;
  char i;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  char *NameFromAttrKind;
  size_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  std::string __p;

  if (a2)
    v3 = (const llvm::AttributeSet *)((char *)a2 + 48);
  else
    v3 = 0;
  if (a2)
    v4 = (const llvm::AttributeSet *)((char *)a2 + 8 * *((unsigned int *)a2 + 2) + 48);
  else
    v4 = 0;
  if (v3 != v4)
  {
    for (i = 1; ; i = 0)
    {
      if ((i & 1) == 0)
      {
        v6 = *this;
        v7 = (_BYTE *)*((_QWORD *)*this + 4);
        if ((unint64_t)v7 >= *((_QWORD *)*this + 3))
        {
          llvm::raw_ostream::write(v6, 32);
        }
        else
        {
          *((_QWORD *)v6 + 4) = v7 + 1;
          *v7 = 32;
        }
      }
      v8 = *(_QWORD *)v3;
      if (!*(_QWORD *)v3)
        break;
      v9 = *this;
      if (*(_BYTE *)(v8 + 8) != 3)
        goto LABEL_20;
      NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v8 + 12));
      llvm::raw_ostream::operator<<(v9, NameFromAttrKind, v11);
      if (*(_QWORD *)v3)
      {
        v12 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        if (v12)
        {
          v13 = *this;
          v14 = (_BYTE *)*((_QWORD *)*this + 4);
          if ((unint64_t)v14 >= *((_QWORD *)*this + 3))
          {
            llvm::raw_ostream::write(v13, 40);
          }
          else
          {
            *((_QWORD *)v13 + 4) = v14 + 1;
            *v14 = 40;
          }
          v17 = *this;
          v18 = (_BYTE *)*((_QWORD *)*this + 4);
          if ((unint64_t)v18 >= *((_QWORD *)*this + 3))
          {
            llvm::raw_ostream::write(v17, 41);
          }
          else
          {
            *((_QWORD *)v17 + 4) = v18 + 1;
            *v18 = 41;
          }
        }
      }
LABEL_28:
      v3 = (llvm::Attribute *)((char *)v3 + 8);
      if (v3 == v4)
        return;
    }
    v9 = *this;
LABEL_20:
    llvm::Attribute::getAsString(v3, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v9, (const char *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
}

llvm::raw_ostream *maybePrintComdat(llvm::raw_ostream *this, uint64_t a2)
{
  size_t **v2;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  _DWORD *v6;
  size_t *ValueName;
  size_t v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;

  v2 = *(size_t ***)(a2 + 48);
  if (v2)
  {
    v4 = this;
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      v5 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v5 >= *((_QWORD *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 44);
      }
      else
      {
        *((_QWORD *)this + 4) = v5 + 1;
        *v5 = 44;
      }
    }
    v6 = (_DWORD *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 6uLL)
    {
      *(_DWORD *)((char *)v6 + 3) = 1952539757;
      *v6 = 1836016416;
      *((_QWORD *)v4 + 4) += 7;
    }
    else
    {
      this = llvm::raw_ostream::write(v4, " comdat", 7uLL);
    }
    if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
    {
      ValueName = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
      v9 = *ValueName;
      this = (llvm::raw_ostream *)(ValueName + 2);
      v8 = v9;
      if (v9 == **v2)
      {
        if (!v8)
          return this;
        this = (llvm::raw_ostream *)memcmp(this, *v2 + 9, v8);
        if (!(_DWORD)this)
          return this;
      }
    }
    else if (!**v2)
    {
      return this;
    }
    v10 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 40);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v10 + 1;
      *v10 = 40;
    }
    this = PrintLLVMName(v4, (unsigned __int8 *)*v2 + 72, **v2, 1);
    v11 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v4 + 3))
    {
      return llvm::raw_ostream::write(v4, 41);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v11 + 1;
      *v11 = 41;
    }
  }
  return this;
}

void `anonymous namespace'::AssemblyWriter::writeOperand(llvm::SlotTracker **this, const llvm::Value *a2, int a3)
{
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  void *v8;
  llvm::SlotTracker *v9;
  char **v10;
  llvm::SlotTracker *v11;
  llvm::SlotTracker *v12[4];

  if (a2)
  {
    if (a3)
    {
      v5 = *this;
      v6 = (_BYTE *)*((_QWORD *)*this + 4);
      if ((unint64_t)v6 >= *((_QWORD *)*this + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v6 + 1;
        *v6 = 32;
      }
    }
    v9 = this[4];
    v12[0] = (llvm::SlotTracker *)&off_251C1E428;
    v12[1] = (llvm::SlotTracker *)(this + 5);
    v10 = (char **)*this;
    v11 = this[1];
    v12[2] = v9;
    v12[3] = v11;
    WriteAsOperandInternal(v10, a2, v12);
  }
  else
  {
    v7 = *this;
    v8 = (void *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v8 > 0xEuLL)
    {
      qmemcpy(v8, "<null operand!>", 15);
      *((_QWORD *)v7 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v7, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::printUseLists(_anonymous_namespace_::AssemblyWriter *this, const llvm::Function *a2)
{
  llvm::raw_ostream *result;
  llvm::SlotTracker *v4;
  BOOL v5;
  void *v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  unint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _DWORD *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _WORD *v27;
  llvm::SlotTracker *v28;
  char **v29;
  llvm::SlotTracker *v30;
  llvm::SlotTracker *v31[4];

  v31[0] = 0;
  result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(*((_QWORD *)this + 36), *((_DWORD *)this + 76), (uint64_t)a2, v31);
  v4 = v31[0];
  if ((_DWORD)result)
    v5 = v31[0] == (llvm::SlotTracker *)(*((_QWORD *)this + 36) + 56 * *((unsigned int *)this + 76));
  else
    v5 = 1;
  if (!v5)
  {
    result = *(llvm::raw_ostream **)this;
    v6 = *(void **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v6 > 0x1AuLL)
    {
      qmemcpy(v6, "\n; uselistorder directives\n", 27);
      *((_QWORD *)result + 4) += 27;
    }
    else
    {
      result = llvm::raw_ostream::write(result, "\n; uselistorder directives\n", 0x1BuLL);
    }
    v8 = (uint64_t *)*((_QWORD *)v4 + 4);
    for (i = (uint64_t *)*((_QWORD *)v4 + 5); v8 != i; v8 += 4)
    {
      v9 = *v8;
      v10 = *(llvm::raw_ostream **)this;
      v11 = *(_QWORD *)(*(_QWORD *)this + 32);
      v12 = *(_QWORD *)(*(_QWORD *)this + 24) - v11;
      if (*(_QWORD *)(*((_QWORD *)this + 4) + 16))
      {
        if (v12 > 1)
        {
          *(_WORD *)v11 = 8224;
          *((_QWORD *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, "  ", 2uLL);
        }
        v13 = *(llvm::raw_ostream **)this;
        v14 = *(_QWORD *)(*(_QWORD *)this + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v14) > 0xB)
        {
          *(_DWORD *)(v14 + 8) = 1919247474;
          *(_QWORD *)v14 = *(_QWORD *)"uselistorder";
          *((_QWORD *)v13 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v13, "uselistorder", 0xCuLL);
        }
      }
      else
      {
        if (v12 > 0xB)
        {
          *(_DWORD *)(v11 + 8) = 1919247474;
          *(_QWORD *)v11 = *(_QWORD *)"uselistorder";
          *((_QWORD *)v10 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v10, "uselistorder", 0xCuLL);
        }
        if (*(_BYTE *)(v9 + 16) == 22)
        {
          v15 = *(llvm::raw_ostream **)this;
          v16 = *(_DWORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v16 > 3uLL)
          {
            *v16 = 543318623;
            *((_QWORD *)v15 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v15, "_bb ", 4uLL);
          }
          v26 = *(llvm::raw_ostream **)this;
          v27 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v27 > 1uLL)
          {
            *v27 = 8236;
            *((_QWORD *)v26 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v26, ", ", 2uLL);
          }
          v28 = (llvm::SlotTracker *)*((_QWORD *)this + 4);
          v31[0] = (llvm::SlotTracker *)&off_251C1E428;
          v31[1] = (_anonymous_namespace_::AssemblyWriter *)((char *)this + 40);
          v29 = *(char ***)this;
          v30 = (llvm::SlotTracker *)*((_QWORD *)this + 1);
          v31[2] = v28;
          v31[3] = v30;
          WriteAsOperandInternal(v29, (const llvm::Value *)v9, v31);
          goto LABEL_26;
        }
      }
      v17 = *(llvm::raw_ostream **)this;
      v18 = *(_BYTE **)(*(_QWORD *)this + 32);
      if (*(_BYTE **)(*(_QWORD *)this + 24) == v18)
      {
        llvm::raw_ostream::write(v17, " ", 1uLL);
      }
      else
      {
        *v18 = 32;
        ++*((_QWORD *)v17 + 4);
      }
LABEL_26:
      v19 = *(llvm::raw_ostream **)this;
      v20 = *(_DWORD **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v20 > 3uLL)
      {
        *v20 = 544940076;
        *((_QWORD *)v19 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v19, ", { ", 4uLL);
      }
      write_unsigned<unsigned long>(*(llvm::raw_ostream **)this, *(unsigned int *)v8[1], 0, 0, 0);
      v21 = (unint64_t)(v8[2] - v8[1]) >> 2;
      if ((_DWORD)v21 != 1)
      {
        v22 = 1;
        do
        {
          v23 = *(llvm::raw_ostream **)this;
          v24 = *(_WORD **)(*(_QWORD *)this + 32);
          if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v24 > 1uLL)
          {
            *v24 = 8236;
            *((_QWORD *)v23 + 4) += 2;
          }
          else
          {
            v23 = llvm::raw_ostream::write(v23, ", ", 2uLL);
          }
          write_unsigned<unsigned long>(v23, *(unsigned int *)(v8[1] + 4 * v22++), 0, 0, 0);
        }
        while ((_DWORD)v21 != (_DWORD)v22);
      }
      result = *(llvm::raw_ostream **)this;
      v25 = *(_QWORD *)(*(_QWORD *)this + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v25) > 2)
      {
        *(_BYTE *)(v25 + 2) = 10;
        *(_WORD *)v25 = 32032;
        *((_QWORD *)result + 4) += 3;
      }
      else
      {
        result = llvm::raw_ostream::write(result, " }\n", 3uLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *printMetadataIdentifier(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  int v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  void *v8;
  _BYTE *v10;
  char v11;
  int v12;
  char *v13;
  char v14;
  int v15;
  __darwin_ct_rune_t v16;
  unint64_t v17;
  char *v19;
  char v20;
  _BYTE *v21;
  char v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  char v26;
  char *v27;
  char *v28;

  if (!a2)
  {
    v8 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v8 <= 0xCuLL)
      return llvm::raw_ostream::write(a3, "<empty name> ", 0xDuLL);
    qmemcpy(v8, "<empty name> ", 13);
    *((_QWORD *)a3 + 4) += 13;
    return result;
  }
  v4 = a2;
  v5 = result;
  v6 = *(char *)result;
  v7 = MEMORY[0x24BDAC740];
  if (v6 < 0)
  {
    result = (llvm::raw_ostream *)__maskrune(*(unsigned __int8 *)result, 0x100uLL);
    LOBYTE(v6) = *v5;
    if (!(_DWORD)result)
      goto LABEL_8;
LABEL_12:
    v10 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v10 < *((_QWORD *)a3 + 3))
    {
      *((_QWORD *)a3 + 4) = v10 + 1;
      *v10 = v6;
      goto LABEL_16;
    }
    v11 = v6;
    goto LABEL_15;
  }
  result = (llvm::raw_ostream *)(*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *(unsigned __int8 *)result + 60) & 0x100);
  if ((_DWORD)result)
    goto LABEL_12;
LABEL_8:
  if (v6 - 36 <= 0x3B
    && ((1 << (v6 - 36)) & 0x800000000000601) != 0)
  {
    goto LABEL_12;
  }
  v25 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)a3 + 3))
  {
    result = llvm::raw_ostream::write(a3, 92);
  }
  else
  {
    *((_QWORD *)a3 + 4) = v25 + 1;
    *v25 = 92;
  }
  v26 = llvm::hexdigit(unsigned int,BOOL)::LUT[(char)*v5 >> 4];
  v27 = (char *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)a3 + 3))
  {
    result = llvm::raw_ostream::write(a3, v26);
  }
  else
  {
    *((_QWORD *)a3 + 4) = v27 + 1;
    *v27 = v26;
  }
  v11 = llvm::hexdigit(unsigned int,BOOL)::LUT[*v5 & 0xF];
  v28 = (char *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v28 >= *((_QWORD *)a3 + 3))
  {
LABEL_15:
    result = llvm::raw_ostream::write(a3, v11);
    goto LABEL_16;
  }
  *((_QWORD *)a3 + 4) = v28 + 1;
  *v28 = v11;
LABEL_16:
  v12 = v4 - 1;
  if (v12)
  {
    v13 = v5 + 1;
    do
    {
      v15 = *v13++;
      v14 = v15;
      v16 = v15;
      v17 = v15;
      if (v15 < 0)
      {
        result = (llvm::raw_ostream *)__maskrune(v16, 0x500uLL);
        if ((_DWORD)result)
          goto LABEL_26;
      }
      else
      {
        result = (llvm::raw_ostream *)(*(_DWORD *)(v7 + 4 * v17 + 60) & 0x500);
        if ((_DWORD)result)
          goto LABEL_26;
      }
      if ((v16 - 36) > 0x3B || ((1 << (v16 - 36)) & 0x800000000000601) == 0)
      {
        v21 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v21 >= *((_QWORD *)a3 + 3))
        {
          result = llvm::raw_ostream::write(a3, 92);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v21 + 1;
          *v21 = 92;
        }
        v22 = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 >> 4];
        v23 = (char *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v23 >= *((_QWORD *)a3 + 3))
        {
          result = llvm::raw_ostream::write(a3, v22);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v23 + 1;
          *v23 = v22;
        }
        v20 = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 & 0xF];
        v24 = (char *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v24 < *((_QWORD *)a3 + 3))
        {
          *((_QWORD *)a3 + 4) = v24 + 1;
          *v24 = v20;
          goto LABEL_30;
        }
        goto LABEL_29;
      }
LABEL_26:
      v19 = (char *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v19 >= *((_QWORD *)a3 + 3))
      {
        v20 = v14;
LABEL_29:
        result = llvm::raw_ostream::write(a3, v20);
        goto LABEL_30;
      }
      *((_QWORD *)a3 + 4) = v19 + 1;
      *v19 = v14;
LABEL_30:
      --v12;
    }
    while (v12);
  }
  return result;
}

void WriteAsOperandInternal(llvm::raw_ostream *this, uint64_t **a2, uint64_t *a3)
{
  int v6;
  void (***v7)(llvm::SlotTracker *__hidden);
  uint64_t v8;
  void (**v9)(llvm::SlotTracker *__hidden);
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  _WORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;

  v6 = *(unsigned __int8 *)a2;
  if (v6 == 33)
  {
    writeDIArgList(this, (const llvm::DIArgList *)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
  }
  else if (v6 == 6)
  {
    writeDIExpression(this, (unsigned int **)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
  }
  else if (llvm::MDNode::classof(a2))
  {
    v7 = (void (***)(llvm::SlotTracker *__hidden))a3[2];
    if (v7)
    {
      v8 = 0;
      v9 = *v7;
      v10 = a3[2];
    }
    else
    {
      v10 = operator new();
      v12 = a3[3];
      v9 = &off_251C1E370;
      *(_QWORD *)v10 = &off_251C1E370;
      *(_QWORD *)(v10 + 8) = v12;
      *(_QWORD *)(v10 + 16) = 0;
      *(_WORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 128) = 0;
      *(_QWORD *)(v10 + 136) = 0;
      *(_QWORD *)(v10 + 144) = 0;
      *(_DWORD *)(v10 + 152) = 0;
      *(_DWORD *)(v10 + 160) = 0;
      *(_QWORD *)(v10 + 168) = 0;
      *(_QWORD *)(v10 + 176) = 0;
      *(_DWORD *)(v10 + 184) = 0;
      *(_DWORD *)(v10 + 192) = 0;
      *(_QWORD *)(v10 + 200) = 0;
      *(_QWORD *)(v10 + 208) = 0;
      *(_DWORD *)(v10 + 216) = 0;
      *(_DWORD *)(v10 + 224) = 0;
      *(_QWORD *)(v10 + 232) = 0;
      *(_QWORD *)(v10 + 240) = 0;
      *(_DWORD *)(v10 + 248) = 0;
      *(_DWORD *)(v10 + 120) = 0;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_QWORD *)(v10 + 252) = 16;
      *(_QWORD *)(v10 + 264) = 0;
      *(_QWORD *)(v10 + 272) = 0;
      *(_DWORD *)(v10 + 280) = 0;
      *(_DWORD *)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
      *(_QWORD *)(v10 + 304) = 0;
      *(_DWORD *)(v10 + 312) = 0;
      *(_QWORD *)(v10 + 316) = 16;
      v8 = v10;
      a3[2] = v10;
    }
    v13 = ((uint64_t (*)(uint64_t, uint64_t **))v9[4])(v10, a2);
    if (v13 == -1)
    {
      if (*(_BYTE *)a2 == 5)
      {
        writeDILocation(this, (const llvm::DILocation *)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
      }
      else
      {
        v18 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v18)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v18 = 60;
          ++*((_QWORD *)this + 4);
        }
        llvm::write_hex(this, (unint64_t)a2, 3, 0, 0);
        v19 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v19)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *v19 = 62;
          ++*((_QWORD *)this + 4);
        }
      }
    }
    else
    {
      v14 = v13;
      v15 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v15 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 33);
      }
      else
      {
        *((_QWORD *)this + 4) = v15 + 1;
        *v15 = 33;
      }
      llvm::write_integer(this, v14, 0, 0);
    }
    a3[2] = (uint64_t)v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else if (*(_BYTE *)a2)
  {
    v11 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v11 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 32);
    }
    else
    {
      *((_QWORD *)this + 4) = v11 + 1;
      *v11 = 32;
    }
    WriteAsOperandInternal((char **)this, (const llvm::Value *)a2[16], (llvm::SlotTracker **)a3);
  }
  else
  {
    v16 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v16 > 1uLL)
    {
      *v16 = 8737;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "!\"", 2uLL);
    }
    llvm::printEscapedString((llvm::raw_ostream *)(a2[1] + 3), *a2[1], this);
    v17 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v17 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 34);
    }
    else
    {
      *((_QWORD *)this + 4) = v17 + 1;
      *v17 = 34;
    }
  }
}

uint64_t writeDIExpression(llvm::raw_ostream *this, unsigned int **a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  void *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  unsigned int *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  const char *v18;
  size_t v19;
  int Size;
  uint64_t v21;
  unint64_t *v22;
  llvm::raw_ostream *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;

  v5 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0xDuLL)
  {
    qmemcpy(v5, "!DIExpression(", 14);
    *((_QWORD *)this + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DIExpression(", 0xEuLL);
  }
  result = llvm::DIExpression::isValid((llvm::DIExpression *)a2);
  v8 = a2[2];
  v7 = a2[3];
  v9 = (char *)v7 - (char *)v8;
  if ((_DWORD)result)
  {
    v30 = a2[2];
    if (v7 != v8)
    {
      v10 = 0;
      v11 = (unsigned int *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        v12 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*v8);
        v14 = v13;
        v15 = this;
        if ((v10 & 1) != 0)
          v15 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
        llvm::raw_ostream::operator<<(v15, v12, v14);
        if (*(_QWORD *)v8 == 4097)
        {
          v16 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
          write_unsigned<unsigned long>(v16, *((_QWORD *)v8 + 1), 0, 0, 0);
          v17 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
          v18 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)v8[4]);
          llvm::raw_ostream::operator<<(v17, v18, v19);
        }
        else
        {
          Size = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v30);
          v21 = (Size - 1);
          if (Size != 1)
          {
            v22 = (unint64_t *)(v8 + 2);
            do
            {
              v23 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
              v24 = *v22++;
              write_unsigned<unsigned long>(v23, v24, 0, 0, 0);
              --v21;
            }
            while (v21);
          }
        }
        result = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v30);
        v8 += 2 * result;
        v30 = v8;
        v10 = 1;
      }
      while (v8 != v11);
    }
  }
  else if (v7 != v8)
  {
    v25 = 0;
    v26 = 8 * (v9 >> 3);
    do
    {
      v27 = this;
      if ((v25 & 1) != 0)
        v27 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
      v28 = *(_QWORD *)v8;
      v8 += 2;
      result = (uint64_t)write_unsigned<unsigned long>(v27, v28, 0, 0, 0);
      v25 = 1;
      v26 -= 8;
    }
    while (v26);
  }
  v29 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v29)
    return (uint64_t)llvm::raw_ostream::write(this, ")", 1uLL);
  *v29 = 41;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *writeDIArgList(llvm::raw_ostream *this, const llvm::DIArgList *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  llvm::DIExpression **v8;
  uint64_t v9;
  llvm::DIExpression *v10;
  _BYTE *v11;

  v4 = this;
  v5 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 678720361;
    *(_QWORD *)v5 = *(_QWORD *)"!DIArgList(";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "!DIArgList(", 0xBuLL);
  }
  v6 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (llvm::DIExpression **)*((_QWORD *)a2 + 2);
    v9 = 8 * v6;
    do
    {
      v10 = *v8;
      if ((v7 & 1) != 0)
        llvm::raw_ostream::operator<<(v4, ", ", 2uLL);
      this = (llvm::raw_ostream *)WriteAsOperandInternal(v4, v10);
      ++v8;
      v7 = 1;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v11)
    return llvm::raw_ostream::write(v4, ")", 1uLL);
  *v11 = 41;
  ++*((_QWORD *)v4 + 4);
  return this;
}

llvm::raw_ostream *writeDILocation(llvm::raw_ostream *this, const llvm::DILocation *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  llvm::DIExpression **v9;
  _QWORD *v10;
  llvm::DIExpression *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  char v15;
  const char *v16;
  _anonymous_namespace_::AsmWriterContext *v17;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 0xB)
  {
    *(_DWORD *)(v6 + 8) = 678326121;
    *(_QWORD *)v6 = *(_QWORD *)"!DILocation(";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DILocation(", 0xCuLL);
  }
  v14 = this;
  v15 = 1;
  v16 = ", ";
  v17 = a3;
  v8 = (_QWORD *)((char *)a2 - 16);
  v7 = *((_QWORD *)a2 - 2);
  if ((v7 & 2) != 0)
    v9 = (llvm::DIExpression **)*((_QWORD *)a2 - 4);
  else
    v9 = (llvm::DIExpression **)&v8[-((v7 >> 2) & 0xF)];
  if ((*v8 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) == 2)
    {
      v10 = (_QWORD *)*((_QWORD *)a2 - 4);
      goto LABEL_12;
    }
  }
  else if ((*v8 & 0x3C0) == 0x80)
  {
    v10 = &v8[-((*v8 >> 2) & 0xFLL)];
LABEL_12:
    v11 = (llvm::DIExpression *)v10[1];
    goto LABEL_14;
  }
  v11 = 0;
LABEL_14:
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v13)
    return llvm::raw_ostream::write(this, ")", 1uLL);
  *v13 = 41;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printInt<unsigned int>(llvm::raw_ostream *result, const void *a2, size_t __n, unsigned int a4, char a5)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;

  v8 = result;
  if (a4 || (a5 & 1) == 0)
  {
    v9 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)v8 + 8))
      *((_BYTE *)v8 + 8) = 0;
    else
      v9 = llvm::raw_ostream::operator<<(v9, *((char **)v8 + 2));
    v10 = llvm::raw_ostream::operator<<(v9, a2, __n);
    v11 = (_WORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 8250;
      *((_QWORD *)v10 + 4) += 2;
    }
    else
    {
      v10 = llvm::raw_ostream::write(v10, ": ", 2uLL);
    }
    return write_unsigned<unsigned long>(v10, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printMetadata(llvm::raw_ostream *result, const void *a2, size_t __n, llvm::DIExpression *a4, char a5)
{
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;

  v8 = (uint64_t)result;
  if (a4 || (a5 & 1) == 0)
  {
    v9 = *(llvm::raw_ostream **)result;
    if (*(_BYTE *)(v8 + 8))
      *(_BYTE *)(v8 + 8) = 0;
    else
      v9 = llvm::raw_ostream::operator<<(v9, *(char **)(v8 + 16));
    v10 = llvm::raw_ostream::operator<<(v9, a2, __n);
    v11 = (_WORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 8250;
      *((_QWORD *)v10 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v10, ": ", 2uLL);
    }
    return writeMetadataAsOperand(*(llvm::raw_ostream **)v8, a4, *(uint64_t (****)(_QWORD, llvm::DIExpression *))(v8 + 24));
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printBool(llvm::raw_ostream *result, const void *a2, size_t __n, int a4, __int16 a5)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  size_t v11;
  const char *v12;

  if ((a5 & 0xFF00) == 0 || a4 != a5)
  {
    v8 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
      *((_BYTE *)result + 8) = 0;
    else
      v8 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)result, *((char **)result + 2));
    v9 = llvm::raw_ostream::operator<<(v8, a2, __n);
    v10 = (_WORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
    {
      *v10 = 8250;
      *((_QWORD *)v9 + 4) += 2;
    }
    else
    {
      v9 = llvm::raw_ostream::write(v9, ": ", 2uLL);
    }
    if (a4)
      v11 = 4;
    else
      v11 = 5;
    if (a4)
      v12 = "true";
    else
      v12 = "false";
    return llvm::raw_ostream::operator<<(v9, v12, v11);
  }
  return result;
}

llvm::raw_ostream *writeMetadataAsOperand(llvm::raw_ostream *result, llvm::DIExpression *a2, uint64_t (***a3)(_QWORD, llvm::DIExpression *))
{
  _DWORD *v5;

  if (a2)
  {
    WriteAsOperandInternal(result, a2);
    return (llvm::raw_ostream *)(**a3)(a3, a2);
  }
  else
  {
    v5 = (_DWORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v5 > 3uLL)
    {
      *v5 = 1819047278;
      *((_QWORD *)result + 4) += 4;
    }
    else
    {
      return llvm::raw_ostream::write(result, "null", 4uLL);
    }
  }
  return result;
}

void createSlotTracker(const llvm::Value *a1)
{
  unsigned int v2;
  llvm::SlotTracker *v3;
  const Function *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v2 == 21)
  {
    v3 = (llvm::SlotTracker *)operator new();
    v4 = (const Function *)*((_QWORD *)a1 + 3);
LABEL_11:
    llvm::SlotTracker::SlotTracker(v3, v4);
    return;
  }
  if (a1 && v2 >= 0x1C)
  {
    if (*((_QWORD *)a1 + 5))
    {
      v3 = (llvm::SlotTracker *)operator new();
      v4 = *(const Function **)(*((_QWORD *)a1 + 5) + 56);
      goto LABEL_11;
    }
  }
  else
  {
    if (a1 && v2 == 22)
    {
      v3 = (llvm::SlotTracker *)operator new();
      v4 = (const Function *)*((_QWORD *)a1 + 7);
      goto LABEL_11;
    }
    if (a1 && v2 == 3 || a1 && v2 == 1 || a1 && v2 == 2)
    {
      v5 = operator new();
      v6 = *((_QWORD *)a1 + 5);
      *(_QWORD *)v5 = &off_251C1E370;
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)(v5 + 16) = 0;
      *(_WORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 128) = 0;
      *(_QWORD *)(v5 + 136) = 0;
      *(_QWORD *)(v5 + 144) = 0;
      *(_DWORD *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      *(_QWORD *)(v5 + 168) = 0;
      *(_QWORD *)(v5 + 176) = 0;
      *(_DWORD *)(v5 + 184) = 0;
      *(_DWORD *)(v5 + 192) = 0;
      *(_QWORD *)(v5 + 200) = 0;
      *(_QWORD *)(v5 + 208) = 0;
      *(_DWORD *)(v5 + 216) = 0;
      *(_DWORD *)(v5 + 224) = 0;
      *(_QWORD *)(v5 + 232) = 0;
      *(_QWORD *)(v5 + 240) = 0;
      *(_DWORD *)(v5 + 248) = 0;
      *(_DWORD *)(v5 + 120) = 0;
      *(_OWORD *)(v5 + 104) = 0u;
      *(_OWORD *)(v5 + 88) = 0u;
      *(_QWORD *)(v5 + 252) = 16;
      *(_QWORD *)(v5 + 264) = 0;
      *(_QWORD *)(v5 + 272) = 0;
      *(_DWORD *)(v5 + 280) = 0;
      *(_DWORD *)(v5 + 288) = 0;
      *(_QWORD *)(v5 + 296) = 0;
      *(_QWORD *)(v5 + 304) = 0;
      *(_DWORD *)(v5 + 312) = 0;
      *(_QWORD *)(v5 + 316) = 16;
      return;
    }
    if (a1 && !*((_BYTE *)a1 + 16))
    {
      v3 = (llvm::SlotTracker *)operator new();
      v4 = (const Function *)a1;
      goto LABEL_11;
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>,llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = (void **)(*(_QWORD *)result + 32);
    do
    {
      if (((unint64_t)*(v3 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = v3;
        std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__destroy_vector::operator()[abi:nn180100](&v4);
        result = MEMORY[0x24BD1B398](*(v3 - 3), 8);
      }
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
  return result;
}

void `anonymous namespace'::TypePrinting::incorporateTypes(_anonymous_namespace_::TypePrinting *this)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  if (*(_QWORD *)this)
  {
    llvm::TypeFinder::run((_anonymous_namespace_::TypePrinting *)((char *)this + 8), *(const llvm::Module **)this, 0);
    *(_QWORD *)this = 0;
    v2 = (uint64_t *)*((_QWORD *)this + 13);
    v3 = (uint64_t *)*((_QWORD *)this + 14);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = (uint64_t *)*((_QWORD *)this + 13);
      while (1)
      {
        v6 = *v5;
        if ((*(_BYTE *)(*v5 + 9) & 4) == 0)
        {
          v7 = *(_QWORD **)(v6 + 24);
          if (!v7 || !*v7)
          {
            v12 = 0;
            v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 17), *((_DWORD *)this + 38), v6, &v12);
            v9 = v12;
            if ((v8 & 1) == 0)
            {
              v10 = *((_DWORD *)this + 36);
              v11 = *((_DWORD *)this + 38);
              if (4 * v10 + 4 >= 3 * v11)
              {
                v11 *= 2;
              }
              else if (v11 + ~v10 - *((_DWORD *)this + 37) > v11 >> 3)
              {
                goto LABEL_11;
              }
              llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow((uint64_t)this + 136, v11);
              v12 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 17), *((_DWORD *)this + 38), v6, &v12);
              v9 = v12;
LABEL_11:
              ++*((_DWORD *)this + 36);
              if (*(_QWORD *)v9 != -4096)
                --*((_DWORD *)this + 37);
              *(_QWORD *)v9 = v6;
              *(_DWORD *)(v9 + 8) = 0;
            }
            *(_DWORD *)(v9 + 8) = v4++;
            goto LABEL_15;
          }
          *v2++ = v6;
        }
LABEL_15:
        if (++v5 == v3)
        {
          if (v2 != *((uint64_t **)this + 14))
            *((_QWORD *)this + 14) = v2;
          return;
        }
      }
    }
  }
}

void WriteMDNodeBodyInternal(llvm::raw_ostream *this, const llvm::MDNode *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  int v4;
  const char *v5;
  size_t v6;

  v4 = *((_BYTE *)a2 + 1) & 0x7F;
  if (v4 == 1)
  {
    v5 = "distinct ";
    v6 = 9;
  }
  else
  {
    if (v4 != 2)
      goto LABEL_6;
    v5 = "<temporary!> ";
    v6 = 13;
  }
  llvm::raw_ostream::operator<<(this, v5, v6);
LABEL_6:
  __asm { BR              X10 }
}

void sub_24A9921EC()
{
  llvm::raw_ostream *v0;
  uint64_t v1;
  uint64_t v2;
  _WORD *v3;
  unint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  _WORD *v9;
  unint64_t *i;
  unsigned __int8 *v11;
  _DWORD *v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;

  v3 = (_WORD *)*((_QWORD *)v0 + 4);
  if (*((_QWORD *)v0 + 3) - (_QWORD)v3 > 1uLL)
  {
    *v3 = 31521;
    *((_QWORD *)v0 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v0, "!{", 2uLL);
  }
  v5 = (unint64_t *)(v1 - 16);
  v4 = *(_QWORD *)(v1 - 16);
  if ((v4 & 2) != 0)
    v6 = *(_DWORD *)(v1 - 24);
  else
    v6 = (v4 >> 6) & 0xF;
  if (v6)
  {
    v7 = 0;
    v8 = 8 * v6 - 8;
    if ((v4 & 2) != 0)
      goto LABEL_14;
LABEL_15:
    for (i = &v5[-((v4 >> 2) & 0xF)]; ; i = *(unint64_t **)(v1 - 32))
    {
      v11 = (unsigned __int8 *)i[v7 / 8];
      if (v11)
      {
        if (*v11 - 3 >= 0xFFFFFFFE)
        {
          v13 = (uint64_t *)*((_QWORD *)v11 + 16);
          v14 = (_BYTE *)*((_QWORD *)v0 + 4);
          if ((unint64_t)v14 >= *((_QWORD *)v0 + 3))
          {
            llvm::raw_ostream::write(v0, 32);
          }
          else
          {
            *((_QWORD *)v0 + 4) = v14 + 1;
            *v14 = 32;
          }
          WriteAsOperandInternal((char **)v0, (const llvm::Value *)v13, (llvm::SlotTracker **)v2);
        }
        else
        {
          WriteAsOperandInternal(v0, (uint64_t **)v11, (uint64_t *)v2);
          (**(void (***)(uint64_t, unsigned __int8 *))v2)(v2, v11);
        }
      }
      else
      {
        v12 = (_DWORD *)*((_QWORD *)v0 + 4);
        if (*((_QWORD *)v0 + 3) - (_QWORD)v12 > 3uLL)
        {
          *v12 = 1819047278;
          *((_QWORD *)v0 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v0, "null", 4uLL);
        }
      }
      if (v8 == v7)
        break;
      v9 = (_WORD *)*((_QWORD *)v0 + 4);
      if (*((_QWORD *)v0 + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8236;
        *((_QWORD *)v0 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v0, ", ", 2uLL);
      }
      v4 = *v5;
      v7 += 8;
      if ((*v5 & 2) == 0)
        goto LABEL_15;
LABEL_14:
      ;
    }
  }
  v15 = (_BYTE *)*((_QWORD *)v0 + 4);
  if (*((_BYTE **)v0 + 3) == v15)
  {
    llvm::raw_ostream::write(v0, "}", 1uLL);
  }
  else
  {
    *v15 = 125;
    ++*((_QWORD *)v0 + 4);
  }
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printTag(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  size_t v6;
  const char *v7;
  llvm::raw_ostream *v8;

  v4 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  else
    v4 = llvm::raw_ostream::operator<<(v4, *(char **)(a1 + 16));
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 32;
    *(_DWORD *)v5 = 979853684;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v4, "tag: ", 5uLL);
  }
  v7 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a2 + 2));
  v8 = *(llvm::raw_ostream **)a1;
  if (v6)
    return llvm::raw_ostream::operator<<(v8, v7, v6);
  else
    return llvm::write_integer(v8, *(unsigned __int16 *)(a2 + 2), 0, 0);
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printString(llvm::raw_ostream *result, const void *a2, size_t a3, llvm::raw_ostream *a4, uint64_t a5, int a6)
{
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  _BYTE *v14;

  v10 = result;
  if (!a6 || a5)
  {
    v11 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)v10 + 8))
      *((_BYTE *)v10 + 8) = 0;
    else
      v11 = llvm::raw_ostream::operator<<(v11, *((char **)v10 + 2));
    v12 = llvm::raw_ostream::operator<<(v11, a2, a3);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 2)
    {
      *(_BYTE *)(v13 + 2) = 34;
      *(_WORD *)v13 = 8250;
      *((_QWORD *)v12 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v12, ": \"", 3uLL);
    }
    llvm::printEscapedString(a4, a5, *(llvm::raw_ostream **)v10);
    result = *(llvm::raw_ostream **)v10;
    v14 = *(_BYTE **)(*(_QWORD *)v10 + 32);
    if (*(_BYTE **)(*(_QWORD *)v10 + 24) == v14)
    {
      return llvm::raw_ostream::write(result, "\"", 1uLL);
    }
    else
    {
      *v14 = 34;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printInt<long long>(uint64_t a1, const void *a2, size_t __n, unint64_t a4)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  v8 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 0;
  else
    v8 = llvm::raw_ostream::operator<<(v8, *(char **)(a1 + 16));
  v9 = llvm::raw_ostream::operator<<(v8, a2, __n);
  v10 = (_WORD *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8250;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, ": ", 2uLL);
  }
  return llvm::write_integer(v9, a4, 0, 0);
}

void `anonymous namespace'::AsmWriterContext::getEmpty(_anonymous_namespace_::AsmWriterContext *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      *(_QWORD *)algn_2579665B8 = 0;
      qword_2579665C0 = 0;
      unk_2579665C8 = 0;
    }
  }
}

llvm::raw_ostream *`anonymous namespace'::MDFieldPrinter::printInt<unsigned long long>(llvm::raw_ostream *result, const void *a2, size_t __n, unint64_t a4)
{
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  if (a4)
  {
    v7 = result;
    v8 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)v7 + 8))
      *((_BYTE *)v7 + 8) = 0;
    else
      v8 = llvm::raw_ostream::operator<<(v8, *((char **)v7 + 2));
    v9 = llvm::raw_ostream::operator<<(v8, a2, __n);
    v10 = (_WORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
    {
      *v10 = 8250;
      *((_QWORD *)v9 + 4) += 2;
    }
    else
    {
      v9 = llvm::raw_ostream::write(v9, ": ", 2uLL);
    }
    return write_unsigned<unsigned long>(v9, a4, 0, 0, 0);
  }
  return result;
}

void `anonymous namespace'::MDFieldPrinter::printDIFlags(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _WORD *v6;
  unsigned int v7;
  char v8;
  int *v9;
  uint64_t v10;
  const char *FlagString;
  size_t v12;
  size_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2)
  {
    v4 = *(llvm::raw_ostream **)a1;
    if (*(_BYTE *)(a1 + 8))
      *(_BYTE *)(a1 + 8) = 0;
    else
      v4 = llvm::raw_ostream::operator<<(v4, *(char **)(a1 + 16));
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 4)
    {
      *(_BYTE *)(v5 + 4) = 115;
      *(_DWORD *)v5 = 1734437990;
      v6 = (_WORD *)(*((_QWORD *)v4 + 4) + 5);
      *((_QWORD *)v4 + 4) = v6;
    }
    else
    {
      v4 = llvm::raw_ostream::write(v4, "flags", 5uLL);
      v6 = (_WORD *)*((_QWORD *)v4 + 4);
    }
    if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 1uLL)
    {
      *v6 = 8250;
      *((_QWORD *)v4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v4, ": ", 2uLL);
    }
    v16 = v18;
    v17 = 0x800000000;
    v7 = llvm::DINode::splitFlags(a2, (unsigned int *)&v16);
    if ((_DWORD)v17)
    {
      v8 = 0;
      v9 = (int *)v16;
      v10 = 4 * v17;
      do
      {
        FlagString = llvm::DINode::getFlagString(*v9);
        v13 = v12;
        v14 = *(llvm::raw_ostream **)a1;
        if ((v8 & 1) != 0)
          v14 = llvm::raw_ostream::operator<<(v14, " | ", 3uLL);
        llvm::raw_ostream::operator<<(v14, FlagString, v13);
        ++v9;
        v8 = 1;
        v10 -= 4;
      }
      while (v10);
      if (!v7 && (_DWORD)v17)
        goto LABEL_21;
      v15 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, " | ", 3uLL);
    }
    else
    {
      v15 = *(llvm::raw_ostream **)a1;
    }
    write_unsigned<unsigned long>(v15, v7, 0, 0, 0);
LABEL_21:
    if (v16 != v18)
      free(v16);
  }
}

uint64_t llvm::DISubprogram::getTargetFuncName(llvm::DISubprogram *this)
{
  unint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = *((_QWORD *)this - 2);
  if ((v1 & 2) != 0)
  {
    if (*((_DWORD *)this - 6) <= 0xCu)
      return 0;
    v2 = (char *)*((_QWORD *)this - 4);
  }
  else
  {
    if ((*((_QWORD *)this - 2) & 0x3C0uLL) <= 0x300)
      return 0;
    v2 = (char *)this - 8 * ((v1 >> 2) & 0xF) - 16;
  }
  v3 = *((_QWORD *)v2 + 12);
  if (v3)
    return *(_QWORD *)(v3 + 8) + 24;
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  if (!a2)
    return (uint64_t *)(a1 + 16 * a2);
  LODWORD(v3) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v4 = (uint64_t *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v6 = 1;
    while (v5 != -4096)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v5 = *(_QWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (uint64_t *)(a1 + 16 * v3);
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

llvm::raw_ostream *WriteOptimizationInfo(llvm::raw_ostream *a1, const llvm::User *a2)
{
  llvm::raw_ostream *result;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  char v17;
  _DWORD *v18;
  const char *v19;
  size_t v20;
  int v21;

  result = (llvm::raw_ostream *)llvm::FPMathOperator::classof((uint64_t)a2);
  if (a2 && (_DWORD)result)
  {
    v5 = *((unsigned __int8 *)a2 + 17) >> 1;
    if (v5 == 127)
      v5 = -1;
    v21 = v5;
    result = llvm::FastMathFlags::print((llvm::raw_ostream *)&v21, a1);
  }
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 >= 0x1C)
  {
    HIDWORD(v8) = v6 - 41;
    LODWORD(v8) = v6 - 41;
    v7 = v8 >> 1;
    v9 = v7 > 6;
    v10 = (1 << v7) & 0x47;
    if (!v9 && v10 != 0)
      goto LABEL_21;
    if (v6 > 0x3E)
      return result;
    if (((1 << v6) & 0xC1800000000000) == 0)
    {
      if (v6 != 62)
        return result;
LABEL_35:
      if ((*((_BYTE *)a2 + 17) & 2) == 0)
        return result;
      v19 = " inbounds";
      v20 = 9;
      return llvm::raw_ostream::operator<<(a1, v19, v20);
    }
    goto LABEL_32;
  }
  if ((_DWORD)v6 != 5)
    return result;
  v12 = *((unsigned __int16 *)a2 + 9);
  HIDWORD(v14) = v12 - 13;
  LODWORD(v14) = v12 - 13;
  v13 = v14 >> 1;
  v9 = v13 > 6;
  v15 = (1 << v13) & 0x47;
  if (v9 || v15 == 0)
  {
    if (v12 > 0x22)
      return result;
    if (((1 << v12) & 0xC180000) == 0)
    {
      if (v12 != 34)
        return result;
      goto LABEL_35;
    }
LABEL_32:
    if ((*((_BYTE *)a2 + 17) & 2) == 0)
      return result;
    v19 = " exact";
    v20 = 6;
    return llvm::raw_ostream::operator<<(a1, v19, v20);
  }
LABEL_21:
  v17 = *((_BYTE *)a2 + 17);
  if ((v17 & 2) != 0)
  {
    v18 = (_DWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v18 > 3uLL)
    {
      *v18 = 2004184608;
      *((_QWORD *)a1 + 4) += 4;
    }
    else
    {
      result = llvm::raw_ostream::write(a1, " nuw", 4uLL);
    }
    v17 = *((_BYTE *)a2 + 17);
  }
  if ((v17 & 4) != 0)
  {
    v19 = " nsw";
    v20 = 4;
    return llvm::raw_ostream::operator<<(a1, v19, v20);
  }
  return result;
}

llvm::raw_ostream *maybePrintCallAddrSpace(llvm::raw_ostream *result, const llvm::Instruction *a2, llvm::raw_ostream *this)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;

  if (!result)
  {
    v7 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v7 > 0x17uLL)
    {
      qmemcpy(v7, " <cannot get addrspace!>", 24);
      v12 = *((_QWORD *)this + 4) + 24;
      goto LABEL_15;
    }
    v8 = " <cannot get addrspace!>";
    v9 = this;
    v10 = 24;
    return llvm::raw_ostream::write(v9, v8, v10);
  }
  v4 = *(_DWORD *)(*(_QWORD *)result + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
  if (v4 > 0xFF || (result = (llvm::raw_ostream *)getModuleFromVal((uint64_t)a2)) == 0 || *((_DWORD *)result + 67))
  {
    v5 = v4 >> 8;
    v6 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 0xA)
    {
      *(_DWORD *)(v6 + 7) = 677733217;
      *(_QWORD *)v6 = *(_QWORD *)" addrspace(";
      *((_QWORD *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, " addrspace(", 0xBuLL);
    }
    result = write_unsigned<unsigned long>(this, v5, 0, 0, 0);
    v11 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) != v11)
    {
      *v11 = 41;
      v12 = *((_QWORD *)this + 4) + 1;
LABEL_15:
      *((_QWORD *)this + 4) = v12;
      return result;
    }
    v8 = ")";
    v9 = this;
    v10 = 1;
    return llvm::raw_ostream::write(v9, v8, v10);
  }
  return result;
}

void `anonymous namespace'::AssemblyWriter::writeParamOperand(llvm::raw_ostream **a1, uint64_t *a2, const llvm::AttributeSet *a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  void *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::SlotTracker *v12;
  llvm::raw_ostream *v13;
  llvm::SlotTracker *v14;
  llvm::SlotTracker *v15[4];

  if (a2)
  {
    if (a3)
    {
      v6 = *a1;
      v7 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v6, 32);
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 32;
      }
    }
    v10 = *a1;
    v11 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v12 = a1[4];
    v15[0] = (llvm::SlotTracker *)&off_251C1E428;
    v15[1] = (llvm::SlotTracker *)(a1 + 5);
    v13 = *a1;
    v14 = a1[1];
    v15[2] = v12;
    v15[3] = v14;
    WriteAsOperandInternal((char **)v13, (const llvm::Value *)a2, v15);
  }
  else
  {
    v8 = *a1;
    v9 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 > 0xEuLL)
    {
      qmemcpy(v9, "<null operand!>", 15);
      *((_QWORD *)v8 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v8, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::writeOperandBundles(llvm::raw_ostream *this, const llvm::CallBase *a2)
{
  int v2;
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::SlotTracker *v24;
  llvm::SlotTracker *v25;
  uint64_t **v26;
  char v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  llvm::raw_ostream *v33;
  void *v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  _WORD *v37;
  uint64_t v38;
  llvm::SlotTracker *v39[4];

  v2 = *((_DWORD *)a2 + 5);
  if (v2 < 0 && (*((_QWORD *)a2 - 4 * (v2 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) != 0)
  {
    v4 = (uint64_t)this;
    v5 = *(llvm::raw_ostream **)this;
    v6 = *((_QWORD *)v5 + 4);
    if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 2)
    {
      *(_BYTE *)(v6 + 2) = 32;
      *(_WORD *)v6 = 23328;
      *((_QWORD *)v5 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v5, " [ ", 3uLL);
    }
    v7 = *((_DWORD *)a2 + 5);
    if (v7 < 0)
    {
      v8 = *((_QWORD *)a2 - 4 * (v7 & 0x7FFFFFF) - 1);
      if ((v8 & 0xFFFFFFFF0) != 0)
      {
        v9 = 0;
        v38 = (v8 >> 4);
        v10 = 1;
        do
        {
          v11 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          v12 = (char *)a2 + 16 * v9 - *((_QWORD *)a2 - 4 * v11 - 1) + -32 * v11 - 8;
          v13 = *(unsigned int *)((char *)a2 + 16 * v9 - *((_QWORD *)a2 - 4 * v11 - 1) + -32 * v11);
          v14 = *((unsigned int *)v12 + 3);
          v15 = *(uint64_t **)v12;
          if ((v10 & 1) == 0)
          {
            v16 = *(llvm::raw_ostream **)v4;
            v17 = *(_WORD **)(*(_QWORD *)v4 + 32);
            if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v17 > 1uLL)
            {
              *v17 = 8236;
              *((_QWORD *)v16 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v16, ", ", 2uLL);
            }
          }
          v18 = *(llvm::raw_ostream **)v4;
          v19 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v19 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v18, 34);
          }
          else
          {
            *((_QWORD *)v18 + 4) = v19 + 1;
            *v19 = 34;
          }
          llvm::printEscapedString((llvm::raw_ostream *)(v15 + 2), *v15, *(llvm::raw_ostream **)v4);
          v20 = *(llvm::raw_ostream **)v4;
          v21 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v21 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v20, 34);
          }
          else
          {
            *((_QWORD *)v20 + 4) = v21 + 1;
            *v21 = 34;
          }
          v22 = *(llvm::raw_ostream **)v4;
          v23 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v23 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v22, 40);
          }
          else
          {
            *((_QWORD *)v22 + 4) = v23 + 1;
            *v23 = 40;
          }
          v24 = *(llvm::SlotTracker **)(v4 + 32);
          v25 = *(llvm::SlotTracker **)(v4 + 8);
          v39[0] = (llvm::SlotTracker *)&off_251C1E428;
          v39[1] = (llvm::SlotTracker *)(v4 + 40);
          v39[2] = v24;
          v39[3] = v25;
          if ((_DWORD)v13 != (_DWORD)v14)
          {
            v26 = (uint64_t **)((char *)a2 + 32 * v13 + -32 * v11);
            v27 = 1;
            v28 = 32 * v14 - 32 * v13;
            do
            {
              if ((v27 & 1) == 0)
              {
                v29 = *(llvm::raw_ostream **)v4;
                v30 = *(_WORD **)(*(_QWORD *)v4 + 32);
                if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v30 > 1uLL)
                {
                  *v30 = 8236;
                  *((_QWORD *)v29 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v29, ", ", 2uLL);
                }
              }
              if (*v26)
              {
                v31 = *(llvm::raw_ostream **)v4;
                v32 = *(_BYTE **)(*(_QWORD *)v4 + 32);
                if (*(_BYTE **)(*(_QWORD *)v4 + 24) == v32)
                {
                  llvm::raw_ostream::write(v31, " ", 1uLL);
                }
                else
                {
                  *v32 = 32;
                  ++*((_QWORD *)v31 + 4);
                }
                WriteAsOperandInternal(*(char ***)v4, (const llvm::Value *)*v26, v39);
              }
              else
              {
                v33 = *(llvm::raw_ostream **)v4;
                v34 = *(void **)(*(_QWORD *)v4 + 32);
                if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v34 > 0x15uLL)
                {
                  qmemcpy(v34, "<null operand bundle!>", 22);
                  *((_QWORD *)v33 + 4) += 22;
                }
                else
                {
                  llvm::raw_ostream::write(v33, "<null operand bundle!>", 0x16uLL);
                }
              }
              v27 = 0;
              v26 += 4;
              v28 -= 32;
            }
            while (v28);
          }
          v35 = *(llvm::raw_ostream **)v4;
          v36 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v36 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v35, 41);
          }
          else
          {
            *((_QWORD *)v35 + 4) = v36 + 1;
            *v36 = 41;
          }
          v10 = 0;
          ++v9;
        }
        while (v9 != v38);
      }
    }
    this = *(llvm::raw_ostream **)v4;
    v37 = *(_WORD **)(*(_QWORD *)v4 + 32);
    if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v37 > 1uLL)
    {
      *v37 = 23840;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(this, " ]", 2uLL);
    }
  }
  return this;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::writeAtomic(llvm::raw_ostream *result, uint64_t a2, int a3, unsigned int a4)
{
  llvm::raw_ostream **v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;

  if (a3)
  {
    v5 = (llvm::raw_ostream **)result;
    v6 = *v5;
    v7 = (_BYTE *)*((_QWORD *)*v5 + 4);
    if (*((_BYTE **)*v5 + 3) == v7)
    {
      v6 = llvm::raw_ostream::write(v6, " ", 1uLL);
    }
    else
    {
      *v7 = 32;
      ++*((_QWORD *)v6 + 4);
    }
    return llvm::raw_ostream::operator<<(v6, llvm::toIRString(llvm::AtomicOrdering)::names[a3]);
  }
  return result;
}

llvm::raw_ostream *PrintShuffleMask(llvm::raw_ostream *this, uint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  _DWORD *i;
  uint64_t v16;
  _DWORD *v17;
  _BYTE *v18;
  char v19;
  unint64_t v20;
  _WORD *v21;
  uint64_t v22;

  v8 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 60;
    *(_WORD *)v8 = 8236;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, ", <", 3uLL);
  }
  if (*(_BYTE *)(a2 + 8) == 19)
  {
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 8)
    {
      *(_BYTE *)(v9 + 8) = 32;
      *(_QWORD *)v9 = *(_QWORD *)"vscale x ";
      *((_QWORD *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "vscale x ", 9uLL);
    }
  }
  write_unsigned<unsigned long>(this, a4, 0, 0, 0);
  v10 = (_QWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v10 <= 7uLL)
  {
    llvm::raw_ostream::write(this, " x i32> ", 8uLL);
    if (a4)
      goto LABEL_10;
LABEL_15:
    v12 = "zeroinitializer";
    v13 = 15;
    return llvm::raw_ostream::operator<<(this, v12, v13);
  }
  *v10 = 0x203E323369207820;
  *((_QWORD *)this + 4) += 8;
  if (!a4)
    goto LABEL_15;
LABEL_10:
  v11 = 4 * a4;
  v12 = "zeroinitializer";
  v13 = 15;
  v14 = v11;
  for (i = a3; !*i; ++i)
  {
    v14 -= 4;
    if (!v14)
      return llvm::raw_ostream::operator<<(this, v12, v13);
  }
  v13 = 5;
  v16 = v11;
  v17 = a3;
  v12 = "undef";
  while (*v17 == -1)
  {
    ++v17;
    v16 -= 4;
    if (!v16)
      return llvm::raw_ostream::operator<<(this, v12, v13);
  }
  v18 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v18)
  {
    llvm::raw_ostream::write(this, "<", 1uLL);
  }
  else
  {
    *v18 = 60;
    ++*((_QWORD *)this + 4);
  }
  v13 = 1;
  v12 = ">";
  v19 = 1;
  do
  {
    v20 = *a3;
    v21 = (_WORD *)*((_QWORD *)this + 4);
    if ((v19 & 1) == 0)
    {
      if (*((_QWORD *)this + 3) - (_QWORD)v21 > 1uLL)
      {
        *v21 = 8236;
        v21 = (_WORD *)(*((_QWORD *)this + 4) + 2);
        *((_QWORD *)this + 4) = v21;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        v21 = (_WORD *)*((_QWORD *)this + 4);
      }
    }
    if (*((_QWORD *)this + 3) - (_QWORD)v21 > 3uLL)
    {
      *(_DWORD *)v21 = 540160873;
      *((_QWORD *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, "i32 ", 4uLL);
    }
    if ((_DWORD)v20 == -1)
    {
      v22 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v22) > 4)
      {
        *(_BYTE *)(v22 + 4) = 102;
        *(_DWORD *)v22 = 1701080693;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(this, "undef", 5uLL);
      }
    }
    else
    {
      llvm::write_integer(this, v20, 0, 0);
    }
    v19 = 0;
    ++a3;
    v11 -= 4;
  }
  while (v11);
  return llvm::raw_ostream::operator<<(this, v12, v13);
}

llvm::SlotTracker *`anonymous namespace'::AssemblyWriter::printInfoComment(llvm::SlotTracker **this, const llvm::Value *a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  llvm::Value *BasePtr;
  llvm::SlotTracker *v7;
  _WORD *v8;
  llvm::Value *DerivedPtr;
  llvm::SlotTracker *v10;
  _BYTE *v11;
  llvm::SlotTracker *result;

  if (llvm::GCRelocateInst::classof((uint64_t)a2))
  {
    v4 = *this;
    v5 = (_DWORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v5 > 3uLL)
    {
      *v5 = 673200928;
      *((_QWORD *)v4 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v4, " ; (", 4uLL);
    }
    BasePtr = llvm::GCRelocateInst::getBasePtr(a2);
    v7 = *this;
    v8 = (_WORD *)*((_QWORD *)*this + 4);
    if (*((_QWORD *)*this + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8236;
      *((_QWORD *)v7 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v7, ", ", 2uLL);
    }
    DerivedPtr = llvm::GCRelocateInst::getDerivedPtr(a2);
    v10 = *this;
    v11 = (_BYTE *)*((_QWORD *)*this + 4);
    if (*((_BYTE **)*this + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ")", 1uLL);
    }
    else
    {
      *v11 = 41;
      ++*((_QWORD *)v10 + 4);
    }
  }
  result = this[28];
  if (result)
    return (llvm::SlotTracker *)(*(uint64_t (**)(llvm::SlotTracker *, const llvm::Value *, llvm::SlotTracker *))(*(_QWORD *)result + 48))(result, a2, *this);
  return result;
}

llvm::raw_ostream *`anonymous namespace'::AssemblyWriter::writeSyncScope(llvm::raw_ostream *result, uint64_t a2, unsigned int a3)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;

  if (a3 != 1)
  {
    v4 = (llvm::raw_ostream **)result;
    if (!*((_DWORD *)result + 116))
      llvm::LLVMContextImpl::getSyncScopeNames(a2, (_QWORD *)result + 57);
    v5 = *v4;
    v6 = *((_QWORD *)*v4 + 4);
    if ((unint64_t)(*((_QWORD *)*v4 + 3) - v6) > 0xB)
    {
      *(_DWORD *)(v6 + 8) = 573072752;
      *(_QWORD *)v6 = *(_QWORD *)" syncscope(\"";
      *((_QWORD *)v5 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v5, " syncscope(\"", 0xCuLL);
    }
    v7 = (uint64_t)v4[57] + 16 * a3;
    llvm::printEscapedString(*(llvm::raw_ostream **)v7, *(_QWORD *)(v7 + 8), *v4);
    result = *v4;
    v8 = (_WORD *)*((_QWORD *)*v4 + 4);
    if (*((_QWORD *)*v4 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 10530;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "\")", 2uLL);
    }
  }
  return result;
}

void `anonymous namespace'::AsmWriterContext::~AsmWriterContext(_anonymous_namespace_::AsmWriterContext *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::MDTreeAsmWriterContext::onWriteMetadataAsOperand(uint64_t a1, unsigned __int8 *a2)
{
  void (**v4)(llvm::formatted_raw_ostream *__hidden);
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _WORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void (**v14)(llvm::raw_string_ostream *__hidden);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *__p[2];
  uint64_t v24;
  void (**v25)(llvm::formatted_raw_ostream *__hidden);
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  uint64_t v37;

  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(a1 + 184), a2, (uint64_t)&v25);
  if ((_BYTE)v27)
  {
    __p[0] = 0;
    __p[1] = 0;
    v24 = 0;
    v15 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 1;
    v17 = 0;
    v18 = 0;
    v16 = 0;
    v14 = &off_251C13AC0;
    v22 = __p;
    llvm::raw_ostream::SetUnbuffered(&v14);
    v4 = (void (**)(llvm::formatted_raw_ostream *__hidden))(*(_DWORD *)(a1 + 32) + 1);
    *(_DWORD *)(a1 + 32) = (_DWORD)v4;
    v25 = v4;
    v26 = "";
    v5 = *(unsigned int *)(a1 + 48);
    if (v5 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorTemplateBase<std::pair<unsigned int,std::string>,false>::growAndEmplaceBack<std::pair<unsigned int,char const*>>(a1 + 40, (uint64_t)&v25);
      v7 = *(_DWORD *)(a1 + 48) - 1;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 40) + 32 * v5;
      *(_DWORD *)v6 = (_DWORD)v4;
      std::string::basic_string[abi:nn180100]<0>((_QWORD *)(v6 + 8), "");
      v7 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = v7 + 1;
    }
    LODWORD(v26) = 0;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    v25 = &off_251C12AF0;
    v33 = 0;
    v34 = 0;
    v35 = &v37;
    v36 = xmmword_24AA2D790;
    llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v25, (llvm::raw_ostream *)&v14);
    WriteAsOperandInternal((llvm::raw_ostream *)&v25, (uint64_t **)a2, (uint64_t *)a1);
    if (llvm::MDNode::classof(a2))
    {
      v8 = *a2;
      if (v8 != 6 && v8 != 33)
      {
        v9 = (_WORD *)v29;
        if ((unint64_t)(v28 - v29) > 2)
        {
          *(_BYTE *)(v29 + 2) = 32;
          *v9 = 15648;
          v29 += 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v25, " = ", 3uLL);
        }
        WriteMDNodeBodyInternal((llvm::raw_ostream *)&v25, (const llvm::MDNode *)a2, (_anonymous_namespace_::AsmWriterContext *)a1);
      }
    }
    llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v25);
    v10 = v22;
    v11 = *(_QWORD *)(a1 + 40) + 32 * v7;
    v12 = v11 + 8;
    if (*(char *)(v11 + 31) < 0)
      operator delete(*(void **)v12);
    v13 = *(_OWORD *)v10;
    *(_QWORD *)(v12 + 16) = v10[2];
    *(_OWORD *)v12 = v13;
    *((_BYTE *)v10 + 23) = 0;
    *(_BYTE *)v10 = 0;
    --*(_DWORD *)(a1 + 32);
    v14 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v21 == 1 && v16)
      MEMORY[0x24BD1B380](v16, 0x1000C8077774924);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
  }
}

void `anonymous namespace'::MDTreeAsmWriterContext::~MDTreeAsmWriterContext(_anonymous_namespace_::MDTreeAsmWriterContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  size_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_251C1E450;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = v3 + 32 * v2;
    do
    {
      v5 = (llvm::raw_ostream *)*((_QWORD *)this + 31);
      v6 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) == v6)
      {
        llvm::raw_ostream::write(v5, "\n", 1uLL);
      }
      else
      {
        *v6 = 10;
        ++*((_QWORD *)v5 + 4);
      }
      v7 = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 31), (2 * *(_DWORD *)v3));
      v10 = *(const char **)(v3 + 8);
      v9 = v3 + 8;
      v8 = v10;
      v11 = *(char *)(v9 + 23);
      if (v11 >= 0)
        v12 = (const char *)v9;
      else
        v12 = v8;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v9 + 23);
      else
        v13 = *(_QWORD *)(v9 + 8);
      llvm::raw_ostream::write(v7, v12, v13);
      v3 = v9 + 24;
    }
    while (v3 != v4);
  }
  v14 = (void *)*((_QWORD *)this + 24);
  if (v14 != *((void **)this + 23))
    free(v14);
  v15 = (char *)*((_QWORD *)this + 5);
  v16 = *((unsigned int *)this + 12);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      if (v15[v17 - 1] < 0)
        operator delete(*(void **)&v15[v17 - 24]);
      v17 -= 32;
    }
    while (v17);
    v15 = (char *)*((_QWORD *)this + 5);
  }
  if (v15 != (char *)this + 56)
    free(v15);
}

{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::SmallVectorTemplateBase<std::pair<unsigned int,std::string>,false>::growAndEmplaceBack<std::pair<unsigned int,char const*>>(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = 0;
  v4 = (char *)(a1 + 16);
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 32, &v15);
  v6 = &v5[32 * *(unsigned int *)(a1 + 8)];
  *(_DWORD *)v6 = *(_DWORD *)a2;
  std::string::basic_string[abi:nn180100]<0>((_QWORD *)v6 + 1, *(char **)(a2 + 8));
  v7 = *(char **)a1;
  v8 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v9 = &v7[32 * v8];
    v10 = v5;
    do
    {
      *(_DWORD *)v10 = *(_DWORD *)v7;
      v11 = *(_OWORD *)(v7 + 8);
      *((_QWORD *)v10 + 3) = *((_QWORD *)v7 + 3);
      *(_OWORD *)(v10 + 8) = v11;
      *((_QWORD *)v7 + 2) = 0;
      *((_QWORD *)v7 + 3) = 0;
      *((_QWORD *)v7 + 1) = 0;
      v7 += 32;
      v10 += 32;
    }
    while (v7 != v9);
    v7 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 32 * v12;
      do
      {
        if (v7[v13 - 1] < 0)
          operator delete(*(void **)&v7[v13 - 24]);
        v13 -= 32;
      }
      while (v13);
      v7 = *(char **)a1;
    }
  }
  v14 = v15;
  if (v7 != v4)
    free(v7);
  *(_QWORD *)a1 = v5;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v14;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 4) != 0xFFFFFFFFFFFFFFFCLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *((_DWORD *)v15 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

double std::__construct_at[abi:nn180100]<llvm::SlotTracker,llvm::Module const*,llvm::SlotTracker*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  v2 = *a2;
  *(_QWORD *)a1 = &off_251C1E370;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)&result = 16;
  *(_QWORD *)(a1 + 252) = 16;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 316) = 16;
  return result;
}

unint64_t llvm::Attribute::get(uint64_t *a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t NodeOrInsertPos;
  uint64_t v8;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v5 = a2 - 75;
  v6 = *a1;
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v11, a2);
  if (v5 <= 9)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v11, a3);
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v11, SHIDWORD(a3));
  }
  v10 = 0;
  NodeOrInsertPos = (unint64_t)llvm::FoldingSetBase::FindNodeOrInsertPos(v6 + 264, (uint64_t)v11, &v10, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    v8 = v6 + 2072;
    if (v5 >= 0xA)
    {
      NodeOrInsertPos = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8, 16, 3);
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_BYTE *)(NodeOrInsertPos + 8) = 0;
      *(_DWORD *)(NodeOrInsertPos + 12) = a2;
    }
    else
    {
      NodeOrInsertPos = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8, 24, 3);
      *(_QWORD *)NodeOrInsertPos = 0;
      *(_BYTE *)(NodeOrInsertPos + 8) = 1;
      *(_DWORD *)(NodeOrInsertPos + 12) = a2;
      *(_QWORD *)(NodeOrInsertPos + 16) = a3;
    }
    llvm::FoldingSetBase::InsertNode(v6 + 264, (uint64_t *)NodeOrInsertPos, v10, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v11[0] != v12)
    free(v11[0]);
  return NodeOrInsertPos;
}

{
  uint64_t v5;
  unint64_t NodeOrInsertPos;
  uint64_t v8;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v9, a2);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v9, a3);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v9, SHIDWORD(a3));
  v8 = 0;
  NodeOrInsertPos = (unint64_t)llvm::FoldingSetBase::FindNodeOrInsertPos(v5 + 264, (uint64_t)v9, &v8, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v5 + 2072, 24, 3);
    *(_QWORD *)NodeOrInsertPos = 0;
    *(_BYTE *)(NodeOrInsertPos + 8) = 3;
    *(_DWORD *)(NodeOrInsertPos + 12) = a2;
    *(_QWORD *)(NodeOrInsertPos + 16) = a3;
    llvm::FoldingSetBase::InsertNode(v5 + 264, (uint64_t *)NodeOrInsertPos, v8, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v9[0] != v10)
    free(v9[0]);
  return NodeOrInsertPos;
}

uint64_t *llvm::Attribute::get(uint64_t *a1, _BYTE *a2, size_t a3, _BYTE *a4, size_t a5)
{
  uint64_t v9;
  uint64_t *NodeOrInsertPos;
  uint64_t v12;
  void *v13[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  llvm::FoldingSetNodeID::AddString((unsigned int *)v13, a2, a3);
  if (a5)
    llvm::FoldingSetNodeID::AddString((unsigned int *)v13, a4, a5);
  v12 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v9 + 264, (uint64_t)v13, &v12, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = (uint64_t *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v9 + 2072, a3 + a5 + 26, 3);
    llvm::StringAttributeImpl::StringAttributeImpl((uint64_t)NodeOrInsertPos, a2, a3, a4, a5);
    llvm::FoldingSetBase::InsertNode(v9 + 264, NodeOrInsertPos, v12, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v13[0] != v14)
    free(v13[0]);
  return NodeOrInsertPos;
}

uint64_t llvm::Attribute::getAttrKindFromName(char *a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 28520 && a1[2] == 116)
      {
        result = 9;
      }
      else
      {
        if (*(_WORD *)a1 != 29555 || a1[2] != 112)
          goto LABEL_362;
        result = 59;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x646C6F63:
          result = 5;
          break;
        case 0x7473656E:
          result = 17;
          break;
        case 0x74657273:
          result = 74;
          break;
        default:
          goto LABEL_362;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && a1[4] == 103)
      {
        result = 11;
      }
      else if (*(_DWORD *)a1 == 1701536110 && a1[4] == 100)
      {
        result = 16;
      }
      else if (*(_DWORD *)a1 == 1702000994 && a1[4] == 102)
      {
        result = 69;
      }
      else if (*(_DWORD *)a1 == 1635154274 && a1[4] == 108)
      {
        result = 70;
      }
      else
      {
        if (*(_DWORD *)a1 != 1734962273 || a1[4] != 110)
          goto LABEL_362;
        result = 75;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && *((_WORD *)a1 + 2) == 26482)
      {
        result = 10;
      }
      else if (*(_DWORD *)a1 == 1919315822 && *((_WORD *)a1 + 2) == 25957)
      {
        result = 24;
      }
      else if (*(_DWORD *)a1 == 2037608302 && *((_WORD *)a1 + 2) == 25454)
      {
        result = 34;
      }
      else if (*(_DWORD *)a1 == 1919972211 && *((_WORD *)a1 + 2) == 29029)
      {
        result = 60;
      }
      else
      {
        if (*(_DWORD *)a1 != 1869440365 || *((_WORD *)a1 + 2) != 31090)
          goto LABEL_362;
        result = 80;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)(a1 + 3) == 1852404844)
      {
        result = 4;
      }
      else if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        result = 14;
      }
      else if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)(a1 + 3) == 1935763820)
      {
        result = 18;
      }
      else if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)(a1 + 3) == 1701278309)
      {
        result = 27;
      }
      else if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878)
      {
        result = 35;
      }
      else if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)(a1 + 3) == 1819047278)
      {
        result = 38;
      }
      else if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        result = 41;
      }
      else if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)(a1 + 3) == 1701736302)
      {
        result = 42;
      }
      else if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)(a1 + 3) == 1954047342)
      {
        result = 48;
      }
      else if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)(a1 + 3) == 1954047343)
      {
        result = 68;
      }
      else
      {
        if (*(_DWORD *)a1 != 1635022709 || *(_DWORD *)(a1 + 3) != 1701601889)
          goto LABEL_362;
        result = 83;
      }
      break;
    case 8:
      switch(*(_QWORD *)a1)
      {
        case 0x727470636F6C6C61:
          result = 2;
          break;
        case 0x656E696C6E696F6ELL:
          result = 26;
          break;
        case 0x6E72757465726F6ELL:
          result = 31;
          break;
        case 0x646E69776E756F6ELL:
          result = 36;
          break;
        case 0x656E6F6E64616572:
          result = 44;
          break;
        case 0x796C6E6F64616572:
          result = 45;
          break;
        case 0x64656E7275746572:
          result = 46;
          break;
        case 0x7066746369727473:
          result = 62;
          break;
        case 0x61636F6C6C616E69:
          result = 72;
          break;
        default:
          goto LABEL_362;
      }
      break;
    case 9:
      if (*(_QWORD *)a1 == 0x6C626174706D756ALL && a1[8] == 101)
      {
        result = 13;
      }
      else if (*(_QWORD *)a1 == 0x69746C6975626F6ELL && a1[8] == 110)
      {
        result = 19;
      }
      else if (*(_QWORD *)a1 == 0x7275747061636F6ELL && a1[8] == 101)
      {
        result = 21;
      }
      else if (*(_QWORD *)a1 == 0x6C69666F72706F6ELL && a1[8] == 101)
      {
        result = 28;
      }
      else if (*(_QWORD *)a1 == 0x7372756365726F6ELL && a1[8] == 101)
      {
        result = 29;
      }
      else if (*(_QWORD *)a1 == 0x6E6F7A6465726F6ELL && a1[8] == 101)
      {
        result = 30;
      }
      else if (*(_QWORD *)a1 == 0x6361747365666173 && a1[8] == 107)
      {
        result = 49;
      }
      else if (*(_QWORD *)a1 == 0x6E6F727473707373 && a1[8] == 103)
      {
        result = 61;
      }
      else if (*(_QWORD *)a1 == 0x6C65737466697773 && a1[8] == 102)
      {
        result = 65;
      }
      else if (*(_QWORD *)a1 == 0x6C6E6F6574697277 && a1[8] == 121)
      {
        result = 67;
      }
      else if (*(_QWORD *)a1 == 0x6E696B636F6C6C61 && a1[8] == 100)
      {
        result = 76;
      }
      else if (*(_QWORD *)a1 == 0x7A6973636F6C6C61 && a1[8] == 101)
      {
        result = 77;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x73616C6370666F6ELL || a1[8] != 115)
          goto LABEL_362;
        result = 81;
      }
      break;
    case 10:
      if (*(_QWORD *)a1 == 0x696C61636F6C6C61 && *((_WORD *)a1 + 4) == 28263)
      {
        result = 1;
      }
      else if (*(_QWORD *)a1 == 0x65677265766E6F63 && *((_WORD *)a1 + 4) == 29806)
      {
        result = 6;
      }
      else if (*(_QWORD *)a1 == 0x6968656E696C6E69 && *((_WORD *)a1 + 4) == 29806)
      {
        result = 12;
      }
      else if (*(_QWORD *)a1 == 0x61626C6C61636F6ELL && *((_WORD *)a1 + 4) == 27491)
      {
        result = 20;
      }
      else if (*(_QWORD *)a1 == 0x6568635F66636F6ELL && *((_WORD *)a1 + 4) == 27491)
      {
        result = 22;
      }
      else if (*(_QWORD *)a1 == 0x7973617466697773 && *((_WORD *)a1 + 4) == 25454)
      {
        result = 63;
      }
      else if (*(_QWORD *)a1 == 0x7272657466697773 && *((_WORD *)a1 + 4) == 29295)
      {
        result = 64;
      }
      else if (*(_QWORD *)a1 == 0x757465726C6C6977 && *((_WORD *)a1 + 4) == 28274)
      {
        result = 66;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6174736E67696C61 || *((_WORD *)a1 + 4) != 27491)
          goto LABEL_362;
        result = 82;
      }
      break;
    case 11:
      if (*(_QWORD *)a1 == 0x63696C7075646F6ELL && *(_QWORD *)(a1 + 3) == 0x65746163696C7075)
      {
        result = 23;
      }
      else if (*(_QWORD *)a1 == 0x62797A616C6E6F6ELL && *(_QWORD *)(a1 + 3) == 0x646E6962797A616CLL)
      {
        result = 37;
      }
      else if (*(_QWORD *)a1 == 0x666F727070696B73 && *(_QWORD *)(a1 + 3) == 0x656C69666F727070)
      {
        result = 56;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x74746E656D656C65 || *(_QWORD *)(a1 + 3) != 0x65707974746E656DLL)
          goto LABEL_362;
        result = 71;
      }
      break;
    case 12:
      if (*(_QWORD *)a1 == 0x6E69737961776C61 && *((_DWORD *)a1 + 2) == 1701734764)
      {
        result = 3;
      }
      else if (*(_QWORD *)a1 == 0x676F72707473756DLL && *((_DWORD *)a1 + 2) == 1936942450)
      {
        result = 15;
      }
      else if (*(_QWORD *)a1 == 0x74616C7563657073 && *((_DWORD *)a1 + 2) == 1701601889)
      {
        result = 57;
      }
      else if (*(_QWORD *)a1 == 0x636F6C6C61657270 && *((_DWORD *)a1 + 2) == 1684370529)
      {
        result = 73;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x725F656C61637376 || *((_DWORD *)a1 + 2) != 1701277281)
          goto LABEL_362;
        result = 84;
      }
      break;
    case 13:
      if (*(_QWORD *)a1 == 0x7566726F6674706FLL && *(_QWORD *)(a1 + 5) == 0x676E697A7A756672)
      {
        result = 40;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x5F736E7275746572 || *(_QWORD *)(a1 + 5) != 0x65636977745F736ELL)
          goto LABEL_362;
        result = 47;
      }
      break;
    case 15:
      if (*(_QWORD *)a1 == 0x63696C706D696F6ELL && *(_QWORD *)(a1 + 7) == 0x74616F6C66746963)
      {
        result = 25;
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6761746D656D5F65)
      {
        result = 52;
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x79726F6D656D5F65)
      {
        result = 53;
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6461657268745F65)
      {
        result = 54;
      }
      else if (*(_QWORD *)a1 == 0x6163776F64616873 && *(_QWORD *)(a1 + 7) == 0x6B636174736C6C61)
      {
        result = 55;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6572656665726564 || *(_QWORD *)(a1 + 7) != 0x656C626165636E65)
          goto LABEL_362;
        result = 78;
      }
      break;
    case 16:
      if (*(_QWORD *)a1 != 0x657A6974696E6173 || *((_QWORD *)a1 + 1) != 0x737365726464615FLL)
        goto LABEL_362;
      result = 50;
      break;
    case 17:
      if (*(_QWORD *)a1 == 0x6974696E61736F6ELL && *((_QWORD *)a1 + 1) == 0x646E756F625F657ALL && a1[16] == 115)
      {
        result = 32;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x74696C7073657270 || *((_QWORD *)a1 + 1) != 0x6E6974756F726F63 || a1[16] != 101)
          goto LABEL_362;
        result = 43;
      }
      break;
    case 18:
      if (*(_QWORD *)a1 != 0x657A6974696E6173
        || *((_QWORD *)a1 + 1) != 0x657264646177685FLL
        || *((_WORD *)a1 + 8) != 29555)
      {
        goto LABEL_362;
      }
      result = 51;
      break;
    case 19:
      if (*(_QWORD *)a1 == 0x745F7465725F6E66
        && *((_QWORD *)a1 + 1) == 0x7478655F6B6E7568
        && *(_QWORD *)(a1 + 11) == 0x6E72657478655F6BLL)
      {
        result = 8;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6974696E61736F6ELL
          || *((_QWORD *)a1 + 1) != 0x7265766F635F657ALL
          || *(_QWORD *)(a1 + 11) != 0x6567617265766F63)
        {
          goto LABEL_362;
        }
        result = 33;
      }
      break;
    case 21:
      if (*(_QWORD *)a1 != 0x696F705F6C6C756ELL
        || *((_QWORD *)a1 + 1) != 0x5F73695F7265746ELL
        || *(_QWORD *)(a1 + 13) != 0x64696C61765F7369)
      {
        goto LABEL_362;
      }
      result = 39;
      break;
    case 23:
      if (*(_QWORD *)a1 != 0x6572656665726564
        || *((_QWORD *)a1 + 1) != 0x5F656C626165636ELL
        || *(_QWORD *)(a1 + 15) != 0x6C6C756E5F726F5FLL)
      {
        goto LABEL_362;
      }
      result = 79;
      break;
    case 26:
      if (*(_QWORD *)a1 != 0x74616C7563657073
        || *((_QWORD *)a1 + 1) != 0x64616F6C5F657669
        || *((_QWORD *)a1 + 2) != 0x696E65647261685FLL
        || *((_WORD *)a1 + 12) != 26478)
      {
        goto LABEL_362;
      }
      result = 58;
      break;
    case 33:
      if (memcmp(a1, "disable_sanitizer_instrumentation", 0x21uLL))
        goto LABEL_362;
      result = 7;
      break;
    default:
LABEL_362:
      result = 0;
      break;
  }
  return result;
}

char *llvm::Attribute::getNameFromAttrKind(int a1)
{
  return off_251C1E520[a1];
}

BOOL llvm::Attribute::isExistingAttribute(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v64;
  uint64_t v66;
  BOOL v67;
  int v71;
  BOOL v72;
  int v73;
  BOOL v76;
  BOOL v81;
  BOOL v87;

  v2 = 0;
  switch(a2)
  {
    case 3:
      if (*a1 == 28520 && *((_BYTE *)a1 + 2) == 116)
        return 1;
      v4 = *((unsigned __int8 *)a1 + 2);
      v5 = *a1 == 29555;
      v6 = 112;
      return v5 && v4 == v6;
    case 4:
      return *(_DWORD *)a1 == 1684828003 || *(_DWORD *)a1 == 1953719662 || *(_DWORD *)a1 == 1952805491;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *((_BYTE *)a1 + 4) == 103)
        return 1;
      if (*(_DWORD *)a1 == 1701536110 && *((_BYTE *)a1 + 4) == 100)
        return 1;
      if (*(_DWORD *)a1 == 1702000994 && *((_BYTE *)a1 + 4) == 102)
        return 1;
      if (*(_DWORD *)a1 == 1635154274 && *((_BYTE *)a1 + 4) == 108)
        return 1;
      v4 = *((unsigned __int8 *)a1 + 4);
      v5 = *(_DWORD *)a1 == 1734962273;
      v6 = 110;
      return v5 && v4 == v6;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && a1[2] == 26482)
        return 1;
      if (*(_DWORD *)a1 == 1919315822 && a1[2] == 25957)
        return 1;
      if (*(_DWORD *)a1 == 2037608302 && a1[2] == 25454)
        return 1;
      if (*(_DWORD *)a1 == 1919972211 && a1[2] == 29029)
        return 1;
      v4 = a1[2];
      v5 = *(_DWORD *)a1 == 1869440365;
      v6 = 31090;
      return v5 && v4 == v6;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)((char *)a1 + 3) == 1852404844)
        return 1;
      if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)((char *)a1 + 3) == 1702521203)
        return 1;
      if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)((char *)a1 + 3) == 1935763820)
        return 1;
      if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)((char *)a1 + 3) == 1701278309)
        return 1;
      if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)((char *)a1 + 3) == 1717920878)
        return 1;
      if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)((char *)a1 + 3) == 1819047278)
        return 1;
      if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)((char *)a1 + 3) == 1702521203)
        return 1;
      if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)((char *)a1 + 3) == 1701736302)
        return 1;
      if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)((char *)a1 + 3) == 1954047342)
        return 1;
      if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)((char *)a1 + 3) == 1954047343)
        return 1;
      v4 = *(_DWORD *)((char *)a1 + 3);
      v5 = *(_DWORD *)a1 == 1635022709;
      v6 = 1701601889;
      return v5 && v4 == v6;
    case 8:
      return *(_QWORD *)a1 == 0x727470636F6C6C61
          || *(_QWORD *)a1 == 0x656E696C6E696F6ELL
          || *(_QWORD *)a1 == 0x6E72757465726F6ELL
          || *(_QWORD *)a1 == 0x646E69776E756F6ELL
          || *(_QWORD *)a1 == 0x656E6F6E64616572
          || *(_QWORD *)a1 == 0x796C6E6F64616572
          || *(_QWORD *)a1 == 0x64656E7275746572
          || *(_QWORD *)a1 == 0x7066746369727473
          || *(_QWORD *)a1 == 0x61636F6C6C616E69;
    case 9:
      if (*(_QWORD *)a1 == 0x6C626174706D756ALL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x69746C6975626F6ELL && *((_BYTE *)a1 + 8) == 110)
        return 1;
      if (*(_QWORD *)a1 == 0x7275747061636F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x6C69666F72706F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x7372756365726F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x6E6F7A6465726F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x6361747365666173 && *((_BYTE *)a1 + 8) == 107)
        return 1;
      if (*(_QWORD *)a1 == 0x6E6F727473707373 && *((_BYTE *)a1 + 8) == 103)
        return 1;
      if (*(_QWORD *)a1 == 0x6C65737466697773 && *((_BYTE *)a1 + 8) == 102)
        return 1;
      if (*(_QWORD *)a1 == 0x6C6E6F6574697277 && *((_BYTE *)a1 + 8) == 121)
        return 1;
      if (*(_QWORD *)a1 == 0x6E696B636F6C6C61 && *((_BYTE *)a1 + 8) == 100)
        return 1;
      if (*(_QWORD *)a1 == 0x7A6973636F6C6C61 && *((_BYTE *)a1 + 8) == 101)
        return 1;
      v4 = *((unsigned __int8 *)a1 + 8);
      v5 = *(_QWORD *)a1 == 0x73616C6370666F6ELL;
      v6 = 115;
      return v5 && v4 == v6;
    case 10:
      if (*(_QWORD *)a1 == 0x696C61636F6C6C61 && a1[4] == 28263)
        return 1;
      if (*(_QWORD *)a1 == 0x65677265766E6F63 && a1[4] == 29806)
        return 1;
      if (*(_QWORD *)a1 == 0x6968656E696C6E69 && a1[4] == 29806)
        return 1;
      if (*(_QWORD *)a1 == 0x61626C6C61636F6ELL && a1[4] == 27491)
        return 1;
      if (*(_QWORD *)a1 == 0x6568635F66636F6ELL && a1[4] == 27491)
        return 1;
      if (*(_QWORD *)a1 == 0x7973617466697773 && a1[4] == 25454)
        return 1;
      if (*(_QWORD *)a1 == 0x7272657466697773 && a1[4] == 29295)
        return 1;
      if (*(_QWORD *)a1 == 0x757465726C6C6977 && a1[4] == 28274)
        return 1;
      v4 = a1[4];
      v5 = *(_QWORD *)a1 == 0x6174736E67696C61;
      v6 = 27491;
      return v5 && v4 == v6;
    case 11:
      if (*(_QWORD *)a1 == 0x63696C7075646F6ELL && *(_QWORD *)((char *)a1 + 3) == 0x65746163696C7075)
        return 1;
      if (*(_QWORD *)a1 == 0x62797A616C6E6F6ELL && *(_QWORD *)((char *)a1 + 3) == 0x646E6962797A616CLL)
        return 1;
      if (*(_QWORD *)a1 == 0x666F727070696B73 && *(_QWORD *)((char *)a1 + 3) == 0x656C69666F727070)
        return 1;
      v49 = *(_QWORD *)((char *)a1 + 3);
      v50 = *(_QWORD *)a1 == 0x74746E656D656C65;
      v51 = 0x65707974746E656DLL;
      return v50 && v49 == v51;
    case 12:
      if (*(_QWORD *)a1 == 0x6E69737961776C61 && *((_DWORD *)a1 + 2) == 1701734764)
        return 1;
      if (*(_QWORD *)a1 == 0x676F72707473756DLL && *((_DWORD *)a1 + 2) == 1936942450)
        return 1;
      if (*(_QWORD *)a1 == 0x74616C7563657073 && *((_DWORD *)a1 + 2) == 1701601889)
        return 1;
      if (*(_QWORD *)a1 == 0x636F6C6C61657270 && *((_DWORD *)a1 + 2) == 1684370529)
        return 1;
      v4 = *((_DWORD *)a1 + 2);
      v5 = *(_QWORD *)a1 == 0x725F656C61637376;
      v6 = 1701277281;
      return v5 && v4 == v6;
    case 13:
      if (*(_QWORD *)a1 == 0x7566726F6674706FLL && *(_QWORD *)((char *)a1 + 5) == 0x676E697A7A756672)
        return 1;
      v49 = *(_QWORD *)((char *)a1 + 5);
      v50 = *(_QWORD *)a1 == 0x5F736E7275746572;
      v51 = 0x65636977745F736ELL;
      return v50 && v49 == v51;
    case 14:
      if (*(_QWORD *)a1 == 0x2D706D756A2D6F6ELL && *(_QWORD *)(a1 + 3) == 0x73656C6261742D70)
        return 1;
      v49 = *(_QWORD *)(a1 + 3);
      v50 = *(_QWORD *)a1 == 0x662D656661736E75;
      v51 = 0x6874616D2D70662DLL;
      return v50 && v49 == v51;
    case 15:
      if (*(_QWORD *)a1 == 0x63696C706D696F6ELL && *(_QWORD *)((char *)a1 + 7) == 0x74616F6C66746963)
        return 1;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)((char *)a1 + 7) == 0x6761746D656D5F65)
        return 1;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)((char *)a1 + 7) == 0x79726F6D656D5F65)
        return 1;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)((char *)a1 + 7) == 0x6461657268745F65)
        return 1;
      if (*(_QWORD *)a1 == 0x6163776F64616873 && *(_QWORD *)((char *)a1 + 7) == 0x6B636174736C6C61)
        return 1;
      if (*(_QWORD *)a1 == 0x6572656665726564 && *(_QWORD *)((char *)a1 + 7) == 0x656C626165636E65)
        return 1;
      v64 = 0x6874616D2D70662DLL;
      if (*(_QWORD *)a1 == 0x2D73666E692D6F6ELL && *(_QWORD *)((char *)a1 + 7) == 0x6874616D2D70662DLL)
        return 1;
      v66 = *(_QWORD *)((char *)a1 + 7);
      v67 = *(_QWORD *)a1 == 0x2D736E616E2D6F6ELL;
      return v67 && v66 == v64;
    case 16:
      v49 = *((_QWORD *)a1 + 1);
      v50 = *(_QWORD *)a1 == 0x657A6974696E6173;
      v51 = 0x737365726464615FLL;
      return v50 && v49 == v51;
    case 17:
      if (*(_QWORD *)a1 == 0x6974696E61736F6ELL
        && *((_QWORD *)a1 + 1) == 0x646E756F625F657ALL
        && *((_BYTE *)a1 + 16) == 115)
      {
        return 1;
      }
      v71 = *((unsigned __int8 *)a1 + 16);
      v72 = *(_QWORD *)a1 == 0x74696C7073657270 && *((_QWORD *)a1 + 1) == 0x6E6974756F726F63;
      v73 = 101;
      return v72 && v71 == v73;
    case 18:
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *((_QWORD *)a1 + 1) == 0x657264646177685FLL && a1[8] == 29555)
        return 1;
      v76 = *(_QWORD *)a1 == 0x6572702D7373656CLL && *((_QWORD *)a1 + 1) == 0x6D70662D65736963;
      if (v76 && a1[8] == 25697)
        return 1;
      v71 = a1[8];
      v72 = *(_QWORD *)a1 == 0x706D61732D657375 && *((_QWORD *)a1 + 1) == 0x69666F72702D656CLL;
      v73 = 25964;
      return v72 && v71 == v73;
    case 19:
      if (*(_QWORD *)a1 == 0x745F7465725F6E66
        && *((_QWORD *)a1 + 1) == 0x7478655F6B6E7568
        && *(_QWORD *)((char *)a1 + 11) == 0x6E72657478655F6BLL)
      {
        return 1;
      }
      v81 = *(_QWORD *)a1 == 0x6974696E61736F6ELL && *((_QWORD *)a1 + 1) == 0x7265766F635F657ALL;
      if (v81 && *(_QWORD *)((char *)a1 + 11) == 0x6567617265766F63)
        return 1;
      v66 = *(_QWORD *)((char *)a1 + 11);
      v67 = *(_QWORD *)a1 == 0x662D786F72707061 && *((_QWORD *)a1 + 1) == 0x6D2D70662D636E75;
      v64 = 0x6874616D2D70662DLL;
      return v67 && v66 == v64;
    case 21:
      if (*(_QWORD *)a1 == 0x696F705F6C6C756ELL
        && *((_QWORD *)a1 + 1) == 0x5F73695F7265746ELL
        && *(_QWORD *)((char *)a1 + 13) == 0x64696C61765F7369)
      {
        return 1;
      }
      v66 = *(_QWORD *)((char *)a1 + 13);
      v67 = *(_QWORD *)a1 == 0x6E696C6E692D6F6ELL && *((_QWORD *)a1 + 1) == 0x742D656E696C2D65;
      v64 = 0x73656C6261742D65;
      return v67 && v66 == v64;
    case 23:
      if (*(_QWORD *)a1 == 0x6572656665726564
        && *((_QWORD *)a1 + 1) == 0x5F656C626165636ELL
        && *(_QWORD *)((char *)a1 + 15) == 0x6C6C756E5F726F5FLL)
      {
        return 1;
      }
      v87 = *(_QWORD *)a1 == 0x656E6769732D6F6ELL && *((_QWORD *)a1 + 1) == 0x2D736F72657A2D64;
      if (v87 && *(_QWORD *)((char *)a1 + 15) == 0x6874616D2D70662DLL)
        return 1;
      v66 = *(_QWORD *)((char *)a1 + 15);
      v67 = *(_QWORD *)a1 == 0x2D656C69666F7270 && *((_QWORD *)a1 + 1) == 0x612D656C706D6173;
      v64 = 0x6574617275636361;
      return v67 && v66 == v64;
    case 26:
      return *(_QWORD *)a1 == 0x74616C7563657073
          && *((_QWORD *)a1 + 1) == 0x64616F6C5F657669
          && *((_QWORD *)a1 + 2) == 0x696E65647261685FLL
          && a1[12] == 26478;
    case 33:
      return !memcmp(a1, "disable_sanitizer_instrumentation", 0x21uLL);
    default:
      return v2;
  }
}

BOOL llvm::AttributeImpl::hasAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;

  if (*(_BYTE *)(a1 + 8) != 2)
    return 0;
  v4 = *(unsigned int *)(a1 + 12);
  if (a3 != v4)
    return 0;
  if ((_DWORD)v4)
    return memcmp((const void *)(a1 + 24), a2, v4) == 0;
  return 1;
}

uint64_t llvm::Attribute::getAllocSizeArgs(llvm::Attribute *this)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  _BYTE v6[12];

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  v2 = v1 == 0xFFFFFFFFLL;
  v3 = v1 != 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (v2)
    v4 = 0;
  *(_QWORD *)&v6[4] = v4 & 0xFFFFFFFEFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)this + 16) & 0xFFFFFF00 | ((unint64_t)v3 << 32);
  return *(_QWORD *)v6;
}

uint64_t llvm::Attribute::getVScaleRangeMax(llvm::Attribute *this)
{
  uint64_t v1;
  __int128 v3;
  _BYTE v4[12];

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (!*(_QWORD *)(*(_QWORD *)this + 16))
    v1 = 0;
  *(_QWORD *)&v4[4] = v1 | *(_QWORD *)(*(_QWORD *)this + 16) & 0xFFFFFF00 | ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) != 0) << 32);
  *((_QWORD *)&v3 + 1) = *(_QWORD *)(*(_QWORD *)this + 16) != 0;
  *(_QWORD *)&v3 = *(_QWORD *)v4;
  return v3 >> 32;
}

void llvm::Attribute::getAsString(llvm::Attribute *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  int v6;
  char *v7;
  size_t v8;
  char *NameFromAttrKind;
  size_t v10;
  char *v11;
  const char *v12;
  llvm::Type *v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  unint64_t AllocSizeArgs;
  char v23;
  unint64_t v24;
  char *v25;
  char v26;
  char v27;
  const char *v28;
  const char *v29;
  int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t VScaleRangeMax;
  int v37;
  uint64_t *v38;
  const char *v39;
  char v40;
  const char *v41;
  __int16 v42;
  uint64_t v43[4];
  __int16 v44;
  std::string __p;
  __int16 v46;
  uint64_t v47[4];
  __int16 v48;
  uint64_t v49[4];
  __int16 v50;
  uint64_t v51[4];
  __int16 v52;
  uint64_t v53[4];
  __int16 v54;
  llvm::formatv_object_base *v55[2];
  uint64_t *v56;
  __int16 v57;
  __int128 v58;
  llvm::formatv_object_base **v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  int v64;
  std::string *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
LABEL_6:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  v6 = *(unsigned __int8 *)(v4 + 8);
  if (v6 == 3)
  {
    NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (NameFromAttrKind)
    {
      std::string::basic_string[abi:nn180100](a3, NameFromAttrKind, v10);
    }
    else
    {
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
    }
    std::string::push_back(a3, 40);
    DWORD2(v58) = 0;
    v62 = 0;
    v63 = 0;
    v64 = 1;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    *(_QWORD *)&v58 = &off_251C13AC0;
    v65 = a3;
    llvm::raw_ostream::SetUnbuffered(&v58);
    if (*(_QWORD *)this)
      v13 = *(llvm::Type **)(*(_QWORD *)this + 16);
    else
      v13 = 0;
    llvm::Type::print(v13, (llvm::raw_ostream *)&v58, 0, 1);
    if (v61 != (char *)v59)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v58);
    std::string::push_back(a3, 41);
    goto LABEL_22;
  }
  if (!*(_BYTE *)(v4 + 8))
  {
    v7 = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (v7)
    {
      std::string::basic_string[abi:nn180100](a3, v7, v8);
      return;
    }
    goto LABEL_6;
  }
  if (v6 == 2)
  {
LABEL_10:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    DWORD2(v58) = 0;
    v62 = 0;
    v63 = 0;
    v64 = 1;
    v60 = 0;
    v61 = 0;
    v59 = 0;
    *(_QWORD *)&v58 = &off_251C13AC0;
    v65 = a3;
    llvm::raw_ostream::SetUnbuffered(&v58);
    v11 = v61;
    if (v61 >= v60)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v58, 34);
    }
    else
    {
      ++v61;
      *v11 = 34;
    }
    v14 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v15 = (const void *)(v14 + 24);
      v16 = *(unsigned int *)(v14 + 12);
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v58, v15, v16);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
    {
      llvm::raw_ostream::write(v17, 34);
    }
    else
    {
      *((_QWORD *)v17 + 4) = v18 + 1;
      *v18 = 34;
    }
    v19 = *(unsigned int *)(*(_QWORD *)this + 16);
    if ((_DWORD)v19)
    {
      v20 = (llvm::raw_ostream *)(*(_QWORD *)this + *(unsigned int *)(*(_QWORD *)this + 12) + 25);
      if ((unint64_t)(v60 - v61) > 1)
      {
        *(_WORD *)v61 = 8765;
        v61 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v58, "=\"", 2uLL);
      }
      llvm::printEscapedString(v20, v19, (llvm::raw_ostream *)&v58);
      if (v60 == v61)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v58, "\"", 1uLL);
      else
        *v61++ = 34;
    }
LABEL_22:
    *(_QWORD *)&v58 = off_251C13948;
    if (v64 == 1)
    {
      if (v59)
        MEMORY[0x24BD1B380](v59, 0x1000C8077774924);
    }
    return;
  }
  switch(*(_DWORD *)(v4 + 12))
  {
    case 'K':
      v55[0] = *(llvm::formatv_object_base **)(v4 + 16);
      if (a2)
        v12 = "align=";
      else
        v12 = "align ";
      *(_QWORD *)&v58 = v12;
      v59 = v55;
      LOWORD(v61) = 3075;
      goto LABEL_87;
    case 'L':
      v21 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)&v58 = &v59;
      *((_QWORD *)&v58 + 1) = 0x300000000;
      if ((v21 & 1) != 0)
      {
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v58, (uint64_t)"alloc", 5);
        if ((v21 & 2) == 0)
        {
LABEL_41:
          if ((v21 & 4) == 0)
            goto LABEL_42;
          goto LABEL_73;
        }
      }
      else if ((v21 & 2) == 0)
      {
        goto LABEL_41;
      }
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v58, (uint64_t)"realloc", 7);
      if ((v21 & 4) == 0)
      {
LABEL_42:
        if ((v21 & 8) == 0)
          goto LABEL_43;
        goto LABEL_74;
      }
LABEL_73:
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v58, (uint64_t)"free", 4);
      if ((v21 & 8) == 0)
      {
LABEL_43:
        if ((v21 & 0x10) == 0)
          goto LABEL_44;
        goto LABEL_75;
      }
LABEL_74:
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v58, (uint64_t)"uninitialized", 13);
      if ((v21 & 0x10) == 0)
      {
LABEL_44:
        if ((v21 & 0x20) == 0)
          goto LABEL_46;
        goto LABEL_45;
      }
LABEL_75:
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v58, (uint64_t)"zeroed", 6);
      if ((v21 & 0x20) != 0)
LABEL_45:
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v58, (uint64_t)"aligned", 7);
LABEL_46:
      v51[0] = (uint64_t)"allockind(\"";
      v52 = 259;
      llvm::join<llvm::StringRef *>(&__p, v58, v58 + 16 * DWORD2(v58));
      v50 = 260;
      v49[0] = (uint64_t)&__p;
      llvm::operator+(v51, v49, (uint64_t)v53);
      v47[0] = (uint64_t)"\")";
      v48 = 259;
      llvm::operator+(v53, v47, (uint64_t)v55);
      llvm::Twine::str(v55, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((llvm::formatv_object_base ***)v58 != &v59)
        free((void *)v58);
      return;
    case 'M':
      AllocSizeArgs = llvm::Attribute::getAllocSizeArgs(this);
      if (!v23)
      {
        v53[0] = (uint64_t)"allocsize(";
        v54 = 259;
        v52 = 264;
        LODWORD(v51[0]) = AllocSizeArgs;
        goto LABEL_85;
      }
      v24 = HIDWORD(AllocSizeArgs);
      v49[0] = (uint64_t)"allocsize(";
      v50 = 259;
      v48 = 264;
      LODWORD(v47[0]) = AllocSizeArgs;
      llvm::operator+(v49, v47, (uint64_t)v51);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
      v46 = 259;
      llvm::operator+(v51, (uint64_t *)&__p, (uint64_t)v53);
      v44 = 264;
      LODWORD(v43[0]) = v24;
      llvm::operator+(v53, v43, (uint64_t)v55);
      v41 = ")";
      v42 = 259;
LABEL_68:
      v38 = (uint64_t *)&v41;
      goto LABEL_86;
    case 'N':
      v25 = "dereferenceable";
      goto LABEL_54;
    case 'O':
      v25 = "dereferenceable_or_null";
LABEL_54:
      llvm::Attribute::getAsString(BOOL)const::$_0::operator()(a3, a2, v4, (unsigned __int8 *)v25);
      return;
    case 'P':
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      DWORD2(v58) = 0;
      v62 = 0;
      v63 = 0;
      v64 = 1;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      *(_QWORD *)&v58 = &off_251C13AC0;
      v65 = a3;
      llvm::raw_ostream::SetUnbuffered(&v58);
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v58, "memory(", 7uLL);
      __asm { BR              X11 }
      return;
    case 'Q':
      std::string::basic_string[abi:nn180100]<0>(a3, "nofpclass");
      DWORD2(v58) = 0;
      v62 = 0;
      v63 = 0;
      v64 = 1;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      *(_QWORD *)&v58 = &off_251C13AC0;
      v65 = a3;
      llvm::raw_ostream::SetUnbuffered(&v58);
      llvm::operator<<((llvm::raw_ostream *)&v58, *(_DWORD *)(*(_QWORD *)this + 16));
      goto LABEL_22;
    case 'R':
      if (a2)
      {
        v53[0] = *(_QWORD *)(v4 + 16);
        v55[0] = (llvm::formatv_object_base *)"=";
        v56 = v53;
        v57 = 3075;
        v26 = 2;
        v27 = 3;
        v28 = "alignstack";
        v29 = (const char *)v55;
      }
      else
      {
        v51[0] = *(_QWORD *)(v4 + 16);
        v53[0] = (uint64_t)"(";
        v53[2] = (uint64_t)v51;
        v54 = 3075;
        v55[0] = (llvm::formatv_object_base *)"alignstack";
        v56 = v53;
        v26 = 3;
        v27 = 2;
        v29 = ")";
        v57 = 515;
        v28 = (const char *)v55;
      }
      *(_QWORD *)&v58 = v28;
      v59 = (llvm::formatv_object_base **)v29;
      LOBYTE(v61) = v27;
      BYTE1(v61) = v26;
      goto LABEL_87;
    case 'S':
      v30 = *(_DWORD *)(v4 + 16);
      if (!v30)
        goto LABEL_10;
      if (v30 == 2)
      {
        std::string::basic_string[abi:nn180100]<0>(a3, "uwtable");
      }
      else
      {
        v53[0] = (uint64_t)"uwtable(";
        v39 = "async";
        v54 = 259;
        if (v30 == 1)
          v39 = "sync";
        v40 = 1;
        HIBYTE(v52) = 1;
        if (*v39)
        {
          v51[0] = (uint64_t)v39;
          v40 = 3;
        }
        LOBYTE(v52) = v40;
LABEL_85:
        llvm::operator+(v53, v51, (uint64_t)v55);
        v49[0] = (uint64_t)")";
        v50 = 259;
        v38 = v49;
LABEL_86:
        llvm::operator+((uint64_t *)v55, v38, (uint64_t)&v58);
LABEL_87:
        llvm::Twine::str((llvm::formatv_object_base **)&v58, a3);
      }
      return;
    case 'T':
      v35 = *(_QWORD *)(v4 + 16);
      v31 = HIDWORD(v35);
      v32 = v35 == 0;
      v33 = (_DWORD)v35 != 0;
      v34 = v35 & 0xFFFFFF00;
      v35 = v35;
      LODWORD(v58) = v31;
      if (v32)
        v35 = 0;
      *(_QWORD *)((char *)&v58 + 4) = v35 | v34 | (v33 << 32);
      VScaleRangeMax = llvm::Attribute::getVScaleRangeMax(this);
      v49[0] = (uint64_t)"vscale_range(";
      v50 = 259;
      v48 = 264;
      LODWORD(v47[0]) = v58;
      llvm::operator+(v49, v47, (uint64_t)v51);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
      v46 = 259;
      llvm::operator+(v51, (uint64_t *)&__p, (uint64_t)v53);
      if ((VScaleRangeMax & 0xFF00000000) != 0)
        v37 = VScaleRangeMax;
      else
        v37 = 0;
      v44 = 264;
      LODWORD(v43[0]) = v37;
      llvm::operator+(v53, v43, (uint64_t)v55);
      v41 = ")";
      v42 = 259;
      goto LABEL_68;
    default:
      goto LABEL_10;
  }
}

void llvm::Attribute::getAsString(BOOL)const::$_0::operator()(std::string *a1, char a2, uint64_t a3, unsigned __int8 *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v4 = *a4;
  if (a2)
  {
    if (a3)
      v5 = *(_QWORD *)(a3 + 16);
    else
      v5 = 0;
    *(_QWORD *)&v11 = v5;
    *(_QWORD *)&v14 = "=";
    *(_QWORD *)&v15 = &v11;
    LOWORD(v16) = 3075;
    if (!v4)
    {
      v17 = v14;
      v18 = v15;
      v19 = v16;
      goto LABEL_19;
    }
    *(_QWORD *)&v17 = a4;
    *(_QWORD *)&v18 = &v14;
    v7 = 515;
    goto LABEL_9;
  }
  if (a3)
    v6 = *(_QWORD *)(a3 + 16);
  else
    v6 = 0;
  v10 = v6;
  *(_QWORD *)&v11 = "(";
  *(_QWORD *)&v12 = &v10;
  LOWORD(v13) = 3075;
  if (v4)
  {
    *(_QWORD *)&v14 = a4;
    *(_QWORD *)&v15 = &v11;
    LOWORD(v16) = 515;
    v8 = 3;
  }
  else
  {
    v14 = v11;
    v15 = v12;
    v16 = v13;
    v8 = v13;
    if (v13 == 1)
    {
      *(_QWORD *)&v17 = ")";
      v7 = 259;
LABEL_9:
      LOWORD(v19) = v7;
      goto LABEL_19;
    }
  }
  if (BYTE1(v16) != 1)
    v8 = 2;
  v9 = &v14;
  if (BYTE1(v16) == 1)
    v9 = (__int128 *)v14;
  *(_QWORD *)&v17 = v9;
  *((_QWORD *)&v17 + 1) = *((_QWORD *)&v14 + 1);
  *(_QWORD *)&v18 = ")";
  LOBYTE(v19) = v8;
  BYTE1(v19) = 3;
LABEL_19:
  llvm::Twine::str((llvm::formatv_object_base **)&v17, a1);
}

std::string *llvm::join<llvm::StringRef *>(std::string *this, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t i;
  const std::string::value_type *v9;
  std::string::size_type v10;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v5 = this;
    v6 = ((a3 - a2) >> 4) - 1;
    v7 = a2;
    do
    {
      v6 += *(_QWORD *)(v7 + 8);
      v7 += 16;
    }
    while (v7 != a3);
    std::string::reserve(this, v6);
    this = std::string::append(v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    for (i = a2 + 16; i != a3; this = std::string::append(v5, v9, v10))
    {
      std::string::append(v5, ",", 1uLL);
      v9 = *(const std::string::value_type **)i;
      v10 = *(_QWORD *)(i + 8);
      i += 16;
    }
  }
  return this;
}

BOOL llvm::Attribute::hasParentContext(uint64_t *a1, _QWORD *a2)
{
  _QWORD *NodeOrInsertPos;
  uint64_t v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[17];

  v9[16] = *MEMORY[0x24BDAC8D0];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeImpl::Profile(*a1, (unsigned int *)v8);
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*a2 + 264, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  v5 = *a1;
  if (v8[0] != v9)
    free(v8[0]);
  return NodeOrInsertPos == (_QWORD *)v5;
}

unsigned int *llvm::AttributeImpl::Profile(uint64_t a1, unsigned int *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 8) == 2)
  {
    v4 = a1 + 24;
    v6 = *(unsigned int *)(a1 + 12);
    v5 = *(_DWORD *)(a1 + 16);
    result = llvm::FoldingSetNodeID::AddString(a2, (_BYTE *)(a1 + 24), v6);
    if (v5)
      return llvm::FoldingSetNodeID::AddString(a2, (_BYTE *)(v4 + v6 + 1), v5);
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    return llvm::AttributeImpl::Profile(a2, *(_DWORD *)(a1 + 12), *(_QWORD *)(a1 + 16));
  }
  else
  {
    return llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, *(_DWORD *)(a1 + 12));
  }
  return result;
}

uint64_t llvm::AttributeImpl::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 == a2)
    return 0;
  v19 = v2;
  v20 = v3;
  v6 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 2)
  {
    if (v6 == 2)
    {
      v7 = a1 + 24;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = a2 + 24;
      v10 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v8 == (_DWORD)v10
        && (!(_DWORD)v8 || !memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), *(unsigned int *)(a1 + 12))))
      {
        v16 = *(unsigned int *)(a1 + 16);
        v12 = *(unsigned int *)(a2 + 16);
        v11 = (const void *)(v9 + v10 + 1);
        v17 = v7 + v8 + 1;
        v18 = v16;
      }
      else
      {
        v17 = a1 + 24;
        v18 = v8;
        v11 = (const void *)(a2 + 24);
        v12 = v10;
      }
      return llvm::StringRef::compare((uint64_t)&v17, v11, v12) >> 31;
    }
    else
    {
      return 0;
    }
  }
  else if (v6 == 2)
  {
    return 1;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a2 + 12);
    if (v14 == v15)
      return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
    else
      return v14 < v15;
  }
}

uint64_t *llvm::AttributeSetNode::get(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t *Sorted;
  void *__base;
  size_t __nel;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x24BDAC8D0];
  __base = v9;
  __nel = 0x800000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&__base, a2, &a2[8 * a3]);
  v4 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::Attribute>);
    v4 = __nel;
  }
  Sorted = llvm::AttributeSetNode::getSorted(a1, (uint64_t *)__base, v4);
  if (__base != v9)
    free(__base);
  return Sorted;
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, int a2)
{
  unsigned int *v4;
  unint64_t v5;

  v4 = (unsigned int *)(a1 + 1);
  v5 = llvm::Attribute::get(*a1, a2, 0);
  addAttributeImpl<llvm::Attribute::AttrKind>(v4, a2, v5);
  return a1;
}

uint64_t *llvm::AttributeSet::removeAttribute(uint64_t **a1, uint64_t *a2, int a3)
{
  uint64_t *Sorted;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  Sorted = *a1;
  if (*a1)
  {
    if (((*((unsigned __int8 *)Sorted + a3 / 8 + 12) >> (a3 & 7)) & 1) != 0)
    {
      v7 = a2;
      v8 = v10;
      v9 = 0x800000000;
      llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v8, (uint64_t)v10, Sorted + 6, &Sorted[*((unsigned int *)Sorted + 2) + 6]);
      llvm::AttrBuilder::removeAttribute((uint64_t)&v7, a3);
      Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v8, v9);
      if (v8 != v10)
        free(v8);
    }
  }
  return Sorted;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v8 = a2;
  v3 = llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>(a1 + 8, &v8);
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8) + 8 * v4;
  if (v3 != (uint64_t *)v5)
  {
    v6 = *v3;
    if (*v3)
    {
      if (*(_BYTE *)(v6 + 8) == 2 || *(_DWORD *)(v6 + 12) != v8)
        return a1;
    }
    else if (v8)
    {
      return a1;
    }
    if ((uint64_t *)v5 != v3 + 1)
    {
      memmove(v3, v3 + 1, v5 - (_QWORD)(v3 + 1));
      LODWORD(v4) = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v4 - 1;
  }
  return a1;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v12;
  uint64_t v13;
  char v14;

  v12 = a2;
  v13 = a3;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = &v4[*(unsigned int *)(a1 + 16)];
  v14 = 0;
  v6 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(v4, v5, (uint64_t)&v12);
  v7 = *(unsigned int *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 8) + 8 * v7;
  if (v6 != (uint64_t *)v8)
  {
    v9 = v6;
    v10 = *v6;
    if (v10)
    {
      if (*(_BYTE *)(v10 + 8) == 2 && llvm::AttributeImpl::hasAttribute(v10, v12, v13))
      {
        if ((uint64_t *)v8 != v9 + 1)
        {
          memmove(v9, v9 + 1, v8 - (_QWORD)(v9 + 1));
          LODWORD(v7) = *(_DWORD *)(a1 + 16);
        }
        *(_DWORD *)(a1 + 16) = v7 - 1;
      }
    }
  }
  return a1;
}

uint64_t *llvm::AttributeSet::removeAttributes(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *Sorted;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v13 = a2;
  v14 = v16;
  v15 = 0x800000000;
  if (v6)
  {
    v7 = v6 + 6;
    v8 = &v6[*((unsigned int *)v6 + 2) + 6];
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v14, (uint64_t)v16, v7, v8);
  if ((_DWORD)v15)
  {
    v9 = (uint64_t *)v14;
    v10 = 8 * v15;
    while (!llvm::AttributeMask::contains(a3, *v9))
    {
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_8;
    }
    llvm::AttrBuilder::remove((uint64_t)&v13, a3);
    Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v14, v15);
  }
  else
  {
LABEL_8:
    Sorted = *a1;
  }
  if (v14 != v16)
    free(v14);
  return Sorted;
}

uint64_t llvm::AttrBuilder::remove(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 16);
  v6 = &v4[v5];
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    while (!llvm::AttributeMask::contains(a2, *v4))
    {
      ++v4;
      v7 -= 8;
      if (!v7)
      {
        v4 = v6;
        goto LABEL_13;
      }
    }
  }
  v8 = v4 + 1;
  if (v4 != v6 && v8 != v6)
  {
    do
    {
      if (!llvm::AttributeMask::contains(a2, *v8))
        *v4++ = *v8;
      ++v8;
    }
    while (v8 != v6);
  }
LABEL_13:
  *(_DWORD *)(a1 + 16) = ((unint64_t)v4 - *(_QWORD *)(a1 + 8)) >> 3;
  return a1;
}

uint64_t llvm::AttributeSet::getAttribute(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;

  v4 = *a1;
  if (!*a1)
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  v8 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 24), (uint64_t)v7, &v8, a4);
  result = 0;
  if (v5)
    return *(_QWORD *)(v8 + 16);
  return result;
}

uint64_t llvm::AttributeSetNode::getAlignment(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute;
  char v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 75);
  if (v2)
  {
    v3 = *(_QWORD *)(EnumAttribute + 16);
    v4 = __clz(v3) ^ 0x3F | 0x100;
    if (v3)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5 >> 8;
  }
  else
  {
    LOBYTE(v5) = 0;
    v6 = 0;
  }
  return v5 | (v6 << 8);
}

uint64_t llvm::AttributeSet::getByRefType(llvm::AttributeSet *this)
{
  uint64_t result;
  uint64_t EnumAttribute;
  char v3;
  BOOL v4;

  result = *(_QWORD *)this;
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 69);
    if (v3)
      v4 = EnumAttribute == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return *(_QWORD *)(EnumAttribute + 16);
  }
  return result;
}

uint64_t llvm::AttributeSet::getByValType(llvm::AttributeSet *this)
{
  uint64_t result;
  uint64_t EnumAttribute;
  char v3;
  BOOL v4;

  result = *(_QWORD *)this;
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 70);
    if (v3)
      v4 = EnumAttribute == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return *(_QWORD *)(EnumAttribute + 16);
  }
  return result;
}

uint64_t llvm::AttributeSet::getPreallocatedType(llvm::AttributeSet *this)
{
  uint64_t result;
  uint64_t EnumAttribute;
  char v3;
  BOOL v4;

  result = *(_QWORD *)this;
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 73);
    if (v3)
      v4 = EnumAttribute == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return *(_QWORD *)(EnumAttribute + 16);
  }
  return result;
}

uint64_t llvm::AttributeSet::getInAllocaType(llvm::AttributeSet *this)
{
  uint64_t result;
  uint64_t EnumAttribute;
  char v3;
  BOOL v4;

  result = *(_QWORD *)this;
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 72);
    if (v3)
      v4 = EnumAttribute == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return *(_QWORD *)(EnumAttribute + 16);
  }
  return result;
}

uint64_t llvm::AttributeSet::getElementType(llvm::AttributeSet *this)
{
  uint64_t result;
  uint64_t EnumAttribute;
  char v3;
  BOOL v4;

  result = *(_QWORD *)this;
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 71);
    if (v3)
      v4 = EnumAttribute == 0;
    else
      v4 = 1;
    if (v4)
      return 0;
    else
      return *(_QWORD *)(EnumAttribute + 16);
  }
  return result;
}

uint64_t llvm::AttributeSetNode::getAllocSizeArgs(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute;
  char v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v7;

  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 77);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(EnumAttribute + 16);
  v3 = HIDWORD(v5);
  v4 = v5 & 0xFFFFFF00;
  LODWORD(v5) = v5;
  LODWORD(v7) = v3;
  if (*(_QWORD *)(EnumAttribute + 16) == 0xFFFFFFFFLL)
    LODWORD(v5) = 0;
  HIDWORD(v7) = v5 | v4;
  return v7;
}

uint64_t llvm::AttributeSetNode::getVScaleRangeMin(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute;
  char v2;

  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 84);
  if (v2)
    return *(unsigned int *)(EnumAttribute + 20);
  else
    return 1;
}

uint64_t llvm::AttributeSetNode::getVScaleRangeMax(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute;
  char v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  __int128 v7;
  uint64_t v8;

  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 84);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(EnumAttribute + 16);
  v3 = HIDWORD(v5);
  v4 = v5 & 0xFFFFFF00;
  LODWORD(v5) = v5;
  LODWORD(v8) = v3;
  if (!*(_QWORD *)(EnumAttribute + 16))
    LODWORD(v5) = 0;
  HIDWORD(v8) = v5 | v4;
  *((_QWORD *)&v7 + 1) = *(_QWORD *)(EnumAttribute + 16) != 0;
  *(_QWORD *)&v7 = v8;
  return v7 >> 32;
}

void llvm::AttributeSet::getAsString(llvm::AttributeSetNode **this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  llvm::AttributeSetNode *v3;

  v3 = *this;
  if (v3)
    llvm::AttributeSetNode::getAsString(v3, a2, a3);
  else
    std::string::basic_string[abi:nn180100]<0>(a3, (char *)&str_119);
}

void llvm::AttributeSetNode::getAsString(llvm::AttributeSetNode *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (char *)this + 48;
    v8 = 8 * v4;
    do
    {
      if (v6)
        std::string::push_back(a3, 32);
      llvm::Attribute::getAsString((llvm::Attribute *)&v7[v6], a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 8;
    }
    while (v8 != v6);
  }
}

BOOL llvm::AttributeSet::hasParentContext(uint64_t a1, _QWORD *a2)
{
  _QWORD *NodeOrInsertPos;
  _QWORD *v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[17];

  v9[16] = *MEMORY[0x24BDAC8D0];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeListImpl::Profile((unsigned int *)v8, (uint64_t *)(*(_QWORD *)a1 + 48), *(unsigned int *)(*(_QWORD *)a1 + 8));
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*a2 + 296, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  v5 = *(_QWORD **)a1;
  if (v8[0] != v9)
    free(v8[0]);
  return NodeOrInsertPos == v5;
}

uint64_t llvm::AttributeSetNode::AttributeSetNode(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t *v14;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = a3;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 12) = 0u;
  v5 = a1 + 12;
  *(_OWORD *)(a1 + 28) = 0u;
  if (a3)
  {
    v6 = (uint64_t *)(a1 + 48);
    memmove((void *)(a1 + 48), a2, 8 * a3);
    if (v3)
    {
      v8 = 8 * v3;
      while (1)
      {
        v9 = *v6;
        if (!*v6)
          goto LABEL_13;
        if (*(_BYTE *)(v9 + 8) != 2)
          break;
        v10 = *(unsigned int *)(v9 + 12);
        *(_QWORD *)&v16 = v9 + 24;
        *((_QWORD *)&v16 + 1) = v10;
        v17 = v9;
        v18 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 24), (uint64_t)&v16, &v18, v7) & 1) == 0)
        {
          v11 = *(_DWORD *)(a1 + 32);
          v12 = *(_DWORD *)(a1 + 40);
          if (4 * v11 + 4 >= 3 * v12)
          {
            v12 *= 2;
          }
          else if (v12 + ~v11 - *(_DWORD *)(a1 + 36) > v12 >> 3)
          {
LABEL_9:
            v13 = v18;
            ++*(_DWORD *)(a1 + 32);
            if (*v13 != -1)
              --*(_DWORD *)(a1 + 36);
            *(_OWORD *)v13 = v16;
            v13[2] = v17;
            goto LABEL_14;
          }
          llvm::DenseMap<llvm::StringRef,llvm::jitlink::Block *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Block *>>::grow(a1 + 24, v12);
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 24), (uint64_t)&v16, &v18, v14);
          goto LABEL_9;
        }
LABEL_14:
        ++v6;
        v8 -= 8;
        if (!v8)
          return a1;
      }
      LODWORD(v9) = *(_DWORD *)(v9 + 12);
LABEL_13:
      *(_BYTE *)(v5 + (int)v9 / 8) |= 1 << (v9 & 7);
      goto LABEL_14;
    }
  }
  return a1;
}

uint64_t *llvm::AttributeSetNode::getSorted(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *NodeOrInsertPos;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v5 = *a1;
  v14[0] = v15;
  v14[1] = (void *)0x2000000000;
  v6 = 8 * a3;
  v7 = 8 * a3;
  v8 = a2;
  do
  {
    v9 = *v8++;
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v14, v9);
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v14, SHIDWORD(v9));
    v7 -= 8;
  }
  while (v7);
  v13 = 0;
  v10 = v5 + 296;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v10, (uint64_t)v14, &v13, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = (uint64_t *)operator new(v6 + 48);
    llvm::AttributeSetNode::AttributeSetNode((uint64_t)NodeOrInsertPos, a2, a3);
    llvm::FoldingSetBase::InsertNode(v10, NodeOrInsertPos, v13, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  }
  if (v14[0] != v15)
    free(v14[0]);
  return NodeOrInsertPos;
}

uint64_t llvm::AttributeSetNode::findEnumAttribute(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0)
    return 0;
  v2 = (_QWORD *)(a1 + 48);
  v3 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[v4 >> 1];
      v7 = *v6;
      if (*v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 1;
      v4 += ~v5;
      if ((int)v7 < a2)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  return *v2;
}

uint64_t llvm::AttributeListImpl::AttributeListImpl(uint64_t a1, _QWORD *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = __src;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 12) = 0;
  v6 = a1 + 12;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  if (a3)
    memmove((void *)(a1 + 40), __src, 8 * a3);
  v7 = *v4;
  if (*v4)
    v8 = (uint64_t *)(*v4 + 48);
  else
    v8 = 0;
  if (v7)
    v9 = *v4 + 48 + 8 * *(unsigned int *)(v7 + 8);
  else
    v9 = 0;
  if (v8 != (uint64_t *)v9)
  {
    while (1)
    {
      v10 = *v8;
      if (!*v8)
        goto LABEL_13;
      if (*(_BYTE *)(v10 + 8) != 2)
        break;
LABEL_14:
      if (++v8 == (uint64_t *)v9)
        goto LABEL_15;
    }
    LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_13:
    *(_BYTE *)(v6 + (int)v10 / 8) |= 1 << (v10 & 7);
    goto LABEL_14;
  }
LABEL_15:
  if (a3)
  {
    v11 = &v4[a3];
    do
    {
      v12 = *v4;
      if (*v4)
        v13 = (uint64_t *)(*v4 + 48);
      else
        v13 = 0;
      if (v12)
        v14 = *v4 + 48 + 8 * *(unsigned int *)(v12 + 8);
      else
        v14 = 0;
      while (v13 != (uint64_t *)v14)
      {
        v15 = *v13;
        if (*v13)
        {
          if (*(_BYTE *)(v15 + 8) == 2)
            goto LABEL_27;
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        *(_BYTE *)(a1 + 24 + (int)v15 / 8) |= 1 << (v15 & 7);
LABEL_27:
        ++v13;
      }
      ++v4;
    }
    while (v4 != v11);
  }
  return a1;
}

unsigned int *llvm::AttributeListImpl::Profile(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v4 = result;
    v5 = 8 * a3;
    do
    {
      v6 = *a2++;
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v4, v6);
      result = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v4, SHIDWORD(v6));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

BOOL llvm::AttributeListImpl::hasAttrSomewhere(uint64_t a1, int a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = a2 + 7;
  v4 = 1 << (a2 & 7);
  v5 = (v4 & *(_BYTE *)(a1 + (v3 >> 3) + 24));
  if (a3)
  {
    if ((v4 & *(_BYTE *)(a1 + (v3 >> 3) + 24)) != 0)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v6)
      {
        v7 = (uint64_t)v3 >> 3;
        v8 = (_QWORD *)(a1 + 40);
        v9 = -1;
        while (!*v8 || (v4 & *(_BYTE *)(*v8 + v7 + 12)) == 0)
        {
          ++v9;
          ++v8;
          if (!--v6)
            return v5 != 0;
        }
        *a3 = v9;
      }
    }
  }
  return v5 != 0;
}

uint64_t *llvm::AttributeList::getImpl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *NodeOrInsertPos;
  uint64_t v8;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  llvm::AttributeListImpl::Profile((unsigned int *)v9, a2, a3);
  v8 = 0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v5 + 280, (uint64_t)v9, &v8, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = (uint64_t *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v5 + 2072, 8 * a3 + 40, 3);
    llvm::AttributeListImpl::AttributeListImpl((uint64_t)NodeOrInsertPos, a2, a3);
    llvm::FoldingSetBase::InsertNode(v5 + 280, NodeOrInsertPos, v8, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v9[0] != v10)
    free(v9[0]);
  return NodeOrInsertPos;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *Impl;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v3 = a2;
  v5 = a2 + 16 * a3;
  v6 = *(_DWORD *)(v5 - 16);
  if (v6 == -1)
  {
    if (a3 < 2)
      v6 = -1;
    else
      v6 = *(_DWORD *)(a2 + 16 * a3 - 32);
  }
  v9 = v11;
  v10 = 0x400000000;
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v9, (v6 + 2));
  do
  {
    *((_QWORD *)v9 + (*(_DWORD *)v3 + 1)) = *(_QWORD *)(v3 + 8);
    v3 += 16;
  }
  while (v3 != v5);
  Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v9, v10);
  if (v9 != v11)
    free(v9);
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *Impl;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  LODWORD(v10) = a5 + 3;
  v11 = a5;
  do
  {
    if (!v11)
      goto LABEL_7;
    v12 = a4[--v11];
    v10 = (v10 - 1);
  }
  while (!v12);
  if (!(_DWORD)v10)
  {
LABEL_7:
    if (a3)
    {
      LODWORD(v10) = 2;
    }
    else
    {
      if (!a2)
        return 0;
      LODWORD(v10) = 1;
    }
    v16 = v18;
    v17 = 0x800000000;
    goto LABEL_12;
  }
  v16 = v18;
  v17 = 0x800000000;
  if (v10 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v10, 8);
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a2);
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a3);
    goto LABEL_14;
  }
LABEL_12:
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a2);
  if ((_DWORD)v10 == 1)
    goto LABEL_17;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a3);
  if (v10 < 3)
    goto LABEL_17;
LABEL_14:
  v13 = (v10 - 2);
  if (a5 < v13)
    v13 = a5;
  llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v16, (uint64_t)v16 + 8 * v17, a4, &a4[v13]);
LABEL_17:
  Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t *Impl;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v5 = a2 + 1;
  v8 = v10;
  v9 = 0x800000000;
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v8, (a2 + 2));
  *((_QWORD *)v8 + v5) = a3;
  Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v8, v9);
  if (v8 != v10)
    free(v8);
  return Impl;
}

{
  uint64_t *Sorted;

  Sorted = llvm::AttributeSetNode::getSorted(a1, *(uint64_t **)(a3 + 8), *(unsigned int *)(a3 + 16));
  return llvm::AttributeList::get(a1, a2, (uint64_t)Sorted);
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *Impl;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *Sorted;
  void *v22;
  uint64_t v23;
  _BYTE v24[64];
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  void *v29;
  uint64_t v30;
  _QWORD v31[10];

  Impl = a3;
  v31[8] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    if (a3 == (uint64_t *)1)
    {
      return (uint64_t *)*a2;
    }
    else
    {
      LODWORD(v5) = 0;
      v6 = 8 * (_QWORD)a3;
      v7 = a2;
      v8 = &a2[(_QWORD)a3];
      do
      {
        v9 = *v7;
        if (*v7)
          LODWORD(v9) = *(_DWORD *)(v9 + 8);
        if (v5 <= v9)
          v5 = v9;
        else
          v5 = v5;
        ++v7;
        v6 -= 8;
      }
      while (v6);
      if ((_DWORD)v5)
      {
        v29 = v31;
        v30 = 0x800000000;
        llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v29, v5);
        for (i = 0; i != v5; ++i)
        {
          v25 = a1;
          v26 = v28;
          v11 = a2;
          v27 = 0x800000000;
          do
          {
            v12 = *v11;
            if (*v11 && i < *(unsigned int *)(v12 + 8))
            {
              v13 = *(_QWORD *)(v12 + 8 * i + 40);
              v22 = v24;
              v23 = 0x800000000;
              if (v13)
              {
                v14 = (uint64_t *)(v13 + 48);
                v15 = (uint64_t *)(v13 + 48 + 8 * *(unsigned int *)(v13 + 8));
              }
              else
              {
                v14 = 0;
                v15 = 0;
              }
            }
            else
            {
              v14 = 0;
              v15 = 0;
              v22 = v24;
              v23 = 0x800000000;
            }
            llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v22, (uint64_t)v24, v14, v15);
            v16 = (uint64_t *)v22;
            if ((_DWORD)v23)
            {
              v17 = 8 * v23;
              do
              {
                v18 = *v16++;
                llvm::AttrBuilder::addAttribute((uint64_t)&v25, v18);
                v17 -= 8;
              }
              while (v17);
              v16 = (uint64_t *)v22;
            }
            if (v16 != (uint64_t *)v24)
              free(v16);
            ++v11;
          }
          while (v11 != v8);
          Sorted = llvm::AttributeSetNode::getSorted(a1, (uint64_t *)v26, v27);
          *((_QWORD *)v29 + i) = Sorted;
          if (v26 != v28)
            free(v26);
        }
        Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v29, v30);
        if (v29 != v31)
          free(v29);
      }
      else
      {
        return 0;
      }
    }
  }
  return Impl;
}

uint64_t *llvm::AttributeList::addAttributeAtIndex(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  if (*a1 && (a3 + 1) < *((_DWORD *)v8 + 2) && (v9 = v8[(a3 + 1) + 5]) != 0)
  {
    if (((*(unsigned __int8 *)(v9 + a4 / 8 + 12) >> (a4 & 7)) & 1) != 0)
      return v8;
    v10 = (_BYTE *)(v9 + 48);
    v11 = (_BYTE *)(v9 + 48 + 8 * *(unsigned int *)(v9 + 8));
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v15 = v17;
  v16 = 0x800000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v15, v10, v11);
  v12 = llvm::Attribute::get(a2, a4, 0);
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v15, v12);
  v13 = llvm::AttributeSetNode::get(a2, v15, v16);
  v8 = llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v13);
  if (v15 != v17)
    free(v15);
  return v8;
}

uint64_t *llvm::AttributeList::setAttributesAtIndex(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t *Impl;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  v7 = (a3 + 1);
  v8 = *a1;
  if (*a1)
    v9 = (_BYTE *)(*a1 + 40);
  else
    v9 = 0;
  if (v8)
    v10 = (_BYTE *)(*a1 + 40 + 8 * *(unsigned int *)(v8 + 8));
  else
    v10 = 0;
  v16 = v18;
  v17 = 0x400000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v16, v9, v10);
  v11 = v17;
  if (v17 > v7)
  {
    *((_QWORD *)v16 + v7) = a4;
    v12 = (uint64_t *)v16;
    goto LABEL_10;
  }
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v16, (a3 + 2));
  v11 = v17;
  *((_QWORD *)v16 + v7) = a4;
  v12 = (uint64_t *)v16;
  if (v11)
  {
LABEL_10:
    while (1)
    {
      v13 = v11;
      if (v12[v11 - 1])
        break;
      --v11;
      LODWORD(v17) = v13 - 1;
      if (v13 == 1)
        goto LABEL_12;
    }
    Impl = llvm::AttributeList::getImpl(a2, v12, v11);
    v12 = (uint64_t *)v16;
  }
  else
  {
LABEL_12:
    Impl = 0;
  }
  if (v12 != v18)
    free(v12);
  return Impl;
}

uint64_t llvm::AttrBuilder::addAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (!a2)
    goto LABEL_5;
  if (*(_BYTE *)(a2 + 8) != 2)
  {
    LODWORD(a2) = *(_DWORD *)(a2 + 12);
LABEL_5:
    addAttributeImpl<llvm::Attribute::AttrKind>((unsigned int *)(a1 + 8), a2, v2);
    return a1;
  }
  addAttributeImpl<llvm::StringRef>((unsigned int *)(a1 + 8), (const void *)(a2 + 24), *(unsigned int *)(a2 + 12), a2);
  return a1;
}

uint64_t *llvm::AttributeList::addParamAttribute(_QWORD *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *Sorted;
  uint64_t *Impl;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[64];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  if (*a1)
    v10 = (_BYTE *)(*a1 + 40);
  else
    v10 = 0;
  if (v9)
    v11 = (_BYTE *)(*a1 + 40 + 8 * *(unsigned int *)(v9 + 8));
  else
    v11 = 0;
  v25 = v27;
  v26 = 0x400000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v25, v10, v11);
  v12 = a3[a4 - 1];
  if (v26 <= v12 + 2)
    llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v25, (v12 + 3));
  if (a4)
  {
    v13 = 4 * a4;
    do
    {
      v14 = (*a3 + 2);
      v15 = *((_QWORD *)v25 + v14);
      v21 = a2;
      v22 = v24;
      v23 = 0x800000000;
      if (v15)
      {
        v16 = (uint64_t *)(v15 + 48);
        v17 = (uint64_t *)(v15 + 48 + 8 * *(unsigned int *)(v15 + 8));
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v22, (uint64_t)v24, v16, v17);
      llvm::AttrBuilder::addAttribute((uint64_t)&v21, a5);
      Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v22, v23);
      *((_QWORD *)v25 + v14) = Sorted;
      if (v22 != v24)
        free(v22);
      ++a3;
      v13 -= 4;
    }
    while (v13);
  }
  Impl = llvm::AttributeList::getImpl(a2, (uint64_t *)v25, v26);
  if (v25 != v27)
    free(v25);
  return Impl;
}

uint64_t *llvm::AttributeList::removeAttributeAtIndex(_QWORD *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v11;

  v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8))
    v8 = *(uint64_t **)(v7 + 8 * (a3 + 1) + 40);
  else
    v8 = 0;
  v11 = v8;
  v9 = llvm::AttributeSet::removeAttribute(&v11, a2, a4);
  if (v8 == v9)
    return (uint64_t *)*a1;
  else
    return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v9);
}

uint64_t *llvm::AttributeList::removeAttributesAtIndex(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v11;

  v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8))
    v8 = *(uint64_t **)(v7 + 8 * (a3 + 1) + 40);
  else
    v8 = 0;
  v11 = v8;
  v9 = llvm::AttributeSet::removeAttributes(&v11, a2, a4);
  if (v8 == v9)
    return (uint64_t *)*a1;
  else
    return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v9);
}

uint64_t **llvm::AttrBuilder::addDereferenceableAttr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*this, 78, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t **llvm::AttrBuilder::addDereferenceableOrNullAttr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*this, 79, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;

  v4 = *a1;
  if (!*a1)
    return 0;
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5)
    return 0;
  v7[0] = a3;
  v7[1] = a4;
  v8 = 0;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v5 + 24), (uint64_t)v7, &v8, a4);
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  if (!*a1 || (a2 + 1) >= *(_DWORD *)(v3 + 8))
    return 0;
  result = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40);
  if (result)
  {
    result = llvm::AttributeSetNode::findEnumAttribute(result, a3);
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t llvm::AttributeList::getRetAlignment(llvm::AttributeList *this)
{
  uint64_t v1;
  llvm::AttributeSetNode *v2;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | ((_DWORD)v1 << 8);
  }
  v2 = *(llvm::AttributeSetNode **)(v1 + 48);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | ((_DWORD)v1 << 8);
}

uint64_t llvm::AttributeList::getParamAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  llvm::AttributeSetNode *v3;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
    LODWORD(v2) = 0;
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 | ((_DWORD)v2 << 8);
  }
  v3 = *(llvm::AttributeSetNode **)(v2 + 8 * (a2 + 2) + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getAlignment(v3);
    LODWORD(v2) = BYTE1(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v3 | ((_DWORD)v2 << 8);
}

uint64_t llvm::AttributeList::getParamStructRetType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t EnumAttribute;
  char v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  result = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 74);
  if (!v5 || EnumAttribute == 0)
    return 0;
  else
    return *(_QWORD *)(EnumAttribute + 16);
}

uint64_t llvm::AttributeList::getParamElementType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t EnumAttribute;
  char v5;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  result = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 71);
  if (!v5 || EnumAttribute == 0)
    return 0;
  else
    return *(_QWORD *)(EnumAttribute + 16);
}

uint64_t llvm::AttributeList::getAllocKind(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t EnumAttribute;
  char v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || !*(_DWORD *)(v1 + 8))
    return 0;
  result = *(_QWORD *)(v1 + 40);
  if (!result)
    return result;
  EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 76);
  if (v4)
    return *(_QWORD *)(EnumAttribute + 16);
  else
    return 0;
}

uint64_t llvm::AttributeList::getMemoryEffects(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t EnumAttribute;
  char v4;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this
    && *(_DWORD *)(v1 + 8)
    && (v2 = *(_QWORD *)(v1 + 40)) != 0
    && (EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(v2, 80), v4))
  {
    return *(unsigned int *)(EnumAttribute + 16);
  }
  else
  {
    return 63;
  }
}

BOOL llvm::AttributeList::hasParentContext(uint64_t a1, _QWORD *a2)
{
  _QWORD *NodeOrInsertPos;
  _QWORD *v5;
  uint64_t v7;
  void *v8[2];
  _QWORD v9[17];

  v9[16] = *MEMORY[0x24BDAC8D0];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeListImpl::Profile((unsigned int *)v8, (uint64_t *)(*(_QWORD *)a1 + 40), *(unsigned int *)(*(_QWORD *)a1 + 8));
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*a2 + 280, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  v5 = *(_QWORD **)a1;
  if (v8[0] != v9)
    free(v8[0]);
  return NodeOrInsertPos == v5;
}

void llvm::AttributeList::print(llvm::AttributeSetNode **this, llvm::raw_ostream *a2)
{
  void *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  llvm::AttributeSetNode *v8;
  _DWORD *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  llvm::AttributeSetNode *v19;
  std::string *p_p;
  size_t size;
  uint64_t v22;
  _WORD *v23;
  std::string __p;
  llvm::AttributeSetNode *v25;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "AttributeList[\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "AttributeList[\n", 0xFuLL);
  }
  if (*this)
  {
    v5 = *((_DWORD *)*this + 2);
    if (v5)
    {
      v6 = 0;
      v7 = 40;
      while (1)
      {
        v8 = *this;
        if (*this)
        {
          if (v6 < *((_DWORD *)v8 + 2) && *(_QWORD *)((char *)v8 + v7))
            break;
        }
LABEL_47:
        ++v6;
        v7 += 8;
        if (v5 == v6)
          goto LABEL_48;
      }
      v9 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 3uLL)
      {
        *v9 = 544940064;
        *((_QWORD *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  { ", 4uLL);
      }
      if (v6)
      {
        if (v6 == 1)
        {
          v10 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 5)
          {
            v11 = a2;
            v12 = "return";
            v13 = 6;
LABEL_28:
            llvm::raw_ostream::write(v11, v12, v13);
            goto LABEL_29;
          }
          *(_WORD *)(v10 + 4) = 28274;
          *(_DWORD *)v10 = 1970562418;
          v16 = *((_QWORD *)a2 + 4) + 6;
        }
        else
        {
          v15 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 3uLL)
          {
            *v15 = 677868129;
            *((_QWORD *)a2 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a2, "arg(", 4uLL);
          }
          write_unsigned<unsigned long>(a2, v6 - 2, 0, 0, 0);
          v17 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v17)
          {
            v11 = a2;
            v12 = ")";
            v13 = 1;
            goto LABEL_28;
          }
          *v17 = 41;
          v16 = *((_QWORD *)a2 + 4) + 1;
        }
      }
      else
      {
        v14 = (_QWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 7uLL)
        {
          v11 = a2;
          v12 = "function";
          v13 = 8;
          goto LABEL_28;
        }
        *v14 = 0x6E6F6974636E7566;
        v16 = *((_QWORD *)a2 + 4) + 8;
      }
      *((_QWORD *)a2 + 4) = v16;
LABEL_29:
      v18 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v18 > 3uLL)
      {
        *v18 = 540949792;
        *((_QWORD *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, " => ", 4uLL);
      }
      v19 = *this;
      if (*this)
      {
        if (v6 >= *((_DWORD *)v19 + 2))
          v19 = 0;
        else
          v19 = *(llvm::AttributeSetNode **)((char *)v19 + v7);
      }
      v25 = v19;
      llvm::AttributeSet::getAsString(&v25, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(a2, (const char *)p_p, size);
      v22 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v22) > 2)
      {
        *(_BYTE *)(v22 + 2) = 10;
        *(_WORD *)v22 = 32032;
        *((_QWORD *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, " }\n", 3uLL);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_47;
    }
  }
LABEL_48:
  v23 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v23 > 1uLL)
  {
    *v23 = 2653;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "]\n", 2uLL);
  }
}

uint64_t addAttributeImpl<llvm::StringRef>(unsigned int *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  const void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v12 = a2;
  v13 = a3;
  v6 = *(_QWORD **)a1;
  v7 = &v6[a1[2]];
  v14 = 0;
  v8 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(v6, v7, (uint64_t)&v12);
  v9 = v8;
  if (v8 != (uint64_t *)(*(_QWORD *)a1 + 8 * a1[2])
    && (v10 = *v8, *v9)
    && *(_BYTE *)(v10 + 8) == 2
    && (result = llvm::AttributeImpl::hasAttribute(v10, v12, v13), (_DWORD)result))
  {
    *v9 = a4;
  }
  else
  {
    v15 = a4;
    return llvm::SmallVectorImpl<llvm::Attribute>::insert_one_impl<llvm::Attribute>(a1, (uint64_t)v9, &v15);
  }
  return result;
}

uint64_t *addAttributeImpl<llvm::Attribute::AttrKind>(unsigned int *a1, int a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v7 = a2;
  result = llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>((uint64_t)a1, &v7);
  if (result != (uint64_t *)(*(_QWORD *)a1 + 8 * a1[2]))
  {
    v6 = *result;
    if (*result)
    {
      if (*(_BYTE *)(v6 + 8) != 2 && *(_DWORD *)(v6 + 12) == v7)
        goto LABEL_5;
    }
    else if (!v7)
    {
LABEL_5:
      *result = a3;
      return result;
    }
  }
  v8 = a3;
  return (uint64_t *)llvm::SmallVectorImpl<llvm::Attribute>::insert_one_impl<llvm::Attribute>(a1, (uint64_t)result, &v8);
}

_QWORD *llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>(uint64_t a1, _DWORD *a2)
{
  _QWORD *result;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    while (1)
    {
      v5 = v4 >> 1;
      v6 = &result[v4 >> 1];
      v7 = *v6;
      if (!*v6)
        goto LABEL_5;
      if (*(_BYTE *)(v7 + 8) != 2)
        break;
LABEL_7:
      v4 = v5;
      if (!v5)
        return result;
    }
    LODWORD(v7) = *(_DWORD *)(v7 + 12);
LABEL_5:
    v8 = v6 + 1;
    v9 = v4 + ~v5;
    if ((int)v7 < *a2)
    {
      v5 = v9;
      result = v8;
    }
    goto LABEL_7;
  }
  result += v4;
  return result;
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t result;
  int v5;

  v5 = a2;
  v3 = llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>(a1 + 8, &v5);
  if (v3 == (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16)))
    return 0;
  result = *v3;
  if (!result)
  {
    if (!v5)
      return result;
    return 0;
  }
  if (*(_BYTE *)(result + 8) == 2 || *(_DWORD *)(result + 12) != v5)
    return 0;
  return result;
}

uint64_t **llvm::AttrBuilder::addAlignmentAttr(uint64_t **a1, __int16 a2)
{
  unint64_t v3;

  if ((a2 & 0xFF00) != 0)
  {
    v3 = llvm::Attribute::get(*a1, 75, 1 << a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t **llvm::AttrBuilder::addStackAlignmentAttr(uint64_t **a1, __int16 a2)
{
  unint64_t v3;

  if ((a2 & 0xFF00) != 0)
  {
    v3 = llvm::Attribute::get(*a1, 82, 1 << a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::addAllocSizeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 77, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t **llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*this, 84, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t **llvm::AttrBuilder::addUWTableAttr(uint64_t **a1, int a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*a1, 83, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::addMemoryAttr(uint64_t **a1, unsigned int a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*a1, 80, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
}

uint64_t **llvm::AttrBuilder::addNoFPClassAttr(uint64_t **a1, unsigned int a2)
{
  unint64_t v3;

  if (a2)
  {
    v3 = llvm::Attribute::get(*a1, 81, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::addAllocKindAttr(uint64_t **a1, uint64_t a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*a1, 76, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
}

uint64_t llvm::AttrBuilder::addByValAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 70, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::addStructRetAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 74, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::addInAllocaAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3;

  v3 = llvm::Attribute::get(*this, 72, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  const void *v9;
  uint64_t v10;
  char v11;

  v9 = a2;
  v10 = a3;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = &v4[*(unsigned int *)(a1 + 16)];
  v11 = 0;
  v6 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(v4, v5, (uint64_t)&v9);
  if (v6 == (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16)))
    return 0;
  v7 = *v6;
  if (!*v6 || *(_BYTE *)(v7 + 8) != 2)
    return 0;
  if (llvm::AttributeImpl::hasAttribute(*v6, v9, v10))
    return v7;
  return 0;
}

BOOL llvm::AttributeFuncs::isNoFPClassCompatibleType(uint64_t a1)
{
  int v1;
  BOOL v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v1 == 17)
  {
    do
    {
      a1 = *(_QWORD *)(a1 + 24);
      v1 = *(unsigned __int8 *)(a1 + 8);
      if (a1)
        v2 = v1 == 17;
      else
        v2 = 0;
    }
    while (v2);
  }
  if ((v1 & 0xFE) == 0x12)
    v1 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 8);
  return v1 < 6u && ((0x2Fu >> v1) & 1) != 0 || (v1 & 0xFD) == 4;
}

uint64_t llvm::AttributeFuncs::typeIncompatible@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v5 = 0;
  v6 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[4] = 0;
  a3[3] = 0;
  a3[2] = (uint64_t)(a3 + 3);
  v7 = *(unsigned __int8 *)(result + 8);
  if (v7 != 13)
  {
    if ((a2 & 1) != 0)
    {
      v6 = 2;
      *a3 = 2;
      if ((a2 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v6 = 0;
      if ((a2 & 2) != 0)
      {
LABEL_4:
        v6 |= 0x1000000000000uLL;
        v5 = 16;
        *a3 = v6;
        a3[1] = 16;
        goto LABEL_7;
      }
    }
    v5 = 0;
LABEL_7:
    if (v7 == 15)
      goto LABEL_12;
  }
  if ((a2 & 1) != 0)
  {
    v6 |= 0x304000240000uLL;
    v5 |= 0xC000uLL;
    *a3 = v6;
    a3[1] = v5;
  }
  if ((a2 & 2) != 0)
  {
    v5 |= 0x7E1uLL;
    v6 |= 0x20004uLL;
    *a3 = v6;
    a3[1] = v5;
  }
LABEL_12:
  v8 = v7;
  if ((v7 & 0xFE) == 0x12)
    v8 = *(unsigned __int8 *)(**(_QWORD **)(result + 16) + 8);
  if ((a2 & 1) == 0 || v8 == 15)
  {
    if ((a2 & 1) == 0)
      return result;
  }
  else
  {
    v5 |= 0x800uLL;
    a3[1] = v5;
  }
  result = llvm::AttributeFuncs::isNoFPClassCompatibleType(result);
  if ((result & 1) == 0)
    a3[1] = v5 | 0x20000;
  if ((a2 & 1) != 0 && v7 == 7)
    *a3 = v6 | 0x800000000;
  return result;
}

uint64_t llvm::StringAttributeImpl::StringAttributeImpl(uint64_t a1, const void *a2, size_t __len, void *__src, size_t a5)
{
  unsigned int v7;
  uint64_t v9;
  int v10;

  v7 = __len;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = __len;
  *(_DWORD *)(a1 + 16) = a5;
  v9 = a1 + 24;
  if (__len)
    memmove((void *)(a1 + 24), a2, __len);
  *(_BYTE *)(v9 + v7) = 0;
  if (a5)
  {
    memmove((void *)(v9 + v7 + 1), __src, a5);
    v7 = *(_DWORD *)(a1 + 12);
    v10 = *(_DWORD *)(a1 + 16) + 1;
  }
  else
  {
    v10 = 1;
  }
  *(_BYTE *)(v9 + v10 + v7) = 0;
  return a1;
}

unsigned int *llvm::AttributeImpl::Profile(unsigned int *a1, int a2, uint64_t a3)
{
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, a2);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, a3);
  return llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, SHIDWORD(a3));
}

_QWORD *std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v3 = a2;
  if (a2 != a1)
  {
    v5 = a2 - a1;
    v3 = a1;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (!*v7
        || *(_BYTE *)(v8 + 8) != 2
        || (v9 = *(const void **)a3,
            v10 = *(_QWORD *)(a3 + 8),
            v11 = v8 + 24,
            v12 = *(unsigned int *)(v8 + 12),
            v14[0] = v11,
            v14[1] = v12,
            (llvm::StringRef::compare((uint64_t)v14, v9, v10) & 0x80000000) != 0))
      {
        v3 = v7 + 1;
        v6 = v5 + ~v6;
      }
      v5 = v6;
    }
    while (v6);
  }
  return v3;
}

unsigned int *llvm::FoldingSet<llvm::AttributeImpl>::GetNodeProfile(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return llvm::AttributeImpl::Profile(a2, a3);
}

BOOL llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;

  llvm::AttributeImpl::Profile(a2, a5);
  v7 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t llvm::FoldingSet<llvm::AttributeImpl>::ComputeNodeHash(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t *v5;

  llvm::AttributeImpl::Profile(a2, a3);
  return llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(_QWORD *)a3 + 4 * a3[2], v4, v5);
}

unsigned int *llvm::FoldingSet<llvm::AttributeSetNode>::GetNodeProfile(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 48), *(unsigned int *)(a2 + 8));
}

BOOL llvm::FoldingSet<llvm::AttributeSetNode>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;

  llvm::AttributeListImpl::Profile(a5, (uint64_t *)(a2 + 48), *(unsigned int *)(a2 + 8));
  v7 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t llvm::FoldingSet<llvm::AttributeSetNode>::ComputeNodeHash(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t *v5;

  llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 48), *(unsigned int *)(a2 + 8));
  return llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(_QWORD *)a3 + 4 * a3[2], v4, v5);
}

uint64_t llvm::array_pod_sort_comparator<llvm::Attribute>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  char v8;
  uint64_t result;
  BOOL v10;
  BOOL v11;

  v3 = *a2;
  v4 = *a1;
  if (*a1)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v4)
      v6 = 1;
    else
      v6 = v3 == 0;
    if (!v6)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = llvm::AttributeImpl::operator<(*a1, v3);
    if ((v8 & 1) != 0)
      return 0xFFFFFFFFLL;
    v4 = *a1;
    v3 = *a2;
  }
  if (v3)
    v10 = 1;
  else
    v10 = v4 == 0;
  result = !v10;
  if (v3)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
    return llvm::AttributeImpl::operator<(v3, v4);
  return result;
}

unsigned int *llvm::FoldingSet<llvm::AttributeListImpl>::GetNodeProfile(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 40), *(unsigned int *)(a2 + 8));
}

BOOL llvm::FoldingSet<llvm::AttributeListImpl>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;

  llvm::AttributeListImpl::Profile(a5, (uint64_t *)(a2 + 40), *(unsigned int *)(a2 + 8));
  v7 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t llvm::FoldingSet<llvm::AttributeListImpl>::ComputeNodeHash(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t *v5;

  llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 40), *(unsigned int *)(a2 + 8));
  return llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(_QWORD *)a3 + 4 * a3[2], v4, v5);
}

_BYTE *llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = a4 - __src;
    if (v9 + v10 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + v10, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v11 = (_BYTE *)(v7 + 8 * v8);
    v12 = (_BYTE *)(v7 + 8 * v9);
    v13 = (v12 - v11) >> 3;
    if (v13 >= v10)
    {
      v17 = v10 + v9;
      if (v17 <= a1[3])
      {
        v18 = v9;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v17, 8);
        v18 = a1[2];
        LODWORD(v9) = a1[2];
      }
      if (a4 != v5)
      {
        v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v18);
        v20 = -8 * v10;
        do
        {
          *v19++ = *(_QWORD *)&v12[v20];
          v20 += 8;
        }
        while (v20);
      }
      a1[2] = v9 + v10;
      if (&v12[-8 * v10] != v11)
        memmove(&v11[8 * v10], v11, &v12[-8 * v10] - v11);
      if (a4 != v5)
        memmove(v11, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v14 = v9 + ((unint64_t)((char *)a4 - (char *)v5) >> 3);
      a1[2] = v14;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v14 - 8 * v13), (const void *)(v7 + 8 * v8), v12 - v11);
        v15 = v11;
        do
        {
          v16 = *v5++;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      if (v5 != a4)
        memcpy(v12, v5, (char *)a4 - (char *)v5);
    }
  }
  return v11;
}

uint64_t llvm::SmallVectorImpl<llvm::Attribute>::insert_one_impl<llvm::Attribute>(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = *(_QWORD *)a1;
  v6 = a1[2];
  if (*(_QWORD *)a1 + 8 * v6 == a2)
  {
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a1, *a3);
    return *(_QWORD *)a1 + 8 * a1[2] - 8;
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v6 + 1, 8);
      v5 = *(_QWORD *)a1;
      v6 = a1[2];
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *(_QWORD *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = a1[2];
    }
    a1[2] = v6 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

BOOL llvm::AttributeMask::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v6;

  if (!a2)
  {
    v4 = 0;
LABEL_6:
    v3 = (1 << v4) & *(_QWORD *)(a1 + ((v4 >> 3) & 0x1FFFFFF8));
    return v3 != 0;
  }
  if (*(_BYTE *)(a2 + 8) != 2)
  {
    v4 = *(unsigned int *)(a2 + 12);
    goto LABEL_6;
  }
  v2 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)&v6 = a2 + 24;
  *((_QWORD *)&v6 + 1) = v2;
  v3 = std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(a1 + 16, &v6);
  return v3 != 0;
}

uint64_t std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v5;
  size_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  const void *v19;
  size_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  __int128 v26;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return 0;
  while (1)
  {
    v5 = (const void *)v3[4];
    v6 = v3[5];
    v26 = *a2;
    if ((llvm::StringRef::compare((uint64_t)&v26, v5, v6) & 0x80000000) != 0)
    {
      v2 = v3;
      goto LABEL_6;
    }
    v7 = v3[5];
    v8 = *(const void **)a2;
    v9 = *((_QWORD *)a2 + 1);
    *(_QWORD *)&v26 = v3[4];
    *((_QWORD *)&v26 + 1) = v7;
    if ((llvm::StringRef::compare((uint64_t)&v26, v8, v9) & 0x80000000) == 0)
      break;
    ++v3;
LABEL_6:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return 0;
  }
  v11 = (_QWORD *)*v3;
  v12 = v3;
  if (*v3)
  {
    v12 = v3;
    do
    {
      v13 = v11[5];
      v14 = *(const void **)a2;
      v15 = *((_QWORD *)a2 + 1);
      *(_QWORD *)&v26 = v11[4];
      *((_QWORD *)&v26 + 1) = v13;
      v16 = llvm::StringRef::compare((uint64_t)&v26, v14, v15);
      v17 = v11 + 1;
      if (v16 >= 0)
      {
        v17 = v11;
        v12 = v11;
      }
      v11 = (_QWORD *)*v17;
    }
    while (*v17);
  }
  v18 = (_QWORD *)v3[1];
  if (v18)
  {
    do
    {
      v19 = (const void *)v18[4];
      v20 = v18[5];
      v26 = *a2;
      v21 = llvm::StringRef::compare((uint64_t)&v26, v19, v20);
      v22 = v18 + 1;
      if (v21 < 0)
      {
        v22 = v18;
        v2 = v18;
      }
      v18 = (_QWORD *)*v22;
    }
    while (*v22);
  }
  if (v12 == v2)
    return 0;
  result = 0;
  do
  {
    v23 = (_QWORD *)v12[1];
    if (v23)
    {
      do
      {
        v24 = v23;
        v23 = (_QWORD *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        v24 = (_QWORD *)v12[2];
        v25 = *v24 == (_QWORD)v12;
        v12 = v24;
      }
      while (!v25);
    }
    ++result;
    v12 = v24;
  }
  while (v24 != v2);
  return result;
}

uint64_t llvm::UpgradeIntrinsicFunction(llvm *this, llvm::Function **a2, llvm::Function **a3)
{
  uint64_t v5;
  llvm *v6;
  int v7;

  *a2 = 0;
  v5 = UpgradeIntrinsicFunction1(this, a2);
  if (*a2)
    v6 = *a2;
  else
    v6 = this;
  v7 = *((_DWORD *)v6 + 9);
  if (v7)
    *((_QWORD *)v6 + 14) = llvm::Intrinsic::getAttributes(**(uint64_t ***)v6, v7);
  return v5;
}

uint64_t UpgradeIntrinsicFunction1(llvm::Function *a1, llvm::Function **a2)
{
  uint64_t ValueName;
  llvm::Function *v5;
  uint64_t v6;
  uint64_t v8;
  int v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  size_t v19;
  const void *v20;
  BOOL v21;
  BOOL v23;
  uint64_t *v24;
  std::string::size_type *v25;
  _BYTE *v30;
  BOOL v31;
  BOOL v32;
  uint64_t v35;
  size_t v37;
  const void *v38;
  unsigned __int8 v48;
  unsigned __int16 *v49;
  uint64_t v50;
  int v54;
  int v55;
  int v57;
  BOOL v58;
  uint64_t *v59;
  int v60;
  size_t v62;
  const void *v63;
  BOOL v64;
  uint64_t *v65;
  std::string::size_type *v66;
  size_t *v67;
  _BOOL4 v68;
  int v69;
  std::string::size_type v70;
  void *v71;
  int v74;
  uint64_t v75;
  size_t v76;
  const void *v77;
  size_t *v78;
  _BOOL4 v79;
  int v80;
  std::string::size_type size;
  void *v82;
  BOOL v83;
  std::string *v85;
  uint64_t v86;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t **v91;
  uint64_t v92;
  std::string::size_type v93;
  int v94;
  unsigned __int8 v99;
  std::string::size_type *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  size_t *v106;
  _BOOL4 v107;
  int v108;
  std::string::size_type v109;
  void *v110;
  _QWORD *v111;
  int v112;
  size_t v113;
  const void *v114;
  size_t *v115;
  int v116;
  std::string::size_type v117;
  void *v118;
  uint64_t v120;
  size_t v121;
  const void *v122;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  unsigned __int8 v130;
  unsigned int v131;
  _BOOL4 v132;
  _BOOL4 v133;
  BOOL v134;
  _BOOL4 v135;
  _BOOL4 v136;
  int v137;
  int v138;
  int v144;
  uint64_t *v145;
  uint64_t *v150;
  __int16 v151;
  size_t *v152;
  int v153;
  std::string::size_type v154;
  void *v155;
  size_t *v156;
  int v157;
  std::string::size_type v158;
  void *v159;
  size_t v161;
  const void *v162;
  int8x16_t *v165;
  uint64_t *v166;
  __int16 v167;
  uint64_t *v168;
  unint64_t v169;
  int v170;
  llvm::Type *v171;
  unint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  llvm::Function *v175;
  size_t *v176;
  int v177;
  std::string::size_type v178;
  void *v179;
  uint64_t v181;
  size_t v182;
  const void *v183;
  uint64_t *v184;
  BOOL v187;
  char v188;
  uint64_t *v196;
  size_t *v197;
  int v198;
  std::string::size_type v199;
  void *v200;
  BOOL v201;
  BOOL v202;
  uint64_t v203;
  std::string::size_type v204;
  std::string::size_type v205;
  llvm::Function *Declaration;
  void *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t *v210;
  const char *v217;
  char *v218;
  size_t v219;
  BOOL v223;
  int v224;
  BOOL v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v233;
  uint64_t **v234;
  unint64_t v235;
  size_t v236;
  void *v237;
  char v238;
  size_t *v239;
  uint64_t v240;
  void *v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  llvm::Type *v245;
  uint64_t v246;
  _DWORD *v247;
  llvm::Function *v248;
  llvm::Intrinsic *v249;
  llvm::Function *v250;
  llvm::Function *v251;
  char v252;
  int v273;
  uint64_t v274;
  BOOL v276;
  uint64_t v277;
  uint64_t v279;
  llvm::Type *v281;
  const char *v282;
  unint64_t PrimitiveSizeInBits;
  uint64_t v284;
  std::string::size_type v285;
  int v286;
  void *__p[2];
  char v288;
  char *v289;
  unint64_t v290;
  std::string v291;
  unint64_t v292;
  __int16 v293;
  __int128 v294;
  const char *v295;
  __int16 v296;
  uint64_t v297;

  v297 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    return 0;
  ValueName = llvm::Value::getValueName((uint64_t ***)a1);
  v6 = *(_QWORD *)ValueName;
  if (*(_QWORD *)ValueName < 8uLL)
    return 0;
  if (*(_DWORD *)(ValueName + 16) != 1836477548 || *(_BYTE *)(ValueName + 20) != 46)
    return 0;
  v11 = ValueName + 21;
  v10 = *(char *)(ValueName + 21);
  v12 = v6 - 5;
  v289 = (char *)(ValueName + 21);
  v290 = v6 - 5;
  switch(v10)
  {
    case 'a':
      if (v12 < 8)
        goto LABEL_16;
      if (*(_QWORD *)v11 == 0x746962722E6D7261)
        goto LABEL_465;
      if (v12 < 0xC)
        goto LABEL_16;
      if (*(_QWORD *)v11 == 0x2E34366863726161 && *(_DWORD *)(ValueName + 29) == 1953063538)
        goto LABEL_465;
      if (v12 >= 0x13)
      {
        if (*(_QWORD *)v11 == 0x2E34366863726161
          && *(_QWORD *)(ValueName + 29) == 0x6972662E6E6F656ELL
          && *(_QWORD *)(ValueName + 32) == 0x6E746E6972662E6ELL)
        {
          v168 = (uint64_t *)*((_QWORD *)a1 + 5);
          if ((*((_WORD *)a1 + 9) & 1) != 0)
            llvm::Function::BuildLazyArguments(a1);
          v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
          v8 = 1;
          v17 = v168;
          v18 = 264;
          goto LABEL_468;
        }
      }
      else if (v12 < 0x11)
      {
        goto LABEL_16;
      }
      if (*(_QWORD *)v11 == 0x2E34366863726161
        && *(_QWORD *)(ValueName + 29) == 0x6962722E6E6F656ELL
        && *(_BYTE *)(ValueName + 37) == 116)
      {
LABEL_465:
        v150 = (uint64_t *)*((_QWORD *)a1 + 5);
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a1);
        v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
        v8 = 1;
        v17 = v150;
        v18 = 8;
        goto LABEL_468;
      }
LABEL_16:
      if (v6 == 29)
      {
        if (!memcmp((const void *)(ValueName + 21), "aarch64.sve.bfmlalb.lane", v12))
        {
          v13 = (uint64_t *)*((_QWORD *)a1 + 5);
          v14 = 991;
          goto LABEL_538;
        }
        if (*(_QWORD *)v11 == 0x2E34366863726161
          && *(_QWORD *)(v11 + 8) == 0x6C6D66622E657673
          && *(_QWORD *)(v11 + 16) == 0x656E616C2E746C61)
        {
          v13 = (uint64_t *)*((_QWORD *)a1 + 5);
          v14 = 993;
          goto LABEL_538;
        }
      }
      else if (v6 == 27 && !memcmp((const void *)(ValueName + 21), "aarch64.sve.bfdot.lane", v12))
      {
        v13 = (uint64_t *)*((_QWORD *)a1 + 5);
        v14 = 989;
LABEL_538:
        v85 = 0;
        v86 = 0;
LABEL_673:
        Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(v13, v14, (BOOL **)v85, v86);
LABEL_785:
        *a2 = Declaration;
        return 1;
      }
      v89 = atomic_load((unsigned __int8 *)&_MergedGlobals_28);
      if ((v89 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_28))
      {
        llvm::Regex::Regex((uint64_t)&unk_257963E00, "^aarch64\\.sve\\.ld[234](.nxv[a-z0-9]+|$)", 39, 0);
        __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_257963E00, &dword_24A800000);
        __cxa_guard_release(&_MergedGlobals_28);
      }
      if (!llvm::Regex::match((uint64_t)&unk_257963E00, v289, v290, 0, 0))
      {
        if (v290 >= 0x15)
        {
          if (*(_QWORD *)v289 == 0x2E34366863726161
            && *((_QWORD *)v289 + 1) == 0x6C7075742E657673
            && *(_QWORD *)(v289 + 13) == 0x7465672E656C7075)
          {
LABEL_313:
            v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
            if ((*((_BYTE *)a1 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments(a1);
            v291.__r_.__value_.__l.__size_ = **((_QWORD **)a1 + 11);
            v13 = (uint64_t *)*((_QWORD *)a1 + 5);
            v85 = &v291;
            v14 = 320;
            goto LABEL_672;
          }
          if (*(_QWORD *)v289 == 0x2E34366863726161
            && *((_QWORD *)v289 + 1) == 0x6C7075742E657673
            && *(_QWORD *)(v289 + 13) == 0x7465732E656C7075)
          {
            v165 = *(int8x16_t **)(*((_QWORD *)a1 + 3) + 16);
            v291.__r_.__value_.__r.__words[0] = v165->u64[1];
            *(int8x16_t *)&v291.__r_.__value_.__r.__words[1] = vextq_s8(v165[1], v165[1], 8uLL);
            v13 = (uint64_t *)*((_QWORD *)a1 + 5);
            v85 = &v291;
            v14 = 321;
LABEL_664:
            v86 = 3;
            goto LABEL_673;
          }
        }
        v99 = atomic_load((unsigned __int8 *)&qword_257963DE0);
        if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_257963DE0))
        {
          llvm::Regex::Regex((uint64_t)&unk_257963E10, "^aarch64\\.sve\\.tuple\\.create[234](.nxv[a-z0-9]+|$)", 50, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_257963E10, &dword_24A800000);
          __cxa_guard_release(&qword_257963DE0);
        }
        if (llvm::Regex::match((uint64_t)&unk_257963E10, v289, v290, 0, 0))
        {
          v100 = *(std::string::size_type **)(*((_QWORD *)a1 + 3) + 16);
          v101 = *v100;
          v102 = v100[2];
          v291.__r_.__value_.__r.__words[0] = v101;
          v291.__r_.__value_.__l.__size_ = v102;
LABEL_310:
          v13 = (uint64_t *)*((_QWORD *)a1 + 5);
          v85 = &v291;
          v14 = 321;
          goto LABEL_672;
        }
        if (v290 >= 0xD)
        {
          if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v289 + 5) == 0x7A6C63762E6E6F65)
          {
            if ((*((_WORD *)a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(a1);
            *(_QWORD *)&v294 = **((_QWORD **)a1 + 11);
            *((_QWORD *)&v294 + 1) = ***(_QWORD ***)a1 + 1920;
            v169 = llvm::FunctionType::get(**(uint64_t ****)(*((_QWORD *)a1 + 3) + 16), (uint64_t *)&v294, 2, 0);
            v170 = *((_DWORD *)a1 + 8) & 0xF;
            v171 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a1 + 8) >> 8);
            v172 = 14;
            if (v290 < 0xE)
              v172 = v290;
            v293 = 1283;
            v291.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.ctlz.";
            v291.__r_.__value_.__r.__words[2] = (std::string::size_type)&v289[v172];
            v292 = v290 - v172;
            v173 = *((_QWORD *)a1 + 5);
            v174 = operator new(0x80uLL);
            v175 = (llvm::Function *)(v174 + 2);
            v174[7] = v174[7] & 0x38000000 | 0x40000000;
            *(_QWORD *)v174 = 0;
            llvm::Function::Function((uint64_t)(v174 + 2), v169, v170, v171, (const llvm::Twine *)&v291, v173);
            *a2 = v175;
            return 1;
          }
          if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v289 + 5) == 0x746E63762E6E6F65)
          {
            v184 = (uint64_t *)*((_QWORD *)a1 + 5);
            if ((*((_WORD *)a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments(a1);
            v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
            v8 = 1;
            v17 = v184;
            v18 = 54;
            goto LABEL_468;
          }
        }
        v125 = atomic_load((unsigned __int8 *)&qword_257963DE8);
        if ((v125 & 1) == 0 && __cxa_guard_acquire(&qword_257963DE8))
        {
          llvm::Regex::Regex((uint64_t)&unk_257963E20, "^arm\\.neon\\.vst([1234]|[234]lane)\\.v[a-z0-9]*$", 46, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_257963E20, &dword_24A800000);
          __cxa_guard_release(&qword_257963DE8);
        }
        if (llvm::Regex::match((uint64_t)&unk_257963E20, v289, v290, 0, 0))
        {
          v126 = *((_QWORD *)a1 + 3);
          v127 = 8 * *(unsigned int *)(v126 + 12) - 8;
          *(_OWORD *)&v291.__r_.__value_.__l.__data_ = *(_OWORD *)(*(_QWORD *)(v126 + 16) + 8);
          v128 = llvm::StringRef::find((uint64_t *)&v289, "lane", 4uLL, 0);
          v129 = (int *)((char *)&UpgradeIntrinsicFunction1(llvm::Function *,llvm::Function *&)::StoreLaneInts
                       + (v127 >> 1)
                       - 20);
          if (v128 == -1)
            v129 = (int *)((char *)&UpgradeIntrinsicFunction1(llvm::Function *,llvm::Function *&)::StoreInts
                         + (v127 >> 1)
                         - 12);
          v14 = *v129;
          v85 = &v291;
          v13 = (uint64_t *)*((_QWORD *)a1 + 5);
LABEL_672:
          v86 = 2;
          goto LABEL_673;
        }
        if (v290 == 18)
        {
          if (*(_QWORD *)v289 != 0x657268742E6D7261
            || *((_QWORD *)v289 + 1) != 0x746E696F702E6461
            || *((_WORD *)v289 + 8) != 29285)
          {
            goto LABEL_593;
          }
        }
        else
        {
          if (v290 != 22)
          {
            if (v290 < 0x10)
            {
              if (v290 == 15)
              {
                v187 = *(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v289 + 7) == 0x2E746F6466622E6ELL;
                v188 = 1;
                if (!v187)
                  goto LABEL_704;
                goto LABEL_703;
              }
              if (v290 < 0xC)
                goto LABEL_718;
              v188 = 1;
              goto LABEL_704;
            }
            goto LABEL_593;
          }
          if (*(_QWORD *)v289 != 0x2E34366863726161
            || *((_QWORD *)v289 + 1) != 0x702E646165726874
            || *(_QWORD *)(v289 + 14) != 0x7265746E696F702ELL)
          {
LABEL_593:
            if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *((_QWORD *)v289 + 1) == 0x2E7364646171762ELL)
            {
              v196 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v8 = 1;
              v17 = v196;
              v18 = 265;
              goto LABEL_468;
            }
            if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *((_QWORD *)v289 + 1) == 0x2E7564646171762ELL)
            {
              v208 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v8 = 1;
              v17 = v208;
              v18 = 303;
              goto LABEL_468;
            }
            if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *((_QWORD *)v289 + 1) == 0x2E7362757371762ELL)
            {
              v209 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v8 = 1;
              v17 = v209;
              v18 = 286;
              goto LABEL_468;
            }
            if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *((_QWORD *)v289 + 1) == 0x2E7562757371762ELL)
            {
              v210 = (uint64_t *)*((_QWORD *)a1 + 5);
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
              v8 = 1;
              v17 = v210;
              v18 = 314;
              goto LABEL_468;
            }
            if (v290 < 0x11)
            {
              if (*(_QWORD *)v289 != 0x6E6F656E2E6D7261 || *(_QWORD *)(v289 + 7) != 0x2E746F6466622E6ELL)
              {
                if (*(_QWORD *)v289 != 0x6E6F656E2E6D7261 || *((_DWORD *)v289 + 2) != 1835426350)
                  goto LABEL_709;
                goto LABEL_714;
              }
              goto LABEL_702;
            }
            if (*(_QWORD *)v289 != 0x2E34366863726161
              || *((_QWORD *)v289 + 1) != 0x6464612E6E6F656ELL
              || v289[16] != 112)
            {
              goto LABEL_696;
            }
            if (*((_QWORD *)a1 + 12) == 2)
            {
              v228 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
              if (!v228
                || (*(_DWORD *)(v228 + 8) & 0xFE) != 0x12
                || (v229 = *(_DWORD *)(*(_QWORD *)(v228 + 24) + 8), v229 >= 4u)
                && v229 != 5
                && (v229 & 0xFD) != 4)
              {
LABEL_696:
                if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v289 + 7) == 0x2E746F6466622E6ELL)
                {
LABEL_702:
                  v188 = 0;
LABEL_703:
                  if (*(_WORD *)&v289[v290 - 2] == 14441)
                  {
                    switch(v290)
                    {
                      case 0x19uLL:
                        v224 = v289[24];
                        v226 = *(_QWORD *)v289 == 0x6E6F656E2E6D7261
                            && *((_QWORD *)v289 + 1) == 0x762E746F6466622ELL
                            && *((_QWORD *)v289 + 2) == 0x6938762E32336632;
                        v227 = 56;
                        goto LABEL_875;
                      case 0x1AuLL:
                        v224 = *((unsigned __int16 *)v289 + 12);
                        v226 = *(_QWORD *)v289 == 0x6E6F656E2E6D7261
                            && *((_QWORD *)v289 + 1) == 0x762E746F6466622ELL
                            && *((_QWORD *)v289 + 2) == 0x3631762E32336634;
                        v227 = 14441;
LABEL_875:
                        if (!v226 || v224 != v227)
                          goto LABEL_771;
                        v273 = 2812;
                        goto LABEL_901;
                      case 0x1DuLL:
                        v274 = *(_QWORD *)(v289 + 21);
                        v276 = *(_QWORD *)v289 == 0x2E34366863726161
                            && *((_QWORD *)v289 + 1) == 0x6466622E6E6F656ELL
                            && *((_QWORD *)v289 + 2) == 0x32336632762E746FLL;
                        v277 = 0x38762E323366;
                        goto LABEL_895;
                      case 0x1EuLL:
                        v274 = *(_QWORD *)(v289 + 22);
                        v276 = *(_QWORD *)v289 == 0x2E34366863726161
                            && *((_QWORD *)v289 + 1) == 0x6466622E6E6F656ELL
                            && *((_QWORD *)v289 + 2) == 0x32336634762E746FLL;
                        v277 = 0x3631762E3233;
LABEL_895:
                        v279 = v277 & 0xFFFFFFFFFFFFLL | 0x3869000000000000;
                        if (!v276 || v274 != v279)
                          goto LABEL_771;
                        v273 = 488;
LABEL_901:
                        v281 = **(llvm::Type ***)(*((_QWORD *)a1 + 3) + 16);
                        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v281);
                        if ((_BYTE)v282)
                        {
                          v281 = **(llvm::Type ***)(*((_QWORD *)a1 + 3) + 16);
                        }
                        v284 = **((_QWORD **)a1 + 5);
                        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
                        llvm::FixedVectorType::get((uint64_t **)(*(_QWORD *)v284 + 1680), (llvm::Type *)(PrimitiveSizeInBits >> 4));
                        v291.__r_.__value_.__l.__size_ = v285;
                        v13 = (uint64_t *)*((_QWORD *)a1 + 5);
                        v85 = &v291;
                        v14 = v273;
                        break;
                      default:
                        goto LABEL_771;
                    }
                    goto LABEL_672;
                  }
                  goto LABEL_704;
                }
                if (v290 < 0x13)
                {
                  v188 = 0;
                  goto LABEL_704;
                }
                v188 = 0;
                if (*(_QWORD *)v289 == 0x2E34366863726161
                  && *((_QWORD *)v289 + 1) == 0x6466622E6E6F656ELL
                  && *(_QWORD *)(v289 + 11) == 0x2E746F6466622E6ELL)
                {
                  goto LABEL_703;
                }
LABEL_704:
                if (*(_QWORD *)v289 != 0x6E6F656E2E6D7261 || *((_DWORD *)v289 + 2) != 1835426350)
                {
                  if ((v188 & 1) != 0)
                    goto LABEL_718;
LABEL_709:
                  if (*(_QWORD *)v289 != 0x2E34366863726161 || *((_QWORD *)v289 + 1) != 0x6D66622E6E6F656ELL)
                  {
LABEL_718:
                    switch(v290)
                    {
                      case '#':
                        if (!memcmp(v289, "arm.cde.vcx1q.predicated.v2i64.v4i1", 0x23uLL)
                          || !memcmp(v289, "arm.cde.vcx2q.predicated.v2i64.v4i1", 0x23uLL))
                        {
                          return 1;
                        }
                        v217 = "arm.cde.vcx3q.predicated.v2i64.v4i1";
                        v218 = v289;
                        v219 = 35;
                        goto LABEL_770;
                      case '$':
                        if (!memcmp(v289, "arm.cde.vcx1qa.predicated.v2i64.v4i1", 0x24uLL)
                          || !memcmp(v289, "arm.cde.vcx2qa.predicated.v2i64.v4i1", 0x24uLL))
                        {
                          return 1;
                        }
                        v217 = "arm.cde.vcx3qa.predicated.v2i64.v4i1";
                        v218 = v289;
                        v219 = 36;
                        goto LABEL_770;
                      case '%':
                      case '&':
                      case '\'':
                      case '(':
                      case ')':
                      case '*':
                      case '-':
                      case '.':
                      case '/':
                      case '0':
                      case '1':
                      case '2':
                      case '3':
                      case '6':
                      case ';':
                        goto LABEL_771;
                      case '+':
                        v217 = "arm.mve.vqdmull.predicated.v2i64.v4i32.v4i1";
                        v218 = v289;
                        v219 = 43;
                        goto LABEL_770;
                      case ',':
                        v217 = "arm.mve.mull.int.predicated.v2i64.v4i32.v4i1";
                        v218 = v289;
                        v219 = 44;
                        goto LABEL_770;
                      case '4':
                        v217 = "arm.mve.vldr.gather.base.predicated.v2i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 52;
                        goto LABEL_770;
                      case '5':
                        v217 = "arm.mve.vstr.scatter.base.predicated.v2i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 53;
                        goto LABEL_770;
                      case '7':
                        v217 = "arm.mve.vldr.gather.base.wb.predicated.v2i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 55;
                        goto LABEL_770;
                      case '8':
                        v217 = "arm.mve.vstr.scatter.base.wb.predicated.v2i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 56;
                        goto LABEL_770;
                      case '9':
                        v217 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0.v2i64.v4i1";
                        v218 = v289;
                        v219 = 57;
                        goto LABEL_770;
                      case ':':
                        v217 = "arm.mve.vstr.scatter.offset.predicated.p0.v2i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 58;
                        goto LABEL_770;
                      case '<':
                        v217 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 60;
                        goto LABEL_770;
                      case '=':
                        v217 = "arm.mve.vstr.scatter.offset.predicated.p0i64.v2i64.v2i64.v4i1";
                        v218 = v289;
                        v219 = 61;
LABEL_770:
                        if (memcmp(v218, v217, v219))
                          goto LABEL_771;
                        return 1;
                      default:
                        if (v290 == 15)
                        {
                          if (*(_QWORD *)v289 == 0x612E6E6367646D61 && *(_QWORD *)(v289 + 7) == 0x7469626E67696C61)
                          {
                            v17 = (uint64_t *)*((_QWORD *)a1 + 5);
                            v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
                            v8 = 1;
                            v18 = 149;
                            goto LABEL_468;
                          }
                        }
                        else if (v290 == 14)
                        {
                          v223 = *(_QWORD *)v289 == 0x2E65766D2E6D7261
                              && *(_QWORD *)(v289 + 6) == 0x3436707463762E65;
                          if (v223 && *(_DWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 3) + 16) + 32) == 4)
                          {
                            rename((uint64_t ***)a1);
                            return 1;
                          }
                        }
                        break;
                    }
                    goto LABEL_771;
                  }
                }
LABEL_714:
                if (*(_QWORD *)&v289[v290 - 12] != 0x762E32336634762ELL || *(_DWORD *)&v289[v290 - 4] != 946419249)
                  goto LABEL_718;
                switch(v290)
                {
                  case 0x1BuLL:
                    if (*(_QWORD *)v289 != 0x6E6F656E2E6D7261
                      || *((_QWORD *)v289 + 1) != 0x2E616C6D6D66622ELL
                      || *((_QWORD *)v289 + 2) != 0x31762E3233663476
                      || *(_QWORD *)(v289 + 19) != 0x38693631762E3233)
                    {
                      goto LABEL_771;
                    }
                    v14 = 2815;
                    goto LABEL_906;
                  case 0x1CuLL:
                    if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261
                      && *((_QWORD *)v289 + 1) == 0x626C616C6D66622ELL
                      && *((_QWORD *)v289 + 2) == 0x762E32336634762ELL
                      && *((_DWORD *)v289 + 6) == 946419249)
                    {
                      v14 = 2813;
                      goto LABEL_906;
                    }
                    if (*(_QWORD *)v289 == 0x6E6F656E2E6D7261
                      && *((_QWORD *)v289 + 1) == 0x746C616C6D66622ELL
                      && *((_QWORD *)v289 + 2) == 0x762E32336634762ELL
                      && *((_DWORD *)v289 + 6) == 946419249)
                    {
                      v14 = 2814;
                      goto LABEL_906;
                    }
                    goto LABEL_771;
                  case 0x1FuLL:
                    if (*(_QWORD *)v289 != 0x2E34366863726161
                      || *((_QWORD *)v289 + 1) != 0x6D66622E6E6F656ELL
                      || *((_QWORD *)v289 + 2) != 0x336634762E616C6DLL
                      || *(_QWORD *)(v289 + 23) != 0x38693631762E3233)
                    {
                      goto LABEL_771;
                    }
                    v14 = 491;
                    goto LABEL_906;
                  case 0x20uLL:
                    if (*(_QWORD *)v289 == 0x2E34366863726161
                      && *((_QWORD *)v289 + 1) == 0x6D66622E6E6F656ELL
                      && *((_QWORD *)v289 + 2) == 0x6634762E626C616CLL
                      && *((_QWORD *)v289 + 3) == 0x38693631762E3233)
                    {
                      v14 = 489;
                    }
                    else
                    {
                      if (*(_QWORD *)v289 != 0x2E34366863726161
                        || *((_QWORD *)v289 + 1) != 0x6D66622E6E6F656ELL
                        || *((_QWORD *)v289 + 2) != 0x6634762E746C616CLL
                        || *((_QWORD *)v289 + 3) != 0x38693631762E3233)
                      {
                        goto LABEL_771;
                      }
                      v14 = 490;
                    }
LABEL_906:
                    v13 = (uint64_t *)*((_QWORD *)a1 + 5);
                    goto LABEL_538;
                  default:
                    goto LABEL_771;
                }
              }
              v17 = (uint64_t *)*((_QWORD *)a1 + 5);
              v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
              v8 = 1;
              v18 = 496;
LABEL_468:
              *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v17, v18, (BOOL **)&v291, 1);
              return v8;
            }
LABEL_771:
            v230 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
            if ((*(_DWORD *)(v230 + 8) & 0x600) != 0x400 && v230 != 0 && *(_DWORD *)(v230 + 8) == 16)
            {
              v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291.__r_.__value_.__r.__words[2];
              v291.__r_.__value_.__l.__size_ = 0x400000000;
              llvm::Intrinsic::getIntrinsicInfoTableEntries(*((_DWORD *)a1 + 9));
              if (*(_DWORD *)v291.__r_.__value_.__l.__data_ == 13)
              {
                v233 = *((_QWORD *)a1 + 3);
                v234 = (uint64_t **)llvm::StructType::get(*(uint64_t **)v230, *(_QWORD *)(v230 + 16), *(unsigned int *)(v230 + 12), 0);
                v235 = llvm::FunctionType::get(v234, (uint64_t *)(*(_QWORD *)(v233 + 16) + 8), (8 * *(unsigned int *)(v233 + 12) - 8) >> 3, (unint64_t *)(*(_DWORD *)(v233 + 8) > 0xFFu));
                if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
                {
                  v239 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
                  v237 = v239 + 2;
                  v236 = *v239;
                }
                else
                {
                  v236 = 0;
                  v237 = &str_3_26;
                }
                std::string::basic_string[abi:nn180100](__p, v237, v236);
                if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
                {
                  v242 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)a1);
                  v243 = *v242;
                  v241 = v242 + 2;
                  v240 = v243;
                }
                else
                {
                  v240 = 0;
                  v241 = &str_3_26;
                }
                v296 = 773;
                *(_QWORD *)&v294 = v241;
                *((_QWORD *)&v294 + 1) = v240;
                v295 = ".old";
                llvm::Value::setName(a1, (const llvm::Twine *)&v294);
                v244 = *((_DWORD *)a1 + 8) & 0xF;
                v245 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a1 + 8) >> 8);
                v296 = 260;
                *(_QWORD *)&v294 = __p;
                v246 = *((_QWORD *)a1 + 5);
                v247 = operator new(0x80uLL);
                v248 = (llvm::Function *)(v247 + 2);
                v247[7] = v247[7] & 0x38000000 | 0x40000000;
                *(_QWORD *)v247 = 0;
                v249 = (llvm::Intrinsic *)llvm::Function::Function((uint64_t)(v247 + 2), v235, v244, v245, (const llvm::Twine *)&v294, v246);
                *a2 = v248;
                v251 = llvm::Intrinsic::remangleIntrinsicFunction(v249, v250);
                if (v252)
                  *a2 = v251;
                if (v288 < 0)
                  operator delete(__p[0]);
                v207 = (void *)v291.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v291.__r_.__value_.__l.__data_ != &v291.__r_.__value_.__r.__words[2])
LABEL_796:
                  free(v207);
                return 1;
              }
              if ((std::string::size_type *)v291.__r_.__value_.__l.__data_ != &v291.__r_.__value_.__r.__words[2])
                free(v291.__r_.__value_.__l.__data_);
            }
            Declaration = llvm::Intrinsic::remangleIntrinsicFunction(a1, v5);
            if (!v238)
              return 0;
            goto LABEL_785;
          }
        }
        v13 = (uint64_t *)*((_QWORD *)a1 + 5);
        v14 = 297;
        goto LABEL_538;
      }
      v90 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
      if ((*(_DWORD *)(v90 + 8) & 0xFE) != 0x12)
        v90 = 0;
      v91 = *(uint64_t ***)(v90 + 24);
      if ((*((_WORD *)a1 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(a1);
      v92 = **((_QWORD **)a1 + 11);
      if ((*(_DWORD *)(v92 + 8) & 0xFE) != 0x12)
        v92 = 0;
      llvm::VectorType::get(v91, (llvm::Type *)(*(unsigned int *)(v92 + 32) | ((unint64_t)(*(_BYTE *)(v92 + 8) == 19) << 32)));
      v291.__r_.__value_.__r.__words[0] = v93;
      if (v290 >= 0xF)
      {
        if (*(_QWORD *)v289 == 0x2E34366863726161 && *(_QWORD *)(v289 + 7) == 0x32646C2E6576732ELL)
        {
          v94 = 1221;
        }
        else if (*(_QWORD *)v289 == 0x2E34366863726161 && *(_QWORD *)(v289 + 7) == 0x33646C2E6576732ELL)
        {
          v94 = 1222;
        }
        else if (*(_QWORD *)v289 ^ 0x2E34366863726161 | *(_QWORD *)(v289 + 7) ^ 0x34646C2E6576732ELL)
        {
          v94 = 0;
        }
        else
        {
          v94 = 1223;
        }
      }
      else
      {
        v94 = 0;
      }
      v166 = (uint64_t *)*((_QWORD *)a1 + 5);
      v8 = 1;
      *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v166, v94, (BOOL **)&v291, 1);
      return v8;
    case 'c':
      if (v12 < 5)
        goto LABEL_771;
      v15 = *(_DWORD *)v11 == 2053928035 && *(_BYTE *)(ValueName + 25) == 46;
      if (v15 && *((_QWORD *)a1 + 12) == 1)
      {
        rename((uint64_t ***)a1);
        v16 = (uint64_t *)*((_QWORD *)a1 + 5);
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a1);
        v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
        v8 = 1;
        v17 = v16;
        v18 = 53;
      }
      else
      {
        v58 = *(_DWORD *)v11 == 2054452323 && *(_BYTE *)(ValueName + 25) == 46;
        if (!v58 || *((_QWORD *)a1 + 12) != 1)
          goto LABEL_771;
        rename((uint64_t ***)a1);
        v59 = (uint64_t *)*((_QWORD *)a1 + 5);
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(a1);
        v291.__r_.__value_.__r.__words[0] = **((_QWORD **)a1 + 11);
        v8 = 1;
        v17 = v59;
        v18 = 55;
      }
      goto LABEL_468;
    case 'd':
      if (v6 == 14)
      {
        if (memcmp((const void *)(ValueName + 21), "dbg.value", v12) || *((_QWORD *)a1 + 12) != 4)
          goto LABEL_771;
      }
      else if (v6 != 13 || memcmp((const void *)(ValueName + 21), "dbg.addr", v12))
      {
        goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      v13 = (uint64_t *)*((_QWORD *)a1 + 5);
      v14 = 59;
      goto LABEL_538;
    case 'e':
      if (v12 >= 0x1C)
      {
        if (*(_QWORD *)v11 == 0x656D697265707865
          && *(_QWORD *)(ValueName + 29) == 0x6365762E6C61746ELL
          && *(_QWORD *)(ValueName + 37) == 0x727478652E726F74
          && *(_DWORD *)(ValueName + 45) == 779379553)
        {
          rename((uint64_t ***)a1);
          goto LABEL_313;
        }
      }
      else if (v6 != 32)
      {
        goto LABEL_168;
      }
      if (*(_QWORD *)v11 == 0x656D697265707865
        && *(_QWORD *)(ValueName + 29) == 0x6365762E6C61746ELL
        && *(_QWORD *)(ValueName + 37) == 0x65736E692E726F74
        && *(_QWORD *)(ValueName + 40) == 0x2E747265736E692ELL)
      {
        rename((uint64_t ***)a1);
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
        goto LABEL_310;
      }
LABEL_168:
      v291.__r_.__value_.__r.__words[0] = (std::string::size_type)&v291.__r_.__value_.__r.__words[2];
      v291.__r_.__value_.__l.__size_ = 0x200000000;
      v48 = atomic_load((unsigned __int8 *)&qword_257963DF0);
      if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_257963DF0))
      {
        llvm::Regex::Regex((uint64_t)&unk_257963E30, "^experimental.vector.reduce.([a-z]+)\\.[a-z][0-9]+", 49, 0);
        __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_257963E30, &dword_24A800000);
        __cxa_guard_release(&qword_257963DF0);
      }
      if (!llvm::Regex::match((uint64_t)&unk_257963E30, v289, v290, (unsigned int *)&v291, 0))
        goto LABEL_397;
      v49 = *(unsigned __int16 **)(v291.__r_.__value_.__r.__words[0] + 16);
      v50 = *(_QWORD *)(v291.__r_.__value_.__r.__words[0] + 24);
      switch(v50)
      {
        case 2:
          if (*v49 != 29295)
            goto LABEL_397;
          v57 = 329;
          break;
        case 4:
          switch(*(_DWORD *)v49)
          {
            case 0x78616D73:
              v57 = 330;
              break;
            case 0x6E696D73:
              v57 = 331;
              break;
            case 0x78616D75:
              v57 = 332;
              break;
            case 0x6E696D75:
              v57 = 333;
              break;
            case 0x78616D66:
              v57 = 325;
              break;
            case 0x6E696D66:
              v57 = 326;
              break;
            default:
              goto LABEL_397;
          }
          break;
        case 3:
          if (*v49 == 25697 && *((_BYTE *)v49 + 2) == 100)
          {
            v57 = 322;
          }
          else if (*v49 == 30061 && *((_BYTE *)v49 + 2) == 108)
          {
            v57 = 328;
          }
          else if (*v49 == 28257 && *((_BYTE *)v49 + 2) == 100)
          {
            v57 = 323;
          }
          else
          {
            v54 = *v49;
            v55 = *((unsigned __int8 *)v49 + 2);
            if (v54 != 28536 || v55 != 114)
            {
LABEL_397:
              v130 = atomic_load((unsigned __int8 *)&qword_257963DF8);
              if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_257963DF8))
              {
                llvm::Regex::Regex((uint64_t)&unk_257963E40, "^experimental.vector.reduce.v2.([a-z]+)\\.[fi][0-9]+", 51, 0);
                __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_257963E40, &dword_24A800000);
                __cxa_guard_release(&qword_257963DF8);
              }
              LODWORD(v291.__r_.__value_.__r.__words[1]) = 0;
              if (!llvm::Regex::match((uint64_t)&unk_257963E40, v289, v290, (unsigned int *)&v291, 0)
                || *(_QWORD *)(v291.__r_.__value_.__r.__words[0] + 24) != 4)
              {
                goto LABEL_405;
              }
              v131 = bswap32(**(_DWORD **)(v291.__r_.__value_.__r.__words[0] + 16));
              v132 = v131 > 0x66616464;
              v133 = v131 < 0x66616464;
              v134 = v131 >= 0x666D756C;
              v135 = v131 > 0x666D756C;
              v136 = !v134;
              v137 = v135 - v136;
              v138 = v132 - v133;
              if (v138)
              {
                if (v137)
                {
LABEL_405:
                  if ((std::string::size_type *)v291.__r_.__value_.__l.__data_ != &v291.__r_.__value_.__r.__words[2])
                    free(v291.__r_.__value_.__l.__data_);
                  goto LABEL_771;
                }
              }
              if (v138)
                v144 = 0;
              else
                v144 = 324;
              if (v137)
                v57 = v144;
              else
                v57 = 327;
              rename((uint64_t ***)a1);
              *(_QWORD *)&v294 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 16);
              v145 = (uint64_t *)*((_QWORD *)a1 + 5);
LABEL_676:
              *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v145, v57, (BOOL **)&v294, 1);
              v207 = (void *)v291.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v291.__r_.__value_.__l.__data_ != &v291.__r_.__value_.__r.__words[2])
                goto LABEL_796;
              return 1;
            }
            v57 = 334;
          }
          break;
        default:
          goto LABEL_397;
      }
      rename((uint64_t ***)a1);
      v145 = (uint64_t *)*((_QWORD *)a1 + 5);
      *(_QWORD *)&v294 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
      goto LABEL_676;
    case 'f':
      if (v12 < 0xA)
        goto LABEL_771;
      if (*(_QWORD *)v11 != 0x6E756F722E746C66 || *(_WORD *)(ValueName + 29) != 29540)
        goto LABEL_771;
      rename((uint64_t ***)a1);
      v13 = (uint64_t *)*((_QWORD *)a1 + 5);
      v14 = 155;
      goto LABEL_538;
    case 'i':
    case 'l':
      if (v12 < 0xE)
      {
        if (v12 < 0xC)
          goto LABEL_771;
        goto LABEL_233;
      }
      if (*(_QWORD *)v11 == 0x656D69746566696CLL && *(_QWORD *)(ValueName + 27) == 0x74726174732E656DLL)
      {
        v60 = 171;
      }
      else
      {
        if (v12 < 0xF)
        {
          if (*(_QWORD *)v11 != 0x656D69746566696CLL || *(_DWORD *)(ValueName + 29) != 1684956462)
          {
LABEL_238:
            if (*(_QWORD *)v11 != 0x6E61697261766E69 || *(_QWORD *)(v11 + 5) != 0x646E652E746E6169)
            {
LABEL_257:
              if (v12 >= 0x17)
              {
                v83 = *(_QWORD *)v11 == 0x6E61697261766E69 && *(_QWORD *)(v11 + 8) == 0x2E70756F72672E74;
                if (v83 && *(_QWORD *)(v11 + 15) == 0x726569727261622ELL)
                {
                  v291.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
                  rename((uint64_t ***)a1);
                  v17 = (uint64_t *)*((_QWORD *)a1 + 5);
                  v8 = 1;
                  v18 = 169;
                  goto LABEL_468;
                }
              }
              goto LABEL_771;
            }
            v74 = 165;
            v75 = 2;
LABEL_245:
            *(_QWORD *)&v294 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8 * v75 + 8);
            if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
            {
              v78 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
              v77 = v78 + 2;
              v76 = *v78;
            }
            else
            {
              v76 = 0;
              v77 = &str_3_26;
            }
            v79 = 1;
            v286 = v74;
            getIntrinsicNameImpl(v74, (BOOL **)&v294, 1, *((uint64_t **)a1 + 5), 0, &v291);
            v80 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
            size = v291.__r_.__value_.__l.__size_;
            v82 = (void *)v291.__r_.__value_.__r.__words[0];
            if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v5 = (llvm::Function *)&v291;
            else
              v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
            if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v291.__r_.__value_.__r.__words[2]);
            if (v76 == size)
            {
              if (v76)
              {
                v79 = memcmp(v77, v5, v76) != 0;
                if (v80 < 0)
                  goto LABEL_256;
LABEL_268:
                if (!v79)
                  goto LABEL_257;
                goto LABEL_269;
              }
              v79 = 0;
              if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_268;
            }
            else if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_268;
            }
LABEL_256:
            operator delete(v82);
            if (!v79)
              goto LABEL_257;
LABEL_269:
            rename((uint64_t ***)a1);
            v13 = (uint64_t *)*((_QWORD *)a1 + 5);
            v85 = (std::string *)&v294;
            v14 = v286;
            goto LABEL_270;
          }
LABEL_244:
          v74 = 170;
          v75 = 1;
          goto LABEL_245;
        }
        if (*(_QWORD *)v11 != 0x6E61697261766E69 || *(_QWORD *)(ValueName + 28) != 0x74726174732E746ELL)
        {
LABEL_233:
          if (*(_QWORD *)v11 != 0x656D69746566696CLL || *(_DWORD *)(v11 + 8) != 1684956462)
          {
            if (v12 < 0xD)
              goto LABEL_771;
            goto LABEL_238;
          }
          goto LABEL_244;
        }
        v60 = 166;
      }
      *(_QWORD *)&v294 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 16);
      if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
      {
        v67 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
        v63 = v67 + 2;
        v62 = *v67;
      }
      else
      {
        v62 = 0;
        v63 = &str_3_26;
      }
      v68 = 1;
      v286 = v60;
      getIntrinsicNameImpl(v60, (BOOL **)&v294, 1, *((uint64_t **)a1 + 5), 0, &v291);
      v69 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
      v70 = v291.__r_.__value_.__l.__size_;
      v71 = (void *)v291.__r_.__value_.__r.__words[0];
      if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = (llvm::Function *)&v291;
      else
        v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
      if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
      if (v62 == v70)
      {
        if (v62)
        {
          v68 = memcmp(v63, v5, v62) != 0;
          if (v69 < 0)
            goto LABEL_229;
LABEL_232:
          if (v68)
            goto LABEL_269;
          goto LABEL_233;
        }
        v68 = 0;
        if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_232;
      }
      else if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_232;
      }
LABEL_229:
      operator delete(v71);
      if (v68)
        goto LABEL_269;
      goto LABEL_233;
    case 'm':
      if (v12 >= 0xC)
      {
        if (*(_QWORD *)v11 == 0x6C2E64656B73616DLL && *(_DWORD *)(ValueName + 29) == 778330479)
        {
          v294 = 0uLL;
          *(_QWORD *)&v294 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
          if ((*((_BYTE *)a1 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments(a1);
          *((_QWORD *)&v294 + 1) = **((_QWORD **)a1 + 11);
          if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
          {
            v115 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
            v38 = v115 + 2;
            v37 = *v115;
          }
          else
          {
            v37 = 0;
            v38 = &str_3_26;
          }
          getIntrinsicNameImpl(188, (BOOL **)&v294, 2, *((uint64_t **)a1 + 5), 0, &v291);
          v116 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
          v117 = v291.__r_.__value_.__l.__size_;
          v118 = (void *)v291.__r_.__value_.__r.__words[0];
          if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v5 = (llvm::Function *)&v291;
          else
            v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
          if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v117 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
          if (v37 == v117)
          {
            if (v37)
              LODWORD(v37) = memcmp(v38, v5, v37) != 0;
          }
          else
          {
            LODWORD(v37) = 1;
          }
          if (v116 < 0)
            operator delete(v118);
          if ((_DWORD)v37)
          {
            rename((uint64_t ***)a1);
            v13 = (uint64_t *)*((_QWORD *)a1 + 5);
            v85 = (std::string *)&v294;
            v14 = 188;
            goto LABEL_672;
          }
        }
        if (v12 >= 0xD)
        {
          if (*(_QWORD *)v11 == 0x732E64656B73616DLL && *(_QWORD *)(v11 + 5) == 0x2E65726F74732E64)
          {
            v120 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
            v294 = 0uLL;
            v294 = *(_OWORD *)(v120 + 8);
            if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
            {
              v156 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
              v122 = v156 + 2;
              v121 = *v156;
            }
            else
            {
              v121 = 0;
              v122 = &str_3_26;
            }
            getIntrinsicNameImpl(190, (BOOL **)&v294, 2, *((uint64_t **)a1 + 5), 0, &v291);
            v157 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
            v158 = v291.__r_.__value_.__l.__size_;
            v159 = (void *)v291.__r_.__value_.__r.__words[0];
            if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v5 = (llvm::Function *)&v291;
            else
              v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
            if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v158 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
            if (v121 == v158)
            {
              if (v121)
                LODWORD(v121) = memcmp(v122, v5, v121) != 0;
            }
            else
            {
              LODWORD(v121) = 1;
            }
            if (v157 < 0)
              operator delete(v159);
            if ((_DWORD)v121)
            {
              rename((uint64_t ***)a1);
              v13 = (uint64_t *)*((_QWORD *)a1 + 5);
              v85 = (std::string *)&v294;
              v14 = 190;
              goto LABEL_672;
            }
          }
          if (v12 >= 0xE)
          {
            if (*(_QWORD *)v11 == 0x672E64656B73616DLL && *(_QWORD *)(v11 + 6) == 0x2E7265687461672ELL)
            {
              v294 = 0uLL;
              *(_QWORD *)&v294 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
              if ((*((_BYTE *)a1 + 18) & 1) != 0)
                llvm::Function::BuildLazyArguments(a1);
              *((_QWORD *)&v294 + 1) = **((_QWORD **)a1 + 11);
              if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
              {
                v176 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
                v162 = v176 + 2;
                v161 = *v176;
              }
              else
              {
                v161 = 0;
                v162 = &str_3_26;
              }
              getIntrinsicNameImpl(187, (BOOL **)&v294, 2, *((uint64_t **)a1 + 5), 0, &v291);
              v177 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
              v178 = v291.__r_.__value_.__l.__size_;
              v179 = (void *)v291.__r_.__value_.__r.__words[0];
              if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v5 = (llvm::Function *)&v291;
              else
                v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
              if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v178 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
              if (v161 == v178)
              {
                if (v161)
                  LODWORD(v161) = memcmp(v162, v5, v161) != 0;
              }
              else
              {
                LODWORD(v161) = 1;
              }
              if (v177 < 0)
                operator delete(v179);
              if ((_DWORD)v161)
              {
                rename((uint64_t ***)a1);
                v13 = (uint64_t *)*((_QWORD *)a1 + 5);
                v85 = (std::string *)&v294;
                v14 = 187;
                goto LABEL_672;
              }
            }
            if (v12 >= 0xF && *(_QWORD *)v11 == 0x732E64656B73616DLL && *(_QWORD *)(v11 + 7) == 0x2E72657474616373)
            {
              v181 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
              v294 = 0uLL;
              v294 = *(_OWORD *)(v181 + 8);
              if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
              {
                v197 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
                v183 = v197 + 2;
                v182 = *v197;
              }
              else
              {
                v182 = 0;
                v183 = &str_3_26;
              }
              getIntrinsicNameImpl(189, (BOOL **)&v294, 2, *((uint64_t **)a1 + 5), 0, &v291);
              v198 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
              v199 = v291.__r_.__value_.__l.__size_;
              v200 = (void *)v291.__r_.__value_.__r.__words[0];
              if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v5 = (llvm::Function *)&v291;
              else
                v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
              if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v199 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
              if (v182 == v199)
              {
                if (v182)
                  LODWORD(v182) = memcmp(v183, v5, v182) != 0;
              }
              else
              {
                LODWORD(v182) = 1;
              }
              if (v198 < 0)
                operator delete(v200);
              if ((_DWORD)v182)
              {
                rename((uint64_t ***)a1);
                v13 = (uint64_t *)*((_QWORD *)a1 + 5);
                v85 = (std::string *)&v294;
                v14 = 189;
                goto LABEL_672;
              }
            }
          }
        }
      }
      else if (v12 < 7)
      {
        goto LABEL_771;
      }
      v201 = *(_DWORD *)v11 == 1668113773 && *(_DWORD *)(v11 + 3) == 779710563;
      if (v201 && *((_QWORD *)a1 + 12) == 5)
      {
        rename((uint64_t ***)a1);
        v85 = (std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
        v13 = (uint64_t *)*((_QWORD *)a1 + 5);
        v14 = 197;
        goto LABEL_664;
      }
      if (v12 >= 8 && *(_QWORD *)v11 == 0x2E65766F6D6D656DLL && *((_QWORD *)a1 + 12) == 5)
      {
        rename((uint64_t ***)a1);
        v85 = (std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
        v13 = (uint64_t *)*((_QWORD *)a1 + 5);
        v14 = 200;
        goto LABEL_664;
      }
      v202 = *(_DWORD *)v11 == 1936549229 && *(_DWORD *)(v11 + 3) == 779380083;
      if (!v202 || *((_QWORD *)a1 + 12) != 5)
        goto LABEL_771;
      rename((uint64_t ***)a1);
      v203 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
      v204 = *(_QWORD *)(v203 + 8);
      v205 = *(_QWORD *)(v203 + 24);
      v291.__r_.__value_.__r.__words[0] = v204;
      v291.__r_.__value_.__l.__size_ = v205;
      v13 = (uint64_t *)*((_QWORD *)a1 + 5);
      v85 = &v291;
      v14 = 202;
      goto LABEL_672;
    case 'n':
      if (v12 < 5)
        goto LABEL_771;
      if (*(_DWORD *)v11 != 1836480110 || *(_BYTE *)(ValueName + 25) != 46)
        goto LABEL_771;
      v30 = (_BYTE *)(ValueName + 26);
      if (v6 == 15)
      {
        if (*(_DWORD *)v30 != 779775075 || v30[4] != 105)
        {
          v291.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          v291.__r_.__value_.__l.__size_ = 5;
          LOWORD(v291.__r_.__value_.__r.__words[2]) = 0;
          goto LABEL_624;
        }
        v18 = 53;
      }
      else
      {
        if (v6 != 16)
        {
          v291.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          v291.__r_.__value_.__l.__size_ = v6 - 10;
          LOWORD(v291.__r_.__value_.__r.__words[2]) = 0;
          goto LABEL_630;
        }
        v31 = *(_DWORD *)v30 == 1986359906 && *((_WORD *)v30 + 2) == 12851;
        if (v31 || (*(_DWORD *)v30 == 1986359906 ? (v32 = *((unsigned __int16 *)v30 + 2) == 13366) : (v32 = 0), v32))
        {
          v18 = 8;
        }
        else
        {
          if (*(_DWORD *)v30 != 1668312944 || *((_WORD *)v30 + 2) != 26926)
          {
            v291.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
            v291.__r_.__value_.__l.__size_ = 6;
            LOWORD(v291.__r_.__value_.__r.__words[2]) = 0;
            goto LABEL_633;
          }
          v18 = 54;
        }
      }
      if (*((_QWORD *)a1 + 12) == 1)
      {
        v17 = (uint64_t *)*((_QWORD *)a1 + 5);
        v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
        v8 = 1;
        goto LABEL_468;
      }
      v291.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v291.__r_.__value_.__l.__size_ = v6 - 10;
      LOWORD(v291.__r_.__value_.__r.__words[2]) = 0;
      if (v6 != 15)
      {
LABEL_633:
        if (!memcmp(v30, "abs.ll", v6 - 10))
LABEL_629:
          LOWORD(v291.__r_.__value_.__r.__words[2]) = 257;
LABEL_630:
        llvm::StringSwitch<BOOL,BOOL>::Cases((uint64_t)&v291, "clz.ll", 6, "popc.ll", 7, "h2f", 3);
        llvm::StringSwitch<BOOL,BOOL>::Case((uint64_t)&v291, "max.i", 5);
        llvm::StringSwitch<BOOL,BOOL>::Cases((uint64_t)&v291, "max.ll", 6, "max.ui", 6, "max.ull", 7);
        llvm::StringSwitch<BOOL,BOOL>::Case((uint64_t)&v291, "min.i", 5);
        llvm::StringSwitch<BOOL,BOOL>::Cases((uint64_t)&v291, "min.ll", 6, "min.ui", 6, "min.ull", 7);
        llvm::StringSwitch<BOOL,BOOL>::StartsWith((uint64_t)&v291, "atomic.load.add.f32.p", 0x15uLL);
        llvm::StringSwitch<BOOL,BOOL>::StartsWith((uint64_t)&v291, "atomic.load.add.f64.p", 0x15uLL);
        if (v291.__r_.__value_.__s.__data_[17] && v291.__r_.__value_.__s.__data_[16])
        {
LABEL_632:
          *a2 = 0;
          return 1;
        }
        goto LABEL_771;
      }
LABEL_624:
      if (*(_DWORD *)v30 == 779313761 && v30[4] == 105)
        goto LABEL_629;
      goto LABEL_630;
    case 'o':
      if (v12 < 0xB)
        goto LABEL_771;
      if (*(_QWORD *)v11 != 0x69737463656A626FLL || *(_QWORD *)(ValueName + 24) != 0x2E657A6973746365)
        goto LABEL_771;
      *(_QWORD *)&v294 = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
      if ((*((_BYTE *)a1 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(a1);
      v35 = *((_QWORD *)a1 + 12);
      *((_QWORD *)&v294 + 1) = **((_QWORD **)a1 + 11);
      if ((v35 & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
        {
          v152 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
          v114 = v152 + 2;
          v113 = *v152;
        }
        else
        {
          v113 = 0;
          v114 = &str_3_26;
        }
        getIntrinsicNameImpl(240, (BOOL **)&v294, 2, *((uint64_t **)a1 + 5), 0, &v291);
        v153 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
        v154 = v291.__r_.__value_.__l.__size_;
        v155 = (void *)v291.__r_.__value_.__r.__words[0];
        if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = (llvm::Function *)&v291;
        else
          v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
        if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v154 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
        if (v113 == v154)
        {
          if (v113)
            LODWORD(v113) = memcmp(v114, v5, v113) != 0;
        }
        else
        {
          LODWORD(v113) = 1;
        }
        if (v153 < 0)
          operator delete(v155);
        if (!(_DWORD)v113)
          goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      v13 = (uint64_t *)*((_QWORD *)a1 + 5);
      v14 = 240;
      v85 = (std::string *)&v294;
      v86 = 2;
      goto LABEL_673;
    case 'p':
      if (v6 != 13)
      {
        if (v12 >= 0xF)
        {
          v64 = *(_QWORD *)v11 == 0x6F6E6E612E727470 && *(_QWORD *)(ValueName + 28) == 0x2E6E6F697461746FLL;
          if (v64 && *((_QWORD *)a1 + 12) == 4)
          {
            rename((uint64_t ***)a1);
            v65 = (uint64_t *)*((_QWORD *)a1 + 5);
            if ((*((_WORD *)a1 + 9) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments(a1);
              v167 = *((_WORD *)a1 + 9);
              v66 = (std::string::size_type *)*((_QWORD *)a1 + 11);
              v291.__r_.__value_.__r.__words[0] = *v66;
              if ((v167 & 1) != 0)
              {
                llvm::Function::BuildLazyArguments(a1);
                v66 = (std::string::size_type *)*((_QWORD *)a1 + 11);
              }
            }
            else
            {
              v66 = (std::string::size_type *)*((_QWORD *)a1 + 11);
              v291.__r_.__value_.__r.__words[0] = *v66;
            }
            v291.__r_.__value_.__l.__size_ = v66[5];
            v85 = &v291;
            v13 = v65;
            v14 = 249;
            goto LABEL_672;
          }
        }
        else if (v12 < 8)
        {
          goto LABEL_771;
        }
        goto LABEL_347;
      }
      if (*(_QWORD *)v11 != 0x6863746566657270)
        goto LABEL_347;
      *(_QWORD *)&v294 = 0;
      if ((*((_WORD *)a1 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(a1);
      *(_QWORD *)&v294 = **((_QWORD **)a1 + 11);
      if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
      {
        v106 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
        v20 = v106 + 2;
        v19 = *v106;
      }
      else
      {
        v19 = 0;
        v20 = &str_3_26;
      }
      v107 = 1;
      getIntrinsicNameImpl(244, (BOOL **)&v294, 1, *((uint64_t **)a1 + 5), 0, &v291);
      v108 = SHIBYTE(v291.__r_.__value_.__r.__words[2]);
      v109 = v291.__r_.__value_.__l.__size_;
      v110 = (void *)v291.__r_.__value_.__r.__words[0];
      if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = (llvm::Function *)&v291;
      else
        v5 = (llvm::Function *)v291.__r_.__value_.__r.__words[0];
      if ((v291.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v109 = HIBYTE(v291.__r_.__value_.__r.__words[2]);
      if (v19 == v109)
      {
        if (v19)
        {
          v107 = memcmp(v20, v5, v19) != 0;
          if (v108 < 0)
            goto LABEL_346;
LABEL_353:
          if (!v107)
          {
LABEL_347:
            if (*(_QWORD *)v11 == 0x2E68747561727470)
            {
              v111 = (_QWORD *)(v11 + 8);
              switch(v12)
              {
                case 0x10uLL:
                  if (*v111 == 0x3436692E68747561)
                  {
                    v112 = 250;
                  }
                  else
                  {
                    if (*v111 != 0x3436692E6E676973)
                      goto LABEL_771;
                    v112 = 253;
                  }
                  goto LABEL_537;
                case 0x11uLL:
                  if (*v111 == 0x36692E7069727473 && *(_BYTE *)(v11 + 16) == 52)
                  {
                    v112 = 255;
                  }
                  else
                  {
                    if (*v111 != 0x36692E646E656C62 || *(_BYTE *)(v11 + 16) != 52)
                      goto LABEL_771;
                    v112 = 251;
                  }
LABEL_537:
                  rename((uint64_t ***)a1);
                  v13 = (uint64_t *)*((_QWORD *)a1 + 5);
                  v14 = v112;
                  goto LABEL_538;
                case 0x12uLL:
                  if (*v111 != 0x692E6E6769736572 || *(_WORD *)(v11 + 16) != 13366)
                    goto LABEL_771;
                  v112 = 252;
                  goto LABEL_537;
                case 0x18uLL:
                  if (*v111 != 0x6E65672E6E676973 || *(_QWORD *)(v11 + 16) != 0x3436692E63697265)
                    goto LABEL_771;
                  v112 = 254;
                  goto LABEL_537;
                default:
                  goto LABEL_771;
              }
            }
            goto LABEL_771;
          }
LABEL_354:
          rename((uint64_t ***)a1);
          v13 = (uint64_t *)*((_QWORD *)a1 + 5);
          v85 = (std::string *)&v294;
          v14 = 244;
LABEL_270:
          v86 = 1;
          goto LABEL_673;
        }
        v107 = 0;
        if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_353;
      }
      else if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_353;
      }
LABEL_346:
      operator delete(v110);
      if (!v107)
        goto LABEL_347;
      goto LABEL_354;
    case 's':
      if (v6 != 24)
        goto LABEL_771;
      v21 = *(_QWORD *)v11 == 0x6F72706B63617473 && *(_QWORD *)(ValueName + 29) == 0x6863726F74636574;
      if (!v21 || *(_QWORD *)(ValueName + 32) != 0x6B63656863726F74)
        goto LABEL_771;
      goto LABEL_632;
    case 'v':
      if (v6 != 19)
        goto LABEL_771;
      v23 = *(_QWORD *)v11 == 0x6F6E6E612E726176 && *(_QWORD *)(ValueName + 27) == 0x6E6F697461746F6ELL;
      if (!v23 || *((_QWORD *)a1 + 12) != 4)
        goto LABEL_771;
      rename((uint64_t ***)a1);
      v24 = (uint64_t *)*((_QWORD *)a1 + 5);
      if ((*((_WORD *)a1 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(a1);
        v151 = *((_WORD *)a1 + 9);
        v25 = (std::string::size_type *)*((_QWORD *)a1 + 11);
        v291.__r_.__value_.__r.__words[0] = *v25;
        if ((v151 & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(a1);
          v25 = (std::string::size_type *)*((_QWORD *)a1 + 11);
        }
      }
      else
      {
        v25 = (std::string::size_type *)*((_QWORD *)a1 + 11);
        v291.__r_.__value_.__r.__words[0] = *v25;
      }
      v291.__r_.__value_.__l.__size_ = v25[5];
      v85 = &v291;
      v13 = v24;
      v14 = 319;
      goto LABEL_672;
    case 'w':
      if (v12 < 9)
        goto LABEL_63;
      if (*(_QWORD *)v11 == 0x616D662E6D736177 && *(_BYTE *)(ValueName + 29) == 46)
      {
        rename((uint64_t ***)a1);
        v17 = (uint64_t *)*((_QWORD *)a1 + 5);
        v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
        v8 = 1;
        v18 = 10138;
        goto LABEL_468;
      }
      if (*(_QWORD *)v11 == 0x736D662E6D736177 && *(_BYTE *)(ValueName + 29) == 46)
      {
        rename((uint64_t ***)a1);
        v17 = (uint64_t *)*((_QWORD *)a1 + 5);
        v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
        v8 = 1;
        v18 = 10141;
        goto LABEL_468;
      }
      if (v12 >= 0x10 && *(_QWORD *)v11 == 0x6E616C2E6D736177 && *(_QWORD *)(ValueName + 29) == 0x2E7463656C657365)
      {
        rename((uint64_t ***)a1);
        v17 = (uint64_t *)*((_QWORD *)a1 + 5);
        v291.__r_.__value_.__r.__words[0] = **(_QWORD **)(*((_QWORD *)a1 + 3) + 16);
        v8 = 1;
        v18 = 10137;
        goto LABEL_468;
      }
LABEL_63:
      if (v6 != 36)
      {
        if (v6 == 32 && !memcmp((const void *)(ValueName + 21), "wasm.dot.i8x16.i7x16.signed", v12))
        {
          rename((uint64_t ***)a1);
          v13 = (uint64_t *)*((_QWORD *)a1 + 5);
          v14 = 10136;
          goto LABEL_538;
        }
        goto LABEL_771;
      }
      if (memcmp((const void *)(ValueName + 21), "wasm.dot.i8x16.i7x16.add.signed", v12))
        goto LABEL_771;
      rename((uint64_t ***)a1);
      v13 = (uint64_t *)*((_QWORD *)a1 + 5);
      v14 = 10135;
      goto LABEL_538;
    case 'x':
      if ((UpgradeX86IntrinsicFunction((uint64_t)a1, v11, v6 - 5, a2) & 1) != 0)
        return 1;
      goto LABEL_771;
    default:
      goto LABEL_771;
  }
}

uint64_t llvm::UpgradeGlobalVariable(uint64_t **this, llvm::GlobalVariable *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t ValueName;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::ConstantAggregateZero *v20;
  uint64_t v21;
  int v22;
  llvm::Type *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  llvm::Constant *v29;
  uint64_t AggregateElement;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  llvm::PoisonValue *v35;
  llvm::PointerType ***v36;
  _DWORD *v37;
  llvm::PointerType **v38;
  int v39;
  uint64_t v40;
  void *v41;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  void *__p;
  void *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int16 v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[6];
  uint64_t v55;
  void (***v56)(llvm::ConstantFolder *__hidden);
  _QWORD *v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void (**v64)(llvm::ConstantFolder *__hidden);
  _QWORD v65[3];

  v65[1] = *MEMORY[0x24BDAC8D0];
  if (((_DWORD)this[4] & 0xF) == 6
    && ((*((_BYTE *)this + 23) & 0x10) != 0
     && (v3 = llvm::Value::getValueName((uint64_t ***)this), *(_QWORD *)v3 == 12)
     && (*(_QWORD *)(v3 + 16) == 0x646D632E6D766C6CLL ? (v4 = *(_DWORD *)(v3 + 24) == 1701734764) : (v4 = 0), v4)
     || (*((_BYTE *)this + 23) & 0x10) != 0
     && (v5 = llvm::Value::getValueName((uint64_t ***)this), *(_QWORD *)v5 == 20)
     && (*(_QWORD *)(v5 + 16) == 0x626D652E6D766C6CLL ? (v6 = *(_QWORD *)(v5 + 24) == 0x6F6D2E6465646465) : (v6 = 0),
         v6 ? (v7 = *(_DWORD *)(v5 + 32) == 1701606756) : (v7 = 0),
         v7)))
  {
    v14 = 0;
    *((_DWORD *)this + 8) = (_DWORD)this[4] & 0xFFFFBCC0 | 0x4008;
  }
  else
  {
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
      return 0;
    ValueName = llvm::Value::getValueName((uint64_t ***)this);
    if (*(_QWORD *)ValueName != 17
      || (*(_QWORD *)(ValueName + 16) == 0x6F6C672E6D766C6CLL
        ? (v9 = *(_QWORD *)(ValueName + 24) == 0x726F74635F6C6162)
        : (v9 = 0),
          v9 ? (v10 = *(_BYTE *)(ValueName + 32) == 115) : (v10 = 0),
          !v10))
    {
      if ((*((_BYTE *)this + 23) & 0x10) == 0)
        return 0;
      v11 = llvm::Value::getValueName((uint64_t ***)this);
      if (*(_QWORD *)v11 != 17)
        return 0;
      v12 = *(_QWORD *)(v11 + 16) == 0x6F6C672E6D766C6CLL && *(_QWORD *)(v11 + 24) == 0x726F74645F6C6162;
      if (!v12 || *(_BYTE *)(v11 + 32) != 115)
        return 0;
    }
    if (*((_BYTE *)this + 16))
    {
      if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
        return 0;
    }
    else if (this[9] == (uint64_t *)(this + 9) && (*((_BYTE *)this + 35) & 1) == 0)
    {
      return 0;
    }
    v14 = 0;
    v15 = this[3];
    if (v15)
    {
      if (*((_BYTE *)v15 + 8) == 17)
      {
        v14 = 0;
        v16 = v15[3];
        if (v16)
        {
          if (*(_BYTE *)(v16 + 8) == 16)
          {
            if (*(_DWORD *)(v16 + 12) != 2)
              return 0;
            v17 = **this;
            v52 = v54;
            v53 = 0x200000000;
            v55 = v17;
            v56 = &v64;
            v57 = v65;
            v58 = 0;
            v59 = 0;
            v60 = 512;
            v61 = 7;
            v54[4] = 0;
            v54[5] = 0;
            v62 = 0;
            v63 = 0;
            v64 = &off_251C359D8;
            v65[0] = &off_251C35AC8;
            v45 = *(_OWORD *)*(_QWORD *)(v16 + 16);
            v18 = llvm::PointerType::get((llvm::PointerType **)(*(_QWORD *)v17 + 1944), 0);
            v19 = *(uint64_t **)v45;
            v49 = v45;
            v50 = v18;
            v20 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v19, (uint64_t)&v49, 3, 0);
            v21 = (uint64_t)*(this - 4);
            v22 = *(_DWORD *)(v21 + 20);
            __p = 0;
            v47 = 0;
            v48 = 0;
            v23 = (llvm::Type *)(v22 & 0x7FFFFFF);
            if ((v22 & 0x7FFFFFF) != 0)
            {
              std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&__p, v22 & 0x7FFFFFF);
              v24 = (char *)v47;
              bzero(v47, 8 * (_QWORD)v23);
              v25 = 0;
              v26 = 0;
              v47 = &v24[8 * (_QWORD)v23];
              do
              {
                v27 = *(_DWORD *)(v21 + 20);
                if ((v27 & 0x40000000) != 0)
                  v28 = *(_QWORD *)(v21 - 8);
                else
                  v28 = v21 - 32 * (v27 & 0x7FFFFFF);
                v29 = *(llvm::Constant **)(v28 + v26);
                AggregateElement = llvm::Constant::getAggregateElement(v29, 0);
                v31 = llvm::Constant::getAggregateElement(v29, (llvm::Type *)1);
                v32 = llvm::PointerType::get((llvm::PointerType **)(*(_QWORD *)v55 + 1944), 0);
                llvm::Constant::getNullValue(v32);
                *(_QWORD *)&v49 = AggregateElement;
                *((_QWORD *)&v49 + 1) = v31;
                v50 = v33;
                v34 = llvm::ConstantStruct::get(v20, (llvm::Type *)&v49, (unint64_t *)3);
                *(_QWORD *)((char *)__p + v25) = v34;
                v26 += 32;
                v25 += 8;
              }
              while (32 * (_QWORD)v23 != v26);
            }
            llvm::ArrayType::get((uint64_t **)v20, v23);
            v36 = (llvm::PointerType ***)llvm::ConstantArray::get(v35, (llvm::Type *)__p, (unint64_t *)(((_BYTE *)v47 - (_BYTE *)__p) >> 3));
            v37 = operator new(0x78uLL);
            v14 = (uint64_t)(v37 + 8);
            v37[13] = v37[13] & 0x38000000 | 1;
            *(_QWORD *)v37 = 0;
            *((_QWORD *)v37 + 1) = 0;
            *((_QWORD *)v37 + 2) = 0;
            *((_QWORD *)v37 + 3) = v37 + 8;
            v38 = *v36;
            v39 = (_DWORD)this[4] & 0xF;
            if ((*((_BYTE *)this + 23) & 0x10) != 0)
            {
              v43 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
              v44 = *v43;
              v41 = v43 + 2;
              v40 = v44;
            }
            else
            {
              v40 = 0;
              v41 = &str_3_26;
            }
            v51 = 261;
            *(_QWORD *)&v49 = v41;
            *((_QWORD *)&v49 + 1) = v40;
            llvm::GlobalVariable::GlobalVariable(v14, v38, 0, v39, (uint64_t)v36, (const llvm::Twine *)&v49, 0, 0, 0);
            if (__p)
            {
              v47 = __p;
              operator delete(__p);
            }
            if (v52 != v54)
              free(v52);
          }
        }
      }
    }
  }
  return v14;
}

std::string *llvm::UpgradeInlineAsmString(std::string *__s)
{
  std::string *v1;
  uint64_t v2;
  std::string *v3;
  uint64_t size;
  std::string *v5;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;

  v1 = __s;
  v2 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    v3 = __s;
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size >= 6)
  {
    v5 = (std::string *)((char *)v3 + size);
    __s = v3;
    do
    {
      __s = (std::string *)memchr(__s, 109, size - 5);
      if (!__s)
        break;
      if (LODWORD(__s->__r_.__value_.__l.__data_) == 158756717 && WORD2(__s->__r_.__value_.__r.__words[0]) == 28774)
      {
        if (__s != v5 && __s == v3)
        {
          if ((v2 & 0x80) != 0)
          {
            v7 = (std::string *)v1->__r_.__value_.__r.__words[0];
            v8 = v1->__r_.__value_.__l.__size_;
          }
          else
          {
            v7 = v1;
            v8 = v2;
          }
          if (v8 >= 33)
          {
            v9 = (std::string *)((char *)v7 + v8);
            __s = v7;
            while (1)
            {
              __s = (std::string *)memchr(__s, 111, v8 - 32);
              if (!__s)
                break;
              v10 = __s;
              __s = (std::string *)memcmp(__s, "objc_retainAutoreleaseReturnValue", 0x21uLL);
              if (!(_DWORD)__s)
              {
                if (v10 != v9 && (char *)v10 - (char *)v7 != -1)
                {
                  if ((v2 & 0x80) != 0)
                  {
                    v11 = (std::string *)v1->__r_.__value_.__r.__words[0];
                    v2 = v1->__r_.__value_.__l.__size_;
                  }
                  else
                  {
                    v11 = v1;
                  }
                  if (v2 >= 8)
                  {
                    v12 = (std::string *)((char *)v11 + v2);
                    __s = v11;
                    while (1)
                    {
                      __s = (std::string *)memchr(__s, 35, v2 - 7);
                      if (!__s)
                        break;
                      if (__s->__r_.__value_.__r.__words[0] == 0x72656B72616D2023)
                      {
                        if (__s != v12 && (char *)__s - (char *)v11 != -1)
                          return std::string::replace(v1, (char *)__s - (char *)v11, 1uLL, ";");
                        return __s;
                      }
                      __s = (std::string *)((char *)__s + 1);
                      v2 = (char *)v12 - (char *)__s;
                      if ((char *)v12 - (char *)__s < 8)
                        return __s;
                    }
                  }
                }
                return __s;
              }
              __s = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
              v8 = (char *)v9 - ((char *)&v10->__r_.__value_.__l.__data_ + 1);
              if (v8 < 33)
                return __s;
            }
          }
        }
        return __s;
      }
      __s = (std::string *)((char *)__s + 1);
      size = (char *)v5 - (char *)__s;
    }
    while ((char *)v5 - (char *)__s >= 6);
  }
  return __s;
}

void llvm::UpgradeIntrinsicCall(llvm *this, llvm::CallBase *a2, llvm::Function *a3)
{
  _BYTE *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  _BYTE *v7;
  llvm::Type *v8;
  llvm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  llvm::CallBase *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *Cast;
  llvm::hashing::detail::hash_state *v22;
  llvm::CallBase *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;
  llvm::CallBase *v28;
  llvm::hashing::detail::hash_state **v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  llvm::CallBase **v34;
  unint64_t v35;
  llvm::CallBase *v36;
  uint64_t v37;
  int v38;
  BOOL *v39;
  BOOL *v40;
  char *v41;
  unint64_t v42;
  _BOOL4 v43;
  _BOOL4 v44;
  unint64_t v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  llvm::CallBase *v51;
  llvm::Type *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  llvm::CallBase *v61;
  llvm::Value *v62;
  char *v63;
  char *v64;
  uint64_t *X86MaskVec;
  uint64_t *v66;
  uint64_t v67;
  const char *v68;
  unint64_t PrimitiveSizeInBits;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  llvm::CallBase *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::hashing::detail::hash_state *v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  llvm::CallBase *v89;
  uint64_t v90;
  char *v91;
  BOOL **v92;
  void *v93;
  char v94;
  BOOL v97;
  BOOL v99;
  BOOL v101;
  unint64_t v105;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  char v110;
  char v111;
  char v112;
  llvm::CallBase **v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  llvm::Value *v128;
  char *v129;
  unsigned __int8 *v130;
  uint64_t *VectorSplat;
  _QWORD *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  char *v141;
  char *v142;
  llvm::Type *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  llvm::hashing::detail::hash_state *v159;
  llvm::hashing::detail::hash_state *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  llvm::CallBase *v164;
  llvm::CallBase *v165;
  uint64_t v166;
  char *v167;
  BOOL **v168;
  uint64_t v169;
  BOOL **v170;
  BOOL **v171;
  BOOL *v172;
  llvm::Type *v173;
  uint64_t *v174;
  BOOL *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  BOOL **v185;
  char *v186;
  char *v187;
  BOOL *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t *AlignedLoad;
  uint64_t **v199;
  llvm::ValueAsMetadata *v200;
  llvm::Value *v201;
  _QWORD *v202;
  llvm::MDNode *Impl;
  uint64_t *v204;
  uint64_t v205;
  llvm::Value *v206;
  uint64_t v207;
  uint64_t *v208;
  const llvm::Twine *v209;
  uint64_t *Element;
  uint64_t v211;
  __int16 v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  char *v217;
  uint64_t v220;
  uint64_t v221;
  _BOOL4 v223;
  llvm::hashing::detail::hash_state *v224;
  char v226;
  char v227;
  char v228;
  char v229;
  BOOL v232;
  BOOL v233;
  llvm::ValueAsMetadata *v234;
  llvm::Value *v235;
  _QWORD *v236;
  uint64_t *v237;
  uint64_t v238;
  llvm::PointerType ***v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t *AlignedStore;
  int v243;
  void **v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  BOOL v253;
  BOOL v254;
  BOOL v255;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *Value;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t *v272;
  llvm::CallBase *v273;
  llvm::Value *v274;
  unint64_t v275;
  char *v276;
  llvm::CallBase *v277;
  uint64_t v278;
  uint64_t v279;
  llvm::CallBase *v280;
  unint64_t v281;
  char *v282;
  llvm::CmpInst **v283;
  uint64_t *Neg;
  uint64_t v285;
  uint64_t *v286;
  __int16 v287;
  char *v288;
  llvm::CmpInst **v289;
  uint64_t v290;
  uint64_t *ICmp;
  llvm::Type *v292;
  void *p_src;
  int v294;
  BOOL v295;
  BOOL v296;
  llvm::Value *v299;
  llvm::Value *v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  llvm::PointerType ***v304;
  _BOOL4 v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t *ValueName;
  unint64_t v316;
  uint64_t v317;
  llvm::CallBase *v318;
  unsigned __int8 *v319;
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  BOOL v326;
  BOOL v330;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  BOOL v335;
  uint64_t **v337;
  uint64_t v338;
  llvm::hashing::detail::hash_state **v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  llvm::CallBase *v344;
  uint64_t v345;
  unint64_t *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  __int16 v350;
  unint64_t v351;
  __int16 v352;
  llvm::PoisonValue *v353;
  unsigned int v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t *v358;
  llvm::Type *v359;
  uint64_t *v360;
  unsigned int v361;
  int v362;
  llvm::Value *v363;
  uint64_t *v364;
  uint64_t Declaration;
  uint64_t v366;
  BOOL v369;
  BOOL v370;
  BOOL v371;
  BOOL v372;
  BOOL v373;
  char v374;
  uint64_t *v375;
  uint64_t v376;
  llvm::Value *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  const llvm::Twine *v395;
  int v396;
  uint64_t v397;
  void *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t *v401;
  void *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  BOOL *v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  llvm::MDNode *v410;
  llvm::CallBase *v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  _QWORD *v416;
  __int16 v417;
  char *v421;
  BOOL v422;
  __int16 v423;
  char *v424;
  char *v425;
  BOOL v426;
  __int16 v427;
  char *v428;
  llvm::Value *v429;
  llvm::Value *v430;
  unsigned __int8 *v431;
  uint64_t v432;
  __int16 v433;
  uint64_t v436;
  _QWORD *v437;
  unsigned int v438;
  llvm::Type *v439;
  const char *v440;
  unint64_t v441;
  unint64_t v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  int v446;
  int v447;
  int v448;
  unsigned int v449;
  char *v450;
  _QWORD *v451;
  uint64_t v452;
  char *v453;
  const llvm::Twine *v454;
  llvm::Type *v455;
  const char *v456;
  unint64_t v457;
  const char *v458;
  unint64_t v459;
  uint64_t v460;
  char *v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  int v470;
  llvm::hashing::detail::hash_state **v471;
  uint64_t *v472;
  uint64_t *v473;
  unsigned __int8 *v474;
  llvm::Type *v475;
  unsigned int v476;
  uint64_t *v477;
  uint64_t *v478;
  uint64_t v479;
  llvm::Type *v480;
  llvm::hashing::detail::hash_state **v481;
  BOOL v483;
  BOOL v484;
  BOOL v485;
  char v488;
  char v489;
  int v490;
  uint64_t v491;
  char *v492;
  uint64_t v493;
  _QWORD *v494;
  unsigned int v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v499;
  uint64_t *v500;
  uint64_t *v501;
  BOOL v503;
  BOOL v504;
  BOOL v505;
  char v507;
  char v508;
  llvm::ConstantInt *v513;
  llvm::Value *v514;
  llvm::Value *v515;
  uint64_t *v516;
  llvm::Value *v517;
  llvm::Value *v518;
  uint64_t *v519;
  uint64_t *FDiv;
  uint64_t *v524;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int v532;
  unint64_t v533;
  int *v534;
  uint64_t i;
  _QWORD *v536;
  llvm::Value *v537;
  char *v538;
  unsigned __int8 *v539;
  uint64_t *p_p;
  uint64_t v541;
  uint64_t v542;
  llvm::hashing::detail::hash_state *v543;
  llvm::Type *v544;
  uint64_t *v545;
  uint64_t *v546;
  uint64_t *v547;
  uint64_t *v548;
  uint64_t v549;
  llvm::Type *v550;
  llvm::Constant *v551;
  uint64_t v552;
  char *v555;
  char *v556;
  uint64_t v557;
  const char *v558;
  int v559;
  int v560;
  llvm::Type *v561;
  int v562;
  BOOL v564;
  BOOL v565;
  BOOL v566;
  BOOL v567;
  BOOL v568;
  BOOL v569;
  BOOL v570;
  BOOL v571;
  BOOL v572;
  BOOL v573;
  BOOL v574;
  BOOL v575;
  BOOL v576;
  BOOL v577;
  BOOL v578;
  BOOL v579;
  BOOL v580;
  BOOL v581;
  BOOL v582;
  BOOL v583;
  BOOL v584;
  BOOL v585;
  BOOL v586;
  BOOL v587;
  BOOL v588;
  BOOL v589;
  BOOL v590;
  BOOL v591;
  BOOL v592;
  uint64_t v593;
  uint64_t v595;
  BOOL v596;
  BOOL v601;
  BOOL v603;
  BOOL v605;
  uint64_t **v607;
  uint64_t *v608;
  uint64_t v609;
  llvm::hashing::detail::hash_state **v610;
  uint64_t *v611;
  uint64_t *v612;
  uint64_t *v613;
  uint64_t *v614;
  uint64_t *v615;
  uint64_t *v616;
  char *v617;
  llvm::Type *v618;
  uint64_t ***v619;
  char v622;
  BOOL v623;
  BOOL v624;
  BOOL v625;
  BOOL v626;
  BOOL v627;
  BOOL v628;
  BOOL v629;
  BOOL v630;
  BOOL v631;
  BOOL v632;
  BOOL v633;
  char v634;
  char v635;
  BOOL v636;
  char v638;
  BOOL v639;
  BOOL v640;
  BOOL v641;
  BOOL v642;
  BOOL v643;
  BOOL v644;
  BOOL v645;
  BOOL v646;
  BOOL v647;
  BOOL v648;
  BOOL v649;
  uint64_t v651;
  unint64_t *v652;
  unint64_t v653;
  unint64_t v654;
  llvm::Type *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  llvm::CallBase *v659;
  int v660;
  llvm::CallBase *v661;
  int v662;
  unsigned int v663;
  uint64_t v664;
  _QWORD *v665;
  uint64_t *v666;
  uint64_t *v667;
  uint64_t *v668;
  uint64_t *v669;
  uint64_t *v670;
  uint64_t v671;
  _QWORD *v672;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  int v682;
  _BOOL4 v686;
  llvm::PoisonValue **v694;
  uint64_t v695;
  unsigned int *v696;
  void *v697;
  llvm::Value *v698;
  llvm::Value *v699;
  llvm::Value *v700;
  uint64_t v701;
  const char *v702;
  int v703;
  int v704;
  int v705;
  const char *v706;
  int v707;
  uint64_t AllOnesValue;
  uint64_t v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  llvm::PoisonValue *v715;
  uint64_t *Intrinsic;
  uint64_t v717;
  int v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  llvm::hashing::detail::hash_state *v722;
  BOOL v723;
  BOOL v724;
  BOOL v725;
  BOOL v726;
  uint64_t v730;
  uint64_t v731;
  llvm::hashing::detail::hash_state **v732;
  BOOL v734;
  BOOL v735;
  llvm::CallBase *v738;
  int v739;
  char *v740;
  llvm::PoisonValue **v741;
  uint64_t v742;
  _QWORD *v743;
  _QWORD *v744;
  unsigned int v745;
  unint64_t v746;
  uint64_t v747;
  int *v748;
  uint64_t j;
  int v750;
  uint64_t *v751;
  int *v752;
  uint64_t k;
  uint64_t v754;
  int v755;
  char *v756;
  unsigned __int8 *v757;
  llvm::Value *v758;
  llvm::Value *v759;
  uint64_t *v760;
  BOOL v763;
  BOOL v764;
  uint64_t *InsertElement;
  BOOL v770;
  BOOL v771;
  BOOL v772;
  char *v773;
  _QWORD *v774;
  uint64_t v775;
  _QWORD *v776;
  unsigned int v777;
  unint64_t v778;
  int *v779;
  char v780;
  uint64_t v781;
  int64x2_t v782;
  uint64x2_t v783;
  int64x2_t v784;
  int32x2_t v785;
  char *v786;
  uint64_t v787;
  _QWORD *v788;
  _QWORD *v789;
  unint64_t v790;
  unsigned int v791;
  uint64_t v792;
  int v793;
  _DWORD *v794;
  char *v795;
  unsigned __int8 *v796;
  llvm::Value *v797;
  llvm::Value *v798;
  void *v799;
  BOOL v800;
  BOOL v802;
  BOOL v803;
  BOOL v806;
  BOOL v807;
  uint64_t *v810;
  uint64_t v811;
  _QWORD *v812;
  uint64_t v813;
  unsigned int v814;
  int *v817;
  unint64_t v818;
  int v819;
  uint64_t v820;
  _DWORD *v821;
  uint64_t v822;
  int v823;
  int *v824;
  llvm::Type *v825;
  _QWORD *v826;
  uint64_t v827;
  uint64_t *v833;
  uint64_t v834;
  _QWORD *v835;
  uint64_t *v841;
  uint64_t v842;
  _QWORD *v843;
  unsigned int v844;
  uint64_t v845;
  char v846;
  uint64_t v847;
  BOOL v848;
  BOOL v849;
  BOOL v850;
  BOOL v851;
  BOOL v852;
  BOOL v853;
  BOOL v854;
  BOOL v855;
  BOOL v856;
  BOOL v858;
  BOOL v859;
  BOOL v860;
  BOOL v861;
  BOOL v862;
  BOOL v863;
  BOOL v864;
  BOOL v869;
  BOOL v870;
  BOOL v871;
  BOOL v874;
  BOOL v875;
  BOOL v876;
  BOOL v878;
  BOOL v882;
  BOOL v883;
  BOOL v884;
  BOOL v885;
  BOOL v887;
  BOOL v888;
  BOOL v889;
  BOOL v890;
  BOOL v891;
  BOOL v892;
  BOOL v893;
  BOOL v894;
  BOOL v895;
  BOOL v896;
  BOOL v897;
  BOOL v898;
  llvm::CallBase **v900;
  BOOL v901;
  BOOL v902;
  BOOL v903;
  BOOL v904;
  unsigned __int8 *v905;
  BOOL v906;
  BOOL v907;
  BOOL v908;
  BOOL v909;
  llvm::CallBase **v910;
  BOOL v911;
  BOOL v913;
  BOOL v915;
  llvm::CallBase **v917;
  BOOL v918;
  BOOL v920;
  BOOL v922;
  BOOL v924;
  BOOL v925;
  llvm::CallBase **v926;
  BOOL v927;
  BOOL v928;
  BOOL v929;
  BOOL v930;
  BOOL v931;
  BOOL v932;
  BOOL v933;
  BOOL v934;
  char *v939;
  uint64_t v940;
  _QWORD *v941;
  unsigned int v942;
  unint64_t v943;
  unint64_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t *v947;
  int8x16_t v948;
  int32x4_t v949;
  int32x4_t v950;
  uint64_t v955;
  BOOL v956;
  uint64_t v957;
  llvm::Value *v959;
  llvm::Type *v960;
  uint64_t *SIToFP;
  const llvm::Twine *v962;
  llvm::Value *v963;
  llvm::Value *v964;
  llvm::Value *v966;
  llvm::Type *v967;
  BOOL v970;
  BOOL v972;
  BOOL v974;
  BOOL v976;
  BOOL v978;
  BOOL v980;
  BOOL v982;
  BOOL v984;
  BOOL v986;
  BOOL v988;
  BOOL v990;
  BOOL v992;
  char *v994;
  uint64_t *v995;
  _QWORD *v996;
  uint64_t v997;
  llvm::Value *v998;
  unsigned __int8 *v999;
  int v1000;
  uint64_t *v1001;
  uint64_t v1002;
  _QWORD *v1003;
  _QWORD *v1005;
  _QWORD *v1006;
  uint64_t v1007;
  uint64_t v1008;
  _QWORD *v1009;
  unsigned int v1010;
  unint64_t v1011;
  uint64_t v1012;
  int64x2_t v1013;
  uint64x2_t v1014;
  int64x2_t v1015;
  int32x2_t v1016;
  BOOL v1021;
  BOOL v1022;
  BOOL v1024;
  BOOL v1025;
  BOOL v1026;
  BOOL v1030;
  BOOL v1031;
  BOOL v1032;
  BOOL v1033;
  BOOL v1034;
  BOOL v1035;
  BOOL v1036;
  BOOL v1037;
  BOOL v1039;
  BOOL v1040;
  BOOL v1041;
  BOOL v1042;
  BOOL v1043;
  BOOL v1044;
  BOOL v1045;
  BOOL v1046;
  BOOL v1047;
  BOOL v1048;
  llvm::CallBase **v1049;
  BOOL v1050;
  llvm::CallBase *v1051;
  llvm::CallBase *v1052;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t *v1057;
  uint64_t v1058;
  llvm::Type *v1059;
  llvm::Value *v1060;
  uint64_t v1061;
  int v1062;
  uint64_t v1063;
  llvm::Value *v1064;
  char *v1065;
  uint64_t *UIToFP;
  uint64_t v1067;
  llvm::CallBase *v1068;
  uint64_t v1069;
  _QWORD *v1070;
  int v1071;
  uint64_t *v1072;
  uint64_t v1073;
  uint64_t v1074;
  llvm::CallBase *v1075;
  char *v1076;
  uint64_t v1077;
  _QWORD *v1078;
  unsigned int v1079;
  unint64_t v1080;
  unint64_t v1081;
  int8x16_t v1082;
  int8x16_t v1083;
  unsigned __int128 *v1084;
  int32x2_t v1085;
  char *v1088;
  uint64_t v1089;
  _QWORD *v1090;
  _QWORD *v1091;
  llvm::Type *v1092;
  unint64_t v1093;
  unsigned int v1094;
  unsigned int v1095;
  int *v1096;
  uint64_t v1097;
  unsigned int v1098;
  int v1099;
  int v1100;
  int64x2_t v1101;
  uint64x2_t v1102;
  int64x2_t v1103;
  int32x2_t v1104;
  char *v1105;
  uint64_t *v1106;
  llvm::Type *v1107;
  uint64_t v1108;
  char *v1109;
  llvm::Type *v1110;
  unint64_t v1111;
  _QWORD *v1112;
  unsigned int v1113;
  _BOOL4 v1114;
  BOOL v1116;
  BOOL v1117;
  BOOL v1118;
  BOOL v1121;
  char *v1123;
  _QWORD *v1124;
  uint64_t v1125;
  llvm::Type *v1126;
  unint64_t v1127;
  uint64_t v1128;
  unsigned int v1129;
  int *v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64x2_t v1133;
  int64x2_t v1134;
  uint64_t v1135;
  int v1136;
  int64x2_t v1137;
  int32x2_t v1138;
  llvm::Type *v1139;
  uint64_t *v1140;
  int v1141;
  uint64_t *v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  char *v1146;
  uint64_t v1147;
  _QWORD *v1148;
  _QWORD *v1149;
  uint64_t v1150;
  llvm::Type *v1151;
  unint64_t v1152;
  unsigned int v1153;
  unsigned int v1154;
  uint64_t v1155;
  unsigned int v1156;
  unsigned int v1157;
  _DWORD *v1158;
  int v1159;
  int64x2_t v1160;
  uint64x2_t v1161;
  int64x2_t v1162;
  int32x2_t v1163;
  int v1164;
  int v1165;
  uint64_t *v1166;
  char *v1167;
  unsigned __int8 *v1168;
  llvm::Value *v1169;
  llvm::Value *v1170;
  llvm::Type *v1171;
  char *v1172;
  unint64_t v1173;
  unint64_t v1174;
  int v1175;
  int *v1176;
  int v1177;
  uint64_t v1178;
  unsigned int v1179;
  int v1180;
  char *v1181;
  llvm::Type *v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t *v1185;
  uint64_t *v1186;
  uint64_t *v1187;
  uint64_t v1188;
  char *v1189;
  llvm::Type *v1190;
  unint64_t v1191;
  uint64_t v1192;
  unsigned int v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64x2_t v1196;
  int64x2_t v1197;
  uint64_t v1198;
  int64x2_t v1199;
  int32x2_t v1200;
  char *v1201;
  uint64_t *v1202;
  int v1203;
  llvm::Type *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t *v1208;
  uint64_t v1209;
  uint64_t *v1210;
  const llvm::Twine *v1211;
  llvm::hashing::detail::hash_state **v1212;
  uint64_t v1213;
  _QWORD *v1214;
  int v1215;
  llvm::Constant **v1216;
  uint64_t *Not;
  llvm::Value *v1218;
  uint64_t *v1219;
  llvm::Value *v1220;
  uint64_t *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t *v1225;
  uint64_t v1226;
  uint64_t *Xor;
  uint64_t *v1228;
  unsigned int **v1229;
  unsigned int *v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t *v1233;
  uint64_t *v1234;
  uint64_t *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t *v1240;
  uint64_t v1241;
  uint64_t *v1242;
  size_t v1243;
  char *v1244;
  size_t v1245;
  _BOOL4 v1246;
  llvm::CallBase *v1247;
  int v1248;
  char *v1255;
  llvm::Value *v1256;
  llvm::Value *v1257;
  uint64_t *Add;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t *v1262;
  uint64_t v1263;
  uint64_t *v1264;
  llvm::Value *v1265;
  char *v1266;
  unsigned __int8 *v1267;
  llvm::Value *v1268;
  BOOL v1271;
  BOOL v1273;
  llvm::CallBase **v1274;
  int v1275;
  int v1276;
  BOOL v1277;
  BOOL v1288;
  uint64_t v1290;
  int v1291;
  llvm::CallBase *v1295;
  uint64_t v1296;
  BOOL v1298;
  BOOL v1299;
  BOOL v1300;
  BOOL v1301;
  BOOL v1302;
  BOOL v1303;
  llvm::Type *v1304;
  unint64_t v1305;
  int *v1306;
  uint64_t m;
  llvm::PoisonValue **v1308;
  uint64_t *v1309;
  int v1310;
  llvm::PoisonValue *v1311;
  llvm::PointerType **v1312;
  llvm::Type *v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t *v1316;
  uint64_t *v1317;
  uint64_t v1318;
  llvm::Type *v1319;
  llvm::Value *v1320;
  uint64_t *v1321;
  llvm::Type *v1322;
  llvm::ConstantInt *v1323;
  llvm::Value *v1324;
  char *v1325;
  llvm::Value *v1326;
  llvm::Value *v1327;
  char *v1328;
  llvm::Value *v1329;
  llvm::Value *v1330;
  int v1334;
  int v1335;
  _BOOL4 v1336;
  char *v1337;
  BOOL **v1338;
  llvm::Value *v1339;
  llvm::CallBase *v1340;
  char *v1341;
  BOOL **v1342;
  llvm::Value *v1343;
  uint64_t *v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int v1348;
  int v1349;
  _BOOL4 v1350;
  int v1351;
  uint64_t v1352;
  uint64_t v1353;
  int v1354;
  int v1355;
  char *v1356;
  llvm::Value *v1357;
  llvm::hashing::detail::hash_state *v1358;
  uint64_t *v1359;
  const llvm::Twine *v1360;
  uint64_t *v1361;
  const llvm::Twine *v1362;
  char *v1363;
  BOOL **v1364;
  llvm::Value *v1365;
  BOOL v1366;
  int v1367;
  int v1368;
  int v1369;
  _BOOL4 v1370;
  char *v1371;
  BOOL **v1372;
  llvm::Value *v1373;
  llvm::Type *v1374;
  _BOOL4 v1375;
  char *v1376;
  uint64_t *v1377;
  uint64_t v1378;
  uint64_t v1379;
  llvm::Type *v1384;
  const char *v1385;
  unint64_t v1386;
  llvm::Type *v1387;
  llvm::PointerType **v1388;
  llvm::Type *v1389;
  llvm::Value *v1390;
  llvm::Type *v1391;
  llvm::Instruction *v1392;
  uint64_t *PointerCast;
  uint64_t *v1394;
  uint64_t v1395;
  uint64_t **v1396;
  llvm::ValueAsMetadata *v1397;
  llvm::Value *v1398;
  llvm::MDNode *v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t *v1402;
  llvm::Type *v1403;
  unint64_t v1404;
  int MDKindID;
  uint64_t *v1406;
  const llvm::Twine *v1407;
  llvm::Value *v1408;
  _BOOL4 v1409;
  BOOL v1410;
  BOOL v1411;
  BOOL v1412;
  BOOL v1413;
  BOOL v1414;
  BOOL v1415;
  int v1416;
  BOOL v1417;
  int v1418;
  unint64_t v1419;
  char *v1420;
  int v1421;
  char *v1422;
  uint64_t *v1423;
  uint64_t *v1424;
  uint64_t *v1425;
  uint64_t v1426;
  int v1427;
  uint64_t v1428;
  int v1429;
  uint64_t *v1430;
  const llvm::Twine *v1431;
  uint64_t *v1432;
  const llvm::Twine *v1433;
  uint64_t *v1434;
  uint64_t *v1435;
  uint64_t v1436;
  _QWORD *v1437;
  uint64_t *v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  int v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  llvm::hashing::detail::hash_state **v1446;
  _BOOL4 v1447;
  char *v1448;
  llvm::Value *v1449;
  llvm::Value *v1450;
  llvm::Value *v1451;
  uint64_t *v1452;
  const llvm::Twine *v1453;
  const llvm::Twine *v1454;
  uint64_t *v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  int v1459;
  BOOL v1460;
  BOOL v1462;
  BOOL v1464;
  BOOL v1466;
  int v1468;
  BOOL v1469;
  int v1470;
  unint64_t v1471;
  char *v1472;
  int v1473;
  char *v1474;
  uint64_t *v1475;
  uint64_t *v1476;
  uint64_t *v1477;
  uint64_t v1478;
  int v1479;
  uint64_t v1480;
  uint64_t v1481;
  _QWORD *v1482;
  uint64_t *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  int v1488;
  int v1489;
  uint64_t v1490;
  int v1491;
  int v1492;
  BOOL v1493;
  int v1494;
  BOOL v1495;
  int v1496;
  int v1497;
  llvm::Value *v1498;
  uint64_t v1499;
  uint64_t *v1500;
  uint64_t *v1501;
  const llvm::Twine *v1502;
  llvm::Value *v1503;
  BOOL v1504;
  BOOL v1505;
  BOOL v1506;
  BOOL v1507;
  BOOL v1508;
  BOOL v1509;
  int v1510;
  BOOL v1511;
  unint64_t v1512;
  int v1513;
  int v1514;
  llvm::hashing::detail::hash_state **v1515;
  llvm::Value *v1516;
  uint64_t v1517;
  uint64_t v1518;
  llvm::CallBase *v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  char *v1523;
  unint64_t v1524;
  uint64_t v1525;
  char *v1526;
  uint64_t *v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  llvm::CallBase *v1531;
  llvm::Type *v1532;
  const char *v1533;
  int v1534;
  int v1535;
  int v1536;
  int v1537;
  llvm::CallBase *v1538;
  llvm::Type *v1539;
  const char *v1540;
  int v1541;
  int v1542;
  int v1543;
  _BOOL4 v1544;
  uint64_t *v1545;
  uint64_t v1546;
  uint64_t *v1547;
  uint64_t *v1548;
  int *v1549;
  uint64_t v1550;
  uint64x2_t v1551;
  int64x2_t v1552;
  int64x2_t v1553;
  int32x2_t v1554;
  llvm::CallBase *v1555;
  llvm::Value *v1556;
  uint64_t v1557;
  uint64_t v1558;
  char *v1559;
  int v1560;
  uint64_t v1561;
  int v1562;
  const char *v1563;
  int v1564;
  int v1565;
  llvm::hashing::detail::hash_state **v1567;
  llvm::Value *v1568;
  uint64_t v1569;
  const char *v1570;
  int v1571;
  int v1572;
  int v1573;
  int v1574;
  int v1575;
  uint64_t v1576;
  int v1577;
  const char *v1578;
  int v1579;
  llvm::hashing::detail::hash_state **v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t *v1584;
  llvm::Type *v1585;
  llvm::CallBase *v1586;
  uint64_t v1587;
  uint64_t v1588;
  int v1591;
  int v1592;
  int v1593;
  _BOOL4 v1595;
  BOOL v1596;
  int v1597;
  llvm::hashing::detail::hash_state **v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t *v1601;
  uint64_t *v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t *v1605;
  uint64_t *v1606;
  _BOOL4 v1607;
  llvm::hashing::detail::hash_state **v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t *v1611;
  llvm::Type *v1612;
  uint64_t v1613;
  llvm::Value *v1614;
  llvm::CallBase **v1615;
  size_t v1616;
  void **v1617;
  llvm::Value *ShuffleVector;
  llvm::CallBase *v1619;
  llvm::CallBase *v1620;
  uint64_t *v1621;
  void *__p;
  uint64_t *v1623;
  llvm::Value *FNeg;
  __int16 v1625;
  void *__src;
  uint64_t v1627;
  BOOL *v1628;
  BOOL *v1629;
  uint64_t v1630;
  llvm::hashing::detail::hash_state *v1631[2];
  __int128 v1632;
  __int16 v1633;
  void *v1634[2];
  _BYTE v1635[32];
  uint64_t v1636;
  uint64_t v1637;
  uint64_t *v1638;
  void (***v1639)(llvm::ConstantFolder *__hidden);
  void (***v1640)(llvm::IRBuilderDefaultInserter *__hidden);
  uint64_t v1641;
  int v1642;
  __int16 v1643;
  char v1644;
  uint64_t v1645;
  uint64_t v1646;
  void (**v1647)(llvm::ConstantFolder *__hidden);
  void (**v1648)(llvm::IRBuilderDefaultInserter *__hidden);
  BOOL *v1649[2];
  BOOL *v1650[3];

  v1650[1] = *(BOOL **)MEMORY[0x24BDAC8D0];
  v1619 = a2;
  v1620 = this;
  v4 = *((_QWORD *)this - 4);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v1614 = (llvm::Value *)*((_QWORD *)this - 4);
    v6 = **(uint64_t ***)this;
    v7 = v1635;
    v1634[0] = v1635;
    v1634[1] = (void *)0x200000000;
    v1637 = 0;
    v1638 = v6;
    v1639 = &v1647;
    v1640 = &v1648;
    v1641 = 0;
    v1642 = 0;
    v1643 = 512;
    v1644 = 7;
    v1636 = 0;
    v1646 = 0;
    v1645 = 0;
    v1647 = &off_251C359D8;
    v1648 = &off_251C35AC8;
    llvm::IRBuilderBase::SetInsertPoint((unsigned int *)v1634, *((_QWORD *)this + 5), (uint64_t)this + 24);
    v13 = v1619;
    if (v1619)
    {
      v1615 = &v1620;
      v1616 = (size_t)&v1619;
      v1617 = v1634;
      v14 = *((_DWORD *)v1619 + 9);
      if (v14 > 2933)
      {
        if (v14 > 10958)
        {
          if (v14 > 11392)
          {
            if (v14 <= 11534)
            {
              if ((v14 - 11393) >= 4)
              {
                if ((v14 - 11400) < 3)
                {
                  v15 = (uint64_t *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                  v16 = *v15;
                  llvm::FixedVectorType::get((uint64_t **)(*v6 + 1704), (llvm::Type *)4);
                  if (v16 == v17)
                  {
                    v18 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                    llvm::FixedVectorType::get((uint64_t **)(*v6 + 2016), (llvm::Type *)2);
                    v20 = v19;
                    __src = "cast";
                    LOWORD(v1630) = 259;
                    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, (uint64_t)v15, v19, (uint64_t)&__src);
                    __src = "cast";
                    LOWORD(v1630) = 259;
                    v22 = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v18, v20, (uint64_t)&__src);
                    v23 = v1619;
                    if (v1619)
                      v24 = *((_QWORD *)v1619 + 3);
                    else
                      v24 = 0;
                    v1631[0] = (llvm::hashing::detail::hash_state *)Cast;
LABEL_498:
                    v1631[1] = v22;
                    LOWORD(v1630) = 257;
                    v82 = (uint64_t *)v1631;
LABEL_499:
                    v138 = 2;
                    goto LABEL_1101;
                  }
LABEL_1108:
                  if (v1634[0] != v7)
                    free(v1634[0]);
                  return;
                }
                goto LABEL_495;
              }
              goto LABEL_388;
            }
            if ((v14 - 11537) >= 4)
            {
              if ((v14 - 11535) < 2)
              {
                v24 = *((_QWORD *)v1619 + 3);
                v160 = (llvm::hashing::detail::hash_state *)((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
LABEL_230:
                v1631[0] = v160;
                LOWORD(v1630) = 257;
                v82 = (uint64_t *)v1631;
                v23 = v1619;
                v138 = 1;
                goto LABEL_1101;
              }
              goto LABEL_495;
            }
            v83 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
            v84 = (char *)llvm::CallBase::arg_end(v1620);
            __src = &v1628;
            v1627 = 0x400000000;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v83, v84);
            llvm::VectorType::getInteger(**((_QWORD **)__src + 2));
            v85 = *((_QWORD *)__src + 2);
            v1633 = 257;
            v87 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v85, v86, (uint64_t)v1631);
            v88 = (uint64_t *)__src;
            *((_QWORD *)__src + 2) = v87;
            v89 = v1619;
            if (v1619)
              v90 = *((_QWORD *)v1619 + 3);
            else
              v90 = 0;
            v163 = v1627;
            v1633 = 257;
            goto LABEL_307;
          }
          if ((v14 - 10959) <= 8)
          {
            if (((1 << (v14 + 49)) & 0x11F) != 0)
            {
              v49 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
              v50 = (char *)llvm::CallBase::arg_end(v1620);
              __src = &v1628;
              v1627 = 0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v49, v50);
              v51 = v1619;
              v52 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v1620 + 32);
              v53 = (uint64_t *)__src;
              if (*((_DWORD *)v1619 + 9) == 10967
                && (v54 = *((_QWORD *)__src + 1),
                    llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1680), (llvm::Type *)*(unsigned int *)(*(_QWORD *)v1620 + 32)), v1633 = 257, v56 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v54, v55, (uint64_t)v1631), v53 = (uint64_t *)__src, *((_QWORD *)__src + 1) = v56, (v51 = v1619) == 0))
              {
                v57 = 0;
              }
              else
              {
                v57 = *((_QWORD *)v51 + 3);
              }
              v1633 = 257;
              v58 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v57, (uint64_t)v51, v53, v1627, (uint64_t)v1631, 0);
              llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1968), v52);
              v1633 = 257;
              v60 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, (uint64_t)v58, v59, (uint64_t)v1631);
              llvm::Value::takeName((llvm::Value *)v58, v1620);
              v61 = v1620;
              v62 = (llvm::Value *)v60;
LABEL_223:
              llvm::Value::doRAUW(v61, v62, (llvm::Value *)1);
              llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*((_QWORD *)v1620 + 5) + 40, (uint64_t)v1620 + 24);
              v159 = (llvm::hashing::detail::hash_state *)__src;
              if (__src == &v1628)
                goto LABEL_1108;
LABEL_341:
              free(v159);
              goto LABEL_1108;
            }
            v141 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
            v142 = (char *)llvm::CallBase::arg_end(v1620);
            __src = &v1628;
            v1627 = 0x400000000;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v141, v142);
            v143 = (llvm::Type *)(2 * *(_DWORD *)(*(_QWORD *)v1620 + 32));
            v144 = *((_QWORD *)__src + 1);
            llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1680), v143);
            v1633 = 257;
            v146 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v144, v145, (uint64_t)v1631);
            v147 = __src;
            *((_QWORD *)__src + 1) = v146;
            v148 = v147[2];
            llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1680), v143);
            v1633 = 257;
            v150 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v148, v149, (uint64_t)v1631);
            v151 = (uint64_t *)__src;
            *((_QWORD *)__src + 2) = v150;
            v77 = v1619;
            if (v1619)
              v78 = *((_QWORD *)v1619 + 3);
            else
              v78 = 0;
            v152 = v1627;
            v1633 = 257;
LABEL_392:
            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v78, (uint64_t)v77, v151, v152, (uint64_t)v1631, 0);
            v224 = (llvm::hashing::detail::hash_state *)__src;
            if (__src == &v1628)
            {
LABEL_1102:
              v344 = v1620;
              v343 = AlignedLoad;
LABEL_1103:
              llvm::Value::takeName((llvm::Value *)v343, v344);
              goto LABEL_1104;
            }
LABEL_393:
            free(v224);
            goto LABEL_1102;
          }
          if (v14 == 11268)
          {
            if ((*((_DWORD *)v1620 + 5) & 0x7FFFFFF) != 0)
            {
              v266 = *((_QWORD *)v1619 + 3);
              LOWORD(v1630) = 257;
              v267 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v266, (uint64_t)v1619, 0, 0, (uint64_t)&__src, 0);
              LODWORD(v1631[0]) = 1;
              LOWORD(v1630) = 257;
              Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1634, v267, (unsigned int *)v1631, 1, (uint64_t)&__src);
              v269 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
              v270 = llvm::PointerType::get((llvm::PointerType **)*Value, 0);
              LOWORD(v1630) = 257;
              v271 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v269, v270, (uint64_t)&__src);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1634, Value, (uint64_t)v271, 256, 0);
              LODWORD(v1631[0]) = 0;
              LOWORD(v1630) = 257;
              v272 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1634, v267, (unsigned int *)v1631, 1, (uint64_t)&__src);
              llvm::Value::takeName((llvm::Value *)v267, v1620);
              v273 = v1620;
              v274 = (llvm::Value *)v272;
LABEL_1105:
              llvm::Value::doRAUW(v273, v274, (llvm::Value *)1);
              goto LABEL_1106;
            }
            goto LABEL_1108;
          }
LABEL_495:
          llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::$_0::operator()((uint64_t)&v1615, (uint64_t)v8, v9);
          goto LABEL_1108;
        }
        if (v14 > 10315)
        {
          if ((v14 - 10464) < 6)
          {
            v63 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
            v64 = (char *)llvm::CallBase::arg_end(v1620);
            __src = &v1628;
            v1627 = 0x400000000;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v63, v64);
            X86MaskVec = getX86MaskVec((uint64_t)v1634, *((_QWORD *)__src + 3), *(_DWORD *)(**(_QWORD **)__src + 32));
            v66 = (uint64_t *)__src;
            *((_QWORD *)__src + 3) = X86MaskVec;
            if (v1619)
              v67 = *((_QWORD *)v1619 + 3);
            else
              v67 = 0;
            v1633 = 257;
            v157 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v67, (uint64_t)v1619, v66, v1627, (uint64_t)v1631, 0);
            v158 = ApplyX86MaskOn1BitsVec((llvm::IntegerType **)v1634, v157, 0);
            llvm::Value::takeName((llvm::Value *)v157, v1620);
            v61 = v1620;
            v62 = (llvm::Value *)v158;
            goto LABEL_223;
          }
          v48 = 10316;
LABEL_387:
          if (v14 != v48)
            goto LABEL_495;
LABEL_388:
          v261 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
          v262 = (char *)llvm::CallBase::arg_end(v1620);
          __src = &v1628;
          v1627 = 0x400000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v261, v262);
          v263 = *((_QWORD *)__src + v1627 - 1);
          v264 = *v6 + 1944;
          v1631[0] = (llvm::hashing::detail::hash_state *)"trunc";
          v1633 = 259;
          v265 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 38, v263, v264, (uint64_t)v1631);
          v152 = v1627;
          *((_QWORD *)__src + v1627 - 1) = v265;
          v77 = v1619;
          if (v1619)
            v78 = *((_QWORD *)v1619 + 3);
          else
            v78 = 0;
          v151 = (uint64_t *)__src;
          v1633 = 257;
          goto LABEL_392;
        }
        if ((v14 - 2934) > 9 || ((1 << (v14 - 118)) & 0x3F1) == 0)
        {
          v48 = 10247;
          goto LABEL_387;
        }
        goto LABEL_232;
      }
      if (v14 <= 318)
      {
        if (v14 > 164)
        {
          if (v14 <= 239)
          {
            v27 = v14 - 165;
            if (v27 > 0x25)
              goto LABEL_495;
            if (((1 << v27) & 0x3C00000) != 0)
            {
              v121 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
              v122 = (char *)llvm::CallBase::arg_end(v1620);
              __src = &v1628;
              v1627 = 0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v121, v122);
              if (v1619)
                v123 = *((_QWORD *)v1619 + 3);
              else
                v123 = 0;
              v1633 = 257;
              AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v123, (uint64_t)v1619, (uint64_t *)__src, v1627, (uint64_t)v1631, 0);
              llvm::Instruction::copyMetadata((uint64_t)AlignedLoad, (uint64_t)v1620, 0, 0);
LABEL_308:
              v224 = (llvm::hashing::detail::hash_state *)__src;
              if (__src == &v1628)
                goto LABEL_1102;
              goto LABEL_393;
            }
            if (((1 << v27) & 0x2900000000) == 0)
            {
              if (((1 << v27) & 3) == 0)
                goto LABEL_495;
LABEL_232:
              v161 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
              v162 = (char *)llvm::CallBase::arg_end(v1620);
              __src = &v1628;
              v1627 = 0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v161, v162);
              v89 = v1619;
              if (v1619)
                v90 = *((_QWORD *)v1619 + 3);
              else
                v90 = 0;
              v88 = (uint64_t *)__src;
LABEL_236:
              v163 = v1627;
              v1633 = 257;
LABEL_307:
              AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v90, (uint64_t)v89, v88, v163, (uint64_t)v1631, 0);
              goto LABEL_308;
            }
            v28 = v1620;
            if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v28 - 32 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0xA0)
              goto LABEL_495;
            v29 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            v1631[0] = *v29;
            v1631[1] = v29[4];
            *(_QWORD *)&v1632 = v29[8];
            *((_QWORD *)&v1632 + 1) = v29[16];
            if (v1619)
              v30 = *((_QWORD *)v1619 + 3);
            else
              v30 = 0;
            LOWORD(v1630) = 257;
            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v30, (uint64_t)v1619, (uint64_t *)v1631, 4, (uint64_t)&__src, 0);
            v311 = *((_QWORD *)v1620 + 8);
            if (!v311)
            {
              v313 = 0;
              v314 = 0;
              __src = 0;
              v1627 = 0;
LABEL_514:
              v1628 = 0;
LABEL_515:
              v1629 = (BOOL *)v311;
              AlignedLoad[8] = (uint64_t)llvm::AttributeList::get(v6, v313, v314, (uint64_t *)&__src, 4uLL);
              v345 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[12];
              v346 = (unint64_t *)(v345 + 24);
              v347 = (unint64_t *)(v345 + 24);
              if (*(_DWORD *)(v345 + 32) >= 0x41u)
                v347 = (unint64_t *)*v346;
              v348 = *v347;
              v349 = __clz(v348) ^ 0x13F;
              if (v348)
                v350 = v349;
              else
                v350 = 0;
              llvm::MemIntrinsicBase<llvm::MemIntrinsic>::setDestAlignment((uint64_t)AlignedLoad, v350);
              if ((*(_DWORD *)(*(AlignedLoad - 4) + 36) - 197) <= 3
                && *(_DWORD *)(*(AlignedLoad - 4) + 36) != 198)
              {
                if (*(_DWORD *)(v345 + 32) >= 0x41u)
                  v346 = (unint64_t *)*v346;
                v351 = __clz(*v346) ^ 0x13F;
                if (*v346)
                  v352 = v351;
                else
                  v352 = 0;
                llvm::MemTransferBase<llvm::MemIntrinsic>::setSourceAlignment((uint64_t)AlignedLoad, v352);
              }
              goto LABEL_1102;
            }
            v312 = *(_DWORD *)(v311 + 8);
            if (v312)
            {
              v313 = *(_QWORD *)(v311 + 40);
              if (v312 != 1)
              {
                v314 = *(_QWORD *)(v311 + 48);
                if (v312 > 2)
                {
                  __src = *(void **)(v311 + 56);
                  if (v312 != 3)
                  {
                    v1627 = *(_QWORD *)(v311 + 64);
                    if (v312 > 4)
                    {
                      v1628 = *(BOOL **)(v311 + 72);
                      if (v312 < 7)
                        v311 = 0;
                      else
                        v311 = *(_QWORD *)(v311 + 88);
                      goto LABEL_515;
                    }
                    goto LABEL_513;
                  }
LABEL_512:
                  v1627 = 0;
LABEL_513:
                  v311 = 0;
                  goto LABEL_514;
                }
LABEL_511:
                __src = 0;
                goto LABEL_512;
              }
            }
            else
            {
              v313 = 0;
            }
            v314 = 0;
            goto LABEL_511;
          }
          if (v14 == 240)
          {
            v277 = v1620;
            if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v277 - 32 * (*((_DWORD *)v277 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x40)
            {
              v278 = *v1638;
              v279 = *(_QWORD *)(*v1638 + 1600);
              if (!v279)
              {
                v279 = llvm::ConstantInt::get(v278 + 1920, 0, 0);
                *(_QWORD *)(v278 + 1600) = v279;
              }
              v280 = v1620;
            }
            else
            {
              v280 = v1620;
              v279 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
            }
            if (((llvm::CallBase::arg_end(v280) - ((_QWORD)v280 - 32 * (*((_DWORD *)v280 + 5) & 0x7FFFFFF))) & 0x1FFFFFFF80) != 0)
            {
              v320 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[12];
            }
            else
            {
              v338 = *v1638;
              v320 = *(_QWORD *)(*v1638 + 1600);
              if (!v320)
              {
                v320 = llvm::ConstantInt::get(v338 + 1920, 0, 0);
                *(_QWORD *)(v338 + 1600) = v320;
              }
            }
            v23 = v1619;
            if (v1619)
              v24 = *((_QWORD *)v1619 + 3);
            else
              v24 = 0;
            v339 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            v1631[0] = *v339;
            v1631[1] = v339[4];
            *(_QWORD *)&v1632 = v279;
            *((_QWORD *)&v1632 + 1) = v320;
            LOWORD(v1630) = 257;
            v82 = (uint64_t *)v1631;
            v138 = 4;
            goto LABEL_1101;
          }
          if (v14 != 249)
          {
            if (v14 != 297)
              goto LABEL_495;
            v24 = *((_QWORD *)v1619 + 3);
            LOWORD(v1630) = 257;
            v23 = v1619;
            v82 = 0;
            v138 = 0;
LABEL_1101:
            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v24, (uint64_t)v23, v82, v138, (uint64_t)&__src, 0);
            goto LABEL_1102;
          }
LABEL_237:
          v164 = v1620;
          if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v164 - 32 * (*((_DWORD *)v164 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x80)
          {
            v165 = v1619;
            if (v1619)
              v166 = *((_QWORD *)v1619 + 3);
            else
              v166 = 0;
            v340 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
            __src = *(void **)v340;
            v1627 = *((_QWORD *)v340 + 4);
            v1628 = (BOOL *)*((_QWORD *)v340 + 8);
            v1629 = (BOOL *)*((_QWORD *)v340 + 12);
            v341 = llvm::PointerType::get((llvm::PointerType **)(*v1638 + 1944), 0);
            llvm::Constant::getNullValue(v341);
            v1630 = v342;
            v1633 = 257;
            v343 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v166, (uint64_t)v165, (uint64_t *)&__src, 5, (uint64_t)v1631, 0);
            AlignedLoad = v343;
            v344 = v1620;
            goto LABEL_1103;
          }
          goto LABEL_495;
        }
        switch(v14)
        {
          case '5':
          case '7':
            v79 = *((_QWORD *)v1619 + 3);
            v1631[0] = *((llvm::hashing::detail::hash_state **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            v80 = *v1638;
            v81 = *(llvm::hashing::detail::hash_state **)(*v1638 + 1600);
            if (!v81)
            {
              v81 = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(v80 + 1920, 0, 0);
              *(_QWORD *)(v80 + 1600) = v81;
            }
            v1631[1] = v81;
            LOWORD(v1630) = 257;
            v82 = (uint64_t *)v1631;
            v24 = v79;
            v23 = v13;
            goto LABEL_499;
          case '6':
            goto LABEL_227;
          case '8':
          case '9':
          case ':':
            goto LABEL_495;
          case ';':
            if ((*((_BYTE *)v1614 + 23) & 0x10) != 0)
            {
              ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1614);
              v316 = *ValueName;
              v276 = (char *)(ValueName + 2);
              v275 = v316;
            }
            else
            {
              v275 = 0;
              v276 = (char *)&str_3_26;
            }
            v317 = 5;
            if (v275 < 5)
              v317 = v275;
            if (v275 - v317 >= 8 && *(_QWORD *)&v276[v317] == 0x726464612E676264)
            {
              v409 = *(_QWORD **)(((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8] + 24);
              __src = (void *)6;
              v410 = llvm::DIExpression::append(v409, &__src, 1);
              v411 = v1619;
              if (v1619)
                v412 = *((_QWORD *)v1619 + 3);
              else
                v412 = 0;
              v471 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
              v1631[0] = *v471;
              v1631[1] = v471[4];
              *(_QWORD *)&v1632 = llvm::MetadataAsValue::get(v6, v410);
              LOWORD(v1630) = 257;
              v82 = (uint64_t *)v1631;
              v24 = v412;
              v23 = v411;
              goto LABEL_1100;
            }
            v318 = v1620;
            v319 = (unsigned __int8 *)((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
            if (!v319 || v319[16] > 0x14u)
              goto LABEL_1107;
            if ((llvm::Constant::isZeroValue((llvm::Constant *)v319) & 1) == 0)
              goto LABEL_1106;
            v23 = v1619;
            if (v1619)
              v24 = *((_QWORD *)v1619 + 3);
            else
              v24 = 0;
            v481 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            v1631[0] = *v481;
            v1631[1] = v481[8];
            *(_QWORD *)&v1632 = v481[12];
            break;
          default:
            if (v14 != 8 && v14 != 18)
              goto LABEL_495;
LABEL_227:
            v24 = *((_QWORD *)v1619 + 3);
            v160 = (llvm::hashing::detail::hash_state *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            goto LABEL_230;
        }
LABEL_1099:
        LOWORD(v1630) = 257;
        v82 = (uint64_t *)v1631;
LABEL_1100:
        v138 = 3;
        goto LABEL_1101;
      }
      if (v14 <= 988)
      {
        if (v14 <= 487)
        {
          if (v14 == 319)
            goto LABEL_237;
          if (v14 == 320)
          {
            if ((*((_BYTE *)v1614 + 23) & 0x10) != 0)
            {
              v332 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1614);
              v333 = *v332;
              v282 = (char *)(v332 + 2);
              v281 = v333;
            }
            else
            {
              v281 = 0;
              v282 = (char *)&str_3_26;
            }
            v334 = 5;
            if (v281 < 5)
              v334 = v281;
            if (v281 - v334 >= 0x15)
            {
              v335 = *(_QWORD *)&v282[v334] == 0x2E34366863726161
                  && *(_QWORD *)&v282[v334 + 8] == 0x6C7075742E657673;
              if (v335 && *(_QWORD *)&v282[v334 + 13] == 0x7465672E656C7075)
              {
                v413 = **(_QWORD **)(*((_QWORD *)v1614 + 3) + 16);
                if (*(_BYTE *)(v413 + 8) != 19)
                  v413 = 0;
                v414 = *(_DWORD *)(v413 + 32);
                v415 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                v416 = (_QWORD *)(v415 + 24);
                if (*(_DWORD *)(v415 + 32) >= 0x41u)
                  v416 = (_QWORD *)*v416;
                v22 = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(*v6 + 2016, (v414 * *(_DWORD *)v416), 0);
                v23 = v1619;
                if (v1619)
                  v24 = *((_QWORD *)v1619 + 3);
                else
                  v24 = 0;
                v1631[0] = *((llvm::hashing::detail::hash_state **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                goto LABEL_498;
              }
            }
            goto LABEL_495;
          }
          if (v14 != 321)
            goto LABEL_495;
          if ((*((_BYTE *)v1614 + 23) & 0x10) != 0)
          {
            v321 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1614);
            v322 = *v321;
            v140 = v321 + 2;
            v139 = v322;
          }
          else
          {
            v139 = 0;
            v140 = &str_3_26;
          }
          v323 = 5;
          if (v139 < 5)
            v323 = v139;
          v324 = v139 - v323;
          if (v139 - v323 < 0x11)
            goto LABEL_495;
          v325 = &v140[v323];
          v326 = *(_QWORD *)&v140[v323] == 0x2E34366863726161 && *(_QWORD *)&v140[v323 + 8] == 0x6C7075742E657673;
          if (!v326 || v140[v323 + 16] != 101)
            goto LABEL_495;
          if (v324 >= 0x15)
          {
            if (*(_QWORD *)v325 == 0x2E34366863726161
              && *((_QWORD *)v325 + 1) == 0x6C7075742E657673
              && *(_QWORD *)(v325 + 13) == 0x7465732E656C7075)
            {
              v492 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
              if (*(_BYTE *)(*((_QWORD *)v492 + 4) + 16) == 16)
                v493 = *((_QWORD *)v492 + 4);
              else
                v493 = 0;
              v494 = (_QWORD *)(v493 + 24);
              if (*(_DWORD *)(v493 + 32) >= 0x41u)
                v494 = (_QWORD *)*v494;
              v495 = *(_DWORD *)v494;
              v496 = **((_QWORD **)v492 + 8);
              if (*(_BYTE *)(v496 + 8) != 19)
                v496 = 0;
              v497 = llvm::ConstantInt::get(*v6 + 2016, v495 * (unint64_t)*(unsigned int *)(v496 + 32), 0);
              v23 = v1619;
              if (v1619)
                v24 = *((_QWORD *)v1619 + 3);
              else
                v24 = 0;
              v610 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
              v1631[0] = *v610;
              v1631[1] = v610[8];
              *(_QWORD *)&v1632 = v497;
              goto LABEL_1099;
            }
            if (v324 >= 0x18)
            {
              v330 = *(_QWORD *)v325 == 0x2E34366863726161 && *((_QWORD *)v325 + 1) == 0x6C7075742E657673;
              if (v330 && *((_QWORD *)v325 + 2) == 0x6574616572632E65)
              {
                if (v324 >= 0x19)
                {
                  if (*(_QWORD *)v325 == 0x2E34366863726161
                    && *((_QWORD *)v325 + 1) == 0x6C7075742E657673
                    && *((_QWORD *)v325 + 2) == 0x6574616572632E65
                    && v325[24] == 50)
                  {
                    v663 = 2;
                  }
                  else if (*(_QWORD *)v325 == 0x2E34366863726161
                         && *((_QWORD *)v325 + 1) == 0x6C7075742E657673
                         && *((_QWORD *)v325 + 2) == 0x6574616572632E65
                         && v325[24] == 51)
                  {
                    v663 = 3;
                  }
                  else
                  {
                    v679 = *(_QWORD *)v325;
                    v680 = *((_QWORD *)v325 + 1);
                    v681 = *((_QWORD *)v325 + 2);
                    v682 = v325[24];
                    v686 = v679 == 0x2E34366863726161
                        && v680 == 0x6C7075742E657673
                        && v681 == 0x6574616572632E65
                        && v682 == 52;
                    v663 = 4 * v686;
                  }
                }
                else
                {
                  v663 = 0;
                }
                if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v1614 + 3) + 16) + 8) == 19)
                  v715 = **(llvm::PoisonValue ***)(*((_QWORD *)v1614 + 3) + 16);
                else
                  v715 = 0;
                Intrinsic = (uint64_t *)llvm::PoisonValue::get(v715, v8);
                if (v663)
                {
                  v717 = 0;
                  v718 = 0;
                  v719 = 32 * v663;
                  v720 = *((_DWORD *)v715 + 8) / v663;
                  do
                  {
                    v721 = llvm::ConstantInt::get(*v6 + 2016, (v720 * v718), 0);
                    v722 = *(llvm::hashing::detail::hash_state **)((char *)v1620
                                                                 + v717
                                                                 + -32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                    LOWORD(v1630) = 257;
                    __p = v715;
                    v1623 = *(uint64_t **)v722;
                    v1631[0] = (llvm::hashing::detail::hash_state *)Intrinsic;
                    v1631[1] = v722;
                    *(_QWORD *)&v1632 = v721;
                    Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t)v1634, 321, (BOOL **)&__p, 2, (uint64_t *)v1631, 3, 0, (uint64_t)&__src);
                    ++v718;
                    v717 += 32;
                  }
                  while (v719 != v717);
                }
                if (*((_BYTE *)Intrinsic + 16) == 84)
                  AlignedLoad = Intrinsic;
                else
                  AlignedLoad = 0;
                goto LABEL_1102;
              }
            }
          }
          AlignedLoad = 0;
          goto LABEL_1102;
        }
        if ((v14 - 488) >= 4)
          goto LABEL_495;
      }
      else if ((v14 - 2812) >= 4)
      {
        if ((v14 - 989) > 4 || ((1 << (v14 + 35)) & 0x15) == 0)
        {
          if ((v14 - 1221) >= 3)
            goto LABEL_495;
          if ((*((_BYTE *)v1614 + 23) & 0x10) != 0)
          {
            v213 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1614);
            v214 = *v213;
            v47 = (char *)(v213 + 2);
            v46 = v214;
          }
          else
          {
            v46 = 0;
            v47 = (char *)&str_3_26;
          }
          v215 = 5;
          if (v46 < 5)
            v215 = v46;
          if (v46 - v215 >= 0xF)
          {
            v217 = &v47[v215];
            if (*(_QWORD *)&v47[v215] == 0x2E34366863726161 && *(_QWORD *)&v47[v215 + 7] == 0x32646C2E6576732ELL)
            {
              v216 = 2;
            }
            else if (*(_QWORD *)v217 == 0x2E34366863726161 && *(_QWORD *)(v217 + 7) == 0x33646C2E6576732ELL)
            {
              v216 = 3;
            }
            else
            {
              v220 = *(_QWORD *)v217;
              v221 = *(_QWORD *)(v217 + 7);
              v223 = v220 == 0x2E34366863726161 && v221 == 0x34646C2E6576732ELL;
              v216 = 4 * v223;
            }
          }
          else
          {
            v216 = 0;
          }
          if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v1614 + 3) + 16) + 8) == 19)
            v353 = **(llvm::PoisonValue ***)(*((_QWORD *)v1614 + 3) + 16);
          else
            v353 = 0;
          v354 = *((_DWORD *)v353 + 8);
          v355 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
          v356 = (char *)llvm::CallBase::arg_end(v1620);
          v1631[0] = (llvm::hashing::detail::hash_state *)&v1632;
          v1631[1] = (llvm::hashing::detail::hash_state *)0x200000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)v1631, v355, v356);
          if (v1619)
            v357 = *((_QWORD *)v1619 + 3);
          else
            v357 = 0;
          LOWORD(v1630) = 257;
          v358 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v357, (uint64_t)v1619, (uint64_t *)v1631[0], LODWORD(v1631[1]), (uint64_t)&__src, 0);
          v360 = (uint64_t *)llvm::PoisonValue::get(v353, v359);
          LODWORD(v1621) = 0;
          if (v216)
          {
            v361 = 0;
            v362 = v354 / v216;
            do
            {
              v363 = (llvm::Value *)llvm::ConstantInt::get(*v6 + 2016, v361 * v362, 0);
              LOWORD(v1630) = 257;
              v364 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1634, v358, (unsigned int *)&v1621, 1, (uint64_t)&__src);
              LOWORD(v1630) = 257;
              v1649[0] = (BOOL *)v353;
              v1649[1] = (BOOL *)*v364;
              __p = v360;
              v1623 = v364;
              FNeg = v363;
              Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v1636 + 56) + 40), 321, v1649, 2);
              if (Declaration)
                v366 = *(_QWORD *)(Declaration + 24);
              else
                v366 = 0;
              v360 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v366, Declaration, (uint64_t *)&__p, 3, 0, 0, (uint64_t)&__src, 0);
              v361 = (_DWORD)v1621 + 1;
              LODWORD(v1621) = v361;
            }
            while (v361 < v216);
          }
          if (*((_BYTE *)v360 + 16) == 84)
            AlignedLoad = v360;
          else
            AlignedLoad = 0;
          v224 = v1631[0];
          if ((__int128 *)v1631[0] == &v1632)
            goto LABEL_1102;
          goto LABEL_393;
        }
        v132 = (_QWORD *)**((_QWORD **)v1614 + 5);
        v133 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
        v134 = (char *)llvm::CallBase::arg_end(v1620);
        __src = &v1628;
        v1627 = 0x400000000;
        llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v133, v134);
        v135 = *((_QWORD *)__src + 3);
        v136 = (uint64_t *)(v135 + 24);
        if (*(_DWORD *)(v135 + 32) >= 0x41u)
          v136 = (uint64_t *)*v136;
        v137 = llvm::ConstantInt::get(*v132 + 1992, *v136, 0);
        v88 = (uint64_t *)__src;
        *((_QWORD *)__src + 3) = v137;
        v89 = v1619;
        if (v1619)
          v90 = *((_QWORD *)v1619 + 3);
        else
          v90 = 0;
        goto LABEL_236;
      }
      __src = &v1628;
      v1627 = 0x300000000;
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type ***)v1620
                                                               - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4]);
      if ((_BYTE)v68)
      llvm::FixedVectorType::get((uint64_t **)(*v6 + 1680), (llvm::Type *)(PrimitiveSizeInBits >> 4));
      v71 = v70;
      v72 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
      llvm::CallBase::arg_end(v1620);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, *v72);
      v73 = v72[4];
      v1633 = 257;
      v74 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v73, v71, (uint64_t)v1631);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, (uint64_t)v74);
      v75 = v72[8];
      v1633 = 257;
      v76 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v75, v71, (uint64_t)v1631);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, (uint64_t)v76);
      v77 = v1619;
      if (v1619)
        v78 = *((_QWORD *)v1619 + 3);
      else
        v78 = 0;
      v151 = (uint64_t *)__src;
      v152 = v1627;
      v1633 = 257;
      goto LABEL_392;
    }
    if ((*((_BYTE *)v1614 + 23) & 0x10) != 0)
    {
      v31 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1614);
      v32 = *v31;
      v26 = (char *)(v31 + 2);
      v25 = v32;
    }
    else
    {
      v25 = 0;
      v26 = (char *)&str_3_26;
    }
    v33 = 5;
    if (v25 < 5)
      v33 = v25;
    v34 = (llvm::CallBase **)&v26[v33];
    v35 = v25 - v33;
    v1615 = (llvm::CallBase **)&v26[v33];
    v1616 = v25 - v33;
    if (v25 - v33 <= 3)
    {
      ShuffleVector = 0;
      goto LABEL_32;
    }
    v43 = *(_DWORD *)v34 != 775305336;
    if (*(_DWORD *)v34 == 775305336)
    {
      v34 = (llvm::CallBase **)((char *)v34 + 4);
      v35 -= 4;
      v1615 = v34;
      v1616 = v35;
    }
    v44 = v35 > 4;
    if (v35 >= 5)
    {
      if (*(_DWORD *)v34 != 1836480110 || *((_BYTE *)v34 + 4) != 46)
      {
        v44 = 0;
LABEL_90:
        if (*(_DWORD *)v34 == 778924641)
        {
          v34 = (llvm::CallBase **)((char *)v34 + 4);
          v35 -= 4;
          v1615 = v34;
          v1616 = v35;
        }
LABEL_92:
        if (v43)
        {
          ShuffleVector = 0;
          if (v35 == 19)
          {
            if (*v34 == (llvm::CallBase *)0x6F72706B63617473
              && v34[1] == (llvm::CallBase *)0x6863726F74636574
              && *(llvm::CallBase **)((char *)v34 + 11) == (llvm::CallBase *)0x6B63656863726F74)
            {
              goto LABEL_1106;
            }
            goto LABEL_159;
          }
          if (v35 != 23)
            goto LABEL_159;
          v94 = 0;
          goto LABEL_96;
        }
        if (v35 >= 0xC)
        {
          if (*v34 == (llvm::CallBase *)0x6F6D2E6134657373 && *((_DWORD *)v34 + 2) == 779382390)
          {
            v199 = (uint64_t **)*((_QWORD *)v1614 + 5);
            v1631[0] = (llvm::hashing::detail::hash_state *)&v1632;
            v1631[1] = (llvm::hashing::detail::hash_state *)0x100000000;
            v200 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v6 + 1992, 1, 0);
            v202 = llvm::ValueAsMetadata::get(v200, v201);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v1631, (uint64_t)v202);
            Impl = llvm::MDTuple::getImpl(v6, v1631[0], LODWORD(v1631[1]), 0, 1);
            v204 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            v205 = *v204;
            v206 = (llvm::Value *)v204[4];
            v207 = llvm::PointerType::get(*(llvm::PointerType ***)(*(_QWORD *)v206 + 24), 0);
            __src = "cast";
            LOWORD(v1630) = 259;
            v208 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v205, v207, (uint64_t)&__src);
            __src = "extractelement";
            LOWORD(v1630) = 259;
            Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v206, (const llvm::Twine *)&__src, v209);
            v211 = (uint64_t)v208;
            v212 = 256;
            goto LABEL_340;
          }
        }
        else if (v35 < 0xA)
        {
          v112 = 1;
          goto LABEL_315;
        }
        if (*v34 != (llvm::CallBase *)0x6E766F6D2E787661 || *((_WORD *)v34 + 4) != 11892)
        {
          if (v35 < 0xF)
          {
            if (v35 == 14)
            {
              if (*v34 == (llvm::CallBase *)0x6F74732E32657373
                && *(llvm::CallBase **)((char *)v34 + 6) == (llvm::CallBase *)0x71642E6C65726F74)
              {
                v391 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                v307 = *v391;
                v392 = v391[4];
                llvm::FixedVectorType::get((uint64_t **)(*v6 + 2016), (llvm::Type *)2);
                __src = "cast";
                LOWORD(v1630) = 259;
                v394 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v392, v393, (uint64_t)&__src);
                LOWORD(v1630) = 257;
                v308 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, (llvm::Value *)v394, (const llvm::Twine *)&__src, v395);
                v309 = llvm::PointerType::get((llvm::PointerType **)*v308, 0);
                __src = "cast";
                LOWORD(v1630) = 259;
                goto LABEL_430;
              }
              v112 = 0;
              v120 = v34;
              goto LABEL_318;
            }
            goto LABEL_314;
          }
          if (*v34 != (llvm::CallBase *)0x732E323135787661
            || *(llvm::CallBase **)((char *)v34 + 7) != (llvm::CallBase *)0x2E746E65726F7473)
          {
LABEL_314:
            v112 = 0;
LABEL_315:
            v120 = v34;
            if (v35 < 0xB)
            {
              v226 = 1;
              ShuffleVector = 0;
              v227 = 1;
              v228 = 1;
              v229 = 1;
              if (v35 < 9)
                goto LABEL_554;
              goto LABEL_329;
            }
LABEL_318:
            if (*v34 == (llvm::CallBase *)0x726F74732E657373
              && *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E7565726F74732ELL)
            {
              goto LABEL_429;
            }
            if (v35 < 0xC)
            {
              if (*v34 != (llvm::CallBase *)0x726F74732E787661
                || *(llvm::CallBase **)((char *)v34 + 3) != (llvm::CallBase *)0x2E7565726F74732ELL)
              {
                goto LABEL_327;
              }
              goto LABEL_429;
            }
            v295 = *v34 == (llvm::CallBase *)0x6F74732E32657373 && *((_DWORD *)v34 + 2) == 779445618;
            if (v295
              || (*v34 == (llvm::CallBase *)0x726F74732E787661
                ? (v296 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E7565726F74732ELL)
                : (v296 = 0),
                  v296))
            {
LABEL_429:
              v306 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
              v307 = *v306;
              v308 = (uint64_t *)v306[4];
              v309 = llvm::PointerType::get((llvm::PointerType **)*v308, 0);
              __src = "cast";
              LOWORD(v1630) = 259;
LABEL_430:
              v310 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v307, v309, (uint64_t)&__src);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1634, v308, (uint64_t)v310, 256, 0);
              goto LABEL_1106;
            }
            if (v35 == 20)
            {
              if (*v120 == (llvm::CallBase *)0x6D2E323135787661
                && v120[1] == (llvm::CallBase *)0x726F74732E6B7361
                && *((_DWORD *)v120 + 4) == 1936928357)
              {
                v299 = (llvm::Value *)((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                v300 = (llvm::Value *)llvm::ConstantInt::get(*v1638 + 1944, 1, 0);
                LOWORD(v1630) = 257;
                v301 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, v299, v300, (const llvm::Twine *)&__src);
                v302 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                v303 = *v302;
                v304 = (llvm::PointerType ***)v302[4];
                v305 = 0;
                goto LABEL_739;
              }
            }
            else if (v35 < 0x11)
            {
LABEL_327:
              v227 = 1;
LABEL_328:
              v226 = 0;
              ShuffleVector = 0;
LABEL_329:
              v232 = *v34 == (llvm::CallBase *)0x6D63702E32657373 && *((_BYTE *)v34 + 8) == 112;
              if (v232
                || (*v34 == (llvm::CallBase *)0x6D63702E32787661 ? (v233 = *((_BYTE *)v34 + 8) == 112) : (v233 = 0),
                    v233))
              {
                if (*((_BYTE *)v34 + 9) == 101)
                  v287 = 32;
                else
                  v287 = 38;
                v288 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                v289 = *(llvm::CmpInst ***)v288;
                v290 = *((_QWORD *)v288 + 4);
                LOWORD(v1630) = 257;
                ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, v287, v289, v290, (uint64_t)&__src);
                ShuffleVector = (llvm::Value *)ICmp;
                v292 = *(llvm::Type **)v1620;
                LOWORD(v1630) = 257;
                p_src = &__src;
                v294 = 40;
                goto LABEL_410;
              }
              if ((v227 & 1) != 0)
              {
                v228 = 0;
                v229 = 1;
              }
              else
              {
                if (*v34 == (llvm::CallBase *)0x622E323135787661
                  && v34[1] == (llvm::CallBase *)0x7473616364616F72
                  && *((_BYTE *)v34 + 16) == 109)
                {
                  if (*(_DWORD *)(**((_QWORD **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)) + 8) == 2061)
                    v455 = (llvm::Type *)(*v6 + 2016);
                  else
                    v455 = (llvm::Type *)(*v6 + 1992);
                  v457 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                  if ((_BYTE)v456)
                  v459 = llvm::Type::getPrimitiveSizeInBits(v455);
                  if ((_BYTE)v458)
                  v460 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                  LOWORD(v1630) = 257;
                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 39, v460, (uint64_t)v455, (uint64_t)&__src);
                  LOWORD(v1630) = 257;
                  VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((llvm::IRBuilderBase *)v1634, (llvm::Type *)(v457 / v459), (uint64_t ***)ShuffleVector, (uint64_t)&__src);
                  goto LABEL_682;
                }
                v228 = 0;
                v229 = 0;
              }
LABEL_554:
              if (v35 == 12)
              {
                if (*v120 != (llvm::CallBase *)0x7271732E32657373 || *((_DWORD *)v120 + 2) != 1685270132)
                  goto LABEL_560;
              }
              else if (v35 != 11
                     || (*v120 == (llvm::CallBase *)0x747271732E657373
                       ? (v369 = *(llvm::CallBase **)((char *)v120 + 3) == (llvm::CallBase *)0x73732E747271732ELL)
                       : (v369 = 0),
                         !v369))
              {
LABEL_560:
                if ((v112 & 1) == 0
                  && (*v34 == (llvm::CallBase *)0x747271732E787661
                    ? (v370 = *((unsigned __int16 *)v34 + 4) == 28718)
                    : (v370 = 0),
                      v370)
                  || (v226 & 1) == 0
                  && (*v34 == (llvm::CallBase *)0x7271732E32657373
                    ? (v371 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x702E747271732E32)
                    : (v371 = 0),
                      v371)
                  || (v112 & 1) == 0
                  && (*v34 == (llvm::CallBase *)0x747271732E657373
                    ? (v372 = *((unsigned __int16 *)v34 + 4) == 28718)
                    : (v372 = 0),
                      v372))
                {
                  v375 = (uint64_t *)*((_QWORD *)v1614 + 5);
                  v1631[0] = *(llvm::hashing::detail::hash_state **)v1620;
                  v376 = llvm::Intrinsic::getDeclaration(v375, 283, (BOOL **)v1631, 1);
                  v259 = v376;
                  if (v376)
                    v260 = *(_QWORD *)(v376 + 24);
                  else
                    v260 = 0;
                  __p = (void *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                  v417 = 257;
LABEL_650:
                  LOWORD(v1630) = v417;
                  VectorSplat = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v260, v259, (uint64_t *)&__p, 1, (uint64_t)&__src, 0);
                  goto LABEL_682;
                }
                if (v35 >= 0x12)
                {
                  if (*v34 == (llvm::CallBase *)0x6D2E323135787661
                    && v34[1] == (llvm::CallBase *)0x747271732E6B7361
                    && *((_WORD *)v34 + 8) == 28718)
                  {
                    if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                      goto LABEL_729;
                    v461 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                    v462 = *((_QWORD *)v461 + 12);
                    if (*(_BYTE *)(v462 + 16) != 16)
                      goto LABEL_781;
                    v463 = (_QWORD *)(v462 + 24);
                    if (*(_DWORD *)(v462 + 32) >= 0x41u)
                      v463 = (_QWORD *)*v463;
                    if (*v463 == 4)
                    {
LABEL_729:
                      v464 = (uint64_t *)*((_QWORD *)v1614 + 5);
                      v1631[0] = *(llvm::hashing::detail::hash_state **)v1620;
                      v465 = llvm::Intrinsic::getDeclaration(v464, 283, (BOOL **)v1631, 1);
                      v466 = v465;
                      if (v465)
                        v467 = *(_QWORD *)(v465 + 24);
                      else
                        v467 = 0;
                      __p = (void *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                      LOWORD(v1630) = 257;
                      p_p = (uint64_t *)&__p;
                      v541 = 1;
                    }
                    else
                    {
LABEL_781:
                      if (*((_BYTE *)v1615 + 18) == 115)
                        v490 = 10892;
                      else
                        v490 = 10891;
                      v1631[0] = *(llvm::hashing::detail::hash_state **)v461;
                      v1631[1] = (llvm::hashing::detail::hash_state *)v462;
                      v491 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40), v490, 0, 0);
                      v466 = v491;
                      if (v491)
                        v467 = *(_QWORD *)(v491 + 24);
                      else
                        v467 = 0;
                      LOWORD(v1630) = 257;
                      p_p = (uint64_t *)v1631;
                      v541 = 2;
                    }
                    v127 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v467, v466, p_p, v541, (uint64_t)&__src, 0);
                    goto LABEL_190;
                  }
                }
                else if (v35 < 0xD)
                {
                  v373 = 1;
                  v374 = 1;
LABEL_609:
                  switch(v35)
                  {
                    case 0xAuLL:
                      if (*v120 == (llvm::CallBase *)0x2E6464612E657373 && *((_WORD *)v120 + 4) == 29555)
                        goto LABEL_841;
                      if (*v120 == (llvm::CallBase *)0x2E6275732E657373 && *((_WORD *)v120 + 4) == 29555)
                        goto LABEL_841;
                      if (*v120 == (llvm::CallBase *)0x2E6C756D2E657373 && *((_WORD *)v120 + 4) == 29555)
                        goto LABEL_841;
                      if (*v120 == (llvm::CallBase *)0x2E7669642E657373 && *((_WORD *)v120 + 4) == 29555)
                        goto LABEL_841;
                      goto LABEL_840;
                    case 0xBuLL:
                      if ((*v120 != (llvm::CallBase *)0x6464612E32657373
                         || *(llvm::CallBase **)((char *)v120 + 3) != (llvm::CallBase *)0x64732E6464612E32)
                        && (*v120 != (llvm::CallBase *)0x6275732E32657373
                         || *(llvm::CallBase **)((char *)v120 + 3) != (llvm::CallBase *)0x64732E6275732E32)
                        && (*v120 != (llvm::CallBase *)0x6C756D2E32657373
                         || *(llvm::CallBase **)((char *)v120 + 3) != (llvm::CallBase *)0x64732E6C756D2E32)
                        && (*v120 != (llvm::CallBase *)0x7669642E32657373
                         || *(llvm::CallBase **)((char *)v120 + 3) != (llvm::CallBase *)0x64732E7669642E32))
                      {
LABEL_840:
                        v508 = 1;
                        goto LABEL_908;
                      }
LABEL_841:
                      v513 = (llvm::ConstantInt *)(*v6 + 1992);
                      v514 = (llvm::Value *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                      v515 = (llvm::Value *)llvm::ConstantInt::get(v513, 0, 0);
                      LOWORD(v1630) = 257;
                      v516 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v514, v515, (const llvm::Twine *)&__src);
                      v517 = (llvm::Value *)((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                      v518 = (llvm::Value *)llvm::ConstantInt::get(v513, 0, 0);
                      LOWORD(v1630) = 257;
                      v519 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v517, v518, (const llvm::Twine *)&__src);
                      if (llvm::StringRef::find((uint64_t *)&v1615, ".add.", 5uLL, 0) == -1)
                      {
                        if (llvm::StringRef::find((uint64_t *)&v1615, ".sub.", 5uLL, 0) == -1)
                        {
                          if (llvm::StringRef::find((uint64_t *)&v1615, ".mul.", 5uLL, 0) == -1)
                          {
                            LOWORD(v1630) = 257;
                            FDiv = llvm::IRBuilderBase::CreateFDiv((llvm::IRBuilderBase *)v1634, (BOOL **)v516, (llvm::Value *)v519, (const llvm::Twine *)&__src, 0);
                          }
                          else
                          {
                            LOWORD(v1630) = 257;
                            FDiv = llvm::IRBuilderBase::CreateFMul((llvm::IRBuilderBase *)v1634, (BOOL **)v516, (llvm::Value *)v519, (const llvm::Twine *)&__src, 0);
                          }
                        }
                        else
                        {
                          LOWORD(v1630) = 257;
                          FDiv = llvm::IRBuilderBase::CreateFSub((llvm::IRBuilderBase *)v1634, (BOOL **)v516, (llvm::Value *)v519, (const llvm::Twine *)&__src, 0);
                        }
                      }
                      else
                      {
                        LOWORD(v1630) = 257;
                        FDiv = llvm::IRBuilderBase::CreateFAdd((llvm::IRBuilderBase *)v1634, (BOOL **)v516, (llvm::Value *)v519, (const llvm::Twine *)&__src, 0);
                      }
                      v698 = (llvm::Value *)FDiv;
                      v699 = (llvm::Value *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                      v700 = (llvm::Value *)llvm::ConstantInt::get(v513, 0, 0);
                      LOWORD(v1630) = 257;
                      VectorSplat = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1634, v699, v698, v700, (const llvm::Twine *)&__src);
                      goto LABEL_682;
                    case 0xCuLL:
                      if (*v120 != (llvm::CallBase *)0x6B2E323135787661 || *((_DWORD *)v120 + 2) != 1999532655)
                        goto LABEL_865;
                      v499 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                      v500 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], 0x10u);
                      LOWORD(v1630) = 257;
                      v501 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1634, (llvm::Value *)v499, (llvm::Value *)v500, (const llvm::Twine *)&__src);
                      goto LABEL_1253;
                    case 0xDuLL:
                      if (*v120 == (llvm::CallBase *)0x6B2E323135787661
                        && *(llvm::CallBase **)((char *)v120 + 5) == (llvm::CallBase *)0x772E646E616B2E32)
                      {
                        v611 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                        v612 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(v1630) = 257;
                        v501 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, (llvm::Value *)v611, (llvm::Value *)v612, (const llvm::Twine *)&__src);
                      }
                      else
                      {
                        if (*v120 != (llvm::CallBase *)0x6B2E323135787661
                          || *(llvm::CallBase **)((char *)v120 + 5) != (llvm::CallBase *)0x772E726F786B2E32)
                        {
                          if (*v120 == (llvm::CallBase *)0x6B2E323135787661
                            && *(llvm::CallBase **)((char *)v120 + 5) == (llvm::CallBase *)0x772E746F6E6B2E32)
                          {
                            v524 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                            LOWORD(v1630) = 257;
                            ICmp = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1634, (llvm::Constant **)v524, (const llvm::Twine *)&__src);
                            ShuffleVector = (llvm::Value *)ICmp;
                            v292 = *(llvm::Type **)v1620;
                            LOWORD(v1630) = 257;
                            goto LABEL_1256;
                          }
LABEL_865:
                          v507 = 1;
LABEL_902:
                          v508 = 1;
LABEL_903:
                          if (*v34 == (llvm::CallBase *)0x632E323135787661 && *((_DWORD *)v34 + 2) == 1882091629)
                          {
                            v555 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                            v556 = (char *)llvm::CallBase::arg_end(v1620);
                            __src = &v1628;
                            v1627 = 0x400000000;
                            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v555, v556);
                            v557 = **(_QWORD **)__src;
                            v559 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v557);
                            if ((_BYTE)v558)
                            if ((*(_DWORD *)(v557 + 8) & 0xFE) == 0x12)
                              v557 = **(_QWORD **)(v557 + 16);
                            v560 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v557);
                            if (v559 == 128 && v560 == 32)
                            {
                              v562 = 10467;
                            }
                            else if (v559 == 256 && v560 == 32)
                            {
                              v562 = 10468;
                            }
                            else if (v559 == 512 && v560 == 32)
                            {
                              v562 = 10469;
                            }
                            else if (v559 == 128 && v560 == 64)
                            {
                              v562 = 10464;
                            }
                            else if (v560 == 64 && v559 == 256)
                            {
                              v562 = 10465;
                            }
                            else
                            {
                              v562 = 10466;
                            }
                            AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v1620, v561);
                            v710 = AllOnesValue;
                            if (v559 == 512)
                            {
                              v711 = (char *)__src + 8 * v1627;
                              v712 = *((_QWORD *)v711 - 1);
                              *((_QWORD *)v711 - 1) = AllOnesValue;
                              v710 = v712;
                            }
                            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, v710);
                            v713 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v562, 0, 0);
                            if (v713)
                              v714 = *(_QWORD *)(v713 + 24);
                            else
                              v714 = 0;
                            v1633 = 257;
                            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v714, v713, (uint64_t *)__src, v1627, (uint64_t)v1631, 0);
                            v697 = __src;
                            if (__src == &v1628)
                              goto LABEL_1363;
LABEL_1362:
                            free(v697);
                            goto LABEL_1363;
                          }
                          if ((v507 & 1) != 0)
                          {
LABEL_908:
                            v507 = 1;
                          }
                          else
                          {
                            if (*v34 == (llvm::CallBase *)0x6D2E323135787661
                              && v34[1] == (llvm::CallBase *)0x2E706D632E6B7361)
                            {
                              v661 = v1620;
                              v671 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                              v672 = (_QWORD *)(v671 + 24);
                              if (*(_DWORD *)(v671 + 32) >= 0x41u)
                                v672 = (_QWORD *)*v672;
                              v662 = *(_DWORD *)v672;
                              goto LABEL_1261;
                            }
                            v507 = 0;
                          }
LABEL_921:
                          if ((v229 & 1) != 0)
                          {
LABEL_922:
                            if (v35 == 16
                              && (*v120 == (llvm::CallBase *)0x61702E3365737373
                                ? (v564 = v120[1] == (llvm::CallBase *)0x3832312E622E7362)
                                : (v564 = 0),
                                  v564
                               || (*v120 == (llvm::CallBase *)0x61702E3365737373
                                 ? (v565 = v120[1] == (llvm::CallBase *)0x3832312E772E7362)
                                 : (v565 = 0),
                                   v565
                                || (*v120 == (llvm::CallBase *)0x61702E3365737373
                                  ? (v566 = v120[1] == (llvm::CallBase *)0x3832312E642E7362)
                                  : (v566 = 0),
                                    v566)))
                              || (v228 & 1) == 0
                              && (*v34 == (llvm::CallBase *)0x6261702E32787661
                                ? (v567 = *((_BYTE *)v34 + 8) == 115)
                                : (v567 = 0),
                                  v567)
                              || (v507 & 1) == 0
                              && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                ? (v568 = v34[1] == (llvm::CallBase *)0x736261702E6B7361)
                                : (v568 = 0),
                                  v568))
                            {
                              VectorSplat = upgradeAbs((llvm::IRBuilderBase *)v1634, (uint64_t)v1620);
                              goto LABEL_682;
                            }
                            v3 = v1635;
                            if (v35 == 12
                              && (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                ? (v569 = *((unsigned int *)v120 + 2) == 1651734625)
                                : (v569 = 0),
                                  v569
                               || ((v10 = 0x616D702E32657373, *v120 == (llvm::CallBase *)0x616D702E32657373)
                                 ? (v570 = *((unsigned int *)v120 + 2) == 1999532920)
                                 : (v570 = 0),
                                   v570
                                || (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                  ? (v571 = *((unsigned int *)v120 + 2) == 1685289057)
                                  : (v571 = 0),
                                    v571)))
                              || (v112 & 1) == 0
                              && (*v34 == (llvm::CallBase *)0x616D702E32787661
                                ? (v572 = *((unsigned __int16 *)v34 + 4) == 29560)
                                : (v572 = 0),
                                  v572)
                              || (v229 & 1) == 0
                              && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                ? (v573 = v34[1] == (llvm::CallBase *)0x78616D702E6B7361)
                                : (v573 = 0),
                                  v573 ? (v574 = *((_BYTE *)v34 + 16) == 115) : (v574 = 0),
                                  v574))
                            {
                              v659 = v1620;
                              v660 = 277;
                            }
                            else if (v35 == 12
                                   && (*v120 == (llvm::CallBase *)0x616D702E32657373
                                     ? (v575 = *((unsigned int *)v120 + 2) == 1647211896)
                                     : (v575 = 0),
                                       v575
                                    || (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                      ? (v576 = *((unsigned int *)v120 + 2) == 2004187233)
                                      : (v576 = 0),
                                        v576
                                     || (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                       ? (v577 = *((_DWORD *)v120 + 2) == 1685420129)
                                       : (v577 = 0),
                                         v577)))
                                   || (v112 & 1) == 0
                                   && (*v34 == (llvm::CallBase *)0x616D702E32787661
                                     ? (v578 = *((unsigned __int16 *)v34 + 4) == 30072)
                                     : (v578 = 0),
                                       v578)
                                   || (v229 & 1) == 0
                                   && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                     ? (v579 = v34[1] == (llvm::CallBase *)0x78616D702E6B7361)
                                     : (v579 = 0),
                                       v579 ? (v580 = *((_BYTE *)v34 + 16) == 117) : (v580 = 0),
                                       v580))
                            {
                              v659 = v1620;
                              v660 = 308;
                            }
                            else if (v35 == 12
                                   && (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                     ? (v581 = *((_DWORD *)v120 + 2) == 1651732073)
                                     : (v581 = 0),
                                       v581
                                    || ((v10 = 0x696D702E32657373, *v120 == (llvm::CallBase *)0x696D702E32657373)
                                      ? (v582 = *((unsigned int *)v120 + 2) == 1999532910)
                                      : (v582 = 0),
                                        v582
                                     || (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                       ? (v583 = *((_DWORD *)v120 + 2) == 1685286505)
                                       : (v583 = 0),
                                         v583)))
                                   || (v112 & 1) == 0
                                   && (*v34 == (llvm::CallBase *)0x696D702E32787661
                                     ? (v584 = *((unsigned __int16 *)v34 + 4) == 29550)
                                     : (v584 = 0),
                                       v584)
                                   || (v229 & 1) == 0
                                   && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                     ? (v585 = v34[1] == (llvm::CallBase *)0x6E696D702E6B7361)
                                     : (v585 = 0),
                                       v585 ? (v586 = *((_BYTE *)v34 + 16) == 115) : (v586 = 0),
                                       v586))
                            {
                              v659 = v1620;
                              v660 = 278;
                            }
                            else
                            {
                              if (v35 != 12
                                || (*v120 == (llvm::CallBase *)0x696D702E32657373
                                  ? (v587 = *((_DWORD *)v120 + 2) == 1647211886)
                                  : (v587 = 0),
                                    !v587
                                 && (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                   ? (v588 = *((_DWORD *)v120 + 2) == 2004184681)
                                   : (v588 = 0),
                                     !v588
                                  && (*v120 == (llvm::CallBase *)0x6D702E3134657373
                                    ? (v589 = *((unsigned int *)v120 + 2) == 1685417577)
                                    : (v589 = 0),
                                      !v589))))
                              {
                                if ((v112 & 1) != 0
                                  || (*v34 == (llvm::CallBase *)0x696D702E32787661
                                    ? (v590 = *((unsigned __int16 *)v34 + 4) == 30062)
                                    : (v590 = 0),
                                      !v590))
                                {
                                  if ((v229 & 1) != 0
                                    || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                      ? (v591 = v34[1] == (llvm::CallBase *)0x6E696D702E6B7361)
                                      : (v591 = 0),
                                        v591 ? (v592 = *((_BYTE *)v34 + 16) == 117) : (v592 = 0),
                                        !v592))
                                  {
                                    if (v35 == 19)
                                    {
                                      v595 = *(uint64_t *)((char *)v120 + 11);
                                      v596 = *v120 == (llvm::CallBase *)0x702E323135787661
                                          && v120[1] == (llvm::CallBase *)0x2E71642E756C756DLL;
                                      v593 = 0x3231352E71642E75;
                                    }
                                    else
                                    {
                                      if (v35 != 13)
                                      {
LABEL_1433:
                                        if ((v508 & 1) != 0
                                          || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                            ? (v734 = v34[1] == (llvm::CallBase *)0x6C756D702E6B7361)
                                            : (v734 = 0),
                                              v734
                                            ? (v735 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x2E71642E756C756DLL)
                                            : (v735 = 0),
                                              !v735))
                                        {
                                          if (v35 == 18)
                                          {
                                            v10 = 0x702E323135787661;
                                            if (*v120 != (llvm::CallBase *)0x702E323135787661
                                              || v120[1] != (llvm::CallBase *)0x352E71642E6C756DLL
                                              || *((_WORD *)v120 + 8) != 12849)
                                            {
                                              goto LABEL_2081;
                                            }
                                          }
                                          else if (v35 == 12)
                                          {
                                            if ((*v120 != (llvm::CallBase *)0x6D702E3134657373
                                               || *((_DWORD *)v120 + 2) != 1902406773)
                                              && (*v120 != (llvm::CallBase *)0x756D702E32787661
                                               || *((_DWORD *)v120 + 2) != 1902390892))
                                            {
LABEL_1489:
                                              if (*v120 == (llvm::CallBase *)0x737476632E657373
                                                && *((_DWORD *)v120 + 2) == 1936929385)
                                              {
LABEL_2058:
                                                v959 = (llvm::Value *)((_QWORD *)v1620
                                                                     - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                v960 = *(llvm::Type **)(*(_QWORD *)v1620 + 24);
                                                LOWORD(v1630) = 257;
                                                SIToFP = llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)v1634, v959, v960, (const llvm::Twine *)&__src);
LABEL_2059:
                                                v963 = (llvm::Value *)SIToFP;
                                                ShuffleVector = (llvm::Value *)SIToFP;
                                                v964 = (llvm::Value *)*((_QWORD *)v1620
                                                                      - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                LOWORD(v1630) = 257;
                                                goto LABEL_2060;
                                              }
LABEL_2081:
                                              if ((v508 & 1) == 0)
                                              {
                                                v972 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x647476632E6B7361;
                                                if (v972
                                                  && *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x2E64703271647476)
                                                {
                                                  goto LABEL_2347;
                                                }
                                              }
                                              if ((v374 & 1) == 0)
                                              {
                                                v10 = *(uint64_t *)((char *)v34 + 14);
                                                v11 = 0x2E64703271647574;
                                                v974 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                if (v974 && v10 == 0x2E64703271647574)
                                                  goto LABEL_2347;
                                              }
                                              if ((v508 & 1) == 0)
                                              {
                                                v10 = *(uint64_t *)((char *)v34 + 13);
                                                v976 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x647476632E6B7361;
                                                if (v976 && v10 == 0x2E73703271647476)
                                                  goto LABEL_2347;
                                              }
                                              if ((v374 & 1) == 0)
                                              {
                                                v10 = *(uint64_t *)((char *)v34 + 14);
                                                v11 = 0x2E73703271647574;
                                                v978 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                if (v978 && v10 == 0x2E73703271647574)
                                                  goto LABEL_2347;
                                              }
                                              if ((v508 & 1) == 0)
                                              {
                                                v10 = *(uint64_t *)((char *)v34 + 13);
                                                v980 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x717476632E6B7361;
                                                if (v980 && v10 == 0x2E64703271717476)
                                                  goto LABEL_2347;
                                              }
                                              if ((v374 & 1) == 0)
                                              {
                                                v982 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                if (v982
                                                  && *(llvm::CallBase **)((char *)v34 + 14) == (llvm::CallBase *)0x2E64703271717574)
                                                {
                                                  goto LABEL_2347;
                                                }
                                              }
                                              if ((uint64_t)v35 > 23)
                                              {
                                                if (v35 == 25)
                                                {
                                                  if (*v120 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v120[1] == (llvm::CallBase *)0x757476632E6B7361
                                                    && v120[2] == (llvm::CallBase *)0x35322E7370327171
                                                    && *((_BYTE *)v120 + 24) == 54)
                                                  {
                                                    goto LABEL_2347;
                                                  }
                                                  v10 = *((unsigned __int8 *)v120 + 24);
                                                  v1021 = *v120 == (llvm::CallBase *)0x6D2E323135787661
                                                       && v120[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                  v1022 = v1021 && v120[2] == (llvm::CallBase *)0x31352E7370327171;
                                                  if (v1022 && (_DWORD)v10 == 50)
                                                    goto LABEL_2347;
                                                }
                                                else if (v35 == 24)
                                                {
                                                  v986 = *v120 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v120[1] == (llvm::CallBase *)0x717476632E6B7361;
                                                  if (v986 && v120[2] == (llvm::CallBase *)0x3635322E73703271)
                                                    goto LABEL_2347;
                                                  v988 = *v120 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v120[1] == (llvm::CallBase *)0x717476632E6B7361;
                                                  if (v988 && v120[2] == (llvm::CallBase *)0x3231352E73703271)
                                                    goto LABEL_2347;
                                                  v990 = *v120 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v120[1] == (llvm::CallBase *)0x707476632E6B7361;
                                                  if (v990 && v120[2] == (llvm::CallBase *)0x3832312E64703273)
                                                    goto LABEL_2347;
                                                  v992 = *v120 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v120[1] == (llvm::CallBase *)0x707476632E6B7361;
                                                  if (v992 && v120[2] == (llvm::CallBase *)0x3635322E64703273)
                                                    goto LABEL_2347;
                                                }
                                              }
                                              else
                                              {
                                                if (v35 != 13)
                                                {
                                                  if (v35 != 18)
                                                    goto LABEL_2224;
                                                  v984 = *v120 == (llvm::CallBase *)0x2E7476632E787661
                                                      && v120[1] == (llvm::CallBase *)0x322E64702E327370;
                                                  if (!v984 || *((_WORD *)v120 + 8) != 13877)
                                                    goto LABEL_2224;
LABEL_2347:
                                                  v1059 = *(llvm::Type **)v1620;
                                                  v1060 = (llvm::Value *)*((_QWORD *)v1620
                                                                         - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                  ShuffleVector = v1060;
                                                  v1061 = *(_QWORD *)v1060;
                                                  if (*((_DWORD *)v1059 + 8) < *(_DWORD *)(*(_QWORD *)v1060 + 32))
                                                  {
                                                    v1631[0] = (llvm::hashing::detail::hash_state *)0x100000000;
                                                    LOWORD(v1630) = 257;
                                                    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1060, (uint64_t)v1060, (int *)v1631, (llvm::Type *)2, (uint64_t)&__src);
                                                  }
                                                  v1062 = *(unsigned __int8 *)(*(_QWORD *)(v1061 + 24) + 8);
                                                  v1063 = llvm::StringRef::find((uint64_t *)&v1615, "cvtu", 4uLL, 0);
                                                  if (v1062 != 2)
                                                  {
                                                    v1067 = v1063;
                                                    v1068 = v1620;
                                                    if (((llvm::CallBase::arg_end(v1620)
                                                         - ((_QWORD)v1068
                                                          - 32 * (*((_DWORD *)v1068 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                                                      goto LABEL_2357;
                                                    v1069 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[12];
                                                    if (*(_BYTE *)(v1069 + 16) != 16)
                                                      goto LABEL_2359;
                                                    v1070 = (_QWORD *)(v1069 + 24);
                                                    if (*(_DWORD *)(v1069 + 32) >= 0x41u)
                                                      v1070 = (_QWORD *)*v1070;
                                                    if (*v1070 == 4)
                                                    {
LABEL_2357:
                                                      __src = "cvt";
                                                      LOWORD(v1630) = 259;
                                                      if (v1067 == -1)
                                                        UIToFP = llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)v1634, ShuffleVector, v1059, (const llvm::Twine *)&__src);
                                                      else
                                                        UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)v1634, ShuffleVector, v1059, (const llvm::Twine *)&__src);
                                                    }
                                                    else
                                                    {
LABEL_2359:
                                                      if (v1067 == -1)
                                                        v1071 = 10890;
                                                      else
                                                        v1071 = 10895;
                                                      v1072 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56)
                                                                          + 40);
                                                      __src = v1059;
                                                      v1627 = v1061;
                                                      v1073 = llvm::Intrinsic::getDeclaration(v1072, v1071, (BOOL **)&__src, 2);
                                                      if (v1073)
                                                        v1074 = *(_QWORD *)(v1073 + 24);
                                                      else
                                                        v1074 = 0;
                                                      v1631[0] = ShuffleVector;
                                                      v1631[1] = ((llvm::hashing::detail::hash_state **)v1620
                                                                - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[12];
                                                      LOWORD(v1630) = 257;
                                                      UIToFP = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1074, v1073, (uint64_t *)v1631, 2, (uint64_t)&__src, 0);
                                                    }
                                                    goto LABEL_2367;
                                                  }
                                                  v1064 = ShuffleVector;
                                                  v1065 = "cvtps2pd";
LABEL_2351:
                                                  __src = v1065;
                                                  LOWORD(v1630) = 259;
                                                  UIToFP = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v1634, v1064, v1059, (const llvm::Twine *)&__src);
LABEL_2367:
                                                  ShuffleVector = (llvm::Value *)UIToFP;
                                                  v1075 = v1620;
                                                  if (((unint64_t)(llvm::CallBase::arg_end(v1620)
                                                                                       - ((_QWORD)v1075
                                                                                        - 32
                                                                                        * (*((_DWORD *)v1075 + 5) & 0x7FFFFFF))) >> 5) < 3)
                                                    goto LABEL_1363;
                                                  v129 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                  v130 = (unsigned __int8 *)*((_QWORD *)v129 + 8);
                                                  v128 = ShuffleVector;
LABEL_191:
                                                  VectorSplat = EmitX86Select((llvm::IRBuilderBase *)v1634, v130, v128, *((llvm::Value **)v129 + 4));
LABEL_682:
                                                  AlignedLoad = VectorSplat;
                                                  ShuffleVector = (llvm::Value *)VectorSplat;
                                                  goto LABEL_683;
                                                }
                                                if (*v120 == (llvm::CallBase *)0x7476632E32657373
                                                  && *(llvm::CallBase **)((char *)v120 + 5) == (llvm::CallBase *)0x6470327370747663)
                                                {
                                                  goto LABEL_2347;
                                                }
                                              }
LABEL_2224:
                                              if ((v374 & 1) != 0
                                                || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                  ? (v1024 = v34[1] == (llvm::CallBase *)0x747663762E6B7361)
                                                  : (v1024 = 0),
                                                    v1024
                                                  ? (v1025 = *(llvm::CallBase **)((char *)v34 + 14) == (llvm::CallBase *)0x2E73703268707476)
                                                  : (v1025 = 0),
                                                    !v1025))
                                              {
                                                if ((v112 & 1) != 0
                                                  || (*v34 == (llvm::CallBase *)0x7032687074766376
                                                    ? (v1026 = *((unsigned __int16 *)v34 + 4) == 11891)
                                                    : (v1026 = 0),
                                                      !v1026))
                                                {
                                                  if ((v507 & 1) == 0
                                                    && *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x64616F6C2E6B7361)
                                                  {
                                                    v1172 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                    InsertElement = UpgradeMaskedLoad((uint64_t *)v1634, *(_QWORD *)v1172, *((llvm::PointerType ****)v1172 + 4), *((unsigned __int8 **)v1172 + 8), *((unsigned __int8 *)v34 + 16) != 117);
                                                    goto LABEL_1585;
                                                  }
                                                  if (v35 < 0x18)
                                                    goto LABEL_2261;
                                                  if (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v34[1] == (llvm::CallBase *)0x617078652E6B7361
                                                    && v34[2] == (llvm::CallBase *)0x2E64616F6C2E646ELL)
                                                  {
                                                    v1182 = *(llvm::Type **)v1620;
                                                    v1183 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                    v1184 = llvm::PointerType::get(*(llvm::PointerType ***)(*(_QWORD *)v1620 + 24), 0);
                                                    LOWORD(v1630) = 257;
                                                    v1185 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1183, v1184, (uint64_t)&__src);
                                                    v1186 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4* (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8], *((_DWORD *)v1182 + 8));
                                                    v1187 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                    __src = v1182;
                                                    v1188 = llvm::Intrinsic::getDeclaration(v1187, 186, (BOOL **)&__src, 1);
                                                    v1144 = v1188;
                                                    if (v1188)
                                                      v1145 = *(_QWORD *)(v1188 + 24);
                                                    else
                                                      v1145 = 0;
                                                    v1631[0] = (llvm::hashing::detail::hash_state *)v1185;
                                                    v1631[1] = (llvm::hashing::detail::hash_state *)v1186;
                                                    *(_QWORD *)&v1632 = ((_QWORD *)v1620
                                                                       - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                  }
                                                  else
                                                  {
                                                    if (v35 < 0x1B
                                                      || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                        ? (v1030 = v34[1] == (llvm::CallBase *)0x706D6F632E6B7361)
                                                        : (v1030 = 0),
                                                          v1030
                                                        ? (v1031 = v34[2] == (llvm::CallBase *)0x6F74732E73736572)
                                                        : (v1031 = 0),
                                                          v1031
                                                        ? (v1032 = *(llvm::CallBase **)((char *)v34 + 19) == (llvm::CallBase *)0x2E65726F74732E73)
                                                        : (v1032 = 0),
                                                          !v1032))
                                                    {
LABEL_2261:
                                                      if ((v508 & 1) == 0
                                                        && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                          ? (v1033 = v34[1] == (llvm::CallBase *)0x706D6F632E6B7361)
                                                          : (v1033 = 0),
                                                            v1033
                                                          ? (v1034 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x2E73736572706D6FLL)
                                                          : (v1034 = 0),
                                                            v1034)
                                                        || v35 >= 0x13
                                                        && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                          ? (v1035 = v34[1] == (llvm::CallBase *)0x617078652E6B7361)
                                                          : (v1035 = 0),
                                                            v1035
                                                          ? (v1036 = *(llvm::CallBase **)((char *)v34 + 11) == (llvm::CallBase *)0x2E646E617078652ELL)
                                                          : (v1036 = 0),
                                                            v1036))
                                                      {
                                                        v1139 = *(llvm::Type **)v1620;
                                                        v1140 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620- 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8], *(_DWORD *)(*(_QWORD *)v1620 + 32));
                                                        if (*((_BYTE *)v1615 + 12) == 99)
                                                          v1141 = 10472;
                                                        else
                                                          v1141 = 10526;
                                                        v1142 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                        __src = v1139;
                                                        v1143 = llvm::Intrinsic::getDeclaration(v1142, v1141, (BOOL **)&__src, 1);
                                                        v1144 = v1143;
                                                        if (v1143)
                                                          v1145 = *(_QWORD *)(v1143 + 24);
                                                        else
                                                          v1145 = 0;
                                                        v1212 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                        v1631[0] = *v1212;
                                                        v1631[1] = v1212[4];
                                                        *(_QWORD *)&v1632 = v1140;
                                                        LOWORD(v1630) = 257;
                                                        goto LABEL_2644;
                                                      }
                                                      if ((v228 & 1) != 0
                                                        || (*v34 == (llvm::CallBase *)0x6F6370762E706F78
                                                          ? (v1037 = *((_BYTE *)v34 + 8) == 109)
                                                          : (v1037 = 0),
                                                            !v1037))
                                                      {
                                                        if ((v112 & 1) == 0
                                                          && *v34 == (llvm::CallBase *)0x6D6370762E706F78
                                                          && *((_WORD *)v34 + 4) == 30319)
                                                        {
                                                          v1216 = (llvm::Constant **)((_QWORD *)v1620
                                                                                    - 4
                                                                                    * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                                                          LOWORD(v1630) = 257;
                                                          Not = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1634, v1216, (const llvm::Twine *)&__src);
                                                          v1218 = (llvm::Value *)*((_QWORD *)v1620
                                                                                 - 4
                                                                                 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                          LOWORD(v1630) = 257;
                                                          v1219 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, v1218, (llvm::Value *)v1216, (const llvm::Twine *)&__src);
                                                          v1220 = (llvm::Value *)((_QWORD *)v1620
                                                                                - 4
                                                                                * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                          LOWORD(v1630) = 257;
                                                          v1221 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, v1220, (llvm::Value *)Not, (const llvm::Twine *)&__src);
                                                          LOWORD(v1630) = 257;
                                                          InsertElement = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1219, (llvm::Value *)v1221, (const llvm::Twine *)&__src);
                                                          goto LABEL_1585;
                                                        }
                                                        if ((v228 & 1) == 0
                                                          && (*v34 == (llvm::CallBase *)0x6F7270762E706F78
                                                            ? (v1039 = *((_BYTE *)v34 + 8) == 116)
                                                            : (v1039 = 0),
                                                              v1039)
                                                          || (v226 & 1) == 0
                                                          && (*v34 == (llvm::CallBase *)0x702E323135787661
                                                            ? (v1040 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x6C6F72702E323135)
                                                            : (v1040 = 0),
                                                              v1040)
                                                          || (v507 & 1) == 0
                                                          && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                            ? (v1041 = v34[1] == (llvm::CallBase *)0x6C6F72702E6B7361)
                                                            : (v1041 = 0),
                                                              v1041))
                                                        {
                                                          v1202 = (uint64_t *)v1620;
                                                          v1203 = 0;
                                                        }
                                                        else
                                                        {
                                                          if ((v226 & 1) != 0
                                                            || (*v34 == (llvm::CallBase *)0x702E323135787661
                                                              ? (v1042 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x726F72702E323135)
                                                              : (v1042 = 0),
                                                                !v1042))
                                                          {
                                                            if ((v507 & 1) != 0
                                                              || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                ? (v1043 = v34[1] == (llvm::CallBase *)0x726F72702E6B7361)
                                                                : (v1043 = 0),
                                                                  !v1043))
                                                            {
                                                              if (!v373
                                                                && (*v34 == (llvm::CallBase *)0x762E323135787661
                                                                  ? (v1044 = *(llvm::CallBase **)((char *)v34 + 6) == (llvm::CallBase *)0x2E646C687370762ELL)
                                                                  : (v1044 = 0),
                                                                    v1044)
                                                                || v35 >= 0x12
                                                                && ((v34 = v1615,
                                                                     *v1615 == (llvm::CallBase *)0x6D2E323135787661)
                                                                  ? (v1045 = v1615[1] == (llvm::CallBase *)0x687370762E6B7361)
                                                                  : (v1045 = 0),
                                                                    v1045
                                                                  ? (v1046 = *((unsigned __int16 *)v1615 + 8) == 25708)
                                                                  : (v1046 = 0),
                                                                    v1046
                                                                 || v35 >= 0x13
                                                                 && (*v1615 == (llvm::CallBase *)0x6D2E323135787661
                                                                   ? (v1047 = v1615[1] == (llvm::CallBase *)0x7370762E7A6B7361)
                                                                   : (v1047 = 0),
                                                                     v1047
                                                                   ? (v1048 = *(llvm::CallBase **)((char *)v1615 + 11) == (llvm::CallBase *)0x646C687370762E7ALL)
                                                                   : (v1048 = 0),
                                                                     v1048)))
                                                              {
                                                                v1246 = *((unsigned __int8 *)v34 + 11) == 122;
                                                                v1247 = v1620;
                                                                v1248 = 0;
                                                              }
                                                              else
                                                              {
                                                                if (v373
                                                                  || ((v1049 = v1615,
                                                                       *v1615 == (llvm::CallBase *)0x762E323135787661)
                                                                    ? (v1050 = *(llvm::CallBase **)((char *)v1615 + 6) == (llvm::CallBase *)0x2E6472687370762ELL)
                                                                    : (v1050 = 0),
                                                                      !v1050))
                                                                {
                                                                  if (v35 < 0x12)
                                                                  {
                                                                    if (v35 == 16)
                                                                    {
                                                                      v1052 = *v120;
                                                                      v1051 = v120[1];
                                                                      if (v1052 == (llvm::CallBase *)0x72632E3234657373
                                                                        && v1051 == (llvm::CallBase *)0x382E34362E323363)
                                                                      {
                                                                        v1054 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), 11409, 0, 0);
                                                                        v1055 = *((_QWORD *)v1620
                                                                                - 4
                                                                                * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                        v1056 = *v6 + 1992;
                                                                        LOWORD(v1630) = 257;
                                                                        v1057 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 38, v1055, v1056, (uint64_t)&__src);
                                                                        if (v1054)
                                                                          v1058 = *(_QWORD *)(v1054 + 24);
                                                                        else
                                                                          v1058 = 0;
                                                                        v1631[0] = (llvm::hashing::detail::hash_state *)v1057;
                                                                        v1631[1] = ((llvm::hashing::detail::hash_state **)v1620
                                                                                  - 4
                                                                                  * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                                        LOWORD(v1630) = 257;
                                                                        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1058, v1054, (uint64_t *)v1631, 2, (uint64_t)&__src, 0);
                                                                        v1374 = *(llvm::Type **)v1620;
                                                                        LOWORD(v1630) = 257;
                                                                        InsertElement = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 39, (uint64_t)ShuffleVector, (uint64_t)v1374, (uint64_t)&__src);
                                                                        goto LABEL_1585;
                                                                      }
                                                                    }
LABEL_2570:
                                                                    if ((v507 & 1) != 0
                                                                      || (*v1615 == (llvm::CallBase *)0x6F7262762E787661
                                                                        ? (v1273 = v1615[1] == (llvm::CallBase *)0x732E747361636461)
                                                                        : (v1273 = 0),
                                                                          !v1273))
                                                                    {
                                                                      if (v35 < 0x13)
                                                                      {
                                                                        if (v35 < 0xC)
                                                                        {
LABEL_2660:
                                                                          if ((v226 & 1) != 0
                                                                            || (*v1615 == (llvm::CallBase *)0x6F6D702E32787661
                                                                              ? (v1298 = *(llvm::CallBase **)((char *)v1615 + 3) == (llvm::CallBase *)0x7873766F6D702E32)
                                                                              : (v1298 = 0),
                                                                                !v1298
                                                                             && (*v1615 == (llvm::CallBase *)0x6F6D702E32787661
                                                                               ? (v1299 = *(llvm::CallBase **)((char *)v1615 + 3) == (llvm::CallBase *)0x787A766F6D702E32)
                                                                               : (v1299 = 0),
                                                                                 !v1299)))
                                                                          {
                                                                            if (v35 < 0x12
                                                                              || (*v1615 == (llvm::CallBase *)0x6D2E323135787661
                                                                                ? (v1300 = v1615[1] == (llvm::CallBase *)0x766F6D702E6B7361)
                                                                                : (v1300 = 0),
                                                                                  v1300
                                                                                ? (v1301 = *((unsigned __int16 *)v1615
                                                                                           + 8) == 30835)
                                                                                : (v1301 = 0),
                                                                                  !v1301
                                                                               && (*v1615 == (llvm::CallBase *)0x6D2E323135787661
                                                                                 ? (v1302 = v1615[1] == (llvm::CallBase *)0x766F6D702E6B7361)
                                                                                 : (v1302 = 0),
                                                                                   v1302
                                                                                 ? (v1303 = *((unsigned __int16 *)v1615
                                                                                            + 8) == 30842)
                                                                                 : (v1303 = 0),
                                                                                   !v1303)))
                                                                            {
                                                                              v34 = v1615;
                                                                              v105 = v1616;
                                                                              if (v1616 != 23)
                                                                              {
                                                                                if (v1616 < 0x12)
                                                                                {
                                                                                  if (v1616 < 0xF)
                                                                                  {
                                                                                    v489 = 1;
                                                                                    v488 = 1;
                                                                                    v111 = 1;
                                                                                    v110 = 1;
                                                                                    v622 = 1;
                                                                                    v634 = 1;
                                                                                    v625 = 1;
                                                                                    v635 = 1;
                                                                                    v636 = 1;
                                                                                    if (v1616 < 0xB)
                                                                                    {
LABEL_1562:
                                                                                      switch(v105)
                                                                                      {
                                                                                        case 0xCuLL:
                                                                                          v806 = *v34 == (llvm::CallBase *)0x6C73702E32657373
                                                                                              && *((_DWORD *)v34 + 2) == 1902390892;
                                                                                          if (v806
                                                                                            || (*v34 == (llvm::CallBase *)0x6C73702E32787661
                                                                                              ? (v807 = *((unsigned int *)v34 + 2) == 1902390892)
                                                                                              : (v807 = 0),
                                                                                                v807))
                                                                                          {
                                                                                            v1001 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            v1002 = v1001[4];
                                                                                            v1003 = (_QWORD *)(v1002 + 24);
                                                                                            if (*(_DWORD *)(v1002 + 32) >= 0x41u)
                                                                                              v1003 = (_QWORD *)*v1003;
                                                                                            v845 = *v1001;
                                                                                            v844 = *(_DWORD *)v1003 >> 3;
                                                                                            goto LABEL_2177;
                                                                                          }
                                                                                          if (*v34 != (llvm::CallBase *)0x7273702E32657373
                                                                                            || *((_DWORD *)v34 + 2) != 1902390892)
                                                                                          {
                                                                                            v10 = 0x7273702E32787661;
                                                                                            if (*v34 != (llvm::CallBase *)0x7273702E32787661
                                                                                              || *((_DWORD *)v34 + 2) != 1902390892)
                                                                                            {
                                                                                              goto LABEL_1652;
                                                                                            }
                                                                                          }
                                                                                          v810 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                          v811 = v810[4];
                                                                                          v812 = (_QWORD *)(v811 + 24);
                                                                                          if (*(_DWORD *)(v811 + 32) >= 0x41u)
                                                                                            v812 = (_QWORD *)*v812;
                                                                                          v813 = *v810;
                                                                                          v814 = *(_DWORD *)v812 >> 3;
                                                                                          goto LABEL_1637;
                                                                                        case 0xDuLL:
                                                                                          if (*v34 == (llvm::CallBase *)0x62702E3134657373
                                                                                            && *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x77646E656C62702ELL)
                                                                                          {
                                                                                            goto LABEL_2183;
                                                                                          }
                                                                                          goto LABEL_1652;
                                                                                        case 0xFuLL:
                                                                                          if (*v34 == (llvm::CallBase *)0x6C73702E32657373
                                                                                            && *(llvm::CallBase **)((char *)v34 + 7) == (llvm::CallBase *)0x73622E71642E6C6CLL)
                                                                                          {
                                                                                            goto LABEL_1661;
                                                                                          }
                                                                                          if (*v34 == (llvm::CallBase *)0x6C73702E32787661
                                                                                            && *(llvm::CallBase **)((char *)v34 + 7) == (llvm::CallBase *)0x73622E71642E6C6CLL)
                                                                                          {
                                                                                            goto LABEL_1661;
                                                                                          }
                                                                                          if (*v34 != (llvm::CallBase *)0x7273702E32657373
                                                                                            || *(llvm::CallBase **)((char *)v34 + 7) != (llvm::CallBase *)0x73622E71642E6C72)
                                                                                          {
                                                                                            v10 = 0x7273702E32787661;
                                                                                            if (*v34 != (llvm::CallBase *)0x7273702E32787661
                                                                                              || *(llvm::CallBase **)((char *)v34 + 7) != (llvm::CallBase *)0x73622E71642E6C72)
                                                                                            {
                                                                                              goto LABEL_1652;
                                                                                            }
                                                                                          }
                                                                                          goto LABEL_1634;
                                                                                        case 0x12uLL:
                                                                                          if (*v34 == (llvm::CallBase *)0x702E323135787661
                                                                                            && v34[1] == (llvm::CallBase *)0x352E71642E6C6C73
                                                                                            && *((_WORD *)v34 + 8) == 12849)
                                                                                          {
LABEL_1661:
                                                                                            v841 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            v842 = v841[4];
                                                                                            v843 = (_QWORD *)(v842 + 24);
                                                                                            if (*(_DWORD *)(v842 + 32) >= 0x41u)
                                                                                              v843 = (_QWORD *)*v843;
                                                                                            v844 = *(_DWORD *)v843;
                                                                                            v845 = *v841;
LABEL_2177:
                                                                                            InsertElement = UpgradeX86PSLLDQIntrinsics((uint64_t)v1634, v845, v844);
                                                                                            goto LABEL_1585;
                                                                                          }
                                                                                          v10 = (uint64_t)*v34;
                                                                                          if (*v34 == (llvm::CallBase *)0x702E323135787661
                                                                                            && v34[1] == (llvm::CallBase *)0x352E71642E6C7273
                                                                                            && *((_WORD *)v34 + 8) == 12849)
                                                                                          {
LABEL_1634:
                                                                                            v833 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            v834 = v833[4];
                                                                                            v835 = (_QWORD *)(v834 + 24);
                                                                                            if (*(_DWORD *)(v834 + 32) >= 0x41u)
                                                                                              v835 = (_QWORD *)*v835;
                                                                                            v814 = *(_DWORD *)v835;
                                                                                            v813 = *v833;
LABEL_1637:
                                                                                            InsertElement = UpgradeX86PSRLDQIntrinsics((uint64_t)v1634, v813, v814);
                                                                                            goto LABEL_1585;
                                                                                          }
LABEL_1652:
                                                                                          if (*v34 == (llvm::CallBase *)0x6C622E3134657373
                                                                                            && *((_DWORD *)v34 + 2) == 1885630053)
                                                                                          {
                                                                                            goto LABEL_2183;
                                                                                          }
                                                                                          if ((v634 & 1) == 0)
                                                                                            goto LABEL_1171;
                                                                                          goto LABEL_1660;
                                                                                        default:
                                                                                          if ((v634 & 1) != 0)
                                                                                          {
                                                                                            v634 = 1;
LABEL_1660:
                                                                                            v638 = 1;
                                                                                            goto LABEL_1176;
                                                                                          }
                                                                                          if (*v34 != (llvm::CallBase *)0x6C622E3134657373
                                                                                            || *((_DWORD *)v34 + 2) != 1885630053)
                                                                                          {
                                                                                            v634 = 0;
                                                                                            goto LABEL_1171;
                                                                                          }
                                                                                          break;
                                                                                      }
                                                                                      goto LABEL_2183;
                                                                                    }
                                                                                    goto LABEL_1127;
                                                                                  }
                                                                                  v111 = 1;
                                                                                  v110 = 1;
                                                                                  goto LABEL_771;
                                                                                }
                                                                                if (*v1615 != (llvm::CallBase *)0x6F7262762E787661
                                                                                  || v1615[1] != (llvm::CallBase *)0x3166747361636461
                                                                                  || *((_WORD *)v1615 + 8) != 14386)
                                                                                {
                                                                                  if (v1616 == 19)
                                                                                  {
                                                                                    if (*v1615 == (llvm::CallBase *)0x7262762E32787661
                                                                                      && v1615[1] == (llvm::CallBase *)0x697473616364616FLL
                                                                                      && *(llvm::CallBase **)((char *)v1615 + 11) == (llvm::CallBase *)0x3832316974736163)
                                                                                    {
                                                                                      goto LABEL_2780;
                                                                                    }
                                                                                    v105 = 19;
                                                                                  }
LABEL_133:
                                                                                  v107 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                      && v34[1] == (llvm::CallBase *)0x667568732E6B7361
                                                                                      && *((_WORD *)v34 + 8) == 26926;
                                                                                  if (v107
                                                                                    || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                      ? (v108 = v34[1] == (llvm::CallBase *)0x667568732E6B7361)
                                                                                      : (v108 = 0),
                                                                                        v108
                                                                                      ? (v109 = *((unsigned __int16 *)v34
                                                                                                + 8) == 26158)
                                                                                      : (v109 = 0),
                                                                                        v109))
                                                                                  {
                                                                                    v436 = ((_QWORD *)v1620
                                                                                          - 4
                                                                                          * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                                                                                    v437 = (_QWORD *)(v436 + 24);
                                                                                    if (*(_DWORD *)(v436 + 32) >= 0x41u)
                                                                                      v437 = (_QWORD *)*v437;
                                                                                    v438 = *(_DWORD *)v437;
                                                                                    v439 = *(llvm::Type **)v1620;
                                                                                    v441 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                    if ((_BYTE)v440)
                                                                                    v442 = v441 >> 7;
                                                                                    if ((*((_DWORD *)v439 + 2) & 0xFE) == 0x12)
                                                                                      v439 = (llvm::Type *)**((_QWORD **)v439 + 2);
                                                                                    v443 = llvm::Type::getPrimitiveSizeInBits(v439);
                                                                                    __src = &v1628;
                                                                                    v1627 = 0x800000000;
                                                                                    llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, 0);
                                                                                    if ((_DWORD)v442)
                                                                                    {
                                                                                      v444 = 0;
                                                                                      v445 = v442 >> 1;
                                                                                      do
                                                                                      {
                                                                                        if (v443 <= 0x80)
                                                                                        {
                                                                                          v446 = 0;
                                                                                          if (v444 >= v445)
                                                                                            v447 = v441 >> 7;
                                                                                          else
                                                                                            v447 = 0;
                                                                                          v448 = (((v438 >> (v444 * v445)) & (v442 - 1))
                                                                                                + v447)
                                                                                               * (0x80
                                                                                                / v443);
                                                                                          v449 = 0x80 / v443;
                                                                                          do
                                                                                          {
                                                                                            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__src, v446 + v448);
                                                                                            ++v446;
                                                                                            --v449;
                                                                                          }
                                                                                          while (v449);
                                                                                        }
                                                                                        ++v444;
                                                                                      }
                                                                                      while (v444 != (_DWORD)v442);
                                                                                    }
                                                                                    v450 = (char *)v1620
                                                                                         - 32
                                                                                         * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                    v451 = *(_QWORD **)v450;
                                                                                    v452 = *((_QWORD *)v450 + 4);
                                                                                    v1633 = 257;
                                                                                    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v451, v452, (int *)__src, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                    v453 = (char *)v1620
                                                                                         - 32
                                                                                         * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                    ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1634, *((unsigned __int8 **)v453 + 16), ShuffleVector, *((llvm::Value **)v453 + 12));
                                                                                    if (__src != &v1628)
                                                                                      free(__src);
                                                                                    v7 = v1635;
                                                                                    goto LABEL_1363;
                                                                                  }
                                                                                  if (v105 >= 0x16)
                                                                                  {
                                                                                    v483 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                        && v34[1] == (llvm::CallBase *)0x616F72622E6B7361
                                                                                        && *(llvm::CallBase **)((char *)v34 + 14) == (llvm::CallBase *)0x667473616364616FLL;
                                                                                    if (v483
                                                                                      || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                        ? (v484 = v34[1] == (llvm::CallBase *)0x616F72622E6B7361)
                                                                                        : (v484 = 0),
                                                                                          v484
                                                                                        ? (v485 = *(llvm::CallBase **)((char *)v34 + 14) == (llvm::CallBase *)0x697473616364616FLL)
                                                                                        : (v485 = 0),
                                                                                          v485))
                                                                                    {
                                                                                      v532 = *(_DWORD *)(**((_QWORD **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)) + 32);
                                                                                      v533 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                      __src = &v1628;
                                                                                      v1627 = 0x800000000;
                                                                                      llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v533);
                                                                                      v534 = (int *)__src;
                                                                                      if ((_DWORD)v533)
                                                                                      {
                                                                                        for (i = 0; i != v533; ++i)
                                                                                          v534[i] = i % v532;
                                                                                      }
                                                                                      v536 = (_QWORD *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                      v1633 = 257;
                                                                                      v537 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v536, (uint64_t)v536, v534, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                      ShuffleVector = v537;
                                                                                      v538 = (char *)v1620
                                                                                           - 32
                                                                                           * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                      v539 = (unsigned __int8 *)*((_QWORD *)v538 + 8);
                                                                                      goto LABEL_1327;
                                                                                    }
                                                                                    v111 = 0;
                                                                                    v110 = 0;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v110 = 0;
                                                                                    v111 = 1;
                                                                                  }
LABEL_771:
                                                                                  if ((*v34 != (llvm::CallBase *)0x7262702E32787661
                                                                                     || *(llvm::CallBase **)((char *)v34 + 7) != (llvm::CallBase *)0x7473616364616F72)
                                                                                    && (*v34 != (llvm::CallBase *)0x7262762E32787661
                                                                                     || *(llvm::CallBase **)((char *)v34 + 7) != (llvm::CallBase *)0x7473616364616F72))
                                                                                  {
                                                                                    if (v105 < 0x11)
                                                                                    {
                                                                                      v3 = v1635;
                                                                                      v488 = 0;
                                                                                      v489 = 1;
LABEL_1126:
                                                                                      v622 = 1;
LABEL_1127:
                                                                                      v623 = *v34 == (llvm::CallBase *)0x6461702E32657373
                                                                                          && *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E73646461702E32;
                                                                                      if (v623
                                                                                        || (*v34 == (llvm::CallBase *)0x6461702E32787661
                                                                                          ? (v624 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E73646461702E32)
                                                                                          : (v624 = 0),
                                                                                            v624
                                                                                         || (v625 = v105 < 0xD,
                                                                                             v105 >= 0xD)
                                                                                         && (*v34 == (llvm::CallBase *)0x702E323135787661
                                                                                           ? (v626 = *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x2E73646461702E32)
                                                                                           : (v626 = 0),
                                                                                             v626))
                                                                                        || (v110 & 1) == 0
                                                                                        && (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                          ? (v627 = v34[1] == (llvm::CallBase *)0x646461702E6B7361)
                                                                                          : (v627 = 0),
                                                                                            v627
                                                                                          ? (v628 = *((unsigned __int16 *)v34 + 8) == 11891)
                                                                                          : (v628 = 0),
                                                                                            v628))
                                                                                      {
                                                                                        v659 = v1620;
                                                                                        v660 = 265;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v629 = *v34 == (llvm::CallBase *)0x7573702E32657373
                                                                                            && *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E73627573702E32;
                                                                                        if (v629
                                                                                          || ((v10 = *(uint64_t *)((char *)v34 + 3),
                                                                                               *v34 == (llvm::CallBase *)0x7573702E32787661)
                                                                                            ? (v630 = v10 == 0x2E73627573702E32)
                                                                                            : (v630 = 0),
                                                                                              v630
                                                                                           || v105 >= 0xD
                                                                                           && ((v10 = *(uint64_t *)((char *)v34 + 5),
                                                                                                *v34 == (llvm::CallBase *)0x702E323135787661)
                                                                                             ? (v631 = v10 == 0x2E73627573702E32)
                                                                                             : (v631 = 0),
                                                                                               v631))
                                                                                          || (v110 & 1) == 0
                                                                                          && ((v10 = *((unsigned __int16 *)v34 + 8),
                                                                                               *v34 == (llvm::CallBase *)0x6D2E323135787661)
                                                                                            ? (v632 = v34[1] == (llvm::CallBase *)0x627573702E6B7361)
                                                                                            : (v632 = 0),
                                                                                              v632
                                                                                            ? (v633 = (_DWORD)v10 == 11891)
                                                                                            : (v633 = 0),
                                                                                              v633))
                                                                                        {
                                                                                          v659 = v1620;
                                                                                          v660 = 286;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (v105 < 0xC)
                                                                                          {
                                                                                            v634 = 1;
                                                                                            v105 = 11;
                                                                                            v635 = 1;
                                                                                            v636 = 1;
LABEL_1171:
                                                                                            if (*v34 != (llvm::CallBase *)0x6E656C622E787661
                                                                                              || *(llvm::CallBase **)((char *)v34 + 3) != (llvm::CallBase *)0x702E646E656C622ELL)
                                                                                            {
                                                                                              v638 = 0;
LABEL_1176:
                                                                                              if (v105 != 12
                                                                                                || ((v10 = 0x6C62702E32787661, *v34 == (llvm::CallBase *)0x6C62702E32787661) ? (v639 = *((_DWORD *)v34 + 2) == 2003070565) : (v639 = 0),
                                                                                                    !v639))
                                                                                              {
                                                                                                if (v625 || ((v10 = 0x6C62702E32787661, *v34 == (llvm::CallBase *)0x6C62702E32787661) ? (v640 = *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x2E64646E656C6270) : (v640 = 0), !v640))
                                                                                                {
                                                                                                  if (v105 >= 0x10 && ((v10 = 0x736E69762E787661, *v34 == (llvm::CallBase *)0x736E69762E787661) ? (v641 = v34[1] == (llvm::CallBase *)0x2E38323166747265) : (v641 = 0), v641 || v105 == 16 && ((v10 = 0x6E69762E32787661, *v34 == (llvm::CallBase *)0x6E69762E32787661) ? (v642 = v34[1] == (llvm::CallBase *)0x3832316974726573) : (v642 = 0), v642)) || (v110 & 1) == 0 && ((v10 = *((unsigned __int16 *)v34 + 8), *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v643 = v34[1] == (llvm::CallBase *)0x65736E692E6B7361) : (v643 = 0), v643 ? (v644 = (_DWORD)v10 == 29810) : (v644 = 0), v644))
                                                                                                  {
                                                                                                    v740 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                    v741 = (llvm::PoisonValue **)*((_QWORD *)v740 + 4);
                                                                                                    v742 = *((_QWORD *)v740 + 8);
                                                                                                    v743 = (_QWORD *)(v742 + 24);
                                                                                                    if (*(_DWORD *)(v742 + 32) >= 0x41u)
                                                                                                      v743 = (_QWORD *)*v743;
                                                                                                    v744 = *(_QWORD **)v740;
                                                                                                    v745 = *(_DWORD *)v743;
                                                                                                    v746 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                    v747 = *((unsigned int *)*v741 + 8);
                                                                                                    __src = &v1628;
                                                                                                    v1627 = 0x800000000;
                                                                                                    llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v746);
                                                                                                    v748 = (int *)__src;
                                                                                                    if ((_DWORD)v747)
                                                                                                    {
                                                                                                      for (j = 0;
                                                                                                            j != v747;
                                                                                                            ++j)
                                                                                                      {
                                                                                                        v748[j] = j;
                                                                                                      }
                                                                                                    }
                                                                                                    if ((_DWORD)v747 != (_DWORD)v746)
                                                                                                    {
                                                                                                      v750 = v747;
                                                                                                      do
                                                                                                        v748[v750++] = v747;
                                                                                                      while ((_DWORD)v746 != v750);
                                                                                                    }
                                                                                                    v1633 = 257;
                                                                                                    v751 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v741, v748, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                    ShuffleVector = (llvm::Value *)v751;
                                                                                                    v752 = (int *)__src;
                                                                                                    if ((_DWORD)v746)
                                                                                                    {
                                                                                                      for (k = 0;
                                                                                                            k != v746;
                                                                                                            ++k)
                                                                                                      {
                                                                                                        v752[k] = k;
                                                                                                      }
                                                                                                    }
                                                                                                    if ((_DWORD)v747)
                                                                                                    {
                                                                                                      v754 = 0;
                                                                                                      v755 = v745 % (v746 / v747) * v747;
                                                                                                      do
                                                                                                      {
                                                                                                        v752[(v755 + v754++)] = v746;
                                                                                                        LODWORD(v746) = v746 + 1;
                                                                                                        --v747;
                                                                                                      }
                                                                                                      while (v747);
                                                                                                    }
                                                                                                    v1633 = 257;
                                                                                                    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v744, (uint64_t)v751, v752, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                    if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
                                                                                                    {
                                                                                                      v756 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                      v757 = (unsigned __int8 *)*((_QWORD *)v756 + 16);
                                                                                                      v758 = ShuffleVector;
                                                                                                      v759 = (llvm::Value *)*((_QWORD *)v756 + 12);
LABEL_1470:
                                                                                                      v760 = EmitX86Select((llvm::IRBuilderBase *)v1634, v757, v758, v759);
LABEL_2194:
                                                                                                      ShuffleVector = (llvm::Value *)v760;
                                                                                                    }
LABEL_2195:
                                                                                                    v799 = __src;
                                                                                                    if (__src == &v1628)
                                                                                                      goto LABEL_2197;
LABEL_2196:
                                                                                                    free(v799);
                                                                                                    goto LABEL_2197;
                                                                                                  }
                                                                                                  if ((v489 & 1) != 0 || ((v10 = *((unsigned __int8 *)v34 + 16), *v34 == (llvm::CallBase *)0x747865762E787661) ? (v645 = v34[1] == (llvm::CallBase *)0x3832316674636172) : (v645 = 0), v645 ? (v646 = (_DWORD)v10 == 46) : (v646 = 0), !v646))
                                                                                                  {
                                                                                                    if (v105 != 17 || ((v10 = *((unsigned __int8 *)v34 + 16), *v34 == (llvm::CallBase *)0x7865762E32787661) ? (v647 = v34[1] == (llvm::CallBase *)0x3231697463617274) : (v647 = 0), v647 ? (v648 = (_DWORD)v10 == 56) : (v648 = 0), !v648))
                                                                                                    {
                                                                                                      if (v636)
                                                                                                      {
LABEL_1221:
                                                                                                        if ((v488 & 1) != 0 || ((v10 = 0x726570762E787661, *v34 == (llvm::CallBase *)0x726570762E787661) ? (v649 = *(llvm::CallBase **)((char *)v34 + 7) == (llvm::CallBase *)0x2E38323166326D72) : (v649 = 0), !v649))
                                                                                                        {
                                                                                                          if (v105 != 15)
                                                                                                          {
                                                                                                            if ((v634 & 1) != 0)
                                                                                                              goto LABEL_1665;
                                                                                                            goto LABEL_1588;
                                                                                                          }
                                                                                                          if (*v34 != (llvm::CallBase *)0x6570762E32787661 || *(llvm::CallBase **)((char *)v34 + 7) != (llvm::CallBase *)0x38323169326D7265)
                                                                                                          {
LABEL_1588:
                                                                                                            v10 = 0x726570762E787661;
                                                                                                            if (*v34 == (llvm::CallBase *)0x726570762E787661 && *((_DWORD *)v34 + 2) == 778856813)
                                                                                                              goto LABEL_2383;
                                                                                                            if (v105 == 12)
                                                                                                            {
                                                                                                              v10 = 0x6873702E32657373;
                                                                                                              if (*v34 == (llvm::CallBase *)0x6873702E32657373 && *((_DWORD *)v34 + 2) == 1680762485)
                                                                                                                goto LABEL_2383;
                                                                                                            }
                                                                                                            else if (v105 >= 0x15)
                                                                                                            {
                                                                                                              v10 = *(uint64_t *)((char *)v34 + 13);
                                                                                                              if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x726570762E6B7361 && v10 == 0x702E6C696D726570)
                                                                                                                goto LABEL_2383;
                                                                                                              v846 = 0;
                                                                                                              goto LABEL_1666;
                                                                                                            }
LABEL_1665:
                                                                                                            v846 = 1;
LABEL_1666:
                                                                                                            v847 = 0x756873702E6B7361;
                                                                                                            if (v636 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v848 = v34[1] == (llvm::CallBase *)0x756873702E6B7361) : (v848 = 0), (v10 = 778317414, v848) ? (v849 = *((_DWORD *)v34 + 4) == 778317414) : (v849 = 0), !v849))
                                                                                                            {
                                                                                                              if (v105 == 13 && ((v10 = 0x772E6C6675687370, *v34 == (llvm::CallBase *)0x6873702E32657373) ? (v850 = *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x772E6C6675687370) : (v850 = 0), v850) || (v846 & 1) == 0 && (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v851 = v34[1] == (llvm::CallBase *)0x756873702E6B7361) : (v851 = 0), (v10 = 0x2E772E6C66756873, v851) ? (v852 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x2E772E6C66756873) : (v852 = 0), v852))
                                                                                                              {
                                                                                                                v939 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                v774 = *(_QWORD **)v939;
                                                                                                                v940 = *((_QWORD *)v939 + 4);
                                                                                                                v941 = (_QWORD *)(v940 + 24);
                                                                                                                if (*(_DWORD *)(v940 + 32) >= 0x41u)
                                                                                                                  v941 = (_QWORD *)*v941;
                                                                                                                v942 = *(_DWORD *)v941;
                                                                                                                v943 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                __src = &v1628;
                                                                                                                v1627 = 0x1000000000;
                                                                                                                llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v943);
                                                                                                                v779 = (int *)__src;
                                                                                                                if ((_DWORD)v943)
                                                                                                                {
                                                                                                                  v944 = 0;
                                                                                                                  v945.i64[0] = 0x300000003;
                                                                                                                  v945.i64[1] = 0x300000003;
                                                                                                                  v946 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v942), (uint32x4_t)xmmword_24AA339C0), v945);
                                                                                                                  v947 = (int8x16_t *)__src;
                                                                                                                  do
                                                                                                                  {
                                                                                                                    *v947 = vorrq_s8(v946, (int8x16_t)vdupq_n_s32(v944));
                                                                                                                    v947 += 2;
                                                                                                                    v948 = (int8x16_t)vdupq_n_s64(v944);
                                                                                                                    v949 = (int32x4_t)vorrq_s8(v948, (int8x16_t)xmmword_24AA339E0);
                                                                                                                    v950 = (int32x4_t)vorrq_s8(v948, (int8x16_t)xmmword_24AA339F0);
                                                                                                                    *(int32x4_t *)&v779[v950.i64[0]] = vuzp1q_s32(v950, v949);
                                                                                                                    v944 += 8;
                                                                                                                  }
                                                                                                                  while ((_DWORD)v943 != (_DWORD)v944);
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if (v105 != 13 || ((v10 = 0x772E686675687370, *v34 == (llvm::CallBase *)0x6873702E32657373) ? (v853 = *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x772E686675687370) : (v853 = 0), !v853))
                                                                                                                {
                                                                                                                  if ((v846 & 1) != 0 || ((v10 = (uint64_t)*v34, *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v854 = v34[1] == (llvm::CallBase *)0x756873702E6B7361) : (v854 = 0), (v847 = 0x2E772E6866756873, v854) ? (v855 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x2E772E6866756873) : (v855 = 0), !v855))
                                                                                                                  {
                                                                                                                    if ((v110 & 1) == 0)
                                                                                                                    {
                                                                                                                      v10 = (uint64_t)v34[1];
                                                                                                                      v856 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v10 == 0x667568732E6B7361;
                                                                                                                      v847 = 28718;
                                                                                                                      if (v856 && *((_WORD *)v34 + 8) == 28718)
                                                                                                                      {
                                                                                                                        v1146 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                        v1147 = *((_QWORD *)v1146 + 8);
                                                                                                                        v1148 = (_QWORD *)(v1147 + 24);
                                                                                                                        if (*(_DWORD *)(v1147 + 32) >= 0x41u)
                                                                                                                          v1148 = (_QWORD *)*v1148;
                                                                                                                        v1149 = *(_QWORD **)v1146;
                                                                                                                        v1150 = *((_QWORD *)v1146 + 4);
                                                                                                                        v1151 = *(llvm::Type **)v1620;
                                                                                                                        v1152 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                        if ((*(_DWORD *)(*(_QWORD *)v1620 + 8) & 0xFE) == 0x12)
                                                                                                                          v1151 = (llvm::Type *)**((_QWORD **)v1151 + 2);
                                                                                                                        v1153 = *(_DWORD *)v1148;
                                                                                                                        v1154 = llvm::Type::getPrimitiveSizeInBits(v1151);
                                                                                                                        __src = &v1628;
                                                                                                                        v1627 = 0x1000000000;
                                                                                                                        llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1152);
                                                                                                                        if ((_DWORD)v1152)
                                                                                                                        {
                                                                                                                          v1155 = 0;
                                                                                                                          v1156 = 0x80 / v1154;
                                                                                                                          v1157 = (0x80 / v1154) >> 1;
                                                                                                                          v1158 = __src;
                                                                                                                          v1159 = ~(-1 << v1157);
                                                                                                                          v1160 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                                                          v1161 = (uint64x2_t)vdupq_n_s64(v1152 - 1);
                                                                                                                          v1162 = vdupq_n_s64(2uLL);
                                                                                                                          do
                                                                                                                          {
                                                                                                                            v1163 = vmovn_s64((int64x2_t)vcgeq_u64(v1161, (uint64x2_t)v1160));
                                                                                                                            if ((v1163.i8[0] & 1) != 0)
                                                                                                                            {
                                                                                                                              if (v1155 % v1156 >= v1157)
                                                                                                                                v1164 = v1152;
                                                                                                                              else
                                                                                                                                v1164 = 0;
                                                                                                                              v1158[v1155] = v1155 / v1156 * v1156 + ((v1153 >> ((v1157 * v1155) & 6)) & v1159) + v1164;
                                                                                                                            }
                                                                                                                            if ((v1163.i8[4] & 1) != 0)
                                                                                                                            {
                                                                                                                              if (((int)v1155 + 1) % v1156 >= v1157)
                                                                                                                                v1165 = v1152;
                                                                                                                              else
                                                                                                                                v1165 = 0;
                                                                                                                              v1158[v1155 + 1] = ((int)v1155 + 1) / v1156 * v1156 + ((v1153 >> ((v1157 * (v1155 | 1)) & 7)) & v1159) + v1165;
                                                                                                                            }
                                                                                                                            v1155 += 2;
                                                                                                                            v1160 = vaddq_s64(v1160, v1162);
                                                                                                                          }
                                                                                                                          while (((v1152 + 1) & 0x1FFFFFFFELL) != v1155);
                                                                                                                        }
                                                                                                                        v1633 = 257;
                                                                                                                        v1166 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1149, v1150, (int *)__src, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                                        ShuffleVector = (llvm::Value *)v1166;
                                                                                                                        v1167 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                        v1168 = (unsigned __int8 *)*((_QWORD *)v1167 + 16);
                                                                                                                        v1169 = (llvm::Value *)*((_QWORD *)v1167 + 12);
LABEL_2503:
                                                                                                                        ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1634, v1168, (llvm::Value *)v1166, v1169);
                                                                                                                        v799 = __src;
                                                                                                                        if (__src == &v1628)
                                                                                                                          goto LABEL_2197;
                                                                                                                        goto LABEL_2196;
                                                                                                                      }
                                                                                                                    }
                                                                                                                    if ((v635 & 1) != 0 || ((v10 = (uint64_t)v34[1], *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v858 = v10 == 0x64766F6D2E6B7361) : (v858 = 0), (v847 = 0x70756464766F6D2ELL, v858) ? (v859 = *(llvm::CallBase **)((char *)v34 + 11) == (llvm::CallBase *)0x70756464766F6D2ELL) : (v859 = 0), !v859))
                                                                                                                    {
                                                                                                                      if (v636 || ((v847 = 0x73766F6D2E6B7361, *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v860 = v34[1] == (llvm::CallBase *)0x73766F6D2E6B7361) : (v860 = 0), v860 ? (v861 = *((_DWORD *)v34 + 4) == 1886741608) : (v861 = 0), !v861 && ((v10 = 1886741612, *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v862 = v34[1] == (llvm::CallBase *)0x73766F6D2E6B7361) : (v862 = 0), v862 ? (v863 = *((unsigned int *)v34 + 4) == 1886741612) : (v863 = 0), !v863)))
                                                                                                                      {
                                                                                                                        if ((v635 & 1) != 0)
                                                                                                                          goto LABEL_1732;
                                                                                                                        v1116 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x706E75702E6B7361 && *(llvm::CallBase **)((char *)v34 + 11) == (llvm::CallBase *)0x6C6B63706E75702ELL;
                                                                                                                        if (v1116 || ((v847 = 0x63706E752E6B7361, *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v1117 = v34[1] == (llvm::CallBase *)0x63706E752E6B7361) : (v1117 = 0), v1117 ? (v1118 = *(llvm::CallBase **)((char *)v34 + 11) == (llvm::CallBase *)0x2E6C6B63706E752ELL) : (v1118 = 0), v1118))
                                                                                                                        {
                                                                                                                          v1189 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                          v1124 = *(_QWORD **)v1189;
                                                                                                                          v1125 = *((_QWORD *)v1189 + 4);
                                                                                                                          v1190 = *(llvm::Type **)v1620;
                                                                                                                          v1191 = *(int *)(*(_QWORD *)v1620 + 32);
                                                                                                                          v1192 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                          if ((*(_DWORD *)(*(_QWORD *)v1620 + 8) & 0xFE) == 0x12)
                                                                                                                            v1190 = (llvm::Type *)**((_QWORD **)v1190 + 2);
                                                                                                                          v1193 = llvm::Type::getPrimitiveSizeInBits(v1190);
                                                                                                                          __src = &v1628;
                                                                                                                          v1627 = 0x4000000000;
                                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1191);
                                                                                                                          v1130 = (int *)__src;
                                                                                                                          if ((_DWORD)v1192)
                                                                                                                          {
                                                                                                                            v1194 = 0;
                                                                                                                            v1195 = 0x80 / v1193;
                                                                                                                            v1196 = (uint64x2_t)vdupq_n_s64(v1195 - 1);
                                                                                                                            v1197 = vdupq_n_s64(2uLL);
                                                                                                                            do
                                                                                                                            {
                                                                                                                              if (v1193 <= 0x80)
                                                                                                                              {
                                                                                                                                v1198 = 0;
                                                                                                                                v1199 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  v1200 = vmovn_s64((int64x2_t)vcgeq_u64(v1196, (uint64x2_t)v1199));
                                                                                                                                  if ((v1200.i8[0] & 1) != 0)
                                                                                                                                    v1130[v1198 + v1194] = v1194 + (v1198 >> 1);
                                                                                                                                  if ((v1200.i8[4] & 1) != 0)
                                                                                                                                    v1130[(v1198 | 1) + v1194] = v1194 + (v1198 >> 1) + v1191;
                                                                                                                                  v1198 += 2;
                                                                                                                                  v1199 = vaddq_s64(v1199, v1197);
                                                                                                                                }
                                                                                                                                while ((((_WORD)v1195 + 1) & 0x1FE) != v1198);
                                                                                                                              }
                                                                                                                              v1194 += v1195;
                                                                                                                            }
                                                                                                                            while (v1194 != v1192);
                                                                                                                          }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x706E75702E6B7361 || *(llvm::CallBase **)((char *)v34 + 11) != (llvm::CallBase *)0x686B63706E75702ELL)
                                                                                                                          {
                                                                                                                            v10 = (uint64_t)v34[1];
                                                                                                                            v1121 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v10 == 0x63706E752E6B7361;
                                                                                                                            if (!v1121 || *(llvm::CallBase **)((char *)v34 + 11) != (llvm::CallBase *)0x2E686B63706E752ELL)
                                                                                                                            {
LABEL_1732:
                                                                                                                              if (v105 < 0x10 || ((v847 = (uint64_t)v34[1], *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v864 = v847 == 0x2E646E612E6B7361) : (v864 = 0), !v864))
                                                                                                                              {
                                                                                                                                if ((v489 & 1) != 0)
                                                                                                                                  goto LABEL_1752;
                                                                                                                                if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x646E61702E6B7361 || *((_BYTE *)v34 + 16) != 46)
                                                                                                                                {
                                                                                                                                  v10 = (uint64_t)v34[1];
                                                                                                                                  v847 = 0x6E646E612E6B7361;
                                                                                                                                  if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v10 == 0x6E646E612E6B7361 && *((_BYTE *)v34 + 16) == 46)
                                                                                                                                  {
LABEL_2516:
                                                                                                                                    v1204 = *(llvm::Type **)v1620;
                                                                                                                                    llvm::VectorType::getInteger(*(_QWORD *)v1620);
                                                                                                                                    v1223 = v1222;
                                                                                                                                    v1224 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                    LOWORD(v1630) = 257;
                                                                                                                                    v1225 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1224, v1222, (uint64_t)&__src);
                                                                                                                                    v1633 = 257;
                                                                                                                                    v1208 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1634, (llvm::Constant **)v1225, (const llvm::Twine *)v1631);
                                                                                                                                    ShuffleVector = (llvm::Value *)v1208;
                                                                                                                                    v1226 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                                                                                                    LOWORD(v1630) = 257;
                                                                                                                                    v1210 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1226, v1223, (uint64_t)&__src);
                                                                                                                                    v1633 = 257;
                                                                                                                                    v1211 = (const llvm::Twine *)v1631;
                                                                                                                                    goto LABEL_2517;
                                                                                                                                  }
LABEL_1752:
                                                                                                                                  if ((v110 & 1) != 0 || ((v847 = (uint64_t)v34[1], v10 = *((unsigned __int16 *)v34 + 8), *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v869 = v847 == 0x646E61702E6B7361) : (v869 = 0), v869 ? (v870 = (_DWORD)v10 == 11886) : (v870 = 0), !v870))
                                                                                                                                  {
                                                                                                                                    if ((v488 & 1) != 0 || ((v847 = *(uint64_t *)((char *)v34 + 7), *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v871 = v847 == 0x2E726F2E6B73616DLL) : (v871 = 0), !v871))
                                                                                                                                    {
                                                                                                                                      if (v105 < 0x10)
                                                                                                                                        goto LABEL_1774;
                                                                                                                                      if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x2E726F702E6B7361)
                                                                                                                                      {
                                                                                                                                        v847 = (uint64_t)v34[1];
                                                                                                                                        if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v847 == 0x2E726F782E6B7361)
                                                                                                                                        {
LABEL_2551:
                                                                                                                                          v1204 = *(llvm::Type **)v1620;
                                                                                                                                          llvm::VectorType::getInteger(*(_QWORD *)v1620);
                                                                                                                                          v1260 = v1259;
                                                                                                                                          v1261 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                          LOWORD(v1630) = 257;
                                                                                                                                          v1262 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1261, v1259, (uint64_t)&__src);
                                                                                                                                          v1263 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                                                                                                          v1633 = 257;
                                                                                                                                          v1264 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1263, v1260, (uint64_t)v1631);
                                                                                                                                          v1625 = 257;
                                                                                                                                          Xor = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1262, (llvm::Value *)v1264, (const llvm::Twine *)&__p);
                                                                                                                                          goto LABEL_2552;
                                                                                                                                        }
LABEL_1774:
                                                                                                                                        if ((v489 & 1) != 0)
                                                                                                                                          goto LABEL_1775;
                                                                                                                                        if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x726F78702E6B7361 || *((_BYTE *)v34 + 16) != 46)
                                                                                                                                        {
                                                                                                                                          if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x646461702E6B7361 && *((_BYTE *)v34 + 16) == 46)
                                                                                                                                          {
                                                                                                                                            v1325 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                            v1326 = *(llvm::Value **)v1325;
                                                                                                                                            v1327 = (llvm::Value *)*((_QWORD *)v1325 + 4);
                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                            Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v1634, v1326, v1327, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                            goto LABEL_2553;
                                                                                                                                          }
                                                                                                                                          v847 = (uint64_t)v34[1];
                                                                                                                                          v10 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                          if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v847 == 0x627573702E6B7361 && (_DWORD)v10 == 46)
                                                                                                                                          {
                                                                                                                                            v1255 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                            v1256 = *(llvm::Value **)v1255;
                                                                                                                                            v1257 = (llvm::Value *)*((_QWORD *)v1255 + 4);
                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                            Add = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)v1634, v1256, v1257, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                            goto LABEL_2553;
                                                                                                                                          }
LABEL_1775:
                                                                                                                                          if ((v110 & 1) == 0 && ((v847 = (uint64_t)v34[1], v10 = *((unsigned __int16 *)v34 + 8), *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v874 = v847 == 0x6C756D702E6B7361) : (v874 = 0), v874 ? (v875 = (_DWORD)v10 == 11884) : (v875 = 0), v875))
                                                                                                                                          {
                                                                                                                                            v1328 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                            v1329 = *(llvm::Value **)v1328;
                                                                                                                                            v1330 = (llvm::Value *)*((_QWORD *)v1328 + 4);
                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                            Add = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)v1634, v1329, v1330, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                          }
                                                                                                                                          else
                                                                                                                                          {
                                                                                                                                            if ((v489 & 1) != 0)
                                                                                                                                              goto LABEL_1784;
                                                                                                                                            if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x2E6464612E6B7361 && *((_BYTE *)v34 + 16) == 112)
                                                                                                                                            {
                                                                                                                                              if (*(_DWORD *)((char *)v34 + v105 - 4) == 842085678)
                                                                                                                                              {
                                                                                                                                                v1366 = *((_BYTE *)v34 + 17) == 115;
                                                                                                                                                v1367 = 10381;
                                                                                                                                                goto LABEL_2863;
                                                                                                                                              }
                                                                                                                                              v1337 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                              v1338 = *(BOOL ***)v1337;
                                                                                                                                              v1339 = (llvm::Value *)*((_QWORD *)v1337 + 4);
                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                              Add = llvm::IRBuilderBase::CreateFAdd((llvm::IRBuilderBase *)v1634, v1338, v1339, (const llvm::Twine *)&__src, 0);
                                                                                                                                            }
                                                                                                                                            else if (*v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x2E7669642E6B7361 && *((_BYTE *)v34 + 16) == 112)
                                                                                                                                            {
                                                                                                                                              if (*(_DWORD *)((char *)v34 + v105 - 4) == 842085678)
                                                                                                                                              {
                                                                                                                                                v1366 = *((_BYTE *)v34 + 17) == 115;
                                                                                                                                                v1367 = 10412;
                                                                                                                                                goto LABEL_2863;
                                                                                                                                              }
                                                                                                                                              v1341 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                              v1342 = *(BOOL ***)v1341;
                                                                                                                                              v1343 = (llvm::Value *)*((_QWORD *)v1341 + 4);
                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                              Add = llvm::IRBuilderBase::CreateFDiv((llvm::IRBuilderBase *)v1634, v1342, v1343, (const llvm::Twine *)&__src, 0);
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                              if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x2E6C756D2E6B7361 || *((_BYTE *)v34 + 16) != 112)
                                                                                                                                              {
                                                                                                                                                v10 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                                if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x2E6275732E6B7361 || (_DWORD)v10 != 112)
                                                                                                                                                {
                                                                                                                                                  v847 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                                  if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x2E78616D2E6B7361 || (_DWORD)v847 != 112)
                                                                                                                                                  {
                                                                                                                                                    v847 = (uint64_t)v34[1];
                                                                                                                                                    v10 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                                    v1288 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v847 == 0x2E6E696D2E6B7361;
                                                                                                                                                    if (!v1288 || (_DWORD)v10 != 112)
                                                                                                                                                      goto LABEL_1784;
                                                                                                                                                  }
                                                                                                                                                  v1290 = 18;
                                                                                                                                                  if (v105 < 0x12)
                                                                                                                                                    v1290 = v105;
                                                                                                                                                  if (v105 - v1290 != 4 || *(_DWORD *)((char *)v34 + v1290) != 842085678)
                                                                                                                                                  {
LABEL_1784:
                                                                                                                                                    if ((v110 & 1) == 0)
                                                                                                                                                    {
                                                                                                                                                      v847 = *((unsigned __int16 *)v34 + 8);
                                                                                                                                                      v876 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6E637A6C2E6B7361;
                                                                                                                                                      if (v876 && (_DWORD)v847 == 11892)
                                                                                                                                                      {
LABEL_2723:
                                                                                                                                                        v1344 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                                                                                        __p = *(void **)v1620;
                                                                                                                                                        v1345 = llvm::Intrinsic::getDeclaration(v1344, 53, (BOOL **)&__p, 1);
                                                                                                                                                        v1346 = v1345;
                                                                                                                                                        if (v1345)
                                                                                                                                                          v1347 = *(_QWORD *)(v1345 + 24);
                                                                                                                                                        else
                                                                                                                                                          v1347 = 0;
                                                                                                                                                        v1631[0] = *((llvm::hashing::detail::hash_state **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                        v1631[1] = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(*v1638 + 1920, 0, 0);
                                                                                                                                                        LOWORD(v1630) = 257;
                                                                                                                                                        v1265 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1347, v1346, (uint64_t *)v1631, 2, (uint64_t)&__src, 0);
                                                                                                                                                        ShuffleVector = v1265;
                                                                                                                                                        v1376 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                        v1267 = (unsigned __int8 *)*((_QWORD *)v1376 + 8);
                                                                                                                                                        v1268 = (llvm::Value *)*((_QWORD *)v1376 + 4);
                                                                                                                                                        goto LABEL_2554;
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    if (v105 < 0x10)
                                                                                                                                                      goto LABEL_1793;
                                                                                                                                                    if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x6C6C73702E6B7361)
                                                                                                                                                    {
                                                                                                                                                      if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x6C7273702E6B7361)
                                                                                                                                                      {
                                                                                                                                                        if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x617273702E6B7361)
                                                                                                                                                        {
LABEL_1793:
                                                                                                                                                          if ((v110 & 1) == 0)
                                                                                                                                                          {
                                                                                                                                                            v878 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x65766F6D2E6B7361;
                                                                                                                                                            if (v878 && *((_WORD *)v34 + 8) == 29486)
                                                                                                                                                            {
                                                                                                                                                              InsertElement = upgradeMaskedMove((llvm::IRBuilderBase *)v1634, (uint64_t)v1620, (const llvm::APInt *)v847, (unint64_t *)v10);
                                                                                                                                                              goto LABEL_1585;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          if ((v488 & 1) == 0 && *v34 == (llvm::CallBase *)0x632E323135787661 && *(llvm::CallBase **)((char *)v34 + 7) == (llvm::CallBase *)0x326B73616D747663)
                                                                                                                                                          {
                                                                                                                                                            InsertElement = UpgradeMaskToInt((uint64_t)v1634, v1620);
                                                                                                                                                            goto LABEL_1585;
                                                                                                                                                          }
                                                                                                                                                          if (v105 >= 9 && *(llvm::CallBase **)((char *)v34 + v105 - 9) == (llvm::CallBase *)0x7164746E766F6D2ELL && *((_BYTE *)v34 + v105 - 1) == 97)
                                                                                                                                                          {
                                                                                                                                                            v1396 = (uint64_t **)*((_QWORD *)v1614 + 5);
                                                                                                                                                            v1397 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v6 + 1992, 1, 0);
                                                                                                                                                            __src = llvm::ValueAsMetadata::get(v1397, v1398);
                                                                                                                                                            v1399 = llvm::MDTuple::getImpl(v6, (llvm::hashing::detail::hash_state *)&__src, 1uLL, 0, 1);
                                                                                                                                                            v1400 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                            v1401 = llvm::PointerType::get(*(llvm::PointerType ***)v1620, 0);
                                                                                                                                                            __src = "cast";
                                                                                                                                                            LOWORD(v1630) = 259;
                                                                                                                                                            v1402 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1400, v1401, (uint64_t)&__src);
                                                                                                                                                            v1403 = *(llvm::Type **)v1620;
                                                                                                                                                            v1404 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v1634, v1403, (llvm::Value *)v1402, (63 - __clz(v1404 >> 3)) | 0x100u, 0, (uint64_t)&__src);
                                                                                                                                                            MDKindID = llvm::Module::getMDKindID(v1396, (uint64_t *)"nontemporal", 0xBuLL);
                                                                                                                                                            llvm::Instruction::setMetadata(AlignedLoad, MDKindID, v1399);
                                                                                                                                                            ShuffleVector = (llvm::Value *)AlignedLoad;
                                                                                                                                                            goto LABEL_1586;
                                                                                                                                                          }
                                                                                                                                                          if ((v638 & 1) != 0 || (*v34 == (llvm::CallBase *)0x616D66762E616D66 ? (v882 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E6464616D66762ELL) : (v882 = 0), !v882 && (*v34 == (llvm::CallBase *)0x736D66762E616D66 ? (v883 = *(llvm::CallBase **)((char *)v34 + 3) == (llvm::CallBase *)0x2E6275736D66762ELL) : (v883 = 0), !v883)))
                                                                                                                                                          {
                                                                                                                                                            if ((v634 & 1) != 0 || (*v34 == (llvm::CallBase *)0x6D6E66762E616D66 ? (v884 = *((_DWORD *)v34 + 2) == 778331233) : (v884 = 0), !v884 && (*v34 == (llvm::CallBase *)0x6D6E66762E616D66 ? (v885 = *((_DWORD *)v34 + 2) == 778204531) : (v885 = 0), !v885)))
                                                                                                                                                            {
                                                                                                                                                              if (!v625 && *v34 == (llvm::CallBase *)0x6D66762E34616D66 && *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x732E6464616D6676)
                                                                                                                                                              {
                                                                                                                                                                v1448 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                                v1449 = *(llvm::Value **)v1448;
                                                                                                                                                                v1450 = (llvm::Value *)*((_QWORD *)v1448 + 4);
                                                                                                                                                                v1451 = (llvm::Value *)*((_QWORD *)v1448 + 8);
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1452 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1449, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                                                                                                                                v1631[0] = (llvm::hashing::detail::hash_state *)v1452;
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1631[1] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1450, (const llvm::Twine *)&__src, v1453);
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                *(_QWORD *)&v1632 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1451, (const llvm::Twine *)&__src, v1454);
                                                                                                                                                                v1455 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40);
                                                                                                                                                                __p = (void *)*v1452;
                                                                                                                                                                v1456 = llvm::Intrinsic::getDeclaration(v1455, 142, (BOOL **)&__p, 1);
                                                                                                                                                                if (v1456)
                                                                                                                                                                  v1457 = *(_QWORD *)(v1456 + 24);
                                                                                                                                                                else
                                                                                                                                                                  v1457 = 0;
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1457, v1456, (uint64_t *)v1631, 3, (uint64_t)&__src, 0);
                                                                                                                                                                llvm::Constant::getNullValue(*(_QWORD *)v1620);
                                                                                                                                                                v964 = v1498;
                                                                                                                                                                v963 = ShuffleVector;
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                goto LABEL_2060;
                                                                                                                                                              }
                                                                                                                                                              if (v636 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v887 = v34[1] == (llvm::CallBase *)0x616D66762E6B7361) : (v887 = 0), v887 ? (v888 = *((_DWORD *)v34 + 4) == 1932420196) : (v888 = 0), !v888))
                                                                                                                                                              {
                                                                                                                                                                if ((v846 & 1) != 0 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v1410 = v34[1] == (llvm::CallBase *)0x6D66762E7A6B7361) : (v1410 = 0), v1410 ? (v1411 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x732E6464616D6676) : (v1411 = 0), !v1411 && (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v1412 = v34[1] == (llvm::CallBase *)0x6D66762E336B7361) : (v1412 = 0), v1412 ? (v1413 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x732E6464616D6676) : (v1413 = 0), !v1413 && (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v1414 = v34[1] == (llvm::CallBase *)0x6D66762E336B7361) : (v1414 = 0), v1414 ? (v1415 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x732E6275736D6676) : (v1415 = 0), !v1415))))
                                                                                                                                                                {
                                                                                                                                                                  if ((v111 & 1) != 0 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v889 = v34[1] == (llvm::CallBase *)0x6E66762E336B7361) : (v889 = 0), v889 ? (v890 = *(llvm::CallBase **)((char *)v34 + 14) == (llvm::CallBase *)0x732E6275736D6E66) : (v890 = 0), !v890))
                                                                                                                                                                  {
                                                                                                                                                                    if (v636 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v891 = v34[1] == (llvm::CallBase *)0x616D66762E6B7361) : (v891 = 0), v891 ? (v892 = *((_DWORD *)v34 + 4) == 1882088548) : (v892 = 0), !v892))
                                                                                                                                                                    {
                                                                                                                                                                      if ((v846 & 1) != 0)
                                                                                                                                                                        goto LABEL_1875;
                                                                                                                                                                      v1460 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6D6E66762E6B7361;
                                                                                                                                                                      if (!v1460 || *(llvm::CallBase **)((char *)v34 + 13) != (llvm::CallBase *)0x702E6464616D6E66)
                                                                                                                                                                      {
                                                                                                                                                                        v1462 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6D6E66762E6B7361;
                                                                                                                                                                        if (!v1462 || *(llvm::CallBase **)((char *)v34 + 13) != (llvm::CallBase *)0x702E6275736D6E66)
                                                                                                                                                                        {
                                                                                                                                                                          v1464 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6D66762E336B7361;
                                                                                                                                                                          if (!v1464 || *(llvm::CallBase **)((char *)v34 + 13) != (llvm::CallBase *)0x702E6464616D6676)
                                                                                                                                                                          {
                                                                                                                                                                            v1466 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6D66762E336B7361;
                                                                                                                                                                            if (!v1466 || *(llvm::CallBase **)((char *)v34 + 13) != (llvm::CallBase *)0x702E6275736D6676)
                                                                                                                                                                            {
LABEL_1875:
                                                                                                                                                                              if ((v111 & 1) != 0 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v893 = v34[1] == (llvm::CallBase *)0x6E66762E336B7361) : (v893 = 0), v893 ? (v894 = *(llvm::CallBase **)((char *)v34 + 14) == (llvm::CallBase *)0x702E6275736D6E66) : (v894 = 0), !v894))
                                                                                                                                                                              {
                                                                                                                                                                                if ((v846 & 1) != 0 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v895 = v34[1] == (llvm::CallBase *)0x6D66762E7A6B7361) : (v895 = 0), v895 ? (v896 = *(llvm::CallBase **)((char *)v34 + 13) == (llvm::CallBase *)0x702E6464616D6676) : (v896 = 0), !v896))
                                                                                                                                                                                {
                                                                                                                                                                                  if ((v488 & 1) != 0 || (*v34 == (llvm::CallBase *)0x736D66762E616D66 ? (v897 = *(llvm::CallBase **)((char *)v34 + 7) == (llvm::CallBase *)0x702E646461627573) : (v897 = 0), !v897))
                                                                                                                                                                                  {
                                                                                                                                                                                    if ((v622 & 1) == 0)
                                                                                                                                                                                    {
                                                                                                                                                                                      v898 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x616D66762E6B7361;
                                                                                                                                                                                      if (v898 && *(llvm::CallBase **)((char *)v34 + 15) == (llvm::CallBase *)0x702E627573646461)
                                                                                                                                                                                        goto LABEL_3062;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v105 >= 0x18)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1504 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6D66762E336B7361;
                                                                                                                                                                                      v1505 = v1504 && v34[2] == (llvm::CallBase *)0x702E627573646461;
                                                                                                                                                                                      if (v1505 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v1506 = v34[1] == (llvm::CallBase *)0x6D66762E7A6B7361) : (v1506 = 0), v1506 ? (v1507 = v34[2] == (llvm::CallBase *)0x702E627573646461) : (v1507 = 0), v1507 || (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v1508 = v34[1] == (llvm::CallBase *)0x6D66762E336B7361) : (v1508 = 0), v1508 ? (v1509 = v34[2] == (llvm::CallBase *)0x702E646461627573) : (v1509 = 0), v1509)))
                                                                                                                                                                                      {
LABEL_3062:
                                                                                                                                                                                        v1510 = *((unsigned __int8 *)v34 + 11);
                                                                                                                                                                                        v1511 = v1510 == 122 || v1510 == 51;
                                                                                                                                                                                        v1512 = 12;
                                                                                                                                                                                        if (v1511)
                                                                                                                                                                                          v1512 = 13;
                                                                                                                                                                                        if (v105 < v1512)
                                                                                                                                                                                          v1512 = v105;
                                                                                                                                                                                        v1615 = (llvm::CallBase **)((char *)v34 + v1512);
                                                                                                                                                                                        v1616 = v105 - v1512;
                                                                                                                                                                                        v1513 = *((unsigned __int8 *)v34 + v1512 + 3);
                                                                                                                                                                                        if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
                                                                                                                                                                                        {
                                                                                                                                                                                          if (*((_BYTE *)v1615 + v1616 - 5) == 115)
                                                                                                                                                                                            v1514 = 10911;
                                                                                                                                                                                          else
                                                                                                                                                                                            v1514 = 10910;
                                                                                                                                                                                          v1515 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                                                          v1631[0] = *v1515;
                                                                                                                                                                                          v1631[1] = v1515[4];
                                                                                                                                                                                          v1516 = v1515[8];
                                                                                                                                                                                          *(_QWORD *)&v1632 = v1516;
                                                                                                                                                                                          *((_QWORD *)&v1632 + 1) = v1515[16];
                                                                                                                                                                                          if (v1513 == 115)
                                                                                                                                                                                          {
                                                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                                                            *(_QWORD *)&v1632 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, v1516, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                          }
                                                                                                                                                                                          v1517 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v1514, 0, 0);
                                                                                                                                                                                          if (v1517)
                                                                                                                                                                                            v1518 = *(_QWORD *)(v1517 + 24);
                                                                                                                                                                                          else
                                                                                                                                                                                            v1518 = 0;
                                                                                                                                                                                          LOWORD(v1630) = 257;
                                                                                                                                                                                          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1518, v1517, (uint64_t *)v1631, 4, (uint64_t)&__src, 0);
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                          v1524 = *(int *)(*(_QWORD *)v1620 + 32);
                                                                                                                                                                                          v1525 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                                                                                          v1526 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                                                          __p = *(void **)v1526;
                                                                                                                                                                                          v1623 = (uint64_t *)*((_QWORD *)v1526 + 4);
                                                                                                                                                                                          FNeg = (llvm::Value *)*((_QWORD *)v1526 + 8);
                                                                                                                                                                                          v1527 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40);
                                                                                                                                                                                          __src = *(void **)__p;
                                                                                                                                                                                          v1528 = llvm::Intrinsic::getDeclaration(v1527, 142, (BOOL **)&__src, 1);
                                                                                                                                                                                          v1529 = v1528;
                                                                                                                                                                                          if (v1528)
                                                                                                                                                                                            v1530 = *(_QWORD *)(v1528 + 24);
                                                                                                                                                                                          else
                                                                                                                                                                                            v1530 = 0;
                                                                                                                                                                                          LOWORD(v1630) = 257;
                                                                                                                                                                                          v1545 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1530, v1528, (uint64_t *)&__p, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                          LOWORD(v1630) = 257;
                                                                                                                                                                                          FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, FNeg, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                          if (v1529)
                                                                                                                                                                                            v1546 = *(_QWORD *)(v1529 + 24);
                                                                                                                                                                                          else
                                                                                                                                                                                            v1546 = 0;
                                                                                                                                                                                          LOWORD(v1630) = 257;
                                                                                                                                                                                          v1547 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1546, v1529, (uint64_t *)&__p, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                          if (v1513 == 115)
                                                                                                                                                                                            v1548 = v1545;
                                                                                                                                                                                          else
                                                                                                                                                                                            v1548 = v1547;
                                                                                                                                                                                          if (v1513 == 115)
                                                                                                                                                                                            v1545 = v1547;
                                                                                                                                                                                          __src = &v1628;
                                                                                                                                                                                          v1627 = 0x2000000000;
                                                                                                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1524);
                                                                                                                                                                                          v1549 = (int *)__src;
                                                                                                                                                                                          if ((_DWORD)v1525)
                                                                                                                                                                                          {
                                                                                                                                                                                            v1550 = 0;
                                                                                                                                                                                            v1551 = (uint64x2_t)vdupq_n_s64(v1525 - 1);
                                                                                                                                                                                            v1552 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                                                                                                                            v1553 = vdupq_n_s64(2uLL);
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                              v1554 = vmovn_s64((int64x2_t)vcgeq_u64(v1551, (uint64x2_t)v1552));
                                                                                                                                                                                              if ((v1554.i8[0] & 1) != 0)
                                                                                                                                                                                                v1549[v1550] = v1550;
                                                                                                                                                                                              if ((v1554.i8[4] & 1) != 0)
                                                                                                                                                                                                v1549[v1550 + 1] = v1524 + 1 + v1550;
                                                                                                                                                                                              v1550 += 2;
                                                                                                                                                                                              v1552 = vaddq_s64(v1552, v1553);
                                                                                                                                                                                            }
                                                                                                                                                                                            while (((v1525 + 1) & 0x1FFFFFFFELL) != v1550);
                                                                                                                                                                                          }
                                                                                                                                                                                          v1633 = 257;
                                                                                                                                                                                          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1548, (uint64_t)v1545, v1549, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                                                                                                          if (__src != &v1628)
                                                                                                                                                                                            free(__src);
                                                                                                                                                                                        }
                                                                                                                                                                                        v1555 = v1620;
                                                                                                                                                                                        if (v1510 == 122)
                                                                                                                                                                                        {
                                                                                                                                                                                          llvm::Constant::getNullValue(*(_QWORD *)v1620);
                                                                                                                                                                                          v1268 = v1556;
                                                                                                                                                                                          v1555 = v1620;
                                                                                                                                                                                          v1557 = -(uint64_t)(*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                          v1558 = *((_DWORD *)v1620 + 5) & 0x7FFFFFF;
                                                                                                                                                                                          v1557 = -v1558;
                                                                                                                                                                                          v1559 = (char *)v1620 - 32 * v1558;
                                                                                                                                                                                          if (v1510 == 51)
                                                                                                                                                                                            v1268 = (llvm::Value *)*((_QWORD *)v1559 + 8);
                                                                                                                                                                                          else
                                                                                                                                                                                            v1268 = *(llvm::Value **)v1559;
                                                                                                                                                                                        }
                                                                                                                                                                                        v1267 = (unsigned __int8 *)*((_QWORD *)v1555 + 4 * v1557 + 12);
                                                                                                                                                                                        v1265 = ShuffleVector;
                                                                                                                                                                                        goto LABEL_2554;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    if ((v846 & 1) == 0 && ((v900 = v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v901 = v1615[1] == (llvm::CallBase *)0x726574702E6B7361) : (v901 = 0), v901 ? (v902 = *(llvm::CallBase **)((char *)v1615 + 13) == (llvm::CallBase *)0x2E676F6C6E726574) : (v902 = 0), v902) || (v111 & 1) == 0 && ((v900 = v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v903 = v1615[1] == (llvm::CallBase *)0x6574702E7A6B7361) : (v903 = 0), v903 ? (v904 = *(llvm::CallBase **)((char *)v1615 + 14) == (llvm::CallBase *)0x2E676F6C6E726574) : (v904 = 0), v904))
                                                                                                                                                                                    {
                                                                                                                                                                                      v1537 = *((unsigned __int8 *)v900 + 11);
                                                                                                                                                                                      v1538 = v1620;
                                                                                                                                                                                      v1539 = *(llvm::Type **)v1620;
                                                                                                                                                                                      v1541 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                                                                                                                      if ((_BYTE)v1540)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1538 = v1620;
                                                                                                                                                                                        v1539 = *(llvm::Type **)v1620;
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((*((_DWORD *)v1539 + 2) & 0xFE) == 0x12)
                                                                                                                                                                                        v1539 = (llvm::Type *)**((_QWORD **)v1539 + 2);
                                                                                                                                                                                      v1542 = llvm::Type::getPrimitiveSizeInBits(v1539);
                                                                                                                                                                                      if (v1541 == 128 && v1542 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1543 = 10832;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1541 == 256 && v1542 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1543 = 10833;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1541 == 512 && v1542 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1543 = 10834;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1541 == 128 && v1542 == 64)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1543 = 10835;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1542 == 64 && v1541 == 256)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1543 = 10836;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        v1543 = 10837;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1581 = (llvm::hashing::detail::hash_state **)((char *)v1538 - 32 * (*((_DWORD *)v1538 + 5) & 0x7FFFFFF));
                                                                                                                                                                                      v1631[0] = *v1581;
                                                                                                                                                                                      v1631[1] = v1581[4];
                                                                                                                                                                                      *(_QWORD *)&v1632 = v1581[8];
                                                                                                                                                                                      *((_QWORD *)&v1632 + 1) = v1581[12];
                                                                                                                                                                                      v1582 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1538 + 5) + 56) + 40), v1543, 0, 0);
                                                                                                                                                                                      if (v1582)
                                                                                                                                                                                        v1583 = *(_QWORD *)(v1582 + 24);
                                                                                                                                                                                      else
                                                                                                                                                                                        v1583 = 0;
                                                                                                                                                                                      LOWORD(v1630) = 257;
                                                                                                                                                                                      v1584 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1583, v1582, (uint64_t *)v1631, 4, (uint64_t)&__src, 0);
                                                                                                                                                                                      ShuffleVector = (llvm::Value *)v1584;
                                                                                                                                                                                      v1586 = v1620;
                                                                                                                                                                                      if (v1537 == 122)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1268 = (llvm::Value *)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1620, v1585);
                                                                                                                                                                                        v1586 = v1620;
                                                                                                                                                                                        v1265 = ShuffleVector;
                                                                                                                                                                                        v1587 = -(uint64_t)(*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        v1265 = (llvm::Value *)v1584;
                                                                                                                                                                                        v1588 = *((_DWORD *)v1620 + 5) & 0x7FFFFFF;
                                                                                                                                                                                        v1587 = -v1588;
                                                                                                                                                                                        v1268 = (llvm::Value *)*((_QWORD *)v1620 - 4 * v1588);
                                                                                                                                                                                      }
                                                                                                                                                                                      v1267 = (unsigned __int8 *)*((_QWORD *)v1586 + 4 * v1587 + 16);
                                                                                                                                                                                      goto LABEL_2554;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (!v636 && ((v905 = (unsigned __int8 *)v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v906 = v1615[1] == (llvm::CallBase *)0x616D70762E6B7361) : (v906 = 0), v906 ? (v907 = *((_DWORD *)v1615 + 4) == 842359908) : (v907 = 0), v907) || (v846 & 1) == 0 && ((v905 = (unsigned __int8 *)v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v908 = v1615[1] == (llvm::CallBase *)0x6D70762E7A6B7361) : (v908 = 0), v908 ? (v909 = *(llvm::CallBase **)((char *)v1615 + 13) == (llvm::CallBase *)0x32356464616D7076) : (v909 = 0), v909))
                                                                                                                                                                                    {
                                                                                                                                                                                      v1544 = v905[20] == 104 || v905[21] == 104;
                                                                                                                                                                                      v1560 = v905[11];
                                                                                                                                                                                      v1571 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                                                                                                                      if ((_BYTE)v1570)
                                                                                                                                                                                      v1572 = v1571 != 128 || v1544;
                                                                                                                                                                                      if (v1572 != 1)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1565 = 10953;
                                                                                                                                                                                        goto LABEL_3327;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1573 = v1571 != 256 || v1544;
                                                                                                                                                                                      if (v1573 != 1)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1565 = 10954;
                                                                                                                                                                                        goto LABEL_3327;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1574 = v1571 != 512 || v1544;
                                                                                                                                                                                      if (v1574 != 1)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1565 = 10955;
                                                                                                                                                                                        goto LABEL_3327;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1575 = !v1544;
                                                                                                                                                                                      if (v1571 == 128 && !v1575)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1565 = 10950;
                                                                                                                                                                                        goto LABEL_3327;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v1571 != 256)
                                                                                                                                                                                        v1575 = 1;
                                                                                                                                                                                      v1596 = v1575 == 0;
                                                                                                                                                                                      v1597 = 10951;
                                                                                                                                                                                    }
                                                                                                                                                                                    else
                                                                                                                                                                                    {
                                                                                                                                                                                      if ((v622 & 1) == 0)
                                                                                                                                                                                      {
                                                                                                                                                                                        v910 = v1615;
                                                                                                                                                                                        v911 = *v1615 == (llvm::CallBase *)0x6D2E323135787661 && v1615[1] == (llvm::CallBase *)0x726570762E6B7361;
                                                                                                                                                                                        if (v911 && *(llvm::CallBase **)((char *)v1615 + 15) == (llvm::CallBase *)0x2E72617632696D72)
                                                                                                                                                                                          goto LABEL_3167;
                                                                                                                                                                                        v913 = *v1615 == (llvm::CallBase *)0x6D2E323135787661 && v1615[1] == (llvm::CallBase *)0x726570762E6B7361;
                                                                                                                                                                                        if (v913 && *(llvm::CallBase **)((char *)v1615 + 15) == (llvm::CallBase *)0x2E72617632746D72)
                                                                                                                                                                                          goto LABEL_3167;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v105 >= 0x18)
                                                                                                                                                                                      {
                                                                                                                                                                                        v910 = v1615;
                                                                                                                                                                                        v915 = *v1615 == (llvm::CallBase *)0x6D2E323135787661 && v1615[1] == (llvm::CallBase *)0x6570762E7A6B7361;
                                                                                                                                                                                        if (v915 && v1615[2] == (llvm::CallBase *)0x2E72617632746D72)
                                                                                                                                                                                        {
LABEL_3167:
                                                                                                                                                                                          InsertElement = UpgradeX86VPERMT2Intrinsics((llvm::IRBuilderBase *)v1634, (uint64_t)v1620, *((unsigned __int8 *)v910 + 11) == 122, *((_BYTE *)v910 + 17) == 105);
                                                                                                                                                                                          goto LABEL_1585;
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((v846 & 1) == 0)
                                                                                                                                                                                      {
                                                                                                                                                                                        v917 = v1615;
                                                                                                                                                                                        v918 = *v1615 == (llvm::CallBase *)0x6D2E323135787661 && v1615[1] == (llvm::CallBase *)0x706470762E6B7361;
                                                                                                                                                                                        if (v918 && *(llvm::CallBase **)((char *)v1615 + 13) == (llvm::CallBase *)0x2E64737562706470)
                                                                                                                                                                                          goto LABEL_3200;
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((v111 & 1) == 0)
                                                                                                                                                                                      {
                                                                                                                                                                                        v917 = v1615;
                                                                                                                                                                                        v920 = *v1615 == (llvm::CallBase *)0x6D2E323135787661 && v1615[1] == (llvm::CallBase *)0x6470762E7A6B7361;
                                                                                                                                                                                        if (v920 && *(llvm::CallBase **)((char *)v1615 + 14) == (llvm::CallBase *)0x2E64737562706470)
                                                                                                                                                                                          goto LABEL_3200;
                                                                                                                                                                                        v922 = *v1615 == (llvm::CallBase *)0x6D2E323135787661 && v1615[1] == (llvm::CallBase *)0x706470762E6B7361;
                                                                                                                                                                                        if (v922 && *(llvm::CallBase **)((char *)v1615 + 14) == (llvm::CallBase *)0x2E73647375627064)
                                                                                                                                                                                          goto LABEL_3200;
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((v622 & 1) == 0 && ((v917 = v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v924 = v1615[1] == (llvm::CallBase *)0x6470762E7A6B7361) : (v924 = 0), v924 ? (v925 = *(llvm::CallBase **)((char *)v1615 + 15) == (llvm::CallBase *)0x2E73647375627064) : (v925 = 0), v925))
                                                                                                                                                                                      {
LABEL_3200:
                                                                                                                                                                                        v1560 = *((unsigned __int8 *)v917 + 11);
                                                                                                                                                                                        v1561 = 20;
                                                                                                                                                                                        if (v1560 == 122)
                                                                                                                                                                                          v1561 = 21;
                                                                                                                                                                                        v1562 = *((unsigned __int8 *)v917 + v1561);
                                                                                                                                                                                        v1564 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                                                                                                                        if ((_BYTE)v1563)
                                                                                                                                                                                        if (v1564 == 128 && v1562 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10918;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1564 == 256 && v1562 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10919;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1564 == 512 && v1562 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10920;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        v1595 = v1562 != 115;
                                                                                                                                                                                        if (v1564 == 128 && v1562 == 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10921;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1564 != 256)
                                                                                                                                                                                          v1595 = 1;
                                                                                                                                                                                        v1596 = !v1595;
                                                                                                                                                                                        v1597 = 10922;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        if ((v846 & 1) != 0 || ((v926 = v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v927 = v1615[1] == (llvm::CallBase *)0x706470762E6B7361) : (v927 = 0), v927 ? (v928 = *(llvm::CallBase **)((char *)v1615 + 13) == (llvm::CallBase *)0x2E64737377706470) : (v928 = 0), !v928))
                                                                                                                                                                                        {
                                                                                                                                                                                          if ((v111 & 1) != 0 || ((v926 = v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v929 = v1615[1] == (llvm::CallBase *)0x6470762E7A6B7361) : (v929 = 0), v929 ? (v930 = *(llvm::CallBase **)((char *)v1615 + 14) == (llvm::CallBase *)0x2E64737377706470) : (v930 = 0), !v930 && (*v1615 == (llvm::CallBase *)0x6D2E323135787661 ? (v931 = v1615[1] == (llvm::CallBase *)0x706470762E6B7361) : (v931 = 0), v931 ? (v932 = *(llvm::CallBase **)((char *)v1615 + 14) == (llvm::CallBase *)0x2E73647373777064) : (v932 = 0), !v932)))
                                                                                                                                                                                          {
                                                                                                                                                                                            if ((v622 & 1) != 0 || ((v926 = v1615, *v1615 == (llvm::CallBase *)0x6D2E323135787661) ? (v933 = v1615[1] == (llvm::CallBase *)0x6470762E7A6B7361) : (v933 = 0), v933 ? (v934 = *(llvm::CallBase **)((char *)v1615 + 15) == (llvm::CallBase *)0x2E73647373777064) : (v934 = 0), !v934))
                                                                                                                                                                                            {
                                                                                                                                                                                              if (v105 == 12)
                                                                                                                                                                                              {
                                                                                                                                                                                                if ((*v34 != (llvm::CallBase *)0x7972726163646461 || *((_DWORD *)v34 + 2) != 842233134) && (*v34 != (llvm::CallBase *)0x7972726163646461 || *((_DWORD *)v34 + 2) != 875984174))
                                                                                                                                                                                                  goto LABEL_3292;
                                                                                                                                                                                              }
                                                                                                                                                                                              else
                                                                                                                                                                                              {
                                                                                                                                                                                                if (v105 != 13)
                                                                                                                                                                                                {
                                                                                                                                                                                                  if ((v634 & 1) != 0)
                                                                                                                                                                                                  {
LABEL_3296:
                                                                                                                                                                                                    v7 = v1635;
                                                                                                                                                                                                    goto LABEL_159;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  goto LABEL_3292;
                                                                                                                                                                                                }
                                                                                                                                                                                                if ((*v34 != (llvm::CallBase *)0x7972726163646461 || *(llvm::CallBase **)((char *)v34 + 5) != (llvm::CallBase *)0x3233752E78797272) && (*v34 != (llvm::CallBase *)0x7972726163646461 || *(llvm::CallBase **)((char *)v34 + 5) != (llvm::CallBase *)0x3436752E78797272) && (*v34 != (llvm::CallBase *)0x6F72726F62627573 || *(llvm::CallBase **)((char *)v34 + 5) != (llvm::CallBase *)0x3233752E776F7272) && (*v34 != (llvm::CallBase *)0x6F72726F62627573 || *(llvm::CallBase **)((char *)v34 + 5) != (llvm::CallBase *)0x3436752E776F7272))
                                                                                                                                                                                                {
LABEL_3292:
                                                                                                                                                                                                  if (*v1615 != (llvm::CallBase *)0x6D2E323135787661 || *((_DWORD *)v1615 + 2) != 778793825)
                                                                                                                                                                                                    goto LABEL_3296;
                                                                                                                                                                                                  v7 = v1635;
                                                                                                                                                                                                  if ((upgradeAVX512MaskToSelect((uint64_t)v34, v105, (llvm::IRBuilderBase *)v1634, (uint64_t)v1620, &ShuffleVector) & 1) == 0)
                                                                                                                                                                                                    goto LABEL_159;
LABEL_1363:
                                                                                                                                                                                                  AlignedLoad = (uint64_t *)ShuffleVector;
                                                                                                                                                                                                  goto LABEL_683;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              v1591 = *(unsigned __int8 *)v1615;
                                                                                                                                                                                              if (v1591 == 115)
                                                                                                                                                                                              {
                                                                                                                                                                                                if (*((_BYTE *)v1615 + v105 - 1) == 50)
                                                                                                                                                                                                {
                                                                                                                                                                                                  v1593 = 11458;
                                                                                                                                                                                                  goto LABEL_3309;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              else if (v1591 == 97)
                                                                                                                                                                                              {
                                                                                                                                                                                                v1592 = *((unsigned __int8 *)v1615 + v105 - 1);
                                                                                                                                                                                                if (v1592 == 50)
                                                                                                                                                                                                {
                                                                                                                                                                                                  v1593 = 10199;
                                                                                                                                                                                                  goto LABEL_3309;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v1592 == 52)
                                                                                                                                                                                                {
                                                                                                                                                                                                  v1593 = 10200;
LABEL_3309:
                                                                                                                                                                                                  v1598 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                  v1631[0] = *v1598;
                                                                                                                                                                                                  v1631[1] = v1598[4];
                                                                                                                                                                                                  *(_QWORD *)&v1632 = v1598[8];
                                                                                                                                                                                                  v1599 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40), v1593, 0, 0);
                                                                                                                                                                                                  if (v1599)
                                                                                                                                                                                                    v1600 = *(_QWORD *)(v1599 + 24);
                                                                                                                                                                                                  else
                                                                                                                                                                                                    v1600 = 0;
                                                                                                                                                                                                  LOWORD(v1630) = 257;
                                                                                                                                                                                                  v1601 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1600, v1599, (uint64_t *)v1631, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                                  LODWORD(__p) = 1;
                                                                                                                                                                                                  LOWORD(v1630) = 257;
                                                                                                                                                                                                  v1602 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1634, v1601, (unsigned int *)&__p, 1, (uint64_t)&__src);
                                                                                                                                                                                                  v1603 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[12];
                                                                                                                                                                                                  v1604 = llvm::PointerType::get((llvm::PointerType **)*v1602, 0);
                                                                                                                                                                                                  LOWORD(v1630) = 257;
                                                                                                                                                                                                  v1605 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1603, v1604, (uint64_t)&__src);
                                                                                                                                                                                                  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1634, v1602, (uint64_t)v1605, 256, 0);
                                                                                                                                                                                                  LODWORD(__p) = 0;
                                                                                                                                                                                                  LOWORD(v1630) = 257;
                                                                                                                                                                                                  v1606 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1634, v1601, (unsigned int *)&__p, 1, (uint64_t)&__src);
                                                                                                                                                                                                  llvm::Value::doRAUW(v1620, (llvm::Value *)v1606, (llvm::Value *)1);
                                                                                                                                                                                                  ShuffleVector = 0;
                                                                                                                                                                                                  v7 = v1635;
                                                                                                                                                                                                  goto LABEL_1106;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              v1593 = 11459;
                                                                                                                                                                                              goto LABEL_3309;
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                        v1560 = *((unsigned __int8 *)v926 + 11);
                                                                                                                                                                                        v1576 = 20;
                                                                                                                                                                                        if (v1560 == 122)
                                                                                                                                                                                          v1576 = 21;
                                                                                                                                                                                        v1577 = *((unsigned __int8 *)v926 + v1576);
                                                                                                                                                                                        v1579 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                                                                                                                        if ((_BYTE)v1578)
                                                                                                                                                                                        if (v1579 == 128 && v1577 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10924;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1579 == 256 && v1577 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10925;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1579 == 512 && v1577 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10926;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        v1607 = v1577 != 115;
                                                                                                                                                                                        if (v1579 == 128 && v1577 == 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1565 = 10927;
                                                                                                                                                                                          goto LABEL_3327;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1579 != 256)
                                                                                                                                                                                          v1607 = 1;
                                                                                                                                                                                        v1596 = !v1607;
                                                                                                                                                                                        v1597 = 10928;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v1596)
                                                                                                                                                                                      v1565 = v1597;
                                                                                                                                                                                    else
                                                                                                                                                                                      v1565 = v1597 + 1;
LABEL_3327:
                                                                                                                                                                                    v1608 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                                                    v1631[0] = *v1608;
                                                                                                                                                                                    v1631[1] = v1608[4];
                                                                                                                                                                                    *(_QWORD *)&v1632 = v1608[8];
                                                                                                                                                                                    v1609 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40), v1565, 0, 0);
                                                                                                                                                                                    if (v1609)
                                                                                                                                                                                      v1610 = *(_QWORD *)(v1609 + 24);
                                                                                                                                                                                    else
                                                                                                                                                                                      v1610 = 0;
                                                                                                                                                                                    LOWORD(v1630) = 257;
                                                                                                                                                                                    v1611 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1610, v1609, (uint64_t *)v1631, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                    ShuffleVector = (llvm::Value *)v1611;
                                                                                                                                                                                    v1519 = v1620;
                                                                                                                                                                                    if (v1560 == 122)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1520 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1620, v1612);
                                                                                                                                                                                      goto LABEL_3081;
                                                                                                                                                                                    }
                                                                                                                                                                                    v1265 = (llvm::Value *)v1611;
                                                                                                                                                                                    v1613 = *((_DWORD *)v1620 + 5) & 0x7FFFFFF;
                                                                                                                                                                                    v1521 = -v1613;
                                                                                                                                                                                    v1523 = (char *)v1620 - 32 * v1613;
                                                                                                                                                                                    goto LABEL_3333;
                                                                                                                                                                                  }
                                                                                                                                                                                  v1531 = v1620;
                                                                                                                                                                                  v1532 = *(llvm::Type **)v1620;
                                                                                                                                                                                  v1534 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1620);
                                                                                                                                                                                  if ((_BYTE)v1533)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1531 = v1620;
                                                                                                                                                                                    v1532 = *(llvm::Type **)v1620;
                                                                                                                                                                                  }
                                                                                                                                                                                  if ((*((_DWORD *)v1532 + 2) & 0xFE) == 0x12)
                                                                                                                                                                                    v1532 = (llvm::Type *)**((_QWORD **)v1532 + 2);
                                                                                                                                                                                  v1535 = llvm::Type::getPrimitiveSizeInBits(v1532);
                                                                                                                                                                                  if (v1534 == 128 && v1535 == 32)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1536 = 11154;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1534 == 256 && v1535 == 32)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1536 = 11155;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1535 == 64 && v1534 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1536 = 11152;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1536 = 11153;
                                                                                                                                                                                  }
                                                                                                                                                                                  v1567 = (llvm::hashing::detail::hash_state **)((char *)v1531 - 32 * (*((_DWORD *)v1531 + 5) & 0x7FFFFFF));
                                                                                                                                                                                  v1631[0] = *v1567;
                                                                                                                                                                                  v1631[1] = v1567[4];
                                                                                                                                                                                  v1568 = v1567[8];
                                                                                                                                                                                  LOWORD(v1630) = 257;
                                                                                                                                                                                  *(_QWORD *)&v1632 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, v1568, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                  v1569 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v1536, 0, 0);
                                                                                                                                                                                  v1144 = v1569;
                                                                                                                                                                                  if (v1569)
                                                                                                                                                                                    v1145 = *(_QWORD *)(v1569 + 24);
                                                                                                                                                                                  else
                                                                                                                                                                                    v1145 = 0;
                                                                                                                                                                                  goto LABEL_2643;
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    v1468 = *((unsigned __int8 *)v34 + 11);
                                                                                                                                                                    v1469 = v1468 == 51 || v1468 == 122;
                                                                                                                                                                    v1470 = v1469;
                                                                                                                                                                    v1471 = 12;
                                                                                                                                                                    if (v1469)
                                                                                                                                                                      v1471 = 13;
                                                                                                                                                                    if (v105 < v1471)
                                                                                                                                                                      v1471 = v105;
                                                                                                                                                                    v1472 = (char *)v34 + v1471;
                                                                                                                                                                    v1615 = (llvm::CallBase **)((char *)v34 + v1471);
                                                                                                                                                                    v1616 = v105 - v1471;
                                                                                                                                                                    v1473 = *((unsigned __int8 *)v34 + v1471 + 2);
                                                                                                                                                                    v1474 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                                    v1475 = *(uint64_t **)v1474;
                                                                                                                                                                    v1476 = (uint64_t *)*((_QWORD *)v1474 + 4);
                                                                                                                                                                    v1477 = (uint64_t *)*((_QWORD *)v1474 + 8);
                                                                                                                                                                    if (v1473 == 110)
                                                                                                                                                                      v1478 = 4;
                                                                                                                                                                    else
                                                                                                                                                                      v1478 = 3;
                                                                                                                                                                    v1479 = v1472[v1478];
                                                                                                                                                                    if (v1473 == 110 && v1470)
                                                                                                                                                                    {
                                                                                                                                                                      LOWORD(v1630) = 257;
                                                                                                                                                                      v1475 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1475, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1473 != 110)
                                                                                                                                                                    {
LABEL_2936:
                                                                                                                                                                      if (v1479 == 115)
                                                                                                                                                                      {
                                                                                                                                                                        LOWORD(v1630) = 257;
                                                                                                                                                                        v1477 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1477, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                      }
                                                                                                                                                                      if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0xA0)
                                                                                                                                                                        goto LABEL_2943;
                                                                                                                                                                      v1481 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                      if (*(_BYTE *)(v1481 + 16) != 16)
                                                                                                                                                                        goto LABEL_2955;
                                                                                                                                                                      v1482 = (_QWORD *)(v1481 + 24);
                                                                                                                                                                      if (*(_DWORD *)(v1481 + 32) >= 0x41u)
                                                                                                                                                                        v1482 = (_QWORD *)*v1482;
                                                                                                                                                                      if (*v1482 == 4)
                                                                                                                                                                      {
LABEL_2943:
                                                                                                                                                                        v1483 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40);
                                                                                                                                                                        __src = (void *)*v1475;
                                                                                                                                                                        v1484 = llvm::Intrinsic::getDeclaration(v1483, 142, (BOOL **)&__src, 1);
                                                                                                                                                                        v1485 = v1484;
                                                                                                                                                                        if (v1484)
                                                                                                                                                                          v1486 = *(_QWORD *)(v1484 + 24);
                                                                                                                                                                        else
                                                                                                                                                                          v1486 = 0;
                                                                                                                                                                        v1631[0] = (llvm::hashing::detail::hash_state *)v1475;
                                                                                                                                                                        v1631[1] = (llvm::hashing::detail::hash_state *)v1476;
                                                                                                                                                                        *(_QWORD *)&v1632 = v1477;
                                                                                                                                                                        LOWORD(v1630) = 257;
                                                                                                                                                                        v1499 = 3;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
LABEL_2955:
                                                                                                                                                                        if (*((_BYTE *)v1615 + v1616 - 5) == 115)
                                                                                                                                                                          v1489 = 10909;
                                                                                                                                                                        else
                                                                                                                                                                          v1489 = 10908;
                                                                                                                                                                        v1490 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v1489, 0, 0);
                                                                                                                                                                        v1485 = v1490;
                                                                                                                                                                        if (v1490)
                                                                                                                                                                          v1486 = *(_QWORD *)(v1490 + 24);
                                                                                                                                                                        else
                                                                                                                                                                          v1486 = 0;
                                                                                                                                                                        v1631[0] = (llvm::hashing::detail::hash_state *)v1475;
                                                                                                                                                                        v1631[1] = (llvm::hashing::detail::hash_state *)v1476;
                                                                                                                                                                        *(_QWORD *)&v1632 = v1477;
                                                                                                                                                                        *((_QWORD *)&v1632 + 1) = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                        LOWORD(v1630) = 257;
                                                                                                                                                                        v1499 = 4;
                                                                                                                                                                      }
                                                                                                                                                                      v1265 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1486, v1485, (uint64_t *)v1631, v1499, (uint64_t)&__src, 0);
                                                                                                                                                                      ShuffleVector = v1265;
                                                                                                                                                                      v1519 = v1620;
                                                                                                                                                                      if (v1468 == 122)
                                                                                                                                                                      {
                                                                                                                                                                        llvm::Constant::getNullValue(*(_QWORD *)v1620);
LABEL_3081:
                                                                                                                                                                        v1268 = (llvm::Value *)v1520;
                                                                                                                                                                        v1519 = v1620;
                                                                                                                                                                        v1265 = ShuffleVector;
                                                                                                                                                                        v1521 = -(uint64_t)(*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
LABEL_3334:
                                                                                                                                                                        v1267 = (unsigned __int8 *)*((_QWORD *)v1519 + 4 * v1521 + 12);
                                                                                                                                                                        goto LABEL_2554;
                                                                                                                                                                      }
                                                                                                                                                                      v1522 = *((_DWORD *)v1620 + 5) & 0x7FFFFFF;
                                                                                                                                                                      v1521 = -v1522;
                                                                                                                                                                      v1523 = (char *)v1620 - 32 * v1522;
                                                                                                                                                                      if (v1468 == 51)
                                                                                                                                                                      {
                                                                                                                                                                        v1268 = (llvm::Value *)*((_QWORD *)v1523 + 8);
                                                                                                                                                                        goto LABEL_3334;
                                                                                                                                                                      }
LABEL_3333:
                                                                                                                                                                      v1268 = *(llvm::Value **)v1523;
                                                                                                                                                                      goto LABEL_3334;
                                                                                                                                                                    }
                                                                                                                                                                    if (v1468 != 51 && v1468 != 122)
                                                                                                                                                                    {
                                                                                                                                                                      LOWORD(v1630) = 257;
                                                                                                                                                                      v1476 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1476, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                    }
                                                                                                                                                                    goto LABEL_2936;
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                              v1416 = *((unsigned __int8 *)v34 + 11);
                                                                                                                                                              v1417 = v1416 == 51 || v1416 == 122;
                                                                                                                                                              v1418 = v1417;
                                                                                                                                                              v1419 = 12;
                                                                                                                                                              if (v1417)
                                                                                                                                                                v1419 = 13;
                                                                                                                                                              if (v105 < v1419)
                                                                                                                                                                v1419 = v105;
                                                                                                                                                              v1420 = (char *)v34 + v1419;
                                                                                                                                                              v1615 = (llvm::CallBase **)((char *)v34 + v1419);
                                                                                                                                                              v1616 = v105 - v1419;
                                                                                                                                                              v1421 = *((unsigned __int8 *)v34 + v1419 + 2);
                                                                                                                                                              v1422 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                              v1423 = *(uint64_t **)v1422;
                                                                                                                                                              v1424 = (uint64_t *)*((_QWORD *)v1422 + 4);
                                                                                                                                                              v1425 = (uint64_t *)*((_QWORD *)v1422 + 8);
                                                                                                                                                              if (v1421 == 110)
                                                                                                                                                                v1426 = 4;
                                                                                                                                                              else
                                                                                                                                                                v1426 = 3;
                                                                                                                                                              v1427 = v1420[v1426];
                                                                                                                                                              if (v1421 == 110 && v1418)
                                                                                                                                                              {
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1423 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1423, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
                                                                                                                                                              else if (v1421 != 110)
                                                                                                                                                              {
                                                                                                                                                                goto LABEL_2849;
                                                                                                                                                              }
                                                                                                                                                              if (v1416 != 51 && v1416 != 122)
                                                                                                                                                              {
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1424 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1424, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
LABEL_2849:
                                                                                                                                                              if (v1427 == 115)
                                                                                                                                                              {
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1425 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1425, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
                                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                                              v1430 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1423, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                                              v1432 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1424, (const llvm::Twine *)&__src, v1431);
                                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                                              v1434 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1425, (const llvm::Twine *)&__src, v1433);
                                                                                                                                                              v1435 = v1434;
                                                                                                                                                              v1436 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                              if (*(_BYTE *)(v1436 + 16) != 16)
                                                                                                                                                                goto LABEL_2857;
                                                                                                                                                              v1437 = (_QWORD *)(v1436 + 24);
                                                                                                                                                              if (*(_DWORD *)(v1436 + 32) >= 0x41u)
                                                                                                                                                                v1437 = (_QWORD *)*v1437;
                                                                                                                                                              if (*v1437 == 4)
                                                                                                                                                              {
                                                                                                                                                                v1438 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40);
                                                                                                                                                                __src = (void *)*v1430;
                                                                                                                                                                v1439 = llvm::Intrinsic::getDeclaration(v1438, 142, (BOOL **)&__src, 1);
                                                                                                                                                                v1440 = v1439;
                                                                                                                                                                if (v1439)
                                                                                                                                                                  v1441 = *(_QWORD *)(v1439 + 24);
                                                                                                                                                                else
                                                                                                                                                                  v1441 = 0;
                                                                                                                                                                v1631[0] = (llvm::hashing::detail::hash_state *)v1430;
                                                                                                                                                                v1631[1] = (llvm::hashing::detail::hash_state *)v1432;
                                                                                                                                                                *(_QWORD *)&v1632 = v1435;
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1480 = 3;
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
LABEL_2857:
                                                                                                                                                                v1631[0] = (llvm::hashing::detail::hash_state *)v1430;
                                                                                                                                                                v1631[1] = (llvm::hashing::detail::hash_state *)v1432;
                                                                                                                                                                *(_QWORD *)&v1632 = v1434;
                                                                                                                                                                *((_QWORD *)&v1632 + 1) = v1436;
                                                                                                                                                                if (*((_BYTE *)v1615 + v1616 - 1) == 100)
                                                                                                                                                                  v1442 = 10907;
                                                                                                                                                                else
                                                                                                                                                                  v1442 = 10906;
                                                                                                                                                                v1443 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40), v1442, 0, 0);
                                                                                                                                                                v1440 = v1443;
                                                                                                                                                                if (v1443)
                                                                                                                                                                  v1441 = *(_QWORD *)(v1443 + 24);
                                                                                                                                                                else
                                                                                                                                                                  v1441 = 0;
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1480 = 4;
                                                                                                                                                              }
                                                                                                                                                              v1500 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1441, v1440, (uint64_t *)v1631, v1480, (uint64_t)&__src, 0);
                                                                                                                                                              ShuffleVector = (llvm::Value *)v1500;
                                                                                                                                                              if (v1416 == 122)
                                                                                                                                                              {
                                                                                                                                                                llvm::Constant::getNullValue(*v1500);
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
                                                                                                                                                                if (v1416 == 51)
                                                                                                                                                                  v1502 = (const llvm::Twine *)v1435;
                                                                                                                                                                else
                                                                                                                                                                  v1502 = (const llvm::Twine *)v1430;
                                                                                                                                                                if (v1427 != 115 || v1416 != 51)
                                                                                                                                                                  goto LABEL_3039;
                                                                                                                                                                v1503 = (llvm::Value *)((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                                v1501 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1503, (const llvm::Twine *)&__src, v1502);
                                                                                                                                                              }
                                                                                                                                                              v1502 = (const llvm::Twine *)v1501;
LABEL_3039:
                                                                                                                                                              v963 = (llvm::Value *)EmitX86ScalarSelect((llvm::IRBuilderBase *)v1634, ((unsigned __int8 **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[12], ShuffleVector, v1502);
                                                                                                                                                              ShuffleVector = v963;
                                                                                                                                                              v964 = (llvm::Value *)*((_QWORD *)v1620 + 8 * (unint64_t)(v1416 == 51) + -4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                              LOWORD(v1630) = 257;
LABEL_2060:
                                                                                                                                                              InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1634, v964, v963, (const llvm::Twine *)&__src, v962);
                                                                                                                                                              goto LABEL_1585;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          v1351 = *((unsigned __int8 *)v34 + 6);
                                                                                                                                                          v1352 = 7;
                                                                                                                                                          if (v1351 == 110)
                                                                                                                                                            v1352 = 8;
                                                                                                                                                          v1353 = 11;
                                                                                                                                                          if (v1351 == 110)
                                                                                                                                                            v1353 = 12;
                                                                                                                                                          v1354 = *((unsigned __int8 *)v34 + v1353);
                                                                                                                                                          v1355 = *((unsigned __int8 *)v34 + v1352);
                                                                                                                                                          v1356 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                          v1357 = *(llvm::Value **)v1356;
                                                                                                                                                          v1631[0] = *(llvm::hashing::detail::hash_state **)v1356;
                                                                                                                                                          v1358 = (llvm::hashing::detail::hash_state *)*((_QWORD *)v1356 + 4);
                                                                                                                                                          v1631[1] = v1358;
                                                                                                                                                          v1359 = (uint64_t *)*((_QWORD *)v1356 + 8);
                                                                                                                                                          *(_QWORD *)&v1632 = v1359;
                                                                                                                                                          if (v1354 == 115)
                                                                                                                                                          {
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            v1357 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1357, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                                                                                                                            v1631[0] = v1357;
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            v1361 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1358, (const llvm::Twine *)&__src, v1360);
                                                                                                                                                            v1631[1] = (llvm::hashing::detail::hash_state *)v1361;
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            v1359 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1359, (const llvm::Twine *)&__src, v1362);
                                                                                                                                                            *(_QWORD *)&v1632 = v1359;
                                                                                                                                                            if (v1351 == 110)
                                                                                                                                                            {
                                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                                              v1631[1] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1361, (const llvm::Twine *)&__src, 0);
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else if (v1351 == 110)
                                                                                                                                                          {
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            v1357 = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, v1357, (const llvm::Twine *)&__src, 0);
                                                                                                                                                            v1631[0] = v1357;
                                                                                                                                                          }
                                                                                                                                                          if (v1355 == 115)
                                                                                                                                                          {
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            *(_QWORD *)&v1632 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1359, (const llvm::Twine *)&__src, 0);
                                                                                                                                                          }
                                                                                                                                                          v1377 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1620 + 5) + 56) + 40);
                                                                                                                                                          __p = *(void **)v1357;
                                                                                                                                                          v1378 = llvm::Intrinsic::getDeclaration(v1377, 142, (BOOL **)&__p, 1);
                                                                                                                                                          if (v1378)
                                                                                                                                                            v1379 = *(_QWORD *)(v1378 + 24);
                                                                                                                                                          else
                                                                                                                                                            v1379 = 0;
                                                                                                                                                          LOWORD(v1630) = 257;
                                                                                                                                                          v1406 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1379, v1378, (uint64_t *)v1631, 3, (uint64_t)&__src, 0);
                                                                                                                                                          ShuffleVector = (llvm::Value *)v1406;
                                                                                                                                                          if (v1354 == 115)
                                                                                                                                                          {
                                                                                                                                                            v1408 = (llvm::Value *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                            LOWORD(v1630) = 257;
                                                                                                                                                            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1634, v1408, (llvm::Value *)v1406, (const llvm::Twine *)&__src, v1407);
                                                                                                                                                          }
LABEL_2197:
                                                                                                                                                          v7 = v1635;
                                                                                                                                                          goto LABEL_1363;
                                                                                                                                                        }
                                                                                                                                                        v1334 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                                        if (v1334 == 105)
                                                                                                                                                        {
                                                                                                                                                          v1335 = *((unsigned __int8 *)v34 + 18);
                                                                                                                                                          if (*((_BYTE *)v34 + 17) == 46)
                                                                                                                                                          {
                                                                                                                                                            v1336 = 0;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            v1336 = 0;
                                                                                                                                                            v1487 = 19;
                                                                                                                                                            if (v1335 != 46)
                                                                                                                                                              v1487 = 20;
                                                                                                                                                            v1335 = *((unsigned __int8 *)v34 + v1487);
                                                                                                                                                          }
                                                                                                                                                          v1447 = 1;
                                                                                                                                                          goto LABEL_3092;
                                                                                                                                                        }
                                                                                                                                                        v1447 = v105 >= 0x13 && *((unsigned __int8 *)v34 + 18) == 105;
                                                                                                                                                        v1336 = v1334 == 118;
                                                                                                                                                        v1488 = *((unsigned __int8 *)v34 + 17);
                                                                                                                                                        if (v1334 == 46)
                                                                                                                                                        {
                                                                                                                                                          v1335 = *((unsigned __int8 *)v34 + 17);
                                                                                                                                                          goto LABEL_3092;
                                                                                                                                                        }
                                                                                                                                                        v1335 = *((unsigned __int8 *)v34 + 18);
                                                                                                                                                        if (v1488 == 46)
                                                                                                                                                        {
LABEL_3092:
                                                                                                                                                          if (*(_DWORD *)((char *)v34 + v105 - 4) == 942813486)
                                                                                                                                                          {
                                                                                                                                                            if (v1335 == 113)
                                                                                                                                                            {
                                                                                                                                                              if (v1336)
                                                                                                                                                                v1492 = 10815;
                                                                                                                                                              else
                                                                                                                                                                v1492 = 10805;
                                                                                                                                                              v1493 = !v1447;
                                                                                                                                                              v1494 = 10810;
                                                                                                                                                              goto LABEL_3120;
                                                                                                                                                            }
                                                                                                                                                            v1495 = !v1447;
                                                                                                                                                            if (v1335 == 100)
                                                                                                                                                            {
                                                                                                                                                              v1496 = 11366;
                                                                                                                                                              v1497 = 11368;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              v1496 = 11367;
                                                                                                                                                              v1497 = 11369;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else if (*(_DWORD *)((char *)v34 + v105 - 4) == 909455918)
                                                                                                                                                          {
                                                                                                                                                            if (v1335 == 113)
                                                                                                                                                            {
                                                                                                                                                              if (v1336)
                                                                                                                                                                v1492 = 10816;
                                                                                                                                                              else
                                                                                                                                                                v1492 = 10806;
                                                                                                                                                              v1493 = !v1447;
                                                                                                                                                              v1494 = 10811;
                                                                                                                                                              goto LABEL_3120;
                                                                                                                                                            }
                                                                                                                                                            v1495 = !v1447;
                                                                                                                                                            if (v1335 == 100)
                                                                                                                                                            {
                                                                                                                                                              v1496 = 10353;
                                                                                                                                                              v1497 = 10355;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              v1496 = 10354;
                                                                                                                                                              v1497 = 10356;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            if (v1335 == 113)
                                                                                                                                                            {
                                                                                                                                                              if (v1336)
                                                                                                                                                                v1492 = 10817;
                                                                                                                                                              else
                                                                                                                                                                v1492 = 10807;
                                                                                                                                                              v1493 = !v1447;
                                                                                                                                                              v1494 = 10812;
                                                                                                                                                              goto LABEL_3120;
                                                                                                                                                            }
                                                                                                                                                            if (v1335 == 100)
                                                                                                                                                            {
                                                                                                                                                              if (v1336)
                                                                                                                                                                v1492 = 10814;
                                                                                                                                                              else
                                                                                                                                                                v1492 = 10804;
                                                                                                                                                              v1493 = !v1447;
                                                                                                                                                              v1494 = 10809;
LABEL_3120:
                                                                                                                                                              if (v1493)
                                                                                                                                                                v1491 = v1492;
                                                                                                                                                              else
                                                                                                                                                                v1491 = v1494;
                                                                                                                                                              goto LABEL_3127;
                                                                                                                                                            }
                                                                                                                                                            v1495 = !v1447;
                                                                                                                                                            v1496 = 10808;
                                                                                                                                                            v1497 = 10813;
                                                                                                                                                          }
LABEL_3124:
                                                                                                                                                          if (v1495)
                                                                                                                                                            v1491 = v1496;
                                                                                                                                                          else
                                                                                                                                                            v1491 = v1497;
                                                                                                                                                          goto LABEL_3127;
                                                                                                                                                        }
                                                                                                                                                        if (v1335 == 46)
                                                                                                                                                          v1335 = *((unsigned __int8 *)v34 + 19);
                                                                                                                                                        else
                                                                                                                                                          v1335 = *((unsigned __int8 *)v34 + 20);
                                                                                                                                                        if (v1334 != 118)
                                                                                                                                                        {
                                                                                                                                                          v1336 = 0;
                                                                                                                                                          goto LABEL_3092;
                                                                                                                                                        }
                                                                                                                                                        if (v1335 == 104)
                                                                                                                                                        {
                                                                                                                                                          if (v1488 == 49)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10819;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          if (v1488 == 56)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10818;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        else if (v1335 == 115)
                                                                                                                                                        {
                                                                                                                                                          if (v1488 == 52)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10357;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          if (v1488 == 56)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10358;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        v1491 = 10820;
                                                                                                                                                        goto LABEL_3127;
                                                                                                                                                      }
                                                                                                                                                      v1368 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                                      if (v1368 == 105)
                                                                                                                                                      {
                                                                                                                                                        v1369 = *((unsigned __int8 *)v34 + 18);
                                                                                                                                                        if (*((_BYTE *)v34 + 17) == 46)
                                                                                                                                                        {
                                                                                                                                                          v1370 = 0;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1370 = 0;
                                                                                                                                                          v1458 = 19;
                                                                                                                                                          if (v1369 != 46)
                                                                                                                                                            v1458 = 20;
                                                                                                                                                          v1369 = *((unsigned __int8 *)v34 + v1458);
                                                                                                                                                        }
                                                                                                                                                        v1409 = 1;
                                                                                                                                                        goto LABEL_3005;
                                                                                                                                                      }
                                                                                                                                                      v1409 = v105 >= 0x13 && *((unsigned __int8 *)v34 + 18) == 105;
                                                                                                                                                      v1370 = v1368 == 118;
                                                                                                                                                      v1459 = *((unsigned __int8 *)v34 + 17);
                                                                                                                                                      if (v1368 == 46)
                                                                                                                                                      {
                                                                                                                                                        v1369 = *((unsigned __int8 *)v34 + 17);
                                                                                                                                                        goto LABEL_3005;
                                                                                                                                                      }
                                                                                                                                                      v1369 = *((unsigned __int8 *)v34 + 18);
                                                                                                                                                      if (v1459 == 46)
                                                                                                                                                      {
LABEL_3005:
                                                                                                                                                        if (*(_DWORD *)((char *)v34 + v105 - 4) == 942813486)
                                                                                                                                                        {
                                                                                                                                                          if (v1369 == 113)
                                                                                                                                                          {
                                                                                                                                                            v1495 = !v1409;
                                                                                                                                                            v1496 = 11371;
                                                                                                                                                            v1497 = 11374;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            v1495 = !v1409;
                                                                                                                                                            if (v1369 == 100)
                                                                                                                                                            {
                                                                                                                                                              v1496 = 11370;
                                                                                                                                                              v1497 = 11373;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              v1496 = 11372;
                                                                                                                                                              v1497 = 11375;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        else if (*(_DWORD *)((char *)v34 + v105 - 4) == 909455918)
                                                                                                                                                        {
                                                                                                                                                          if (v1369 == 113)
                                                                                                                                                          {
                                                                                                                                                            v1495 = !v1409;
                                                                                                                                                            v1496 = 10360;
                                                                                                                                                            v1497 = 10363;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            v1495 = !v1409;
                                                                                                                                                            if (v1369 == 100)
                                                                                                                                                            {
                                                                                                                                                              v1496 = 10359;
                                                                                                                                                              v1497 = 10362;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              v1496 = 10361;
                                                                                                                                                              v1497 = 10364;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          if (v1369 == 113)
                                                                                                                                                          {
                                                                                                                                                            if (v1370)
                                                                                                                                                              v1492 = 10828;
                                                                                                                                                            else
                                                                                                                                                              v1492 = 10822;
                                                                                                                                                            v1493 = !v1409;
                                                                                                                                                            v1494 = 10825;
                                                                                                                                                            goto LABEL_3120;
                                                                                                                                                          }
                                                                                                                                                          if (v1369 == 100)
                                                                                                                                                          {
                                                                                                                                                            if (v1370)
                                                                                                                                                              v1492 = 10827;
                                                                                                                                                            else
                                                                                                                                                              v1492 = 10821;
                                                                                                                                                            v1493 = !v1409;
                                                                                                                                                            v1494 = 10824;
                                                                                                                                                            goto LABEL_3120;
                                                                                                                                                          }
                                                                                                                                                          v1495 = !v1409;
                                                                                                                                                          v1496 = 10823;
                                                                                                                                                          v1497 = 10826;
                                                                                                                                                        }
                                                                                                                                                        goto LABEL_3124;
                                                                                                                                                      }
                                                                                                                                                      if (v1369 == 46)
                                                                                                                                                        v1369 = *((unsigned __int8 *)v34 + 19);
                                                                                                                                                      else
                                                                                                                                                        v1369 = *((unsigned __int8 *)v34 + 20);
                                                                                                                                                      if (v1368 != 118)
                                                                                                                                                      {
                                                                                                                                                        v1370 = 0;
                                                                                                                                                        goto LABEL_3005;
                                                                                                                                                      }
                                                                                                                                                      switch(v1369)
                                                                                                                                                      {
                                                                                                                                                        case 's':
                                                                                                                                                          if (v1459 == 52)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10365;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          if (v1459 == 56)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10366;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          break;
                                                                                                                                                        case 'h':
                                                                                                                                                          if (v1459 == 49)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10830;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          if (v1459 == 56)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10829;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          break;
                                                                                                                                                        case 'd':
                                                                                                                                                          if (v1459 == 50)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10367;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          if (v1459 == 52)
                                                                                                                                                          {
                                                                                                                                                            v1491 = 10368;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          break;
                                                                                                                                                      }
                                                                                                                                                      v1491 = 10831;
                                                                                                                                                      goto LABEL_3127;
                                                                                                                                                    }
                                                                                                                                                    v1348 = *((unsigned __int8 *)v34 + 16);
                                                                                                                                                    if (v1348 == 105)
                                                                                                                                                    {
                                                                                                                                                      v1349 = *((unsigned __int8 *)v34 + 18);
                                                                                                                                                      if (*((_BYTE *)v34 + 17) == 46)
                                                                                                                                                      {
                                                                                                                                                        v1350 = 0;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1350 = 0;
                                                                                                                                                        v1428 = 19;
                                                                                                                                                        if (v1349 != 46)
                                                                                                                                                          v1428 = 20;
                                                                                                                                                        v1349 = *((unsigned __int8 *)v34 + v1428);
                                                                                                                                                      }
                                                                                                                                                      v1375 = 1;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      v1375 = v105 >= 0x13 && *((unsigned __int8 *)v34 + 18) == 105;
                                                                                                                                                      v1350 = v1348 == 118;
                                                                                                                                                      v1429 = *((unsigned __int8 *)v34 + 17);
                                                                                                                                                      if (v1348 == 46)
                                                                                                                                                      {
                                                                                                                                                        v1349 = *((unsigned __int8 *)v34 + 17);
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1349 = *((unsigned __int8 *)v34 + 18);
                                                                                                                                                        if (v1429 != 46)
                                                                                                                                                        {
                                                                                                                                                          if (v1349 == 46)
                                                                                                                                                            v1349 = *((unsigned __int8 *)v34 + 19);
                                                                                                                                                          else
                                                                                                                                                            v1349 = *((unsigned __int8 *)v34 + 20);
                                                                                                                                                          if (v1348 == 118)
                                                                                                                                                          {
                                                                                                                                                            switch(v1349)
                                                                                                                                                            {
                                                                                                                                                              case 's':
                                                                                                                                                                if (v1429 == 52)
                                                                                                                                                                {
                                                                                                                                                                  v1491 = 10349;
                                                                                                                                                                  goto LABEL_3127;
                                                                                                                                                                }
                                                                                                                                                                if (v1429 == 56)
                                                                                                                                                                {
                                                                                                                                                                  v1491 = 10350;
                                                                                                                                                                  goto LABEL_3127;
                                                                                                                                                                }
                                                                                                                                                                break;
                                                                                                                                                              case 'h':
                                                                                                                                                                if (v1429 == 49)
                                                                                                                                                                {
                                                                                                                                                                  v1491 = 10802;
                                                                                                                                                                  goto LABEL_3127;
                                                                                                                                                                }
                                                                                                                                                                if (v1429 == 56)
                                                                                                                                                                {
                                                                                                                                                                  v1491 = 10801;
                                                                                                                                                                  goto LABEL_3127;
                                                                                                                                                                }
                                                                                                                                                                break;
                                                                                                                                                              case 'd':
                                                                                                                                                                if (v1429 == 50)
                                                                                                                                                                {
                                                                                                                                                                  v1491 = 10351;
                                                                                                                                                                  goto LABEL_3127;
                                                                                                                                                                }
                                                                                                                                                                if (v1429 == 52)
                                                                                                                                                                {
                                                                                                                                                                  v1491 = 10352;
LABEL_3127:
                                                                                                                                                                  InsertElement = UpgradeX86MaskedShift((llvm::IRBuilderBase *)v1634, (uint64_t)v1620, v1491);
                                                                                                                                                                  goto LABEL_1585;
                                                                                                                                                                }
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                            v1491 = 10803;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          v1350 = 0;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    if (*(_DWORD *)((char *)v34 + v105 - 4) == 942813486)
                                                                                                                                                    {
                                                                                                                                                      if (v1349 == 113)
                                                                                                                                                      {
                                                                                                                                                        v1495 = !v1375;
                                                                                                                                                        v1496 = 11361;
                                                                                                                                                        v1497 = 11364;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1495 = !v1375;
                                                                                                                                                        if (v1349 == 100)
                                                                                                                                                        {
                                                                                                                                                          v1496 = 11360;
                                                                                                                                                          v1497 = 11363;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1496 = 11362;
                                                                                                                                                          v1497 = 11365;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else if (*(_DWORD *)((char *)v34 + v105 - 4) == 909455918)
                                                                                                                                                    {
                                                                                                                                                      if (v1349 == 113)
                                                                                                                                                      {
                                                                                                                                                        v1495 = !v1375;
                                                                                                                                                        v1496 = 10344;
                                                                                                                                                        v1497 = 10347;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1495 = !v1375;
                                                                                                                                                        if (v1349 == 100)
                                                                                                                                                        {
                                                                                                                                                          v1496 = 10343;
                                                                                                                                                          v1497 = 10346;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1496 = 10345;
                                                                                                                                                          v1497 = 10348;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      if (v1349 == 113)
                                                                                                                                                      {
                                                                                                                                                        if (v1350)
                                                                                                                                                          v1492 = 10800;
                                                                                                                                                        else
                                                                                                                                                          v1492 = 10794;
                                                                                                                                                        v1493 = !v1375;
                                                                                                                                                        v1494 = 10797;
                                                                                                                                                        goto LABEL_3120;
                                                                                                                                                      }
                                                                                                                                                      if (v1349 == 100)
                                                                                                                                                      {
                                                                                                                                                        if (v1350)
                                                                                                                                                          v1492 = 10799;
                                                                                                                                                        else
                                                                                                                                                          v1492 = 10793;
                                                                                                                                                        v1493 = !v1375;
                                                                                                                                                        v1494 = 10796;
                                                                                                                                                        goto LABEL_3120;
                                                                                                                                                      }
                                                                                                                                                      v1495 = !v1375;
                                                                                                                                                      v1496 = 10795;
                                                                                                                                                      v1497 = 10798;
                                                                                                                                                    }
                                                                                                                                                    goto LABEL_3124;
                                                                                                                                                  }
                                                                                                                                                  v1291 = llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::MinMaxTbl[2 * (*((_BYTE *)v34 + 13) == 105) + (*((_BYTE *)v34 + 17) == 100)];
                                                                                                                                                  goto LABEL_2866;
                                                                                                                                                }
                                                                                                                                                if (*(_DWORD *)((char *)v34 + v105 - 4) != 842085678)
                                                                                                                                                {
                                                                                                                                                  v1371 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                                  v1372 = *(BOOL ***)v1371;
                                                                                                                                                  v1373 = (llvm::Value *)*((_QWORD *)v1371 + 4);
                                                                                                                                                  LOWORD(v1630) = 257;
                                                                                                                                                  Add = llvm::IRBuilderBase::CreateFSub((llvm::IRBuilderBase *)v1634, v1372, v1373, (const llvm::Twine *)&__src, 0);
                                                                                                                                                  goto LABEL_2553;
                                                                                                                                                }
                                                                                                                                                v1366 = *((_BYTE *)v34 + 17) == 115;
                                                                                                                                                v1367 = 10893;
LABEL_2863:
                                                                                                                                                if (v1366)
                                                                                                                                                  v1291 = v1367 + 1;
                                                                                                                                                else
                                                                                                                                                  v1291 = v1367;
LABEL_2866:
                                                                                                                                                v1444 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v1291, 0, 0);
                                                                                                                                                if (v1444)
                                                                                                                                                  v1445 = *(_QWORD *)(v1444 + 24);
                                                                                                                                                else
                                                                                                                                                  v1445 = 0;
                                                                                                                                                v1446 = (llvm::hashing::detail::hash_state **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                                v1631[0] = *v1446;
                                                                                                                                                v1631[1] = v1446[4];
                                                                                                                                                *(_QWORD *)&v1632 = v1446[16];
                                                                                                                                                LOWORD(v1630) = 257;
                                                                                                                                                Add = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1445, v1444, (uint64_t *)v1631, 3, (uint64_t)&__src, 0);
                                                                                                                                                goto LABEL_2553;
                                                                                                                                              }
                                                                                                                                              if (*(_DWORD *)((char *)v34 + v105 - 4) == 842085678)
                                                                                                                                              {
                                                                                                                                                v1366 = *((_BYTE *)v34 + 17) == 115;
                                                                                                                                                v1367 = 10763;
                                                                                                                                                goto LABEL_2863;
                                                                                                                                              }
                                                                                                                                              v1363 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                              v1364 = *(BOOL ***)v1363;
                                                                                                                                              v1365 = (llvm::Value *)*((_QWORD *)v1363 + 4);
                                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                                              Add = llvm::IRBuilderBase::CreateFMul((llvm::IRBuilderBase *)v1634, v1364, v1365, (const llvm::Twine *)&__src, 0);
                                                                                                                                            }
                                                                                                                                          }
LABEL_2553:
                                                                                                                                          v1265 = (llvm::Value *)Add;
                                                                                                                                          ShuffleVector = (llvm::Value *)Add;
                                                                                                                                          v1266 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                                          v1267 = (unsigned __int8 *)*((_QWORD *)v1266 + 12);
                                                                                                                                          v1268 = (llvm::Value *)*((_QWORD *)v1266 + 8);
LABEL_2554:
                                                                                                                                          InsertElement = EmitX86Select((llvm::IRBuilderBase *)v1634, v1267, v1265, v1268);
                                                                                                                                          goto LABEL_1585;
                                                                                                                                        }
                                                                                                                                        goto LABEL_2551;
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    v1204 = *(llvm::Type **)v1620;
                                                                                                                                    llvm::VectorType::getInteger(*(_QWORD *)v1620);
                                                                                                                                    v1238 = v1237;
                                                                                                                                    v1239 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                                    LOWORD(v1630) = 257;
                                                                                                                                    v1240 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1239, v1237, (uint64_t)&__src);
                                                                                                                                    v1241 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                                                                                                    v1633 = 257;
                                                                                                                                    v1242 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1241, v1238, (uint64_t)v1631);
                                                                                                                                    v1625 = 257;
                                                                                                                                    Xor = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1240, (llvm::Value *)v1242, (const llvm::Twine *)&__p);
LABEL_2552:
                                                                                                                                    ShuffleVector = (llvm::Value *)Xor;
                                                                                                                                    LOWORD(v1630) = 257;
                                                                                                                                    Add = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, (uint64_t)Xor, (uint64_t)v1204, (uint64_t)&__src);
                                                                                                                                    goto LABEL_2553;
                                                                                                                                  }
                                                                                                                                  goto LABEL_2516;
                                                                                                                                }
                                                                                                                              }
                                                                                                                              v1204 = *(llvm::Type **)v1620;
                                                                                                                              llvm::VectorType::getInteger(*(_QWORD *)v1620);
                                                                                                                              v1206 = v1205;
                                                                                                                              v1207 = *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                              LOWORD(v1630) = 257;
                                                                                                                              v1208 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1207, v1205, (uint64_t)&__src);
                                                                                                                              v1209 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                                                                                              v1633 = 257;
                                                                                                                              v1210 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1209, v1206, (uint64_t)v1631);
                                                                                                                              v1625 = 257;
                                                                                                                              v1211 = (const llvm::Twine *)&__p;
LABEL_2517:
                                                                                                                              Xor = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1208, (llvm::Value *)v1210, v1211);
                                                                                                                              goto LABEL_2552;
                                                                                                                            }
                                                                                                                          }
                                                                                                                          v1123 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                          v1124 = *(_QWORD **)v1123;
                                                                                                                          v1125 = *((_QWORD *)v1123 + 4);
                                                                                                                          v1126 = *(llvm::Type **)v1620;
                                                                                                                          v1127 = *(int *)(*(_QWORD *)v1620 + 32);
                                                                                                                          v1128 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                          if ((*(_DWORD *)(*(_QWORD *)v1620 + 8) & 0xFE) == 0x12)
                                                                                                                            v1126 = (llvm::Type *)**((_QWORD **)v1126 + 2);
                                                                                                                          v1129 = llvm::Type::getPrimitiveSizeInBits(v1126);
                                                                                                                          __src = &v1628;
                                                                                                                          v1627 = 0x4000000000;
                                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1127);
                                                                                                                          v1130 = (int *)__src;
                                                                                                                          if ((_DWORD)v1128)
                                                                                                                          {
                                                                                                                            v1131 = 0;
                                                                                                                            v1132 = 0x80 / v1129;
                                                                                                                            v1133 = (uint64x2_t)vdupq_n_s64(v1132 - 1);
                                                                                                                            v1134 = vdupq_n_s64(2uLL);
                                                                                                                            do
                                                                                                                            {
                                                                                                                              if (v1129 <= 0x80)
                                                                                                                              {
                                                                                                                                v1135 = 0;
                                                                                                                                v1136 = (v1132 >> 1) + v1131;
                                                                                                                                v1137 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  v1138 = vmovn_s64((int64x2_t)vcgeq_u64(v1133, (uint64x2_t)v1137));
                                                                                                                                  if ((v1138.i8[0] & 1) != 0)
                                                                                                                                    v1130[v1135 + v1131] = v1136 + (v1135 >> 1);
                                                                                                                                  if ((v1138.i8[4] & 1) != 0)
                                                                                                                                    v1130[(v1135 | 1) + v1131] = v1136 + (v1135 >> 1) + v1127;
                                                                                                                                  v1135 += 2;
                                                                                                                                  v1137 = vaddq_s64(v1137, v1134);
                                                                                                                                }
                                                                                                                                while ((((_WORD)v1132 + 1) & 0x1FE) != v1135);
                                                                                                                              }
                                                                                                                              v1131 += v1132;
                                                                                                                            }
                                                                                                                            while (v1131 != v1128);
                                                                                                                          }
                                                                                                                        }
                                                                                                                        v1633 = 257;
                                                                                                                        v1166 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1124, v1125, v1130, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                                        ShuffleVector = (llvm::Value *)v1166;
                                                                                                                        v1201 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                        v1168 = (unsigned __int8 *)*((_QWORD *)v1201 + 12);
                                                                                                                        v1169 = (llvm::Value *)*((_QWORD *)v1201 + 8);
                                                                                                                        goto LABEL_2503;
                                                                                                                      }
                                                                                                                    }
                                                                                                                    v1110 = *(llvm::Type **)v1620;
                                                                                                                    v1111 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                    if ((*(_DWORD *)(*(_QWORD *)v1620 + 8) & 0xFE) == 0x12)
                                                                                                                      v1110 = (llvm::Type *)**((_QWORD **)v1110 + 2);
                                                                                                                    v1112 = (_QWORD *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                                                    v1113 = llvm::Type::getPrimitiveSizeInBits(v1110);
                                                                                                                    if ((v846 & 1) != 0)
                                                                                                                    {
                                                                                                                      v1114 = 0;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v1173 = 0x6176783531322E6DLL;
                                                                                                                      v1174 = bswap64((unint64_t)*v34);
                                                                                                                      if (v1174 == 0x6176783531322E6DLL && (v1173 = 0x61736B2E6D6F7673, v1174 = bswap64((unint64_t)v34[1]), v1174 == 0x61736B2E6D6F7673) && (v1173 = 0x6F7673686475702ELL, v1174 = bswap64(*(unint64_t *)((char *)v34 + 13)), v1174 == 0x6F7673686475702ELL))
                                                                                                                      {
                                                                                                                        v1175 = 0;
                                                                                                                      }
                                                                                                                      else if (v1174 < v1173)
                                                                                                                      {
                                                                                                                        v1175 = -1;
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        v1175 = 1;
                                                                                                                      }
                                                                                                                      v1114 = v1175 == 0;
                                                                                                                    }
                                                                                                                    __src = &v1628;
                                                                                                                    v1627 = 0x1000000000;
                                                                                                                    llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1111);
                                                                                                                    v1176 = (int *)__src;
                                                                                                                    if ((_DWORD)v1111)
                                                                                                                    {
                                                                                                                      v1177 = 0;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        if (v1113 <= 0x80)
                                                                                                                        {
                                                                                                                          v1178 = 0;
                                                                                                                          v1179 = 0x80 / v1113;
                                                                                                                          do
                                                                                                                          {
                                                                                                                            v1180 = v1177 + v1178 + v1114;
                                                                                                                            v1176[(v1177 + v1178)] = v1180;
                                                                                                                            v1176[(v1177 + v1178 + 1)] = v1180;
                                                                                                                            v1178 += 2;
                                                                                                                            v1179 -= 2;
                                                                                                                          }
                                                                                                                          while (v1179);
                                                                                                                        }
                                                                                                                        v1177 += 0x80 / v1113;
                                                                                                                      }
                                                                                                                      while (v1177 != (_DWORD)v1111);
                                                                                                                    }
                                                                                                                    v1633 = 257;
                                                                                                                    v797 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1112, (uint64_t)v1112, v1176, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                                    ShuffleVector = v797;
                                                                                                                    v1181 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                    v796 = (unsigned __int8 *)*((_QWORD *)v1181 + 8);
LABEL_2487:
                                                                                                                    v798 = (llvm::Value *)*((_QWORD *)v1181 + 4);
LABEL_1536:
                                                                                                                    ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1634, v796, v797, v798);
                                                                                                                    goto LABEL_1537;
                                                                                                                  }
                                                                                                                }
                                                                                                                v1076 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                                v774 = *(_QWORD **)v1076;
                                                                                                                v1077 = *((_QWORD *)v1076 + 4);
                                                                                                                v1078 = (_QWORD *)(v1077 + 24);
                                                                                                                if (*(_DWORD *)(v1077 + 32) >= 0x41u)
                                                                                                                  v1078 = (_QWORD *)*v1078;
                                                                                                                v1079 = *(_DWORD *)v1078;
                                                                                                                v1080 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                                __src = &v1628;
                                                                                                                v1627 = 0x1000000000;
                                                                                                                llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1080);
                                                                                                                v779 = (int *)__src;
                                                                                                                if ((_DWORD)v1080)
                                                                                                                {
                                                                                                                  v1081 = 0;
                                                                                                                  v1082.i64[0] = 0x300000003;
                                                                                                                  v1082.i64[1] = 0x300000003;
                                                                                                                  v1083 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v1079), (uint32x4_t)xmmword_24AA339C0), v1082);
                                                                                                                  v1084 = (unsigned __int128 *)((char *)__src + 16);
                                                                                                                  do
                                                                                                                  {
                                                                                                                    v1085.i32[0] = v1081;
                                                                                                                    v1085.i32[1] = v1081 + 1;
                                                                                                                    *(v1084 - 1) = (unsigned __int128)vmovn_hight_s64(v1085, (int64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v1081), (int8x16_t)xmmword_24AA339D0));
                                                                                                                    *v1084 = *(_OWORD *)&vorrq_s8(v1083, (int8x16_t)vdupq_n_s32(v1081)) | __PAIR128__(0x400000004, 0x400000004);
                                                                                                                    v1084 += 2;
                                                                                                                    v1081 += 8;
                                                                                                                  }
                                                                                                                  while ((_DWORD)v1080 != (_DWORD)v1081);
                                                                                                                }
                                                                                                              }
LABEL_1534:
                                                                                                              v1633 = 257;
                                                                                                              ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v774, (uint64_t)v774, v779, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                              if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                                                                                                                goto LABEL_1537;
                                                                                                              v795 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                              v796 = (unsigned __int8 *)*((_QWORD *)v795 + 12);
                                                                                                              v797 = ShuffleVector;
                                                                                                              v798 = (llvm::Value *)*((_QWORD *)v795 + 8);
                                                                                                              goto LABEL_1536;
                                                                                                            }
LABEL_2383:
                                                                                                            v1088 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                            v1089 = *((_QWORD *)v1088 + 4);
                                                                                                            v1090 = (_QWORD *)(v1089 + 24);
                                                                                                            if (*(_DWORD *)(v1089 + 32) >= 0x41u)
                                                                                                              v1090 = (_QWORD *)*v1090;
                                                                                                            v1091 = *(_QWORD **)v1088;
                                                                                                            v1092 = *(llvm::Type **)v1620;
                                                                                                            v1093 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                            if ((*(_DWORD *)(*(_QWORD *)v1620 + 8) & 0xFE) == 0x12)
                                                                                                              v1092 = (llvm::Type *)**((_QWORD **)v1092 + 2);
                                                                                                            v1094 = *(_DWORD *)v1090;
                                                                                                            v1095 = llvm::Type::getPrimitiveSizeInBits(v1092);
                                                                                                            __src = &v1628;
                                                                                                            v1627 = 0x800000000;
                                                                                                            llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1093);
                                                                                                            v1096 = (int *)__src;
                                                                                                            if ((_DWORD)v1093)
                                                                                                            {
                                                                                                              v1097 = 0;
                                                                                                              v1098 = 0x40 / v1095;
                                                                                                              v1099 = -1 << (0x40 / v1095);
                                                                                                              v1100 = ~v1099;
                                                                                                              v1101 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                                              v1102 = (uint64x2_t)vdupq_n_s64(v1093 - 1);
                                                                                                              v1103 = vdupq_n_s64(2uLL);
                                                                                                              do
                                                                                                              {
                                                                                                                v1104 = vmovn_s64((int64x2_t)vcgeq_u64(v1102, (uint64x2_t)v1101));
                                                                                                                if ((v1104.i8[0] & 1) != 0)
                                                                                                                  v1096[v1097] = (v1094 >> ((v1098 * v1097) & 6)) & v1100 | v1099 & v1097;
                                                                                                                if ((v1104.i8[4] & 1) != 0)
                                                                                                                  v1096[v1097 + 1] = (v1094 >> ((v1098 * (v1097 | 1)) & 7)) & v1100 | v1099 & (v1097 + 1);
                                                                                                                v1097 += 2;
                                                                                                                v1101 = vaddq_s64(v1101, v1103);
                                                                                                              }
                                                                                                              while (((v1093 + 1) & 0x1FFFFFFFELL) != v1097);
                                                                                                            }
                                                                                                            v1633 = 257;
                                                                                                            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1091, (uint64_t)v1091, v1096, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                                            if (((llvm::CallBase::arg_end(v1620) - ((_QWORD)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x80)
                                                                                                            {
                                                                                                              v1105 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                              v757 = (unsigned __int8 *)*((_QWORD *)v1105 + 12);
                                                                                                              v758 = ShuffleVector;
                                                                                                              v759 = (llvm::Value *)*((_QWORD *)v1105 + 8);
                                                                                                              goto LABEL_1470;
                                                                                                            }
                                                                                                            goto LABEL_2195;
                                                                                                          }
                                                                                                        }
                                                                                                        v651 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                                                                                                        v652 = (unint64_t *)(v651 + 24);
                                                                                                        if (*(_DWORD *)(v651 + 32) >= 0x41u)
                                                                                                          v652 = (unint64_t *)*v652;
                                                                                                        v653 = *v652;
                                                                                                        v654 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                        __src = &v1628;
                                                                                                        v1627 = 0x800000000;
                                                                                                        llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v654);
                                                                                                        v656 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                        v657 = *(_QWORD *)&v656[v653 & 0x20];
                                                                                                        if ((v653 & 8) != 0)
                                                                                                          v658 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1620, v655);
                                                                                                        else
                                                                                                          v658 = *(_QWORD *)&v656[32 * ((v653 >> 1) & 1)];
                                                                                                        if ((v653 & 0x80) != 0)
                                                                                                          v657 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1620, v655);
                                                                                                        v817 = (int *)__src;
                                                                                                        if (v654 >= 2)
                                                                                                        {
                                                                                                          v818 = v654 >> 1;
                                                                                                          v819 = ((int)((_DWORD)v653 << 31) >> 31) & (v654 >> 1);
                                                                                                          if ((v654 >> 1) <= 1)
                                                                                                            v820 = 1;
                                                                                                          else
                                                                                                            v820 = v818;
                                                                                                          v821 = __src;
                                                                                                          v822 = v820;
                                                                                                          do
                                                                                                          {
                                                                                                            *v821++ = v819++;
                                                                                                            --v822;
                                                                                                          }
                                                                                                          while (v822);
                                                                                                          v823 = (v818 & ((int)((_DWORD)v653 << 27) >> 31)) + v654;
                                                                                                          v824 = &v817[v818];
                                                                                                          do
                                                                                                          {
                                                                                                            *v824++ = v823++;
                                                                                                            --v820;
                                                                                                          }
                                                                                                          while (v820);
                                                                                                        }
                                                                                                        v825 = (llvm::Type *)v1627;
                                                                                                        v1633 = 257;
                                                                                                        v826 = (_QWORD *)v658;
                                                                                                        v827 = v657;
LABEL_2193:
                                                                                                        v760 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v826, v827, v817, v825, (uint64_t)v1631);
                                                                                                        goto LABEL_2194;
                                                                                                      }
                                                                                                      if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x747865762E6B7361 || *((_DWORD *)v34 + 4) != 1952670066)
                                                                                                      {
                                                                                                        v770 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x6D7265702E6B7361 && *((_DWORD *)v34 + 4) == 778462254;
                                                                                                        if (v770 || ((v10 = 778658862, *v34 == (llvm::CallBase *)0x6D2E323135787661) ? (v771 = v34[1] == (llvm::CallBase *)0x6D7265702E6B7361) : (v771 = 0), v771 ? (v772 = *((unsigned int *)v34 + 4) == 778658862) : (v772 = 0), v772))
                                                                                                        {
                                                                                                          v773 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                          v774 = *(_QWORD **)v773;
                                                                                                          v775 = *((_QWORD *)v773 + 4);
                                                                                                          v776 = (_QWORD *)(v775 + 24);
                                                                                                          if (*(_DWORD *)(v775 + 32) >= 0x41u)
                                                                                                            v776 = (_QWORD *)*v776;
                                                                                                          v777 = *(_DWORD *)v776;
                                                                                                          v778 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                          __src = &v1628;
                                                                                                          v1627 = 0x800000000;
                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v778);
                                                                                                          v779 = (int *)__src;
                                                                                                          if ((_DWORD)v778)
                                                                                                          {
                                                                                                            v780 = 0;
                                                                                                            v781 = 0;
                                                                                                            v782 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                                            v783 = (uint64x2_t)vdupq_n_s64(v778 - 1);
                                                                                                            v784 = vdupq_n_s64(2uLL);
                                                                                                            do
                                                                                                            {
                                                                                                              v785 = vmovn_s64((int64x2_t)vcgeq_u64(v783, (uint64x2_t)v782));
                                                                                                              if ((v785.i8[0] & 1) != 0)
                                                                                                                v779[v781] = v781 & 0xFFFFFFFC | (v777 >> (v780 & 4)) & 3;
                                                                                                              if ((v785.i8[4] & 1) != 0)
                                                                                                                v779[v781 + 1] = v781 & 0xFFFFFFFC | (v777 >> (v780 & 4 | 2)) & 3;
                                                                                                              v781 += 2;
                                                                                                              v782 = vaddq_s64(v782, v784);
                                                                                                              v780 += 4;
                                                                                                            }
                                                                                                            while (((v778 + 1) & 0x1FFFFFFFELL) != v781);
                                                                                                          }
                                                                                                          goto LABEL_1534;
                                                                                                        }
                                                                                                        goto LABEL_1221;
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  v786 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                  v774 = *(_QWORD **)v786;
                                                                                                  v787 = *((_QWORD *)v786 + 4);
                                                                                                  v788 = (_QWORD *)(v787 + 24);
                                                                                                  if (*(_DWORD *)(v787 + 32) >= 0x41u)
                                                                                                    v788 = (_QWORD *)*v788;
                                                                                                  v789 = (_QWORD *)*v788;
                                                                                                  v790 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                                  v791 = *(_DWORD *)(*v774 + 32);
                                                                                                  __src = &v1628;
                                                                                                  v1627 = 0x800000000;
                                                                                                  llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v790);
                                                                                                  v779 = (int *)__src;
                                                                                                  if ((_DWORD)v790)
                                                                                                  {
                                                                                                    v792 = 0;
                                                                                                    v793 = v789 % (v791 / v790) * v790;
                                                                                                    v794 = __src;
                                                                                                    do
                                                                                                    {
                                                                                                      *v794++ = v793 + v792++;
                                                                                                      --v790;
                                                                                                    }
                                                                                                    while (v790);
                                                                                                  }
                                                                                                  goto LABEL_1534;
                                                                                                }
                                                                                              }
                                                                                            }
LABEL_2183:
                                                                                            v1005 = (_QWORD *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            v1006 = (_QWORD *)*v1005;
                                                                                            v1007 = v1005[4];
                                                                                            v1008 = v1005[8];
                                                                                            v1009 = (_QWORD *)(v1008 + 24);
                                                                                            if (*(_DWORD *)(v1008 + 32) >= 0x41u)
                                                                                              v1009 = (_QWORD *)*v1009;
                                                                                            v1010 = *(_DWORD *)v1009;
                                                                                            v1011 = *(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                                            __src = &v1628;
                                                                                            v1627 = 0x1000000000;
                                                                                            llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1011);
                                                                                            v817 = (int *)__src;
                                                                                            if ((_DWORD)v1011)
                                                                                            {
                                                                                              v1012 = 0;
                                                                                              v1013 = (int64x2_t)xmmword_24AA2DBD0;
                                                                                              v1014 = (uint64x2_t)vdupq_n_s64(v1011 - 1);
                                                                                              v1015 = vdupq_n_s64(2uLL);
                                                                                              do
                                                                                              {
                                                                                                v1016 = vmovn_s64((int64x2_t)vcgeq_u64(v1014, (uint64x2_t)v1013));
                                                                                                if ((v1016.i8[0] & 1) != 0)
                                                                                                  v817[v1012] = v1012 + (((int)(v1010 >> (v1012 & 6) << 31) >> 31) & v1011);
                                                                                                if ((v1016.i8[4] & 1) != 0)
                                                                                                  v817[v1012 + 1] = v1012 + (((int)(v1010 >> ((v1012 + 1) & 7) << 31) >> 31) & v1011) + 1;
                                                                                                v1012 += 2;
                                                                                                v1013 = vaddq_s64(v1013, v1015);
                                                                                              }
                                                                                              while (((v1011 + 1) & 0x1FFFFFFFELL) != v1012);
                                                                                            }
                                                                                            v825 = (llvm::Type *)v1627;
                                                                                            v1633 = 257;
                                                                                            v826 = v1006;
                                                                                            v827 = v1007;
                                                                                            goto LABEL_2193;
                                                                                          }
                                                                                          v723 = *v34 == (llvm::CallBase *)0x6461702E32657373
                                                                                              && *((_DWORD *)v34 + 2) == 779318628;
                                                                                          if (v723
                                                                                            || ((v10 = *((unsigned int *)v34 + 2),
                                                                                                 *v34 == (llvm::CallBase *)0x6461702E32787661)
                                                                                              ? (v724 = v10 == 779318628)
                                                                                              : (v724 = 0),
                                                                                                v724
                                                                                             || v105 >= 0x13
                                                                                             && ((v10 = 0x6D2E323135787661,
                                                                                                  *v34 == (llvm::CallBase *)0x6D2E323135787661)
                                                                                               ? (v725 = v34[1] == (llvm::CallBase *)0x646461702E6B7361)
                                                                                               : (v725 = 0),
                                                                                                 v725
                                                                                               ? (v726 = *(llvm::CallBase **)((char *)v34 + 11) == (llvm::CallBase *)0x2E7375646461702ELL)
                                                                                               : (v726 = 0),
                                                                                                 v726)))
                                                                                          {
                                                                                            v659 = v1620;
                                                                                            v660 = 303;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            if ((*v34 != (llvm::CallBase *)0x7573702E32657373
                                                                                               || *((_DWORD *)v34 + 2) != 779318626)
                                                                                              && (*v34 != (llvm::CallBase *)0x7573702E32787661
                                                                                               || *((_DWORD *)v34 + 2) != 779318626))
                                                                                            {
                                                                                              if (v105 < 0x13)
                                                                                              {
                                                                                                v634 = 0;
                                                                                                v635 = 1;
                                                                                                v636 = 1;
                                                                                                goto LABEL_1562;
                                                                                              }
                                                                                              v800 = *v34 == (llvm::CallBase *)0x6D2E323135787661 && v34[1] == (llvm::CallBase *)0x627573702E6B7361;
                                                                                              if (!v800
                                                                                                || *(llvm::CallBase **)((char *)v34 + 11) != (llvm::CallBase *)0x2E7375627573702ELL)
                                                                                              {
                                                                                                v636 = v105 < 0x14;
                                                                                                if (v105 >= 0x14 && (*v34 == (llvm::CallBase *)0x6D2E323135787661 ? (v802 = v34[1] == (llvm::CallBase *)0x696C61702E6B7361) : (v802 = 0), v802 ? (v803 = *((_DWORD *)v34 + 4) == 779251303) : (v803 = 0), v803))
                                                                                                {
                                                                                                  v1109 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                  v995 = *(uint64_t **)v1109;
                                                                                                  v996 = (_QWORD *)*((_QWORD *)v1109 + 4);
                                                                                                  v997 = *((_QWORD *)v1109 + 8);
                                                                                                  v998 = (llvm::Value *)*((_QWORD *)v1109 + 12);
                                                                                                  v999 = (unsigned __int8 *)*((_QWORD *)v1109 + 16);
                                                                                                  v1000 = 0;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if (*v34 != (llvm::CallBase *)0x6D2E323135787661 || v34[1] != (llvm::CallBase *)0x696C61762E6B7361 || *(llvm::CallBase **)((char *)v34 + 11) != (llvm::CallBase *)0x2E6E67696C61762ELL)
                                                                                                  {
                                                                                                    v634 = 0;
                                                                                                    v625 = 0;
                                                                                                    v635 = 0;
                                                                                                    goto LABEL_1562;
                                                                                                  }
                                                                                                  v994 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                  v995 = *(uint64_t **)v994;
                                                                                                  v996 = (_QWORD *)*((_QWORD *)v994 + 4);
                                                                                                  v997 = *((_QWORD *)v994 + 8);
                                                                                                  v998 = (llvm::Value *)*((_QWORD *)v994 + 12);
                                                                                                  v999 = (unsigned __int8 *)*((_QWORD *)v994 + 16);
                                                                                                  v1000 = 1;
                                                                                                }
                                                                                                UpgradeX86ALIGNIntrinsics((llvm::IRBuilderBase *)v1634, v995, v996, v997, v998, v999, v1000);
                                                                                                goto LABEL_1585;
                                                                                              }
                                                                                            }
                                                                                            v659 = v1620;
                                                                                            v660 = 314;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      goto LABEL_1584;
                                                                                    }
                                                                                    if (*v34 != (llvm::CallBase *)0x702E323135787661
                                                                                      || v34[1] != (llvm::CallBase *)0x73616364616F7262
                                                                                      || *((_BYTE *)v34 + 16) != 116)
                                                                                    {
                                                                                      v3 = v1635;
                                                                                      if (v105 < 0x17)
                                                                                      {
                                                                                        v489 = 0;
                                                                                        v488 = 0;
                                                                                        goto LABEL_1126;
                                                                                      }
                                                                                      if (*v34 != (llvm::CallBase *)0x6D2E323135787661
                                                                                        || v34[1] != (llvm::CallBase *)0x616F72622E6B7361
                                                                                        || *(llvm::CallBase **)((char *)v34 + 15) != (llvm::CallBase *)0x732E747361636461)
                                                                                      {
                                                                                        v489 = 0;
                                                                                        v488 = 0;
                                                                                        v622 = 0;
                                                                                        goto LABEL_1127;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  v694 = (llvm::PoisonValue **)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                  llvm::VectorType::get((uint64_t **)(*v6 + 1992), (llvm::Type *)(*(unsigned int *)(*(_QWORD *)v1620 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)v1620 + 8) == 19) << 32)));
                                                                                  __src = &v1628;
                                                                                  v1627 = 0x800000000;
                                                                                  llvm::Constant::getNullValue(v695);
                                                                                  llvm::ShuffleVectorInst::getShuffleMask(v696, (unsigned int *)&__src);
                                                                                  v1633 = 257;
                                                                                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v694, (int *)__src, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                                  if (((llvm::CallBase::arg_end(v1620)
                                                                                       - ((_QWORD)v1620
                                                                                        - 32
                                                                                        * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x60)
                                                                                    goto LABEL_1328;
                                                                                  v538 = (char *)v1620
                                                                                       - 32
                                                                                       * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                  v539 = (unsigned __int8 *)*((_QWORD *)v538 + 8);
                                                                                  v537 = ShuffleVector;
LABEL_1327:
                                                                                  ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1634, v539, v537, *((llvm::Value **)v538 + 4));
LABEL_1328:
                                                                                  v697 = __src;
                                                                                  if (__src == &v1628)
                                                                                    goto LABEL_1363;
                                                                                  goto LABEL_1362;
                                                                                }
LABEL_2780:
                                                                                v1384 = *(llvm::Type **)(*(_QWORD *)v1620 + 24);
                                                                                v1386 = llvm::Type::getPrimitiveSizeInBits(v1384);
                                                                                if ((_BYTE)v1385)
                                                                                v1387 = (llvm::Type *)(0x80 / v1386);
                                                                                llvm::FixedVectorType::get((uint64_t **)v1384, v1387);
                                                                                v1389 = (llvm::Type *)v1388;
                                                                                v1390 = (llvm::Value *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                v1391 = (llvm::Type *)llvm::PointerType::get(v1388, 0);
                                                                                LOWORD(v1630) = 257;
                                                                                PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v1634, v1390, v1391, (const llvm::Twine *)&__src, v1392);
                                                                                LOWORD(v1630) = 257;
                                                                                v1394 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v1634, v1389, (llvm::Value *)PointerCast, 256, 0, (uint64_t)&__src);
                                                                                if ((_DWORD)v1387 == 2)
                                                                                {
                                                                                  *(_OWORD *)v1631 = xmmword_24AA33A00;
                                                                                  LOWORD(v1630) = 257;
                                                                                  v1395 = 4;
                                                                                }
                                                                                else
                                                                                {
                                                                                  *(_OWORD *)v1631 = xmmword_24AA3395C;
                                                                                  v1632 = *(_OWORD *)algn_24AA3396C;
                                                                                  LOWORD(v1630) = 257;
                                                                                  v1395 = 8;
                                                                                }
                                                                                VectorSplat = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, (llvm::PoisonValue **)v1394, (int *)v1631, (llvm::Type *)v1395, (uint64_t)&__src);
                                                                                goto LABEL_682;
                                                                              }
                                                                              v94 = 1;
LABEL_96:
                                                                              if (*v34 != (llvm::CallBase *)0x6D2E323135787661
                                                                                || v34[1] != (llvm::CallBase *)0x766F6D702E6B7361
                                                                                || *(llvm::CallBase **)((char *)v34 + 15) != (llvm::CallBase *)0x3635322E64712E76)
                                                                              {
                                                                                v97 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                   && v34[1] == (llvm::CallBase *)0x766F6D702E6B7361;
                                                                                if (!v97
                                                                                  || *(llvm::CallBase **)((char *)v34 + 15) != (llvm::CallBase *)0x3231352E64712E76)
                                                                                {
                                                                                  v99 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                     && v34[1] == (llvm::CallBase *)0x766F6D702E6B7361;
                                                                                  if (!v99
                                                                                    || *(llvm::CallBase **)((char *)v34 + 15) != (llvm::CallBase *)0x3635322E62772E76)
                                                                                  {
                                                                                    v101 = *v34 == (llvm::CallBase *)0x6D2E323135787661
                                                                                        && v34[1] == (llvm::CallBase *)0x766F6D702E6B7361;
                                                                                    if (!v101
                                                                                      || *(llvm::CallBase **)((char *)v34 + 15) != (llvm::CallBase *)0x3231352E62772E76)
                                                                                    {
                                                                                      if ((v94 & 1) != 0)
                                                                                      {
                                                                                        if (*v34 != (llvm::CallBase *)0x6F7262762E787661
                                                                                          || v34[1] != (llvm::CallBase *)0x3166747361636461
                                                                                          || *((_WORD *)v34 + 8) != 14386)
                                                                                        {
                                                                                          v105 = 23;
                                                                                          goto LABEL_133;
                                                                                        }
                                                                                        goto LABEL_2780;
                                                                                      }
LABEL_159:
                                                                                      v34 = v1615;
                                                                                      v35 = v1616;
                                                                                      if (!v44)
                                                                                      {
LABEL_32:
                                                                                        v36 = v1620;
                                                                                        switch(v35)
                                                                                        {
                                                                                          case 0x1FuLL:
                                                                                          case 0x20uLL:
                                                                                          case 0x21uLL:
                                                                                          case 0x22uLL:
                                                                                          case 0x23uLL:
                                                                                          case 0x24uLL:
                                                                                          case 0x25uLL:
                                                                                          case 0x26uLL:
                                                                                          case 0x27uLL:
                                                                                          case 0x28uLL:
                                                                                          case 0x29uLL:
                                                                                          case 0x2AuLL:
                                                                                          case 0x2BuLL:
                                                                                          case 0x2CuLL:
                                                                                          case 0x2DuLL:
                                                                                          case 0x2EuLL:
                                                                                          case 0x2FuLL:
                                                                                          case 0x30uLL:
                                                                                          case 0x31uLL:
                                                                                          case 0x32uLL:
                                                                                          case 0x33uLL:
                                                                                          case 0x34uLL:
                                                                                          case 0x35uLL:
                                                                                          case 0x36uLL:
                                                                                          case 0x37uLL:
                                                                                          case 0x38uLL:
                                                                                          case 0x39uLL:
                                                                                            goto LABEL_33;
                                                                                          default:
                                                                                            if (v35 != 14)
                                                                                              goto LABEL_33;
                                                                                            if (*v34 != (llvm::CallBase *)0x707463762E65766DLL
                                                                                              || *(llvm::CallBase **)((char *)v34 + 6) != (llvm::CallBase *)0x646C6F2E34367074)
                                                                                            {
                                                                                              goto LABEL_33;
                                                                                            }
                                                                                            v154 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), 2699, 0, 0);
                                                                                            v155 = v154;
                                                                                            if (v154)
                                                                                              v156 = *(_QWORD *)(v154 + 24);
                                                                                            else
                                                                                              v156 = 0;
                                                                                            v396 = *((_DWORD *)v36 + 5);
                                                                                            v1631[0] = *((llvm::hashing::detail::hash_state **)v36 - 4 * (v396 & 0x7FFFFFF));
                                                                                            if ((v396 & 0x10000000) != 0)
                                                                                            {
                                                                                              v399 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v36);
                                                                                              v400 = *v399;
                                                                                              v398 = v399 + 2;
                                                                                              v397 = v400;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v397 = 0;
                                                                                              v398 = &str_3_26;
                                                                                            }
                                                                                            LOWORD(v1630) = 261;
                                                                                            __src = v398;
                                                                                            v1627 = v397;
                                                                                            v1631[0] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v156, v155, (uint64_t *)v1631, 1, (uint64_t)&__src, 0);
                                                                                            v401 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                            llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1920), (llvm::Type *)2);
                                                                                            __p = v402;
                                                                                            v403 = llvm::Intrinsic::getDeclaration(v401, 2659, (BOOL **)&__p, 1);
                                                                                            if (v403)
                                                                                              v404 = *(_QWORD *)(v403 + 24);
                                                                                            else
                                                                                              v404 = 0;
                                                                                            LOWORD(v1630) = 257;
                                                                                            __p = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v404, v403, (uint64_t *)v1631, 1, (uint64_t)&__src, 0);
                                                                                            v405 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                            llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1920), (llvm::Type *)4);
                                                                                            v1649[0] = v406;
                                                                                            v407 = llvm::Intrinsic::getDeclaration(v405, 2658, v1649, 1);
                                                                                            if (v407)
                                                                                              v408 = *(_QWORD *)(v407 + 24);
                                                                                            else
                                                                                              v408 = 0;
                                                                                            LOWORD(v1630) = 257;
                                                                                            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v408, v407, (uint64_t *)&__p, 1, (uint64_t)&__src, 0);
                                                                                            break;
                                                                                        }
                                                                                        goto LABEL_281;
                                                                                      }
                                                                                      if (v1616 == 6)
                                                                                      {
                                                                                        if (*(_DWORD *)v1615 == 779313761
                                                                                          && *((_WORD *)v1615 + 2) == 27756)
                                                                                        {
                                                                                          goto LABEL_405;
                                                                                        }
LABEL_346:
                                                                                        if (!memcmp(v1615, "max.ll", v1616))goto LABEL_664;
                                                                                        if (*(_DWORD *)v1615 == 779641197
                                                                                          && *((_WORD *)v1615 + 2) == 26997)
                                                                                        {
                                                                                          goto LABEL_664;
                                                                                        }
                                                                                        if (!memcmp(v1615, "min.ll", v1616))goto LABEL_672;
                                                                                        if (*(_DWORD *)v1615 == 778987885
                                                                                          && *((_WORD *)v1615 + 2) == 26997)
                                                                                        {
                                                                                          goto LABEL_672;
                                                                                        }
                                                                                        if (memcmp(v1615, "clz.ll", v1616))
                                                                                        {
                                                                                          goto LABEL_663;
                                                                                        }
                                                                                        v247 = (void **)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                        v248 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                        __p = *v247;
                                                                                        v249 = llvm::Intrinsic::getDeclaration(v248, 53, (BOOL **)&__p, 1);
                                                                                        v250 = v249;
                                                                                        if (v249)
                                                                                          v251 = *(_QWORD *)(v249 + 24);
                                                                                        else
                                                                                          v251 = 0;
                                                                                        v1631[0] = (llvm::hashing::detail::hash_state *)v247;
                                                                                        v542 = *v1638;
                                                                                        v543 = *(llvm::hashing::detail::hash_state **)(*v1638 + 1600);
                                                                                        if (!v543)
                                                                                        {
                                                                                          v543 = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(v542 + 1920, 0, 0);
                                                                                          *(_QWORD *)(v542 + 1600) = v543;
                                                                                        }
                                                                                        v1631[1] = v543;
                                                                                        __src = "ctlz";
                                                                                        LOWORD(v1630) = 259;
                                                                                        ICmp = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v251, v250, (uint64_t *)v1631, 2, (uint64_t)&__src, 0);
                                                                                        v292 = (llvm::Type *)(*v1638 + 1992);
                                                                                        __src = "ctlz.trunc";
                                                                                        LOWORD(v1630) = 259;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        if (v1616 == 5)
                                                                                        {
                                                                                          if (*(_DWORD *)v1615 != 779313761
                                                                                            || *((_BYTE *)v1615 + 4) != 105)
                                                                                          {
LABEL_166:
                                                                                            if (*(_DWORD *)v1615 != 779641197
                                                                                              || *((_BYTE *)v1615 + 4) != 105)
                                                                                            {
                                                                                              if (!memcmp(v1615, "min.i", v1616))
                                                                                              {
LABEL_672:
                                                                                                v425 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                                v283 = *(llvm::CmpInst ***)v425;
                                                                                                Neg = (uint64_t *)*((_QWORD *)v425 + 4);
                                                                                                v426 = *(_WORD *)((char *)v1615 + v1616 - 3) == 29998 && *((_BYTE *)v1615 + v1616 - 1) == 105;
                                                                                                if (v426 || *(_DWORD *)((char *)v1615 + v1616 - 4) == 1819047214)
                                                                                                {
                                                                                                  __src = "min.cond";
                                                                                                  LOWORD(v1630) = 259;
                                                                                                  v427 = 37;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  __src = "min.cond";
                                                                                                  LOWORD(v1630) = 259;
                                                                                                  v427 = 41;
                                                                                                }
                                                                                                v286 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, v427, v283, (uint64_t)Neg, (uint64_t)&__src);
                                                                                                v424 = "min";
LABEL_680:
                                                                                                __src = v424;
                                                                                                LOWORD(v1630) = 259;
                                                                                                goto LABEL_681;
                                                                                              }
LABEL_663:
                                                                                              v36 = v1620;
LABEL_33:
                                                                                              v1631[0] = 0;
                                                                                              v1631[1] = 0;
                                                                                              *(_QWORD *)&v1632 = 0;
                                                                                              v37 = *((_QWORD *)v36 - 4);
                                                                                              if (v37
                                                                                                && !*(_BYTE *)(v37 + 16)
                                                                                                && *(_QWORD *)(v37 + 24) == *((_QWORD *)v36 + 9))
                                                                                              {
                                                                                                v38 = *(_DWORD *)(v37 + 36);
                                                                                                llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1920), (llvm::Type *)2);
                                                                                                v40 = v39;
                                                                                                if (v38 <= 2728)
                                                                                                {
                                                                                                  if ((v38 - 2562) <= 0xE && ((1 << (v38 - 2)) & 0x5145) != 0)
                                                                                                  {
                                                                                                    __src = (void *)*((_QWORD **)v36 - 4 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF))[4];
                                                                                                    v1627 = (uint64_t)v39;
                                                                                                    v41 = (char *)&v1628;
                                                                                                    v42 = 2;
LABEL_242:
                                                                                                    std::vector<llvm::Type *>::__assign_with_size[abi:nn180100]<llvm::Type * const*,llvm::Type * const*>(v1631, (char *)&__src, v41, v42);
                                                                                                    v1623 = 0;
                                                                                                    FNeg = 0;
                                                                                                    __p = 0;
                                                                                                    v168 = (BOOL **)((char *)v36 - 32 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF));
                                                                                                    v169 = llvm::CallBase::arg_end(v36);
                                                                                                    if (v168 != (BOOL **)v169)
                                                                                                    {
                                                                                                      v170 = (BOOL **)v169;
                                                                                                      v171 = 0;
                                                                                                      do
                                                                                                      {
                                                                                                        v1649[0] = *v168;
                                                                                                        v172 = v1649[0];
                                                                                                        v173 = *(llvm::Type **)v1649[0];
                                                                                                        if ((*(_DWORD *)(*(_QWORD *)v1649[0] + 8) & 0xFE) == 0x12)
                                                                                                          v173 = (llvm::Type *)**((_QWORD **)v173 + 2);
                                                                                                        if (llvm::Type::getPrimitiveSizeInBits(v173) == 1)
                                                                                                        {
                                                                                                          v1621 = 0;
                                                                                                          v174 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                                          llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1920), (llvm::Type *)4);
                                                                                                          v1650[0] = v175;
                                                                                                          v176 = llvm::Intrinsic::getDeclaration(v174, 2659, v1650, 1);
                                                                                                          if (v176)
                                                                                                            v177 = *(_QWORD *)(v176 + 24);
                                                                                                          else
                                                                                                            v177 = 0;
                                                                                                          LOWORD(v1630) = 257;
                                                                                                          v1621 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v177, v176, (uint64_t *)v1649, 1, (uint64_t)&__src, 0);
                                                                                                          v178 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                                          v1650[0] = v40;
                                                                                                          v179 = llvm::Intrinsic::getDeclaration(v178, 2658, v1650, 1);
                                                                                                          if (v179)
                                                                                                            v180 = *(_QWORD *)(v179 + 24);
                                                                                                          else
                                                                                                            v180 = 0;
                                                                                                          LOWORD(v1630) = 257;
                                                                                                          v172 = (BOOL *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v180, v179, (uint64_t *)&v1621, 1, (uint64_t)&__src, 0);
                                                                                                          v1649[0] = v172;
                                                                                                          v171 = (BOOL **)v1623;
                                                                                                        }
                                                                                                        if (v171 >= (BOOL **)FNeg)
                                                                                                        {
                                                                                                          v181 = ((char *)v171 - (_BYTE *)__p) >> 3;
                                                                                                          if ((unint64_t)(v181 + 1) >> 61)
                                                                                                            abort();
                                                                                                          v182 = (FNeg - (llvm::Value *)__p) >> 2;
                                                                                                          if (v182 <= v181 + 1)
                                                                                                            v182 = v181 + 1;
                                                                                                          if ((unint64_t)(FNeg - (llvm::Value *)__p) >= 0x7FFFFFFFFFFFFFF8)
                                                                                                            v183 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                                          else
                                                                                                            v183 = v182;
                                                                                                          if (v183)
                                                                                                          {
                                                                                                            v184 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&FNeg, v183);
                                                                                                            v172 = v1649[0];
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            v184 = 0;
                                                                                                          }
                                                                                                          v185 = (BOOL **)&v184[8 * v181];
                                                                                                          *v185 = v172;
                                                                                                          v171 = v185 + 1;
                                                                                                          v187 = (char *)__p;
                                                                                                          v186 = (char *)v1623;
                                                                                                          if (v1623 != __p)
                                                                                                          {
                                                                                                            do
                                                                                                            {
                                                                                                              v188 = (BOOL *)*((_QWORD *)v186 - 1);
                                                                                                              v186 -= 8;
                                                                                                              *--v185 = v188;
                                                                                                            }
                                                                                                            while (v186 != v187);
                                                                                                            v186 = (char *)__p;
                                                                                                          }
                                                                                                          __p = v185;
                                                                                                          v1623 = (uint64_t *)v171;
                                                                                                          FNeg = (llvm::Value *)&v184[8 * v183];
                                                                                                          if (v186)
                                                                                                            operator delete(v186);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          *v171++ = v172;
                                                                                                        }
                                                                                                        v1623 = (uint64_t *)v171;
                                                                                                        v168 += 4;
                                                                                                      }
                                                                                                      while (v168 != v170);
                                                                                                    }
                                                                                                    v189 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v38, (BOOL **)v1631[0], (v1631[1] - v1631[0]) >> 3);
                                                                                                    v190 = v189;
                                                                                                    if (v189)
                                                                                                      v191 = *(_QWORD *)(v189 + 24);
                                                                                                    else
                                                                                                      v191 = 0;
                                                                                                    v7 = v1635;
                                                                                                    v192 = (uint64_t *)__p;
                                                                                                    v193 = ((char *)v1623 - (_BYTE *)__p) >> 3;
                                                                                                    if ((*((_BYTE *)v36 + 23) & 0x10) != 0)
                                                                                                    {
                                                                                                      v196 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v36);
                                                                                                      v197 = *v196;
                                                                                                      v195 = v196 + 2;
                                                                                                      v194 = v197;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v194 = 0;
                                                                                                      v195 = &str_3_26;
                                                                                                    }
                                                                                                    LOWORD(v1630) = 261;
                                                                                                    __src = v195;
                                                                                                    v1627 = v194;
                                                                                                    AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v191, v190, v192, v193, (uint64_t)&__src, 0);
                                                                                                    if (__p)
                                                                                                    {
                                                                                                      v1623 = (uint64_t *)__p;
                                                                                                      operator delete(__p);
                                                                                                    }
                                                                                                    if (v1631[0])
                                                                                                    {
                                                                                                      v1631[1] = v1631[0];
                                                                                                      operator delete(v1631[0]);
                                                                                                    }
LABEL_281:
                                                                                                    ShuffleVector = (llvm::Value *)AlignedLoad;
                                                                                                    goto LABEL_683;
                                                                                                  }
                                                                                                  goto LABEL_87;
                                                                                                }
                                                                                                if (v38 <= 2756)
                                                                                                {
                                                                                                  if (v38 == 2729)
                                                                                                  {
LABEL_87:
                                                                                                    __src = *(void **)v36;
                                                                                                    v93 = (void *)**((_QWORD **)v36 - 4 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF));
LABEL_194:
                                                                                                    v1627 = (uint64_t)v93;
                                                                                                    v1628 = v39;
                                                                                                    v41 = (char *)&v1629;
                                                                                                    v42 = 3;
                                                                                                    goto LABEL_242;
                                                                                                  }
                                                                                                  if (v38 == 2731)
                                                                                                  {
LABEL_193:
                                                                                                    v93 = (void *)**((_QWORD **)v36 - 4 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF));
                                                                                                    __src = v93;
                                                                                                    goto LABEL_194;
                                                                                                  }
                                                                                                  __src = *(void **)v36;
                                                                                                  v91 = (char *)v36 - 32 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF);
                                                                                                  v1627 = **(_QWORD **)v91;
                                                                                                  v92 = (BOOL **)*((_QWORD *)v91 + 4);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if (v38 <= 2804)
                                                                                                  {
                                                                                                    if (v38 == 2757)
                                                                                                      goto LABEL_87;
                                                                                                    goto LABEL_193;
                                                                                                  }
                                                                                                  if (v38 == 2805)
                                                                                                    goto LABEL_193;
                                                                                                  v167 = (char *)v36 - 32 * (*((_DWORD *)v36 + 5) & 0x7FFFFFF);
                                                                                                  __src = **(void ***)v167;
                                                                                                  v1627 = **((_QWORD **)v167 + 4);
                                                                                                  v92 = (BOOL **)*((_QWORD *)v167 + 8);
                                                                                                }
                                                                                                v1628 = *v92;
                                                                                                v1629 = v39;
                                                                                                v41 = (char *)&v1630;
                                                                                                v42 = 4;
                                                                                                goto LABEL_242;
                                                                                              }
                                                                                              llvm::FixedVectorType::get((uint64_t **)(*v1638 + 1920), (llvm::Type *)2);
                                                                                              __break(1u);
                                                                                              goto LABEL_2723;
                                                                                            }
LABEL_664:
                                                                                            v421 = (char *)v1620
                                                                                                 - 32
                                                                                                 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                                            v283 = *(llvm::CmpInst ***)v421;
                                                                                            Neg = (uint64_t *)*((_QWORD *)v421 + 4);
                                                                                            v422 = *(_WORD *)((char *)v1615 + v1616 - 3) == 29998
                                                                                                && *((_BYTE *)v1615 + v1616 - 1) == 105;
                                                                                            if (v422
                                                                                              || *(_DWORD *)((char *)v1615 + v1616 - 4) == 1819047214)
                                                                                            {
                                                                                              __src = "max.cond";
                                                                                              LOWORD(v1630) = 259;
                                                                                              v423 = 35;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              __src = "max.cond";
                                                                                              LOWORD(v1630) = 259;
                                                                                              v423 = 39;
                                                                                            }
                                                                                            v286 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, v423, v283, (uint64_t)Neg, (uint64_t)&__src);
                                                                                            v424 = "max";
                                                                                            goto LABEL_680;
                                                                                          }
LABEL_405:
                                                                                          v283 = (llvm::CmpInst **)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                          __src = "neg";
                                                                                          LOWORD(v1630) = 259;
                                                                                          Neg = llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)v1634, (llvm::Value *)v283, (const llvm::Twine *)&__src);
                                                                                          llvm::Constant::getNullValue((uint64_t)*v283);
                                                                                          __src = "abs.cond";
                                                                                          LOWORD(v1630) = 259;
                                                                                          v286 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, 39, v283, v285, (uint64_t)&__src);
                                                                                          __src = "abs";
                                                                                          LOWORD(v1630) = 259;
LABEL_681:
                                                                                          VectorSplat = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v1634, (llvm::Value *)v286, (llvm::Value *)v283, (llvm::Value *)Neg, (const llvm::Twine *)&__src, 0);
                                                                                          goto LABEL_682;
                                                                                        }
                                                                                        if (v1616 >= 0x15)
                                                                                        {
                                                                                          v252 = *v1615 == (llvm::CallBase *)0x6C2E63696D6F7461
                                                                                              && v1615[1] == (llvm::CallBase *)0x2E6464612E64616FLL;
                                                                                          v253 = v252
                                                                                              && *(llvm::CallBase **)((char *)v1615 + 13) == (llvm::CallBase *)0x702E3233662E6464;
                                                                                          if (v253
                                                                                            || (*v1615 == (llvm::CallBase *)0x6C2E63696D6F7461
                                                                                              ? (v254 = v1615[1] == (llvm::CallBase *)0x2E6464612E64616FLL)
                                                                                              : (v254 = 0),
                                                                                                v254
                                                                                              ? (v255 = *(llvm::CallBase **)((char *)v1615 + 13) == (llvm::CallBase *)0x702E3436662E6464)
                                                                                              : (v255 = 0),
                                                                                                v255))
                                                                                          {
                                                                                            v337 = (uint64_t **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            VectorSplat = llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)v1634, 11, (uint64_t)*v337, v337[4], 0, 7, 1);
                                                                                            goto LABEL_682;
                                                                                          }
                                                                                        }
                                                                                        switch(v1616)
                                                                                        {
                                                                                          case 3uLL:
                                                                                            if (*(_WORD *)v1615 != 12904
                                                                                              || *((_BYTE *)v1615 + 2) != 102)
                                                                                            {
                                                                                              goto LABEL_663;
                                                                                            }
                                                                                            v257 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                            v1631[0] = (llvm::hashing::detail::hash_state *)(*v1638 + 1704);
                                                                                            v258 = llvm::Intrinsic::getDeclaration(v257, 18, (BOOL **)v1631, 1);
                                                                                            v259 = v258;
                                                                                            if (v258)
                                                                                              v260 = *(_QWORD *)(v258 + 24);
                                                                                            else
                                                                                              v260 = 0;
                                                                                            __p = (void *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            __src = "h2f";
                                                                                            v417 = 259;
                                                                                            goto LABEL_650;
                                                                                          case 5uLL:
                                                                                            goto LABEL_166;
                                                                                          case 6uLL:
                                                                                            goto LABEL_346;
                                                                                          case 7uLL:
                                                                                            if (*(_DWORD *)v1615 == 779641197
                                                                                              && *(_DWORD *)((char *)v1615 + 3) == 1819047214)
                                                                                            {
                                                                                              goto LABEL_664;
                                                                                            }
                                                                                            if (*(_DWORD *)v1615 == 778987885
                                                                                              && *(_DWORD *)((char *)v1615 + 3) == 1819047214)
                                                                                            {
                                                                                              goto LABEL_672;
                                                                                            }
                                                                                            if (*(_DWORD *)v1615 != 1668312944
                                                                                              || *(_DWORD *)((char *)v1615 + 3) != 1819029091)
                                                                                            {
                                                                                              goto LABEL_663;
                                                                                            }
                                                                                            v1631[0] = *((llvm::hashing::detail::hash_state **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                                            v529 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                                                            __p = *(void **)v1631[0];
                                                                                            v530 = llvm::Intrinsic::getDeclaration(v529, 54, (BOOL **)&__p, 1);
                                                                                            if (v530)
                                                                                              v531 = *(_QWORD *)(v530 + 24);
                                                                                            else
                                                                                              v531 = 0;
                                                                                            __src = "ctpop";
                                                                                            LOWORD(v1630) = 259;
                                                                                            ICmp = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v531, v530, (uint64_t *)v1631, 1, (uint64_t)&__src, 0);
                                                                                            v292 = (llvm::Type *)(*v1638 + 1992);
                                                                                            __src = "ctpop.trunc";
                                                                                            LOWORD(v1630) = 259;
                                                                                            break;
                                                                                          default:
                                                                                            goto LABEL_32;
                                                                                        }
                                                                                      }
                                                                                      p_src = &__src;
                                                                                      v294 = 38;
                                                                                      goto LABEL_410;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              v124 = (char *)v1620
                                                                                   - 32
                                                                                   * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                              v125 = **((_QWORD **)v124 + 4);
                                                                              v126 = *(_QWORD *)v124;
                                                                              LOWORD(v1630) = 257;
                                                                              v127 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 38, v126, v125, (uint64_t)&__src);
                                                                              goto LABEL_190;
                                                                            }
                                                                          }
LABEL_2686:
                                                                          v1304 = *(llvm::Type **)v1620;
                                                                          v1305 = *(unsigned int *)(*(_QWORD *)v1620
                                                                                                  + 32);
                                                                          __src = &v1628;
                                                                          v1627 = 0x800000000;
                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1305);
                                                                          v1306 = (int *)__src;
                                                                          if ((_DWORD)v1305)
                                                                          {
                                                                            for (m = 0; m != v1305; ++m)
                                                                              v1306[m] = m;
                                                                          }
                                                                          v1308 = (llvm::PoisonValue **)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                          v1633 = 257;
                                                                          v1309 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1308, v1306, (llvm::Type *)v1627, (uint64_t)v1631);
                                                                          if (llvm::StringRef::find((uint64_t *)&v1615, "pmovsx", 6uLL, 0) == -1)
                                                                          {
                                                                            v1633 = 257;
                                                                            v1310 = 39;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1633 = 257;
                                                                            v1310 = 40;
                                                                          }
                                                                          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1634, v1310, (uint64_t)v1309, (uint64_t)v1304, (uint64_t)v1631);
                                                                          v1340 = v1620;
                                                                          if (((llvm::CallBase::arg_end(v1620)
                                                                               - ((_QWORD)v1340
                                                                                - 32
                                                                                * (*((_DWORD *)v1340 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x60)
                                                                          {
LABEL_1537:
                                                                            v799 = __src;
                                                                            if (__src == &v1628)
                                                                              goto LABEL_2197;
                                                                            goto LABEL_2196;
                                                                          }
                                                                          v1181 = (char *)v1620
                                                                                - 32
                                                                                * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                                                                          v796 = (unsigned __int8 *)*((_QWORD *)v1181 + 8);
                                                                          v797 = ShuffleVector;
                                                                          goto LABEL_2487;
                                                                        }
                                                                        v1274 = v1615;
LABEL_2652:
                                                                        if (*v1274 == (llvm::CallBase *)0x6D702E3134657373
                                                                          && *((_DWORD *)v1274 + 2) == 2020832879)
                                                                        {
                                                                          goto LABEL_2686;
                                                                        }
                                                                        v1295 = *v1274;
                                                                        v1296 = *((unsigned int *)v1274 + 2);
                                                                        if (v1295 == (llvm::CallBase *)0x6D702E3134657373
                                                                          && v1296 == 2021291631)
                                                                        {
                                                                          goto LABEL_2686;
                                                                        }
                                                                        goto LABEL_2660;
                                                                      }
                                                                      v1274 = v1615;
                                                                      if (*v1615 != (llvm::CallBase *)0x762E323135787661
                                                                        || v1615[1] != (llvm::CallBase *)0x73616364616F7262
                                                                        || *(llvm::CallBase **)((char *)v1615 + 11) != (llvm::CallBase *)0x732E747361636461)
                                                                      {
                                                                        goto LABEL_2652;
                                                                      }
                                                                    }
                                                                    v1311 = *(llvm::PoisonValue **)v1620;
                                                                    v1312 = *(llvm::PointerType ***)(*(_QWORD *)v1620 + 24);
                                                                    v1313 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v1620 + 32);
                                                                    v1314 = *((_QWORD *)v1620
                                                                            - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                                    v1315 = llvm::PointerType::get(v1312, 0);
                                                                    LOWORD(v1630) = 257;
                                                                    v1316 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1314, v1315, (uint64_t)&__src);
                                                                    LOWORD(v1630) = 257;
                                                                    v1317 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v1634, (llvm::Type *)v1312, (llvm::Value *)v1316, 0, 0, (uint64_t)&__src);
                                                                    v1318 = *v6;
                                                                    v1320 = (llvm::Value *)llvm::PoisonValue::get(v1311, v1319);
                                                                    ShuffleVector = v1320;
                                                                    if ((_DWORD)v1313)
                                                                    {
                                                                      v1321 = (uint64_t *)v1320;
                                                                      v1322 = 0;
                                                                      v1323 = (llvm::ConstantInt *)(v1318 + 1992);
                                                                      do
                                                                      {
                                                                        v1324 = (llvm::Value *)llvm::ConstantInt::get(v1323, v1322, 0);
                                                                        LOWORD(v1630) = 257;
                                                                        v1321 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1634, (llvm::Value *)v1321, (llvm::Value *)v1317, v1324, (const llvm::Twine *)&__src);
                                                                        ShuffleVector = (llvm::Value *)v1321;
                                                                        v1322 = (llvm::Type *)((char *)v1322 + 1);
                                                                      }
                                                                      while (v1313 != v1322);
                                                                    }
                                                                    goto LABEL_1363;
                                                                  }
                                                                  v1049 = v1615;
                                                                  if (*v1615 != (llvm::CallBase *)0x6D2E323135787661
                                                                    || v1615[1] != (llvm::CallBase *)0x687370762E6B7361
                                                                    || *((_WORD *)v1615 + 8) != 25714)
                                                                  {
                                                                    if (v35 < 0x13)
                                                                      goto LABEL_2570;
                                                                    v1271 = *v1615 == (llvm::CallBase *)0x6D2E323135787661
                                                                         && v1615[1] == (llvm::CallBase *)0x7370762E7A6B7361;
                                                                    if (!v1271
                                                                      || *(llvm::CallBase **)((char *)v1615 + 11) != (llvm::CallBase *)0x6472687370762E7ALL)
                                                                    {
                                                                      goto LABEL_2570;
                                                                    }
                                                                  }
                                                                }
                                                                v1246 = *((unsigned __int8 *)v1049 + 11) == 122;
                                                                v1247 = v1620;
                                                                v1248 = 1;
                                                              }
                                                              InsertElement = upgradeX86ConcatShift((llvm::IRBuilderBase *)v1634, (uint64_t)v1247, v1248, v1246, v11, v12);
                                                              goto LABEL_1585;
                                                            }
                                                          }
                                                          v1202 = (uint64_t *)v1620;
                                                          v1203 = 1;
                                                        }
                                                        InsertElement = upgradeX86Rotate((llvm::IRBuilderBase *)v1634, v1202, v1203, v10, v11, v12);
                                                        goto LABEL_1585;
                                                      }
                                                      if (((llvm::CallBase::arg_end(v1620)
                                                           - ((_QWORD)v1620
                                                            - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x60)
                                                      {
                                                        v1213 = ((_QWORD *)v1620
                                                               - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                                                        v1214 = (_QWORD *)(v1213 + 24);
                                                        if (*(_DWORD *)(v1213 + 32) >= 0x41u)
                                                          v1214 = (_QWORD *)*v1214;
                                                        v1215 = *(_DWORD *)v1214;
                                                        goto LABEL_2844;
                                                      }
                                                      v1243 = 9;
                                                      if (v1616 < 9)
                                                        v1243 = v1616;
                                                      v1244 = (char *)v1615 + v1243;
                                                      v1245 = v1616 - v1243;
                                                      v1615 = (llvm::CallBase **)((char *)v1615 + v1243);
                                                      v1616 = v1245;
                                                      if (v1245 < 2)
                                                        goto LABEL_2526;
                                                      switch(*(_WORD *)v1244)
                                                      {
                                                        case 0x746C:
                                                          v1215 = 0;
                                                          goto LABEL_2844;
                                                        case 0x656C:
                                                          v1215 = 1;
                                                          goto LABEL_2844;
                                                        case 0x7467:
                                                          v1215 = 2;
                                                          goto LABEL_2844;
                                                        case 0x6567:
                                                          v1215 = 3;
                                                          goto LABEL_2844;
                                                        case 0x7165:
                                                          v1215 = 4;
                                                          goto LABEL_2844;
                                                        case 0x656E:
                                                          v1215 = 5;
                                                          goto LABEL_2844;
                                                      }
                                                      if (v1245 >= 5
                                                        && ((v1275 = *(_DWORD *)v1244,
                                                             v1276 = v1244[4],
                                                             v1275 == 1936482662)
                                                          ? (v1277 = v1276 == 101)
                                                          : (v1277 = 0),
                                                            v1277))
                                                      {
                                                        v1215 = 6;
                                                      }
                                                      else
                                                      {
LABEL_2526:
                                                        v1215 = 7;
                                                      }
LABEL_2844:
                                                      upgradeX86vpcom((uint64_t)v1634, (uint64_t)v1620, v1215);
                                                      goto LABEL_1585;
                                                    }
                                                    v1228 = (uint64_t *)((char *)v1620
                                                                      - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                                    v1229 = (unsigned int **)v1228[4];
                                                    v1230 = *v1229;
                                                    v1231 = *v1228;
                                                    v1232 = llvm::PointerType::get(*((llvm::PointerType ***)*v1229 + 3), 0);
                                                    LOWORD(v1630) = 257;
                                                    v1233 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v1231, v1232, (uint64_t)&__src);
                                                    v1234 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4* (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8], v1230[8]);
                                                    v1235 = (uint64_t *)*((_QWORD *)v1614 + 5);
                                                    __src = v1230;
                                                    v1236 = llvm::Intrinsic::getDeclaration(v1235, 185, (BOOL **)&__src, 1);
                                                    v1144 = v1236;
                                                    if (v1236)
                                                      v1145 = *(_QWORD *)(v1236 + 24);
                                                    else
                                                      v1145 = 0;
                                                    v1631[0] = ((llvm::hashing::detail::hash_state **)v1620
                                                              - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                    v1631[1] = (llvm::hashing::detail::hash_state *)v1233;
                                                    *(_QWORD *)&v1632 = v1234;
                                                  }
LABEL_2643:
                                                  LOWORD(v1630) = 257;
LABEL_2644:
                                                  InsertElement = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v1145, v1144, (uint64_t *)v1631, 3, (uint64_t)&__src, 0);
                                                  goto LABEL_1585;
                                                }
                                              }
                                              v1059 = *(llvm::Type **)v1620;
                                              v1106 = (uint64_t *)*((_QWORD *)v1620
                                                                 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                                              ShuffleVector = (llvm::Value *)v1106;
                                              v1107 = (llvm::Type *)*((unsigned int *)v1059 + 8);
                                              if ((_DWORD)v1107 != *(_DWORD *)(*v1106 + 32))
                                              {
                                                *(_OWORD *)v1631 = xmmword_24AA339B0;
                                                LOWORD(v1630) = 257;
                                                v1106 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v1106, (uint64_t)v1106, (int *)v1631, (llvm::Type *)4, (uint64_t)&__src);
                                                ShuffleVector = (llvm::Value *)v1106;
                                              }
                                              llvm::FixedVectorType::get((uint64_t **)(*v6 + 1656), v1107);
                                              LOWORD(v1630) = 257;
                                              v1064 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, (uint64_t)v1106, v1108, (uint64_t)&__src);
                                              ShuffleVector = v1064;
                                              v1065 = "cvtph2ps";
                                              goto LABEL_2351;
                                            }
                                          }
                                          else if (v35 < 0x14
                                                 || (*v34 == (llvm::CallBase *)0x6D2E323135787661
                                                   ? (v763 = v34[1] == (llvm::CallBase *)0x6C756D702E6B7361)
                                                   : (v763 = 0),
                                                     v763 ? (v764 = *((_DWORD *)v34 + 4) == 779183150) : (v764 = 0),
                                                     !v764))
                                          {
                                            switch(v35)
                                            {
                                              case 0xCuLL:
                                                goto LABEL_1489;
                                              case 0xDuLL:
                                                if (*v120 == (llvm::CallBase *)0x7476632E32657373
                                                  && *(llvm::CallBase **)((char *)v120 + 5) == (llvm::CallBase *)0x6473326973747663)
                                                {
                                                  goto LABEL_2058;
                                                }
                                                if (*v120 == (llvm::CallBase *)0x7476632E32657373
                                                  && *(llvm::CallBase **)((char *)v120 + 5) == (llvm::CallBase *)0x6473327373747663)
                                                {
                                                  v1170 = (llvm::Value *)((_QWORD *)v1620
                                                                        - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                  LOWORD(v1630) = 257;
                                                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v1170, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                  v1171 = *(llvm::Type **)(*(_QWORD *)v1620 + 24);
                                                  LOWORD(v1630) = 257;
                                                  SIToFP = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v1634, ShuffleVector, v1171, (const llvm::Twine *)&__src);
                                                  goto LABEL_2059;
                                                }
                                                if ((*v120 != (llvm::CallBase *)0x7476632E32657373
                                                   || *(llvm::CallBase **)((char *)v120 + 5) != (llvm::CallBase *)0x6470327164747663)
                                                  && (*v120 != (llvm::CallBase *)0x7476632E32657373
                                                   || *(llvm::CallBase **)((char *)v120 + 5) != (llvm::CallBase *)0x7370327164747663))
                                                {
                                                  goto LABEL_2081;
                                                }
                                                goto LABEL_2347;
                                              case 0xEuLL:
                                                v955 = *(uint64_t *)((char *)v120 + 6);
                                                v956 = *v120 == (llvm::CallBase *)0x737476632E657373;
                                                v957 = 0x7373323436697374;
                                                goto LABEL_2053;
                                              case 0xFuLL:
                                                v955 = *(uint64_t *)((char *)v120 + 7);
                                                v956 = *v120 == (llvm::CallBase *)0x7476632E32657373;
                                                v957 = 0x6473323436697374;
LABEL_2053:
                                                if (!v956 || v955 != v957)
                                                  goto LABEL_2081;
                                                goto LABEL_2058;
                                              case 0x10uLL:
                                                if (*v120 != (llvm::CallBase *)0x632E323135787661
                                                  || v120[1] != (llvm::CallBase *)0x6473326973757476)
                                                {
                                                  goto LABEL_2081;
                                                }
                                                v966 = (llvm::Value *)((_QWORD *)v1620
                                                                     - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4];
                                                v967 = *(llvm::Type **)(*(_QWORD *)v1620 + 24);
                                                LOWORD(v1630) = 257;
                                                SIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)v1634, v966, v967, (const llvm::Twine *)&__src);
                                                goto LABEL_2059;
                                              case 0x11uLL:
                                                if (*v120 != (llvm::CallBase *)0x647476632E787661
                                                  || v120[1] != (llvm::CallBase *)0x35322E64702E3271
                                                  || *((_BYTE *)v120 + 16) != 54)
                                                {
                                                  v10 = *((unsigned __int8 *)v120 + 16);
                                                  v970 = *v120 == (llvm::CallBase *)0x647476632E787661
                                                      && v120[1] == (llvm::CallBase *)0x35322E73702E3271;
                                                  if (!v970 || (_DWORD)v10 != 54)
                                                    goto LABEL_2081;
                                                }
                                                goto LABEL_2347;
                                              default:
                                                goto LABEL_2081;
                                            }
                                          }
                                          v738 = v1620;
                                          v739 = 1;
LABEL_1496:
                                          InsertElement = upgradePMULDQ((llvm::IRBuilderBase *)v1634, v738, v739);
LABEL_1585:
                                          AlignedLoad = InsertElement;
                                          ShuffleVector = (llvm::Value *)InsertElement;
LABEL_1586:
                                          v7 = v3;
LABEL_683:
                                          if (AlignedLoad)
                                          {
LABEL_1104:
                                            v273 = v1620;
                                            v274 = (llvm::Value *)AlignedLoad;
                                            goto LABEL_1105;
                                          }
LABEL_1106:
                                          v318 = v1620;
LABEL_1107:
                                          llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*((_QWORD *)v318 + 5) + 40, (uint64_t)v318 + 24);
                                          goto LABEL_1108;
                                        }
LABEL_1453:
                                        v738 = v1620;
                                        v739 = 0;
                                        goto LABEL_1496;
                                      }
                                      v593 = 0x71642E756C756D70;
                                      if (*v120 == (llvm::CallBase *)0x756D702E32657373
                                        && *(llvm::CallBase **)((char *)v120 + 5) == (llvm::CallBase *)0x71642E756C756D70)
                                      {
                                        goto LABEL_1453;
                                      }
                                      v595 = *(uint64_t *)((char *)v120 + 5);
                                      v596 = *v120 == (llvm::CallBase *)0x756D702E32787661;
                                    }
                                    if (v596 && v595 == v593)
                                      goto LABEL_1453;
                                    goto LABEL_1433;
                                  }
                                }
                              }
                              v659 = v1620;
                              v660 = 309;
                            }
LABEL_1584:
                            InsertElement = UpgradeX86BinaryIntrinsics((llvm::IRBuilderBase *)v1634, (uint64_t)v659, v660);
                            goto LABEL_1585;
                          }
                          if (*v34 != (llvm::CallBase *)0x6D2E323135787661
                            || v34[1] != (llvm::CallBase *)0x706D63752E6B7361
                            || *((_BYTE *)v34 + 16) != 46)
                          {
                            if (*v34 != (llvm::CallBase *)0x632E323135787661
                              || v34[1] != (llvm::CallBase *)0x6B73616D32627476
                              || *((_BYTE *)v34 + 16) != 46)
                            {
                              v601 = *v34 == (llvm::CallBase *)0x632E323135787661
                                  && v34[1] == (llvm::CallBase *)0x6B73616D32777476;
                              if (!v601 || *((_BYTE *)v34 + 16) != 46)
                              {
                                v11 = 0x6B73616D32647476;
                                v12 = (llvm::Instruction *)*((unsigned __int8 *)v34 + 16);
                                v603 = *v34 == (llvm::CallBase *)0x632E323135787661
                                    && v34[1] == (llvm::CallBase *)0x6B73616D32647476;
                                if (!v603 || (_DWORD)v12 != 46)
                                {
                                  v10 = *((unsigned __int8 *)v34 + 16);
                                  v605 = *v34 == (llvm::CallBase *)0x632E323135787661
                                      && v34[1] == (llvm::CallBase *)0x6B73616D32717476;
                                  if (!v605 || (_DWORD)v10 != 46)
                                    goto LABEL_922;
                                }
                              }
                            }
                            v607 = (uint64_t **)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                            v608 = *v607;
                            llvm::Constant::getNullValue(**v607);
                            LOWORD(v1630) = 257;
                            v473 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, 40, (llvm::CmpInst **)v608, v609, (uint64_t)&__src);
                            ShuffleVector = (llvm::Value *)v473;
                            v474 = 0;
LABEL_747:
                            VectorSplat = ApplyX86MaskOn1BitsVec((llvm::IntegerType **)v1634, v473, v474);
                            goto LABEL_682;
                          }
                          v661 = v1620;
                          v664 = ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                          v665 = (_QWORD *)(v664 + 24);
                          if (*(_DWORD *)(v664 + 32) >= 0x41u)
                            v665 = (_QWORD *)*v665;
                          v662 = *(_DWORD *)v665;
LABEL_1261:
                          upgradeMaskedCompare((uint64_t)v1634, (uint64_t)v661, v662);
                          goto LABEL_682;
                        }
                        v666 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                        v667 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(v1630) = 257;
                        v501 = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)v1634, (llvm::Value *)v666, (llvm::Value *)v667, (const llvm::Twine *)&__src);
                      }
LABEL_1253:
                      ICmp = v501;
                      ShuffleVector = (llvm::Value *)v501;
                      v292 = *(llvm::Type **)v1620;
                      LOWORD(v1630) = 257;
                      goto LABEL_1256;
                    case 0xEuLL:
                      if (*v120 == (llvm::CallBase *)0x6B2E323135787661
                        && *(llvm::CallBase **)((char *)v120 + 6) == (llvm::CallBase *)0x772E6E646E616B2ELL)
                      {
                        v613 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                        v614 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(v1630) = 257;
                        v615 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1634, (llvm::Constant **)v613, (const llvm::Twine *)&__src);
                        LOWORD(v1630) = 257;
                        v616 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, (llvm::Value *)v615, (llvm::Value *)v614, (const llvm::Twine *)&__src);
                      }
                      else
                      {
                        if (*v120 != (llvm::CallBase *)0x6B2E323135787661
                          || *(llvm::CallBase **)((char *)v120 + 6) != (llvm::CallBase *)0x772E726F6E786B2ELL)
                        {
                          goto LABEL_865;
                        }
                        v668 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                        v669 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(v1630) = 257;
                        v670 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1634, (llvm::Constant **)v668, (const llvm::Twine *)&__src);
                        LOWORD(v1630) = 257;
                        v616 = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)v1634, (llvm::Value *)v670, (llvm::Value *)v669, (const llvm::Twine *)&__src);
                      }
                      ICmp = v616;
                      ShuffleVector = (llvm::Value *)v616;
                      v292 = *(llvm::Type **)v1620;
                      LOWORD(v1630) = 257;
LABEL_1256:
                      p_src = &__src;
                      goto LABEL_1257;
                    case 0x11uLL:
                      v503 = *v120 == (llvm::CallBase *)0x6B2E323135787661
                          && v120[1] == (llvm::CallBase *)0x2E7A74736574726FLL
                          && *((_BYTE *)v120 + 16) == 119;
                      if (v503
                        || (*v120 == (llvm::CallBase *)0x6B2E323135787661
                          ? (v504 = v120[1] == (llvm::CallBase *)0x2E6374736574726FLL)
                          : (v504 = 0),
                            v504 ? (v505 = *((_BYTE *)v120 + 16) == 119) : (v505 = 0),
                            v505))
                      {
                        v547 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), 0x10u);
                        v548 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(v1630) = 257;
                        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1634, (llvm::Value *)v547, (llvm::Value *)v548, (const llvm::Twine *)&__src);
                        v549 = *v1638 + 1968;
                        LOWORD(v1630) = 257;
                        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, (uint64_t)ShuffleVector, v549, (uint64_t)&__src);
                        v551 = (llvm::Constant *)(*v1638 + 1968);
                        if (*((_BYTE *)v1615 + 14) == 99)
                          v552 = llvm::Constant::getAllOnesValue(v551, v550);
                        else
                          llvm::Constant::getNullValue((uint64_t)v551);
                        LOWORD(v1630) = 257;
                        ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, 32, (llvm::CmpInst **)ShuffleVector, v552, (uint64_t)&__src);
                        ShuffleVector = (llvm::Value *)ICmp;
                        v292 = (llvm::Type *)(*v1638 + 1992);
                        LOWORD(v1630) = 257;
                        p_src = &__src;
                        v294 = 39;
                        goto LABEL_410;
                      }
                      if (*v34 == (llvm::CallBase *)0x6D2E323135787661
                        && v34[1] == (llvm::CallBase *)0x706D63702E6B7361)
                      {
                        goto LABEL_1237;
                      }
                      goto LABEL_901;
                    default:
                      if (v35 < 0x10)
                      {
                        v507 = 1;
                        v508 = 1;
                        if (v35 >= 0xC)
                          goto LABEL_903;
                        goto LABEL_921;
                      }
                      if (*v34 == (llvm::CallBase *)0x6D2E323135787661
                        && v34[1] == (llvm::CallBase *)0x706D63702E6B7361)
                      {
LABEL_1237:
                        v661 = v1620;
                        if (*((_BYTE *)v34 + 16) == 101)
                          v662 = 0;
                        else
                          v662 = 6;
                        goto LABEL_1261;
                      }
                      if (v35 >= 0x19)
                      {
                        if (*v34 == (llvm::CallBase *)0x6D2E323135787661
                          && v34[1] == (llvm::CallBase *)0x687370762E6B7361
                          && v34[2] == (llvm::CallBase *)0x626D717469626675
                          && *((_BYTE *)v34 + 24) == 46)
                        {
                          v707 = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v1620
                                                                     - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)));
                          if ((_BYTE)v706)
                          if (v707 == 128)
                          {
                            v705 = 10956;
                          }
                          else if (v707 == 256)
                          {
                            v705 = 10957;
                          }
                          else
                          {
                            v705 = 10958;
                          }
LABEL_1421:
                          v730 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v1614 + 5), v705, 0, 0);
                          if (v730)
                            v731 = *(_QWORD *)(v730 + 24);
                          else
                            v731 = 0;
                          v732 = (llvm::hashing::detail::hash_state **)((char *)v1620
                                                                      - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                          v1631[0] = *v732;
                          v1631[1] = v732[4];
                          LOWORD(v1630) = 257;
                          v473 = llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v731, v730, (uint64_t *)v1631, 2, (uint64_t)&__src, 0);
                          ShuffleVector = (llvm::Value *)v473;
                          v474 = (unsigned __int8 *)((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[8];
                          goto LABEL_747;
                        }
                      }
                      else if (v35 < 0x15)
                      {
LABEL_901:
                        v507 = 0;
                        goto LABEL_902;
                      }
                      if (*v34 != (llvm::CallBase *)0x6D2E323135787661
                        || v34[1] != (llvm::CallBase *)0x6C6370662E6B7361
                        || *(llvm::CallBase **)((char *)v34 + 13) != (llvm::CallBase *)0x702E7373616C6370)
                      {
                        v507 = 0;
                        v508 = 0;
                        goto LABEL_903;
                      }
                      v701 = **((_QWORD **)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
                      v703 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v701);
                      if ((_BYTE)v702)
                      if ((*(_DWORD *)(v701 + 8) & 0xFE) == 0x12)
                        v701 = **(_QWORD **)(v701 + 16);
                      v704 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v701);
                      if (v703 == 128 && v704 == 32)
                      {
                        v705 = 10419;
                      }
                      else if (v703 == 256 && v704 == 32)
                      {
                        v705 = 10420;
                      }
                      else if (v703 == 512 && v704 == 32)
                      {
                        v705 = 10421;
                      }
                      else if (v703 == 128 && v704 == 64)
                      {
                        v705 = 10416;
                      }
                      else if (v704 == 64 && v703 == 256)
                      {
                        v705 = 10417;
                      }
                      else
                      {
                        v705 = 10418;
                      }
                      goto LABEL_1421;
                  }
                }
                if (*v34 == (llvm::CallBase *)0x702E323135787661
                  && *(llvm::CallBase **)((char *)v34 + 5) == (llvm::CallBase *)0x6D74736574702E32)
                {
                  goto LABEL_685;
                }
                v373 = v35 < 0xE;
                if (v35 < 0xE)
                {
LABEL_604:
                  v374 = 1;
LABEL_605:
                  if (*v34 != (llvm::CallBase *)0x6B2E323135787661
                    || *(llvm::CallBase **)((char *)v34 + 5) != (llvm::CallBase *)0x6B63706E756B2E32)
                  {
                    goto LABEL_609;
                  }
                  v475 = *(llvm::Type **)v1620;
                  if ((*(_DWORD *)(*(_QWORD *)v1620 + 8) & 0xFE) == 0x12)
                    v475 = (llvm::Type *)**((_QWORD **)v475 + 2);
                  v476 = llvm::Type::getPrimitiveSizeInBits(v475);
                  v477 = getX86MaskVec((uint64_t)v1634, *((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF)), v476);
                  v478 = getX86MaskVec((uint64_t)v1634, ((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF))[4], v476);
                  if (v476)
                  {
                    v479 = 0;
                    v480 = (llvm::Type *)v476;
                    do
                    {
                      *((_DWORD *)&__src + v479) = v479;
                      ++v479;
                    }
                    while (v476 != v479);
                  }
                  else
                  {
                    v480 = 0;
                  }
                  v544 = (llvm::Type *)(v476 >> 1);
                  v1633 = 257;
                  v545 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v477, (uint64_t)v477, (int *)&__src, v544, (uint64_t)v1631);
                  v1633 = 257;
                  v546 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v478, (uint64_t)v478, (int *)&__src, v544, (uint64_t)v1631);
                  v1633 = 257;
                  ICmp = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1634, v546, (uint64_t)v545, (int *)&__src, v480, (uint64_t)v1631);
                  ShuffleVector = (llvm::Value *)ICmp;
                  v292 = *(llvm::Type **)v1620;
                  v1633 = 257;
                  p_src = v1631;
LABEL_1257:
                  v294 = 49;
LABEL_410:
                  VectorSplat = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, v294, (uint64_t)ICmp, (uint64_t)v292, (uint64_t)p_src);
                  goto LABEL_682;
                }
                if (*v34 == (llvm::CallBase *)0x702E323135787661
                  && *(llvm::CallBase **)((char *)v34 + 6) == (llvm::CallBase *)0x6D6E74736574702ELL)
                {
LABEL_685:
                  v428 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                  v429 = *(llvm::Value **)v428;
                  v430 = (llvm::Value *)*((_QWORD *)v428 + 4);
                  v431 = (unsigned __int8 *)*((_QWORD *)v428 + 8);
                  LOWORD(v1630) = 257;
                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1634, v429, v430, (const llvm::Twine *)&__src);
                  llvm::Constant::getNullValue(*(_QWORD *)v429);
                  if (v1616 >= 0xD)
                  {
                    v468 = bswap64((unint64_t)*v1615);
                    v469 = 0x6176783531322E70;
                    if (v468 == 0x6176783531322E70
                      && (v469 = 0x322E70746573746DLL,
                          v468 = bswap64(*(unint64_t *)((char *)v1615 + 5)),
                          v468 == 0x322E70746573746DLL))
                    {
                      v470 = 0;
                    }
                    else if (v468 < v469)
                    {
                      v470 = -1;
                    }
                    else
                    {
                      v470 = 1;
                    }
                    if (v470)
                      v433 = 32;
                    else
                      v433 = 33;
                  }
                  else
                  {
                    v433 = 32;
                  }
                  LOWORD(v1630) = 257;
                  v473 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1634, v433, (llvm::CmpInst **)ShuffleVector, v432, (uint64_t)&__src);
                  ShuffleVector = (llvm::Value *)v473;
                  v474 = v431;
                  goto LABEL_747;
                }
                if (v35 < 0x16)
                  goto LABEL_604;
                if (*v34 != (llvm::CallBase *)0x6D2E323135787661
                  || v34[1] != (llvm::CallBase *)0x6F7262702E6B7361
                  || *(llvm::CallBase **)((char *)v34 + 14) != (llvm::CallBase *)0x7473616364616F72)
                {
                  v374 = 0;
                  goto LABEL_605;
                }
                v617 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                v618 = (llvm::Type *)*(unsigned int *)(**((_QWORD **)v617 + 4) + 32);
                v619 = *(uint64_t ****)v617;
                LOWORD(v1630) = 257;
                v127 = llvm::IRBuilderBase::CreateVectorSplat((llvm::IRBuilderBase *)v1634, v618, v619, (uint64_t)&__src);
LABEL_190:
                v128 = (llvm::Value *)v127;
                ShuffleVector = (llvm::Value *)v127;
                v129 = (char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF);
                v130 = (unsigned __int8 *)*((_QWORD *)v129 + 8);
                goto LABEL_191;
              }
              v378 = (llvm::Value *)*((_QWORD *)v1620 - 4 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
              LOWORD(v1630) = 257;
              v1631[0] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1634, v378, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
              v379 = (uint64_t *)*((_QWORD *)v1614 + 5);
              __src = *(void **)v1631[0];
              v380 = llvm::Intrinsic::getDeclaration(v379, 283, (BOOL **)&__src, 1);
              if (v380)
                v381 = *(_QWORD *)(v380 + 24);
              else
                v381 = 0;
              LOWORD(v1630) = 257;
              v1631[0] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateCall((uint64_t)v1634, v381, v380, (uint64_t *)v1631, 1, (uint64_t)&__src, 0);
              LOWORD(v1630) = 257;
              VectorSplat = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1634, v378, v1631[0], (const llvm::Twine *)&__src, v454);
              goto LABEL_682;
            }
            if (*v34 != (llvm::CallBase *)0x6D2E323135787661
              || v34[1] != (llvm::CallBase *)0x726F74732E6B7361
              || *((_BYTE *)v34 + 16) != 101)
            {
              v227 = 0;
              goto LABEL_328;
            }
            v305 = *((unsigned __int8 *)v34 + 17) != 117;
            v472 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
            v303 = *v472;
            v304 = (llvm::PointerType ***)v472[4];
            v301 = (uint64_t *)v472[8];
LABEL_739:
            UpgradeMaskedStore((uint64_t *)v1634, v303, v304, (unsigned __int8 *)v301, v305);
            goto LABEL_1106;
          }
        }
        v199 = (uint64_t **)*((_QWORD *)v1614 + 5);
        v1631[0] = (llvm::hashing::detail::hash_state *)&v1632;
        v1631[1] = (llvm::hashing::detail::hash_state *)0x100000000;
        v234 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v6 + 1992, 1, 0);
        v236 = llvm::ValueAsMetadata::get(v234, v235);
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v1631, (uint64_t)v236);
        Impl = llvm::MDTuple::getImpl(v6, v1631[0], LODWORD(v1631[1]), 0, 1);
        v237 = (uint64_t *)((char *)v1620 - 32 * (*((_DWORD *)v1620 + 5) & 0x7FFFFFF));
        v238 = *v237;
        v239 = (llvm::PointerType ***)v237[4];
        v240 = llvm::PointerType::get(*v239, 0);
        __src = "cast";
        LOWORD(v1630) = 259;
        v241 = llvm::IRBuilderBase::CreateCast((uint64_t)v1634, 49, v238, v240, (uint64_t)&__src);
        v212 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v239) >> 3)) | 0x100;
        Element = (uint64_t *)v239;
        v211 = (uint64_t)v241;
LABEL_340:
        AlignedStore = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1634, Element, v211, v212, 0);
        v243 = llvm::Module::getMDKindID(v199, (uint64_t *)"nontemporal", 0xBuLL);
        llvm::Instruction::setMetadata(AlignedStore, v243, Impl);
        llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*((_QWORD *)v1620 + 5) + 40, (uint64_t)v1620 + 24);
        v159 = v1631[0];
        if ((__int128 *)v1631[0] == &v1632)
          goto LABEL_1108;
        goto LABEL_341;
      }
      v34 = (llvm::CallBase **)((char *)v34 + 5);
      v1615 = v34;
      v1616 = v35 - 5;
      v35 -= 5;
    }
    if (v35 < 4)
      goto LABEL_92;
    goto LABEL_90;
  }
}

uint64_t *llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3, const llvm::Twine *a4)
{
  llvm::Value *v7;

  v7 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)this + 8) + 2016, 0, 0);
  return llvm::IRBuilderBase::CreateExtractElement(this, a2, v7, a3);
}

uint64_t *UpgradeMaskedStore(uint64_t *a1, uint64_t a2, llvm::PointerType ***a3, unsigned __int8 *a4, int a5)
{
  uint64_t v10;
  uint64_t *Cast;
  __int16 v12;
  uint64_t *X86MaskVec;
  _BYTE v15[32];
  __int16 v16;

  v10 = llvm::PointerType::get(*a3, 0);
  v16 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, a2, v10, (uint64_t)v15);
  if (a5)
  {
    v12 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*a3) >> 3));
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    v12 = 0;
    if (!a4)
      goto LABEL_8;
  }
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4))
    return llvm::IRBuilderBase::CreateAlignedStore(a1, (uint64_t *)a3, (uint64_t)Cast, v12 | 0x100u, 0);
LABEL_8:
  X86MaskVec = getX86MaskVec((uint64_t)a1, (uint64_t)a4, *((_DWORD *)*a3 + 8));
  return llvm::IRBuilderBase::CreateMaskedStore((uint64_t)a1, (BOOL **)a3, (BOOL **)Cast, v12, (uint64_t)X86MaskVec);
}

uint64_t *llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, const llvm::Twine *a5)
{
  llvm::Value *v9;

  v9 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)this + 8) + 2016, 0, 0);
  return llvm::IRBuilderBase::CreateInsertElement(this, a2, a3, v9, a4);
}

uint64_t *EmitX86Select(llvm::IRBuilderBase *a1, unsigned __int8 *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t *X86MaskVec;
  _BYTE v10[32];
  __int16 v11;

  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    X86MaskVec = getX86MaskVec((uint64_t)a1, (uint64_t)a2, *(_DWORD *)(*(_QWORD *)a3 + 32));
    v11 = 257;
    return llvm::IRBuilderBase::CreateSelect(a1, (llvm::Value *)X86MaskVec, a3, a4, (const llvm::Twine *)v10, 0);
  }
  return (uint64_t *)a3;
}

uint64_t *ApplyX86MaskOn1BitsVec(llvm::IntegerType **a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t *ShuffleVector;
  uint64_t v5;
  uint64_t *X86MaskVec;
  uint64_t i;
  unsigned int j;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v14[32];
  __int16 v15;
  int v16[8];
  uint64_t v17;

  ShuffleVector = a2;
  v17 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(*a2 + 32);
  if (a3 && (a3[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a3)))
  {
    X86MaskVec = getX86MaskVec((uint64_t)a1, (uint64_t)a3, v5);
    v15 = 257;
    ShuffleVector = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)a1, (llvm::Value *)ShuffleVector, (llvm::Value *)X86MaskVec, (const llvm::Twine *)v14);
  }
  if (v5 <= 7)
  {
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
        v16[i] = i;
    }
    for (j = v5; j != 8; ++j)
      v16[j] = j % v5 + v5;
    llvm::Constant::getNullValue(*ShuffleVector);
    v15 = 257;
    ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a1, ShuffleVector, v10, v16, (llvm::Type *)8, (uint64_t)v14);
  }
  if (v5 <= 8)
    v11 = 8;
  else
    v11 = v5;
  v12 = llvm::IntegerType::get(a1[8], (llvm::LLVMContext *)v11);
  v15 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, (uint64_t)ShuffleVector, (uint64_t)v12, (uint64_t)v14);
}

uint64_t *getX86MaskVec(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t *Cast;
  uint64_t v8;
  llvm::Type *v9;
  _QWORD v11[4];
  __int16 v12;
  int v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  llvm::FixedVectorType::get((uint64_t **)(**(_QWORD **)(a1 + 64) + 1920), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
  v12 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1, 49, a2, v6, (uint64_t)v11);
  if (a3 <= 4)
  {
    if (a3)
    {
      v8 = 0;
      v9 = (llvm::Type *)a3;
      do
      {
        v13[v8] = v8;
        ++v8;
      }
      while (a3 != v8);
    }
    else
    {
      v9 = 0;
    }
    v11[0] = "extract";
    v12 = 259;
    return llvm::IRBuilderBase::CreateShuffleVector(a1, Cast, (uint64_t)Cast, v13, v9, (uint64_t)v11);
  }
  return Cast;
}

uint64_t *llvm::IRBuilderBase::CreateFAdd(llvm::IRBuilderBase *this, BOOL **a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  uint64_t *result;
  llvm::Value *v11;
  llvm::Value *v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 84, a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, BOOL **, llvm::Value *, _QWORD))(**((_QWORD **)this + 9)
                                                                                                 + 40))(*((_QWORD *)this + 9), 14, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    v15 = 257;
    v11 = llvm::BinaryOperator::Create(14, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    v12 = v11;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    *((_BYTE *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateFSub(llvm::IRBuilderBase *this, BOOL **a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  uint64_t *result;
  llvm::Value *v11;
  llvm::Value *v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 97, a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, BOOL **, llvm::Value *, _QWORD))(**((_QWORD **)this + 9)
                                                                                                 + 40))(*((_QWORD *)this + 9), 16, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    v15 = 257;
    v11 = llvm::BinaryOperator::Create(16, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    v12 = v11;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    *((_BYTE *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateFMul(llvm::IRBuilderBase *this, BOOL **a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  uint64_t *result;
  llvm::Value *v11;
  llvm::Value *v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 90, a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, BOOL **, llvm::Value *, _QWORD))(**((_QWORD **)this + 9)
                                                                                                 + 40))(*((_QWORD *)this + 9), 18, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    v15 = 257;
    v11 = llvm::BinaryOperator::Create(18, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    v12 = v11;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    *((_BYTE *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateFDiv(llvm::IRBuilderBase *this, BOOL **a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  uint64_t *result;
  llvm::Value *v11;
  llvm::Value *v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;

  v5 = a5;
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 87, a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, BOOL **, llvm::Value *, _QWORD))(**((_QWORD **)this + 9)
                                                                                                 + 40))(*((_QWORD *)this + 9), 21, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    v15 = 257;
    v11 = llvm::BinaryOperator::Create(21, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    v12 = v11;
    v13 = *((_DWORD *)this + 24);
    if (v5 || (v5 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    *((_BYTE *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t *result;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  char v15[32];
  __int16 v16;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 104))(*((_QWORD *)this + 9));
  if (!result)
  {
    v16 = 257;
    v11 = (char *)operator new(0xA0uLL);
    v12 = 0;
    v13 = (uint64_t *)(v11 + 96);
    *((_DWORD *)v11 + 29) = *((_DWORD *)v11 + 29) & 0x38000000 | 3;
    do
    {
      v14 = &v11[v12];
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *((_QWORD *)v14 + 3) = v13;
      v12 += 32;
    }
    while (v12 != 96);
    llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v11 + 96), a2, a3, a4, (const llvm::Twine *)v15, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v13, (uint64_t)a5);
  }
  return result;
}

void upgradeMaskedCompare(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X12 }
}

uint64_t *sub_24A9ACEAC(uint64_t a1, uint64_t a2, llvm::CmpInst **a3, int a4)
{
  uint64_t v4;
  llvm::IntegerType **v5;
  llvm::CallBase *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t *ICmp;
  uint64_t v10;
  _DWORD *v11;
  _WORD v13[44];

  if (a4)
    v7 = 40;
  else
    v7 = 36;
  v8 = *(_QWORD *)(v4 + 32);
  v13[16] = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v5, v7, a3, v8, (uint64_t)v13);
  v10 = llvm::CallBase::arg_end(v6);
  v11 = (_DWORD *)((char *)v6 - 32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
  return ApplyX86MaskOn1BitsVec(v5, ICmp, *(unsigned __int8 **)&v11[8 * ((unint64_t)(v10 - (_QWORD)v11) >> 5) - 8]);
}

void sub_24A9ACF74(llvm::Type *a1@<X8>)
{
  uint64_t v1;
  llvm::Constant *v2;
  llvm::Type *v3;

  llvm::FixedVectorType::get((uint64_t **)(**(_QWORD **)(v1 + 64) + 1920), a1);
  llvm::Constant::getAllOnesValue(v2, v3);
  JUMPOUT(0x24A9ACF28);
}

uint64_t *upgradeAbs(llvm::IRBuilderBase *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Declaration;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  BOOL *v14;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v14 = *(BOOL **)a2;
  v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), 1, &v14, 1);
  v6 = Declaration;
  if (Declaration)
    v7 = *(_QWORD *)(Declaration + 24);
  else
    v7 = 0;
  v15[0] = v4;
  v15[1] = llvm::ConstantInt::get(**((_QWORD **)a1 + 8) + 1920, 0, 0);
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v7, v6, v15, 2, (uint64_t)v12, 0);
  v9 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  v10 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  if (((v9 - v10) & 0x1FFFFFFFE0) == 0x60)
    return EmitX86Select(a1, *(unsigned __int8 **)(v10 + 64), (llvm::Value *)v8, *(llvm::Value **)(v10 + 32));
  return v8;
}

uint64_t *UpgradeX86BinaryIntrinsics(llvm::IRBuilderBase *a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Declaration;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  BOOL *v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v16 = *(BOOL **)a2;
  v5 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v6 = *v5;
  v7 = v5[4];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), a3, &v16, 1);
  if (Declaration)
    v9 = *(_QWORD *)(Declaration + 24);
  else
    v9 = 0;
  v17[0] = v6;
  v17[1] = v7;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v9, Declaration, v17, 2, (uint64_t)v14, 0);
  v11 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  v12 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  if (((v11 - v12) & 0x1FFFFFFFE0) == 0x80)
    return EmitX86Select(a1, *(unsigned __int8 **)(v12 + 96), (llvm::Value *)v10, *(llvm::Value **)(v12 + 64));
  return v10;
}

uint64_t *upgradePMULDQ(llvm::IRBuilderBase *a1, llvm::CallBase *a2, int a3)
{
  llvm::ConstantInt *v6;
  uint64_t v7;
  uint64_t *Cast;
  uint64_t v9;
  uint64_t *v10;
  llvm::Value *v11;
  uint64_t *Shl;
  uint64_t *AShr;
  uint64_t *v14;
  uint64_t *v15;
  llvm::Value *v16;
  uint64_t *Mul;
  uint64_t v18;
  _DWORD *v19;
  _BYTE v21[32];
  __int16 v22;

  v6 = *(llvm::ConstantInt **)a2;
  v7 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v22 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, v7, (uint64_t)v6, (uint64_t)v21);
  v9 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  v22 = 257;
  v10 = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, v9, (uint64_t)v6, (uint64_t)v21);
  if (a3)
  {
    v11 = (llvm::Value *)llvm::ConstantInt::get(v6, (llvm::Type *)0x20, 0);
    v22 = 257;
    Shl = llvm::IRBuilderBase::CreateShl(a1, (llvm::Value *)Cast, v11, (const llvm::Twine *)v21, 0, 0);
    v22 = 257;
    AShr = llvm::IRBuilderBase::CreateAShr(a1, (llvm::Value *)Shl, v11, (const llvm::Twine *)v21, 0);
    v22 = 257;
    v14 = llvm::IRBuilderBase::CreateShl(a1, (llvm::Value *)v10, v11, (const llvm::Twine *)v21, 0, 0);
    v22 = 257;
    v15 = llvm::IRBuilderBase::CreateAShr(a1, (llvm::Value *)v14, v11, (const llvm::Twine *)v21, 0);
  }
  else
  {
    v16 = (llvm::Value *)llvm::ConstantInt::get(v6, (llvm::Type *)0xFFFFFFFFLL, 0);
    v22 = 257;
    AShr = llvm::IRBuilderBase::CreateAnd(a1, (llvm::Value *)Cast, v16, (const llvm::Twine *)v21);
    v22 = 257;
    v15 = llvm::IRBuilderBase::CreateAnd(a1, (llvm::Value *)v10, v16, (const llvm::Twine *)v21);
  }
  v22 = 257;
  Mul = llvm::IRBuilderBase::CreateMul(a1, (llvm::Value *)AShr, (llvm::Value *)v15, (const llvm::Twine *)v21, 0, 0);
  v18 = llvm::CallBase::arg_end(a2);
  v19 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (((v18 - (_QWORD)v19) & 0x1FFFFFFFE0) == 0x80)
    return EmitX86Select(a1, *((unsigned __int8 **)v19 + 12), (llvm::Value *)Mul, *((llvm::Value **)v19 + 8));
  return Mul;
}

uint64_t *llvm::IRBuilderBase::CreateSIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return (uint64_t *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 116, (BOOL *)a2, (BOOL *)a3, 0, (uint64_t)a4, 0, 0, 0);
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 44, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t *llvm::IRBuilderBase::CreateUIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return (uint64_t *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 119, (BOOL *)a2, (BOOL *)a3, 0, (uint64_t)a4, 0, 0, 0);
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 43, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t *llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return (uint64_t *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 92, (BOOL *)a2, (BOOL *)a3, 0, (uint64_t)a4, 0, 0, 0);
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 46, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t *UpgradeMaskedLoad(uint64_t *a1, uint64_t a2, llvm::PointerType ***a3, unsigned __int8 *a4, int a5)
{
  llvm::PointerType **v10;
  uint64_t v11;
  uint64_t *Cast;
  __int16 v13;
  uint64_t *X86MaskVec;
  _BYTE v16[32];
  __int16 v17;

  v10 = *a3;
  v11 = llvm::PointerType::get(*a3, 0);
  v17 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, a2, v11, (uint64_t)v16);
  if (a5)
  {
    v13 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*a3) >> 3));
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    v13 = 0;
    if (!a4)
      goto LABEL_8;
  }
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4))
  {
    v17 = 257;
    return llvm::IRBuilderBase::CreateAlignedLoad(a1, (llvm::Type *)v10, (llvm::Value *)Cast, v13 | 0x100u, 0, (uint64_t)v16);
  }
LABEL_8:
  X86MaskVec = getX86MaskVec((uint64_t)a1, (uint64_t)a4, *((_DWORD *)v10 + 8));
  v17 = 257;
  return llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)a1, (llvm::PoisonValue *)v10, (BOOL **)Cast, v13, (uint64_t)X86MaskVec, (uint64_t)a3, (uint64_t)v16);
}

void upgradeX86vpcom(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X11 }
}

uint64_t *sub_24A9AD640@<X0>(llvm::CmpInst **a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *ICmp;
  _BYTE v8[32];
  __int16 v9;

  if (a3)
    v5 = 40;
  else
    v5 = 36;
  v9 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp(v4, v5, a1, a2, (uint64_t)v8);
  v9 = 257;
  return llvm::IRBuilderBase::CreateCast(v4, 40, (uint64_t)ICmp, v3, (uint64_t)v8);
}

void sub_24A9AD6CC()
{
  uint64_t v0;

  llvm::Constant::getNullValue(v0);
}

uint64_t sub_24A9AD6E4(uint64_t a1, llvm::Type *a2)
{
  llvm::Constant *v2;

  return llvm::Constant::getAllOnesValue(v2, a2);
}

uint64_t *upgradeX86Rotate(llvm::IRBuilderBase *this, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, llvm::Instruction *a6)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *VectorSplat;
  llvm::Type *v13;
  uint64_t *IntCast;
  int v15;
  uint64_t Declaration;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  _BYTE v22[32];
  __int16 v23;
  BOOL *v24;
  uint64_t v25[4];

  v25[3] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v24 = (BOOL *)v9;
  v10 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  v11 = *v10;
  VectorSplat = (uint64_t *)v10[4];
  if (*VectorSplat != v9)
  {
    v13 = (llvm::Type *)*(unsigned int *)(v9 + 32);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
      v9 = **(_QWORD **)(v9 + 16);
    v23 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast(this, (llvm::Value *)VectorSplat, (llvm::Type ***)v9, 0, (const llvm::Twine *)v22, a6);
    v23 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(this, v13, (uint64_t ***)IntCast, (uint64_t)v22);
  }
  if (a3)
    v15 = 149;
  else
    v15 = 148;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(a2[5] + 56) + 40), v15, &v24, 1);
  if (Declaration)
    v17 = *(_QWORD *)(Declaration + 24);
  else
    v17 = 0;
  v25[0] = v11;
  v25[1] = v11;
  v25[2] = (uint64_t)VectorSplat;
  v23 = 257;
  v18 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v17, Declaration, v25, 3, (uint64_t)v22, 0);
  v19 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  v20 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if (((v19 - (_QWORD)v20) & 0x1FFFFFFFE0) == 0x80)
    return EmitX86Select(this, (unsigned __int8 *)v20[12], (llvm::Value *)v18, (llvm::Value *)v20[8]);
  return v18;
}

uint64_t *upgradeX86ConcatShift(llvm::IRBuilderBase *this, uint64_t a2, int a3, int a4, uint64_t a5, llvm::Instruction *a6)
{
  BOOL *v10;
  uint64_t *v11;
  uint64_t *VectorSplat;
  uint64_t v13;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t *IntCast;
  int v17;
  uint64_t Declaration;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t v23;
  llvm::Value **v24;
  unint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  _BYTE v29[32];
  __int16 v30;
  BOOL *v31;
  uint64_t v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  v10 = *(BOOL **)a2;
  v31 = *(BOOL **)a2;
  v11 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  VectorSplat = (uint64_t *)v11[8];
  if (a3)
    v13 = *v11;
  else
    v13 = v11[4];
  if (a3)
    v14 = v11[4];
  else
    v14 = *v11;
  if ((BOOL *)*VectorSplat != v10)
  {
    v15 = (llvm::Type *)*((unsigned int *)v10 + 8);
    if ((*((_DWORD *)v10 + 2) & 0xFE) == 0x12)
      v10 = (BOOL *)**((_QWORD **)v10 + 2);
    v30 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast(this, (llvm::Value *)VectorSplat, (llvm::Type ***)v10, 0, (const llvm::Twine *)v29, a6);
    v30 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(this, v15, (uint64_t ***)IntCast, (uint64_t)v29);
  }
  if (a3)
    v17 = 149;
  else
    v17 = 148;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), v17, &v31, 1);
  if (Declaration)
    v19 = *(_QWORD *)(Declaration + 24);
  else
    v19 = 0;
  v32[0] = v14;
  v32[1] = v13;
  v32[2] = (uint64_t)VectorSplat;
  v30 = 257;
  v20 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v19, Declaration, v32, 3, (uint64_t)v29, 0);
  v21 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  v23 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v24 = (llvm::Value **)(a2 - 32 * v23);
  v25 = (unint64_t)(v21 - (_QWORD)v24) >> 5;
  if (v25 >= 4)
  {
    v26 = -v23;
    if ((_DWORD)v25 == 5)
    {
      v27 = v24[12];
    }
    else if (a4)
    {
      v27 = (llvm::Value *)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)a2, v22);
      v26 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    }
    else
    {
      v27 = *v24;
    }
    return EmitX86Select(this, *(unsigned __int8 **)(a2 + 32 * v26 + 32 * (v25 - 1)), (llvm::Value *)v20, v27);
  }
  return v20;
}

uint64_t *llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, llvm::PoisonValue **a2, int *a3, llvm::Type *a4, uint64_t a5)
{
  uint64_t v10;

  v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::IRBuilderBase::CreateShuffleVector(a1, a2, v10, a3, a4, a5);
}

uint64_t *llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  BOOL v7;
  uint64_t *v9;
  _BYTE v10[32];
  __int16 v11;

  if (*(llvm::Type **)a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      v11 = 257;
      llvm::CastInst::CreatePointerCast(a2, a3, (llvm::Type *)v10, 0, a5);
      return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v9, (uint64_t)a4);
    }
    else
    {
      a2 = (llvm::Value *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 128))(*((_QWORD *)this + 9));
      if (a2)
        v7 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)a2, (uint64_t)a4);
    }
  }
  return (uint64_t *)a2;
}

void UpgradeX86ALIGNIntrinsics(llvm::IRBuilderBase *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, llvm::Value *a5, unsigned __int8 *a6, int a7)
{
  uint64_t v10;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  llvm::Type *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int32x2_t v20;
  int8x8_t v21;
  int *v22;
  uint64_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int8x8_t v27;
  unsigned int v28;
  uint64_t *ShuffleVector;
  const char *v30;
  __int16 v31;
  int v32[64];
  uint64_t v33;

  v10 = (uint64_t)a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u)
    v12 = (_QWORD *)*v12;
  v13 = *(_DWORD *)v12;
  v14 = *a2;
  v15 = (llvm::Type *)*(unsigned int *)(*a2 + 32);
  v16 = (_DWORD)v15 - 1;
  if (!a7)
    v16 = -1;
  v17 = v16 & v13;
  if ((v16 & v13) < 0x20)
  {
    if (v17 >= 0x11)
    {
      v17 -= 16;
      llvm::Constant::getNullValue(v14);
      a3 = (_QWORD *)v10;
      v10 = v18;
    }
    if ((_DWORD)v15)
    {
      v19 = 0;
      v20 = vdup_n_s32(v17);
      v21 = (int8x8_t)vdup_n_s32((int)v15 - 16);
      v22 = v32;
      do
      {
        v23 = 0;
        v24 = vdup_n_s32(v19);
        v25 = (int32x2_t)0x100000000;
        do
        {
          v26 = vadd_s32(v20, v25);
          v27 = (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, (uint32x2_t)v26);
          if (a7)
            v28 = -1;
          else
            v28 = 0;
          *(int32x2_t *)&v22[v23] = vadd_s32(vadd_s32(v26, v24), (int32x2_t)vbic_s8(v21, vorr_s8(v27, (int8x8_t)vdup_n_s32(v28))));
          v25 = vadd_s32(v25, (int32x2_t)0x200000002);
          v23 += 2;
        }
        while (v23 != 16);
        v19 += 16;
        v22 += 16;
      }
      while (v19 < (unint64_t)v15);
    }
    else
    {
      v15 = 0;
    }
    v30 = "palignr";
    v31 = 259;
    ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a1, a3, v10, v32, v15, (uint64_t)&v30);
    EmitX86Select(a1, a6, (llvm::Value *)ShuffleVector, a5);
  }
  else
  {
    llvm::Constant::getNullValue(v14);
  }
}

uint64_t *UpgradeX86PSLLDQIntrinsics(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Cast;
  uint64_t *v11;
  uint64_t *ShuffleVector;
  unsigned int v13;
  int32x4_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  int *v17;
  int32x4_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  _WORD v24[20];
  int v25[8];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a2;
  v7 = (llvm::Type *)(8 * *(_DWORD *)(*(_QWORD *)a2 + 32));
  llvm::FixedVectorType::get((uint64_t **)(**(_QWORD **)(a1 + 64) + 1944), v7);
  v9 = v8;
  *(_QWORD *)v25 = "cast";
  v26 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1, 49, a2, v8, (uint64_t)v25);
  llvm::Constant::getNullValue(v9);
  ShuffleVector = v11;
  if (a3 <= 0xF)
  {
    if ((_DWORD)v7)
    {
      v13 = 0;
      v14 = vdupq_n_s32(v7 - a3);
      v15 = (uint32x4_t)vdupq_n_s32(v7);
      v16 = (int8x16_t)vdupq_n_s32(16 - (int)v7);
      v17 = v25;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      do
      {
        v19 = 0;
        v20 = vdupq_n_s32(v13);
        v21 = (int32x4_t)xmmword_24AA339B0;
        do
        {
          v22 = vaddq_s32(v14, v21);
          *(int32x4_t *)&v17[v19] = vaddq_s32(vaddq_s32(v22, v20), (int32x4_t)vandq_s8(v16, (int8x16_t)vcgtq_u32(v15, (uint32x4_t)v22)));
          v21 = vaddq_s32(v21, v18);
          v19 += 4;
        }
        while (v19 != 16);
        v13 += 16;
        v17 += 16;
      }
      while ((_DWORD)v7 != v13);
    }
    v24[16] = 257;
    ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector(a1, v11, (uint64_t)Cast, v25, v7, (uint64_t)v24);
  }
  *(_QWORD *)v25 = "cast";
  v26 = 259;
  return llvm::IRBuilderBase::CreateCast(a1, 49, (uint64_t)ShuffleVector, v6, (uint64_t)v25);
}

uint64_t *UpgradeX86PSRLDQIntrinsics(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *Cast;
  uint64_t v11;
  uint64_t *ShuffleVector;
  unsigned int v13;
  int32x4_t v14;
  int8x16_t v15;
  int *v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  _WORD v24[20];
  int v25[8];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a2;
  v7 = (llvm::Type *)(8 * *(_DWORD *)(*(_QWORD *)a2 + 32));
  llvm::FixedVectorType::get((uint64_t **)(**(_QWORD **)(a1 + 64) + 1944), v7);
  v9 = v8;
  *(_QWORD *)v25 = "cast";
  v26 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1, 49, a2, v8, (uint64_t)v25);
  llvm::Constant::getNullValue(v9);
  ShuffleVector = (uint64_t *)v11;
  if (a3 <= 0xF)
  {
    if ((_DWORD)v7)
    {
      v13 = 0;
      v14 = vdupq_n_s32(a3);
      v15 = (int8x16_t)vdupq_n_s32((int)v7 - 16);
      v16 = v25;
      v17.i64[0] = 0xF0000000FLL;
      v17.i64[1] = 0xF0000000FLL;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      do
      {
        v19 = 0;
        v20 = vdupq_n_s32(v13);
        v21 = (int32x4_t)xmmword_24AA339B0;
        do
        {
          v22 = vaddq_s32(v21, v14);
          *(int32x4_t *)&v16[v19] = vaddq_s32(vaddq_s32(v22, v20), (int32x4_t)vandq_s8(v15, (int8x16_t)vcgtq_u32((uint32x4_t)v22, v17)));
          v21 = vaddq_s32(v21, v18);
          v19 += 4;
        }
        while (v19 != 16);
        v13 += 16;
        v16 += 16;
      }
      while ((_DWORD)v7 != v13);
    }
    v24[16] = 257;
    ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector(a1, Cast, v11, v25, v7, (uint64_t)v24);
  }
  *(_QWORD *)v25 = "cast";
  v26 = 259;
  return llvm::IRBuilderBase::CreateCast(a1, 49, (uint64_t)ShuffleVector, v6, (uint64_t)v25);
}

double llvm::VectorType::getInteger(uint64_t a1)
{
  const char *v2;
  llvm::LLVMContext *PrimitiveSizeInBits;
  uint64_t **v4;

  PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(a1 + 24));
  if ((_BYTE)v2)
  v4 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a1, PrimitiveSizeInBits);
  return llvm::VectorType::get(v4, (llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(_BYTE *)(a1 + 8) == 19) << 32)));
}

uint64_t *UpgradeX86MaskedShift(llvm::IRBuilderBase *a1, uint64_t a2, int a3)
{
  uint64_t Declaration;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _WORD v13[20];
  uint64_t v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), a3, 0, 0);
  if (Declaration)
    v6 = *(_QWORD *)(Declaration + 24);
  else
    v6 = 0;
  v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v8 = *v7;
  v9 = v7[4];
  v14[0] = v8;
  v14[1] = v9;
  v13[16] = 257;
  v10 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v6, Declaration, v14, 2, (uint64_t)v13, 0);
  v11 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  return EmitX86Select(a1, *(unsigned __int8 **)(v11 + 96), (llvm::Value *)v10, *(llvm::Value **)(v11 + 64));
}

uint64_t *upgradeMaskedMove(llvm::IRBuilderBase *a1, uint64_t a2, const llvm::APInt *a3, unint64_t *a4)
{
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::IntegerType ***v9;
  llvm::Value *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *ICmp;
  llvm::Value *v14;
  uint64_t *Element;
  llvm::Value *v16;
  uint64_t *v17;
  uint64_t *Select;
  llvm::Value *v19;
  _BYTE v21[32];
  __int16 v22;
  uint64_t v23;
  unsigned int v24;

  v5 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v6 = *(llvm::Value **)v5;
  v7 = *(llvm::Value **)(v5 + 32);
  v8 = *(llvm::Value **)(v5 + 64);
  v9 = *(llvm::IntegerType ****)(v5 + 96);
  v24 = 8;
  v23 = 1;
  v22 = 257;
  v10 = (llvm::Value *)llvm::ConstantInt::get(*v9, (llvm::Type *)&v23, a3, a4);
  v11 = llvm::IRBuilderBase::CreateAnd(a1, (llvm::Value *)v9, v10, (const llvm::Twine *)v21);
  if (v24 >= 0x41 && v23)
    MEMORY[0x24BD1B380](v23, 0x1000C8000313F17);
  v22 = 257;
  llvm::Constant::getNullValue(*v11);
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)a1, 33, (llvm::CmpInst **)v11, v12, (uint64_t)v21);
  v22 = 257;
  v14 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)a1 + 8) + 2016, 0, 0);
  Element = llvm::IRBuilderBase::CreateExtractElement(a1, v7, v14, (const llvm::Twine *)v21);
  v22 = 257;
  v16 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)a1 + 8) + 2016, 0, 0);
  v17 = llvm::IRBuilderBase::CreateExtractElement(a1, v8, v16, (const llvm::Twine *)v21);
  v22 = 257;
  Select = llvm::IRBuilderBase::CreateSelect(a1, (llvm::Value *)ICmp, (llvm::Value *)Element, (llvm::Value *)v17, (const llvm::Twine *)v21, 0);
  v22 = 257;
  v19 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)a1 + 8) + 2016, 0, 0);
  return llvm::IRBuilderBase::CreateInsertElement(a1, v6, (llvm::Value *)Select, v19, (const llvm::Twine *)v21);
}

uint64_t *UpgradeMaskToInt(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t *X86MaskVec;
  const char *v6;
  __int16 v7;

  v3 = *(_QWORD *)a2;
  X86MaskVec = getX86MaskVec(a1, *(_QWORD *)&a2[-8 * (a2[5] & 0x7FFFFFF)], *(_DWORD *)(*(_QWORD *)a2 + 32));
  v6 = "vpmovm2";
  v7 = 259;
  return llvm::IRBuilderBase::CreateCast(a1, 40, (uint64_t)X86MaskVec, v3, (uint64_t)&v6);
}

uint64_t *llvm::IRBuilderBase::CreateFNeg(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3, llvm::MDNode *a4)
{
  uint64_t *result;
  llvm::UnaryInstruction *v9;
  llvm::UnaryInstruction *v10;
  int v11;
  _BYTE v12[32];
  __int16 v13;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, _QWORD))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), 12, a2, *((unsigned int *)this + 24));
  if (!result)
  {
    v13 = 257;
    v9 = llvm::UnaryOperator::Create(12, a2, (const llvm::Twine *)v12, 0);
    v10 = v9;
    v11 = *((_DWORD *)this + 24);
    if (a4 || (a4 = (llvm::MDNode *)*((_QWORD *)this + 11)) != 0)
      llvm::Value::setMetadata((uint64_t)v9, 3, a4);
    *((_BYTE *)v10 + 17) |= 2 * (_BYTE)v11;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v10, (uint64_t)a3);
  }
  return result;
}

uint64_t *EmitX86ScalarSelect(llvm::IRBuilderBase *a1, unsigned __int8 *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  uint64_t *Cast;
  llvm::Value *v10;
  uint64_t *Element;
  _BYTE v13[32];
  __int16 v14;

  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    llvm::FixedVectorType::get((uint64_t **)(**((_QWORD **)a1 + 8) + 1920), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
    v14 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, (uint64_t)a2, v8, (uint64_t)v13);
    v14 = 257;
    v10 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)a1 + 8) + 2016, 0, 0);
    Element = llvm::IRBuilderBase::CreateExtractElement(a1, (llvm::Value *)Cast, v10, (const llvm::Twine *)v13);
    v14 = 257;
    return llvm::IRBuilderBase::CreateSelect(a1, (llvm::Value *)Element, a3, a4, (const llvm::Twine *)v13, 0);
  }
  return (uint64_t *)a3;
}

uint64_t *UpgradeX86VPERMT2Intrinsics(llvm::IRBuilderBase *a1, uint64_t a2, int a3, char a4)
{
  llvm::Type *v8;
  const char *v9;
  int PrimitiveSizeInBits;
  int v11;
  llvm::Type *v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Declaration;
  uint64_t v38;
  llvm::Type *v39;
  uint64_t *v40;
  uint64_t *Cast;
  uint64_t v42;
  _BYTE v44[32];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = *(llvm::Type **)a2;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  if ((_BYTE)v9)
  v11 = *((_DWORD *)v8 + 2);
  if ((v11 & 0xFE) == 0x12)
  {
    v12 = (llvm::Type *)**((_QWORD **)v8 + 2);
    v13 = llvm::Type::getPrimitiveSizeInBits(v12);
    v11 = *((_DWORD *)v12 + 2);
  }
  else
  {
    v13 = llvm::Type::getPrimitiveSizeInBits(v8);
  }
  v14 = v11 < 6u && ((0x2Fu >> v11) & 1) != 0 || (v11 & 0xFD) == 4;
  v15 = PrimitiveSizeInBits == 128 && v13 == 32;
  v16 = !v15;
  v17 = !v14;
  if (!v15 || v17)
  {
    if ((v14 | v16) == 1)
    {
      v19 = PrimitiveSizeInBits == 128 && v13 == 64;
      v20 = !v19;
      v21 = !v19 || !v14;
      if (v21 == 1)
      {
        if ((v14 | v20) == 1)
        {
          v22 = PrimitiveSizeInBits == 256 && v13 == 32;
          v23 = !v22;
          v24 = !v22 || !v14;
          if (v24 == 1)
          {
            if ((v14 | v23) == 1)
            {
              v25 = PrimitiveSizeInBits == 256 && v13 == 64;
              v26 = !v25;
              v27 = !v25 || !v14;
              if (v27 == 1)
              {
                if ((v14 | v26) == 1)
                {
                  v28 = PrimitiveSizeInBits == 512 && v13 == 32;
                  v29 = !v28;
                  v30 = !v28 || !v14;
                  if (v30 == 1)
                  {
                    if ((v14 | v29) == 1)
                    {
                      v31 = PrimitiveSizeInBits == 512 && v13 == 64;
                      v32 = !v31;
                      if (!v31)
                        v17 = 1;
                      if (v17 == 1)
                      {
                        if ((v14 | v32) == 1)
                        {
                          if (PrimitiveSizeInBits == 128 && v13 == 16)
                          {
                            v18 = 10933;
                          }
                          else if (PrimitiveSizeInBits == 256 && v13 == 16)
                          {
                            v18 = 10934;
                          }
                          else if (PrimitiveSizeInBits == 512 && v13 == 16)
                          {
                            v18 = 10935;
                          }
                          else if (PrimitiveSizeInBits == 128 && v13 == 8)
                          {
                            v18 = 10945;
                          }
                          else if (v13 == 8 && PrimitiveSizeInBits == 256)
                          {
                            v18 = 10946;
                          }
                          else
                          {
                            v18 = 10947;
                          }
                        }
                        else
                        {
                          v18 = 10944;
                        }
                      }
                      else
                      {
                        v18 = 10938;
                      }
                    }
                    else
                    {
                      v18 = 10932;
                    }
                  }
                  else
                  {
                    v18 = 10941;
                  }
                }
                else
                {
                  v18 = 10943;
                }
              }
              else
              {
                v18 = 10937;
              }
            }
            else
            {
              v18 = 10931;
            }
          }
          else
          {
            v18 = 10940;
          }
        }
        else
        {
          v18 = 10942;
        }
      }
      else
      {
        v18 = 10936;
      }
    }
    else
    {
      v18 = 10930;
    }
  }
  else
  {
    v18 = 10939;
  }
  v34 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v35 = *v34;
  v36 = v34[4];
  v46 = *v34;
  v47 = v36;
  v48 = v34[8];
  if ((a4 & 1) == 0)
  {
    v46 = v36;
    v47 = v35;
  }
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), v18, 0, 0);
  if (Declaration)
    v38 = *(_QWORD *)(Declaration + 24);
  else
    v38 = 0;
  v45 = 257;
  v40 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v38, Declaration, &v46, 3, (uint64_t)v44, 0);
  if (a3)
  {
    Cast = (uint64_t *)llvm::ConstantAggregateZero::get(v8, v39);
  }
  else
  {
    v42 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v45 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, v42, (uint64_t)v8, (uint64_t)v44);
  }
  return EmitX86Select(a1, *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96), (llvm::Value *)v40, (llvm::Value *)Cast);
}

uint64_t upgradeAVX512MaskToSelect(uint64_t a1, unint64_t a2, llvm::IRBuilderBase *a3, uint64_t a4, llvm::Value **a5)
{
  uint64_t v10;
  llvm::Type *v11;
  const char *v12;
  int PrimitiveSizeInBits;
  uint64_t v14;
  unint64_t v15;
  int v16;
  llvm::Type *v17;
  int v18;
  char v19;
  int v22;
  BOOL v30;
  BOOL v31;
  _BOOL4 v34;
  BOOL v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  BOOL v61;
  char *v62;
  char *v63;
  uint64_t Declaration;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  _WORD v71[20];
  void *v72;
  uint64_t v73;
  _QWORD v74[5];

  v74[4] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0xC)
    v10 = 12;
  else
    v10 = a2;
  v11 = *(llvm::Type **)a4;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a4);
  if ((_BYTE)v12)
  {
    v11 = *(llvm::Type **)a4;
  }
  v14 = a1 + v10;
  v15 = a2 - v10;
  v16 = *((_DWORD *)v11 + 2);
  v17 = v11;
  if ((v16 & 0xFE) == 0x12)
    v17 = (llvm::Type *)**((_QWORD **)v11 + 2);
  v18 = llvm::Type::getPrimitiveSizeInBits(v17);
  if (v15 < 5)
    goto LABEL_9;
  if (*(_DWORD *)v14 == 779641197 && *(_BYTE *)(v14 + 4) == 112)
  {
    if (PrimitiveSizeInBits == 128 && v18 == 32)
    {
      v22 = 11304;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 64)
    {
      v22 = 11343;
      goto LABEL_221;
    }
    v35 = v18 == 32 && PrimitiveSizeInBits == 256;
    v36 = 10261;
    goto LABEL_112;
  }
  if (*(_DWORD *)v14 == 778987885 && *(_BYTE *)(v14 + 4) == 112)
  {
    if (PrimitiveSizeInBits == 128 && v18 == 32)
    {
      v22 = 11306;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 64)
    {
      v22 = 11346;
      goto LABEL_221;
    }
    v35 = v18 == 32 && PrimitiveSizeInBits == 256;
    v36 = 10263;
    goto LABEL_112;
  }
  if (v15 < 8)
  {
LABEL_9:
    v19 = 1;
LABEL_10:
    if (v15 == 13)
    {
      if (*(_QWORD *)v14 == 0x6432647074747663 && *(_QWORD *)(v14 + 5) == 0x3635322E71643264)
      {
        v22 = 10245;
        goto LABEL_221;
      }
      if (*(_QWORD *)v14 == 0x6432737074747663 && *(_QWORD *)(v14 + 5) == 0x3832312E71643273)
      {
        v22 = 11338;
        goto LABEL_221;
      }
      if (*(_QWORD *)v14 == 0x6432737074747663 && *(_QWORD *)(v14 + 5) == 0x3635322E71643273)
      {
        v22 = 10246;
        goto LABEL_221;
      }
    }
    else if (v15 == 12)
    {
      if (*(_QWORD *)v14 == 0x7164326470747663 && *(_DWORD *)(v14 + 8) == 909455918)
      {
        v22 = 10243;
        goto LABEL_221;
      }
      if (*(_QWORD *)v14 == 0x7370326470747663 && *(_DWORD *)(v14 + 8) == 909455918)
      {
        v22 = 10242;
        goto LABEL_221;
      }
    }
    if ((v19 & 1) != 0)
      goto LABEL_59;
    if (*(_QWORD *)v14 != 0x2E7261766D726570)
    {
      if (*(_QWORD *)v14 == 0x7762646173706264 && *(_BYTE *)(v14 + 8) == 46)
      {
        v37 = 10409;
        v38 = PrimitiveSizeInBits == 256;
        v39 = 10411;
        v40 = 10410;
        goto LABEL_215;
      }
LABEL_59:
      if (v15 < 0xF
        || (*(_QWORD *)v14 == 0x687369746C756D70 ? (v30 = *(_QWORD *)(v14 + 7) == 0x2E62712E74666968) : (v30 = 0),
            !v30))
      {
        if ((v19 & 1) != 0
          || (*(_QWORD *)v14 == 0x7463696C666E6F63 ? (v31 = *(_BYTE *)(v14 + 8) == 46) : (v31 = 0), !v31))
        {
          if (v15 < 5)
            return 0;
          goto LABEL_70;
        }
        v41 = *(unsigned __int8 *)(v14 + 9);
        if (v41 == 100 && PrimitiveSizeInBits == 128)
        {
          v22 = 10389;
          goto LABEL_221;
        }
        if (v41 == 100 && PrimitiveSizeInBits == 256)
        {
          v22 = 10390;
          goto LABEL_221;
        }
        if (v41 == 100 && PrimitiveSizeInBits == 512)
        {
          v22 = 10391;
          goto LABEL_221;
        }
        if (v41 == 113 && PrimitiveSizeInBits == 128)
        {
          v22 = 10392;
          goto LABEL_221;
        }
        v68 = PrimitiveSizeInBits == 256 && v41 == 113;
        v69 = 10393;
LABEL_241:
        if (v68)
          v22 = v69;
        else
          v22 = v69 + 1;
        goto LABEL_221;
      }
      v37 = 10788;
      v38 = PrimitiveSizeInBits == 256;
      v39 = 10790;
      v40 = 10789;
LABEL_215:
      if (v38)
        v39 = v40;
      if (PrimitiveSizeInBits == 128)
        v22 = v37;
      else
        v22 = v39;
      goto LABEL_221;
    }
LABEL_86:
    if ((v16 & 0xFE) == 0x12)
      v16 = *(_DWORD *)(**((_QWORD **)v11 + 2) + 8);
    v34 = v16 < 6u && ((0x2Fu >> v16) & 1) != 0 || (v16 & 0xFD) == 4;
    v43 = PrimitiveSizeInBits == 256 && v18 == 32;
    v44 = !v43;
    v45 = !v34;
    if (v43 && !v45)
    {
      v22 = 10325;
      goto LABEL_221;
    }
    if ((v34 | v44) != 1)
    {
      v22 = 10324;
      goto LABEL_221;
    }
    v46 = PrimitiveSizeInBits == 256 && v18 == 64;
    v47 = !v46;
    v48 = !v46 || !v34;
    if (v48 != 1)
    {
      v22 = 10771;
      goto LABEL_221;
    }
    if ((v34 | v47) != 1)
    {
      v22 = 10773;
      goto LABEL_221;
    }
    v49 = PrimitiveSizeInBits == 512 && v18 == 32;
    v50 = !v49;
    v51 = !v49 || !v34;
    if (v51 != 1)
    {
      v22 = 10781;
      goto LABEL_221;
    }
    if ((v34 | v50) != 1)
    {
      v22 = 10782;
      goto LABEL_221;
    }
    v52 = PrimitiveSizeInBits == 512 && v18 == 64;
    v53 = !v52;
    if (!v52)
      v45 = 1;
    if (v45 != 1)
    {
      v22 = 10772;
      goto LABEL_221;
    }
    if ((v34 | v53) != 1)
    {
      v22 = 10774;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 16)
    {
      v22 = 10775;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 256 && v18 == 16)
    {
      v22 = 10776;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 512 && v18 == 16)
    {
      v22 = 10777;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 8)
    {
      v22 = 10778;
      goto LABEL_221;
    }
    v68 = v18 == 8 && PrimitiveSizeInBits == 256;
    v69 = 10779;
    goto LABEL_241;
  }
  if (*(_QWORD *)v14 == 0x2E622E6675687370)
  {
    v37 = 11449;
    v38 = PrimitiveSizeInBits == 256;
    v39 = 10792;
    v40 = 10339;
    goto LABEL_215;
  }
  if (v15 >= 0xB && *(_QWORD *)v14 == 0x2E72682E6C756D70 && *(_QWORD *)(v14 + 3) == 0x2E77732E72682E6CLL)
  {
    v37 = 11447;
    v38 = PrimitiveSizeInBits == 256;
    v39 = 10785;
    v40 = 10335;
    goto LABEL_215;
  }
  if (*(_QWORD *)v14 == 0x2E772E686C756D70)
  {
    v37 = 11357;
    v38 = PrimitiveSizeInBits == 256;
    v39 = 10786;
    v40 = 10336;
    goto LABEL_215;
  }
  if (v15 >= 9)
  {
    if (*(_QWORD *)v14 == 0x772E75686C756D70 && *(_BYTE *)(v14 + 8) == 46)
    {
      v37 = 11358;
      v38 = PrimitiveSizeInBits == 256;
      v39 = 10787;
      v40 = 10337;
      goto LABEL_215;
    }
    if (*(_QWORD *)v14 == 0x642E776464616D70 && *(_BYTE *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        v22 = 11355;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        v22 = 10333;
      }
      else
      {
        v22 = 10784;
      }
      goto LABEL_221;
    }
    if (v15 >= 0xB && *(_QWORD *)v14 == 0x7362756464616D70 && *(_QWORD *)(v14 + 3) == 0x2E772E7362756464)
    {
      if (PrimitiveSizeInBits == 128)
      {
        v22 = 11445;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        v22 = 10332;
      }
      else
      {
        v22 = 10783;
      }
      goto LABEL_221;
    }
    if (*(_QWORD *)v14 == 0x627773736B636170 && *(_BYTE *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        v22 = 11350;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        v22 = 10318;
      }
      else
      {
        v22 = 10766;
      }
      goto LABEL_221;
    }
    if (*(_QWORD *)v14 == 0x776473736B636170 && *(_BYTE *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        v22 = 11349;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        v22 = 10317;
      }
      else
      {
        v22 = 10765;
      }
      goto LABEL_221;
    }
    if (*(_QWORD *)v14 == 0x627773756B636170 && *(_BYTE *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        v22 = 11351;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        v22 = 10320;
      }
      else
      {
        v22 = 10768;
      }
      goto LABEL_221;
    }
    if (*(_QWORD *)v14 == 0x776473756B636170 && *(_BYTE *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        v22 = 11397;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        v22 = 10319;
      }
      else
      {
        v22 = 10767;
      }
      goto LABEL_221;
    }
    if (v15 < 0xB
      || (*(_QWORD *)v14 == 0x766C696D72657076 ? (v61 = *(_QWORD *)(v14 + 3) == 0x2E7261766C696D72) : (v61 = 0), !v61))
    {
      v19 = 0;
      goto LABEL_10;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 32)
    {
      v22 = 10276;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 64)
    {
      v22 = 10274;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 256 && v18 == 32)
    {
      v22 = 10277;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 256 && v18 == 64)
    {
      v22 = 10275;
      goto LABEL_221;
    }
    v35 = v18 == 32 && PrimitiveSizeInBits == 512;
    v36 = 10948;
LABEL_112:
    if (v35)
      v22 = v36 + 1;
    else
      v22 = v36;
    goto LABEL_221;
  }
  if (*(_QWORD *)v14 == 0x2E7261766D726570)
    goto LABEL_86;
LABEL_70:
  if (*(_DWORD *)v14 != 1735811440 || *(_BYTE *)(v14 + 4) != 46)
    return 0;
  v42 = *(unsigned __int8 *)(v14 + 5);
  if (v42 == 98 && PrimitiveSizeInBits == 128)
  {
    v22 = 11353;
  }
  else if (v42 == 98 && PrimitiveSizeInBits == 256)
  {
    v22 = 10321;
  }
  else if (v42 == 98 && PrimitiveSizeInBits == 512)
  {
    v22 = 10769;
  }
  else if (v42 == 119 && PrimitiveSizeInBits == 128)
  {
    v22 = 11354;
  }
  else if (PrimitiveSizeInBits == 256 && v42 == 119)
  {
    v22 = 10322;
  }
  else
  {
    v22 = 10770;
  }
LABEL_221:
  v62 = (char *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF));
  v63 = (char *)llvm::CallBase::arg_end((llvm::CallBase *)a4);
  v72 = v74;
  v73 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v72, v62, v63);
  LODWORD(v73) = v73 - 2;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a4 + 40) + 56) + 40), v22, 0, 0);
  if (Declaration)
    v65 = *(_QWORD *)(Declaration + 24);
  else
    v65 = 0;
  v71[16] = 257;
  *a5 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)a3, v65, Declaration, (uint64_t *)v72, v73, (uint64_t)v71, 0);
  v66 = llvm::CallBase::arg_end((llvm::CallBase *)a4);
  v67 = a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
  *a5 = (llvm::Value *)EmitX86Select(a3, *(unsigned __int8 **)(v67 + 32 * (((unint64_t)(v66 - v67) >> 5) - 1)), *a5, *(llvm::Value **)(v67 + 32 * (((unint64_t)(v66 - v67) >> 5) - 2)));
  if (v72 != v74)
    free(v72);
  return 1;
}

uint64_t *llvm::IRBuilderBase::CreateNeg(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  llvm::Value *v6;

  llvm::Constant::getNullValue(*(_QWORD *)a2);
  return llvm::IRBuilderBase::CreateSub(this, v6, a2, a3, 0, 0);
}

uint64_t *llvm::IRBuilderBase::CreateAtomicRMW(uint64_t *a1, __int16 a2, uint64_t a3, uint64_t *a4, __int16 a5, __int16 a6, char a7)
{
  unint64_t v9;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  _BYTE v20[32];
  __int16 v21;

  LOBYTE(v9) = a5;
  if ((a5 & 0xFF00) == 0)
  {
    llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 256, *a4);
    v16 = (unint64_t)(v15 + 7) >> 3;
    if ((_BYTE)v14)
    v9 = 63 - __clz(v16);
  }
  v17 = (char *)operator new(0x80uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 8) = *a4;
  v18 = (uint64_t *)(v17 + 64);
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = v17 + 64;
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 5) = 0;
  *((_QWORD *)v17 + 6) = 0;
  *((_QWORD *)v17 + 7) = v17 + 64;
  *((_QWORD *)v17 + 9) = 0;
  *((_QWORD *)v17 + 10) = 0x200000041;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *((_DWORD *)v17 + 30) = 0;
  llvm::AtomicRMWInst::Init((uint64_t)(v17 + 64), a2, a3, (uint64_t)a4, v9, a6, a7);
  v21 = 257;
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v18, (uint64_t)v20);
}

void llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::$_0::operator()(uint64_t a1, uint64_t a2, llvm::Type *a3)
{
  uint64_t v3;
  llvm::ConstantExpr *PointerCast;
  llvm::PoisonValue *v5;
  BOOL v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::Type *v14;
  uint64_t *inserted;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int i;
  _BYTE v20[32];
  __int16 v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[7];

  v24[6] = *MEMORY[0x24BDAC8D0];
  v3 = **(_QWORD **)a1;
  PointerCast = **(llvm::ConstantExpr ***)(a1 + 8);
  if (*(_QWORD *)(v3 + 72) == *((_QWORD *)PointerCast + 3))
    goto LABEL_7;
  v5 = *(llvm::PoisonValue **)v3;
  if (*(_QWORD *)v3)
    v6 = *(_BYTE *)(*(_QWORD *)v3 + 8) == 16;
  else
    v6 = 0;
  if (!v6)
  {
    PointerCast = llvm::ConstantExpr::getPointerCast(**(llvm::ConstantExpr ***)(a1 + 8), **(llvm::Constant ***)(v3 - 32), a3);
LABEL_7:
    llvm::GlobalIFunc::setResolver(v3, (uint64_t)PointerCast);
    return;
  }
  v8 = (char *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
  v9 = (char *)llvm::CallBase::arg_end(**(llvm::CallBase ***)a1);
  v22 = v24;
  v23 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v22, v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = **(_QWORD **)(a1 + 8);
  if (v11)
    v12 = *(_QWORD *)(v11 + 24);
  else
    v12 = 0;
  v21 = 257;
  v13 = llvm::IRBuilderBase::CreateCall(v10, v12, v11, (uint64_t *)v22, v23, (uint64_t)v20, 0);
  inserted = (uint64_t *)llvm::PoisonValue::get(v5, v14);
  for (i = 0; i < *((_DWORD *)v5 + 3); ++i)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v21 = 257;
    v17 = llvm::IRBuilderBase::CreateExtractValue(v16, v13, &i, 1, (uint64_t)v20);
    v18 = *(_QWORD *)(a1 + 16);
    v21 = 257;
    inserted = llvm::IRBuilderBase::CreateInsertValue(v18, inserted, (uint64_t)v17, &i, 1, (uint64_t)v20);
  }
  llvm::Value::doRAUW(**(llvm::ValueAsMetadata ***)a1, (llvm::Value *)inserted, (llvm::Value *)1);
  llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*(_QWORD *)(**(_QWORD **)a1 + 40) + 40, **(_QWORD **)a1 + 24);
  if (v22 != v24)
    free(v22);
}

uint64_t *llvm::MemIntrinsicBase<llvm::MemIntrinsic>::setDestAlignment(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t *result;
  unint64_t v6;
  int v7;

  v4 = (_QWORD *)(a1 + 64);
  result = llvm::AttributeList::removeAttributeAtIndex((_QWORD *)(a1 + 64), **(uint64_t ***)a1, 1, 75);
  *(_QWORD *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    v6 = llvm::Attribute::get(**(uint64_t ***)a1, 75, 1 << a2);
    v7 = 0;
    result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t *llvm::MemTransferBase<llvm::MemIntrinsic>::setSourceAlignment(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t *result;
  unint64_t v6;
  int v7;

  v4 = (_QWORD *)(a1 + 64);
  result = llvm::AttributeList::removeAttributeAtIndex((_QWORD *)(a1 + 64), **(uint64_t ***)a1, 2, 75);
  *(_QWORD *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    v6 = llvm::Attribute::get(**(uint64_t ***)a1, 75, 1 << a2);
    v7 = 1;
    result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

llvm::MDNode *llvm::UpgradeTBAANode(llvm *this, llvm::MDNode *a2)
{
  llvm *v2;
  unint64_t v3;
  _QWORD *v4;
  _BYTE **v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 *v9;
  llvm::ValueAsMetadata *v10;
  llvm::Value *v11;
  _QWORD *v12;
  llvm::ValueAsMetadata *v13;
  llvm::Value *v14;
  _QWORD *v15;
  unint64_t v16;
  llvm::MDNode *Impl;
  llvm::MDNode *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v2 = this;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)this - 16);
  v3 = *((_QWORD *)this - 2);
  if ((v3 & 2) != 0)
    v5 = (_BYTE **)*((_QWORD *)this - 4);
  else
    v5 = (_BYTE **)&v4[-((v3 >> 2) & 0xF)];
  if (!llvm::MDNode::classof(*v5)
    || ((*v4 & 2) != 0 ? (v6 = *((_DWORD *)v2 - 6)) : (v6 = (*v4 >> 6) & 0xF), v6 <= 2))
  {
    v7 = *((_QWORD *)v2 + 1);
    v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
      v8 = (_QWORD *)*v8;
    if ((*v4 & 2) != 0)
    {
      if (*((_DWORD *)v2 - 6) == 3)
      {
        v9 = (__int128 *)*((_QWORD *)v2 - 4);
        goto LABEL_16;
      }
    }
    else if ((*v4 & 0x3C0) == 0xC0)
    {
      v9 = (__int128 *)&v4[-((*v4 >> 2) & 0xFLL)];
LABEL_16:
      v22 = *v9;
      Impl = llvm::MDTuple::getImpl(v8, (llvm::hashing::detail::hash_state *)&v22, 2uLL, 0, 1);
      v19 = Impl;
      llvm::Constant::getNullValue(*v8 + 2016);
      v20 = llvm::ValueAsMetadata::get(v10, v11);
      if ((*v4 & 2) != 0)
        v12 = (_QWORD *)*((_QWORD *)v2 - 4);
      else
        v12 = &v4[-((*v4 >> 2) & 0xFLL)];
      v21 = v12[2];
      v15 = v8;
      v16 = 4;
      return llvm::MDTuple::getImpl(v15, (llvm::hashing::detail::hash_state *)&Impl, v16, 0, 1);
    }
    Impl = v2;
    v19 = v2;
    llvm::Constant::getNullValue(*v8 + 2016);
    v20 = llvm::ValueAsMetadata::get(v13, v14);
    v15 = v8;
    v16 = 3;
    return llvm::MDTuple::getImpl(v15, (llvm::hashing::detail::hash_state *)&Impl, v16, 0, 1);
  }
  return v2;
}

void llvm::UpgradeBitCastInst(llvm *this, uint64_t *a2, llvm::Value *a3, llvm::Type *a4, llvm::Instruction **a5)
{
  uint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  char v10;
  uint64_t v11;

  if ((_DWORD)this == 49)
  {
    *(_QWORD *)a4 = 0;
    v6 = *a2;
    v7 = *(_DWORD *)(*a2 + 8);
    v8 = v7;
    if ((v7 & 0xFE) == 0x12)
      v8 = *(_BYTE *)(**(_QWORD **)(v6 + 16) + 8);
    if (v8 == 15)
    {
      v9 = *((_DWORD *)a3 + 2);
      v10 = v9;
      if ((v9 & 0xFE) == 0x12)
        v10 = *(_BYTE *)(**((_QWORD **)a3 + 2) + 8);
      if (v10 == 15)
      {
        if ((v7 & 0xFE) == 0x12)
          v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
        if ((v9 & 0xFE) == 0x12)
          v9 = *(_DWORD *)(**((_QWORD **)a3 + 2) + 8);
        if ((v9 ^ v7) >= 0x100)
        {
          llvm::CastInst::Create(47);
          *(_QWORD *)a4 = v11;
          llvm::CastInst::Create(48);
        }
      }
    }
  }
}

void llvm::UpgradeBitCastExpr(llvm *this, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  _QWORD **v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  uint64_t v10;

  if ((_DWORD)this == 49)
  {
    v5 = *(_QWORD ***)a2;
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v7 = v6;
    if ((v6 & 0xFE) == 0x12)
      v7 = *(_BYTE *)(*v5[2] + 8);
    if (v7 == 15)
    {
      v8 = *((_DWORD *)a3 + 2);
      v9 = v8;
      if ((v8 & 0xFE) == 0x12)
        v9 = *(_BYTE *)(**((_QWORD **)a3 + 2) + 8);
      if (v9 == 15)
      {
        if ((v6 & 0xFE) == 0x12)
          v6 = *(_DWORD *)(*v5[2] + 8);
        if ((v8 & 0xFE) == 0x12)
          v8 = *(_DWORD *)(**((_QWORD **)a3 + 2) + 8);
        if ((v8 ^ v6) >= 0x100)
        {
          getFoldedCast((llvm *)0x2F, a2, (llvm::Constant *)(**v5 + 2016), 0);
          getFoldedCast((llvm *)0x30, v10, a3, 0);
        }
      }
    }
  }
}

uint64_t llvm::UpgradeDebugInfo(llvm *this, llvm::Module *a2)
{
  uint64_t v2;
  llvm *DebugMetadataVersionFromModule;
  llvm::Module *v6;
  int v7;
  const llvm::Module *v8;
  BOOL *v9;
  llvm::Module *v10;
  uint64_t (**v11)(llvm::DiagnosticInfo *__hidden);
  int v12;
  char v13;
  llvm *v14;
  int v15;
  char v16;

  if (!byte_257966658)
  {
    DebugMetadataVersionFromModule = (llvm *)llvm::getDebugMetadataVersionFromModule(this, a2);
    if ((_DWORD)DebugMetadataVersionFromModule == 700000003
      || (v7 = (int)DebugMetadataVersionFromModule, (_DWORD)DebugMetadataVersionFromModule == 3))
    {
      v16 = 0;
      v8 = (const llvm::Module *)llvm::errs(DebugMetadataVersionFromModule);
      if (llvm::verifyModule(this, v8, (llvm::raw_ostream *)&v16, v9))
        llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const llvm::Twine *)1);
      if (v16)
      {
        v12 = 5;
        v13 = 1;
        v11 = &off_251C1EAA8;
        v14 = this;
        llvm::LLVMContext::diagnose(*(uint64_t **)this, (const llvm::DiagnosticInfo *)&v11);
        return llvm::StripDebugInfo(this, v10);
      }
    }
    else if (llvm::StripDebugInfo(this, v6))
    {
      v12 = 5;
      v2 = 1;
      v13 = 1;
      v11 = &off_251C1EA78;
      v14 = this;
      v15 = v7;
      llvm::LLVMContext::diagnose(*(uint64_t **)this, (const llvm::DiagnosticInfo *)&v11);
      return v2;
    }
  }
  return 0;
}

llvm::NamedMDNode *llvm::UpgradeARCRuntime(llvm *this, llvm::Module *a2)
{
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  std::string *v11;
  std::string::size_type v12;
  void *v13;
  unsigned int v14;
  void **v15;
  std::string::size_type v16;
  void **p_p;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  void *__p;
  std::string::size_type v27;
  uint64_t v28;
  std::string __dst;
  std::string v30;
  void *v31[2];
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v25 = (uint64_t *)this;
  llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()(&v25, "clang.arc.use", 218);
  v33 = "clang.arc.retainAutoreleasedReturnValueMarker";
  LOWORD(v36) = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v33);
  if (result)
  {
    v4 = result;
    v5 = ***((_QWORD ***)result + 6);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 - 16);
      v7 = (v6 & 2) != 0 ? *(uint64_t **)(v5 - 32) : (uint64_t *)(v5 - 16 - 8 * ((v6 >> 2) & 0xF));
      v8 = *v7;
      if (*v7)
      {
        if (!*(_BYTE *)v8)
        {
          v33 = &v35;
          v34 = 0x400000000;
          v9 = *(void ***)(v8 + 8);
          v10 = *v9;
          v31[0] = v9 + 3;
          v31[1] = v10;
          llvm::StringRef::split((unsigned int *)v31, (unsigned int *)&v33, "#", 1uLL, -1, 1);
          if ((_DWORD)v34 == 2)
          {
            if (*(_QWORD *)v33)
              std::string::basic_string[abi:nn180100](&__dst, *(void **)v33, *((_QWORD *)v33 + 1));
            else
              memset(&__dst, 0, sizeof(__dst));
            v11 = std::string::append(&__dst, ";");
            v12 = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v30.__r_.__value_.__r.__words[2] = v12;
            v11->__r_.__value_.__l.__size_ = 0;
            v11->__r_.__value_.__r.__words[2] = 0;
            v11->__r_.__value_.__r.__words[0] = 0;
            v13 = (void *)*((_QWORD *)v33 + 2);
            if (v13)
            {
              std::string::basic_string[abi:nn180100](&__p, v13, *((_QWORD *)v33 + 3));
              v14 = HIBYTE(v28);
              v15 = (void **)__p;
              v16 = v27;
            }
            else
            {
              v16 = 0;
              v15 = 0;
              v14 = 0;
              __p = 0;
              v27 = 0;
              v28 = 0;
            }
            if ((v14 & 0x80u) == 0)
              p_p = &__p;
            else
              p_p = v15;
            if ((v14 & 0x80u) == 0)
              v18 = v14;
            else
              v18 = v16;
            v19 = std::string::append(&v30, (const std::string::value_type *)p_p, v18);
            v20 = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)v31 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v32 = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v28) < 0)
              operator delete(__p);
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v30.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v32 >= 0)
              v21 = (uint64_t *)v31;
            else
              v21 = (uint64_t *)v31[0];
            if (v32 >= 0)
              v22 = HIBYTE(v32);
            else
              v22 = (unint64_t)v31[1];
            v23 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(_QWORD **)this + 312), v21, v22);
            if (v24)
              *(_QWORD *)(v23 + 16) = v23;
            v8 = v23 + 8;
            if (SHIBYTE(v32) < 0)
              operator delete(v31[0]);
          }
          llvm::Module::addModuleFlag((_QWORD **)this, (llvm::Type *)1, (uint64_t *)"clang.arc.retainAutoreleasedReturnValueMarker", 0x2DuLL, v8);
          llvm::Module::eraseNamedMetadata(this, v4);
        }
      }
    }
  }
  return result;
}

void llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()(uint64_t **a1, char *__s, int a3)
{
  uint64_t *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *Cast;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t Declaration;
  _BYTE v28[32];
  __int16 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[10];
  int v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (**v40)(llvm::ConstantFolder *__hidden);
  _QWORD v41[3];

  v41[1] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (__s)
    v7 = strlen(__s);
  else
    v7 = 0;
  v8 = llvm::ValueSymbolTable::lookup(v6[14], (uint64_t *)__s, v7);
  if (v8)
  {
    v9 = v8;
    if (!*(_BYTE *)(v8 + 16))
    {
      Declaration = llvm::Intrinsic::getDeclaration(*a1, a3, 0, 0);
      v10 = *(_QWORD *)(v9 + 8);
      if (!v10)
        goto LABEL_33;
      v11 = &v32;
      do
      {
        v12 = *(_QWORD *)(v10 + 24);
        v10 = *(_QWORD *)(v10 + 8);
        if (v12 && *(_BYTE *)(v12 + 16) == 84)
        {
          v13 = *(_QWORD *)(v12 - 32);
          if (!v13 || *(_BYTE *)(v13 + 16) || *(_QWORD *)(v13 + 24) != *(_QWORD *)(v12 + 72))
            v13 = 0;
          if (v13 == v9)
          {
            v14 = *(uint64_t ***)(v12 + 40);
            v15 = **v14;
            v33[0] = v34;
            v33[1] = (void *)0x200000000;
            v34[6] = v15;
            v34[7] = &v40;
            v34[8] = v41;
            v34[9] = 0;
            v35 = 0;
            v36 = 512;
            v37 = 7;
            v34[4] = 0;
            v34[5] = 0;
            v38 = 0;
            v39 = 0;
            v40 = &off_251C359D8;
            v41[0] = &off_251C35AC8;
            llvm::IRBuilderBase::SetInsertPoint((unsigned int *)v33, (uint64_t)v14, v12 + 24);
            v16 = *(_QWORD *)(Declaration + 24);
            v17 = v11;
            v30 = v11;
            v31 = 0x200000000;
            v18 = *(uint64_t **)(v16 + 16);
            if (*v18 == *(_QWORD *)v12 || llvm::CastInst::castIsValid(49, *(_QWORD *)v12, *v18))
            {
              v19 = llvm::CallBase::arg_end((llvm::CallBase *)v12) - v12 + 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
              if ((v19 & 0x1FFFFFFFE0) != 0)
              {
                v20 = 0;
                v21 = (v19 >> 5);
                do
                {
                  Cast = *(uint64_t **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v20);
                  if (v20 >= (*(_DWORD *)(v16 + 12) - 1))
                  {
                    ++v20;
                  }
                  else
                  {
                    ++v20;
                    if (!llvm::CastInst::castIsValid(49, *Cast, *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v20)))goto LABEL_27;
                    v23 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v20);
                    v29 = 257;
                    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v33, 49, (uint64_t)Cast, v23, (uint64_t)v28);
                  }
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v30, (uint64_t)Cast);
                }
                while (v20 != v21);
              }
              v29 = 257;
              v24 = llvm::IRBuilderBase::CreateCall((uint64_t)v33, v16, Declaration, (uint64_t *)v30, v31, (uint64_t)v28, 0);
              *((_WORD *)v24 + 9) = *((_WORD *)v24 + 9) & 0xFFFC | *(_WORD *)(v12 + 18) & 3;
              llvm::Value::takeName((llvm::Value *)v24, (llvm::Value *)v12);
              v25 = *(_QWORD *)v12;
              v29 = 257;
              v26 = llvm::IRBuilderBase::CreateCast((uint64_t)v33, 49, (uint64_t)v24, v25, (uint64_t)v28);
              if (*(_QWORD *)(v12 + 8))
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, (llvm::Value *)v26, (llvm::Value *)1);
              llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*(_QWORD *)(v12 + 40) + 40, v12 + 24);
            }
LABEL_27:
            v11 = v17;
            if (v30 != v17)
              free(v30);
            if (v33[0] != v34)
              free(v33[0]);
          }
        }
      }
      while (v10);
      if (!*(_QWORD *)(v9 + 8))
LABEL_33:
        llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase(*(_QWORD *)(v9 + 40) + 24, v9 + 56);
    }
  }
}

uint64_t llvm::UpgradeModuleFlags(llvm *this, llvm::Module *a2)
{
  uint64_t NamedMetadata;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v45;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::ConstantInt *v58;
  llvm::ValueAsMetadata *v59;
  llvm::Value *v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *LimitedValue;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  llvm::MDNode *Impl;
  uint64_t *v79;
  uint64_t v80;
  BOOL v81;
  BOOL v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::string::size_type *v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  size_t *v101;
  void *v102;
  std::string::size_type v103;
  void **v104;
  std::string::size_type v105;
  void **p_p;
  std::string::size_type v107;
  _QWORD *v108;
  unint64_t v109;
  void **v110;
  uint64_t v111;
  llvm::Constant *v112;
  uint64_t v113;
  uint64_t UniqueInteger;
  unint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  BOOL v118;
  int v119;
  int v120;
  uint64_t v121;
  llvm::ValueAsMetadata *v122;
  llvm::Value *v123;
  unint64_t v124;
  uint64_t v125;
  llvm::ValueAsMetadata *v126;
  llvm::Value *v127;
  uint64_t v128;
  uint64_t v129;
  llvm::MDNode *v130;
  _QWORD *v131;
  std::string *v132;
  std::string::size_type size;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  llvm::MDNode *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v144;
  char v145;
  llvm::ValueAsMetadata *v146;
  llvm::Value *v147;
  _QWORD *v148;
  llvm::ValueAsMetadata *v149;
  llvm::Value *v150;
  _QWORD *v151;
  char inserted;
  unsigned int v154;
  unsigned int v155;
  int v156;
  int v157;
  uint64_t v158;
  int v159;
  std::string v160;
  _QWORD **v161[6];
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  char v165;
  uint64_t v166;
  void *__p;
  std::string::size_type v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  _QWORD v172[2];
  __int16 v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v170 = "llvm.module.flags";
  v173 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v170);
  v166 = NamedMetadata;
  if (!NamedMetadata)
    return insertMissingPtrAuthABIVersion(this);
  v165 = 0;
  v4 = **(_QWORD **)this;
  v164 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)(NamedMetadata + 48) + 8);
  if (!v5)
    goto LABEL_216;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v4 + 1944;
  v158 = v4 + 1992;
  v159 = 0;
  do
  {
    v163 = 0;
    v14 = *(_QWORD *)(**(_QWORD **)(v166 + 48) + 8 * v6);
    v163 = v14;
    v15 = (_QWORD *)(v14 - 16);
    v16 = *(_QWORD *)(v14 - 16);
    if ((v16 & 2) != 0)
      v17 = *(_DWORD *)(v14 - 24);
    else
      v17 = (v16 >> 6) & 0xF;
    if (v17 == 3)
    {
      v162 = 0;
      v18 = (*v15 & 2) != 0 ? *(_QWORD **)(v14 - 32) : &v15[-((*v15 >> 2) & 0xFLL)];
      v19 = v18[1];
      if (v19)
      {
        if (!*(_BYTE *)v19)
        {
          v161[5] = (_QWORD **)&v165;
          v162 = v19;
          v161[0] = (_QWORD **)this;
          v161[1] = (_QWORD **)&v162;
          v161[2] = (_QWORD **)&v163;
          v161[3] = (_QWORD **)&v166;
          v161[4] = (_QWORD **)&v164;
          v20 = *(uint64_t **)(v19 + 8);
          v21 = *v20;
          if (*v20 == 9)
          {
            v38 = v20[3];
            v39 = *((unsigned __int8 *)v20 + 32);
            if (v38 == 0x6576654C20434950 && v39 == 108)
            {
              v66 = (*v15 & 2) != 0 ? *(uint64_t **)(v14 - 32) : &v15[-((*v15 >> 2) & 0xFLL)];
              v69 = *v66;
              if (v69)
              {
                if (*(_BYTE *)v69 == 1)
                {
                  v70 = *(_QWORD *)(v69 + 128);
                  if (*(_BYTE *)(v70 + 16) == 16)
                  {
                    LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)(v70 + 24), 0xFFFFFFFFFFFFFFFFLL);
                    if (LimitedValue == (uint64_t *)7 || LimitedValue == (uint64_t *)1)
                      llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(v161, 8u);
                  }
                }
              }
            }
          }
          else
          {
            if (v21 == 28)
            {
              v31 = v20[3];
              v32 = v20[4];
              v33 = v20[5];
              v34 = *((_DWORD *)v20 + 12);
              v22 = v31 == 0x76697463656A624FLL
                 && v32 == 0x73616C4320432D65
                 && v33 == 0x7265706F72502073
                 && v34 == 1936025972;
              goto LABEL_41;
            }
            if (v21 == 30)
            {
              v22 = 0;
              v23 = v20[3];
              v24 = v20[4];
              v25 = v20[5];
              v26 = *(uint64_t *)((char *)v20 + 46);
              v30 = v23 == 0x76697463656A624FLL
                 && v24 == 0x67616D4920432D65
                 && v25 == 0x56206F666E492065
                 && v26 == 0x6E6F697372655620;
              v7 |= v30;
LABEL_41:
              v8 |= v22;
            }
          }
          v41 = *(_QWORD *)(v162 + 8);
          if (*(_QWORD *)v41 == 9)
          {
            v42 = *(_QWORD *)(v41 + 24);
            v43 = *(unsigned __int8 *)(v41 + 32);
            if (v42 == 0x6576654C20454950 && v43 == 108)
            {
              v64 = *(_QWORD *)(v163 - 16);
              v65 = (v64 & 2) != 0 ? *(uint64_t **)(v163 - 32) : (uint64_t *)(v163 - 16 - 8 * ((v64 >> 2) & 0xF));
              v67 = *v65;
              if (v67)
              {
                if (*(_BYTE *)v67 == 1)
                {
                  v68 = *(_QWORD *)(v67 + 128);
                  if (*(_BYTE *)(v68 + 16) == 16
                    && llvm::APInt::getLimitedValue((uint64_t ***)(v68 + 24), 0xFFFFFFFFFFFFFFFFLL) == (uint64_t *)1)
                  {
                    llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(v161, 7u);
                  }
                }
              }
            }
          }
          v45 = *(_QWORD *)(v162 + 8);
          if (*(_QWORD *)v45 == 25)
          {
            if (*(_QWORD *)(v45 + 24) == 0x742D68636E617262
              && *(_QWORD *)(v45 + 32) == 0x6E652D7465677261
              && *(_QWORD *)(v45 + 40) == 0x6E656D6563726F66
              && *(_BYTE *)(v45 + 48) == 116)
            {
LABEL_73:
              v54 = *(_QWORD *)(v163 - 16);
              if ((v54 & 2) != 0)
                v55 = *(uint64_t **)(v163 - 32);
              else
                v55 = (uint64_t *)(v163 - 16 - 8 * ((v54 >> 2) & 0xF));
              v56 = *v55;
              if (v56)
              {
                if (*(_BYTE *)v56 == 1)
                {
                  v57 = *(_QWORD *)(v56 + 128);
                  if (*(_BYTE *)(v57 + 16) == 16
                    && llvm::APInt::getLimitedValue((uint64_t ***)(v57 + 24), 0xFFFFFFFFFFFFFFFFLL) == (uint64_t *)1)
                  {
                    v58 = (llvm::ConstantInt *)(**(_QWORD **)this + 1992);
                    v170 = 0;
                    v171 = 0;
                    v172[0] = 0;
                    v59 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v58, (llvm::Type *)8, 0);
                    v170 = llvm::ValueAsMetadata::get(v59, v60);
                    v61 = (_QWORD *)(v163 - 16);
                    v62 = *(_QWORD *)(v163 - 16);
                    v154 = v12;
                    if ((v62 & 2) != 0)
                      v63 = *(_QWORD **)(v163 - 32);
                    else
                      v63 = &v61[-((v62 >> 2) & 0xF)];
                    v73 = v13;
                    v171 = v63[1];
                    v74 = v11;
                    if ((*v61 & 2) != 0)
                      v75 = *(_QWORD **)(v163 - 32);
                    else
                      v75 = &v61[-((*v61 >> 2) & 0xFLL)];
                    v172[0] = v75[2];
                    v76 = v166;
                    v77 = v164;
                    Impl = llvm::MDTuple::getImpl(*(_QWORD **)this, (llvm::hashing::detail::hash_state *)&v170, 3uLL, 0, 1);
                    llvm::TrackingMDRef::reset((uint64_t *)(**(_QWORD **)(v76 + 48) + 8 * v77), (uint64_t)Impl);
                    v165 = 1;
                    v11 = v74;
                    v13 = v73;
                    v12 = v154;
                  }
                }
              }
LABEL_107:
              v79 = *(uint64_t **)(v162 + 8);
              v80 = *v79;
              if (*v79 == 30)
              {
                v81 = v79[3] == 0x76697463656A624FLL && v79[4] == 0x67616D4920432D65;
                v82 = v81 && v79[5] == 0x53206F666E492065;
                if (!v82 || *(uint64_t *)((char *)v79 + 46) != 0x6E6F697463655320)
                  goto LABEL_118;
                v93 = *(_QWORD *)(v163 - 16);
                v94 = (v93 & 2) != 0 ? *(_QWORD *)(v163 - 32) : v163 - 16 - 8 * ((v93 >> 2) & 0xF);
                v95 = *(_QWORD *)(v94 + 16);
                if (!v95 || *(_BYTE *)v95)
                  goto LABEL_118;
                v170 = v172;
                v171 = 0x400000000;
                v96 = *(std::string::size_type **)(v95 + 8);
                v97 = *v96;
                v160.__r_.__value_.__r.__words[0] = (std::string::size_type)(v96 + 3);
                v160.__r_.__value_.__l.__size_ = v97;
                llvm::StringRef::split((unsigned int *)&v160, (unsigned int *)&v170, " ", 1uLL, -1, 1);
                if ((_DWORD)v171 != 1)
                {
                  v156 = v7;
                  v98 = v10;
                  v99 = v11;
                  memset(&v160, 0, sizeof(v160));
                  if ((_DWORD)v171)
                  {
                    v100 = 16 * v171;
                    v101 = (size_t *)((char *)v170 + 8);
                    do
                    {
                      v102 = (void *)*(v101 - 1);
                      if (v102)
                      {
                        std::string::basic_string[abi:nn180100](&__p, v102, *v101);
                        v103 = HIBYTE(v169);
                        v104 = (void **)__p;
                        v105 = v168;
                      }
                      else
                      {
                        v105 = 0;
                        v104 = 0;
                        v103 = 0;
                        __p = 0;
                        v168 = 0;
                        v169 = 0;
                      }
                      if ((v103 & 0x80u) == 0)
                        p_p = &__p;
                      else
                        p_p = v104;
                      if ((v103 & 0x80u) == 0)
                        v107 = v103;
                      else
                        v107 = v105;
                      std::string::append(&v160, (const std::string::value_type *)p_p, v107);
                      if (SHIBYTE(v169) < 0)
                        operator delete(__p);
                      v101 += 2;
                      v100 -= 16;
                    }
                    while (v100);
                  }
                  __p = 0;
                  v168 = 0;
                  v169 = 0;
                  v108 = (_QWORD *)(v163 - 16);
                  v109 = *(_QWORD *)(v163 - 16);
                  if ((v109 & 2) != 0)
                    v110 = *(void ***)(v163 - 32);
                  else
                    v110 = (void **)&v108[-((v109 >> 2) & 0xF)];
                  __p = *v110;
                  if ((*v108 & 2) != 0)
                    v131 = *(_QWORD **)(v163 - 32);
                  else
                    v131 = &v108[-((*v108 >> 2) & 0xFLL)];
                  v168 = v131[1];
                  if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v132 = &v160;
                  else
                    v132 = (std::string *)v160.__r_.__value_.__r.__words[0];
                  if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v160.__r_.__value_.__r.__words[2]);
                  else
                    size = v160.__r_.__value_.__l.__size_;
                  v134 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(_QWORD **)this + 312), (uint64_t *)v132, size);
                  if (v135)
                    *(_QWORD *)(v134 + 16) = v134;
                  v169 = v134 + 8;
                  v136 = v166;
                  v137 = v164;
                  v138 = llvm::MDTuple::getImpl(*(_QWORD **)this, (llvm::hashing::detail::hash_state *)&__p, 3uLL, 0, 1);
                  llvm::TrackingMDRef::reset((uint64_t *)(**(_QWORD **)(v136 + 48) + 8 * v137), (uint64_t)v138);
                  v165 = 1;
                  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v160.__r_.__value_.__l.__data_);
                  v11 = v99;
                  v10 = v98;
                  v7 = v156;
                }
                if (v170 != v172)
                  free(v170);
                v79 = *(uint64_t **)(v162 + 8);
                v80 = *v79;
                if (*v79 == 30)
                {
LABEL_118:
                  v84 = v79[3];
                  v85 = v79[4];
                  v86 = v79[5];
                  v87 = *(uint64_t *)((char *)v79 + 46);
                  if (v84 != 0x76697463656A624FLL
                    || v85 != 0x6272614720432D65
                    || v86 != 0x6C6C6F4320656761
                    || v87 != 0x6E6F697463656C6CLL)
                  {
                    goto LABEL_204;
                  }
                  v91 = *(_QWORD *)(v163 - 16);
                  v92 = (v91 & 2) != 0 ? *(_QWORD *)(v163 - 32) : v163 - 16 - 8 * ((v91 >> 2) & 0xF);
                  v111 = *(_QWORD *)(v92 + 16);
                  if (*(_BYTE *)v111 != 1)
                    goto LABEL_204;
                  v112 = *(llvm::Constant **)(v111 + 128);
                  if (*(_QWORD *)v112 == v13)
                    goto LABEL_206;
                  v157 = v7;
                  v113 = v13;
                  UniqueInteger = llvm::Constant::getUniqueInteger(v112);
                  if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
                    v115 = *(unint64_t **)UniqueInteger;
                  else
                    v115 = (unint64_t *)UniqueInteger;
                  LODWORD(v116) = v11;
                  v117 = *v115;
                  v118 = *v115 >= 0x100;
                  v119 = BYTE1(*v115);
                  if (v118)
                    LODWORD(v12) = v119;
                  v155 = v12;
                  if (v118)
                    v120 = v117 >> 16;
                  else
                    v120 = v159;
                  if (v118)
                    v116 = (v117 >> 24);
                  else
                    v116 = v116;
                  v121 = v116;
                  if (v118)
                    v10 = 1;
                  else
                    v10 = v10;
                  v170 = 0;
                  v171 = 0;
                  v172[0] = 0;
                  v122 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v158, 1, 0);
                  v170 = llvm::ValueAsMetadata::get(v122, v123);
                  v124 = *(_QWORD *)(v163 - 16);
                  if ((v124 & 2) != 0)
                    v125 = *(_QWORD *)(v163 - 32);
                  else
                    v125 = v163 - 16 - 8 * ((v124 >> 2) & 0xF);
                  v159 = v120;
                  v171 = *(_QWORD *)(v125 + 8);
                  v13 = v113;
                  v126 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v113, v117, 0);
                  v172[0] = llvm::ValueAsMetadata::get(v126, v127);
                  v128 = v166;
                  v129 = v164;
                  v130 = llvm::MDTuple::getImpl(*(_QWORD **)this, (llvm::hashing::detail::hash_state *)&v170, 3uLL, 0, 1);
                  llvm::TrackingMDRef::reset((uint64_t *)(**(_QWORD **)(v128 + 48) + 8 * v129), (uint64_t)v130);
                  v165 = 1;
                  v79 = *(uint64_t **)(v162 + 8);
                  v80 = *v79;
                  v11 = v121;
                  v12 = v155;
                  v7 = v157;
                }
              }
              if (v80 == 19)
              {
                v139 = v79[3];
                v140 = v79[4];
                v141 = *(uint64_t *)((char *)v79 + 35);
                v144 = v139 == 0x2E68747561727470 && v140 == 0x737265762D696261 && v141 == 0x6E6F69737265762DLL;
                goto LABEL_205;
              }
LABEL_204:
              v144 = 0;
LABEL_205:
              v9 |= v144;
LABEL_206:
              v6 = v164;
              goto LABEL_207;
            }
          }
          else if (*(_QWORD *)v45 < 0x13uLL)
          {
            goto LABEL_107;
          }
          v49 = *(_QWORD *)(v45 + 24);
          v50 = *(_QWORD *)(v45 + 32);
          v51 = *(_QWORD *)(v45 + 35);
          if (v49 != 0x7465722D6E676973 || v50 != 0x726464612D6E7275 || v51 != 0x737365726464612DLL)
            goto LABEL_107;
          goto LABEL_73;
        }
      }
    }
LABEL_207:
    v164 = ++v6;
  }
  while (v6 != v5);
  if (!(v8 & 1 | ((v7 & 1) == 0)))
  {
    llvm::Module::addModuleFlag((_QWORD **)this, (llvm::Type *)4, (uint64_t *)"Objective-C Class Properties", 0x1CuLL, 0);
    v165 = 1;
  }
  if ((v10 & 1) == 0)
  {
    if ((v9 & 1) != 0)
    {
      v145 = v165;
      return v145 != 0;
    }
    goto LABEL_216;
  }
  v145 = 1;
  llvm::Module::addModuleFlag((_QWORD **)this, (llvm::Type *)1, (uint64_t *)"Swift ABI Version", 0x11uLL, (llvm::Type *)v12);
  v146 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v13, v11, 0);
  v148 = llvm::ValueAsMetadata::get(v146, v147);
  llvm::Module::addModuleFlag((_QWORD **)this, (llvm::Type *)1, (uint64_t *)"Swift Major Version", 0x13uLL, (uint64_t)v148);
  v149 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v13, v159, 0);
  v151 = llvm::ValueAsMetadata::get(v149, v150);
  llvm::Module::addModuleFlag((_QWORD **)this, (llvm::Type *)1, (uint64_t *)"Swift Minor Version", 0x13uLL, (uint64_t)v151);
  v165 = 1;
  if ((v9 & 1) == 0)
  {
LABEL_216:
    inserted = insertMissingPtrAuthABIVersion(this);
    v145 = v165 | inserted;
  }
  return v145 != 0;
}

uint64_t insertMissingPtrAuthABIVersion(llvm::Module *a1)
{
  uint64_t ArchName;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  llvm::formatv_object_base *v7;
  __int16 v8;
  std::string __p[2];

  v8 = 260;
  v7 = (llvm::Module *)((char *)a1 + 208);
  llvm::Triple::Triple(__p, &v7);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)__p);
  if (v3 == 6
    && (*(_DWORD *)ArchName == 913142369 ? (v4 = *(unsigned __int16 *)(ArchName + 4) == 25908) : (v4 = 0), v4))
  {
    llvm::Module::setPtrAuthABIVersion((_QWORD **)a1, 0xFFFFFFFFuLL);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  return v5;
}

uint64_t *llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(_QWORD ***a1, unsigned int a2)
{
  llvm::ValueAsMetadata *v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::MDNode *Impl;
  uint64_t *result;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v3 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(***a1 + 1992, a2, 0);
  v17[0] = llvm::ValueAsMetadata::get(v3, v4);
  v5 = (*a1[1])[1];
  v6 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(***a1 + 312), (uint64_t *)(v5 + 24), *(_QWORD *)v5);
  if (v7)
    *(_QWORD *)(v6 + 16) = v6;
  v17[1] = v6 + 8;
  v8 = (uint64_t)*a1[2];
  v11 = *(_QWORD *)(v8 - 16);
  v9 = v8 - 16;
  v10 = v11;
  if ((v11 & 2) != 0)
    v12 = *(*a1[2] - 4);
  else
    v12 = v9 - 8 * ((v10 >> 2) & 0xF);
  v17[2] = *(_QWORD *)(v12 + 16);
  v13 = (uint64_t)*a1[3];
  v14 = *(unsigned int *)a1[4];
  Impl = llvm::MDTuple::getImpl(**a1, (llvm::hashing::detail::hash_state *)v17, 3uLL, 0, 1);
  result = llvm::TrackingMDRef::reset((uint64_t *)(**(_QWORD **)(v13 + 48) + 8 * v14), (uint64_t)Impl);
  *(_BYTE *)a1[5] = 1;
  return result;
}

void llvm::UpgradeFunctionAttributes(llvm *this, llvm::Function *a2)
{
  uint64_t v3;
  llvm *v4;
  llvm *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      goto LABEL_19;
  }
  else if (*((llvm **)this + 9) == (llvm *)((char *)this + 72) && (*((_BYTE *)this + 35) & 1) == 0)
  {
    goto LABEL_19;
  }
  v3 = *((_QWORD *)this + 14);
  if (!v3 || (*(_BYTE *)(v3 + 19) & 0x40) == 0)
  {
    v4 = (llvm *)*((_QWORD *)this + 10);
    if (v4 != (llvm *)((char *)this + 72))
    {
      do
      {
        v5 = (llvm *)*((_QWORD *)v4 + 1);
        if (v4)
          v6 = (_QWORD *)((char *)v4 - 24);
        else
          v6 = 0;
        v7 = (_QWORD *)v6[6];
        if (v7 != v6 + 5)
        {
          if (v7)
            v8 = v7 - 3;
          else
            v8 = 0;
          __asm { BR              X9 }
        }
        v4 = v5;
      }
      while (v5 != (llvm *)((char *)this + 72));
    }
  }
LABEL_19:
  llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(*((_QWORD *)this + 3) + 16), 3, v14);
  *((_QWORD *)this + 14) = llvm::AttributeList::removeAttributesAtIndex((_QWORD *)this + 14, **(uint64_t ***)this, 0, (uint64_t)v14);
  std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v15, v16);
  v9 = llvm::Function::args(this);
  if (v9 != v10)
  {
    v11 = v9;
    v12 = v10;
    do
    {
      llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)v11, 3, v14);
      v13 = *(_QWORD *)(v11 + 24);
      v17 = *(_QWORD *)(v13 + 112);
      *(_QWORD *)(*(_QWORD *)(v11 + 24) + 112) = llvm::AttributeList::removeAttributesAtIndex(&v17, **(uint64_t ***)v13, *(_DWORD *)(v11 + 32) + 1, (uint64_t)v14);
      std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v15, v16);
      v11 += 40;
    }
    while (v11 != v12);
  }
}

llvm::MDNode *llvm::upgradeInstructionLoopAttachment(llvm *this, llvm::MDNode *a2)
{
  llvm::MDNode *v2;
  int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  llvm::MDNode **v19;
  uint64_t v20;
  llvm::MDNode **v21;
  llvm::MDNode *Impl;
  unint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  llvm::formatv_object_base *v54[4];
  __int16 v55;
  std::string __p;
  llvm::hashing::detail::hash_state *v57;
  uint64_t v58;
  _BYTE v59[64];
  llvm::hashing::detail::hash_state *v60;
  uint64_t v61;
  _QWORD v62[10];

  v2 = this;
  v62[8] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)this;
  if (v3 == 4)
    v4 = this;
  else
    v4 = 0;
  if (v3 != 4)
    return v2;
  v6 = (unint64_t *)((char *)this - 16);
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)this - 4);
    v8 = *((unsigned int *)this - 6);
    if (!*((_DWORD *)this - 6))
      return v2;
  }
  else
  {
    v7 = (uint64_t *)&v6[-((v5 >> 2) & 0xF)];
    v8 = (v5 >> 6) & 0xF;
    if (!v8)
      return v2;
  }
  v9 = 8 * v8 - 8;
  do
  {
    v10 = *v7;
    if (!*v7)
      goto LABEL_21;
    if (*(_BYTE *)v10 != 4)
      goto LABEL_20;
    v11 = *(_QWORD *)(v10 - 16);
    if ((v11 & 2) != 0)
    {
      if (!*(_DWORD *)(v10 - 24))
        goto LABEL_20;
      v12 = *(uint64_t **)(v10 - 32);
    }
    else
    {
      if ((v11 & 0x3C0) == 0)
        goto LABEL_20;
      v12 = (uint64_t *)(v10 - 16 - 8 * ((v11 >> 2) & 0xF));
    }
    v10 = *v12;
    if (!v10)
      goto LABEL_21;
    if (*(_BYTE *)v10 || (v13 = *(_QWORD **)(v10 + 8), *v13 < 0x10uLL))
    {
LABEL_20:
      LODWORD(v10) = 0;
LABEL_21:
      if ((v10 & 1) != 0)
        break;
      goto LABEL_22;
    }
    v16 = v13[3];
    v15 = v13[4];
    v17 = v16 == 0x6365762E6D766C6CLL && v15 == 0x2E72657A69726F74;
    LODWORD(v10) = v17;
    if ((v10 & 1) != 0)
      break;
LABEL_22:
    ++v7;
    v14 = v9;
    v9 -= 8;
  }
  while (v14);
  if (!(_DWORD)v10)
    return v2;
  v57 = (llvm::hashing::detail::hash_state *)v59;
  v58 = 0x800000000;
  if ((v5 & 2) != 0)
    v18 = *((_DWORD *)v4 - 6);
  else
    v18 = (v5 >> 6) & 0xF;
  if (v18 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v18, 8);
    v5 = *v6;
  }
  if ((v5 & 2) != 0)
  {
    v19 = (llvm::MDNode **)*((_QWORD *)v4 - 4);
    v20 = *((unsigned int *)v4 - 6);
    if (!*((_DWORD *)v4 - 6))
      goto LABEL_100;
    goto LABEL_41;
  }
  v19 = (llvm::MDNode **)&v6[-((v5 >> 2) & 0xF)];
  v20 = (v5 >> 6) & 0xF;
  if (v20)
  {
LABEL_41:
    v21 = &v19[v20];
    do
    {
      Impl = *v19;
      if (*v19 && *(_BYTE *)Impl == 4)
      {
        v24 = (_QWORD *)((char *)Impl - 16);
        v23 = *((_QWORD *)Impl - 2);
        if ((v23 & 2) != 0)
        {
          if (*((_DWORD *)Impl - 6))
          {
            v25 = (uint64_t *)*((_QWORD *)Impl - 4);
LABEL_49:
            v26 = *v25;
            if (*v25)
            {
              if (!*(_BYTE *)v26)
              {
                v27 = *(_QWORD **)(v26 + 8);
                if (*v27 >= 0x10uLL)
                {
                  v29 = v27[3];
                  v28 = v27[4];
                  if (v29 == 0x6365762E6D766C6CLL && v28 == 0x2E72657A69726F74)
                  {
                    v60 = (llvm::hashing::detail::hash_state *)v62;
                    v61 = 0x800000000;
                    if ((*v24 & 2) != 0)
                      v31 = *((unsigned int *)Impl - 6);
                    else
                      v31 = (*v24 >> 6) & 0xFLL;
                    if (v31 >= 9)
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, v31, 8);
                    v32 = *((_QWORD *)Impl + 1);
                    v33 = v32 & 0xFFFFFFFFFFFFFFF8;
                    if ((v32 & 4) != 0)
                      v33 = *(_QWORD *)v33;
                    v34 = *(unint64_t **)(v26 + 8);
                    v37 = *v34;
                    v36 = v34 + 3;
                    v35 = v37;
                    if (v37 == 22
                      && (*v36 == 0x6365762E6D766C6CLL ? (v38 = v36[1] == 0x2E72657A69726F74) : (v38 = 0),
                          v38 ? (v39 = *(_QWORD *)((char *)v36 + 14) == 0x6C6C6F726E752E72) : (v39 = 0),
                          v39))
                    {
                      v43 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(*(_QWORD *)v33 + 312), (uint64_t *)"llvm.loop.interleave.count", 0x1AuLL);
                      if (v45)
                        *(_QWORD *)(v43 + 16) = v43;
                    }
                    else
                    {
                      v40 = 16;
                      if (v35 < 0x10)
                        v40 = v35;
                      v54[0] = (llvm::formatv_object_base *)"llvm.loop.vectorize.";
                      v54[2] = (llvm::formatv_object_base *)((char *)v36 + v40);
                      v54[3] = (llvm::formatv_object_base *)(v35 - v40);
                      v55 = 1283;
                      llvm::Twine::str(v54, &__p);
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_p = &__p;
                      else
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      else
                        size = __p.__r_.__value_.__l.__size_;
                      v43 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(*(_QWORD *)v33 + 312), (uint64_t *)p_p, size);
                      if (v44)
                        *(_QWORD *)(v43 + 16) = v43;
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v60, v43 + 8);
                    if ((*v24 & 2) != 0)
                      v46 = *((unsigned int *)Impl - 6);
                    else
                      v46 = (*v24 >> 6) & 0xFLL;
                    if (v46 != 1)
                    {
                      v47 = 1;
                      do
                      {
                        if ((*v24 & 2) != 0)
                          v48 = (_QWORD *)*((_QWORD *)Impl - 4);
                        else
                          v48 = &v24[-((*v24 >> 2) & 0xFLL)];
                        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v60, v48[v47++]);
                      }
                      while (v46 != v47);
                    }
                    v49 = *((_QWORD *)Impl + 1);
                    v50 = (_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8);
                    if ((v49 & 4) != 0)
                      v50 = (_QWORD *)*v50;
                    Impl = llvm::MDTuple::getImpl(v50, v60, v61, 0, 1);
                    if (v60 != (llvm::hashing::detail::hash_state *)v62)
                      free(v60);
                  }
                }
              }
            }
          }
        }
        else if ((v23 & 0x3C0) != 0)
        {
          v25 = &v24[-((v23 >> 2) & 0xF)];
          goto LABEL_49;
        }
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v57, (uint64_t)Impl);
      ++v19;
    }
    while (v19 != v21);
  }
LABEL_100:
  v51 = *((_QWORD *)v4 + 1);
  v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
  if ((v51 & 4) != 0)
    v52 = (_QWORD *)*v52;
  v2 = llvm::MDTuple::getImpl(v52, v57, v58, 0, 1);
  if (v57 != (llvm::hashing::detail::hash_state *)v59)
    free(v57);
  return v2;
}

void llvm::UpgradeDataLayoutString(llvm::formatv_object_base *a1@<X0>, unint64_t a2@<X1>, llvm::formatv_object_base *a3@<X2>, unint64_t a4@<X3>, std::string::size_type a5@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  _OWORD *v12;
  std::string::size_type v13;
  const char *v14;
  const char *v15;
  int v16;
  BOOL v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type size;
  std::string::size_type v22;
  std::string v23;
  __int16 v24;
  std::string v25;
  _OWORD *v26;
  int v27;
  void *__p[2];
  unsigned __int8 v29;
  std::string *v30;
  unint64_t v31;
  const char *v32;
  const char *v33;
  __int16 v34;
  std::string v35;
  int v36;
  int v37;
  int v38;
  llvm::formatv_object_base *v39;
  unint64_t v40;
  const char **v41;
  unint64_t v42;
  const char *v43;
  unint64_t v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v39 = a1;
  v40 = a2;
  v45 = 261;
  v41 = (const char **)a3;
  v42 = a4;
  llvm::Triple::Triple(&v35, (llvm::formatv_object_base **)&v41);
  v6 = v36;
  if ((v36 - 25) <= 1)
  {
    if (llvm::StringRef::find((uint64_t *)&v39, "-G", 2uLL, 0) == -1)
    {
      if (!v40)
      {
        std::string::basic_string[abi:nn180100]<0>((_QWORD *)a5, "G1");
        goto LABEL_56;
      }
      if (*(_BYTE *)v39 != 71)
      {
        v45 = 773;
        v41 = (const char **)v39;
        v42 = v40;
        v43 = "-G1";
LABEL_12:
        llvm::Twine::str((llvm::formatv_object_base **)&v41, (std::string *)a5);
        goto LABEL_56;
      }
    }
    v6 = v36;
  }
  if (v6 == 28)
  {
    v7 = llvm::StringRef::find((uint64_t *)&v39, "-n64-", 5uLL, 0);
    if (v7 == -1)
    {
      if (v39)
      {
        std::string::basic_string[abi:nn180100]((_QWORD *)a5, v39, v40);
      }
      else
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
      }
      goto LABEL_56;
    }
    if (v40 >= v7)
      v8 = v7;
    else
      v8 = v40;
    v34 = 773;
    v30 = (std::string *)v39;
    v31 = v8;
    v32 = "-n32:64-";
    v9 = v7 + 5;
    if (v40 < v7 + 5)
      v9 = v40;
    v41 = (const char **)&v30;
    v43 = (char *)v39 + v9;
    v44 = v40 - v9;
    v45 = 1282;
    goto LABEL_12;
  }
  if (v39)
  {
    std::string::basic_string[abi:nn180100]((_QWORD *)a5, v39, v40);
    v6 = v36;
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  if ((v6 - 37) <= 1)
  {
    std::string::basic_string[abi:nn180100]<0>(__p, "-p270:32:32-p271:32:32-p272:64:64");
    if ((v29 & 0x80u) == 0)
      v10 = (char *)__p;
    else
      v10 = (char *)__p[0];
    if ((v29 & 0x80u) == 0)
      v11 = v29;
    else
      v11 = (size_t)__p[1];
    if (llvm::StringRef::find((uint64_t *)&v39, v10, v11, 0) == -1)
    {
      v41 = &v43;
      v42 = 0x400000000;
      v12 = (_OWORD *)operator new();
      *v12 = 0u;
      v12[1] = 0u;
      v26 = v12;
      *((_QWORD *)v12 + 2) = "";
      v27 = llvm_regcomp((uint64_t)v12, "(e-m:[a-z](-p:32:32)?)(-[if]64:.*$)", 33);
      if (llvm::Regex::match((uint64_t)&v26, (char *)v39, v40, (unsigned int *)&v41, 0))
      {
        v13 = (std::string::size_type)v41[3];
        v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v41[2];
        v23.__r_.__value_.__l.__size_ = v13;
        v23.__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
        v24 = 1029;
        v14 = v41[6];
        v15 = v41[7];
        v30 = &v23;
        v32 = v14;
        v33 = v15;
        v34 = 1282;
        llvm::Twine::str((llvm::formatv_object_base **)&v30, &v25);
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(std::string *)a5 = v25;
      }
      llvm::Regex::~Regex((llvm::Regex *)&v26);
      if (v41 != &v43)
        free(v41);
    }
    if (v37 == 15 && (v38 == 19 || !v38) && getArchPointerBitWidth(v36) != 64)
    {
      v16 = *(char *)(a5 + 23);
      v17 = v16 < 0;
      v18 = *(_QWORD *)a5;
      if (v16 >= 0)
        v18 = a5;
      v19 = *(unsigned __int8 *)(a5 + 23);
      if (v17)
        v19 = *(_QWORD *)(a5 + 8);
      v25.__r_.__value_.__r.__words[0] = v18;
      v25.__r_.__value_.__l.__size_ = v19;
      v20 = llvm::StringRef::find((uint64_t *)&v25, "-f80:32-", 8uLL, 0);
      if (v20 != -1)
      {
        if (v25.__r_.__value_.__l.__size_ >= v20)
          size = v20;
        else
          size = v25.__r_.__value_.__l.__size_;
        v34 = 773;
        v30 = (std::string *)v25.__r_.__value_.__r.__words[0];
        v31 = size;
        v32 = "-f80:128-";
        v22 = v20 + 8;
        if (v25.__r_.__value_.__l.__size_ < v20 + 8)
          v22 = v25.__r_.__value_.__l.__size_;
        v41 = (const char **)&v30;
        v43 = (const char *)(v25.__r_.__value_.__r.__words[0] + v22);
        v44 = v25.__r_.__value_.__l.__size_ - v22;
        v45 = 1282;
        llvm::Twine::str((llvm::formatv_object_base **)&v41, &v23);
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(std::string *)a5 = v23;
      }
    }
    if ((char)v29 < 0)
      operator delete(__p[0]);
  }
LABEL_56:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

uint64_t *llvm::UpgradeAttributes(llvm *this, llvm::AttrBuilder *a2)
{
  uint64_t Attribute;
  char *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t *result;
  int v14;
  unint64_t v15;

  Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, "no-frame-pointer-elim", 21);
  if (!Attribute)
  {
    if (!llvm::AttrBuilder::getAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 30))
      goto LABEL_20;
    goto LABEL_17;
  }
  v4 = "none";
  if (*(_DWORD *)(Attribute + 16) == 4)
  {
    v5 = bswap32(*(_DWORD *)(Attribute + *(unsigned int *)(Attribute + 12) + 25));
    v6 = v5 >= 0x74727565;
    v7 = v5 > 0x74727565;
    v8 = !v6;
    if (v7 == v8)
      v4 = "all";
  }
  v9 = strlen(v4);
  v10 = llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim", 21);
  if (llvm::AttrBuilder::getAttribute(v10, "no-frame-pointer-elim-non-leaf", 30))
  {
    if (v9 == 3 && *(_WORD *)v4 == 27745 && v4[2] == 108)
    {
      v9 = 3;
LABEL_18:
      llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 30);
LABEL_19:
      v12 = llvm::Attribute::get(*(uint64_t **)this, "frame-pointer", 0xDuLL, v4, v9);
      addAttributeImpl<llvm::StringRef>((unsigned int *)this + 2, "frame-pointer", 13, (uint64_t)v12);
      goto LABEL_20;
    }
LABEL_17:
    v4 = "non-leaf";
    v9 = 8;
    goto LABEL_18;
  }
  if (v9)
    goto LABEL_19;
LABEL_20:
  result = (uint64_t *)llvm::AttrBuilder::getAttribute((uint64_t)this, "null-pointer-is-valid", 21);
  if (result)
  {
    if (*((_DWORD *)result + 4) == 4)
    {
      v14 = *(_DWORD *)((char *)result + *((unsigned int *)result + 3) + 25);
      result = (uint64_t *)llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 21);
      if (v14 == 1702195828)
      {
        v15 = llvm::Attribute::get(*(uint64_t **)this, 39, 0);
        return addAttributeImpl<llvm::Attribute::AttrKind>((unsigned int *)this + 2, 39, v15);
      }
    }
    else
    {
      return (uint64_t *)llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 21);
    }
  }
  return result;
}

uint64_t llvm::UpgradeOperandBundles(uint64_t *a1)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  __int128 v22;

  v2 = *a1;
  v3 = (__int128 *)a1[1];
  if ((__int128 *)*a1 == v3)
  {
    v3 = (__int128 *)*a1;
  }
  else
  {
    while (1)
    {
      v4 = *(unsigned __int8 *)(v2 + 23);
      v5 = (char)v4;
      if ((v4 & 0x80u) != 0)
        v4 = *(_QWORD *)(v2 + 8);
      if (v4 == 22)
      {
        v6 = v5 >= 0 ? (uint64_t *)v2 : *(uint64_t **)v2;
        v7 = *v6;
        v8 = v6[1];
        v9 = *(uint64_t *)((char *)v6 + 14);
        v10 = v7 == 0x72612E676E616C63 && v8 == 0x6863617474612E63;
        v11 = v10 && v9 == 0x6C6C616364656863;
        if (v11 && *(_QWORD *)(v2 + 32) == *(_QWORD *)(v2 + 24))
          break;
      }
      v2 += 48;
      if ((__int128 *)v2 == v3)
      {
        v2 = a1[1];
        return std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase((uint64_t)a1, v2, v3);
      }
    }
    if ((__int128 *)v2 != v3)
    {
      v13 = v2 + 48;
      if ((__int128 *)(v2 + 48) != v3)
      {
        do
        {
          v14 = *(unsigned __int8 *)(v13 + 23);
          v15 = (char)v14;
          if ((v14 & 0x80u) != 0)
            v14 = *(_QWORD *)(v13 + 8);
          if (v14 != 22
            || (v15 >= 0 ? (v16 = (uint64_t *)v13) : (v16 = *(uint64_t **)v13),
                (v17 = *v16, v18 = v16[1], v19 = *(uint64_t *)((char *)v16 + 14), v17 == 0x72612E676E616C63)
              ? (v20 = v18 == 0x6863617474612E63)
              : (v20 = 0),
                v20 ? (v21 = v19 == 0x6C6C616364656863) : (v21 = 0),
                !v21 || *(_QWORD *)(v13 + 32) != *(_QWORD *)(v13 + 24)))
          {
            if (*(char *)(v2 + 23) < 0)
              operator delete(*(void **)v2);
            v22 = *(_OWORD *)v13;
            *(_QWORD *)(v2 + 16) = *(_QWORD *)(v13 + 16);
            *(_OWORD *)v2 = v22;
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            std::vector<llvm::jitlink::Block *>::__move_assign(v2 + 24, (__n128 *)(v13 + 24));
            v2 += 48;
          }
          v13 += 48;
        }
        while ((__int128 *)v13 != v3);
        v3 = (__int128 *)a1[1];
      }
    }
  }
  return std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase((uint64_t)a1, v2, v3);
}

void rename(uint64_t ***this)
{
  uint64_t v2;
  void *v3;
  uint64_t *ValueName;
  uint64_t v5;
  _QWORD v6[4];
  __int16 v7;

  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    ValueName = (uint64_t *)llvm::Value::getValueName(this);
    v5 = *ValueName;
    v3 = ValueName + 2;
    v2 = v5;
  }
  else
  {
    v2 = 0;
    v3 = &str_3_26;
  }
  v7 = 773;
  v6[0] = v3;
  v6[1] = v2;
  v6[2] = ".old";
  llvm::Value::setName((llvm::Value *)this, (const llvm::Twine *)v6);
}

uint64_t llvm::StringSwitch<BOOL,BOOL>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;

  v11 = llvm::StringSwitch<BOOL,BOOL>::Case(a1, a2, a3);
  v12 = llvm::StringSwitch<BOOL,BOOL>::Case(v11, a4, a5);
  return llvm::StringSwitch<BOOL,BOOL>::Case(v12, a6, a7);
}

uint64_t llvm::StringSwitch<BOOL,BOOL>::StartsWith(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(_BYTE *)(a1 + 17) && *(_QWORD *)(a1 + 8) >= a3 && (!a3 || !memcmp(*(const void **)a1, a2, a3)))
    *(_WORD *)(a1 + 16) = 257;
  return a1;
}

uint64_t UpgradeX86IntrinsicFunction(uint64_t a1, uint64_t a2, unint64_t a3, llvm::Function **a4)
{
  size_t v4;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  llvm::Function *v16;
  int v17;
  int v18;
  llvm::Function *v19;
  int v20;
  llvm::Function *v21;
  int v22;
  llvm::Function *v34;
  int v35;
  llvm::Function *v40;
  int v41;
  uint64_t *ValueName;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  BOOL v57;
  BOOL v58;
  uint64_t v61;
  int v62;
  BOOL v63;
  int v64;
  const char *v66;
  int PrimitiveSizeInBits;
  int v68;
  _QWORD v70[4];
  __int16 v71;

  v4 = a3 - 4;
  if (a3 >= 4 && *(_DWORD *)a2 == 775305336)
  {
    v10 = a2 + 4;
    if (ShouldUpgradeX86Intrinsic((uint64_t *)(a2 + 4), a3 - 4))
    {
      *a4 = 0;
      return 1;
    }
    if (v4 == 6)
    {
      v11 = *(_DWORD *)v10 == 1937007730 && *(_WORD *)(a2 + 8) == 28771;
      if (!v11 || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) == 1)
        return 0;
      if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
      {
        ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)a1);
        v52 = *ValueName;
        v13 = ValueName + 2;
        v12 = v52;
      }
      else
      {
        v12 = 0;
        v13 = &str_3_26;
      }
      v71 = 773;
      v70[0] = v13;
      v70[1] = v12;
      v70[2] = ".old";
      llvm::Value::setName((llvm::Value *)a1, (const llvm::Twine *)v70);
      v53 = *(uint64_t **)(a1 + 40);
      v54 = 11268;
      goto LABEL_214;
    }
    if (v4 < 0xB
      || (*(_QWORD *)v10 == 0x74702E3134657373 ? (v14 = *(_QWORD *)(a2 + 7) == 0x74736574702E3134) : (v14 = 0), !v14))
    {
      switch(a3)
      {
        case 0xEuLL:
          if (!memcmp((const void *)(a2 + 4), "sse41.dppd", v4))
          {
            v16 = (llvm::Function *)a1;
            v17 = 11393;
            return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
          }
          if (*(_QWORD *)v10 == 0x70642E3134657373 && *(_WORD *)(a2 + 12) == 29552)
          {
            v16 = (llvm::Function *)a1;
            v17 = 11394;
            return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
          }
          break;
        case 0xFuLL:
        case 0x13uLL:
        case 0x14uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x17uLL:
        case 0x18uLL:
        case 0x19uLL:
        case 0x1CuLL:
        case 0x1DuLL:
        case 0x1EuLL:
          goto LABEL_37;
        case 0x10uLL:
          goto LABEL_139;
        case 0x11uLL:
          goto LABEL_39;
        case 0x12uLL:
          goto LABEL_156;
        case 0x1AuLL:
          goto LABEL_46;
        case 0x1BuLL:
          goto LABEL_84;
        case 0x1FuLL:
          goto LABEL_101;
        case 0x20uLL:
          goto LABEL_114;
        default:
          goto LABEL_34;
      }
      return 0;
    }
    switch(a3)
    {
      case 0x10uLL:
        v18 = *(unsigned __int8 *)(a2 + 15);
        if (v18 == 122)
        {
          v19 = (llvm::Function *)a1;
          v20 = 11402;
          return UpgradePTESTIntrinsic(v19, v20, a4);
        }
        if (v18 == 99)
        {
          v19 = (llvm::Function *)a1;
          v20 = 11400;
          return UpgradePTESTIntrinsic(v19, v20, a4);
        }
LABEL_139:
        if (!memcmp((const void *)(a2 + 4), "avx2.mpsadbw", v4))
        {
          v16 = (llvm::Function *)a1;
          v17 = 10316;
          return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
        }
        goto LABEL_160;
      case 0x11uLL:
LABEL_39:
        if (!memcmp((const void *)(a2 + 4), "sse41.mpsadbw", v4))
        {
          v16 = (llvm::Function *)a1;
          v17 = 11396;
          return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
        }
        if (*(_QWORD *)v10 == 0x702E70642E787661 && *(_QWORD *)(a2 + 9) == 0x3635322E73702E70)
        {
          v16 = (llvm::Function *)a1;
          v17 = 10247;
          return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
        }
        goto LABEL_160;
      case 0x12uLL:
        if (*(_WORD *)(a2 + 15) == 31342 && *(_BYTE *)(a2 + 17) == 99)
        {
          v19 = (llvm::Function *)a1;
          v20 = 11401;
          return UpgradePTESTIntrinsic(v19, v20, a4);
        }
        else
        {
LABEL_156:
          if (*(_QWORD *)v10 != 0x6E692E3134657373 || *(_QWORD *)(a2 + 10) != 0x7370747265736E69)
            goto LABEL_160;
          v16 = (llvm::Function *)a1;
          v17 = 11395;
          return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
        }
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1CuLL:
      case 0x1DuLL:
      case 0x1EuLL:
        goto LABEL_37;
      case 0x1AuLL:
LABEL_46:
        if (!memcmp((const void *)(a2 + 4), "avx512.mask.cmp.pd.128", v4))
        {
          v34 = (llvm::Function *)a1;
          v35 = 10464;
        }
        else if (*(_QWORD *)v10 == 0x6D2E323135787661
               && *(_QWORD *)(a2 + 12) == 0x2E706D632E6B7361
               && *(_QWORD *)(a2 + 18) == 0x3635322E64702E70)
        {
          v34 = (llvm::Function *)a1;
          v35 = 10465;
        }
        else if (*(_QWORD *)v10 == 0x6D2E323135787661
               && *(_QWORD *)(a2 + 12) == 0x2E706D632E6B7361
               && *(_QWORD *)(a2 + 18) == 0x3231352E64702E70)
        {
          v34 = (llvm::Function *)a1;
          v35 = 10466;
        }
        else if (*(_QWORD *)v10 == 0x6D2E323135787661
               && *(_QWORD *)(a2 + 12) == 0x2E706D632E6B7361
               && *(_QWORD *)(a2 + 18) == 0x3832312E73702E70)
        {
          v34 = (llvm::Function *)a1;
          v35 = 10467;
        }
        else if (*(_QWORD *)v10 == 0x6D2E323135787661
               && *(_QWORD *)(a2 + 12) == 0x2E706D632E6B7361
               && *(_QWORD *)(a2 + 18) == 0x3635322E73702E70)
        {
          v34 = (llvm::Function *)a1;
          v35 = 10468;
        }
        else
        {
          if (*(_QWORD *)v10 != 0x6D2E323135787661
            || *(_QWORD *)(a2 + 12) != 0x2E706D632E6B7361
            || *(_QWORD *)(a2 + 18) != 0x3231352E73702E70)
          {
            goto LABEL_160;
          }
          v34 = (llvm::Function *)a1;
          v35 = 10469;
        }
        return UpgradeX86MaskedFPCompare(v34, v35, a4);
      case 0x1BuLL:
LABEL_84:
        if (!memcmp((const void *)(a2 + 4), "avx512bf16.dpbf16ps.128", v4))
        {
          v40 = (llvm::Function *)a1;
          v41 = 10964;
        }
        else if (*(_QWORD *)v10 == 0x6662323135787661
               && *(_QWORD *)(a2 + 12) == 0x31666270642E3631
               && *(_QWORD *)(a2 + 19) == 0x3635322E73703631)
        {
          v40 = (llvm::Function *)a1;
          v41 = 10965;
        }
        else
        {
          if (*(_QWORD *)v10 != 0x6662323135787661
            || *(_QWORD *)(a2 + 12) != 0x31666270642E3631
            || *(_QWORD *)(a2 + 19) != 0x3231352E73703631)
          {
LABEL_160:
            v57 = *(_QWORD *)v10 == 0x637266762E706F78 && *(_DWORD *)(a2 + 12) == 1936928378;
            if (v57 && *(_QWORD *)(a1 + 96) == 2)
            {
              rename((uint64_t ***)a1);
              v53 = *(uint64_t **)(a1 + 40);
              v54 = 11536;
            }
            else
            {
              v58 = *(_QWORD *)v10 == 0x637266762E706F78 && *(_DWORD *)(a2 + 12) == 1685270138;
              if (v58 && *(_QWORD *)(a1 + 96) == 2)
              {
                rename((uint64_t ***)a1);
                v53 = *(uint64_t **)(a1 + 40);
                v54 = 11535;
              }
              else
              {
                if (*(_QWORD *)v10 != 0x726570762E706F78 || *(_DWORD *)(a2 + 12) != 845965677)
                  goto LABEL_182;
                v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 24);
                v62 = *(_DWORD *)(v61 + 8);
                if ((v62 & 0xFE) == 0x12)
                  v62 = *(_DWORD *)(**(_QWORD **)(v61 + 16) + 8);
                v63 = v62 < 4u || v62 == 5;
                v64 = v62 & 0xFD;
                if (v63 || v64 == 4)
                {
                  rename((uint64_t ***)a1);
                  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v61);
                  if ((_BYTE)v66)
                  if ((*(_DWORD *)(v61 + 8) & 0xFE) == 0x12)
                    v61 = **(_QWORD **)(v61 + 16);
                  v68 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v61);
                  if (v68 == 64 && PrimitiveSizeInBits == 128)
                  {
                    v54 = 11537;
                  }
                  else if (v68 == 32 && PrimitiveSizeInBits == 128)
                  {
                    v54 = 11539;
                  }
                  else if (PrimitiveSizeInBits == 256 && v68 == 64)
                  {
                    v54 = 11538;
                  }
                  else
                  {
                    v54 = 11540;
                  }
                  v53 = *(uint64_t **)(a1 + 40);
                }
                else
                {
LABEL_182:
                  if (v4 != 13)
                    return 0;
                  if (*(_QWORD *)v10 != 0x6F6365722E686573 || *(_QWORD *)(v10 + 5) != 0x70667265766F6365)
                    return 0;
                  v53 = *(uint64_t **)(a1 + 40);
                  v54 = 65;
                }
              }
            }
LABEL_214:
            *a4 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v53, v54, 0, 0);
            return 1;
          }
          v40 = (llvm::Function *)a1;
          v41 = 10966;
        }
        return UpgradeX86BF16DPIntrinsic(v40, v41, a4);
      case 0x1FuLL:
LABEL_101:
        if (!memcmp((const void *)(a2 + 4), "avx512bf16.cvtneps2bf16.256", v4))
        {
          v21 = (llvm::Function *)a1;
          v22 = 10962;
          return UpgradeX86BF16Intrinsic(v21, v22, a4);
        }
        if (*(_QWORD *)v10 == 0x6662323135787661
          && *(_QWORD *)(a2 + 12) == 0x656E7476632E3631
          && *(_QWORD *)(a2 + 20) == 0x2E36316662327370
          && *(_QWORD *)(a2 + 23) == 0x3231352E36316662)
        {
          v21 = (llvm::Function *)a1;
          v22 = 10963;
          return UpgradeX86BF16Intrinsic(v21, v22, a4);
        }
        goto LABEL_160;
      case 0x20uLL:
LABEL_114:
        if (!memcmp((const void *)(a2 + 4), "avx512bf16.cvtne2ps2bf16.128", v4))
        {
          v21 = (llvm::Function *)a1;
          v22 = 10959;
          return UpgradeX86BF16Intrinsic(v21, v22, a4);
        }
        if (*(_QWORD *)v10 == 0x6662323135787661
          && *(_QWORD *)(a2 + 12) == 0x656E7476632E3631
          && *(_QWORD *)(a2 + 20) == 0x3631666232737032
          && *(_DWORD *)(a2 + 28) == 909455918)
        {
          v21 = (llvm::Function *)a1;
          v22 = 10960;
          return UpgradeX86BF16Intrinsic(v21, v22, a4);
        }
        if (*(_QWORD *)v10 == 0x6662323135787661
          && *(_QWORD *)(a2 + 12) == 0x656E7476632E3631
          && *(_QWORD *)(a2 + 20) == 0x3631666232737032
          && *(_DWORD *)(a2 + 28) == 842085678)
        {
          v21 = (llvm::Function *)a1;
          v22 = 10961;
          return UpgradeX86BF16Intrinsic(v21, v22, a4);
        }
        goto LABEL_160;
      default:
LABEL_34:
        if (a3 == 36)
        {
          if (memcmp((const void *)(a2 + 4), "avx512bf16.mask.cvtneps2bf16.128", v4))
            goto LABEL_160;
          v21 = (llvm::Function *)a1;
          v22 = 10967;
          return UpgradeX86BF16Intrinsic(v21, v22, a4);
        }
LABEL_37:
        if (v4 < 0xC)
          return 0;
        goto LABEL_160;
    }
  }
  return 0;
}

uint64_t llvm::StringSwitch<BOOL,BOOL>::Case(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v5;

  if (!*(_BYTE *)(a1 + 17))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 == a3 && (!v5 || !memcmp(*(const void **)a1, a2, v5)))
      *(_WORD *)(a1 + 16) = 257;
  }
  return a1;
}

BOOL ShouldUpgradeX86Intrinsic(uint64_t *a1, unint64_t a2)
{
  BOOL v9;
  _BOOL8 result;
  int v11;
  BOOL v12;
  char v13;
  char v14;
  BOOL v15;
  char v16;
  BOOL v17;
  char v18;
  char v19;
  char v20;
  BOOL v21;
  BOOL v28;
  char v31;
  BOOL v34;
  char v36;
  BOOL v42;
  BOOL v44;
  BOOL v61;
  BOOL v65;
  BOOL v69;
  BOOL v75;
  BOOL v77;
  BOOL v79;
  BOOL v81;
  char v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  BOOL v97;
  uint64_t v114;
  BOOL v115;
  unsigned int v116;
  uint64_t v118;
  BOOL v124;
  BOOL v131;
  BOOL v133;
  BOOL v135;
  BOOL v137;
  BOOL v139;
  BOOL v141;
  BOOL v143;
  BOOL v145;
  BOOL v147;
  BOOL v149;
  BOOL v151;
  BOOL v154;
  BOOL v157;
  BOOL v161;
  BOOL v163;
  BOOL v165;
  BOOL v167;
  BOOL v169;
  BOOL v171;
  BOOL v173;
  BOOL v175;
  BOOL v177;
  BOOL v182;
  BOOL v183;
  BOOL v185;
  BOOL v186;
  BOOL v188;
  BOOL v189;
  BOOL v191;
  BOOL v192;
  BOOL v194;
  BOOL v195;
  BOOL v197;
  BOOL v198;
  BOOL v202;
  BOOL v207;
  BOOL v209;
  BOOL v211;
  BOOL v213;
  BOOL v217;
  BOOL v219;
  BOOL v221;
  BOOL v223;
  BOOL v225;
  BOOL v229;
  BOOL v231;
  BOOL v235;
  BOOL v237;
  BOOL v239;
  BOOL v241;
  BOOL v243;
  uint64_t v252;
  uint64_t v254;
  BOOL v255;
  BOOL v257;
  BOOL v259;
  BOOL v261;
  BOOL v263;
  BOOL v265;
  BOOL v267;
  BOOL v269;
  BOOL v272;
  BOOL v278;
  BOOL v280;
  BOOL v282;
  BOOL v284;
  BOOL v286;
  BOOL v288;
  BOOL v290;
  BOOL v292;
  BOOL v294;
  BOOL v296;
  BOOL v298;
  BOOL v300;
  BOOL v302;
  BOOL v304;
  BOOL v306;
  BOOL v308;
  BOOL v310;
  BOOL v312;
  BOOL v314;
  BOOL v316;
  BOOL v318;
  BOOL v320;
  BOOL v324;
  char v329;
  BOOL v333;
  BOOL v335;
  BOOL v337;
  BOOL v339;
  BOOL v341;
  BOOL v343;
  BOOL v345;
  BOOL v347;
  BOOL v349;
  BOOL v351;
  BOOL v353;
  BOOL v355;
  BOOL v357;
  BOOL v359;
  BOOL v361;
  BOOL v363;
  BOOL v365;
  BOOL v367;
  BOOL v369;
  BOOL v371;
  BOOL v373;
  BOOL v375;
  BOOL v377;
  BOOL v379;
  BOOL v381;
  BOOL v383;
  BOOL v385;
  BOOL v387;
  BOOL v389;
  BOOL v391;
  BOOL v393;
  BOOL v395;
  BOOL v397;
  BOOL v399;
  BOOL v401;
  BOOL v403;
  BOOL v405;
  uint64_t v415;
  BOOL v416;
  uint64_t v417;
  BOOL v421;
  BOOL v428;
  BOOL v430;
  int v432;
  BOOL v433;
  int v434;
  BOOL v437;
  BOOL v439;
  BOOL v441;
  uint64_t v448;
  BOOL v449;
  uint64_t v450;
  BOOL v455;
  BOOL v457;
  BOOL v459;
  BOOL v461;
  BOOL v463;
  BOOL v465;
  BOOL v466;
  BOOL v470;
  BOOL v472;
  BOOL v474;
  BOOL v477;
  BOOL v479;
  BOOL v481;
  BOOL v483;
  BOOL v485;
  BOOL v487;
  BOOL v489;
  BOOL v491;
  BOOL v493;
  BOOL v495;
  BOOL v497;
  BOOL v499;
  BOOL v501;
  BOOL v503;
  BOOL v505;
  BOOL v517;
  BOOL v519;
  BOOL v522;
  BOOL v523;
  BOOL v525;
  BOOL v526;
  BOOL v528;
  BOOL v529;
  BOOL v531;
  BOOL v532;
  BOOL v534;
  BOOL v535;
  BOOL v537;
  BOOL v538;
  BOOL v540;
  BOOL v541;
  BOOL v543;
  BOOL v544;
  BOOL v547;
  BOOL v554;
  BOOL v556;
  BOOL v558;
  BOOL v560;
  BOOL v563;
  char v564;
  uint64_t v565;
  uint64_t v566;

  if (a2 == 12)
  {
    if (*a1 == 0x7972726163646461 && *((_DWORD *)a1 + 2) == 842233134)
      return 1;
    if (*a1 == 0x7972726163646461 && *((_DWORD *)a1 + 2) == 875984174)
      return 1;
  }
  else if (a2 == 13)
  {
    if (*a1 == 0x7972726163646461 && *(uint64_t *)((char *)a1 + 5) == 0x3233752E78797272)
      return 1;
    if (*a1 == 0x7972726163646461 && *(uint64_t *)((char *)a1 + 5) == 0x3436752E78797272)
      return 1;
    if (*a1 == 0x6F72726F62627573 && *(uint64_t *)((char *)a1 + 5) == 0x3233752E776F7272)
      return 1;
    if (*a1 == 0x6F72726F62627573 && *(uint64_t *)((char *)a1 + 5) == 0x3436752E776F7272)
      return 1;
  }
  else if (a2 < 0xB)
  {
    if (a2 == 10)
    {
      v9 = *a1 == 0x6261702E32787661 && *((_WORD *)a1 + 4) == 11891;
      result = 1;
      if (v9)
        return result;
      v11 = 0;
      v12 = 1;
      v13 = 1;
      v14 = 1;
      v15 = 1;
      v16 = 1;
      v17 = 1;
      v18 = 1;
      v19 = 1;
      v20 = 1;
      v21 = 1;
      goto LABEL_102;
    }
    v11 = 0;
    v21 = 1;
    v20 = 1;
    v19 = 1;
    v31 = 1;
    v17 = 1;
    v16 = 1;
    v15 = 1;
    v14 = 1;
    v13 = 1;
    v12 = 1;
    goto LABEL_77;
  }
  if (*a1 == 0x6461702E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x2E73646461702E32)
    return 1;
  if (*a1 == 0x7573702E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x2E73627573702E32)
    return 1;
  v17 = a2 < 0xC;
  if (a2 >= 0xC)
  {
    if (*a1 == 0x6461702E32657373 && *((_DWORD *)a1 + 2) == 779318628)
      return 1;
    if (*a1 == 0x7573702E32657373 && *((_DWORD *)a1 + 2) == 779318626)
      return 1;
  }
  if (*a1 == 0x6461702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x2E73646461702E32)
    return 1;
  if (*a1 == 0x7573702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x2E73627573702E32)
    return 1;
  if (a2 < 0xC)
    goto LABEL_64;
  if (*a1 == 0x6461702E32787661 && *((_DWORD *)a1 + 2) == 779318628)
    return 1;
  if (*a1 == 0x7573702E32787661 && *((_DWORD *)a1 + 2) == 779318626)
    return 1;
  if (a2 < 0xD)
  {
LABEL_64:
    v11 = 0;
    v16 = 1;
    v20 = 1;
    v28 = 1;
    goto LABEL_65;
  }
  if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x2E73646461702E32)
    return 1;
  if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x2E73627573702E32)
    return 1;
  v28 = a2 < 0x12;
  if (a2 >= 0x12)
  {
    if (*a1 == 0x6D2E323135787661 && a1[1] == 0x646461702E6B7361 && *((_WORD *)a1 + 8) == 11891)
      return 1;
    v202 = *a1 == 0x6D2E323135787661 && a1[1] == 0x627573702E6B7361;
    if (v202 && *((_WORD *)a1 + 8) == 11891)
      return 1;
    if (a2 >= 0x13)
    {
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x646461702E6B7361
        && *(uint64_t *)((char *)a1 + 11) == 0x2E7375646461702ELL)
      {
        return 1;
      }
      v217 = *a1 == 0x6D2E323135787661 && a1[1] == 0x627573702E6B7361;
      if (v217 && *(uint64_t *)((char *)a1 + 11) == 0x2E7375627573702ELL)
        return 1;
      v20 = 0;
      v11 = 0;
      goto LABEL_762;
    }
  }
  else if (a2 == 16)
  {
    if (*a1 == 0x61702E3365737373 && a1[1] == 0x3832312E622E7362)
      return 1;
    if (*a1 == 0x61702E3365737373 && a1[1] == 0x3832312E772E7362)
      return 1;
    v61 = *a1 == 0x61702E3365737373 && a1[1] == 0x3832312E642E7362;
    v20 = 1;
    v11 = 1;
    result = 1;
    if (v61)
      return result;
    goto LABEL_762;
  }
  v11 = 0;
  v20 = 1;
LABEL_762:
  if (*a1 == 0x6D66762E34616D66 && *(uint64_t *)((char *)a1 + 5) == 0x732E6464616D6676)
    return 1;
  v16 = 0;
LABEL_65:
  if (*a1 == 0x616D66762E616D66 && *(uint64_t *)((char *)a1 + 3) == 0x2E6464616D66762ELL)
    return 1;
  if (*a1 == 0x736D66762E616D66 && *(uint64_t *)((char *)a1 + 3) == 0x2E6275736D66762ELL)
    return 1;
  v15 = a2 < 0xE;
  if (a2 >= 0xE)
  {
    if (*a1 == 0x736D66762E616D66 && *(uint64_t *)((char *)a1 + 6) == 0x2E6464616275736DLL)
      return 1;
LABEL_218:
    if (*a1 == 0x6D6E66762E616D66 && *((_DWORD *)a1 + 2) == 778331233)
      return 1;
    if (*a1 == 0x6D6E66762E616D66 && *((_DWORD *)a1 + 2) == 778204531)
      return 1;
    goto LABEL_226;
  }
  if (a2 >= 0xC)
    goto LABEL_218;
LABEL_226:
  if ((v20 & 1) == 0)
  {
    v65 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616D66762E6B7361;
    if (v65 && *(uint64_t *)((char *)a1 + 11) == 0x2E6464616D66762ELL)
      return 1;
  }
  v21 = a2 < 0x14;
  if (a2 <= 0x13)
    goto LABEL_235;
  if (*a1 == 0x6D2E323135787661 && a1[1] == 0x6D6E66762E6B7361 && *((_DWORD *)a1 + 4) == 778331233)
    return 1;
  v75 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D6E66762E6B7361;
  if (v75 && *((_DWORD *)a1 + 4) == 778204531)
    return 1;
  v77 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
  if (v77 && *((_DWORD *)a1 + 4) == 778331233)
    return 1;
  v79 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E7A6B7361;
  if (v79 && *((_DWORD *)a1 + 4) == 778331233)
    return 1;
  v81 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
  if (v81 && *((_DWORD *)a1 + 4) == 778204531)
    return 1;
  if (a2 < 0x15)
  {
LABEL_235:
    v12 = 1;
    v13 = 1;
    v14 = 1;
    v19 = 1;
    if (v28)
      goto LABEL_251;
  }
  else
  {
    if (*a1 == 0x6D2E323135787661
      && a1[1] == 0x6E66762E336B7361
      && *(uint64_t *)((char *)a1 + 13) == 0x2E6275736D6E6676)
    {
      return 1;
    }
    v12 = a2 < 0x16;
    if (a2 < 0x16)
      goto LABEL_314;
    if (*a1 == 0x6D2E323135787661
      && a1[1] == 0x616D66762E6B7361
      && *(uint64_t *)((char *)a1 + 14) == 0x2E6275736464616DLL)
    {
      return 1;
    }
    if (a2 >= 0x17)
    {
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x6D66762E7A6B7361
        && *(uint64_t *)((char *)a1 + 15) == 0x2E6275736464616DLL)
      {
        return 1;
      }
      v229 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
      if (v229 && *(uint64_t *)((char *)a1 + 15) == 0x2E6275736464616DLL)
        return 1;
      v231 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
      if (v231 && *(uint64_t *)((char *)a1 + 15) == 0x2E6464616275736DLL)
        return 1;
      v14 = 0;
    }
    else
    {
LABEL_314:
      v14 = 1;
    }
    v13 = 0;
    if (v28)
    {
      v19 = 1;
      if ((v16 & 1) != 0)
        goto LABEL_256;
LABEL_252:
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x6B63706E756B2E32)
        return 1;
      goto LABEL_256;
    }
  }
  if (*a1 == 0x6D2E323135787661 && a1[1] == 0x667568732E6B7361 && *((_WORD *)a1 + 8) == 26926)
    return 1;
  v69 = *a1 == 0x6D2E323135787661 && a1[1] == 0x667568732E6B7361;
  if (v69 && *((_WORD *)a1 + 8) == 26158)
    return 1;
  v19 = 0;
LABEL_251:
  if ((v16 & 1) == 0)
    goto LABEL_252;
LABEL_256:
  if (*a1 == 0x6261702E32787661 && *((_WORD *)a1 + 4) == 11891)
    return 1;
  if (a2 >= 0x11)
  {
    if (*a1 == 0x6D2E323135787661 && a1[1] == 0x736261702E6B7361 && *((_BYTE *)a1 + 16) == 46)
      return 1;
    v207 = *a1 == 0x622E323135787661 && a1[1] == 0x7473616364616F72;
    if (v207 && *((_BYTE *)a1 + 16) == 109)
      return 1;
    v31 = 0;
    v17 = 0;
    v15 = 0;
    LOBYTE(result) = 0;
    goto LABEL_78;
  }
  v31 = 0;
LABEL_77:
  LOBYTE(result) = 1;
LABEL_78:
  if (a2 == 12)
  {
    if (*a1 == 0x7271732E32657373 && *((_DWORD *)a1 + 2) == 1685270132)
      return 1;
  }
  else if (a2 == 11 && *a1 == 0x747271732E657373 && *(uint64_t *)((char *)a1 + 3) == 0x73732E747271732ELL)
  {
    return 1;
  }
  if ((v19 & 1) == 0)
  {
    v34 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747271732E6B7361;
    if (v34 && *((_WORD *)a1 + 8) == 28718)
      return 1;
  }
  if ((v31 & 1) != 0)
  {
    v36 = 1;
    v18 = 1;
    if (v12)
      goto LABEL_123;
    goto LABEL_116;
  }
  v18 = 0;
LABEL_102:
  if (*a1 == 0x747271732E787661 && *((_WORD *)a1 + 4) == 28718)
    return 1;
  if ((v18 & 1) == 0 && *a1 == 0x7271732E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x702E747271732E32)
    return 1;
  if (*a1 == 0x747271732E657373 && *((_WORD *)a1 + 4) == 28718)
    return 1;
  v36 = 0;
  if (v12)
    goto LABEL_123;
LABEL_116:
  if (*a1 == 0x6D2E323135787661
    && a1[1] == 0x6F7262702E6B7361
    && *(uint64_t *)((char *)a1 + 14) == 0x7473616364616F72)
  {
    return 1;
  }
LABEL_123:
  if (!v17)
  {
    if (*a1 == 0x6D63702E32657373 && *((_DWORD *)a1 + 2) == 779183472)
      return 1;
    if (*a1 == 0x6D63702E32657373 && *((_DWORD *)a1 + 2) == 779380592)
      return 1;
    if (*a1 == 0x6D63702E32787661 && *((_DWORD *)a1 + 2) == 779183472)
      return 1;
    if (*a1 == 0x6D63702E32787661 && *((_DWORD *)a1 + 2) == 779380592)
      return 1;
  }
  if ((v20 & 1) == 0)
  {
    v42 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D63702E6B7361;
    if (v42 && *(uint64_t *)((char *)a1 + 11) == 0x2E7165706D63702ELL)
      return 1;
    v44 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D63702E6B7361;
    if (v44 && *(uint64_t *)((char *)a1 + 11) == 0x2E7467706D63702ELL)
      return 1;
  }
  if (a2 >= 0xF && *a1 == 0x726570762E787661 && *(uint64_t *)((char *)a1 + 7) == 0x2E38323166326D72)
    return 1;
  switch(a2)
  {
    case 0xAuLL:
      if ((*a1 != 0x2E6464612E657373 || *((_WORD *)a1 + 4) != 29555)
        && (*a1 != 0x2E6275732E657373 || *((_WORD *)a1 + 4) != 29555)
        && (*a1 != 0x2E6C756D2E657373 || *((_WORD *)a1 + 4) != 29555)
        && (*a1 != 0x2E7669642E657373 || *((_WORD *)a1 + 4) != 29555))
      {
        goto LABEL_438;
      }
      return 1;
    case 0xBuLL:
      if (*a1 == 0x6464612E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x64732E6464612E32)
        return 1;
      if (*a1 == 0x6275732E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x64732E6275732E32)
        return 1;
      if (*a1 == 0x6C756D2E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x64732E6C756D2E32)
        return 1;
      v88 = *(uint64_t *)((char *)a1 + 3);
      v89 = *a1 == 0x7669642E32657373;
      v90 = 0x64732E7669642E32;
LABEL_322:
      if (!v89 || v88 != v90)
        goto LABEL_438;
      return 1;
    case 0xCuLL:
      if ((*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1651734625)
        && (*a1 != 0x616D702E32657373 || *((_DWORD *)a1 + 2) != 1999532920)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685289057)
        && (*a1 != 0x616D702E32657373 || *((_DWORD *)a1 + 2) != 1647211896)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 2004187233)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685420129)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1651732073)
        && (*a1 != 0x696D702E32657373 || *((_DWORD *)a1 + 2) != 1999532910)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685286505)
        && (*a1 != 0x696D702E32657373 || *((_DWORD *)a1 + 2) != 1647211886)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 2004184681)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685417577)
        && (*a1 != 0x6B2E323135787661 || *((_DWORD *)a1 + 2) != 1999532655))
      {
        goto LABEL_438;
      }
      return 1;
    case 0xDuLL:
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x772E646E616B2E32)
        return 1;
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x772E746F6E6B2E32)
        return 1;
      v114 = *(uint64_t *)((char *)a1 + 5);
      v115 = *a1 == 0x6B2E323135787661;
      v116 = 2020290098;
      goto LABEL_425;
    case 0xEuLL:
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x772E6E646E616B2ELL)
        return 1;
      v114 = *(uint64_t *)((char *)a1 + 6);
      v115 = *a1 == 0x6B2E323135787661;
      v116 = 1853385518;
LABEL_425:
      v118 = v116 | 0x772E726F00000000;
      if (!v115 || v114 != v118)
        goto LABEL_438;
      return 1;
    case 0xFuLL:
      v88 = *(uint64_t *)((char *)a1 + 7);
      v89 = *a1 == 0x6570762E32787661;
      v90 = 0x38323169326D7265;
      goto LABEL_322;
    case 0x11uLL:
      if (*a1 != 0x6B2E323135787661 || a1[1] != 0x2E6374736574726FLL || *((_BYTE *)a1 + 16) != 119)
      {
        v97 = *a1 == 0x6B2E323135787661 && a1[1] == 0x2E7A74736574726FLL;
        if (!v97 || *((_BYTE *)a1 + 16) != 119)
          goto LABEL_438;
      }
      return 1;
    default:
      if (v21)
      {
        if (a2 < 9)
        {
          v87 = 1;
LABEL_449:
          v124 = 1;
          goto LABEL_467;
        }
      }
      else if (*a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361 && *((_DWORD *)a1 + 4) == 778186342)
      {
        return 1;
      }
LABEL_438:
      if (*a1 == 0x616D702E32787661 && *((_BYTE *)a1 + 8) == 120)
        return 1;
      if (*a1 == 0x696D702E32787661 && *((_BYTE *)a1 + 8) == 110)
        return 1;
      v124 = a2 < 0x10;
      if (a2 >= 0x10)
      {
        if (*a1 == 0x6D2E323135787661 && a1[1] == 0x78616D702E6B7361)
          return 1;
        if (*a1 == 0x6D2E323135787661 && a1[1] == 0x6E696D702E6B7361)
          return 1;
      }
      else if (a2 < 0xF)
      {
        v87 = 0;
        goto LABEL_449;
      }
      if (*a1 == 0x7262762E32787661 && *(uint64_t *)((char *)a1 + 7) == 0x7473616364616F72)
        return 1;
      if (*a1 == 0x7262702E32787661 && *(uint64_t *)((char *)a1 + 7) == 0x7473616364616F72)
        return 1;
      v87 = 0;
LABEL_467:
      if (!v17 && *a1 == 0x726570762E787661 && *((_DWORD *)a1 + 2) == 778856813)
        return 1;
      if ((v36 & 1) == 0 && *a1 == 0x6873702E32657373 && *((_WORD *)a1 + 4) == 26229)
        return 1;
      if (!result)
      {
        v131 = *a1 == 0x702E323135787661 && a1[1] == 0x73616364616F7262;
        if (v131 && *((_BYTE *)a1 + 16) == 116)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v133 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        if (v133 && *(uint64_t *)((char *)a1 + 15) == 0x732E747361636461)
          return 1;
      }
      if ((v20 & 1) == 0)
      {
        v135 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64766F6D2E6B7361;
        if (v135 && *(uint64_t *)((char *)a1 + 11) == 0x70756464766F6D2ELL)
          return 1;
      }
      if (!v21)
      {
        v209 = *a1 == 0x6D2E323135787661 && a1[1] == 0x73766F6D2E6B7361;
        if (v209 && *((_DWORD *)a1 + 4) == 1886741608)
          return 1;
        v211 = *a1 == 0x6D2E323135787661 && a1[1] == 0x73766F6D2E6B7361;
        if (v211 && *((_DWORD *)a1 + 4) == 1886741612)
          return 1;
        v213 = *a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361;
        if (v213 && *((_DWORD *)a1 + 4) == 778317414)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v137 = *a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361;
        if (v137 && *(uint64_t *)((char *)a1 + 13) == 0x2E772E6C66756873)
          return 1;
        v139 = *a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361;
        if (v139 && *(uint64_t *)((char *)a1 + 13) == 0x2E772E6866756873)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v141 = *a1 == 0x6D2E323135787661 && a1[1] == 0x667568732E6B7361;
        if (v141 && *((_WORD *)a1 + 8) == 28718)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v143 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v143 && *(uint64_t *)((char *)a1 + 13) == 0x702E6C696D726570)
          return 1;
      }
      if (!v21)
      {
        v145 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D7265702E6B7361;
        if (v145 && *((_DWORD *)a1 + 4) == 778462254)
          return 1;
        v147 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D7265702E6B7361;
        if (v147 && *((_DWORD *)a1 + 4) == 778658862)
          return 1;
      }
      if ((v20 & 1) == 0)
      {
        v219 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706E75702E6B7361;
        if (v219 && *(uint64_t *)((char *)a1 + 11) == 0x6C6B63706E75702ELL)
          return 1;
        v221 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706E75702E6B7361;
        if (v221 && *(uint64_t *)((char *)a1 + 11) == 0x686B63706E75702ELL)
          return 1;
        v223 = *a1 == 0x6D2E323135787661 && a1[1] == 0x63706E752E6B7361;
        if (v223 && *(uint64_t *)((char *)a1 + 11) == 0x2E6C6B63706E752ELL)
          return 1;
        v225 = *a1 == 0x6D2E323135787661 && a1[1] == 0x63706E752E6B7361;
        if (v225 && *(uint64_t *)((char *)a1 + 11) == 0x2E686B63706E752ELL)
          return 1;
      }
      if (!result)
      {
        v149 = *a1 == 0x6D2E323135787661 && a1[1] == 0x646E61702E6B7361;
        if (v149 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v151 = *a1 == 0x6D2E323135787661 && a1[1] == 0x646E61702E6B7361;
        if (v151 && *((_WORD *)a1 + 8) == 11886)
          return 1;
      }
      if (!v124 && *a1 == 0x6D2E323135787661 && a1[1] == 0x2E726F702E6B7361)
        return 1;
      if (!result)
      {
        v154 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F78702E6B7361;
        if (v154 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if (!v124 && *a1 == 0x6D2E323135787661 && a1[1] == 0x2E646E612E6B7361)
        return 1;
      if (!result)
      {
        v157 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6E646E612E6B7361;
        if (v157 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if (a2 >= 0xF && *a1 == 0x6D2E323135787661 && *(uint64_t *)((char *)a1 + 7) == 0x2E726F2E6B73616DLL)
        return 1;
      if (!v124 && *a1 == 0x6D2E323135787661 && a1[1] == 0x2E726F782E6B7361)
        return 1;
      if (!result)
      {
        v161 = *a1 == 0x6D2E323135787661 && a1[1] == 0x646461702E6B7361;
        if (v161 && *((_BYTE *)a1 + 16) == 46)
          return 1;
        v163 = *a1 == 0x6D2E323135787661 && a1[1] == 0x627573702E6B7361;
        if (v163 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v165 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v165 && *((_WORD *)a1 + 8) == 11884)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v167 = *a1 == 0x6D2E323135787661 && a1[1] == 0x647476632E6B7361;
        if (v167 && *(uint64_t *)((char *)a1 + 13) == 0x2E64703271647476)
          return 1;
      }
      if (!v12)
      {
        v169 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
        if (v169 && *(uint64_t *)((char *)a1 + 14) == 0x2E64703271647574)
          return 1;
        v171 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
        if (v171 && *(uint64_t *)((char *)a1 + 14) == 0x2E73703271647574)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v173 = *a1 == 0x6D2E323135787661 && a1[1] == 0x717476632E6B7361;
        if (v173 && *(uint64_t *)((char *)a1 + 13) == 0x2E64703271717476)
          return 1;
      }
      if (!v12)
      {
        v175 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
        if (v175 && *(uint64_t *)((char *)a1 + 14) == 0x2E64703271717574)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v177 = *a1 == 0x6D2E323135787661 && a1[1] == 0x647476632E6B7361;
        if (v177 && *(uint64_t *)((char *)a1 + 13) == 0x2E73703271647476)
          return 1;
      }
      if (a2 != 16)
      {
        if (a2 == 24)
        {
          if (*a1 != 0x6D2E323135787661 || a1[1] != 0x717476632E6B7361 || a1[2] != 0x3635322E73703271)
          {
            v235 = *a1 == 0x6D2E323135787661 && a1[1] == 0x717476632E6B7361;
            if (!v235 || a1[2] != 0x3231352E73703271)
            {
              v237 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
              if (!v237 || a1[2] != 0x3635322E71643264)
              {
                v239 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
                if (!v239 || a1[2] != 0x3635322E73703264)
                {
                  v241 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
                  if (!v241 || a1[2] != 0x3832312E64703273)
                  {
                    v243 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
                    if (!v243 || a1[2] != 0x3635322E64703273)
                      goto LABEL_923;
                  }
                }
              }
            }
          }
        }
        else
        {
          if (a2 != 25)
          {
            if (v21)
            {
LABEL_930:
              switch(a2)
              {
                case 0xCuLL:
                  if ((*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1902406773)
                    && (*a1 != 0x756D702E32787661 || *((_DWORD *)a1 + 2) != 1902390892))
                  {
                    goto LABEL_973;
                  }
                  return 1;
                case 0xDuLL:
                  v252 = 0x71642E756C756D70;
                  if (*a1 == 0x756D702E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x71642E756C756D70)
                    return 1;
                  v254 = *(uint64_t *)((char *)a1 + 5);
                  v255 = *a1 == 0x756D702E32787661;
LABEL_959:
                  if (!v255 || v254 != v252)
                    goto LABEL_973;
                  return 1;
                case 0x12uLL:
                  if (*a1 != 0x702E323135787661 || a1[1] != 0x352E71642E6C756DLL || *((_WORD *)a1 + 8) != 12849)
                    goto LABEL_973;
                  return 1;
                case 0x13uLL:
                  v254 = *(uint64_t *)((char *)a1 + 11);
                  v255 = *a1 == 0x702E323135787661 && a1[1] == 0x2E71642E756C756DLL;
                  v252 = 0x3231352E71642E75;
                  goto LABEL_959;
                default:
                  if (v21)
                    goto LABEL_973;
                  v257 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
                  if (!v257 || *((_DWORD *)a1 + 4) != 779183150)
                    goto LABEL_973;
                  return 1;
              }
            }
            goto LABEL_923;
          }
          if (*a1 != 0x6D2E323135787661
            || a1[1] != 0x747663762E6B7361
            || a1[2] != 0x32312E7370326870
            || *((_BYTE *)a1 + 24) != 56)
          {
            v182 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747663762E6B7361;
            v183 = v182 && a1[2] == 0x35322E7370326870;
            if (!v183 || *((_BYTE *)a1 + 24) != 54)
            {
              v185 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
              v186 = v185 && a1[2] == 0x35322E7370327171;
              if (!v186 || *((_BYTE *)a1 + 24) != 54)
              {
                v188 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
                v189 = v188 && a1[2] == 0x31352E7370327171;
                if (!v189 || *((_BYTE *)a1 + 24) != 50)
                {
                  v191 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747476632E6B7361;
                  v192 = v191 && a1[2] == 0x35322E7164326470;
                  if (!v192 || *((_BYTE *)a1 + 24) != 54)
                  {
                    v194 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747476632E6B7361;
                    v195 = v194 && a1[2] == 0x32312E7164327370;
                    if (!v195 || *((_BYTE *)a1 + 24) != 56)
                    {
                      v197 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747476632E6B7361;
                      v198 = v197 && a1[2] == 0x35322E7164327370;
                      if (!v198 || *((_BYTE *)a1 + 24) != 54)
                      {
LABEL_923:
                        if (*a1 != 0x6D2E323135787661
                          || a1[1] != 0x6D7265702E6B7361
                          || *((_DWORD *)a1 + 4) != 779247990)
                        {
                          goto LABEL_930;
                        }
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return 1;
      }
      if (*a1 == 0x632E323135787661 && a1[1] == 0x6473326973757476)
        return 1;
LABEL_973:
      if ((v13 & 1) == 0)
      {
        v259 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v259 && *(uint64_t *)((char *)a1 + 13) == 0x2E71642E756C756DLL)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v261 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v261 && *(uint64_t *)((char *)a1 + 15) == 0x2E77732E72682E6CLL)
          return 1;
      }
      if (!v21)
      {
        v263 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v263 && *((_DWORD *)a1 + 4) == 779562600)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v265 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v265 && *(uint64_t *)((char *)a1 + 13) == 0x2E772E75686C756DLL)
          return 1;
        v267 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616D702E6B7361;
        if (v267 && *(uint64_t *)((char *)a1 + 13) == 0x2E642E776464616DLL)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v269 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616D702E6B7361;
        if (v269 && *(uint64_t *)((char *)a1 + 15) == 0x2E772E7362756464)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v333 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v333 && *(uint64_t *)((char *)a1 + 13) == 0x2E627773736B6361)
          return 1;
        v335 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v335 && *(uint64_t *)((char *)a1 + 13) == 0x2E776473736B6361)
          return 1;
        v337 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v337 && *(uint64_t *)((char *)a1 + 13) == 0x2E627773756B6361)
          return 1;
        v339 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v339 && *(uint64_t *)((char *)a1 + 13) == 0x2E776473756B6361)
          return 1;
      }
      if (!result)
      {
        v341 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v341 && *((_BYTE *)a1 + 16) == 98)
          return 1;
        v343 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v343 && *((_BYTE *)a1 + 16) == 100)
          return 1;
        v345 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v345 && *((_BYTE *)a1 + 16) == 113)
          return 1;
        v347 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v347 && *((_BYTE *)a1 + 16) == 119)
          return 1;
      }
      if (!v17 && *a1 == 0x632E323135787661 && *((_DWORD *)a1 + 2) == 1882091629)
        return 1;
      if (!result)
      {
        v349 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D63752E6B7361;
        if (v349 && *((_BYTE *)a1 + 16) == 46)
          return 1;
        v351 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32627476;
        if (v351 && *((_BYTE *)a1 + 16) == 46)
          return 1;
        v353 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32777476;
        if (v353 && *((_BYTE *)a1 + 16) == 46)
          return 1;
        v355 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32647476;
        if (v355 && *((_BYTE *)a1 + 16) == 46)
          return 1;
        v357 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32717476;
        if (v357 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v272 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v272 && *(uint64_t *)((char *)a1 + 15) == 0x2E7261766C696D72)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v359 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v359 && *((_WORD *)a1 + 8) == 25646)
          return 1;
        v361 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v361 && *((_WORD *)a1 + 8) == 28974)
          return 1;
        v363 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v363 && *((_WORD *)a1 + 8) == 30510)
          return 1;
        v365 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v365 && *((_WORD *)a1 + 8) == 25646)
          return 1;
        v367 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v367 && *((_WORD *)a1 + 8) == 28974)
          return 1;
        v369 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v369 && *((_WORD *)a1 + 8) == 30510)
          return 1;
        v371 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v371 && *((_WORD *)a1 + 8) == 25646)
          return 1;
        v373 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v373 && *((_WORD *)a1 + 8) == 28974)
          return 1;
        v375 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v375 && *((_WORD *)a1 + 8) == 30510)
          return 1;
      }
      if (!result)
      {
        v377 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v377 && *((_BYTE *)a1 + 16) == 105)
          return 1;
        v379 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v379 && *((_BYTE *)a1 + 16) == 105)
          return 1;
        v381 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v381 && *((_BYTE *)a1 + 16) == 105)
          return 1;
        v383 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v383 && *((_BYTE *)a1 + 16) == 118)
          return 1;
        v385 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v385 && *((_BYTE *)a1 + 16) == 118)
          return 1;
        v387 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v387 && *((_BYTE *)a1 + 16) == 118)
          return 1;
      }
      if (!v17)
      {
        if (*a1 == 0x6D702E3134657373 && *((_DWORD *)a1 + 2) == 2020832879)
          return 1;
        if (*a1 == 0x6D702E3134657373 && *((_DWORD *)a1 + 2) == 2021291631)
          return 1;
      }
      if ((v18 & 1) == 0)
      {
        if (*a1 == 0x6F6D702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x7873766F6D702E32)
          return 1;
        if (*a1 == 0x6F6D702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x787A766F6D702E32)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v389 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
        if (v389 && *((_WORD *)a1 + 8) == 30835)
          return 1;
        v391 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
        if (v391 && *((_WORD *)a1 + 8) == 30842)
          return 1;
        v393 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6E637A6C2E6B7361;
        if (v393 && *((_WORD *)a1 + 8) == 11892)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v278 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726574702E6B7361;
        if (v278 && *(uint64_t *)((char *)a1 + 13) == 0x2E676F6C6E726574)
          return 1;
      }
      if (!v12)
      {
        v280 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6574702E7A6B7361;
        if (v280 && *(uint64_t *)((char *)a1 + 14) == 0x2E676F6C6E726574)
          return 1;
      }
      if (!v21)
      {
        v282 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616D70762E6B7361;
        if (v282 && *((_DWORD *)a1 + 4) == 842359908)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v284 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D70762E7A6B7361;
        if (v284 && *(uint64_t *)((char *)a1 + 13) == 0x32356464616D7076)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v286 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v286 && *(uint64_t *)((char *)a1 + 15) == 0x2E72617632696D72)
          return 1;
        v288 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v288 && *(uint64_t *)((char *)a1 + 15) == 0x2E72617632746D72)
          return 1;
      }
      if (a2 >= 0x18)
      {
        v290 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6570762E7A6B7361;
        if (v290 && a1[2] == 0x2E72617632746D72)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v292 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v292 && *(uint64_t *)((char *)a1 + 13) == 0x2E64737562706470)
          return 1;
      }
      if (!v12)
      {
        v294 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v294 && *(uint64_t *)((char *)a1 + 14) == 0x2E64737562706470)
          return 1;
        v296 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v296 && *(uint64_t *)((char *)a1 + 14) == 0x2E73647375627064)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v298 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v298 && *(uint64_t *)((char *)a1 + 15) == 0x2E73647375627064)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v300 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v300 && *(uint64_t *)((char *)a1 + 13) == 0x2E64737377706470)
          return 1;
      }
      if (!v12)
      {
        v302 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v302 && *(uint64_t *)((char *)a1 + 14) == 0x2E64737377706470)
          return 1;
        v304 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v304 && *(uint64_t *)((char *)a1 + 14) == 0x2E73647373777064)
          return 1;
      }
      if ((v14 & 1) == 0)
      {
        v306 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v306 && *(uint64_t *)((char *)a1 + 15) == 0x2E73647373777064)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v308 = *a1 == 0x6D2E323135787661 && a1[1] == 0x737062642E6B7361;
        if (v308 && *(uint64_t *)((char *)a1 + 13) == 0x2E77626461737062)
          return 1;
      }
      if ((v20 & 1) == 0)
      {
        v310 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v310 && *(uint64_t *)((char *)a1 + 11) == 0x2E646C687370762ELL)
          return 1;
        v312 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v312 && *(uint64_t *)((char *)a1 + 11) == 0x2E6472687370762ELL)
          return 1;
      }
      if (!v21)
      {
        v314 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v314 && *((_DWORD *)a1 + 4) == 779510892)
          return 1;
        v316 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v316 && *((_DWORD *)a1 + 4) == 779510898)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v318 = *a1 == 0x6D2E323135787661 && a1[1] == 0x7370762E7A6B7361;
        if (v318 && *(uint64_t *)((char *)a1 + 13) == 0x2E76646C68737076)
          return 1;
        v320 = *a1 == 0x6D2E323135787661 && a1[1] == 0x7370762E7A6B7361;
        if (v320 && *(uint64_t *)((char *)a1 + 13) == 0x2E76647268737076)
          return 1;
      }
      if (!v15)
      {
        if (*a1 == 0x762E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x2E646C687370762ELL)
          return 1;
        if (*a1 == 0x762E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x2E6472687370762ELL)
          return 1;
      }
      if (!result)
      {
        v395 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6464612E6B7361;
        if (v395 && *((_BYTE *)a1 + 16) == 112)
          return 1;
        v397 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6275732E6B7361;
        if (v397 && *((_BYTE *)a1 + 16) == 112)
          return 1;
        v399 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6C756D2E6B7361;
        if (v399 && *((_BYTE *)a1 + 16) == 112)
          return 1;
        v401 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E7669642E6B7361;
        if (v401 && *((_BYTE *)a1 + 16) == 112)
          return 1;
        v403 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E78616D2E6B7361;
        if (v403 && *((_BYTE *)a1 + 16) == 112)
          return 1;
        v405 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6E696D2E6B7361;
        if (v405 && *((_BYTE *)a1 + 16) == 112)
          return 1;
      }
      if ((v13 & 1) == 0)
      {
        v324 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6370662E6B7361;
        if (v324 && *(uint64_t *)((char *)a1 + 13) == 0x702E7373616C6370)
          return 1;
      }
      if (a2 < 0x19)
        goto LABEL_1257;
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x687370762E6B7361
        && a1[2] == 0x626D717469626675
        && *((_BYTE *)a1 + 24) == 46)
      {
        return 1;
      }
      if (a2 >= 0x1B)
      {
        if (*a1 == 0x6D2E323135787661
          && a1[1] == 0x6C756D702E6B7361
          && a1[2] == 0x2E74666968736974
          && *(uint64_t *)((char *)a1 + 19) == 0x2E62712E74666968)
        {
          return 1;
        }
        v329 = 0;
        if ((v13 & 1) != 0)
          break;
      }
      else
      {
LABEL_1257:
        v329 = 1;
        if ((v13 & 1) != 0)
          break;
      }
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x666E6F632E6B7361
        && *(uint64_t *)((char *)a1 + 13) == 0x2E7463696C666E6FLL)
      {
        return 1;
      }
      break;
  }
  switch(a2)
  {
    case 0xCuLL:
      if (*a1 == 0x737476632E657373 && *((_DWORD *)a1 + 2) == 1936929385)
        return 1;
      goto LABEL_1611;
    case 0xDuLL:
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6473326973747663)
        return 1;
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6473327373747663)
        return 1;
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6470327164747663)
        return 1;
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x7370327164747663)
        return 1;
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6470327370747663)
        return 1;
      goto LABEL_1611;
    case 0xEuLL:
      v415 = *(uint64_t *)((char *)a1 + 6);
      v416 = *a1 == 0x737476632E657373;
      v417 = 0x7373323436697374;
      goto LABEL_1582;
    case 0xFuLL:
      v415 = *(uint64_t *)((char *)a1 + 7);
      v416 = *a1 == 0x7476632E32657373;
      v417 = 0x6473323436697374;
LABEL_1582:
      if (!v416 || v415 != v417)
        goto LABEL_1611;
      return 1;
    case 0x11uLL:
      if (*a1 == 0x647476632E787661 && a1[1] == 0x35322E64702E3271 && *((_BYTE *)a1 + 16) == 54)
        return 1;
      v421 = *a1 == 0x647476632E787661 && a1[1] == 0x35322E73702E3271;
      if (v421 && *((_BYTE *)a1 + 16) == 54)
        return 1;
      goto LABEL_1611;
    case 0x12uLL:
      if (*a1 == 0x2E7476632E787661 && a1[1] == 0x322E64702E327370 && *((_WORD *)a1 + 8) == 13877)
        return 1;
      goto LABEL_1611;
    case 0x17uLL:
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x766F6D702E6B7361
        && *(uint64_t *)((char *)a1 + 15) == 0x3635322E64712E76)
      {
        return 1;
      }
      v437 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
      if (v437 && *(uint64_t *)((char *)a1 + 15) == 0x3231352E64712E76)
        return 1;
      v439 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
      if (v439 && *(uint64_t *)((char *)a1 + 15) == 0x3635322E62772E76)
        return 1;
      v441 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
      if (v441 && *(uint64_t *)((char *)a1 + 15) == 0x3231352E62772E76)
        return 1;
      goto LABEL_1611;
    default:
LABEL_1611:
      if ((v36 & 1) == 0 && *a1 == 0x7032687074766376 && *((_WORD *)a1 + 4) == 11891)
        return 1;
      if (!v124 && *a1 == 0x736E69762E787661 && a1[1] == 0x2E38323166747265)
        return 1;
      if (v11)
      {
        if (*a1 == 0x6E69762E32787661 && a1[1] == 0x3832316974726573)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v428 = *a1 == 0x6D2E323135787661 && a1[1] == 0x65736E692E6B7361;
        if (v428 && *((_WORD *)a1 + 8) == 29810)
          return 1;
      }
      if (!result)
      {
        v430 = *a1 == 0x747865762E787661 && a1[1] == 0x3832316674636172;
        if (v430 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if (a2 == 17)
      {
        v432 = *((unsigned __int8 *)a1 + 16);
        v433 = *a1 == 0x7865762E32787661 && a1[1] == 0x3231697463617274;
        v434 = 56;
      }
      else
      {
        if (v21)
          goto LABEL_1686;
        v432 = *((_DWORD *)a1 + 4);
        v433 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747865762E6B7361;
        v434 = 1952670066;
      }
      if (v433 && v432 == v434)
        return 1;
LABEL_1686:
      if (!v17 && *a1 == 0x6F6D2E6134657373 && *((_DWORD *)a1 + 2) == 779382390)
        return 1;
      if ((v36 & 1) == 0 && *a1 == 0x6E766F6D2E787661 && *((_WORD *)a1 + 4) == 11892)
        return 1;
      if (a2 >= 0xF && *a1 == 0x732E323135787661 && *(uint64_t *)((char *)a1 + 7) == 0x2E746E65726F7473)
        return 1;
      if (a2 == 13)
      {
        v448 = *(uint64_t *)((char *)a1 + 5);
        v449 = *a1 == 0x766F6D2E32787661;
LABEL_1711:
        v450 = 0x617164746E766F6DLL;
        goto LABEL_1712;
      }
      if (a2 == 15)
      {
        v448 = *(uint64_t *)((char *)a1 + 7);
        v449 = *a1 == 0x6D2E323135787661;
        goto LABEL_1711;
      }
      if (a2 != 14)
        goto LABEL_1716;
      if (*a1 == 0x6F6D2E3134657373 && *(uint64_t *)((char *)a1 + 6) == 0x617164746E766F6DLL)
        return 1;
      v448 = *(uint64_t *)((char *)a1 + 6);
      v449 = *a1 == 0x6F74732E32657373;
      v450 = 0x71642E6C65726F74;
LABEL_1712:
      if (v449 && v448 == v450)
        return 1;
LABEL_1716:
      if ((v18 & 1) == 0 && *a1 == 0x726F74732E657373 && *(uint64_t *)((char *)a1 + 3) == 0x2E7565726F74732ELL)
        return 1;
      if (!v17 && *a1 == 0x6F74732E32657373 && *((_DWORD *)a1 + 2) == 779445618)
        return 1;
      if ((v18 & 1) == 0 && *a1 == 0x726F74732E787661 && *(uint64_t *)((char *)a1 + 3) == 0x2E7565726F74732ELL)
        return 1;
      if ((v20 & 1) == 0)
      {
        v455 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v455 && *(uint64_t *)((char *)a1 + 11) == 0x2E7565726F74732ELL)
          return 1;
        v457 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v457 && *(uint64_t *)((char *)a1 + 11) == 0x702E65726F74732ELL)
          return 1;
      }
      if (!v21)
      {
        v477 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v477 && *((_DWORD *)a1 + 4) == 778186341)
          return 1;
        v479 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v479 && *((_DWORD *)a1 + 4) == 779562597)
          return 1;
        v481 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v481 && *((_DWORD *)a1 + 4) == 778317413)
          return 1;
        v483 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v483 && *((_DWORD *)a1 + 4) == 779169381)
          return 1;
        if (a2 == 20)
        {
          v485 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
          if (v485 && *((_DWORD *)a1 + 4) == 1936928357)
            return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        v459 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616F6C2E6B7361;
        if (v459 && *((_WORD *)a1 + 8) == 11893)
          return 1;
      }
      if (!result)
      {
        v461 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616F6C2E6B7361;
        if (v461 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if (a2 >= 0x18)
      {
        v463 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v463 && a1[2] == 0x2E64616F6C2E646ELL)
          return 1;
      }
      if ((v329 & 1) == 0)
      {
        v465 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        v466 = v465 && a1[2] == 0x6F74732E73736572;
        if (v466 && *(uint64_t *)((char *)a1 + 19) == 0x2E65726F74732E73)
          return 1;
      }
      if (!v21)
      {
        v487 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v487 && *((_DWORD *)a1 + 4) == 1647207534)
          return 1;
        v489 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v489 && *((_DWORD *)a1 + 4) == 1999529070)
          return 1;
        v491 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v491 && *((_DWORD *)a1 + 4) == 1680761966)
          return 1;
        v493 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v493 && *((_DWORD *)a1 + 4) == 1898865774)
          return 1;
        v495 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v495 && *((_DWORD *)a1 + 4) == 1882088558)
          return 1;
      }
      if (!v12)
      {
        v497 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v497 && *(uint64_t *)((char *)a1 + 14) == 0x622E73736572706DLL)
          return 1;
        v499 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v499 && *(uint64_t *)((char *)a1 + 14) == 0x772E73736572706DLL)
          return 1;
        v501 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v501 && *(uint64_t *)((char *)a1 + 14) == 0x642E73736572706DLL)
          return 1;
        v503 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v503 && *(uint64_t *)((char *)a1 + 14) == 0x712E73736572706DLL)
          return 1;
        v505 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v505 && *(uint64_t *)((char *)a1 + 14) == 0x702E73736572706DLL)
          return 1;
      }
      if (v11)
      {
        if (*a1 == 0x72632E3234657373 && a1[1] == 0x382E34362E323363)
          return 1;
      }
      if (!v124 && *a1 == 0x6F7262762E787661 && a1[1] == 0x732E747361636461)
        return 1;
      if ((v20 & 1) == 0)
      {
        v470 = *a1 == 0x762E323135787661 && a1[1] == 0x73616364616F7262;
        if (v470 && *(uint64_t *)((char *)a1 + 11) == 0x732E747361636461)
          return 1;
      }
      if (!v21)
      {
        v472 = *a1 == 0x6D2E323135787661 && a1[1] == 0x696C61702E6B7361;
        if (v472 && *((_DWORD *)a1 + 4) == 779251303)
          return 1;
      }
      if ((v20 & 1) == 0)
      {
        v474 = *a1 == 0x6D2E323135787661 && a1[1] == 0x696C61762E6B7361;
        if (v474 && *(uint64_t *)((char *)a1 + 11) == 0x2E6E67696C61762ELL)
          return 1;
      }
      if (!v17)
      {
        if (*a1 == 0x6C73702E32657373 && *((_DWORD *)a1 + 2) == 1902390892)
          return 1;
        if (*a1 == 0x7273702E32657373 && *((_DWORD *)a1 + 2) == 1902390892)
          return 1;
        if (*a1 == 0x6C73702E32787661 && *((_DWORD *)a1 + 2) == 1902390892)
          return 1;
        if (*a1 == 0x7273702E32787661 && *((_DWORD *)a1 + 2) == 1902390892)
          return 1;
      }
      if (v15)
      {
        if (a2 == 13 && *a1 == 0x62702E3134657373 && *(uint64_t *)((char *)a1 + 5) == 0x77646E656C62702ELL)
          return 1;
      }
      else
      {
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x71642E6C6C73702ELL)
          return 1;
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x71642E6C7273702ELL)
          return 1;
      }
      if (!v17 && *a1 == 0x6C622E3134657373 && *((_DWORD *)a1 + 2) == 1885630053)
        return 1;
      if ((v18 & 1) == 0 && *a1 == 0x6E656C622E787661 && *(uint64_t *)((char *)a1 + 3) == 0x702E646E656C622ELL)
        return 1;
      if (a2 == 12)
      {
        if (*a1 == 0x6C62702E32787661 && *((_DWORD *)a1 + 2) == 2003070565)
          return 1;
      }
      else if ((v16 & 1) == 0 && *a1 == 0x6C62702E32787661 && *(uint64_t *)((char *)a1 + 5) == 0x2E64646E656C6270)
      {
        return 1;
      }
      if ((v19 & 1) == 0)
      {
        v517 = *a1 == 0x6F7262762E787661 && a1[1] == 0x3166747361636461;
        if (v517 && *((_WORD *)a1 + 8) == 14386)
          return 1;
      }
      if (a2 == 19)
      {
        v519 = *a1 == 0x7262762E32787661 && a1[1] == 0x697473616364616FLL;
        if (v519 && *(uint64_t *)((char *)a1 + 11) == 0x3832316974736163)
          return 1;
      }
      if ((v329 & 1) == 0)
      {
        v522 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v523 = v522 && a1[2] == 0x3233667473616364;
        if (v523 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783233667473)
          return 1;
        v525 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v526 = v525 && a1[2] == 0x3436667473616364;
        if (v526 && *(uint64_t *)((char *)a1 + 19) == 0x2E32783436667473)
          return 1;
        v528 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v529 = v528 && a1[2] == 0x3233667473616364;
        if (v529 && *(uint64_t *)((char *)a1 + 19) == 0x2E38783233667473)
          return 1;
        v531 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v532 = v531 && a1[2] == 0x3436667473616364;
        if (v532 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783436667473)
          return 1;
        v534 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v535 = v534 && a1[2] == 0x3233697473616364;
        if (v535 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783233697473)
          return 1;
        v537 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v538 = v537 && a1[2] == 0x3436697473616364;
        if (v538 && *(uint64_t *)((char *)a1 + 19) == 0x2E32783436697473)
          return 1;
        v540 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v541 = v540 && a1[2] == 0x3233697473616364;
        if (v541 && *(uint64_t *)((char *)a1 + 19) == 0x2E38783233697473)
          return 1;
        v543 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        v544 = v543 && a1[2] == 0x3436697473616364;
        if (v544 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783436697473)
          return 1;
      }
      if (a2 == 14)
      {
        if (*a1 == 0x6D6370762E706F78 && *(uint64_t *)((char *)a1 + 6) == 0x3635322E766F6D63)
          return 1;
      }
      else if (a2 == 10 && *a1 == 0x6D6370762E706F78 && *((_WORD *)a1 + 4) == 30319)
      {
        return 1;
      }
      if ((v19 & 1) == 0)
      {
        v547 = *a1 == 0x6D2E323135787661 && a1[1] == 0x65766F6D2E6B7361;
        if (v547 && *((_WORD *)a1 + 8) == 29486)
          return 1;
      }
      if (a2 >= 0xF && *a1 == 0x632E323135787661 && *(uint64_t *)((char *)a1 + 7) == 0x326B73616D747663)
        return 1;
      if ((v87 & 1) == 0)
      {
        if (*a1 == 0x6F6370762E706F78 && *((_BYTE *)a1 + 8) == 109)
          return 1;
        if (*a1 == 0x6F7270762E706F78 && *((_BYTE *)a1 + 8) == 116)
          return 1;
      }
      if ((v18 & 1) == 0)
      {
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 3) == 0x6C6F72702E323135)
          return 1;
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 3) == 0x726F72702E323135)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v554 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F72702E6B7361;
        if (v554 && *((_WORD *)a1 + 8) == 11894)
          return 1;
      }
      if (!result)
      {
        v556 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F72702E6B7361;
        if (v556 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if ((v19 & 1) == 0)
      {
        v558 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6F72702E6B7361;
        if (v558 && *((_WORD *)a1 + 8) == 11894)
          return 1;
      }
      if (!result)
      {
        v560 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6F72702E6B7361;
        if (v560 && *((_BYTE *)a1 + 16) == 46)
          return 1;
      }
      if ((v16 & 1) != 0)
        goto LABEL_2167;
      if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x6D74736574702E32)
        return 1;
      if (v15)
      {
LABEL_2167:
        if (v124)
          return 0;
        goto LABEL_2179;
      }
      v563 = *a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x6D6E74736574702ELL;
      result = v563;
      v564 = v563 || v124;
      if ((v564 & 1) == 0)
      {
LABEL_2179:
        v566 = *a1;
        v565 = a1[1];
        return v566 == 0x6D2E323135787661 && v565 == 0x677661702E6B7361;
      }
      return result;
  }
}

BOOL UpgradePTESTIntrinsic(llvm::Function *a1, int a2, llvm::Function **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *ValueName;
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 16) + 8);
  llvm::FixedVectorType::get((uint64_t **)(***(_QWORD ***)a1 + 1704), (llvm::Type *)4);
  v8 = v7;
  if (v6 == v7)
  {
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)a1);
      v12 = *ValueName;
      v10 = ValueName + 2;
      v9 = v12;
    }
    else
    {
      v9 = 0;
      v10 = &str_3_26;
    }
    v15 = 773;
    v14[0] = v10;
    v14[1] = v9;
    v14[2] = ".old";
    llvm::Value::setName(a1, (const llvm::Twine *)v14);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)a1 + 5), a2, 0, 0);
  }
  return v6 == v8;
}

BOOL UpgradeX86IntrinsicsWith8BitMask(llvm::Function *this, int a2, llvm::Function **a3)
{
  int v3;
  uint64_t v7;
  void *v8;
  uint64_t *ValueName;
  uint64_t v10;
  _QWORD v12[4];
  __int16 v13;

  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16)
                             + 8 * (*(_DWORD *)(*((_QWORD *)this + 3) + 12) - 1))
                 + 8);
  if (v3 == 8205)
  {
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      v10 = *ValueName;
      v8 = ValueName + 2;
      v7 = v10;
    }
    else
    {
      v7 = 0;
      v8 = &str_3_26;
    }
    v13 = 773;
    v12[0] = v8;
    v12[1] = v7;
    v12[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v12);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), a2, 0, 0);
  }
  return v3 == 8205;
}

BOOL UpgradeX86MaskedFPCompare(llvm::Function *this, int a2, llvm::Function **a3)
{
  int v3;
  uint64_t v7;
  void *v8;
  uint64_t *ValueName;
  uint64_t v10;
  _QWORD v12[4];
  __int16 v13;

  v3 = *(_DWORD *)(**(_QWORD **)(*((_QWORD *)this + 3) + 16) + 8) & 0xFE;
  if (v3 != 18)
  {
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      v10 = *ValueName;
      v8 = ValueName + 2;
      v7 = v10;
    }
    else
    {
      v7 = 0;
      v8 = &str_3_26;
    }
    v13 = 773;
    v12[0] = v8;
    v12[1] = v7;
    v12[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v12);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), a2, 0, 0);
  }
  return v3 != 18;
}

BOOL UpgradeX86BF16Intrinsic(llvm::Function *this, int a2, llvm::Function **a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t *ValueName;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  v6 = **(_QWORD **)(*((_QWORD *)this + 3) + 16);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  else
    v7 = *(_DWORD *)(v6 + 8);
  if (v7 != 1)
  {
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      v11 = *ValueName;
      v9 = ValueName + 2;
      v8 = v11;
    }
    else
    {
      v8 = 0;
      v9 = &str_3_26;
    }
    v14 = 773;
    v13[0] = v9;
    v13[1] = v8;
    v13[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v13);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), a2, 0, 0);
  }
  return v7 != 1;
}

BOOL UpgradeX86BF16DPIntrinsic(llvm::Function *this, int a2, llvm::Function **a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t *ValueName;
  uint64_t v11;
  _QWORD v13[4];
  __int16 v14;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 16) + 16);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  else
    v7 = *(_DWORD *)(v6 + 8);
  if (v7 != 1)
  {
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      v11 = *ValueName;
      v9 = ValueName + 2;
      v8 = v11;
    }
    else
    {
      v8 = 0;
      v9 = &str_3_26;
    }
    v14 = 773;
    v13[0] = v9;
    v13[1] = v8;
    v13[2] = ".old";
    llvm::Value::setName(this, (const llvm::Twine *)v13);
    *a3 = (llvm::Function *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), a2, 0, 0);
  }
  return v7 != 1;
}

uint64_t *llvm::IRBuilderBase::CreateAShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, char a5)
{
  uint64_t *result;
  llvm::Value *v11;
  _BYTE v12[32];
  __int16 v13;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Value *, llvm::Value *))(**((_QWORD **)this + 9)
                                                                                               + 24))(*((_QWORD *)this + 9), 27, a2, a3);
  if (!result)
  {
    v13 = 257;
    v11 = llvm::BinaryOperator::Create(27, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v12, 0);
    if ((a5 & 1) != 0)
      *((_BYTE *)v11 + 17) |= 2u;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v11, (uint64_t)a4);
  }
  return result;
}

_QWORD *std::vector<llvm::Type *>::__assign_with_size[abi:nn180100]<llvm::Type * const*,llvm::Type * const*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v9 = (uint64_t)(result + 2);
  v8 = result[2];
  v10 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v10)
    {
      result[1] = v10;
      operator delete(v10);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v11 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12 >> 61)
      abort();
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v9, v12);
    v10 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v10) >> 3;
  if (v17 >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v10)
  {
    result = memmove((void *)*result, __src, v16 - v10);
    v10 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v10;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v10[v14];
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateInsertValue(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *result;
  uint64_t *v13;
  _BYTE v14[32];
  __int16 v15;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 88))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v15 = 257;
    v13 = (uint64_t *)llvm::InsertValueInst::Create(a2, a3, a4, a5, (const llvm::Twine *)v14, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v13, a6);
  }
  return result;
}

uint64_t std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 48;
        std::allocator<llvm::OperandBundleDefT<llvm::Value *>>::destroy[abi:nn180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *,llvm::OperandBundleDefT<llvm::Value *> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      std::vector<llvm::jitlink::Block *>::__move_assign(a4 + 24, (__n128 *)((char *)v5 + 24));
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t _GLOBAL__sub_I_AutoUpgrade_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)DisableAutoUpgradeDebugInfo, 0, 0);
  byte_257966658 = 0;
  qword_257966660 = (uint64_t)&off_251C12500;
  unk_257966668 = 0;
  DisableAutoUpgradeDebugInfo[0] = (uint64_t)off_251C123A8;
  qword_257966670 = (uint64_t)&off_251C12520;
  qword_257966678 = (uint64_t)&off_251C12410;
  qword_257966690 = (uint64_t)&qword_257966678;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-auto-upgrade-debug-info", 0x1FuLL);
  qword_2579665F8 = (uint64_t)"Disable autoupgrade of debug info";
  unk_257966600 = 33;
  llvm::cl::Option::addArgument((llvm::cl::Option *)DisableAutoUpgradeDebugInfo);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, DisableAutoUpgradeDebugInfo, &dword_24A800000);
}

void llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::ValueSymbolTable *v3;

  *(_QWORD *)(a2 + 40) = a1 - 40;
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(llvm::ValueSymbolTable **)(v2 + 104);
      if (v3)
        llvm::ValueSymbolTable::reinsertValue(v3, (uint64_t ***)a2);
    }
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *ValueName;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 104);
      if (v3)
      {
        ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
        return llvm::StringMapImpl::RemoveKey(v3, (uint64_t *)((char *)ValueName + *(unsigned int *)(v3 + 20)), *ValueName);
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::BasicBlock(uint64_t a1, _QWORD *a2, const llvm::Twine *a3, llvm::Function *a4, llvm::BasicBlock *a5)
{
  unsigned int v7;

  *(_QWORD *)a1 = *a2 + 1632;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 22;
  *(_DWORD *)(a1 + 20) = v7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
    llvm::BasicBlock::insertInto((llvm::BasicBlock *)a1, a4, a5);
  llvm::Value::setName((llvm::Value *)a1, a3);
  return a1;
}

void llvm::BasicBlock::insertInto(llvm::BasicBlock *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  llvm::BasicBlock *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;

  if (a3)
  {
    v5 = a3;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, (uint64_t)this);
    v6 = *((_QWORD *)v5 + 3);
    v5 = (llvm::BasicBlock *)((char *)v5 + 24);
    *((_QWORD *)this + 3) = v6;
    *((_QWORD *)this + 4) = v5;
    v7 = (char *)this + 24;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)v5 = v7;
  }
  else
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, (uint64_t)this);
    v8 = *((_QWORD *)a2 + 9);
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = (char *)a2 + 72;
    v9 = (char *)this + 24;
    *(_QWORD *)(v8 + 8) = v9;
    *((_QWORD *)a2 + 9) = v9;
  }
}

void llvm::BasicBlock::~BasicBlock(llvm::BasicBlock *this, llvm::Value *i)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Constant **v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *v9;
  uint64_t v10;

  if ((*((_WORD *)this + 9) & 0x7FFF) != 0)
  {
    v3 = llvm::ConstantInt::get(***(_QWORD ***)this + 1992, 1, 0);
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      v5 = v3;
      do
      {
        v6 = *(llvm::Constant ***)(v4 + 24);
        getFoldedCast((llvm *)0x30, v5, *v6, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, v7, (llvm::Value *)1);
        llvm::Constant::destroyConstant((llvm::Constant *)v6);
        v4 = *((_QWORD *)this + 1);
      }
      while (v4);
    }
  }
  v8 = (llvm::BasicBlock *)((char *)this + 40);
  v9 = (llvm::Value *)*((_QWORD *)this + 6);
  if (v9 != (llvm::BasicBlock *)((char *)this + 40))
  {
    do
    {
      if (v9)
        v10 = (uint64_t)v9 - 24;
      else
        v10 = 0;
      llvm::User::dropAllReferences(v10);
      v9 = (llvm::Value *)*((_QWORD *)v9 + 1);
    }
    while (v9 != v8);
    i = (llvm::Value *)*((_QWORD *)this + 6);
    if (i != v8)
    {
      do
        i = (llvm::Value *)llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase((uint64_t)this + 40, (uint64_t)i);
      while (v8 != i);
      for (i = (llvm::Value *)*((_QWORD *)this + 6);
            v8 != i;
            i = (llvm::Value *)llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase((uint64_t)this + 40, (uint64_t)i))
      {
        ;
      }
    }
  }
  llvm::Value::~Value(this, i);
}

void llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::ValueSymbolTable *v7;
  _QWORD *i;
  uint64_t ***v9;
  unint64_t *ValueName;
  _QWORD *j;
  uint64_t ***v12;

  v4 = a1[2];
  if (v4)
    v5 = *(_QWORD *)(v4 + 104);
  else
    v5 = 0;
  *a2 = a3;
  v6 = a1[2];
  if (v6)
    v7 = *(llvm::ValueSymbolTable **)(v6 + 104);
  else
    v7 = 0;
  if ((llvm::ValueSymbolTable *)v5 != v7 && (_QWORD *)*a1 != a1)
  {
    if (v5)
    {
      for (i = (_QWORD *)a1[1]; i != a1; i = (_QWORD *)i[1])
      {
        if (i)
          v9 = (uint64_t ***)(i - 3);
        else
          v9 = 0;
        if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
        {
          ValueName = (unint64_t *)llvm::Value::getValueName(v9);
          llvm::StringMapImpl::RemoveKey(v5, (uint64_t *)((char *)ValueName + *(unsigned int *)(v5 + 20)), *ValueName);
        }
      }
    }
    if (v7)
    {
      for (j = (_QWORD *)a1[1]; j != a1; j = (_QWORD *)j[1])
      {
        if (j)
          v12 = (uint64_t ***)(j - 3);
        else
          v12 = 0;
        if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
          llvm::ValueSymbolTable::reinsertValue(v7, v12);
      }
    }
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::BasicBlock *v3;
  uint64_t v4;
  _QWORD *v5;
  llvm::Value *v6;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = (llvm::BasicBlock *)(a2 - 24);
  else
    v3 = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList(a1, (uint64_t)v3);
  v4 = *((_QWORD *)v3 + 3);
  v5 = (_QWORD *)*((_QWORD *)v3 + 4);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *((_QWORD *)v3 + 3) = 0;
  *((_QWORD *)v3 + 4) = 0;
  llvm::ilist_alloc_traits<llvm::BasicBlock>::deleteNode(v3, v6);
  return v2;
}

void llvm::BasicBlock::moveBefore(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  uint64_t *v2;
  uint64_t *v3;

  if (a2 != this)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 4);
    v3 = (uint64_t *)((char *)this + 24);
    if (v2 != (uint64_t *)((char *)a2 + 24) && v3 != v2)
      llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(*((_QWORD *)a2 + 7) + 72, (uint64_t *)a2 + 3, *((_QWORD *)this + 7) + 72, v3, v2);
  }
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  do
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      break;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v8 && v9 >= 0x1C;
  }
  while (!v10 || v9 - 29 >= 0xB);
  if (v1)
    return 0;
  else
    return v7;
}

uint64_t llvm::BasicBlock::getUniquePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      break;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8)
      v10 = v9 >= 0x1C;
    else
      v10 = 0;
    if (v10 && v9 - 29 <= 0xA)
    {
      if (*(_QWORD *)(v8 + 40) != v7)
        return 0;
      while (1)
      {
        v1 = *(_QWORD *)(v1 + 8);
        if (!v1)
          break;
        v12 = *(_QWORD *)(v1 + 24);
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (v12)
          v14 = v13 >= 0x1C;
        else
          v14 = 0;
        if (v14 && v13 - 29 < 0xB)
        {
          result = 0;
          if (*(_QWORD *)(v12 + 40) != v7)
            return result;
        }
      }
      return v7;
    }
  }
  return v7;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;
  uint64_t v7;
  int v10;
  int i;
  uint64_t Successor;

  v5 = *((_QWORD *)this + 5);
  result = (uint64_t)this + 40;
  v4 = v5;
  if (v5 != result)
  {
    v6 = (llvm::Instruction *)(v4 - 24);
    if (v4)
      v7 = v4 - 24;
    else
      v7 = 0;
    if (*(unsigned __int8 *)(v7 + 16) - 29 <= 0xA)
    {
      result = llvm::Instruction::getNumSuccessors(v6);
      if ((_DWORD)result)
      {
        v10 = result;
        for (i = 0; i != v10; ++i)
        {
          Successor = llvm::Instruction::getSuccessor(v6);
          result = llvm::BasicBlock::replacePhiUsesWith(Successor, a2, a3);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::replacePhiUsesWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this + 40;
  v4 = *(_QWORD *)(this + 48);
  if (v4 != this + 40)
  {
    do
    {
      if (v4)
        this = v4 - 24;
      else
        this = 0;
      if (!v4)
        break;
      if (*(_BYTE *)(this + 16) != 83)
        break;
      this = llvm::PHINode::replaceIncomingBlockWith(this, a2, a3);
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t llvm::PHINode::replaceIncomingBlockWith(uint64_t this, const llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_DWORD *)(this + 20);
  v4 = v3 & 0x7FFFFFF;
  if ((v3 & 0x7FFFFFF) != 0)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      v7 = *(_DWORD *)(this + 20);
      if ((v7 & 0x40000000) != 0)
        v8 = *(_QWORD *)(this - 8);
      else
        v8 = this - 32 * (v7 & 0x7FFFFFF);
      v9 = *(unsigned int *)(this + 60);
      if (*(const llvm::BasicBlock **)(v8 + 32 * v9 + v5) == a2)
        *(_QWORD *)(v8 + 32 * v9 + v5) = a3;
      v5 += 8;
    }
    while (v6 != v5);
  }
  return this;
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(uint64_t a1, uint64_t a2)
{
  llvm::ValueSymbolTable *v4;

  llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((_QWORD *)(a2 + 40), (_QWORD *)(a2 + 56), a1 - 72);
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v4 = *(llvm::ValueSymbolTable **)(a1 + 32);
    if (v4)
      llvm::ValueSymbolTable::reinsertValue(v4, (uint64_t ***)a2);
  }
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *ValueName;

  llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((_QWORD *)(a2 + 40), (_QWORD *)(a2 + 56), 0);
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)a2);
      llvm::StringMapImpl::RemoveKey(v4, (uint64_t *)((char *)ValueName + *(unsigned int *)(v4 + 20)), *ValueName);
    }
  }
}

llvm::BasicBlock *llvm::ilist_alloc_traits<llvm::BasicBlock>::deleteNode(llvm::BasicBlock *result, llvm::Value *a2)
{
  if (result)
  {
    llvm::BasicBlock::~BasicBlock(result, a2);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = (llvm::Value *)(a2 - 24);
  else
    v3 = 0;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(a1, v3);
  v4 = *((_QWORD *)v3 + 3);
  v5 = (_QWORD *)*((_QWORD *)v3 + 4);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *((_QWORD *)v3 + 3) = 0;
  *((_QWORD *)v3 + 4) = 0;
  llvm::Value::deleteValue(v3);
  return v2;
}

uint64_t llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::ErlangGC>::CtorFn@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_251C1E7F8;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 34) = 257;
  *a1 = result;
  return result;
}

void `anonymous namespace'::ErlangGC::~ErlangGC(void **this)
{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::GCStrategy::isGCManagedPointer()
{
  return 0;
}

void llvm::GCStrategy::~GCStrategy(void **this)
{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::OcamlGC>::CtorFn@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_251C1E820;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 34) = 257;
  *a1 = result;
  return result;
}

void `anonymous namespace'::OcamlGC::~OcamlGC(void **this)
{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

double llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::ShadowStackGC>::CtorFn@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = off_251C1E848;
  *a1 = v2;
  return result;
}

void `anonymous namespace'::ShadowStackGC::~ShadowStackGC(void **this)
{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

double llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::StatepointGC>::CtorFn@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_251C1E870;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(v2 + 32) = 257;
  *a1 = v2;
  return result;
}

void `anonymous namespace'::StatepointGC::~StatepointGC(void **this)
{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::StatepointGC::isGCManagedPointer(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

double llvm::Registry<llvm::GCStrategy>::Add<`anonymous namespace'::CoreCLRGC>::CtorFn@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_251C1E898;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)&result = 257;
  *(_DWORD *)(v2 + 32) = 257;
  *a1 = v2;
  return result;
}

void `anonymous namespace'::CoreCLRGC::~CoreCLRGC(void **this)
{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C1E8C0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::CoreCLRGC::isGCManagedPointer(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

void _GLOBAL__sub_I_BuiltinGCs_cpp()
{
  _QWORD *v0;

  _MergedGlobals_29 = (uint64_t)"erlang";
  *(_QWORD *)algn_257963E58 = 6;
  qword_257963E80 = (uint64_t)&_MergedGlobals_29;
  v0 = (_QWORD *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail)
    v0 = &llvm::Registry<llvm::GCStrategy>::Head;
  qword_257963E60 = (uint64_t)"erlang-compatible garbage collector";
  *v0 = &qword_257963E78;
  qword_257963E88 = (uint64_t)"ocaml";
  qword_257963E68 = 35;
  qword_257963E90 = 5;
  unk_257963E98 = "ocaml 3.10-compatible GC";
  qword_257963EA0 = 24;
  qword_257963EB8 = (uint64_t)&qword_257963E88;
  qword_257963EB0 = (uint64_t)&qword_257963EE8;
  qword_257963E78 = (uint64_t)&qword_257963EB0;
  qword_257963EC0 = (uint64_t)"shadow-stack";
  qword_257963EC8 = 12;
  unk_257963ED0 = "Very portable GC for uncooperative code generators";
  qword_257963EF8 = (uint64_t)"statepoint-example";
  qword_257963ED8 = 50;
  qword_257963F00 = 18;
  unk_257963F08 = "an example strategy for statepoint";
  qword_257963F10 = 34;
  qword_257963F28 = (uint64_t)&qword_257963EF8;
  qword_257963F30 = (uint64_t)"coreclr";
  qword_257963EE8 = (uint64_t)&qword_257963F20;
  unk_257963EF0 = &qword_257963EC0;
  qword_257963F38 = 7;
  unk_257963F40 = "CoreCLR-compatible GC";
  qword_257963F48 = 21;
  qword_257963F58 = 0;
  qword_257963F60 = (uint64_t)&qword_257963F30;
  qword_257963F20 = &qword_257963F58;
  llvm::Registry<llvm::GCStrategy>::Tail = (uint64_t)&qword_257963F58;
}

void llvm::ConstantFoldCastInstruction(llvm *this, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  int v5;
  int v6;
  llvm::Type *v8;
  int v9;
  int v10;
  int v11;
  int isEliminableCastPair;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Cast;
  llvm::Constant *v17;
  llvm::Type *v18;
  llvm::Type *v19;
  llvm::ConstantInt *v20;
  llvm::Constant *v21;
  llvm::Type *v22;
  uint64_t v23;
  uint64_t ****v24;
  llvm::Type *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t v31;
  _QWORD v32[92];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 12)
  {
    llvm::PoisonValue::get(a3, (llvm::Type *)a2);
    return;
  }
  v6 = (int)this;
  if ((v5 - 11) > 1)
  {
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
    {
      v9 = *((unsigned __int8 *)a3 + 8);
      if (v9 != 10 && v6 != 50 && v9 != 11)
        goto LABEL_6;
    }
    v10 = *(unsigned __int8 *)(a2 + 16);
    if (v10 == 5)
    {
      v11 = *(unsigned __int16 *)(a2 + 18);
      if ((v11 - 38) > 0xC)
      {
        if (v6 != 50
          && v11 == 34
          && *(unsigned __int8 *)(a2 + 17) <= 3u
          && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
        {
          v26 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
          v27 = v26 - 1;
          if (v26 == 1)
          {
            v28 = 1;
LABEL_44:
            llvm::ConstantExpr::getPointerCast(*(llvm::ConstantExpr **)(a2 - 32 * v28), a3, v8);
            return;
          }
          v29 = a2 + 32;
          while ((llvm::Constant::isNullValue(*(llvm::Constant **)(v29 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) & 1) != 0)
          {
            v29 += 32;
            if (!--v27)
            {
              v28 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
              goto LABEL_44;
            }
          }
        }
      }
      else
      {
        isEliminableCastPair = llvm::CastInst::isEliminableCastPair(v11, v6, **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(_QWORD *)a2, (uint64_t)a3);
        if (isEliminableCastPair)
        {
          llvm::ConstantExpr::getCast(isEliminableCastPair);
          return;
        }
      }
      v10 = *(unsigned __int8 *)(a2 + 16);
    }
    v13 = v10 == 15 || v10 == 10;
    if (!v13 || (*((_DWORD *)a3 + 2) & 0xFE) != 0x12 || *((_DWORD *)a3 + 8) != *(_DWORD *)(*(_QWORD *)a2 + 32))
      __asm { BR              X11 }
    if (llvm::Constant::getSplatValue((llvm::Constant *)a2, 0))
    {
      v14 = *((unsigned int *)a3 + 8);
      v15 = *((unsigned __int8 *)a3 + 8) == 19;
      Cast = llvm::ConstantExpr::getCast(v6);
      llvm::ConstantVector::getSplat((llvm::Type *)(v14 | (v15 << 32)), Cast, v17);
    }
    else
    {
      v30 = (uint64_t ****)v32;
      v31 = 0x1000000000;
      v18 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a2 + 32);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = (llvm::ConstantInt *)(***(_QWORD ***)a2 + 1992);
        do
        {
          v21 = (llvm::Constant *)llvm::ConstantInt::get(v20, v19, 0);
          llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v21, 0, v22);
          v23 = llvm::ConstantExpr::getCast(v6);
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v30, v23);
          v19 = (llvm::Type *)((char *)v19 + 1);
        }
        while (v18 != v19);
        v24 = v30;
        v25 = (llvm::Type *)v31;
      }
      else
      {
        v25 = 0;
        v24 = (uint64_t ****)v32;
      }
      llvm::ConstantVector::get(v24, v25);
      if (v30 != v32)
        free(v30);
    }
    return;
  }
  if (this <= 0x2C && ((1 << (char)this) & 0x198000000000) != 0)
  {
LABEL_6:
    llvm::Constant::getNullValue((uint64_t)a3);
    return;
  }
  llvm::UndefValue::get(a3, (llvm::Type *)a2);
}

void ExtractConstantBytes(llvm::ConstantInt **a1, unsigned int a2, unsigned int a3)
{
  llvm::Type *v6;
  unsigned int v7;
  llvm::LLVMContext *v8;
  unsigned int v9;
  unsigned int v10;
  llvm::Constant *v11;
  int v12;
  llvm::ConstantInt ***v13;
  llvm::ConstantInt *v14;
  unsigned int v15;
  unsigned int v16;
  llvm::Constant *v18;
  llvm::Type *v19;
  llvm::ConstantInt *v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  llvm::ConstantInt *v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  llvm::Constant *ConstantBytes;
  llvm::Constant *v36;
  uint64_t v37;
  llvm::Type *v38;
  llvm::Constant *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  llvm::Constant *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  int v56;
  _QWORD *v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;

  v6 = (llvm::Type *)(8 * a2);
  v7 = v6;
  v8 = (llvm::LLVMContext *)(8 * a3);
  v9 = a3 + a2;
  v10 = 8 * (a3 + a2);
  while (1)
  {
    v11 = (llvm::Constant *)a1;
    v12 = *((unsigned __int8 *)a1 + 16);
    if (v12 != 5)
      break;
    if (*((_WORD *)a1 + 9) != 39)
    {
      switch(*((_WORD *)a1 + 9))
      {
        case 0x19:
          v20 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4];
          if (v20)
            v21 = *((_BYTE *)v20 + 16) == 16;
          else
            v21 = 0;
          if (!v21)
            return;
          v22 = *((unsigned int *)v20 + 8);
          v60 = v22;
          if (v22 > 0x40)
          {
            v25 = (_QWORD *)operator new[]();
            v59 = (unint64_t)v25;
            memcpy(v25, *((const void **)v20 + 3), ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
            v47 = (_QWORD *)operator new[]();
            memcpy(v47, v25, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
            v48 = *v47 & 7;
            *v47 = v48;
            bzero(v47 + 1, (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
            v58 = v22;
            v57 = v47;
            if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v57) >= 0x41)
              goto LABEL_72;
            MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
            if (v48)
              goto LABEL_88;
            llvm::APInt::tcShiftRight((llvm::APInt *)v25, (unint64_t *)((unint64_t)(v22 + 63) >> 6), 3u);
            if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v59) > 0x40)
              goto LABEL_81;
            v26 = *v25;
            if (*v25 >= (unint64_t)v9)
              goto LABEL_81;
          }
          else
          {
            v23 = *((_QWORD *)v20 + 3);
            if ((v23 & 7) != 0)
              return;
            v24 = (_QWORD *)(v23 >> 3);
            if ((_DWORD)v22 == 3)
              v25 = 0;
            else
              v25 = v24;
            v26 = (unint64_t)v25;
            if ((unint64_t)v25 >= v9)
              goto LABEL_81;
          }
          if (v26 > a2)
            goto LABEL_84;
          v49 = (llvm::Constant *)*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
          v50 = a2 - v26;
          goto LABEL_83;
        case 0x1A:
          v29 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4];
          if (v29)
            v30 = *((_BYTE *)v29 + 16) == 16;
          else
            v30 = 0;
          if (!v30)
            return;
          v31 = *(_DWORD *)(*(_QWORD *)v11 + 8) >> 11;
          v22 = *((unsigned int *)v29 + 8);
          v60 = v22;
          if (v22 > 0x40)
          {
            v56 = v31;
            v25 = (_QWORD *)operator new[]();
            v59 = (unint64_t)v25;
            memcpy(v25, *((const void **)v29 + 3), ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
            v47 = (_QWORD *)operator new[]();
            memcpy(v47, v25, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
            v51 = *v47 & 7;
            *v47 = v51;
            bzero(v47 + 1, (((unint64_t)(v22 + 63) >> 3) - 8) & 0xFFFFFFF8);
            v58 = v22;
            v57 = v47;
            if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v57) >= 0x41)
            {
LABEL_72:
              MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
              goto LABEL_88;
            }
            MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
            if (v51)
              goto LABEL_88;
            llvm::APInt::tcShiftRight((llvm::APInt *)v25, (unint64_t *)((unint64_t)(v22 + 63) >> 6), 3u);
            if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v59) > 0x40)
              goto LABEL_81;
            v31 = v56;
            v34 = *v25;
            if (*v25 >= (unint64_t)(v56 - a2))
              goto LABEL_81;
          }
          else
          {
            v32 = *((_QWORD *)v29 + 3);
            if ((v32 & 7) != 0)
              return;
            v33 = (_QWORD *)(v32 >> 3);
            if ((_DWORD)v22 == 3)
              v25 = 0;
            else
              v25 = v33;
            v34 = (unint64_t)v25;
            if ((unint64_t)v25 >= v31 - a2)
            {
LABEL_81:
              v54 = llvm::IntegerType::get(**(llvm::IntegerType ***)v11, v8);
              llvm::Constant::getNullValue((uint64_t)v54);
              goto LABEL_84;
            }
          }
          if (v34 <= v31 - v9)
          {
            v49 = (llvm::Constant *)*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
            v50 = v34 + a2;
LABEL_83:
            ExtractConstantBytes(v49, v50, a3);
          }
LABEL_84:
          if (v22 >= 0x41 && v25 != 0)
            goto LABEL_88;
          return;
        case 0x1C:
          ConstantBytes = (llvm::Constant *)ExtractConstantBytes(a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4], a2, a3);
          v36 = ConstantBytes;
          if (!ConstantBytes)
            return;
          if ((llvm::Constant::isNullValue(ConstantBytes) & 1) != 0)
            return;
          v37 = ExtractConstantBytes(*((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)), a2, a3);
          if (!v37)
            return;
          v39 = (llvm::Constant *)v37;
          v40 = 28;
          goto LABEL_55;
        case 0x1D:
          v41 = ExtractConstantBytes(a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4], a2, a3);
          v36 = (llvm::Constant *)v41;
          if (!v41 || *(_BYTE *)(v41 + 16) == 16 && llvm::APInt::isAllOnes((llvm::APInt *)(v41 + 24)))
            return;
          v42 = ExtractConstantBytes(*((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)), a2, a3);
          if (!v42)
            return;
          v39 = (llvm::Constant *)v42;
          v40 = 29;
LABEL_55:
          llvm::ConstantExpr::get((llvm::ConstantExpr *)v40, v39, v36, 0, 0, v38);
          return;
        default:
          return;
      }
    }
    v13 = (llvm::ConstantInt ***)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    a1 = *v13;
    v14 = **v13;
    v15 = *((_DWORD *)v14 + 2);
    if (v6 >= v15 >> 8)
    {
      v43 = llvm::IntegerType::get(**(llvm::IntegerType ***)v11, (llvm::LLVMContext *)(8 * a3));
      llvm::Constant::getNullValue((uint64_t)v43);
      return;
    }
    v16 = v15 >> 8;
    if (!a2 && (_DWORD)v8 == v16)
      return;
    if ((v15 & 0x700) != 0 || v10 > v16)
    {
      if (v10 < v16)
      {
        if (a2)
        {
          v18 = (llvm::Constant *)llvm::ConstantInt::get(v14, v6, 0);
          llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1A, (llvm::Constant *)a1, v18, 0, 0, v19);
        }
        llvm::IntegerType::get(**(llvm::IntegerType ***)v11, v8);
        getFoldedCast(38);
      }
      return;
    }
  }
  if (v12 == 16)
  {
    v27 = *((unsigned int *)a1 + 8);
    v60 = v27;
    if (v27 > 0x40)
    {
      v44 = v27 + 63;
      v45 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
      v46 = (void *)operator new[]();
      memcpy(v46, *((const void **)v11 + 3), v45);
      v59 = (unint64_t)v46;
      if (a2)
        llvm::APInt::tcShiftRight((llvm::APInt *)v46, (unint64_t *)(v44 >> 6), v7);
    }
    else
    {
      v28 = (unint64_t)a1[3];
      v59 = v28;
      if (a2)
      {
        if ((_DWORD)v27 == (_DWORD)v6)
          v59 = 0;
        else
          v59 = v28 >> (char)v6;
      }
    }
    llvm::APInt::trunc((llvm::APInt *)&v59, v8, (llvm::APInt *)&v57);
    if (v60 >= 0x41 && v59)
      MEMORY[0x24BD1B380](v59, 0x1000C8000313F17);
    v59 = (unint64_t)v57;
    v60 = v58;
    llvm::ConstantInt::get(**(llvm::IntegerType ***)v11, (llvm::APInt *)&v59, v52, v53);
    if (v60 >= 0x41)
    {
      if (v59)
LABEL_88:
        MEMORY[0x24BD1B380]();
    }
  }
}

uint64_t ***FoldBitCast(uint64_t ***a1, llvm::Type *a2)
{
  uint64_t **v3;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  llvm::Type **ElementPtr;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  llvm::Type *v15;
  uint64_t v16;
  unsigned int v17;
  llvm::IntegerType *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t v23;
  _QWORD *SplatValue;
  llvm::Constant *v25;
  uint64_t FoldedCast;
  llvm::Type *v27;
  llvm::Type *v29;
  llvm::ConstantInt *v30;
  llvm::Constant *v31;
  llvm::Type *v32;
  _QWORD *Element;
  uint64_t ****v34;
  llvm::Type *v35;
  uint64_t ***v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x24BDAC8D0];
  v36 = a1;
  v3 = *a1;
  if (*a1 == (uint64_t **)a2)
    return a1;
  if (v3)
    v5 = *((_DWORD *)v3 + 2) == 15;
  else
    v5 = 0;
  if (v5)
  {
    v6 = (*((_DWORD *)a2 + 2) ^ *((_DWORD *)v3 + 2)) > 0xFF || a2 == 0;
    v7 = !v6 && *((_DWORD *)a2 + 2) == 15;
    if (v7 && v3[3] && *((_QWORD *)a2 + 3) && llvm::Type::isSized(*v3[2], 0))
    {
      v37 = v39;
      v38 = 0x800000000;
      llvm::Constant::getNullValue(**(_QWORD **)a2 + 1992);
      ElementPtr = (llvm::Type **)v8;
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v37, v8);
      v10 = *v3[2];
      if (v10)
      {
        while (1)
        {
          if (v10 == **((_QWORD **)a2 + 2))
            goto LABEL_29;
          v11 = *(_DWORD *)(v10 + 8);
          if (v11 == 17)
            goto LABEL_25;
          if (v11 != 16)
            break;
          if (!*(_DWORD *)(v10 + 12))
            goto LABEL_28;
          v12 = *(uint64_t **)(v10 + 16);
LABEL_26:
          v10 = *v12;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v37, (uint64_t)ElementPtr);
          if (!v10)
            goto LABEL_29;
        }
        if ((v11 & 0xFE) != 0x12)
        {
LABEL_28:
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v37, (uint64_t)ElementPtr);
          v10 = 0;
          goto LABEL_29;
        }
LABEL_25:
        v12 = (uint64_t *)(v10 + 24);
        goto LABEL_26;
      }
LABEL_29:
      v13 = **((_QWORD **)a2 + 2);
      if (v10 == v13)
        ElementPtr = (llvm::Type **)llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)*v3[2], (uint64_t *)a1, (llvm::Value *)v37, v38, 1, 0, 0);
      if (v37 != v39)
        free(v37);
      if (v10 == v13)
        return (uint64_t ***)ElementPtr;
    }
  }
  if (!a2 || (*((_DWORD *)a2 + 2) & 0xFE) != 0x12)
  {
    v14 = *((unsigned __int8 *)a1 + 16);
LABEL_42:
    v17 = *((_DWORD *)a2 + 2);
    if (v14 != 16)
    {
      if (v14 == 17)
      {
        ElementPtr = 0;
        if (v17 == 13 && *((_BYTE *)*a1 + 8) != 6)
        {
          v18 = (llvm::IntegerType *)**a1;
          llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v37, (llvm::APFloat *)(a1 + 3));
          ElementPtr = (llvm::Type **)llvm::ConstantInt::get(v18, (llvm::APInt *)&v37, v19, v20);
          if (v38 >= 0x41)
          {
            if (v37)
              MEMORY[0x24BD1B380](v37, 0x1000C8000313F17);
          }
        }
        return (uint64_t ***)ElementPtr;
      }
      if (v14 == 19)
        return (uint64_t ***)llvm::ConstantPointerNull::get((uint64_t)a2);
      return 0;
    }
    if (v17 != 13)
    {
      if (v17 < 4 || v17 == 5 || (ElementPtr = 0, (v17 & 0xFFFFFFFD) == 4) && v17 != 6)
      {
        v21 = *(_QWORD *)a2;
        llvm::APFloat::Storage::Storage<llvm::APInt const&>((llvm::detail::IEEEFloat *)&v38, *(&off_251C1E8D8 + (char)v17), (const llvm::APInt **)a1 + 3);
        ElementPtr = (llvm::Type **)llvm::ConstantFP::get(v21, (uint64_t)&v37);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v38);
      }
      return (uint64_t ***)ElementPtr;
    }
    return a1;
  }
  v14 = *((unsigned __int8 *)a1 + 16);
  if (*a1 && ((_DWORD)(*a1)[1] & 0xFE) == 0x12)
  {
    if (v14 == 13)
      goto LABEL_59;
    if (llvm::Constant::isAllOnesValue((llvm::Constant *)a1))
      return (uint64_t ***)llvm::Constant::getAllOnesValue(a2, v15);
    if (llvm::Constant::isNullValue((llvm::Constant *)a1))
    {
LABEL_59:
      llvm::Constant::getNullValue((uint64_t)a2);
      return (uint64_t ***)v16;
    }
    if (*((_BYTE *)a2 + 8) != 19)
    {
      v22 = (llvm::Type *)*((unsigned int *)a2 + 8);
      if ((_DWORD)v22 == *((_DWORD *)*a1 + 8))
      {
        v23 = *((_QWORD *)a2 + 3);
        SplatValue = (_QWORD *)llvm::Constant::getSplatValue((llvm::Constant *)a1, 0);
        if (SplatValue)
        {
          FoldedCast = (uint64_t)SplatValue;
          v27 = (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_BYTE *)a2 + 8) == 19) << 32));
          if (*SplatValue != v23)
            FoldedCast = getFoldedCast(49);
          return (uint64_t ***)llvm::ConstantVector::getSplat(v27, FoldedCast, v25);
        }
        v37 = v39;
        v38 = 0x1000000000;
        if ((_DWORD)v22)
        {
          v29 = 0;
          v30 = (llvm::ConstantInt *)(***a1 + 1992);
          do
          {
            v31 = (llvm::Constant *)llvm::ConstantInt::get(v30, v29, 0);
            Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a1, v31, 0, v32);
            if (*Element != v23)
              Element = (_QWORD *)getFoldedCast(49);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v37, (uint64_t)Element);
            v29 = (llvm::Type *)((char *)v29 + 1);
          }
          while (v22 != v29);
          v34 = (uint64_t ****)v37;
          v35 = (llvm::Type *)v38;
        }
        else
        {
          v35 = 0;
          v34 = (uint64_t ****)v39;
        }
        ElementPtr = (llvm::Type **)llvm::ConstantVector::get(v34, v35);
        if (v37 != v39)
          free(v37);
        return (uint64_t ***)ElementPtr;
      }
    }
    return 0;
  }
  if ((v14 & 0xFE) != 0x10)
    goto LABEL_42;
  ElementPtr = (llvm::Type **)llvm::ConstantVector::get(&v36, (llvm::Type *)1);
  if (*ElementPtr != a2)
    return (uint64_t ***)getFoldedCast(49);
  return (uint64_t ***)ElementPtr;
}

llvm::Constant *llvm::ConstantFoldSelectInstruction(llvm *this, llvm::PoisonValue **a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::Type *v7;
  llvm::Type *v8;
  int v9;
  unsigned int *v10;
  llvm::Type *v11;
  llvm::ConstantInt *v12;
  llvm *v13;
  llvm::Constant *v14;
  llvm::Type *v15;
  llvm::PoisonValue **Element;
  llvm::Constant *v17;
  llvm::Type *v18;
  llvm::PoisonValue **v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t ****v23;
  char v24;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[18];

  v30[16] = *MEMORY[0x24BDAC8D0];
  if ((llvm::Constant::isNullValue(this) & 1) != 0)
    return a3;
  if (llvm::Constant::isAllOnesValue(this))
    return (llvm::Constant *)a2;
  v9 = *((unsigned __int8 *)this + 16);
  if (!this || v9 != 10)
  {
LABEL_29:
    if (v9 == 12)
      return (llvm::Constant *)llvm::PoisonValue::get(*a2, v8);
    if ((v9 - 11) <= 1)
    {
      if (*((unsigned __int8 *)a2 + 16) - 11 >= 2)
        return a3;
      else
        return (llvm::Constant *)a2;
    }
    if (a2 == (llvm::PoisonValue **)a3)
      return (llvm::Constant *)a2;
    v26 = *((unsigned __int8 *)a2 + 16);
    if (v26 != 12)
    {
      v27 = *((unsigned __int8 *)a3 + 16);
      if (v27 == 12)
        return (llvm::Constant *)a2;
      if ((v26 - 11) > 1)
        goto LABEL_42;
      if (!llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()((unsigned __int8 *)a3))
      {
        v27 = *((unsigned __int8 *)a3 + 16);
LABEL_42:
        if ((v27 - 11) > 1)
          return 0;
        if (llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()((unsigned __int8 *)a2))
          return (llvm::Constant *)a2;
        return 0;
      }
    }
    return a3;
  }
  v10 = *(unsigned int **)this;
  v28 = v30;
  v29 = 0x1000000000;
  v11 = (llvm::Type *)v10[8];
  if (!(_DWORD)v11)
  {
    v22 = 0;
    v23 = (uint64_t ****)v30;
LABEL_23:
    v7 = (llvm::Type *)llvm::ConstantVector::get(v23, (llvm::Type *)v22);
    v24 = 1;
    v23 = (uint64_t ****)v28;
    goto LABEL_25;
  }
  v7 = 0;
  v12 = (llvm::ConstantInt *)(**(_QWORD **)v10 + 1992);
  v13 = this;
  do
  {
    v14 = (llvm::Constant *)llvm::ConstantInt::get(v12, v7, 0);
    Element = (llvm::PoisonValue **)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v14, 0, v15);
    v17 = (llvm::Constant *)llvm::ConstantInt::get(v12, v7, 0);
    v19 = (llvm::PoisonValue **)llvm::ConstantExpr::getExtractElement(a3, v17, 0, v18);
    v20 = (unsigned __int8 *)*((_QWORD *)v13 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    v21 = v20[16];
    if (v21 == 12)
    {
      Element = (llvm::PoisonValue **)llvm::PoisonValue::get(*Element, v8);
    }
    else if (Element != v19)
    {
      if ((v21 - 11) > 1)
      {
        if (v21 != 16)
          break;
        if (llvm::Constant::isNullValue((llvm::Constant *)v20))
          Element = v19;
      }
      else if (*((unsigned __int8 *)Element + 16) - 11 >= 2)
      {
        Element = v19;
      }
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, (uint64_t)Element);
    v7 = (llvm::Type *)((char *)v7 + 1);
    v13 = (llvm *)((char *)v13 + 32);
  }
  while (v11 != v7);
  v22 = v29;
  v23 = (uint64_t ****)v28;
  if ((_DWORD)v29 == v10[8])
    goto LABEL_23;
  v24 = 0;
LABEL_25:
  if (v23 != v30)
    free(v23);
  if ((v24 & 1) == 0)
  {
    v9 = *((unsigned __int8 *)this + 16);
    goto LABEL_29;
  }
  return v7;
}

BOOL llvm::ConstantFoldSelectInstruction(llvm::Constant *,llvm::Constant *,llvm::Constant *)::$_0::operator()(unsigned __int8 *a1)
{
  unsigned int v2;
  char v4;

  v2 = a1[16];
  if (v2 < 0x14 && ((0xB1029u >> v2) & 1) != 0)
    return (0xB0009u >> v2) & 1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12
    && (containsUndefinedElement((llvm::Constant *)a1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<BOOL ()(llvm::Constant const*)>::callback_fn<llvm::Constant::containsPoisonElement(void)::$_0>, (uint64_t)&v4) & 1) == 0)
  {
    return !llvm::Constant::containsConstantExpression((llvm::Constant *)a1);
  }
  return 0;
}

uint64_t llvm::ConstantFoldExtractElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4)
{
  uint64_t v4;
  int v5;
  int v7;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  llvm *v18;
  uint64_t Element;
  uint64_t v20;
  uint64_t AggregateElement;
  uint64_t v22;
  BOOL v23;
  llvm::APInt *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  llvm::Type *v31;
  int v32;
  char *v33;
  void *v34;
  unsigned int v35;
  char v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)this;
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 12)
    return llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
  v7 = *((unsigned __int8 *)a2 + 16);
  if ((v7 - 11) <= 1)
    return llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
  if ((v5 - 11) <= 1)
    return llvm::UndefValue::get(*(llvm::UndefValue **)(v4 + 24), a2);
  if (v7 != 16)
    return 0;
  if (*(_BYTE *)(v4 + 8) != 18 || v4 == 0)
    goto LABEL_15;
  v11 = *(unsigned int *)(v4 + 32);
  v12 = (unint64_t *)((char *)a2 + 24);
  v13 = *((_DWORD *)a2 + 8);
  if (v13 >= 0x41)
  {
    if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40)
      return llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
    v12 = (unint64_t *)*v12;
  }
  if (*v12 >= v11)
    return llvm::PoisonValue::get(*(llvm::PoisonValue **)(v4 + 24), a2);
LABEL_15:
  if (v5 == 5)
  {
    v14 = *((unsigned __int16 *)this + 9);
    if (v14 == 62)
    {
      v22 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
      if (v22)
        v23 = *(_BYTE *)(v22 + 16) == 16;
      else
        v23 = 0;
      if (v23)
      {
        v27 = *(unsigned int *)(v22 + 32);
        if (v27 > 0x40)
        {
          v28 = (void *)operator new[]();
          memcpy(v28, *(const void **)(v22 + 24), ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v28 = *(void **)(v22 + 24);
        }
        LODWORD(v38) = v27;
        v37 = v28;
        BYTE4(v38) = 1;
        v29 = *((unsigned int *)a2 + 8);
        if (v29 > 0x40)
        {
          v30 = (void *)operator new[]();
          memcpy(v30, *((const void **)a2 + 3), ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v30 = (void *)*((_QWORD *)a2 + 3);
        }
        v35 = v29;
        v34 = v30;
        v36 = 1;
        v32 = llvm::APSInt::compareValues((llvm::APSInt *)&v37, (const llvm::APSInt *)&v34, a3);
        if (v35 >= 0x41 && v34)
          MEMORY[0x24BD1B380](v34, 0x1000C8000313F17);
        if (v38 >= 0x41 && v37)
          MEMORY[0x24BD1B380](v37, 0x1000C8000313F17);
        v33 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
        if (v32)
          return llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)v33, a2, 0, v31);
        else
          return *((_QWORD *)v33 + 4);
      }
    }
    else if (v14 == 34)
    {
      v37 = v39;
      v38 = 0x800000000;
      v15 = *((_DWORD *)this + 5);
      v16 = v15 & 0x7FFFFFF;
      if ((v15 & 0x7FFFFFFu) >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v16, 8);
        LODWORD(v16) = *((_DWORD *)this + 5) & 0x7FFFFFF;
      }
      if ((_DWORD)v16)
      {
        v17 = v16;
        v18 = this;
        while (1)
        {
          Element = *((_QWORD *)v18 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          if ((*(_DWORD *)(*(_QWORD *)Element + 8) & 0xFE) == 0x12)
          {
            Element = llvm::ConstantExpr::getExtractElement(*((llvm::ConstantExpr **)v18 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), a2, 0, a4);
            if (!Element)
              break;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v37, Element);
          v18 = (llvm *)((char *)v18 + 32);
          if (!--v17)
            goto LABEL_25;
        }
        AggregateElement = 0;
      }
      else
      {
LABEL_25:
        v20 = 24;
        if (*((_BYTE *)this + 16) == 62)
          v20 = 64;
        AggregateElement = llvm::ConstantExpr::getWithOperands((uint64_t)this, (uint64_t)v37, v38, *(llvm::Type **)(v4 + 24), 0, *(llvm::GetElementPtrInst **)((char *)this + v20));
      }
      if (v37 != v39)
        free(v37);
      return AggregateElement;
    }
  }
  AggregateElement = llvm::Constant::getAggregateElement(this, a2);
  if (!AggregateElement)
  {
    v24 = (llvm::Constant *)((char *)a2 + 24);
    v25 = *(unsigned int *)(v4 + 32);
    v26 = *((_DWORD *)a2 + 8);
    if (v26 < 0x41)
    {
LABEL_36:
      if (*(_QWORD *)v24 < v25)
      {
        AggregateElement = llvm::Constant::getSplatValue(this, 0);
        if (AggregateElement)
          return AggregateElement;
      }
      return 0;
    }
    if (v26 - llvm::APInt::countLeadingZerosSlowCase(v24) <= 0x40)
    {
      v24 = *(llvm::APInt **)v24;
      goto LABEL_36;
    }
    return 0;
  }
  return AggregateElement;
}

llvm::ConstantExpr *llvm::ConstantFoldInsertElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ConstantExpr *v4;
  int v5;
  llvm::PoisonValue *v6;
  unsigned int *v10;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  llvm::Constant *Element;
  llvm::Constant *v19;
  llvm::Type *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[17];

  v4 = this;
  v23[16] = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned __int8 *)a3 + 16);
  if ((v5 - 11) <= 1)
  {
    v6 = *(llvm::PoisonValue **)this;
    return (llvm::ConstantExpr *)llvm::PoisonValue::get(v6, a2);
  }
  if (*((_BYTE *)this + 16) != 13)
  {
LABEL_7:
    if (v5 != 16)
      return 0;
    v10 = *(unsigned int **)v4;
    if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 19)
      return 0;
    v11 = v10[8];
    v12 = (unint64_t *)((char *)a3 + 24);
    v13 = *((_DWORD *)a3 + 8);
    v14 = (unint64_t *)((char *)a3 + 24);
    if (v13 >= 0x41)
    {
      if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) > 0x40)
        goto LABEL_26;
      v14 = (unint64_t *)*v12;
    }
    if (*v14 < v11)
    {
      v21 = v23;
      v22 = 0x1000000000;
      if (v11 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v11, 8);
        v10 = *(unsigned int **)v4;
        v13 = *((_DWORD *)a3 + 8);
      }
      if (v13 >= 0x41)
        v12 = (unint64_t *)*v12;
      if ((_DWORD)v11)
      {
        v15 = 0;
        v16 = **(_QWORD **)v10 + 1992;
        v17 = (unint64_t *)*v12;
        do
        {
          Element = a2;
          if (v17 != (unint64_t *)v15)
          {
            v19 = (llvm::Constant *)llvm::ConstantInt::get(v16, v15, 0);
            Element = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(v4, v19, 0, v20);
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v21, (uint64_t)Element);
          ++v15;
        }
        while (v11 != v15);
      }
      v4 = (llvm::ConstantExpr *)llvm::ConstantVector::get((uint64_t ****)v21, (llvm::Type *)v22);
      if (v21 != v23)
        free(v21);
      return v4;
    }
LABEL_26:
    v6 = (llvm::PoisonValue *)v10;
    return (llvm::ConstantExpr *)llvm::PoisonValue::get(v6, a2);
  }
  if ((llvm::Constant::isNullValue(a2) & 1) == 0)
  {
    v5 = *((unsigned __int8 *)a3 + 16);
    goto LABEL_7;
  }
  return v4;
}

uint64_t llvm::ConstantFoldShuffleVectorInstruction(llvm::ConstantExpr *a1, llvm::ConstantExpr *a2, int *a3, _BOOL8 a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t **v7;
  int *v8;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  llvm::UndefValue *v14;
  llvm::Type *v15;
  _DWORD *v17;
  llvm::Constant *v18;
  llvm::Type *v19;
  llvm::Constant *Element;
  uint64_t v21;
  llvm::ConstantAggregateZero *v22;
  llvm::Type *v23;
  _QWORD *v24;
  unsigned int v25;
  llvm::Type *v26;
  llvm::Type *v27;
  llvm::Constant *v28;
  llvm::Type *v29;
  llvm::ConstantExpr *v30;
  uint64_t v31;
  uint64_t ****v32;
  llvm::Type *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[33];

  LODWORD(v4) = a4;
  v36[32] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  v7 = *(uint64_t ***)(*(_QWORD *)a1 + 24);
  if (a4)
  {
    v8 = a3;
    v11 = 4 * a4;
    v12 = 4 * a4;
    v13 = a3;
    while (*v13 == -1)
    {
      ++v13;
      v12 -= 4;
      if (!v12)
        goto LABEL_5;
    }
    v17 = a3;
    while (!*v17)
    {
      ++v17;
      v11 -= 4;
      if (!v11)
      {
        v18 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(_QWORD **)v5 + 1992), 0, 0, a4);
        Element = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(a1, v18, 0, v19);
        if (llvm::Constant::isNullValue(Element))
        {
          llvm::VectorType::get(v7, (llvm::Type *)(v4 | ((unint64_t)(v6 == 19) << 32)));
          return llvm::ConstantAggregateZero::get(v22, v23);
        }
        if (v6 != 19)
          return llvm::ConstantVector::getSplat(v4, Element, v21);
        v6 = *(unsigned __int8 *)(v5 + 8);
        break;
      }
    }
    if (v6 == 19)
      return 0;
    v25 = *(_DWORD *)(v5 + 32);
    v34 = v36;
    v35 = 0x2000000000;
    v4 = v4;
    if ((_DWORD)v4)
    {
      do
      {
        v27 = (llvm::Type *)*v8++;
        v26 = v27;
        if ((_DWORD)v27 == -1 || v26 >= 2 * v25)
        {
          v31 = llvm::UndefValue::get((llvm::UndefValue *)v7, v26);
        }
        else
        {
          if (v26 >= v25)
          {
            v28 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)a2 + 1992), (llvm::Type *)(v26 - v25), 0, a4);
            v30 = a2;
          }
          else
          {
            v28 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)a1 + 1992), v26, 0, a4);
            v30 = a1;
          }
          v31 = llvm::ConstantExpr::getExtractElement(v30, v28, 0, v29);
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v34, v31);
        --v4;
      }
      while (v4);
      v32 = (uint64_t ****)v34;
      v33 = (llvm::Type *)v35;
    }
    else
    {
      v33 = 0;
      v32 = (uint64_t ****)v36;
    }
    v24 = llvm::ConstantVector::get(v32, v33);
    if (v34 != v36)
      free(v34);
    return (uint64_t)v24;
  }
  else
  {
LABEL_5:
    llvm::VectorType::get(*(uint64_t ***)(*(_QWORD *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(v6 == 19) << 32)));
    return llvm::UndefValue::get(v14, v15);
  }
}

void *llvm::ConstantFoldInsertValueInstruction(llvm::Constant *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  llvm::Type *v11;
  uint64_t v12;
  uint64_t AggregateElement;
  uint64_t inserted;
  llvm::Type *v15;
  unint64_t *v16;
  void *v17;
  void *v19;
  uint64_t v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v7 = *(_QWORD *)a1;
    v8 = *(unsigned __int8 *)(v7 + 8);
    if (v7)
      v9 = v8 == 16;
    else
      v9 = 0;
    if (v9)
      v10 = *(_DWORD *)(v7 + 12);
    else
      v10 = *(_DWORD *)(v7 + 32);
    v19 = v21;
    v20 = 0x2000000000;
    if (v10)
    {
      v11 = 0;
      v12 = a4 - 1;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement(a1, v11);
        if (!AggregateElement)
          break;
        inserted = AggregateElement;
        if ((_DWORD)v11 == *a3)
          inserted = llvm::ConstantFoldInsertValueInstruction(AggregateElement, a2, a3 + 1, v12);
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v19, inserted);
        v11 = (llvm::Type *)((_DWORD)v11 + 1);
        if (v10 == (_DWORD)v11)
        {
          v7 = *(_QWORD *)a1;
          v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
          v15 = (llvm::Type *)v19;
          v16 = (unint64_t *)v20;
          goto LABEL_16;
        }
      }
      a2 = 0;
    }
    else
    {
      v16 = 0;
      v15 = (llvm::Type *)v21;
LABEL_16:
      if (v8 == 16)
        v17 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)v7, v15, v16);
      else
        v17 = llvm::ConstantArray::get((llvm::PoisonValue *)v7, v15, v16);
      a2 = v17;
    }
    if (v19 != v21)
      free(v19);
  }
  return a2;
}

llvm::ConstantExpr *llvm::ConstantFoldUnaryInstruction(llvm *this, unsigned __int8 *a2, llvm::Constant *a3)
{
  llvm::ConstantExpr *v3;
  uint64_t **v5;
  int v6;
  _BOOL4 v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t SplatValue;
  llvm::Constant *v13;
  uint64_t v14;
  llvm::Constant *v15;
  llvm::Type *v17;
  llvm::Type *v18;
  llvm::ConstantInt *v19;
  llvm::Constant *v20;
  llvm::Type *v21;
  unsigned int Element;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t ****v25;
  llvm::Type *v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[16];
  _BYTE v30[8];
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = (llvm::ConstantExpr *)a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t ***)a2;
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12 || v6 == 19)
  {
    v9 = a2[16];
    v8 = (_DWORD)this == 12;
    if ((_DWORD)this == 12 && (v9 - 11) < 2)
      return v3;
  }
  else
  {
    v8 = (_DWORD)this == 12;
    v9 = a2[16];
  }
  if (v9 == 17)
  {
    if (v8)
    {
      v10 = *v5;
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v31, (const llvm::APFloat::Storage *)(a2 + 32));
      llvm::APFloat::changeSign((uint64_t)v30);
      if (v31 == &llvm::semPPCDoubleDouble)
      {
        v28 = (uint64_t)&llvm::semPPCDoubleDouble;
        v29[0] = v32;
        v31 = &llvm::semBogus;
        v32 = 0;
      }
      else
      {
        v28 = (uint64_t)&llvm::semBogus;
        llvm::detail::IEEEFloat::operator=((uint64_t)&v28, (uint64_t)&v31);
      }
      v3 = (llvm::ConstantExpr *)llvm::ConstantFP::get((uint64_t)v10, (uint64_t)&v27);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v28);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v31);
      return v3;
    }
    return 0;
  }
  if (v6 != 18)
    return 0;
  v11 = **v5;
  SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
  if (SplatValue)
  {
    v14 = llvm::ConstantFoldUnaryInstruction(this, SplatValue, v13);
    if (v14)
      return (llvm::ConstantExpr *)llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v5 + 8) | ((unint64_t)(*((_BYTE *)v5 + 8) == 19) << 32)), v14, v15);
  }
  v27 = v29;
  v28 = 0x1000000000;
  v17 = (llvm::Type *)*((unsigned int *)v5 + 8);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = (llvm::ConstantInt *)(v11 + 1992);
    while (1)
    {
      v20 = (llvm::Constant *)llvm::ConstantInt::get(v19, v18, 0);
      Element = llvm::ConstantExpr::getExtractElement(v3, v20, 0, v21);
      v24 = llvm::ConstantFoldUnaryInstruction(this, Element, v23);
      if (!v24)
        break;
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v27, v24);
      v18 = (llvm::Type *)((char *)v18 + 1);
      if (v17 == v18)
      {
        v25 = (uint64_t ****)v27;
        v26 = (llvm::Type *)v28;
        goto LABEL_25;
      }
    }
    v3 = 0;
  }
  else
  {
    v26 = 0;
    v25 = (uint64_t ****)v29;
LABEL_25:
    v3 = (llvm::ConstantExpr *)llvm::ConstantVector::get(v25, v26);
  }
  if (v27 != v29)
    free(v27);
  return v3;
}

llvm::Constant *llvm::ConstantFoldBinaryInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::Constant *BinOpIdentity;
  llvm::Type *v8;
  uint64_t v9;
  unint64_t *v10;
  llvm::Type *v11;
  int v12;
  int v13;
  llvm::PoisonValue *v14;
  llvm::UndefValue *v16;
  char v18;
  char v19;
  llvm::APInt *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  llvm::Constant *v25;
  llvm::APInt *v26;
  unsigned int v27;
  uint64_t v28;
  llvm::APInt *v29;
  llvm::APInt *v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int v33;
  unsigned int v34;
  llvm::APInt *v35;
  unsigned int v36;
  int v37;
  llvm::PoisonValue *v38;
  int v39;
  int v40;
  int v41;
  llvm::APInt *v42;
  const char *v43;
  unsigned int PrimitiveSizeInBits;
  unsigned __int16 InversePredicate;
  _QWORD **v46;
  BOOL v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t NullValue;
  size_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  int v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  size_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  int v70;
  const void **v71;
  unint64_t *v72;
  llvm::IntegerType *v73;
  uint64_t v74;
  const llvm::APFloat *v75;
  llvm::ConstantFP *v76;
  llvm::Constant *SplatValue;
  llvm::Constant *v78;
  llvm::APInt *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm::Type *v84;
  llvm::Type *v85;
  llvm::ConstantInt *v86;
  llvm::Constant *v87;
  llvm::Type *v88;
  unsigned int Element;
  llvm::Type *v90;
  llvm::Constant *v91;
  llvm::Constant *v92;
  llvm::Type *v93;
  llvm::Constant *v94;
  uint64_t v95;
  llvm::Type *v96;
  uint64_t ****v97;
  llvm::Type *v98;
  uint64_t v99;
  llvm::Constant *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  llvm::IntegerType *v105;
  uint64_t v106;
  llvm::IntegerType *v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t *v116;
  llvm::IntegerType *v117;
  llvm::IntegerType *v118;
  uint64_t v119;
  void *v120;
  size_t v121;
  uint64_t v122;
  unint64_t *v123;
  void *v124;
  size_t v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  void *v140;
  unsigned int v141;
  void *v142;
  unsigned int v143;
  _QWORD v144[2];
  uint64_t v145;
  void *__src;
  uint64_t v147;
  _QWORD v148[18];

  v148[16] = *MEMORY[0x24BDAC8D0];
  BinOpIdentity = (llvm::Constant *)llvm::ConstantExpr::getBinOpIdentity(this, *(llvm::ConstantFP **)a2, 0, 0);
  if (BinOpIdentity)
  {
    if (BinOpIdentity == a2)
      return a3;
    if (BinOpIdentity == a3)
      return a2;
  }
  v12 = *((unsigned __int8 *)a2 + 16);
  if (v12 == 12 || (v13 = *((unsigned __int8 *)a3 + 16), v13 == 12))
  {
    v14 = *(llvm::PoisonValue **)a2;
    return (llvm::Constant *)llvm::PoisonValue::get(v14, v8);
  }
  v16 = *(llvm::UndefValue **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12 || *(_DWORD *)(*(_QWORD *)a2 + 8) == 19)
  {
    v18 = v12 - 11;
    v19 = v13 - 11;
    if ((v12 - 11) < 2u || (v13 - 11) <= 1u)
    {
      switch((int)this)
      {
        case 13:
        case 15:
          return (llvm::Constant *)llvm::UndefValue::get(v16, v8);
        case 14:
        case 18:
        case 21:
        case 24:
          goto LABEL_18;
        case 16:
          if (llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_neg_zero_fp,llvm::ConstantFP>::match<llvm::Constant>((uint64_t)a2)
            && *((unsigned __int8 *)a3 + 16) - 11 < 2)
          {
            return a3;
          }
LABEL_18:
          if (*((unsigned __int8 *)a2 + 16) - 11 <= 1
            && *((unsigned __int8 *)a3 + 16) - 11 < 2)
          {
            return a2;
          }
          return (llvm::Constant *)llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)a2, 0, 0);
        case 17:
          if ((v19 | v18) < 2u)
            return a2;
          v145 = 0;
          __src = &v145;
          v147 = 0;
          if ((llvm::PatternMatch::apint_match::match<llvm::Constant>((uint64_t)&__src, a2) & 1) == 0)
          {
            v144[0] = &v145;
            v144[1] = 0;
            if ((llvm::PatternMatch::apint_match::match<llvm::Constant>((uint64_t)v144, a3) & 1) == 0)
              goto LABEL_101;
          }
          v49 = (_BYTE *)v145;
          if (*(_DWORD *)(v145 + 8) >= 0x41u)
            v49 = *(_BYTE **)v145;
          if ((*v49 & 1) == 0)
            goto LABEL_101;
          return (llvm::Constant *)llvm::UndefValue::get(*(llvm::UndefValue **)a2, v8);
        case 19:
        case 20:
          if (llvm::PatternMatch::undef_match::check(a3, v8)
            || llvm::PatternMatch::is_zero::match<llvm::Constant>((uint64_t)&__src + 1, a3))
          {
            goto LABEL_72;
          }
          if ((llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_one,llvm::ConstantInt>::match<llvm::Constant>((uint64_t)&__src, a3) & 1) != 0)return a2;
          goto LABEL_101;
        case 22:
        case 23:
          if (!llvm::PatternMatch::undef_match::check(a3, v8)
            && !llvm::PatternMatch::is_zero::match<llvm::Constant>((uint64_t)&__src + 1, a3))
          {
            goto LABEL_101;
          }
LABEL_72:
          v38 = *(llvm::PoisonValue **)a3;
          return (llvm::Constant *)llvm::PoisonValue::get(v38, v8);
        case 25:
        case 26:
        case 27:
          if ((v13 - 11) <= 1u)
            goto LABEL_65;
          if ((llvm::PatternMatch::is_zero::match<llvm::Constant>((uint64_t)&__src, a3) & 1) != 0)
            return a2;
LABEL_101:
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v8);
          break;
        case 28:
          v48 = (uint64_t)a2;
          if ((v19 | v18) < 2u)
            return (llvm::Constant *)v48;
          return (llvm::Constant *)llvm::Constant::getNullValue(v16, v8);
        case 29:
          v48 = (uint64_t)a2;
          if ((v19 | v18) < 2u)
            return (llvm::Constant *)v48;
          return (llvm::Constant *)llvm::Constant::getAllOnesValue(v16, v8);
        case 30:
          if ((v19 | v18) <= 1u)
            return (llvm::Constant *)llvm::Constant::getNullValue(v16, v8);
          else
            return (llvm::Constant *)llvm::UndefValue::get(v16, v8);
        default:
          goto LABEL_21;
      }
      return (llvm::Constant *)NullValue;
    }
  }
LABEL_21:
  if (v13 == 16)
  {
    switch((int)this)
    {
      case 13:
      case 15:
        v21 = (llvm::Constant *)((char *)a3 + 24);
        v22 = *((_DWORD *)a3 + 8);
        if (v22 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v21) != v22)
            break;
        }
        else if (*(_QWORD *)v21)
        {
          break;
        }
        return a2;
      case 17:
        v30 = (llvm::Constant *)((char *)a3 + 24);
        v31 = *((_DWORD *)a3 + 8);
        if (v31 <= 0x40)
        {
          v28 = *(_QWORD *)v30;
          if (!*(_QWORD *)v30)
            return a3;
          goto LABEL_43;
        }
        v39 = llvm::APInt::countLeadingZerosSlowCase(v30);
        if (v39 == v31)
          return a3;
        if (v39 == v31 - 1)
          return a2;
        break;
      case 19:
      case 20:
        v26 = (llvm::Constant *)((char *)a3 + 24);
        v27 = *((_DWORD *)a3 + 8);
        if (v27 > 0x40)
        {
          v37 = llvm::APInt::countLeadingZerosSlowCase(v26);
          if (v37 == v27 - 1)
            return a2;
          goto LABEL_64;
        }
        v28 = *(_QWORD *)v26;
        if (!*(_QWORD *)v26)
          goto LABEL_65;
LABEL_43:
        if (v28 == 1)
          return a2;
        break;
      case 22:
      case 23:
        v29 = (llvm::Constant *)((char *)a3 + 24);
        v27 = *((_DWORD *)a3 + 8);
        if (v27 <= 0x40)
        {
          if (!*(_QWORD *)v29)
            goto LABEL_65;
          if (*(_QWORD *)v29 != 1)
            break;
LABEL_62:
          v16 = *(llvm::UndefValue **)a3;
          return (llvm::Constant *)llvm::Constant::getNullValue(v16, v8);
        }
        v37 = llvm::APInt::countLeadingZerosSlowCase(v29);
        if (v37 == v27 - 1)
          goto LABEL_62;
LABEL_64:
        if (v37 == v27)
        {
LABEL_65:
          v14 = *(llvm::PoisonValue **)a3;
          return (llvm::Constant *)llvm::PoisonValue::get(v14, v8);
        }
        break;
      case 27:
        if (v12 != 5 || *((_WORD *)a2 + 9) != 39)
          break;
        v23 = 26;
        v24 = a2;
        v25 = a3;
        return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v23, v24, v25, 0, 0, v11);
      case 28:
        v32 = (_QWORD *)((char *)a3 + 24);
        v33 = *((_DWORD *)a3 + 8);
        if (v33 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) == v33)
            return a3;
        }
        else if (!*v32)
        {
          return a3;
        }
        if (llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24)))
          return a2;
        v40 = *((unsigned __int8 *)a2 + 16);
        if (v40 != 5)
          goto LABEL_141;
        v41 = *((unsigned __int16 *)a2 + 9);
        if (v41 != 39)
          goto LABEL_116;
        v42 = (llvm::APInt *)(*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)a2
                                                                  - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
        if ((_BYTE)v43)
        llvm::APInt::getLowBitsSet(v42, PrimitiveSizeInBits, (llvm::APInt *)&__src);
        if (v147 > 0x40)
        {
          v51 = (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8;
          v52 = (char *)operator new[]();
          v53 = __src;
          memcpy(v52, __src, v51);
          v54 = 0;
          v55 = (char *)*v32;
          do
          {
            *(_QWORD *)&v52[v54] &= *(_QWORD *)&v55[v54];
            v54 += 8;
          }
          while (v51 != v54);
          v56 = memcmp(v52, v53, v51);
          MEMORY[0x24BD1B380](v52, 0x1000C8000313F17);
          if (v147 >= 0x41 && __src)
            MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
          if (!v56)
            return a2;
        }
        else if (((unint64_t)__src & ~*v32) == 0)
        {
          return a2;
        }
        v41 = *((unsigned __int16 *)a2 + 9);
LABEL_116:
        if (v41 != 47)
          break;
        v57 = (_QWORD *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v58 = *((unsigned __int8 *)v57 + 16);
        if (v58 > 3)
          break;
        v59 = v57[5];
        if (v59)
        {
          llvm::Value::getPointerAlignment(*((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (const llvm::DataLayout *)(v59 + 256));
          if (!*((_BYTE *)v57 + 16) && *(unsigned __int16 *)(v59 + 276) < 0x100u)
          {
            v60 = 2;
            goto LABEL_126;
          }
        }
        else
        {
          if (v58 != 3)
            break;
          v61 = (*((_DWORD *)v57 + 8) >> 17) & 0x3F;
          if (!v61)
            break;
          v60 = v61 - 1;
        }
        if (!v60)
          break;
LABEL_126:
        if (*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8 >= v60)
          v62 = v60;
        else
          v62 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
        llvm::APInt::getLowBitsSet((llvm::APInt *)(*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8), v62, (llvm::APInt *)&__src);
        v63 = *((unsigned int *)a3 + 8);
        if (v63 > 0x40)
        {
          v65 = ((unint64_t)(v63 + 63) >> 3) & 0x3FFFFFF8;
          v66 = (char *)operator new[]();
          v67 = (char *)*v32;
          memcpy(v66, v67, v65);
          v68 = 0;
          v69 = (char *)__src;
          do
          {
            *(_QWORD *)&v66[v68] &= *(_QWORD *)&v69[v68];
            v68 += 8;
          }
          while (v65 != v68);
          v70 = memcmp(v66, v67, v65);
          MEMORY[0x24BD1B380](v66, 0x1000C8000313F17);
          if (!v70)
            goto LABEL_131;
        }
        else if ((*v32 & ~(unint64_t)__src) == 0)
        {
LABEL_131:
          v48 = llvm::Constant::getNullValue(*(llvm::Constant **)a3, v8);
          v64 = 1;
          goto LABEL_136;
        }
        v64 = 0;
        v48 = (uint64_t)a2;
LABEL_136:
        if (v147 >= 0x41 && __src)
          MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
        if ((v64 & 1) != 0)
          return (llvm::Constant *)v48;
        break;
      case 29:
        v34 = *((_DWORD *)a3 + 8);
        if (v34 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) == v34)
            return a2;
        }
        else if (!*((_QWORD *)a3 + 3))
        {
          return a2;
        }
        if (!llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24)))
          break;
        return a3;
      case 30:
        v35 = (llvm::Constant *)((char *)a3 + 24);
        v36 = *((_DWORD *)a3 + 8);
        if (v36 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v35) == v36)
            return a2;
        }
        else if (!*(_QWORD *)v35)
        {
          return a2;
        }
        if (v12 != 5 || *((unsigned __int16 *)a2 + 9) - 53 > 1)
          break;
        InversePredicate = llvm::CmpInst::getInversePredicate(*((unsigned __int16 *)a2 + 12));
        v46 = (_QWORD **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        return (llvm::Constant *)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)InversePredicate, (unsigned __int16)*v46, (llvm::Constant *)v46[4], 0, v47);
      default:
        break;
    }
LABEL_140:
    v40 = *((unsigned __int8 *)a2 + 16);
LABEL_141:
    if (v40 == 17)
    {
      if (*((_BYTE *)a3 + 16) == 17)
      {
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v147, (llvm::Constant *)((char *)a2 + 32));
        v75 = (llvm::Constant *)((char *)a3 + 24);
        switch((int)this)
        {
          case 14:
            llvm::APFloat::add((uint64_t)&__src, (uint64_t)v75, 1);
            break;
          case 16:
            llvm::APFloat::subtract((uint64_t)&__src, (uint64_t)v75, 1);
            break;
          case 18:
            llvm::APFloat::multiply((uint64_t)&__src, (uint64_t)v75, 1);
            break;
          case 21:
            llvm::APFloat::divide((uint64_t)&__src, (uint64_t)v75, 1);
            break;
          case 24:
            llvm::APFloat::mod((llvm::APFloat *)&__src, v75);
            break;
          default:
            llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v147);
            goto LABEL_179;
        }
        v48 = llvm::ConstantFP::get(**(_QWORD **)a2, (uint64_t)&__src);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v147);
        return (llvm::Constant *)v48;
      }
    }
    else if (v40 == 16)
    {
      if (*((_BYTE *)a3 + 16) == 16)
      {
        v71 = (const void **)((char *)a2 + 24);
        v72 = (unint64_t *)((char *)a3 + 24);
        switch((int)this)
        {
          case 13:
            v73 = **(llvm::IntegerType ***)a2;
            v74 = *((unsigned int *)a2 + 8);
            v143 = v74;
            if (v74 > 0x40)
            {
              v121 = ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8;
              v142 = (void *)operator new[]();
              memcpy(v142, *v71, v121);
            }
            else
            {
              v142 = (void *)*v71;
            }
            llvm::APInt::operator+=((uint64_t)&v142, (_QWORD **)v72);
            LODWORD(v147) = v143;
            __src = v142;
            v143 = 0;
            v48 = llvm::ConstantInt::get(v73, (llvm::APInt *)&__src, v122, v123);
            if (v147 >= 0x41 && __src)
              MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
            if (v143 < 0x41)
              return (llvm::Constant *)v48;
            v124 = v142;
            if (!v142)
              return (llvm::Constant *)v48;
            goto LABEL_275;
          case 15:
            v105 = **(llvm::IntegerType ***)a2;
            v106 = *((unsigned int *)a2 + 8);
            v141 = v106;
            if (v106 > 0x40)
            {
              v125 = ((unint64_t)(v106 + 63) >> 3) & 0x3FFFFFF8;
              v140 = (void *)operator new[]();
              memcpy(v140, *v71, v125);
            }
            else
            {
              v140 = (void *)*v71;
            }
            llvm::APInt::operator-=((uint64_t)&v140, (_QWORD **)v72);
            LODWORD(v147) = v141;
            __src = v140;
            v141 = 0;
            v48 = llvm::ConstantInt::get(v105, (llvm::APInt *)&__src, v126, v127);
            if (v147 >= 0x41 && __src)
              MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
            if (v141 < 0x41)
              return (llvm::Constant *)v48;
            v124 = v140;
            if (!v140)
              return (llvm::Constant *)v48;
            goto LABEL_275;
          case 17:
            v107 = **(llvm::IntegerType ***)a2;
            llvm::APInt::operator*((uint64_t)v71, (const unint64_t ***)a3 + 3, (llvm::APInt *)&__src);
            goto LABEL_240;
          case 19:
            v107 = **(llvm::IntegerType ***)a2;
            llvm::APInt::udiv((llvm::APInt *)v71, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_240;
          case 20:
            if (llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24))
              && llvm::APInt::isMinSignedValue((llvm::Constant *)((char *)a2 + 24)))
            {
              goto LABEL_241;
            }
            v107 = **(llvm::IntegerType ***)a2;
            llvm::APInt::sdiv((llvm::APInt *)v71, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_240;
          case 22:
            v107 = **(llvm::IntegerType ***)a2;
            llvm::APInt::urem((llvm::APInt *)v71, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_240;
          case 23:
            if (llvm::APInt::isAllOnes((llvm::Constant *)((char *)a3 + 24))
              && llvm::APInt::isMinSignedValue((llvm::Constant *)((char *)a2 + 24)))
            {
              goto LABEL_241;
            }
            v107 = **(llvm::IntegerType ***)a2;
            llvm::APInt::srem((llvm::APInt *)v71, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
            goto LABEL_240;
          case 25:
            v108 = *((unsigned int *)a2 + 8);
            v109 = *((_DWORD *)a3 + 8);
            v110 = v72;
            if (v109 < 0x41)
              goto LABEL_228;
            if (v109 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v72) >= 0x41)
              goto LABEL_241;
            v110 = (unint64_t *)*v72;
LABEL_228:
            v38 = *(llvm::PoisonValue **)a2;
            if (*v110 >= v108)
              return (llvm::Constant *)llvm::PoisonValue::get(v38, v8);
            v107 = *(llvm::IntegerType **)v38;
            llvm::APInt::shl((llvm::APInt *)v71, (uint64_t ***)v72, (unsigned int *)&__src);
            goto LABEL_240;
          case 26:
            v111 = *((unsigned int *)a2 + 8);
            v112 = *((_DWORD *)a3 + 8);
            v113 = v72;
            if (v112 < 0x41)
              goto LABEL_233;
            if (v112 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v72) >= 0x41)
              goto LABEL_241;
            v113 = (unint64_t *)*v72;
LABEL_233:
            v38 = *(llvm::PoisonValue **)a2;
            if (*v113 >= v111)
              return (llvm::Constant *)llvm::PoisonValue::get(v38, v8);
            v107 = *(llvm::IntegerType **)v38;
            llvm::APInt::lshr(v71, (uint64_t ***)v72, (uint64_t)&__src);
            goto LABEL_240;
          case 27:
            v114 = *((unsigned int *)a2 + 8);
            v115 = *((_DWORD *)a3 + 8);
            v116 = v72;
            if (v115 < 0x41)
              goto LABEL_238;
            if (v115 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v72) >= 0x41)
            {
LABEL_241:
              v38 = *(llvm::PoisonValue **)a2;
              return (llvm::Constant *)llvm::PoisonValue::get(v38, v8);
            }
            v116 = (unint64_t *)*v72;
LABEL_238:
            v38 = *(llvm::PoisonValue **)a2;
            if (*v116 >= v114)
              return (llvm::Constant *)llvm::PoisonValue::get(v38, v8);
            v107 = *(llvm::IntegerType **)v38;
            llvm::APInt::ashr(v71, (uint64_t ***)v72, (uint64_t)&__src);
LABEL_240:
            v117 = v107;
LABEL_273:
            v48 = llvm::ConstantInt::get(v117, (llvm::APInt *)&__src, v9, v10);
            if (v147 >= 0x41)
            {
              v124 = __src;
              if (__src)
LABEL_275:
                MEMORY[0x24BD1B380](v124, 0x1000C8000313F17);
            }
            break;
          case 28:
            v118 = **(llvm::IntegerType ***)a2;
            v119 = *((unsigned int *)a2 + 8);
            if (v119 > 0x40)
            {
              v120 = (void *)operator new[]();
              memcpy(v120, *v71, ((unint64_t)(v119 + 63) >> 3) & 0x3FFFFFF8);
              v128 = (uint64_t *)*v72;
              v129 = (unint64_t)(v119 + 63) >> 6;
              v130 = v120;
              do
              {
                v131 = *v128++;
                *v130++ &= v131;
                --v129;
              }
              while (v129);
            }
            else
            {
              v120 = (void *)(*v72 & (unint64_t)*v71);
            }
            goto LABEL_272;
          case 29:
            v118 = **(llvm::IntegerType ***)a2;
            v119 = *((unsigned int *)a2 + 8);
            if (v119 > 0x40)
            {
              v120 = (void *)operator new[]();
              memcpy(v120, *v71, ((unint64_t)(v119 + 63) >> 3) & 0x3FFFFFF8);
              v132 = (uint64_t *)*v72;
              v133 = (unint64_t)(v119 + 63) >> 6;
              v134 = v120;
              do
              {
                v135 = *v132++;
                *v134++ |= v135;
                --v133;
              }
              while (v133);
            }
            else
            {
              v120 = (void *)(*v72 | (unint64_t)*v71);
            }
            goto LABEL_272;
          case 30:
            v118 = **(llvm::IntegerType ***)a2;
            v119 = *((unsigned int *)a2 + 8);
            if (v119 > 0x40)
            {
              v120 = (void *)operator new[]();
              memcpy(v120, *v71, ((unint64_t)(v119 + 63) >> 3) & 0x3FFFFFF8);
              v136 = (uint64_t *)*v72;
              v137 = (unint64_t)(v119 + 63) >> 6;
              v138 = v120;
              do
              {
                v139 = *v136++;
                *v138++ ^= v139;
                --v137;
              }
              while (v137);
            }
            else
            {
              v120 = (void *)(*v72 ^ (unint64_t)*v71);
            }
LABEL_272:
            LODWORD(v147) = v119;
            __src = v120;
            v117 = v118;
            goto LABEL_273;
          default:
            goto LABEL_179;
        }
        return (llvm::Constant *)v48;
      }
      if (this <= 0x1B && ((1 << (char)this) & 0xED80000) != 0)
      {
        v79 = (llvm::Constant *)((char *)a2 + 24);
        v80 = *((_DWORD *)a2 + 8);
        if (v80 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v79) == v80)
            return a2;
        }
        else if (!*(_QWORD *)v79)
        {
          return a2;
        }
      }
    }
    else
    {
      v76 = *(llvm::ConstantFP **)a2;
      if (*(_QWORD *)a2 && (*((_DWORD *)v76 + 2) & 0xFE) == 0x12)
      {
        SplatValue = (llvm::Constant *)llvm::Constant::getSplatValue(a3, 0);
        if (SplatValue)
        {
          v78 = SplatValue;
          if (this <= 0x17
            && ((1 << (char)this) & 0xD80000) != 0
            && llvm::Constant::isNullValue(SplatValue))
          {
            v38 = v76;
            return (llvm::Constant *)llvm::PoisonValue::get(v38, v8);
          }
          v81 = llvm::Constant::getSplatValue(a2, 0);
          if (v81)
          {
            if (((1 << (char)this) & 0x1FD4000) != 0)
              v82 = llvm::ConstantFoldBinaryInstruction(this, v81, v78, (llvm::Constant *)v10);
            else
              v82 = llvm::ConstantExpr::get(this, v81, v78, 0, 0, v11);
            if (!v82)
              return 0;
            return (llvm::Constant *)llvm::ConstantVector::getSplat(*((unsigned int *)v76 + 8) | ((unint64_t)(*((_BYTE *)v76 + 8) == 19) << 32), v82, v83);
          }
        }
        if (*((_BYTE *)v76 + 8) == 18)
        {
          __src = v148;
          v147 = 0x1000000000;
          v84 = (llvm::Type *)*((unsigned int *)v76 + 8);
          if ((_DWORD)v84)
          {
            v85 = 0;
            v86 = (llvm::ConstantInt *)(**(_QWORD **)v76 + 1992);
            while (1)
            {
              v87 = (llvm::Constant *)llvm::ConstantInt::get(v86, v85, 0, (BOOL)v10);
              Element = llvm::ConstantExpr::getExtractElement(a2, v87, 0, v88);
              v91 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement(a3, v87, 0, v90);
              v94 = v91;
              if (((1 << (char)this) & 0x7E02A000) != 0)
              {
                v95 = llvm::ConstantExpr::get(this, Element, v91, 0, 0, v93);
              }
              else
              {
                if (((1 << (char)this) & 0x1254000) == 0 && llvm::Constant::isNullValue(v91))
                {
                  v48 = llvm::PoisonValue::get(v76, v96);
                  goto LABEL_212;
                }
                v95 = llvm::ConstantFoldBinaryInstruction(this, Element, v94, v92);
              }
              if (!v95)
              {
                v48 = 0;
                goto LABEL_212;
              }
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, v95);
              v85 = (llvm::Type *)((char *)v85 + 1);
              if (v84 == v85)
              {
                v97 = (uint64_t ****)__src;
                v98 = (llvm::Type *)v147;
                goto LABEL_207;
              }
            }
          }
          v98 = 0;
          v97 = (uint64_t ****)v148;
LABEL_207:
          v48 = (uint64_t)llvm::ConstantVector::get(v97, v98);
LABEL_212:
          if (__src != v148)
            free(__src);
          return (llvm::Constant *)v48;
        }
      }
    }
LABEL_179:
    if (*((_BYTE *)a2 + 16) == 5)
    {
      if (this <= 0x1E
        && ((1 << (char)this) & 0x70022000) != 0
        && *((unsigned __int16 *)a2 + 9) == (_DWORD)this)
      {
        v99 = llvm::ConstantExpr::get(this, ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4], a3, 0, 0, v11);
        v100 = (llvm::Constant *)v99;
        if (*(_BYTE *)(v99 + 16) != 5 || *(unsigned __int16 *)(v99 + 18) != (_DWORD)this)
        {
          v101 = (_QWORD *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          v102 = (uint64_t)this;
          return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v102, v101, v100, 0, 0, v11);
        }
      }
      goto LABEL_190;
    }
    if (*((_BYTE *)a3 + 16) != 5 || this > 0x1E || ((1 << (char)this) & 0x70066000) == 0)
    {
LABEL_190:
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
      {
        v48 = 0;
        switch((int)this)
        {
          case 13:
          case 15:
            v102 = 30;
            goto LABEL_209;
          case 17:
            v102 = 28;
LABEL_209:
            LODWORD(v101) = (_DWORD)a2;
            v100 = a3;
            return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v102, v101, v100, 0, 0, v11);
          case 19:
          case 20:
          case 25:
          case 26:
          case 27:
            return a2;
          case 22:
          case 23:
            v103 = **(uint64_t ***)a2;
            v104 = *v103;
            v48 = *(_QWORD *)(*v103 + 1600);
            if (!v48)
            {
              v48 = llvm::ConstantInt::get(v104 + 1920, 0, 0);
              *(_QWORD *)(v104 + 1600) = v48;
            }
            return (llvm::Constant *)v48;
          default:
            return (llvm::Constant *)v48;
        }
      }
      return 0;
    }
    return (llvm::Constant *)llvm::ConstantFoldBinaryInstruction(this, a3, a2, (llvm::Constant *)v10);
  }
  if (v12 != 16 || this > 0x1E || ((1 << (char)this) & 0x70066000) == 0)
    goto LABEL_140;
  v23 = (uint64_t)this;
  v24 = a3;
  v25 = a2;
  return (llvm::Constant *)llvm::ConstantExpr::get((llvm::ConstantExpr *)v23, v24, v25, 0, 0, v11);
}

llvm::Constant *llvm::ConstantFoldCompareInstruction(int a1, unsigned __int8 *a2, unsigned __int8 *a3, BOOL a4)
{
  uint64_t **v7;
  BOOL v8;
  uint64_t **v9;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  llvm::Type *v18;
  uint64_t v19;
  llvm::Constant *Not;
  llvm::Constant *v21;
  int v22;
  unsigned int v23;
  uint64_t SplatValue;
  BOOL v25;
  unsigned __int16 v26;
  llvm::Constant *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  llvm::Type *v35;
  llvm::Type *v36;
  llvm::ConstantInt *v37;
  llvm::Constant *v38;
  llvm::Type *v39;
  unsigned __int16 Element;
  BOOL v41;
  llvm::Constant *v42;
  llvm::Type *v43;
  llvm::Constant *v44;
  BOOL v45;
  uint64_t Compare;
  uint64_t ****v47;
  llvm::Type *v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t **)(***(_QWORD ***)a2 + 1920);
  if (*(_QWORD *)a2)
    v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (v8)
  {
    llvm::VectorType::get(v7, (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a2 + 32) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)a2 + 8) == 19) << 32)));
    v7 = v9;
  }
  if (a1 == 15)
    return (llvm::Constant *)llvm::Constant::getAllOnesValue((llvm::Constant *)v7, (llvm::Type *)a2);
  if (!a1)
    return (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v7, (llvm::Type *)a2);
  v11 = a2[16];
  if (v11 == 12)
    return (llvm::Constant *)llvm::PoisonValue::get((llvm::PoisonValue *)v7, (llvm::Type *)a2);
  v12 = a3[16];
  if (v12 == 12)
    return (llvm::Constant *)llvm::PoisonValue::get((llvm::PoisonValue *)v7, (llvm::Type *)a2);
  if ((v11 - 11) < 2 || (v12 - 11) <= 1)
  {
    if ((a1 & 0xFFFFFFFE) != 0x20)
    {
      v14 = a1 - 32;
      if ((a1 - 32) > 9)
      {
        v15 = (a1 - 8) < 7;
        return (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v7, (llvm::Type *)v15, 0, a4);
      }
      if (a2 != a3)
      {
        if (v14 > 9)
          v15 = 0;
        else
          v15 = qword_24AA33AF0[v14];
        return (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v7, (llvm::Type *)v15, 0, a4);
      }
    }
    return (llvm::Constant *)llvm::UndefValue::get((llvm::UndefValue *)v7, (llvm::Type *)a2);
  }
  v13 = constantFoldCompareGlobalToNull(a1, (llvm::Constant *)a2, (llvm::GlobalValue *)a3);
  if (v13)
    return (llvm::Constant *)v13;
  v13 = constantFoldCompareGlobalToNull(a1, (llvm::Constant *)a3, (llvm::GlobalValue *)a2);
  if (v13)
    return (llvm::Constant *)v13;
  if (llvm::Constant::isNullValue((llvm::Constant *)a3))
  {
    if (a1 == 36)
      return (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v7, (llvm::Type *)a2);
    if (a1 == 35)
      return (llvm::Constant *)llvm::Constant::getAllOnesValue((llvm::Constant *)v7, (llvm::Type *)a2);
  }
  v19 = *(_QWORD *)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
  {
    if (a1 == 33)
    {
      v21 = (llvm::Constant *)a2;
      goto LABEL_53;
    }
    if (a1 == 32)
    {
      if (a3[16] == 16)
      {
        Not = llvm::ConstantExpr::getNot((llvm::Constant **)a3, (llvm::Constant *)a2);
        v21 = (llvm::Constant *)a2;
        return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1E, v21, Not, 0, 0, v18);
      }
      v21 = llvm::ConstantExpr::getNot((llvm::Constant **)a2, (llvm::Constant *)a2);
LABEL_53:
      Not = (llvm::Constant *)a3;
      return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1E, v21, Not, 0, 0, v18);
    }
  }
  v22 = a2[16];
  if (v22 == 17)
  {
    if (a3[16] == 17)
    {
      llvm::FCmpInst::compare((llvm::APFloat *)(a2 + 24), (const llvm::APFloat *)(a3 + 24), a1);
      goto LABEL_40;
    }
  }
  else if (v22 == 16 && a3[16] == 16)
  {
    llvm::ICmpInst::compare((uint64_t)(a2 + 24), (uint64_t)(a3 + 24), a1);
LABEL_40:
    v15 = v23;
    return (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)v7, (llvm::Type *)v15, 0, a4);
  }
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) < 4u
       || *(_DWORD *)(*(_QWORD *)a2 + 8) == 5
       || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) == 4)
      && (v22 == 5 || a3[16] == 5))
    {
      v33 = (char *)&loc_24A9BBA38
          + 4 * word_24AA33ACE[evaluateFCmpRelation((llvm::Constant *)a2, (llvm::Constant *)a3)];
      __asm { BR              X10 }
    }
    v34 = (char *)&loc_24A9BBDE8
        + 4
        * byte_24AA33AC3[evaluateICmpRelation((llvm::Constant *)a2, (llvm::Constant *)a3, (a1 - 38) < 4, v16, v17)- 32];
    __asm { BR              X10 }
  }
  SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
  if (!SplatValue
    || (v26 = SplatValue, (v27 = (llvm::Constant *)llvm::Constant::getSplatValue((llvm::Constant *)a3, 0)) == 0))
  {
    if (*(_BYTE *)(v19 + 8) == 19)
      return 0;
    v49 = v51;
    v50 = 0x400000000;
    v35 = (llvm::Type *)*(unsigned int *)(v19 + 32);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = (llvm::ConstantInt *)(***(_QWORD ***)a2 + 1992);
      do
      {
        v38 = (llvm::Constant *)llvm::ConstantInt::get(v37, v36, 0, v25);
        Element = llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a2, v38, 0, v39);
        v42 = (llvm::Constant *)llvm::ConstantInt::get(v37, v36, 0, v41);
        v44 = (llvm::Constant *)llvm::ConstantExpr::getExtractElement((llvm::ConstantExpr *)a3, v42, 0, v43);
        Compare = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)(unsigned __int16)a1, Element, v44, 0, v45);
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v49, Compare);
        v36 = (llvm::Type *)((char *)v36 + 1);
      }
      while (v35 != v36);
      v47 = (uint64_t ****)v49;
      v48 = (llvm::Type *)v50;
    }
    else
    {
      v48 = 0;
      v47 = (uint64_t ****)v51;
    }
    v13 = (uint64_t)llvm::ConstantVector::get(v47, v48);
    if (v49 != v51)
      free(v49);
    return (llvm::Constant *)v13;
  }
  v29 = *(unsigned int *)(v19 + 32);
  v30 = *(unsigned __int8 *)(v19 + 8) == 19;
  v31 = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)(unsigned __int16)a1, v26, v27, 0, v28);
  return (llvm::Constant *)llvm::ConstantVector::getSplat(v29 | (v30 << 32), v31, v32);
}

uint64_t constantFoldCompareGlobalToNull(int a1, llvm::Constant *a2, llvm::GlobalValue *a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  result = 0;
  if (a3 && *((unsigned __int8 *)a3 + 16) <= 3u)
  {
    if (!llvm::Constant::isNullValue(a2)
      || *((_BYTE *)a3 + 16) == 1
      || (llvm::GlobalValue::hasExternalWeakLinkage(a3) & 1) != 0
      || *(_DWORD *)(*(_QWORD *)a3 + 8) > 0xFFu)
    {
      return 0;
    }
    if (a1 != 33)
    {
      if (a1 == 32)
      {
        v7 = **(uint64_t ***)a2;
        v8 = *v7;
        result = *(_QWORD *)(*v7 + 1600);
        if (!result)
        {
          result = llvm::ConstantInt::get(v8 + 1920, 0, 0);
          *(_QWORD *)(v8 + 1600) = result;
        }
        return result;
      }
      return 0;
    }
    v9 = **(uint64_t ***)a2;
    v10 = *v9;
    result = *(_QWORD *)(*v9 + 1592);
    if (!result)
    {
      result = llvm::ConstantInt::get(v10 + 1920, 1, 0);
      *(_QWORD *)(v10 + 1592) = result;
    }
  }
  return result;
}

uint64_t evaluateFCmpRelation(llvm::Constant *a1, llvm::Constant *a2)
{
  uint64_t result;
  _QWORD *FCmp;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;

  if (a1 == a2)
    return 9;
  if (*((_BYTE *)a1 + 16) == 5)
    return 16;
  if (*((_BYTE *)a2 + 16) == 5)
  {
    result = evaluateFCmpRelation(a2, a1);
    if ((_DWORD)result != 16)
      return llvm::CmpInst::getSwappedPredicate(result);
    return result;
  }
  FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)1, (uint64_t ***)a1, a2, 0);
  if (FCmp && *((_BYTE *)FCmp + 16) == 16)
  {
    v6 = *((_DWORD *)FCmp + 8);
    if (v6 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(FCmp + 3)) != v6)
        return 1;
    }
    else if (FCmp[3])
    {
      return 1;
    }
  }
  v7 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)4, (uint64_t ***)a1, a2, 0);
  if (v7 && *((_BYTE *)v7 + 16) == 16)
  {
    v8 = *((_DWORD *)v7 + 8);
    if (v8 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 3)) != v8)
        return 4;
    }
    else if (v7[3])
    {
      return 4;
    }
  }
  v9 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)2, (uint64_t ***)a1, a2, 0);
  if (!v9 || *((_BYTE *)v9 + 16) != 16)
    return 16;
  v10 = *((_DWORD *)v9 + 8);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 3)) == v10)
      return 16;
  }
  else if (!v9[3])
  {
    return 16;
  }
  return 2;
}

uint64_t evaluateICmpRelation(llvm::Constant *a1, llvm::Constant *a2, char a3, uint64_t a4, BOOL a5)
{
  llvm::Constant *NullValue;
  llvm::Constant *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  llvm::Type *v12;
  int v13;
  BOOL v14;
  const llvm::GlobalValue *v15;
  uint64_t ICmp;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v24;
  BOOL v25;
  const llvm::GlobalValue *v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  llvm::Constant *v32;
  BOOL v33;
  int v34;
  char *v35;
  unsigned __int8 *v36;

  if (a1 == a2)
    return 32;
  NullValue = a2;
  v7 = a1;
  while (1)
  {
    v8 = *((unsigned __int8 *)v7 + 16);
    if (v8 >= 6)
    {
      if (*((unsigned __int8 *)NullValue + 16) < 6u)
        goto LABEL_43;
      ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x20, (unsigned __int16)v7, NullValue, 0, a5);
      if (!ICmp || *(_BYTE *)(ICmp + 16) != 16)
      {
LABEL_62:
        if ((a3 & 1) != 0)
          v19 = 40;
        else
          v19 = 36;
        v27 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v19, (unsigned __int16)v7, NullValue, 0, v17);
        if (v27 && *(_BYTE *)(v27 + 16) == 16)
        {
          v29 = *(_DWORD *)(v27 + 32);
          if (v29 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v27 + 24)) == v29)
              goto LABEL_75;
          }
          else if (!*(_QWORD *)(v27 + 24))
          {
            goto LABEL_75;
          }
          return v19;
        }
LABEL_75:
        if ((a3 & 1) != 0)
          v19 = 38;
        else
          v19 = 34;
        v30 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v19, (unsigned __int16)v7, NullValue, 0, v28);
        if (!v30 || *(_BYTE *)(v30 + 16) != 16)
          return 42;
        v31 = *(_DWORD *)(v30 + 32);
        if (v31 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v30 + 24)) == v31)
            return 42;
        }
        else if (!*(_QWORD *)(v30 + 24))
        {
          return 42;
        }
        return v19;
      }
      v18 = *(_DWORD *)(ICmp + 32);
      if (v18 <= 0x40)
      {
        if (*(_QWORD *)(ICmp + 24))
          return 32;
        goto LABEL_62;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(ICmp + 24)) == v18)
        goto LABEL_62;
      return 32;
    }
    if (v8 <= 3)
    {
      v20 = *((unsigned __int8 *)NullValue + 16);
      if (v20 != 5)
      {
        if (v20 <= 3)
        {
          v15 = v7;
LABEL_59:
          v26 = NullValue;
          return areGlobalsPotentiallyEqual(v15, v26);
        }
        if (v20 != 4)
        {
          if ((llvm::GlobalValue::hasExternalWeakLinkage(v7) & 1) == 0
            && *((_BYTE *)v7 + 16) != 1
            && *(_DWORD *)(*(_QWORD *)v7 + 8) < 0x100u)
          {
            return 34;
          }
          return 42;
        }
        return 33;
      }
LABEL_43:
      v22 = evaluateICmpRelation(NullValue, v7, a3 & 1);
      if (v22 == 42)
        return 42;
      return llvm::CmpInst::getSwappedPredicate(v22);
    }
    if (v8 == 4)
    {
      v21 = *((unsigned __int8 *)NullValue + 16);
      if (v21 == 4)
      {
        if (*((_QWORD *)NullValue - 8) == *((_QWORD *)v7 - 8))
          return 42;
      }
      else if (v21 == 5)
      {
        goto LABEL_43;
      }
      return 33;
    }
    v9 = *((unsigned __int16 *)v7 + 9);
    if (v9 > 0x31)
      return 42;
    v10 = (unsigned __int8 *)*((_QWORD *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
    if (((1 << v9) & 0x198000000000) != 0)
      goto LABEL_8;
    if (v9 != 49)
      break;
    v14 = v10[16] > 3u || v10 == 0;
    if (!v14 && NullValue && *((unsigned __int8 *)NullValue + 16) <= 3u)
    {
      v15 = (const llvm::GlobalValue *)*((_QWORD *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
      goto LABEL_59;
    }
LABEL_8:
    v11 = *(_DWORD *)(*(_QWORD *)v10 + 8);
    if ((v11 & 0xFE) == 0x12)
      v11 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v10 + 16) + 8);
    if (v11 < 6u && ((0x2Fu >> v11) & 1) != 0
      || (v11 & 0xFD) == 4
      || !llvm::Constant::isNullValue(NullValue)
      || (*(_DWORD *)(*(_QWORD *)v7 + 8) & 0xFD) != 0xD)
    {
      return 42;
    }
    v13 = *((unsigned __int16 *)v7 + 9);
    if (v13 == 40)
      a3 = 1;
    else
      a3 &= v13 != 39;
    NullValue = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
    v7 = (llvm::Constant *)v10;
    if (v10 == (unsigned __int8 *)NullValue)
      return 32;
  }
  if (v9 != 34)
    return 42;
  v24 = *((unsigned __int8 *)NullValue + 16);
  if (v24 == 19)
  {
    v25 = v10[16] > 3u || v10 == 0;
    if (!v25
      && (llvm::GlobalValue::hasExternalWeakLinkage(*((llvm::GlobalValue **)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF))) & 1) == 0
      && (*((_BYTE *)v7 + 17) & 2) != 0)
    {
      return 34;
    }
    return 42;
  }
  if (v24 <= 3)
  {
    if (v10[16] >= 4u)
      v32 = 0;
    else
      v32 = (llvm::Constant *)*((_QWORD *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
    if (v32)
      v33 = v32 == NullValue;
    else
      v33 = 1;
    if (v33 || !llvm::GEPOperator::hasAllZeroIndices(v7))
      return 42;
    v15 = v32;
    goto LABEL_59;
  }
  if (v24 <= 0x1B)
  {
    if (v24 != 5 || *((_WORD *)NullValue + 9) != 34)
      return 42;
  }
  else if (v24 != 62)
  {
    return 42;
  }
  v34 = *((_DWORD *)NullValue + 5);
  if ((v34 & 0x40000000) != 0)
    v35 = (char *)*((_QWORD *)NullValue - 1);
  else
    v35 = (char *)NullValue - 32 * (v34 & 0x7FFFFFF);
  if (v10[16] > 3u)
    return 42;
  v36 = *(unsigned __int8 **)v35;
  if (*(unsigned __int8 *)(*(_QWORD *)v35 + 16) > 3u
    || v10 == v36
    || !llvm::GEPOperator::hasAllZeroIndices(v7)
    || !llvm::GEPOperator::hasAllZeroIndices(NullValue))
  {
    return 42;
  }
  v15 = (const llvm::GlobalValue *)v10;
  v26 = (const llvm::GlobalValue *)v36;
  return areGlobalsPotentiallyEqual(v15, v26);
}

uint64_t llvm::ConstantFoldGetElementPtr(llvm::GetElementPtrInst *a1, uint64_t *a2, unsigned int a3, uint64_t a4, llvm::Value *a5, uint64_t a6)
{
  unsigned __int8 *v6;
  unint64_t v7;
  llvm::Constant **v8;
  uint64_t TypeAtIndex;
  llvm::PoisonValue *v12;
  llvm::Type *v13;
  llvm::PoisonValue *v14;
  int v15;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  llvm::Constant **v22;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t ElementPtr;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Constant **v29;
  uint64_t v30;
  llvm::Type **v31;
  uint64_t v32;
  llvm::Type *v33;
  uint64_t **v34;
  llvm::Constant *v35;
  llvm::Type *v36;
  BOOL v37;
  uint64_t v38;
  char v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  unint64_t IndexedType;
  int v54;
  unint64_t v55;
  llvm::ConstantDataSequential *v56;
  int v57;
  BOOL v58;
  char v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  char v67;
  uint64_t ElementAsConstant;
  BOOL v69;
  _QWORD *v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  llvm::Type *v74;
  llvm::Constant *v75;
  BOOL v76;
  llvm::Constant *FoldedCast;
  llvm::Constant *Splat;
  int v79;
  int v80;
  _BOOL4 v81;
  llvm::ConstantInt *v84;
  llvm::Constant *v85;
  llvm::Constant *v86;
  llvm::Constant *v87;
  llvm::Constant *v88;
  llvm::Constant *v89;
  llvm::Constant *v90;
  llvm::Constant *v91;
  llvm::Type *v92;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v94;
  llvm::Type *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t **v99;
  llvm::Type *v100;
  llvm::Constant *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  llvm::Constant *v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  _BOOL4 v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  BOOL v125;
  _QWORD v126[2];
  void *v127;
  uint64_t v128;
  _QWORD v129[10];

  v6 = (unsigned __int8 *)a2;
  v129[8] = *MEMORY[0x24BDAC8D0];
  if (!a6)
    return (uint64_t)v6;
  v7 = a6;
  v8 = (llvm::Constant **)a5;
  TypeAtIndex = (uint64_t)a1;
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, a5, a6);
  v14 = v12;
  v15 = v6[16];
  if (v15 == 12)
    return llvm::PoisonValue::get(v12, v13);
  if ((v15 - 11) <= 1)
  {
    if (!a3)
      return llvm::UndefValue::get(v12, v13);
    return llvm::PoisonValue::get(v12, v13);
  }
  v17 = *(_QWORD *)v6;
  if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
  {
    v17 = **(_QWORD **)(v17 + 16);
    v18 = *(unsigned __int8 *)(v17 + 8);
  }
  else
  {
    v18 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  }
  v120 = a3;
  v121 = BYTE4(a4);
  v19 = v18 == 15 && *(_QWORD *)(v17 + 24) == 0;
  v20 = !v19;
  if (v7 == 1)
    v20 = 0;
  if (!v20 && !BYTE4(a4))
  {
    v21 = 8 * v7;
    v22 = v8;
    do
    {
      v23 = *v22;
      if ((llvm::Constant::isNullValue(*v22) & 1) == 0 && *((unsigned __int8 *)v23 + 16) - 11 > 1)
        goto LABEL_25;
      ++v22;
      v21 -= 8;
    }
    while (v21);
    if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) != 0x12)
      return llvm::ConstantVector::getSplat(*((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32), v6, v24);
    return (uint64_t)v6;
  }
LABEL_25:
  if (llvm::Constant::isNullValue((llvm::Constant *)v6))
  {
    v27 = 8 * v7;
    v28 = 8 * v7;
    v29 = v8;
    while (*((unsigned __int8 *)*v29 + 16) - 11 < 2 || llvm::Constant::isNullValue(*v29))
    {
      ++v29;
      v28 -= 8;
      if (!v28)
      {
        v30 = *(_QWORD *)v6;
        if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
          v30 = **(_QWORD **)(v30 + 16);
        v31 = v8 + 1;
        v32 = v27 - 8;
        do
        {
          if (!v32)
            break;
          v33 = *v31++;
          TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)TypeAtIndex, v33, v26);
          v32 -= 8;
        }
        while (TypeAtIndex);
        v34 = (uint64_t **)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, (llvm::Type *)(*(_DWORD *)(v30 + 8) >> 8));
        v35 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, (llvm::Type *)(*(_DWORD *)(v30 + 8) >> 8));
        if (*(_QWORD *)v6)
          v37 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 18;
        else
          v37 = 0;
        if (v37)
          llvm::VectorType::get(v34, (llvm::Type *)(*(unsigned int *)(*(_QWORD *)v6 + 32) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)v6 + 8) == 19) << 32)));
        while (1)
        {
          v38 = *(_QWORD *)*v8;
          if (v38 && (*(_DWORD *)(v38 + 8) & 0xFE) == 18)
            break;
          ++v8;
          v27 -= 8;
          if (!v27)
            return llvm::Constant::getNullValue(v35, v36);
        }
        llvm::VectorType::get(v34, (llvm::Type *)(*(unsigned int *)(v38 + 32) | ((unint64_t)(*(_DWORD *)(v38 + 8) == 19) << 32)));
        return llvm::Constant::getNullValue(v35, v36);
      }
    }
  }
  v40 = v120;
  if (v6[16] == 5)
  {
    v41 = *((unsigned __int16 *)v6 + 9);
    if (v41 == 34)
    {
      ElementPtr = foldGEPOfGEP((uint64_t)v6, TypeAtIndex, v120, (uint64_t)v8, v7);
      if (ElementPtr)
        return ElementPtr;
      v41 = *((unsigned __int16 *)v6 + 9);
    }
    if (v7 >= 2 && (v41 - 38) <= 0xC && llvm::Constant::isNullValue(*v8))
    {
      v42 = *(uint64_t **)&v6[-32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
      v43 = *v42;
      if (*(_BYTE *)(*v42 + 8) != 15)
        v43 = 0;
      v44 = *(_QWORD *)v6;
      if (*(_BYTE *)(*(_QWORD *)v6 + 8) != 15)
        v44 = 0;
      v45 = !v43 || v44 == 0;
      if (!v45 && *(_QWORD *)(v43 + 24) && *(_QWORD *)(v44 + 24))
      {
        if (*(_BYTE *)(**(_QWORD **)(v43 + 16) + 8) == 17)
          v46 = **(_QWORD **)(v43 + 16);
        else
          v46 = 0;
        v47 = **(_QWORD **)(v44 + 16);
        if (*(_BYTE *)(v47 + 8) != 17)
          v47 = 0;
        v48 = !v46 || v47 == 0;
        if (!v48
          && *(_QWORD *)(v46 + 24) == *(_QWORD *)(v47 + 24)
          && (*(_DWORD *)(v44 + 8) ^ *(_DWORD *)(v43 + 8)) <= 0xFF)
        {
          return llvm::ConstantExpr::getGetElementPtr(v46, v42, v8, v7, v120, a4, 0);
        }
      }
    }
  }
  v128 = 0x800000000;
  v49 = *(_QWORD *)v6;
  v126[0] = v8;
  v126[1] = TypeAtIndex | 4;
  v127 = v129;
  v50 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  if ((_DWORD)v7 == 1)
    goto LABEL_170;
  v125 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  v118 = a4;
  v119 = v6;
  v124 = (a4 + 1);
  v51 = 1;
  v52 = 1;
  IndexedType = TypeAtIndex;
  v54 = BYTE4(a4);
  do
  {
    v55 = v49;
    v49 = IndexedType;
    v56 = v8[v51];
    v57 = *((unsigned __int8 *)v56 + 16);
    if ((v57 - 15) > 1)
    {
LABEL_89:
      v125 = 1;
      goto LABEL_90;
    }
    if (v54)
      v58 = v51 == v124;
    else
      v58 = 0;
    v59 = v58;
    if (*((unsigned __int8 *)v8[v51 - 1] + 16) - 17 >= 0xFFFFFFFE && (v59 & 1) == 0)
    {
      v60 = *(unsigned __int8 *)(IndexedType + 8);
      if (v60 != 16)
      {
        if ((v60 & 0xFE) == 0x12)
          goto LABEL_89;
        if (v57 == 16)
        {
          v115 = v51 - 1;
          if (isIndexInRangeOfArrayType(*(_QWORD *)(IndexedType + 32), (uint64_t)v56))
            goto LABEL_90;
          v62 = (_QWORD *)((char *)v56 + 24);
          v63 = *((_DWORD *)v56 + 8);
          v64 = v63 - 1;
          if (v63 >= 0x41)
            v62 = (_QWORD *)(*v62 + 8 * (v64 >> 6));
          if (((*v62 >> v64) & 1) != 0)
            goto LABEL_89;
        }
        else
        {
          v116 = v7;
          v65 = *(_DWORD *)(*(_QWORD *)v56 + 32);
          if (!v65)
          {
            v54 = v121;
LABEL_125:
            v7 = v116;
            goto LABEL_90;
          }
          v115 = v51 - 1;
          v122 = IndexedType;
          v66 = 0;
          v67 = 1;
          do
          {
            ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v56);
            v69 = isIndexInRangeOfArrayType(*(_QWORD *)(v122 + 32), ElementAsConstant);
            v70 = (_QWORD *)(ElementAsConstant + 24);
            v71 = *(_DWORD *)(ElementAsConstant + 32);
            v72 = v71 - 1;
            if (v71 >= 0x41)
              v70 = (_QWORD *)(*v70 + 8 * (v72 >> 6));
            if (((*v70 >> v72) & 1) != 0)
            {
              v125 = 1;
              v54 = v121;
              v49 = v122;
              goto LABEL_125;
            }
            v67 &= v69;
            ++v66;
          }
          while (v65 != v66);
          v73 = v67 | v125;
          v54 = v121;
          v49 = v122;
          v7 = v116;
          if ((v73 & 1) != 0)
            goto LABEL_90;
          v125 = 0;
        }
        if (*(_BYTE *)(v55 + 8) == 16)
          goto LABEL_89;
        v74 = *(llvm::Type **)(v49 + 32);
        if (!v74)
          goto LABEL_89;
        v123 = v49;
        llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)&v127, v7);
        FoldedCast = (llvm::Constant *)*((_QWORD *)v127 + v115);
        if (!FoldedCast)
          FoldedCast = v8[v115];
        Splat = v8[v51];
        v79 = *(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE;
        v80 = *(_DWORD *)(*(_QWORD *)FoldedCast + 8) & 0xFE;
        v81 = v80 == 18 || (*(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE) == 18;
        if (v79 != 18 && v80 == 18)
        {
          Splat = (llvm::Constant *)llvm::ConstantDataVector::getSplat((llvm::Type *)*(unsigned int *)(*(_QWORD *)FoldedCast + 32), (_QWORD **)v8[v51], v75);
        }
        else if (v80 != 18 && v79 == 18)
        {
          FoldedCast = (llvm::Constant *)llvm::ConstantDataVector::getSplat((llvm::Type *)*(unsigned int *)(*(_QWORD *)Splat + 32), (_QWORD **)FoldedCast, v75);
        }
        v84 = *(llvm::ConstantInt **)Splat;
        if ((*(_DWORD *)(*(_QWORD *)Splat + 8) & 0xFE) == 0x12)
          v84 = (llvm::ConstantInt *)**((_QWORD **)v84 + 2);
        v87 = (llvm::Constant *)llvm::ConstantInt::get(v84, v74, 0, v76);
        if (v81)
        {
          if (v80 == 18)
            v88 = FoldedCast;
          else
            v88 = Splat;
          v87 = (llvm::Constant *)llvm::ConstantDataVector::getSplat((llvm::Type *)*(unsigned int *)(*(_QWORD *)v88 + 32), (_QWORD **)v87, v85);
        }
        v117 = v81;
        v89 = llvm::ConstantFoldBinaryInstruction((llvm *)0x17, Splat, v87, v86);
        *((_QWORD *)v127 + v51) = v89;
        v91 = llvm::ConstantFoldBinaryInstruction((llvm *)0x14, Splat, v87, v90);
        v92 = *(llvm::Type **)FoldedCast;
        v114 = v80;
        if ((*(_DWORD *)(*(_QWORD *)FoldedCast + 8) & 0xFE) == 0x12)
          v92 = (llvm::Type *)**((_QWORD **)v92 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v92);
        v94 = *(llvm::Type **)v91;
        v95 = *(llvm::Type **)v91;
        if ((*(_DWORD *)(*(_QWORD *)v91 + 8) & 0xFE) == 0x12)
          v95 = (llvm::Type *)**((_QWORD **)v94 + 2);
        v96 = llvm::Type::getPrimitiveSizeInBits(v95);
        if (PrimitiveSizeInBits <= v96)
          v97 = v96;
        else
          v97 = PrimitiveSizeInBits;
        if (v97 <= 0x40)
          v98 = 64;
        else
          v98 = v97;
        v99 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v94, (llvm::LLVMContext *)v98);
        if (v117)
        {
          if (v114 == 18)
            v101 = FoldedCast;
          else
            v101 = Splat;
          llvm::FixedVectorType::get(v99, (llvm::Type *)*(unsigned int *)(*(_QWORD *)v101 + 32));
        }
        v54 = v121;
        v49 = v123;
        v102 = *(_DWORD *)(*(_QWORD *)FoldedCast + 8);
        if ((v102 & 0xFE) == 0x12)
          v102 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)FoldedCast + 16) + 8);
        if (v102 != 13 || v102 >> 8 != (_DWORD)v98)
          FoldedCast = (llvm::Constant *)getFoldedCast(40);
        v103 = *(_DWORD *)(*(_QWORD *)v91 + 8);
        if ((v103 & 0xFE) == 0x12)
          v103 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v91 + 16) + 8);
        v104 = v103;
        v105 = v103 >> 8;
        if (v104 != 13 || v105 != (_DWORD)v98)
          v91 = (llvm::Constant *)getFoldedCast(40);
        v107 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xD, FoldedCast, v91, 0, 0, v100);
        *((_QWORD *)v127 + v115) = v107;
      }
    }
LABEL_90:
    v61 = llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(v126);
    IndexedType = llvm::generic_gep_type_iterator<llvm::Use const*>::getIndexedType((uint64_t)v61);
    ++v52;
    ++v51;
  }
  while (v52 != (_DWORD)v7);
  v108 = v128;
  a4 = v118;
  v6 = v119;
  v40 = v120;
  v50 = v125;
  if ((_DWORD)v128)
  {
    if ((_DWORD)v7)
    {
      v109 = 0;
      do
      {
        if (!*(_QWORD *)((char *)v127 + v109 * 8))
          *(_QWORD *)((char *)v127 + v109 * 8) = v8[v109];
        ++v109;
      }
      while (v7 != v109);
    }
    v110 = v127;
    v111 = TypeAtIndex;
    v112 = v119;
    v113 = v120;
LABEL_169:
    ElementPtr = llvm::ConstantExpr::getGetElementPtr(v111, v112, v110, v108, v113, a4, 0);
    goto LABEL_178;
  }
LABEL_170:
  ElementPtr = 0;
  if (!v50 && (v40 & 1) == 0)
  {
    if (v6[16] == 3
      && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) == 0
      && *((_QWORD *)v6 + 3) == TypeAtIndex
      && isInBoundsIndices<llvm::Value *>(v8, v7))
    {
      v111 = TypeAtIndex;
      v112 = v6;
      v110 = v8;
      v108 = v7;
      v113 = 1;
      goto LABEL_169;
    }
    ElementPtr = 0;
  }
LABEL_178:
  if (v127 != v129)
    free(v127);
  return ElementPtr;
}

uint64_t foldGEPOfGEP(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t ElementPtr;
  llvm::ConstantExpr *SExtOrBitCast;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  void *v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  void *v39;
  llvm::Type **v40;
  llvm::Type *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Type *v44;
  unsigned int v45;
  uint64_t v46;
  llvm::Type ***v47;
  llvm::Type *v48;
  llvm::Type *v49;
  llvm::Constant *v50;
  unint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[17];

  v60[16] = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
  v6 = 72;
  if (v5)
    v6 = 32;
  if (*(_QWORD *)(a1 + v6) != a2)
    return 0;
  SExtOrBitCast = *(llvm::ConstantExpr **)a4;
  if (llvm::Constant::isNullValue(*(llvm::Constant **)a4))
  {
    v58 = v60;
    v59 = 0x1000000000;
    v14 = *(_DWORD *)(a1 + 20);
    v15 = a5 + (v14 & 0x7FFFFFFu) - 1;
    if (v15 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v15, 8);
      v14 = *(_DWORD *)(a1 + 20);
    }
    if ((v14 & 0x40000000) != 0)
    {
      v17 = *(_QWORD *)(a1 - 8);
      v16 = v14 & 0x7FFFFFF;
    }
    else
    {
      v16 = v14 & 0x7FFFFFF;
      v17 = a1 - 32 * v16;
    }
    llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v58, (char *)(v17 + 32), (char *)(v17 + 32 * v16));
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v58, (_BYTE *)(a4 + 8), (_BYTE *)(a4 + 8 * a5));
    v24 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
    v25 = 64;
    if (v24)
      v25 = 24;
    v26 = *(_QWORD *)(a1 + v25);
    v27 = *(_DWORD *)(a1 + 20);
    if ((v27 & 0x40000000) != 0)
      v28 = *(uint64_t **)(a1 - 8);
    else
      v28 = (uint64_t *)(a1 - 32 * (v27 & 0x7FFFFFF));
    v34 = *v28;
    v35 = *(unsigned __int8 *)(a1 + 17);
    v36 = v35 > 3;
    v37 = a3 & ((v35 & 2) >> 1);
    if (v35 >= 4)
      v38 = (*(_BYTE *)(a1 + 17) >> 2) - 1;
    else
      v38 = 0;
    ElementPtr = llvm::ConstantExpr::getGetElementPtr(v26, v34, v58, v59, v37, v38 | (unint64_t)(v36 << 32), 0);
    v39 = v58;
    if (v58 != v60)
LABEL_43:
      free(v39);
  }
  else
  {
    v18 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
    v19 = 64;
    if (v18)
      v19 = 24;
    v20 = *(_QWORD *)(a1 + v19);
    v21 = *(_DWORD *)(a1 + 20);
    if ((v21 & 0x40000000) != 0)
    {
      v23 = *(_QWORD *)(a1 - 8);
      v22 = v21 & 0x7FFFFFF;
    }
    else
    {
      v22 = v21 & 0x7FFFFFF;
      v23 = a1 - 32 * v22;
    }
    v58 = (void *)(v23 + 32);
    v59 = v20 | 4;
    if (v22 == 1)
      return 0;
    v29 = (void *)(v23 + 32 * v22);
    do
    {
      v30 = v59;
      llvm::generic_gep_type_iterator<llvm::Use const*>::operator++(&v58);
    }
    while (v58 != v29);
    if ((v30 & 4) == 0)
      return 0;
    ElementPtr = 0;
    if (!SExtOrBitCast || *((_BYTE *)SExtOrBitCast + 16) != 16)
      return ElementPtr;
    v31 = *(_DWORD *)(a1 + 20);
    v32 = (v31 & 0x7FFFFFFu) - 1;
    v33 = (v31 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v31 & 0x7FFFFFF);
    v40 = *(llvm::Type ***)(v33 + 32 * ((v31 & 0x7FFFFFFu) - 1));
    v41 = *v40;
    if ((*((_DWORD *)*v40 + 2) & 0xFE) == 0x12)
      return 0;
    v58 = v60;
    v59 = 0x1000000000;
    if ((unint64_t)(a5 + v32) >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, a5 + v32, 8);
      v31 = *(_DWORD *)(a1 + 20);
    }
    if ((v31 & 0x40000000) != 0)
    {
      v43 = *(_QWORD *)(a1 - 8);
      v42 = v31 & 0x7FFFFFF;
    }
    else
    {
      v42 = v31 & 0x7FFFFFF;
      v43 = a1 - 32 * v42;
    }
    llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v58, (char *)(v43 + 32), (char *)(v43 + 32 * v42 - 32));
    if (v41 != *(llvm::Type **)SExtOrBitCast)
    {
      if (*((_DWORD *)v41 + 2) >> 8 <= *(_DWORD *)(*(_QWORD *)SExtOrBitCast + 8) >> 8)
        v45 = *(_DWORD *)(*(_QWORD *)SExtOrBitCast + 8) >> 8;
      else
        v45 = *((_DWORD *)v41 + 2) >> 8;
      if (v45 <= 0x40)
        v46 = 64;
      else
        v46 = v45;
      v47 = (llvm::Type ***)llvm::IntegerType::get(*(llvm::IntegerType **)v41, (llvm::LLVMContext *)v46);
      SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast((llvm::Type **)SExtOrBitCast, v47, v48);
      v40 = (llvm::Type **)llvm::ConstantExpr::getSExtOrBitCast(v40, v47, v49);
    }
    v50 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xD, SExtOrBitCast, (llvm::Constant *)v40, 0, 0, v44);
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v58, (uint64_t)v50);
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v58, (_BYTE *)(a4 + 8), (_BYTE *)(a4 + 8 * a5));
    v51 = 0;
    v52 = *(unsigned __int8 *)(a1 + 17);
    if (v52 <= 3)
      v53 = 0;
    else
      v53 = (*(_BYTE *)(a1 + 17) >> 2) - 1;
    v54 = *(_DWORD *)(a1 + 20);
    if (v52 >= 4)
      v51 = (unint64_t)((v54 & 0x7FFFFFF) - 2 != ((*(_BYTE *)(a1 + 17) >> 2) - 1)) << 32;
    v55 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
    v56 = 64;
    if (v55)
      v56 = 24;
    if ((v54 & 0x40000000) != 0)
      v57 = *(_QWORD **)(a1 - 8);
    else
      v57 = (_QWORD *)(a1 - 32 * (v54 & 0x7FFFFFF));
    ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(_QWORD *)(a1 + v56), *v57, v58, v59, a3 & (v52 >> 1), v51 | v53, 0);
    v39 = v58;
    if (v58 != v60)
      goto LABEL_43;
  }
  return ElementPtr;
}

BOOL isIndexInRangeOfArrayType(unint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;

  v4 = (_QWORD **)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5 - llvm::APInt::getNumSignBits((llvm::APInt *)(a2 + 24)) + 1 > 0x40)
    return 0;
  v6 = *(_DWORD *)(a2 + 32);
  if (v6 > 0x40)
  {
    v7 = **v4;
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_4;
    return 0;
  }
  v7 = (uint64_t)((_QWORD)*v4 << -(char)v6) >> -(char)v6;
  if ((v7 & 0x8000000000000000) != 0)
    return 0;
LABEL_4:
  if (v7)
    v8 = v7 >= a1;
  else
    v8 = 0;
  return !v8;
}

uint64_t isInBoundsIndices<llvm::Value *>(llvm::Constant **a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  llvm::Constant *v5;
  llvm::APInt *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  llvm::Constant **v10;
  llvm::Constant *v11;
  BOOL v13;

  if (!a2)
    return 1;
  v2 = a2;
  if ((llvm::Constant::isNullValue(*a1) & 1) != 0)
    return 1;
  v5 = *a1;
  if (*a1 && *((_BYTE *)v5 + 16) == 16)
  {
    v6 = (llvm::Constant *)((char *)v5 + 24);
    v7 = *((_DWORD *)v5 + 8);
    if (v7 <= 0x40)
    {
      v8 = *(_QWORD *)v6;
      goto LABEL_9;
    }
  }
  else
  {
    result = llvm::ConstantDataVector::isSplat(*a1);
    if (!(_DWORD)result)
      return result;
    result = llvm::ConstantDataSequential::getElementAsConstant(v5);
    if (!result)
      return result;
    if (*(_BYTE *)(result + 16) != 16)
      return 0;
    v7 = *(_DWORD *)(result + 32);
    if (v7 <= 0x40)
    {
      v8 = *(_QWORD *)(result + 24);
LABEL_9:
      if (v8 != 1)
        return 0;
      goto LABEL_18;
    }
    v6 = (llvm::APInt *)(result + 24);
  }
  if (llvm::APInt::countLeadingZerosSlowCase(v6) != v7 - 1)
    return 0;
LABEL_18:
  if (v2 == 1)
    return 1;
  v9 = v2 - 2;
  v10 = a1 + 1;
  do
  {
    v11 = *v10++;
    result = llvm::Constant::isNullValue(v11);
    v13 = v9-- != 0;
  }
  while ((_DWORD)result && v13);
  return result;
}

uint64_t llvm::APSInt::compareValues(llvm::APSInt *this, const llvm::APSInt *a2, const llvm::APSInt *a3)
{
  unsigned int v5;
  unsigned int v6;
  const llvm::APSInt *v7;
  const llvm::APSInt *v8;
  llvm::APSInt *v9;
  uint64_t v10;
  const llvm::APSInt *v12;
  char v13;
  llvm::APSInt *v14;
  uint64_t v15;
  unsigned int v16;

  v5 = *((_DWORD *)this + 2);
  v6 = *((_DWORD *)a2 + 2);
  if (v5 == v6 && (*((_BYTE *)this + 12) == 0) == (*((_BYTE *)a2 + 12) == 0))
  {
    if (!*((_BYTE *)this + 12))
      return llvm::APInt::compareSigned(this, a2);
  }
  else
  {
    if (v5 > v6)
    {
      llvm::APSInt::extend((llvm::APSInt *)&v15, a2, v5);
      v8 = (const llvm::APSInt *)&v15;
      v9 = this;
      goto LABEL_7;
    }
    if (v6 > v5)
    {
      llvm::APSInt::extend((llvm::APSInt *)&v15, this, v6);
      v9 = (llvm::APSInt *)&v15;
      v8 = a2;
LABEL_7:
      v10 = llvm::APSInt::compareValues(v9, v8, v7);
      if (v16 >= 0x41)
      {
        if (v15)
          MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
      }
      return v10;
    }
    if (*((_BYTE *)this + 12))
    {
      if (!*((_BYTE *)a2 + 12))
      {
        v12 = (const llvm::APSInt *)(*(_QWORD *)a2 + 8 * ((v6 - 1) >> 6));
        if (v6 < 0x41)
          v12 = a2;
        if (((*(_QWORD *)v12 >> (v6 - 1)) & 1) != 0)
          return 1;
      }
    }
    else
    {
      v13 = v5 - 1;
      if (v5 >= 0x41)
        v14 = (llvm::APSInt *)(*(_QWORD *)this + 8 * ((v5 - 1) >> 6));
      else
        v14 = this;
      if (((*(_QWORD *)v14 >> v13) & 1) != 0)
        return 0xFFFFFFFFLL;
    }
  }
  return llvm::APInt::compare(this, a2);
}

void llvm::APSInt::extend(llvm::APSInt *this, llvm::APInt *a2, unsigned int a3)
{
  _BYTE *v5;
  char v6;
  uint64_t v7;
  _BYTE v8[16];
  _BYTE v9[16];

  if (*((_BYTE *)a2 + 12))
  {
    v5 = v9;
    llvm::APInt::zext(a2, a3, (llvm::APInt *)v9);
  }
  else
  {
    v5 = v8;
    llvm::APInt::sext(a2, a3, (llvm::APInt *)v8);
  }
  v6 = *((_BYTE *)a2 + 12);
  v7 = *(_QWORD *)v5;
  *((_DWORD *)this + 2) = *((_DWORD *)v5 + 2);
  *(_QWORD *)this = v7;
  *((_BYTE *)this + 12) = v6;
}

uint64_t areGlobalsPotentiallyEqual(const llvm::GlobalValue *a1, const llvm::GlobalValue *a2)
{
  llvm::Type *v4;
  int v5;
  llvm::Type *v6;
  int v7;

  if (*((_BYTE *)a1 + 16) == 1)
    return 42;
  if (*((_BYTE *)a2 + 16) == 1)
    return 42;
  if ((llvm::GlobalValue::isInterposable(a1) & 1) != 0)
    return 42;
  if ((*((_DWORD *)a1 + 8) & 0xC0) == 0x80)
    return 42;
  if (*((_BYTE *)a1 + 16) == 3)
  {
    v4 = (llvm::Type *)*((_QWORD *)a1 + 3);
    if (!llvm::Type::isSized((uint64_t)v4, 0) || (llvm::Type::isEmptyTy(v4, v5) & 1) != 0)
      return 42;
  }
  if ((llvm::GlobalValue::isInterposable(a2) & 1) != 0)
    return 42;
  if ((*((_DWORD *)a2 + 8) & 0xC0) == 0x80)
    return 42;
  if (*((_BYTE *)a2 + 16) == 3
    && ((v6 = (llvm::Type *)*((_QWORD *)a2 + 3), !llvm::Type::isSized((uint64_t)v6, 0))
     || llvm::Type::isEmptyTy(v6, v7)))
  {
    return 42;
  }
  else
  {
    return 33;
  }
}

uint64_t llvm::GEPOperator::hasAllZeroIndices(llvm::GEPOperator *this)
{
  int v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::APInt *v8;
  unsigned int v9;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = (char *)*((_QWORD *)this - 1);
    v2 = v1 & 0x7FFFFFF;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (char *)this - 32 * v2;
  }
  if (v2 == 1)
    return 1;
  v4 = v3 + 32;
  v5 = 32 * v2 - 32;
  while (1)
  {
    v6 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4 || *(_BYTE *)(*(_QWORD *)v4 + 16) != 16)
      break;
    v8 = (llvm::APInt *)(v6 + 24);
    v9 = *(_DWORD *)(v6 + 32);
    if (v9 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9)
        return 0;
    }
    else if (*(_QWORD *)v8)
    {
      return 0;
    }
    v4 += 32;
    v5 -= 32;
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t llvm::PatternMatch::cstval_pred_ty<llvm::PatternMatch::is_neg_zero_fp,llvm::ConstantFP>::match<llvm::Constant>(uint64_t SplatValue)
{
  llvm::Constant *v1;
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  llvm::Type *v6;
  int v7;
  uint64_t AggregateElement;
  int v9;
  char v10;

  v1 = (llvm::Constant *)SplatValue;
  if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 17)
  {
    v3 = *(_QWORD *)SplatValue;
    if (*(_QWORD *)SplatValue)
      v4 = (*(_DWORD *)(*(_QWORD *)SplatValue + 8) & 0xFE) == 18;
    else
      v4 = 0;
    if (!v4)
      goto LABEL_29;
    SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
    if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 17)
    {
      if (*(_BYTE *)(v3 + 8) == 18)
      {
        v5 = *(_DWORD *)(v3 + 32);
        if (v5)
        {
          v6 = 0;
          LOBYTE(v7) = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(v1, v6);
            if (!AggregateElement)
              break;
            v9 = *(unsigned __int8 *)(AggregateElement + 16);
            if ((v9 - 11) >= 2)
            {
              if (v9 != 17)
                goto LABEL_29;
              v10 = *(_UNKNOWN **)(AggregateElement + 32) == &llvm::semPPCDoubleDouble
                  ? *(_BYTE *)(*(_QWORD *)(AggregateElement + 40) + 28)
                  : *(_BYTE *)(AggregateElement + 52);
              if ((v10 & 7) != 3 || (v10 & 8) == 0)
                goto LABEL_29;
              LOBYTE(v7) = 1;
            }
            v6 = (llvm::Type *)((_DWORD)v6 + 1);
            if (v5 == (_DWORD)v6)
              return v7 & 1;
          }
        }
      }
      goto LABEL_29;
    }
  }
  if (*(_UNKNOWN **)(SplatValue + 32) == &llvm::semPPCDoubleDouble)
    v2 = *(unsigned __int8 *)(*(_QWORD *)(SplatValue + 40) + 28);
  else
    v2 = *(unsigned __int8 *)(SplatValue + 52);
  if ((v2 & 7) != 3)
  {
LABEL_29:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  v7 = (v2 >> 3) & 1;
  return v7 & 1;
}

llvm::ConstantRange *llvm::ConstantRange::ConstantRange(llvm::ConstantRange *this, unsigned int a2, int a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  void *v7;

  if (a3)
  {
    v4 = -1;
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  llvm::APInt::APInt(this, a2, v4, v5);
  v6 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 6) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *((_QWORD *)this + 2) = v7;
    memcpy(v7, *(const void **)this, (((unint64_t)*((unsigned int *)this + 6) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *((_QWORD *)this + 2) = *(_QWORD *)this;
  }
  return this;
}

BOOL llvm::ConstantRange::isEmptySet(const void **this)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
      return 0;
    return llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v2;
  }
  else
  {
    return ((unint64_t)this[2] | (unint64_t)*this) == 0;
  }
}

BOOL llvm::ConstantRange::isFullSet(const void **this)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
      return llvm::APInt::isAllOnes((llvm::APInt *)this);
  }
  else if (*this == this[2])
  {
    return llvm::APInt::isAllOnes((llvm::APInt *)this);
  }
  return 0;
}

uint64_t llvm::ConstantRange::intersectWith@<X0>(const void **a1@<X0>, const void **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  const void **v7;
  uint64_t result;
  const void **v9;
  int v10;
  const void **v11;
  int v12;
  int v13;
  uint64_t v14;
  llvm::ConstantRange *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  const void *v21;
  void *v22;
  const void *v23;
  void *v24;
  unsigned int v25;
  llvm::ConstantRange *v26;
  const llvm::ConstantRange *v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;

  do
  {
    v7 = a2;
    a2 = a1;
    result = llvm::ConstantRange::isEmptySet(a1);
    if ((result & 1) != 0 || (result = llvm::ConstantRange::isFullSet(v7), (_DWORD)result))
    {
      v17 = *((_DWORD *)a2 + 2);
      *(_DWORD *)(a4 + 8) = v17;
      if (v17 > 0x40)
      {
        v19 = (void *)operator new[]();
        *(_QWORD *)a4 = v19;
        result = (uint64_t)memcpy(v19, *a2, (((unint64_t)*(unsigned int *)(a4 + 8) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)a4 = *a2;
      }
      v20 = *((_DWORD *)a2 + 6);
      *(_DWORD *)(a4 + 24) = v20;
      if (v20 <= 0x40)
      {
        v21 = a2[2];
LABEL_22:
        *(_QWORD *)(a4 + 16) = v21;
        return result;
      }
      v22 = (void *)operator new[]();
      *(_QWORD *)(a4 + 16) = v22;
      v23 = a2[2];
      return (uint64_t)memcpy(v22, v23, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
    }
    result = llvm::ConstantRange::isEmptySet(v7);
    if ((result & 1) != 0 || (result = llvm::ConstantRange::isFullSet(a2), (_DWORD)result))
    {
      v18 = *((_DWORD *)v7 + 2);
      *(_DWORD *)(a4 + 8) = v18;
      if (v18 > 0x40)
      {
        v24 = (void *)operator new[]();
        *(_QWORD *)a4 = v24;
        result = (uint64_t)memcpy(v24, *v7, (((unint64_t)*(unsigned int *)(a4 + 8) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)a4 = *v7;
      }
      v25 = *((_DWORD *)v7 + 6);
      *(_DWORD *)(a4 + 24) = v25;
      if (v25 <= 0x40)
      {
        v21 = v7[2];
        goto LABEL_22;
      }
      v22 = (void *)operator new[]();
      *(_QWORD *)(a4 + 16) = v22;
      v23 = v7[2];
      return (uint64_t)memcpy(v22, v23, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
    }
    v9 = a2 + 2;
    v10 = llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)(a2 + 2));
    v11 = v7 + 2;
    v12 = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)(v7 + 2));
    v13 = v12;
    if (v10 > 0)
    {
      if (v12 <= 0)
      {
        if ((llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)(a2 + 2)) & 0x80000000) == 0)
        {
          result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)a2);
          if ((result & 0x80000000) == 0)
          {
LABEL_37:
            v29 = *((_DWORD *)v7 + 2);
            *(_DWORD *)(a4 + 8) = v29;
            if (v29 > 0x40)
            {
              v33 = (void *)operator new[]();
              *(_QWORD *)a4 = v33;
              result = (uint64_t)memcpy(v33, *v7, (((unint64_t)*(unsigned int *)(a4 + 8) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *(_QWORD *)a4 = *v7;
            }
            v34 = *((_DWORD *)v7 + 6);
            *(_DWORD *)(a4 + 24) = v34;
            if (v34 <= 0x40)
            {
              v21 = *v11;
              goto LABEL_22;
            }
            v22 = (void *)operator new[]();
            *(_QWORD *)(a4 + 16) = v22;
            v23 = *v11;
            return (uint64_t)memcpy(v22, v23, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
          }
          result = llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)a2);
          v14 = *((unsigned int *)a2 + 2);
          if ((int)result > 0)
            goto LABEL_33;
LABEL_10:
          v15 = (llvm::ConstantRange *)a4;
          v16 = v14;
          return (uint64_t)llvm::ConstantRange::ConstantRange(v15, v16, 0);
        }
        if ((llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)(a2 + 2)) & 0x80000000) == 0)
        {
          result = llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)a2);
          if ((int)result <= 0)
            goto LABEL_52;
          return getPreferredRange(a4, (llvm::ConstantRange *)a2, (llvm::ConstantRange *)v7, a3);
        }
      }
      else
      {
        if ((llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)(a2 + 2)) & 0x80000000) == 0)
        {
          if ((int)llvm::APInt::compare((llvm::APInt *)(v7 + 2), (const llvm::APInt *)a2) <= 0)
          {
            result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)a2);
            if ((result & 0x80000000) != 0)
            {
              v26 = (llvm::ConstantRange *)a4;
              v27 = (const llvm::ConstantRange *)a2;
              return (uint64_t)llvm::ConstantRange::ConstantRange(v26, v27);
            }
LABEL_52:
            v35 = *((unsigned int *)v7 + 2);
            if (v35 > 0x40)
            {
              v36 = (void *)operator new[]();
              result = (uint64_t)memcpy(v36, *v7, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v36 = (void *)*v7;
            }
            v39 = *((unsigned int *)a2 + 6);
            if (v39 > 0x40)
            {
              v40 = (void *)operator new[]();
              result = (uint64_t)memcpy(v40, *v9, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v40 = (void *)*v9;
            }
            *(_DWORD *)(a4 + 8) = v35;
            *(_QWORD *)a4 = v36;
LABEL_77:
            *(_DWORD *)(a4 + 24) = v39;
            goto LABEL_78;
          }
          return getPreferredRange(a4, (llvm::ConstantRange *)a2, (llvm::ConstantRange *)v7, a3);
        }
        if ((llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)(a2 + 2)) & 0x80000000) != 0)
          return getPreferredRange(a4, (llvm::ConstantRange *)a2, (llvm::ConstantRange *)v7, a3);
        result = llvm::APInt::compare((llvm::APInt *)v7, (const llvm::APInt *)a2);
        if ((result & 0x80000000) != 0)
        {
          v30 = *((unsigned int *)a2 + 2);
          if (v30 > 0x40)
          {
            v31 = (void *)operator new[]();
            result = (uint64_t)memcpy(v31, *a2, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v31 = (void *)*a2;
          }
          v39 = *((unsigned int *)v7 + 6);
          if (v39 > 0x40)
          {
            v40 = (void *)operator new[]();
            result = (uint64_t)memcpy(v40, *v11, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v40 = (void *)*v11;
          }
          *(_DWORD *)(a4 + 8) = v30;
          *(_QWORD *)a4 = v31;
          goto LABEL_77;
        }
      }
      v26 = (llvm::ConstantRange *)a4;
      v27 = (const llvm::ConstantRange *)v7;
      return (uint64_t)llvm::ConstantRange::ConstantRange(v26, v27);
    }
    a1 = v7;
  }
  while (v13 > 0);
  if ((llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)v7) & 0x80000000) != 0)
  {
    if ((int)llvm::APInt::compare((llvm::APInt *)(a2 + 2), (const llvm::APInt *)v7) > 0)
    {
      result = llvm::APInt::compare((llvm::APInt *)(a2 + 2), (const llvm::APInt *)(v7 + 2));
      if ((result & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_52;
    }
    v16 = *((_DWORD *)a2 + 2);
    v15 = (llvm::ConstantRange *)a4;
    return (uint64_t)llvm::ConstantRange::ConstantRange(v15, v16, 0);
  }
  result = llvm::APInt::compare((llvm::APInt *)(a2 + 2), (const llvm::APInt *)(v7 + 2));
  if ((result & 0x80000000) != 0)
  {
    v32 = *((_DWORD *)a2 + 2);
    *(_DWORD *)(a4 + 8) = v32;
    if (v32 > 0x40)
    {
      v37 = (void *)operator new[]();
      *(_QWORD *)a4 = v37;
      result = (uint64_t)memcpy(v37, *a2, (((unint64_t)*(unsigned int *)(a4 + 8) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)a4 = *a2;
    }
    v38 = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a4 + 24) = v38;
    if (v38 <= 0x40)
    {
      v21 = *v9;
      goto LABEL_22;
    }
    v22 = (void *)operator new[]();
    *(_QWORD *)(a4 + 16) = v22;
    v23 = *v9;
    return (uint64_t)memcpy(v22, v23, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  result = llvm::APInt::compare((llvm::APInt *)a2, (const llvm::APInt *)(v7 + 2));
  v14 = *((unsigned int *)a2 + 2);
  if ((result & 0x80000000) == 0)
    goto LABEL_10;
LABEL_33:
  if (v14 > 0x40)
  {
    v28 = (void *)operator new[]();
    result = (uint64_t)memcpy(v28, *a2, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v28 = (void *)*a2;
  }
  v41 = *((unsigned int *)v7 + 6);
  if (v41 > 0x40)
  {
    v40 = (void *)operator new[]();
    result = (uint64_t)memcpy(v40, *v11, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v40 = (void *)*v11;
  }
  *(_DWORD *)(a4 + 8) = v14;
  *(_QWORD *)a4 = v28;
  *(_DWORD *)(a4 + 24) = v41;
LABEL_78:
  *(_QWORD *)(a4 + 16) = v40;
  return result;
}

uint64_t llvm::ConstantRange::isWrappedSet(llvm::ConstantRange *this)
{
  llvm::APInt *v2;
  unsigned int v3;
  BOOL v4;
  int v6;

  v2 = (llvm::ConstantRange *)((char *)this + 16);
  if ((int)llvm::APInt::compare(this, (llvm::ConstantRange *)((char *)this + 16)) < 1)
    return 0;
  v3 = *((_DWORD *)this + 6);
  if (v3 > 0x40)
    v4 = llvm::APInt::countLeadingZerosSlowCase(v2) == v3;
  else
    v4 = *(_QWORD *)v2 == 0;
  v6 = v4;
  return v6 ^ 1u;
}

BOOL llvm::ConstantRange::isSignWrappedSet(llvm::ConstantRange *this)
{
  llvm::APInt *v1;

  v1 = (llvm::ConstantRange *)((char *)this + 16);
  return (int)llvm::APInt::compareSigned(this, (llvm::ConstantRange *)((char *)this + 16)) >= 1
      && !llvm::APInt::isMinSignedValue(v1);
}

BOOL llvm::ConstantRange::isSizeStrictlySmallerThan(const void **this, const void **a2)
{
  _BOOL8 v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;

  if (llvm::ConstantRange::isFullSet(this))
    return 0;
  if (llvm::ConstantRange::isFullSet(a2))
    return 1;
  v5 = *((unsigned int *)this + 6);
  v20 = v5;
  if (v5 > 0x40)
  {
    v7 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v6 = (void *)operator new[]();
    memcpy(v6, this[2], v7);
  }
  else
  {
    v6 = (void *)this[2];
  }
  v19 = (unint64_t)v6;
  llvm::APInt::operator-=((uint64_t)&v19, (_QWORD **)this);
  v8 = v20;
  v9 = v19;
  v20 = 0;
  v10 = *((unsigned int *)a2 + 6);
  v18 = v10;
  if (v10 > 0x40)
  {
    v11 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
    v17 = (char *)operator new[]();
    memcpy(v17, a2[2], v11);
  }
  else
  {
    v17 = (char *)a2[2];
  }
  llvm::APInt::operator-=((uint64_t)&v17, (_QWORD **)a2);
  v12 = v18;
  v18 = 0;
  if (v8 > 0x40)
  {
    v13 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    while (v13)
    {
      v14 = *(_QWORD *)(v9 - 8 + v13);
      v15 = *(_QWORD *)&v17[v13 - 8];
      v13 -= 8;
      if (v14 != v15)
      {
        v4 = v14 <= v15;
        goto LABEL_18;
      }
    }
    v4 = 0;
  }
  else
  {
    v4 = v9 < (unint64_t)v17;
  }
LABEL_18:
  if (v12 >= 0x41)
  {
    if (v17)
    {
      MEMORY[0x24BD1B380](v17, 0x1000C8000313F17);
      if (v18 >= 0x41)
      {
        if (v17)
          MEMORY[0x24BD1B380](v17, 0x1000C8000313F17);
      }
    }
  }
  if (v8 >= 0x41 && v9)
    MEMORY[0x24BD1B380](v9, 0x1000C8000313F17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x24BD1B380](v19, 0x1000C8000313F17);
  return v4;
}

uint64_t getPreferredRange(uint64_t a1, llvm::ConstantRange *this, llvm::ConstantRange *a3, int a4)
{
  char isWrappedSet;
  uint64_t result;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;

  if (a4 == 2)
  {
    if (llvm::ConstantRange::isSignWrappedSet(this)
      || (result = llvm::ConstantRange::isSignWrappedSet(a3), !(_DWORD)result))
    {
      if (llvm::ConstantRange::isSignWrappedSet(this))
      {
        result = llvm::ConstantRange::isSignWrappedSet(a3);
        if ((result & 1) == 0)
          goto LABEL_15;
      }
      goto LABEL_12;
    }
  }
  else
  {
    if (a4 != 1)
      goto LABEL_12;
    isWrappedSet = llvm::ConstantRange::isWrappedSet(this);
    result = llvm::ConstantRange::isWrappedSet(a3);
    if ((isWrappedSet & 1) != 0)
    {
      if ((result & 1) == 0)
        goto LABEL_15;
LABEL_12:
      result = llvm::ConstantRange::isSizeStrictlySmallerThan((const void **)this, (const void **)a3);
      if ((_DWORD)result)
        goto LABEL_13;
LABEL_15:
      v11 = *((unsigned int *)a3 + 2);
      *(_DWORD *)(a1 + 8) = v11;
      if (v11 > 0x40)
      {
        v20 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
        v12 = (void *)operator new[]();
        result = (uint64_t)memcpy(v12, *(const void **)a3, v20);
      }
      else
      {
        v12 = *(void **)a3;
      }
      *(_QWORD *)a1 = v12;
      v21 = *((unsigned int *)a3 + 6);
      *(_DWORD *)(a1 + 24) = v21;
      if (v21 <= 0x40)
      {
        v15 = *((_QWORD *)a3 + 2);
        goto LABEL_24;
      }
      v22 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      *(_QWORD *)(a1 + 16) = v17;
      v18 = (const void *)*((_QWORD *)a3 + 2);
      v19 = v22;
      return (uint64_t)memcpy(v17, v18, v19);
    }
    if (!(_DWORD)result)
      goto LABEL_12;
  }
LABEL_13:
  v9 = *((unsigned int *)this + 2);
  *(_DWORD *)(a1 + 8) = v9;
  if (v9 > 0x40)
  {
    v13 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
    v10 = (void *)operator new[]();
    result = (uint64_t)memcpy(v10, *(const void **)this, v13);
  }
  else
  {
    v10 = *(void **)this;
  }
  *(_QWORD *)a1 = v10;
  v14 = *((unsigned int *)this + 6);
  *(_DWORD *)(a1 + 24) = v14;
  if (v14 <= 0x40)
  {
    v15 = *((_QWORD *)this + 2);
LABEL_24:
    *(_QWORD *)(a1 + 16) = v15;
    return result;
  }
  v16 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
  v17 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = v17;
  v18 = (const void *)*((_QWORD *)this + 2);
  v19 = v16;
  return (uint64_t)memcpy(v17, v18, v19);
}

uint64_t llvm::Constant::getSplatValue(llvm::Constant *this, llvm::Type *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;

  v3 = 0;
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 > 0xC)
  {
    if (v4 != 15)
    {
      if (v4 == 13)
        return llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)this + 24), a2);
      return v3;
    }
    if (llvm::ConstantDataVector::isSplat(this))
      return llvm::ConstantDataSequential::getElementAsConstant(this);
    return 0;
  }
  if (v4 != 5)
  {
    if (v4 == 10)
    {
      v5 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      v6 = *((_QWORD *)this - 4 * v5);
      if (v5 < 2)
      {
        return *((_QWORD *)this - 4 * v5);
      }
      else
      {
        v7 = -32 * v5;
        do
        {
          v3 = *(_QWORD *)((char *)this + v7 + 32);
          v8 = v3 == v6 || (_DWORD)a2 == 0;
          if (v8)
          {
            v8 = v3 == v6;
            v3 = v6;
            if (!v8)
              return 0;
          }
          else if (*(unsigned __int8 *)(v3 + 16) - 11 >= 2)
          {
            if (*(unsigned __int8 *)(v6 + 16) - 11 >= 2)
              return 0;
          }
          else
          {
            v3 = v6;
          }
          v7 += 32;
          v6 = v3;
        }
        while (v7 != -32);
      }
    }
    return v3;
  }
  if (*((_WORD *)this + 9) != 63)
    return 0;
  v10 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (*(unsigned __int8 *)(v10[4] + 16) - 11 > 1)
    return 0;
  v11 = *v10;
  if (!v11 || *(_BYTE *)(v11 + 16) != 5)
    return 0;
  if (*(_WORD *)(v11 + 18) != 62)
    return 0;
  v13 = (_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
  if (*(unsigned __int8 *)(*v13 + 16) - 11 > 1)
    return 0;
  v14 = v13[8];
  if (!v14 || *(_BYTE *)(v14 + 16) != 16)
    return 0;
  v16 = (_DWORD *)*((_QWORD *)this + 3);
  v17 = *((unsigned int *)this + 8);
  v3 = v13[4];
  v18 = (_QWORD *)(v14 + 24);
  v19 = *(_DWORD *)(v14 + 32);
  if (v19 >= 0x41)
  {
    if (v19 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v14 + 24)) > 0x40)
      return 0;
    v18 = (_QWORD *)*v18;
  }
  if (*v18)
    return 0;
  if ((_DWORD)v17)
  {
    v20 = 4 * v17;
    while (!*v16)
    {
      ++v16;
      v20 -= 4;
      if (!v20)
        return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v5;
  unsigned int v6;

  v1 = *((unsigned __int8 *)this + 16);
  if (this && v1 == 16)
  {
    v2 = *((_DWORD *)this + 8);
    if (v2 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) == v2;
    else
      return *((_QWORD *)this + 3) == 0;
  }
  else if (this && v1 == 17)
  {
    return llvm::ConstantFP::isExactlyValue((void **)this, 0.0);
  }
  else
  {
    v5 = v1 > 0x14;
    v6 = (0x1C2000u >> v1) & 1;
    if (v5)
      return 0;
    else
      return v6;
  }
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  char *v2;
  uint64_t SplatValue;

  if (this && *((_BYTE *)this + 16) == 17)
  {
    if (*((_UNKNOWN **)this + 4) == &llvm::semPPCDoubleDouble)
      v2 = (char *)*((_QWORD *)this + 5);
    else
      v2 = (char *)this + 24;
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
      return llvm::Constant::isNullValue(this);
    SplatValue = llvm::Constant::getSplatValue(this, 0);
    if (!SplatValue || *(_BYTE *)(SplatValue + 16) != 17)
      return llvm::Constant::isNullValue(this);
    if (*(_UNKNOWN **)(SplatValue + 32) == &llvm::semPPCDoubleDouble)
      v2 = *(char **)(SplatValue + 40);
    else
      v2 = (char *)(SplatValue + 24);
  }
  return (v2[28] & 7) == 3;
}

BOOL llvm::Constant::isAllOnesValue(llvm::Constant *this)
{
  int v1;
  _BOOL8 isAllOnes;
  uint64_t v4;
  unsigned int v5;

  while (1)
  {
    v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
      return llvm::APInt::isAllOnes((llvm::Constant *)((char *)this + 24));
    if (this && v1 == 17)
      break;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    {
      this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
      if (this)
        continue;
    }
    return 0;
  }
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v4, (llvm::Constant *)((char *)this + 24));
  isAllOnes = llvm::APInt::isAllOnes((llvm::APInt *)&v4);
  if (v5 >= 0x41 && v4)
    MEMORY[0x24BD1B380](v4, 0x1000C8000313F17);
  return isAllOnes;
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Type *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  llvm::Constant **v11;
  llvm::PoisonValue **v13;
  llvm::UndefValue **v14;

  v2 = *((unsigned __int8 *)this + 16);
  if (this && (v2 - 11) >= 0xFDu)
  {
    v3 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v3 > a2)
      return *((_QWORD *)this + 4 * a2 + -4 * v3);
    return 0;
  }
  v5 = *(_QWORD *)this;
  v6 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (this && v2 == 13)
  {
    if (v5 && v6 == 17)
    {
      v7 = *(_DWORD *)(v5 + 32);
    }
    else if (v5 && (v6 & 0xFE) == 0x12)
    {
      v7 = *(_DWORD *)(v5 + 32);
    }
    else
    {
      v7 = *(_DWORD *)(v5 + 12);
    }
    if (v7 > a2)
    {
      if (v6 == 17 || (v6 & 0xFE) == 18)
        v11 = (llvm::Constant **)(v5 + 24);
      else
        v11 = (llvm::Constant **)(*(_QWORD *)(v5 + 16) + 8 * a2);
      return llvm::Constant::getNullValue(*v11, a2);
    }
    return 0;
  }
  if (v6 == 19)
    return 0;
  if (v2 == 12)
  {
    if (v6 == 17 || (v6 & 0xFE) == 0x12)
      v8 = *(_DWORD *)(v5 + 32);
    else
      v8 = *(_DWORD *)(v5 + 12);
    if (v8 <= a2)
      return 0;
    if (v6 == 17 || (v6 & 0xFE) == 18)
      v13 = (llvm::PoisonValue **)(v5 + 24);
    else
      v13 = (llvm::PoisonValue **)(*(_QWORD *)(v5 + 16) + 8 * a2);
    return llvm::PoisonValue::get(*v13, a2);
  }
  else
  {
    if ((v2 - 11) > 1u)
    {
      if ((v2 & 0xFE) == 0xE && *(_DWORD *)(v5 + 32) > a2)
        return llvm::ConstantDataSequential::getElementAsConstant(this);
      return 0;
    }
    if (v6 == 17 || (v6 & 0xFE) == 0x12)
      v9 = *(_DWORD *)(v5 + 32);
    else
      v9 = *(_DWORD *)(v5 + 12);
    if (v9 <= a2)
      return 0;
    if (v6 == 17 || (v6 & 0xFE) == 0x12)
      v14 = (llvm::UndefValue **)(v5 + 24);
    else
      v14 = (llvm::UndefValue **)(*(_QWORD *)(v5 + 16) + 8 * a2);
    return llvm::UndefValue::get(*v14, a2);
  }
}

llvm::Constant *llvm::ConstantExpr::getICmp(llvm::ConstantExpr *this, unsigned __int8 *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  __int16 v7;
  llvm::Constant *result;
  unint64_t *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v4 = (char)a4;
  v7 = (__int16)this;
  v18[2] = *MEMORY[0x24BDAC8D0];
  result = llvm::ConstantFoldCompareInstruction((int)this, a2, (unsigned __int8 *)a3, (BOOL)a4);
  if (!result && (v4 & 1) == 0)
  {
    v18[0] = a2;
    v18[1] = a3;
    v10 = ***(_QWORD ***)a2;
    v11 = (uint64_t **)(v10 + 1920);
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get(v11, (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a2 + 32) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)a2 + 8) == 19) << 32)));
      v11 = v12;
      v10 = ***(_QWORD ***)a2;
    }
    LOWORD(v13) = 53;
    WORD1(v13) = v7;
    *((_QWORD *)&v13 + 1) = v18;
    v14 = 2;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    return (llvm::Constant *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v10 + 1544, (llvm::Type *)v11, &v13, v9);
  }
  return result;
}

uint64_t containsUndefinedElement(llvm::Constant *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  int v9;
  llvm::Type *v10;
  uint64_t AggregateElement;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v4 = (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 18;
  else
    v4 = 0;
  if (!v4)
    return 0;
  if ((a2(a3, (uint64_t)a1) & 1) == 0)
  {
    if (*((_BYTE *)a1 + 16) == 13)
      return 0;
    if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 19)
      return 0;
    v9 = *(_DWORD *)(v3 + 32);
    if (!v9)
      return 0;
    v10 = 0;
    while (1)
    {
      AggregateElement = llvm::Constant::getAggregateElement(a1, v10);
      if (AggregateElement)
      {
        if ((a2(a3, AggregateElement) & 1) != 0)
          break;
      }
      result = 0;
      v10 = (llvm::Type *)((_DWORD)v10 + 1);
      if (v9 == (_DWORD)v10)
        return result;
    }
  }
  return 1;
}

BOOL llvm::Constant::containsConstantExpression(llvm::Constant *this)
{
  BOOL v1;
  int v2;
  llvm::Type *v4;
  int v5;
  int v6;
  _BOOL8 result;
  BOOL v8;

  if (*(_QWORD *)this)
    v1 = *(_BYTE *)(*(_QWORD *)this + 8) == 18;
  else
    v1 = 0;
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (!v2)
    return 0;
  v4 = 0;
  v5 = v2 - 1;
  do
  {
    v6 = *(unsigned __int8 *)(llvm::Constant::getAggregateElement(this, v4) + 16);
    result = v6 == 5;
    v8 = v6 == 5 || v5 == (_DWORD)v4;
    v4 = (llvm::Type *)((_DWORD)v4 + 1);
  }
  while (!v8);
  return result;
}

void llvm::Constant::getNullValue(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24A9BF298@<X0>(uint64_t *a1@<X0>, char a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[464];

  v2 = *a1;
  llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v6, *(&off_251C1E910 + a2));
  llvm::APFloat::makeZero((llvm::APFloat *)&v5, 0);
  v3 = llvm::ConstantFP::get(v2, (uint64_t)&v5);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v6);
  return v3;
}

uint64_t llvm::ConstantInt::get(llvm::ConstantInt *this, llvm::Type *a2, int a3)
{
  llvm::ConstantInt *v3;
  uint64_t result;
  llvm::Constant *v5;

  v3 = this;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    this = (llvm::ConstantInt *)**((_QWORD **)this + 2);
  result = llvm::ConstantInt::get((uint64_t)this, (uint64_t)a2, a3);
  if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)v3 + 8) | ((unint64_t)(*((_DWORD *)v3 + 2) == 19) << 32)), result, v5);
  return result;
}

uint64_t llvm::ConstantFP::get(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  void *v6;
  const llvm::APFloat::Storage *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = (uint64_t *)((char *)llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::FindAndConstruct((uint64_t *)(*(_QWORD *)a1 + 240), a2)+ 32);
  result = *v5;
  if (!*v5)
  {
    v8 = *(void **)(a2 + 8);
    v7 = (const llvm::APFloat::Storage *)(a2 + 8);
    v6 = v8;
    if (v8 == &llvm::semIEEEhalf)
    {
      v9 = *(_QWORD *)a1 + 1656;
    }
    else if (v6 == &llvm::semBFloat)
    {
      v9 = *(_QWORD *)a1 + 1680;
    }
    else if (v6 == &llvm::semIEEEsingle)
    {
      v9 = *(_QWORD *)a1 + 1704;
    }
    else if (v6 == &llvm::semIEEEdouble)
    {
      v9 = *(_QWORD *)a1 + 1728;
    }
    else if (v6 == &llvm::semX87DoubleExtended)
    {
      v9 = *(_QWORD *)a1 + 1800;
    }
    else if (v6 == &llvm::semIEEEquad)
    {
      v9 = *(_QWORD *)a1 + 1824;
    }
    else
    {
      v9 = *(_QWORD *)a1 + 1848;
    }
    v10 = operator new(0x38uLL);
    *v10 = v9;
    v10[1] = 0;
    v10[2] = 17;
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)(v10 + 4), v7);
    std::unique_ptr<llvm::ConstantFP>::reset[abi:nn180100](v5, (uint64_t)v10);
    return *v5;
  }
  return result;
}

uint64_t llvm::ConstantPointerNull::get(uint64_t a1)
{
  uint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v4 = a1;
  v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(_QWORD **)a1 + 1352), &v4)+ 1;
  result = *v2;
  if (!*v2)
  {
    v3 = operator new(0x18uLL);
    *v3 = v4;
    v3[1] = 0;
    v3[2] = 19;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v2, v3);
    return *v2;
  }
  return result;
}

uint64_t llvm::ConstantAggregateZero::get(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  llvm::ConstantAggregateZero *v5;

  v5 = this;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(_QWORD **)this + 1256), &v5)+ 1;
  result = *v3;
  if (!*v3)
  {
    v4 = operator new(0x18uLL);
    *v4 = v5;
    v4[1] = 0;
    v4[2] = 13;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v3, v4);
    return *v3;
  }
  return result;
}

uint64_t llvm::ConstantTokenNone::get(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;

  v2 = *a1;
  result = *(_QWORD *)(*a1 + 2064);
  if (!result)
  {
    v4 = v2 + 2064;
    v5 = operator new(0x18uLL);
    *v5 = *a1 + 1776;
    v5[1] = 0;
    v5[2] = 20;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v4, v5);
    return *(_QWORD *)v4;
  }
  return result;
}

uint64_t llvm::ConstantTargetNone::get(uint64_t a1)
{
  uint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v4 = a1;
  v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(_QWORD **)a1 + 1376), &v4)+ 1;
  result = *v2;
  if (!*v2)
  {
    v3 = operator new(0x18uLL);
    *v3 = v4;
    v3[1] = 0;
    v3[2] = 18;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v2, v3);
    return *v2;
  }
  return result;
}

uint64_t llvm::ConstantInt::get(llvm::IntegerType *a1, llvm::APInt *this, uint64_t a3, unint64_t *a4)
{
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int *v9;
  int v10;
  _DWORD *v11;
  uint64_t result;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v6 = *(uint64_t **)a1;
  v7 = *((_DWORD *)this + 2);
  if (v7 > 0x40)
  {
    v10 = llvm::APInt::countLeadingZerosSlowCase(this);
    if (v10 != v7)
    {
      if (v10 == v7 - 1)
        goto LABEL_4;
      goto LABEL_9;
    }
LABEL_6:
    v8 = v6 + 21;
    v17 = v7;
    v9 = &v17;
    goto LABEL_7;
  }
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if (*(_QWORD *)this == 1)
  {
LABEL_4:
    v8 = v6 + 24;
    v16 = v7;
    v9 = &v16;
LABEL_7:
    v11 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(v8, v9)+ 2;
    goto LABEL_10;
  }
LABEL_9:
  v11 = (_DWORD *)((char *)llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(v6 + 27, (llvm::hashing::detail::hash_state **)this, a3, a4)+ 16);
LABEL_10:
  result = *(_QWORD *)v11;
  if (!*(_QWORD *)v11)
  {
    v13 = llvm::IntegerType::get(a1, (llvm::LLVMContext *)*((unsigned int *)this + 2));
    v14 = operator new(0x28uLL);
    v14[5] &= 0x38000000u;
    result = llvm::ConstantInt::ConstantInt((uint64_t)v14, (uint64_t)v13, (uint64_t)this);
    v15 = *(_QWORD *)v11;
    *(_QWORD *)v11 = result;
    if (v15)
    {
      std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100]((uint64_t)v11, v15);
      return *(_QWORD *)v11;
    }
  }
  return result;
}

uint64_t llvm::ConstantVector::getSplat(llvm::Type *a1, uint64_t a2, llvm::Constant *a3)
{
  unsigned int v4;
  llvm::ConstantAggregateZero *v5;
  llvm::ConstantAggregateZero *v6;
  llvm::Type *v7;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  _QWORD *ShuffleVector;
  void *v16;
  llvm::ConstantInt *v17;
  llvm::ConstantExpr *v18;
  BOOL v19;
  llvm::Constant *v20;
  llvm::Type *v21;
  llvm::ConstantExpr *InsertElement;
  void *v23;
  uint64_t v24;
  _QWORD v25[33];

  v4 = a1;
  v25[32] = *MEMORY[0x24BDAC8D0];
  if (((unint64_t)a1 & 0xFF00000000) == 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 0xFE) == 0x10)
    {
      v9 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if (v9 < 4u)
        return llvm::ConstantDataVector::getSplat(a1, (_QWORD **)a2, a3);
      if (v9 == 13)
      {
        HIDWORD(v11) = v9 >> 8;
        LODWORD(v11) = (v9 >> 8) - 8;
        v10 = v11 >> 3;
        v12 = v10 > 7;
        v13 = (1 << v10) & 0x8B;
        if (!v12 && v13 != 0)
          return llvm::ConstantDataVector::getSplat(a1, (_QWORD **)a2, a3);
      }
    }
    v23 = v25;
    v24 = 0x2000000000;
    llvm::SmallVectorImpl<llvm::Constant *>::assign((uint64_t)&v23, a1, a2);
    ShuffleVector = llvm::ConstantVector::get((uint64_t ****)v23, (llvm::Type *)v24);
    v16 = v23;
    if (v23 == v25)
      return (uint64_t)ShuffleVector;
    goto LABEL_15;
  }
  llvm::VectorType::get(*(uint64_t ***)a2, a1);
  v6 = v5;
  if (llvm::Constant::isNullValue((llvm::Constant *)a2))
    return llvm::ConstantAggregateZero::get(v6, v7);
  if (*(unsigned __int8 *)(a2 + 16) - 11 <= 1)
    return llvm::UndefValue::get(v6, v7);
  v17 = (llvm::ConstantInt *)(**(_QWORD **)v6 + 2016);
  v18 = (llvm::ConstantExpr *)llvm::PoisonValue::get(v6, v7);
  v20 = (llvm::Constant *)llvm::ConstantInt::get(v17, 0, 0, v19);
  InsertElement = llvm::ConstantExpr::getInsertElement(v18, (llvm::Constant *)a2, v20, 0, v21);
  v23 = v25;
  v24 = 0x800000000;
  llvm::SmallVectorImpl<int>::assign((uint64_t)&v23, v4, 0);
  ShuffleVector = llvm::ConstantExpr::getShuffleVector(InsertElement, v18, (int *)v23, v24, 0);
  v16 = v23;
  if (v23 != v25)
LABEL_15:
    free(v16);
  return (uint64_t)ShuffleVector;
}

uint64_t llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2)
{
  unsigned int v3;
  llvm::IntegerType *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t AllOnesValue;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16[6];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *((_DWORD *)this + 2);
  if (this && v3 == 13)
  {
    v4 = *(llvm::IntegerType **)this;
    llvm::APInt::APInt((llvm::APInt *)&v15, v3 >> 8, -1, 1);
    v7 = llvm::ConstantInt::get(v4, (llvm::APInt *)&v15, v5, v6);
    if (v16[0] >= 0x41)
    {
      if (v15)
        MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
    }
  }
  else
  {
    if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
    {
      v10 = *((unsigned int *)this + 8);
      v11 = v3 == 19;
      AllOnesValue = llvm::Constant::getAllOnesValue(*((llvm::Constant **)this + 3), a2);
      return llvm::ConstantVector::getSplat(v10 | (v11 << 32), AllOnesValue, v13);
    }
    llvm::APFloat::getAllOnesValue((unsigned int *)*(&off_251C1E910 + (char)v3), (uint64_t)&v15);
    v7 = llvm::ConstantFP::get(*(_QWORD *)this, (uint64_t)&v15);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v16);
  }
  return v7;
}

uint64_t llvm::ConstantDataSequential::getElementAsConstant(llvm::ConstantDataSequential *this)
{
  llvm::ConstantInt *v1;
  llvm::Type *v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v1 = *(llvm::ConstantInt **)(*(_QWORD *)this + 24);
  if ((*((_BYTE *)v1 + 8) & 0xFC) != 0)
  {
    llvm::ConstantDataSequential::getElementAsInteger(this);
    return llvm::ConstantInt::get(v1, v2, 0, v3);
  }
  else
  {
    v5 = **(_QWORD **)this;
    llvm::ConstantDataSequential::getElementAsAPFloat(this);
    v6 = llvm::ConstantFP::get(v5, (uint64_t)v7);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v8);
    return v6;
  }
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Constant *a2)
{
  unsigned int *v3;
  unsigned int v4;

  if (!a2 || *((_BYTE *)a2 + 16) != 16)
    return 0;
  v3 = (unsigned int *)((char *)a2 + 24);
  v4 = *((_DWORD *)a2 + 8);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40)
      return 0;
    v3 = *(unsigned int **)v3;
  }
  return llvm::Constant::getAggregateElement(this, (llvm::Type *)*v3);
}

void llvm::Constant::destroyConstant(llvm::Constant *this)
{
  __asm { BR              X10 }
}

void sub_24A9BFD4C()
{
  uint64_t v0;
  llvm::Constant *v1;
  uint64_t v2;

  llvm::ConstantDataSequential::destroyConstantImpl((llvm::Value **)v0);
  while (1)
  {
    v2 = *(_QWORD *)(v0 + 8);
    if (!v2)
      break;
    llvm::Constant::destroyConstant(*(llvm::Constant **)(v2 + 24));
  }
  llvm::deleteConstant((llvm *)v0, v1);
}

void sub_24A9BFF94()
{
  llvm::UndefValue *v0;

  llvm::UndefValue::destroyConstantImpl(v0);
}

void llvm::UndefValue::destroyConstantImpl(llvm::UndefValue *this)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _QWORD **v5;

  if (*((_BYTE *)this + 16) == 11)
  {
    v1 = *(_QWORD ***)this;
    v2 = ***(_QWORD ***)this + 1400;
    v5 = v1;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(v2, &v5);
    __break(1u);
  }
  v3 = *(_QWORD ***)this;
  v4 = ***(_QWORD ***)this + 1424;
  v5 = v3;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(v4, &v5);
  __break(1u);
}

void llvm::ConstantDataSequential::destroyConstantImpl(llvm::Value **this)
{
  uint64_t v2;
  uint64_t *RawDataValues;
  unint64_t v4;
  int Key;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value **v9;
  uint64_t v10;
  llvm::Value **v11;
  llvm::ConstantDataSequential *v12;
  llvm::Value *v13;

  v2 = **(_QWORD **)*this;
  RawDataValues = (uint64_t *)llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)this);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(v2 + 1448), RawDataValues, v4);
  v6 = *(_QWORD *)(v2 + 1448);
  if (Key == -1)
    v7 = *(unsigned int *)(v2 + 1456);
  else
    v7 = Key;
  v8 = *(_QWORD *)(v6 + 8 * v7);
  v10 = *(_QWORD *)(v8 + 8);
  v9 = (llvm::Value **)(v8 + 8);
  if (!*(_QWORD *)(v10 + 32))
  {
    llvm::StringMapImpl::RemoveKey(**(_QWORD **)*this + 1448, (uint64_t *)(*(_QWORD *)(v6 + 8 * v7) + *(unsigned int *)(**(_QWORD **)*this + 1468)), **(_QWORD **)(v6 + 8 * v7));
    std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](v9, 0);
    JUMPOUT(0x24BD1B398);
  }
  do
  {
    v11 = v9;
    v12 = *v9;
    v9 = (llvm::Value **)((char *)*v9 + 32);
  }
  while (v12 != (llvm::ConstantDataSequential *)this);
  v13 = this[4];
  this[4] = 0;
  std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](v11, v13);
}

void llvm::deleteConstant(llvm *this, llvm::Constant *a2)
{
  __asm { BR              X10 }
}

void sub_24A9C0104()
{
  llvm::Value *v0;

  llvm::Value::~Value(v0);
  llvm::User::operator delete((void **)v0);
}

void sub_24A9C011C()
{
  uint64_t v0;

  std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100]((llvm::Value **)(v0 + 32), 0);
  sub_24A9C0104();
}

void llvm::ShuffleVectorConstantExpr::~ShuffleVectorConstantExpr(llvm::ShuffleVectorConstantExpr *this, llvm::Value *a2)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 3);
  if (v3 != (char *)this + 40)
    free(v3);
  llvm::Value::~Value(this, a2);
}

uint64_t llvm::Constant::isConstantUsed(llvm::Constant *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  BOOL v3;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(unsigned __int8 **)(v1 + 24);
    v3 = v2 && v2[16] - 21 >= 0xFFFFFFEF;
    if (!v3 || llvm::Constant::isConstantUsed((llvm::Constant *)v2))
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  return 1;
}

uint64_t llvm::Constant::removeDeadConstantUsers(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;

  v1 = (uint64_t *)(this + 8);
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 24);
      if (this)
        v4 = *(unsigned __int8 *)(this + 16) >= 0x15u;
      else
        v4 = 1;
      if (v4)
      {
        v5 = (uint64_t *)(v2 + 8);
      }
      else
      {
        this = constantIsDead((const llvm::Constant *)this, (const llvm::Constant *)1);
        v5 = (uint64_t *)(v3 + 8);
        if (!v3)
          v5 = v1;
        if ((this & 1) != 0)
          v2 = v3;
        else
          v5 = (uint64_t *)(v2 + 8);
      }
      v3 = v2;
      v2 = *v5;
    }
    while (*v5);
  }
  return this;
}

uint64_t constantIsDead(const llvm::Constant *a1, const llvm::Constant *a2)
{
  uint64_t result;
  _BOOL4 v3;
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t *v9;

  if (*((unsigned __int8 *)a1 + 16) < 4u)
    return 0;
  v3 = (int)a2;
  v5 = (char *)a1 + 8;
  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    do
    {
      v7 = *(unsigned __int8 **)(v6 + 24);
      if (!v7 || v7[16] > 0x14u)
        return 0;
      result = constantIsDead((const llvm::Constant *)v7, v3);
      if (!(_DWORD)result)
        return result;
      v9 = (uint64_t *)(v6 + 8);
      if (v3)
        v9 = (uint64_t *)v5;
      v6 = *v9;
    }
    while (*v9);
  }
  if (v3)
  {
    llvm::ReplaceableMetadataImpl::SalvageDebugInfo((uint64_t ***)a1, a2);
    llvm::Constant::destroyConstant(a1);
  }
  return 1;
}

_QWORD *llvm::ConstantVector::get(uint64_t ****a1, llvm::Type *a2)
{
  _QWORD *result;
  _QWORD **v5;

  result = (_QWORD *)llvm::ConstantVector::getImpl(a1, a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    return llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(**v5 + 1328, (uint64_t)v5, (uint64_t *)a1, (unint64_t *)a2);
  }
  return result;
}

llvm::Value *llvm::UndefValue::get(llvm::UndefValue *this, llvm::Type *a2)
{
  llvm::Value *result;
  llvm::Value **v3;
  llvm::Value *v4;
  llvm::UndefValue *v5;

  v5 = this;
  v3 = (llvm::Value **)(llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(_QWORD **)this + 1400), &v5)+ 1);
  result = *v3;
  if (!*v3)
  {
    v4 = (llvm::Value *)operator new(0x18uLL);
    *(_QWORD *)v4 = v5;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 11;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v3, v4);
    return *v3;
  }
  return result;
}

uint64_t llvm::ConstantInt::ConstantInt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  void *v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 16;
  *(_DWORD *)(a1 + 20) = v5;
  v6 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 32) = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    *(_QWORD *)(a1 + 24) = v7;
    memcpy(v7, *(const void **)a3, (((unint64_t)*(unsigned int *)(a1 + 32) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)a3;
  }
  return a1;
}

uint64_t llvm::ConstantInt::get(uint64_t a1, uint64_t a2, int a3)
{
  llvm::IntegerType *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;

  v3 = *(llvm::IntegerType **)a1;
  llvm::APInt::APInt((llvm::APInt *)&v8, *(_DWORD *)(a1 + 8) >> 8, a2, a3);
  v6 = llvm::ConstantInt::get(v3, (llvm::APInt *)&v8, v4, v5);
  if (v9 >= 0x41 && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  return v6;
}

uint64_t llvm::ConstantInt::get(llvm::IntegerType **this, llvm::Type *a2, const llvm::APInt *a3, unint64_t *a4)
{
  uint64_t result;
  llvm::Constant *v6;

  result = llvm::ConstantInt::get(*this, a2, (uint64_t)a3, a4);
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), result, v6);
  return result;
}

uint64_t llvm::ConstantFP::get(llvm::ConstantFP *this, llvm::Type *a2, double a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t Splat;
  char v9;
  _BYTE v10[8];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)this;
  llvm::APFloat::APFloat((llvm::APFloat *)v10, a3);
  v5 = *((_DWORD *)this + 2);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  llvm::APFloat::convert((uint64_t)v10, *(&off_251C1E910 + (char)v5), 1, &v9);
  Splat = llvm::ConstantFP::get(v4, (uint64_t)v10);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat, v6);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v11);
  return Splat;
}

uint64_t llvm::ConstantFP::getNaN(llvm::ConstantFP *this, llvm::Type *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t Splat;
  _BYTE v8[8];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  llvm::APFloat::getNaN(*(&off_251C1E910 + (char)v4), (char)a2, a3, (uint64_t)v8);
  Splat = llvm::ConstantFP::get(*(_QWORD *)this, (uint64_t)v8);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat, v5);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v9);
  return Splat;
}

uint64_t llvm::ConstantFP::getZero(llvm::ConstantFP *this, llvm::Type *a2)
{
  int v2;
  int v4;
  uint64_t v5;
  uint64_t Splat;
  _BYTE v8[8];
  _QWORD v9[4];

  v2 = (int)a2;
  v9[3] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v9, *(&off_251C1E910 + (char)v4));
  llvm::APFloat::makeZero((llvm::APFloat *)v8, v2);
  Splat = llvm::ConstantFP::get(*(_QWORD *)this, (uint64_t)v8);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat, v5);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v9);
  return Splat;
}

void std::unique_ptr<llvm::ConstantFP>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v2 + 32));
    llvm::Value::~Value((llvm::Value *)v2);
    llvm::User::operator delete(v3);
  }
}

uint64_t llvm::PoisonValue::get(llvm::PoisonValue *this, llvm::Type *a2)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  llvm::PoisonValue *v5;

  v5 = this;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct((uint64_t *)(**(_QWORD **)this + 1424), &v5)+ 1;
  result = *v3;
  if (!*v3)
  {
    v4 = operator new(0x18uLL);
    *v4 = v5;
    v4[1] = 0;
    v4[2] = 12;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v3, v4);
    return *v3;
  }
  return result;
}

_QWORD *llvm::ConstantArray::get(llvm::PoisonValue *a1, llvm::Type *a2, unint64_t *a3)
{
  _QWORD *result;

  result = (_QWORD *)llvm::ConstantArray::getImpl(a1, a2, (uint64_t)a3);
  if (!result)
    return llvm::ConstantUniqueMap<llvm::ConstantArray>::getOrCreate(**(_QWORD **)a1 + 1280, (uint64_t)a1, (uint64_t *)a2, a3);
  return result;
}

uint64_t llvm::ConstantArray::getImpl(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  llvm::Type *i;
  uint64_t v11;
  llvm::Type *j;
  uint64_t v13;
  llvm::Type *k;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v22;
  unsigned int v23;
  uint64_t v26;
  llvm::Type **v27;
  uint64_t v28;
  uint64_t v29;
  int *v31;
  uint64_t Impl;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 LimitedValue;
  llvm::Type *v44;
  llvm::Type *v45;
  llvm::ConstantAggregateZero *v46;
  llvm::ConstantAggregateZero *v47;
  llvm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v58;
  uint64_t v59;
  llvm::ConstantAggregateZero *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v65;
  uint64_t **v66;
  unsigned int v67;
  void *v68;
  llvm::Type *v69[2];
  _QWORD v70[16];

  v70[15] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return llvm::ConstantAggregateZero::get(this, a2);
  v6 = *(unsigned __int8 **)a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  if (v7 == 12)
  {
    v8 = 8 * a3;
    for (i = a2; *(unsigned __int8 **)i == v6; i = (llvm::Type *)((char *)i + 8))
    {
      v8 -= 8;
      if (!v8)
        return llvm::PoisonValue::get(this, a2);
    }
  }
  if ((v7 - 11) <= 1)
  {
    v11 = 8 * a3;
    for (j = a2; *(unsigned __int8 **)j == v6; j = (llvm::Type *)((char *)j + 8))
    {
      v11 -= 8;
      if (!v11)
        return llvm::UndefValue::get(this, a2);
    }
  }
  if (llvm::Constant::isNullValue(*(llvm::Constant **)a2))
  {
    v13 = 8 * a3;
    for (k = a2; *(unsigned __int8 **)k == v6; k = (llvm::Type *)((char *)k + 8))
    {
      v13 -= 8;
      if (!v13)
        return llvm::ConstantAggregateZero::get(this, a2);
    }
  }
  v15 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  v16 = v15;
  if (v15 >= 4u)
  {
    if (v15 != 13)
      return 0;
    HIDWORD(v18) = v15 >> 8;
    LODWORD(v18) = (v15 >> 8) - 8;
    v17 = v18 >> 3;
    v19 = v17 > 7;
    v20 = (1 << v17) & 0x8B;
    if (v19 || v20 == 0)
      return 0;
  }
  v22 = v6[16];
  if (v22 == 17)
  {
    if (v15 < 2u)
    {
      v39 = 0;
      v27 = (llvm::Type **)v70;
      v68 = v70;
      *(_OWORD *)v69 = xmmword_24AA2D860;
      v40 = 8 * a3;
      while (1)
      {
        v41 = *(_QWORD *)((char *)a2 + v39);
        if (!v41 || *(_BYTE *)(v41 + 16) != 17)
          goto LABEL_106;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v66, (llvm::APFloat *)(v41 + 24));
        LimitedValue = (unsigned __int16)llvm::APInt::getLimitedValue(&v66, 0xFFFFFFFFFFFFFFFFLL);
        llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v68, LimitedValue);
        if (v67 >= 0x41 && v66)
          MEMORY[0x24BD1B380](v66, 0x1000C8000313F17);
        v39 += 8;
        if (v40 == v39)
        {
          v44 = (llvm::Type *)v68;
          v45 = v69[0];
          llvm::ArrayType::get(**(uint64_t ****)a2, v69[0]);
          v47 = v46;
          v48 = (llvm::Type *)(2 * (_QWORD)v45);
LABEL_92:
          Impl = llvm::ConstantDataSequential::getImpl(v44, v48, v47);
LABEL_93:
          v33 = Impl;
          goto LABEL_107;
        }
      }
    }
    if (v15 == 2)
    {
      v54 = 0;
      v27 = &v69[1];
      v68 = &v69[1];
      v69[0] = (llvm::Type *)0x1000000000;
      v55 = 8 * a3;
      while (1)
      {
        v56 = *(_QWORD *)((char *)a2 + v54);
        if (!v56 || *(_BYTE *)(v56 + 16) != 17)
          break;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v66, (llvm::APFloat *)(v56 + 24));
        v58 = llvm::APInt::getLimitedValue(&v66, 0xFFFFFFFFFFFFFFFFLL);
        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v68, v58);
        if (v67 >= 0x41 && v66)
          MEMORY[0x24BD1B380](v66, 0x1000C8000313F17);
        v54 += 8;
        if (v55 == v54)
        {
          v44 = (llvm::Type *)v68;
          v59 = LODWORD(v69[0]);
          llvm::ArrayType::get(**(uint64_t ****)a2, (llvm::Type *)LODWORD(v69[0]));
          v47 = v60;
          v48 = (llvm::Type *)(4 * v59);
          goto LABEL_92;
        }
      }
LABEL_106:
      v33 = 0;
LABEL_107:
      if (v68 != v27)
        free(v68);
      return v33;
    }
    if (v15 == 3)
      return getFPSequenceIfElementsMatch<llvm::ConstantDataArray,unsigned long long>((uint64_t ****)a2, a3);
    return 0;
  }
  if (v22 != 16)
    return 0;
  v23 = v15 >> 8;
  if (v16 == 13 && v23 == 8)
  {
    v34 = 0;
    v27 = (llvm::Type **)v70;
    v68 = v70;
    *(_OWORD *)v69 = xmmword_24AA2D860;
    v35 = 8 * a3;
    while (1)
    {
      v36 = *(_QWORD *)((char *)a2 + v34);
      if (!v36 || *(_BYTE *)(v36 + 16) != 16)
        goto LABEL_106;
      v38 = (char *)(v36 + 24);
      if (*(_DWORD *)(v36 + 32) >= 0x41u)
        v38 = *(char **)v38;
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v68, *v38);
      v34 += 8;
      if (v35 == v34)
      {
        Impl = llvm::ConstantDataArray::get<unsigned char>(***(_QWORD ***)a2, (llvm::Type *)v68, v69[0]);
        goto LABEL_93;
      }
    }
  }
  if (v16 == 13 && v23 == 16)
  {
    v49 = 0;
    v27 = (llvm::Type **)v70;
    v68 = v70;
    *(_OWORD *)v69 = xmmword_24AA2D860;
    v50 = 8 * a3;
    while (1)
    {
      v51 = *(_QWORD *)((char *)a2 + v49);
      if (!v51 || *(_BYTE *)(v51 + 16) != 16)
        goto LABEL_106;
      v53 = (__int16 *)(v51 + 24);
      if (*(_DWORD *)(v51 + 32) >= 0x41u)
        v53 = *(__int16 **)v53;
      llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v68, *v53);
      v49 += 8;
      if (v50 == v49)
      {
        Impl = llvm::ConstantDataArray::get<unsigned short>(***(_QWORD ***)a2, (llvm::Type *)v68, v69[0]);
        goto LABEL_93;
      }
    }
  }
  if (v16 == 13 && v23 == 32)
  {
    v26 = 0;
    v27 = &v69[1];
    v68 = &v69[1];
    v69[0] = (llvm::Type *)0x1000000000;
    v28 = 8 * a3;
    while (1)
    {
      v29 = *(_QWORD *)((char *)a2 + v26);
      if (!v29 || *(_BYTE *)(v29 + 16) != 16)
        goto LABEL_106;
      v31 = (int *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u)
        v31 = *(int **)v31;
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v68, *v31);
      v26 += 8;
      if (v28 == v26)
      {
        Impl = llvm::ConstantDataArray::get<unsigned int>(***(_QWORD ***)a2, (llvm::Type *)v68, (llvm::Type *)LODWORD(v69[0]));
        goto LABEL_93;
      }
    }
  }
  v33 = 0;
  if (v16 == 13 && v23 == 64)
  {
    v61 = 0;
    v27 = &v69[1];
    v68 = &v69[1];
    v69[0] = (llvm::Type *)0x1000000000;
    v62 = 8 * a3;
    while (1)
    {
      v63 = *(_QWORD *)((char *)a2 + v61);
      if (!v63 || *(_BYTE *)(v63 + 16) != 16)
        goto LABEL_106;
      v65 = (uint64_t *)(v63 + 24);
      if (*(_DWORD *)(v63 + 32) >= 0x41u)
        v65 = (uint64_t *)*v65;
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v68, *v65);
      v61 += 8;
      if (v62 == v61)
      {
        Impl = llvm::ConstantDataArray::get<unsigned long long>(***(_QWORD ***)a2, (llvm::Type *)v68, (llvm::Type *)LODWORD(v69[0]));
        goto LABEL_93;
      }
    }
  }
  return v33;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantArray>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  int HashValue;
  __int128 v10;
  unint64_t *v11;
  __int128 v12;
  unint64_t *v13;
  uint64_t *v14;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  v13 = a4;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v12, a2, (uint64_t)a3, a4);
  v10 = v12;
  v11 = v13;
  v14 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (uint64_t)&HashValue, &v14)|| v14 == (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantArray>::create(a1, a2, a3, (uint64_t)a4, (uint64_t)&HashValue);
  }
  else
  {
    return (_QWORD *)*v14;
  }
}

llvm::Value *llvm::ConstantStruct::get(llvm::ConstantAggregateZero *this, llvm::Type *a2, unint64_t *a3)
{
  int v6;
  int isNullValue;
  char v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  llvm::Constant **v13;
  llvm::Constant *v14;
  llvm::Constant *v15;
  int v16;

  if (!a3)
    return (llvm::Value *)llvm::ConstantAggregateZero::get(this, a2);
  v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  isNullValue = llvm::Constant::isNullValue(*(llvm::Constant **)a2);
  if ((v6 - 11) >= 2 && isNullValue == 0)
    return (llvm::Value *)llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(**(_QWORD **)this + 1304, (uint64_t)this, (uint64_t *)a2, a3);
  v9 = isNullValue;
  v10 = (v6 - 11) < 2;
  v11 = v6 == 12;
  v12 = 8 * (_QWORD)a3;
  v13 = (llvm::Constant **)a2;
  do
  {
    v15 = *v13++;
    v14 = v15;
    if (!llvm::Constant::isNullValue(v15))
      v9 = 0;
    v16 = *((unsigned __int8 *)v14 + 16);
    if (v16 != 12)
      v11 = 0;
    if (v16 != 11)
      v10 = 0;
    v12 -= 8;
  }
  while (v12);
  if ((v9 & 1) != 0)
    return (llvm::Value *)llvm::ConstantAggregateZero::get(this, a2);
  if (v11)
    return (llvm::Value *)llvm::PoisonValue::get(this, a2);
  if (!v10)
    return (llvm::Value *)llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(**(_QWORD **)this + 1304, (uint64_t)this, (uint64_t *)a2, a3);
  return llvm::UndefValue::get(this, a2);
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantStruct>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  int HashValue;
  __int128 v10;
  unint64_t *v11;
  __int128 v12;
  unint64_t *v13;
  uint64_t *v14;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  v13 = a4;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v12, a2, (uint64_t)a3, a4);
  v10 = v12;
  v11 = v13;
  v14 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (uint64_t)&HashValue, &v14)|| v14 == (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantStruct>::create(a1, a2, a3, (uint64_t)a4, (uint64_t)&HashValue);
  }
  else
  {
    return (_QWORD *)*v14;
  }
}

uint64_t llvm::ConstantVector::getImpl(uint64_t ****a1, llvm::Type *a2)
{
  llvm::Type *v2;
  llvm::ConstantAggregateZero *v4;
  llvm::ConstantAggregateZero *v5;
  uint64_t ***v6;
  int isNullValue;
  llvm::Type *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  llvm::Type **v22;
  uint64_t v23;
  uint64_t ****v24;
  uint64_t ***v25;
  int *v27;
  llvm::Type *v28;
  llvm::Type *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  char *v35;
  llvm::Type *v36;
  uint64_t v37;
  uint64_t ****v38;
  __int16 LimitedValue;
  llvm::Type **v41;
  llvm::Type *v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  __int16 *v47;
  llvm::Type *v48;
  llvm::Type *v49;
  uint64_t v50;
  uint64_t ****v51;
  int v53;
  llvm::Type *v54;
  llvm::ConstantAggregateZero *v55;
  llvm::ConstantAggregateZero *v56;
  llvm::Type *v57;
  llvm::Type *v58;
  llvm::ConstantAggregateZero *v59;
  uint64_t v60;
  uint64_t ****v61;
  uint64_t ***v62;
  uint64_t *v64;
  llvm::Type *v65;
  llvm::Type *v66;
  uint64_t Impl;
  llvm::ConstantAggregateZero *v68;
  uint64_t **v69;
  unsigned int v70;
  void *v71;
  llvm::Type *v72[2];
  _QWORD v73[16];

  v2 = a2;
  v73[15] = *MEMORY[0x24BDAC8D0];
  llvm::FixedVectorType::get(**a1, a2);
  v5 = v4;
  v6 = *a1;
  isNullValue = llvm::Constant::isNullValue((llvm::Constant *)*a1);
  v9 = *((unsigned __int8 *)v6 + 16);
  if ((v9 - 11) < 2)
    v10 = 1;
  else
    v10 = isNullValue;
  if ((_DWORD)v2 == 1 || !v10)
  {
LABEL_9:
    if (isNullValue)
      return llvm::ConstantAggregateZero::get(v5, v8);
    if (v9 == 12)
      return llvm::PoisonValue::get(v5, v8);
    if ((v9 - 11) <= 1)
      return llvm::UndefValue::get(v5, v8);
  }
  else
  {
    v11 = 1;
    while (a1[v11] == v6)
    {
      if ((_DWORD)v2 == ++v11)
        goto LABEL_9;
    }
  }
  v13 = *((_DWORD *)*v6 + 2);
  if (v13 < 4u
    || v13 == 13
    && ((HIDWORD(v15) = v13 >> 8,
         LODWORD(v15) = (v13 >> 8) - 8,
         v14 = v15 >> 3,
         v16 = v14 > 7,
         v17 = (1 << v14) & 0x8B,
         !v16)
      ? (v18 = v17 == 0)
      : (v18 = 1),
        !v18))
  {
    if (v9 == 17)
    {
      if (v13 < 2u)
      {
        v22 = (llvm::Type **)v73;
        v71 = v73;
        *(_OWORD *)v72 = xmmword_24AA2D860;
        if (v2)
        {
          v37 = 8 * (_QWORD)v2;
          v38 = a1;
          while (*v38 && *((_BYTE *)*v38 + 16) == 17)
          {
            llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v69, (llvm::APFloat *)(*v38 + 3));
            LimitedValue = (unsigned __int16)llvm::APInt::getLimitedValue(&v69, 0xFFFFFFFFFFFFFFFFLL);
            llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v71, LimitedValue);
            if (v70 >= 0x41 && v69)
              MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
            ++v38;
            v37 -= 8;
            if (!v37)
            {
              v41 = (llvm::Type **)v71;
              v42 = v72[0];
              goto LABEL_98;
            }
          }
          goto LABEL_112;
        }
        v42 = 0;
        v41 = (llvm::Type **)v73;
LABEL_98:
        llvm::FixedVectorType::get(**a1, v42);
        v56 = v59;
        v58 = (llvm::Type *)(2 * (_QWORD)v42);
      }
      else
      {
        if (v13 != 2)
        {
          if (v13 == 3)
            return getFPSequenceIfElementsMatch<llvm::ConstantDataVector,unsigned long long>(a1, (uint64_t)v2);
          return 0;
        }
        v22 = &v72[1];
        v71 = &v72[1];
        v72[0] = (llvm::Type *)0x1000000000;
        if (v2)
        {
          v50 = 8 * (_QWORD)v2;
          v51 = a1;
          while (*v51 && *((_BYTE *)*v51 + 16) == 17)
          {
            llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v69, (llvm::APFloat *)(*v51 + 3));
            v53 = llvm::APInt::getLimitedValue(&v69, 0xFFFFFFFFFFFFFFFFLL);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v71, v53);
            if (v70 >= 0x41 && v69)
              MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
            ++v51;
            v50 -= 8;
            if (!v50)
            {
              v41 = (llvm::Type **)v71;
              v54 = (llvm::Type *)LODWORD(v72[0]);
              goto LABEL_116;
            }
          }
          goto LABEL_112;
        }
        v54 = 0;
        v41 = &v72[1];
LABEL_116:
        llvm::FixedVectorType::get(**a1, v54);
        v56 = v68;
        v58 = (llvm::Type *)(4 * v54);
      }
      v57 = (llvm::Type *)v41;
      goto LABEL_118;
    }
    if (v9 == 16)
    {
      v19 = v13 >> 8;
      if (v13 != 13 || v19 != 8)
      {
        if (v13 == 13 && v19 == 16)
        {
          v22 = (llvm::Type **)v73;
          v71 = v73;
          *(_OWORD *)v72 = xmmword_24AA2D860;
          if (v2)
          {
            v43 = 8 * (_QWORD)v2;
            v44 = a1;
            while (1)
            {
              v45 = *v44;
              if (!*v44 || *((_BYTE *)*v44 + 16) != 16)
                goto LABEL_112;
              v47 = (__int16 *)(v45 + 3);
              if (*((_DWORD *)v45 + 8) >= 0x41u)
                v47 = *(__int16 **)v47;
              llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(&v71, *v47);
              ++v44;
              v43 -= 8;
              if (!v43)
              {
                v48 = (llvm::Type *)v71;
                v49 = v72[0];
                goto LABEL_114;
              }
            }
          }
          v49 = 0;
          v48 = (llvm::Type *)v73;
LABEL_114:
          Impl = llvm::ConstantDataVector::get((uint64_t)***a1, v48, v49);
        }
        else if (v13 == 13 && v19 == 32)
        {
          v22 = &v72[1];
          v71 = &v72[1];
          v72[0] = (llvm::Type *)0x1000000000;
          if (v2)
          {
            v23 = 8 * (_QWORD)v2;
            v24 = a1;
            while (1)
            {
              v25 = *v24;
              if (!*v24 || *((_BYTE *)*v24 + 16) != 16)
                break;
              v27 = (int *)(v25 + 3);
              if (*((_DWORD *)v25 + 8) >= 0x41u)
                v27 = *(int **)v27;
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&v71, *v27);
              ++v24;
              v23 -= 8;
              if (!v23)
              {
                v28 = (llvm::Type *)v71;
                v29 = (llvm::Type *)LODWORD(v72[0]);
                goto LABEL_124;
              }
            }
LABEL_112:
            v30 = 0;
            goto LABEL_120;
          }
          v29 = 0;
          v28 = (llvm::Type *)&v72[1];
LABEL_124:
          Impl = llvm::ConstantDataVector::get((uint64_t)***a1, v28, v29);
        }
        else
        {
          v30 = 0;
          if (v13 != 13 || v19 != 64)
            return v30;
          v22 = &v72[1];
          v71 = &v72[1];
          v72[0] = (llvm::Type *)0x1000000000;
          if (v2)
          {
            v60 = 8 * (_QWORD)v2;
            v61 = a1;
            while (1)
            {
              v62 = *v61;
              if (!*v61 || *((_BYTE *)*v61 + 16) != 16)
                goto LABEL_112;
              v64 = (uint64_t *)(v62 + 3);
              if (*((_DWORD *)v62 + 8) >= 0x41u)
                v64 = (uint64_t *)*v64;
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v71, *v64);
              ++v61;
              v60 -= 8;
              if (!v60)
              {
                v65 = (llvm::Type *)v71;
                v66 = (llvm::Type *)LODWORD(v72[0]);
                goto LABEL_126;
              }
            }
          }
          v66 = 0;
          v65 = (llvm::Type *)&v72[1];
LABEL_126:
          Impl = llvm::ConstantDataVector::get((uint64_t)***a1, v65, v66);
        }
LABEL_119:
        v30 = Impl;
LABEL_120:
        if (v71 != v22)
          free(v71);
        return v30;
      }
      v22 = (llvm::Type **)v73;
      v71 = v73;
      *(_OWORD *)v72 = xmmword_24AA2D860;
      if (v2)
      {
        v31 = 8 * (_QWORD)v2;
        v32 = a1;
        while (1)
        {
          v33 = *v32;
          if (!*v32 || *((_BYTE *)*v32 + 16) != 16)
            goto LABEL_112;
          v35 = (char *)(v33 + 3);
          if (*((_DWORD *)v33 + 8) >= 0x41u)
            v35 = *(char **)v35;
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v71, *v35);
          ++v32;
          v31 -= 8;
          if (!v31)
          {
            v36 = (llvm::Type *)v71;
            v2 = v72[0];
            goto LABEL_96;
          }
        }
      }
      v36 = (llvm::Type *)v73;
LABEL_96:
      llvm::FixedVectorType::get((uint64_t **)(****a1 + 1944), v2);
      v56 = v55;
      v57 = v36;
      v58 = v2;
LABEL_118:
      Impl = llvm::ConstantDataSequential::getImpl(v57, v58, v56);
      goto LABEL_119;
    }
  }
  return 0;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantVector>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  int HashValue;
  __int128 v10;
  unint64_t *v11;
  __int128 v12;
  unint64_t *v13;
  uint64_t *v14;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  v13 = a4;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v12, a2, (uint64_t)a3, a4);
  v10 = v12;
  v11 = v13;
  v14 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, (uint64_t)&HashValue, &v14)|| v14 == (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return llvm::ConstantUniqueMap<llvm::ConstantVector>::create(a1, a2, a3, (uint64_t)a4, (uint64_t)&HashValue);
  }
  else
  {
    return (_QWORD *)*v14;
  }
}

uint64_t llvm::ConstantDataVector::getSplat(llvm::Type *__len, _QWORD **a2, llvm::Constant *a3)
{
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t *v10;
  int v12;
  llvm::Type **v13;
  _QWORD *v14;
  llvm::Type *v15;
  llvm::Type *v16;
  uint64_t **v17;
  unsigned int v18;
  __int16 LimitedValue;
  uint64_t **v20;
  llvm::Type *v21;
  unsigned __int8 *v23;
  int v24;
  llvm::Type *v25;
  __int16 v26;
  _QWORD *v27;
  llvm::ConstantAggregateZero *v28;
  llvm::ConstantAggregateZero *v29;
  llvm::Type *v30;
  llvm::ConstantAggregateZero *v31;
  uint64_t Impl;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  llvm::Type *v36;
  uint64_t **v37;
  unsigned int v38;
  int v39;
  llvm::ConstantAggregateZero *v40;
  unsigned int v41;
  uint64_t *v42;
  llvm::ConstantAggregateZero *v43;
  uint64_t **v44;
  unsigned int v45;
  void *__b;
  llvm::Type *v47[2];
  _QWORD v48[16];

  v48[15] = *MEMORY[0x24BDAC8D0];
  v5 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v5 == 16)
  {
    v6 = *a2;
    v7 = *((_DWORD *)*a2 + 2);
    v8 = *((_DWORD *)*a2 + 2) >> 8;
    if (v7 == 13 && v8 == 8)
    {
      v23 = (unsigned __int8 *)(a2 + 3);
      if (*((_DWORD *)a2 + 8) >= 0x41u)
        v23 = *(unsigned __int8 **)v23;
      v24 = *v23;
      __b = v48;
      v47[1] = (llvm::Type *)16;
      if (__len < 0x11)
      {
        if ((_DWORD)__len)
          memset(v48, v24, __len);
        v25 = (llvm::Type *)v48;
      }
      else
      {
        v47[0] = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__b, v48, __len, 1);
        memset(__b, v24, __len);
        v6 = *a2;
        v25 = (llvm::Type *)__b;
      }
      v47[0] = (llvm::Type *)__len;
      llvm::FixedVectorType::get((uint64_t **)(**(_QWORD **)v6 + 1944), __len);
      Impl = llvm::ConstantDataSequential::getImpl(v25, (llvm::Type *)__len, v31);
      v33 = __b;
      if (__b == v48)
        return Impl;
    }
    else
    {
      v10 = (uint64_t *)(a2 + 3);
      if (v7 == 13 && v8 == 16)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u)
          v10 = (uint64_t *)*v10;
        v26 = *(_WORD *)v10;
        v13 = (llvm::Type **)v48;
        __b = v48;
        *(_OWORD *)v47 = xmmword_24AA2D860;
        llvm::SmallVectorImpl<unsigned short>::assign(&__b, __len, v26);
        v27 = (_QWORD *)**a2;
        v15 = (llvm::Type *)__b;
        v21 = v47[0];
        v20 = (uint64_t **)(*v27 + 1968);
LABEL_31:
        llvm::FixedVectorType::get(v20, v21);
        v29 = v28;
        v30 = (llvm::Type *)(2 * (_QWORD)v21);
      }
      else if (v7 == 13 && v8 == 32)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u)
          v10 = (uint64_t *)*v10;
        v12 = *(_DWORD *)v10;
        v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<int>::assign((uint64_t)&__b, __len, v12);
        v14 = (_QWORD *)**a2;
        v15 = (llvm::Type *)__b;
        v16 = (llvm::Type *)LODWORD(v47[0]);
        v17 = (uint64_t **)(*v14 + 1992);
LABEL_44:
        llvm::FixedVectorType::get(v17, v16);
        v29 = v40;
        v30 = (llvm::Type *)(4 * (_QWORD)v16);
      }
      else
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u)
          v10 = (uint64_t *)*v10;
        v34 = *v10;
        v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<unsigned long long>::assign((uint64_t)&__b, __len, v34);
        v35 = (_QWORD *)**a2;
        v15 = (llvm::Type *)__b;
        v36 = (llvm::Type *)LODWORD(v47[0]);
        v37 = (uint64_t **)(*v35 + 2016);
LABEL_49:
        llvm::FixedVectorType::get(v37, v36);
        v29 = v43;
        v30 = (llvm::Type *)(8 * (_QWORD)v36);
      }
      Impl = llvm::ConstantDataSequential::getImpl(v15, v30, v29);
      v33 = __b;
      if (__b == v13)
        return Impl;
    }
    free(v33);
    return Impl;
  }
  if (a2 && v5 == 17)
  {
    switch(*((_BYTE *)*a2 + 8))
    {
      case 0:
      case 1:
        v18 = __len;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v44, (llvm::APFloat *)(a2 + 3));
        LimitedValue = (unsigned __int16)llvm::APInt::getLimitedValue(&v44, 0xFFFFFFFFFFFFFFFFLL);
        v13 = (llvm::Type **)v48;
        __b = v48;
        *(_OWORD *)v47 = xmmword_24AA2D860;
        llvm::SmallVectorImpl<unsigned short>::assign(&__b, v18, LimitedValue);
        if (v45 >= 0x41 && v44)
          MEMORY[0x24BD1B380](v44, 0x1000C8000313F17);
        v20 = (uint64_t **)*a2;
        v15 = (llvm::Type *)__b;
        v21 = v47[0];
        goto LABEL_31;
      case 2:
        v38 = __len;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v44, (llvm::APFloat *)(a2 + 3));
        v39 = llvm::APInt::getLimitedValue(&v44, 0xFFFFFFFFFFFFFFFFLL);
        v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<int>::assign((uint64_t)&__b, v38, v39);
        if (v45 >= 0x41 && v44)
          MEMORY[0x24BD1B380](v44, 0x1000C8000313F17);
        v17 = (uint64_t **)*a2;
        v15 = (llvm::Type *)__b;
        v16 = (llvm::Type *)LODWORD(v47[0]);
        goto LABEL_44;
      case 3:
        v41 = __len;
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v44, (llvm::APFloat *)(a2 + 3));
        v42 = llvm::APInt::getLimitedValue(&v44, 0xFFFFFFFFFFFFFFFFLL);
        v13 = &v47[1];
        __b = &v47[1];
        v47[0] = (llvm::Type *)0x1000000000;
        llvm::SmallVectorImpl<unsigned long long>::assign((uint64_t)&__b, v41, (uint64_t)v42);
        if (v45 >= 0x41 && v44)
          MEMORY[0x24BD1B380](v44, 0x1000C8000313F17);
        v37 = (uint64_t **)*a2;
        v15 = (llvm::Type *)__b;
        v36 = (llvm::Type *)LODWORD(v47[0]);
        goto LABEL_49;
      default:
        return llvm::ConstantVector::getSplat(__len, a2, a3);
    }
  }
  return llvm::ConstantVector::getSplat(__len, a2, a3);
}

llvm::ConstantExpr *llvm::ConstantExpr::getInsertElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  llvm::ConstantExpr *result;
  unint64_t *v10;
  llvm::Type *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  result = llvm::ConstantFoldInsertElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    v11 = *(llvm::Type **)this;
    if (*(llvm::Constant **)this == a4)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      v18[2] = a3;
      v12 = **(_QWORD **)v11 + 1544;
      LODWORD(v13) = 62;
      *((_QWORD *)&v13 + 1) = v18;
      v14 = 3;
      v16 = 0;
      v17 = 0;
      v15 = 0;
      return (llvm::ConstantExpr *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v12, v11, &v13, v10);
    }
  }
  return result;
}

_QWORD *llvm::ConstantExpr::getShuffleVector(llvm::ConstantExpr *a1, llvm::ConstantExpr *a2, int *a3, _BOOL8 a4, llvm::Type *a5)
{
  _QWORD *result;
  llvm::Type *v11;
  unint64_t *v12;
  llvm::Type *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  _BOOL8 v18;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)llvm::ConstantFoldShuffleVectorInstruction(a1, a2, a3, a4);
  if (!result)
  {
    llvm::VectorType::get(*(uint64_t ***)(*(_QWORD *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a1 + 8) == 19) << 32)));
    if (v11 == a5)
    {
      return 0;
    }
    else
    {
      v13 = v11;
      v20[0] = a1;
      v20[1] = a2;
      v14 = **(_QWORD **)v11 + 1544;
      LODWORD(v15) = 63;
      *((_QWORD *)&v15 + 1) = v20;
      v16 = 2;
      v17 = a3;
      v18 = a4;
      v19 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v14, v13, &v15, v12);
    }
  }
  return result;
}

void std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](llvm::Value **a1, llvm::Value *a2)
{
  llvm::Value *v3;
  void **v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    llvm::Value::~Value(v3, a2);
    llvm::User::operator delete(v4);
  }
}

uint64_t llvm::ConstantExpr::getWithOperands(uint64_t result, uint64_t a2, uint64_t a3, llvm::Type *a4, llvm::Type *a5, llvm::GetElementPtrInst *a6)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t ***v11;
  llvm::Value *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;

  if (*(llvm::Type **)result == a4)
  {
    if (!a3)
      return result;
    v7 = -32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    v8 = 8 * a3;
    v9 = (_QWORD *)a2;
    while (*v9 == *(_QWORD *)(result + v7))
    {
      ++v9;
      v7 += 32;
      v8 -= 8;
      if (!v8)
        return result;
    }
  }
  if ((_DWORD)a5)
    v6 = (uint64_t **)a4;
  else
    v6 = 0;
  switch(*(_WORD *)(result + 18))
  {
    case '"':
      if (!a6)
      {
        v10 = 24;
        if (*(_BYTE *)(result + 16) == 62)
          v10 = 64;
        a6 = *(llvm::GetElementPtrInst **)(result + v10);
      }
      v12 = (llvm::Value *)(a2 + 8);
      v11 = *(uint64_t ****)a2;
      v13 = *(unsigned __int8 *)(result + 17);
      v14 = v13 > 3;
      v15 = (v13 >> 1) & 1;
      if (v13 >= 4)
        v16 = (*(_BYTE *)(result + 17) >> 2) - 1;
      else
        v16 = 0;
      result = llvm::ConstantExpr::getGetElementPtr(a6, (uint64_t *)v11, v12, a3 - 1, v15, v16 | (unint64_t)(v14 << 32), v6);
      break;
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
      result = llvm::ConstantExpr::getCast(*(unsigned __int16 *)(result + 18));
      break;
    case '5':
    case '6':
      result = (uint64_t)llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)*(unsigned __int16 *)(result + 24), *(uint64_t ****)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant *)(v6 != 0));
      break;
    case '=':
      result = llvm::ConstantExpr::getExtractElement(*(llvm::ConstantExpr **)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant *)v6, a4);
      break;
    case '>':
      result = llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)a2, *(llvm::Constant **)(a2 + 8), *(llvm::Constant **)(a2 + 16), (llvm::Constant *)v6, a5);
      break;
    case '?':
      result = (uint64_t)llvm::ConstantExpr::getShuffleVector(*(llvm::ConstantExpr **)a2, *(llvm::ConstantExpr **)(a2 + 8), *(int **)(result + 24), *(unsigned int *)(result + 32), (llvm::Type *)v6);
      break;
    default:
      result = (uint64_t)llvm::ConstantExpr::get((llvm::ConstantExpr *)*(unsigned __int16 *)(result + 18), *(llvm::Constant **)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant *)(*(unsigned __int8 *)(result + 17) >> 1), (uint64_t)v6, a6);
      break;
  }
  return result;
}

uint64_t llvm::ConstantExpr::getCast(int a1)
{
  return ((uint64_t (*)())((char *)sub_24A9C2028 + 4 * byte_24AA33D59[a1 - 38]))();
}

uint64_t sub_24A9C2028()
{
  return getFoldedCast(38);
}

void sub_24A9C2030(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x27, a2, a3, a4);
}

void sub_24A9C2038(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x28, a2, a3, a4);
}

void sub_24A9C2040(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x29, a2, a3, a4);
}

void sub_24A9C2048(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x2A, a2, a3, a4);
}

void sub_24A9C2050(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x2B, a2, a3, a4);
}

void sub_24A9C2058(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x2C, a2, a3, a4);
}

void sub_24A9C2060(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x2D, a2, a3, a4);
}

void sub_24A9C2068(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x2E, a2, a3, a4);
}

void sub_24A9C2070(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x2F, a2, a3, a4);
}

void sub_24A9C2078(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  getFoldedCast((llvm *)0x30, a2, a3, a4);
}

uint64_t sub_24A9C2094(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant ***a3, llvm::Type *a4)
{
  return llvm::ConstantExpr::getAddrSpaceCast(a2, a3, a4);
}

_QWORD *llvm::ConstantExpr::getExtractElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4)
{
  _QWORD *result;
  unint64_t *v8;
  _QWORD **v9;
  llvm::Type *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)llvm::ConstantFoldExtractElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    v9 = *(_QWORD ***)this;
    v10 = *(llvm::Type **)(*(_QWORD *)this + 24);
    if (v10 == a3)
    {
      return 0;
    }
    else
    {
      v17[0] = this;
      v17[1] = a2;
      v11 = **v9 + 1544;
      LODWORD(v12) = 61;
      *((_QWORD *)&v12 + 1) = v17;
      v13 = 2;
      v15 = 0;
      v16 = 0;
      v14 = 0;
      return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v11, v10, &v12, v8);
    }
  }
  return result;
}

llvm::Constant *llvm::ConstantExpr::getCompare(llvm::ConstantExpr *this, uint64_t ***a2, llvm::Constant *a3, llvm::Constant *a4)
{
  if (this > 0xF)
    return llvm::ConstantExpr::getICmp(this, (unsigned __int8 *)a2, a3, a4);
  else
    return (llvm::Constant *)llvm::ConstantExpr::getFCmp(this, a2, a3, a4);
}

llvm::Constant *llvm::ConstantExpr::get(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  char v7;
  char v10;
  llvm::Constant *result;
  unint64_t *v12;
  llvm::Type *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v7 = (char)a4;
  v10 = (char)this;
  v20[2] = *MEMORY[0x24BDAC8D0];
  result = llvm::ConstantFoldBinaryInstruction(this, a2, a3, a4);
  if (!result)
  {
    v13 = *(llvm::Type **)a2;
    if (*(_QWORD *)a2 == a5)
    {
      return 0;
    }
    else
    {
      v20[0] = a2;
      v20[1] = a3;
      v14 = **(_QWORD **)v13 + 1544;
      LOBYTE(v15) = v10;
      BYTE1(v15) = v7;
      WORD1(v15) = 0;
      *((_QWORD *)&v15 + 1) = v20;
      v16 = 2;
      v18 = 0;
      v19 = 0;
      v17 = 0;
      return (llvm::Constant *)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v14, v13, &v15, v12);
    }
  }
  return result;
}

int32x2_t llvm::ConstantUniqueMap<llvm::ConstantArray>::remove(int32x2_t *a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  int32x2_t v5;
  __int32 v6;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  int v11;
  int v12;
  int32x2_t result;

  v5 = *a1;
  v6 = a1[2].i32[0];
  if (!v6)
  {
    v8 = 0;
LABEL_8:
    v9 = (uint64_t **)(*(_QWORD *)&v5 + 8 * v8);
    goto LABEL_9;
  }
  LODWORD(v8) = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(a2, (uint64_t)a2, a3, a4) & (v6 - 1);
  v9 = (uint64_t **)(*(_QWORD *)&v5 + 8 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 1;
    while (v10 != (uint64_t *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(uint64_t **)(*(_QWORD *)&v5 + 8 * v8);
      if (v10 == a2)
        goto LABEL_8;
    }
    v5 = *a1;
    v8 = a1[2].u32[0];
    goto LABEL_8;
  }
LABEL_9:
  *v9 = (uint64_t *)-8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::Constant::getUniqueInteger(llvm::Constant *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 16);
  if (!this || v1 != 16)
  {
    if (v1 == 5)
      this = (llvm::Constant *)llvm::Constant::getSplatValue(this, 0);
    else
      this = (llvm::Constant *)llvm::Constant::getAggregateElement(this, 0);
  }
  return (uint64_t)this + 24;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>,llvm::Type *,std::unique_ptr<llvm::UndefValue>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::UndefValue>>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v5))
  {
    v4 = v5;
    std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v5 + 1, 0);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::get(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  llvm::BlockAddress *result;
  _DWORD *v8;
  _QWORD v9[2];

  v5 = (uint64_t *)(***(_QWORD ***)this + 1472);
  v9[0] = this;
  v9[1] = a2;
  v6 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::FindAndConstruct(v5, v9);
  result = (llvm::BlockAddress *)v6[2];
  if (!result)
  {
    v8 = operator new(0x58uLL);
    v8[21] = v8[21] & 0x38000000 | 2;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = v8 + 16;
    *((_QWORD *)v8 + 4) = 0;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *((_QWORD *)v8 + 7) = v8 + 16;
    result = llvm::BlockAddress::BlockAddress((llvm::BlockAddress *)(v8 + 16), this, a2);
    v6[2] = result;
  }
  return result;
}

llvm::BlockAddress *llvm::BlockAddress::BlockAddress(llvm::BlockAddress *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  *(_QWORD *)this = llvm::PointerType::get((llvm::PointerType **)(***(_QWORD ***)a2 + 1944), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
  *((_QWORD *)this + 1) = 0;
  v6 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 4;
  *((_DWORD *)this + 5) = v6;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v7 = *((_QWORD *)this - 7);
    if (v7)
      *(_QWORD *)(v7 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v10 = *((_QWORD *)a2 + 1);
  v9 = (_QWORD *)((char *)a2 + 8);
  v8 = v10;
  *((_QWORD *)this - 7) = v10;
  if (v10)
    *(_QWORD *)(v8 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v9;
  *v9 = (char *)this - 64;
  v11 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v12 = *((_QWORD *)this - 3);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)this - 2);
  }
  *v11 = a3;
  if (a3)
  {
    v13 = (_QWORD *)((char *)a3 + 8);
    v14 = *((_QWORD *)a3 + 1);
    *((_QWORD *)this - 3) = v14;
    if (v14)
      *(_QWORD *)(v14 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v13;
    *v13 = v11;
  }
  *((_WORD *)a3 + 9) = *((_WORD *)a3 + 9) & 0x8000 | (*((_WORD *)a3 + 9) + 1) & 0x7FFF;
  return this;
}

uint64_t llvm::BlockAddress::lookup(llvm::BlockAddress *this, const llvm::BasicBlock *a2)
{
  uint64_t *v2;
  int v3;
  uint64_t result;
  _QWORD v5[2];
  uint64_t v6;

  if ((*((_WORD *)this + 9) & 0x7FFF) == 0)
    return 0;
  v2 = (uint64_t *)(****((_QWORD ****)this + 7) + 1472);
  v5[0] = *((_QWORD *)this + 7);
  v5[1] = this;
  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(v2, (uint64_t)v5, &v6);
  result = 0;
  if (v3)
    return *(_QWORD *)(v6 + 16);
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::erase(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, a2, &v5))
  {
    v4 = v5;
    *v5 = -8192;
    v4[1] = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::BlockAddress::handleOperandChangeImpl(llvm::BlockAddress *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v3;
  llvm::Value *v5;
  llvm::Value **v6;
  llvm::Value **v7;
  llvm::Value *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value ***v21;
  uint64_t v22;
  llvm::Value *v24;
  llvm::Value *v25;

  v3 = a3;
  v6 = (llvm::Value **)((char *)this - 64);
  v5 = (llvm::Value *)*((_QWORD *)this - 8);
  v7 = (llvm::Value **)((char *)this - 32);
  if (v5 == a2)
  {
    v8 = *v7;
    v5 = llvm::Value::stripPointerCasts(a3);
    v3 = v8;
  }
  v9 = (uint64_t *)(***(_QWORD ***)this + 1472);
  v24 = v5;
  v25 = v3;
  v10 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::FindAndConstruct(v9, &v24);
  v11 = v10[2];
  if (!v11)
  {
    v12 = v10;
    v13 = (llvm::Value *)*((_QWORD *)this - 4);
    *((_WORD *)v13 + 9) = *((_WORD *)v13 + 9) & 0x8000 | (*((_WORD *)v13 + 9) - 1) & 0x7FFF;
    v14 = ***(_QWORD ***)this + 1472;
    v24 = (llvm::Value *)*((_QWORD *)this - 8);
    v25 = v13;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::erase(v14, (uint64_t)&v24);
    v12[2] = this;
    if (*((_QWORD *)this - 8))
    {
      **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
      v15 = *((_QWORD *)this - 7);
      if (v15)
        *(_QWORD *)(v15 + 16) = *((_QWORD *)this - 6);
    }
    *v6 = v5;
    if (v5)
    {
      v18 = *((_QWORD *)v5 + 1);
      v17 = (llvm::Value ***)((char *)v5 + 8);
      v16 = v18;
      *((_QWORD *)this - 7) = v18;
      if (v18)
        *(_QWORD *)(v16 + 16) = (char *)this - 56;
      *((_QWORD *)this - 6) = v17;
      *v17 = v6;
    }
    if (*v7)
    {
      **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
      v19 = *((_QWORD *)this - 3);
      if (v19)
        *(_QWORD *)(v19 + 16) = *((_QWORD *)this - 2);
    }
    *((_QWORD *)this - 4) = v3;
    v22 = *((_QWORD *)v3 + 1);
    v21 = (llvm::Value ***)((char *)v3 + 8);
    v20 = v22;
    *((_QWORD *)this - 3) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v21;
    *v21 = v7;
    *(_WORD *)(*((_QWORD *)this - 4) + 18) = *(_WORD *)(*((_QWORD *)this - 4) + 18) & 0x8000 | (*(_WORD *)(*((_QWORD *)this - 4) + 18)
                                                                                                  + 1) & 0x7FFF;
  }
  return v11;
}

uint64_t llvm::DSOLocalEquivalent::get(llvm::DSOLocalEquivalent *this, llvm::GlobalValue *a2)
{
  _QWORD *v2;
  uint64_t result;
  _DWORD *v4;
  llvm::GlobalValue *v5;

  v5 = this;
  v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(_QWORD ***)this + 1496), &v5);
  result = v2[1];
  if (!result)
  {
    v4 = operator new(0x38uLL);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = v4 + 8;
    result = llvm::DSOLocalEquivalent::DSOLocalEquivalent((uint64_t)(v4 + 8), v5);
    v2[1] = result;
  }
  return result;
}

uint64_t llvm::DSOLocalEquivalent::DSOLocalEquivalent(uint64_t this, llvm::GlobalValue *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)(this + 8) = 0;
  v2 = *(_DWORD *)(this + 20) & 0xC0000000 | 1;
  *(_DWORD *)(this + 16) = 6;
  *(_DWORD *)(this + 20) = v2;
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v3 = *(_QWORD *)(this - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(this - 16);
  }
  *(_QWORD *)(this - 32) = a2;
  v6 = *((_QWORD *)a2 + 1);
  v4 = (_QWORD *)((char *)a2 + 8);
  v5 = v6;
  *(_QWORD *)(this - 24) = v6;
  if (v6)
    *(_QWORD *)(v5 + 16) = this - 24;
  *(_QWORD *)(this - 16) = v4;
  *v4 = this - 32;
  return this;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v4))
  {
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::Constant *llvm::DSOLocalEquivalent::handleOperandChangeImpl(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Constant *v3;
  llvm::Value *v5;
  llvm::Constant **v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value **v14;
  uint64_t v15;
  llvm::Constant *v16;
  llvm::Constant *v17;
  llvm::Value *v19;
  llvm::Value *v20;

  v3 = a3;
  if (*((unsigned __int8 *)a3 + 16) >= 4u)
    v5 = 0;
  else
    v5 = a3;
  v20 = v5;
  if (v5)
  {
    v6 = (llvm::Constant **)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(**(_QWORD **)*this + 1496), &v20)[1];
    if (v6)
    {
      if (*v6 != *this)
      {
        getFoldedCast((llvm *)0x31, (uint64_t)v6, *this, 0);
        return (llvm::Constant *)v7;
      }
      return (llvm::Constant *)v6;
    }
  }
  if ((llvm::Constant::isNullValue(v3) & 1) != 0)
    return v3;
  v8 = llvm::Value::stripPointerCastsAndAliases(v3);
  v9 = (uint64_t *)(**(_QWORD **)*this + 1496);
  v19 = v8;
  v20 = 0;
  v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v9, &v19, &v20);
  v11 = v20;
  if ((v10 & 1) != 0)
  {
    v3 = (llvm::Constant *)*((_QWORD *)v20 + 1);
    if (v3)
    {
      if (*(llvm::Constant **)v3 != *this)
      {
        getFoldedCast((llvm *)0x31, *((_QWORD *)v20 + 1), *this, 0);
        return (llvm::Constant *)v12;
      }
      return v3;
    }
  }
  else
  {
    v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)v9, (uint64_t)&v19, &v19, v20);
    *v11 = v19;
    v11[1] = 0;
  }
  v13 = **(_QWORD **)*this + 1496;
  v14 = this - 4;
  v20 = *(this - 4);
  llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v13, &v20);
  v11[1] = this;
  if (*(this - 4))
  {
    *(_QWORD *)*(this - 2) = *(this - 3);
    v15 = (uint64_t)*(this - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(this - 2);
  }
  *v14 = v8;
  if (v8)
  {
    v16 = (llvm::Value *)((char *)v8 + 8);
    v17 = (llvm::Constant *)*((_QWORD *)v8 + 1);
    *(this - 3) = v17;
    if (v17)
      *((_QWORD *)v17 + 2) = this - 3;
    *(this - 2) = v16;
    *(_QWORD *)v16 = v14;
  }
  v3 = 0;
  if (*(llvm::Constant **)v8 != *this)
    *this = *(llvm::Constant **)v8;
  return v3;
}

uint64_t llvm::NoCFIValue::get(llvm::NoCFIValue *this, llvm::GlobalValue *a2)
{
  _QWORD *v2;
  uint64_t result;
  _DWORD *v4;
  llvm::GlobalValue *v5;

  v5 = this;
  v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(_QWORD ***)this + 1520), &v5);
  result = v2[1];
  if (!result)
  {
    v4 = operator new(0x38uLL);
    v4[13] = v4[13] & 0x38000000 | 1;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = v4 + 8;
    result = llvm::NoCFIValue::NoCFIValue((uint64_t)(v4 + 8), v5);
    v2[1] = result;
  }
  return result;
}

uint64_t llvm::NoCFIValue::NoCFIValue(uint64_t this, llvm::GlobalValue *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)(this + 8) = 0;
  v2 = *(_DWORD *)(this + 20) & 0xC0000000 | 1;
  *(_DWORD *)(this + 16) = 7;
  *(_DWORD *)(this + 20) = v2;
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v3 = *(_QWORD *)(this - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(this - 16);
  }
  *(_QWORD *)(this - 32) = a2;
  v6 = *((_QWORD *)a2 + 1);
  v4 = (_QWORD *)((char *)a2 + 8);
  v5 = v6;
  *(_QWORD *)(this - 24) = v6;
  if (v6)
    *(_QWORD *)(v5 + 16) = this - 24;
  *(_QWORD *)(this - 16) = v4;
  *v4 = this - 32;
  return this;
}

llvm::Constant **llvm::NoCFIValue::handleOperandChangeImpl(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v4;
  llvm::Value *v5;
  _QWORD *v6;
  llvm::Constant **v7;
  llvm::Constant *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::Constant **v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::Constant *v15;
  llvm::Constant *v16;
  llvm::Constant *v17;
  uint64_t v19;
  llvm::Value *v20;

  v4 = llvm::Value::stripPointerCasts(a3);
  if (*((unsigned __int8 *)v4 + 16) >= 4u)
    v5 = 0;
  else
    v5 = v4;
  v20 = v5;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(**(_QWORD **)*this + 1520), &v20);
  v7 = (llvm::Constant **)v6[1];
  v8 = *this;
  if (v7)
  {
    if (*v7 != v8)
    {
      getFoldedCast((llvm *)0x31, (uint64_t)v7, v8, 0);
      return (llvm::Constant **)v9;
    }
  }
  else
  {
    v10 = v6;
    v11 = **(_QWORD **)v8 + 1520;
    v12 = this - 4;
    v19 = (uint64_t)*(this - 4);
    llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v11, &v19);
    v10[1] = this;
    v13 = v20;
    if (*(this - 4))
    {
      *(_QWORD *)*(this - 2) = *(this - 3);
      v14 = (uint64_t)*(this - 3);
      if (v14)
        *(_QWORD *)(v14 + 16) = *(this - 2);
    }
    *v12 = v13;
    if (v13)
    {
      v17 = (llvm::Constant *)*((_QWORD *)v13 + 1);
      v15 = (llvm::Value *)((char *)v13 + 8);
      v16 = v17;
      *(this - 3) = v17;
      if (v17)
        *((_QWORD *)v16 + 2) = this - 3;
      *(this - 2) = v15;
      *(_QWORD *)v15 = v12;
    }
    v7 = 0;
    if (*(llvm::Constant **)v20 != *this)
      *this = *(llvm::Constant **)v20;
  }
  return v7;
}

uint64_t llvm::ConstantExpr::getAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant ***a2, llvm::Type *a3)
{
  uint64_t v5;
  llvm::Constant *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;

  v5 = *(_QWORD *)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  v6 = (llvm::Constant *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v6 = *a2[2];
  if (*(_QWORD *)(v5 + 24) != *((_QWORD *)v6 + 3))
  {
    v7 = (uint64_t **)llvm::PointerType::getWithSamePointeeType((uint64_t)v6, (llvm::Type *)(*(_DWORD *)(v5 + 8) >> 8));
    v8 = v7;
    if (((_DWORD)a2[1] & 0xFE) == 0x12)
    {
      llvm::FixedVectorType::get(v7, (llvm::Type *)*((unsigned int *)a2 + 8));
      v8 = v9;
    }
    if (*(uint64_t ***)this != v8)
      getFoldedCast(49);
  }
  return getFoldedCast(50);
}

void llvm::ConstantExpr::getZExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  llvm::Type *v5;
  llvm::Type *v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  uint64_t v9;

  v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)v5 + 2);
  else
    v6 = *this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  v8 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v8 = *a2[2];
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2)
      return;
    v9 = 49;
  }
  else
  {
    v9 = 39;
  }
  getFoldedCast((llvm *)v9, (uint64_t)this, (llvm::Constant *)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getSExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  llvm::Type *v5;
  llvm::Type *v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  uint64_t v9;

  v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)v5 + 2);
  else
    v6 = *this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  v8 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v8 = *a2[2];
  if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits(v8))
  {
    v9 = 40;
    return (llvm::ConstantExpr *)getFoldedCast(v9);
  }
  if (v5 != (llvm::Type *)a2)
  {
    v9 = 49;
    return (llvm::ConstantExpr *)getFoldedCast(v9);
  }
  return (llvm::ConstantExpr *)this;
}

void llvm::ConstantExpr::getTruncOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  llvm::Type *v5;
  llvm::Type *v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  uint64_t v9;

  v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)v5 + 2);
  else
    v6 = *this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  v8 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v8 = *a2[2];
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2)
      return;
    v9 = 49;
  }
  else
  {
    v9 = 38;
  }
  getFoldedCast((llvm *)v9, (uint64_t)this, (llvm::Constant *)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getPointerCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  int v3;
  char v4;
  llvm::Constant *v5;
  unsigned int v6;

  v3 = *((_DWORD *)a2 + 2);
  v4 = v3;
  if ((v3 & 0xFE) == 0x12)
    v4 = *(_BYTE *)(**((_QWORD **)a2 + 2) + 8);
  if (v4 == 13)
    return (llvm::ConstantExpr *)getFoldedCast(47);
  v5 = *(llvm::Constant **)this;
  v6 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**((_QWORD **)v5 + 2) + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if (v3 == 15 && (v3 ^ v6) >= 0x100)
    return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0);
  if (v5 != a2)
    return (llvm::ConstantExpr *)getFoldedCast(49);
  return this;
}

void llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(llvm::Constant **this, llvm::Constant *a2, llvm::Type *a3)
{
  llvm::Constant *v3;
  unsigned int v4;
  int v5;

  v3 = *this;
  v4 = *((_DWORD *)*this + 2);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)v3 + 2) + 8);
  v5 = *((_DWORD *)a2 + 2);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if ((v5 ^ v4) >= 0x100)
  {
    llvm::ConstantExpr::getAddrSpaceCast((llvm::ConstantExpr *)this, (llvm::Constant ***)a2, 0);
  }
  else if (v3 != a2)
  {
    getFoldedCast((llvm *)0x31, (uint64_t)this, a2, 0);
  }
}

uint64_t llvm::ConstantExpr::getIntegerCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  int v3;
  uint64_t v5;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = (int)a3;
  v5 = *(_QWORD *)this;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  v7 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *a2[2];
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (v3)
    v9 = 40;
  else
    v9 = 39;
  if (PrimitiveSizeInBits > v8)
    v9 = 38;
  if (PrimitiveSizeInBits == v8)
    v10 = 49;
  else
    v10 = v9;
  return llvm::ConstantExpr::getCast(v10);
}

llvm::ConstantExpr *llvm::ConstantExpr::getFPCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  uint64_t v5;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v7;
  unsigned int v8;
  int v10;

  v5 = *(_QWORD *)this;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  v7 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *a2[2];
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (PrimitiveSizeInBits == v8)
    return this;
  if (PrimitiveSizeInBits > v8)
    v10 = 45;
  else
    v10 = 46;
  return (llvm::ConstantExpr *)llvm::ConstantExpr::getCast(v10);
}

void getFoldedCast(llvm *a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  char v4;
  unsigned __int8 v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (char)a4;
  v6 = a1;
  v15 = a2;
  llvm::ConstantFoldCastInstruction(a1, a2, a3, a4);
  if (!v8 && (v4 & 1) == 0)
  {
    v9 = **(_QWORD **)a3 + 1544;
    LODWORD(v10) = v6;
    *((_QWORD *)&v10 + 1) = &v15;
    v11 = 1;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v9, a3, &v10, v7);
  }
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(uint64_t a1, llvm::Type *a2, _OWORD *a3, unint64_t *a4)
{
  __int128 v7;
  _QWORD *v8;
  __int128 v9;
  _OWORD v11[3];
  int HashValue;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[56];
  _QWORD *v18;
  _QWORD v19[3];

  *(_QWORD *)v17 = a2;
  v7 = a3[1];
  *(_OWORD *)&v17[8] = *a3;
  *(_OWORD *)&v17[24] = v7;
  *(_OWORD *)&v17[40] = a3[2];
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue((uint64_t *)v17, (uint64_t)a2, (uint64_t)a3, a4);
  v13 = *(_OWORD *)v17;
  v14 = *(_OWORD *)&v17[16];
  v15 = *(_OWORD *)&v17[32];
  v16 = *(_QWORD *)&v17[48];
  v19[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, (uint64_t)&HashValue, v19)&& v19[0] != *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return *(_QWORD **)v19[0];
  }
  v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  v11[2] = a3[2];
  v8 = llvm::ConstantExprKeyType::create((llvm::ConstantExprKeyType *)v11, a2);
  v18 = v8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::insert_as<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(a1, &v18, (uint64_t)&HashValue, (uint64_t)v19);
  return v8;
}

_QWORD *llvm::ConstantExpr::getFCmp(llvm::ConstantExpr *this, uint64_t ***a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  __int16 v7;
  _QWORD *result;
  unint64_t *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v4 = (char)a4;
  v7 = (__int16)this;
  v18[2] = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)llvm::ConstantFoldCompareInstruction();
  if (!result && (v4 & 1) == 0)
  {
    v18[0] = a2;
    v18[1] = a3;
    v10 = ***a2;
    v11 = (uint64_t **)(v10 + 1920);
    if (((_DWORD)(*a2)[1] & 0xFE) == 0x12)
    {
      llvm::VectorType::get(v11, (llvm::Type *)(*((unsigned int *)*a2 + 8) | ((unint64_t)(*((_DWORD *)*a2 + 2) == 19) << 32)));
      v11 = v12;
      v10 = ***a2;
    }
    LOWORD(v13) = 54;
    WORD1(v13) = v7;
    *((_QWORD *)&v13 + 1) = v18;
    v14 = 2;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    return llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v10 + 1544, (llvm::Type *)v11, &v13, v9);
  }
  return result;
}

uint64_t llvm::ConstantExpr::getGetElementPtr(llvm::GetElementPtrInst *a1, uint64_t *a2, llvm::Value *a3, uint64_t a4, char a5, uint64_t a6, uint64_t **a7)
{
  llvm::Constant **v11;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t ElementPtr;
  llvm::GetElementPtrInst *TypeAtIndex;
  llvm::Type **v19;
  uint64_t v20;
  llvm::Type *v21;
  llvm::Type *v22;
  uint64_t **v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  llvm::Constant **v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  unint64_t v34;
  llvm::Constant **v35;
  char *v36;
  uint64_t v37;
  llvm::Constant **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t **v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  llvm::Constant **v49;
  llvm::Constant *v50;
  uint64_t SplatValue;
  llvm::Constant **v52;
  llvm::Constant **v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  llvm::Constant **v58;
  char *v59;
  char *v60;
  llvm::Constant *v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  llvm::Type *v65;
  char v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::GetElementPtrInst *v71;
  void *__p;
  llvm::Constant **v73;
  llvm::Constant **v74;
  llvm::Constant **v75;
  uint64_t v76;
  uint64_t v77;

  v11 = (llvm::Constant **)a3;
  v77 = *MEMORY[0x24BDAC8D0];
  v14 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v14 = **(_QWORD **)(v14 + 16);
  ElementPtr = llvm::ConstantFoldGetElementPtr(a1, a2, a5, a6, a3, a4);
  if (ElementPtr)
    return ElementPtr;
  TypeAtIndex = a1;
  if (a4)
  {
    v19 = v11 + 1;
    v20 = 8 * a4 - 8;
    TypeAtIndex = a1;
    do
    {
      if (!v20)
        break;
      v21 = *v19++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v21, v15);
      v20 -= 8;
    }
    while (TypeAtIndex);
  }
  v22 = (llvm::Type *)(*(_DWORD *)(v14 + 8) >> 8);
  if (*(_QWORD *)(v14 + 24))
    v23 = (uint64_t **)llvm::PointerType::get((llvm::PointerType **)TypeAtIndex, v22);
  else
    v23 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v14, v22);
  v26 = *a2;
  v66 = a5;
  if (*a2 && (*(_DWORD *)(v26 + 8) & 0xFE) == 0x12)
  {
    v27 = *(_DWORD *)(v26 + 32);
    v28 = *(_DWORD *)(v26 + 8) == 19;
  }
  else
  {
    v28 = 0;
    v27 = 0;
    if (!a4)
      goto LABEL_26;
    v29 = 8 * a4;
    v30 = v11;
    do
    {
      v31 = *(_QWORD *)*v30;
      if (v31)
        v32 = (*(_DWORD *)(v31 + 8) & 0xFE) == 18;
      else
        v32 = 0;
      if (v32)
      {
        v27 = *(_DWORD *)(v31 + 32);
        v28 = *(_DWORD *)(v31 + 8) == 19;
      }
      ++v30;
      v29 -= 8;
    }
    while (v29);
  }
  if (v27)
  {
    llvm::VectorType::get(v23, (llvm::Type *)(v27 | ((unint64_t)v28 << 32)));
    v33 = 0;
    goto LABEL_27;
  }
LABEL_26:
  v33 = 1;
LABEL_27:
  if (v23 == a7)
    return 0;
  __p = 0;
  v73 = 0;
  v74 = 0;
  v34 = a4 + 1;
  v65 = (llvm::Type *)v23;
  if (a4 == -1)
  {
    v35 = 0;
    v36 = 0;
    goto LABEL_34;
  }
  if (v34 >> 61)
    goto LABEL_83;
  v35 = (llvm::Constant **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v74, v34);
  v36 = (char *)&v35[v37];
  __p = v35;
  v73 = v35;
  v74 = (llvm::Constant **)v36;
  if (v35 >= (llvm::Constant **)v36)
  {
LABEL_34:
    v39 = ((char *)v35 - (_BYTE *)__p) >> 3;
    if (!((unint64_t)(v39 + 1) >> 61))
    {
      v40 = v36 - (_BYTE *)__p;
      v41 = v40 >> 2;
      if (v40 >> 2 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v74, v42);
      else
        v43 = 0;
      v44 = (uint64_t **)&v43[8 * v39];
      v45 = &v43[8 * v42];
      *v44 = a2;
      v38 = (llvm::Constant **)(v44 + 1);
      v47 = (char *)__p;
      v46 = (char *)v73;
      if (v73 != __p)
      {
        do
        {
          v48 = (uint64_t *)*((_QWORD *)v46 - 1);
          v46 -= 8;
          *--v44 = v48;
        }
        while (v46 != v47);
        v46 = (char *)__p;
      }
      __p = v44;
      v73 = v38;
      v74 = (llvm::Constant **)v45;
      if (v46)
        operator delete(v46);
      goto LABEL_48;
    }
LABEL_83:
    abort();
  }
  *v35 = (llvm::Constant *)a2;
  v38 = v35 + 1;
LABEL_48:
  v73 = v38;
  v75 = v11;
  v76 = (unint64_t)a1 | 4;
  if (!a4)
    goto LABEL_75;
  v49 = &v11[a4];
  do
  {
    v50 = *v11;
    if ((v76 & 4) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)v50 + 8) & 0xFE) != 0x12)
        goto LABEL_57;
      SplatValue = llvm::Constant::getSplatValue(v50, 0);
      goto LABEL_56;
    }
    if ((v33 & 1) == 0 && (*(_DWORD *)(*(_QWORD *)v50 + 8) & 0xFE) != 0x12)
    {
      SplatValue = llvm::ConstantVector::getSplat(v27 | ((unint64_t)v28 << 32), v50, v24);
LABEL_56:
      v50 = (llvm::Constant *)SplatValue;
    }
LABEL_57:
    v52 = v73;
    if (v73 >= v74)
    {
      v54 = ((char *)v73 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v54 + 1) >> 61)
        goto LABEL_83;
      v55 = ((char *)v74 - (_BYTE *)__p) >> 2;
      if (v55 <= v54 + 1)
        v55 = v54 + 1;
      if ((unint64_t)((char *)v74 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      if (v56)
        v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v74, v56);
      else
        v57 = 0;
      v58 = (llvm::Constant **)&v57[8 * v54];
      *v58 = v50;
      v53 = v58 + 1;
      v60 = (char *)__p;
      v59 = (char *)v73;
      if (v73 != __p)
      {
        do
        {
          v61 = (llvm::Constant *)*((_QWORD *)v59 - 1);
          v59 -= 8;
          *--v58 = v61;
        }
        while (v59 != v60);
        v59 = (char *)__p;
      }
      __p = v58;
      v73 = v53;
      v74 = (llvm::Constant **)&v57[8 * v56];
      if (v59)
        operator delete(v59);
    }
    else
    {
      *v73 = v50;
      v53 = v52 + 1;
    }
    v73 = v53;
    llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(&v75);
    v11 = v75;
  }
  while (v75 != v49);
  v38 = v73;
LABEL_75:
  v62 = a6 >= 0x3F || (a6 & 0xFF00000000) == 0;
  v63 = 2 * a6 + 2;
  if (v62)
    v63 = 0;
  v64 = **(_QWORD **)*a2;
  LOBYTE(v67) = 34;
  BYTE1(v67) = v63 | v66;
  WORD1(v67) = 0;
  *((_QWORD *)&v67 + 1) = __p;
  v68 = ((char *)v38 - (_BYTE *)__p) >> 3;
  v69 = 0;
  v70 = 0;
  v71 = a1;
  ElementPtr = (uint64_t)llvm::ConstantUniqueMap<llvm::ConstantExpr>::getOrCreate(v64 + 1544, v65, &v67, v25);
  if (__p)
  {
    v73 = (llvm::Constant **)__p;
    operator delete(__p);
  }
  return ElementPtr;
}

llvm::Constant *llvm::ConstantExpr::getNot(llvm::Constant **this, llvm::Constant *a2)
{
  llvm::Constant *AllOnesValue;
  llvm::Type *v4;

  AllOnesValue = (llvm::Constant *)llvm::Constant::getAllOnesValue(*this, a2);
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1E, (llvm::Constant *)this, AllOnesValue, 0, 0, v4);
}

uint64_t llvm::ConstantExpr::getBinOpIdentity(llvm::ConstantExpr *this, llvm::ConstantFP *a2, llvm::Type *a3, _BOOL4 a4)
{
  switch((int)this)
  {
    case 13:
      return llvm::Constant::getNullValue(a2, a2);
    case 14:
      return llvm::ConstantFP::getZero(a2, (llvm::Type *)!a4);
    case 15:
    case 16:
      goto LABEL_7;
    case 17:
      return llvm::ConstantInt::get(a2, (llvm::Type *)1, 0, a4);
    case 18:
      return llvm::ConstantFP::get(a2, a2, 1.0);
    default:
      if (((_DWORD)this - 29) < 2)
        return llvm::Constant::getNullValue(a2, a2);
      if ((_DWORD)this == 28)
        return llvm::Constant::getAllOnesValue(a2, a2);
LABEL_7:
      if (!(_DWORD)a3 || this > 0x1B)
        return 0;
      if (((1 << (char)this) & 0xE018000) != 0)
        return llvm::Constant::getNullValue(a2, a2);
      if (((1 << (char)this) & 0x180000) != 0)
        return llvm::ConstantInt::get(a2, (llvm::Type *)1, 0, a4);
      if ((_DWORD)this == 21)
        return llvm::ConstantFP::get(a2, a2, 1.0);
      return 0;
  }
}

int32x2_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::remove(int32x2_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int32x2_t v5;
  __int32 v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x2_t result;

  v5 = *a1;
  v6 = a1[2].i32[0];
  if (!v6)
  {
    v8 = 0;
LABEL_8:
    v9 = (uint64_t *)(*(_QWORD *)&v5 + 8 * v8);
    goto LABEL_9;
  }
  LODWORD(v8) = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(a2, a2, a3, a4) & (v6 - 1);
  v9 = (uint64_t *)(*(_QWORD *)&v5 + 8 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(*(_QWORD *)&v5 + 8 * v8);
      if (v10 == a2)
        goto LABEL_8;
    }
    v5 = *a1;
    v8 = a1[2].u32[0];
    goto LABEL_8;
  }
LABEL_9:
  *v9 = -8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::ConstantDataSequential::getRawDataValues(llvm::ConstantDataSequential *this)
{
  uint64_t v1;
  const char *v2;

  v1 = *((_QWORD *)this + 3);
  llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  if ((_BYTE)v2)
  return v1;
}

uint64_t llvm::ConstantDataSequential::getImpl(llvm::Type *a1, llvm::Type *a2, llvm::ConstantAggregateZero *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  llvm::StringMapImpl *v7;
  unint64_t *v8;
  llvm::ConstantAggregateZero **v9;
  llvm::Value **v10;
  unint64_t *v11;
  _QWORD *v12;
  llvm::Value *v13;

  v4 = (unint64_t)a2;
  if (!a2)
    return llvm::ConstantAggregateZero::get(a3, a2);
  a2 = a1;
  v5 = 0;
  while (!*((_BYTE *)a1 + v5))
  {
    if (v4 == ++v5)
      return llvm::ConstantAggregateZero::get(a3, a2);
  }
  v7 = (llvm::StringMapImpl *)(**(_QWORD **)a3 + 1448);
  v13 = 0;
  v8 = *llvm::StringMap<std::unique_ptr<llvm::ConstantDataSequential>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<llvm::ConstantDataSequential>>(v7, (uint64_t *)a2, v4, (unint64_t *)&v13);
  std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](&v13, 0);
  v10 = (llvm::Value **)(v8 + 1);
  v9 = (llvm::ConstantAggregateZero **)v8[1];
  if (v9)
  {
    while (1)
    {
      result = (uint64_t)v9;
      if (*v9 == a3)
        break;
      v9 = (llvm::ConstantAggregateZero **)v9[4];
      if (!v9)
      {
        v10 = (llvm::Value **)(result + 32);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    v11 = v8 + 2;
    if (*((_BYTE *)a3 + 8) == 17)
    {
      v12 = operator new(0x28uLL);
      *v12 = a3;
      v12[1] = 0;
      v12[2] = 14;
      v12[3] = v11;
      v12[4] = 0;
    }
    else
    {
      v12 = operator new(0x30uLL);
      *v12 = a3;
      v12[1] = 0;
      v12[2] = 15;
      v12[3] = v11;
      v12[4] = 0;
      *((_BYTE *)v12 + 40) &= ~1u;
    }
    std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](v10, (llvm::Value *)v12);
    return (uint64_t)*v10;
  }
  return result;
}

void std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100](llvm::Value **a1, llvm::Value *a2)
{
  llvm::Value *v2;
  void **v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    std::unique_ptr<llvm::ConstantDataSequential>::reset[abi:nn180100]((char *)v2 + 32, 0);
    llvm::Value::~Value(v2);
    llvm::User::operator delete(v3);
  }
}

uint64_t llvm::ConstantDataArray::getFP(uint64_t **a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

uint64_t llvm::ConstantDataArray::getString(uint64_t a1, char *a2, llvm::Type *a3, char a4)
{
  llvm::Type *v7;
  llvm::Type *v8;
  llvm::ConstantAggregateZero *v9;
  uint64_t Impl;
  llvm::ConstantAggregateZero *v12;
  void *v13;
  __int128 v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  if ((a4 & 1) != 0)
  {
    v13 = v15;
    v14 = xmmword_24AA2B2D0;
    llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(&v13, a2, (char *)a3 + (_QWORD)a2);
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v13, 0);
    v7 = (llvm::Type *)v13;
    v8 = (llvm::Type *)v14;
    llvm::ArrayType::get((uint64_t **)(*(_QWORD *)a1 + 1944), (llvm::Type *)v14);
    Impl = llvm::ConstantDataSequential::getImpl(v7, v8, v9);
    if (v13 != v15)
      free(v13);
    return Impl;
  }
  else
  {
    llvm::ArrayType::get((uint64_t **)(*(_QWORD *)a1 + 1944), a3);
    return llvm::ConstantDataSequential::getImpl((llvm::Type *)a2, a3, v12);
  }
}

uint64_t llvm::ConstantDataVector::get(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((uint64_t **)(*(_QWORD *)a1 + 1944), a3);
  return llvm::ConstantDataSequential::getImpl(a2, a3, v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((uint64_t **)(*(_QWORD *)a1 + 1968), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((uint64_t **)(*(_QWORD *)a1 + 1992), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((uint64_t **)(*(_QWORD *)a1 + 2016), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

uint64_t llvm::ConstantDataVector::getFP(uint64_t **a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

void llvm::ConstantDataSequential::getElementAsInteger(llvm::ConstantDataSequential *this)
{
  llvm::Type *v2;
  const char *v3;
  uint64_t v4;

  v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  llvm::Type::getPrimitiveSizeInBits(v2);
  if ((_BYTE)v3)
  {
    v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  }
  HIDWORD(v4) = *((_DWORD *)v2 + 2) >> 8;
  LODWORD(v4) = HIDWORD(v4) - 8;
  __asm { BR              X11 }
}

uint64_t sub_24A9C3F90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + a1);
}

void llvm::ConstantDataSequential::getElementAsAPFloat(llvm::ConstantDataSequential *this)
{
  llvm::Type *v2;
  const char *v3;

  v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  llvm::Type::getPrimitiveSizeInBits(v2);
  if ((_BYTE)v3)
  {
    v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  }
  __asm { BR              X11 }
}

void sub_24A9C4040(uint64_t a1@<X8>, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  const llvm::APInt *v13;
  const llvm::APInt *v14;
  int v15;

  v13 = (const llvm::APInt *)*(unsigned __int16 *)(v12 + a1);
  v15 = 16;
  v14 = v13;
  llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)(v11 + 8), &v14);
}

BOOL llvm::ConstantDataVector::isSplatData(llvm::ConstantDataVector *this)
{
  char *RawDataValues;
  uint64_t v3;
  const char *v4;
  unint64_t PrimitiveSizeInBits;
  int v6;
  _BOOL8 result;
  unint64_t v8;
  size_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;

  RawDataValues = (char *)llvm::ConstantDataSequential::getRawDataValues(this);
  v3 = *(_QWORD *)this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  if ((_BYTE)v4)
  {
    v3 = *(_QWORD *)this;
  }
  v6 = *(_DWORD *)(v3 + 32);
  if (v6 == 1)
    return 1;
  v8 = PrimitiveSizeInBits >> 3;
  v9 = (PrimitiveSizeInBits >> 3);
  v10 = v6 - 2;
  v11 = v8;
  do
  {
    v12 = memcmp(RawDataValues, &RawDataValues[v11], v9);
    result = v12 == 0;
    v14 = v10-- != 0;
    if (v12)
      break;
    v11 += v8;
  }
  while (v14);
  return result;
}

uint64_t llvm::ConstantDataVector::isSplat(llvm::ConstantDataVector *this)
{
  unsigned int v1;
  int v3;

  v1 = *((unsigned __int8 *)this + 40);
  if ((v1 & 1) == 0)
  {
    *((_BYTE *)this + 40) = v1 | 1;
    if (llvm::ConstantDataVector::isSplatData(this))
      v3 = 2;
    else
      v3 = 0;
    v1 = *((_BYTE *)this + 40) & 0xFD | v3;
    *((_BYTE *)this + 40) = v1;
  }
  return (v1 >> 1) & 1;
}

void llvm::Constant::handleOperandChange(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_24A9C4210(int a1, llvm::Value *a2, llvm::Value *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  llvm::BlockAddress *v12;
  llvm::Value *v13;

  v13 = (llvm::Value *)llvm::BlockAddress::handleOperandChangeImpl(v12, a2, a3);
  if (v13)
  {
    llvm::Value::doRAUW(v12, v13);
    llvm::Constant::destroyConstant(v12);
  }
}

uint64_t llvm::ConstantExpr::handleOperandChangeImpl(llvm::ConstantExpr *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  llvm::ConstantExpr *v11;
  llvm::Value *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFF) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = this;
    do
    {
      if (*((llvm::Value **)v11 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
      {
        ++v10;
        v9 = v8;
        v12 = a3;
      }
      else
      {
        v12 = (llvm::Value *)*((_QWORD *)v11 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v17, (uint64_t)v12);
      ++v8;
      v11 = (llvm::ConstantExpr *)((char *)v11 + 32);
    }
    while (v7 != v8);
    v13 = v17;
    v14 = v18;
  }
  else
  {
    v14 = 0;
    v10 = 0;
    v9 = 0;
    v13 = v19;
  }
  v15 = llvm::ConstantExpr::getWithOperands((uint64_t)this, (uint64_t)v13, v14, *(llvm::Type **)this, (llvm::Type *)1, 0);
  if (!v15)
    v15 = llvm::ConstantUniqueMap<llvm::ConstantExpr>::replaceOperandsInPlace(***(_QWORD ***)this + 1544, (uint64_t)v17, v18, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v10, v9);
  if (v17 != v19)
    free(v17);
  return v15;
}

uint64_t llvm::ConstantArray::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t Impl;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t ***v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  llvm::ConstantArray *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int HashValue;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  llvm::ConstantArray *v46;
  uint64_t *v47[3];
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v50[8] = *MEMORY[0x24BDAC8D0];
  v48 = v50;
  v49 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v6 & 0x7FFFFFF, 8);
    v6 = *((_DWORD *)this + 5);
  }
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (llvm::Value **)*(this - 1);
    v7 = v6 & 0x7FFFFFF;
    if ((_DWORD)v7)
      goto LABEL_5;
LABEL_13:
    v10 = 0;
    v11 = 0;
    goto LABEL_14;
  }
  v7 = v6 & 0x7FFFFFF;
  v8 = (llvm::Value **)&this[-4 * v7];
  if (!(_DWORD)v7)
    goto LABEL_13;
LABEL_5:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 32 * v7;
  v13 = 1;
  do
  {
    v15 = *v8;
    v8 += 4;
    v14 = v15;
    if (v15 == a2)
    {
      ++v11;
      v10 = v9;
      v16 = a3;
    }
    else
    {
      v16 = v14;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v48, (uint64_t)v16);
    v13 &= v16 == a3;
    ++v9;
    v12 -= 32;
  }
  while (v12);
  if ((v13 & 1) != 0)
  {
LABEL_14:
    if (llvm::Constant::isNullValue(a3))
    {
      v18 = llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*this, v17);
    }
    else
    {
      if (*((unsigned __int8 *)a3 + 16) - 11 > 1)
        goto LABEL_19;
      v18 = llvm::UndefValue::get((llvm::UndefValue *)*this, v17);
    }
    Impl = v18;
    goto LABEL_45;
  }
LABEL_19:
  Impl = llvm::ConstantArray::getImpl((llvm::PoisonValue *)*this, (llvm::Type *)v48, v49);
  if (!Impl)
  {
    v23 = ***this;
    *(_QWORD *)&v44 = *this;
    *((_QWORD *)&v44 + 1) = v48;
    v45 = v49;
    HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v44, v20, v21, v22);
    v42 = v44;
    v43 = v45;
    v47[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)(v23 + 1280), (uint64_t)&HashValue, v47))v26 = v47[0] == (uint64_t *)(*(_QWORD *)(v23 + 1280) + 8 * *(unsigned int *)(v23 + 1296));
    else
      v26 = 1;
    if (v26)
    {
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove((int32x2_t *)(v23 + 1280), (uint64_t *)this, v24, v25);
      v27 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      if (v11 == 1)
      {
        v28 = &this[-4 * v27];
        v29 = (char *)&v28[4 * v10];
        if (*(_QWORD *)v29)
        {
          **((_QWORD **)v29 + 2) = *((_QWORD *)v29 + 1);
          v30 = *((_QWORD *)v29 + 1);
          if (v30)
            *(_QWORD *)(v30 + 16) = *((_QWORD *)v29 + 2);
        }
        *(_QWORD *)v29 = a3;
        if (a3)
        {
          v33 = *((_QWORD *)a3 + 1);
          v32 = (char **)((char *)a3 + 8);
          v31 = v33;
          v34 = (char *)&v28[4 * v10];
          *((_QWORD *)v34 + 1) = v33;
          if (v33)
            *(_QWORD *)(v31 + 16) = v34 + 8;
          *((_QWORD *)v34 + 2) = v32;
          *v32 = v29;
        }
      }
      else if ((_DWORD)v27)
      {
        v35 = (uint64_t *)((char *)a3 + 8);
        v27 = v27;
        v36 = (llvm::ConstantArray *)this;
        do
        {
          v37 = (char *)v36 - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
          if (*(llvm::Value **)v37 == a2)
          {
            if (a2)
            {
              **((_QWORD **)v37 + 2) = *((_QWORD *)v37 + 1);
              v38 = *((_QWORD *)v37 + 1);
              if (v38)
                *(_QWORD *)(v38 + 16) = *((_QWORD *)v37 + 2);
            }
            *(_QWORD *)v37 = a3;
            if (a3)
            {
              v39 = *v35;
              *((_QWORD *)v37 + 1) = *v35;
              if (v39)
                *(_QWORD *)(v39 + 16) = v37 + 8;
              *((_QWORD *)v37 + 2) = v35;
              *v35 = (uint64_t)v37;
            }
          }
          v36 = (llvm::ConstantArray *)((char *)v36 + 32);
          --v27;
        }
        while (v27);
      }
      v46 = (llvm::ConstantArray *)this;
      llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(v23 + 1280, &v46, (uint64_t)&HashValue, (uint64_t)v47);
      Impl = 0;
    }
    else
    {
      Impl = *v47[0];
    }
  }
LABEL_45:
  if (v48 != v50)
    free(v48);
  return Impl;
}

uint64_t llvm::ConstantStruct::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Type *v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t ***v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  llvm::ConstantStruct *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int HashValue;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  llvm::ConstantStruct *v45;
  uint64_t *v46[3];
  void *v47;
  uint64_t v48;
  _QWORD v49[10];

  v49[8] = *MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (llvm::Value **)*(this - 1);
    LODWORD(v7) = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (llvm::Value **)&this[-4 * v7];
  }
  v47 = v49;
  v48 = 0x800000000;
  if (v7 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v49, v7, 8);
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
  }
  if (!(_DWORD)v7)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_15;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 32 * v7;
  v13 = 1;
  do
  {
    v15 = *v8;
    v8 += 4;
    v14 = v15;
    if (v15 == a2)
    {
      ++v11;
      v10 = v9;
      v16 = a3;
    }
    else
    {
      v16 = v14;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v47, (uint64_t)v16);
    v13 &= v16 == a3;
    ++v9;
    v12 -= 32;
  }
  while (v12);
  if ((v13 & 1) != 0)
  {
LABEL_15:
    if (llvm::Constant::isNullValue(a3))
    {
      v20 = llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*this, v17);
    }
    else
    {
      if (*((unsigned __int8 *)a3 + 16) - 11 > 1)
        goto LABEL_20;
      v20 = llvm::UndefValue::get((llvm::UndefValue *)*this, v17);
    }
    v21 = v20;
    goto LABEL_45;
  }
LABEL_20:
  v22 = ***this;
  *(_QWORD *)&v43 = *this;
  *((_QWORD *)&v43 + 1) = v47;
  v44 = v48;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v43, (uint64_t)v17, v18, v19);
  v41 = v43;
  v42 = v44;
  v46[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)(v22 + 1304), (uint64_t)&HashValue, v46))v25 = v46[0] == (uint64_t *)(*(_QWORD *)(v22 + 1304) + 8 * *(unsigned int *)(v22 + 1320));
  else
    v25 = 1;
  if (v25)
  {
    llvm::ConstantUniqueMap<llvm::ConstantArray>::remove((int32x2_t *)(v22 + 1304), (uint64_t *)this, v23, v24);
    v26 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v11 == 1)
    {
      v27 = &this[-4 * v26];
      v28 = (char *)&v27[4 * v10];
      if (*(_QWORD *)v28)
      {
        **((_QWORD **)v28 + 2) = *((_QWORD *)v28 + 1);
        v29 = *((_QWORD *)v28 + 1);
        if (v29)
          *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 + 2);
      }
      *(_QWORD *)v28 = a3;
      if (a3)
      {
        v32 = *((_QWORD *)a3 + 1);
        v31 = (char **)((char *)a3 + 8);
        v30 = v32;
        v33 = (char *)&v27[4 * v10];
        *((_QWORD *)v33 + 1) = v32;
        if (v32)
          *(_QWORD *)(v30 + 16) = v33 + 8;
        *((_QWORD *)v33 + 2) = v31;
        *v31 = v28;
      }
    }
    else if ((_DWORD)v26)
    {
      v34 = (uint64_t *)((char *)a3 + 8);
      v26 = v26;
      v35 = (llvm::ConstantStruct *)this;
      do
      {
        v36 = (char *)v35 - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
        if (*(llvm::Value **)v36 == a2)
        {
          if (a2)
          {
            **((_QWORD **)v36 + 2) = *((_QWORD *)v36 + 1);
            v37 = *((_QWORD *)v36 + 1);
            if (v37)
              *(_QWORD *)(v37 + 16) = *((_QWORD *)v36 + 2);
          }
          *(_QWORD *)v36 = a3;
          if (a3)
          {
            v38 = *v34;
            *((_QWORD *)v36 + 1) = *v34;
            if (v38)
              *(_QWORD *)(v38 + 16) = v36 + 8;
            *((_QWORD *)v36 + 2) = v34;
            *v34 = (uint64_t)v36;
          }
        }
        v35 = (llvm::ConstantStruct *)((char *)v35 + 32);
        --v26;
      }
      while (v26);
    }
    v45 = (llvm::ConstantStruct *)this;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(v22 + 1304, &v45, (uint64_t)&HashValue, (uint64_t)v46);
    v21 = 0;
  }
  else
  {
    v21 = *v46[0];
  }
LABEL_45:
  if (v47 != v49)
    free(v47);
  return v21;
}

uint64_t llvm::ConstantVector::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  llvm::ConstantVector *v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t Impl;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t ***v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  llvm::ConstantVector *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int HashValue;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  llvm::ConstantVector *v42;
  uint64_t *v43[3];
  void *v44;
  uint64_t v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x24BDAC8D0];
  v44 = v46;
  v45 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v7, 8);
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
  }
  if ((_DWORD)v7)
  {
    v8 = 0;
    LODWORD(v9) = 0;
    v10 = 0;
    v11 = (llvm::ConstantVector *)this;
    v12 = v7;
    do
    {
      v13 = (llvm::Value *)*((_QWORD *)v11 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      if (v13 == a2)
      {
        ++v10;
        v9 = v8;
      }
      else
      {
        v9 = v9;
      }
      if (v13 == a2)
        v14 = a3;
      else
        v14 = (llvm::Value *)*((_QWORD *)v11 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v44, (uint64_t)v14);
      ++v8;
      v11 = (llvm::ConstantVector *)((char *)v11 + 32);
    }
    while (v12 != v8);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  Impl = llvm::ConstantVector::getImpl((uint64_t ****)v44, (llvm::Type *)v45);
  if (!Impl)
  {
    v19 = ***this;
    *(_QWORD *)&v40 = *this;
    *((_QWORD *)&v40 + 1) = v44;
    v41 = v45;
    HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)&v40, v15, v16, v17);
    v38 = v40;
    v39 = v41;
    v43[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)(v19 + 1328), (uint64_t)&HashValue, v43))v22 = v43[0] == (uint64_t *)(*(_QWORD *)(v19 + 1328) + 8 * *(unsigned int *)(v19 + 1344));
    else
      v22 = 1;
    if (v22)
    {
      llvm::ConstantUniqueMap<llvm::ConstantArray>::remove((int32x2_t *)(v19 + 1328), (uint64_t *)this, v20, v21);
      v23 = *((_DWORD *)this + 5) & 0x7FFFFFF;
      if (v10 == 1)
      {
        v24 = &this[-4 * v23];
        v25 = (char *)&v24[4 * v9];
        if (*(_QWORD *)v25)
        {
          **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
          v26 = *((_QWORD *)v25 + 1);
          if (v26)
            *(_QWORD *)(v26 + 16) = *((_QWORD *)v25 + 2);
        }
        *(_QWORD *)v25 = a3;
        if (a3)
        {
          v29 = *((_QWORD *)a3 + 1);
          v28 = (char **)((char *)a3 + 8);
          v27 = v29;
          v30 = (char *)&v24[4 * v9];
          *((_QWORD *)v30 + 1) = v29;
          if (v29)
            *(_QWORD *)(v27 + 16) = v30 + 8;
          *((_QWORD *)v30 + 2) = v28;
          *v28 = v25;
        }
      }
      else if ((_DWORD)v23)
      {
        v31 = (uint64_t *)((char *)a3 + 8);
        v23 = v23;
        v32 = (llvm::ConstantVector *)this;
        do
        {
          v33 = (char *)v32 - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
          if (*(llvm::Value **)v33 == a2)
          {
            if (a2)
            {
              **((_QWORD **)v33 + 2) = *((_QWORD *)v33 + 1);
              v34 = *((_QWORD *)v33 + 1);
              if (v34)
                *(_QWORD *)(v34 + 16) = *((_QWORD *)v33 + 2);
            }
            *(_QWORD *)v33 = a3;
            if (a3)
            {
              v35 = *v31;
              *((_QWORD *)v33 + 1) = *v31;
              if (v35)
                *(_QWORD *)(v35 + 16) = v33 + 8;
              *((_QWORD *)v33 + 2) = v31;
              *v31 = (uint64_t)v33;
            }
          }
          v32 = (llvm::ConstantVector *)((char *)v32 + 32);
          --v23;
        }
        while (v23);
      }
      v42 = (llvm::ConstantVector *)this;
      llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(v19 + 1328, &v42, (uint64_t)&HashValue, (uint64_t)v43);
      Impl = 0;
    }
    else
    {
      Impl = *v43[0];
    }
  }
  if (v44 != v46)
    free(v44);
  return Impl;
}

uint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::replaceOperandsInPlace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int HashValue;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];

  v14 = *(unsigned __int16 *)(a4 + 18);
  v15 = *(_WORD *)(a4 + 18);
  v16 = *(unsigned __int8 *)(a4 + 17) >> 1;
  if ((v14 - 53) > 1)
  {
    if (v14 == 34)
    {
      v17 = 0;
      v18 = 0;
      v20 = 0;
      v19 = *(_QWORD *)(a4 + 24);
    }
    else if (v14 == 63)
    {
      v20 = 0;
      v19 = 0;
      v18 = *(_QWORD *)(a4 + 24);
      v17 = *(unsigned int *)(a4 + 32);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v20 = 0;
      v19 = 0;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = *(_WORD *)(a4 + 24);
  }
  *(_QWORD *)&v42 = *(_QWORD *)a4;
  BYTE8(v42) = v15;
  BYTE9(v42) = v16;
  WORD5(v42) = v20;
  *(_QWORD *)&v43 = a2;
  *((_QWORD *)&v43 + 1) = a3;
  *(_QWORD *)&v44 = v18;
  *((_QWORD *)&v44 + 1) = v17;
  v45 = v19;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue((uint64_t *)&v42, a2, a3, (unint64_t *)a4);
  v38 = v42;
  v39 = v43;
  v40 = v44;
  v41 = v45;
  v47[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, (uint64_t)&HashValue, v47)&& v47[0] != *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return *(_QWORD *)v47[0];
  }
  llvm::ConstantUniqueMap<llvm::ConstantExpr>::remove((int32x2_t *)a1, a4, v21, v22);
  v24 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  if (a7 == 1)
  {
    v25 = a4 - 32 * v24;
    v26 = v25 + 32 * a8;
    if (*(_QWORD *)v26)
    {
      **(_QWORD **)(v26 + 16) = *(_QWORD *)(v26 + 8);
      v27 = *(_QWORD *)(v26 + 8);
      if (v27)
        *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
    }
    *(_QWORD *)v26 = a6;
    if (a6)
    {
      v30 = *(_QWORD *)(a6 + 8);
      v29 = (uint64_t *)(a6 + 8);
      v28 = v30;
      v31 = v25 + 32 * a8;
      *(_QWORD *)(v31 + 8) = v30;
      if (v30)
        *(_QWORD *)(v28 + 16) = v31 + 8;
      *(_QWORD *)(v31 + 16) = v29;
      *v29 = v26;
    }
  }
  else if ((_DWORD)v24)
  {
    v32 = (uint64_t *)(a6 + 8);
    v24 = v24;
    v33 = a4;
    do
    {
      v34 = v33 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v34 == a5)
      {
        if (a5)
        {
          **(_QWORD **)(v34 + 16) = *(_QWORD *)(v34 + 8);
          v35 = *(_QWORD *)(v34 + 8);
          if (v35)
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
        }
        *(_QWORD *)v34 = a6;
        if (a6)
        {
          v36 = *v32;
          *(_QWORD *)(v34 + 8) = *v32;
          if (v36)
            *(_QWORD *)(v36 + 16) = v34 + 8;
          *(_QWORD *)(v34 + 16) = v32;
          *v32 = v34;
        }
      }
      v33 += 32;
      --v24;
    }
    while (v24);
  }
  v46 = a4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::insert_as<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(a1, &v46, (uint64_t)&HashValue, (uint64_t)v47);
  return 0;
}

BOOL llvm::function_ref<BOOL ()(llvm::Constant const*)>::callback_fn<llvm::Constant::containsPoisonElement(void)::$_0>(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) == 12;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *inserted = *a2;
    *((_QWORD *)inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>,unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,std::unique_ptr<llvm::ConstantInt>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (_QWORD *)(v4 + 8);
      do
      {
        if (*((_DWORD *)v13 - 2) <= 0xFFFFFFFD)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13 - 2, &v19);
          v14 = v19;
          *v19 = *((_DWORD *)v13 - 2);
          v15 = *v13;
          *v13 = 0;
          *((_QWORD *)v14 + 1) = v15;
          ++*(_DWORD *)(a1 + 8);
          v16 = *v13;
          *v13 = 0;
          if (v16)
            std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100]((uint64_t)v13, v16);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -1;
      result += 4;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

llvm::APInt *llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::FindAndConstruct(uint64_t *a1, llvm::hashing::detail::hash_state **a2, uint64_t a3, unint64_t *a4)
{
  char v6;
  llvm::APInt *v7;
  llvm::APInt *v9;

  v9 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>(a1, a2, &v9, a4);
  v7 = v9;
  if ((v6 & 1) == 0)
  {
    v7 = (llvm::APInt *)llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<llvm::APInt>((uint64_t)a1, (uint64_t)a2, a2, (uint64_t)v9);
    llvm::APInt::operator=(v7, (const llvm::APInt *)a2);
    *((_QWORD *)v7 + 2) = 0;
  }
  return v7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>(uint64_t *a1, llvm::hashing::detail::hash_state **this, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  llvm::hashing::detail::hash_state *v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  BOOL isEqual;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v22 = 0;
    v21 = -1;
    v20 = 0;
    v19 = -2;
    v8 = llvm::hash_value(this, (const llvm::APInt *)this, (uint64_t)a3, a4);
    v18 = 0;
    v9 = v5 - 1;
    v10 = *((unsigned int *)this + 2);
    v11 = *this;
    for (i = 1; ; ++i)
    {
      v13 = v8 & v9;
      v14 = v7 + 24 * (v8 & v9);
      if ((_DWORD)v10 == *(_DWORD *)(v14 + 8))
      {
        if (v10 > 0x40)
        {
          if (!memcmp(v11, *(const void **)v14, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8))
          {
LABEL_12:
            result = 1;
            goto LABEL_13;
          }
        }
        else if (*(llvm::hashing::detail::hash_state **)v14 == v11)
        {
          goto LABEL_12;
        }
      }
      if (llvm::DenseMapInfo<llvm::APInt,void>::isEqual(v7 + 24 * v13, (uint64_t)&v21))
        break;
      isEqual = llvm::DenseMapInfo<llvm::APInt,void>::isEqual(v7 + 24 * v13, (uint64_t)&v19);
      v16 = v18;
      if (isEqual && v18 == 0)
        v16 = v7 + 24 * v13;
      v18 = v16;
      v8 = v13 + i;
    }
    result = 0;
    if (v18)
      v14 = v18;
LABEL_13:
    *a3 = v14;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

BOOL llvm::DenseMapInfo<llvm::APInt,void>::isEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 8))
    return 0;
  if (v2 > 0x40)
    return memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    return *(_QWORD *)a1 == *(_QWORD *)a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::InsertIntoBucketImpl<llvm::APInt>(uint64_t a1, uint64_t a2, llvm::hashing::detail::hash_state **a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::grow(a1, v7);
    v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>((uint64_t *)a1, a3, &v10, v9);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 8) || *(_QWORD *)a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  llvm::hashing::detail::hash_state **v14;
  uint64_t v15;
  llvm::hashing::detail::hash_state **v16;
  uint64_t v17;
  llvm::hashing::detail::hash_state *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 24 * v11;
      v13 = result + 8;
      do
      {
        *v13 = 0;
        *((_QWORD *)v13 - 1) = -1;
        v13 += 6;
        v12 -= 24;
      }
      while (v12);
    }
    if ((_DWORD)v3)
    {
      v14 = (llvm::hashing::detail::hash_state **)(v4 + 16);
      v15 = 24 * v3;
      do
      {
        v16 = v14 - 2;
        if (*((_DWORD *)v14 - 2) || (unint64_t)*v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>,llvm::APInt,std::unique_ptr<llvm::ConstantInt>,llvm::DenseMapInfo<llvm::APInt,void>,llvm::detail::DenseMapPair<llvm::APInt,std::unique_ptr<llvm::ConstantInt>>>::LookupBucketFor<llvm::APInt>((uint64_t *)a1, v14 - 2, &v23, v10);
          v17 = v23;
          llvm::APInt::operator=(v23, (uint64_t)(v14 - 2));
          v18 = *v14;
          *v14 = 0;
          *(_QWORD *)(v17 + 16) = v18;
          ++*(_DWORD *)(a1 + 8);
          v19 = (uint64_t)*v14;
          *v14 = 0;
          if (v19)
            std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100]((uint64_t)v14, v19);
          if (*((_DWORD *)v14 - 2) >= 0x41u)
          {
            if (*v16)
              MEMORY[0x24BD1B380](*v16, 0x1000C8000313F17);
          }
        }
        v14 += 3;
        v15 -= 24;
      }
      while (v15);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 24 * v20;
    v22 = result + 8;
    do
    {
      *v22 = 0;
      *((_QWORD *)v22 - 1) = -1;
      v22 += 6;
      v21 -= 24;
    }
    while (v21);
  }
  return result;
}

void std::default_delete<llvm::ConstantInt>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
    {
      v3 = *(_QWORD *)(a2 + 24);
      if (v3)
        MEMORY[0x24BD1B380](v3, 0x1000C8000313F17);
    }
    llvm::Value::~Value((llvm::Value *)a2);
    llvm::User::operator delete(v4);
  }
}

llvm::APFloat *llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  char v4;
  llvm::APFloat *v5;
  llvm::APFloat *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(a1, (llvm *)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::InsertIntoBucketImpl<llvm::APFloat>((uint64_t)a1, a2, (llvm *)a2, v7);
    llvm::APFloat::Storage::operator=((llvm::APFloat *)((char *)v5 + 8), (llvm::detail::DoubleAPFloat *)(a2 + 8));
    *((_QWORD *)v5 + 4) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>(uint64_t *a1, llvm *a2, llvm::APFloat **a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  const llvm::APFloat *v8;
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unsigned int v12;
  llvm::APFloat *v13;
  unsigned __int8 IsEqual;
  llvm::APFloat *v16;
  int v17;
  llvm::APFloat *v18;
  _BYTE v19[8];
  uint64_t v20[3];
  _BYTE v21[8];
  uint64_t v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 1;
    llvm::detail::IEEEFloat::IEEEFloat(v22, (uint64_t)&llvm::semBogus, 1);
    llvm::detail::IEEEFloat::IEEEFloat(v20, (uint64_t)&llvm::semBogus, 2);
    v11 = v4 - 1;
    v12 = v11 & llvm::hash_value(a2, v8, v9, v10);
    v13 = (llvm::APFloat *)(v6 + 40 * v12);
    if ((llvm::APFloat::bitwiseIsEqual(a2, v13) & 1) == 0)
    {
      v18 = 0;
      v17 = 1;
      while (!llvm::APFloat::bitwiseIsEqual(v13, (const llvm::APFloat *)v21))
      {
        IsEqual = llvm::APFloat::bitwiseIsEqual(v13, (const llvm::APFloat *)v19);
        v16 = v18;
        if ((IsEqual & (v18 == 0)) != 0)
          v16 = v13;
        v18 = v16;
        v12 = (v12 + v17) & v11;
        v13 = (llvm::APFloat *)(v6 + 40 * v12);
        v7 = 1;
        ++v17;
        if (llvm::APFloat::bitwiseIsEqual(a2, v13))
          goto LABEL_3;
      }
      v7 = 0;
      if (v18)
        v13 = v18;
    }
LABEL_3:
    *a3 = v13;
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v20);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v22);
  }
  else
  {
    v7 = 0;
    *a3 = 0;
  }
  return v7;
}

llvm::APFloat *llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::InsertIntoBucketImpl<llvm::APFloat>(uint64_t a1, uint64_t a2, llvm *a3, llvm::APFloat *a4)
{
  int v6;
  unsigned int v7;
  llvm::APFloat *v10;
  uint64_t v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  llvm::detail::IEEEFloat::IEEEFloat(v11, (uint64_t)&llvm::semBogus, 1);
  if ((llvm::APFloat::bitwiseIsEqual(a4, (const llvm::APFloat *)&v10) & 1) == 0)
    --*(_DWORD *)(a1 + 12);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v11);
  return a4;
}

void llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::APFloat *v11;
  uint64_t v12;
  llvm::APFloat *v13;
  _BYTE v14[8];
  uint64_t v15[3];
  _BYTE v16[8];
  uint64_t v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(40 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty((uint64_t *)a1);
    llvm::detail::IEEEFloat::IEEEFloat(v17, (uint64_t)&llvm::semBogus, 1);
    llvm::detail::IEEEFloat::IEEEFloat(v15, (uint64_t)&llvm::semBogus, 2);
    if ((_DWORD)v3)
    {
      v9 = 40 * v3;
      v10 = (uint64_t *)(v4 + 32);
      do
      {
        if ((llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)(v10 - 4), (const llvm::APFloat *)v16) & 1) == 0
          && (llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)(v10 - 4), (const llvm::APFloat *)v14) & 1) == 0)
        {
          v13 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::LookupBucketFor<llvm::APFloat>((uint64_t *)a1, (llvm *)(v10 - 4), &v13);
          v11 = v13;
          llvm::APFloat::Storage::operator=((llvm::APFloat *)((char *)v13 + 8), (void **)v10 - 3);
          v12 = *v10;
          *v10 = 0;
          *((_QWORD *)v11 + 4) = v12;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<llvm::ConstantFP>::reset[abi:nn180100](v10, 0);
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v10 - 3));
        v10 += 5;
        v9 -= 40;
      }
      while (v9);
    }
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v15);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v17);
    JUMPOUT(0x24BD1B398);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty((uint64_t *)a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>,llvm::APFloat,std::unique_ptr<llvm::ConstantFP>,llvm::DenseMapAPFloatKeyInfo,llvm::detail::DenseMapPair<llvm::APFloat,std::unique_ptr<llvm::ConstantFP>>>::initEmpty(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::APFloat::Storage *v5;
  uint64_t v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  llvm::detail::IEEEFloat::IEEEFloat(v6, (uint64_t)&llvm::semBogus, 1);
  v2 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 40 * v2;
    v5 = (llvm::APFloat::Storage *)(v3 + 8);
    do
    {
      v5 = (llvm::detail::IEEEFloat *)((char *)llvm::APFloat::Storage::Storage(v5, (const llvm::APFloat::Storage *)v6)
                                     + 40);
      v4 -= 40;
    }
    while (v4);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v6);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *result;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a2 == a3)
    return a2;
  result = a3;
  v5 = (_QWORD **)(a4 + 8);
  do
  {
    v6 = v5 - 1;
    v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5)
        (*v5)[2] = v5[1];
    }
    *v6 = v7;
    if (v7)
    {
      v10 = *(_QWORD **)(v7 + 8);
      v8 = (_QWORD *)(v7 + 8);
      v9 = v10;
      *v5 = v10;
      if (v10)
        v9[2] = v5;
      v5[1] = v8;
      *v8 = v6;
    }
    ++a2;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v6;
  _QWORD v7[8];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 8), *(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 16), a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, (uint64_t *)a1, &v6);
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantArray>::create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  int v11;
  _QWORD *v13;
  _BYTE v14[24];

  v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  *v10 = a2;
  v10[1] = 0;
  v11 = *((_DWORD *)v10 + 5) & 0xC0000000 | a4 & 0x7FFFFFF;
  *((_DWORD *)v10 + 4) = 8;
  *((_DWORD *)v10 + 5) = v11;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v14, a3, &a3[a4], (uint64_t)&v10[-4 * (a4 & 0x7FFFFFF)]);
  v13 = v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, &v13, a5, (uint64_t)v14);
  return v10;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6)
{
  _QWORD *v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;

  v12 = a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  v13 = v12;
  v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 isEqual;
  _BOOL4 v16;
  uint64_t *v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v5 = *a1;
    v6 = (_QWORD *)(a2 + 8);
    v7 = v4 - 1;
    v8 = *(_DWORD *)a2 & (v4 - 1);
    v9 = (uint64_t *)(*a1 + 8 * v8);
    if (llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::isEqual((_QWORD *)(a2 + 8), *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v9 == -8192;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v5 + 8 * v8);
        isEqual = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::isEqual(v6, *v9);
        v11 = v17;
        v16 = isEqual;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::isEqual(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  _BOOL8 result;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (*a1 != *(_QWORD *)a2)
    return 0;
  v2 = a1[2];
  if (v2 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
    return 0;
  if (!a1[2])
    return 1;
  v3 = (uint64_t *)a1[1];
  v4 = (uint64_t *)(a2 - 32 * v2);
  v5 = a1[2] - 1;
  do
  {
    v7 = *v3++;
    v6 = v7;
    v9 = *v4;
    v4 += 4;
    v8 = v9;
    v11 = v5-- != 0;
    result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, (uint64_t)a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  int HashValue;
  int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if ((_DWORD)v3)
    {
      v15 = &v4[v3];
      v16 = v4;
      do
      {
        if (((unint64_t)*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = *(uint64_t ***)a1;
          v18 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(*v16, v10, v11, v12);
          v20 = v18 - 1;
          v21 = *v16;
          v22 = HashValue & (v18 - 1);
          v23 = &v17[v22];
          v24 = *v23;
          if (*v16 != *v23)
          {
            v25 = 0;
            v26 = 1;
            while (v24 != (uint64_t *)-4096)
            {
              if (v25)
                v27 = 0;
              else
                v27 = v24 == (uint64_t *)-8192;
              if (v27)
                v25 = v23;
              v28 = v22 + v26++;
              v22 = v28 & v20;
              v23 = &v17[v28 & v20];
              v24 = *v23;
              if (v21 == *v23)
                goto LABEL_12;
            }
            if (v25)
              v23 = v25;
          }
LABEL_12:
          *v23 = v21;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v29 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v29)
  {
    v30 = 8 * v29;
    do
    {
      *result++ = -4096;
      v30 -= 8;
    }
    while (v30);
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t HashValue;
  _QWORD v13[3];
  void *v14;
  uint64_t v15;
  _QWORD v16[33];

  v16[32] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x2000000000;
  v4 = *a1;
  v5 = *((_DWORD *)a1 + 5);
  v6 = v5 & 0x7FFFFFF;
  if ((v5 & 0x7FFFFFF) != 0)
  {
    v8 = a1;
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, v8[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]);
      v8 += 4;
      --v6;
    }
    while (v6);
    v9 = v14;
    v10 = v15;
  }
  else
  {
    v10 = 0;
    v9 = v16;
  }
  v13[0] = v4;
  v13[1] = v9;
  v13[2] = v10;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo::getHashValue((uint64_t)v13, a2, a3, a4);
  if (v14 != v16)
    free(v14);
  return HashValue;
}

uint64_t getFPSequenceIfElementsMatch<llvm::ConstantDataArray,unsigned long long>(uint64_t ****a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ****v4;
  BOOL v5;
  uint64_t *LimitedValue;
  llvm::Type *v7;
  llvm::Type *v8;
  llvm::ConstantAggregateZero *v9;
  uint64_t Impl;
  uint64_t **v12;
  unsigned int v13;
  void *v14;
  llvm::Type *v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = (llvm::Type *)0x1000000000;
  if (a2)
  {
    v3 = 8 * a2;
    v4 = a1;
    do
    {
      if (*v4)
        v5 = *((_BYTE *)*v4 + 16) == 17;
      else
        v5 = 0;
      if (!v5)
      {
        Impl = 0;
        goto LABEL_15;
      }
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v12, (llvm::APFloat *)(*v4 + 3));
      LimitedValue = llvm::APInt::getLimitedValue(&v12, 0xFFFFFFFFFFFFFFFFLL);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, (uint64_t)LimitedValue);
      if (v13 >= 0x41 && v12)
        MEMORY[0x24BD1B380](v12, 0x1000C8000313F17);
      ++v4;
      v3 -= 8;
    }
    while (v3);
    v7 = (llvm::Type *)v14;
    v8 = (llvm::Type *)v15;
  }
  else
  {
    v8 = 0;
    v7 = (llvm::Type *)v16;
  }
  llvm::ArrayType::get(**a1, v8);
  Impl = llvm::ConstantDataSequential::getImpl(v7, (llvm::Type *)(8 * (_QWORD)v8), v9);
LABEL_15:
  if (v14 != v16)
    free(v14);
  return Impl;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantStruct>::create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  int v11;
  _QWORD *v13;
  _BYTE v14[24];

  v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  *v10 = a2;
  v10[1] = 0;
  v11 = *((_DWORD *)v10 + 5) & 0xC0000000 | a4 & 0x7FFFFFF;
  *((_DWORD *)v10 + 4) = 9;
  *((_DWORD *)v10 + 5) = v11;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v14, a3, &a3[a4], (uint64_t)&v10[-4 * (a4 & 0x7FFFFFF)]);
  v13 = v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, &v13, a5, (uint64_t)v14);
  return v10;
}

_QWORD *llvm::ConstantUniqueMap<llvm::ConstantVector>::create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  int v11;
  _QWORD *v13;
  _BYTE v14[24];

  v10 = llvm::User::operator new((llvm::User *)0x18, a4);
  *v10 = a2;
  v10[1] = 0;
  v11 = *((_DWORD *)v10 + 5) & 0xC0000000 | a4 & 0x7FFFFFF;
  *((_DWORD *)v10 + 4) = 10;
  *((_DWORD *)v10 + 5) = v11;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v14, a3, &a3[a4], (uint64_t)&v10[-4 * (a4 & 0x7FFFFFF)]);
  v13 = v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>,llvm::ConstantArray *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantArray>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantArray *>>::insert_as<std::pair<unsigned int,std::pair<llvm::ArrayType *,llvm::ConstantAggrKeyType<llvm::ConstantArray>>>>(a1, &v13, a5, (uint64_t)v14);
  return v10;
}

uint64_t getFPSequenceIfElementsMatch<llvm::ConstantDataVector,unsigned long long>(uint64_t ****a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ****v4;
  BOOL v5;
  uint64_t *LimitedValue;
  llvm::Type *v7;
  llvm::Type *v8;
  llvm::ConstantAggregateZero *v9;
  uint64_t Impl;
  uint64_t **v12;
  unsigned int v13;
  void *v14;
  llvm::Type *v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = (llvm::Type *)0x1000000000;
  if (a2)
  {
    v3 = 8 * a2;
    v4 = a1;
    do
    {
      if (*v4)
        v5 = *((_BYTE *)*v4 + 16) == 17;
      else
        v5 = 0;
      if (!v5)
      {
        Impl = 0;
        goto LABEL_15;
      }
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v12, (llvm::APFloat *)(*v4 + 3));
      LimitedValue = llvm::APInt::getLimitedValue(&v12, 0xFFFFFFFFFFFFFFFFLL);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, (uint64_t)LimitedValue);
      if (v13 >= 0x41 && v12)
        MEMORY[0x24BD1B380](v12, 0x1000C8000313F17);
      ++v4;
      v3 -= 8;
    }
    while (v3);
    v7 = (llvm::Type *)v14;
    v8 = (llvm::Type *)v15;
  }
  else
  {
    v8 = 0;
    v7 = (llvm::Type *)v16;
  }
  llvm::FixedVectorType::get(**a1, v8);
  Impl = llvm::ConstantDataSequential::getImpl(v7, (llvm::Type *)(8 * v8), v9);
LABEL_15:
  if (v14 != v16)
    free(v14);
  return Impl;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucketImpl<llvm::Type *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>,llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::InsertIntoBucketImpl<llvm::Type *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::unique_ptr<llvm::ConstantAggregateZero>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (uint64_t *)(v4 + 8);
      v13 = 16 * v3;
      do
      {
        if ((*(v12 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v12 - 1, &v18);
          v14 = v18;
          *v18 = *(v12 - 1);
          v15 = *v12;
          *v12 = 0;
          v14[1] = v15;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<llvm::ConstantTokenNone>::reset[abi:nn180100](v12, 0);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(a1, (uint64_t)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v7);
    *v5 = *a2;
    v5[1] = a2[1];
    v5[2] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  uint64_t result;
  BOOL v18;
  unsigned int v20;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<std::pair<llvm::BasicBlock *,llvm::BasicBlock *>,void>::getHashValue((_DWORD *)a2);
    v8 = v4 - 1;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = HashValue & (v4 - 1);
    v11 = (_QWORD *)(v6 + 24 * v10);
    v12 = *v11;
    v13 = v11[1];
    if (*(_QWORD *)a2 == *v11 && v9 == v13)
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      result = 1;
      while (v12 != -4096 || v13 != -4096)
      {
        if (v15)
          v18 = 0;
        else
          v18 = v13 == -8192;
        if (v18 && v12 == -8192)
          v15 = v11;
        v20 = v10 + v16++;
        v10 = v20 & v8;
        v11 = (_QWORD *)(v6 + 24 * (v20 & v8));
        v12 = *v11;
        v13 = v11[1];
        if (*(_QWORD *)a2 == *v11 && v9 == v13)
          goto LABEL_9;
      }
      result = 0;
      if (v15)
        v11 = v15;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v11;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::InsertIntoBucketImpl<std::pair<llvm::Function const*,llvm::BasicBlock const*>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 24 * v3;
      v14 = (_QWORD *)v4;
      do
      {
        v15 = v14[1];
        if ((*v14 != -4096 || v15 != -4096) && (*v14 != -8192 || v15 != -8192))
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>,std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *,llvm::DenseMapInfo<std::pair<llvm::Function const*,llvm::BasicBlock const*>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Function const*,llvm::BasicBlock const*>,llvm::BlockAddress *>>::LookupBucketFor<std::pair<llvm::Function const*,llvm::BasicBlock const*>>((uint64_t *)a1, (uint64_t)v14, &v20);
          v16 = v20;
          *v20 = *v14;
          v16[1] = v14[1];
          v16[2] = v14[2];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 3;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 24 * v17;
    v19 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v19;
      result = (_OWORD *)((char *)result + 24);
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::InsertIntoBucketImpl<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (_QWORD *)v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v13, &v17);
          v14 = v17;
          *v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    do
    {
      *result = -4096;
      result += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int Hash;
  _QWORD v7[8];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  Hash = llvm::ConstantExprKeyType::getHash((llvm::ConstantExprKeyType *)(a1 + 1), a2, a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, a1, &Hash);
}

unint64_t llvm::ConstantExprKeyType::getHash(llvm::ConstantExprKeyType *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char *v5;
  __int16 *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v10;
  unint64_t v11;
  _BYTE v12[64];
  char v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 1;
  v6 = (__int16 *)((char *)this + 2);
  v11 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*((llvm::hashing::detail::hash_state **)this + 1), *((_QWORD *)this + 1) + 8 * *((_QWORD *)this + 2), a3, a4);
  v10 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*((llvm::hashing::detail::hash_state **)this + 3), *((_QWORD *)this + 3) + 4 * *((_QWORD *)this + 4), v7, v8);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v12);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned char,unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>((llvm::hashing::detail::hash_combine_recursive_helper *)v12, 0, v12, v13, (char *)this, v5, v6, (uint64_t *)&v11, (uint64_t *)&v10, (uint64_t *)this + 5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned char,unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, char *a6, __int16 *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  _BYTE *v15;
  _WORD *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned short,llvm::hash_code,llvm::hash_code,llvm::Type *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _WORD *a3, char *a4, __int16 *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  _WORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned short>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

_WORD *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned short>(uint64_t a1, uint64_t *a2, _WORD *__dst, unint64_t a4, __int16 a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  __int16 __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(_QWORD *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(_QWORD *)(a1 + 112) = v15;
      v11 = 64;
    }
    *a2 = v11;
    if (a1 + 2 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 2 - v8);
      a1 += 2 - v8;
    }
  }
  return (_WORD *)a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  _QWORD **v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  int v10;
  int i;
  unsigned int v12;
  _QWORD **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = 0;
    v7 = *a1;
    v9 = (unsigned __int8 *)(a2 + 16);
    v8 = *(_DWORD *)a2;
    v10 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v12 = v8 & v10;
      v13 = (_QWORD **)(v7 + 8 * (v8 & v10));
      v14 = *v13;
      if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(_QWORD *)(a2 + 8) == *v14)
      {
        if (llvm::ConstantExprKeyType::operator==(v9, (uint64_t)v14))
        {
          result = 1;
          goto LABEL_18;
        }
        v14 = *v13;
      }
      if (v14 == (_QWORD *)-4096)
        break;
      if (v6)
        v15 = 0;
      else
        v15 = v14 == (_QWORD *)-8192;
      if (v15)
        v6 = (_QWORD **)(v7 + 8 * v12);
      v8 = v12 + i;
    }
    result = 0;
    if (v6)
      v13 = v6;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::ConstantExprKeyType::operator==(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(unsigned __int16 *)(a2 + 18);
  if (v2 != *a1)
    return 0;
  if (a1[1] != *(unsigned __int8 *)(a2 + 17) >> 1)
    return 0;
  v5 = *((_QWORD *)a1 + 2);
  if (v5 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
    return 0;
  v6 = (v2 - 53) > 1 ? 0 : *(unsigned __int16 *)(a2 + 24);
  if (v6 != *((unsigned __int16 *)a1 + 1))
    return 0;
  v7 = *((_QWORD *)a1 + 2);
  if (*((_QWORD *)a1 + 2))
  {
    v8 = (_QWORD *)*((_QWORD *)a1 + 1);
    v9 = (_QWORD *)(a2 - 32 * v5);
    while (*v8 == *v9)
    {
      ++v8;
      v9 += 4;
      if (!--v7)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  v10 = *((_QWORD *)a1 + 4);
  if (v2 == 63)
  {
    v11 = *(const void **)(a2 + 24);
    v12 = *(unsigned int *)(a2 + 32);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  if (v10 != v12 || memcmp(*((const void **)a1 + 3), v11, 4 * v10))
    return 0;
  if (v2 == 34)
    v14 = *(_QWORD *)(a2 + 24);
  else
    v14 = 0;
  return *((_QWORD *)a1 + 5) == v14;
}

_QWORD *llvm::ConstantExprKeyType::create(llvm::ConstantExprKeyType *this, llvm::Type *a2)
{
  int v4;
  char *v5;
  _QWORD *v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  __int16 v13;
  llvm::GetElementPtrInst *TypeAtIndex;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  llvm::Value *v20;
  int v21;
  llvm::Type **v22;
  uint64_t v23;
  llvm::Type *v24;
  unsigned int v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Type *v72;
  int *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  char *v85;
  _QWORD *v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  char v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;

  v4 = *(unsigned __int8 *)this;
  switch(*(_BYTE *)this)
  {
    case '5':
      v5 = (char *)operator new(0x60uLL);
      v6 = v5 + 64;
      *((_DWORD *)v5 + 21) = *((_DWORD *)v5 + 21) & 0x38000000 | 2;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = v5 + 64;
      *((_QWORD *)v5 + 4) = 0;
      *((_QWORD *)v5 + 5) = 0;
      *((_QWORD *)v5 + 6) = 0;
      *((_QWORD *)v5 + 7) = v5 + 64;
      v7 = *((_WORD *)this + 1);
      v8 = (uint64_t *)*((_QWORD *)this + 1);
      v9 = *v8;
      v10 = v8[1];
      v11 = (uint64_t)(v5 + 64);
      v12 = a2;
      v13 = 53;
      goto LABEL_15;
    case '6':
      v32 = (char *)operator new(0x60uLL);
      v6 = v32 + 64;
      *((_DWORD *)v32 + 21) = *((_DWORD *)v32 + 21) & 0x38000000 | 2;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 3) = v32 + 64;
      *((_QWORD *)v32 + 4) = 0;
      *((_QWORD *)v32 + 5) = 0;
      *((_QWORD *)v32 + 6) = 0;
      *((_QWORD *)v32 + 7) = v32 + 64;
      v7 = *((_WORD *)this + 1);
      v33 = (uint64_t *)*((_QWORD *)this + 1);
      v9 = *v33;
      v10 = v33[1];
      v11 = (uint64_t)(v32 + 64);
      v12 = a2;
      v13 = 54;
LABEL_15:
      llvm::CompareConstantExpr::CompareConstantExpr(v11, (uint64_t)v12, v13, v7, v9, v10);
      return v6;
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
      goto LABEL_9;
    case '=':
      v34 = (char *)operator new(0x58uLL);
      v6 = v34 + 64;
      *((_DWORD *)v34 + 21) = *((_DWORD *)v34 + 21) & 0x38000000 | 2;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v34 + 2) = 0;
      *((_QWORD *)v34 + 3) = v34 + 64;
      *((_QWORD *)v34 + 4) = 0;
      v35 = v34 + 32;
      *((_QWORD *)v34 + 5) = 0;
      *((_QWORD *)v34 + 6) = 0;
      *((_QWORD *)v34 + 7) = v34 + 64;
      v36 = *((_QWORD *)this + 1);
      v38 = *(_QWORD **)v36;
      v37 = *(_QWORD *)(v36 + 8);
      *((_QWORD *)v34 + 8) = *(_QWORD *)(*v38 + 24);
      *((_QWORD *)v34 + 9) = 0;
      v34[80] = 5;
      v34[81] = 0;
      *((_DWORD *)v34 + 21) = 2;
      *((_WORD *)v34 + 41) = 61;
      *(_QWORD *)v34 = v38;
      v41 = v38[1];
      v39 = v38 + 1;
      v40 = v41;
      *((_QWORD *)v34 + 1) = v41;
      if (v41)
        *(_QWORD *)(v40 + 16) = v34 + 8;
      *((_QWORD *)v34 + 2) = v39;
      *v39 = v34;
      if (*((_QWORD *)v34 + 4))
      {
        **((_QWORD **)v34 + 6) = *((_QWORD *)v34 + 5);
        v42 = *((_QWORD *)v34 + 5);
        if (v42)
          *(_QWORD *)(v42 + 16) = *((_QWORD *)v34 + 6);
      }
      *v35 = v37;
      if (v37)
      {
        v45 = *(_QWORD *)(v37 + 8);
        v43 = (_QWORD *)(v37 + 8);
        v44 = v45;
        *((_QWORD *)v34 + 5) = v45;
        if (v45)
          *(_QWORD *)(v44 + 16) = v34 + 40;
        *((_QWORD *)v34 + 6) = v43;
        *v43 = v35;
      }
      return v6;
    case '>':
      v46 = (char *)operator new(0x78uLL);
      v47 = 0;
      v6 = v46 + 96;
      *((_DWORD *)v46 + 29) = *((_DWORD *)v46 + 29) & 0x38000000 | 3;
      do
      {
        v48 = &v46[v47];
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
        *((_QWORD *)v48 + 2) = 0;
        *((_QWORD *)v48 + 3) = v6;
        v47 += 32;
      }
      while (v47 != 96);
      v49 = *((_QWORD *)this + 1);
      v51 = *(_QWORD **)v49;
      v50 = *(_QWORD *)(v49 + 8);
      v52 = *(_QWORD *)(v49 + 16);
      *((_QWORD *)v46 + 12) = *v51;
      *((_QWORD *)v46 + 13) = 0;
      v46[112] = 5;
      v46[113] = 0;
      *((_DWORD *)v46 + 29) = *((_DWORD *)v46 + 29) & 0xC0000000 | 3;
      *((_WORD *)v46 + 57) = 62;
      if (*(_QWORD *)v46)
      {
        **((_QWORD **)v46 + 2) = *((_QWORD *)v46 + 1);
        v53 = *((_QWORD *)v46 + 1);
        if (v53)
          *(_QWORD *)(v53 + 16) = *((_QWORD *)v46 + 2);
      }
      *(_QWORD *)v46 = v51;
      v56 = v51[1];
      v54 = v51 + 1;
      v55 = v56;
      *((_QWORD *)v46 + 1) = v56;
      if (v56)
        *(_QWORD *)(v55 + 16) = v46 + 8;
      *((_QWORD *)v46 + 2) = v54;
      *v54 = v46;
      v57 = v46 + 32;
      if (*((_QWORD *)v46 + 4))
      {
        **((_QWORD **)v46 + 6) = *((_QWORD *)v46 + 5);
        v58 = *((_QWORD *)v46 + 5);
        if (v58)
          *(_QWORD *)(v58 + 16) = *((_QWORD *)v46 + 6);
      }
      *v57 = v50;
      if (v50)
      {
        v61 = *(_QWORD *)(v50 + 8);
        v59 = (_QWORD *)(v50 + 8);
        v60 = v61;
        *((_QWORD *)v46 + 5) = v61;
        if (v61)
          *(_QWORD *)(v60 + 16) = v46 + 40;
        *((_QWORD *)v46 + 6) = v59;
        *v59 = v57;
      }
      v62 = v46 + 64;
      if (*((_QWORD *)v46 + 8))
      {
        **((_QWORD **)v46 + 10) = *((_QWORD *)v46 + 9);
        v63 = *((_QWORD *)v46 + 9);
        if (v63)
          *(_QWORD *)(v63 + 16) = *((_QWORD *)v46 + 10);
      }
      *v62 = v52;
      if (v52)
      {
        v66 = *(_QWORD *)(v52 + 8);
        v64 = (_QWORD *)(v52 + 8);
        v65 = v66;
        *((_QWORD *)v46 + 9) = v66;
        if (v66)
          *(_QWORD *)(v65 + 16) = v46 + 72;
        *((_QWORD *)v46 + 10) = v64;
        *v64 = v62;
      }
      return v6;
    case '?':
      v67 = (char *)operator new(0x80uLL);
      v6 = v67 + 64;
      *((_DWORD *)v67 + 21) = *((_DWORD *)v67 + 21) & 0x38000000 | 2;
      *(_QWORD *)v67 = 0;
      *((_QWORD *)v67 + 1) = 0;
      *((_QWORD *)v67 + 2) = 0;
      *((_QWORD *)v67 + 3) = v67 + 64;
      *((_QWORD *)v67 + 4) = 0;
      v68 = v67 + 32;
      *((_QWORD *)v67 + 5) = 0;
      *((_QWORD *)v67 + 6) = 0;
      *((_QWORD *)v67 + 7) = v67 + 64;
      v69 = (_QWORD *)*((_QWORD *)this + 1);
      v71 = *v69;
      v70 = v69[1];
      v73 = (int *)*((_QWORD *)this + 3);
      v72 = (llvm::Type *)*((_QWORD *)this + 4);
      llvm::VectorType::get(*(uint64_t ***)(*(_QWORD *)*v69 + 24), (llvm::Type *)(v72 | ((unint64_t)(*(_BYTE *)(*(_QWORD *)*v69 + 8) == 19) << 32)));
      *((_QWORD *)v67 + 8) = v74;
      *((_QWORD *)v67 + 9) = 0;
      v75 = *((_DWORD *)v67 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v67 + 20) = 4128773;
      *((_DWORD *)v67 + 21) = v75;
      *((_QWORD *)v67 + 11) = v67 + 104;
      *((_QWORD *)v67 + 12) = 0x400000000;
      if (*(_QWORD *)v67)
      {
        **((_QWORD **)v67 + 2) = *((_QWORD *)v67 + 1);
        v76 = *((_QWORD *)v67 + 1);
        if (v76)
          *(_QWORD *)(v76 + 16) = *((_QWORD *)v67 + 2);
      }
      *(_QWORD *)v67 = v71;
      v79 = *(_QWORD *)(v71 + 8);
      v78 = (_QWORD *)(v71 + 8);
      v77 = v79;
      *((_QWORD *)v67 + 1) = v79;
      if (v79)
        *(_QWORD *)(v77 + 16) = v67 + 8;
      *((_QWORD *)v67 + 2) = v78;
      *v78 = v67;
      if (*((_QWORD *)v67 + 4))
      {
        **((_QWORD **)v67 + 6) = *((_QWORD *)v67 + 5);
        v80 = *((_QWORD *)v67 + 5);
        if (v80)
          *(_QWORD *)(v80 + 16) = *((_QWORD *)v67 + 6);
      }
      *v68 = v70;
      if (v70)
      {
        v83 = *(_QWORD *)(v70 + 8);
        v82 = (_QWORD *)(v70 + 8);
        v81 = v83;
        *((_QWORD *)v67 + 5) = v83;
        if (v83)
          *(_QWORD *)(v81 + 16) = v67 + 40;
        *((_QWORD *)v67 + 6) = v82;
        *v82 = v68;
      }
      *((_DWORD *)v67 + 24) = 0;
      llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)v67 + 22, v73, &v73[(_QWORD)v72]);
      *((_QWORD *)v67 + 15) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v73, v72, *((_BYTE **)v67 + 8), v84);
      return v6;
    default:
      if (v4 == 34)
      {
        TypeAtIndex = (llvm::GetElementPtrInst *)*((_QWORD *)this + 5);
        v15 = (_QWORD *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        v17 = v15 + 1;
        v18 = *v15;
        v19 = *((_BYTE *)this + 1);
        v6 = llvm::User::operator new((llvm::User *)0x28, v16);
        *v6 = a2;
        v6[1] = 0;
        v21 = *((_DWORD *)v6 + 5) & 0xC0000000 | v16 & 0x7FFFFFF;
        *((_DWORD *)v6 + 4) = 2228229;
        *((_DWORD *)v6 + 5) = v21;
        v6[3] = TypeAtIndex;
        if (v16 == 1)
        {
          v25 = 1;
        }
        else
        {
          v22 = (llvm::Type **)(v15 + 2);
          v23 = 8 * v16 - 16;
          do
          {
            if (!v23)
              break;
            v24 = *v22++;
            TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v24, v20);
            v23 -= 8;
          }
          while (TypeAtIndex);
          v25 = *((_DWORD *)v6 + 5) & 0x7FFFFFF;
        }
        v6[4] = TypeAtIndex;
        v99 = -(uint64_t)v25;
        v100 = &v6[-4 * v25];
        if (*v100)
        {
          v101 = &v6[4 * v99];
          v103 = (_QWORD *)v101[2];
          v102 = v101 + 2;
          *v103 = *(v102 - 1);
          v104 = *(v102 - 1);
          if (v104)
            *(_QWORD *)(v104 + 16) = *v102;
        }
        *v100 = v18;
        if (v18)
        {
          v107 = *(_QWORD *)(v18 + 8);
          v106 = (_QWORD *)(v18 + 8);
          v105 = v107;
          v108 = &v6[4 * v99];
          v108[1] = v107;
          if (v107)
            *(_QWORD *)(v105 + 16) = v108 + 1;
          v108[2] = v106;
          *v106 = v100;
        }
        v109 = *((_DWORD *)v6 + 5);
        if ((v109 & 0x40000000) != 0)
        {
          v110 = (_QWORD *)*(v6 - 1);
          if ((_DWORD)v16 == 1)
          {
LABEL_90:
            *((_BYTE *)v6 + 17) = *((_BYTE *)v6 + 17) & 1 | (2 * v19);
            return v6;
          }
        }
        else
        {
          v110 = &v6[-4 * (v109 & 0x7FFFFFF)];
          if ((_DWORD)v16 == 1)
            goto LABEL_90;
        }
        v111 = (v16 - 1);
        v112 = v110 + 4;
        do
        {
          v113 = *v17;
          if (*v112)
          {
            *(_QWORD *)v112[2] = v112[1];
            v114 = v112[1];
            if (v114)
              *(_QWORD *)(v114 + 16) = v112[2];
          }
          *v112 = v113;
          if (v113)
          {
            v117 = *(_QWORD *)(v113 + 8);
            v115 = (_QWORD *)(v113 + 8);
            v116 = v117;
            v112[1] = v117;
            if (v117)
              *(_QWORD *)(v116 + 16) = v112 + 1;
            v112[2] = v115;
            *v115 = v112;
          }
          ++v17;
          v112 += 4;
          --v111;
        }
        while (v111);
        goto LABEL_90;
      }
LABEL_9:
      if ((v4 - 38) > 0xC)
      {
        v85 = (char *)operator new(0x58uLL);
        v6 = v85 + 64;
        *((_DWORD *)v85 + 21) = *((_DWORD *)v85 + 21) & 0x38000000 | 2;
        *(_QWORD *)v85 = 0;
        *((_QWORD *)v85 + 1) = 0;
        *((_QWORD *)v85 + 2) = 0;
        *((_QWORD *)v85 + 3) = v85 + 64;
        *((_QWORD *)v85 + 4) = 0;
        v86 = v85 + 32;
        *((_QWORD *)v85 + 5) = 0;
        *((_QWORD *)v85 + 6) = 0;
        *((_QWORD *)v85 + 7) = v85 + 64;
        v87 = *(unsigned __int8 *)this;
        v88 = *((_QWORD *)this + 1);
        v90 = *(_QWORD **)v88;
        v89 = *(_QWORD *)(v88 + 8);
        v91 = *((_BYTE *)this + 1);
        *((_QWORD *)v85 + 8) = *v90;
        *((_QWORD *)v85 + 9) = 0;
        v85[80] = 5;
        v85[81] = 0;
        *((_DWORD *)v85 + 21) = 2;
        *((_WORD *)v85 + 41) = v87;
        *(_QWORD *)v85 = v90;
        v94 = v90[1];
        v92 = v90 + 1;
        v93 = v94;
        *((_QWORD *)v85 + 1) = v94;
        if (v94)
          *(_QWORD *)(v93 + 16) = v85 + 8;
        *((_QWORD *)v85 + 2) = v92;
        *v92 = v85;
        if (*((_QWORD *)v85 + 4))
        {
          **((_QWORD **)v85 + 6) = *((_QWORD *)v85 + 5);
          v95 = *((_QWORD *)v85 + 5);
          if (v95)
            *(_QWORD *)(v95 + 16) = *((_QWORD *)v85 + 6);
        }
        *v86 = v89;
        if (v89)
        {
          v98 = *(_QWORD *)(v89 + 8);
          v96 = (_QWORD *)(v89 + 8);
          v97 = v98;
          *((_QWORD *)v85 + 5) = v98;
          if (v98)
            *(_QWORD *)(v97 + 16) = v85 + 40;
          *((_QWORD *)v85 + 6) = v96;
          *v96 = v86;
        }
        v85[81] = v85[81] & 1 | (2 * v91);
      }
      else
      {
        v26 = (char *)operator new(0x38uLL);
        v6 = v26 + 32;
        *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = v26 + 32;
        v27 = *(unsigned __int8 *)this;
        v28 = **((_QWORD **)this + 1);
        *((_QWORD *)v26 + 4) = a2;
        *((_QWORD *)v26 + 5) = 0;
        v26[48] = 5;
        v26[49] = 0;
        *((_DWORD *)v26 + 13) = 1;
        *((_WORD *)v26 + 25) = v27;
        *(_QWORD *)v26 = v28;
        if (v28)
        {
          v31 = *(_QWORD *)(v28 + 8);
          v29 = (_QWORD *)(v28 + 8);
          v30 = v31;
          *((_QWORD *)v26 + 1) = v31;
          if (v31)
            *(_QWORD *)(v30 + 16) = v26 + 8;
          *((_QWORD *)v26 + 2) = v29;
          *v29 = v26;
        }
      }
      return v6;
  }
}

uint64_t llvm::CompareConstantExpr::CompareConstantExpr(uint64_t result, uint64_t a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 5;
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & 0xC0000000 | 2;
  *(_WORD *)(result + 18) = a3;
  *(_WORD *)(result + 24) = a4;
  v6 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v7 = *(_QWORD *)(result - 56);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(result - 48);
  }
  *v6 = a5;
  if (a5)
  {
    v10 = *(_QWORD *)(a5 + 8);
    v8 = (_QWORD *)(a5 + 8);
    v9 = v10;
    *(_QWORD *)(result - 56) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v8;
    *v8 = v6;
  }
  v11 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v12 = *(_QWORD *)(result - 24);
    if (v12)
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(result - 16);
  }
  *v11 = a6;
  if (a6)
  {
    v15 = *(_QWORD *)(a6 + 8);
    v13 = (_QWORD *)(a6 + 8);
    v14 = v15;
    *(_QWORD *)(result - 24) = v15;
    if (v15)
      *(_QWORD *)(v14 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v13;
    *v13 = v11;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::insert_as<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(a1, (uint64_t)a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>,llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::Type *,llvm::ConstantExprKeyType>>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  int HashValue;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if ((_DWORD)v3)
    {
      v15 = &v4[v3];
      v16 = v4;
      do
      {
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = *(uint64_t **)a1;
          v18 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(*v16, v10, v11, v12);
          v20 = v18 - 1;
          v21 = *v16;
          v22 = HashValue & (v18 - 1);
          v23 = &v17[v22];
          v24 = *v23;
          if (*v16 != *v23)
          {
            v25 = 0;
            v26 = 1;
            while (v24 != -4096)
            {
              if (v25)
                v27 = 0;
              else
                v27 = v24 == -8192;
              if (v27)
                v25 = v23;
              v28 = v22 + v26++;
              v22 = v28 & v20;
              v23 = &v17[v28 & v20];
              v24 = *v23;
              if (v21 == *v23)
                goto LABEL_12;
            }
            if (v25)
              v23 = v25;
          }
LABEL_12:
          *v23 = v21;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v29 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v29)
  {
    v30 = 8 * v29;
    do
    {
      *result++ = -4096;
      v30 -= 8;
    }
    while (v30);
  }
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t HashValue;
  uint64_t v21;
  char v22;
  char v23;
  __int16 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[34];

  v32[32] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x2000000000;
  v5 = *(unsigned __int16 *)(a1 + 18);
  v6 = *(_WORD *)(a1 + 18);
  if ((v5 - 53) > 1)
  {
    if (v5 == 34)
    {
      v7 = 0;
      v8 = 0;
      v10 = 0;
      v9 = *(_QWORD *)(a1 + 24);
    }
    else if (v5 == 63)
    {
      v10 = 0;
      v9 = 0;
      v8 = *(_QWORD *)(a1 + 24);
      v7 = *(unsigned int *)(a1 + 32);
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v10 = 0;
      v9 = 0;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(_WORD *)(a1 + 24);
  }
  v11 = *(_QWORD *)a1;
  v12 = *(unsigned __int8 *)(a1 + 17) >> 1;
  v13 = *(_DWORD *)(a1 + 20);
  v14 = v13 & 0x7FFFFFF;
  if ((v13 & 0x7FFFFFF) != 0)
  {
    v15 = v10;
    v16 = a1;
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v30, *(_QWORD *)(v16 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
      v16 += 32;
      --v14;
    }
    while (v14);
    v17 = v30;
    v18 = v31;
    v10 = v15;
  }
  else
  {
    v18 = 0;
    v17 = v32;
  }
  v21 = v11;
  v22 = v6;
  v23 = v12;
  v24 = v10;
  v25 = v17;
  v26 = v18;
  v27 = v8;
  v28 = v7;
  v29 = v9;
  HashValue = llvm::ConstantUniqueMap<llvm::ConstantExpr>::MapInfo::getHashValue(&v21, a2, a3, a4);
  if (v30 != v32)
    free(v30);
  return HashValue;
}

unint64_t **llvm::StringMap<std::unique_ptr<llvm::ConstantDataSequential>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<llvm::ConstantDataSequential>>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t **i;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t *v13;
  char *v14;
  unint64_t v15;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (unint64_t **)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (unint64_t *)-8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = (char *)(v12 + 2);
  if (a3)
    memcpy(v12 + 2, a2, a3);
  v14[a3] = 0;
  v15 = *a4;
  *a4 = 0;
  *v13 = a3;
  v13[1] = v15;
  *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

_QWORD *llvm::SmallVectorImpl<unsigned short>::assign(_QWORD *result, unint64_t a2, __int16 a3)
{
  _WORD **v5;
  _WORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  _WORD *v14;

  v5 = (_WORD **)result;
  if (result[2] >= a2)
  {
    v9 = (_WORD *)*result;
    v8 = result + 1;
    v10 = result[1];
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = result[1];
    if (v11)
    {
      v12 = (_WORD *)*result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    result[1] = 0;
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 2);
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = (unint64_t *)(v5 + 1);
  }
  *v8 = a2;
  return result;
}

char *LLVMCreateMemoryBufferWithMemoryRange(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v6;
  char *result;
  _QWORD v8[4];
  __int16 v9;
  unsigned __int8 *v10;

  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  v9 = 261;
  v8[0] = __s;
  v8[1] = v6;
  v10 = (unsigned __int8 *)v8;
  result = operator new(24, &v10);
  *(_QWORD *)result = off_251C12C18;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = a1 + a2;
  return result;
}

uint64_t LLVMDisposeMemoryBuffer(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

llvm::StructLayout *llvm::StructLayout::StructLayout(llvm::StructLayout *this, llvm::StructType *a2, const llvm::DataLayout *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Type *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;

  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 9) &= ~1u;
  v4 = *((_DWORD *)a2 + 3) & 0x7FFFFFFF;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0x80000000 | v4;
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 8 * v4;
    do
    {
      v10 = *(llvm::Type **)(*((_QWORD *)a2 + 2) + v7);
      if ((*((_BYTE *)a2 + 9) & 2) != 0)
      {
        v11 = 0;
      }
      else
      {
        llvm::DataLayout::getAlignment((uint64_t)a3, *(_QWORD *)(*((_QWORD *)a2 + 2) + v7));
        v8 = *(_QWORD *)this;
      }
      v12 = v11;
      if ((v8 & ~(-1 << v11)) != 0)
      {
        *((_BYTE *)this + 9) |= 1u;
        v8 = (v8 + (1 << v11) - 1) & -(1 << v11);
        *(_QWORD *)this = v8;
      }
      if (v11 <= *((unsigned __int8 *)this + 8))
        v12 = *((_BYTE *)this + 8);
      *((_BYTE *)this + 8) = v12;
      *(_QWORD *)((char *)this + v7 + 16) = v8;
      v8 = *(_QWORD *)this + llvm::DataLayout::getTypeAllocSize(a3, v10);
      *(_QWORD *)this = v8;
      v7 += 8;
    }
    while (v9 != v7);
    v13 = *((_BYTE *)this + 8);
  }
  else
  {
    v8 = 0;
    v13 = 0;
  }
  if ((v8 & ~(-1 << v13)) != 0)
  {
    *((_BYTE *)this + 9) |= 1u;
    *(_QWORD *)this = (v8 + (1 << v13) - 1) & -(1 << v13);
  }
  return this;
}

void llvm::DataLayout::reset(uint64_t a1, void *a2, unint64_t a3)
{
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  llvm::DataLayout::clear(a1);
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_BYTE *)(a1 + 9))
    *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a1 + 21))
    *(_BYTE *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  v6 = &DefaultAlignments;
  *(_WORD *)(a1 + 212) = 768;
  do
  {
    llvm::DataLayout::setAlignment(a1, *v6, *((_BYTE *)v6 + 8), *((_BYTE *)v6 + 9), v6[1], (const llvm::Twine *)&v11);
    if (v11)
    {
      v10 = v11;
      v11 = 0;
      v7 = &v10;
      goto LABEL_12;
    }
    v6 += 3;
  }
  while (v6 != (int *)&unk_25796671C);
  llvm::DataLayout::setPointerAlignmentInBits(a1, 0, 3u, 3u, 64, 64, (const llvm::Twine *)&v11);
  if (v11)
  {
    v9 = v11;
    v11 = 0;
    v7 = &v9;
    goto LABEL_12;
  }
  llvm::DataLayout::parseSpecifier(a1, a2, a3, (const llvm::Twine *)&v11);
  if (v11)
  {
    v8 = v11;
    v11 = 0;
    v7 = &v8;
LABEL_12:
    llvm::report_fatal_error((_QWORD **)v7);
  }
}

uint64_t llvm::DataLayout::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = this;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 168) = 0;
  *(_DWORD *)(this + 248) = 0;
  v2 = *(uint64_t **)(this + 384);
  if (v2)
  {
    v3 = *v2;
    if (*((_DWORD *)v2 + 2))
    {
      v4 = *((unsigned int *)v2 + 4);
      v5 = *v2;
      if ((_DWORD)v4)
      {
        v6 = 0;
        while ((*(_QWORD *)(v3 + v6) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v6 += 16;
          if (16 * v4 == v6)
            goto LABEL_15;
        }
        v5 = v3 + v6;
      }
      v7 = v3 + 16 * v4;
      if (v5 != v7)
      {
LABEL_10:
        free(*(void **)(v5 + 8));
        while (1)
        {
          v5 += 16;
          if (v5 == v7)
            break;
          if ((*(_QWORD *)v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v5 != v7)
              goto LABEL_10;
            break;
          }
        }
        v3 = *v2;
      }
    }
LABEL_15:
    MEMORY[0x24BD1B398](v3, 8);
    this = MEMORY[0x24BD1B3A4](v2, 0x1020C405AF6BDC9);
  }
  *(_QWORD *)(v1 + 384) = 0;
  return this;
}

void llvm::DataLayout::setAlignment(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, unsigned int a5@<W4>, const llvm::Twine *a6@<X8>)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::formatv_object_base *v24;
  __int16 v25;

  if (HIBYTE(a5))
  {
    v7 = "Invalid bit width, must be a 24-bit integer";
    goto LABEL_5;
  }
  if (a4 < a3)
  {
    v7 = "Preferred alignment cannot be less than the ABI alignment";
LABEL_5:
    v24 = (llvm::formatv_object_base *)v7;
    v25 = 259;
    reportError(a6, &v24);
    return;
  }
  if (a2 > 104)
  {
    v9 = a1 + 160;
    if (a2 != 118)
      v9 = 0;
    if (a2 == 105)
      v8 = a1 + 64;
    else
      v8 = v9;
    goto LABEL_16;
  }
  if (a2 != 97)
  {
    if (a2 == 102)
      v8 = a1 + 112;
    else
      v8 = 0;
LABEL_16:
    v10 = *(char **)v8;
    v11 = *(unsigned int *)(v8 + 8);
    if (!(_DWORD)v11)
      goto LABEL_25;
    v12 = *(char **)v8;
    v13 = *(unsigned int *)(v8 + 8);
    do
    {
      v14 = v13 >> 1;
      v15 = (unsigned int *)&v12[8 * (v13 >> 1)];
      v17 = *v15;
      v16 = (char *)(v15 + 2);
      v13 += ~(v13 >> 1);
      if (v17 < a5)
        v12 = v16;
      else
        v13 = v14;
    }
    while (v13);
    if (v12 == &v10[8 * v11])
    {
LABEL_25:
      v18 = ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | a5;
      if (v11 >= *(_DWORD *)(v8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v11 + 1, 8);
        v11 = *(unsigned int *)(v8 + 8);
        v10 = *(char **)v8;
      }
      *(_QWORD *)&v10[8 * v11] = v18;
      ++*(_DWORD *)(v8 + 8);
    }
    else if (*(_DWORD *)v12 == a5)
    {
      v12[4] = a3;
      v12[5] = a4;
    }
    else
    {
      v19 = ((unint64_t)a3 << 32) | ((unint64_t)a4 << 40) | a5;
      v20 = (v12 - v10) >> 3;
      if (v11 >= *(_DWORD *)(v8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v11 + 1, 8);
        v10 = *(char **)v8;
        v11 = *(unsigned int *)(v8 + 8);
      }
      v21 = &v10[8 * v20];
      *(_QWORD *)&v10[8 * v11] = *(_QWORD *)&v10[8 * v11 - 8];
      v22 = *(unsigned int *)(v8 + 8);
      v23 = *(_QWORD *)v8 + 8 * v22;
      if ((char *)(v23 - 8) != v21)
      {
        memmove(v21 + 8, v21, v23 - 8 - (_QWORD)v21 - 2);
        LODWORD(v22) = *(_DWORD *)(v8 + 8);
      }
      *(_DWORD *)(v8 + 8) = v22 + 1;
      *((_WORD *)v21 + 2) = WORD2(v19);
      *(_DWORD *)v21 = v19;
    }
    goto LABEL_34;
  }
  *(_BYTE *)(a1 + 212) = a3;
  *(_BYTE *)(a1 + 213) = a4;
LABEL_34:
  *(_QWORD *)a6 = 0;
}

void llvm::DataLayout::setPointerAlignmentInBits(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const llvm::Twine *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  llvm::formatv_object_base *v28;
  __int16 v29;

  if (a4 < a3)
  {
    v28 = (llvm::formatv_object_base *)"Preferred alignment cannot be less than the ABI alignment";
    v29 = 259;
    reportError(a7, &v28);
    return;
  }
  v11 = *(_QWORD *)(a1 + 240);
  v9 = a1 + 240;
  v10 = v11;
  v12 = *(unsigned int *)(v9 + 8);
  v13 = v11 + 16 * v12;
  if (!(_DWORD)v12)
  {
    v20 = v13;
    goto LABEL_14;
  }
  v14 = v10;
  v15 = *(unsigned int *)(v9 + 8);
  do
  {
    v16 = v15 >> 1;
    v17 = v14 + 16 * (v15 >> 1);
    v18 = *(_DWORD *)(v17 + 8);
    v19 = v17 + 16;
    v15 += ~(v15 >> 1);
    if (v18 < a2)
      v14 = v19;
    else
      v15 = v16;
  }
  while (v15);
  v20 = v13;
  if (v14 == v13)
  {
LABEL_14:
    v21 = ((unint64_t)a4 << 8) | (a5 << 32) | a3;
    v22 = a2 | (unint64_t)(a6 << 32);
    if (v13 == v20)
    {
      if (v12 >= *(_DWORD *)(a1 + 252))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 256), v12 + 1, 16);
        v12 = *(unsigned int *)(a1 + 248);
        v10 = *(_QWORD *)(a1 + 240);
      }
      v27 = (unint64_t *)(v10 + 16 * v12);
      *v27 = v21;
      v27[1] = v22;
      ++*(_DWORD *)(a1 + 248);
    }
    else
    {
      v23 = (v20 - v10) >> 4;
      if (v12 >= *(_DWORD *)(a1 + 252))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 256), v12 + 1, 16);
        v10 = *(_QWORD *)(a1 + 240);
        v12 = *(unsigned int *)(a1 + 248);
      }
      v24 = (unint64_t *)(v10 + 16 * v23);
      *(_OWORD *)(v10 + 16 * v12) = *(_OWORD *)(v10 + 16 * v12 - 16);
      v25 = *(unsigned int *)(a1 + 248);
      v26 = *(_QWORD *)(a1 + 240) + 16 * v25 - 16;
      if ((unint64_t *)v26 != v24)
      {
        memmove(v24 + 2, v24, v26 - (_QWORD)v24);
        LODWORD(v25) = *(_DWORD *)(a1 + 248);
      }
      *(_DWORD *)(a1 + 248) = v25 + 1;
      *v24 = v21;
      v24[1] = v22;
    }
    goto LABEL_23;
  }
  if (*(_DWORD *)(v14 + 8) != a2)
  {
    v20 = v14;
    goto LABEL_14;
  }
  *(_BYTE *)v14 = a3;
  *(_BYTE *)(v14 + 1) = a4;
  *(_DWORD *)(v14 + 4) = a5;
  *(_DWORD *)(v14 + 12) = a6;
LABEL_23:
  *(_QWORD *)a7 = 0;
}

void llvm::DataLayout::parseSpecifier(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, const llvm::Twine *a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  llvm::formatv_object_base *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  BOOL v27;
  const llvm::Twine *v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint8x8_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  uint8x8_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint8x8_t v58;
  BOOL v59;
  _BOOL8 v60;
  __int16 v61;
  __int16 v62;
  unint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  const char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int128 __dst;
  unint64_t v77;
  __int16 v78;
  __int128 v79;
  __int128 v80;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = a3;
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v77 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v77) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v11 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = __dst;
  *(_QWORD *)(a1 + 232) = v77;
  if (!v5)
  {
LABEL_143:
    *(_QWORD *)a4 = 0;
    return;
  }
  v12 = (_QWORD *)(a1 + 32);
  v13 = a1 + 12;
  v14 = a1 + 4;
  v15 = a1 + 16;
  v16 = (unsigned int *)(a1 + 392);
  v17 = 0uLL;
  while (2)
  {
    v79 = v17;
    v80 = v17;
    split(a4, a2, v5, 45, (uint64_t)&v79);
    if (*(_QWORD *)a4)
      return;
    v5 = *((_QWORD *)&v80 + 1);
    a2 = (void *)v80;
    split(a4, (void *)v79, *((uint64_t *)&v79 + 1), 58, (uint64_t)&v79);
    if (*(_QWORD *)a4)
      return;
    v18 = *((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1) == 2)
    {
      v19 = (char *)v79;
      if (*(_WORD *)v79 == 26990)
      {
        v20 = *((_QWORD *)&v80 + 1);
        while (1)
        {
          split(a4, (void *)v80, v20, 58, (uint64_t)&v79);
          if (*(_QWORD *)a4)
            break;
          LODWORD(v73) = 0;
          getInt<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), &v73);
          if (*(_QWORD *)a4)
            break;
          if (!(_DWORD)v73)
          {
            v66 = "Address space 0 can never be non-integral";
            goto LABEL_168;
          }
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v16, v73);
          v20 = *((_QWORD *)&v80 + 1);
          if (!*((_QWORD *)&v80 + 1))
            goto LABEL_142;
        }
        return;
      }
    }
    else
    {
      v19 = (char *)v79;
    }
    v21 = *v19;
    v22 = *((_QWORD *)&v79 + 1) != 0;
    if (*((_QWORD *)&v79 + 1))
      v23 = (llvm::formatv_object_base *)(v19 + 1);
    else
      v23 = (llvm::formatv_object_base *)v19;
    v24 = *((_QWORD *)&v79 + 1) - v22;
    *(_QWORD *)&v79 = v23;
    *((_QWORD *)&v79 + 1) -= v22;
    if (v21 <= 96)
    {
      switch(v21)
      {
        case 'A':
          v28 = a4;
          v29 = v14;
          goto LABEL_111;
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_158;
        case 'E':
          *(_BYTE *)a1 = 1;
          goto LABEL_142;
        case 'F':
          v45 = *(char *)v23;
          if (v45 == 105)
          {
            v46 = 0;
          }
          else
          {
            if (v45 != 110)
            {
              v66 = "Unknown function pointer alignment type in datalayout string";
              goto LABEL_168;
            }
            v46 = 1;
          }
          *(_DWORD *)(a1 + 24) = v46;
          v59 = v18 == v22;
          v60 = v18 != v22;
          if (!v59)
            v23 = (llvm::formatv_object_base *)((char *)v23 + 1);
          *(_QWORD *)&v79 = v23;
          *((_QWORD *)&v79 + 1) = v24 - v60;
          v73 = 0;
          getIntInBytes<unsigned long long>(a4, v23, v24 - v60, &v73);
          if (*(_QWORD *)a4)
            return;
          v61 = v73;
          if (v73)
          {
            if ((v73 & (v73 - 1)) != 0)
            {
LABEL_156:
              v66 = "Alignment is neither 0 nor a power of 2";
              goto LABEL_168;
            }
            v62 = __clz(v73) ^ 0x3F;
            v61 = 1;
          }
          else
          {
            v62 = 0;
          }
          *(_WORD *)(a1 + 20) = v62 | (v61 << 8);
          break;
        case 'G':
          v28 = a4;
          v29 = v15;
          goto LABEL_111;
        default:
          if (v21 == 80)
          {
            v28 = a4;
            v29 = v13;
LABEL_111:
            getAddrSpace(v28, v23, v24, v29);
            if (*(_QWORD *)a4)
              return;
          }
          else
          {
            if (v21 != 83)
            {
LABEL_158:
              v66 = "Unknown specifier in datalayout string";
              goto LABEL_168;
            }
            v73 = 0;
            getIntInBytes<unsigned long long>(a4, v23, v24, &v73);
            if (*(_QWORD *)a4)
              return;
            v30 = v73;
            if (v73)
            {
              if ((v73 & (v73 - 1)) != 0)
                goto LABEL_156;
              v31 = __clz(v73) ^ 0x3F;
              v30 = 1;
            }
            else
            {
              v31 = 0;
            }
            *(_WORD *)(a1 + 8) = v31 | (v30 << 8);
          }
          goto LABEL_142;
      }
      goto LABEL_142;
    }
    switch(v21)
    {
      case 'a':
      case 'f':
      case 'i':
      case 'v':
        v67 = a1;
        v69 = v13;
        v25 = v12;
        LODWORD(v73) = 0;
        if (v18 == v22)
        {
          v26 = 0;
          v27 = v21 == 97;
        }
        else
        {
          getInt<unsigned int>(a4, v23, v24, &v73);
          if (*(_QWORD *)a4)
            return;
          v26 = v73;
          v27 = v21 == 97;
          if (v21 == 97 && (_DWORD)v73)
          {
            v66 = "Sized aggregate specification in datalayout string";
            goto LABEL_168;
          }
        }
        if (!*((_QWORD *)&v80 + 1))
        {
          v66 = "Missing alignment specification in datalayout string";
          goto LABEL_168;
        }
        split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
        if (*(_QWORD *)a4)
          return;
        HIDWORD(v75) = 0;
        getIntInBytes<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), (unint64_t *)((char *)&v75 + 4));
        if (*(_QWORD *)a4)
          return;
        v71 = v16;
        v32 = v14;
        v33 = HIDWORD(v75);
        if (HIDWORD(v75))
          v34 = 1;
        else
          v34 = v27;
        if ((v34 & 1) == 0)
        {
          v66 = "ABI alignment specification must be >0 for non-aggregate types";
          goto LABEL_168;
        }
        if (HIDWORD(v75) >= 0x10000)
        {
          v66 = "Invalid ABI alignment, must be a 16bit integer";
          goto LABEL_168;
        }
        v35 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v75));
        v35.i16[0] = vaddlv_u8(v35);
        v36 = v35.u32[0];
        if (HIDWORD(v75) && v35.u32[0] >= 2uLL)
        {
          v66 = "Invalid ABI alignment, must be a power of 2";
          goto LABEL_168;
        }
        v37 = v26;
        if (v21 == 105 && v26 == 8 && HIDWORD(v75) != 1)
        {
          v66 = "Invalid ABI alignment, i8 must be naturally aligned";
          goto LABEL_168;
        }
        LODWORD(v75) = HIDWORD(v75);
        v38 = HIDWORD(v75);
        v39 = HIDWORD(v75);
        a1 = v67;
        if (!*((_QWORD *)&v80 + 1))
          goto LABEL_66;
        split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
        if (*(_QWORD *)a4)
          return;
        getIntInBytes<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), &v75);
        if (*(_QWORD *)a4)
          return;
        v38 = v75;
        if (WORD1(v75))
        {
          v66 = "Invalid preferred alignment, must be a 16bit integer";
          goto LABEL_168;
        }
        v40 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
        v40.i16[0] = vaddlv_u8(v40);
        v36 = v40.u32[0];
        v39 = v75;
        v37 = v26;
LABEL_66:
        if (v38 && v36 >= 2)
        {
          v66 = "Invalid preferred alignment, must be a power of 2";
          goto LABEL_168;
        }
        v41 = 63 - __clz(v33);
        v42 = 63 - __clz(v39);
        if ((_DWORD)v33)
          v43 = v41;
        else
          v43 = 0;
        if (v38)
          v44 = v42;
        else
          v44 = 0;
        llvm::DataLayout::setAlignment(v67, v21, v43, v44, v37, a4);
        if (*(_QWORD *)a4)
          return;
        v12 = v25;
        v13 = v69;
        v14 = v32;
        v16 = v71;
        goto LABEL_142;
      case 'e':
        *(_BYTE *)a1 = 0;
        goto LABEL_142;
      case 'm':
        if (v18 != v22)
        {
          v66 = "Unexpected trailing characters after mangling specifier in datalayout string";
          goto LABEL_168;
        }
        if (*((_QWORD *)&v80 + 1) == 1)
        {
          v47 = *(char *)v80;
          if (v47 <= 108)
          {
            switch(v47)
            {
              case 'a':
                v48 = 7;
                break;
              case 'e':
                v48 = 1;
                break;
              case 'l':
                v48 = 5;
                break;
              default:
                goto LABEL_167;
            }
          }
          else if (v47 > 118)
          {
            if (v47 == 119)
            {
              v48 = 3;
            }
            else
            {
              if (v47 != 120)
              {
LABEL_167:
                v66 = "Unknown mangling in datalayout string";
                goto LABEL_168;
              }
              v48 = 4;
            }
          }
          else if (v47 == 109)
          {
            v48 = 6;
          }
          else
          {
            if (v47 != 111)
              goto LABEL_167;
            v48 = 2;
          }
          *(_DWORD *)(a1 + 28) = v48;
LABEL_142:
          v17 = 0uLL;
          if (!v5)
            goto LABEL_143;
          continue;
        }
        if (*((_QWORD *)&v80 + 1))
          v66 = "Unknown mangling specifier in datalayout string";
        else
          v66 = "Expected mangling specifier in datalayout string";
LABEL_168:
        *(_QWORD *)&__dst = v66;
        v78 = 259;
        reportError(a4, (llvm::formatv_object_base **)&__dst);
        return;
      case 'n':
        while (2)
        {
          LODWORD(v73) = 0;
          getInt<unsigned int>(a4, v23, v24, &v73);
          if (*(_QWORD *)a4)
            return;
          if (!(_DWORD)v73)
          {
            v66 = "Zero width native integer type in datalayout string";
            goto LABEL_168;
          }
          llvm::SmallVectorTemplateBase<char,true>::push_back(v12, v73);
          if (!*((_QWORD *)&v80 + 1))
            goto LABEL_142;
          split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
          if (!*(_QWORD *)a4)
          {
            v24 = *((_QWORD *)&v79 + 1);
            v23 = (llvm::formatv_object_base *)v79;
            continue;
          }
          return;
        }
      case 'p':
        v49 = v13;
        v70 = v14;
        v50 = 0;
        LODWORD(v73) = 0;
        if (v18 == v22)
          goto LABEL_92;
        getInt<unsigned int>(a4, v23, v24, &v73);
        if (*(_QWORD *)a4)
          return;
        v50 = v73;
        if (BYTE3(v73))
        {
          v66 = "Invalid address space, must be a 24-bit integer";
          goto LABEL_168;
        }
LABEL_92:
        if (!*((_QWORD *)&v80 + 1))
        {
          v66 = "Missing size specification for pointer in datalayout string";
          goto LABEL_168;
        }
        split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
        if (*(_QWORD *)a4)
          return;
        v72 = v15;
        HIDWORD(v75) = 0;
        getInt<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), (unint64_t *)((char *)&v75 + 4));
        if (*(_QWORD *)a4)
          return;
        v51 = HIDWORD(v75);
        if (!HIDWORD(v75))
        {
          v66 = "Invalid pointer size of 0 bytes";
          goto LABEL_168;
        }
        if (!*((_QWORD *)&v80 + 1))
        {
          v66 = "Missing alignment specification for pointer in datalayout string";
          goto LABEL_168;
        }
        split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
        if (*(_QWORD *)a4)
          return;
        LODWORD(v75) = 0;
        getIntInBytes<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), &v75);
        if (*(_QWORD *)a4)
          return;
        v53 = v75;
        if (!(_DWORD)v75
          || (v52.i32[0] = v75, v54 = (uint8x8_t)vcnt_s8(v52), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] >= 2uLL))
        {
          v66 = "Pointer ABI alignment must be a power of 2";
          goto LABEL_168;
        }
        v68 = v12;
        v55 = a1;
        v74 = __PAIR64__(v51, v75);
        v56 = v51;
        v57 = v75;
        if (!*((_QWORD *)&v80 + 1))
          goto LABEL_132;
        split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
        if (*(_QWORD *)a4)
          return;
        getIntInBytes<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), &v74);
        if (*(_QWORD *)a4)
          return;
        v57 = v74;
        v58 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.i32[0] != 1)
        {
          v66 = "Pointer preferred alignment must be a power of 2";
          goto LABEL_168;
        }
        if (*((_QWORD *)&v80 + 1))
        {
          split(a4, (void *)v80, *((uint64_t *)&v80 + 1), 58, (uint64_t)&v79);
          if (*(_QWORD *)a4)
            return;
          getInt<unsigned int>(a4, (llvm::formatv_object_base *)v79, *((uint64_t *)&v79 + 1), (unint64_t *)((char *)&v74 + 4));
          if (*(_QWORD *)a4)
            return;
          v56 = HIDWORD(v74);
          if (!HIDWORD(v74))
          {
            v66 = "Invalid index size of 0 bytes";
            goto LABEL_168;
          }
        }
        else
        {
          v56 = v51;
        }
LABEL_132:
        v63 = __clz(v53) ^ 0x3F;
        v64 = 63 - __clz(v57);
        if (v57)
          v65 = v64;
        else
          v65 = 0;
        llvm::DataLayout::setPointerAlignmentInBits(v55, v50, v63, v65, v51, v56, a4);
        if (*(_QWORD *)a4)
          return;
        v13 = v49;
        v15 = v72;
        a1 = v55;
        v12 = v68;
        v14 = v70;
        goto LABEL_142;
      case 's':
        goto LABEL_142;
      default:
        goto LABEL_158;
    }
  }
}

void llvm::DataLayout::parse(void *a1@<X0>, unint64_t a2@<X1>, llvm::DataLayout *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[440];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  llvm::DataLayout::DataLayout((uint64_t)v8, &str_6_15, 0);
  llvm::DataLayout::parseSpecifier((uint64_t)v8, a1, a2, (const llvm::Twine *)&v7);
  v6 = v7;
  if (v7)
  {
    *((_BYTE *)a3 + 440) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    *((_BYTE *)a3 + 440) &= ~1u;
    llvm::DataLayout::DataLayout(a3, (const llvm::DataLayout *)v8);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v8);
}

void split(const llvm::Twine *a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  __int128 v7;
  size_t v8;
  const char *v9;
  _OWORD v10[2];
  __int16 v11;
  void *__s2;
  uint64_t v13;
  char v14;

  __s2 = a2;
  v13 = a3;
  v14 = a4;
  llvm::StringRef::split((uint64_t *)&__s2, &v14, 1uLL, (uint64_t)v10);
  v7 = v10[1];
  *(_OWORD *)a5 = v10[0];
  *(_OWORD *)(a5 + 16) = v7;
  if (*(_QWORD *)(a5 + 24))
  {
    if (*(_QWORD *)(a5 + 8))
    {
LABEL_3:
      *(_QWORD *)a1 = 0;
      return;
    }
    v9 = "Expected token before separator in datalayout string";
  }
  else
  {
    v8 = *(_QWORD *)(a5 + 8);
    if (v8 == v13 && (!v8 || !memcmp(*(const void **)a5, __s2, v8)))
      goto LABEL_3;
    v9 = "Trailing separator in datalayout string";
  }
  *(_QWORD *)&v10[0] = v9;
  v11 = 259;
  reportError(a1, (llvm::formatv_object_base **)v10);
}

void getInt<unsigned int>(const llvm::Twine *a1, llvm::formatv_object_base *a2, uint64_t a3, unint64_t *a4)
{
  llvm::formatv_object_base *v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;

  v9 = 0;
  v6 = a2;
  v7 = a3;
  if ((llvm::consumeUnsignedInteger((llvm *)&v6, (llvm::StringRef *)0xA, &v9, a4) & 1) != 0 || v7 || HIDWORD(v9))
  {
    v6 = (llvm::formatv_object_base *)"not a number, or does not fit in an unsigned int";
    v8 = 259;
    reportError(a1, &v6);
  }
  else
  {
    *(_DWORD *)a4 = v9;
    *(_QWORD *)a1 = 0;
  }
}

void reportError(const llvm::Twine *a1, llvm::formatv_object_base **a2)
{
  llvm::formatv_object_base *p_p;
  std::string __p;
  llvm::formatv_object_base *v6;
  uint64_t v7[2];

  getErrorErrorCat();
  llvm::Twine::str(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (llvm::formatv_object_base *)&__p;
  else
    p_p = (llvm::formatv_object_base *)__p.__r_.__value_.__r.__words[0];
  v7[0] = 3;
  v7[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
  v6 = p_p;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v6, v7, (uint64_t *)a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void getIntInBytes<unsigned int>(const llvm::Twine *a1, llvm::formatv_object_base *a2, uint64_t a3, unint64_t *a4)
{
  llvm::formatv_object_base *v6;
  __int16 v7;

  getInt<unsigned int>(a1, a2, a3, a4);
  if (!*(_QWORD *)a1)
  {
    if ((*(_DWORD *)a4 & 7) != 0)
    {
      v6 = (llvm::formatv_object_base *)"number of bits must be a byte width multiple";
      v7 = 259;
      reportError(a1, &v6);
    }
    else
    {
      *(_DWORD *)a4 >>= 3;
      *(_QWORD *)a1 = 0;
    }
  }
}

void getIntInBytes<unsigned long long>(const llvm::Twine *a1, llvm::formatv_object_base *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v6;
  llvm::formatv_object_base *v7;
  uint64_t v8;
  __int16 v9;
  unint64_t v10;

  v10 = 0;
  v7 = a2;
  v8 = a3;
  if ((llvm::consumeUnsignedInteger((llvm *)&v7, (llvm::StringRef *)0xA, &v10, a4) & 1) != 0 || v8)
  {
    v7 = (llvm::formatv_object_base *)"not a number, or does not fit in an unsigned int";
    v9 = 259;
    reportError(a1, &v7);
    if (*(_QWORD *)a1)
      return;
    v6 = *a4;
  }
  else
  {
    v6 = v10;
    *a4 = v10;
    *(_QWORD *)a1 = 0;
  }
  if ((v6 & 7) != 0)
  {
    v7 = (llvm::formatv_object_base *)"number of bits must be a byte width multiple";
    v9 = 259;
    reportError(a1, &v7);
  }
  else
  {
    *a4 = v6 >> 3;
    *(_QWORD *)a1 = 0;
  }
}

void getAddrSpace(const llvm::Twine *a1, llvm::formatv_object_base *a2, uint64_t a3, uint64_t a4)
{
  llvm::formatv_object_base *v6;
  __int16 v7;

  getInt<unsigned int>(a1, a2, a3, (unint64_t *)a4);
  if (!*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a4 + 3))
    {
      v6 = (llvm::formatv_object_base *)"Invalid address space, must be a 24-bit integer";
      v7 = 259;
      reportError(a1, &v6);
    }
    else
    {
      *(_QWORD *)a1 = 0;
    }
  }
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 30);
  if (!a2)
    return v2;
  v3 = *((unsigned int *)this + 62);
  if (!(_DWORD)v3)
    return v2;
  v4 = v2 + 16 * v3;
  result = *((_QWORD *)this + 30);
  do
  {
    v6 = v3 >> 1;
    v7 = result + 16 * (v3 >> 1);
    v8 = *(_DWORD *)(v7 + 8);
    v9 = v7 + 16;
    v3 += ~(v3 >> 1);
    if (v8 < a2)
      result = v9;
    else
      v3 = v6;
  }
  while (v3);
  if (result == v4 || *(_DWORD *)(result + 8) != a2)
    return v2;
  return result;
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  llvm::DataLayout::clear((uint64_t)this);
  v2 = (char *)*((_QWORD *)this + 49);
  if (v2 != (char *)this + 408)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 30);
  if (v3 != (char *)this + 256)
    free(v3);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  v4 = (char *)*((_QWORD *)this + 20);
  if (v4 != (char *)this + 176)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 14);
  if (v5 != (char *)this + 128)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 8);
  if (v6 != (char *)this + 80)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 4);
  if (v7 != (char *)this + 56)
    free(v7);
}

llvm::StructLayout *llvm::DataLayout::getStructLayout(llvm::DataLayout *this, llvm::StructType *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  llvm::StructLayout *result;
  llvm::StructLayout *v7;
  llvm::StructType *v8;

  v4 = (uint64_t *)*((_QWORD *)this + 48);
  if (!v4)
  {
    v4 = (uint64_t *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *((_QWORD *)this + 48) = v4;
  }
  v8 = a2;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v4, &v8);
  result = (llvm::StructLayout *)v5[1];
  if (!result)
  {
    v7 = (llvm::StructLayout *)malloc_type_malloc(8 * *((unsigned int *)a2 + 3) + 16, 0x4065EBACuLL);
    if (!v7)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v5[1] = v7;
    return llvm::StructLayout::StructLayout(v7, a2, this);
  }
  return result;
}

void llvm::DataLayout::getAlignment(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void sub_24A9C98F0()
{
  JUMPOUT(0x24A9C98D8);
}

void sub_24A9C98F8()
{
  uint64_t *v0;

  getTargetTypeInfo(v0);
  JUMPOUT(0x24A9C98D8);
}

uint64_t sub_24A9C9908()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  llvm::DataLayout::getTypeSizeInBits(v1, v2);
  v4 = *(unsigned int *)(v1 + 120);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_DWORD **)(v1 + 112);
  v6 = &v5[2 * v4];
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != v6 && *v5 == v3)
  {
    v15 = 4;
    if (!v0)
      v15 = 5;
    return *((unsigned __int8 *)v5 + v15);
  }
  else
  {
LABEL_9:
    v11 = v3 >> 3;
    if (v3 >> 3)
    {
      v12 = (v11 - 1) | ((v11 - 1) >> 1) | (((v11 - 1) | ((v11 - 1) >> 1)) >> 2);
      v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
      v11 = (v13 | (v13 >> 16)) + 1;
    }
    return 63 - __clz(v11);
  }
}

double llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::Type *a2)
{
  unsigned int v3;
  uint64_t PointerAlignElem;
  uint64_t **v5;
  double result;

  v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  PointerAlignElem = llvm::DataLayout::getPointerAlignElem(this, v3 >> 8);
  v5 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a2, (llvm::LLVMContext *)*(unsigned int *)(PointerAlignElem + 4));
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    return llvm::VectorType::get(v5, (llvm::Type *)(*((unsigned int *)a2 + 8) | ((unint64_t)(*((_DWORD *)a2 + 2) == 19) << 32)));
  return result;
}

uint64_t llvm::DataLayout::getPreferredAlign(llvm::DataLayout *this, const llvm::GlobalVariable *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *((_DWORD *)a2 + 8);
  v5 = (v4 >> 17) & 0x3F;
  if (!v5)
  {
    v10 = *((_QWORD *)a2 + 3);
    llvm::DataLayout::getAlignment((uint64_t)this, v10);
    v6 = v11;
    if (*((_BYTE *)a2 + 16))
    {
      v12 = 0;
      if (*((_BYTE *)a2 + 16) != 3)
        goto LABEL_16;
      v13 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
    }
    else
    {
      if (*((const llvm::GlobalVariable **)a2 + 9) != (const llvm::GlobalVariable *)((char *)a2 + 72))
      {
        v12 = 0;
        goto LABEL_16;
      }
      v13 = (*((_BYTE *)a2 + 35) & 1) == 0;
    }
    v12 = v13;
LABEL_16:
    if ((v12 & 1) == 0 && v11 <= 3u)
    {
      llvm::DataLayout::getTypeSizeInBits((uint64_t)this, v10);
      v16 = v15;
      if ((_BYTE)v14)
      if (v16 <= 0x80)
        return v6;
      else
        return 4;
    }
    return v6;
  }
  v6 = (v5 - 1);
  if ((v4 & 0x800000) != 0)
    return v6;
  v7 = *((_QWORD *)a2 + 3);
  llvm::DataLayout::getAlignment((uint64_t)this, v7);
  if (v6 >= v8)
    return v6;
  llvm::DataLayout::getAlignment((uint64_t)this, v7);
  if (v6 <= result)
    return result;
  else
    return v6;
}

void _GLOBAL__sub_I_DataLayout_cpp()
{
  DefaultAlignments = 105;
  *(_QWORD *)algn_25796669C = 1;
  dword_2579666A4 = 105;
  qword_2579666A8 = 8;
  dword_2579666B0 = 105;
  unk_2579666B4 = 0x10100000010;
  dword_2579666BC = 105;
  qword_2579666C0 = 0x20200000020;
  dword_2579666C8 = 105;
  unk_2579666CC = 0x30200000040;
  dword_2579666D4 = 102;
  qword_2579666D8 = 0x10100000010;
  dword_2579666E0 = 102;
  unk_2579666E4 = 0x20200000020;
  dword_2579666EC = 102;
  qword_2579666F0 = 0x30300000040;
  dword_2579666F8 = 102;
  unk_2579666FC = 0x40400000080;
  dword_257966704 = 118;
  qword_257966708 = 0x30300000040;
  dword_257966710 = 118;
  unk_257966714 = 0x40400000080;
}

BOOL llvm::stripDebugInfo(llvm *this, llvm::Function *a2)
{
  uint64_t Metadata;
  _BOOL4 v4;
  char *v5;
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MDNode *v14;
  llvm::MDNode *Impl;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE **v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  _BYTE **v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t i;
  unint64_t v34;
  unint64_t *v35;
  _BYTE *v36;
  llvm::MDNode *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v43;
  _BOOL4 v44;
  llvm::MDNode *v45;
  unsigned __int8 *v46;
  uint64_t v47[2];
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[64];
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  llvm::MDNode *v59;
  llvm::MDNode *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[64];
  uint64_t __src;
  llvm::hashing::detail::hash_state *v65;
  uint64_t v66;
  _BYTE v67[32];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  Metadata = llvm::Value::getMetadata(this, 0);
  v4 = Metadata != 0;
  if (Metadata)
    llvm::Value::setMetadata((uint64_t)this, 0, 0);
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v5 = (char *)*((_QWORD *)this + 10);
  v43 = (char *)this + 72;
  if (v5 == (char *)this + 72)
  {
    v41 = 0;
    goto LABEL_74;
  }
  v6 = &v58;
  do
  {
    v7 = v5 - 24;
    if (!v5)
      v7 = 0;
    v8 = v7 + 40;
    v9 = (_QWORD *)*((_QWORD *)v7 + 6);
    while (v9 != v8)
    {
      v10 = (uint64_t)(v9 - 3);
      v11 = v9 == 0;
      v9 = (_QWORD *)v9[1];
      if (v11)
        v12 = 0;
      else
        v12 = v10;
      if (llvm::DbgInfoIntrinsic::classof(v12))
      {
        llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*(_QWORD *)(v12 + 40) + 40, v12 + 24);
        v4 = 1;
        continue;
      }
      if (!*(_QWORD *)(v12 + 48))
      {
        v45 = 0;
LABEL_20:
        if ((*(_BYTE *)(v12 + 23) & 0x20) == 0)
          goto LABEL_53;
        goto LABEL_21;
      }
      v46 = 0;
      llvm::TrackingMDRef::operator=((uint64_t *)(v12 + 48), &v46);
      if (v46)
        llvm::MetadataTracking::untrack((uint64_t)&v46, (uint64_t)v46);
      v13 = *(_QWORD *)(v12 + 48);
      v45 = 0;
      v4 = 1;
      if (!v13)
        goto LABEL_20;
LABEL_21:
      v14 = (llvm::MDNode *)llvm::Value::getMetadata((llvm::Value *)v12, 18);
      v45 = v14;
      if (!v14)
        goto LABEL_53;
      v59 = v14;
      v54 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v47, &v59, &v54) & 1) != 0)
      {
        Impl = (llvm::MDNode *)v54[1];
        if (Impl)
          goto LABEL_51;
      }
      Impl = v45;
      v59 = (llvm::MDNode *)v63;
      v60 = (llvm::MDNode *)v63;
      v61 = 8;
      v62 = 0;
      v54 = v6;
      v55 = v6;
      v56 = 8;
      v57 = 0;
      v49 = v53;
      v50 = v53;
      v51 = 8;
      v52 = 0;
      llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v59, v45, (uint64_t)&v65);
      if (!v67[0])
        goto LABEL_42;
      v17 = (unint64_t *)((char *)Impl - 16);
      v16 = *((_QWORD *)Impl - 2);
      if ((v16 & 2) != 0)
      {
        v18 = (unint64_t *)*((_QWORD *)Impl - 4);
        v19 = *((unsigned int *)Impl - 6);
      }
      else
      {
        v18 = &v17[-((v16 >> 2) & 0xF)];
        v19 = (v16 >> 6) & 0xF;
      }
      if (v19 == 1)
        goto LABEL_42;
      v44 = v4;
      v20 = v5;
      v21 = v6;
      v22 = 0;
      v23 = (_BYTE **)(v18 + 1);
      v24 = 8 * v19 - 8;
      do
      {
        v25 = *v23++;
        v22 += isDILocationReachable((llvm::SmallPtrSetImplBase *)&v59, (unsigned int *)&v54, v25);
        v24 -= 8;
      }
      while (v24);
      v6 = v21;
      if (!v22)
      {
        v5 = v20;
        v4 = v44;
        goto LABEL_42;
      }
      llvm::SmallPtrSetImplBase::clear((llvm::SmallPtrSetImplBase *)&v59);
      v26 = *v17;
      v5 = v20;
      if ((*v17 & 2) != 0)
      {
        v27 = (unint64_t *)*((_QWORD *)Impl - 4);
        v28 = *((unsigned int *)Impl - 6);
      }
      else
      {
        v27 = &v17[-((v26 >> 2) & 0xF)];
        v28 = (v26 >> 6) & 0xF;
      }
      v4 = v44;
      if (v28 == 1)
      {
        Impl = 0;
        goto LABEL_42;
      }
      v29 = (_BYTE **)(v27 + 1);
      v30 = 8 * v28 - 8;
      while ((isAllDILocation((llvm::SmallPtrSetImplBase *)&v59, &v49, (unsigned int *)&v54, *v29) & 1) != 0)
      {
        ++v29;
        v30 -= 8;
        if (!v30)
        {
          Impl = 0;
          goto LABEL_42;
        }
      }
      __src = 0;
      v65 = (llvm::hashing::detail::hash_state *)v67;
      v66 = 0x400000000;
      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v65, &__src, &v65);
      for (i = 1; ; ++i)
      {
        v34 = *v17;
        if ((*v17 & 2) != 0)
          break;
        if (i >= ((v34 >> 6) & 0xF))
          goto LABEL_67;
        v35 = &v17[-((v34 >> 2) & 0xF)];
LABEL_61:
        v36 = (_BYTE *)v35[i];
        if (v36)
        {
          v37 = stripLoopMDLoc(&v49, (unsigned int *)&v54, v36);
          if (!v37)
            continue;
          v38 = (uint64_t)v37;
        }
        else
        {
          v38 = 0;
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v65, v38);
      }
      if (i < *((unsigned int *)Impl - 6))
      {
        v35 = (unint64_t *)*((_QWORD *)Impl - 4);
        goto LABEL_61;
      }
LABEL_67:
      v39 = *((_QWORD *)Impl + 1);
      v40 = (_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
      if ((v39 & 4) != 0)
        v40 = (_QWORD *)*v40;
      Impl = llvm::MDTuple::getImpl(v40, v65, v66, (unint64_t *)1, 1);
      llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
      if (v65 != (llvm::hashing::detail::hash_state *)v67)
        free(v65);
LABEL_42:
      if (v50 != v49)
        free(v50);
      if (v55 != v54)
        free(v55);
      if (v60 != v59)
        free(v60);
      v59 = 0;
      v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v47, &v45, &v59);
      v32 = v59;
      if ((v31 & 1) == 0)
      {
        v32 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>((uint64_t)v47, (uint64_t)&v45, &v45, v59);
        *v32 = v45;
        v32[1] = 0;
      }
      v32[1] = Impl;
LABEL_51:
      if (Impl != v45)
        llvm::Instruction::setMetadata((uint64_t *)v12, 18, Impl);
LABEL_53:
      if ((*(_BYTE *)(v12 + 23) & 0x20) != 0)
      {
        llvm::Instruction::setMetadata((uint64_t *)v12, (uint64_t *)"heapallocsite", 0xDuLL, 0);
        llvm::Instruction::setMetadata((uint64_t *)v12, 38, 0);
      }
    }
    v5 = (char *)*((_QWORD *)v5 + 1);
  }
  while (v5 != v43);
  v41 = v47[0];
LABEL_74:
  MEMORY[0x24BD1B398](v41, 8);
  return v4;
}

uint64_t llvm::StripDebugInfo(llvm *this, llvm::Module *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  llvm *v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  char *v13;
  uint64_t i;
  llvm *v15;
  _QWORD *j;
  llvm::Value *v17;
  uint64_t v18;

  v3 = *((_QWORD *)this + 10);
  if ((llvm *)v3 == (llvm *)((char *)this + 72))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(uint64_t **)(v3 + 16);
      v6 = *(llvm **)(v3 + 8);
      v7 = *(char *)(v3 + 39);
      if (v7 >= 0)
        v5 = (uint64_t *)(v3 + 16);
      v8 = *(_QWORD *)(v3 + 24);
      if (v7 >= 0)
        v8 = *(unsigned __int8 *)(v3 + 39);
      if (v8 >= 9)
      {
        v9 = *v5 == 0x6762642E6D766C6CLL && *((_BYTE *)v5 + 8) == 46;
        if (v9
          || v8 == 9
          && ((v10 = *v5, v11 = *((unsigned __int8 *)v5 + 8), v10 == 0x6F63672E6D766C6CLL)
            ? (v12 = v11 == 118)
            : (v12 = 0),
              v12))
        {
          llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v3 + 40), (llvm::NamedMDNode *)v3);
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v6 != (llvm *)((char *)this + 72));
  }
  v13 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v13; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v15 = (llvm *)(i - 56);
    else
      v15 = 0;
    v4 |= llvm::stripDebugInfo(v15, (llvm::Function *)v3);
  }
  for (j = (_QWORD *)*((_QWORD *)this + 2); j != (_QWORD *)((char *)this + 8); j = (_QWORD *)j[1])
  {
    if (j)
      v17 = (llvm::Value *)(j - 7);
    else
      v17 = 0;
    v4 |= llvm::Value::eraseMetadata(v17, 0);
  }
  v18 = *((_QWORD *)this + 19);
  if (v18)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 40))(v18, v3);
  return v4 & 1;
}

uint64_t llvm::getDebugMetadataVersionFromModule(llvm *this, const llvm::Module *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;

  result = llvm::Module::getModuleFlag(this, "Debug Info Version", 0x12uLL);
  if (result)
  {
    if (*(_BYTE *)result == 1 && (v3 = *(_QWORD *)(result + 128), *(_BYTE *)(v3 + 16) == 16))
    {
      v4 = (unsigned int *)(v3 + 24);
      if (*(_DWORD *)(v3 + 32) >= 0x41u)
        v4 = *(unsigned int **)v4;
      return *v4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::at::getAssignmentInsts(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (_QWORD *)*v2;
  v3 = (_QWORD *)*v2;
  v4 = (uint64_t *)(*v2 + 2528);
  v8 = a1;
  v9 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v4, &v8, &v9);
  result = 0;
  if (v5)
    v7 = v9 == v3[316] + 32 * *((unsigned int *)v3 + 636);
  else
    v7 = 1;
  if (!v7)
    return *(_QWORD *)(v9 + 8);
  return result;
}

uint64_t isDILocationReachable(llvm::SmallPtrSetImplBase *a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t result;
  const void **v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const void **imp;
  uint64_t v15;
  unsigned int *v16;
  _BYTE v17[24];

  if (!a3)
    return 0;
  result = llvm::MDNode::classof(a3);
  if ((_DWORD)result)
  {
    if (*a3 != 5
      && ((v7 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a3),
           v8 = *((_QWORD *)a2 + 1),
           v8 != *(_QWORD *)a2)
        ? (v9 = a2 + 4)
        : (v9 = a2 + 5),
          v7 == (const void **)(v8 + 8 * *v9)))
    {
      llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(a1, a3, (uint64_t)v17);
      if (v17[16])
      {
        v10 = *((_QWORD *)a3 - 2);
        if ((v10 & 2) != 0)
        {
          v11 = (_QWORD *)*((_QWORD *)a3 - 4);
          v12 = *((unsigned int *)a3 - 6);
        }
        else
        {
          v11 = &a3[-8 * ((v10 >> 2) & 0xF) - 16];
          v12 = (v10 >> 6) & 0xF;
        }
        if (v12)
        {
          v13 = 8 * v12;
          do
          {
            if (isDILocationReachable(a1, a2, *v11))
              llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)a2, a3, (uint64_t)v17);
            ++v11;
            v13 -= 8;
          }
          while (v13);
        }
        imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a3);
        v15 = *((_QWORD *)a2 + 1);
        if (v15 == *(_QWORD *)a2)
          v16 = a2 + 5;
        else
          v16 = a2 + 4;
        return imp != (const void **)(v15 + 8 * *v16);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t isAllDILocation(llvm::SmallPtrSetImplBase *a1, _QWORD *a2, unsigned int *a3, _BYTE *a4)
{
  uint64_t result;
  const void **imp;
  uint64_t v10;
  unsigned int *v11;
  const void **v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  if (!a4)
    return 0;
  result = llvm::MDNode::classof(a4);
  if ((_DWORD)result)
  {
    if (*a4 == 5)
      return 1;
    imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a4);
    v10 = a2[1];
    v11 = v10 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
    if (imp != (const void **)(v10 + 8 * *v11))
      return 1;
    v12 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a3, a4);
    v13 = *((_QWORD *)a3 + 1);
    if (v13 == *(_QWORD *)a3)
      v14 = a3 + 5;
    else
      v14 = a3 + 4;
    if (v12 == (const void **)(v13 + 8 * *v14))
      return 0;
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(a1, a4, (uint64_t)v19);
    if (!v19[16])
      return 0;
    v15 = *((_QWORD *)a4 - 2);
    if ((v15 & 2) != 0)
    {
      v16 = (_QWORD *)*((_QWORD *)a4 - 4);
      v17 = *((unsigned int *)a4 - 6);
    }
    else
    {
      v16 = &a4[-8 * ((v15 >> 2) & 0xF) - 16];
      v17 = (v15 >> 6) & 0xF;
    }
    if (!v17)
    {
LABEL_25:
      llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)a2, a4, (uint64_t)v19);
      return 1;
    }
    v18 = 8 * v17;
    while (1)
    {
      if ((_BYTE *)*v16 != a4)
      {
        result = isAllDILocation(a1, a2, a3);
        if (!(_DWORD)result)
          break;
      }
      ++v16;
      v18 -= 8;
      if (!v18)
        goto LABEL_25;
    }
  }
  return result;
}

llvm::MDNode *stripLoopMDLoc(_QWORD *a1, unsigned int *a2, _BYTE *a3)
{
  const void **imp;
  uint64_t v7;
  unsigned int *v8;
  llvm::MDNode *v9;
  const void **v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  char v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  llvm::hashing::detail::hash_state *v24;
  uint64_t v25;
  llvm::MDNode *Impl;
  llvm::hashing::detail::hash_state *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  if (*a3 == 5)
    return 0;
  imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a1, a3);
  v7 = a1[1];
  v8 = v7 == *a1 ? (unsigned int *)((char *)a1 + 20) : (unsigned int *)(a1 + 2);
  if (imp != (const void **)(v7 + 8 * *v8))
    return 0;
  v11 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)a2, a3);
  v12 = *((_QWORD *)a2 + 1);
  if (v12 == *(_QWORD *)a2)
    v13 = a2 + 5;
  else
    v13 = a2 + 4;
  if (v11 == (const void **)(v12 + 8 * *v13) || !llvm::MDNode::classof(a3))
    return (llvm::MDNode *)a3;
  v14 = 0;
  v15 = 0;
  v27 = (llvm::hashing::detail::hash_state *)v29;
  v28 = 0x400000000;
  v16 = (unint64_t *)(a3 - 16);
  while (1)
  {
    v17 = *v16;
    if ((*v16 & 2) != 0)
      break;
    if (v14 >= ((v17 >> 6) & 0xF))
      goto LABEL_28;
    v18 = &v16[-((v17 >> 2) & 0xF)];
LABEL_19:
    v19 = (_BYTE *)v18[v14];
    if (!v19)
    {
      v21 = 0;
LABEL_24:
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v27, v21);
      goto LABEL_26;
    }
    if (v19 != a3)
    {
      v20 = stripLoopMDLoc(a1, a2);
      if (!v20)
        goto LABEL_26;
      v21 = v20;
      goto LABEL_24;
    }
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v27, 0);
    v15 = 1;
LABEL_26:
    ++v14;
  }
  if (v14 < *((unsigned int *)a3 - 6))
  {
    v18 = (unint64_t *)*((_QWORD *)a3 - 4);
    goto LABEL_19;
  }
LABEL_28:
  v9 = 0;
  if ((_DWORD)v28 && (v15 & (v28 == 1)) == 0)
  {
    v22 = *((_QWORD *)a3 + 1);
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((a3[1] & 0x7F) == 1)
    {
      if ((v22 & 4) != 0)
        v23 = (_QWORD *)*v23;
      v24 = v27;
      v25 = 1;
    }
    else
    {
      if ((v22 & 4) != 0)
        v23 = (_QWORD *)*v23;
      v24 = v27;
      v25 = 0;
    }
    Impl = llvm::MDTuple::getImpl(v23, v24, v28, (unint64_t *)v25, 1);
    v9 = Impl;
    if ((v15 & 1) != 0)
      llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  }
  if (v27 != (llvm::hashing::detail::hash_state *)v29)
    free(v27);
  return v9;
}

llvm::MDNode *llvm::DILocation::getImpl(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  unsigned int v14;
  uint64_t v16;
  uint64_t *v17;
  llvm::MDNode *v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  char v22;
  llvm::MDNode **v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (HIWORD(a3))
    v14 = 0;
  else
    v14 = a3;
  if (a7)
    goto LABEL_12;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 504);
  v25 = (void *)__PAIR64__(v14, a2);
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v24 = 0;
  v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(v17, (int *)&v25, (uint64_t **)&v24))v19 = v24 == (llvm::MDNode **)(*(_QWORD *)(v16 + 504) + 8 * *(unsigned int *)(v16 + 520));
  else
    v19 = 1;
  if (!v19)
    v18 = *v24;
  if (!v18 && a8)
  {
LABEL_12:
    v25 = &v27;
    v26 = 0x200000000;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v25, a4);
    if (a5)
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v25, a5);
    v20 = llvm::MDNode::operator new(16, v26, a7);
    v21 = llvm::MDNode::MDNode((uint64_t)v20, (uint64_t)a1, 5, a7, (uint64_t)v25, v26, 0, 0);
    *(_DWORD *)(v21 + 4) = a2;
    *(_WORD *)(v21 + 2) = v14;
    if (a6)
      v22 = 0x80;
    else
      v22 = 0;
    *(_BYTE *)(v21 + 1) = v22 & 0x80 | *(_BYTE *)(v21 + 1) & 0x7F;
    v18 = llvm::MDNode::storeImpl<llvm::DILocation,llvm::DenseSet<llvm::DILocation*,llvm::MDNodeInfo<llvm::DILocation>>>((llvm::MDNode *)v21, a7, *a1 + 504);
    if (v25 != &v27)
      free(v25);
  }
  return v18;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILocation,llvm::DenseSet<llvm::DILocation*,llvm::MDNodeInfo<llvm::DILocation>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

_BYTE *llvm::DILocalScope::getSubprogram(_BYTE *this)
{
  unint64_t v1;
  uint64_t v2;

  while ((*this & 0xFE) == 0x12)
  {
    v1 = *((_QWORD *)this - 2);
    if ((v1 & 2) != 0)
      v2 = *((_QWORD *)this - 4);
    else
      v2 = (uint64_t)&this[-8 * ((v1 >> 2) & 0xF) - 16];
    this = *(_BYTE **)(v2 + 8);
  }
  return this;
}

const char *llvm::DINode::getFlagString(int a1)
{
  const char *result;

  if (a1 < 0x2000)
  {
    if (a1 > 35)
    {
      if (a1 > 511)
      {
        if (a1 <= 2047)
        {
          if (a1 == 512)
            return "DIFlagObjcClassComplete";
          if (a1 == 1024)
            return "DIFlagObjectPointer";
          return (const char *)&str_36_4;
        }
        if (a1 != 2048)
        {
          if (a1 == 4096)
            return "DIFlagStaticMember";
          return (const char *)&str_36_4;
        }
        return "DIFlagVector";
      }
      else
      {
        if (a1 <= 127)
        {
          if (a1 == 36)
            return "DIFlagIndirectVirtualBase";
          if (a1 == 64)
            return "DIFlagArtificial";
          return (const char *)&str_36_4;
        }
        if (a1 != 128)
        {
          if (a1 == 256)
            return "DIFlagPrototyped";
          return (const char *)&str_36_4;
        }
        return "DIFlagExplicit";
      }
    }
    else
    {
      result = "DIFlagZero";
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          result = "DIFlagPrivate";
          break;
        case 2:
          result = "DIFlagProtected";
          break;
        case 3:
          result = "DIFlagPublic";
          break;
        case 4:
          result = "DIFlagFwdDecl";
          break;
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
          return (const char *)&str_36_4;
        case 8:
          result = "DIFlagAppleBlock";
          break;
        case 16:
          result = "DIFlagReservedBit4";
          break;
        default:
          if (a1 != 32)
            return (const char *)&str_36_4;
          result = "DIFlagVirtual";
          break;
      }
    }
  }
  else if (a1 < 0x100000)
  {
    if (a1 >= 0x20000)
    {
      if (a1 < 0x40000)
      {
        if (a1 == 0x20000)
          return "DIFlagMultipleInheritance";
        if (a1 == 196608)
          return "DIFlagVirtualInheritance";
        return (const char *)&str_36_4;
      }
      if (a1 != 0x40000)
      {
        if (a1 == 0x80000)
          return "DIFlagBitField";
        return (const char *)&str_36_4;
      }
      return "DIFlagIntroducedVirtual";
    }
    else if (a1 >= 0x8000)
    {
      if (a1 != 0x8000)
      {
        if (a1 == 0x10000)
          return "DIFlagSingleInheritance";
        return (const char *)&str_36_4;
      }
      return "DIFlagExportSymbols";
    }
    else
    {
      if (a1 != 0x2000)
      {
        if (a1 == 0x4000)
          return "DIFlagRValueReference";
        return (const char *)&str_36_4;
      }
      return "DIFlagLValueReference";
    }
  }
  else if (a1 <= 0x1FFFFFF)
  {
    if (a1 < 0x800000)
    {
      if (a1 == 0x100000)
        return "DIFlagNoReturn";
      if (a1 == 0x400000)
        return "DIFlagTypePassByValue";
      return (const char *)&str_36_4;
    }
    if (a1 != 0x800000)
    {
      if (a1 == 0x1000000)
        return "DIFlagEnumClass";
      return (const char *)&str_36_4;
    }
    return "DIFlagTypePassByReference";
  }
  else
  {
    if (a1 <= 0x7FFFFFF)
    {
      if (a1 == 0x2000000)
        return "DIFlagThunk";
      if (a1 == 0x4000000)
        return "DIFlagNonTrivial";
      return (const char *)&str_36_4;
    }
    switch(a1)
    {
      case 0x8000000:
        return "DIFlagBigEndian";
      case 0x10000000:
        return "DIFlagLittleEndian";
      case 0x20000000:
        return "DIFlagAllCallsDescribed";
      default:
        return (const char *)&str_36_4;
    }
  }
  return result;
}

uint64_t llvm::DINode::splitFlags(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = a1;
  v4 = a1 & 3;
  if ((a1 & 3) != 0)
  {
    if (v4 == 1)
    {
      v5 = 1;
    }
    else if (v4 == 2)
    {
      v5 = 2;
    }
    else
    {
      v5 = 3;
    }
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v5);
    v3 = (v4 ^ 0x3FFFFFFF) & v3;
  }
  v6 = v3 & 0x30000;
  if ((v3 & 0x30000) != 0)
  {
    if (v6 == 0x10000)
    {
      v7 = 0x10000;
    }
    else if (v6 == 0x20000)
    {
      v7 = 0x20000;
    }
    else
    {
      v7 = 196608;
    }
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v7);
    v3 = (v6 ^ 0x3FFFFFFF) & v3;
  }
  if ((~(_DWORD)v3 & 0x24) != 0)
  {
    if ((v3 & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    v3 &= 0x3FFFFFDBu;
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, 36);
    if ((v3 & 1) == 0)
    {
LABEL_17:
      if ((v3 & 2) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, 1);
  v3 &= 0x3FFFFFFEu;
  if ((v3 & 2) != 0)
  {
LABEL_18:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 2);
    v3 = (v3 & 2 ^ 0x3FFFFFFF) & v3;
  }
LABEL_19:
  if ((v3 & 3) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 3);
    v3 = (v3 & 3 ^ 0x3FFFFFFF) & v3;
  }
  if ((v3 & 4) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 4);
    v3 = (v3 & 4 ^ 0x3FFFFFFF) & v3;
    if ((v3 & 8) == 0)
    {
LABEL_23:
      if ((v3 & 0x10) == 0)
        goto LABEL_24;
      goto LABEL_60;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_23;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 8);
  v3 = (v3 & 8 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10) == 0)
  {
LABEL_24:
    if ((v3 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10);
  v3 = (v3 & 0x10 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20) == 0)
  {
LABEL_25:
    if ((v3 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20);
  v3 = (v3 & 0x20 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x40) == 0)
  {
LABEL_26:
    if ((v3 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x40);
  v3 = (v3 & 0x40 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x80) == 0)
  {
LABEL_27:
    if ((v3 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x80);
  v3 = (v3 & 0x80 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x100) == 0)
  {
LABEL_28:
    if ((v3 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x100);
  v3 = (v3 & 0x100 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x200) == 0)
  {
LABEL_29:
    if ((v3 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x200);
  v3 = (v3 & 0x200 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x400) == 0)
  {
LABEL_30:
    if ((v3 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x400);
  v3 = (v3 & 0x400 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x800) == 0)
  {
LABEL_31:
    if ((v3 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x800);
  v3 = (v3 & 0x800 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x1000) == 0)
  {
LABEL_32:
    if ((v3 & 0x2000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x1000);
  v3 = (v3 & 0x1000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x2000) == 0)
  {
LABEL_33:
    if ((v3 & 0x4000) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x2000);
  v3 = (v3 & 0x2000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x4000) == 0)
  {
LABEL_34:
    if ((v3 & 0x8000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x4000);
  v3 = (v3 & 0x4000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x8000) == 0)
  {
LABEL_35:
    if ((v3 & 0x10000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x8000);
  v3 = (v3 & 0x8000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10000) == 0)
  {
LABEL_36:
    if ((v3 & 0x20000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_72:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10000);
  v3 = (v3 & 0x10000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20000) != 0)
  {
LABEL_37:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20000);
    v3 = (v3 & 0x20000 ^ 0x3FFFFFFF) & v3;
  }
LABEL_38:
  if ((v3 & 0x30000) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x30000);
    v3 = (v3 & 0x30000 ^ 0x3FFFFFFF) & v3;
  }
  if ((v3 & 0x40000) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x40000);
    v3 = (v3 & 0x40000 ^ 0x3FFFFFFF) & v3;
    if ((v3 & 0x80000) == 0)
    {
LABEL_42:
      if ((v3 & 0x100000) == 0)
        goto LABEL_43;
      goto LABEL_76;
    }
  }
  else if ((v3 & 0x80000) == 0)
  {
    goto LABEL_42;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x80000);
  v3 = (v3 & 0x80000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x100000) == 0)
  {
LABEL_43:
    if ((v3 & 0x400000) == 0)
      goto LABEL_44;
    goto LABEL_77;
  }
LABEL_76:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x100000);
  v3 = (v3 & 0x100000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x400000) == 0)
  {
LABEL_44:
    if ((v3 & 0x800000) == 0)
      goto LABEL_45;
    goto LABEL_78;
  }
LABEL_77:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x400000);
  v3 = (v3 & 0x400000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x800000) == 0)
  {
LABEL_45:
    if ((v3 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_79;
  }
LABEL_78:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x800000);
  v3 = (v3 & 0x800000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v3 & 0x2000000) == 0)
      goto LABEL_47;
    goto LABEL_80;
  }
LABEL_79:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x1000000);
  v3 = (v3 & 0x1000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x2000000) == 0)
  {
LABEL_47:
    if ((v3 & 0x4000000) == 0)
      goto LABEL_48;
    goto LABEL_81;
  }
LABEL_80:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x2000000);
  v3 = (v3 & 0x2000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x4000000) == 0)
  {
LABEL_48:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_49;
    goto LABEL_82;
  }
LABEL_81:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x4000000);
  v3 = (v3 & 0x4000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x8000000) == 0)
  {
LABEL_49:
    if ((v3 & 0x10000000) == 0)
      goto LABEL_50;
    goto LABEL_83;
  }
LABEL_82:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x8000000);
  v3 = (v3 & 0x8000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x10000000) == 0)
  {
LABEL_50:
    if ((v3 & 0x20000000) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_83:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10000000);
  v3 = (v3 & 0x10000000 ^ 0x3FFFFFFF) & v3;
  if ((v3 & 0x20000000) != 0)
  {
LABEL_51:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20000000);
    v3 = (v3 & 0x20000000 ^ 0x3FFFFFFF) & v3;
  }
LABEL_52:
  if ((v3 & 0x24) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x24);
    return (v3 & 0x24 ^ 0x3FFFFFFF) & v3;
  }
  return v3;
}

llvm::MDNode *llvm::GenericDINode::getImpl(_QWORD *a1, int a2, uint64_t a3, llvm::hashing::detail::hash_state *this, uint64_t a5, int a6, int a7)
{
  int v13;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  llvm::MDNode *result;
  char *v19;
  uint64_t v20;
  llvm::MDNode **v21;
  _QWORD v22[4];
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v13 = 0;
LABEL_9:
    v22[0] = a3;
    v19 = llvm::MDNode::operator new(16, a5 + 1, a6);
    v20 = llvm::MDNode::MDNode((uint64_t)v19, (uint64_t)a1, 8, a6, (uint64_t)v22, 1, (uint64_t *)this, a5);
    *(_WORD *)(v20 + 2) = a2;
    *(_DWORD *)(v20 + 4) = v13;
    return llvm::MDNode::storeImpl<llvm::GenericDINode,llvm::DenseSet<llvm::GenericDINode*,llvm::MDNodeInfo<llvm::GenericDINode>>>((llvm::MDNode *)v20, a6, *a1 + 576);
  }
  v22[0] = this;
  v22[1] = a5;
  v22[2] = 0;
  v22[3] = 0;
  v23 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(this, (uint64_t)this + 8 * a5, a3, (unint64_t *)this);
  v24 = a2;
  v25 = a3;
  v15 = *a1;
  v16 = (uint64_t *)(*a1 + 576);
  v21 = 0;
  v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::GenericDINode>>(v16, (uint64_t)v22, (uint64_t **)&v21);
  result = 0;
  if (v17 && v21 != (llvm::MDNode **)(*(_QWORD *)(v15 + 576) + 8 * *(unsigned int *)(v15 + 592)))
    result = *v21;
  if (!result && a7)
  {
    v13 = v23;
    goto LABEL_9;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::GenericDINode,llvm::DenseSet<llvm::GenericDINode*,llvm::MDNodeInfo<llvm::GenericDINode>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DISubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  llvm::ValueAsMetadata *v9;
  llvm::Value *v10;
  _QWORD *v11;
  llvm::ValueAsMetadata *v12;
  llvm::Value *v13;
  _QWORD *v14;

  v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*a1 + 2016, a2, 1);
  v11 = llvm::ValueAsMetadata::get(v9, v10);
  v12 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*a1 + 2016, a3, 1);
  v14 = llvm::ValueAsMetadata::get(v12, v13);
  return llvm::DISubrange::getImpl(a1, (uint64_t)v11, (uint64_t)v14, 0, 0, a4, a5);
}

{
  llvm::ValueAsMetadata *v9;
  llvm::Value *v10;
  _QWORD *v11;

  v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*a1 + 2016, a3, 1);
  v11 = llvm::ValueAsMetadata::get(v9, v10);
  return llvm::DISubrange::getImpl(a1, a2, (uint64_t)v11, 0, 0, a4, a5);
}

llvm::MDNode *llvm::DISubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _WORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 600);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(v15, &v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 600) + 8 * *(unsigned int *)(v14 + 616)))
    result = *v21;
  if (!result && a7)
  {
LABEL_9:
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v25 = a5;
    v19 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 16), 4uLL, a6);
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 24), (uint64_t)a1, 9, a6, (uint64_t)&v22, 4, 0, 0);
    v19[25] = 33;
    return llvm::MDNode::storeImpl<llvm::DISubrange,llvm::DenseSet<llvm::DISubrange*,llvm::MDNodeInfo<llvm::DISubrange>>>(v20, a6, *a1 + 600);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DISubrange,llvm::DenseSet<llvm::DISubrange*,llvm::MDNodeInfo<llvm::DISubrange>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  unint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  int v4;

  v1 = *((_QWORD *)this - 2);
  if ((v1 & 2) != 0)
    v2 = (unint64_t *)*((_QWORD *)this - 4);
  else
    v2 = (unint64_t *)((char *)this - 8 * ((v1 >> 2) & 0xF) - 16);
  v3 = *v2;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)v3;
  if (v4 == 1)
    return *(_QWORD *)(v3 + 128) & 0xFFFFFFFFFFFFFFF9;
  if ((v4 & 0xFE) == 0x18)
    return v3 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v4 == 6)
    return v3 & 0xFFFFFFFFFFFFFFF9 | 4;
  else
    return 0;
}

llvm::MDNode *llvm::DIGenericSubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _WORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1176);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(v15, &v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 1176) + 8 * *(unsigned int *)(v14 + 1192)))
    result = *v21;
  if (!result && a7)
  {
LABEL_9:
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v25 = a5;
    v19 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 16), 4uLL, a6);
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 24), (uint64_t)a1, 35, a6, (uint64_t)&v22, 4, 0, 0);
    v19[25] = 69;
    return llvm::MDNode::storeImpl<llvm::DISubrange,llvm::DenseSet<llvm::DISubrange*,llvm::MDNodeInfo<llvm::DISubrange>>>(v20, a6, *a1 + 1176);
  }
  return result;
}

uint64_t llvm::DIEnumerator::DIEnumerator(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  void *v12;

  v10 = llvm::MDNode::MDNode(a1, a2, 10, a3, a6, a7, 0, 0);
  *(_WORD *)(v10 + 2) = 40;
  v11 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(v10 + 24) = v11;
  if (v11 > 0x40)
  {
    v12 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v12;
    memcpy(v12, *(const void **)a4, (((unint64_t)*(unsigned int *)(a1 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a4;
  }
  *(_DWORD *)(a1 + 4) = a5;
  return a1;
}

llvm::MDNode *llvm::DIEnumerator::getImpl(_QWORD *a1, uint64_t a2, int a3, llvm::hashing::detail::hash_state *a4, int a5, int a6)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  llvm::MDNode *v22;
  uint64_t *v24;
  const void *v26;
  uint64_t *v27;
  llvm::hashing::detail::hash_state *v28;
  unsigned int v29;
  llvm::hashing::detail::hash_state *v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v11 = 2;
LABEL_18:
    v28 = a4;
    if (v11 <= 1)
      v19 = 1;
    else
      v19 = v11;
    v20 = (char *)operator new(8 * v19 + 48) + 8 * v19;
    v21 = (uint64_t)(v20 + 16);
    llvm::MDNode::Header::Header((uint64_t)v20, 1uLL, a5);
    v22 = (llvm::MDNode *)llvm::DIEnumerator::DIEnumerator(v21, (uint64_t)a1, a5, a2, a3, (uint64_t)&v28, 1);
    return llvm::MDNode::storeImpl<llvm::DIEnumerator,llvm::DenseSet<llvm::DIEnumerator*,llvm::MDNodeInfo<llvm::DIEnumerator>>>(v22, a5, *a1 + 624);
  }
  v12 = a6;
  v13 = *a1;
  v14 = (uint64_t *)(*a1 + 624);
  v15 = *(unsigned int *)(a2 + 8);
  if (v15 > 0x40)
  {
    v24 = v14;
    v17 = (void *)operator new[]();
    memcpy(v17, *(const void **)a2, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
    v16 = (void *)operator new[]();
    v26 = v17;
    v12 = a6;
    memcpy(v16, v17, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
    v14 = v24;
  }
  else
  {
    v16 = *(void **)a2;
    v26 = *(const void **)a2;
  }
  v29 = v15;
  v27 = 0;
  v28 = (llvm::hashing::detail::hash_state *)v16;
  v30 = a4;
  v31 = a3;
  v18 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(v14, &v28, &v27)&& v27 != (uint64_t *)(*(_QWORD *)(v13 + 624) + 8 * *(unsigned int *)(v13 + 640)))
  {
    v18 = *v27;
  }
  if (v29 >= 0x41 && v28)
    MEMORY[0x24BD1B380](v28, 0x1000C8000313F17);
  if (v15 >= 0x41 && v26)
    MEMORY[0x24BD1B380](v26, 0x1000C8000313F17);
  if (!v18 && v12)
  {
    v11 = 0;
    goto LABEL_18;
  }
  return (llvm::MDNode *)v18;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIEnumerator,llvm::DenseSet<llvm::DIEnumerator*,llvm::MDNodeInfo<llvm::DIEnumerator>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIBasicType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  __int16 v15;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  llvm::MDNode *result;
  _WORD *v21;
  llvm::MDNode *v22;
  llvm::MDNode **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v15 = a2;
  v30 = *MEMORY[0x24BDAC8D0];
  if (a8)
    goto LABEL_7;
  v17 = *a1;
  v18 = (uint64_t *)(*a1 + 648);
  LODWORD(v24) = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v23 = 0;
  v19 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(v18, &v24, (uint64_t **)&v23);
  result = 0;
  if (v19 && v23 != (llvm::MDNode **)(*(_QWORD *)(v17 + 648) + 8 * *(unsigned int *)(v17 + 664)))
    result = *v23;
  if (!result && a9)
  {
LABEL_7:
    v24 = 0;
    v25 = 0;
    v26 = a3;
    v21 = operator new(0x58uLL);
    llvm::MDNode::Header::Header((uint64_t)(v21 + 12), 3uLL, a8);
    v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 20), (uint64_t)a1, 11, a8, (uint64_t)&v24, 3, 0, 0);
    v21[21] = v15;
    *((_DWORD *)v21 + 14) = 0;
    *((_DWORD *)v21 + 15) = a7;
    *((_QWORD *)v21 + 8) = a4;
    *((_QWORD *)v21 + 9) = 0;
    *((_DWORD *)v21 + 20) = a5;
    *((_DWORD *)v21 + 21) = a6;
    return llvm::MDNode::storeImpl<llvm::DIBasicType,llvm::DenseSet<llvm::DIBasicType*,llvm::MDNodeInfo<llvm::DIBasicType>>>(v22, a8, *a1 + 648);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIBasicType,llvm::DenseSet<llvm::DIBasicType*,llvm::MDNodeInfo<llvm::DIBasicType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIStringType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, char a11)
{
  int v11;
  __int16 v17;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MDNode *result;
  _WORD *v23;
  llvm::MDNode *v24;
  llvm::MDNode **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v11 = a8;
  v17 = a2;
  v35 = *MEMORY[0x24BDAC8D0];
  if (a10)
    goto LABEL_7;
  v19 = *a1;
  v20 = (uint64_t *)(*a1 + 1152);
  LODWORD(v27) = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v33 = a8;
  v34 = a9;
  v26 = 0;
  v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(v20, (int *)&v27, (uint64_t **)&v26);
  result = 0;
  if (v21 && v26 != (llvm::MDNode **)(*(_QWORD *)(v19 + 1152) + 8 * *(unsigned int *)(v19 + 1168)))
    result = *v26;
  v11 = a8;
  if (!result)
  {
    if (a11)
    {
LABEL_7:
      v27 = 0;
      v28 = 0;
      v29 = a3;
      v30 = a4;
      v31 = a5;
      v32 = a6;
      v23 = operator new(0x70uLL);
      llvm::MDNode::Header::Header((uint64_t)(v23 + 24), 6uLL, a10);
      v24 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v23 + 32), (uint64_t)a1, 34, a10, (uint64_t)&v27, 6, 0, 0);
      v23[33] = v17;
      *((_QWORD *)v23 + 10) = 0;
      *((_QWORD *)v23 + 11) = a7;
      *((_QWORD *)v23 + 12) = 0;
      *((_DWORD *)v23 + 26) = v11;
      *((_DWORD *)v23 + 27) = a9;
      return llvm::MDNode::storeImpl<llvm::DIStringType,llvm::DenseSet<llvm::DIStringType*,llvm::MDNodeInfo<llvm::DIStringType>>>(v24, a10, *a1 + 1152);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIStringType,llvm::DenseSet<llvm::DIStringType*,llvm::MDNodeInfo<llvm::DIStringType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

uint64_t llvm::DIDerivedType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  llvm::MDNode *v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  __int16 v36;
  int v37;
  char *v39;
  uint64_t *v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v22 = a13;
  v23 = a12;
  v24 = a9;
  v55 = *MEMORY[0x24BDAC8D0];
  if (a16)
    goto LABEL_7;
  v25 = *a1;
  v26 = (uint64_t *)(*a1 + 672);
  v36 = a2;
  v37 = a5;
  LODWORD(v41) = a2;
  v42 = a3;
  v43 = a4;
  LODWORD(v44) = a5;
  v45 = a6;
  v46 = a7;
  v47 = a8;
  v48 = a10;
  v49 = a9;
  v50 = a11;
  v51 = a12;
  v52 = a13;
  v53 = a14;
  v54 = a15;
  v40[0] = 0;
  v27 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(v26, (uint64_t)&v41, v40)&& v40[0] != (uint64_t *)(*(_QWORD *)(v25 + 672) + 8 * *(unsigned int *)(v25 + 688)))
  {
    v27 = (llvm::MDNode *)*v40[0];
  }
  v23 = a12;
  LOWORD(a2) = v36;
  a5 = v37;
  v24 = a9;
  v22 = a13;
  if (!v27)
  {
    if (a17)
    {
LABEL_7:
      v41 = a4;
      v42 = a6;
      v43 = a3;
      v44 = a7;
      v45 = a14;
      v46 = a15;
      v28 = v23;
      v29 = a5;
      v30 = a2;
      v31 = v22;
      v32 = v24;
      v33 = (char *)operator new(0x78uLL);
      v27 = (llvm::MDNode *)(v33 + 64);
      llvm::MDNode::Header::Header((uint64_t)(v33 + 48), 6uLL, a16);
      llvm::MDNode::MDNode((uint64_t)(v33 + 64), (uint64_t)a1, 12, a16, (uint64_t)&v41, 6, 0, 0);
      *((_WORD *)v33 + 33) = v30;
      *((_DWORD *)v33 + 20) = v29;
      *((_DWORD *)v33 + 21) = v31;
      *((_DWORD *)v33 + 26) = v32;
      *((_QWORD *)v33 + 11) = a8;
      *((_QWORD *)v33 + 12) = a10;
      *(_QWORD *)(v33 + 108) = a11;
      if ((v28 & 0xFF00000000) != 0)
        *((_DWORD *)v33 + 17) = v28;
      v34 = *a1;
      v39 = v33 + 64;
      if (a16 == 1)
      {
        llvm::MDNode::storeDistinctInContext(v27);
      }
      else if (!a16)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v34 + 672, (uint64_t *)&v39, (uint64_t)v40);
        return (uint64_t)v39;
      }
    }
  }
  return (uint64_t)v27;
}

uint64_t llvm::DICompositeType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  llvm::MDNode *v36;
  uint64_t *v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  _WORD *v53;
  uint64_t *v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v27 = a21;
  v26 = a22;
  v29 = a19;
  v28 = a20;
  v30 = a18;
  v31 = a11;
  v32 = a10;
  v33 = a9;
  v75 = *MEMORY[0x24BDAC8D0];
  if (a23)
    goto LABEL_7;
  v51 = a1;
  v52 = a8;
  v34 = *a1;
  v35 = (uint64_t *)(*a1 + 696);
  v49 = a2;
  v50 = a5;
  LODWORD(v55) = a2;
  v56 = a3;
  v57 = a4;
  LODWORD(v58) = a5;
  v47 = a6;
  v59 = a6;
  v60 = a7;
  v48 = a7;
  v61 = a8;
  v62 = a10;
  v63 = __PAIR64__(a11, a9);
  v64 = a12;
  LODWORD(v65) = a13;
  v66 = a14;
  v67 = a15;
  v68 = a16;
  v69 = a17;
  v70 = a18;
  v71 = a19;
  v72 = a20;
  v73 = a21;
  v74 = a22;
  v54[0] = 0;
  v36 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(v35, (uint64_t)&v55, v54)&& v54[0] != (uint64_t *)(*(_QWORD *)(v34 + 696) + 8 * *(unsigned int *)(v34 + 712)))
  {
    v36 = (llvm::MDNode *)*v54[0];
  }
  a1 = v51;
  a8 = v52;
  LOWORD(a2) = v49;
  a5 = v50;
  v32 = a10;
  v31 = a11;
  v33 = a9;
  a7 = v48;
  v26 = a22;
  v28 = a20;
  v27 = a21;
  v29 = a19;
  a6 = v47;
  v30 = a18;
  if (!v36)
  {
    if (a24)
    {
LABEL_7:
      v55 = a4;
      v56 = a6;
      v57 = a3;
      v58 = a7;
      v59 = a12;
      v60 = a14;
      v61 = a15;
      v62 = a16;
      v63 = a17;
      v64 = v30;
      v65 = v29;
      v66 = v28;
      v67 = v27;
      v68 = v26;
      v37 = a1;
      v38 = a5;
      v39 = a2;
      v40 = v32;
      v41 = v33;
      v42 = v31;
      v43 = a8;
      v44 = operator new(0xB0uLL);
      v36 = (llvm::MDNode *)(v44 + 64);
      llvm::MDNode::Header::Header((uint64_t)(v44 + 56), 0xEuLL, a23);
      llvm::MDNode::MDNode((uint64_t)(v44 + 64), (uint64_t)v37, 13, a23, (uint64_t)&v55, 14, 0, 0);
      v44[65] = v39;
      *((_DWORD *)v44 + 36) = v38;
      *((_DWORD *)v44 + 37) = v42;
      *((_QWORD *)v44 + 19) = v43;
      *((_QWORD *)v44 + 20) = v40;
      *((_DWORD *)v44 + 42) = v41;
      *((_DWORD *)v44 + 43) = a13;
      v45 = *v37;
      v53 = v44 + 64;
      if (a23 == 1)
      {
        llvm::MDNode::storeDistinctInContext(v36);
      }
      else if (!a23)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v45 + 696, (uint64_t *)&v53, (uint64_t)v54);
        return (uint64_t)v53;
      }
    }
  }
  return (uint64_t)v36;
}

uint64_t llvm::DICompositeType::buildODRType(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  char v30;
  uint64_t *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v45[16];

  v45[14] = *MEMORY[0x24BDAC8D0];
  v22 = *a1;
  if (!*(_BYTE *)(*a1 + 1224))
    return 0;
  v45[0] = 0;
  v30 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(v22 + 1200), *(_DWORD *)(v22 + 1216), a2, v45);
  v31 = (uint64_t *)v45[0];
  if ((v30 & 1) == 0)
  {
    v36 = *(_DWORD *)(v22 + 1208);
    v37 = *(_DWORD *)(v22 + 1216);
    if (4 * v36 + 4 >= 3 * v37)
    {
      v37 *= 2;
    }
    else if (v37 + ~v36 - *(_DWORD *)(v22 + 1212) > v37 >> 3)
    {
LABEL_12:
      ++*(_DWORD *)(v22 + 1208);
      if (*v31 != -4096)
        --*(_DWORD *)(v22 + 1212);
      *v31 = a2;
      v31[1] = 0;
      v33 = (uint64_t)(v31 + 1);
      goto LABEL_15;
    }
    llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(v22 + 1200, v37);
    v45[0] = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(v22 + 1200), *(_DWORD *)(v22 + 1216), a2, v45);
    v31 = (uint64_t *)v45[0];
    goto LABEL_12;
  }
  v33 = v45[0] + 8;
  result = *(_QWORD *)(v45[0] + 8);
  if (!result)
  {
LABEL_15:
    result = llvm::DICompositeType::getImpl(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a2, a17, a18, a19,
               a20,
               a21,
               a22,
               1,
               1);
    *(_QWORD *)v33 = result;
    return result;
  }
  if (*(unsigned __int16 *)(result + 2) != a3)
    return 0;
  if ((a12 & 4) == 0 && (*(_DWORD *)(result + 20) & 4) != 0)
  {
    *(_WORD *)(result + 2) = a3;
    *(_DWORD *)(result + 16) = a6;
    *(_DWORD *)(result + 20) = a12;
    *(_DWORD *)(result + 40) = a10;
    *(_DWORD *)(result + 44) = a14;
    *(_QWORD *)(result + 24) = a9;
    *(_QWORD *)(result + 32) = a11;
    v45[0] = a5;
    v45[1] = a7;
    v45[2] = a4;
    v45[3] = a8;
    v45[4] = a13;
    v45[5] = a15;
    v45[6] = a16;
    v45[7] = a2;
    v45[8] = a17;
    v45[9] = a18;
    v45[10] = a19;
    v45[11] = a20;
    v45[12] = a21;
    v45[13] = a22;
    v34 = *(_QWORD *)(result - 16);
    v35 = (v34 & 2) != 0 ? *(_DWORD *)(result - 24) : (v34 >> 6) & 0xF;
    if (v35)
    {
      v38 = 0;
      v39 = v35;
      do
      {
        v40 = *(_QWORD *)v33;
        v41 = *(_QWORD *)(*(_QWORD *)v33 - 16);
        if ((v41 & 2) != 0)
          v42 = *(_QWORD *)(v40 - 32);
        else
          v42 = *(_QWORD *)v33 - 16 - 8 * ((v41 >> 2) & 0xF);
        v43 = v45[v38];
        if (v43 != *(_QWORD *)(v42 + 8 * v38))
          llvm::MDNode::setOperand(v40, v38, v43);
        ++v38;
      }
      while (v39 != v38);
      return *(_QWORD *)v33;
    }
  }
  return result;
}

llvm::MDNode *llvm::DISubroutineType::getImpl(_QWORD *a1, int a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  _WORD *v17;
  llvm::MDNode *v18;
  llvm::MDNode **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 720);
  LODWORD(v20) = a2;
  BYTE4(v20) = a3;
  v21 = a4;
  v19 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubroutineType>>(v13, (int *)&v20, (uint64_t **)&v19);
  result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(_QWORD *)(v12 + 720) + 8 * *(unsigned int *)(v12 + 736)))
    result = *v19;
  if (!result && a6)
  {
LABEL_9:
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = a4;
    v17 = operator new(0x60uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 16), 4uLL, a5);
    v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 24), (uint64_t)a1, 14, a5, (uint64_t)&v20, 4, 0, 0);
    v17[25] = 21;
    *((_DWORD *)v17 + 16) = 0;
    *((_DWORD *)v17 + 17) = a2;
    *((_QWORD *)v17 + 9) = 0;
    *((_QWORD *)v17 + 10) = 0;
    *((_DWORD *)v17 + 22) = 0;
    *((_BYTE *)v17 + 92) = a3;
    return llvm::MDNode::storeImpl<llvm::DISubroutineType,llvm::DenseSet<llvm::DISubroutineType*,llvm::MDNodeInfo<llvm::DISubroutineType>>>(v18, a5, *a1 + 720);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DISubroutineType,llvm::DenseSet<llvm::DISubroutineType*,llvm::MDNodeInfo<llvm::DISubroutineType>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

__n128 *llvm::DIFile::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  __n128 *result;
  uint64_t v19;
  _WORD *v20;
  __n128 *v21;
  __int128 v22;
  uint64_t v23;
  __n128 **v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a6)
    goto LABEL_7;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 744);
  v27 = *a4;
  v16 = *((_QWORD *)a4 + 2);
  v25 = a2;
  v26 = a3;
  v28 = v16;
  v29 = a5;
  v24 = 0;
  v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(v15, &v25, (uint64_t **)&v24);
  result = 0;
  if (v17 && v24 != (__n128 **)(*(_QWORD *)(v14 + 744) + 8 * *(unsigned int *)(v14 + 760)))
    result = *v24;
  if (!result && a7)
  {
LABEL_7:
    v25 = a2;
    v26 = a3;
    if (*((_BYTE *)a4 + 16))
      v19 = *((_QWORD *)a4 + 1);
    else
      v19 = 0;
    *(_QWORD *)&v27 = v19;
    *((_QWORD *)&v27 + 1) = a5;
    v20 = operator new(0x60uLL);
    llvm::MDNode::Header::Header((uint64_t)(v20 + 16), 4uLL, a6);
    v22 = *a4;
    v23 = *((_QWORD *)a4 + 2);
    v21 = (__n128 *)llvm::MDNode::MDNode((uint64_t)(v20 + 24), (uint64_t)a1, 15, a6, (uint64_t)&v25, 4, 0, 0);
    v20[25] = 41;
    *((_OWORD *)v20 + 4) = v22;
    *((_QWORD *)v20 + 10) = v23;
    *((_QWORD *)v20 + 11) = a5;
    return llvm::MDNode::storeImpl<llvm::DIFile,llvm::DenseSet<llvm::DIFile*,llvm::MDNodeInfo<llvm::DIFile>>>(v21, a6, *a1 + 744);
  }
  return result;
}

__n128 *llvm::MDNode::storeImpl<llvm::DIFile,llvm::DenseSet<llvm::DIFile*,llvm::MDNodeInfo<llvm::DIFile>>>(__n128 *this, int a2, uint64_t a3)
{
  __n128 *v3;
  __n128 *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

char *llvm::DICompileUnit::getImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, int a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, char a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20)
{
  _WORD *v23;
  _QWORD v26[4];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v26[0] = a3;
  v26[1] = a4;
  v26[2] = a6;
  v26[3] = a8;
  v27 = a10;
  v28 = a11;
  v29 = a12;
  v30 = a18;
  v31 = a19;
  v23 = operator new(0xA0uLL);
  llvm::MDNode::Header::Header((uint64_t)(v23 + 44), 0xBuLL, a20);
  llvm::MDNode::MDNode((uint64_t)(v23 + 52), a1, 16, a20, (uint64_t)v26, 11, 0, 0);
  v23[53] = 17;
  *((_DWORD *)v23 + 30) = a2;
  *((_BYTE *)v23 + 124) = a5;
  *((_DWORD *)v23 + 32) = a7;
  *((_DWORD *)v23 + 33) = a9;
  *((_QWORD *)v23 + 17) = a13;
  *((_BYTE *)v23 + 144) = a14;
  *((_BYTE *)v23 + 145) = a15;
  *((_DWORD *)v23 + 37) = a16;
  *((_BYTE *)v23 + 152) = a17;
  if (a20 == 1)
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)(v23 + 52));
  return (char *)(v23 + 52);
}

const char *llvm::DISubprogram::getFlagString(int a1)
{
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  result = (const char *)&str_36_4;
  if (a1 <= 31)
  {
    switch(a1)
    {
      case 0:
        result = "DISPFlagZero";
        break;
      case 1:
        result = "DISPFlagVirtual";
        break;
      case 2:
        result = "DISPFlagPureVirtual";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        result = "DISPFlagLocalToUnit";
        break;
      case 8:
        result = "DISPFlagDefinition";
        break;
      default:
        if (a1 == 16)
          result = "DISPFlagOptimized";
        break;
    }
  }
  else if (a1 <= 255)
  {
    v7 = "DISPFlagElemental";
    v8 = "DISPFlagRecursive";
    if (a1 != 128)
      v8 = (const char *)&str_36_4;
    if (a1 != 64)
      v7 = v8;
    if (a1 == 32)
      return "DISPFlagPure";
    else
      return v7;
  }
  else
  {
    v3 = "DISPFlagObjCDirect";
    v4 = "DISPFlagIsTransparentStepping";
    if (a1 != 4096)
      v4 = (const char *)&str_36_4;
    if (a1 != 2048)
      v3 = v4;
    v5 = "DISPFlagMainSubprogram";
    v6 = "DISPFlagDeleted";
    if (a1 != 512)
      v6 = (const char *)&str_36_4;
    if (a1 != 256)
      v5 = v6;
    if (a1 <= 2047)
      return v5;
    else
      return v3;
  }
  return result;
}

uint64_t llvm::DISubprogram::splitFlags(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;

  v3 = a1;
  if ((a1 & 1) != 0)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, 1);
    v3 &= 0x1FFEu;
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 2);
  v3 = (v3 & 2 ^ 0x1FFF) & v3;
  if ((v3 & 4) == 0)
  {
LABEL_4:
    if ((v3 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 4);
  v3 = (v3 & 4 ^ 0x1FFF) & v3;
  if ((v3 & 8) == 0)
  {
LABEL_5:
    if ((v3 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 8);
  v3 = (v3 & 8 ^ 0x1FFF) & v3;
  if ((v3 & 0x10) == 0)
  {
LABEL_6:
    if ((v3 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x10);
  v3 = (v3 & 0x10 ^ 0x1FFF) & v3;
  if ((v3 & 0x20) == 0)
  {
LABEL_7:
    if ((v3 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x20);
  v3 = (v3 & 0x20 ^ 0x1FFF) & v3;
  if ((v3 & 0x40) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x40);
  v3 = (v3 & 0x40 ^ 0x1FFF) & v3;
  if ((v3 & 0x80) == 0)
  {
LABEL_9:
    if ((v3 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x80);
  v3 = (v3 & 0x80 ^ 0x1FFF) & v3;
  if ((v3 & 0x100) == 0)
  {
LABEL_10:
    if ((v3 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x100);
  v3 = (v3 & 0x100 ^ 0x1FFF) & v3;
  if ((v3 & 0x200) == 0)
  {
LABEL_11:
    if ((v3 & 0x800) == 0)
      goto LABEL_12;
LABEL_25:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x800);
    v3 = (v3 & 0x800 ^ 0x1FFF) & v3;
    if ((v3 & 0x1000) == 0)
      return v3;
    goto LABEL_13;
  }
LABEL_24:
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x200);
  v3 = (v3 & 0x200 ^ 0x1FFF) & v3;
  if ((v3 & 0x800) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v3 & 0x1000) != 0)
  {
LABEL_13:
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v3 & 0x1000);
    return (v3 & 0x1000 ^ 0x1FFF) & v3;
  }
  return v3;
}

char *llvm::DISubprogram::getImpl(_QWORD *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, uint64_t *a7, int a8, uint64_t *a9, int a10, int a11, int a12, int a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t *a20,int a21,char a22)
{
  int v22;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v42;
  uint64_t *v43;
  char *v47;
  uint64_t *__src[13];
  void *v49;
  uint64_t v50;
  _QWORD v51[2];
  int v52;
  uint64_t *v53;
  int v54;
  uint64_t *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;

  v22 = a8;
  v26 = a19;
  v27 = a18;
  v28 = a15;
  v29 = a9;
  v67 = *MEMORY[0x24BDAC8D0];
  if (a21)
    goto LABEL_7;
  v30 = *a1;
  v31 = (uint64_t *)(*a1 + 768);
  v49 = a2;
  v50 = (uint64_t)a3;
  v42 = a4;
  v43 = a7;
  v51[0] = a4;
  v51[1] = a5;
  v52 = a6;
  v53 = a7;
  v54 = a8;
  v55 = a9;
  v56 = a10;
  v57 = a11;
  v58 = a12;
  v59 = a13;
  v60 = a14;
  v61 = a15;
  v62 = a16;
  v63 = a17;
  v64 = a18;
  v65 = a19;
  v66 = a20;
  __src[0] = 0;
  v32 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubprogram>>(v31, (uint64_t)&v49, __src)&& __src[0] != (uint64_t *)(*(_QWORD *)(v30 + 768) + 8 * *(unsigned int *)(v30 + 784)))
  {
    v32 = (char *)*__src[0];
  }
  v22 = a8;
  v28 = a15;
  v29 = a9;
  v26 = a19;
  v27 = a18;
  a4 = v42;
  a7 = v43;
  if (!v32)
  {
    if (a22)
    {
LABEL_7:
      __src[0] = a5;
      __src[1] = (uint64_t *)a2;
      __src[2] = a3;
      __src[3] = a4;
      __src[4] = a7;
      __src[5] = a14;
      __src[6] = a16;
      __src[7] = a17;
      v33 = v29;
      __src[8] = v29;
      __src[9] = v28;
      v34 = v28;
      v35 = v27;
      __src[10] = v27;
      __src[11] = v26;
      __src[12] = a20;
      v49 = v51;
      v50 = 0xD00000000;
      v36 = v26;
      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v49, __src, &v49);
      v37 = v50;
      v38 = v50;
      if (!a20)
      {
        v38 = v50 - 1;
        LODWORD(v50) = v50 - 1;
        if (!v36)
        {
          v38 = v37 - 2;
          LODWORD(v50) = v37 - 2;
          if (!v35)
          {
            v38 = v37 - 3;
            LODWORD(v50) = v37 - 3;
            if (!v34)
            {
              v38 = v37 - 4;
              LODWORD(v50) = v37 - 4;
              if (!v33)
              {
                v38 = v37 - 5;
                LODWORD(v50) = v37 - 5;
              }
            }
          }
        }
      }
      v32 = llvm::MDNode::operator new(40, v38, a21);
      v39 = llvm::MDNode::MDNode((uint64_t)v32, (uint64_t)a1, 17, a21, (uint64_t)v49, v50, 0, 0);
      *(_WORD *)(v39 + 2) = 46;
      *(_DWORD *)(v39 + 16) = a6;
      *(_DWORD *)(v39 + 20) = v22;
      *(_DWORD *)(v39 + 24) = a10;
      *(_DWORD *)(v39 + 28) = a11;
      *(_DWORD *)(v39 + 32) = a12;
      *(_DWORD *)(v39 + 36) = a13;
      v40 = *a1;
      v47 = (char *)v39;
      if (a21 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v32);
      }
      else if (!a21)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v40 + 768, (uint64_t *)&v47, (uint64_t)__src);
        v32 = v47;
      }
      if (v49 != v51)
        free(v49);
    }
  }
  return v32;
}

llvm::MDNode *llvm::DILexicalBlock::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  unsigned int v12;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _WORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (HIWORD(a5))
    v12 = 0;
  else
    v12 = a5;
  if (a6)
    goto LABEL_12;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 792);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = v12;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(v15, &v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 792) + 8 * *(unsigned int *)(v14 + 808)))
    result = *v21;
  if (!result && a7)
  {
LABEL_12:
    v22 = a3;
    v23 = a2;
    v19 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 8), 2uLL, a6);
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 16), (uint64_t)a1, 18, a6, (uint64_t)&v22, 2, 0, 0);
    v19[17] = 11;
    *((_DWORD *)v19 + 12) = a4;
    v19[26] = v12;
    return llvm::MDNode::storeImpl<llvm::DILexicalBlock,llvm::DenseSet<llvm::DILexicalBlock*,llvm::MDNodeInfo<llvm::DILexicalBlock>>>(v20, a6, *a1 + 792);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILexicalBlock,llvm::DenseSet<llvm::DILexicalBlock*,llvm::MDNodeInfo<llvm::DILexicalBlock>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DILexicalBlockFile::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  _WORD *v17;
  llvm::MDNode *v18;
  llvm::MDNode **v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 816);
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v19 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(v13, &v20, (uint64_t **)&v19);
  result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(_QWORD *)(v12 + 816) + 8 * *(unsigned int *)(v12 + 832)))
    result = *v19;
  if (!result && a6)
  {
LABEL_9:
    v20 = a3;
    v21 = a2;
    v17 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 8), 2uLL, a5);
    v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 16), (uint64_t)a1, 19, a5, (uint64_t)&v20, 2, 0, 0);
    v17[17] = 11;
    *((_DWORD *)v17 + 12) = a4;
    return llvm::MDNode::storeImpl<llvm::DILexicalBlockFile,llvm::DenseSet<llvm::DILexicalBlockFile*,llvm::MDNodeInfo<llvm::DILexicalBlockFile>>>(v18, a5, *a1 + 816);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILexicalBlockFile,llvm::DenseSet<llvm::DILexicalBlockFile*,llvm::MDNodeInfo<llvm::DILexicalBlockFile>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DINamespace::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  _WORD *v17;
  llvm::MDNode *v18;
  llvm::MDNode **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 840);
  v20 = a2;
  v21 = a3;
  LOBYTE(v22) = a4;
  v19 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(v13, &v20, (uint64_t **)&v19);
  result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(_QWORD *)(v12 + 840) + 8 * *(unsigned int *)(v12 + 856)))
    result = *v19;
  if (!result && a6)
  {
LABEL_9:
    v20 = 0;
    v21 = a2;
    v22 = a3;
    v17 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 12), 3uLL, a5);
    v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 20), (uint64_t)a1, 20, a5, (uint64_t)&v20, 3, 0, 0);
    v17[21] = 57;
    *((_BYTE *)v17 + 56) = v17[28] & 0xFE | a4;
    return llvm::MDNode::storeImpl<llvm::DINamespace,llvm::DenseSet<llvm::DINamespace*,llvm::MDNodeInfo<llvm::DINamespace>>>(v18, a5, *a1 + 840);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DINamespace,llvm::DenseSet<llvm::DINamespace*,llvm::MDNodeInfo<llvm::DINamespace>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DICommonBlock::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v16;
  uint64_t *v17;
  int v18;
  llvm::MDNode *result;
  _WORD *v21;
  llvm::MDNode *v22;
  llvm::MDNode **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a7)
    goto LABEL_9;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 1104);
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v23 = 0;
  v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(v17, &v24, (uint64_t **)&v23);
  result = 0;
  if (v18 && v23 != (llvm::MDNode **)(*(_QWORD *)(v16 + 1104) + 8 * *(unsigned int *)(v16 + 1120)))
    result = *v23;
  if (!result && a8)
  {
LABEL_9:
    v24 = a2;
    v25 = a3;
    v26 = a4;
    v27 = a5;
    v21 = operator new(0x48uLL);
    llvm::MDNode::Header::Header((uint64_t)(v21 + 16), 4uLL, a7);
    v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 24), (uint64_t)a1, 32, a7, (uint64_t)&v24, 4, 0, 0);
    v21[25] = 26;
    *((_DWORD *)v21 + 16) = a6;
    return llvm::MDNode::storeImpl<llvm::DICommonBlock,llvm::DenseSet<llvm::DICommonBlock*,llvm::MDNodeInfo<llvm::DICommonBlock>>>(v22, a7, *a1 + 1104);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DICommonBlock,llvm::DenseSet<llvm::DICommonBlock*,llvm::MDNodeInfo<llvm::DICommonBlock>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIModule::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, int a10, char a11)
{
  int v11;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MDNode *result;
  _WORD *v23;
  llvm::MDNode *v24;
  llvm::MDNode **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  v11 = a8;
  v35 = *MEMORY[0x24BDAC8D0];
  if (a10)
    goto LABEL_7;
  v19 = *a1;
  v20 = (uint64_t *)(*a1 + 864);
  v27 = a2;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v33 = a8;
  v34 = a9;
  v26 = 0;
  v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIModule>>(v20, &v27, (uint64_t **)&v26);
  result = 0;
  if (v21 && v26 != (llvm::MDNode **)(*(_QWORD *)(v19 + 864) + 8 * *(unsigned int *)(v19 + 880)))
    result = *v26;
  v11 = a8;
  if (!result)
  {
    if (a11)
    {
LABEL_7:
      v27 = a2;
      v28 = a3;
      v29 = a4;
      v30 = a5;
      v31 = a6;
      v32 = a7;
      v23 = operator new(0x58uLL);
      llvm::MDNode::Header::Header((uint64_t)(v23 + 24), 6uLL, a10);
      v24 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v23 + 32), (uint64_t)a1, 21, a10, (uint64_t)&v27, 6, 0, 0);
      v23[33] = 30;
      *((_DWORD *)v23 + 20) = v11;
      *((_BYTE *)v23 + 84) = a9;
      return llvm::MDNode::storeImpl<llvm::DIModule,llvm::DenseSet<llvm::DIModule*,llvm::MDNodeInfo<llvm::DIModule>>>(v24, a10, *a1 + 864);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIModule,llvm::DenseSet<llvm::DIModule*,llvm::MDNodeInfo<llvm::DIModule>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DITemplateTypeParameter::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  _WORD *v17;
  llvm::MDNode *v18;
  llvm::MDNode **v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 888);
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v19 = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>>(v13, &v20, (uint64_t **)&v19);
  result = 0;
  if (v14 && v19 != (llvm::MDNode **)(*(_QWORD *)(v12 + 888) + 8 * *(unsigned int *)(v12 + 904)))
    result = *v19;
  if (!result && a6)
  {
LABEL_9:
    v20 = a2;
    v21 = a3;
    v17 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v17 + 8), 2uLL, a5);
    v18 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v17 + 16), (uint64_t)a1, 22, a5, (uint64_t)&v20, 2, 0, 0);
    v17[17] = 47;
    *((_BYTE *)v17 + 48) = a4;
    return llvm::MDNode::storeImpl<llvm::DITemplateTypeParameter,llvm::DenseSet<llvm::DITemplateTypeParameter*,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>>>(v18, a5, *a1 + 888);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DITemplateTypeParameter,llvm::DenseSet<llvm::DITemplateTypeParameter*,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DITemplateValueParameter::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8)
{
  __int16 v13;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  llvm::MDNode *result;
  _WORD *v21;
  llvm::MDNode *v22;
  llvm::MDNode **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v13 = a2;
  v29 = *MEMORY[0x24BDAC8D0];
  if (a7)
    goto LABEL_9;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 912);
  LODWORD(v24) = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v23 = 0;
  v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(v17, (int *)&v24, (uint64_t **)&v23);
  result = 0;
  if (v18 && v23 != (llvm::MDNode **)(*(_QWORD *)(v16 + 912) + 8 * *(unsigned int *)(v16 + 928)))
    result = *v23;
  if (!result && a8)
  {
LABEL_9:
    v24 = a3;
    v25 = a4;
    v26 = a6;
    v21 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v21 + 12), 3uLL, a7);
    v22 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v21 + 20), (uint64_t)a1, 23, a7, (uint64_t)&v24, 3, 0, 0);
    v21[21] = v13;
    *((_BYTE *)v21 + 56) = a5;
    return llvm::MDNode::storeImpl<llvm::DITemplateValueParameter,llvm::DenseSet<llvm::DITemplateValueParameter*,llvm::MDNodeInfo<llvm::DITemplateValueParameter>>>(v22, a7, *a1 + 912);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DITemplateValueParameter,llvm::DenseSet<llvm::DITemplateValueParameter*,llvm::MDNodeInfo<llvm::DITemplateValueParameter>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIGlobalVariable::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, char a15)
{
  uint64_t v20;
  uint64_t *v21;
  int v22;
  llvm::MDNode *result;
  _WORD *v24;
  llvm::MDNode *v25;
  uint64_t v26;
  llvm::MDNode **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a14)
    goto LABEL_7;
  v20 = *a1;
  v21 = (uint64_t *)(*a1 + 936);
  v30 = a2;
  v31 = a3;
  v32 = a4;
  v33 = a5;
  LODWORD(v34) = a6;
  v26 = a7;
  v35 = a7;
  LOBYTE(v36) = a8;
  BYTE1(v36) = a9;
  v37 = a10;
  v38 = a11;
  v39 = a12;
  v40 = a13;
  v29 = 0;
  v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>>(v21, &v30, (uint64_t **)&v29);
  result = 0;
  if (v22 && v29 != (llvm::MDNode **)(*(_QWORD *)(v20 + 936) + 8 * *(unsigned int *)(v20 + 952)))
    result = *v29;
  a7 = v26;
  if (!result)
  {
    if (a15)
    {
LABEL_7:
      v30 = a2;
      v31 = a3;
      v32 = a5;
      v33 = a7;
      v34 = a3;
      v35 = a4;
      v36 = a10;
      v37 = a11;
      v38 = a13;
      v24 = operator new(0x78uLL);
      llvm::MDNode::Header::Header((uint64_t)(v24 + 36), 9uLL, a14);
      v25 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v24 + 44), (uint64_t)a1, 24, a14, (uint64_t)&v30, 9, 0, 0);
      v24[45] = 52;
      *((_DWORD *)v24 + 26) = a6;
      *((_DWORD *)v24 + 27) = a12;
      *((_BYTE *)v24 + 112) = a8;
      *((_BYTE *)v24 + 113) = a9;
      return llvm::MDNode::storeImpl<llvm::DIGlobalVariable,llvm::DenseSet<llvm::DIGlobalVariable*,llvm::MDNodeInfo<llvm::DIGlobalVariable>>>(v25, a14, *a1 + 936);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIGlobalVariable,llvm::DenseSet<llvm::DIGlobalVariable*,llvm::MDNodeInfo<llvm::DIGlobalVariable>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DILocalVariable::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, int a11, char a12)
{
  int v12;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MDNode *result;
  __int16 v23;
  _WORD *v24;
  llvm::MDNode *v25;
  __int16 v26;
  llvm::MDNode **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v12 = a8;
  v38 = *MEMORY[0x24BDAC8D0];
  if (a11)
    goto LABEL_7;
  v19 = *a1;
  v20 = (uint64_t *)(*a1 + 960);
  v29 = a2;
  v30 = a3;
  v31 = a4;
  LODWORD(v32) = a5;
  v33 = a6;
  v26 = a7;
  v34 = a7;
  v35 = a8;
  v36 = a9;
  v37 = a10;
  v28 = 0;
  v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(v20, &v29, (uint64_t **)&v28);
  result = 0;
  if (v21 && v28 != (llvm::MDNode **)(*(_QWORD *)(v19 + 960) + 8 * *(unsigned int *)(v19 + 976)))
    result = *v28;
  LOWORD(a7) = v26;
  v12 = a8;
  if (!result)
  {
    if (a12)
    {
LABEL_7:
      v29 = a2;
      v30 = a3;
      v31 = a4;
      v32 = a6;
      v33 = a10;
      v23 = a7;
      v24 = operator new(0x58uLL);
      llvm::MDNode::Header::Header((uint64_t)(v24 + 20), 5uLL, a11);
      v25 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v24 + 28), (uint64_t)a1, 25, a11, (uint64_t)&v29, 5, 0, 0);
      v24[29] = 52;
      *((_DWORD *)v24 + 18) = a5;
      *((_DWORD *)v24 + 19) = a9;
      v24[40] = v23;
      *((_DWORD *)v24 + 21) = v12;
      return llvm::MDNode::storeImpl<llvm::DILocalVariable,llvm::DenseSet<llvm::DILocalVariable*,llvm::MDNodeInfo<llvm::DILocalVariable>>>(v25, a11, *a1 + 960);
    }
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILocalVariable,llvm::DenseSet<llvm::DILocalVariable*,llvm::MDNodeInfo<llvm::DILocalVariable>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

unint64_t llvm::DIVariable::getSizeInBits(llvm::DIVariable *this)
{
  unint64_t v1;
  char *v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this - 2);
  if ((v1 & 2) != 0)
    v2 = (char *)*((_QWORD *)this - 4);
  else
    v2 = (char *)this - 8 * ((v1 >> 2) & 0xF) - 16;
  while (1)
  {
    v3 = *((_QWORD *)v2 + 3);
    if (!v3)
      goto LABEL_13;
    v4 = *(unsigned __int8 *)v3;
    if ((v4 - 11) >= 4 && v4 != 34)
    {
LABEL_12:
      v3 = 0;
LABEL_13:
      v7 = 0;
      return v7 | v3;
    }
    v5 = *(_QWORD *)(v3 + 24);
    if (v5)
      break;
    if (v4 != 12)
      goto LABEL_12;
    v6 = *(_QWORD *)(v3 - 16);
    if ((v6 & 2) != 0)
      v2 = *(char **)(v3 - 32);
    else
      v2 = (char *)(v3 - 16 - 8 * ((v6 >> 2) & 0xF));
  }
  v3 = v5 & 0xFFFFFFFFFFFFFF00;
  v7 = v5;
  return v7 | v3;
}

llvm::MDNode *llvm::DILabel::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _WORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 984);
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(v15, &v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 984) + 8 * *(unsigned int *)(v14 + 1000)))
    result = *v21;
  if (!result && a7)
  {
LABEL_9:
    v22 = a2;
    v23 = a3;
    v24 = a4;
    v19 = operator new(0x40uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 12), 3uLL, a6);
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 20), (uint64_t)a1, 26, a6, (uint64_t)&v22, 3, 0, 0);
    v19[21] = 10;
    *((_DWORD *)v19 + 14) = a5;
    return llvm::MDNode::storeImpl<llvm::DILabel,llvm::DenseSet<llvm::DILabel*,llvm::MDNodeInfo<llvm::DILabel>>>(v20, a6, *a1 + 984);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DILabel,llvm::DenseSet<llvm::DILabel*,llvm::MDNodeInfo<llvm::DILabel>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIExpression::getImpl(_QWORD *a1, const void *a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  llvm::MDNode *result;
  BOOL v15;
  char *v16;
  llvm::MDNode *v17;
  llvm::MDNode *v18;
  unint64_t *v19;
  _QWORD v20[2];
  llvm::MDNode **v21;

  v5 = (int)a4;
  if ((_DWORD)a4)
  {
    v9 = 2;
LABEL_11:
    v16 = (char *)operator new(8 * v9 + 56) + 8 * v9;
    v17 = (llvm::MDNode *)(v16 + 16);
    *((_DWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFC00 | (v5 != 0) | (unint64_t)(4 * v9);
    if (v5)
      bzero(v16 - 16, 8 * v9);
    v18 = llvm::DIExpression::DIExpression(v17, (uint64_t)a1, v5, a2, a3);
    return llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>(v18, v5, *a1 + 528, v19);
  }
  v11 = *a1;
  v12 = (uint64_t *)(*a1 + 528);
  v20[0] = a2;
  v20[1] = a3;
  v21 = 0;
  v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIExpression>>(v12, (uint64_t)v20, (uint64_t **)&v21, a4);
  result = 0;
  if (v13)
    v15 = v21 == (llvm::MDNode **)(*(_QWORD *)(v11 + 528) + 8 * *(unsigned int *)(v11 + 544));
  else
    v15 = 1;
  if (!v15)
    result = *v21;
  if (!result && a5)
  {
    v9 = 0;
    goto LABEL_11;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIExpression,llvm::DenseSet<llvm::DIExpression*,llvm::MDNodeInfo<llvm::DIExpression>>>(llvm::MDNode *this, int a2, uint64_t a3, unint64_t *a4)
{
  llvm::MDNode *v4;
  llvm::MDNode *v6;
  _BYTE v7[31];

  v4 = this;
  v6 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v6, a4, (uint64_t)v7);
    return v6;
  }
  return v4;
}

uint64_t llvm::DIAssignID::getImpl(uint64_t a1, int a2)
{
  _BOOL8 v4;
  char *v5;
  uint64_t v6;

  v4 = a2 != 0;
  v5 = (char *)operator new((16 * v4) | 0x20) + 16 * v4;
  v6 = (uint64_t)(v5 + 16);
  *((_DWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFC00 | (v4 || 8 * v4);
  if (a2)
    bzero(v5 - 16, 16 * v4);
  *(_BYTE *)v6 = 29;
  *(_WORD *)(v6 + 2) = 0;
  *(_DWORD *)(v6 + 4) = 0;
  *(_QWORD *)(v6 + 8) = a1;
  *(_BYTE *)(v6 + 1) = a2 & 0x7F;
  if ((a2 & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands(v6);
  if (a2 == 1)
    llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v6);
  return v6;
}

uint64_t llvm::DIExpression::ExprOperand::getSize(uint64_t **this)
{
  uint64_t v1;
  uint64_t result;
  BOOL v3;

  v1 = **this;
  if ((unint64_t)(v1 - 112) < 0x20)
    return 2;
  result = 3;
  if (v1 <= 147)
  {
    v3 = (unint64_t)v1 > 0x23 || ((1 << v1) & 0x800030000) == 0;
    if (!v3 || v1 == 144)
      return 2;
    if (v1 != 146)
      return 1;
  }
  else
  {
    if ((unint64_t)(v1 - 4096) > 5)
      goto LABEL_6;
    if (((1 << v1) & 0x2C) != 0)
      return 2;
    if (((1 << v1) & 3) == 0)
    {
LABEL_6:
      if (v1 != 148)
        return 1;
      return 2;
    }
  }
  return result;
}

BOOL llvm::DIExpression::isValid(llvm::DIExpression *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v10;
  uint64_t *v11;

  v1 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  v11 = v1;
  if (v2 == v1)
    return 1;
  v3 = v1;
  v4 = v1;
  while (1)
  {
    v5 = &v4[llvm::DIExpression::ExprOperand::getSize(&v11)];
    if (v5 > v2)
      return 0;
    v6 = *v4;
    if ((unint64_t)(*v4 - 80) < 0x40)
      return 1;
    if (v6 <= 0x30)
    {
      if (((1 << v6) & 0x100FF7D170040) != 0)
        goto LABEL_7;
      if (v6 == 22)
      {
        if ((((char *)v2 - (char *)v1) & 0x7FFFFFFF8) == 8)
          return 0;
        goto LABEL_7;
      }
    }
    if (v6 - 144 > 0xF)
      break;
    if (((1 << (v6 + 112)) & 0x95) != 0)
      goto LABEL_7;
    if (v6 != 159)
      break;
    if (v5 != v2)
    {
      v10 = v3;
      if (v3[llvm::DIExpression::ExprOperand::getSize(&v10)] != 4096)
        return 0;
    }
LABEL_7:
    v11 = v5;
    v3 = v5;
    v4 = v5;
    if (v5 == v2)
      return 1;
  }
  v7 = v6 - 4096;
  if (v7 > 5)
    return 0;
  if (((1 << v7) & 0x36) != 0)
    goto LABEL_7;
  if (v7)
  {
    v10 = v1;
    if (*v1 == 4101 && !v1[1])
      v1 += llvm::DIExpression::ExprOperand::getSize(&v10);
    if (v4 != v1)
      return 0;
    return v4[1] == 1;
  }
  else
  {
    return v5 == v2;
  }
}

int8x16_t llvm::DIExpression::getFragmentInfo@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t *v5;
  int8x16_t result;
  uint64_t *v7;

  v7 = a1;
  if (a1 == a2)
  {
LABEL_5:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
  }
  else
  {
    v5 = a1;
    while (*v5 != 4096)
    {
      v5 += llvm::DIExpression::ExprOperand::getSize(&v7);
      v7 = v5;
      if (v5 == a2)
        goto LABEL_5;
    }
    result = vextq_s8(*(int8x16_t *)(v5 + 1), *(int8x16_t *)(v5 + 1), 8uLL);
    *a3 = result;
    a3[1].i8[0] = 1;
  }
  return result;
}

llvm::MDNode *llvm::DIExpression::append(_QWORD *a1, _BYTE *__src, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int Size;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::MDNode *Impl;
  uint64_t *v14;
  uint64_t *v15;
  void *i;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  v17 = 0x1000000000;
  v6 = (uint64_t *)a1[2];
  v7 = (uint64_t *)a1[3];
  v15 = v6;
  for (i = v18; v6 != v7; v15 = v6)
  {
    v14 = v6;
    if (*v6 == 4096 || *v6 == 159)
    {
      llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&i, __src, &__src[8 * a3]);
      __src = 0;
      a3 = 0;
      v6 = v14;
    }
    Size = llvm::DIExpression::ExprOperand::getSize(&v14);
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&i, v6, &v6[Size]);
    v9 = v15;
    v6 = &v9[llvm::DIExpression::ExprOperand::getSize(&v15)];
  }
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&i, __src, &__src[8 * a3]);
  v10 = a1[1];
  v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0)
    v11 = (_QWORD *)*v11;
  Impl = llvm::DIExpression::getImpl(v11, i, v17, 0, 1);
  if (i != v18)
    free(i);
  return Impl;
}

uint64_t llvm::DIExpression::isConstant(llvm::DIExpression *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;

  v1 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (*((_QWORD *)this + 3) - (_QWORD)v1) >> 3;
  if ((_DWORD)v2 != 2)
  {
    if ((_DWORD)v2 != 6 && (_DWORD)v2 != 3)
      goto LABEL_19;
    v4 = *v1;
    if ((*v1 & 0xFFFFFFFFFFFFFFFELL) != 0x10)
      goto LABEL_19;
    if ((_DWORD)v2 == 6)
    {
      if (v1[2] != 159 || v1[3] != 4096)
        goto LABEL_19;
    }
    else if ((_DWORD)v2 == 3 && v1[2] != 159)
    {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  v4 = *v1;
  if (*v1 == 16)
  {
LABEL_17:
    v5 = v4 == 16;
    goto LABEL_18;
  }
  if (v4 != 17)
  {
LABEL_19:
    v6 = 0;
    v5 = 0;
    return v5 | v6;
  }
  v5 = 0;
LABEL_18:
  v6 = 0x100000000;
  return v5 | v6;
}

llvm::MDNode *llvm::DIGlobalVariableExpression::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  llvm::MDNode *result;
  void *v15;
  uint64_t v16;
  llvm::MDNode *v17;
  llvm::MDNode **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a4)
    goto LABEL_9;
  v10 = *a1;
  v11 = (uint64_t *)(*a1 + 552);
  v19 = a2;
  v20 = a3;
  v18 = 0;
  v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(v11, &v19, (uint64_t **)&v18);
  result = 0;
  if (v12 && v18 != (llvm::MDNode **)(*(_QWORD *)(v10 + 552) + 8 * *(unsigned int *)(v10 + 568)))
    result = *v18;
  if (!result && a5)
  {
LABEL_9:
    v19 = a2;
    v20 = a3;
    v15 = operator new(0x30uLL);
    v16 = (uint64_t)v15 + 32;
    llvm::MDNode::Header::Header((uint64_t)v15 + 16, 2uLL, a4);
    v17 = (llvm::MDNode *)llvm::MDNode::MDNode(v16, (uint64_t)a1, 7, a4, (uint64_t)&v19, 2, 0, 0);
    return llvm::MDNode::storeImpl<llvm::DIGlobalVariableExpression,llvm::DenseSet<llvm::DIGlobalVariableExpression*,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>>>(v17, a4, *a1 + 552);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIGlobalVariableExpression,llvm::DenseSet<llvm::DIGlobalVariableExpression*,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIObjCProperty::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int a9, char a10)
{
  uint64_t v18;
  uint64_t *v19;
  int v20;
  llvm::MDNode *result;
  _WORD *v22;
  llvm::MDNode *v23;
  llvm::MDNode **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a9)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 1008);
  v25 = a2;
  v26 = a3;
  LODWORD(v27) = a4;
  v28 = a5;
  v29 = a6;
  v30 = a7;
  v31 = a8;
  v24 = 0;
  v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(v19, &v25, (uint64_t **)&v24);
  result = 0;
  if (v20 && v24 != (llvm::MDNode **)(*(_QWORD *)(v18 + 1008) + 8 * *(unsigned int *)(v18 + 1024)))
    result = *v24;
  if (!result && a10)
  {
LABEL_7:
    v25 = a2;
    v26 = a3;
    v27 = a5;
    v28 = a6;
    v29 = a8;
    v22 = operator new(0x50uLL);
    llvm::MDNode::Header::Header((uint64_t)(v22 + 20), 5uLL, a9);
    v23 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v22 + 28), (uint64_t)a1, 27, a9, (uint64_t)&v25, 5, 0, 0);
    v22[29] = 16896;
    *((_DWORD *)v22 + 18) = a4;
    *((_DWORD *)v22 + 19) = a7;
    return llvm::MDNode::storeImpl<llvm::DIObjCProperty,llvm::DenseSet<llvm::DIObjCProperty*,llvm::MDNodeInfo<llvm::DIObjCProperty>>>(v23, a9, *a1 + 1008);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIObjCProperty,llvm::DenseSet<llvm::DIObjCProperty*,llvm::MDNodeInfo<llvm::DIObjCProperty>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIImportedEntity::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  __int16 v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  llvm::MDNode *result;
  _WORD *v22;
  llvm::MDNode *v23;
  llvm::MDNode **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v16 = a2;
  v32 = *MEMORY[0x24BDAC8D0];
  if (a9)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 1032);
  LODWORD(v25) = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  LODWORD(v29) = a6;
  v30 = a7;
  v31 = a8;
  v24 = 0;
  v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(v19, (int *)&v25, (uint64_t **)&v24);
  result = 0;
  if (v20 && v24 != (llvm::MDNode **)(*(_QWORD *)(v18 + 1032) + 8 * *(unsigned int *)(v18 + 1048)))
    result = *v24;
  if (!result && a10)
  {
LABEL_7:
    v25 = a3;
    v26 = a4;
    v27 = a7;
    v28 = a5;
    v29 = a8;
    v22 = operator new(0x50uLL);
    llvm::MDNode::Header::Header((uint64_t)(v22 + 20), 5uLL, a9);
    v23 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v22 + 28), (uint64_t)a1, 28, a9, (uint64_t)&v25, 5, 0, 0);
    v22[29] = v16;
    *((_DWORD *)v22 + 18) = a6;
    return llvm::MDNode::storeImpl<llvm::DIImportedEntity,llvm::DenseSet<llvm::DIImportedEntity*,llvm::MDNodeInfo<llvm::DIImportedEntity>>>(v23, a9, *a1 + 1032);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIImportedEntity,llvm::DenseSet<llvm::DIImportedEntity*,llvm::MDNodeInfo<llvm::DIImportedEntity>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIMacro::getImpl(_QWORD *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _WORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v11 = a2;
  v25 = *MEMORY[0x24BDAC8D0];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1056);
  v22 = __PAIR64__(a3, a2);
  v23 = a4;
  v24 = a5;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v15, (int *)&v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 1056) + 8 * *(unsigned int *)(v14 + 1072)))
    result = *v21;
  if (!result && a7)
  {
LABEL_9:
    v22 = a4;
    v23 = a5;
    v19 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 8), 2uLL, a6);
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 16), (uint64_t)a1, 30, a6, (uint64_t)&v22, 2, 0, 0);
    v19[17] = v11;
    *((_DWORD *)v19 + 12) = a3;
    return llvm::MDNode::storeImpl<llvm::DIMacro,llvm::DenseSet<llvm::DIMacro*,llvm::MDNodeInfo<llvm::DIMacro>>>(v20, a6, *a1 + 1056);
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIMacro,llvm::DenseSet<llvm::DIMacro*,llvm::MDNodeInfo<llvm::DIMacro>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DIMacroFile::getImpl(_QWORD *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  _WORD *v19;
  llvm::MDNode *v20;
  llvm::MDNode **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v11 = a2;
  v25 = *MEMORY[0x24BDAC8D0];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1080);
  v22 = __PAIR64__(a3, a2);
  v23 = a4;
  v24 = a5;
  v21 = 0;
  v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(v15, (int *)&v22, (uint64_t **)&v21);
  result = 0;
  if (v16 && v21 != (llvm::MDNode **)(*(_QWORD *)(v14 + 1080) + 8 * *(unsigned int *)(v14 + 1096)))
    result = *v21;
  if (!result && a7)
  {
LABEL_9:
    v22 = a4;
    v23 = a5;
    v19 = operator new(0x38uLL);
    llvm::MDNode::Header::Header((uint64_t)(v19 + 8), 2uLL, a6);
    v20 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)(v19 + 16), (uint64_t)a1, 31, a6, (uint64_t)&v22, 2, 0, 0);
    v19[17] = v11;
    *((_DWORD *)v19 + 12) = a3;
    return llvm::MDNode::storeImpl<llvm::DIMacro,llvm::DenseSet<llvm::DIMacro*,llvm::MDNodeInfo<llvm::DIMacro>>>(v20, a6, *a1 + 1080);
  }
  return result;
}

llvm::MDNode *llvm::DIArgList::getImpl(_QWORD *a1, _BYTE *a2, uint64_t a3, unint64_t *a4, int a5)
{
  int v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  llvm::MDNode *result;
  BOOL v15;
  char *v16;
  llvm::MDNode *v17;
  llvm::MDNode *v18;
  unint64_t *v19;
  _QWORD v20[2];
  llvm::MDNode **v21;

  v5 = (int)a4;
  if ((_DWORD)a4)
  {
    v9 = 2;
LABEL_11:
    v16 = (char *)operator new(8 * v9 + 80) + 8 * v9;
    v17 = (llvm::MDNode *)(v16 + 16);
    *((_DWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFC00 | (v5 != 0) | (unint64_t)(4 * v9);
    if (v5)
      bzero(v16 - 16, 8 * v9);
    v18 = llvm::DIArgList::DIArgList(v17, (uint64_t)a1, v5, a2, a3);
    return llvm::MDNode::storeImpl<llvm::DIArgList,llvm::DenseSet<llvm::DIArgList*,llvm::MDNodeInfo<llvm::DIArgList>>>(v18, v5, *a1 + 1128, v19);
  }
  v11 = *a1;
  v12 = (uint64_t *)(*a1 + 1128);
  v20[0] = a2;
  v20[1] = a3;
  v21 = 0;
  v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIArgList>>(v12, (uint64_t)v20, (uint64_t **)&v21, a4);
  result = 0;
  if (v13)
    v15 = v21 == (llvm::MDNode **)(*(_QWORD *)(v11 + 1128) + 8 * *(unsigned int *)(v11 + 1144));
  else
    v15 = 1;
  if (!v15)
    result = *v21;
  if (!result && a5)
  {
    v9 = 0;
    goto LABEL_11;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::DIArgList,llvm::DenseSet<llvm::DIArgList*,llvm::MDNodeInfo<llvm::DIArgList>>>(llvm::MDNode *this, int a2, uint64_t a3, unint64_t *a4)
{
  llvm::MDNode *v4;
  llvm::MDNode *v6;
  _BYTE v7[31];

  v4 = this;
  v6 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v6, a4, (uint64_t)v7);
    return v6;
  }
  return v4;
}

uint64_t llvm::DIArgList::handleChangedOperand(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  llvm::Type *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::ValueAsMetadata *v12;
  llvm::Value *v13;
  uint64_t v14;

  llvm::DIArgList::untrack(a1);
  v7 = *(_BYTE *)(a1 + 1) & 0x7F;
  if ((*(_BYTE *)(a1 + 1) & 0x7F) == 0)
    llvm::MDNode::eraseFromStore((llvm::MDNode *)a1);
  v8 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = 8 * v8;
    do
    {
      if (v9 == a2)
      {
        v11 = a3;
        if (!a3)
        {
          v12 = (llvm::ValueAsMetadata *)llvm::UndefValue::get(**(llvm::UndefValue ***)(*(_QWORD *)a2 + 128), v6);
          v11 = llvm::ValueAsMetadata::get(v12, v13);
        }
        *(_QWORD *)a2 = v11;
      }
      v9 += 8;
      v10 -= 8;
    }
    while (v10);
  }
  if (!v7)
  {
    llvm::MDNode::uniquify((llvm::MDNode *)a1);
    if (v14 != a1)
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)a1);
  }
  return llvm::DIArgList::track(a1);
}

unint64_t llvm::DIArgList::untrack(unint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = 8 * v1;
    do
    {
      if (*v2)
        this = llvm::MetadataTracking::untrack((uint64_t)v2, *v2);
      ++v2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::DIArgList::track(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)(this + 16);
    v3 = this | 2;
    v4 = 8 * v1;
    do
    {
      if (*v2)
        this = llvm::MetadataTracking::track((uint64_t)v2, *v2, v3);
      ++v2;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

llvm::MDNode *llvm::DIExpression::DIExpression(llvm::MDNode *this, uint64_t a2, char a3, const void *a4, uint64_t a5)
{
  char *v8;

  *(_BYTE *)this = 6;
  *((_WORD *)this + 1) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 1) = a3 & 0x7F;
  if ((a3 & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands((uint64_t)this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (a5)
  {
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100]((_QWORD *)this + 2, (8 * a5) >> 3);
    v8 = (char *)*((_QWORD *)this + 3);
    memmove(v8, a4, 8 * a5);
    *((_QWORD *)this + 3) = &v8[8 * a5];
  }
  return this;
}

llvm::MDNode *llvm::DIArgList::DIArgList(llvm::MDNode *this, uint64_t a2, char a3, _BYTE *__src, uint64_t a5)
{
  *(_BYTE *)this = 33;
  *((_WORD *)this + 1) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 1) = a3 & 0x7F;
  if ((a3 & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands((uint64_t)this);
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_QWORD *)this + 3) = 0x400000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)this + 4, __src, &__src[8 * a5]);
  llvm::DIArgList::track((uint64_t)this);
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocation>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DILocation>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILocation>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILocation>::getHashValue(int *a1)
{
  int *v2;
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  _DWORD v7[16];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = (uint64_t *)(a1 + 2);
  v4 = (uint64_t *)(a1 + 4);
  v5 = (char *)(a1 + 6);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, a1, v2, v3, v4, v5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::Metadata *,llvm::Metadata *,BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6, uint64_t *a7, uint64_t *a8, char *a9)
{
  _DWORD *v14;
  _QWORD *v15;
  unint64_t v17;
  unint64_t v18;

  v17 = a2;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, a3, (unint64_t)a4, *a5);
  v18 = v17;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v18, v14, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>(a1, v18, v15, a4, a7, a8, a9);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, char *a7)
{
  _QWORD *v11;
  _BYTE *v12;
  unint64_t v14;
  unint64_t v15;

  v14 = a2;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v14, a3, (unint64_t)a4, *a5);
  v15 = v14;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v15, v11, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>(a1, v15, v12, a4, a7);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILocation>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)a1 != *(_DWORD *)(a2 + 4) || *(_DWORD *)(a1 + 4) != *(unsigned __int16 *)(a2 + 2))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    v4 = *(_QWORD **)(a2 - 32);
    if (v2 == *v4)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 - 24) == 2)
        goto LABEL_6;
      goto LABEL_9;
    }
    return 0;
  }
  v4 = (_QWORD *)(a2 - 16 - 8 * ((v3 >> 2) & 0xF));
  if (v2 != *v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if ((*(_QWORD *)(a2 - 16) & 0x3C0) == 0x80)
  {
LABEL_6:
    v6 = v4[1];
    goto LABEL_10;
  }
LABEL_9:
  v6 = 0;
LABEL_10:
  if (v5 != v6)
    return 0;
  return *(_BYTE *)(a1 + 24) == *(unsigned __int8 *)(a2 + 1) >> 7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::InsertIntoBucketImpl<llvm::DILocation *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17[8];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILocation>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DILocation>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILocation>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(unsigned __int16 *)(a2 + 2);
  *(_DWORD *)result = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 4) = v2;
  v3 = (_QWORD *)(a2 - 16);
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v3[-((v4 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = *v5;
  if ((*v3 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) == 2)
    {
      v6 = *(_QWORD **)(a2 - 32);
      goto LABEL_9;
    }
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  if ((*v3 & 0x3C0) != 0x80)
    goto LABEL_10;
  v6 = &v3[-((*v3 >> 2) & 0xFLL)];
LABEL_9:
  v7 = v6[1];
LABEL_11:
  *(_QWORD *)(result + 16) = v7;
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 1) >> 7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::InsertIntoBucketImpl<llvm::DILocation *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>,llvm::DILocation *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocation>,llvm::detail::DenseSetPair<llvm::DILocation *>>::LookupBucketFor<llvm::DILocation *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::GenericDINode>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::GenericDINode>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((llvm::MDNodeKeyImpl<llvm::GenericDINode>::isKeyOf(a2, v13) & 1) != 0)
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::GenericDINode>::getHashValue(uint64_t a1)
{
  int v1;
  int *v2;
  uint64_t *v3;
  int v5;
  _DWORD v6[15];
  char v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(a1 + 32);
  v2 = (int *)(a1 + 36);
  v3 = (uint64_t *)(a1 + 40);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v5);
  v5 = v1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v5, 0, v6, v7, v2, v3);
}

uint64_t llvm::MDNodeKeyImpl<llvm::GenericDINode>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  if (*(_DWORD *)(a1 + 36) == *(unsigned __int16 *)(a2 + 2)
    && ((v2 = *(_QWORD *)(a2 - 16), (v2 & 2) != 0)
      ? (v3 = *(_QWORD **)(a2 - 32))
      : (v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF))),
        *(_QWORD *)(a1 + 40) == *v3))
  {
    return llvm::MDNodeOpsKey::compareOps<llvm::GenericDINode>(a1, a2, 1u);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::MDNodeOpsKey::compareOps<llvm::GenericDINode>(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t *v6;

  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 4))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(uint64_t **)a1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(uint64_t **)(a1 + 16);
  }
  return llvm::MDNodeOpsKey::compareOps<llvm::MDOperand>(v6, v5, a2, a3);
}

uint64_t llvm::MDNodeOpsKey::compareOps<llvm::MDOperand>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  BOOL v12;

  v4 = *(_QWORD *)(a3 - 16);
  if ((v4 & 2) == 0)
  {
    if (a2 == ((v4 >> 6) & 0xF) - a4)
    {
      v5 = a3 - 16 - 8 * ((v4 >> 2) & 0xF);
      if (a2)
        goto LABEL_4;
      return 1;
    }
    return 0;
  }
  if (a2 != *(_DWORD *)(a3 - 24) - a4)
    return 0;
  v5 = *(_QWORD *)(a3 - 32);
  if (!a2)
    return 1;
LABEL_4:
  v6 = (uint64_t *)(v5 + 8 * a4);
  v7 = 8 * a2 - 8;
  do
  {
    v9 = *a1++;
    v8 = v9;
    v10 = *v6++;
    v12 = v8 == v10;
    v11 = v8 == v10;
    v12 = !v12 || v7 == 0;
    v7 -= 8;
  }
  while (!v12);
  return v11;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::InsertIntoBucketImpl<llvm::GenericDINode *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _BYTE v17[48];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::GenericDINode>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::GenericDINode>::getHashValue((uint64_t)v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::GenericDINode>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 - 32);
    v5 = *(unsigned int *)(a2 - 24);
  }
  else
  {
    v4 = v2 - 8 * ((v3 >> 2) & 0xF);
    v5 = (v3 >> 6) & 0xF;
  }
  *(_QWORD *)(result + 16) = v4 + 8;
  *(_QWORD *)(result + 24) = (8 * v5 - 8) >> 3;
  v6 = *(unsigned __int16 *)(a2 + 2);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(result + 36) = v6;
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = (_QWORD *)(v2 - 8 * ((v7 >> 2) & 0xF));
  *(_QWORD *)(result + 40) = *v8;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::InsertIntoBucketImpl<llvm::GenericDINode *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>,llvm::GenericDINode *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::GenericDINode>,llvm::detail::DenseSetPair<llvm::GenericDINode *>>::LookupBucketFor<llvm::GenericDINode *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubrange>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((llvm::MDNodeKeyImpl<llvm::DISubrange>::isKeyOf((uint64_t)a2, v13) & 1) != 0)
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[8];
  char v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (*a1 && *(_BYTE *)v2 == 1)
  {
    v3 = *(_QWORD *)(v2 + 128);
    v4 = *(_DWORD *)(v3 + 32);
    if (v4 > 0x40)
      v5 = **(_QWORD **)(v3 + 24);
    else
      v5 = (uint64_t)(*(_QWORD *)(v3 + 24) << -(char)v4) >> -(char)v4;
    v7 = v5;
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, v8, v9, &v7, a1 + 1, a1 + 2, a1 + 3);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, v8, v9, a1, a1 + 1, a1 + 2, a1 + 3);
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DISubrange>::isKeyOf(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;

  v2 = *(_BYTE **)a1;
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
    v5 = *(uint64_t **)(a2 - 32);
  else
    v5 = (uint64_t *)(v3 - 8 * ((v4 >> 2) & 0xF));
  v6 = *v5;
  if (v2 != (_BYTE *)v6)
  {
    if (v2)
    {
      if (*v2 == 1)
        v7 = *(_BYTE **)a1;
      else
        v7 = 0;
      if (!v6)
        return 0;
    }
    else
    {
      v7 = 0;
      if (!v6)
        return 0;
    }
    v8 = 0;
    if (!v7 || *(_BYTE *)v6 != 1)
      return v8;
    v9 = *((_QWORD *)v7 + 16);
    v10 = *(_QWORD *)(v6 + 128);
    v11 = *(_DWORD *)(v9 + 32);
    if (v11 > 0x40)
      v12 = **(_QWORD **)(v9 + 24);
    else
      v12 = (uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v11) >> -(char)v11;
    v13 = *(_DWORD *)(v10 + 32);
    if (v13 > 0x40)
      v14 = **(_QWORD **)(v10 + 24);
    else
      v14 = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v13) >> -(char)v13;
    if (v12 != v14)
      return 0;
  }
  v15 = *(_BYTE **)(a1 + 8);
  if ((v4 & 2) != 0)
    v16 = *(_QWORD *)(a2 - 32);
  else
    v16 = v3 - 8 * ((v4 >> 2) & 0xF);
  v17 = *(_QWORD *)(v16 + 8);
  if (v15 != (_BYTE *)v17)
  {
    if (v15)
    {
      if (*v15 == 1)
        v18 = *(_QWORD *)(a1 + 8);
      else
        v18 = 0;
      if (!v17)
        return 0;
    }
    else
    {
      v18 = 0;
      if (!v17)
        return 0;
    }
    v8 = 0;
    if (!v18 || *(_BYTE *)v17 != 1)
      return v8;
    v19 = *(_QWORD *)(v18 + 128);
    v20 = *(_QWORD *)(v17 + 128);
    v21 = *(_DWORD *)(v19 + 32);
    if (v21 > 0x40)
      v22 = **(_QWORD **)(v19 + 24);
    else
      v22 = (uint64_t)(*(_QWORD *)(v19 + 24) << -(char)v21) >> -(char)v21;
    v23 = *(_DWORD *)(v20 + 32);
    if (v23 > 0x40)
      v24 = **(_QWORD **)(v20 + 24);
    else
      v24 = (uint64_t)(*(_QWORD *)(v20 + 24) << -(char)v23) >> -(char)v23;
    if (v22 != v24)
      return 0;
  }
  v25 = *(_BYTE **)(a1 + 16);
  if ((v4 & 2) != 0)
    v26 = *(_QWORD *)(a2 - 32);
  else
    v26 = v3 - 8 * ((v4 >> 2) & 0xF);
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 == (_BYTE *)v27)
  {
LABEL_61:
    v35 = *(_BYTE **)(a1 + 24);
    if ((v4 & 2) != 0)
      v36 = *(_QWORD *)(a2 - 32);
    else
      v36 = v3 - 8 * ((v4 >> 2) & 0xF);
    v37 = *(_QWORD *)(v36 + 24);
    if (v35 == (_BYTE *)v37)
      return 1;
    if (v35)
    {
      if (*v35 == 1)
        v38 = *(_QWORD *)(a1 + 24);
      else
        v38 = 0;
      if (!v37)
        return 0;
    }
    else
    {
      v38 = 0;
      if (!v37)
        return 0;
    }
    if (v38 && *(_BYTE *)v37 == 1)
    {
      v39 = *(_QWORD *)(v38 + 128);
      v40 = *(_QWORD *)(v37 + 128);
      v41 = *(_DWORD *)(v39 + 32);
      v42 = v41 > 0x40 ? **(_QWORD **)(v39 + 24) : (uint64_t)(*(_QWORD *)(v39 + 24) << -(char)v41) >> -(char)v41;
      v43 = *(_DWORD *)(v40 + 32);
      v44 = v43 > 0x40 ? **(_QWORD **)(v40 + 24) : (uint64_t)(*(_QWORD *)(v40 + 24) << -(char)v43) >> -(char)v43;
      if (v42 == v44)
        return 1;
    }
    return 0;
  }
  if (v25)
  {
    if (*v25 == 1)
      v28 = *(_QWORD *)(a1 + 16);
    else
      v28 = 0;
    if (!v27)
      return 0;
  }
  else
  {
    v28 = 0;
    if (!v27)
      return 0;
  }
  v8 = 0;
  if (v28 && *(_BYTE *)v27 == 1)
  {
    v29 = *(_QWORD *)(v28 + 128);
    v30 = *(_QWORD *)(v27 + 128);
    v31 = *(_DWORD *)(v29 + 32);
    if (v31 > 0x40)
      v32 = **(_QWORD **)(v29 + 24);
    else
      v32 = (uint64_t)(*(_QWORD *)(v29 + 24) << -(char)v31) >> -(char)v31;
    v33 = *(_DWORD *)(v30 + 32);
    if (v33 > 0x40)
      v34 = **(_QWORD **)(v30 + 24);
    else
      v34 = (uint64_t)(*(_QWORD *)(v30 + 24) << -(char)v33) >> -(char)v33;
    if (v32 != v34)
      return 0;
    goto LABEL_61;
  }
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucketImpl<llvm::DISubrange *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[4];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DISubrange>::MDNodeKeyImpl(v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

_QWORD *llvm::MDNodeKeyImpl<llvm::DISubrange>::MDNodeKeyImpl(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  result[1] = v5[1];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  result[2] = v6[2];
  if ((*v2 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  result[3] = v7[3];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::InsertIntoBucketImpl<llvm::DISubrange *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>,llvm::DISubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubrange>,llvm::detail::DenseSetPair<llvm::DISubrange *>>::LookupBucketFor<llvm::DISubrange *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>,llvm::DIGenericSubrange *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGenericSubrange>,llvm::detail::DenseSetPair<llvm::DIGenericSubrange *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DISubrange>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>::isKeyOf(a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGenericSubrange>::isKeyOf(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD **)(a2 - 32);
  else
    v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  return *a1 == *v3 && a1[1] == v3[1] && a1[2] == v3[2] && a1[3] == v3[3];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIEnumerator>>(uint64_t *a1, llvm::hashing::detail::hash_state **a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  int i;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t result;
  _QWORD v18[8];
  unint64_t v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = (uint64_t *)(a2 + 2);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v18);
    v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::APInt,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, v18, v19, a2, v7);
    v9 = 0;
    v10 = v4 - 1;
    v11 = v10 & v8;
    for (i = 1; ; ++i)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIEnumerator>::isKeyOf((uint64_t)a2, v14))
        {
          result = 1;
          goto LABEL_18;
        }
        v14 = *v13;
      }
      if (v14 == -4096)
        break;
      if (v9)
        v15 = 0;
      else
        v15 = v14 == -8192;
      if (v15)
        v9 = (uint64_t *)(v6 + 8 * v11);
      v16 = v11 + i;
      v11 = v16 & v10;
    }
    result = 0;
    if (v9)
      v13 = v9;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::APInt,llvm::MDString *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, const llvm::APInt *a2, _QWORD *a3, unint64_t *a4, llvm::hashing::detail::hash_state **this, uint64_t *a6)
{
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v14;
  unint64_t v15;

  v14 = (unint64_t)a2;
  v10 = llvm::hash_value(this, a2, (uint64_t)a3, a4);
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v14, a3, (unint64_t)a4, v10);
  v15 = v14;
  v12 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v15, v11, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v15, v12, (char *)a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIEnumerator>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 24))
    return 0;
  if (v2 > 0x40)
  {
    if (memcmp(*(const void **)a1, *(const void **)(a2 + 16), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
      return 0;
  }
  else if (*(_QWORD *)a1 != *(_QWORD *)(a2 + 16))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 24) != (*(_DWORD *)(a2 + 4) != 0))
    return 0;
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = (_QWORD *)(a2 - 16 - 8 * ((v5 >> 2) & 0xF));
  return *(_QWORD *)(a1 + 16) == *v6;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::InsertIntoBucketImpl<llvm::DIEnumerator *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeInfo<llvm::DIEnumerator>::getHashValue(*a2);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DIEnumerator>::getHashValue(uint64_t a1)
{
  unint64_t v1;
  llvm::hashing::detail::hash_state *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD v6[8];
  unint64_t v7[9];

  v7[8] = *MEMORY[0x24BDAC8D0];
  llvm::MDNodeKeyImpl<llvm::DIEnumerator>::MDNodeKeyImpl((uint64_t)&v3, a1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  v1 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::APInt,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, &v3, &v5);
  if (v4 >= 0x41 && v3)
    MEMORY[0x24BD1B380](v3, 0x1000C8000313F17);
  return v1;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIEnumerator>::MDNodeKeyImpl(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  unint64_t v6;
  _QWORD *v7;

  v4 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 > 0x40)
  {
    v5 = (void *)operator new[]();
    *(_QWORD *)a1 = v5;
    memcpy(v5, *(const void **)(a2 + 16), (((unint64_t)*(unsigned int *)(a1 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 16);
  }
  v6 = *(_QWORD *)(a2 - 16);
  if ((v6 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = (_QWORD *)(a2 - 16 - 8 * ((v6 >> 2) & 0xF));
  *(_QWORD *)(a1 + 16) = *v7;
  *(_BYTE *)(a1 + 24) = *(_DWORD *)(a2 + 4) != 0;
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::InsertIntoBucketImpl<llvm::DIEnumerator *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>,llvm::DIEnumerator *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIEnumerator>,llvm::detail::DenseSetPair<llvm::DIEnumerator *>>::LookupBucketFor<llvm::DIEnumerator *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIBasicType>>(uint64_t *a1, _DWORD *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIBasicType>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIBasicType>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIBasicType>::getHashValue(_DWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  int v6;
  _QWORD v7[7];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(a1 + 2);
  v3 = (uint64_t *)(a1 + 4);
  v4 = a1 + 6;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
  v6 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,unsigned long long,unsigned int,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, v2, v3, v4, a1 + 7);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,unsigned long long,unsigned int,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, int *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIBasicType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && ((v2 = *(_QWORD *)(a2 - 16), (v2 & 2) != 0)
      ? (v3 = *(_QWORD *)(a2 - 32))
      : (v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF)),
        *(_QWORD *)(a1 + 8) == *(_QWORD *)(v3 + 16)
     && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 24)
     && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 40)
     && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 44)))
  {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 20);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucketImpl<llvm::DIBasicType *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  int HashValue;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v21 = *(unsigned __int16 *)(*a2 + 2);
    v8 = *(_QWORD *)(v7 - 16);
    if ((v8 & 2) != 0)
      v9 = *(_QWORD *)(v7 - 32);
    else
      v9 = v7 - 16 - 8 * ((v8 >> 2) & 0xF);
    v12 = *(_QWORD *)(v7 + 24);
    v22 = *(_QWORD *)(v9 + 16);
    v23 = v12;
    v24 = *(_QWORD *)(v7 + 40);
    v25 = *(_DWORD *)(v7 + 20);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIBasicType>::getHashValue(&v21);
    v14 = v4 - 1;
    v15 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v15);
    v16 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v16 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -8192;
        if (v19)
          v17 = v10;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        v10 = (_QWORD *)(v6 + 8 * (v20 & v14));
        v16 = *v10;
        if (*a2 == *v10)
          goto LABEL_8;
      }
      result = 0;
      if (v17)
        v10 = v17;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::InsertIntoBucketImpl<llvm::DIBasicType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>,llvm::DIBasicType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIBasicType>,llvm::detail::DenseSetPair<llvm::DIBasicType *>>::LookupBucketFor<llvm::DIBasicType *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIStringType>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIStringType>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIStringType>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIStringType>::getHashValue(int *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  _DWORD v6[16];
  char v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(a1 + 2);
  v3 = (uint64_t *)(a1 + 4);
  v4 = a1 + 13;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, a1, v2, v3, v4);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIStringType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && ((v2 = *(_QWORD *)(a2 - 16), (v2 & 2) != 0)
      ? (v3 = *(_QWORD **)(a2 - 32))
      : (v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF))),
        *(_QWORD *)(a1 + 8) == v3[2]
     && *(_QWORD *)(a1 + 16) == v3[3]
     && *(_QWORD *)(a1 + 24) == v3[4]
     && *(_QWORD *)(a1 + 32) == v3[5]
     && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 24)
     && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 40)))
  {
    return *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 44);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::InsertIntoBucketImpl<llvm::DIStringType *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17[14];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIStringType>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIStringType>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

double llvm::MDNodeKeyImpl<llvm::DIStringType>::MDNodeKeyImpl(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  double result;

  *(_DWORD *)a1 = *(unsigned __int16 *)(a2 + 2);
  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)(a1 + 8) = v4[2];
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(a1 + 16) = v5[3];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(a1 + 24) = v6[4];
  if ((*v2 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7[5];
  *(_QWORD *)(a1 + 40) = v8;
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 48) = result;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::InsertIntoBucketImpl<llvm::DIStringType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>,llvm::DIStringType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIStringType>,llvm::detail::DenseSetPair<llvm::DIStringType *>>::LookupBucketFor<llvm::DIStringType *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIDerivedType>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;
  _BOOL4 isEqual;
  _BOOL4 v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue(a2) & (v4 - 1);
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        v13 = v11;
        if (*v9 == -8192 && v11 == 0)
          v13 = v9;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        isEqual = llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(a2, *v9);
        v11 = v13;
        v16 = isEqual;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DIDerivedType>::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isODRMember(*(_DWORD *)a1, *(_BYTE **)(a1 + 32), *(_QWORD *)(a1 + 8), a2))
  {
    return 1;
  }
  return llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(a1, a2);
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue(uint64_t a1)
{
  uint64_t *v2;
  _BYTE *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[8];
  char v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a1 == 13
    && (v2 = (uint64_t *)(a1 + 8), *(_QWORD *)(a1 + 8))
    && (v4 = (uint64_t *)(a1 + 32), (v3 = *(_BYTE **)(a1 + 32)) != 0)
    && *v3 == 13
    && ((v5 = *((_QWORD *)v3 - 2), (v5 & 2) != 0)
      ? (v6 = *((_QWORD *)v3 - 4))
      : (v6 = (uint64_t)&v3[-8 * ((v5 >> 2) & 0xF) - 16]),
        *(_QWORD *)(v6 + 56)))
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, v8, v9, v2, v4);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v8);
    LODWORD(v8[0]) = *(_DWORD *)a1;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v8, 0, (_QWORD *)((char *)v8 + 4), v9, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (int *)(a1 + 24), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 40), (int *)(a1 + 84));
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, int *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::MDString *,llvm::Metadata *,unsigned int>(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIDerivedType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned __int16 *)(a2 + 2);
  if (*(_DWORD *)a1 != v2)
    return 0;
  v3 = a2 - 16;
  v4 = *(_QWORD *)(a2 - 16);
  v5 = (v4 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(v5 + 16))
    return 0;
  v6 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((v4 & 2) != 0)
      v7 = *(uint64_t **)(a2 - 32);
    else
      v7 = (uint64_t *)(v3 - 8 * ((v4 >> 2) & 0xF));
    v6 = *v7;
  }
  if (*(_QWORD *)(a1 + 16) != v6 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 16))
    return 0;
  v8 = (v4 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(v8 + 8)
    || *(_QWORD *)(a1 + 40) != *(_QWORD *)(v8 + 24)
    || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 40)
    || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 32))
  {
    return 0;
  }
  v9 = *(_QWORD *)(a2 + 44);
  v10 = v9 & 0xFF00000000;
  if (*(_BYTE *)(a1 + 72) && v10)
  {
    if (*(_DWORD *)(a1 + 68) != (_DWORD)v9)
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 72) != 0) != (v10 != 0))
  {
    return 0;
  }
  if (v2 != 17152)
  {
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_31;
    return 0;
  }
  if (!*(_BYTE *)(a1 + 80) || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 4))
    return 0;
LABEL_31:
  if (*(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 20))
    return 0;
  v11 = (v4 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v4 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(v11 + 32))
    return 0;
  return *(_QWORD *)(a1 + 96) == *(_QWORD *)(v11 + 40);
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isODRMember(int a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = 0;
  if (a2 && a1 == 13 && a3)
  {
    if (*a2 == 13
      && ((v6 = *((_QWORD *)a2 - 2), (v6 & 2) != 0)
        ? (v7 = *((_QWORD *)a2 - 4))
        : (v7 = (uint64_t)&a2[-8 * ((v6 >> 2) & 0xF) - 16]),
          *(_QWORD *)(v7 + 56)
       && *(_WORD *)(a4 + 2) == 13
       && ((v8 = *(_QWORD *)(a4 - 16), (v8 & 2) != 0)
         ? (v9 = *(_QWORD *)(a4 - 32))
         : (v9 = a4 - 16 - 8 * ((v8 >> 2) & 0xF)),
           *(_QWORD *)(v9 + 16) == a3)))
    {
      return *(_QWORD *)(v9 + 8) == (_QWORD)a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isSubsetEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;

  v3 = a1 - 16;
  v4 = *(_QWORD *)(a1 - 16);
  v5 = *(unsigned __int16 *)(a1 + 2);
  if ((v4 & 2) != 0)
    v6 = *(_QWORD *)(a1 - 32);
  else
    v6 = v3 - 8 * ((v4 >> 2) & 0xF);
  return llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isODRMember(v5, *(_BYTE **)(v6 + 8), *(_QWORD *)(v6 + 16), a2);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::InsertIntoBucketImpl<llvm::DIDerivedType *>(a1, (uint64_t)a2, a2, v10);
    v7 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  int v21;
  _BYTE v22[104];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl((uint64_t)v22, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIDerivedType>::getHashValue((uint64_t)v22);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (uint64_t *)(v6 + 8 * v9);
    v11 = *a2;
    v12 = *v10;
    if (*a2 == *v10)
    {
LABEL_3:
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (1)
      {
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v21 = v16;
          v20 = v15;
          v18 = v9;
          v19 = v8;
          if (llvm::MDNodeSubsetEqualImpl<llvm::DIDerivedType>::isSubsetEqual(v11, v12))
            goto LABEL_3;
          v12 = *v10;
          v9 = v18;
          v8 = v19;
          v15 = v20;
          v16 = v21;
        }
        if (v12 == -4096)
          break;
        if (v12 == -8192 && v15 == 0)
          v15 = v10;
        v17 = v9 + v16++;
        v9 = v17 & v8;
        v10 = (uint64_t *)(v6 + 8 * (v17 & v8));
        v11 = *a2;
        v12 = *v10;
        v13 = 1;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      v13 = 0;
      if (v15)
        v10 = v15;
    }
  }
  else
  {
    v10 = 0;
    v13 = 0;
  }
LABEL_5:
  *a3 = v10;
  return v13;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIDerivedType>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = v4[2];
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((*v2 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    v5 = *v6;
  }
  *(_QWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = &v2[-((v7 >> 2) & 0xF)];
  *(_QWORD *)(result + 32) = v8[1];
  if ((*v2 & 2) != 0)
    v9 = *(_QWORD **)(a2 - 32);
  else
    v9 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 40) = v9[3];
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 68) = *(_QWORD *)(a2 + 44);
  if (*(_WORD *)(a2 + 2) == 17152)
    v10 = *(unsigned int *)(a2 + 4) | 0x100000000;
  else
    v10 = 0;
  *(_QWORD *)(result + 76) = v10;
  *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a2 - 16);
  if ((v11 & 2) != 0)
    v12 = *(_QWORD **)(a2 - 32);
  else
    v12 = &v2[-((v11 >> 2) & 0xF)];
  *(_QWORD *)(result + 88) = v12[4];
  if ((*v2 & 2) != 0)
    v13 = *(_QWORD **)(a2 - 32);
  else
    v13 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 96) = v13[5];
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::InsertIntoBucketImpl<llvm::DIDerivedType *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>,llvm::DIDerivedType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIDerivedType>,llvm::detail::DenseSetPair<llvm::DIDerivedType *>>::LookupBucketFor<llvm::DIDerivedType *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICompositeType>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DICompositeType>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DICompositeType>::isKeyOf(a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DICompositeType>::getHashValue(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD v10[8];
  char v11[64];
  uint64_t v12;

  v1 = (uint64_t *)(a1 + 8);
  v2 = (uint64_t *)(a1 + 16);
  v3 = (int *)(a1 + 24);
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(a1 + 40);
  v5 = (uint64_t *)(a1 + 32);
  v6 = (uint64_t *)(a1 + 72);
  v7 = (uint64_t *)(a1 + 96);
  v8 = (uint64_t *)(a1 + 152);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, v1, v2, v3, v4, v5, v6, v7, v8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v20;
  unint64_t v21;

  v20 = a2;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  v21 = v20;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v17, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL llvm::MDNodeKeyImpl<llvm::DICompositeType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (*(_DWORD *)a1 != *(unsigned __int16 *)(a2 + 2))
    return 0;
  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  v4 = (v3 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(v4 + 16))
    return 0;
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((v3 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    v5 = *v6;
  }
  if (*(_QWORD *)(a1 + 16) == v5
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 16)
    && ((v3 & 2) != 0 ? (v7 = *(_QWORD *)(a2 - 32)) : (v7 = v2 - 8 * ((v3 >> 2) & 0xF)),
        *(_QWORD *)(a1 + 32) == *(_QWORD *)(v7 + 8)
     && *(_QWORD *)(a1 + 40) == *(_QWORD *)(v7 + 24)
     && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 24)
     && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 40)
     && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 32)
     && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 20)
     && ((v3 & 2) != 0 ? (v8 = *(_QWORD *)(a2 - 32)) : (v8 = v2 - 8 * ((v3 >> 2) & 0xF)),
         *(_QWORD *)(a1 + 72) == *(_QWORD *)(v8 + 32)
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 44)
      && ((v3 & 2) != 0 ? (v9 = *(_QWORD **)(a2 - 32)) : (v9 = (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF))),
          *(_QWORD *)(a1 + 88) == v9[5]
       && *(_QWORD *)(a1 + 96) == v9[6]
       && *(_QWORD *)(a1 + 104) == v9[7]
       && *(_QWORD *)(a1 + 112) == v9[8]
       && *(_QWORD *)(a1 + 120) == v9[9]
       && *(_QWORD *)(a1 + 128) == v9[10]
       && *(_QWORD *)(a1 + 136) == v9[11]
       && *(_QWORD *)(a1 + 144) == v9[12]))))
  {
    return *(_QWORD *)(a1 + 152) == v9[13];
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::DICompositeType *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _BYTE v17[160];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DICompositeType>::getHashValue((uint64_t)v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = v4[2];
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((*v2 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    v5 = *v6;
  }
  *(_QWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = &v2[-((v7 >> 2) & 0xF)];
  *(_QWORD *)(result + 32) = v8[1];
  if ((*v2 & 2) != 0)
    v9 = *(_QWORD **)(a2 - 32);
  else
    v9 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 40) = v9[3];
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 68) = v10;
  v11 = *(_QWORD *)(a2 - 16);
  if ((v11 & 2) != 0)
    v12 = *(_QWORD **)(a2 - 32);
  else
    v12 = &v2[-((v11 >> 2) & 0xF)];
  *(_QWORD *)(result + 72) = v12[4];
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 44);
  v13 = *(_QWORD *)(a2 - 16);
  if ((v13 & 2) != 0)
    v14 = *(_QWORD **)(a2 - 32);
  else
    v14 = &v2[-((v13 >> 2) & 0xF)];
  *(_QWORD *)(result + 88) = v14[5];
  if ((*v2 & 2) != 0)
    v15 = *(_QWORD **)(a2 - 32);
  else
    v15 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 96) = v15[6];
  if ((*v2 & 2) != 0)
    v16 = *(_QWORD **)(a2 - 32);
  else
    v16 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 104) = v16[7];
  if ((*v2 & 2) != 0)
    v17 = *(_QWORD **)(a2 - 32);
  else
    v17 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 112) = v17[8];
  if ((*v2 & 2) != 0)
    v18 = *(_QWORD **)(a2 - 32);
  else
    v18 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 120) = v18[9];
  if ((*v2 & 2) != 0)
    v19 = *(_QWORD **)(a2 - 32);
  else
    v19 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 128) = v19[10];
  if ((*v2 & 2) != 0)
    v20 = *(_QWORD **)(a2 - 32);
  else
    v20 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 136) = v20[11];
  if ((*v2 & 2) != 0)
    v21 = *(_QWORD **)(a2 - 32);
  else
    v21 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 144) = v21[12];
  if ((*v2 & 2) != 0)
    v22 = *(_QWORD **)(a2 - 32);
  else
    v22 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 152) = v22[13];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::InsertIntoBucketImpl<llvm::DICompositeType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>,llvm::DICompositeType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICompositeType>,llvm::detail::DenseSetPair<llvm::DICompositeType *>>::LookupBucketFor<llvm::DICompositeType *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubroutineType>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DISubroutineType>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DISubroutineType>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubroutineType>::getHashValue(int *a1)
{
  char *v2;
  int v4;
  _BYTE v5[60];
  char v6[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)(a1 + 1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v4);
  v4 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v4, 0, v5, v6, v2, (uint64_t *)a1 + 1);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, uint64_t *a6)
{
  _BYTE *v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;

  v12 = a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  v13 = v12;
  v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DISubroutineType>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)a1 != *(_DWORD *)(a2 + 20) || *(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 44))
    return 0;
  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD *)(a2 - 32);
  else
    v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF);
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v3 + 24);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::InsertIntoBucketImpl<llvm::DISubroutineType *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeInfo<llvm::DISubroutineType>::getHashValue(*a2);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DISubroutineType>::getHashValue(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  int v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 - 16);
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v1 & 2) != 0)
    v2 = *(_QWORD *)(a1 - 32);
  else
    v2 = a1 - 16 - 8 * ((v1 >> 2) & 0xF);
  v6 = *(_QWORD *)(v2 + 24);
  return llvm::MDNodeKeyImpl<llvm::DISubroutineType>::getHashValue(&v4);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::InsertIntoBucketImpl<llvm::DISubroutineType *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>,llvm::DISubroutineType *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubroutineType>,llvm::detail::DenseSetPair<llvm::DISubroutineType *>>::LookupBucketFor<llvm::DISubroutineType *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIFile>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIFile>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIFile>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIFile>::getHashValue(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v8[7];
  char v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a1 + 32);
  if (*((_BYTE *)a1 + 32))
  {
    v2 = *((_DWORD *)a1 + 4);
    v3 = a1[3];
  }
  else
  {
    v3 = 0;
  }
  v6 = v2;
  v5 = v3;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v7);
  v7 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,int,llvm::MDString *,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v7, 0, v8, v9, a1 + 1, &v6, &v5, a1 + 5);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIFile>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD **)(a2 - 32);
  else
    v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  if (*(_QWORD *)a1 != *v3 || *(_QWORD *)(a1 + 8) != v3[1])
    return 0;
  if (*(_BYTE *)(a2 + 32) && *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
      return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
    return 0;
  }
  if ((*(_BYTE *)(a2 + 32) != 0) != (*(_BYTE *)(a1 + 32) != 0))
    return 0;
  return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, __n128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __n128 **v7;
  char v8;
  uint64_t v9;
  __n128 **v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::InsertIntoBucketImpl<llvm::DIFile *>(a1, (uint64_t)a2, a2, v10);
    v7 = (__n128 **)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>(uint64_t *a1, __n128 **a2, __n128 ***a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  __n128 **v10;
  __n128 *v11;
  uint64_t result;
  __n128 **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  __n128 v17[3];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIFile>::MDNodeKeyImpl(v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIFile>::getHashValue((uint64_t *)v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (__n128 **)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != (__n128 *)-4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == (__n128 *)-8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (__n128 **)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

__n128 llvm::MDNodeKeyImpl<llvm::DIFile>::MDNodeKeyImpl(__n128 *a1, __n128 *a2)
{
  __n128 *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  __n128 result;

  v2 = a2 - 1;
  v3 = a2[-1].n128_u64[0];
  if ((v3 & 2) != 0)
    v4 = (unint64_t *)a2[-2].n128_u64[0];
  else
    v4 = &v2->n128_u64[-((v3 >> 2) & 0xF)];
  a1->n128_u64[0] = *v4;
  if ((v2->n128_u64[0] & 2) != 0)
    v5 = (unint64_t *)a2[-2].n128_u64[0];
  else
    v5 = &v2->n128_u64[-((v2->n128_u64[0] >> 2) & 0xF)];
  a1->n128_u64[1] = v5[1];
  result = a2[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[1] = result;
  a1[2].n128_u64[1] = a2[2].n128_u64[1];
  return result;
}

__n128 **llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::InsertIntoBucketImpl<llvm::DIFile *>(uint64_t a1, uint64_t a2, __n128 **a3, __n128 **a4)
{
  int v6;
  unsigned int v7;
  __n128 **v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != (__n128 *)-4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  __n128 **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(__n128 ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::moveFromOldBuckets(uint64_t result, __n128 **a2, __n128 **a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 **v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (((unint64_t)*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>,llvm::DIFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIFile>,llvm::detail::DenseSetPair<llvm::DIFile *>>::LookupBucketFor<llvm::DIFile *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DISubprogram>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;
  _BOOL4 isEqual;
  _BOOL4 v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue(a2) & (v4 - 1);
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (llvm::MDNodeInfo<llvm::DISubprogram>::isEqual(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        v13 = v11;
        if (*v9 == -8192 && v11 == 0)
          v13 = v9;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        isEqual = llvm::MDNodeInfo<llvm::DISubprogram>::isEqual(a2, *v9);
        v11 = v13;
        v16 = isEqual;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DISubprogram>::isEqual(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember((*(_DWORD *)(a1 + 76) >> 3) & 1, *(_BYTE **)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 88), a2))
  {
    return 1;
  }
  return llvm::MDNodeKeyImpl<llvm::DISubprogram>::isKeyOf(a1, a2);
}

unint64_t llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue(uint64_t a1)
{
  _BYTE *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[7];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 76) & 8) == 0
    && *(_QWORD *)(a1 + 16)
    && (v2 = *(_BYTE **)a1) != 0
    && *v2 == 13
    && ((v3 = *((_QWORD *)v2 - 2), (v3 & 2) != 0)
      ? (v4 = *((_QWORD *)v2 - 4))
      : (v4 = (uint64_t)&v2[-8 * ((v3 >> 2) & 0xF) - 16]),
        *(_QWORD *)(v4 + 56)))
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, &v6, v8, (uint64_t *)(a1 + 16), (uint64_t *)a1);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
    v6 = *(_QWORD *)(a1 + 8);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DISubprogram>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a2 - 16;
  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = (_QWORD *)(v3 - 8 * ((v2 >> 2) & 0xF));
  if (*(_QWORD *)a1 != v4[1] || *(_QWORD *)(a1 + 8) != v4[2] || *(_QWORD *)(a1 + 16) != v4[3])
    return 0;
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((v2 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = (uint64_t *)(v3 - 8 * ((v2 >> 2) & 0xF));
    v5 = *v6;
  }
  if (*(_QWORD *)(a1 + 24) != v5 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 16))
    return 0;
  v7 = (v2 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v3 - 8 * ((v2 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(v7 + 32) || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 20))
    return 0;
  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 9u)
    {
      v8 = *(_QWORD *)(a2 - 32);
      goto LABEL_24;
    }
LABEL_25:
    v9 = 0;
    goto LABEL_26;
  }
  if ((*(_QWORD *)(a2 - 16) & 0x3C0uLL) <= 0x200)
    goto LABEL_25;
  v8 = v3 - 8 * ((v2 >> 2) & 0xF);
LABEL_24:
  v9 = *(_QWORD *)(v8 + 64);
LABEL_26:
  if (*(_QWORD *)(a1 + 56) != v9
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 80);
  if ((v2 & 2) != 0)
  {
    v11 = *(_QWORD **)(a2 - 32);
    if (v10 != v11[5])
      return 0;
    v14 = *(_QWORD *)(a1 + 88);
    v15 = *(_DWORD *)(a2 - 24);
    if (v15 <= 9)
    {
      if (v14)
        return 0;
    }
    else if (v14 != v11[9])
    {
      return 0;
    }
    if (*(_QWORD *)(a1 + 96) != v11[6] || *(_QWORD *)(a1 + 104) != v11[7])
      return 0;
    v18 = *(_QWORD *)(a1 + 112);
    if (v15 <= 0xA)
    {
      if (v18)
        return 0;
      v19 = *(_QWORD *)(a1 + 120);
    }
    else
    {
      if (v18 != v11[10])
        return 0;
      v19 = *(_QWORD *)(a1 + 120);
      if (v15 > 0xB)
      {
        if (v19 == v11[11])
        {
          v20 = *(_QWORD *)(a1 + 128);
          if (v15 >= 0xD)
          {
LABEL_66:
            v21 = v11[12];
            return v20 == v21;
          }
          goto LABEL_55;
        }
        return 0;
      }
    }
    if (!v19)
    {
      v21 = 0;
      v20 = *(_QWORD *)(a1 + 128);
      return v20 == v21;
    }
    return 0;
  }
  v11 = (_QWORD *)(v3 - 8 * ((v2 >> 2) & 0xF));
  if (v10 != v11[5])
    return 0;
  v12 = *(_QWORD *)(a1 + 88);
  if ((*(_QWORD *)(a2 - 16) & 0x380uLL) <= 0x240)
  {
    if (v12)
      return 0;
  }
  else if (v12 != v11[9])
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 96) != v11[6] || *(_QWORD *)(a1 + 104) != v11[7])
    return 0;
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a2 - 16) & 0x3C0;
  if (v17 <= 0x280)
  {
    if (v16)
      return 0;
  }
  else if (v16 != v11[10])
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 120);
  if ((~(_WORD)v2 & 0x300) != 0)
  {
    if (!v22)
      goto LABEL_65;
    return 0;
  }
  if (v22 != v11[11])
    return 0;
LABEL_65:
  v20 = *(_QWORD *)(a1 + 128);
  if (v17 > 0x300)
    goto LABEL_66;
LABEL_55:
  v21 = 0;
  return v20 == v21;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember(int a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = 0;
  if (a2 && !a1 && a3)
  {
    if (*a2 != 13)
      return 0;
    v6 = *((_QWORD *)a2 - 2);
    if ((v6 & 2) != 0)
      v7 = *((_QWORD *)a2 - 4);
    else
      v7 = (uint64_t)&a2[-8 * ((v6 >> 2) & 0xF) - 16];
    v5 = *(_QWORD *)(v7 + 56);
    if (v5)
    {
      if (!((*(_BYTE *)(a5 + 36) & 8) >> 3))
      {
        v8 = *(_QWORD *)(a5 - 16);
        if ((v8 & 2) != 0)
        {
          v9 = *(_QWORD **)(a5 - 32);
          if ((_BYTE *)v9[1] == a2 && v9[3] == a3)
          {
            if (*(_DWORD *)(a5 - 24) >= 0xAu)
              goto LABEL_14;
            goto LABEL_20;
          }
        }
        else
        {
          v9 = (_QWORD *)(a5 - 16 - 8 * ((v8 >> 2) & 0xF));
          if ((_BYTE *)v9[1] == a2 && v9[3] == a3)
          {
            if ((*(_QWORD *)(a5 - 16) & 0x380uLL) > 0x240)
            {
LABEL_14:
              v10 = v9[9];
              return v10 == a4;
            }
LABEL_20:
            v10 = 0;
            return v10 == a4;
          }
        }
      }
      return 0;
    }
  }
  return v5;
}

BOOL llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 - 16);
  if ((v3 & 2) != 0)
  {
    v4 = *(_QWORD **)(a1 - 32);
    v5 = (_BYTE *)v4[1];
    v6 = v4[3];
    if (*(_DWORD *)(a1 - 24) >= 0xAu)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    return llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember((*(_DWORD *)(a1 + 36) >> 3) & 1, v5, v6, v7, a2);
  }
  v4 = (_QWORD *)(a1 - 16 - 8 * ((v3 >> 2) & 0xF));
  v5 = (_BYTE *)v4[1];
  v6 = v4[3];
  if ((*(_QWORD *)(a1 - 16) & 0x380uLL) <= 0x240)
    goto LABEL_5;
LABEL_3:
  v7 = v4[9];
  return llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isDeclarationOfODRMember((*(_DWORD *)(a1 + 36) >> 3) & 1, v5, v6, v7, a2);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::InsertIntoBucketImpl<llvm::DISubprogram *>(a1, (uint64_t)a2, a2, v10);
    v7 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  int v21;
  _BYTE v22[136];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl((uint64_t)v22, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DISubprogram>::getHashValue((uint64_t)v22);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (uint64_t *)(v6 + 8 * v9);
    v11 = *a2;
    v12 = *v10;
    if (*a2 == *v10)
    {
LABEL_3:
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (1)
      {
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v21 = v16;
          v20 = v15;
          v18 = v9;
          v19 = v8;
          if (llvm::MDNodeSubsetEqualImpl<llvm::DISubprogram>::isSubsetEqual(v11, v12))
            goto LABEL_3;
          v12 = *v10;
          v9 = v18;
          v8 = v19;
          v15 = v20;
          v16 = v21;
        }
        if (v12 == -4096)
          break;
        if (v12 == -8192 && v15 == 0)
          v15 = v10;
        v17 = v9 + v16++;
        v9 = v17 & v8;
        v10 = (uint64_t *)(v6 + 8 * (v17 & v8));
        v11 = *a2;
        v12 = *v10;
        v13 = 1;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      v13 = 0;
      if (v15)
        v10 = v15;
    }
  }
  else
  {
    v10 = 0;
    v13 = 0;
  }
LABEL_5:
  *a3 = v10;
  return v13;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DISubprogram>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v2 = (unint64_t *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(unint64_t **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = v4[1];
  if ((*v2 & 2) != 0)
    v5 = *(unint64_t **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = v5[2];
  if ((*v2 & 2) != 0)
    v6 = *(unint64_t **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xF)];
  *(_QWORD *)(result + 16) = v6[3];
  v7 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((*v2 & 2) != 0)
      v8 = *(uint64_t **)(a2 - 32);
    else
      v8 = (uint64_t *)&v2[-((*v2 >> 2) & 0xF)];
    v7 = *v8;
  }
  *(_QWORD *)(result + 24) = v7;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 - 16);
  if ((v9 & 2) != 0)
    v10 = *(unint64_t **)(a2 - 32);
  else
    v10 = &v2[-((v9 >> 2) & 0xF)];
  *(_QWORD *)(result + 40) = v10[4];
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a2 - 16);
  if ((v11 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 9u)
    {
      v12 = *(unint64_t **)(a2 - 32);
      goto LABEL_23;
    }
  }
  else if ((*(_QWORD *)(a2 - 16) & 0x3C0uLL) > 0x200)
  {
    v12 = &v2[-((v11 >> 2) & 0xF)];
LABEL_23:
    v13 = v12[8];
    goto LABEL_25;
  }
  v13 = 0;
LABEL_25:
  *(_QWORD *)(result + 56) = v13;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 - 16);
  if ((v14 & 2) != 0)
    v15 = *(unint64_t **)(a2 - 32);
  else
    v15 = &v2[-((v14 >> 2) & 0xF)];
  *(_QWORD *)(result + 80) = v15[5];
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xAu)
    {
      v16 = *(unint64_t **)(a2 - 32);
      goto LABEL_33;
    }
  }
  else if ((*v2 & 0x380) > 0x240)
  {
    v16 = &v2[-((*v2 >> 2) & 0xF)];
LABEL_33:
    v17 = v16[9];
    goto LABEL_35;
  }
  v17 = 0;
LABEL_35:
  *(_QWORD *)(result + 88) = v17;
  if ((*v2 & 2) != 0)
    v18 = *(unint64_t **)(a2 - 32);
  else
    v18 = &v2[-((*v2 >> 2) & 0xF)];
  *(_QWORD *)(result + 96) = v18[6];
  if ((*v2 & 2) != 0)
    v19 = *(unint64_t **)(a2 - 32);
  else
    v19 = &v2[-((*v2 >> 2) & 0xF)];
  *(_QWORD *)(result + 104) = v19[7];
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xBu)
    {
      v20 = *(unint64_t **)(a2 - 32);
      goto LABEL_46;
    }
  }
  else if ((*v2 & 0x3C0) > 0x280)
  {
    v20 = &v2[-((*v2 >> 2) & 0xF)];
LABEL_46:
    v21 = v20[10];
    goto LABEL_48;
  }
  v21 = 0;
LABEL_48:
  *(_QWORD *)(result + 112) = v21;
  v22 = *v2;
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xCu)
    {
      v23 = *(unint64_t **)(a2 - 32);
      goto LABEL_53;
    }
  }
  else if ((~(_WORD)v22 & 0x300) == 0)
  {
    v23 = &v2[-((v22 >> 2) & 0xF)];
LABEL_53:
    v24 = v23[11];
    goto LABEL_55;
  }
  v24 = 0;
LABEL_55:
  *(_QWORD *)(result + 120) = v24;
  if ((*v2 & 2) != 0)
  {
    if (*(_DWORD *)(a2 - 24) >= 0xDu)
    {
      v25 = *(unint64_t **)(a2 - 32);
      goto LABEL_60;
    }
LABEL_61:
    v26 = 0;
    goto LABEL_62;
  }
  if ((*v2 & 0x3C0) <= 0x300)
    goto LABEL_61;
  v25 = &v2[-((*v2 >> 2) & 0xF)];
LABEL_60:
  v26 = v25[12];
LABEL_62:
  *(_QWORD *)(result + 128) = v26;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::InsertIntoBucketImpl<llvm::DISubprogram *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>,llvm::DISubprogram *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DISubprogram>,llvm::detail::DenseSetPair<llvm::DISubprogram *>>::LookupBucketFor<llvm::DISubprogram *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlock>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::getHashValue(uint64_t *a1)
{
  uint64_t *v2;
  int *v3;
  int *v4;
  _QWORD v6[8];
  char v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = (int *)(a1 + 2);
  v4 = (int *)a1 + 5;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,unsigned long long,unsigned int,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, a1, v2, v3, v4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD *)(a2 - 32);
  else
    v4 = v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)a1 != *(_QWORD *)(v4 + 8))
    return 0;
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((v3 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    v5 = *v6;
  }
  return *(_QWORD *)(a1 + 8) == v5
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::InsertIntoBucketImpl<llvm::DILexicalBlock *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[3];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlock>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = v4[1];
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((*v2 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    v5 = *v6;
  }
  *(_QWORD *)(result + 8) = v5;
  v7 = *(unsigned __int16 *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::InsertIntoBucketImpl<llvm::DILexicalBlock *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>,llvm::DILexicalBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlock>,llvm::detail::DenseSetPair<llvm::DILexicalBlock *>>::LookupBucketFor<llvm::DILexicalBlock *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::getHashValue(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD v5[7];
  char v6[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v4);
  v4 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v4, 0, v5, v6, v2, (int *)a1 + 4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD *)(a2 - 32);
  else
    v4 = v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)a1 != *(_QWORD *)(v4 + 8))
    return 0;
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((v3 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    v5 = *v6;
  }
  return *(_QWORD *)(a1 + 8) == v5 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::InsertIntoBucketImpl<llvm::DILexicalBlockFile *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[3];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILexicalBlockFile>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = v4[1];
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((*v2 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = &v2[-((*v2 >> 2) & 0xFLL)];
    v5 = *v6;
  }
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::InsertIntoBucketImpl<llvm::DILexicalBlockFile *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>,llvm::DILexicalBlockFile *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILexicalBlockFile>,llvm::detail::DenseSetPair<llvm::DILexicalBlockFile *>>::LookupBucketFor<llvm::DILexicalBlockFile *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DINamespace>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  int i;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t result;
  _QWORD v18[8];
  char v19[64];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = a2 + 1;
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v18);
    v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, v18, v19, a2, v7);
    v9 = 0;
    v10 = v4 - 1;
    v11 = v10 & v8;
    for (i = 1; ; ++i)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DINamespace>::isKeyOf((uint64_t)a2, v14))
        {
          result = 1;
          goto LABEL_18;
        }
        v14 = *v13;
      }
      if (v14 == -4096)
        break;
      if (v9)
        v15 = 0;
      else
        v15 = v14 == -8192;
      if (v15)
        v9 = (uint64_t *)(v6 + 8 * v11);
      v16 = v11 + i;
      v11 = v16 & v10;
    }
    result = 0;
    if (v9)
      v13 = v9;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DINamespace>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD *)(a2 - 32);
  else
    v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF);
  return *(_QWORD *)a1 == *(_QWORD *)(v3 + 8)
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(v3 + 16)
      && *(_BYTE *)(a1 + 16) == (*(_BYTE *)(a2 + 16) & 1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::InsertIntoBucketImpl<llvm::DINamespace *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeInfo<llvm::DINamespace>::getHashValue(*a2);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DINamespace>::getHashValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[8];
  char v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  llvm::MDNodeKeyImpl<llvm::DINamespace>::MDNodeKeyImpl((uint64_t)&v2, a1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v4, 0, v4, v5, &v2, &v3);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DINamespace>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = v4[1];
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[2];
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16) & 1;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::InsertIntoBucketImpl<llvm::DINamespace *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>,llvm::DINamespace *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DINamespace>,llvm::detail::DenseSetPair<llvm::DINamespace *>>::LookupBucketFor<llvm::DINamespace *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DICommonBlock>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DICommonBlock>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DICommonBlock>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DICommonBlock>::getHashValue(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD v7[7];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = a1 + 2;
  v4 = a1 + 3;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
  v6 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, v2, v3, v4, (int *)a1 + 8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DICommonBlock>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD **)(a2 - 32);
  else
    v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  return *(_QWORD *)a1 == *v3
      && *(_QWORD *)(a1 + 8) == v3[1]
      && *(_QWORD *)(a1 + 16) == v3[2]
      && *(_QWORD *)(a1 + 24) == v3[3]
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::InsertIntoBucketImpl<llvm::DICommonBlock *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[5];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DICommonBlock>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DICommonBlock>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DICommonBlock>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v6[2];
  if ((*v2 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 24) = v7[3];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::InsertIntoBucketImpl<llvm::DICommonBlock *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>,llvm::DICommonBlock *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DICommonBlock>,llvm::detail::DenseSetPair<llvm::DICommonBlock *>>::LookupBucketFor<llvm::DICommonBlock *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIModule>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIModule>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIModule>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIModule>::getHashValue(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _QWORD v6[8];
  char v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = a1 + 1;
  v2 = a1 + 2;
  v3 = a1 + 3;
  v4 = a1 + 4;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<long long,llvm::Metadata *,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, v1, v2, v3, v4);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIModule>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF));
  if (*(_QWORD *)(a1 + 8) != v4[1]
    || *(_QWORD *)(a1 + 16) != v4[2]
    || *(_QWORD *)(a1 + 24) != v4[3]
    || *(_QWORD *)(a1 + 32) != v4[4]
    || *(_QWORD *)(a1 + 40) != v4[5])
  {
    return 0;
  }
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    if ((v3 & 2) != 0)
      v6 = *(uint64_t **)(a2 - 32);
    else
      v6 = (uint64_t *)(v2 - 8 * ((v3 >> 2) & 0xF));
    v5 = *v6;
  }
  return *(_QWORD *)a1 == v5
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 20);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::InsertIntoBucketImpl<llvm::DIModule *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[7];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIModule>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIModule>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIModule>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    v3 = *(_QWORD *)(a2 - 16);
    if ((v3 & 2) != 0)
      v4 = *(uint64_t **)(a2 - 32);
    else
      v4 = (uint64_t *)(a2 - 16 - 8 * ((v3 >> 2) & 0xF));
    v2 = *v4;
  }
  *(_QWORD *)result = v2;
  v5 = (_QWORD *)(a2 - 16);
  v6 = *(_QWORD *)(a2 - 16);
  if ((v6 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v5[-((v6 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = v7[1];
  if ((*v5 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = &v5[-((*v5 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v8[2];
  if ((*v5 & 2) != 0)
    v9 = *(_QWORD **)(a2 - 32);
  else
    v9 = &v5[-((*v5 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 24) = v9[3];
  if ((*v5 & 2) != 0)
    v10 = *(_QWORD **)(a2 - 32);
  else
    v10 = &v5[-((*v5 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 32) = v10[4];
  if ((*v5 & 2) != 0)
    v11 = *(_QWORD **)(a2 - 32);
  else
    v11 = &v5[-((*v5 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 40) = v11[5];
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(result + 52) = *(_BYTE *)(a2 + 20);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::InsertIntoBucketImpl<llvm::DIModule *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>,llvm::DIModule *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIModule>,llvm::detail::DenseSetPair<llvm::DIModule *>>::LookupBucketFor<llvm::DIModule *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  int v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  int i;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;
  _QWORD v19[8];
  char v20[64];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = a2 + 1;
    v8 = (char *)(a2 + 2);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v19);
    v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v19, 0, v19, v20, a2, v7, v8);
    v10 = 0;
    v11 = v4 - 1;
    v12 = (v4 - 1) & v9;
    for (i = 1; ; ++i)
    {
      v14 = (uint64_t *)(v6 + 8 * v12);
      v15 = *v14;
      if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::isKeyOf((uint64_t)a2, v15))
        {
          result = 1;
          goto LABEL_18;
        }
        v15 = *v14;
      }
      if (v15 == -4096)
        break;
      if (v10)
        v16 = 0;
      else
        v16 = v15 == -8192;
      if (v16)
        v10 = (uint64_t *)(v6 + 8 * v12);
      v17 = v12 + i;
      v12 = v17 & v11;
    }
    result = 0;
    if (v10)
      v14 = v10;
  }
  else
  {
    v14 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v14;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD **)(a2 - 32);
  else
    v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  return *(_QWORD *)a1 == *v3
      && *(_QWORD *)(a1 + 8) == v3[1]
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::InsertIntoBucketImpl<llvm::DITemplateTypeParameter *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeInfo<llvm::DITemplateTypeParameter>::getHashValue(*a2);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DITemplateTypeParameter>::getHashValue(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4[8];
  _QWORD v5[8];
  char v6[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::MDNodeKeyImpl((uint64_t)&v2, a1);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v5, 0, v5, v6, &v2, &v3, v4);
}

uint64_t llvm::MDNodeKeyImpl<llvm::DITemplateTypeParameter>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[1];
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::InsertIntoBucketImpl<llvm::DITemplateTypeParameter *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>,llvm::DITemplateTypeParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateTypeParameter>,llvm::detail::DenseSetPair<llvm::DITemplateTypeParameter *>>::LookupBucketFor<llvm::DITemplateTypeParameter *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::getHashValue(int *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v4;
  int v6;
  _QWORD v7[7];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)(a1 + 2);
  v3 = (uint64_t *)(a1 + 4);
  v4 = (char *)(a1 + 6);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v6);
  v6 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v6, 0, v7, v8, v2, v3, v4, (uint64_t *)a1 + 4);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,BOOL,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t *a8)
{
  _QWORD *v13;
  _BYTE *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,llvm::Metadata *>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(_DWORD *)a1 != *(unsigned __int16 *)(a2 + 2))
    return 0;
  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  v4 = (v3 & 2) != 0 ? *(_QWORD **)(a2 - 32) : (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF));
  if (*(_QWORD *)(a1 + 8) != *v4
    || *(_QWORD *)(a1 + 16) != v4[1]
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 16))
  {
    return 0;
  }
  if ((v3 & 2) != 0)
    v5 = *(_QWORD *)(a2 - 32);
  else
    v5 = v2 - 8 * ((v3 >> 2) & 0xF);
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(v5 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucketImpl<llvm::DITemplateValueParameter *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17[10];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DITemplateValueParameter>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;

  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v5[1];
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 - 16);
  if ((v6 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v2[-((v6 >> 2) & 0xF)];
  *(_QWORD *)(result + 32) = v7[2];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::InsertIntoBucketImpl<llvm::DITemplateValueParameter *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>,llvm::DITemplateValueParameter *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DITemplateValueParameter>,llvm::detail::DenseSetPair<llvm::DITemplateValueParameter *>>::LookupBucketFor<llvm::DITemplateValueParameter *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::getHashValue(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD v12[8];
  char v13[64];
  uint64_t v14;

  v2 = a1 + 1;
  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 2;
  v4 = a1 + 3;
  v5 = (int *)(a1 + 4);
  v6 = a1 + 5;
  v7 = (char *)(a1 + 6);
  v8 = (char *)a1 + 49;
  v9 = a1 + 7;
  v10 = a1 + 10;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v12);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v12, 0, v12, v13, a1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10, char *a11, char *a12, uint64_t *a13, uint64_t *a14)
{
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v22;
  unint64_t v23;

  v22 = a2;
  v19 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v22, a3, (unint64_t)a4, *a5);
  v23 = v22;
  v20 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v23, v19, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v23, v20, a4, a7, a8, a9, a10, a11, a12, a13, a14);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, char *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v20;
  unint64_t v21;

  v20 = a2;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  v21 = v20;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v17, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,llvm::Metadata *,BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v15;
  _BYTE *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, char *a6, uint64_t *a7, uint64_t *a8)
{
  _BYTE *v13;
  unint64_t v15;

  v15 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v15, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::Metadata *,llvm::Metadata *>(a1, v15, v13, a4, a6, a7, a8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::Metadata *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, uint64_t *a6, uint64_t *a7)
{
  _BYTE *v11;
  unint64_t v13;

  v13 = a2;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v13, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v13, v11, a4, a6, a7);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF));
  if (*(_QWORD *)a1 != *v4
    || *(_QWORD *)(a1 + 8) != v4[1]
    || *(_QWORD *)(a1 + 16) != v4[5]
    || *(_QWORD *)(a1 + 24) != v4[2]
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  v5 = (v3 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(v5 + 24)
    || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 25))
  {
    return 0;
  }
  v6 = (v3 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(v6 + 48)
    || *(_QWORD *)(a1 + 64) != *(_QWORD *)(v6 + 56)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if ((v3 & 2) != 0)
    v7 = *(_QWORD *)(a2 - 32);
  else
    v7 = v2 - 8 * ((v3 >> 2) & 0xF);
  return *(_QWORD *)(a1 + 80) == *(_QWORD *)(v7 + 64);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::InsertIntoBucketImpl<llvm::DIGlobalVariable *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[11];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIGlobalVariable>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v6[5];
  if ((*v2 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 24) = v7[2];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 - 16);
  if ((v8 & 2) != 0)
    v9 = *(_QWORD **)(a2 - 32);
  else
    v9 = &v2[-((v8 >> 2) & 0xF)];
  *(_QWORD *)(result + 40) = v9[3];
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 - 16);
  if ((v10 & 2) != 0)
    v11 = *(_QWORD **)(a2 - 32);
  else
    v11 = &v2[-((v10 >> 2) & 0xF)];
  *(_QWORD *)(result + 56) = v11[6];
  if ((*v2 & 2) != 0)
    v12 = *(_QWORD **)(a2 - 32);
  else
    v12 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 64) = v12[7];
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 20);
  v13 = *(_QWORD *)(a2 - 16);
  if ((v13 & 2) != 0)
    v14 = *(_QWORD **)(a2 - 32);
  else
    v14 = &v2[-((v13 >> 2) & 0xF)];
  *(_QWORD *)(result + 80) = v14[8];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::InsertIntoBucketImpl<llvm::DIGlobalVariable *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>,llvm::DIGlobalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariable>,llvm::detail::DenseSetPair<llvm::DIGlobalVariable *>>::LookupBucketFor<llvm::DIGlobalVariable *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILocalVariable>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DILocalVariable>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILocalVariable>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILocalVariable>::getHashValue(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  uint64_t *v5;
  int *v6;
  int *v7;
  uint64_t *v8;
  _QWORD v10[8];
  char v11[64];
  uint64_t v12;

  v2 = a1 + 1;
  v3 = a1 + 2;
  v4 = (int *)(a1 + 3);
  v12 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 4;
  v6 = (int *)(a1 + 5);
  v7 = (int *)a1 + 11;
  v8 = a1 + 7;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, a1, v2, v3, v4, v5, v6, v7, v8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::MDString *,llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, int *a10, int *a11, uint64_t *a12)
{
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v20;
  unint64_t v21;

  v20 = a2;
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v20, a3, (unint64_t)a4, *a5);
  v21 = v20;
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v21, v17, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8, int *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, int *a7, uint64_t *a8)
{
  _QWORD *v13;
  _DWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILocalVariable>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF));
  if (*(_QWORD *)a1 != *v4
    || *(_QWORD *)(a1 + 8) != v4[1]
    || *(_QWORD *)(a1 + 16) != v4[2]
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 16))
  {
    return 0;
  }
  v5 = (v3 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(v5 + 24)
    || *(_DWORD *)(a1 + 40) != *(unsigned __int16 *)(a2 + 24)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if ((v3 & 2) != 0)
    v6 = *(_QWORD *)(a2 - 32);
  else
    v6 = v2 - 8 * ((v3 >> 2) & 0xF);
  return *(_QWORD *)(a1 + 56) == *(_QWORD *)(v6 + 32);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::InsertIntoBucketImpl<llvm::DILocalVariable *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[8];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILocalVariable>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DILocalVariable>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILocalVariable>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v6[2];
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = &v2[-((v7 >> 2) & 0xF)];
  *(_QWORD *)(result + 32) = v8[3];
  v9 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 40) = *(unsigned __int16 *)(a2 + 24);
  *(_DWORD *)(result + 44) = v9;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 20);
  v10 = *(_QWORD *)(a2 - 16);
  if ((v10 & 2) != 0)
    v11 = *(_QWORD **)(a2 - 32);
  else
    v11 = &v2[-((v10 >> 2) & 0xF)];
  *(_QWORD *)(result + 56) = v11[4];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::InsertIntoBucketImpl<llvm::DILocalVariable *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>,llvm::DILocalVariable *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILocalVariable>,llvm::detail::DenseSetPair<llvm::DILocalVariable *>>::LookupBucketFor<llvm::DILocalVariable *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DILabel>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DILabel>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DILabel>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DILabel>::getHashValue(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD v5[7];
  char v6[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v4);
  v4 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v4, 0, v5, v6, v2, (int *)a1 + 6);
}

BOOL llvm::MDNodeKeyImpl<llvm::DILabel>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD **)(a2 - 32);
  else
    v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  return *(_QWORD *)a1 == *v3
      && *(_QWORD *)(a1 + 8) == v3[1]
      && *(_QWORD *)(a1 + 16) == v3[2]
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::InsertIntoBucketImpl<llvm::DILabel *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17[4];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DILabel>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DILabel>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DILabel>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[1];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v6[2];
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::InsertIntoBucketImpl<llvm::DILabel *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>,llvm::DILabel *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DILabel>,llvm::detail::DenseSetPair<llvm::DILabel *>>::LookupBucketFor<llvm::DILabel *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIExpression>>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  int i;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = 0;
    v9 = v5 - 1;
    v10 = v9 & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8), (uint64_t)a3, a4);
    for (i = 1; ; ++i)
    {
      v12 = (uint64_t *)(v7 + 8 * v10);
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIExpression>::isKeyOf(a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v7 + 8 * v10);
      v15 = v10 + i;
      v10 = v15 & v9;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DIExpression>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(const void **)(a2 + 16);
  return v3 == (uint64_t)(*(_QWORD *)(a2 + 24) - (_QWORD)v4) >> 3 && memcmp(*(const void **)a1, v4, 8 * v3) == 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>((uint64_t *)a1, (uint64_t)a2, &v11, a3);
  v8 = v11;
  if ((result & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucketImpl<llvm::DIExpression *>(a1, (uint64_t)a2, (uint64_t)a2, v11);
    v8 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v9 = 1;
  }
  v10 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v9;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(*(_QWORD *)a2 + 16), *(_QWORD *)(*(_QWORD *)a2 + 24), (uint64_t)a3, a4);
    v9 = v5 - 1;
    v10 = (v5 - 1) & v8;
    v11 = (_QWORD *)(v7 + 8 * v10);
    v12 = *v11;
    if (*(_QWORD *)a2 == *v11)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(v7 + 8 * (v17 & v9));
        v12 = *v11;
        if (*(_QWORD *)a2 == *v11)
          goto LABEL_5;
      }
      result = 0;
      if (v14)
        v11 = v14;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v11;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::InsertIntoBucketImpl<llvm::DIExpression *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::moveFromOldBuckets(a1, v4, &v4[v3], v10);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    do
    {
      *result++ = -4096;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = result;
  *(_QWORD *)(result + 8) = 0;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)result;
    v9 = 8 * v7;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>,llvm::DIExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIExpression>,llvm::detail::DenseSetPair<llvm::DIExpression *>>::LookupBucketFor<llvm::DIExpression *>((uint64_t *)v6, (uint64_t)a2, &v10, a4);
      *v10 = *a2;
      ++*(_DWORD *)(v6 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  int i;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t result;
  _QWORD v18[8];
  char v19[64];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = a2 + 1;
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v18);
    v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v18, 0, v18, v19, a2, v7);
    v9 = 0;
    v10 = v4 - 1;
    v11 = v10 & v8;
    for (i = 1; ; ++i)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>::isKeyOf(a2, v14))
        {
          result = 1;
          goto LABEL_18;
        }
        v14 = *v13;
      }
      if (v14 == -4096)
        break;
      if (v9)
        v15 = 0;
      else
        v15 = v14 == -8192;
      if (v15)
        v9 = (uint64_t *)(v6 + 8 * v11);
      v16 = v11 + i;
      v11 = v16 & v10;
    }
    result = 0;
    if (v9)
      v13 = v9;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::MDNodeKeyImpl<llvm::DIGlobalVariableExpression>::isKeyOf(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD **)(a2 - 32);
  else
    v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  return *a1 == *v3 && a1[1] == v3[1];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::InsertIntoBucketImpl<llvm::DIGlobalVariableExpression *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>::getHashValue(*a2);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

unint64_t llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>::getHashValue(uint64_t a1)
{
  unint64_t v1;
  _OWORD *v2;
  uint64_t v4[3];
  _QWORD v5[8];
  char v6[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 - 16);
  if ((v1 & 2) != 0)
    v2 = *(_OWORD **)(a1 - 32);
  else
    v2 = (_OWORD *)(a1 - 16 - 8 * ((v1 >> 2) & 0xF));
  *(_OWORD *)v4 = *v2;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v5, 0, v5, v6, v4, &v4[1]);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::InsertIntoBucketImpl<llvm::DIGlobalVariableExpression *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>,llvm::DIGlobalVariableExpression *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIGlobalVariableExpression>,llvm::detail::DenseSetPair<llvm::DIGlobalVariableExpression *>>::LookupBucketFor<llvm::DIGlobalVariableExpression *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIObjCProperty>>(uint64_t *a1, _QWORD *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::getHashValue(_QWORD *a1)
{
  uint64_t *v2;
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  int *v6;
  uint64_t v8;
  _QWORD v9[7];
  char v10[64];
  uint64_t v11;

  v2 = a1 + 1;
  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (int *)(a1 + 2);
  v4 = a1 + 3;
  v5 = a1 + 4;
  v6 = (int *)(a1 + 5);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v8);
  v8 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v8, 0, v9, v10, v2, v3, v4, v5, v6, a1 + 6);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,unsigned int,llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8, int *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,llvm::MDString *,unsigned int,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF));
  if (*(_QWORD *)a1 != *v4 || *(_QWORD *)(a1 + 8) != v4[1] || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 0;
  v5 = (v3 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v2 - 8 * ((v3 >> 2) & 0xF);
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(v5 + 16)
    || *(_QWORD *)(a1 + 32) != *(_QWORD *)(v5 + 24)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if ((v3 & 2) != 0)
    v6 = *(_QWORD *)(a2 - 32);
  else
    v6 = v2 - 8 * ((v3 >> 2) & 0xF);
  return *(_QWORD *)(a1 + 48) == *(_QWORD *)(v6 + 32);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::InsertIntoBucketImpl<llvm::DIObjCProperty *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD v17[7];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIObjCProperty>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;

  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)result = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 8) = v5[1];
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 - 16);
  if ((v6 & 2) != 0)
    v7 = *(_QWORD **)(a2 - 32);
  else
    v7 = &v2[-((v6 >> 2) & 0xF)];
  *(_QWORD *)(result + 24) = v7[2];
  if ((*v2 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 32) = v8[3];
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 20);
  v9 = *(_QWORD *)(a2 - 16);
  if ((v9 & 2) != 0)
    v10 = *(_QWORD **)(a2 - 32);
  else
    v10 = &v2[-((v9 >> 2) & 0xF)];
  *(_QWORD *)(result + 48) = v10[4];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::InsertIntoBucketImpl<llvm::DIObjCProperty *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>,llvm::DIObjCProperty *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIObjCProperty>,llvm::detail::DenseSetPair<llvm::DIObjCProperty *>>::LookupBucketFor<llvm::DIObjCProperty *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIImportedEntity>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::getHashValue(int *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int *v5;
  uint64_t *v6;
  int v8;
  _QWORD v9[7];
  char v10[64];
  uint64_t v11;

  v2 = (uint64_t *)(a1 + 2);
  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 + 4);
  v4 = (uint64_t *)(a1 + 6);
  v5 = a1 + 8;
  v6 = (uint64_t *)(a1 + 10);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v8);
  v8 = *a1;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>((llvm::hashing::detail::hash_combine_recursive_helper *)&v8, 0, v9, v10, v2, v3, v4, v5, v6, (uint64_t *)a1 + 6);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,llvm::Metadata *,unsigned int,llvm::MDString *,llvm::Metadata *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v18;
  unint64_t v19;

  v18 = a2;
  v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v19, v15, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::MDString *,int,llvm::MDString *,llvm::MDString *>(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::isKeyOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && ((v2 = a2 - 16, v3 = *(_QWORD *)(a2 - 16), (v3 & 2) != 0)
      ? (v4 = *(_QWORD **)(a2 - 32))
      : (v4 = (_QWORD *)(v2 - 8 * ((v3 >> 2) & 0xF))),
        *(_QWORD *)(a1 + 8) == *v4
     && *(_QWORD *)(a1 + 16) == v4[1]
     && *(_QWORD *)(a1 + 24) == v4[3]
     && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 16)
     && ((v3 & 2) != 0 ? (v5 = *(_QWORD *)(a2 - 32)) : (v5 = v2 - 8 * ((v3 >> 2) & 0xF)),
         *(_QWORD *)(a1 + 40) == *(_QWORD *)(v5 + 16))))
  {
    return *(_QWORD *)(a1 + 48) == *(_QWORD *)(v5 + 32);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::InsertIntoBucketImpl<llvm::DIImportedEntity *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17[14];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIImportedEntity>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  v2 = (_QWORD *)(a2 - 16);
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) != 0)
    v4 = *(_QWORD **)(a2 - 32);
  else
    v4 = &v2[-((v3 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = *v4;
  if ((*v2 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v5[1];
  if ((*v2 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 24) = v6[3];
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD **)(a2 - 32);
  else
    v8 = &v2[-((v7 >> 2) & 0xF)];
  *(_QWORD *)(result + 40) = v8[2];
  if ((*v2 & 2) != 0)
    v9 = *(_QWORD **)(a2 - 32);
  else
    v9 = &v2[-((*v2 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 48) = v9[4];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::InsertIntoBucketImpl<llvm::DIImportedEntity *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>,llvm::DIImportedEntity *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIImportedEntity>,llvm::detail::DenseSetPair<llvm::DIImportedEntity *>>::LookupBucketFor<llvm::DIImportedEntity *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIMacro>>(uint64_t *a1, int *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int HashValue;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::MDNodeKeyImpl<llvm::DIMacro>::getHashValue(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = HashValue & v9;
      v12 = (uint64_t *)(v6 + 8 * (HashValue & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (llvm::MDNodeKeyImpl<llvm::DIMacro>::isKeyOf((uint64_t)a2, v13))
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v8 = (uint64_t *)(v6 + 8 * v11);
      HashValue = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

unint64_t llvm::MDNodeKeyImpl<llvm::DIMacro>::getHashValue(int *a1)
{
  int *v2;
  uint64_t *v3;
  uint64_t *v4;
  _DWORD v6[16];
  char v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 1;
  v3 = (uint64_t *)(a1 + 2);
  v4 = (uint64_t *)(a1 + 4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>((llvm::hashing::detail::hash_combine_recursive_helper *)v6, 0, v6, v7, a1, v2, v3, v4);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int,llvm::MDString *,llvm::MDString *>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  _DWORD *v13;
  _QWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

BOOL llvm::MDNodeKeyImpl<llvm::DIMacro>::isKeyOf(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  if (*(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 16)
    && ((v2 = *(_QWORD *)(a2 - 16), (v2 & 2) != 0)
      ? (v3 = *(_QWORD **)(a2 - 32))
      : (v3 = (_QWORD *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF))),
        *(_QWORD *)(a1 + 8) == *v3))
  {
    return *(_QWORD *)(a1 + 16) == v3[1];
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::InsertIntoBucketImpl<llvm::DIMacro *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17[6];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    llvm::MDNodeKeyImpl<llvm::DIMacro>::MDNodeKeyImpl((uint64_t)v17, *a2);
    HashValue = llvm::MDNodeKeyImpl<llvm::DIMacro>::getHashValue(v17);
    v8 = v4 - 1;
    v9 = HashValue & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_5;
      }
      result = 0;
      if (v13)
        v10 = v13;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

uint64_t llvm::MDNodeKeyImpl<llvm::DIMacro>::MDNodeKeyImpl(uint64_t result, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)result = *(unsigned __int16 *)(a2 + 2);
  *(_DWORD *)(result + 4) = v2;
  v3 = (_QWORD *)(a2 - 16);
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) != 0)
    v5 = *(_QWORD **)(a2 - 32);
  else
    v5 = &v3[-((v4 >> 2) & 0xF)];
  *(_QWORD *)(result + 8) = *v5;
  if ((*v3 & 2) != 0)
    v6 = *(_QWORD **)(a2 - 32);
  else
    v6 = &v3[-((*v3 >> 2) & 0xFLL)];
  *(_QWORD *)(result + 16) = v6[1];
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::InsertIntoBucketImpl<llvm::DIMacro *>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>,llvm::DIMacro *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIMacro>,llvm::detail::DenseSetPair<llvm::DIMacro *>>::LookupBucketFor<llvm::DIMacro *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::DIArgList>>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 isEqual;
  _BOOL4 v17;
  uint64_t *v18;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8), (uint64_t)a3, a4);
    v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::MDNodeInfo<llvm::DIArgList>::isEqual(a2, *v10))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (*v10 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = *v10 == -8192;
        if (v14)
          v12 = v10;
        v18 = v12;
        v15 = v13 + 1;
        v9 = (v9 + v13) & v8;
        v10 = (uint64_t *)(v7 + 8 * v9);
        isEqual = llvm::MDNodeInfo<llvm::DIArgList>::isEqual(a2, *v10);
        v12 = v18;
        v17 = isEqual;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::MDNodeInfo<llvm::DIArgList>::isEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  return v3 == *(_DWORD *)(a2 + 24) && memcmp(*(const void **)a1, *(const void **)(a2 + 16), 8 * v3) == 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>((uint64_t *)a1, (uint64_t)a2, &v11, a3);
  v8 = v11;
  if ((result & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucketImpl<llvm::DIArgList *>(a1, (uint64_t)a2, (uint64_t)a2, v11);
    v8 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v9 = 1;
  }
  v10 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v9;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(*(_QWORD *)a2 + 16), *(_QWORD *)(*(_QWORD *)a2 + 16) + 8 * *(unsigned int *)(*(_QWORD *)a2 + 24), (uint64_t)a3, a4);
    v9 = v5 - 1;
    v10 = (v5 - 1) & v8;
    v11 = (_QWORD *)(v7 + 8 * v10);
    v12 = *v11;
    if (*(_QWORD *)a2 == *v11)
    {
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(v7 + 8 * (v17 & v9));
        v12 = *v11;
        if (*(_QWORD *)a2 == *v11)
          goto LABEL_5;
      }
      result = 0;
      if (v14)
        v11 = v14;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v11;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::InsertIntoBucketImpl<llvm::DIArgList *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::moveFromOldBuckets(a1, v4, &v4[v3], v10);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    do
    {
      *result++ = -4096;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = result;
  *(_QWORD *)(result + 8) = 0;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)result;
    v9 = 8 * v7;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>,llvm::DIArgList *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::DIArgList>,llvm::detail::DenseSetPair<llvm::DIArgList *>>::LookupBucketFor<llvm::DIArgList *>((uint64_t *)v6, (uint64_t)a2, &v10, a4);
      *v10 = *a2;
      ++*(_DWORD *)(v6 + 8);
    }
    ++a2;
  }
  return result;
}

double _GLOBAL__sub_I_DebugInfoMetadata_cpp()
{
  uint64_t v0;
  double result;

  v0 = llvm::cl::Option::Option((uint64_t)&llvm::EnableFSDiscriminator, 0, 0);
  byte_2579667A0 = 0;
  qword_2579667A8 = (uint64_t)&off_251C12500;
  unk_2579667B0 = 0;
  llvm::EnableFSDiscriminator = (uint64_t)off_251C123A8;
  qword_2579667B8 = (uint64_t)&off_251C12520;
  qword_2579667C0 = (uint64_t)&off_251C12410;
  qword_2579667D8 = (uint64_t)&qword_2579667C0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-fs-discriminator", 0x17uLL);
  word_25796672A = word_25796672A & 0xFF9F | 0x20;
  qword_257966740 = (uint64_t)"Enable adding flow sensitive discriminators";
  unk_257966748 = 43;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::EnableFSDiscriminator);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::EnableFSDiscriminator, &dword_24A800000);
  result = NAN;
  llvm::DebugVariable::DefaultFragment = xmmword_24AA2AC20;
  return result;
}

uint64_t llvm::DILocation::getInlinedAtScope(llvm::DILocation *this)
{
  char *v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;

  do
  {
    while (1)
    {
      v1 = (char *)this - 16;
      v2 = *((_QWORD *)this - 2);
      if ((v2 & 2) == 0)
        break;
      v4 = (char *)*((_QWORD *)this - 4);
      if (*((_DWORD *)this - 6) == 2)
      {
        this = (llvm::DILocation *)*((_QWORD *)v4 + 1);
        if (this)
          continue;
      }
      return *(_QWORD *)v4;
    }
    v3 = -(uint64_t)((v2 >> 2) & 0xF);
    if ((*((_QWORD *)this - 2) & 0x3C0) != 0x80)
      break;
    this = *(llvm::DILocation **)&v1[8 * v3 + 8];
  }
  while (this);
  v4 = &v1[8 * v3];
  return *(_QWORD *)v4;
}

void `anonymous namespace'::PassRemarksOpt::~PassRemarksOpt(_anonymous_namespace_::PassRemarksOpt *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251C1E970;
  v2 = (char *)this + 152;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251C1E970;
  v2 = (char *)this + 152;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *a5, size_t a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t **v11;
  _QWORD *v12;
  char *p_p;
  _OWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  void *__p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[4];
  __int16 v26;
  const char *v27;
  __int16 v28;
  void **v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33[5];
  uint64_t v34[5];
  _BYTE v35[40];
  _QWORD v36[3];

  __p = 0;
  v23 = 0;
  v24 = 0;
  v8 = llvm::cl::parser<std::string>::parse((int)a1 + 144, a1, a3, a4, a5, a6, (uint64_t)&__p);
  if ((v8 & 1) == 0)
  {
    v9 = SHIBYTE(v24);
    if (v24 >= 0)
      v10 = HIBYTE(v24);
    else
      v10 = v23;
    if (!v10)
      goto LABEL_15;
    v11 = *(uint64_t ***)(a1 + 128);
    v12 = operator new(0x28uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_251C1E9D8;
    if (v9 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    v14 = (_OWORD *)operator new();
    *v14 = 0u;
    v14[1] = 0u;
    v12[3] = v14;
    *((_QWORD *)v14 + 2) = &p_p[v10];
    *((_DWORD *)v12 + 8) = llvm_regcomp((uint64_t)v14, p_p, 33);
    v15 = (std::__shared_weak_count *)v11[1];
    *v11 = v12 + 3;
    v11[1] = v12;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    memset(v36, 0, sizeof(v36));
    v18 = *v11;
    v19 = *((_DWORD *)*v11 + 2);
    if (!v19)
    {
LABEL_15:
      *(_WORD *)(a1 + 12) = a2;
      v20 = *(_QWORD *)(a1 + 176);
      if (v20)
      {
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 48))(v20, &__p);
        goto LABEL_17;
      }
      v19 = std::__throw_bad_function_call[abi:nn180100]();
    }
    v31 = "Invalid regular expression '";
    v32 = 259;
    v30 = 260;
    v29 = &__p;
    llvm::operator+((uint64_t *)&v31, (uint64_t *)&v29, (uint64_t)v33);
    v27 = "' in -pass-remarks: ";
    v28 = 259;
    llvm::operator+(v33, (uint64_t *)&v27, (uint64_t)v34);
    v26 = 260;
    v25[0] = (uint64_t)v36;
    llvm::operator+(v34, v25, (uint64_t)v35);
    llvm::report_fatal_error((llvm *)v35, 0);
  }
LABEL_17:
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  return v8;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 144, a1);
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::printOptionValue(llvm::cl::Option *a1, int a2, int a3)
{
  double result;

  if (a3)
    return llvm::cl::basic_parser_impl::printOptionNoValue((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
  return result;
}

void llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 128);
  v2 = (std::__shared_weak_count *)v1[1];
  *v1 = 0;
  v1[1] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void std::__shared_ptr_emplace<llvm::Regex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C1E9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::Regex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C1E9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::Regex>::__on_zero_shared(uint64_t a1)
{
  llvm::Regex::~Regex((llvm::Regex *)(a1 + 24));
}

uint64_t llvm::cl::OptionValueBase<`anonymous namespace'::PassRemarksOpt,true>::compare()
{
  return 0;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C1EA30;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C1EA30;
}

uint64_t llvm::cl::apply<llvm::cl::opt<`anonymous namespace'::PassRemarksOpt,true,llvm::cl::parser<std::string>>,llvm::cl::value_desc,llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::LocationClass<`anonymous namespace'::PassRemarksOpt>,llvm::cl::ValueExpected>(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, char a5, _QWORD *a6, _WORD *a7)
{
  uint64_t v8;
  __int16 v9;
  llvm::raw_ostream *v10;
  const char *v11;
  __int16 v12;

  v8 = result;
  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  *(_OWORD *)(result + 32) = *a4;
  v9 = *(_WORD *)(result + 10) & 0xFF9F | (32 * (a5 & 3));
  *(_WORD *)(result + 10) = v9;
  if (*(_QWORD *)(result + 128))
  {
    v11 = "cl::location(x) specified more than once!";
    v12 = 259;
    v10 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    result = llvm::cl::Option::error(v8, (llvm::Twine *)&v11, 0, 0, v10);
    v9 = *(_WORD *)(v8 + 10);
  }
  else
  {
    *(_QWORD *)(result + 128) = *a6;
  }
  *(_WORD *)(v8 + 10) = (8 * (*a7 & 3)) | v9 & 0xFFE7;
  return result;
}

uint64_t _GLOBAL__sub_I_DiagnosticHandler_cpp()
{
  uint64_t v0;
  int v2;
  void *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Enable optimization remarks from passes whose name match the given regular expression";
  *((_QWORD *)&v4 + 1) = 85;
  v3 = &_MergedGlobals_30;
  v2 = 2;
  llvm::cl::Option::Option((uint64_t)qword_257963FB0, 0, 0);
  qword_257964048 = (uint64_t)&off_251C1EA30;
  qword_257964030 = 0;
  unk_257964038 = &off_251C1EA10;
  qword_257963FB0[0] = (uint64_t)&off_251C1E970;
  unk_257964040 = &off_251C12590;
  qword_257964060 = (uint64_t)&qword_257964048;
  llvm::cl::Option::setArgStr((uint64_t)qword_257963FB0, (uint64_t *)"pass-remarks", 0xCuLL);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_257963FB0);
  *(_QWORD *)&v4 = "Enable missed optimization remarks from passes whose name match the given regular expression";
  *((_QWORD *)&v4 + 1) = 92;
  v3 = &unk_257963F90;
  v2 = 2;
  llvm::cl::Option::Option((uint64_t)qword_257964068, 0, 0);
  qword_2579640E8 = 0;
  unk_2579640F0 = &off_251C1EA10;
  qword_257964068[0] = (uint64_t)&off_251C1E970;
  qword_2579640F8 = (uint64_t)&off_251C12590;
  qword_257964100[0] = &off_251C1EA30;
  qword_257964118 = (uint64_t)qword_257964100;
  llvm::cl::Option::setArgStr((uint64_t)qword_257964068, (uint64_t *)"pass-remarks-missed", 0x13uLL);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_257964068);
  *(_QWORD *)&v4 = "Enable optimization analysis remarks from passes whose name match the given regular expression";
  *((_QWORD *)&v4 + 1) = 94;
  v3 = &unk_257963FA0;
  v2 = 2;
  v0 = llvm::cl::Option::Option((uint64_t)qword_257964120, 0, 0);
  qword_2579641A0 = 0;
  unk_2579641A8 = &off_251C1EA10;
  qword_257964120[0] = (uint64_t)&off_251C1E970;
  qword_2579641B0 = (uint64_t)&off_251C12590;
  qword_2579641B8[0] = &off_251C1EA30;
  qword_2579641D0 = (uint64_t)qword_2579641B8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"pass-remarks-analysis", 0x15uLL);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_257964120);
}

uint64_t llvm::DiagnosticInfoDebugMetadataVersion::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "ignoring debug info with an invalid version (");
  v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 104))(v3, *(unsigned int *)(a1 + 24));
  v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ") in ");
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 144))(v5, *(_QWORD *)(a1 + 16));
}

uint64_t llvm::DiagnosticInfoIgnoringInvalidDebugMetadata::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "ignoring invalid debug info in ");
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, *(_QWORD *)(a1 + 16) + 160);
}

void llvm::DiagnosticInfoDebugMetadataVersion::~DiagnosticInfoDebugMetadataVersion(llvm::DiagnosticInfoDebugMetadataVersion *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::DiagnosticInfoIgnoringInvalidDebugMetadata::~DiagnosticInfoIgnoringInvalidDebugMetadata(llvm::DiagnosticInfoIgnoringInvalidDebugMetadata *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char a2)
{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

{
  llvm::raw_ostream *v3;
  char *v4;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = (char *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, a2);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v4 + 1;
    *v4 = a2;
  }
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const void *a2, size_t a3)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2, a3);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, char *a2)
{
  llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 8), a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, const char *a2)
{
  llvm::raw_ostream *v3;
  size_t v4;
  size_t v5;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v5 = v4;
  }
  llvm::raw_ostream::write(v3, a2, v5);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unint64_t a2)
{
  write_unsigned<unsigned long>(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0, 0);
  return a1;
}

{
  llvm::write_integer(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0);
  return a1;
}

{
  write_unsigned<unsigned long>(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0, 0);
  return a1;
}

{
  llvm::write_integer(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0);
  return a1;
}

{
  llvm::write_hex(*(llvm::raw_ostream **)(a1 + 8), a2, 3, 0, 0);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, unsigned int a2)
{
  write_unsigned<unsigned long>(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0, 0);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, int a2)
{
  llvm::write_integer(*(llvm::raw_ostream **)(a1 + 8), a2, 0, 0);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, double a2)
{
  llvm::write_double(*(llvm::raw_ostream **)(a1 + 8), 0, 0, 0, a2);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::Twine *this)
{
  llvm::Twine::print(this, *(llvm::raw_ostream **)(a1 + 8));
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t ***this)
{
  llvm::raw_ostream *v3;
  size_t v4;
  const void *v5;
  size_t *ValueName;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    ValueName = (size_t *)llvm::Value::getValueName(this);
    v5 = ValueName + 2;
    v4 = *ValueName;
  }
  else
  {
    v4 = 0;
    v5 = &str_3_26;
  }
  llvm::raw_ostream::operator<<(v3, v5, v4);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v3 = *(llvm::raw_ostream **)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 160);
  v4 = a2 + 160;
  v5 = v6;
  v7 = *(_QWORD *)(v4 + 8);
  if (*(char *)(v4 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else
  {
    v4 = v5;
    v8 = v7;
  }
  llvm::raw_ostream::write(v3, (const char *)v4, v8);
  return a1;
}

uint64_t llvm::DiagnosticPrinterRawOStream::operator<<(uint64_t a1, llvm::SMDiagnostic *this)
{
  llvm::SMDiagnostic::print(this, "", *(char ***)(a1 + 8), 1, 0);
  return a1;
}

void llvm::DiagnosticPrinterRawOStream::~DiagnosticPrinterRawOStream(llvm::DiagnosticPrinterRawOStream *this)
{
  JUMPOUT(0x24BD1B3A4);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  result = 1;
  if (a3 == a2)
    return result;
  v5 = a3;
  if (!a3)
    return result;
  if (!a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) == a2)
    return 1;
  if (*(_QWORD *)(a2 + 8) == a3)
    return 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= *(_DWORD *)(a3 + 16))
    return 0;
  if (!*(_BYTE *)(a1 + 64))
  {
    v8 = *(_DWORD *)(a1 + 68) + 1;
    *(_DWORD *)(a1 + 68) = v8;
    if (v8 <= 0x20)
    {
      do
      {
        v9 = v5;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 && *(_DWORD *)(v5 + 16) >= v7);
      return v9 == a2;
    }
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a1);
  }
  if (*(_DWORD *)(v5 + 72) < *(_DWORD *)(a2 + 72))
    return 0;
  return *(_DWORD *)(v5 + 76) <= *(_DWORD *)(a2 + 76);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (a2 == a3)
    return 1;
  v5 = a1 + 24;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a1 + 24, a2);
  if (*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v6)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v6 + 8);
  v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(v5, a3);
  if (*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v9)
    v10 = 0;
  else
    v10 = *(_QWORD *)(v9 + 8);
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, v7, v10);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[65];

  v11[64] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v9 = v11;
    v10 = 0x2000000000;
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v9, *(_QWORD *)(a1 + 48), *(_QWORD *)(v2 + 24));
      *(_DWORD *)(v2 + 72) = 0;
      v3 = v10;
      if ((_DWORD)v10)
      {
        v4 = 1;
        do
        {
          v5 = (char *)v9 + 16 * v3;
          v7 = *((_QWORD *)v5 - 2);
          v6 = (uint64_t *)*((_QWORD *)v5 - 1);
          if (v6 == (uint64_t *)(*(_QWORD *)(v7 + 24) + 8 * *(unsigned int *)(v7 + 32)))
          {
            *(_DWORD *)(v7 + 76) = v4;
            LODWORD(v10) = --v3;
          }
          else
          {
            v8 = *v6;
            *((_QWORD *)v5 - 1) = v6 + 1;
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v9, v8, *(_QWORD *)(v8 + 24));
            *(_DWORD *)(v8 + 72) = v4;
            v3 = v10;
          }
          ++v4;
        }
        while (v3);
      }
      *(_DWORD *)(a1 + 68) = 0;
      *(_BYTE *)(a1 + 64) = 1;
      if (v9 != v11)
        free(v9);
    }
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v13 = a2;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  if (a3)
    v8 = *(_DWORD *)(a3 + 16) + 1;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  *(_QWORD *)(v6 + 32) = 0x400000000;
  *(_QWORD *)(v6 + 72) = -1;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(a3 + 24), v6);
  v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::FindAndConstruct((uint64_t *)(a1 + 24), &v13);
  v11 = v9 + 1;
  v10 = v9[1];
  v9[1] = v7;
  if (v10)
  {
    std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)(v9 + 1), v10);
    return *v11;
  }
  return v7;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = a2;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 0x400000000;
  *(_QWORD *)(v4 + 72) = -1;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::FindAndConstruct((uint64_t *)(a1 + 24), &v9);
  v7 = v5 + 1;
  v6 = v5[1];
  v5[1] = v4;
  if (v6)
  {
    std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100]((uint64_t)(v5 + 1), v6);
    return *v7;
  }
  return v4;
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::CalculateFromScratch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *Node;
  void *__p;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 56);
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::clear((unsigned int *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 != v6)
      {
        llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::copyFrom(*(_QWORD *)(a2 + 8), *(int **)(a2 + 16));
        llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::copyFrom(v6 + 296, (int *)(v5 + 296));
      }
      *(_BYTE *)(v6 + 592) = *(_BYTE *)(v5 + 592);
      llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(v6 + 600, v5 + 600);
      v4 = *(_QWORD *)(a1 + 56);
      v5 = a2;
    }
    v7 = operator new(8uLL);
    __p = v7;
    *v7 = 0;
    v15 = v7 + 1;
    v16 = v7 + 1;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = v5;
    v21 = v23;
    v22 = 0x100000000;
    v8 = *(_QWORD *)(v4 + 80);
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v21, v9);
    llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, (uint64_t)&v21);
    if (v21 != v23)
      free(v21);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>((uint64_t **)&__p, **(void ***)a1);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runSemiNCA((uint64_t *)&__p, a1, 0);
    *(_BYTE *)a2 = 1;
  }
  else
  {
    v10 = operator new(8uLL);
    __p = v10;
    *v10 = 0;
    v15 = v10 + 1;
    v16 = v10 + 1;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = v23;
    v22 = 0x100000000;
    v11 = *(_QWORD *)(v4 + 80);
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v21, v12);
    llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, (uint64_t)&v21);
    if (v21 != v23)
      free(v21);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>((uint64_t **)&__p, **(void ***)a1);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runSemiNCA((uint64_t *)&__p, a1, 0);
  }
  if (*(_DWORD *)(a1 + 8))
  {
    Node = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(a1, **(_QWORD **)a1);
    *(_QWORD *)(a1 + 48) = Node;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::attachNewSubtree((uint64_t)&__p, a1, *Node);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::destroyAll((uint64_t)&v17);
  MEMORY[0x24BD1B398](v17, 8);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  _BOOL8 result;
  const llvm::BasicBlock *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  result = 1;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v7 = (const llvm::BasicBlock *)*((_QWORD *)a3 + 5);
    v8 = *((_QWORD *)a2 + 5);
    v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 24, (uint64_t)v7);
    if (*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 10) == v9 || !*(_QWORD *)(v9 + 8))
    {
      return 1;
    }
    else
    {
      v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 24, v8);
      if (*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 10) == v10)
      {
        return 0;
      }
      else
      {
        v11 = v10;
        result = 0;
        if (a2 != a3 && *(_QWORD *)(v11 + 8))
        {
          v12 = *((unsigned __int8 *)a2 + 16);
          if (v12 == 33 || v12 == 39 || *((_BYTE *)a3 + 16) == 83)
          {
            return llvm::DominatorTree::dominates(this, a2, v7);
          }
          else if ((const llvm::BasicBlock *)v8 == v7)
          {
            return llvm::Instruction::comesBefore((uint64_t)a2, (uint64_t)a3);
          }
          else
          {
            return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, v8, (uint64_t)v7);
          }
        }
      }
    }
  }
  return result;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  const llvm::BasicBlock *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13[2];

  v6 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v7 = (char *)this + 24;
  v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 24, (uint64_t)a3);
  if (*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 10) == v8 || !*(_QWORD *)(v8 + 8))
    return 1;
  v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)v7, (uint64_t)v6);
  if (*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 10) == v9)
    return 0;
  if (!*(_QWORD *)(v9 + 8) || v6 == a3)
    return 0;
  if (*((_BYTE *)a2 + 16) != 33)
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, (uint64_t)v6, (uint64_t)a3);
  v12 = *((_QWORD *)a2 - 12);
  v13[0] = (uint64_t)v6;
  v13[1] = v12;
  return llvm::DominatorTree::dominates((uint64_t)this, v13, (uint64_t)a3);
}

BOOL llvm::DominatorTree::dominates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::BasicBlock *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;

  v5 = *a2;
  v4 = (llvm::BasicBlock *)a2[1];
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, (uint64_t)v4, a3);
  if (!result)
    return result;
  if (llvm::BasicBlock::getSinglePredecessor(v4))
    return 1;
  v7 = *((_QWORD *)v4 + 1);
  if (!v7)
    return 1;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v8 && v9 >= 0x1C;
    if (v10 && v9 - 29 <= 0xA)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return 1;
  }
  v12 = 0;
LABEL_16:
  v13 = *(_QWORD *)(v8 + 40);
  if (v13 == v5)
  {
    if (v12)
      return 0;
    v12 = 1;
LABEL_21:
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        return 1;
      v8 = *(_QWORD *)(v7 + 24);
      v14 = *(unsigned __int8 *)(v8 + 16);
      if (v8)
        v15 = v14 >= 0x1C;
      else
        v15 = 0;
      if (v15 && v14 - 29 < 0xB)
        goto LABEL_16;
    }
  }
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, (uint64_t)v4, v13);
  if (result)
    goto LABEL_21;
  return result;
}

uint64_t llvm::DominatorTree::dominates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a3 + 24);
  v4 = (uint64_t *)(v3 + 40);
  if (!v3 || *(_BYTE *)(v3 + 16) != 83)
    return llvm::DominatorTree::dominates(a1, a2, *v4);
  v5 = *(_DWORD *)(v3 + 20);
  if (*(_QWORD *)(v3 + 40) != a2[1]
    || ((v5 & 0x40000000) != 0 ? (v6 = *(_QWORD *)(v3 - 8)) : (v6 = v3 - 32 * (v5 & 0x7FFFFFF)),
        *(_QWORD *)(v6 + 32 * *(unsigned int *)(v3 + 60) + 8 * ((unint64_t)(a3 - v6) >> 5)) != *a2))
  {
    if ((v5 & 0x40000000) != 0)
      v7 = *(_QWORD *)(v3 - 8);
    else
      v7 = v3 - 32 * (v5 & 0x7FFFFFF);
    v4 = (uint64_t *)(v7 + 32 * *(unsigned int *)(v3 + 60) + 8 * ((unint64_t)(a3 - v7) >> 5));
    return llvm::DominatorTree::dominates(a1, a2, *v4);
  }
  return 1;
}

uint64_t llvm::DominatorTree::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  result = 1;
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (v7 && *(_BYTE *)(v7 + 16) == 83)
    {
      v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD *)(v7 - 8);
      else
        v9 = v7 - 32 * (v8 & 0x7FFFFFF);
      v10 = (uint64_t *)(v9 + 32 * *(unsigned int *)(v7 + 60) + 8 * ((unint64_t)(a3 - v9) >> 5));
    }
    else
    {
      v10 = (uint64_t *)(v7 + 40);
    }
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *v10;
    v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a1 + 24, *v10);
    if (*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v13 || !*(_QWORD *)(v13 + 8))
      return 1;
    v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a1 + 24, v11);
    if (*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40) == v14 || !*(_QWORD *)(v14 + 8))
      return 0;
    if (*(_BYTE *)(a2 + 16) == 33)
    {
      v15 = *(_QWORD *)(a2 - 96);
      v16[0] = v11;
      v16[1] = v15;
      return llvm::DominatorTree::dominates(a1, v16, a3);
    }
    if (v11 != v12)
      return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, v11, v12);
    return *(_BYTE *)(v7 + 16) == 83 || llvm::Instruction::comesBefore(a2, v7);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::destroyAll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = *(_QWORD *)a1 + 56;
    do
    {
      if ((*(_QWORD *)(v3 - 56) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runSemiNCA(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t i;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[34];

  v44[32] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1] - *a1;
  if ((v5 >> 3) >= 2)
  {
    v6 = 1;
    do
    {
      v42 = *(void **)(v4 + 8 * v6);
      v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v42);
      v4 = *a1;
      v7[4] = *(_QWORD *)(*a1 + 8 * *((unsigned int *)v7 + 3));
      ++v6;
    }
    while ((v5 >> 3) != v6);
  }
  v42 = v44;
  v43 = 0x2000000000;
  v8 = (v5 >> 3) - 1;
  if (v8 >= 2)
  {
    v34 = v5 >> 3;
    v35 = v5;
    v9 = v5 >> 3;
    do
    {
      v36 = v8;
      v40 = *(_QWORD *)(*a1 + 8 * v8);
      v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v40);
      *((_DWORD *)v10 + 4) = *((_DWORD *)v10 + 3);
      v11 = *((unsigned int *)v10 + 12);
      if ((_DWORD)v11)
      {
        v12 = v10;
        v13 = (uint64_t *)v10[5];
        v14 = &v13[v11];
        do
        {
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(a1[3], *((_DWORD *)a1 + 10), *v13, &v41))
          {
            v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a2 + 24, *v13);
            if (*(_QWORD *)(a2 + 24) + 16 * *(unsigned int *)(a2 + 40) == v15
              || (v16 = *(_QWORD *)(v15 + 8)) == 0
              || *(_DWORD *)(v16 + 16) >= a3)
            {
              v41 = (_QWORD *)*v13;
              v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v41);
              if (*((_DWORD *)v17 + 3) >= v9)
              {
                v19 = v17 + 1;
                do
                {
                  v20 = v43;
                  if (v43 >= (unint64_t)HIDWORD(v43))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, v43 + 1, 8);
                    v20 = v43;
                  }
                  *((_QWORD *)v42 + v20) = v19;
                  LODWORD(v43) = v43 + 1;
                  v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)(*a1 + 8 * *((unsigned int *)v19 + 1)));
                  v19 = v21 + 1;
                }
                while (*((_DWORD *)v21 + 3) >= v9);
                v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), v21 + 3)+ 1;
                v23 = v43;
                do
                {
                  v24 = *((_QWORD *)v42 + v23 - 1);
                  LODWORD(v43) = v23 - 1;
                  *(_DWORD *)(v24 + 4) = *((_DWORD *)v19 + 1);
                  v18 = (uint64_t *)(v24 + 16);
                  v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)(v24 + 16));
                  if (*((_DWORD *)v22 + 2) >= *((_DWORD *)v25 + 4))
                    v22 = v25 + 1;
                  else
                    *v18 = v19[2];
                  v23 = v43;
                  v19 = (_QWORD *)v24;
                }
                while ((_DWORD)v43);
              }
              else
              {
                v18 = v17 + 3;
              }
              v26 = *v18;
              v39 = v26;
              v41 = 0;
              v27 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(a1[3], *((_DWORD *)a1 + 10), v26, &v41);
              v28 = v41;
              if ((v27 & 1) == 0)
              {
                v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::InsertIntoBucketImpl<llvm::BasicBlock *>((uint64_t)(a1 + 3), &v39, v41);
                *v28 = v26;
                *(_OWORD *)(v28 + 5) = 0u;
                *(_OWORD *)(v28 + 1) = 0u;
                *(_OWORD *)(v28 + 3) = 0u;
                *(_OWORD *)(v28 + 7) = 0u;
                v28[5] = v28 + 7;
                *((_DWORD *)v28 + 13) = 2;
              }
              v29 = *((_DWORD *)v28 + 4);
              if (v29 < *((_DWORD *)v12 + 4))
                *((_DWORD *)v12 + 4) = v29;
            }
          }
          ++v13;
        }
        while (v13 != v14);
      }
      LODWORD(v9) = v36;
      v8 = v36 - 1;
    }
    while (((v36 - 1) & 0xFFFFFFFELL) != 0);
    if (v34 >= 3)
    {
      v30 = 2;
      do
      {
        v41 = *(_QWORD **)(*a1 + 8 * v30);
        v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v41);
        v32 = *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)(*a1 + 8 * *((unsigned int *)v31 + 4)))+ 2);
        for (i = v31[4];
              ;
              i = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v40)[4])
        {
          v40 = i;
          if (*((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v40)+ 2) <= v32)break;
        }
        v31[4] = i;
        ++v30;
      }
      while (v30 != (v35 >> 3));
    }
  }
  if (v42 != v44)
    free(v42);
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::attachNewSubtree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t NodeForBlock;
  uint64_t v14;

  v6 = a1 + 24;
  result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct(a1 + 24, (uint64_t *)(*(_QWORD *)a1 + 8));
  *(_QWORD *)(result + 32) = a3;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v8 != 8)
  {
    v9 = v8 >> 3;
    v10 = 1;
    do
    {
      v14 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v10);
      result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::FindAndConstruct((uint64_t *)(a2 + 24), &v14);
      if (!*(_QWORD *)(result + 8))
      {
        v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::find(v6, v14);
        if (*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40) == v11)
          v12 = 0;
        else
          v12 = *(_QWORD *)(v11 + 32);
        NodeForBlock = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getNodeForBlock(a1, v12, a2);
        result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a2, v14, NodeForBlock);
      }
      ++v10;
    }
    while (v9 != v10);
  }
  return result;
}

void llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::copyFrom(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;

  llvm::DenseMapBase<llvm::SmallDenseMap<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,4u,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>,llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::GraphDiff<llvm::BasicBlock *,false>::DeletesInserts>>::destroyAll(a1);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 8), 8);
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  v5 = *a2;
  v6 = 1;
  if ((*a2 & 1) == 0 && a2[4] >= 5)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v7 = 4;
    else
      v7 = a2[4];
    *(_QWORD *)(a1 + 8) = operator new(8 * (v7 + 8 * v7), (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v7;
    v5 = *a2;
    v6 = *(_DWORD *)a1 & 1;
  }
  v8 = 0;
  v9 = v6 | v5 & 0xFFFFFFFE;
  *(_DWORD *)a1 = v9;
  *(_DWORD *)(a1 + 4) = a2[1];
  v10 = (uint64_t *)(a1 + 8);
  if ((v9 & 1) != 0)
    goto LABEL_12;
  while (v8 < *(unsigned int *)(a1 + 16))
  {
    v11 = *v10;
    while (1)
    {
      if ((*a2 & 1) != 0)
        v12 = a2 + 2;
      else
        v12 = (int *)*((_QWORD *)a2 + 1);
      *(_QWORD *)(v11 + 72 * v8) = *(_QWORD *)&v12[18 * v8];
      v13 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 & 1) != 0)
      {
        v15 = v10[9 * v8] | 0x1000;
        v14 = a1 + 8;
      }
      else
      {
        v14 = *v10;
        v15 = *(_QWORD *)(*v10 + 72 * v8) | 0x1000;
      }
      if (v15 != -4096)
      {
        v16 = 0;
        v17 = 0;
        v18 = v14 + 72 * v8 + 8;
        v19 = (int *)*((_QWORD *)a2 + 1);
        if ((*(_BYTE *)a2 & 1) != 0)
          v19 = a2 + 2;
        v20 = (uint64_t)&v19[18 * v8 + 2];
        do
        {
          v21 = v16;
          v22 = (_QWORD *)(v18 + 32 * v17);
          v23 = v20 + 32 * v17;
          *v22 = v22 + 2;
          v22[1] = 0x200000000;
          if (*(_DWORD *)(v23 + 8))
            llvm::SmallVectorImpl<llvm::BasicBlock *>::operator=((uint64_t)v22, v23);
          v16 = 1;
          v17 = 1;
        }
        while ((v21 & 1) == 0);
        v13 = *(_DWORD *)a1;
      }
      ++v8;
      if ((v13 & 1) == 0)
        break;
LABEL_12:
      v11 = a1 + 8;
      if (v8 >= 4)
        return;
    }
  }
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::runDFS<false,BOOL (*)(llvm::BasicBlock*,llvm::BasicBlock*)>(uint64_t **a1, void *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  void *__src;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[66];

  v36[64] = *MEMORY[0x24BDAC8D0];
  v29 = a2;
  __src = a2;
  v34 = v36;
  v35 = 0x4000000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v34, &__src, &v32);
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>((uint64_t)a1[3], *((_DWORD *)a1 + 10), (uint64_t)a2, &__src))*((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), (uint64_t *)&v29)+ 3) = 0;
  v4 = v35;
  if ((_DWORD)v35)
  {
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)v34 + v4 - 1);
      LODWORD(v35) = v4 - 1;
      v28 = v6;
      v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v28);
      if (!*((_DWORD *)v7 + 2))
      {
        *((_DWORD *)v7 + 4) = ++v5;
        *((_DWORD *)v7 + 2) = v5;
        v7[3] = v6;
        v9 = a1[1];
        v8 = (unint64_t)a1[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = v9 - *a1;
          if ((unint64_t)(v11 + 1) >> 61)
            abort();
          v12 = v8 - (_QWORD)*a1;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 2), v14);
          else
            v15 = 0;
          v16 = (uint64_t *)&v15[8 * v11];
          *v16 = v6;
          v10 = (char *)(v16 + 1);
          v18 = (char *)*a1;
          v17 = (char *)a1[1];
          if (v17 != (char *)*a1)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *--v16 = v19;
            }
            while (v17 != v18);
            v17 = (char *)*a1;
          }
          *a1 = v16;
          a1[1] = (uint64_t *)v10;
          a1[2] = (uint64_t *)&v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v9 = v6;
          v10 = (char *)(v9 + 1);
        }
        a1[1] = (uint64_t *)v10;
        v20 = v28;
        llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getChildren<false>((_QWORD **)&__src, v28, (uint64_t)a1[6]);
        v21 = (uint64_t *)__src;
        if (v32)
        {
          v22 = 8 * v32;
          while (1)
          {
            v23 = *v21;
            v27 = v23;
            v30 = 0;
            v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>((uint64_t)a1[3], *((_DWORD *)a1 + 10), v23, &v30);
            v25 = v30;
            if (v24)
              v26 = v30 == (char *)&a1[3][9 * *((unsigned int *)a1 + 10)];
            else
              v26 = 1;
            if (v26 || !*((_DWORD *)v30 + 2))
            {
              v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct((uint64_t)(a1 + 3), &v27);
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v34, v23);
              *((_DWORD *)v25 + 3) = v5;
            }
            else if (v23 == v20)
            {
              goto LABEL_33;
            }
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v25 + 10, v20);
LABEL_33:
            ++v21;
            v22 -= 8;
            if (!v22)
            {
              v21 = (uint64_t *)__src;
              break;
            }
          }
        }
        if (v21 != &v33)
          free(v21);
      }
      v4 = v35;
    }
    while ((_DWORD)v35);
  }
  if (v34 != v36)
    free(v34);
}

_BYTE *llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getChildren<false>(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  _QWORD v11[4];
  _QWORD v12[4];

  if (a3)
    return llvm::GraphDiff<llvm::BasicBlock *,false>::getChildren<false>(*(_QWORD *)(a3 + 8), a2, a1);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5 == a2 + 40)
  {
    v8 = 0;
  }
  else
  {
    v6 = v5 - 24;
    if (v5)
      v7 = v5 - 24;
    else
      v7 = 0;
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
      v8 = 0;
    else
      v8 = v6;
  }
  v9 = llvm::GraphTraits<llvm::BasicBlock *>::child_end(a2);
  *a1 = a1 + 2;
  a1[1] = (_QWORD *)0x800000000;
  v12[0] = v9;
  v12[1] = v10;
  v12[2] = v9;
  v12[3] = v10;
  v11[0] = v8;
  v11[1] = 0;
  v11[2] = v8;
  v11[3] = 0;
  llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::reverse_iterator<llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>((unsigned int *)a1, (uint64_t)v12, (uint64_t)v11);
  v12[0] = 0;
  result = std::remove[abi:nn180100]<llvm::BasicBlock **,decltype(nullptr)>(*a1, &(*a1)[*((unsigned int *)a1 + 2)]);
  *((_DWORD *)a1 + 2) = (unint64_t)(result - (_BYTE *)*a1) >> 3;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::InsertIntoBucketImpl<llvm::BasicBlock *>(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    v5[5] = v5 + 7;
    *((_DWORD *)v5 + 13) = 2;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::InsertIntoBucketImpl<llvm::BasicBlock *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4 + 40;
      v13 = 72 * v3;
      do
      {
        v14 = *(_QWORD *)(v12 - 40);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          v16 = v22;
          *v22 = *(_QWORD *)(v12 - 40);
          v17 = *(_OWORD *)(v12 - 32);
          v18 = *(_OWORD *)(v12 - 16);
          v15[5] = v16 + 7;
          v19 = (uint64_t)(v15 + 5);
          *(_OWORD *)(v19 - 32) = v17;
          *(_OWORD *)(v19 - 16) = v18;
          *(_QWORD *)(v19 + 8) = 0x200000000;
          if (*(_DWORD *)(v12 + 8))
            llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(v19, v12);
          ++*(_DWORD *)(a1 + 8);
          if (v12 + 16 != *(_QWORD *)v12)
            free(*(void **)v12);
        }
        v12 += 72;
        v13 -= 72;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 72 * v20;
    do
    {
      *result = -4096;
      result += 9;
      v21 -= 72;
    }
    while (v21);
  }
  return result;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getNodeForBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t NodeForBlock;

  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(a3 + 24, a2);
  if (*(_QWORD *)(a3 + 24) + 16 * *(unsigned int *)(a3 + 40) == v6 || (result = *(_QWORD *)(v6 + 8)) == 0)
  {
    v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::find(a1 + 24, a2);
    if (*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40) == v8)
      v9 = 0;
    else
      v9 = *(_QWORD *)(v8 + 32);
    NodeForBlock = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::getNodeForBlock(a1, v9, a3);
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a3, a2, NodeForBlock);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>,llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::InfoRec>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 16);
}

uint64_t _GLOBAL__sub_I_Dominators_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&qword_2579641E0, 0, 0);
  qword_257964260 = 0;
  byte_257964271 = 0;
  qword_257964268 = (uint64_t)&off_251C12500;
  qword_2579641E0 = (uint64_t)off_251C13488;
  qword_257964278 = (uint64_t)&off_251C12520;
  qword_257964280 = (uint64_t)&off_251C134F0;
  qword_257964298 = (uint64_t)&qword_257964280;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"verify-dom-info", 0xFuLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_257964260, (uint64_t)&qword_2579641E0, _MergedGlobals_31);
  word_2579641EA = word_2579641EA & 0xFF9F | 0x20;
  qword_257964200 = (uint64_t)"Verify dominator info (time consuming)";
  unk_257964208 = 38;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579641E0);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_2579641E0, &dword_24A800000);
}

uint64_t llvm::classifyEHPersonality(uint64_t this, const llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v3;
  uint64_t ValueName;

  if (this)
  {
    v2 = llvm::Value::stripPointerCasts((llvm::Value *)this);
    if (*((unsigned __int8 *)v2 + 16) <= 3u)
    {
      v3 = *((_QWORD *)v2 + 3);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 8) == 14 && (*((_BYTE *)v2 + 23) & 0x10) != 0)
        {
          ValueName = llvm::Value::getValueName((uint64_t ***)v2);
          switch(*(_QWORD *)ValueName)
          {
            case 0x10:
              if ((*(_QWORD *)(ValueName + 16) != 0x5F7470656378655FLL
                 || *(_QWORD *)(ValueName + 24) != 0x3372656C646E6168)
                && (*(_QWORD *)(ValueName + 16) != 0x5F7470656378655FLL
                 || *(_QWORD *)(ValueName + 24) != 0x3472656C646E6168))
              {
                return 0;
              }
              return 7;
            case 0x12:
              if (*(_QWORD *)(ValueName + 16) != 0x6172467878435F5FLL
                || *(_QWORD *)(ValueName + 24) != 0x656C646E6148656DLL
                || *(_WORD *)(ValueName + 32) != 13170)
              {
                return 0;
              }
              return 9;
            case 0x13:
              if (*(_QWORD *)(ValueName + 16) == 0x43737365636F7250
                && *(_QWORD *)(ValueName + 24) == 0x747065637845524CLL
                && *(_QWORD *)(ValueName + 27) == 0x6E6F697470656378)
              {
                return 10;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x5F68655F74737572
                && *(_QWORD *)(ValueName + 24) == 0x6C616E6F73726570
                && *(_QWORD *)(ValueName + 27) == 0x7974696C616E6F73)
              {
                return 11;
              }
              return 0;
            case 0x14:
              if (*(_QWORD *)(ValueName + 16) == 0x65705F7878675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_DWORD *)(ValueName + 32) == 813064057)
              {
                return 4;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x65705F6363675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_DWORD *)(ValueName + 32) == 813064057)
              {
                return 2;
              }
              if (*(_QWORD *)(ValueName + 16) != 0x636570735F435F5FLL
                || *(_QWORD *)(ValueName + 24) != 0x6E61685F63696669
                || *(_DWORD *)(ValueName + 32) != 1919249508)
              {
                return 0;
              }
              return 8;
            case 0x15:
              if (*(_QWORD *)(ValueName + 16) == 0x655F74616E675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x6E6F737265705F68
                && *(_QWORD *)(ValueName + 29) == 0x7974696C616E6F73)
              {
                return 1;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x65705F7878675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_QWORD *)(ValueName + 29) == 0x306A735F7974696CLL)
              {
                return 5;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x65705F6363675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_QWORD *)(ValueName + 29) == 0x306A735F7974696CLL)
              {
                return 3;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x705F636A626F5F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x696C616E6F737265
                && *(_QWORD *)(ValueName + 29) == 0x30765F7974696C61)
              {
                return 6;
              }
              return 0;
            case 0x16:
              if (*(_QWORD *)(ValueName + 16) == 0x65705F7878675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_QWORD *)(ValueName + 30) == 0x306865735F797469)
              {
                return 4;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x65705F6363675F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x74696C616E6F7372
                && *(_QWORD *)(ValueName + 30) == 0x306865735F797469)
              {
                return 2;
              }
              if (*(_QWORD *)(ValueName + 16) == 0x5F7878636C785F5FLL
                && *(_QWORD *)(ValueName + 24) == 0x6C616E6F73726570
                && *(_QWORD *)(ValueName + 30) == 0x31765F7974696C61)
              {
                return 13;
              }
              break;
            case 0x19:
              if (*(_QWORD *)(ValueName + 16) != 0x61775F7878675F5FLL
                || *(_QWORD *)(ValueName + 24) != 0x6F737265705F6D73
                || *(_QWORD *)(ValueName + 32) != 0x765F7974696C616ELL
                || *(_BYTE *)(ValueName + 40) != 48)
              {
                return 0;
              }
              return 12;
            default:
              return 0;
          }
        }
      }
    }
    return 0;
  }
  return this;
}

void llvm::colorEHFunclets(llvm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Instruction *v30;
  uint64_t v31;
  int v32;
  llvm::Instruction *v33;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  int NumSuccessors;
  int v40;
  int j;
  uint64_t Successor;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[33];

  v48[32] = *MEMORY[0x24BDAC8D0];
  v46 = v48;
  v47 = 0x1000000000;
  v4 = *((_QWORD *)this + 10);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v46, v5, v5);
  v6 = v47;
  if ((_DWORD)v47)
  {
    while (1)
    {
      v7 = (char *)v46 + 16 * v6;
      v9 = *((_QWORD *)v7 - 2);
      v8 = *((_QWORD *)v7 - 1);
      LODWORD(v47) = v6 - 1;
      for (i = *(_QWORD *)(v9 + 48); ; i = *(_QWORD *)(i + 8))
      {
        v11 = i - 24;
        if (!i)
          v11 = 0;
        if (*(_BYTE *)(v11 + 16) != 83)
          break;
      }
      v12 = *(unsigned __int8 *)(i - 8) - 38;
      v13 = v12 > 0x38;
      v14 = (1 << v12) & 0x100060000000001;
      v15 = v13 || v14 == 0;
      v16 = v15 ? v8 : v9;
      v45 = 0;
      v17 = *(_DWORD *)(a2 + 16);
      v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a2, v17, v9, &v45);
      v19 = v45;
      if ((v18 & 1) == 0)
        break;
      v21 = v45 + 1;
      v20 = v45[1];
      if ((v20 & 4) != 0)
      {
        v22 = 0;
        v23 = *(_QWORD **)(v20 & 0xFFFFFFFFFFFFFFF8);
        v24 = &v23[*(unsigned int *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8)];
        goto LABEL_25;
      }
LABEL_24:
      v24 = &v21[v20 > 7];
      v22 = 1;
      v23 = v21;
LABEL_25:
      if (v23 != v24)
      {
        while (*v23 != v16)
        {
          if (++v23 == v24)
          {
            v23 = v24;
            break;
          }
        }
      }
      if (v22)
        v26 = (uint64_t)&v21[v20 > 7];
      else
        v26 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v23 != (_QWORD *)v26)
        goto LABEL_33;
      if (v20 > 7)
      {
        if (v22)
        {
          v27 = v20 & 0xFFFFFFFFFFFFFFF8;
          v28 = operator new();
          *(_QWORD *)v28 = v28 + 16;
          *(_QWORD *)(v28 + 8) = 0x400000000;
          *v21 = v28 | 4;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8), v27);
          v20 = *v21;
        }
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8), v16);
      }
      else
      {
        *v21 = v16 & 0xFFFFFFFFFFFFFFFBLL;
      }
      v29 = *(_QWORD *)(v9 + 40);
      if (v29 == v9 + 40)
        goto LABEL_33;
      v30 = (llvm::Instruction *)(v29 - 24);
      if (v29)
        v31 = v29 - 24;
      else
        v31 = 0;
      v32 = *(unsigned __int8 *)(v31 + 16);
      if ((v32 - 40) >= 0xFFFFFFF5)
        v33 = v30;
      else
        v33 = 0;
      if (*((_BYTE *)v33 + 16) == 37 && (v32 - 40) >= 0xFFFFFFF5)
      {
        v35 = *(_QWORD *)(*((_QWORD *)v33 - 8) - 32);
        v36 = *(_DWORD *)(v35 + 20);
        if ((v36 & 0x40000000) != 0)
          v37 = *(uint64_t **)(v35 - 8);
        else
          v37 = (uint64_t *)(v35 - 32 * (v36 & 0x7FFFFFF));
        v38 = *v37;
        v16 = v5;
        if (*(_BYTE *)(v38 + 16) != 20)
          v16 = *(_QWORD *)(v38 + 40);
LABEL_58:
        NumSuccessors = llvm::Instruction::getNumSuccessors(v30);
        if (NumSuccessors)
        {
          v40 = NumSuccessors;
          for (j = 0; j != v40; ++j)
          {
            Successor = llvm::Instruction::getSuccessor(v30);
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v46, Successor, v16);
          }
        }
        goto LABEL_33;
      }
      if ((v32 - 29) <= 0xA)
        goto LABEL_58;
LABEL_33:
      v6 = v47;
      if (!(_DWORD)v47)
        goto LABEL_65;
    }
    v25 = *(_DWORD *)(a2 + 8);
    if (4 * v25 + 4 >= 3 * v17)
    {
      v43 = 2 * v17;
      v44 = a2;
    }
    else
    {
      if (v17 + ~v25 - *(_DWORD *)(a2 + 12) > v17 >> 3)
      {
LABEL_21:
        ++*(_DWORD *)(a2 + 8);
        if (*v19 != -4096)
          --*(_DWORD *)(a2 + 12);
        v20 = 0;
        *v19 = v9;
        v19[1] = 0;
        v21 = v19 + 1;
        goto LABEL_24;
      }
      v44 = a2;
      v43 = v17;
    }
    llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::grow(v44, v43);
    v45 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v9, &v45);
    v19 = v45;
    goto LABEL_21;
  }
LABEL_65:
  if (v46 != v48)
    free(v46);
}

uint64_t *llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x24BD1B3A4](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

_QWORD *llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (uint64_t *)(v4 + 8);
      v13 = 16 * v3;
      do
      {
        v14 = *(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(v12 - 1);
          v15[1] = *v12;
          *v12 = 0;
          ++*(_DWORD *)(a1 + 8);
          llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector(v12);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::convertStrToRoundingMode(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = 0;
  switch(a2)
  {
    case 12:
      if (*a1 ^ 0x70752E646E756F72 | *((unsigned int *)a1 + 2) ^ 0x64726177)
        result = 0;
      else
        result = 258;
      break;
    case 13:
      v4 = *a1;
      v5 = *(uint64_t *)((char *)a1 + 5);
      if (v4 != 0x79642E646E756F72 || v5 != 0x63696D616E79642ELL)
        goto LABEL_37;
      result = 263;
      break;
    case 14:
      v7 = *a1;
      v8 = *(uint64_t *)((char *)a1 + 6);
      if (v7 != 0x6F642E646E756F72 || v8 != 0x647261776E776F64)
        goto LABEL_37;
      result = 259;
      break;
    case 15:
      v10 = *a1;
      v11 = *(uint64_t *)((char *)a1 + 7);
      if (v10 != 0x6F742E646E756F72 || v11 != 0x7473657261656E6FLL)
        goto LABEL_37;
      result = 257;
      break;
    case 16:
      v14 = *a1;
      v13 = a1[1];
      v16 = v14 == 0x6F742E646E756F72 && v13 == 0x6F72657A64726177;
      result = (v16 << 8);
      break;
    case 19:
      v17 = *a1;
      v18 = a1[1];
      v19 = *(uint64_t *)((char *)a1 + 11);
      if (v17 == 0x6F742E646E756F72 && v18 == 0x617473657261656ELL && v19 == 0x7961776174736572)
        result = 260;
      else
LABEL_37:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::convertRoundingModeToStr@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  a2[16] = 0;
  switch((int)result)
  {
    case 0:
      result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.towardzero");
      break;
    case 1:
      result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.tonearest");
      break;
    case 2:
      result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.upward");
      break;
    case 3:
      result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.downward");
      break;
    case 4:
      result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.tonearestaway");
      break;
    case 7:
      result = std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "round.dynamic");
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>(uint64_t a1, char *__s)
{
  size_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v4 = strlen(__s);
    *(_QWORD *)a1 = __s;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_QWORD *)a1 = __s;
    *(_QWORD *)(a1 + 8) = strlen(__s);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t llvm::convertStrToExceptionBehavior(_QWORD *a1, uint64_t a2)
{
  if (a2 == 16)
  {
    if (*a1 == 0x7470656378657066 && a1[1] == 0x7061727479616D2ELL)
      return 257;
    return 0;
  }
  if (a2 != 15)
    return 0;
  if (*a1 == 0x7470656378657066 && *(_QWORD *)((char *)a1 + 7) == 0x65726F6E67692E74)
    return 256;
  if (*a1 ^ 0x7470656378657066 | *(_QWORD *)((char *)a1 + 7) ^ 0x7463697274732E74)
    return 0;
  return 258;
}

uint64_t llvm::convertExceptionBehaviorToStr@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char *v2;

  *a2 = 0;
  a2[16] = 0;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      return std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, "fpexcept.maytrap");
    if ((_DWORD)result != 2)
      return result;
    v2 = "fpexcept.strict";
  }
  else
  {
    v2 = "fpexcept.ignore";
  }
  return std::optional<llvm::StringRef>::operator=[abi:nn180100]<char const(&)[14],void>((uint64_t)a2, v2);
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  llvm::ValueSymbolTable *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t *ValueName;
  uint64_t v12;

  if (a1 != a2)
  {
    v6 = a1 - 72;
    v7 = *(llvm::ValueSymbolTable **)(a1 + 32);
    v8 = *(_QWORD *)(a2 + 32);
    if (v7 == (llvm::ValueSymbolTable *)v8)
    {
      while (a3 != a4)
      {
        v12 = a3 - 24;
        if (!a3)
          v12 = 0;
        llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((_QWORD *)(v12 + 40), (_QWORD *)(v12 + 56), v6);
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
    else
    {
      while (a3 != a4)
      {
        if (a3)
          v9 = a3 - 24;
        else
          v9 = 0;
        v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
        if (v8 && v10)
        {
          ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v9);
          llvm::StringMapImpl::RemoveKey(v8, (uint64_t *)((char *)ValueName + *(unsigned int *)(v8 + 20)), *ValueName);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::setSymTabObject<llvm::Function *>((_QWORD *)(v9 + 40), (_QWORD *)(v9 + 56), v6);
        if (v7)
        {
          if (v10)
            llvm::ValueSymbolTable::reinsertValue(v7, (uint64_t ***)v9);
        }
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
  }
}

uint64_t llvm::Argument::hasPassPointeeByValueCopyAttr(llvm::Argument *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v1)
    return 0;
  v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8))
    return 0;
  v3 = v1 + 40;
  v4 = *(_QWORD *)(v3 + 8 * v2);
  if (!v4 || (*(_BYTE *)(v4 + 20) & 0x40) == 0)
  {
    v5 = *(_QWORD *)(v3 + 8 * v2);
    if (!v5 || (*(_BYTE *)(v5 + 21) & 1) == 0)
    {
      v6 = *(_QWORD *)(v3 + 8 * v2);
      if (v6)
        return (*(unsigned __int8 *)(v6 + 21) >> 1) & 1;
      return 0;
    }
  }
  return 1;
}

unint64_t llvm::Argument::getPassPointeeByValueCopySize(llvm::Argument *this, const llvm::DataLayout *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  llvm::Type *MemoryParamAllocType;
  const char *v7;
  unint64_t TypeAllocSize;

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v3 && (v4 = *((_DWORD *)this + 8) + 2, v4 < *(_DWORD *)(v3 + 8)))
    v5 = *(_QWORD *)(v3 + 8 * v4 + 40);
  else
    v5 = 0;
  MemoryParamAllocType = (llvm::Type *)getMemoryParamAllocType(v5);
  if (!MemoryParamAllocType)
    return 0;
  TypeAllocSize = llvm::DataLayout::getTypeAllocSize(a2, MemoryParamAllocType);
  if ((_BYTE)v7)
  return TypeAllocSize;
}

uint64_t getMemoryParamAllocType(uint64_t result)
{
  uint64_t v1;
  uint64_t EnumAttribute;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  if (result)
  {
    v1 = result;
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 70);
    if (!v3 || !EnumAttribute || (result = *(_QWORD *)(EnumAttribute + 16)) == 0)
    {
      v4 = llvm::AttributeSetNode::findEnumAttribute(v1, 69);
      if (!v5 || !v4 || (result = *(_QWORD *)(v4 + 16)) == 0)
      {
        v6 = llvm::AttributeSetNode::findEnumAttribute(v1, 73);
        if (!v7 || !v6 || (result = *(_QWORD *)(v6 + 16)) == 0)
        {
          v8 = llvm::AttributeSetNode::findEnumAttribute(v1, 72);
          if (!v9 || !v8 || (result = *(_QWORD *)(v8 + 16)) == 0)
          {
            v10 = llvm::AttributeSetNode::findEnumAttribute(v1, 74);
            result = 0;
            if (v11)
            {
              if (v10)
                return *(_QWORD *)(v10 + 16);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Argument::hasStructRetAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v3 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v3 + 21) >> 2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = (llvm::Value *)(a2 - 56);
  else
    v3 = 0;
  llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(a1, v3);
  v4 = *((_QWORD *)v3 + 7);
  v5 = (_QWORD *)*((_QWORD *)v3 + 8);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 8) = 0;
  llvm::Function::~Function(v3);
  llvm::User::operator delete(v6);
  return v2;
}

uint64_t llvm::Function::Function(uint64_t a1, uint64_t a2, int a3, llvm::Type *a4, const llvm::Twine *a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t ValueName;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a1 - 8);
  else
    v11 = a1 - 32 * (v10 & 0x7FFFFFF);
  if ((_DWORD)a4 == -1)
  {
    if (a6)
      a4 = (llvm::Type *)*(unsigned int *)(a6 + 268);
    else
      a4 = 0;
  }
  llvm::GlobalValue::GlobalValue(a1, (llvm::PointerType **)a2, 0, v11, 0, a3, a5, a4);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v12 = *(_DWORD *)(a1 + 32) & 0x1FFFF;
  *(_DWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = (*(_DWORD *)(a2 + 12) - 1);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 32) = v12;
  if (!*(_BYTE *)(***(_QWORD ***)a1 + 2720))
  {
    v13 = (_QWORD *)operator new();
    v14 = dword_257964320;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0x1000000000;
    v13[3] = v14;
    std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100]((uint64_t *)(a1 + 104), (uint64_t)v13);
  }
  if (*(_DWORD *)(a2 + 12) != 1)
    *(_WORD *)(a1 + 18) = 1;
  if (a6)
    llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::insert(a6 + 24, (uint64_t *)(a6 + 24), a1);
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0
    && (ValueName = llvm::Value::getValueName((uint64_t ***)a1), *(_QWORD *)ValueName >= 5uLL))
  {
    v17 = bswap32(*(_DWORD *)(ValueName + 16));
    if (v17 == 1819047533)
    {
      v18 = *(unsigned __int8 *)(ValueName + 20) - 46;
    }
    else if (v17 < 0x6C6C766D)
    {
      v18 = -1;
    }
    else
    {
      v18 = 1;
    }
    v16 = (v18 == 0) << 13;
  }
  else
  {
    v16 = 0;
  }
  v19 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFDFFF | v16;
  if (v19)
    *(_QWORD *)(a1 + 112) = llvm::Intrinsic::getAttributes(**(uint64_t ***)a1, v19);
  return a1;
}

uint64_t *llvm::Intrinsic::getAttributes(uint64_t *a1, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD v5[2];
  uint64_t v6;

  v2 = 0;
  v6 = *MEMORY[0x24BDAC8D0];
  do
  {
    v3 = &v5[v2];
    *v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    v2 += 4;
  }
  while (v2 != 80);
  if (a2)
    __asm { BR              X10 }
  return llvm::AttributeList::get(a1, (uint64_t)v5, 0);
}

void llvm::Function::~Function(llvm::Function *this)
{
  llvm::Function *i;

  llvm::Function::dropAllReferences(this);
  if (*((_QWORD *)this + 11))
    llvm::Function::clearArguments(this);
  llvm::Function::clearGC((uint64_t)this);
  std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100]((uint64_t *)this + 13, 0);
  for (i = (llvm::Function *)*((_QWORD *)this + 10);
        (llvm::Function *)((char *)this + 72) != i;
        i = (llvm::Function *)llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase((uint64_t)this + 72, (uint64_t)i))
  {
    ;
  }
  llvm::GlobalObject::~GlobalObject(this);
}

uint64_t llvm::Function::dropAllReferences(llvm::Function *this)
{
  _QWORD *v2;
  _QWORD *i;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *j;
  uint64_t v7;
  _QWORD *k;
  uint64_t v9;
  uint64_t v10;

  *((_DWORD *)this + 8) &= ~0x1000000u;
  v2 = (_QWORD *)((char *)this + 72);
  for (i = (_QWORD *)*((_QWORD *)this + 10); i != v2; i = (_QWORD *)i[1])
  {
    v4 = i - 3;
    if (!i)
      v4 = 0;
    v5 = v4 + 5;
    for (j = (_QWORD *)v4[6]; j != v5; j = (_QWORD *)j[1])
    {
      if (j)
        v7 = (uint64_t)(j - 3);
      else
        v7 = 0;
      llvm::User::dropAllReferences(v7);
    }
  }
  for (k = (_QWORD *)*v2; k != v2; k = (_QWORD *)*((_QWORD *)this + 9))
  {
    v9 = *((_QWORD *)this + 10);
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::erase(*(_QWORD *)(v10 + 56) + 72, v10 + 24);
  }
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0)
  {
    llvm::User::dropAllReferences((uint64_t)this);
    *((_DWORD *)this + 5) &= 0xF8000000;
    *((_WORD *)this + 9) &= 0xFFF1u;
  }
  return llvm::Value::clearMetadata((uint64_t)this);
}

void llvm::Function::clearArguments(llvm::Function *this)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  llvm::Value *v5;
  _BYTE v6[32];
  __int16 v7;

  v3 = (llvm::Value *)*((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v4 = 40 * v2;
    do
    {
      v7 = 257;
      llvm::Value::setName(v3, (const llvm::Twine *)v6);
      llvm::Value::~Value(v3, v5);
      v3 = (llvm::Value *)((char *)v3 + 40);
      v4 -= 40;
    }
    while (v4);
    v3 = (llvm::Value *)*((_QWORD *)this + 11);
  }
  operator delete(v3);
  *((_QWORD *)this + 11) = 0;
}

uint64_t llvm::Function::clearGC(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_WORD *)(this + 18) & 0x4000) != 0)
  {
    v1 = this;
    v2 = ***(_QWORD ***)this + 2696;
    v3 = v1;
    this = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::erase(v2, &v3);
    *(_WORD *)(v1 + 18) &= ~0x4000u;
  }
  return this;
}

void llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  __int16 v12;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (v2 >= 0x666666666666667)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v3 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 11) = operator new(40 * v2);
    v4 = v2;
    if ((_DWORD)v2)
    {
      v5 = 0;
      v6 = 0;
      v7 = 40 * v4;
      do
      {
        v8 = v6 + 1;
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v6 + 8);
        v10 = *((_QWORD *)this + 11) + v5;
        v12 = 257;
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = 0;
        LODWORD(v9) = *(_DWORD *)(v10 + 20) & 0xC0000000;
        *(_DWORD *)(v10 + 16) = 21;
        *(_DWORD *)(v10 + 20) = v9;
        *(_QWORD *)(v10 + 24) = this;
        *(_DWORD *)(v10 + 32) = v6;
        llvm::Value::setName((llvm::Value *)v10, (const llvm::Twine *)v11);
        v5 += 40;
        v6 = v8;
      }
      while (v7 != v5);
    }
  }
  *((_WORD *)this + 9) &= ~1u;
}

void llvm::Function::setGC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
    v3 = *(_QWORD *)(a2 + 8);
  else
    v3 = *(unsigned __int8 *)(a2 + 23);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xBFFF | ((v3 != 0) << 14);
  v4 = **(uint64_t ***)a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  llvm::LLVMContext::setGC(v4, a1, (__int128 *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

unint64_t llvm::Function::lookupIntrinsicID(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  const void **v6;
  unint64_t v7;
  const void **v8;
  const void **v9;
  __int128 v10;
  int v11;
  const char **v12;
  int v13;
  unint64_t v14;
  uint64_t v16[2];
  _OWORD v17[2];
  char v18;

  v4 = 5;
  if (a2 < 5)
    v4 = a2;
  v16[0] = (uint64_t)&a1[v4];
  v16[1] = a2 - v4;
  v18 = 46;
  llvm::StringRef::split(v16, &v18, 1uLL, (uint64_t)v17);
  v5 = v17[0];
  v6 = (const void **)&TargetInfos;
  v7 = 19;
  do
  {
    v8 = &v6[4 * (v7 >> 1)];
    v10 = *(_OWORD *)v8;
    v9 = v8 + 4;
    v17[0] = v10;
    v11 = llvm::StringRef::compare((uint64_t)v17, (const void *)v5, *((size_t *)&v5 + 1));
    if (v11 >= 0)
      v7 >>= 1;
    else
      v7 += ~(v7 >> 1);
    if (v11 < 0)
      v6 = v9;
  }
  while (v7);
    || v6[1] != *((const void **)&v5 + 1)
    || *((_QWORD *)&v5 + 1) && memcmp(*v6, (const void *)v5, *((size_t *)&v5 + 1)))
  {
    v6 = (const void **)&TargetInfos;
  }
  v12 = (const char **)&IntrinsicNameTable[(_QWORD)v6[2] + 1];
  v13 = llvm::Intrinsic::lookupLLVMIntrinsicByName(v12, (uint64_t)v6[3], a1, a2);
  if (v13 == -1)
    return 0;
  v14 = v13 + ((unint64_t)((char *)v12 - (char *)IntrinsicNameTable) >> 3);
  if (a2 != strlen(v12[v13]) && ((llvm::Intrinsic::isOverloaded::OTable[v14 >> 3] >> (v14 & 7)) & 1) == 0)
    return 0;
  return v14;
}

unint64_t llvm::Function::recalculateIntrinsicID(llvm::Function *this)
{
  _QWORD *ValueName;
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t result;

  if ((*((_BYTE *)this + 23) & 0x10) != 0
    && (ValueName = (_QWORD *)llvm::Value::getValueName((uint64_t ***)this),
        v5 = *ValueName,
        v3 = ValueName + 2,
        v4 = v5,
        v5 >= 5)
    && (*(_DWORD *)v3 == 1836477548 ? (v6 = v3[4] == 46) : (v6 = 0), v6))
  {
    *((_DWORD *)this + 8) |= 0x2000u;
    result = llvm::Function::lookupIntrinsicID(v3, v4);
  }
  else
  {
    result = 0;
    *((_DWORD *)this + 8) &= ~0x2000u;
  }
  *((_DWORD *)this + 9) = result;
  return result;
}

double getIntrinsicNameImpl@<D0>(int a1@<W0>, BOOL **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unint64_t Type@<X4>, std::string *a6@<X8>)
{
  char *v12;
  size_t v13;
  std::string::size_type v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL **v19;
  std::string *v20;
  std::string::size_type v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type size;
  double result;
  std::string v27;
  void *__p[2];
  uint64_t v29;
  std::string __dst;
  char v31;

  v31 = 0;
  v12 = IntrinsicNameTable[a1];
  if (!v12)
  {
    v14 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_11;
  }
  v13 = strlen(IntrinsicNameTable[a1]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_10:
    memmove(p_dst, v12, v14);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  if (a3)
  {
    v18 = 8 * a3;
    v19 = a2;
    do
    {
      getMangledTypeStr(&v27, *v19, &v31);
      v20 = std::string::insert(&v27, 0, ".");
      v21 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v29 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v29 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if (v29 >= 0)
        v23 = HIBYTE(v29);
      else
        v23 = (std::string::size_type)__p[1];
      std::string::append(&__dst, (const std::string::value_type *)v22, v23);
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      ++v19;
      v18 -= 8;
    }
    while (v18);
  }
  if (v31)
  {
    if (!Type)
      Type = llvm::Intrinsic::getType(*a4, a1);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &__dst;
    else
      v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    llvm::Module::getUniqueIntrinsicName((uint64_t)a4, (uint64_t *)v24, size, a1, Type, (uint64_t)a6);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a6 = __dst;
  }
  return result;
}

void llvm::Intrinsic::getIntrinsicInfoTableEntries(int a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  __int128 v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v1 = IIT_Table[a1 - 1];
  v7 = v9;
  v8 = xmmword_24AA2ACB0;
  if ((v1 & 0x80000000) != 0)
  {
    v3 = v1 & 0x7FFFFFFF;
    v4 = &IIT_LongEncodingTable;
    v5 = 14307;
  }
  else
  {
    do
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v7, v1 & 0xF);
      v2 = v1 > 0xF;
      v1 >>= 4;
    }
    while (v2);
    v3 = 0;
    v4 = v7;
    v5 = v8;
  }
  v6 = v3;
  do
    DecodeIITType(&v6, (uint64_t)v4);
  while (v5 != v6 && v4[v6]);
  if (v7 != v9)
    free(v7);
}

void DecodeIITType(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = v2 + 1;
  __asm { BR              X12 }
}

void sub_24A9E2CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  char v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 2;
  if ((v10 & 1) != 0)
    v13 = v12;
  LOBYTE(a10) = BYTE4(v13);
  llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(v11, __SPAIR64__(v13, 11), a10);
  JUMPOUT(0x24A9E2C70);
}

void sub_24A9E2DBC()
{
  JUMPOUT(0x24A9E2D98);
}

unsigned int *sub_24A9E2DD0()
{
  unsigned int *v0;

  return llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(v0, 0, 0);
}

unint64_t llvm::Intrinsic::getType(uint64_t a1, int a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[64];
  void *v15;
  uint64_t v16;
  _QWORD v17[13];

  v17[12] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2);
  v10 = (unsigned int *)v17;
  v11 = 0;
  DecodeFixedType(&v10);
  v3 = v2;
  v12 = v14;
  v13 = 0x800000000;
  if (v11)
  {
    do
    {
      DecodeFixedType(&v10);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v12, v4);
    }
    while (v11);
    v5 = v13;
    v6 = (uint64_t *)v12;
    if ((_DWORD)v13)
    {
      if (*(_BYTE *)(*((_QWORD *)v12 + v13 - 1) + 8) == 7)
      {
        v5 = (v13 - 1);
        LODWORD(v13) = v13 - 1;
        v7 = 1;
        goto LABEL_9;
      }
    }
    else
    {
      v5 = 0;
    }
    v7 = 0;
  }
  else
  {
    v5 = 0;
    v7 = 0;
    v6 = (uint64_t *)v14;
  }
LABEL_9:
  v8 = llvm::FunctionType::get(v3, v6, v5, (unint64_t *)v7);
  if (v12 != v14)
    free(v12);
  if (v15 != v17)
    free(v15);
  return v8;
}

void DecodeFixedType(unsigned int **a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **a1;
  v2 = (uint64_t)a1[1] - 1;
  *a1 += 3;
  a1[1] = (unsigned int *)v2;
  __asm { BR              X10 }
}

void sub_24A9E33AC(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if ((*(_DWORD *)(*(_QWORD *)(v2 + (v1 & 0xFFFFFFF8)) + 8) & 0xFE) == 0x12)
    v3 = *(_QWORD *)(v2 + (v1 & 0xFFFFFFF8));
  else
    v3 = 0;
  if (a1 == 23)
    v4 = 1;
  else
    v4 = 2;
  llvm::VectorType::getSubdividedVectorType(v3, v4);
}

void getIntrinsicFnAttributeSet(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t *sub_24A9E3894()
{
  uint64_t *v0;
  unint64_t v2;

  v2 = llvm::Attribute::get(v0, 36, 0);
  return llvm::AttributeSetNode::get(v0, &v2, 1);
}

void getIntrinsicArgAttributeSet(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t *sub_24A9E4D0C()
{
  uint64_t *v0;
  unint64_t v2;

  v2 = llvm::Attribute::get(v0, 10, 0);
  return llvm::AttributeSetNode::get(v0, &v2, 1);
}

uint64_t llvm::Intrinsic::getDeclaration(uint64_t *a1, int a2, BOOL **a3, uint64_t a4)
{
  llvm::PointerType **Type;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  size_t v14;
  uint64_t v15;
  std::string __p;

  Type = (llvm::PointerType **)llvm::Intrinsic::getType(*a1, a2);
  if (a4)
  {
    getIntrinsicNameImpl(a2, a3, a4, a1, (unint64_t)Type, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::Module::getOrInsertFunction((uint64_t)a1, (uint64_t *)p_p, size, Type, 0);
    v12 = v11;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = (uint64_t *)IntrinsicNameTable[a2];
    if (v13)
      v14 = strlen(IntrinsicNameTable[a2]);
    else
      v14 = 0;
    llvm::Module::getOrInsertFunction((uint64_t)a1, v13, v14, Type, 0);
    return v15;
  }
  return v12;
}

uint64_t llvm::Intrinsic::matchIntrinsicSignature(uint64_t a1, unsigned int **a2)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if ((matchIntrinsicType(**(_QWORD **)(a1 + 16), a2) & 1) != 0)
    return 1;
  v5 = 8 * *(unsigned int *)(a1 + 12) - 8;
  if (8 * *(unsigned int *)(a1 + 12) == 8)
    return 0;
  v6 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = 8 * (v5 >> 3);
  while ((matchIntrinsicType(*v6, a2) & 1) == 0)
  {
    ++v6;
    v7 -= 8;
    if (!v7)
      return 0;
  }
  return 2;
}

uint64_t matchIntrinsicType(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
  {
    v3 = **a2;
    *a2 += 3;
    a2[1] = (unsigned int *)((char *)v2 - 1);
    __asm { BR              X16 }
  }
  return 1;
}

llvm::Value *llvm::Intrinsic::remangleIntrinsicFunction(llvm::Intrinsic *this, llvm::Function *a2)
{
  int v3;
  int v4;
  int v5;
  llvm::Value *Declaration;
  const void *v7;
  unsigned int v8;
  llvm::Value **ValueName;
  std::string *v11;
  char v12;
  std::string::size_type size;
  uint64_t v14;
  size_t v15;
  void *p_p;
  std::string *v17;
  std::string v19;
  void *__p;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _WORD v28[48];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v23 = v25;
  v24 = 0x400000000;
  v3 = *((_DWORD *)this + 9);
  if (!v3)
  {
LABEL_9:
    Declaration = 0;
    goto LABEL_44;
  }
  v26 = v28;
  v27 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(v3);
  __p = v26;
  v21 = v27;
  if (llvm::Intrinsic::matchIntrinsicSignature(*((_QWORD *)this + 3), (unsigned int **)&__p))
    goto LABEL_3;
  v8 = *(_DWORD *)(*((_QWORD *)this + 3) + 8);
  if (v21)
  {
    if (v21 != 1)
      goto LABEL_3;
    if (v8 < 0x100 || *(_DWORD *)__p != 1)
      goto LABEL_3;
  }
  else if (v8 >= 0x100)
  {
LABEL_3:
    v4 = 0;
    goto LABEL_4;
  }
  v4 = 1;
LABEL_4:
  if (v26 != v28)
    free(v26);
  if (!v4)
    goto LABEL_9;
  v5 = *((_DWORD *)this + 9);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    ValueName = (llvm::Value **)llvm::Value::getValueName((uint64_t ***)this);
    v7 = ValueName + 2;
    Declaration = *ValueName;
  }
  else
  {
    Declaration = 0;
    v7 = &str_3_26;
  }
  v11 = &v19;
  getIntrinsicNameImpl(v5, (BOOL **)v23, v24, *((uint64_t **)this + 5), *((_QWORD *)this + 3), &v19);
  v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  }
  else
  {
    size = v19.__r_.__value_.__l.__size_;
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (Declaration != (llvm::Value *)size)
  {
LABEL_25:
    v14 = llvm::ValueSymbolTable::lookup(*(_QWORD *)(*((_QWORD *)this + 5) + 112), (uint64_t *)v11, size);
    if (v14)
    {
      Declaration = (llvm::Value *)v14;
      if (!*(_BYTE *)(v14 + 16) && *(_QWORD *)(v14 + 24) == *((_QWORD *)this + 3))
      {
LABEL_42:
        *((_WORD *)Declaration + 9) = *((_WORD *)Declaration + 9) & 0xC00F | *((_WORD *)this + 9) & 0x3FF0;
        if ((*((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_44;
        goto LABEL_43;
      }
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      else
        v15 = v19.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v15 + 8);
      if (v22 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v15)
      {
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v19;
        else
          v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, ".renamed");
      v28[8] = 260;
      v26 = &__p;
      llvm::Value::setName(Declaration, (const llvm::Twine *)&v26);
      if (v22 < 0)
        operator delete(__p);
    }
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), v5, (BOOL **)v23, v24);
    goto LABEL_42;
  }
  if (Declaration)
  {
    if (memcmp(v7, v11, (size_t)Declaration))
      goto LABEL_25;
    Declaration = 0;
  }
  if (v12 < 0)
LABEL_43:
    operator delete(v19.__r_.__value_.__l.__data_);
LABEL_44:
  if (v23 != v25)
    free(v23);
  return Declaration;
}

uint64_t llvm::Function::hasAddressTaken(llvm::Function *this, const llvm::User **a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t ValueName;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CallBase *v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;

  v6 = *((_QWORD *)this + 1);
  if (!v6)
    return 0;
  while (1)
  {
    v11 = *(_QWORD *)(v6 + 24);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 == 4)
      goto LABEL_74;
    if (a3)
    {
      llvm::AbstractCallSite::AbstractCallSite(&v38, v6);
      if (v38)
        v13 = v40 == 0;
      else
        v13 = 1;
      v14 = v13;
      if (v39 != &v41)
        free(v39);
      if (!v14)
        goto LABEL_74;
      v12 = *(unsigned __int8 *)(v11 + 16);
    }
    if (v12 < 0x1C)
      break;
    if (v12 - 33 > 0x33 || ((1 << (v12 - 33)) & 0x8000000000041) == 0)
    {
      if (v12 - 77 > 1 || (a4 & 1) == 0)
        goto LABEL_38;
      goto LABEL_78;
    }
    v16 = v12 != 84 || a4 == 0;
    if ((v16
       || (v17 = *(_QWORD *)(v11 - 32)) == 0
       || *(_BYTE *)(v17 + 16)
       || *(_QWORD *)(v17 + 24) != *(_QWORD *)(v11 + 72)
       || (*(_DWORD *)(v17 + 32) & 0x2000) == 0
       || (llvm::IntrinsicInst::isAssumeLikeIntrinsic((llvm::IntrinsicInst *)v11) & 1) == 0)
      && (v11 - 32 != v6 || *(_QWORD *)(v11 + 72) != *((_QWORD *)this + 3)))
    {
      if (!a6)
        goto LABEL_87;
      v18 = *(_QWORD *)(v6 + 24);
      v19 = *(_DWORD *)(v18 + 20);
      v20 = (v19 & 0x40000000) != 0 ? *(_QWORD *)(v18 - 8) : v18 - 32 * (v19 & 0x7FFFFFF);
      if (!llvm::CallBase::isOperandBundleOfType((llvm::CallBase *)v11, 6, (unint64_t)(v6 - v20) >> 5))
        goto LABEL_87;
    }
LABEL_74:
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      return 0;
  }
  v21 = v12 != 5 || a4 == 0;
  if (v21 || *(unsigned __int16 *)(v11 + 18) - 49 > 1)
    goto LABEL_38;
LABEL_78:
  v32 = *(_QWORD *)(v11 + 8);
  if (!v32)
    goto LABEL_74;
  while (1)
  {
    v33 = *(_QWORD *)(v32 + 24);
    if (*(_BYTE *)(v33 + 16) != 84)
      break;
    v34 = *(_QWORD *)(v33 - 32);
    if (!v34
      || *(_BYTE *)(v34 + 16)
      || *(_QWORD *)(v34 + 24) != *(_QWORD *)(v33 + 72)
      || (*(_DWORD *)(v34 + 32) & 0x2000) == 0
      || !llvm::IntrinsicInst::isAssumeLikeIntrinsic((llvm::IntrinsicInst *)v33))
    {
      break;
    }
    v32 = *(_QWORD *)(v32 + 8);
    if (!v32)
      goto LABEL_74;
  }
LABEL_38:
  if (!a5)
    goto LABEL_87;
  v22 = *(_QWORD *)(v11 + 8);
  if (!v22)
    goto LABEL_87;
  v23 = *(unsigned __int8 *)(v11 + 16);
  if (v23 <= 0x1B)
  {
    if (v23 != 5 || *(unsigned __int16 *)(v11 + 18) - 49 > 1)
      goto LABEL_49;
  }
  else if (v23 - 77 >= 2)
  {
    goto LABEL_49;
  }
  if (!*(_QWORD *)(v22 + 8))
  {
    v24 = *(_QWORD *)(v22 + 24);
    if (!*(_QWORD *)(v24 + 8))
      v24 = v11;
    v22 = *(_QWORD *)(v24 + 8);
    if (!v22)
      goto LABEL_74;
  }
LABEL_49:
  while (1)
  {
    v25 = *(_QWORD *)(v22 + 24);
    v26 = v25 && *(_BYTE *)(v25 + 16) == 3;
    if (!v26 || (*(_BYTE *)(v25 + 23) & 0x10) == 0)
      break;
    ValueName = llvm::Value::getValueName(*(uint64_t ****)(v22 + 24));
    if (*(_QWORD *)ValueName != 18
      || (*(_QWORD *)(ValueName + 16) == 0x6D6F632E6D766C6CLL
        ? (v28 = *(_QWORD *)(ValueName + 24) == 0x73752E72656C6970)
        : (v28 = 0),
          v28 ? (v29 = *(unsigned __int16 *)(ValueName + 32) == 25701) : (v29 = 0),
          !v29))
    {
      if ((*(_BYTE *)(v25 + 23) & 0x10) == 0)
        break;
      v30 = llvm::Value::getValueName((uint64_t ***)v25);
      if (*(_QWORD *)v30 != 9)
        break;
      if (*(_QWORD *)(v30 + 16) != 0x6573752E6D766C6CLL || *(_BYTE *)(v30 + 24) != 100)
        break;
    }
    v22 = *(_QWORD *)(v22 + 8);
    if (!v22)
      goto LABEL_74;
  }
LABEL_87:
  if (a2)
    *a2 = (const llvm::User *)v11;
  return 1;
}

BOOL llvm::CallBase::isOperandBundleOfType(llvm::CallBase *this, int a2, unsigned int a3)
{
  int v3;
  char *v5;
  uint64_t v6;

  v3 = *((_DWORD *)this + 5);
  if (v3 < 0
    && (v5 = (char *)this - 32 * (v3 & 0x7FFFFFF), v6 = *((_QWORD *)v5 - 1), (v6 & 0xFFFFFFFF0) != 0)
    && *(_DWORD *)&v5[-v6] <= a3
    && *((_DWORD *)v5 - 3) > a3)
  {
    return *(_DWORD *)(*(_QWORD *)llvm::CallBase::getBundleOpInfoForOperand((char *)this, a3) + 8) == a2;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Function::setHungoffOperand<0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
      v5 = *(_QWORD *)(v2 - 8);
    else
      v5 = v2 - 32 * (v4 & 0x7FFFFFF);
    if (*(_QWORD *)v5)
    {
      **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
      v8 = *(_QWORD *)(v5 + 8);
      if (v8)
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
    }
    *(_QWORD *)v5 = a2;
    v11 = *(_QWORD *)(a2 + 8);
    v10 = (uint64_t *)(a2 + 8);
    v9 = v11;
    *(_QWORD *)(v5 + 8) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5 + 8;
    *(_QWORD *)(v5 + 16) = v10;
    *v10 = v5;
  }
  else
  {
    v6 = *(_DWORD *)(result + 20);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v7 = *(_QWORD *)(result - 8);
      else
        v7 = result - 32 * (v6 & 0x7FFFFFF);
      v12 = llvm::PointerType::get((llvm::PointerType **)(***(_QWORD ***)result + 1920), 0);
      result = llvm::ConstantPointerNull::get(v12);
      if (*(_QWORD *)v7)
      {
        **(_QWORD **)(v7 + 16) = *(_QWORD *)(v7 + 8);
        v13 = *(_QWORD *)(v7 + 8);
        if (v13)
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v7 + 16);
      }
      *(_QWORD *)v7 = result;
      if (result)
      {
        v15 = *(_QWORD *)(result + 8);
        result += 8;
        v14 = v15;
        *(_QWORD *)(v7 + 8) = v15;
        if (v15)
          *(_QWORD *)(v14 + 16) = v7 + 8;
        *(_QWORD *)(v7 + 16) = result;
        *(_QWORD *)result = v7;
      }
    }
  }
  return result;
}

uint64_t llvm::Function::setHungoffOperand<1>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
      v5 = *(_QWORD *)(v2 - 8);
    else
      v5 = v2 - 32 * (v4 & 0x7FFFFFF);
    if (*(_QWORD *)(v5 + 32))
    {
      **(_QWORD **)(v5 + 48) = *(_QWORD *)(v5 + 40);
      v8 = *(_QWORD *)(v5 + 40);
      if (v8)
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 48);
    }
    *(_QWORD *)(v5 + 32) = a2;
    v11 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v9 = v11;
    *(_QWORD *)(v5 + 40) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5 + 40;
    *(_QWORD *)(v5 + 48) = v10;
    *v10 = v5 + 32;
  }
  else
  {
    v6 = *(_DWORD *)(result + 20);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v7 = *(_QWORD *)(result - 8);
      else
        v7 = result - 32 * (v6 & 0x7FFFFFF);
      v12 = llvm::PointerType::get((llvm::PointerType **)(***(_QWORD ***)result + 1920), 0);
      result = llvm::ConstantPointerNull::get(v12);
      v13 = (uint64_t *)(v7 + 32);
      if (*(_QWORD *)(v7 + 32))
      {
        **(_QWORD **)(v7 + 48) = *(_QWORD *)(v7 + 40);
        v14 = *(_QWORD *)(v7 + 40);
        if (v14)
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v7 + 48);
      }
      *v13 = result;
      if (result)
      {
        v16 = *(_QWORD *)(result + 8);
        result += 8;
        v15 = v16;
        *(_QWORD *)(v7 + 40) = v16;
        if (v16)
          *(_QWORD *)(v15 + 16) = v7 + 40;
        *(_QWORD *)(v7 + 48) = result;
        *(_QWORD *)result = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::Function::setHungoffOperand<2>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
      v5 = *(_QWORD *)(v2 - 8);
    else
      v5 = v2 - 32 * (v4 & 0x7FFFFFF);
    if (*(_QWORD *)(v5 + 64))
    {
      **(_QWORD **)(v5 + 80) = *(_QWORD *)(v5 + 72);
      v8 = *(_QWORD *)(v5 + 72);
      if (v8)
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 80);
    }
    *(_QWORD *)(v5 + 64) = a2;
    v11 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v9 = v11;
    *(_QWORD *)(v5 + 72) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5 + 72;
    *(_QWORD *)(v5 + 80) = v10;
    *v10 = v5 + 64;
  }
  else
  {
    v6 = *(_DWORD *)(result + 20);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v7 = *(_QWORD *)(result - 8);
      else
        v7 = result - 32 * (v6 & 0x7FFFFFF);
      v12 = llvm::PointerType::get((llvm::PointerType **)(***(_QWORD ***)result + 1920), 0);
      result = llvm::ConstantPointerNull::get(v12);
      v13 = (uint64_t *)(v7 + 64);
      if (*(_QWORD *)(v7 + 64))
      {
        **(_QWORD **)(v7 + 80) = *(_QWORD *)(v7 + 72);
        v14 = *(_QWORD *)(v7 + 72);
        if (v14)
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v7 + 80);
      }
      *v13 = result;
      if (result)
      {
        v16 = *(_QWORD *)(result + 8);
        result += 8;
        v15 = v16;
        *(_QWORD *)(v7 + 72) = v16;
        if (v16)
          *(_QWORD *)(v15 + 16) = v7 + 72;
        *(_QWORD *)(v7 + 80) = result;
        *(_QWORD *)result = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::Function::allocHungoffUselist(uint64_t this)
{
  _DWORD *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) == 0)
  {
    v1 = (_DWORD *)this;
    v2 = (char *)operator new(0x60uLL);
    v3 = 0;
    *((_QWORD *)v1 - 1) = v2;
    do
    {
      v4 = &v2[v3];
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *((_QWORD *)v4 + 3) = v1;
      v3 += 32;
    }
    while (v3 != 96);
    v1[5] = v1[5] & 0xF8000000 | 3;
    v5 = llvm::PointerType::get((llvm::PointerType **)(***(_QWORD ***)v1 + 1920), 0);
    this = llvm::ConstantPointerNull::get(v5);
    v6 = v1[5];
    if ((v6 & 0x40000000) != 0)
      v7 = (_DWORD *)*((_QWORD *)v1 - 1);
    else
      v7 = &v1[-8 * (v6 & 0x7FFFFFF)];
    if (*(_QWORD *)v7)
    {
      **((_QWORD **)v7 + 2) = *((_QWORD *)v7 + 1);
      v8 = *((_QWORD *)v7 + 1);
      if (v8)
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
    }
    *(_QWORD *)v7 = this;
    if (this)
    {
      v9 = (_QWORD *)(this + 8);
      v10 = *(_QWORD *)(this + 8);
      *((_QWORD *)v7 + 1) = v10;
      if (v10)
        *(_QWORD *)(v10 + 16) = v7 + 2;
      *((_QWORD *)v7 + 2) = v9;
      *v9 = v7;
    }
    v11 = v1[5];
    if ((v11 & 0x40000000) != 0)
      v12 = (_DWORD *)*((_QWORD *)v1 - 1);
    else
      v12 = &v1[-8 * (v11 & 0x7FFFFFF)];
    v13 = v12 + 8;
    if (*((_QWORD *)v12 + 4))
    {
      **((_QWORD **)v12 + 6) = *((_QWORD *)v12 + 5);
      v14 = *((_QWORD *)v12 + 5);
      if (v14)
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v12 + 6);
    }
    *v13 = this;
    if (this)
    {
      v15 = (_QWORD *)(this + 8);
      v16 = *(_QWORD *)(this + 8);
      *((_QWORD *)v12 + 5) = v16;
      if (v16)
        *(_QWORD *)(v16 + 16) = v12 + 10;
      *((_QWORD *)v12 + 6) = v15;
      *v15 = v13;
    }
    v17 = v1[5];
    if ((v17 & 0x40000000) != 0)
      v18 = (_DWORD *)*((_QWORD *)v1 - 1);
    else
      v18 = &v1[-8 * (v17 & 0x7FFFFFF)];
    v19 = v18 + 16;
    if (*((_QWORD *)v18 + 8))
    {
      **((_QWORD **)v18 + 10) = *((_QWORD *)v18 + 9);
      v20 = *((_QWORD *)v18 + 9);
      if (v20)
        *(_QWORD *)(v20 + 16) = *((_QWORD *)v18 + 10);
    }
    *v19 = this;
    if (this)
    {
      v22 = *(_QWORD *)(this + 8);
      this += 8;
      v21 = v22;
      *((_QWORD *)v18 + 9) = v22;
      if (v22)
        *(_QWORD *)(v21 + 16) = v18 + 18;
      *((_QWORD *)v18 + 10) = this;
      *(_QWORD *)this = v19;
    }
  }
  return this;
}

uint64_t llvm::GlobalValue::GlobalValue(uint64_t a1, llvm::PointerType **a2, char a3, uint64_t a4, int a5, int a6, const llvm::Twine *a7, llvm::Type *a8)
{
  *(_QWORD *)a1 = llvm::PointerType::get(a2, a8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFE000F;
  *(_QWORD *)(a1 + 40) = 0;
  llvm::GlobalValue::setLinkage(a1, a6);
  llvm::Value::setName((llvm::Value *)a1, a7);
  return a1;
}

void getMangledTypeStr(std::string *a1, BOOL *a2, _BYTE *a3)
{
  unint64_t v6;
  int v7;
  char *v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  std::string *v26;
  std::string::size_type v27;
  const std::string::value_type *v28;
  const std::string::value_type *v29;
  std::string *v30;
  std::string::size_type v31;
  void **v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  BOOL **v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  uint64_t v45;
  BOOL **v46;
  uint64_t v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  unint64_t v55;
  char *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type v60;
  void *__p[2];
  unsigned __int8 v62;
  std::string v63;
  std::string v64;
  std::string v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v6 = *((unsigned int *)a2 + 2);
  v7 = *((_DWORD *)a2 + 2);
  if (a2 && v7 == 15)
  {
    if (v6 >= 0x100)
    {
      v13 = v6 >> 8;
      v8 = &v65.__r_.__value_.__s.__data_[21];
      do
      {
        *--v8 = (v13 % 0xA) | 0x30;
        v11 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      v8 = &v65.__r_.__value_.__s.__data_[20];
      v65.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&v64, v8, &v65.__r_.__value_.__s.__data_[21], (char *)&v65.__r_.__value_.__r.__words[2] + 5 - v8);
    v14 = std::string::insert(&v64, 0, "p");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v65;
    else
      v16 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      size = v65.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v16, size);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (*((_QWORD *)a2 + 3))
    {
      getMangledTypeStr((llvm::Type *)&v65, **((BOOL ***)a2 + 2));
      v18 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v65
          : (std::string *)v65.__r_.__value_.__r.__words[0];
      v19 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v65.__r_.__value_.__r.__words[2])
          : v65.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (void *)v65.__r_.__value_.__r.__words[0];
LABEL_85:
        operator delete(v20);
        return;
      }
    }
    return;
  }
  if (a2 && v7 == 17)
  {
    v9 = *((_QWORD *)a2 + 4);
    if (v9)
    {
      v10 = &v65.__r_.__value_.__s.__data_[21];
      do
      {
        *--v10 = (v9 % 0xA) | 0x30;
        v11 = v9 > 9;
        v9 /= 0xAuLL;
      }
      while (v11);
    }
    else
    {
      v10 = &v65.__r_.__value_.__s.__data_[20];
      v65.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&v63, v10, &v65.__r_.__value_.__s.__data_[21], (char *)&v65.__r_.__value_.__r.__words[2] + 5 - v10);
    v29 = "a";
    goto LABEL_65;
  }
  if (a2 && v7 == 16)
  {
    if ((v6 & 0x400) != 0)
    {
      std::string::append(a1, "sl_");
      v40 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v40)
      {
        v41 = (BOOL **)*((_QWORD *)a2 + 2);
        v42 = 8 * v40;
        do
        {
          getMangledTypeStr((llvm::Type *)&v65, *v41);
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v65;
          else
            v43 = (std::string *)v65.__r_.__value_.__r.__words[0];
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          else
            v44 = v65.__r_.__value_.__l.__size_;
          std::string::append(a1, (const std::string::value_type *)v43, v44);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          ++v41;
          v42 -= 8;
        }
        while (v42);
      }
    }
    else
    {
      std::string::append(a1, "s_");
      v12 = *((_QWORD *)a2 + 3);
      if (v12)
        std::string::append(a1, (const std::string::value_type *)(v12 + 16), *(_QWORD *)v12);
      else
        *a3 = 1;
    }
    v28 = "s";
LABEL_141:
    std::string::append(a1, v28);
    return;
  }
  if (a2 && v7 == 14)
  {
    getMangledTypeStr((llvm::Type *)&v64, **((BOOL ***)a2 + 2));
    v21 = std::string::insert(&v64, 0, "f_");
    v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v65;
    else
      v23 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      v24 = v65.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (*((_DWORD *)a2 + 3) != 1)
    {
      v25 = 0;
      do
      {
        getMangledTypeStr((llvm::Type *)&v65, *(BOOL **)(*((_QWORD *)a2 + 2) + 8 * v25 + 8));
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v65;
        else
          v26 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          v27 = v65.__r_.__value_.__l.__size_;
        std::string::append(a1, (const std::string::value_type *)v26, v27);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        ++v25;
      }
      while (v25 < (*((_DWORD *)a2 + 3) - 1));
    }
    if (*((_DWORD *)a2 + 2) > 0xFFu)
      std::string::append(a1, "vararg");
    v28 = "f";
    goto LABEL_141;
  }
  if (!a2 || (*((_DWORD *)a2 + 2) & 0xFE) != 0x12)
  {
    if (!a2 || v7 != 21)
      __asm { BR              X11 }
    std::string::append(a1, "t");
    std::string::append(a1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    v45 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v45)
    {
      v46 = (BOOL **)*((_QWORD *)a2 + 2);
      v47 = 8 * v45;
      do
      {
        getMangledTypeStr((llvm::Type *)&v64, *v46);
        v48 = std::string::insert(&v64, 0, "_");
        v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v65;
        else
          v50 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          v51 = v65.__r_.__value_.__l.__size_;
        std::string::append(a1, (const std::string::value_type *)v50, v51);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        ++v46;
        v47 -= 8;
      }
      while (v47);
    }
    v52 = *((unsigned int *)a2 + 2);
    if (v52 >= 0x100)
    {
      v53 = (unsigned int *)*((_QWORD *)a2 + 5);
      v54 = (unsigned int *)((char *)v53 + ((v52 >> 6) & 0x3FFFFFC));
      do
      {
        v55 = *v53;
        v56 = &v65.__r_.__value_.__s.__data_[21];
        if ((_DWORD)v55)
        {
          do
          {
            *--v56 = (v55 % 0xA) | 0x30;
            v11 = v55 > 9;
            v55 /= 0xAuLL;
          }
          while (v11);
        }
        else
        {
          v65.__r_.__value_.__s.__data_[20] = 48;
          v56 = &v65.__r_.__value_.__s.__data_[20];
        }
        std::string::__init_with_size[abi:nn180100]<char *,char *>(&v64, v56, &v65.__r_.__value_.__s.__data_[21], (char *)&v65.__r_.__value_.__r.__words[2] + 5 - v56);
        v57 = std::string::insert(&v64, 0, "_");
        v58 = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v65;
        else
          v59 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          v60 = v65.__r_.__value_.__l.__size_;
        std::string::append(a1, (const std::string::value_type *)v59, v60);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        ++v53;
      }
      while (v53 != v54);
    }
    v28 = "t";
    goto LABEL_141;
  }
  v38 = *((unsigned int *)a2 + 8);
  if (v7 == 19)
    std::string::append(a1, "nx");
  if ((_DWORD)v38)
  {
    v39 = &v65.__r_.__value_.__s.__data_[21];
    do
    {
      *--v39 = (v38 % 0xA) | 0x30;
      v11 = v38 > 9;
      v38 /= 0xAuLL;
    }
    while (v11);
  }
  else
  {
    v39 = &v65.__r_.__value_.__s.__data_[20];
    v65.__r_.__value_.__s.__data_[20] = 48;
  }
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v63, v39, &v65.__r_.__value_.__s.__data_[21], (char *)&v65.__r_.__value_.__r.__words[2] + 5 - v39);
  v29 = "v";
LABEL_65:
  v30 = std::string::insert(&v63, 0, v29);
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  getMangledTypeStr((llvm::Type *)__p, *((BOOL **)a2 + 3));
  if ((v62 & 0x80u) == 0)
    v32 = __p;
  else
    v32 = (void **)__p[0];
  if ((v62 & 0x80u) == 0)
    v33 = v62;
  else
    v33 = (std::string::size_type)__p[1];
  v34 = std::string::append(&v64, (const std::string::value_type *)v32, v33);
  v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v65;
  else
    v36 = (std::string *)v65.__r_.__value_.__r.__words[0];
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  else
    v37 = v65.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v36, v37);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if ((char)v62 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_85;
  }
}

unsigned int *llvm::SmallVectorTemplateBase<llvm::Intrinsic::IITDescriptor,true>::push_back(unsigned int *result, uint64_t a2, int a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + 1, 12);
    LODWORD(v6) = v5[2];
  }
  v7 = *(_QWORD *)v5 + 12 * v6;
  *(_QWORD *)v7 = a2;
  *(_DWORD *)(v7 + 8) = a3;
  ++v5[2];
  return result;
}

double llvm::VectorType::getExtendedElementVectorType(uint64_t a1)
{
  uint64_t v2;
  llvm::IntegerType *v3;
  int PrimitiveSizeInBits;
  uint64_t **v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(llvm::IntegerType **)v2;
  if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12)
    v2 = **(_QWORD **)(v2 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
  v5 = (uint64_t **)llvm::IntegerType::get(v3, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
  return llvm::VectorType::get(v5, (llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(_BYTE *)(a1 + 8) == 19) << 32)));
}

double llvm::VectorType::getTruncatedElementVectorType(uint64_t **a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int PrimitiveSizeInBits;
  const char *v12;
  unsigned int v13;

  v2 = (unsigned __int8 *)a1[3];
  v3 = v2[8];
  v4 = v3 < 4 || v3 == 5;
  if (v4 || (v3 & 0xFFFFFFFD) == 4)
  {
    v6 = **a1;
    v4 = v3 == 3;
    v7 = (uint64_t **)(v6 + 1656);
    v8 = (uint64_t **)(v6 + 1704);
    if (v4)
      v9 = v8;
    else
      v9 = v7;
  }
  else
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
    v13 = PrimitiveSizeInBits;
    if ((_BYTE)v12)
    v9 = (uint64_t **)llvm::IntegerType::get((llvm::IntegerType *)*a1, (llvm::LLVMContext *)(v13 >> 1));
  }
  return llvm::VectorType::get(v9, (llvm::Type *)(*((unsigned int *)a1 + 8) | ((unint64_t)(*((_BYTE *)a1 + 8) == 19) << 32)));
}

void llvm::VectorType::getSubdividedVectorType(uint64_t a1, int a2)
{
  uint64_t **v3;

  do
  {
    llvm::VectorType::get(*(uint64_t ***)(a1 + 24), (llvm::Type *)((2 * *(_DWORD *)(a1 + 32)) | ((unint64_t)(*(_BYTE *)(a1 + 8) == 19) << 32)));
    llvm::VectorType::getTruncatedElementVectorType(v3);
    --a2;
  }
  while (a2);
}

double llvm::VectorType::getHalfElementsVectorType(uint64_t a1)
{
  return llvm::VectorType::get(*(uint64_t ***)(a1 + 24), (llvm::Type *)(((unint64_t)*(unsigned int *)(a1 + 32) >> 1) | ((unint64_t)(*(_BYTE *)(a1 + 8) == 19) << 32)));
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>>::emplace_back<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>,true>::growAndEmplaceBack<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 24 * v3;
  *(_QWORD *)v4 = a2;
  *(_OWORD *)(v4 + 8) = *a3;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<llvm::Type *,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>>,true>::growAndEmplaceBack<llvm::Type *&,llvm::ArrayRef<llvm::Intrinsic::IITDescriptor>&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  __int128 v14;

  v13 = a2;
  v14 = *a3;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = (char *)&v13;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + 24 * v4 > (unint64_t)&v13;
    if (v5 <= (unint64_t)&v13 && v11)
    {
      v12 = (char *)&v13 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      v5 = *(_QWORD *)a1;
      v6 = &v12[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 24);
      v5 = *(_QWORD *)a1;
      v6 = (char *)&v13;
    }
  }
  v7 = v5 + 24 * *(unsigned int *)(a1 + 8);
  v8 = *(_OWORD *)v6;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v7 = v8;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 24 * v7 - 24;
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  uint64_t v2;
  unint64_t *ValueName;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(result + 88);
    if (v2)
    {
      ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      return llvm::StringMapImpl::RemoveKey(v2, (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20)), *ValueName);
    }
  }
  return result;
}

void llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a5)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(a1, a3, (uint64_t)a4, (uint64_t)a5);
    if (a4 != a5)
    {
      v8 = *a5;
      v9 = *a4;
      *(_QWORD *)(v9 + 8) = a5;
      *a5 = v9;
      v10 = *a2;
      *(_QWORD *)(v8 + 8) = a2;
      *a4 = v10;
      *(_QWORD *)(v10 + 8) = a4;
      *a2 = v8;
    }
  }
}

uint64_t std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::ValueSymbolTable *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a3 + 40) = a1 - 24;
  if ((*(_BYTE *)(a3 + 23) & 0x10) != 0)
  {
    v5 = *(llvm::ValueSymbolTable **)(a1 + 88);
    if (v5)
      llvm::ValueSymbolTable::reinsertValue(v5, (uint64_t ***)a3);
  }
  v6 = *a2;
  *(_QWORD *)(a3 + 56) = *a2;
  *(_QWORD *)(a3 + 64) = a2;
  v7 = a3 + 56;
  *(_QWORD *)(v6 + 8) = v7;
  *a2 = v7;
  return v7;
}

uint64_t _GLOBAL__sub_I_Function_cpp()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 1024;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum size for the name of non-global values.";
  v1.n128_u64[1] = 47;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [26],llvm::cl::OptionHidden,llvm::cl::initializer<int>,llvm::cl::desc>((llvm::cl::Option *)&NonGlobalValueMaxNameSize, "non-global-value-max-name-size", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &NonGlobalValueMaxNameSize, &dword_24A800000);
}

uint64_t llvm::getGCStrategy(void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  std::string v7;
  __int16 v8;
  std::string v9;
  std::string v10;
  std::string v11;
  void *v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v2 = llvm::Registry<llvm::GCStrategy>::Head;
  if (!llvm::Registry<llvm::GCStrategy>::Head)
  {
    std::string::basic_string[abi:nn180100]<0>(&v10, "unsupported GC: ");
    llvm::StringRef::str(v12, &v9);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, (const std::string::value_type *)&v9, &v7);
    std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, " (did you remember to link and initialize the library?)", &v11);
    std::string::~string(&v7);
    std::string::~string(&v9);
    std::string::~string(&v10);
LABEL_7:
    v8 = 260;
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
    llvm::report_fatal_error((llvm *)&v7, (const llvm::Twine *)1);
  }
  while (1)
  {
    v5 = v2[1];
    if (*(void **)(v5 + 8) == a2 && (!a2 || !memcmp(*(const void **)v5, a1, (size_t)a2)))
      return (*(uint64_t (**)(void))(v5 + 32))();
    v2 = (_QWORD *)*v2;
    if (!v2)
    {
      std::string::basic_string[abi:nn180100]<0>(&v10, "unsupported GC: ");
      llvm::StringRef::str(v12, &v9);
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, (const std::string::value_type *)&v9, &v11);
      goto LABEL_7;
    }
  }
}

void **llvm::StringRef::str@<X0>(void **this@<X0>, _QWORD *a2@<X8>)
{
  if (*this)
    return (void **)std::string::basic_string[abi:nn180100](a2, *this, (size_t)this[1]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return this;
}

void llvm::GlobalPtrAuthInfo::tryAnalyze(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  const char *v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::formatv_object_base *v17;
  llvm::formatv_object_base *v18;
  const void **v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t *v27;
  const char *v28;
  uint64_t v29;
  llvm::formatv_object_base *v30[4];
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = **this;
  v5 = llvm::Value::stripPointerCasts((llvm::Value *)this);
  if (!v5 || (v6 = (uint64_t)v5, *((_BYTE *)v5 + 16) != 3))
  {
    v13 = "value isn't a global";
    goto LABEL_11;
  }
  if ((*((_BYTE *)v5 + 34) & 0x80) != 0)
  {
    v7 = (uint64_t *)(***(_QWORD ***)v5 + 2552);
    v30[0] = (llvm::formatv_object_base *)v6;
    v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v7, v30);
    if (v8[2] == 12)
    {
      v9 = (uint64_t *)v8[1];
      v10 = *v9;
      v11 = *((_DWORD *)v9 + 2);
      if (v10 == 0x7274702E6D766C6CLL && v11 == 1752462689)
      {
        if (*(_BYTE *)(v6 + 16))
        {
          if (*(_BYTE *)(v6 + 16) == 3 && (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
          {
LABEL_20:
            v13 = "global doesn't have an initializer";
            goto LABEL_11;
          }
        }
        else if (*(_QWORD *)(v6 + 72) == v6 + 72 && (*(_BYTE *)(v6 + 35) & 1) == 0)
        {
          goto LABEL_20;
        }
        v15 = *(uint64_t **)(v6 - 32);
        v16 = *v15;
        if (!*v15 || *(_BYTE *)(v16 + 8) != 16)
        {
          v13 = "global isn't a struct";
          goto LABEL_11;
        }
        v17 = (llvm::formatv_object_base *)(*v4 + 2016);
        v18 = (llvm::formatv_object_base *)(*v4 + 1992);
        v30[0] = (llvm::formatv_object_base *)llvm::PointerType::get((llvm::PointerType **)(*v4 + 1944), 0);
        v30[1] = v18;
        v30[2] = v17;
        v30[3] = v17;
        v19 = (const void **)llvm::StructType::get(v4, (uint64_t)v30, 4, 0);
        if (!llvm::StructType::isLayoutIdentical((const void **)v16, v19))
        {
          v13 = "global doesn't have type '{ i8*, i32, i64, i64 }'";
          goto LABEL_11;
        }
        v20 = *((_DWORD *)v15 + 5);
        if ((v20 & 0x40000000) != 0)
        {
          v21 = (uint64_t *)*(v15 - 1);
          v24 = v21[4];
          if (!v24 || *(_BYTE *)(v24 + 16) != 16)
          {
LABEL_41:
            v28 = "key isn't a constant integer";
            goto LABEL_47;
          }
        }
        else
        {
          v21 = &v15[-4 * (v20 & 0x7FFFFFF)];
          v22 = v21[4];
          if (v22)
            v23 = *(_BYTE *)(v22 + 16) == 16;
          else
            v23 = 0;
          if (!v23)
            goto LABEL_41;
        }
        v25 = *(unsigned __int8 *)(v21[8] + 16);
        if (v25 == 5 || v25 == 16)
        {
          if ((v20 & 0x40000000) != 0)
            v27 = (uint64_t *)*(v15 - 1);
          else
            v27 = &v15[-4 * (v20 & 0x7FFFFFF)];
          v29 = v27[12];
          if (v29 && *(_BYTE *)(v29 + 16) == 16)
          {
            v14 = *(_BYTE *)(a2 + 8) & 0xFE;
            goto LABEL_12;
          }
          v28 = "discriminator isn't a constant integer";
        }
        else
        {
          v28 = "address discriminator isn't a constant integer or expr";
        }
LABEL_47:
        v30[0] = (llvm::formatv_object_base *)v28;
        v31 = 259;
        llvm::GlobalPtrAuthInfo::tryAnalyze(llvm::Value const*)::$_0::operator()((uint64_t *)a2, v30);
        *(_BYTE *)(a2 + 8) |= 1u;
        return;
      }
    }
  }
  v13 = "global isn't in section \"llvm.ptrauth\"";
LABEL_11:
  v30[0] = (llvm::formatv_object_base *)v13;
  v31 = 259;
  getErrorErrorCat();
  v6 = operator new();
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(v30, (std::string *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 3;
  *(_QWORD *)(v6 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v6 + 48) = 1;
  v14 = *(_BYTE *)(a2 + 8) | 1;
LABEL_12:
  *(_BYTE *)(a2 + 8) = v14;
  *(_QWORD *)a2 = v6;
}

void llvm::GlobalPtrAuthInfo::tryAnalyze(llvm::Value const*)::$_0::operator()(uint64_t *a1, llvm::formatv_object_base **a2)
{
  uint64_t v4;

  getErrorErrorCat();
  v4 = operator new();
  *(_QWORD *)v4 = off_251C127D0;
  llvm::Twine::str(a2, (std::string *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = 3;
  *(_QWORD *)(v4 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v4 + 48) = 1;
  *a1 = v4;
}

_QWORD *llvm::GlobalValue::setPartition(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  _BYTE *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _DWORD *v9;

  v4 = (_BYTE *)a2;
  v5 = result;
  if ((*((_BYTE *)result + 33) & 0x80) != 0)
  {
    if (!a3)
    {
      v7 = 0;
      goto LABEL_7;
    }
LABEL_5:
    v4 = llvm::UniqueStringSaver::save((uint64_t *)(**(_QWORD **)*result + 2168), a2, a3, a4);
    v7 = v6;
LABEL_7:
    v8 = (uint64_t *)(***(_QWORD ***)v5 + 2576);
    v9 = v5;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v8, &v9);
    result[1] = v4;
    result[2] = v7;
    v5[8] = v5[8] & 0xFFFF7FFF | ((v7 != 0) << 15);
    return result;
  }
  if (a3)
    goto LABEL_5;
  return result;
}

void *llvm::GlobalValue::getPartition(llvm::GlobalValue *this)
{
  uint64_t *v2;
  llvm::GlobalValue *v3;

  if ((*((_BYTE *)this + 33) & 0x80) == 0)
    return &str_3_22;
  v2 = (uint64_t *)(***(_QWORD ***)this + 2576);
  v3 = this;
  return (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v2, &v3)[1];
}

_QWORD *llvm::GlobalValue::setSanitizerMetadata(_DWORD *a1, char a2)
{
  uint64_t *v4;
  _QWORD *result;
  _DWORD *v6;

  v4 = (uint64_t *)(***(_QWORD ***)a1 + 2600);
  v6 = a1;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::FindAndConstruct(v4, &v6);
  *((_BYTE *)result + 8) = a2;
  a1[8] |= 0x10000u;
  return result;
}

void llvm::GlobalObject::~GlobalObject(llvm::GlobalObject *this)
{
  uint64_t v2;
  llvm::Value *v3;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v2 + 16), this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v3);
}

const void **llvm::GlobalObject::setComdat(const void **result, uint64_t a2)
{
  const void **v3;
  char *v4;
  char v5[24];

  v3 = result;
  v4 = (char *)result[6];
  if (v4)
    result = (const void **)llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v4 + 16), result);
  v3[6] = (const void *)a2;
  if (a2)
    return llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(a2 + 16), v3, (uint64_t)v5);
  return result;
}

uint64_t llvm::GlobalValue::isInterposable(llvm::GlobalValue *this)
{
  _DWORD *Section;
  uint64_t v3;
  uint64_t result;

  if (*((_BYTE *)this + 16) == 3)
  {
    Section = llvm::GlobalValue::getSection(this);
    if (v3 == 12 && *(_QWORD *)Section == 0x7274702E6D766C6CLL && Section[2] == 1752462689)
      return 1;
  }
  result = 1;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x1EB) != 0)
  {
    result = *((_QWORD *)this + 5);
    if (result)
    {
      result = llvm::Module::getSemanticInterposition((llvm::Module *)result);
      if ((_DWORD)result)
        return (*((_BYTE *)this + 33) & 0x40) == 0;
    }
  }
  return result;
}

void *llvm::GlobalValue::getSection(llvm::GlobalValue *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  _QWORD v5[2];
  int v6;

  if (!this || *((_BYTE *)this + 16) != 1)
  {
    if ((*((_BYTE *)this + 34) & 0x80) != 0)
    {
      v4 = ***(_QWORD ***)this + 2552;
      v5[0] = this;
      v2 = (uint64_t *)v4;
      return (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v2, v5)[1];
    }
    return 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  v6 = 0;
  v1 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*((_QWORD *)this - 4), (uint64_t)v5);
  MEMORY[0x24BD1B398](v5[0], 8);
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 34) & 0x80) != 0)
    {
      v2 = (uint64_t *)(***(_QWORD ***)v1 + 2552);
      v5[0] = v1;
      return (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v2, v5)[1];
    }
    return 0;
  }
  return &str_3_22;
}

BOOL llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  if (this && *((_BYTE *)this + 16) == 3)
  {
    return (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  }
  else
  {
    if (*((_BYTE *)this + 16) || *((llvm::GlobalValue **)this + 9) != (llvm::GlobalValue *)((char *)this + 72))
      return 0;
    return (*((_BYTE *)this + 35) & 1) == 0;
  }
}

uint64_t llvm::GlobalValue::getComdat(llvm::GlobalValue *this)
{
  llvm::GlobalValue *v1;
  int v2;
  _QWORD v4[2];
  int v5;

  v1 = this;
  v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 1)
  {
    v4[0] = 0;
    v4[1] = 0;
    v5 = 0;
    v1 = (llvm::GlobalValue *)findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*((_QWORD *)this - 4), (uint64_t)v4);
    MEMORY[0x24BD1B398](v4[0], 8);
    if (v1)
      return *((_QWORD *)v1 + 6);
  }
  else if (v2 != 2)
  {
    return *((_QWORD *)v1 + 6);
  }
  return 0;
}

_QWORD *llvm::GlobalObject::setSection(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  _BYTE *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _DWORD *v9;

  v4 = (_BYTE *)a2;
  v5 = result;
  if ((*((_BYTE *)result + 34) & 0x80) != 0)
  {
    if (!a3)
    {
      v7 = 0;
      goto LABEL_7;
    }
LABEL_5:
    v4 = llvm::UniqueStringSaver::save((uint64_t *)(**(_QWORD **)*result + 2168), a2, a3, a4);
    v7 = v6;
LABEL_7:
    v8 = (uint64_t *)(***(_QWORD ***)v5 + 2552);
    v9 = v5;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v8, &v9);
    result[1] = v4;
    result[2] = v7;
    v5[8] = v5[8] & 0xFF7FFFFF | ((v7 != 0) << 23);
    return result;
  }
  if (a3)
    goto LABEL_5;
  return result;
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  _DWORD *Section;
  uint64_t v3;
  uint64_t v4;
  uint64_t hasExternalWeakLinkage;
  uint64_t v8;
  int v9;
  const void **v10;
  const void *v11;
  llvm::DataLayout *v12;
  unsigned __int8 *v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;

  if (!this)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*((_BYTE *)this + 16) != 3)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  Section = llvm::GlobalValue::getSection(this);
  if (v4 != 12)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*(_QWORD *)Section != 0x7274702E6D766C6CLL || Section[2] != 1752462689)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 1;
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_DWORD *)this + 8) & 0x1000000) == 0)
  {
    return 1;
  }
  v8 = *((_QWORD *)this - 4);
  v9 = *(_DWORD *)(v8 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(const void ***)(v8 - 8);
  else
    v10 = (const void **)(v8 - 32 * (v9 & 0x7FFFFFF));
  v11 = *v10;
  v16 = 64;
  v15 = 0;
  v12 = (llvm::DataLayout *)(*((_QWORD *)this + 5) + 256);
  hasExternalWeakLinkage = 1;
  v13 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets(v11, v12, &v15, 1, 0, 0, v3);
  if (v13)
    v14 = v13[16] > 3u;
  else
    v14 = 1;
  if (!v14)
    hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13);
  if (v16 >= 0x41 && v15)
    MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
  return hasExternalWeakLinkage;
}

uint64_t findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  while (1)
  {
    while (1)
    {
      v4 = *(unsigned __int8 *)(a1 + 16);
      if (v4 <= 3 && v4 != 1)
        return a1;
      v6 = v4 == 1 ? a1 : 0;
      v11 = v6;
      if (!v6)
        break;
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v12, a2, &v11);
      if (!v12[16])
      {
        v4 = *(unsigned __int8 *)(a1 + 16);
        break;
      }
      a1 = *(_QWORD *)(v6 - 32);
    }
    if (v4 != 5)
      return 0;
    result = 0;
    v7 = *(unsigned __int16 *)(a1 + 18);
    if (v7 > 0x2E)
    {
      if (v7 - 47 >= 3)
        return result;
      goto LABEL_21;
    }
    if (v7 != 15)
      break;
    if (findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32), a2))
    {
      return 0;
    }
LABEL_21:
    a1 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  }
  if (v7 == 34)
    goto LABEL_21;
  if (v7 == 13)
  {
    v9 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2);
    result = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32), a2);
    if (result)
      v10 = 0;
    else
      v10 = v9;
    if (v9)
      return v10;
  }
  return result;
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, llvm::PointerType **a2, char a3, int a4, uint64_t a5, const llvm::Twine *a6, char a7, llvm::Type *a8, char a9)
{
  _QWORD *v12;
  uint64_t result;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v12 = (_QWORD *)(a1 - 32);
  result = llvm::GlobalValue::GlobalValue(a1, a2, 3, a1 - 32, a5 != 0, a4, a6, a8);
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  v14 = *(_DWORD *)(result + 32);
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  if (a9)
    v15 = 2;
  else
    v15 = 0;
  *(_BYTE *)(result + 80) = v15 | a3 | *(_BYTE *)(result + 80) & 0xFC;
  *(_DWORD *)(result + 32) = v14 & 0x1E3FF | ((a7 & 7) << 10);
  if (a5)
  {
    if (*v12)
    {
      **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
      v16 = *(_QWORD *)(result - 24);
      if (v16)
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(result - 16);
    }
    *(_QWORD *)(result - 32) = a5;
    v19 = *(_QWORD *)(a5 + 8);
    v18 = (_QWORD *)(a5 + 8);
    v17 = v19;
    *(_QWORD *)(result - 24) = v19;
    if (v19)
      *(_QWORD *)(v17 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v18;
    *v18 = v12;
  }
  return result;
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, uint64_t a2, llvm::PointerType **a3, char a4, int a5, uint64_t a6, const llvm::Twine *a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  llvm::ValueSymbolTable *v29;
  uint64_t v30;

  v16 = (_QWORD *)(a1 - 32);
  if ((a10 & 0xFF00000000) != 0)
    v17 = a10;
  else
    v17 = *(unsigned int *)(a2 + 272);
  v18 = llvm::GlobalValue::GlobalValue(a1, a3, 3, a1 - 32, a6 != 0, a5, a7, (llvm::Type *)v17);
  *(_QWORD *)(v18 + 56) = 0;
  v19 = v18 + 56;
  *(_QWORD *)(v18 + 48) = 0;
  v20 = *(_DWORD *)(v18 + 32);
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 72) = 0;
  if (a11)
    v21 = 2;
  else
    v21 = 0;
  *(_BYTE *)(v18 + 80) = v21 | a4 | *(_BYTE *)(v18 + 80) & 0xFC;
  *(_DWORD *)(v18 + 32) = v20 & 0x1E3FF | ((a9 & 7) << 10);
  if (a6)
  {
    if (*v16)
    {
      **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
      v22 = *(_QWORD *)(a1 - 24);
      if (v22)
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 - 16);
    }
    *(_QWORD *)(a1 - 32) = a6;
    v25 = *(_QWORD *)(a6 + 8);
    v24 = (_QWORD *)(a6 + 8);
    v23 = v25;
    *(_QWORD *)(a1 - 24) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v24;
    *v24 = v16;
  }
  if (a8)
  {
    v26 = *(_QWORD *)(a8 + 40);
    v27 = (uint64_t *)(a8 + 56);
    v28 = v26 + 8;
  }
  else
  {
    v28 = a2 + 8;
    v27 = (uint64_t *)(a2 + 8);
  }
  *(_QWORD *)(a1 + 40) = v28 - 8;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
    if (v29)
      llvm::ValueSymbolTable::reinsertValue(v29, (uint64_t ***)a1);
  }
  v30 = *v27;
  *(_QWORD *)(a1 + 56) = *v27;
  *(_QWORD *)(a1 + 64) = v27;
  *(_QWORD *)(v30 + 8) = v19;
  *v27 = v19;
  return a1;
}

uint64_t llvm::GlobalVariable::setInitializer(uint64_t this, llvm::Constant *a2)
{
  BOOL v2;
  char v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (this)
    v2 = *(_BYTE *)(this + 16) == 3;
  else
    v2 = 0;
  v3 = !v2;
  if (a2)
  {
    if ((v3 & 1) != 0)
    {
      if (*(_BYTE *)(this + 16) || *(_QWORD *)(this + 72) != this + 72 || (*(_DWORD *)(this + 32) & 0x1000000) != 0)
        goto LABEL_19;
    }
    else if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) != 0)
    {
      goto LABEL_19;
    }
    *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xF8000000 | 1;
LABEL_19:
    if (*(_QWORD *)(this - 32))
    {
      **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
      v5 = *(_QWORD *)(this - 24);
      if (v5)
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(this - 16);
    }
    *(_QWORD *)(this - 32) = a2;
    v8 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)((char *)a2 + 8);
    v7 = v8;
    *(_QWORD *)(this - 24) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v6;
    *v6 = this - 32;
    return this;
  }
  if ((v3 & 1) == 0)
  {
    v4 = *(_DWORD *)(this + 20) & 0x7FFFFFF;
LABEL_27:
    if (!v4)
      return this;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(this + 16) && *(_QWORD *)(this + 72) == this + 72)
  {
    v4 = *(_DWORD *)(this + 32) & 0x1000000;
    goto LABEL_27;
  }
LABEL_28:
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v9 = *(_QWORD *)(this - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(this - 16);
  }
  *(_QWORD *)(this - 32) = 0;
  *(_DWORD *)(this + 20) &= 0xF8000000;
  return this;
}

uint64_t llvm::GlobalAlias::GlobalAlias(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, int a4, const llvm::Twine *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  llvm::ValueSymbolTable *v13;
  uint64_t v14;

  v10 = llvm::GlobalValue::GlobalValue(a1, a2, 1, a1 - 32, 1, a4, a5, a3);
  *(_QWORD *)(v10 + 48) = 0;
  v11 = v10 + 48;
  *(_QWORD *)(v10 + 56) = 0;
  llvm::GlobalIFunc::setResolver(v10, a6);
  if (a7)
  {
    v12 = (uint64_t *)(a7 + 40);
    *(_QWORD *)(a1 + 40) = a7;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v13 = *(llvm::ValueSymbolTable **)(a7 + 112);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, (uint64_t ***)a1);
    }
    v14 = *v12;
    *(_QWORD *)(a1 + 48) = *v12;
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(v14 + 8) = v11;
    *v12 = v11;
  }
  return a1;
}

uint64_t llvm::GlobalAlias::create(llvm::PointerType **a1, llvm::Type *a2, int a3, const llvm::Twine *a4, uint64_t a5)
{
  _DWORD *v10;

  v10 = operator new(0x60uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  return llvm::GlobalAlias::GlobalAlias((uint64_t)(v10 + 8), a1, a2, a3, a4, 0, a5);
}

uint64_t llvm::GlobalIFunc::GlobalIFunc(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, int a4, const llvm::Twine *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  llvm::ValueSymbolTable *v13;
  uint64_t v14;

  v10 = llvm::GlobalValue::GlobalValue(a1, a2, 2, a1 - 32, 1, a4, a5, a3);
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  v11 = v10 + 56;
  *(_DWORD *)(v10 + 32) &= 0x1FFFFu;
  *(_QWORD *)(v10 + 64) = 0;
  llvm::GlobalIFunc::setResolver(v10, a6);
  if (a7)
  {
    v12 = (uint64_t *)(a7 + 56);
    *(_QWORD *)(a1 + 40) = a7;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v13 = *(llvm::ValueSymbolTable **)(a7 + 112);
      if (v13)
        llvm::ValueSymbolTable::reinsertValue(v13, (uint64_t ***)a1);
    }
    v14 = *v12;
    *(_QWORD *)(a1 + 56) = *v12;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(v14 + 8) = v11;
    *v12 = v11;
  }
  return a1;
}

uint64_t llvm::GlobalIFunc::create(llvm::PointerType **a1, llvm::Type *a2, int a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v12;

  v12 = operator new(0x68uLL);
  v12[13] = v12[13] & 0x38000000 | 1;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 8;
  return llvm::GlobalIFunc::GlobalIFunc((uint64_t)(v12 + 8), a1, a2, a3, a4, a5, a6);
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = (llvm::Value *)(a2 - 56);
  else
    v3 = 0;
  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(a1, v3);
  v4 = *((_QWORD *)v3 + 7);
  v5 = (_QWORD *)*((_QWORD *)v3 + 8);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 8) = 0;
  llvm::ilist_alloc_traits<llvm::GlobalVariable>::deleteNode(v3);
  return v2;
}

void llvm::ilist_alloc_traits<llvm::GlobalVariable>::deleteNode(llvm::GlobalObject *a1)
{
  void **v2;

  if (a1)
  {
    llvm::User::dropAllReferences((uint64_t)a1);
    llvm::Value::clearMetadata((uint64_t)a1);
    llvm::GlobalObject::~GlobalObject(a1);
    *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 5) & 0xF8000000 | 1;
    llvm::User::operator delete(v2);
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = (llvm::Value *)(a2 - 48);
  else
    v3 = 0;
  llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(a1, v3);
  v4 = *((_QWORD *)v3 + 6);
  v5 = (_QWORD *)*((_QWORD *)v3 + 7);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 7) = 0;
  llvm::ilist_alloc_traits<llvm::GlobalAlias>::deleteNode(v3);
  return v2;
}

void llvm::ilist_alloc_traits<llvm::GlobalAlias>::deleteNode(llvm::Value *a1)
{
  llvm::Value *v2;
  void **v3;

  if (a1)
  {
    llvm::Constant::removeDeadConstantUsers((uint64_t)a1);
    llvm::Value::~Value(a1, v2);
    llvm::User::operator delete(v3);
  }
}

uint64_t llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalIFunc>,llvm::SymbolTableListTraits<llvm::GlobalIFunc>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;
  uint64_t v4;
  _QWORD *v5;
  void **v6;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = (llvm::Value *)(a2 - 56);
  else
    v3 = 0;
  llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(a1, v3);
  v4 = *((_QWORD *)v3 + 7);
  v5 = (_QWORD *)*((_QWORD *)v3 + 8);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 8) = 0;
  llvm::GlobalObject::~GlobalObject(v3);
  llvm::User::operator delete(v6);
  return v2;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::InsertIntoBucketImpl<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, (_QWORD *)v13, &v17);
          v14 = v17;
          *v17 = *(_QWORD *)v13;
          *(_OWORD *)(v14 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 24 * v15;
    do
    {
      *result = -4096;
      result += 3;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucketImpl<llvm::GlobalValue const*>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) &= 0xF0u;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::InsertIntoBucketImpl<llvm::GlobalValue const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, (_QWORD *)v13, &v17);
          v14 = v17;
          *v17 = *(_QWORD *)v13;
          *((_DWORD *)v14 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    do
    {
      *result = -4096;
      result += 2;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::createCallHelper(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t *result;

  v12 = a2;
  if (a2)
    a2 = *(_QWORD *)(a2 + 24);
  result = llvm::IRBuilderBase::CreateCall(a1, a2, v12, a3, a4, a7, a8, a5, 0);
  if (a6)
    *((_BYTE *)result + 17) = *(_BYTE *)(a6 + 17) & 0xFE | *((_BYTE *)result + 17) & 1;
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateIntrinsic(uint64_t a1, int a2, BOOL **a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Declaration;

  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), a2, a3, a4);
  return llvm::IRBuilderBase::createCallHelper(a1, Declaration, a5, a6, a8, a7, 0, 0);
}

uint64_t *llvm::IRBuilderBase::CreateMaskedLoad(uint64_t a1, llvm::PoisonValue *this, BOOL **a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  BOOL *v14;
  uint64_t v16[4];
  BOOL *v17[3];

  v8 = a6;
  v17[2] = *(BOOL **)MEMORY[0x24BDAC8D0];
  v14 = *a3;
  if (!a6)
    v8 = llvm::PoisonValue::get(this, this);
  v17[0] = (BOOL *)this;
  v17[1] = v14;
  v16[0] = (uint64_t)a3;
  v16[1] = llvm::ConstantInt::get(**(_QWORD **)(a1 + 64) + 1992, (1 << a4), 0);
  v16[2] = a5;
  v16[3] = v8;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic(a1, 188, v16, 4, v17, 2, a7);
}

uint64_t *llvm::IRBuilderBase::CreateMaskedIntrinsic(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, BOOL **a5, uint64_t a6, uint64_t a7)
{
  uint64_t Declaration;
  uint64_t v12;

  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), a2, a5, a6);
  if (Declaration)
    v12 = *(_QWORD *)(Declaration + 24);
  else
    v12 = 0;
  return llvm::IRBuilderBase::CreateCall(a1, v12, Declaration, a3, a4, 0, 0, a7, 0);
}

uint64_t *llvm::IRBuilderBase::CreateMaskedStore(uint64_t a1, BOOL **a2, BOOL **a3, char a4, uint64_t a5)
{
  BOOL *v7;
  _WORD v9[20];
  uint64_t v10[4];
  BOOL *v11[3];

  v11[2] = *(BOOL **)MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  v10[0] = (uint64_t)a2;
  v10[1] = (uint64_t)a3;
  v10[2] = llvm::ConstantInt::get(**(_QWORD **)(a1 + 64) + 1992, (1 << a4), 0);
  v10[3] = a5;
  v9[16] = 257;
  return llvm::IRBuilderBase::CreateMaskedIntrinsic(a1, 190, v10, 4, v11, 2, (uint64_t)v9);
}

uint64_t *llvm::IRBuilderBase::CreateConstrainedFPBinOp(uint64_t a1, int a2, BOOL **a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  uint64_t ConstrainedFPRounding;
  uint64_t ConstrainedFPExcept;
  BOOL *v18;
  uint64_t Declaration;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23[4];
  BOOL *v24[2];

  v24[1] = *(BOOL **)MEMORY[0x24BDAC8D0];
  ConstrainedFPRounding = llvm::IRBuilderBase::getConstrainedFPRounding(a1, a8);
  ConstrainedFPExcept = llvm::IRBuilderBase::getConstrainedFPExcept(a1, a9);
  if (a5)
  {
    if (*(unsigned __int8 *)(a5 + 17) >> 1 == 127)
      LOBYTE(a5) = -1;
    else
      LOBYTE(a5) = *(_BYTE *)(a5 + 17) >> 1;
  }
  else
  {
    LODWORD(a5) = *(_DWORD *)(a1 + 96);
  }
  v18 = *a3;
  v23[3] = ConstrainedFPExcept;
  v24[0] = v18;
  v23[0] = (uint64_t)a3;
  v23[1] = a4;
  v23[2] = ConstrainedFPRounding;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), a2, v24, 1);
  if (Declaration)
    v20 = *(_QWORD *)(Declaration + 24);
  else
    v20 = 0;
  v21 = llvm::IRBuilderBase::CreateCall(a1, v20, Declaration, v23, 4, 0, 0, a6, 0);
  v21[8] = (uint64_t)llvm::AttributeList::addAttributeAtIndex((uint64_t **)v21 + 8, *(uint64_t **)*v21, -1, 62);
  if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
    llvm::Value::setMetadata((uint64_t)v21, 3, a7);
  *((_BYTE *)v21 + 17) |= 2 * (_BYTE)a5;
  return v21;
}

uint64_t llvm::IRBuilderBase::getConstrainedFPRounding(uint64_t a1, __int16 a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t *v7[3];

  v3 = *(_BYTE *)(a1 + 102);
  if ((a2 & 0xFF00) != 0)
    v3 = a2;
  llvm::convertRoundingModeToStr(v3, v7);
  v4 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(_QWORD **)(a1 + 64) + 312), v7[0], (unint64_t)v7[1]);
  if (v5)
    *(_QWORD *)(v4 + 16) = v4;
  return llvm::MetadataAsValue::get(*(_QWORD **)(a1 + 64), (_BYTE *)(v4 + 8));
}

uint64_t llvm::IRBuilderBase::getConstrainedFPExcept(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  char v4;
  uint64_t *v6[3];

  if ((a2 & 0xFF00) == 0)
    LOBYTE(a2) = *(_BYTE *)(a1 + 101);
  llvm::convertExceptionBehaviorToStr(a2, v6);
  v3 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(_QWORD **)(a1 + 64) + 312), v6[0], (unint64_t)v6[1]);
  if (v4)
    *(_QWORD *)(v3 + 16) = v3;
  return llvm::MetadataAsValue::get(*(_QWORD **)(a1 + 64), (_BYTE *)(v3 + 8));
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast(uint64_t a1, int a2, BOOL *a3, BOOL *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  uint64_t ConstrainedFPExcept;
  uint64_t v18;
  int v19;
  uint64_t ConstrainedFPRounding;
  uint64_t v21;
  uint64_t Declaration;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  ConstrainedFPExcept = llvm::IRBuilderBase::getConstrainedFPExcept(a1, a9);
  v18 = ConstrainedFPExcept;
  if (a5)
  {
    if (*(unsigned __int8 *)(a5 + 17) >> 1 == 127)
      LOBYTE(v19) = -1;
    else
      v19 = *(unsigned __int8 *)(a5 + 17) >> 1;
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 96);
  }
  if ((a2 - 81) <= 0x26 && ((1 << (a2 - 81)) & 0x5CF07BC74FLL) != 0)
  {
    ConstrainedFPRounding = llvm::IRBuilderBase::getConstrainedFPRounding(a1, a8);
    v21 = *(_QWORD *)a3;
    v33 = a4;
    v34 = v21;
    v30 = a3;
    v31 = ConstrainedFPRounding;
    v32 = v18;
    Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), a2, &v33, 2);
    if (Declaration)
      v23 = *(_QWORD *)(Declaration + 24);
    else
      v23 = 0;
    v24 = llvm::IRBuilderBase::CreateCall(a1, v23, Declaration, (uint64_t *)&v30, 3, 0, 0, a6, 0);
  }
  else
  {
    v27 = *(_QWORD *)a3;
    v30 = a4;
    v31 = v27;
    v33 = a3;
    v34 = ConstrainedFPExcept;
    v28 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), a2, &v30, 2);
    if (v28)
      v29 = *(_QWORD *)(v28 + 24);
    else
      v29 = 0;
    v24 = llvm::IRBuilderBase::CreateCall(a1, v29, v28, (uint64_t *)&v33, 2, 0, 0, a6, 0);
  }
  v25 = (uint64_t)v24;
  v24[8] = (uint64_t)llvm::AttributeList::addAttributeAtIndex((uint64_t **)v24 + 8, *(uint64_t **)*v24, -1, 62);
  if (llvm::FPMathOperator::classof(v25))
  {
    if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v25, 3, a7);
    *(_BYTE *)(v25 + 17) |= 2 * (_BYTE)v19;
  }
  return v25;
}

uint64_t *llvm::IRBuilderBase::CreateSelect(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t *result;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::MDNode *Metadata;
  llvm::MDNode *v18;
  int v19;
  llvm::MDNode *v20;
  _BYTE v21[32];
  __int16 v22;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
  if (result)
    return result;
  v22 = 257;
  v13 = operator new(0xA0uLL);
  v14 = 0;
  v15 = (uint64_t)(v13 + 24);
  v13[29] = v13[29] & 0x38000000 | 3;
  do
  {
    v16 = &v13[v14];
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    v16[3] = v15;
    v14 += 8;
  }
  while (v14 != 24);
  llvm::SelectInst::SelectInst((llvm::SelectInst *)(v13 + 24), a2, a3, a4, (const llvm::Twine *)v21, 0);
  if (a6)
  {
    if (*((_QWORD *)a6 + 6) || (*((_BYTE *)a6 + 23) & 0x20) != 0)
    {
      Metadata = (llvm::MDNode *)llvm::Value::getMetadata(a6, 2);
      if (*((_QWORD *)a6 + 6) || (*((_BYTE *)a6 + 23) & 0x20) != 0)
      {
        v18 = (llvm::MDNode *)llvm::Value::getMetadata(a6, 15);
        goto LABEL_12;
      }
    }
    else
    {
      Metadata = 0;
    }
    v18 = 0;
LABEL_12:
    v15 = llvm::IRBuilderBase::addBranchMetadata<llvm::SelectInst>((uint64_t)this, v15, Metadata, v18);
  }
  if (llvm::FPMathOperator::classof(v15))
  {
    v19 = *((_DWORD *)this + 24);
    v20 = (llvm::MDNode *)*((_QWORD *)this + 11);
    if (v20)
      llvm::Value::setMetadata(v15, 3, v20);
    *(_BYTE *)(v15 + 17) |= 2 * (_BYTE)v19;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v15, (uint64_t)a5);
}

uint64_t llvm::IRBuilderBase::addBranchMetadata<llvm::SelectInst>(uint64_t a1, uint64_t a2, llvm::MDNode *a3, llvm::MDNode *a4)
{
  if (a3)
    llvm::Value::setMetadata(a2, 2, a3);
  if (a4)
    llvm::Value::setMetadata(a2, 15, a4);
  return a2;
}

uint64_t *llvm::IRBuilderBase::CreateVectorSplat(llvm::IRBuilderBase *a1, llvm::Type *a2, uint64_t ***a3, uint64_t a4)
{
  unint64_t v7;
  llvm::PoisonValue *v8;
  llvm::Type *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  void *v15;
  uint64_t *InsertElement;
  llvm::Type *v17;
  int *v18;
  llvm::Type *v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t *ShuffleVector;
  _QWORD v27[4];
  __int16 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  llvm::VectorType::get(*a3, a2);
  v10 = (llvm::Value *)llvm::PoisonValue::get(v8, v9);
  v11 = (llvm::Value *)llvm::ConstantInt::get(**((_QWORD **)a1 + 8) + 2016, 0, 0);
  v12 = *(unsigned __int8 *)(a4 + 32);
  if (v12 == 1)
  {
    v29 = ".splatinsert";
    v13 = 259;
    goto LABEL_5;
  }
  if (!*(_BYTE *)(a4 + 32))
  {
    v13 = 256;
LABEL_5:
    v32 = v13;
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a4 + 8);
  if (*(_BYTE *)(a4 + 33) == 1)
  {
    v15 = *(void **)a4;
  }
  else
  {
    LOBYTE(v12) = 2;
    v15 = (void *)a4;
  }
  v29 = v15;
  v30 = v14;
  v31[0] = ".splatinsert";
  LOBYTE(v32) = v12;
  HIBYTE(v32) = 3;
LABEL_10:
  InsertElement = llvm::IRBuilderBase::CreateInsertElement(a1, v10, (llvm::Value *)a3, v11, (const llvm::Twine *)&v29);
  v29 = v31;
  v30 = 0x1000000000;
  llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&v29, v7);
  v18 = (int *)v29;
  v19 = (llvm::Type *)v30;
  v20 = *(unsigned __int8 *)(a4 + 32);
  if (v20 == 1)
  {
    v27[0] = ".splat";
    v21 = 259;
  }
  else
  {
    if (*(_BYTE *)(a4 + 32))
    {
      v22 = *(_QWORD *)(a4 + 8);
      if (*(_BYTE *)(a4 + 33) == 1)
      {
        v23 = *(void **)a4;
      }
      else
      {
        LOBYTE(v20) = 2;
        v23 = (void *)a4;
      }
      v27[0] = v23;
      v27[1] = v22;
      v27[2] = ".splat";
      LOBYTE(v28) = v20;
      HIBYTE(v28) = 3;
      goto LABEL_19;
    }
    v21 = 256;
  }
  v28 = v21;
LABEL_19:
  v24 = llvm::PoisonValue::get((llvm::PoisonValue *)*InsertElement, v17);
  ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a1, InsertElement, v24, v18, v19, (uint64_t)v27);
  if (v29 != v31)
    free(v29);
  return ShuffleVector;
}

void llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(llvm::IRBuilderDefaultInserter *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::IRBuilderDefaultInserter::InsertHelper(uint64_t a1, llvm::Value *a2, const llvm::Twine *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;

  if (a4)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a4 + 40, (uint64_t)a2);
    v8 = *a5;
    *((_QWORD *)a2 + 3) = *a5;
    *((_QWORD *)a2 + 4) = a5;
    *(_QWORD *)(v8 + 8) = (char *)a2 + 24;
    *a5 = (uint64_t)a2 + 24;
  }
  llvm::Value::setName(a2, a3);
}

void llvm::ConstantFolder::~ConstantFolder(llvm::ConstantFolder *this)
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::Constant *llvm::ConstantFolder::FoldBinOp(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, llvm::Type *a6)
{
  llvm::Constant *v6;
  llvm::Constant *v7;
  BOOL v8;

  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a3;
  if (a4[16] >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::Constant *)a4;
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  if (((1 << (char)this) & 0x1FD4000) != 0)
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, (llvm::Constant *)a4);
  return llvm::ConstantExpr::get(this, v6, v7, 0, 0, a6);
}

llvm::Constant *llvm::ConstantFolder::FoldExactBinOp(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, unsigned __int8 *a4, llvm::Constant *a5, llvm::Type *a6)
{
  llvm::Constant *v6;
  llvm::Constant *v7;
  BOOL v8;

  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a3;
  if (a4[16] >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::Constant *)a4;
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  if (((1 << (char)this) & 0x1FD4000) != 0)
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, (llvm::Constant *)a4);
  return llvm::ConstantExpr::get(this, v6, v7, a5, 0, a6);
}

llvm::Constant *llvm::ConstantFolder::FoldNoWrapBinOp(int a1, llvm::ConstantExpr *this, unsigned __int8 *a3, unsigned __int8 *a4, unsigned int a5, llvm::Type *a6)
{
  llvm::Constant *v6;
  llvm::Constant *v7;
  BOOL v8;
  unint64_t v10;

  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a3;
  if (a4[16] >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::Constant *)a4;
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  if (((1 << (char)this) & 0x1FD4000) != 0)
    return llvm::ConstantFoldBinaryInstruction(this, v6, v7, (llvm::Constant *)a4);
  if ((_DWORD)a6)
    v10 = a5 | 2;
  else
    v10 = a5;
  return llvm::ConstantExpr::get(this, v6, v7, (llvm::Constant *)v10, 0, a6);
}

llvm::ConstantExpr *llvm::ConstantFolder::FoldUnOpFMF(int a1, llvm *this, unsigned __int8 *a3)
{
  if (a3 && a3[16] <= 0x14u)
    return llvm::ConstantFoldUnaryInstruction(this, a3, (llvm::Constant *)a3);
  else
    return 0;
}

llvm::Constant *llvm::ConstantFolder::FoldICmp(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t ***v4;
  llvm::Constant *v5;
  BOOL v6;

  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    v4 = 0;
  else
    v4 = (uint64_t ***)a3;
  if (a4[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a4;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, v4, v5, 0);
}

uint64_t llvm::ConstantFolder::FoldGEP(uint64_t a1, unsigned __int8 *a2, uint64_t a3, llvm::Value *a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *i;

  v6 = a2[8];
  if (v6 != 19)
  {
    if (v6 != 21 || (getTargetTypeInfo((uint64_t *)a2), *(_BYTE *)(v12 + 8) != 19))
    {
      if (a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
      {
        if (!a5)
          return llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
        v13 = 8 * a5;
        for (i = a4; *(unsigned __int8 *)(*(_QWORD *)i + 16) <= 0x14u; i = (llvm::Value *)((char *)i + 8))
        {
          v13 -= 8;
          if (!v13)
            return llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
        }
      }
    }
  }
  return 0;
}

llvm::Constant *llvm::ConstantFolder::FoldSelect(llvm::ConstantFolder *this, llvm::Value *a2, llvm::PoisonValue **a3, llvm::Value *a4)
{
  llvm *v4;
  llvm::PoisonValue **v5;
  llvm::Constant *v6;
  BOOL v7;

  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
    v4 = 0;
  else
    v4 = a2;
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = a3;
  if (*((unsigned __int8 *)a4 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = a4;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7 || v6 == 0)
    return 0;
  else
    return llvm::ConstantFoldSelectInstruction(v4, v5, v6, a4);
}

llvm::Constant *llvm::ConstantFolder::FoldExtractValue(int a1, llvm::Constant *this, unsigned int *a3, uint64_t a4)
{
  llvm::Constant *result;
  uint64_t v5;

  result = 0;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    v5 = a4;
    if (a4)
    {
      result = this;
      do
      {
        result = (llvm::Constant *)llvm::Constant::getAggregateElement(result, (llvm::Type *)*a3);
        if (!result)
          break;
        ++a3;
        --v5;
      }
      while (v5);
    }
    else
    {
      return this;
    }
  }
  return result;
}

void *llvm::ConstantFolder::FoldInsertValue(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4, uint64_t a5)
{
  llvm::Constant *v5;
  unsigned __int8 *v6;
  BOOL v7;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a2;
  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  else
    return llvm::ConstantFoldInsertValueInstruction(v5, v6, a4, a5);
}

_QWORD *llvm::ConstantFolder::FoldExtractElement(llvm::ConstantFolder *this, llvm::Value *a2, llvm::Value *a3, llvm::Type *a4)
{
  llvm::ConstantExpr *v4;
  llvm::Constant *v5;
  BOOL v6;

  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
    v4 = 0;
  else
    v4 = a2;
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = a3;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getExtractElement(v4, v5, 0, a4);
}

llvm::ConstantExpr *llvm::ConstantFolder::FoldInsertElement(llvm::ConstantFolder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Type *a5)
{
  llvm::ConstantExpr *v5;
  llvm::Constant *v6;
  llvm::Constant *v7;
  BOOL v8;

  if (*((unsigned __int8 *)a2 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = a2;
  if (*((unsigned __int8 *)a3 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = a3;
  if (*((unsigned __int8 *)a4 + 16) >= 0x15u)
    v7 = 0;
  else
    v7 = a4;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8 || v7 == 0)
    return 0;
  else
    return llvm::ConstantExpr::getInsertElement(v5, v6, v7, 0, a5);
}

_QWORD *llvm::ConstantFolder::FoldShuffleVector(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4, _BOOL8 a5)
{
  llvm::ConstantExpr *v5;
  llvm::ConstantExpr *v6;
  BOOL v7;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::ConstantExpr *)a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  else
    return llvm::ConstantExpr::getShuffleVector(v5, v6, a4, a5, 0);
}

uint64_t llvm::ConstantFolder::CreateCast(uint64_t a1, int a2)
{
  return llvm::ConstantExpr::getCast(a2);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreatePointerCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type *a3)
{
  return llvm::ConstantExpr::getPointerCast(a2, a3, a3);
}

void llvm::ConstantFolder::CreatePointerBitCastOrAddrSpaceCast(llvm::ConstantFolder *this, llvm::Constant **a2, llvm::Type *a3)
{
  llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(a2, a3, a3);
}

uint64_t llvm::ConstantFolder::CreateIntCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type ***a3, llvm::Type *a4)
{
  return llvm::ConstantExpr::getIntegerCast(a2, a3, a4);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateFPCast(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getFPCast(a2, a3, (llvm::Type *)a3);
}

void llvm::ConstantFolder::CreateBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type *a3)
{
  if (*a2 != a3)
    getFoldedCast((llvm *)0x31, (uint64_t)a2, a3, 0);
}

void llvm::ConstantFolder::CreateIntToPtr(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type *a3)
{
  getFoldedCast((llvm *)0x30, (uint64_t)a2, a3, 0);
}

void llvm::ConstantFolder::CreatePtrToInt(llvm::ConstantFolder *this, llvm::Constant *a2, llvm::Type *a3)
{
  getFoldedCast((llvm *)0x2F, (uint64_t)a2, a3, 0);
}

void llvm::ConstantFolder::CreateZExtOrBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type ***a3)
{
  llvm::ConstantExpr::getZExtOrBitCast(a2, a3, (llvm::Type *)a3);
}

llvm::ConstantExpr *llvm::ConstantFolder::CreateSExtOrBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type ***a3)
{
  return llvm::ConstantExpr::getSExtOrBitCast(a2, a3, (llvm::Type *)a3);
}

void llvm::ConstantFolder::CreateTruncOrBitCast(llvm::ConstantFolder *this, llvm::Type **a2, llvm::Type ***a3)
{
  llvm::ConstantExpr::getTruncOrBitCast(a2, a3, (llvm::Type *)a3);
}

llvm::Constant *llvm::ConstantFolder::CreateFCmp(int a1, unsigned __int16 a2, uint64_t ***a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0);
}

uint64_t *llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, llvm::MDNode *a9)
{
  char *v11;
  uint64_t v12;
  llvm::MDNode *v13;
  int v14;
  _BYTE v16[32];
  __int16 v17;

  v17 = 257;
  v11 = llvm::CallInst::Create(a2, a3, a4, a5, a6, a7, (const llvm::Twine *)v16, 0);
  v12 = (uint64_t)v11;
  if (*(_BYTE *)(a1 + 100))
    *((_QWORD *)v11 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)v11 + 8, **(uint64_t ***)v11, -1, 62);
  if (llvm::FPMathOperator::classof(v12))
  {
    v13 = a9;
    v14 = *(_DWORD *)(a1 + 96);
    if (a9 || (v13 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v12, 3, v13);
    *(_BYTE *)(v12 + 17) |= 2 * (_BYTE)v14;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, (uint64_t *)v12, a8);
}

uint64_t llvm::InlineAsm::get(llvm::PointerType **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];
  char v21;
  char v22;
  int v23;
  char v24;

  v17 = *(_QWORD *)*a1 + 1568;
  v18 = llvm::PointerType::get(a1, 0);
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  v20[4] = a1;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v24 = a9;
  return llvm::ConstantUniqueMap<llvm::InlineAsm>::getOrCreate(v17, v18, (uint64_t)v20);
}

uint64_t llvm::ConstantUniqueMap<llvm::InlineAsm>::getOrCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v10[3];
  uint64_t v11;
  int HashValue;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[64];
  uint64_t v18;
  _QWORD v19[3];

  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v17[8] = *(_OWORD *)a3;
  *(_OWORD *)&v17[24] = v5;
  *(_OWORD *)&v17[40] = *(_OWORD *)(a3 + 32);
  v6 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)v17 = a2;
  *(_QWORD *)&v17[56] = v6;
  HashValue = llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue((uint64_t *)v17);
  v13 = *(_OWORD *)v17;
  v14 = *(_OWORD *)&v17[16];
  v15 = *(_OWORD *)&v17[32];
  v16 = *(_OWORD *)&v17[48];
  v19[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>((uint64_t *)a1, (uint64_t)&HashValue, v19)&& v19[0] != *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16))
  {
    return *(_QWORD *)v19[0];
  }
  v8 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v8;
  v10[2] = *(_OWORD *)(a3 + 32);
  v11 = *(_QWORD *)(a3 + 48);
  v7 = llvm::InlineAsmKeyType::create((uint64_t)v10);
  v18 = v7;
  llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::insert_as<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(a1, &v18, (uint64_t)&HashValue, (uint64_t)v19);
  return v7;
}

uint64_t llvm::InlineAsm::ConstraintInfo::Parse(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t result;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  size_t v55;
  __int128 *p_dst;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  std::string *v82;
  std::string *v83;
  char *v84;
  __int128 v85;
  std::string *v86;
  std::string *v87;
  size_t v88;
  char *v89;
  __int128 *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  std::string *v99;
  std::string *v100;
  char *v101;
  __int128 v102;
  std::string *v103;
  std::string *v104;
  uint64_t v105;
  const char *v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  std::string *v140;
  std::string *v141;
  char *v142;
  __int128 v143;
  std::string *v144;
  char *v145;
  uint64_t v146;
  std::string *v147;
  std::string *v148;
  char *v149;
  __int128 v150;
  std::string *v151;
  char *v152;
  std::string *v153;
  std::string *v154;
  char *v155;
  __int128 v156;
  std::string *v157;
  std::string *v158;
  std::string *v159;
  std::string *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  _QWORD *v163;
  std::__split_buffer<std::string> v164;
  __int128 __dst;
  unint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v13 = (_BYTE *)(a1 + 40);
LABEL_23:
    v35 = (uint64_t)(v13 - 24);
    goto LABEL_35;
  }
  v8 = 0;
  v9 = a2;
  v10 = a3;
  do
  {
    v11 = *v9++;
    if (v11 == 124)
      ++v8;
    --v10;
  }
  while (v10);
  v12 = (v8 + 1);
  *(_BYTE *)(a1 + 40) = v12 > 1;
  v13 = (_BYTE *)(a1 + 40);
  if (v12 < 2)
    goto LABEL_23;
  v15 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD **)(a1 + 56);
  v16 = ((uint64_t)v14 - v15) >> 5;
  if (v12 <= v16)
  {
    if (v12 < v16)
    {
      v36 = (_QWORD *)(v15 + 32 * v12);
      if (v14 != v36)
      {
        do
        {
          v37 = v14 - 4;
          v164.__first_ = (std::__split_buffer<std::string>::pointer)(v14 - 3);
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v164);
          v14 = v37;
        }
        while (v37 != v36);
      }
      *(_QWORD *)(a1 + 56) = v36;
    }
  }
  else
  {
    v17 = a1 + 64;
    v18 = *(_QWORD *)(a1 + 64);
    if (v12 - v16 <= (v18 - (uint64_t)v14) >> 5)
    {
      v38 = &v14[4 * (v12 - v16)];
      do
      {
        *v14 = 0xFFFFFFFFLL;
        v14[1] = 0;
        v14[2] = 0;
        v14[3] = 0;
        v14 += 4;
      }
      while (v14 != v38);
      *(_QWORD *)(a1 + 56) = v38;
    }
    else
    {
      v19 = v18 - v15;
      v20 = (v18 - v15) >> 4;
      if (v20 <= v12)
        v20 = v12;
      if (v19 >= 0x7FFFFFFFFFFFFFE0)
        v21 = 0x7FFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v17, v21);
      v24 = &v22[32 * v16];
      v25 = &v22[32 * v12];
      v26 = v24;
      do
      {
        *(_QWORD *)v26 = 0xFFFFFFFFLL;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = 0;
        v26 += 32;
      }
      while (v26 != v25);
      v27 = &v22[32 * v23];
      v28 = *(char **)(a1 + 48);
      v29 = *(char **)(a1 + 56);
      if (v29 == v28)
      {
        *(_QWORD *)(a1 + 48) = v24;
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v27;
      }
      else
      {
        v30 = 0;
        do
        {
          v31 = &v24[v30];
          v32 = &v29[v30];
          *((_DWORD *)v31 - 8) = *(_DWORD *)&v29[v30 - 32];
          *((_QWORD *)v31 - 2) = 0;
          *((_QWORD *)v31 - 1) = 0;
          *((_QWORD *)v31 - 3) = 0;
          *(_OWORD *)(v31 - 24) = *(_OWORD *)&v29[v30 - 24];
          *((_QWORD *)v31 - 1) = *(_QWORD *)&v29[v30 - 8];
          *((_QWORD *)v32 - 3) = 0;
          *((_QWORD *)v32 - 2) = 0;
          *((_QWORD *)v32 - 1) = 0;
          v30 -= 32;
        }
        while (&v29[v30] != v28);
        v29 = *(char **)(a1 + 48);
        v33 = *(char **)(a1 + 56);
        *(_QWORD *)(a1 + 48) = &v24[v30];
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v27;
        if (v33 != v29)
        {
          do
          {
            v34 = v33 - 32;
            v164.__first_ = (std::__split_buffer<std::string>::pointer)(v33 - 24);
            std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v164);
            v33 = v34;
          }
          while (v34 != v29);
        }
      }
      if (v29)
        operator delete(v29);
    }
  }
  v35 = *(_QWORD *)(a1 + 48) + 8;
LABEL_35:
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v39 = *a2;
  if (v39 == 33)
  {
    v40 = 3;
LABEL_43:
    v41 = a2 + 1;
    *(_DWORD *)a1 = v40;
    goto LABEL_44;
  }
  if (v39 == 61)
  {
    v40 = 1;
    goto LABEL_43;
  }
  if (v39 != 126)
  {
    v40 = 0;
    v41 = a2;
LABEL_46:
    if (v39 == 42)
    {
      *(_BYTE *)(a1 + 13) = 1;
      ++v41;
    }
    goto LABEL_48;
  }
  v40 = 2;
  *(_DWORD *)a1 = 2;
  v41 = a2 + 1;
  if (a3 == 1)
  {
LABEL_44:
    v39 = *v41;
    goto LABEL_46;
  }
  if (*v41 != 123)
    return 1;
  v40 = 2;
LABEL_48:
  v42 = &a2[a3];
  if (v41 != &a2[a3])
  {
    v43 = 0;
    v44 = 0;
    v45 = v40;
    while (2)
    {
      result = 1;
      switch(*v41)
      {
        case '#':
        case '*':
          return result;
        case '%':
          if (v45 == 2)
            return result;
          v47 = (_BYTE *)(a1 + 12);
          v48 = v43;
          v49 = 1;
          if ((_DWORD)v44)
            return result;
          goto LABEL_56;
        case '&':
          if (v40 != 1)
            return result;
          v47 = (_BYTE *)(a1 + 4);
          v48 = 1;
          v49 = v44;
          v45 = 1;
          if ((_DWORD)v43)
            return result;
LABEL_56:
          *v47 = 1;
          ++v41;
          v43 = v48;
          v44 = v49;
          if (v41 == v42)
            return result;
          continue;
        default:
          if (v41 == v42)
            return 0;
          v161 = &a2[a3];
          LODWORD(v162) = 0;
          v50 = MEMORY[0x24BDAC740];
          v163 = a4;
          break;
      }
      break;
    }
    while (1)
    {
      v51 = *v41;
      if ((_DWORD)v51 == 123)
      {
        v52 = (unsigned __int8 *)memchr(v41 + 1, 125, v42 - (v41 + 1));
        if (v52)
          v53 = v52;
        else
          v53 = v42;
        if (v53 == v42)
          return 1;
        v54 = v53 + 1;
        v55 = v53 + 1 - v41;
        if (v55 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_215;
        if (v55 >= 0x17)
        {
          v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17)
            v57 = v55 | 7;
          v58 = v57 + 1;
          p_dst = (__int128 *)operator new(v57 + 1);
          v59 = v58 | 0x8000000000000000;
          a4 = v163;
          *((_QWORD *)&__dst + 1) = v55;
          v166 = v59;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v166) = (_BYTE)v53 + 1 - (_BYTE)v41;
          p_dst = &__dst;
          if (v54 == v41)
            goto LABEL_83;
        }
        memmove(p_dst, v41, v55);
LABEL_83:
        *((_BYTE *)p_dst + v55) = 0;
        v60 = *(_QWORD *)(v35 + 16);
        v61 = *(_QWORD *)(v35 + 8);
        if (v61 >= v60)
        {
          v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *(_QWORD *)v35) >> 3);
          v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_215;
          v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *(_QWORD *)v35) >> 3);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x555555555555555)
            v66 = 0xAAAAAAAAAAAAAAALL;
          else
            v66 = v64;
          v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
          if (v66)
            v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v66);
          else
            v67 = 0;
          v81 = &v67[24 * v63];
          *((_QWORD *)v81 + 2) = v166;
          *(_OWORD *)v81 = __dst;
          v166 = 0;
          __dst = 0uLL;
          v83 = *(std::string **)v35;
          v82 = *(std::string **)(v35 + 8);
          if (v82 == *(std::string **)v35)
          {
            v86 = *(std::string **)(v35 + 8);
            v84 = &v67[24 * v63];
          }
          else
          {
            v84 = &v67[24 * v63];
            do
            {
              v85 = *(_OWORD *)&v82[-1].__r_.__value_.__l.__data_;
              *((_QWORD *)v84 - 1) = *((_QWORD *)&v82[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v84 - 24) = v85;
              v84 -= 24;
              v82[-1].__r_.__value_.__l.__size_ = 0;
              v82[-1].__r_.__value_.__r.__words[2] = 0;
              v82[-1].__r_.__value_.__r.__words[0] = 0;
              --v82;
            }
            while (v82 != v83);
            v86 = *(std::string **)v35;
            v82 = *(std::string **)(v35 + 8);
          }
          v62 = v81 + 24;
          *(_QWORD *)v35 = v84;
          v164.__first_ = v86;
          v164.__begin_ = v86;
          *(_QWORD *)(v35 + 8) = v81 + 24;
          v164.__end_ = v82;
          v87 = *(std::string **)(v35 + 16);
          *(_QWORD *)(v35 + 16) = &v67[24 * v66];
          v164.__end_cap_.__value_ = v87;
          std::__split_buffer<std::string>::~__split_buffer(&v164);
        }
        else
        {
          *(_OWORD *)v61 = __dst;
          *(_QWORD *)(v61 + 16) = v166;
          v166 = 0;
          __dst = 0uLL;
          v62 = (char *)(v61 + 24);
        }
        *(_QWORD *)(v35 + 8) = v62;
        if (SHIBYTE(v166) < 0)
          operator delete((void *)__dst);
        goto LABEL_210;
      }
      if ((*(_DWORD *)(v50 + 4 * v51 + 60) & 0x400) != 0)
        break;
      if ((_DWORD)v51 == 64)
      {
        v88 = v41[1] - 48;
        if (v88 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_215;
        v89 = (char *)(v41 + 2);
        if (v88 >= 0x17)
        {
          v117 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v88 | 7) != 0x17)
            v117 = v88 | 7;
          v118 = v117 + 1;
          v90 = (__int128 *)operator new(v117 + 1);
          v119 = v118 | 0x8000000000000000;
          a4 = v163;
          *((_QWORD *)&__dst + 1) = v88;
          v166 = v119;
          *(_QWORD *)&__dst = v90;
        }
        else
        {
          HIBYTE(v166) = v88;
          v90 = &__dst;
          if (!v88)
            goto LABEL_157;
        }
        memmove(v90, v89, v88);
LABEL_157:
        *((_BYTE *)v90 + v88) = 0;
        v120 = *(_QWORD *)(v35 + 16);
        v121 = *(_QWORD *)(v35 + 8);
        if (v121 >= v120)
        {
          v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - *(_QWORD *)v35) >> 3);
          v134 = v133 + 1;
          if (v133 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_215;
          v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v120 - *(_QWORD *)v35) >> 3);
          if (2 * v135 > v134)
            v134 = 2 * v135;
          if (v135 >= 0x555555555555555)
            v136 = 0xAAAAAAAAAAAAAAALL;
          else
            v136 = v134;
          v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
          if (v136)
            v137 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v136);
          else
            v137 = 0;
          v152 = &v137[24 * v133];
          *((_QWORD *)v152 + 2) = v166;
          *(_OWORD *)v152 = __dst;
          v166 = 0;
          __dst = 0uLL;
          v154 = *(std::string **)v35;
          v153 = *(std::string **)(v35 + 8);
          if (v153 == *(std::string **)v35)
          {
            v157 = *(std::string **)(v35 + 8);
            v155 = &v137[24 * v133];
          }
          else
          {
            v155 = &v137[24 * v133];
            do
            {
              v156 = *(_OWORD *)&v153[-1].__r_.__value_.__l.__data_;
              *((_QWORD *)v155 - 1) = *((_QWORD *)&v153[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v155 - 24) = v156;
              v155 -= 24;
              v153[-1].__r_.__value_.__l.__size_ = 0;
              v153[-1].__r_.__value_.__r.__words[2] = 0;
              v153[-1].__r_.__value_.__r.__words[0] = 0;
              --v153;
            }
            while (v153 != v154);
            v157 = *(std::string **)v35;
            v153 = *(std::string **)(v35 + 8);
          }
          v122 = v152 + 24;
          *(_QWORD *)v35 = v155;
          v164.__first_ = v157;
          v164.__begin_ = v157;
          *(_QWORD *)(v35 + 8) = v152 + 24;
          v164.__end_ = v153;
          v160 = *(std::string **)(v35 + 16);
          *(_QWORD *)(v35 + 16) = &v137[24 * v136];
          v164.__end_cap_.__value_ = v160;
          std::__split_buffer<std::string>::~__split_buffer(&v164);
        }
        else
        {
          *(_OWORD *)v121 = __dst;
          *(_QWORD *)(v121 + 16) = v166;
          v166 = 0;
          __dst = 0uLL;
          v122 = (char *)(v121 + 24);
        }
        *(_QWORD *)(v35 + 8) = v122;
        if (SHIBYTE(v166) < 0)
          operator delete((void *)__dst);
        v54 = (unsigned __int8 *)&v89[v88];
        goto LABEL_210;
      }
      if ((_DWORD)v51 == 94)
      {
        v91 = *(unsigned __int16 *)(v41 + 1);
        v92 = *(_QWORD *)(v35 + 16);
        v93 = *(_QWORD *)(v35 + 8);
        if (v93 >= v92)
        {
          v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - *(_QWORD *)v35) >> 3);
          v124 = v123 + 1;
          if (v123 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_215;
          v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - *(_QWORD *)v35) >> 3);
          if (2 * v125 > v124)
            v124 = 2 * v125;
          if (v125 >= 0x555555555555555)
            v126 = 0xAAAAAAAAAAAAAAALL;
          else
            v126 = v124;
          v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
          if (v126)
            v127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v126);
          else
            v127 = 0;
          v138 = &v127[24 * v123];
          v139 = __dst;
          *(_QWORD *)v138 = v91;
          *((_QWORD *)v138 + 1) = v139;
          *(_QWORD *)(v138 + 15) = *(_QWORD *)((char *)&__dst + 7);
          v138[23] = 2;
          *(_QWORD *)((char *)&__dst + 7) = 0;
          *(_QWORD *)&__dst = 0;
          v141 = *(std::string **)v35;
          v140 = *(std::string **)(v35 + 8);
          if (v140 == *(std::string **)v35)
          {
            v144 = *(std::string **)(v35 + 8);
            v142 = &v127[24 * v123];
          }
          else
          {
            v142 = &v127[24 * v123];
            do
            {
              v143 = *(_OWORD *)&v140[-1].__r_.__value_.__l.__data_;
              *((_QWORD *)v142 - 1) = *((_QWORD *)&v140[-1].__r_.__value_.__l + 2);
              *(_OWORD *)(v142 - 24) = v143;
              v142 -= 24;
              v140[-1].__r_.__value_.__l.__size_ = 0;
              v140[-1].__r_.__value_.__r.__words[2] = 0;
              v140[-1].__r_.__value_.__r.__words[0] = 0;
              --v140;
            }
            while (v140 != v141);
            v144 = *(std::string **)v35;
            v140 = *(std::string **)(v35 + 8);
          }
          v94 = v138 + 24;
          *(_QWORD *)v35 = v142;
          v164.__first_ = v144;
          v164.__begin_ = v144;
          *(_QWORD *)(v35 + 8) = v138 + 24;
          v164.__end_ = v140;
          v158 = *(std::string **)(v35 + 16);
          *(_QWORD *)(v35 + 16) = &v127[24 * v126];
          v164.__end_cap_.__value_ = v158;
          std::__split_buffer<std::string>::~__split_buffer(&v164);
        }
        else
        {
          *(_QWORD *)v93 = v91;
          *(_BYTE *)(v93 + 23) = 2;
          v94 = (char *)(v93 + 24);
        }
        *(_QWORD *)(v35 + 8) = v94;
        v54 = v41 + 3;
      }
      else
      {
        if ((_DWORD)v51 == 124)
        {
          v162 = (v162 + 1);
          v35 = *(_QWORD *)(a1 + 48) + 32 * v162 + 8;
        }
        else
        {
          v95 = *(_QWORD *)(v35 + 16);
          v96 = *(_QWORD *)(v35 + 8);
          if (v96 >= v95)
          {
            v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - *(_QWORD *)v35) >> 3);
            v129 = v128 + 1;
            if (v128 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_215;
            v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - *(_QWORD *)v35) >> 3);
            if (2 * v130 > v129)
              v129 = 2 * v130;
            if (v130 >= 0x555555555555555)
              v131 = 0xAAAAAAAAAAAAAAALL;
            else
              v131 = v129;
            v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
            if (v131)
              v132 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v131);
            else
              v132 = 0;
            v145 = &v132[24 * v128];
            v146 = __dst;
            *(_QWORD *)v145 = v51;
            *((_QWORD *)v145 + 1) = v146;
            *(_QWORD *)(v145 + 15) = *(_QWORD *)((char *)&__dst + 7);
            v145[23] = 1;
            *(_QWORD *)((char *)&__dst + 7) = 0;
            *(_QWORD *)&__dst = 0;
            v148 = *(std::string **)v35;
            v147 = *(std::string **)(v35 + 8);
            if (v147 == *(std::string **)v35)
            {
              v151 = *(std::string **)(v35 + 8);
              v149 = &v132[24 * v128];
            }
            else
            {
              v149 = &v132[24 * v128];
              do
              {
                v150 = *(_OWORD *)&v147[-1].__r_.__value_.__l.__data_;
                *((_QWORD *)v149 - 1) = *((_QWORD *)&v147[-1].__r_.__value_.__l + 2);
                *(_OWORD *)(v149 - 24) = v150;
                v149 -= 24;
                v147[-1].__r_.__value_.__l.__size_ = 0;
                v147[-1].__r_.__value_.__r.__words[2] = 0;
                v147[-1].__r_.__value_.__r.__words[0] = 0;
                --v147;
              }
              while (v147 != v148);
              v151 = *(std::string **)v35;
              v147 = *(std::string **)(v35 + 8);
            }
            v97 = v145 + 24;
            *(_QWORD *)v35 = v149;
            v164.__first_ = v151;
            v164.__begin_ = v151;
            *(_QWORD *)(v35 + 8) = v145 + 24;
            v164.__end_ = v147;
            v159 = *(std::string **)(v35 + 16);
            *(_QWORD *)(v35 + 16) = &v132[24 * v131];
            v164.__end_cap_.__value_ = v159;
            std::__split_buffer<std::string>::~__split_buffer(&v164);
          }
          else
          {
            *(_QWORD *)v96 = v51;
            *(_BYTE *)(v96 + 23) = 1;
            v97 = (char *)(v96 + 24);
          }
          *(_QWORD *)(v35 + 8) = v97;
        }
        v54 = v41 + 1;
      }
LABEL_210:
      result = 0;
      v41 = v54;
      if (v54 == v42)
        return result;
    }
    if (v41 == v42)
    {
      v54 = v42;
    }
    else
    {
      v54 = v41;
      while ((*(_DWORD *)(v50 + 4 * *v54 + 60) & 0x400) != 0)
      {
        if (++v54 == v42)
        {
          v54 = v161;
          break;
        }
      }
    }
    v68 = v54 - v41;
    if ((unint64_t)(v54 - v41) > 0x7FFFFFFFFFFFFFF7)
LABEL_215:
      abort();
    if (v68 >= 0x17)
    {
      v70 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v68 | 7) != 0x17)
        v70 = v68 | 7;
      v71 = v70 + 1;
      v69 = (__int128 *)operator new(v70 + 1);
      v72 = v71 | 0x8000000000000000;
      a4 = v163;
      *((_QWORD *)&__dst + 1) = v54 - v41;
      v166 = v72;
      *(_QWORD *)&__dst = v69;
    }
    else
    {
      HIBYTE(v166) = (_BYTE)v54 - (_BYTE)v41;
      v69 = &__dst;
      if (v54 == v41)
        goto LABEL_102;
    }
    memmove(v69, v41, v54 - v41);
LABEL_102:
    *((_BYTE *)v69 + v68) = 0;
    v73 = *(_QWORD *)(v35 + 16);
    v74 = *(_QWORD *)(v35 + 8);
    if (v74 >= v73)
    {
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(_QWORD *)v35) >> 3);
      v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_215;
      v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - *(_QWORD *)v35) >> 3);
      if (2 * v78 > v77)
        v77 = 2 * v78;
      if (v78 >= 0x555555555555555)
        v79 = 0xAAAAAAAAAAAAAAALL;
      else
        v79 = v77;
      v164.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 16);
      if (v79)
        v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v35 + 16, v79);
      else
        v80 = 0;
      v98 = &v80[24 * v76];
      *((_QWORD *)v98 + 2) = v166;
      *(_OWORD *)v98 = __dst;
      v166 = 0;
      __dst = 0uLL;
      v100 = *(std::string **)v35;
      v99 = *(std::string **)(v35 + 8);
      if (v99 == *(std::string **)v35)
      {
        v103 = *(std::string **)(v35 + 8);
        v101 = &v80[24 * v76];
      }
      else
      {
        v101 = &v80[24 * v76];
        do
        {
          v102 = *(_OWORD *)&v99[-1].__r_.__value_.__l.__data_;
          *((_QWORD *)v101 - 1) = *((_QWORD *)&v99[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v101 - 24) = v102;
          v101 -= 24;
          v99[-1].__r_.__value_.__l.__size_ = 0;
          v99[-1].__r_.__value_.__r.__words[2] = 0;
          v99[-1].__r_.__value_.__r.__words[0] = 0;
          --v99;
        }
        while (v99 != v100);
        v103 = *(std::string **)v35;
        v99 = *(std::string **)(v35 + 8);
      }
      v75 = v98 + 24;
      *(_QWORD *)v35 = v101;
      v164.__first_ = v103;
      v164.__begin_ = v103;
      *(_QWORD *)(v35 + 8) = v98 + 24;
      v164.__end_ = v99;
      v104 = *(std::string **)(v35 + 16);
      *(_QWORD *)(v35 + 16) = &v80[24 * v79];
      v164.__end_cap_.__value_ = v104;
      std::__split_buffer<std::string>::~__split_buffer(&v164);
    }
    else
    {
      *(_OWORD *)v74 = __dst;
      *(_QWORD *)(v74 + 16) = v166;
      v166 = 0;
      __dst = 0uLL;
      v75 = (char *)(v74 + 24);
    }
    *(_QWORD *)(v35 + 8) = v75;
    if (SHIBYTE(v166) < 0)
      operator delete((void *)__dst);
    v105 = *(_QWORD *)(v35 + 8);
    v106 = (const char *)(v105 - 24);
    if (*(char *)(v105 - 1) < 0)
      v106 = *(const char **)v106;
    v107 = atoi(v106);
    v108 = *a4;
    v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 4);
    if (v109 <= v107 || *(_DWORD *)(v108 + 80 * v107) != 1 || *(_DWORD *)a1)
      return 1;
    if (*v13)
    {
      v111 = (uint64_t *)(v108 + 80 * v107 + 48);
      v110 = *v111;
      if (v162 >= (unint64_t)((v111[1] - *v111) >> 5))
        return 1;
      v112 = (_DWORD *)(v110 + 32 * v162);
      if (*v112 != -1)
        return 1;
    }
    else
    {
      v113 = v108 + 80 * v107;
      v115 = *(int *)(v113 + 8);
      v112 = (_DWORD *)(v113 + 8);
      v114 = v115;
      if ((_DWORD)v115 != -1 && v109 != v114)
        return 1;
    }
    *v112 = v109;
    goto LABEL_210;
  }
  return 1;
}

void llvm::InlineAsm::ParseConstraints(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  _BYTE v13[32];
  _BYTE v14[24];
  int v15;
  void **v16;

  v3 = a1;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = &a1[a2];
  while (v3 != v5)
  {
    LODWORD(v10) = 0;
    BYTE4(v10) = 0;
    v11 = -1;
    v12 = 0;
    memset(v13, 0, 25);
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v6 = (char *)memchr(v3, 44, v5 - v3);
    if (v6)
      v7 = v6;
    else
      v7 = v5;
    if (v7 == v3
      || (llvm::InlineAsm::ConstraintInfo::Parse((uint64_t)&v10, (unsigned __int8 *)v3, v7 - v3, a3) & 1) != 0)
    {
      goto LABEL_11;
    }
    std::vector<llvm::InlineAsm::ConstraintInfo>::push_back[abi:nn180100](a3, &v10);
    if (v7 == v5)
    {
      v9 = 1;
      v3 = v5;
      goto LABEL_12;
    }
    v8 = v7 + 1;
    v3 = v5;
    if (v7 + 1 == v5)
    {
LABEL_11:
      std::vector<llvm::InlineAsm::ConstraintInfo>::__base_destruct_at_end[abi:nn180100]((uint64_t)a3, *a3);
      v9 = 0;
    }
    else
    {
      v9 = 1;
      v3 = v8;
    }
LABEL_12:
    v16 = (void **)v14;
    std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](&v16);
    v16 = (void **)v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v16);
    if ((v9 & 1) == 0)
      return;
  }
}

uint64_t std::vector<llvm::InlineAsm::ConstraintInfo>::push_back[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v9 + 1 > 0x333333333333333)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x199999999999999)
      v12 = 0x333333333333333;
    else
      v12 = v11;
    v18 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)(a1 + 2), v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[80 * v9];
    v17 = &v13[80 * v12];
    std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>(v5, (uint64_t)v15, a2);
    v16 = v15 + 80;
    std::vector<llvm::InlineAsm::ConstraintInfo>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    result = std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = (uint64_t)std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>((uint64_t)(a1 + 2), v6, a2);
    v8 = v6 + 80;
  }
  a1[1] = v8;
  return result;
}

unint64_t llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue(uint64_t *a1)
{
  int Hash;
  _QWORD v4[8];
  char v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  Hash = llvm::InlineAsmKeyType::getHash((llvm::InlineAsmKeyType *)(a1 + 1));
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v4);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::ArrayType *,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)v4, 0, v4, v5, a1, &Hash);
}

unint64_t llvm::InlineAsmKeyType::getHash(llvm::InlineAsmKeyType *this)
{
  char *v2;
  char *v3;
  char *v4;
  int *v5;
  uint64_t *v6;
  char *v7;
  _QWORD v9[8];
  unint64_t v10[9];

  v2 = (char *)this + 16;
  v3 = (char *)this + 40;
  v10[8] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 41;
  v5 = (int *)((char *)this + 44);
  v6 = (uint64_t *)((char *)this + 32);
  v7 = (char *)this + 48;
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v9);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>((uint64_t)v9, 0, v9, v10, (uint64_t)this, (uint64_t)v2, v3, v4, v5, v6, v7);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, uint64_t a6, char *a7, char *a8, int *a9, uint64_t *a10, char *a11)
{
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v20 = a2;
  v17 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a5, *(_QWORD *)a5 + *(_QWORD *)(a5 + 8), (uint64_t)a3, a4);
  v18 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, &v20, a3, (unint64_t)a4, v17);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(a1, v20, v18, a4, a6, a7, a8, a9, a10, a11);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, char *a6, char *a7, int *a8, uint64_t *a9, char *a10)
{
  unint64_t v16;
  _BYTE *v17;
  uint64_t v19;

  v19 = a2;
  v16 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a5, *(_QWORD *)a5 + *(_QWORD *)(a5 + 8), (uint64_t)a3, a4);
  v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, &v19, a3, (unint64_t)a4, v16);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(a1, v19, v17, (char *)a4, a6, a7, a8, a9, a10);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, _BYTE *a3, char *a4, char *a5, char *a6, int *a7, uint64_t *a8, char *a9)
{
  _BYTE *v14;
  uint64_t v16;

  v16 = a2;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>(a1, &v16, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(a1, v16, v14, a4, a6, a7, a8, a9);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL,llvm::InlineAsm::AsmDialect,llvm::FunctionType *,BOOL>(uint64_t a1, uint64_t a2, _BYTE *a3, char *a4, char *a5, int *a6, uint64_t *a7, char *a8)
{
  _BYTE *v13;
  unint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  unint64_t *v25;
  __int128 v26;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t __src;

  v28 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>(a1, (uint64_t *)&v28, a3, (unint64_t)a4, *a5);
  v14 = v28;
  v15 = *a6;
  LODWORD(__src) = *a6;
  v16 = v13 + 4;
  if (v13 + 4 <= a4)
  {
    *(_DWORD *)v13 = v15;
  }
  else
  {
    v17 = a4 - v13;
    memcpy(v13, &__src, a4 - v13);
    if (v14)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v18, v19);
      v14 += 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(_QWORD *)(a1 + 120), v18, v19, (llvm::hashing::detail::hash_state *)&v29);
      v20 = v30;
      *(_OWORD *)(a1 + 64) = v29;
      *(_OWORD *)(a1 + 80) = v20;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = v32;
      v14 = 64;
    }
    v16 = (char *)(a1 + 4 - v17);
    if (v16 > a4)
      v16 = (char *)a1;
    else
      memcpy((void *)a1, (char *)&__src + v17, 4 - v17);
  }
  v21 = *a7;
  __src = *a7;
  v22 = v16 + 8;
  if (v16 + 8 <= a4)
  {
    *(_QWORD *)v16 = v21;
  }
  else
  {
    v23 = a4 - v16;
    memcpy(v16, &__src, a4 - v16);
    if (v14)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v24, v25);
      v14 += 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(_QWORD *)(a1 + 120), v24, v25, (llvm::hashing::detail::hash_state *)&v29);
      v26 = v30;
      *(_OWORD *)(a1 + 64) = v29;
      *(_OWORD *)(a1 + 80) = v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = v32;
      v14 = 64;
    }
    v22 = (char *)(a1 + 8 - v23);
    if (v22 > a4)
      v22 = (char *)a1;
    else
      memcpy((void *)a1, (char *)&__src + v23, 8 - v23);
  }
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)a1, v14, v22, a4, a8);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  _QWORD **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int i;
  unsigned int v12;
  _QWORD **v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = 0;
    v7 = *a1;
    v9 = a2 + 16;
    v8 = *(_DWORD *)a2;
    v10 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v12 = v8 & v10;
      v13 = (_QWORD **)(v7 + 8 * (v8 & v10));
      v14 = *v13;
      if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(_QWORD *)(a2 + 8) == *v14)
      {
        if (llvm::InlineAsmKeyType::operator==(v9, (uint64_t)v14))
        {
          result = 1;
          goto LABEL_18;
        }
        v14 = *v13;
      }
      if (v14 == (_QWORD *)-4096)
        break;
      if (v6)
        v15 = 0;
      else
        v15 = v14 == (_QWORD *)-8192;
      if (v15)
        v6 = (_QWORD **)(v7 + 8 * v12);
      v8 = v12 + i;
    }
    result = 0;
    if (v6)
      v13 = v6;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v13;
  return result;
}

BOOL llvm::InlineAsmKeyType::operator==(uint64_t a1, uint64_t a2)
{
  size_t v4;
  int v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  int v9;
  const void *v10;
  uint64_t v11;

  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 80)
    || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 81)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 84))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(char *)(a2 + 47);
  if (v5 >= 0)
    v6 = (const void *)(a2 + 24);
  else
    v6 = *(const void **)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (v5 >= 0)
    v7 = v5;
  if (v4 != v7 || v4 && memcmp(*(const void **)a1, v6, v4))
    return 0;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(char *)(a2 + 71);
  if (v9 >= 0)
    v10 = (const void *)(a2 + 48);
  else
    v10 = *(const void **)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 71);
  return v8 == v11
      && (!v8 || !memcmp(*(const void **)(a1 + 16), v10, v8))
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 88);
}

uint64_t llvm::InlineAsmKeyType::create(uint64_t a1)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  llvm::PointerType **v5;
  const void *v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17;
  char v18;
  unsigned int v19;
  std::string *v20;
  int v21;
  std::string *v22;
  void *__p[2];
  unint64_t v25;
  __int128 __dst;
  unint64_t v27;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
LABEL_26:
    abort();
  v4 = v2;
  v5 = *(llvm::PointerType ***)(a1 + 32);
  v6 = *(const void **)a1;
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v3;
    v27 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v27) = *(_QWORD *)(a1 + 8);
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v6, v3);
  *((_BYTE *)p_dst + v3) = 0;
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_26;
  v11 = *(const void **)(a1 + 16);
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __p[1] = (void *)v10;
    v25 = v14 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_16;
  }
  HIBYTE(v25) = *(_QWORD *)(a1 + 24);
  v12 = __p;
  if (v10)
LABEL_16:
    memmove(v12, v11, v10);
  *((_BYTE *)v12 + v10) = 0;
  v15 = *(_BYTE *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 41);
  v17 = *(_DWORD *)(a1 + 44);
  v18 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)v4 = llvm::PointerType::get(v5, 0);
  *(_QWORD *)(v4 + 8) = 0;
  v19 = *(_DWORD *)(v4 + 20) & 0xC0000000;
  *(_DWORD *)(v4 + 16) = 24;
  *(_DWORD *)(v4 + 20) = v19;
  v20 = (std::string *)(v4 + 24);
  v21 = SHIBYTE(v27);
  if (SHIBYTE(v27) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = __dst;
    *(_QWORD *)(v4 + 40) = v27;
  }
  v22 = (std::string *)(v4 + 48);
  if (SHIBYTE(v25) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    *(_QWORD *)(v4 + 72) = v5;
    *(_BYTE *)(v4 + 80) = v15;
    *(_BYTE *)(v4 + 81) = v16;
    *(_DWORD *)(v4 + 84) = v17;
    *(_BYTE *)(v4 + 88) = v18;
    operator delete(__p[0]);
    if ((v21 & 0x80000000) == 0)
      return v4;
    goto LABEL_22;
  }
  *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  *(_QWORD *)(v4 + 64) = v25;
  *(_QWORD *)(v4 + 72) = v5;
  *(_BYTE *)(v4 + 80) = v15;
  *(_BYTE *)(v4 + 81) = v16;
  *(_DWORD *)(v4 + 84) = v17;
  *(_BYTE *)(v4 + 88) = v18;
  if (v21 < 0)
LABEL_22:
    operator delete((void *)__dst);
  return v4;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::insert_as<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>((uint64_t *)a1, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(a1, (uint64_t)a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::InsertIntoBucketImpl<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>,llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::LookupBucketFor<std::pair<unsigned int,std::pair<llvm::PointerType *,llvm::InlineAsmKeyType>>>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::InlineAsm *,llvm::detail::DenseSetEmpty,llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo,llvm::detail::DenseSetPair<llvm::InlineAsm *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  char v29;
  int HashValue;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[6];
  __int16 v43;
  int v44;
  char v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[33];

  v48[32] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *(uint64_t **)a1;
          v16 = *(_DWORD *)(a1 + 16);
          v46 = v48;
          v47 = 0x2000000000;
          v17 = *(_QWORD *)v14;
          v18 = *(char *)(v14 + 47);
          v19 = v14 + 24;
          v20 = v18 < 0;
          if (v18 < 0)
            v19 = *(_QWORD *)(v14 + 24);
          v21 = *(unsigned __int8 *)(v14 + 47);
          if (v20)
            v21 = *(_QWORD *)(v14 + 32);
          v22 = *(char *)(v14 + 71);
          v23 = v14 + 48;
          v24 = v22 < 0;
          if (v22 < 0)
            v23 = *(_QWORD *)(v14 + 48);
          v25 = *(unsigned __int8 *)(v14 + 71);
          if (v24)
            v25 = *(_QWORD *)(v14 + 56);
          v26 = *(_QWORD *)(v14 + 72);
          v27 = *(_WORD *)(v14 + 80);
          v28 = *(_DWORD *)(v14 + 84);
          v29 = *(_BYTE *)(v14 + 88);
          v42[0] = v17;
          v42[1] = v19;
          v42[2] = v21;
          v42[3] = v23;
          v42[4] = v25;
          v42[5] = v26;
          v43 = v27;
          v44 = v28;
          v45 = v29;
          HashValue = llvm::ConstantUniqueMap<llvm::InlineAsm>::MapInfo::getHashValue(v42);
          if (v46 != v48)
            free(v46);
          v31 = v16 - 1;
          v32 = *v13;
          v33 = HashValue & (v16 - 1);
          v34 = &v15[v33];
          v35 = *v34;
          if (*v13 != *v34)
          {
            v36 = 0;
            v37 = 1;
            while (v35 != -4096)
            {
              if (v36)
                v38 = 0;
              else
                v38 = v35 == -8192;
              if (v38)
                v36 = v34;
              v39 = v33 + v37++;
              v33 = v39 & v31;
              v34 = &v15[v39 & v31];
              v35 = *v34;
              if (v32 == *v34)
                goto LABEL_22;
            }
            if (v36)
              v34 = v36;
          }
LABEL_22:
          *v34 = v32;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v40 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v40)
  {
    v41 = 8 * v40;
    do
    {
      *result++ = -4096;
      v41 -= 8;
    }
    while (v41);
  }
  return result;
}

_QWORD *std::allocator<llvm::InlineAsm::ConstraintInfo>::construct[abi:nn180100]<llvm::InlineAsm::ConstraintInfo,llvm::InlineAsm::ConstraintInfo const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *result;

  v4 = a2;
  v5 = *a3;
  *(_QWORD *)(a2 + 6) = *(uint64_t *)((char *)a3 + 6);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(a2 + 16), (__int128 *)a3[2], (__int128 *)a3[3], 0xAAAAAAAAAAAAAAABLL * ((a3[3] - a3[2]) >> 3));
  v6 = *((_BYTE *)a3 + 40);
  *(_QWORD *)(v4 + 48) = 0;
  v4 += 48;
  *(_BYTE *)(v4 - 8) = v6;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<llvm::InlineAsm::SubConstraintInfo>::__init_with_size[abi:nn180100]<llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>((_QWORD *)v4, a3[6], a3[7], (a3[7] - a3[6]) >> 5);
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a3 + 18);
  return result;
}

_QWORD *std::vector<llvm::InlineAsm::SubConstraintInfo>::__init_with_size[abi:nn180100]<llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<llvm::json::Value>::__vallocate[abi:nn180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::InlineAsm::SubConstraintInfo>,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::InlineAsm::SubConstraintInfo>,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*,llvm::InlineAsm::SubConstraintInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v6;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(a4 + 8), *(__int128 **)(v6 + 8), *(__int128 **)(v6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3));
      a4 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void std::vector<llvm::InlineAsm::ConstraintInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<llvm::InlineAsm::ConstraintInfo>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<llvm::InlineAsm::ConstraintInfo>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>,std::reverse_iterator<llvm::InlineAsm::ConstraintInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 74) = *(_QWORD *)(a3 + v7 - 74);
      *(_QWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 64) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v8 - 48) = *(_QWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_BYTE *)(v8 - 40) = *(_BYTE *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 80;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<llvm::InlineAsm::ConstraintInfo>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v5 = (void **)(i - 32);
    std::vector<llvm::InlineAsm::SubConstraintInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
    v5 = (void **)(i - 64);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v5);
  }
}

uint64_t llvm::Instruction::Instruction(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  *(_OWORD *)(a1 + 24) = 0u;
  v7 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a6)
  {
    v8 = a6;
    llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a6[5] + 40, a1);
    v9 = v8[3];
    v8 += 3;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(v9 + 8) = v7;
    *v8 = v7;
  }
  return a1;
}

void llvm::Instruction::~Instruction(llvm::UndefValue **this, llvm::Type *a2)
{
  llvm::Value *v3;
  llvm::Value *v4;
  llvm::Value *v5;

  if ((*((_BYTE *)this + 23) & 8) != 0)
  {
    v3 = llvm::UndefValue::get(*this, a2);
    llvm::ValueAsMetadata::handleRAUW((llvm::ValueAsMetadata *)this, v3, v4);
  }
  llvm::Instruction::setMetadata((uint64_t *)this, 38, 0);
  v5 = this[6];
  if (v5)
    llvm::MetadataTracking::untrack((uint64_t)(this + 6), (uint64_t)v5);
  llvm::Value::~Value((llvm::Value *)this, v5);
}

BOOL llvm::Instruction::comesBefore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(__int16 *)(v2 + 18);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(v2 + 48);
    if (v4 != v2 + 40)
    {
      v5 = 0;
      do
      {
        v6 = v4 - 24;
        if (!v4)
          v6 = 0;
        *(_DWORD *)(v6 + 56) = v5++;
        v4 = *(_QWORD *)(v4 + 8);
      }
      while (v4 != v2 + 40);
    }
    *(_WORD *)(v2 + 18) = v3 | 0x8000;
  }
  return *(_DWORD *)(a1 + 56) < *(_DWORD *)(a2 + 56);
}

BOOL llvm::Instruction::copyIRFlags(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  int v21;
  unsigned int v23;
  _BOOL8 result;

  if (a3)
  {
    HIDWORD(v6) = *(unsigned __int8 *)(a1 + 16) - 41;
    LODWORD(v6) = HIDWORD(v6);
    v5 = v6 >> 1;
    v7 = v5 > 6;
    v8 = (1 << v5) & 0x47;
    if (!v7 && v8 != 0)
    {
      v10 = *(unsigned __int8 *)(a2 + 16);
      if (v10 < 0x1C)
      {
        if (v10 != 5)
          goto LABEL_15;
        v11 = *(unsigned __int16 *)(a2 + 18) - 13;
      }
      else
      {
        v11 = v10 - 41;
      }
      HIDWORD(v13) = v11;
      LODWORD(v13) = v11;
      v12 = v13 >> 1;
      v7 = v12 > 6;
      v14 = (1 << v12) & 0x47;
      if (!v7 && v14 != 0)
      {
        v16 = *(_BYTE *)(a1 + 17) & 0xFB | (4 * ((*(unsigned __int8 *)(a2 + 17) >> 2) & 1));
        *(_BYTE *)(a1 + 17) = v16;
        *(_BYTE *)(a1 + 17) = v16 & 0xFD | *(_BYTE *)(a2 + 17) & 2;
      }
    }
  }
LABEL_15:
  v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 < 0x1C)
  {
    if (v17 != 5)
      goto LABEL_30;
    v20 = *(unsigned __int16 *)(a2 + 18);
    v7 = v20 > 0x1B;
    v21 = (1 << v20) & 0xC180000;
    if (v7 || v21 == 0)
      goto LABEL_30;
  }
  else
  {
    v7 = v17 > 0x37;
    v18 = (1 << v17) & 0xC1800000000000;
    if (v7 || v18 == 0)
      goto LABEL_30;
  }
  v23 = *(unsigned __int8 *)(a1 + 16);
  if (v23 <= 0x37 && ((1 << v23) & 0xC1800000000000) != 0)
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 17) & 0xFD | *(_BYTE *)(a2 + 17) & 2;
LABEL_30:
  result = llvm::FPMathOperator::classof(a2);
  if (result)
  {
    result = llvm::FPMathOperator::classof(a1);
    if (result)
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(a1 + 17) & 1;
  }
  if (*(_BYTE *)(a2 + 16) == 62 && a1 && *(_BYTE *)(a1 + 16) == 62)
    *(_BYTE *)(a1 + 17) |= *(_BYTE *)(a2 + 17) & 2;
  return result;
}

const char *llvm::Instruction::getOpcodeName(llvm::Instruction *this)
{
  if (((_DWORD)this - 1) > 0x42)
    return "<Invalid operator> ";
  else
    return off_251C35AE0[(int)this - 1];
}

BOOL llvm::Instruction::isAtomic(llvm::Instruction *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 16);
  if ((v1 - 63) < 3)
    return 1;
  if (v1 == 60 || v1 == 61)
    return (*((_WORD *)this + 9) & 0x380) != 0;
  return 0;
}

BOOL llvm::Instruction::isLaunderOrStripInvariantGroup(llvm::Instruction *this)
{
  uint64_t v1;
  int v3;

  if (*((_BYTE *)this + 16) != 84)
    return 0;
  v1 = *((_QWORD *)this - 4);
  if (!v1
    || *(_BYTE *)(v1 + 16)
    || *(_QWORD *)(v1 + 24) != *((_QWORD *)this + 9)
    || (*(_DWORD *)(v1 + 32) & 0x2000) == 0)
  {
    return 0;
  }
  v3 = *(_DWORD *)(v1 + 36);
  return v3 == 169 || v3 == 293;
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  return ((uint64_t (*)(_QWORD))((char *)nullsub_1 + 4 * byte_24AA490BA[*((unsigned __int8 *)this + 16) - 29]))(0);
}

uint64_t sub_24A9EBE90@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
}

uint64_t sub_24A9EBEA0@<X0>(uint64_t a1@<X8>)
{
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3)
    return 2;
  else
    return 1;
}

uint64_t sub_24A9EBEB8@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFF;
}

uint64_t sub_24A9EBEC4()
{
  return 2;
}

uint64_t sub_24A9EBECC@<X0>(uint64_t a1@<X8>)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t sub_24A9EBED8()
{
  return 1;
}

uint64_t sub_24A9EBEE0@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 80) + 1);
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this)
{
  return ((uint64_t (*)(void))((char *)sub_24A9EBF0C + 4 * byte_24AA490C5[*((unsigned __int8 *)this + 16) - 30]))();
}

uint64_t sub_24A9EBF0C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  return *(_QWORD *)(v3 + 32 * (a2 + 1));
}

uint64_t llvm::Instruction::setSuccessor(llvm::Instruction *this, unsigned int a2, llvm::BasicBlock *a3)
{
  return ((uint64_t (*)(void))((char *)llvm::BranchInst::setSuccessor
                            + 4 * byte_24AA490CF[*((unsigned __int8 *)this + 16) - 30]))();
}

uint64_t sub_24A9EC008(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
    return llvm::InvokeInst::setUnwindDest(a1, a3);
  else
    return llvm::InvokeInst::setNormalDest(a1, a3);
}

uint64_t llvm::IndirectBrInst::setSuccessor(uint64_t this, int a2, llvm::BasicBlock *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (a2 + 1);
  v4 = *(_DWORD *)(this + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(this - 8);
  else
    v5 = this - 32 * (v4 & 0x7FFFFFF);
  v6 = v5 + 32 * v3;
  if (*(_QWORD *)v6)
  {
    **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)v6 = a3;
  if (a3)
  {
    v10 = *((_QWORD *)a3 + 1);
    v8 = (_QWORD *)((char *)a3 + 8);
    v9 = v10;
    v11 = v5 + 32 * v3;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  return this;
}

uint64_t llvm::CallBrInst::setSuccessor(llvm::CallBrInst *this, int a2, llvm::BasicBlock *a3)
{
  if (a2)
    return llvm::CallBrInst::setIndirectDest((uint64_t)this, a2 - 1, a3);
  else
    return llvm::CallBrInst::setDefaultDest((uint64_t)this, a3);
}

llvm::BasicBlock *llvm::Instruction::replaceSuccessorWith(llvm::Instruction *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  llvm::BasicBlock *result;
  int v7;
  unsigned int i;

  result = (llvm::BasicBlock *)llvm::Instruction::getNumSuccessors(this);
  if ((_DWORD)result)
  {
    v7 = (int)result;
    for (i = 0; i != v7; ++i)
    {
      result = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(this);
      if (result == a2)
        result = (llvm::BasicBlock *)llvm::Instruction::setSuccessor(this, i, a3);
    }
  }
  return result;
}

uint64_t llvm::Instruction::copyMetadata(uint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  llvm::MDNode **v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15[2];
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v7 = (uint64_t *)result;
  v20[8] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
  {
    v15[0] = 0;
    v15[1] = 0;
    v16 = 0;
    if (a4)
    {
      v8 = 4 * a4;
      do
      {
        v9 = *a3++;
        LODWORD(v17) = v9;
        llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v15, &v17, (uint64_t)&v18);
        v8 -= 4;
      }
      while (v8);
    }
    v18 = v20;
    v19 = 0x400000000;
    llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v18);
    if ((_DWORD)v19)
    {
      v10 = (llvm::MDNode **)v18;
      v11 = 16 * v19;
      do
      {
        if (!a4
          || (v17 = 0,
              llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(v15, v10, &v17)))
        {
          llvm::Instruction::setMetadata(v7, *(_DWORD *)v10, v10[1]);
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (!a4
      || (v14 = 0,
          v17 = 0,
          (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::LookupBucketFor<unsigned int>(v15, &v14, &v17) & 1) != 0))
    {
      v12 = *(unsigned __int8 **)(a2 + 48);
      v13 = v12;
      if (v12)
        llvm::MetadataTracking::track((uint64_t)&v13, (uint64_t)v12, 2);
      llvm::TrackingMDRef::operator=(v7 + 6, &v13);
      if (v13)
        llvm::MetadataTracking::untrack((uint64_t)&v13, (uint64_t)v13);
    }
    if (v18 != v20)
      free(v18);
    return MEMORY[0x24BD1B398](v15[0], 4);
  }
  return result;
}

uint64_t llvm::CallBrInst::setDefaultDest(uint64_t this, llvm::BasicBlock *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this - 32 * *(unsigned int *)(this + 80);
  v4 = *(_QWORD *)(v2 - 64);
  v3 = v2 - 64;
  if (v4)
  {
    **(_QWORD **)(v3 + 16) = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  }
  *(_QWORD *)v3 = a2;
  if (a2)
  {
    v8 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)((char *)a2 + 8);
    v7 = v8;
    *(_QWORD *)(v3 + 8) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = v3 + 8;
    *(_QWORD *)(v3 + 16) = v6;
    *v6 = v3;
  }
  return this;
}

uint64_t llvm::CallBrInst::setIndirectDest(uint64_t this, unsigned int a2, llvm::BasicBlock *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this - 32 * *(unsigned int *)(this + 80) - 32;
  v4 = (_QWORD *)(v3 + 32 * a2);
  v5 = v4;
  if (*v4)
  {
    v7 = (_QWORD *)v4[2];
    v6 = v4 + 2;
    *v7 = *(v6 - 1);
    v8 = *(v6 - 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *v6;
  }
  *v5 = a3;
  if (a3)
  {
    v11 = *((_QWORD *)a3 + 1);
    v9 = (_QWORD *)((char *)a3 + 8);
    v10 = v11;
    v12 = v3 + 32 * a2;
    *(_QWORD *)(v12 + 8) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v9;
    *v9 = v5;
  }
  return this;
}

uint64_t llvm::AllocaInst::isArrayAllocation(llvm::AllocaInst *this)
{
  uint64_t v1;
  BOOL v2;
  llvm::APInt *v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  v1 = *((_QWORD *)this - 4);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 16;
  else
    v2 = 0;
  if (!v2)
    return 1;
  v4 = (llvm::APInt *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  if (v5 > 0x40)
    v6 = llvm::APInt::countLeadingZerosSlowCase(v4) == v5 - 1;
  else
    v6 = *(_QWORD *)v4 == 1;
  v7 = v6;
  return v7 ^ 1u;
}

const char *llvm::SelectInst::areInvalidOperands(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v3 = *a2;
  if (*a2 != *a3)
    return "both values to select must have same type";
  v5 = *(unsigned __int8 *)(v3 + 8);
  if (v5 == 12)
    return "select values cannot have token type";
  v6 = *a1;
  if (!*a1 || (*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
  {
    if (v6 != **(_QWORD **)v6 + 1920)
      return "select condition must be i1 or <n x i1>";
    return 0;
  }
  if (*(_QWORD *)(v6 + 24) != **(_QWORD **)v6 + 1920)
    return "vector select condition element type must be i1";
  if ((v5 & 0xFE) == 0x12)
  {
    if (*(_DWORD *)(v3 + 32) != *(_DWORD *)(v6 + 32) || (v5 == 19) != (*(_DWORD *)(v6 + 8) == 19))
      return "vector select requires selected vectors to have the same vector length as select condition";
    return 0;
  }
  return "selected values for vector select must be vectors";
}

void llvm::LandingPadInst::init(llvm::LandingPadInst *this, unsigned int a2, const llvm::Twine *a3)
{
  _QWORD *v6;
  _QWORD *v7;

  *((_DWORD *)this + 15) = a2;
  *((_DWORD *)this + 5) &= 0xF8000000;
  v6 = operator new(32 * a2);
  *((_QWORD *)this - 1) = v6;
  if (a2)
  {
    v7 = &v6[4 * a2];
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      v6[3] = this;
      v6 += 4;
    }
    while (v6 != v7);
  }
  llvm::Value::setName(this, a3);
  *((_WORD *)this + 9) &= ~1u;
}

char *llvm::LandingPadInst::Create(llvm::LandingPadInst *this, llvm::Type *a2, const llvm::Twine *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  unsigned int v7;
  _DWORD *v9;
  char *v10;
  llvm::LandingPadInst *v11;

  v7 = a2;
  v9 = operator new(0x48uLL);
  v10 = (char *)(v9 + 2);
  v9[7] = v9[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v9 = 0;
  v11 = (llvm::LandingPadInst *)llvm::Instruction::Instruction((uint64_t)(v9 + 2), (uint64_t)this, 66, 0, 0, (uint64_t *)a4);
  llvm::LandingPadInst::init(v11, v7, a3);
  return v10;
}

void llvm::LandingPadInst::growOperands(llvm::LandingPadInst *this, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < v2 + a2)
  {
    if (v2 <= 1)
      v2 = 1;
    v3 = (a2 + 2 * v2) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v3;
    llvm::User::growHungoffUses(this, v3, 0);
  }
}

void llvm::LandingPadInst::addClause(llvm::LandingPadInst *this, llvm::Constant *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char *v12;

  v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  llvm::LandingPadInst::growOperands(this, 1);
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v5 & 0xF8000000 | (v5 + 1) & 0x7FFFFFF;
  if ((v5 & 0x40000000) != 0)
    v6 = (char *)*((_QWORD *)this - 1);
  else
    v6 = (char *)this - 32 * ((v5 + 1) & 0x7FFFFFF);
  v7 = &v6[32 * v4];
  if (*(_QWORD *)v7)
  {
    **((_QWORD **)v7 + 2) = *((_QWORD *)v7 + 1);
    v8 = *((_QWORD *)v7 + 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  }
  *(_QWORD *)v7 = a2;
  if (a2)
  {
    v11 = *((_QWORD *)a2 + 1);
    v10 = (char **)((char *)a2 + 8);
    v9 = v11;
    v12 = &v6[32 * v4];
    *((_QWORD *)v12 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v10;
    *v10 = v7;
  }
}

uint64_t llvm::CallBase::getArgOperandWithAttribute(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v7 = 0;
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 && llvm::AttributeListImpl::hasAttrSomewhere(v4, a2, &v7))
    return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
  v6 = *(_QWORD *)(a1 - 32);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(a1 + 72))
    return 0;
  result = *(_QWORD *)(v6 + 112);
  if (result)
  {
    if (llvm::AttributeListImpl::hasAttrSomewhere(result, a2, &v7))
      return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * (v7 - 1));
    return 0;
  }
  return result;
}

BOOL llvm::CallBase::paramHasAttr(llvm::CallBase *this, int a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 hasReadingOperandBundles;

  v4 = a2 + 2;
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    if (v4 < *(_DWORD *)(v5 + 8))
    {
      v6 = *(_QWORD *)(v5 + 8 * v4 + 40);
      if (v6)
      {
        if (((*(unsigned __int8 *)(v6 + a3 / 8 + 12) >> (a3 & 7)) & 1) != 0)
          return 1;
      }
    }
  }
  v8 = *((_QWORD *)this - 4);
  if (!v8)
    return 0;
  if (*(_BYTE *)(v8 + 16))
    return 0;
  if (*(_QWORD *)(v8 + 24) != *((_QWORD *)this + 9))
    return 0;
  v9 = *(_QWORD *)(v8 + 112);
  if (!v9)
    return 0;
  if (v4 >= *(_DWORD *)(v9 + 8))
    return 0;
  v10 = *(_QWORD *)(v9 + 8 * v4 + 40);
  if (!v10 || ((*(unsigned __int8 *)(v10 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0)
    return 0;
  if (a3 == 67)
  {
    hasReadingOperandBundles = llvm::CallBase::hasReadingOperandBundles(this);
    return !hasReadingOperandBundles;
  }
  if (a3 != 45)
  {
    if (a3 != 44)
      return 1;
    if (llvm::CallBase::hasReadingOperandBundles(this))
      return 0;
  }
  hasReadingOperandBundles = llvm::CallBase::hasClobberingOperandBundles(this);
  return !hasReadingOperandBundles;
}

BOOL llvm::CallBase::hasReadingOperandBundles(llvm::CallBase *this)
{
  _BOOL8 result;
  uint64_t v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v4[0] = 0x800000007;
  result = llvm::CallBase::hasOperandBundlesOtherThan((uint64_t)this, (__int32 *)v4, 2uLL);
  if (result)
  {
    v3 = *((_QWORD *)this - 4);
    return !v3 || *(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *((_QWORD *)this + 9) || *(_DWORD *)(v3 + 36) != 7;
  }
  return result;
}

BOOL llvm::CallBase::hasClobberingOperandBundles(llvm::CallBase *this)
{
  _BOOL8 result;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = xmmword_24AA490F0;
  result = llvm::CallBase::hasOperandBundlesOtherThan((uint64_t)this, (__int32 *)&v4, 4uLL);
  if (result)
  {
    v3 = *((_QWORD *)this - 4);
    return !v3 || *(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *((_QWORD *)this + 9) || *(_DWORD *)(v3 + 36) != 7;
  }
  return result;
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 - 32);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 == 5;
  else
    v4 = 0;
  if (v4)
  {
    if (*(_WORD *)(v2 + 18) != 49)
      return 0;
    v2 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3)
    return 0;
  v6 = *(_QWORD *)(v2 + 112);
  if (!v6)
    return 0;
  return (*(unsigned __int8 *)(v6 + a2 / 8 + 12) >> (a2 & 7)) & 1;
}

uint64_t llvm::CallBase::populateBundleOperandInfos(uint64_t ***a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  _QWORD v23[2];
  int v24;

  v4 = a4;
  v5 = a2;
  v7 = *((_DWORD *)a1 + 5);
  v8 = (uint64_t)&(&a1[4 * a4])[-4 * (v7 & 0x7FFFFFF)];
  if (a3)
  {
    v9 = 48 * a3;
    v10 = (uint64_t **)(a2 + 32);
    do
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)v23, *(v10 - 1), *v10, v8);
      v8 = v11;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
    v7 = *((_DWORD *)a1 + 5);
  }
  if (v7 < 0)
  {
    v12 = &a1[-4 * (v7 & 0x7FFFFFF)];
    v15 = (uint64_t)*(v12 - 1);
    v14 = v12 - 1;
    v13 = v15;
    if (v15)
    {
      v16 = ***a1;
      v17 = (uint64_t)v14 - v13;
      do
      {
        v18 = *(char *)(v5 + 23);
        if (v18 >= 0)
          v19 = (uint64_t *)v5;
        else
          v19 = *(uint64_t **)v5;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v5 + 23);
        else
          v20 = *(_QWORD *)(v5 + 8);
        v21 = *(_DWORD *)(v16 + 2660);
        v23[0] = v19;
        v23[1] = v20;
        v24 = v21;
        *(_QWORD *)v17 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(v16 + 2648), v19, v20, &v24);
        *(_DWORD *)(v17 + 8) = v4;
        v4 += (*(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24)) >> 3;
        *(_DWORD *)(v17 + 12) = v4;
        v5 += 48;
        v17 += 16;
      }
      while ((uint64_t ***)v17 != v14);
    }
  }
  return v8;
}

char *llvm::CallBase::getBundleOpInfoForOperand(char *this, unsigned int a2)
{
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v9;

  v2 = *((_DWORD *)this + 5);
  if (v2 < 0)
  {
    v3 = &this[-32 * (v2 & 0x7FFFFFF)];
    v6 = *((_QWORD *)v3 - 1);
    v4 = v3 - 8;
    v5 = v6;
    v7 = &v4[-v6];
    if (v6 > 127)
    {
      if (v5)
      {
        do
        {
          if (&v7[16
                 * (((a2 - *((_DWORD *)v7 + 2)) << 10)
                  / (((*((_DWORD *)v4 - 1) - *((_DWORD *)v7 + 2)) << 10) / ((v4 - v7) >> 4)))] >= v4)
            this = v4 - 16;
          else
            this = &v7[16
                     * (((a2 - *((_DWORD *)v7 + 2)) << 10)
                      / (((*((_DWORD *)v4 - 1) - *((_DWORD *)v7 + 2)) << 10)
                                     / ((v4 - v7) >> 4)))];
          v9 = *((_DWORD *)this + 3);
          if (*((_DWORD *)this + 2) <= a2 && v9 > a2)
            break;
          if (v9 > a2)
            v4 = this;
          else
            v7 = this + 16;
        }
        while (v7 != v4);
      }
      else
      {
        return v7;
      }
    }
    else if (v5)
    {
      do
      {
        while (1)
        {
          this = v7;
          if (*((_DWORD *)v7 + 2) <= a2)
            break;
          v7 += 16;
          if (this + 16 == v4)
            return this;
        }
        v7 += 16;
      }
      while (*((_DWORD *)this + 3) <= a2 && v7 != v4);
    }
  }
  return this;
}

uint64_t llvm::CallBase::getOperandBundle@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v3 = *(_DWORD *)(this + 20);
  if (v3 < 0 && (v5 = v3 & 0x7FFFFFF, v6 = this - 32 * v5, v7 = *(_QWORD *)(v6 - 8), (v7 & 0xFFFFFFFF0) != 0))
  {
    v8 = (v7 >> 4);
    v9 = (unsigned int *)(this - (v7 + 32 * v5));
    while (1)
    {
      v10 = *((_QWORD *)v9 - 1);
      if (*(_DWORD *)(v10 + 8) == a2)
        break;
      v9 += 4;
      if (!--v8)
        goto LABEL_2;
    }
    v12 = v9;
    v11 = *v9;
    v13 = v12[1] - v11;
    *(_QWORD *)a3 = v6 + 32 * v11;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v10;
    v4 = 1;
  }
  else
  {
LABEL_2:
    v4 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v4;
  return this;
}

BOOL llvm::CallBase::hasOperandBundlesOtherThan(uint64_t a1, __int32 *__s, size_t __n)
{
  int v3;
  _BOOL8 result;
  unint64_t v6;
  __int32 *v9;
  uint64_t v10;
  uint64_t v11;
  __int32 *v12;
  __int32 *v13;
  uint64_t v14;
  BOOL v15;

  v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x80000000) == 0)
    return 0;
  v6 = *(_QWORD *)(a1 - 32 * (v3 & 0x7FFFFFF) - 8);
  if ((v6 & 0xFFFFFFFF0) == 0)
    return 0;
  v9 = &__s[__n];
  v10 = (v6 >> 4) - 1;
  v11 = a1 - 8;
  do
  {
    v12 = wmemchr(__s, *(_DWORD *)(*(_QWORD *)(v11- (*(_QWORD *)(a1 - 8 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))+ 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)))+ 8), __n);
    if (v12)
      v13 = v12;
    else
      v13 = v9;
    v14 = v13 - __s;
    result = v14 == __n;
    v15 = v14 == __n || v10-- == 0;
    v11 += 16;
  }
  while (!v15);
  return result;
}

uint64_t llvm::CallBase::getMemoryEffects(llvm::CallBase *this)
{
  uint64_t MemoryEffects;
  uint64_t v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v8;

  v8 = *((_QWORD *)this + 8);
  MemoryEffects = llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)&v8);
  v3 = *((_QWORD *)this - 4);
  if (v3)
    v4 = *(_BYTE *)(v3 + 16) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v8 = *(_QWORD *)(v3 + 112);
    v5 = llvm::AttributeList::getMemoryEffects((llvm::AttributeList *)&v8);
    v6 = *((_DWORD *)this + 5);
    if (v6 < 0 && (*((_QWORD *)this - 4 * (v6 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) != 0)
    {
      if (llvm::CallBase::hasReadingOperandBundles(this))
        v5 |= 0x15u;
      if (llvm::CallBase::hasClobberingOperandBundles(this))
        v5 |= 0x2Au;
    }
    return v5 & MemoryEffects;
  }
  return MemoryEffects;
}

void llvm::CallInst::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, const llvm::Twine *a8)
{
  unsigned int v11;
  char v14;

  v11 = a5;
  *(_QWORD *)(a1 + 72) = a2;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v14, a4, &a4[a5], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  llvm::GlobalIFunc::setResolver(a1, a3);
  llvm::CallBase::populateBundleOperandInfos((uint64_t ***)a1, a6, a7, v11);
  llvm::Value::setName((llvm::Value *)a1, a8);
}

void llvm::InvokeInst::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::Twine *a11)
{
  unsigned int v11;
  char v16;

  v11 = a7;
  *(_QWORD *)(a1 + 72) = a2;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v16, a6, &a6[a7], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  llvm::InvokeInst::setNormalDest(a1, a4);
  llvm::InvokeInst::setUnwindDest(a1, a5);
  llvm::GlobalIFunc::setResolver(a1, a3);
  llvm::CallBase::populateBundleOperandInfos((uint64_t ***)a1, a9, a10, v11);
  llvm::Value::setName((llvm::Value *)a1, a11);
}

void llvm::CallBrInst::init(uint64_t a1, uint64_t a2, uint64_t a3, llvm::BasicBlock *a4, uint64_t a5, int a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, const llvm::Twine *a11)
{
  unsigned int v11;
  unsigned int v17;
  char v18;

  v11 = a8;
  *(_QWORD *)(a1 + 72) = a2;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v18, a7, &a7[a8], a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
  *(_DWORD *)(a1 + 80) = a6;
  llvm::CallBrInst::setDefaultDest(a1, a4);
  if (*(_DWORD *)(a1 + 80))
  {
    v17 = 0;
    do
    {
      llvm::CallBrInst::setIndirectDest(a1, v17, *(llvm::BasicBlock **)(a5 + 8 * v17));
      ++v17;
    }
    while (v17 != *(_DWORD *)(a1 + 80));
  }
  llvm::GlobalIFunc::setResolver(a1, a3);
  llvm::CallBase::populateBundleOperandInfos((uint64_t ***)a1, a9, a10, v11);
  llvm::Value::setName((llvm::Value *)a1, a11);
}

unsigned int *llvm::CallBrInst::getIndirectDests@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;

  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x1000000000;
  v3 = this[20];
  if ((_DWORD)v3)
  {
    v4 = this;
    v5 = this - 8;
    do
    {
      this = llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)a2, *(_QWORD *)&v5[-8 * v4[20]]);
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::ReturnInst::ReturnInst(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a2 + 1608;
  if (a3)
    v6 = -1;
  else
    v6 = 0;
  result = llvm::Instruction::Instruction(a1, v5, 1, a1 + 32 * v6, a3 != 0, a4);
  if (a3)
  {
    v8 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    v9 = -v8;
    v10 = (_QWORD *)(result - 32 * v8);
    if (*v10)
    {
      v11 = result + 32 * v9;
      v13 = *(_QWORD **)(v11 + 16);
      v12 = (_QWORD *)(v11 + 16);
      *v13 = *(v12 - 1);
      v14 = *(v12 - 1);
      if (v14)
        *(_QWORD *)(v14 + 16) = *v12;
    }
    *v10 = a3;
    v17 = *(_QWORD *)(a3 + 8);
    v16 = (_QWORD *)(a3 + 8);
    v15 = v17;
    v18 = result + 32 * v9;
    *(_QWORD *)(v18 + 8) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v18 + 8;
    *(_QWORD *)(v18 + 16) = v16;
    *v16 = v10;
  }
  return result;
}

uint64_t llvm::ResumeInst::ResumeInst(llvm::ResumeInst *this, llvm::Value *a2, llvm::Instruction *a3)
{
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (char *)this - 32;
  result = llvm::Instruction::Instruction((uint64_t)this, ***(_QWORD ***)a2 + 1608, 6, (uint64_t)this - 32, 1, (uint64_t *)a3);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v6 = *(_QWORD *)(result - 24);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v9 = *((_QWORD *)a2 + 1);
  v8 = (_QWORD *)((char *)a2 + 8);
  v7 = v9;
  *(_QWORD *)(result - 24) = v9;
  if (v9)
    *(_QWORD *)(v7 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v8;
  *v8 = v4;
  return result;
}

uint64_t llvm::CleanupReturnInst::init(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a3)
  {
    *(_WORD *)(result + 18) |= 1u;
    v3 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    v4 = -v3;
    v5 = (_QWORD *)(result - 32 * v3);
    if (*v5)
    {
      v6 = result + 32 * v4;
      v8 = *(_QWORD **)(v6 + 16);
      v7 = (_QWORD *)(v6 + 16);
      *v8 = *(v7 - 1);
      v9 = *(v7 - 1);
      if (v9)
        *(_QWORD *)(v9 + 16) = *v7;
    }
    *v5 = a2;
    if (a2)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v10 = (_QWORD *)(a2 + 8);
      v11 = v12;
      v13 = result + 32 * v4;
      *(_QWORD *)(v13 + 8) = v12;
      if (v12)
        *(_QWORD *)(v11 + 16) = v13 + 8;
      *(_QWORD *)(v13 + 16) = v10;
      *v10 = v5;
    }
    v14 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    if (*(_QWORD *)(v14 + 32))
    {
      **(_QWORD **)(v14 + 48) = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 40);
      if (v15)
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 48);
    }
    *(_QWORD *)(v14 + 32) = a3;
    v18 = *(_QWORD *)(a3 + 8);
    v16 = (_QWORD *)(a3 + 8);
    v17 = v18;
    *(_QWORD *)(v14 + 40) = v18;
    if (v18)
      *(_QWORD *)(v17 + 16) = v14 + 40;
    *(_QWORD *)(v14 + 48) = v16;
    *v16 = v14 + 32;
  }
  else
  {
    v19 = *(_DWORD *)(result + 20) & 0x7FFFFFF;
    v20 = -v19;
    v21 = (_QWORD *)(result - 32 * v19);
    if (*v21)
    {
      v22 = result + 32 * v20;
      v24 = *(_QWORD **)(v22 + 16);
      v23 = (_QWORD *)(v22 + 16);
      *v24 = *(v23 - 1);
      v25 = *(v23 - 1);
      if (v25)
        *(_QWORD *)(v25 + 16) = *v23;
    }
    *v21 = a2;
    if (a2)
    {
      v28 = *(_QWORD *)(a2 + 8);
      v26 = (_QWORD *)(a2 + 8);
      v27 = v28;
      v29 = result + 32 * v20;
      *(_QWORD *)(v29 + 8) = v28;
      if (v28)
        *(_QWORD *)(v27 + 16) = v29 + 8;
      *(_QWORD *)(v29 + 16) = v26;
      *v26 = v21;
    }
  }
  return result;
}

uint64_t llvm::CatchReturnInst::init(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v4 = *(_QWORD *)(result - 56);
    if (v4)
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(result - 48);
  }
  *v3 = a2;
  if (a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(a2 + 8);
    v6 = v7;
    *(_QWORD *)(result - 56) = v7;
    if (v7)
      *(_QWORD *)(v6 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v5;
    *v5 = v3;
  }
  v8 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v9 = *(_QWORD *)(result - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(result - 16);
  }
  *v8 = a3;
  if (a3)
  {
    v12 = *(_QWORD *)(a3 + 8);
    v10 = (_QWORD *)(a3 + 8);
    v11 = v12;
    *(_QWORD *)(result - 24) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v10;
    *v10 = v8;
  }
  return result;
}

llvm::CatchSwitchInst *llvm::CatchSwitchInst::CatchSwitchInst(llvm::CatchSwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11;
  int v12;

  v11 = llvm::Instruction::Instruction((uint64_t)this, *(_QWORD *)a2, 10, 0, 0, (uint64_t *)a6);
  if (a3)
    v12 = a4 + 1;
  else
    v12 = a4;
  llvm::CatchSwitchInst::init(v11, (uint64_t)a2, (uint64_t)a3, v12 + 1);
  llvm::Value::setName(this, a5);
  return this;
}

_QWORD *llvm::CatchSwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v8;
  _QWORD *result;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *(_DWORD *)(a1 + 60) = a4;
  if (a3)
    v8 = 2;
  else
    v8 = 1;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | v8;
  result = operator new(32 * a4);
  *(_QWORD *)(a1 - 8) = result;
  if (a4)
  {
    v10 = result;
    do
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = a1;
      v10 += 4;
    }
    while (v10 != &result[4 * a4]);
  }
  v11 = *(_DWORD *)(a1 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = result;
  else
    v12 = (_QWORD *)(a1 - 32 * (v11 & 0x7FFFFFF));
  if (*v12)
  {
    *(_QWORD *)v12[2] = v12[1];
    v13 = v12[1];
    if (v13)
      *(_QWORD *)(v13 + 16) = v12[2];
  }
  *v12 = a2;
  if (a2)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v15 = (_QWORD *)(a2 + 8);
    v14 = v16;
    v12[1] = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = v12 + 1;
    v12[2] = v15;
    *v15 = v12;
  }
  if (a3)
  {
    *(_WORD *)(a1 + 18) |= 1u;
    return (_QWORD *)llvm::CatchSwitchInst::setUnwindDest(a1, a3);
  }
  return result;
}

void llvm::CatchSwitchInst::growOperands(llvm::CatchSwitchInst *this, int a2)
{
  int v2;
  unsigned int v3;

  v2 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  if (*((_DWORD *)this + 15) < (v2 + a2))
  {
    v3 = (a2 + 2 * v2) & 0xFFFFFFFE;
    *((_DWORD *)this + 15) = v3;
    llvm::User::growHungoffUses(this, v3, 0);
  }
}

void llvm::CatchSwitchInst::addHandler(llvm::CatchSwitchInst *this, llvm::BasicBlock *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  char *v12;

  v4 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  llvm::CatchSwitchInst::growOperands(this, 1);
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v5 & 0xF8000000 | (v5 + 1) & 0x7FFFFFF;
  if ((v5 & 0x40000000) != 0)
    v6 = (char *)*((_QWORD *)this - 1);
  else
    v6 = (char *)this - 32 * ((v5 + 1) & 0x7FFFFFF);
  v7 = &v6[32 * v4];
  if (*(_QWORD *)v7)
  {
    **((_QWORD **)v7 + 2) = *((_QWORD *)v7 + 1);
    v8 = *((_QWORD *)v7 + 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
  }
  *(_QWORD *)v7 = a2;
  if (a2)
  {
    v11 = *((_QWORD *)a2 + 1);
    v10 = (char **)((char *)a2 + 8);
    v9 = v11;
    v12 = &v6[32 * v4];
    *((_QWORD *)v12 + 1) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v12 + 8;
    *((_QWORD *)v12 + 2) = v10;
    *v10 = v7;
  }
}

void llvm::FuncletPadInst::init(llvm::Value *a1, uint64_t a2, uint64_t *a3, uint64_t a4, const llvm::Twine *a5)
{
  char v8;

  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v8, a3, &a3[a4], (uint64_t)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
  llvm::GlobalIFunc::setResolver((uint64_t)a1, a2);
  llvm::Value::setName(a1, a5);
}

uint64_t llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (char *)this - 32;
  result = llvm::Instruction::Instruction((uint64_t)this, ***(_QWORD ***)a2 + 1608, 2, (uint64_t)this - 32, 1, (uint64_t *)a3);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v6 = *(_QWORD *)(result - 24);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v9 = *((_QWORD *)a2 + 1);
  v8 = (_QWORD *)((char *)a2 + 8);
  v7 = v9;
  *(_QWORD *)(result - 24) = v9;
  if (v9)
    *(_QWORD *)(v7 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v8;
  *v8 = v4;
  return result;
}

uint64_t llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v8 = (_QWORD *)((char *)this - 96);
  result = llvm::Instruction::Instruction((uint64_t)this, ***(_QWORD ***)a2 + 1608, 2, (uint64_t)this - 96, 3, (uint64_t *)a5);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v10 = *(_QWORD *)(result - 88);
    if (v10)
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(result - 80);
  }
  *v8 = a4;
  if (a4)
  {
    v13 = *((_QWORD *)a4 + 1);
    v12 = (_QWORD *)((char *)a4 + 8);
    v11 = v13;
    *(_QWORD *)(result - 88) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v12;
    *v12 = v8;
  }
  v14 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v15 = *(_QWORD *)(result - 56);
    if (v15)
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(result - 48);
  }
  *v14 = a3;
  if (a3)
  {
    v18 = *((_QWORD *)a3 + 1);
    v17 = (_QWORD *)((char *)a3 + 8);
    v16 = v18;
    *(_QWORD *)(result - 56) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v17;
    *v17 = v14;
  }
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v19 = *(_QWORD *)(result - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v22 = *((_QWORD *)a2 + 1);
  v21 = (_QWORD *)((char *)a2 + 8);
  v20 = v22;
  *(_QWORD *)(result - 24) = v22;
  if (v22)
    *(_QWORD *)(v20 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v21;
  *v21 = result - 32;
  return result;
}

llvm::BranchInst *llvm::BranchInst::BranchInst(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)this = ***(_QWORD ***)a2 + 1608;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 30;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  v6 = (char *)a3 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v7 = (_QWORD *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a3 + 40, (uint64_t)this);
  v8 = *((_QWORD *)this - 4);
  v9 = *((_QWORD *)a3 + 5);
  *((_QWORD *)this + 4) = v6;
  *v7 = v9;
  *(_QWORD *)(v9 + 8) = v7;
  *((_QWORD *)a3 + 5) = v7;
  if (v8)
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v10 = *((_QWORD *)this - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 2);
  }
  *((_QWORD *)this - 4) = a2;
  v13 = *((_QWORD *)a2 + 1);
  v12 = (_QWORD *)((char *)a2 + 8);
  v11 = v13;
  *((_QWORD *)this - 3) = v13;
  if (v13)
    *(_QWORD *)(v11 + 16) = (char *)this - 24;
  *((_QWORD *)this - 2) = v12;
  *v12 = (char *)this - 32;
  return this;
}

uint64_t llvm::AllocaInst::AllocaInst(uint64_t a1, llvm::PointerType **a2, llvm::Type *a3, llvm::Value *a4, unsigned __int8 a5, const llvm::Twine *a6, llvm::Instruction *a7)
{
  llvm::Type *v13;
  llvm::Value *v14;

  v13 = (llvm::Type *)llvm::PointerType::get(a2, a3);
  if (!a4)
    a4 = (llvm::Value *)llvm::ConstantInt::get(*(_QWORD *)*a2 + 1992, 1, 0);
  v14 = (llvm::Value *)llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)a1, v13, 31, a4, a7);
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a5;
  llvm::Value::setName(v14, a6);
  return a1;
}

llvm::UnaryInstruction *llvm::UnaryInstruction::UnaryInstruction(llvm::UnaryInstruction *this, llvm::Type *a2, char a3, llvm::Value *a4, llvm::BasicBlock *a5)
{
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a3 + 28;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 1;
  v8 = (char *)a5 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v9 = (_QWORD *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a5 + 40, (uint64_t)this);
  v10 = (_QWORD *)((char *)this - 32);
  v11 = *((_QWORD *)this - 4);
  v12 = *((_QWORD *)a5 + 5);
  *((_QWORD *)this + 4) = v8;
  *v9 = v12;
  *(_QWORD *)(v12 + 8) = v9;
  *((_QWORD *)a5 + 5) = v9;
  if (v11)
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v13 = *((_QWORD *)this - 3);
    if (v13)
      *(_QWORD *)(v13 + 16) = *((_QWORD *)this - 2);
  }
  *v10 = a4;
  if (a4)
  {
    v16 = *((_QWORD *)a4 + 1);
    v15 = (_QWORD *)((char *)a4 + 8);
    v14 = v16;
    *((_QWORD *)this - 3) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v15;
    *v15 = v10;
  }
  return this;
}

llvm::UnaryInstruction *llvm::LoadInst::LoadInst(llvm::UnaryInstruction *a1, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4, __int16 a5, char a6, llvm::Instruction *a7)
{
  uint64_t v11;

  v11 = llvm::UnaryInstruction::UnaryInstruction(a1, a2, 32, a3, a7);
  *(_WORD *)(v11 + 18) = a5 & 0xFF81 | (2 * (a6 & 0x3F)) | *(_WORD *)(v11 + 18) & 0xFC00;
  *(_BYTE *)(v11 + 60) = 1;
  llvm::Value::setName((llvm::Value *)v11, a4);
  return a1;
}

llvm::UnaryInstruction *llvm::LoadInst::LoadInst(llvm::UnaryInstruction *a1, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4, __int16 a5, char a6, __int16 a7, char a8, llvm::Instruction *a9)
{
  uint64_t v15;

  v15 = llvm::UnaryInstruction::UnaryInstruction(a1, a2, 32, a3, a9);
  *(_WORD *)(v15 + 18) = *(_WORD *)(v15 + 18) & 0xFC00 | a5 & 0xFF81 | (2 * (a6 & 0x3F)) | (a7 << 7);
  *(_BYTE *)(v15 + 60) = a8;
  llvm::Value::setName((llvm::Value *)v15, a4);
  return a1;
}

uint64_t llvm::StoreInst::StoreInst(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, __int16 a6, char a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v14 = a1 - 64;
  result = llvm::Instruction::Instruction(a1, ***(_QWORD ***)a2 + 1608, 33, a1 - 64, 2, a8);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v16 = *(_QWORD *)(result - 56);
    if (v16)
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(result - 48);
  }
  *(_QWORD *)(result - 64) = a2;
  v19 = *(_QWORD *)(a2 + 8);
  v18 = (uint64_t *)(a2 + 8);
  v17 = v19;
  *(_QWORD *)(result - 56) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = result - 56;
  *(_QWORD *)(result - 48) = v18;
  *v18 = v14;
  v20 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v21 = *(_QWORD *)(result - 24);
    if (v21)
      *(_QWORD *)(v21 + 16) = *(_QWORD *)(result - 16);
  }
  *v20 = a3;
  if (a3)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v23 = (_QWORD *)(a3 + 8);
    v22 = v24;
    *(_QWORD *)(result - 24) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v23;
    *v23 = v20;
  }
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFC00 | a4 & 0xFF81 | (2 * (a5 & 0x3F)) | (a6 << 7);
  *(_BYTE *)(result + 60) = a7;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::Init(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, char a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;

  v8 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v9 = *(_QWORD *)(result - 88);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(result - 80);
  }
  *v8 = a2;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v11 = v12;
    *(_QWORD *)(result - 88) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v10;
    *v10 = v8;
  }
  v13 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v14 = *(_QWORD *)(result - 56);
    if (v14)
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(result - 48);
  }
  *v13 = a3;
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v15 = (_QWORD *)(a3 + 8);
    v16 = v17;
    *(_QWORD *)(result - 56) = v17;
    if (v17)
      *(_QWORD *)(v16 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v15;
    *v15 = v13;
  }
  v18 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v19 = *(_QWORD *)(result - 24);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(result - 16);
  }
  *v18 = a4;
  if (a4)
  {
    v22 = *(_QWORD *)(a4 + 8);
    v20 = (_QWORD *)(a4 + 8);
    v21 = v22;
    *(_QWORD *)(result - 24) = v22;
    if (v22)
      *(_QWORD *)(v21 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v20;
    *v20 = v18;
  }
  v23 = *(_WORD *)(result + 18) & 0xC003;
  *(_BYTE *)(result + 60) = a8;
  *(_WORD *)(result + 18) = (4 * a6) & 0xC01F | (a5 << 8) | (32 * a7) & 0xC0FF | v23;
  return result;
}

uint64_t llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(uint64_t a1, uint64_t a2, uint64_t ***a3, uint64_t a4, unsigned __int8 a5, __int16 a6, __int16 a7, char a8, uint64_t *a9)
{
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v17 = **a3;
  v18 = *v17 + 1920;
  v22[0] = *a3;
  v22[1] = v18;
  v19 = llvm::StructType::get(v17, (uint64_t)v22, 2, 0);
  v20 = llvm::Instruction::Instruction(a1, v19, 36, a1 - 96, 3, a9);
  llvm::AtomicCmpXchgInst::Init(v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t llvm::AtomicRMWInst::Init(uint64_t result, __int16 a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, char a7)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;

  v7 = (_QWORD *)(result - 64);
  if (*(_QWORD *)(result - 64))
  {
    **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
    v8 = *(_QWORD *)(result - 56);
    if (v8)
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(result - 48);
  }
  *v7 = a3;
  if (a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v9 = (_QWORD *)(a3 + 8);
    v10 = v11;
    *(_QWORD *)(result - 56) = v11;
    if (v11)
      *(_QWORD *)(v10 + 16) = result - 56;
    *(_QWORD *)(result - 48) = v9;
    *v9 = v7;
  }
  v12 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v13 = *(_QWORD *)(result - 24);
    if (v13)
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(result - 16);
  }
  *v12 = a4;
  if (a4)
  {
    v16 = *(_QWORD *)(a4 + 8);
    v14 = (_QWORD *)(a4 + 8);
    v15 = v16;
    *(_QWORD *)(result - 24) = v16;
    if (v16)
      *(_QWORD *)(v15 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v14;
    *v14 = v12;
  }
  v17 = *(_WORD *)(result + 18) & 0x8001;
  *(_BYTE *)(result + 60) = a7;
  *(_WORD *)(result + 18) = ((2 * a6) | (16 * a2)) & 0x81FF | (a5 << 9) | v17;
  return result;
}

uint64_t llvm::AtomicRMWInst::AtomicRMWInst(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, unsigned __int8 a5, __int16 a6, char a7, uint64_t *a8)
{
  __int16 v14;
  uint64_t v15;

  v14 = a5;
  v15 = llvm::Instruction::Instruction(a1, *a4, 37, a1 - 64, 2, a8);
  llvm::AtomicRMWInst::Init(v15, a2, a3, (uint64_t)a4, v14, a6, a7);
  return a1;
}

char *llvm::AtomicRMWInst::getOperationName(int a1)
{
  return off_251C35CF8[a1];
}

void llvm::GetElementPtrInst::init(llvm::Value *a1, uint64_t a2, uint64_t *a3, uint64_t a4, const llvm::Twine *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char v18;

  v7 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  v8 = -v7;
  v9 = (_QWORD *)((char *)a1 - 32 * v7);
  if (*v9)
  {
    v10 = (_DWORD *)((char *)a1 + 32 * v8);
    v12 = (_QWORD *)*((_QWORD *)v10 + 2);
    v11 = v10 + 4;
    *v12 = *(v11 - 1);
    v13 = *(v11 - 1);
    if (v13)
      *(_QWORD *)(v13 + 16) = *v11;
  }
  *v9 = a2;
  if (a2)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v14 = (_QWORD *)(a2 + 8);
    v15 = v16;
    v17 = (_DWORD *)((char *)a1 + 32 * v8);
    *((_QWORD *)v17 + 1) = v16;
    if (v16)
      *(_QWORD *)(v15 + 16) = v17 + 2;
    *((_QWORD *)v17 + 2) = v14;
    *v14 = v9;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Constant * const*,llvm::Constant * const*,llvm::Use *>((uint64_t)&v18, a3, &a3[a4], (uint64_t)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 32);
  llvm::Value::setName(a1, a5);
}

uint64_t llvm::GetElementPtrInst::getTypeAtIndex(llvm::GetElementPtrInst *this, llvm::Type *a2, llvm::Value *a3)
{
  int v5;
  uint64_t UniqueInteger;
  unsigned int *v7;
  char *v8;
  int v9;
  uint64_t result;

  v5 = *((unsigned __int8 *)this + 8);
  if (this && v5 == 16)
  {
    if (llvm::StructType::indexValid(this, a2))
    {
      UniqueInteger = llvm::Constant::getUniqueInteger(a2);
      if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
        v7 = *(unsigned int **)UniqueInteger;
      else
        v7 = (unsigned int *)UniqueInteger;
      v8 = (char *)(*((_QWORD *)this + 2) + 8 * *v7);
      return *(_QWORD *)v8;
    }
    return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v9 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v9 != 13)
    return 0;
  if (this && v5 == 17 || (result = 0, this) && (v5 & 0xFE) == 0x12)
  {
    v8 = (char *)this + 24;
    return *(_QWORD *)v8;
  }
  return result;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v9 = (char *)this - 64;
  if (*(_QWORD *)(llvm::Instruction::Instruction((uint64_t)this, *(_QWORD *)(*(_QWORD *)a2 + 24), 61, (uint64_t)this - 64, 2, (uint64_t *)a5)- 64))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v10 = *((_QWORD *)this - 7);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v13 = *((_QWORD *)a2 + 1);
  v12 = (_QWORD *)((char *)a2 + 8);
  v11 = v13;
  *((_QWORD *)this - 7) = v13;
  if (v13)
    *(_QWORD *)(v11 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v12;
  *v12 = v9;
  v14 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v15 = *((_QWORD *)this - 3);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)this - 2);
  }
  *v14 = a3;
  if (a3)
  {
    v18 = *((_QWORD *)a3 + 1);
    v17 = (_QWORD *)((char *)a3 + 8);
    v16 = v18;
    *((_QWORD *)this - 3) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v17;
    *v17 = v14;
  }
  llvm::Value::setName(this, a4);
  return this;
}

llvm::ExtractElementInst *llvm::ExtractElementInst::ExtractElementInst(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::BasicBlock *a5)
{
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  *(_QWORD *)this = *(_QWORD *)(*(_QWORD *)a2 + 24);
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 89;
  *((_BYTE *)this + 17) = 0;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  v10 = (char *)a5 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v11 = (_QWORD *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a5 + 40, (uint64_t)this);
  v12 = *((_QWORD *)this - 8);
  v13 = *((_QWORD *)a5 + 5);
  *((_QWORD *)this + 4) = v10;
  *v11 = v13;
  *(_QWORD *)(v13 + 8) = v11;
  *((_QWORD *)a5 + 5) = v11;
  if (v12)
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v14 = *((_QWORD *)this - 7);
    if (v14)
      *(_QWORD *)(v14 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v17 = *((_QWORD *)a2 + 1);
  v16 = (_QWORD *)((char *)a2 + 8);
  v15 = v17;
  *((_QWORD *)this - 7) = v17;
  if (v17)
    *(_QWORD *)(v15 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v16;
  *v16 = (char *)this - 64;
  v18 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v19 = *((_QWORD *)this - 3);
    if (v19)
      *(_QWORD *)(v19 + 16) = *((_QWORD *)this - 2);
  }
  *v18 = a3;
  if (a3)
  {
    v22 = *((_QWORD *)a3 + 1);
    v21 = (_QWORD *)((char *)a3 + 8);
    v20 = v22;
    *((_QWORD *)this - 3) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v21;
    *v21 = v18;
  }
  llvm::Value::setName(this, a4);
  return this;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v11 = (char *)this - 96;
  if (*(_QWORD *)(llvm::Instruction::Instruction((uint64_t)this, *(_QWORD *)a2, 62, (uint64_t)this - 96, 3, (uint64_t *)a6)- 96))
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v12 = *((_QWORD *)this - 11);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)this - 10);
  }
  *((_QWORD *)this - 12) = a2;
  v15 = *((_QWORD *)a2 + 1);
  v14 = (_QWORD *)((char *)a2 + 8);
  v13 = v15;
  *((_QWORD *)this - 11) = v15;
  if (v15)
    *(_QWORD *)(v13 + 16) = (char *)this - 88;
  *((_QWORD *)this - 10) = v14;
  *v14 = v11;
  v16 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v17 = *((_QWORD *)this - 7);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)this - 6);
  }
  *v16 = a3;
  if (a3)
  {
    v20 = *((_QWORD *)a3 + 1);
    v19 = (_QWORD *)((char *)a3 + 8);
    v18 = v20;
    *((_QWORD *)this - 7) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v19;
    *v19 = v16;
  }
  v21 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v22 = *((_QWORD *)this - 3);
    if (v22)
      *(_QWORD *)(v22 + 16) = *((_QWORD *)this - 2);
  }
  *v21 = a4;
  if (a4)
  {
    v25 = *((_QWORD *)a4 + 1);
    v24 = (_QWORD *)((char *)a4 + 8);
    v23 = v25;
    *((_QWORD *)this - 3) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v24;
    *v24 = v21;
  }
  llvm::Value::setName(this, a5);
  return this;
}

llvm::InsertElementInst *llvm::InsertElementInst::InsertElementInst(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  unsigned int v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  v12 = *((_DWORD *)this + 5) & 0xC0000000 | 3;
  *((_DWORD *)this + 4) = 90;
  *((_DWORD *)this + 5) = v12;
  v13 = (char *)a6 + 40;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v14 = (_QWORD *)((char *)this + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a6 + 40, (uint64_t)this);
  v15 = *((_QWORD *)this - 12);
  v16 = *((_QWORD *)a6 + 5);
  *((_QWORD *)this + 4) = v13;
  *v14 = v16;
  *(_QWORD *)(v16 + 8) = v14;
  *((_QWORD *)a6 + 5) = v14;
  if (v15)
  {
    **((_QWORD **)this - 10) = *((_QWORD *)this - 11);
    v17 = *((_QWORD *)this - 11);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)this - 10);
  }
  *((_QWORD *)this - 12) = a2;
  v20 = *((_QWORD *)a2 + 1);
  v19 = (_QWORD *)((char *)a2 + 8);
  v18 = v20;
  *((_QWORD *)this - 11) = v20;
  if (v20)
    *(_QWORD *)(v18 + 16) = (char *)this - 88;
  *((_QWORD *)this - 10) = v19;
  *v19 = (char *)this - 96;
  v21 = (_QWORD *)((char *)this - 64);
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v22 = *((_QWORD *)this - 7);
    if (v22)
      *(_QWORD *)(v22 + 16) = *((_QWORD *)this - 6);
  }
  *v21 = a3;
  if (a3)
  {
    v25 = *((_QWORD *)a3 + 1);
    v24 = (_QWORD *)((char *)a3 + 8);
    v23 = v25;
    *((_QWORD *)this - 7) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = (char *)this - 56;
    *((_QWORD *)this - 6) = v24;
    *v24 = v21;
  }
  v26 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v27 = *((_QWORD *)this - 3);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)this - 2);
  }
  *v26 = a4;
  if (a4)
  {
    v30 = *((_QWORD *)a4 + 1);
    v29 = (_QWORD *)((char *)a4 + 8);
    v28 = v30;
    *((_QWORD *)this - 3) = v30;
    if (v30)
      *(_QWORD *)(v28 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v29;
    *v29 = v26;
  }
  llvm::Value::setName(this, a5);
  return this;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int *v22;
  llvm::Type *v23;
  _BYTE *v24;
  BOOL v25;
  void *__src;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x24BDAC8D0];
  llvm::VectorType::get(*(uint64_t ***)(*(_QWORD *)a2 + 24), (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a4 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a4 + 8) == 19) << 32)));
  llvm::Instruction::Instruction((uint64_t)this, v12, 63, (uint64_t)this - 64, 2, (uint64_t *)a6);
  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 9) = 0x400000000;
  if (*((_QWORD *)this - 8))
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v13 = *((_QWORD *)this - 7);
    if (v13)
      *(_QWORD *)(v13 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v16 = *((_QWORD *)a2 + 1);
  v15 = (_QWORD *)((char *)a2 + 8);
  v14 = v16;
  *((_QWORD *)this - 7) = v16;
  if (v16)
    *(_QWORD *)(v14 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v15;
  *v15 = (char *)this - 64;
  v17 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v18 = *((_QWORD *)this - 3);
    if (v18)
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this - 2);
  }
  *v17 = a3;
  if (a3)
  {
    v21 = *((_QWORD *)a3 + 1);
    v20 = (_QWORD *)((char *)a3 + 8);
    v19 = v21;
    *((_QWORD *)this - 3) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v20;
    *v20 = v17;
  }
  __src = v29;
  v28 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask((unsigned int *)a4, (unsigned int *)&__src);
  v22 = (int *)__src;
  v23 = (llvm::Type *)v28;
  v24 = (char *)__src + 4 * v28;
  *((_DWORD *)this + 18) = 0;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)this + 16, v22, v24);
  *((_QWORD *)this + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v22, v23, *(_BYTE **)this, v25);
  llvm::Value::setName(this, a5);
  if (__src != v29)
    free(__src);
  return this;
}

llvm::ShuffleVectorInst *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::BasicBlock *a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int *v25;
  llvm::Type *v26;
  _BYTE *v27;
  BOOL v28;
  void *__src;
  uint64_t v31;
  _QWORD v32[9];

  v32[8] = *MEMORY[0x24BDAC8D0];
  llvm::VectorType::get(*(uint64_t ***)(*(_QWORD *)a2 + 24), (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a4 + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a4 + 8) == 19) << 32)));
  *(_QWORD *)this = v12;
  *((_QWORD *)this + 1) = 0;
  v13 = *((_DWORD *)this + 5) & 0xC0000000 | 2;
  *((_DWORD *)this + 4) = 91;
  *((_DWORD *)this + 5) = v13;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList((uint64_t)a6 + 40, (uint64_t)this);
  v14 = *((_QWORD *)this - 8);
  v15 = *((_QWORD *)a6 + 5);
  *((_QWORD *)this + 4) = (char *)a6 + 40;
  *((_QWORD *)this + 3) = v15;
  *(_QWORD *)(v15 + 8) = (char *)this + 24;
  *((_QWORD *)a6 + 5) = (char *)this + 24;
  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 9) = 0x400000000;
  if (v14)
  {
    **((_QWORD **)this - 6) = *((_QWORD *)this - 7);
    v16 = *((_QWORD *)this - 7);
    if (v16)
      *(_QWORD *)(v16 + 16) = *((_QWORD *)this - 6);
  }
  *((_QWORD *)this - 8) = a2;
  v19 = *((_QWORD *)a2 + 1);
  v18 = (_QWORD *)((char *)a2 + 8);
  v17 = v19;
  *((_QWORD *)this - 7) = v19;
  if (v19)
    *(_QWORD *)(v17 + 16) = (char *)this - 56;
  *((_QWORD *)this - 6) = v18;
  *v18 = (char *)this - 64;
  v20 = (_QWORD *)((char *)this - 32);
  if (*((_QWORD *)this - 4))
  {
    **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
    v21 = *((_QWORD *)this - 3);
    if (v21)
      *(_QWORD *)(v21 + 16) = *((_QWORD *)this - 2);
  }
  *v20 = a3;
  if (a3)
  {
    v24 = *((_QWORD *)a3 + 1);
    v23 = (_QWORD *)((char *)a3 + 8);
    v22 = v24;
    *((_QWORD *)this - 3) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = (char *)this - 24;
    *((_QWORD *)this - 2) = v23;
    *v23 = v20;
  }
  __src = v32;
  v31 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask((unsigned int *)a4, (unsigned int *)&__src);
  v25 = (int *)__src;
  v26 = (llvm::Type *)v31;
  v27 = (char *)__src + 4 * v31;
  *((_DWORD *)this + 18) = 0;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)this + 16, v25, v27);
  *((_QWORD *)this + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(v25, v26, *(_BYTE **)this, v28);
  llvm::Value::setName(this, a5);
  if (__src != v32)
    free(__src);
  return this;
}

llvm::Value *llvm::ShuffleVectorInst::ShuffleVectorInst(llvm::Value *a1, _QWORD *a2, uint64_t a3, int *a4, llvm::Type *a5, const llvm::Twine *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;

  llvm::VectorType::get(*(uint64_t ***)(*a2 + 24), (llvm::Type *)(a5 | ((unint64_t)(*(_BYTE *)(*a2 + 8) == 19) << 32)));
  v15 = llvm::Instruction::Instruction((uint64_t)a1, v14, 63, (uint64_t)a1 - 64, 2, a7);
  *(_QWORD *)(v15 + 64) = (char *)a1 + 80;
  v16 = v15 + 64;
  *(_QWORD *)(v16 + 8) = 0x400000000;
  if (*((_QWORD *)a1 - 8))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v17 = *((_QWORD *)a1 - 7);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)a1 - 6);
  }
  *((_QWORD *)a1 - 8) = a2;
  v20 = a2[1];
  v19 = a2 + 1;
  v18 = v20;
  *((_QWORD *)a1 - 7) = v20;
  if (v20)
    *(_QWORD *)(v18 + 16) = (char *)a1 - 56;
  *((_QWORD *)a1 - 6) = v19;
  *v19 = (char *)a1 - 64;
  v21 = (_QWORD *)((char *)a1 - 32);
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v22 = *((_QWORD *)a1 - 3);
    if (v22)
      *(_QWORD *)(v22 + 16) = *((_QWORD *)a1 - 2);
  }
  *v21 = a3;
  if (a3)
  {
    v25 = *(_QWORD *)(a3 + 8);
    v24 = (_QWORD *)(a3 + 8);
    v23 = v25;
    *((_QWORD *)a1 - 3) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = (char *)a1 - 24;
    *((_QWORD *)a1 - 2) = v24;
    *v24 = v21;
  }
  *((_DWORD *)a1 + 18) = 0;
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>((unsigned int *)v16, a4, &a4[(_QWORD)a5]);
  *((_QWORD *)a1 + 12) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(a4, a5, *(_BYTE **)a1, v26);
  llvm::Value::setName(a1, a6);
  return a1;
}

unsigned int *llvm::ShuffleVectorInst::getShuffleMask(unsigned int *this, unsigned int *a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  llvm::Type *v10;
  uint64_t AggregateElement;
  _QWORD *v12;
  _QWORD *v13;
  int i;

  v3 = *(unsigned int *)(*(_QWORD *)this + 32);
  if (*((_BYTE *)this + 16) == 13)
  {
    v4 = a2[2];
    if ((_DWORD)v4 != (_DWORD)v3)
    {
      if (v4 <= v3)
        return llvm::SmallVectorImpl<int>::append(a2, v3 - v4, 0);
      else
        a2[2] = v3;
    }
  }
  else
  {
    v5 = (unsigned __int8 *)this;
    v6 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    if (a2[3] < v3)
      this = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 4, v3, 4);
    if (v6 == 19)
    {
      if (v5[16] - 11 >= 2)
        v7 = 0;
      else
        v7 = -1;
      for (i = v7; (_DWORD)v3; LODWORD(v3) = v3 - 1)
        this = (unsigned int *)llvm::SmallVectorImpl<int>::emplace_back<int &>(a2, &i);
    }
    else if ((v5[16] & 0xFE) == 0xE)
    {
      if ((_DWORD)v3)
      {
        v8 = 0;
        do
        {
          llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v5);
          this = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v9);
          ++v8;
        }
        while ((_DWORD)v3 != v8);
      }
    }
    else if ((_DWORD)v3)
    {
      v10 = 0;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v5, v10);
        if (*(unsigned __int8 *)(AggregateElement + 16) - 11 >= 2)
        {
          v13 = (_QWORD *)(AggregateElement + 24);
          if (*(_DWORD *)(AggregateElement + 32) >= 0x41u)
            v13 = (_QWORD *)*v13;
          v12 = (_QWORD *)*v13;
        }
        else
        {
          LODWORD(v12) = -1;
        }
        this = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, (int)v12);
        v10 = (llvm::Type *)((_DWORD)v10 + 1);
      }
      while ((_DWORD)v3 != (_DWORD)v10);
    }
  }
  return this;
}

BOOL llvm::ShuffleVectorInst::isValidOperands(uint64_t *a1, _QWORD *a2, int *__s2, uint64_t a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  int *i;

  v4 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) != 0x12 || v4 != *a2)
    return 0;
  if (a4)
  {
    v6 = 2 * *(_DWORD *)(v4 + 32);
    v7 = 4 * a4;
    for (i = __s2; *i == -1 || *i < v6; ++i)
    {
      v7 -= 4;
      if (!v7)
        return *(_DWORD *)(*a1 + 8) != 19
            || (*__s2 + 1) <= 1 && (!a4 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
    }
    return 0;
  }
  return *(_DWORD *)(*a1 + 8) != 19
      || (*__s2 + 1) <= 1 && (!a4 || !memcmp(__s2 + 1, __s2, 4 * a4 - 4));
}

uint64_t llvm::SmallVectorImpl<int>::emplace_back<int &>(unsigned int *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = a1[2];
  if (v3 >= a1[3])
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, *a2);
    v4 = *(_QWORD *)a1;
    v5 = a1[2];
  }
  else
  {
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v3) = *a2;
    v5 = a1[2] + 1;
    a1[2] = v5;
  }
  return v4 + 4 * v5 - 4;
}

uint64_t llvm::ShuffleVectorInst::convertShuffleMaskForBitcode(int *a1, llvm::Type *a2, _BYTE *a3, BOOL a4)
{
  llvm::UndefValue *v5;
  llvm::UndefValue *v6;
  llvm::Type *v7;
  uint64_t v9;
  llvm::Type *v10;
  uint64_t v11;
  uint64_t ****v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v5 = (llvm::UndefValue *)(**(_QWORD **)a3 + 1992);
  if (a3[8] == 19)
  {
    llvm::VectorType::get((uint64_t **)(**(_QWORD **)a3 + 1992), (llvm::Type *)(a2 | 0x100000000));
    if (*a1)
      return llvm::UndefValue::get(v6, v7);
    else
      return llvm::Constant::getNullValue(v6, v7);
  }
  else
  {
    v14 = v16;
    v15 = 0x1000000000;
    if (a2)
    {
      v9 = 4 * (_QWORD)a2;
      do
      {
        v10 = (llvm::Type *)*a1;
        if ((_DWORD)v10 == -1)
          v11 = llvm::UndefValue::get(v5, v10);
        else
          v11 = llvm::ConstantInt::get(v5, v10, 0, a4);
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v14, v11);
        ++a1;
        v9 -= 4;
      }
      while (v9);
      v12 = (uint64_t ****)v14;
      a2 = (llvm::Type *)v15;
    }
    else
    {
      v12 = (uint64_t ****)v16;
    }
    v13 = llvm::ConstantVector::get(v12, a2);
    if (v14 != v16)
      free(v14);
    return (uint64_t)v13;
  }
}

void llvm::InsertValueInst::init(unsigned int *a1, uint64_t a2, uint64_t a3, _BYTE *__src, uint64_t a5, const llvm::Twine *a6)
{
  unsigned int *v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 - 16;
  if (*((_QWORD *)a1 - 8))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v9 = *((_QWORD *)a1 - 7);
    if (v9)
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a1 - 6);
  }
  *(_QWORD *)v8 = a2;
  if (a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v10 = (unsigned int **)(a2 + 8);
    v11 = v12;
    *((_QWORD *)a1 - 7) = v12;
    if (v12)
      *(_QWORD *)(v11 + 16) = a1 - 14;
    *((_QWORD *)a1 - 6) = v10;
    *v10 = v8;
  }
  v13 = a1 - 8;
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v14 = *((_QWORD *)a1 - 3);
    if (v14)
      *(_QWORD *)(v14 + 16) = *((_QWORD *)a1 - 2);
  }
  *(_QWORD *)v13 = a3;
  if (a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v15 = (unsigned int **)(a3 + 8);
    v16 = v17;
    *((_QWORD *)a1 - 3) = v17;
    if (v17)
      *(_QWORD *)(v16 + 16) = a1 - 6;
    *((_QWORD *)a1 - 2) = v15;
    *v15 = v13;
  }
  llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(a1 + 16, __src, &__src[4 * a5]);
  llvm::Value::setName((llvm::Value *)a1, a6);
}

uint64_t llvm::ExtractValueInst::getIndexedType(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  if (a3)
  {
    v3 = 4 * a3;
    while (1)
    {
      v4 = *a2;
      v5 = *(unsigned __int8 *)(a1 + 8);
      if (a1 && v5 == 17)
      {
        if (*(_QWORD *)(a1 + 32) <= v4)
          return 0;
        v6 = (uint64_t *)(a1 + 24);
      }
      else
      {
        v7 = 0;
        if (!a1 || v5 != 16)
          return v7;
        if (v4 >= *(_DWORD *)(a1 + 12))
          return 0;
        v6 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8 * v4);
      }
      a1 = *v6;
      ++a2;
      v7 = *v6;
      v3 -= 4;
      if (!v3)
        return v7;
    }
  }
  return a1;
}

llvm::UnaryInstruction *llvm::UnaryOperator::UnaryOperator(llvm::UnaryInstruction *a1, char a2, llvm::Value *a3, llvm::Type *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v9 = (_QWORD *)(llvm::UnaryInstruction::UnaryInstruction(a1, a4, a2, a3, a6) - 32);
  if (*v9)
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v10 = *((_QWORD *)a1 - 3);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)a1 - 2);
  }
  *v9 = a3;
  if (a3)
  {
    v13 = *((_QWORD *)a3 + 1);
    v12 = (_QWORD *)((char *)a3 + 8);
    v11 = v13;
    *((_QWORD *)a1 - 3) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = (char *)a1 - 24;
    *((_QWORD *)a1 - 2) = v12;
    *v12 = v9;
  }
  llvm::Value::setName(a1, a5);
  return a1;
}

llvm::UnaryInstruction *llvm::UnaryOperator::Create(char a1, llvm::Value *a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  _DWORD *v8;

  v8 = operator new(0x60uLL);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 8;
  return llvm::UnaryOperator::UnaryOperator((llvm::UnaryInstruction *)(v8 + 8), a1, a2, *(llvm::Type **)a2, a3, a4);
}

char *llvm::UnaryOperator::Create(char a1, llvm::Value *a2, const llvm::Twine *a3, uint64_t a4)
{
  _DWORD *v8;
  char *v9;
  uint64_t v10;

  v8 = operator new(0x60uLL);
  v9 = (char *)(v8 + 8);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 8;
  llvm::UnaryOperator::UnaryOperator((llvm::UnaryInstruction *)(v8 + 8), a1, a2, *(llvm::Type **)a2, a3, 0);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a4 + 40, (uint64_t)(v8 + 8));
  v10 = *(_QWORD *)(a4 + 40);
  *((_QWORD *)v8 + 7) = v10;
  *((_QWORD *)v8 + 8) = a4 + 40;
  v8 += 14;
  *(_QWORD *)(v10 + 8) = v8;
  *(_QWORD *)(a4 + 40) = v8;
  return v9;
}

llvm::Value *llvm::BinaryOperator::BinaryOperator(llvm::Value *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::Twine *a6, uint64_t *a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v11 = (_QWORD *)((char *)a1 - 64);
  if (*(_QWORD *)(llvm::Instruction::Instruction((uint64_t)a1, a5, a2, (uint64_t)a1 - 64, 2, a7) - 64))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v12 = *((_QWORD *)a1 - 7);
    if (v12)
      *(_QWORD *)(v12 + 16) = *((_QWORD *)a1 - 6);
  }
  *v11 = a3;
  if (a3)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v14 = (_QWORD *)(a3 + 8);
    v13 = v15;
    *((_QWORD *)a1 - 7) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = (char *)a1 - 56;
    *((_QWORD *)a1 - 6) = v14;
    *v14 = v11;
  }
  v16 = (_QWORD *)((char *)a1 - 32);
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v17 = *((_QWORD *)a1 - 3);
    if (v17)
      *(_QWORD *)(v17 + 16) = *((_QWORD *)a1 - 2);
  }
  *v16 = a4;
  if (a4)
  {
    v20 = *(_QWORD *)(a4 + 8);
    v19 = (_QWORD *)(a4 + 8);
    v18 = v20;
    *((_QWORD *)a1 - 3) = v20;
    if (v20)
      *(_QWORD *)(v18 + 16) = (char *)a1 - 24;
    *((_QWORD *)a1 - 2) = v19;
    *v19 = v16;
  }
  llvm::Value::setName(a1, a6);
  return a1;
}

llvm::Value *llvm::BinaryOperator::Create(char a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4, uint64_t *a5)
{
  _DWORD *v10;

  v10 = operator new(0x80uLL);
  v10[21] = v10[21] & 0x38000000 | 2;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 16;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = v10 + 16;
  return llvm::BinaryOperator::BinaryOperator((llvm::Value *)(v10 + 16), a1, (uint64_t)a2, a3, *a2, a4, a5);
}

char *llvm::BinaryOperator::Create(char a1, uint64_t *a2, uint64_t a3, const llvm::Twine *a4, uint64_t a5)
{
  _DWORD *v10;
  char *v11;
  uint64_t v12;

  v10 = operator new(0x80uLL);
  v10[21] = v10[21] & 0x38000000 | 2;
  v11 = (char *)(v10 + 16);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 16;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = v10 + 16;
  llvm::BinaryOperator::BinaryOperator((llvm::Value *)(v10 + 16), a1, (uint64_t)a2, a3, *a2, a4, 0);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a5 + 40, (uint64_t)(v10 + 16));
  v12 = *(_QWORD *)(a5 + 40);
  *((_QWORD *)v10 + 11) = v12;
  *((_QWORD *)v10 + 12) = a5 + 40;
  v10 += 22;
  *(_QWORD *)(v12 + 8) = v10;
  *(_QWORD *)(a5 + 40) = v10;
  return v11;
}

uint64_t llvm::CastInst::isEliminableCastPair(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v5;

  v5 = a1 == 49;
  if (a2 != 49)
    v5 = 0;
  if (a1 == 49 && ((*(_DWORD *)(a3 + 8) & 0xFE) == 18) != ((*(_DWORD *)(a4 + 8) & 0xFE) == 18))
  {
    if (!v5)
      return 0;
LABEL_9:
    __asm { BR              X9 }
  }
  if (a2 != 49 || v5 | ((*(_DWORD *)(a4 + 8) & 0xFE) != 18) ^ ((*(_DWORD *)(a5 + 8) & 0xFE) == 18))
    goto LABEL_9;
  return 0;
}

void sub_24A9EF78C()
{
  JUMPOUT(0x24A9EF778);
}

void sub_24A9EF7D8()
{
  JUMPOUT(0x24A9EF778);
}

void llvm::CastInst::Create(int a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

llvm::Value *sub_24A9EF880()
{
  const llvm::Twine *v0;
  llvm::Instruction *v1;
  llvm::Value *v2;
  llvm::Type *v3;
  _DWORD *v4;
  llvm::Value *v5;

  v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  v5 = (llvm::Value *)(v4 + 8);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 8;
  llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)(v4 + 8), v3, 38, v2, v1);
  llvm::Value::setName(v5, v0);
  return v5;
}

llvm::Value *sub_24A9EFB90()
{
  const llvm::Twine *v0;
  llvm::BasicBlock *v1;
  llvm::Value *v2;
  llvm::Type *v3;
  _DWORD *v4;
  llvm::Value *v5;

  v4 = operator new(0x60uLL);
  v4[13] = v4[13] & 0x38000000 | 1;
  v5 = (llvm::Value *)(v4 + 8);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 8;
  llvm::UnaryInstruction::UnaryInstruction((llvm::UnaryInstruction *)(v4 + 8), v3, 38, v2, v1);
  llvm::Value::setName(v5, v0);
  return v5;
}

void llvm::CastInst::CreatePointerCast(llvm::CastInst *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v5;

  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8);
  else
    v5 = *((_DWORD *)a2 + 2);
  if (v5 == 13)
    llvm::CastInst::Create(47);
  else
    llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast((uint64_t)this, (uint64_t)a2);
}

void llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;

  v2 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  if ((v3 ^ v2) < 0x100)
    llvm::CastInst::Create(49);
  else
    llvm::CastInst::Create(50);
}

void llvm::CastInst::CreateIntegerCast(llvm::CastInst *this, llvm::Type ***a2, llvm::Type *a3, BOOL a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  int v6;
  uint64_t v8;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v10;
  unsigned int v11;
  int v12;
  int v13;

  v6 = (int)a3;
  v8 = *(_QWORD *)this;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v10 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v10 = *a2[2];
  v11 = llvm::Type::getPrimitiveSizeInBits(v10);
  if (v6)
    v12 = 40;
  else
    v12 = 39;
  if (PrimitiveSizeInBits > v11)
    v12 = 38;
  if (PrimitiveSizeInBits == v11)
    v13 = 49;
  else
    v13 = v12;
  llvm::CastInst::Create(v13);
}

uint64_t llvm::CastInst::castIsValid(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  int v7;
  int v8;
  int v10;
  int v11;
  uint64_t result;
  llvm::Type *v15;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = v3;
  if (v3 == 7 || v3 == 14)
    return 0;
  v7 = *(_DWORD *)(a3 + 8);
  v8 = v7;
  if (v7 == 7 || v7 == 14)
    return 0;
  v10 = v3 & 0xFE;
  if (v10 == 16)
    return 0;
  v11 = v7 & 0xFE;
  if (v11 == 16)
    return 0;
  v15 = (llvm::Type *)a2;
  if (v10 == 18)
    v15 = **(llvm::Type ***)(a2 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v15);
  v17 = (llvm::Type *)a3;
  if (v11 == 18)
    v17 = **(llvm::Type ***)(a3 + 16);
  v18 = llvm::Type::getPrimitiveSizeInBits(v17);
  if (v10 == 18)
    v19 = *(unsigned int *)(a2 + 32) | ((unint64_t)(v3 == 19) << 32);
  else
    v19 = 0;
  if (v11 == 18)
    v20 = *(unsigned int *)(a3 + 32) | ((unint64_t)(v7 == 19) << 32);
  else
    v20 = 0;
  switch(a1)
  {
    case '&':
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      return (_DWORD)v19 == (_DWORD)v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits > v18;
    case '\'':
    case '(':
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        LOBYTE(v7) = *(_BYTE *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 13)
        return 0;
      return (_DWORD)v19 == (_DWORD)v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits < v18;
    case ')':
    case '*':
      if (v10 == 18)
        v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
        return 0;
      if (v11 == 18)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
      v21 = v8 == 13 && (_DWORD)v19 == (_DWORD)v20;
      return v21 && HIDWORD(v19) == HIDWORD(v20);
    case '+':
    case ',':
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 < 4u || v7 == 5)
      {
        if ((_DWORD)v19 != (_DWORD)v20)
          return 0;
        return HIDWORD(v19) == HIDWORD(v20);
      }
      result = 0;
      if ((v7 & 0xFD) == 4 && (_DWORD)v19 == (_DWORD)v20)
        return HIDWORD(v19) == HIDWORD(v20);
      return result;
    case '-':
      if (v10 == 18)
        v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4)
        return 0;
      return (_DWORD)v19 == (_DWORD)v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits > v18;
    case '.':
      if (v10 == 18)
        v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 >= 4u && v3 != 5 && (v3 & 0xFD) != 4)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4)
        return 0;
      return (_DWORD)v19 == (_DWORD)v20 && HIDWORD(v19) == HIDWORD(v20) && PrimitiveSizeInBits < v18;
    case '/':
      result = 0;
      if (v19 != v20)
        return result;
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 != 15)
        return 0;
      if (v11 == 18)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
      return v8 == 13;
    case '0':
      result = 0;
      if (v19 != v20)
        return result;
      if (v10 == 18)
        LOBYTE(v3) = *(_BYTE *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 != 13)
        return 0;
      if (v11 == 18)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
      return v8 == 15;
    case '1':
      v27 = a2;
      if (v10 == 18)
      {
        v27 = **(_QWORD **)(a2 + 16);
        v4 = *(unsigned __int8 *)(v27 + 8);
      }
      if (v4 != 15)
        v27 = 0;
      v28 = a3;
      if (v11 == 18)
      {
        v28 = **(_QWORD **)(a3 + 16);
        v8 = *(unsigned __int8 *)(v28 + 8);
      }
      if (v8 != 15)
        v28 = 0;
      if ((v27 == 0) == (v28 != 0))
        return 0;
      if (v27)
      {
        if ((*(_DWORD *)(v28 + 8) ^ *(_DWORD *)(v27 + 8)) > 0xFF)
          return 0;
        if (v10 == 18 && v11 == 18)
        {
          v21 = (_DWORD)v19 == (_DWORD)v20;
          return v21 && HIDWORD(v19) == HIDWORD(v20);
        }
        else if (v10 == 18)
        {
          return (_DWORD)v19 == 1 && HIDWORD(v19) == 0;
        }
        else
        {
          if (v11 != 18)
            return 1;
          return (_DWORD)v20 == 1 && HIDWORD(v20) == 0;
        }
      }
      else
      {
        v29 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a2);
        v31 = v30;
        if (v29 != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3))
          return 0;
        return v31 == v32;
      }
    case '2':
      if (v10 == 18)
        v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
      if (v3 != 15)
        return 0;
      if (v11 == 18)
        v7 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
      if (v7 != 15)
        return 0;
      v21 = (v7 ^ v3) > 0xFF && (_DWORD)v19 == (_DWORD)v20;
      return v21 && HIDWORD(v19) == HIDWORD(v20);
    default:
      return 0;
  }
}

_WORD *llvm::CmpInst::CmpInst(_WORD *a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7, uint64_t *a8, uint64_t a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v14 = a1 - 32;
  if (*(_QWORD *)(llvm::Instruction::Instruction((uint64_t)a1, a2, a3, (uint64_t)(a1 - 32), 2, a8) - 64))
  {
    **((_QWORD **)a1 - 6) = *((_QWORD *)a1 - 7);
    v15 = *((_QWORD *)a1 - 7);
    if (v15)
      *(_QWORD *)(v15 + 16) = *((_QWORD *)a1 - 6);
  }
  *v14 = a5;
  if (a5)
  {
    v18 = *(_QWORD *)(a5 + 8);
    v17 = (_QWORD *)(a5 + 8);
    v16 = v18;
    *((_QWORD *)a1 - 7) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = a1 - 28;
    *((_QWORD *)a1 - 6) = v17;
    *v17 = v14;
  }
  v19 = a1 - 16;
  if (*((_QWORD *)a1 - 4))
  {
    **((_QWORD **)a1 - 2) = *((_QWORD *)a1 - 3);
    v20 = *((_QWORD *)a1 - 3);
    if (v20)
      *(_QWORD *)(v20 + 16) = *((_QWORD *)a1 - 2);
  }
  *v19 = a6;
  if (a6)
  {
    v23 = *(_QWORD *)(a6 + 8);
    v22 = (_QWORD *)(a6 + 8);
    v21 = v23;
    *((_QWORD *)a1 - 3) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = a1 - 12;
    *((_QWORD *)a1 - 2) = v22;
    *v22 = v19;
  }
  a1[9] = a1[9] & 0xFFC0 | a4;
  llvm::Value::setName((llvm::Value *)a1, a7);
  if (a9)
    llvm::Instruction::copyIRFlags((uint64_t)a1, a9, 1);
  return a1;
}

uint64_t llvm::CmpInst::CmpInst(uint64_t a1, uint64_t a2, char a3, __int16 a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7, uint64_t a8)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 2;
  v14 = a8 + 40;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v15 = (_QWORD *)(a1 + 24);
  llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(a8 + 40, a1);
  v16 = (_QWORD *)(a1 - 64);
  v17 = *(_QWORD *)(a1 - 64);
  v18 = *(_QWORD *)(a8 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  *v15 = v18;
  *(_QWORD *)(v18 + 8) = v15;
  *(_QWORD *)(a8 + 40) = v15;
  if (v17)
  {
    **(_QWORD **)(a1 - 48) = *(_QWORD *)(a1 - 56);
    v19 = *(_QWORD *)(a1 - 56);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 - 48);
  }
  *v16 = a5;
  if (a5)
  {
    v22 = *(_QWORD *)(a5 + 8);
    v21 = (_QWORD *)(a5 + 8);
    v20 = v22;
    *(_QWORD *)(a1 - 56) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = a1 - 56;
    *(_QWORD *)(a1 - 48) = v21;
    *v21 = v16;
  }
  v23 = (_QWORD *)(a1 - 32);
  if (*(_QWORD *)(a1 - 32))
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v24 = *(_QWORD *)(a1 - 24);
    if (v24)
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v23 = a6;
  if (a6)
  {
    v27 = *(_QWORD *)(a6 + 8);
    v26 = (_QWORD *)(a6 + 8);
    v25 = v27;
    *(_QWORD *)(a1 - 24) = v27;
    if (v27)
      *(_QWORD *)(v25 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v26;
    *v26 = v23;
  }
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFC0 | a4;
  llvm::Value::setName((llvm::Value *)a1, a7);
  return a1;
}

uint64_t llvm::CmpInst::Create(int a1, __int16 a2, llvm::CmpInst **a3, uint64_t a4, const llvm::Twine *a5, uint64_t a6)
{
  _DWORD *v12;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  char v16;

  v12 = operator new(0x80uLL);
  v12[21] = v12[21] & 0x38000000 | 2;
  v13 = (uint64_t)(v12 + 16);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = v12 + 16;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = v12 + 16;
  llvm::CmpInst::makeCmpResultType(*a3, v14);
  if (a1 == 53)
    v16 = 53;
  else
    v16 = 54;
  return llvm::CmpInst::CmpInst(v13, v15, v16, a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t llvm::CmpInst::getInversePredicate(int a1)
{
  return dword_24AA49298[a1];
}

const char *llvm::CmpInst::getPredicateName(unsigned int a1)
{
  if (a1 > 0x29)
    return "unknown";
  else
    return off_251C35D88[a1];
}

uint64_t llvm::CmpInst::getSwappedPredicate(int a1)
{
  return dword_24AA49490[a1];
}

void llvm::ICmpInst::compare(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

BOOL sub_24A9F08B4(uint64_t a1, const void **a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 > 0x40)
    return memcmp(*(const void **)a1, *a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    return *(_QWORD *)a1 == (_QWORD)*a2;
}

void llvm::FCmpInst::compare(llvm::APFloat *a1, const llvm::APFloat *a2, int a3)
{
  llvm::APFloat::compare(a1, a2);
  __asm { BR              X11 }
}

BOOL sub_24A9F09D0@<W0>(int a1@<W8>)
{
  return (a1 - 1) < 2;
}

_QWORD *llvm::SwitchInst::init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *result;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  *(_DWORD *)(a1 + 60) = a4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 2;
  result = operator new(32 * a4);
  *(_QWORD *)(a1 - 8) = result;
  if (a4)
  {
    v9 = result;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = a1;
      v9 += 4;
    }
    while (v9 != &result[4 * a4]);
  }
  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = result;
  else
    v11 = (_QWORD *)(a1 - 32 * (v10 & 0x7FFFFFF));
  if (*v11)
  {
    *(_QWORD *)v11[2] = v11[1];
    v12 = v11[1];
    if (v12)
      *(_QWORD *)(v12 + 16) = v11[2];
  }
  *v11 = a2;
  if (a2)
  {
    v15 = *(_QWORD *)(a2 + 8);
    v14 = (_QWORD *)(a2 + 8);
    v13 = v15;
    v11[1] = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = v11 + 1;
    v11[2] = v14;
    *v14 = v11;
  }
  v16 = *(_DWORD *)(a1 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(_QWORD *)(a1 - 8);
  else
    v17 = a1 - 32 * (v16 & 0x7FFFFFF);
  v18 = (_QWORD *)(v17 + 32);
  if (*(_QWORD *)(v17 + 32))
  {
    **(_QWORD **)(v17 + 48) = *(_QWORD *)(v17 + 40);
    v19 = *(_QWORD *)(v17 + 40);
    if (v19)
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(v17 + 48);
  }
  *v18 = a3;
  if (a3)
  {
    v22 = *(_QWORD *)(a3 + 8);
    v21 = (_QWORD *)(a3 + 8);
    v20 = v22;
    *(_QWORD *)(v17 + 40) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v17 + 40;
    *(_QWORD *)(v17 + 48) = v21;
    *v21 = v18;
  }
  return result;
}

llvm::SwitchInst *llvm::SwitchInst::SwitchInst(llvm::SwitchInst *this, llvm::Value *a2, llvm::BasicBlock *a3, int a4, llvm::Instruction *a5)
{
  uint64_t v9;

  v9 = llvm::Instruction::Instruction((uint64_t)this, ***(_QWORD ***)a2 + 1608, 3, 0, 0, (uint64_t *)a5);
  llvm::SwitchInst::init(v9, (uint64_t)a2, (uint64_t)a3, 2 * a4 + 2);
  return this;
}

uint64_t llvm::SwitchInst::addCase(llvm::User *this, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  llvm::User *v12;
  uint64_t v13;

  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  v8 = (v6 & 0x7FFFFFF) + 2;
  v9 = v6;
  if (v8 > *((_DWORD *)this + 15))
  {
    *((_DWORD *)this + 15) = 3 * v7;
    llvm::User::growHungoffUses(this, 3 * v7, 0);
    v9 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v9 & 0xF8000000 | v8 & 0x7FFFFFF;
  v12 = this;
  v13 = ((v6 >> 1) & 0x3FFFFFF) - 1;
  llvm::SwitchInst::CaseHandle::setValue(&v12, a2);
  if (v13 == 4294967294)
    v10 = 0;
  else
    v10 = v13 + 1;
  return llvm::SwitchInst::setSuccessor((uint64_t)v12, v10, a3);
}

_QWORD *llvm::IndirectBrInst::init(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  BOOL v6;
  _QWORD *result;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = (a3 + 1);
  v6 = a3 == -1;
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xF8000000 | 1;
  result = operator new(32 * v5);
  *(_QWORD *)(a1 - 8) = result;
  if (!v6)
  {
    v8 = result;
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = a1;
      v8 += 4;
    }
    while (v8 != &result[4 * v5]);
  }
  v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = result;
  else
    v10 = (_QWORD *)(a1 - 32 * (v9 & 0x7FFFFFF));
  if (*v10)
  {
    *(_QWORD *)v10[2] = v10[1];
    v11 = v10[1];
    if (v11)
      *(_QWORD *)(v11 + 16) = v10[2];
  }
  *v10 = a2;
  if (a2)
  {
    v14 = *(_QWORD *)(a2 + 8);
    v13 = (_QWORD *)(a2 + 8);
    v12 = v14;
    v10[1] = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v10 + 1;
    v10[2] = v13;
    *v13 = v10;
  }
  return result;
}

llvm::IndirectBrInst *llvm::IndirectBrInst::IndirectBrInst(llvm::IndirectBrInst *this, llvm::Value *a2, int a3, llvm::Instruction *a4)
{
  uint64_t v7;

  v7 = llvm::Instruction::Instruction((uint64_t)this, ***(_QWORD ***)a2 + 1608, 4, 0, 0, (uint64_t *)a4);
  llvm::IndirectBrInst::init(v7, (uint64_t)a2, a3);
  return this;
}

void llvm::IndirectBrInst::addDestination(llvm::IndirectBrInst *this, llvm::BasicBlock *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char *v14;

  v4 = *((_DWORD *)this + 5);
  v5 = v4 & 0x7FFFFFF;
  v6 = v4 + 1;
  if ((v4 & 0x7FFFFFFu) >= *((_DWORD *)this + 15))
  {
    v7 = 2 * (v4 & 0x7FFFFFF);
    *((_DWORD *)this + 15) = v7;
    llvm::User::growHungoffUses(this, v7, 0);
    v4 = *((_DWORD *)this + 5);
  }
  *((_DWORD *)this + 5) = v4 & 0xF8000000 | v6 & 0x7FFFFFF;
  if ((v4 & 0x40000000) != 0)
    v8 = (char *)*((_QWORD *)this - 1);
  else
    v8 = (char *)this - 32 * (v6 & 0x7FFFFFF);
  v9 = &v8[32 * v5];
  if (*(_QWORD *)v9)
  {
    **((_QWORD **)v9 + 2) = *((_QWORD *)v9 + 1);
    v10 = *((_QWORD *)v9 + 1);
    if (v10)
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  }
  *(_QWORD *)v9 = a2;
  if (a2)
  {
    v13 = *((_QWORD *)a2 + 1);
    v12 = (char **)((char *)a2 + 8);
    v11 = v13;
    v14 = &v8[32 * v5];
    *((_QWORD *)v14 + 1) = v13;
    if (v13)
      *(_QWORD *)(v11 + 16) = v14 + 8;
    *((_QWORD *)v14 + 2) = v12;
    *v12 = v9;
  }
}

llvm::FreezeInst *llvm::FreezeInst::FreezeInst(llvm::FreezeInst *this, llvm::Type **a2, const llvm::Twine *a3, llvm::Instruction *a4)
{
  llvm::Value *v6;

  v6 = (llvm::Value *)llvm::UnaryInstruction::UnaryInstruction(this, *a2, 67, (llvm::Value *)a2, a4);
  llvm::Value::setName(v6, a3);
  return this;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Use *,llvm::Use *,llvm::Use *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *result;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a2 == a3)
    return a2;
  result = a3;
  v5 = (_QWORD **)(a4 + 8);
  do
  {
    v6 = v5 - 1;
    v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5)
        (*v5)[2] = v5[1];
    }
    *v6 = v7;
    if (v7)
    {
      v10 = *(_QWORD **)(v7 + 8);
      v8 = (_QWORD *)(v7 + 8);
      v9 = v10;
      *v5 = v10;
      if (v10)
        v9[2] = v5;
      v5[1] = v8;
      *v8 = v6;
    }
    a2 += 4;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

unsigned int *llvm::SmallVectorImpl<int>::append(unsigned int *result, uint64_t a2, int a3)
{
  unsigned int *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + a2, 4);
    v6 = v5[2];
    if (!a2)
      goto LABEL_6;
  }
  else if (!a2)
  {
    goto LABEL_6;
  }
  v7 = (_DWORD *)(*(_QWORD *)v5 + 4 * v6);
  v8 = a2;
  do
  {
    *v7++ = a3;
    --v8;
  }
  while (v8);
  LODWORD(v6) = v5[2];
LABEL_6:
  v5[2] = v6 + a2;
  return result;
}

uint64_t _GLOBAL__sub_I_Instructions_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&DisableI2pP2iOpt, 0, 0);
  byte_2579643E0 = 0;
  qword_2579643E8 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_2579643F0 = 0;
  DisableI2pP2iOpt = (uint64_t)off_251C123A8;
  qword_2579643F8 = (uint64_t)&off_251C12520;
  qword_257964400 = (uint64_t)&off_251C12410;
  qword_257964418 = (uint64_t)&qword_257964400;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"disable-i2p-p2i-opt", 0x13uLL);
  byte_2579643E0 = 0;
  word_2579643F0 = 256;
  qword_257964380 = (uint64_t)"Disables inttoptr/ptrtoint roundtrip optimization";
  unk_257964388 = 49;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&DisableI2pP2iOpt);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &DisableI2pP2iOpt, &dword_24A800000);
}

uint64_t llvm::DbgVariableIntrinsic::getVariableLocationOp(llvm::DbgVariableIntrinsic *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24);
  if (*(_BYTE *)v2 == 33)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * a2);
  }
  else if ((llvm::MDNode::classof(*(_BYTE **)(*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) + 24)) & 1) != 0)
  {
    return 0;
  }
  return *(_QWORD *)(v2 + 128);
}

uint64_t llvm::Intrinsic::lookupLLVMIntrinsicByName(const char **a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  size_t v4;
  _BYTE *v5;
  const char **v6;
  const char **v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  const char **v15;
  unint64_t v16;
  const char **v17;
  const char *v18;
  const char **v19;
  const char **v20;
  const char **v21;
  const char *v22;
  int v23;
  unint64_t v24;
  const char **v25;
  const char **v26;
  const char *v27;
  const char **v28;
  const char *v29;
  size_t v30;
  const char **v33;
  const char **v36;
  unint64_t v37;

  v4 = a4;
  v5 = a3;
  v6 = a1;
  v7 = &a1[a2];
  v33 = v7;
  if (a4 < 5)
  {
    v36 = a1;
    goto LABEL_38;
  }
  v8 = 8 * a2;
  v36 = a1;
  if (8 * a2 < 1)
    goto LABEL_38;
  v9 = 4;
  v6 = a1;
  v7 = &a1[a2];
  do
  {
    if (v4 <= v9 + 1 || (v10 = memchr(&v5[v9 + 1], 46, v4 - (v9 + 1))) == 0 || (v11 = v10 - v5, v10 - v5 == -1))
      v11 = v4;
    v36 = v6;
    v37 = v11;
    if (v7 == v6)
    {
      v6 = v7;
      goto LABEL_34;
    }
    v12 = v8 >> 3;
    v13 = &v5[v9];
    v14 = v11 - v9;
    v15 = v7;
    while (1)
    {
      v16 = v12 >> 1;
      v17 = &v6[v12 >> 1];
      v18 = &(*v17)[v9];
      if ((strncmp(v18, &v5[v9], v14) & 0x80000000) == 0)
        break;
      v6 = v17 + 1;
      v16 = v12 + ~v16;
LABEL_14:
      v12 = v16;
      v7 = v6;
      if (!v16)
        goto LABEL_34;
    }
    if (strncmp(&v5[v9], v18, v14) < 0)
    {
      v15 = &v6[v12 >> 1];
      goto LABEL_14;
    }
    v19 = &v6[v12 >> 1];
    if (v12 >= 2)
    {
      v19 = v6;
      do
      {
        v20 = &v19[v16 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v23 = strncmp(&v22[v9], v13, v14);
        if (v23 >= 0)
          v16 >>= 1;
        else
          v16 += ~(v16 >> 1);
        if (v23 < 0)
          v19 = v21;
      }
      while (v16);
    }
    v7 = v17 + 1;
    if (v15 == v17 + 1)
    {
      v6 = v19;
      v7 = v15;
    }
    else
    {
      v24 = v15 - (v17 + 1);
      do
      {
        v25 = &v7[v24 >> 1];
        v27 = *v25;
        v26 = v25 + 1;
        if (strncmp(v13, &v27[v9], v14) < 0)
        {
          v24 >>= 1;
        }
        else
        {
          v7 = v26;
          v24 += ~(v24 >> 1);
        }
      }
      while (v24);
      v6 = v19;
    }
    v5 = a3;
LABEL_34:
    v4 = a4;
    v9 = v37;
    if (v37 >= a4)
      break;
    v8 = (char *)v7 - (char *)v6;
  }
  while ((char *)v7 - (char *)v6 > 0);
LABEL_38:
  if ((char *)v7 - (char *)v6 <= 0)
    v28 = v36;
  else
    v28 = v6;
  if (v28 != v33
    && ((v29 = *v28) == 0 ? (v30 = 0) : (v30 = strlen(*v28)),
        v4 == v30 && (!v4 || !memcmp(v5, v29, v4)) || v4 >= v30 && (!v30 || !memcmp(v5, v29, v30)) && v5[v30] == 46))
  {
    return (unint64_t)((char *)v28 - (char *)a1) >> 3;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t llvm::ConstrainedFPIntrinsic::getRoundingMode(llvm::ConstrainedFPIntrinsic *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  __int16 v7;

  v2 = llvm::CallBase::arg_end(this);
  v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v4 = *(_QWORD *)&v3[32 * ((unint64_t)(v2 - (_QWORD)v3) >> 5) - 64];
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 23;
  else
    v5 = 0;
  if (!v5)
  {
LABEL_8:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
  {
    if (!*(_BYTE *)v6)
    {
      v7 = llvm::convertStrToRoundingMode((uint64_t *)(*(_QWORD *)(v6 + 8) + 24), **(_QWORD **)(v6 + 8));
      LODWORD(v6) = HIBYTE(v7);
      return v7 | ((_DWORD)v6 << 8);
    }
    goto LABEL_8;
  }
LABEL_9:
  LOBYTE(v7) = 0;
  return v7 | ((_DWORD)v6 << 8);
}

uint64_t llvm::ConstrainedFPIntrinsic::getExceptionBehavior(llvm::ConstrainedFPIntrinsic *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  __int16 v7;

  v2 = llvm::CallBase::arg_end(this);
  v3 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v4 = *(_QWORD *)&v3[32 * ((unint64_t)(v2 - (_QWORD)v3) >> 5) - 32];
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 23;
  else
    v5 = 0;
  if (!v5)
  {
LABEL_8:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
  {
    if (!*(_BYTE *)v6)
    {
      v7 = llvm::convertStrToExceptionBehavior((_QWORD *)(*(_QWORD *)(v6 + 8) + 24), **(_QWORD **)(v6 + 8));
      LODWORD(v6) = HIBYTE(v7);
      return v7 | ((_DWORD)v6 << 8);
    }
    goto LABEL_8;
  }
LABEL_9:
  LOBYTE(v7) = 0;
  return v7 | ((_DWORD)v6 << 8);
}

uint64_t getFPPredicateFromMD(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v16;
  int v17;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 16;
  if (*(_BYTE *)v1)
    return 16;
  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)v2 != 3)
    return 16;
  if (*(_WORD *)(v2 + 24) == 25967 && *(_BYTE *)(v2 + 26) == 113)
    return 1;
  if (*(_WORD *)(v2 + 24) == 26479 && *(_BYTE *)(v2 + 26) == 116)
    return 2;
  if (*(_WORD *)(v2 + 24) == 26479 && *(_BYTE *)(v2 + 26) == 101)
    return 3;
  if (*(_WORD *)(v2 + 24) == 27759 && *(_BYTE *)(v2 + 26) == 116)
    return 4;
  if (*(_WORD *)(v2 + 24) == 27759 && *(_BYTE *)(v2 + 26) == 101)
    return 5;
  if (*(_WORD *)(v2 + 24) == 28271 && *(_BYTE *)(v2 + 26) == 101)
    return 6;
  if (*(_WORD *)(v2 + 24) == 29295 && *(_BYTE *)(v2 + 26) == 100)
    return 7;
  if (*(_WORD *)(v2 + 24) == 28277 && *(_BYTE *)(v2 + 26) == 111)
    return 8;
  if (*(_WORD *)(v2 + 24) == 25973 && *(_BYTE *)(v2 + 26) == 113)
    return 9;
  if (*(_WORD *)(v2 + 24) == 26485 && *(_BYTE *)(v2 + 26) == 116)
    return 10;
  if (*(_WORD *)(v2 + 24) == 26485 && *(_BYTE *)(v2 + 26) == 101)
    return 11;
  if (*(_WORD *)(v2 + 24) == 27765 && *(_BYTE *)(v2 + 26) == 116)
    return 12;
  if (*(_WORD *)(v2 + 24) == 27765 && *(_BYTE *)(v2 + 26) == 101)
    return 13;
  v16 = *(unsigned __int16 *)(v2 + 24);
  v17 = *(unsigned __int8 *)(v2 + 26);
  if (v16 != 28277 || v17 != 101)
    return 16;
  return 14;
}

uint64_t llvm::VPCmpIntrinsic::getPredicate(llvm::VPCmpIntrinsic *this)
{
  int v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v1 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  if (v1 != 364)
  {
    v6 = v1 == 348;
    v2 = 2;
    if (!v6)
      v2 = 0;
    return getFPPredicateFromMD(*((_QWORD *)this + 4 * v2 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
  }
  v4 = *(_QWORD *)(((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8] + 24);
  if (!v4 || *(_BYTE *)v4)
    return 42;
  v5 = *(_QWORD *)(v4 + 8);
  if (*(_QWORD *)v5 != 3)
  {
    if (*(_QWORD *)v5 == 2)
    {
      if (*(_WORD *)(v5 + 24) == 29029)
        return 32;
      if (*(_WORD *)(v5 + 24) == 25966)
        return 33;
    }
    return 42;
  }
  v6 = *(_WORD *)(v5 + 24) == 26485 && *(_BYTE *)(v5 + 26) == 116;
  if (v6)
    return 34;
  if (*(_WORD *)(v5 + 24) == 26485 && *(_BYTE *)(v5 + 26) == 101)
    return 35;
  if (*(_WORD *)(v5 + 24) == 27765 && *(_BYTE *)(v5 + 26) == 116)
    return 36;
  if (*(_WORD *)(v5 + 24) == 27765 && *(_BYTE *)(v5 + 26) == 101)
    return 37;
  if (*(_WORD *)(v5 + 24) == 26483 && *(_BYTE *)(v5 + 26) == 116)
    return 38;
  if (*(_WORD *)(v5 + 24) == 26483 && *(_BYTE *)(v5 + 26) == 101)
    return 39;
  if (*(_WORD *)(v5 + 24) == 27763 && *(_BYTE *)(v5 + 26) == 116)
    return 40;
  if (*(unsigned __int16 *)(v5 + 24) ^ 0x6C73 | *(unsigned __int8 *)(v5 + 26) ^ 0x65)
    return 42;
  return 41;
}

uint64_t llvm::GCProjectionInst::getStatepoint(llvm::GCProjectionInst *this)
{
  uint64_t result;
  uint64_t UniquePredecessor;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (*(_BYTE *)(result + 16) == 94)
  {
    UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(*(llvm::BasicBlock **)(result + 40));
    v3 = *(_QWORD *)(UniquePredecessor + 40);
    if (v3 == UniquePredecessor + 40)
    {
      return 0;
    }
    else
    {
      v4 = v3 - 24;
      if (v3)
        v5 = v3 - 24;
      else
        v5 = 0;
      if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
        return 0;
      else
        return v4;
    }
  }
  return result;
}

llvm::Value *llvm::GCRelocateInst::getBasePtr(llvm::GCRelocateInst *this)
{
  uint64_t Statepoint;
  llvm::Type *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9[3];
  char v10;

  Statepoint = llvm::GCProjectionInst::getStatepoint(this);
  v4 = Statepoint;
  if (*(unsigned __int8 *)(Statepoint + 16) - 11 <= 1)
    return llvm::UndefValue::get(*(llvm::UndefValue **)Statepoint, v3);
  llvm::CallBase::getOperandBundle(Statepoint, 5, (uint64_t)v9);
  if (v10)
    v6 = v9[0];
  else
    v6 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
  v7 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
  v8 = (unsigned int *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = *(unsigned int **)v8;
  return *(llvm::Value **)(v6 + 32 * *v8);
}

llvm::Value *llvm::GCRelocateInst::getDerivedPtr(llvm::GCRelocateInst *this)
{
  uint64_t Statepoint;
  llvm::Type *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9[3];
  char v10;

  Statepoint = llvm::GCProjectionInst::getStatepoint(this);
  v4 = Statepoint;
  if (*(unsigned __int8 *)(Statepoint + 16) - 11 <= 1)
    return llvm::UndefValue::get(*(llvm::UndefValue **)Statepoint, v3);
  llvm::CallBase::getOperandBundle(Statepoint, 5, (uint64_t)v9);
  if (v10)
    v6 = v9[0];
  else
    v6 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
  v7 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
  v8 = (unsigned int *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u)
    v8 = *(unsigned int **)v8;
  return *(llvm::Value **)(v6 + 32 * *v8);
}

uint64_t *llvm::LLVMContext::diagnose(uint64_t *this, const llvm::DiagnosticInfo *a2)
{
  uint64_t *v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  llvm *v9;
  _BYTE *v10;
  void (**v11)(llvm::DiagnosticPrinterRawOStream *__hidden);
  llvm *v12;

  v3 = this;
  v4 = *this;
  if ((*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7)
  {
    this = *(uint64_t **)(v4 + 120);
    if (this)
    {
      llvm::LLVMRemarkStreamer::emit(this, (uint64_t)a2);
      v4 = *v3;
    }
  }
  if (!*(_QWORD *)(v4 + 72)
    || *(_BYTE *)(v4 + 80)
    && (*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7
    && ((this = (uint64_t *)(*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(_QWORD *)a2 + 32))(a2),
         !(_DWORD)this)
     || *((_BYTE *)a2 + 352) && !*((_BYTE *)a2 + 72))
    || (this = (uint64_t *)(*(uint64_t (**)(_QWORD, const llvm::DiagnosticInfo *))(**(_QWORD **)(*v3 + 72)
                                                                                          + 16))(*(_QWORD *)(*v3 + 72), a2), (this & 1) == 0))
  {
    if ((*((_DWORD *)a2 + 2) - 18) < 0xFFFFFFF7
      || (this = (uint64_t *)(*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(_QWORD *)a2 + 32))(a2),
          (_DWORD)this)
      && (!*((_BYTE *)a2 + 352) || *((_BYTE *)a2 + 72)))
    {
      v11 = &off_251C1EAD8;
      v12 = (llvm *)llvm::errs((llvm *)this);
      v5 = (llvm::raw_ostream *)llvm::errs(v12);
      v6 = strlen(off_251C35ED8[*((char *)a2 + 12)]);
      v7 = llvm::raw_ostream::operator<<(v5, off_251C35ED8[*((char *)a2 + 12)], v6);
      v8 = (_WORD *)*((_QWORD *)v7 + 4);
      if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
      {
        *v8 = 8250;
        *((_QWORD *)v7 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v7, ": ", 2uLL);
      }
      v9 = (llvm *)(*(uint64_t (**)(const llvm::DiagnosticInfo *, void (***)(llvm::DiagnosticPrinterRawOStream *__hidden)))(*(_QWORD *)a2 + 24))(a2, &v11);
      this = (uint64_t *)llvm::errs(v9);
      v10 = (_BYTE *)this[4];
      if ((_BYTE *)this[3] == v10)
      {
        this = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)this, "\n", 1uLL);
      }
      else
      {
        *v10 = 10;
        ++this[4];
      }
      if (!*((_BYTE *)a2 + 12))
        exit(1);
    }
  }
  return this;
}

void llvm::LLVMContext::getMDKindNames(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  BOOL v13;

  llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)a2, *(unsigned int *)(*(_QWORD *)a1 + 2492));
  v4 = *(unsigned int *)(*(_QWORD *)a1 + 2488);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t ***)(*(_QWORD *)a1 + 2480); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(*(_QWORD *)a1 + 2480);
  }
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 2480) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    v8 = *i;
    do
    {
      v9 = v8 + 2;
      v10 = (uint64_t *)*v8;
      v11 = (uint64_t **)(*a2 + 16 * *((unsigned int *)v8 + 2));
      *v11 = v9;
      v11[1] = v10;
      do
      {
        v12 = i[1];
        ++i;
        v8 = v12;
        if (v12)
          v13 = v8 + 1 == 0;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

void llvm::LLVMContext::setGC(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  void *__p[2];
  uint64_t v16;

  v6 = *a1;
  v7 = (uint64_t *)(*a1 + 2696);
  v13[0] = a2;
  v14 = 0;
  v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v7, v13, &v14);
  v9 = v14;
  if (!v8)
    v9 = *(_QWORD *)(v6 + 2696) + 32 * *(unsigned int *)(v6 + 2712);
  if (v9 == *(_QWORD *)(*a1 + 2696) + 32 * *(unsigned int *)(*a1 + 2712))
  {
    v12 = *a1 + 2696;
    v14 = a2;
    *(_OWORD *)__p = *a3;
    v16 = *((_QWORD *)a3 + 2);
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::try_emplace<std::string>(v12, &v14, (__int128 *)__p, (uint64_t)v13);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = v9 + 8;
    if (*(char *)(v9 + 31) < 0)
      operator delete(*(void **)v10);
    v11 = *a3;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v10 = v11;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::erase(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)v6;
    if (*(char *)(v6 + 31) < 0)
      operator delete(*(void **)(v6 + 8));
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 16);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 16 * v2), 16 * a2 - 16 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::try_emplace<std::string>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucketImpl<llvm::Function const*>(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v11 = *a3;
    *(_QWORD *)(result + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 8) = v11;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v10 = 1;
  }
  v12 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucketImpl<llvm::Function const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, (_QWORD *)v13, &v18);
          v14 = v18;
          *v18 = *(_QWORD *)v13;
          v15 = *(_OWORD *)(v13 + 8);
          v14[3] = *(_QWORD *)(v13 + 24);
          *(_OWORD *)(v14 + 1) = v15;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (*(char *)(v13 + 31) < 0)
            operator delete(*(void **)(v13 + 8));
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::InsertIntoBucketImpl<llvm::Function const*>((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

unint64_t llvm::MDNodeOpsKey::calculateHash(llvm::MDNodeOpsKey *this, llvm::MDNode *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_QWORD *)this - 2);
  if ((v4 & 2) != 0)
  {
    v5 = (char *)*((_QWORD *)this - 4);
    v6 = (uint64_t)&v5[8 * a2];
    v7 = *((unsigned int *)this - 6);
  }
  else
  {
    v5 = (char *)this - 8 * ((v4 >> 2) & 0xF) - 16;
    v6 = (uint64_t)&v5[8 * a2];
    v7 = (v4 >> 6) & 0xF;
  }
  return llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>(v6, (uint64_t)&v5[8 * v7], a3, a4);
}

void llvm::LLVMContextImpl::getSyncScopeNames(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t **i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  BOOL v13;

  llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)a2, *(unsigned int *)(a1 + 2684));
  v4 = *(unsigned int *)(a1 + 2680);
  if ((_DWORD)v4)
  {
    for (i = *(uint64_t ***)(a1 + 2672); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(a1 + 2672);
  }
  v7 = *(_QWORD *)(a1 + 2672) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    v8 = *i;
    do
    {
      v9 = v8 + 2;
      v10 = (uint64_t *)*v8;
      v11 = (uint64_t **)(*a2 + 16 * *((unsigned __int8 *)v8 + 8));
      *v11 = v9;
      v11[1] = v10;
      do
      {
        v12 = i[1];
        ++i;
        v8 = v12;
        if (v12)
          v13 = v8 + 1 == 0;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

void llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses(llvm::ContextAndReplaceableUses *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 4) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_BYTE *)(v2 + 16) & 1) == 0)
        MEMORY[0x24BD1B398](*(_QWORD *)(v2 + 24), 8);
      MEMORY[0x24BD1B3A4](v2, 0x1020C408B843D01);
    }
  }
}

void llvm::DIExpression::~DIExpression(llvm::DIExpression *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::DIExpression *)((char *)this + 8));
}

void llvm::DIEnumerator::~DIEnumerator(llvm::DIEnumerator *this)
{
  uint64_t v2;

  if (*((_DWORD *)this + 6) >= 0x41u)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      MEMORY[0x24BD1B380](v2, 0x1000C8000313F17);
  }
  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::DIEnumerator *)((char *)this + 8));
}

void llvm::DIArgList::~DIArgList(llvm::DIArgList *this)
{
  char *v2;

  llvm::DIArgList::untrack((unint64_t)this);
  v2 = (char *)*((_QWORD *)this + 2);
  if (v2 != (char *)this + 32)
    free(v2);
  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::DIArgList *)((char *)this + 8));
}

char **llvm::SmallVector<llvm::MDAttachments::Attachment,1u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = v2 - 8;
    v5 = 16 * v3;
    do
    {
      v6 = *(_QWORD *)&v4[v5];
      if (v6)
        llvm::MetadataTracking::untrack((uint64_t)&v4[v5], v6);
      v5 -= 16;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::MDOperand const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[56];
  char __src[64];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  {
    v20 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v20 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v20;
  }
  v7 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    v9 = 0;
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)__src, v9, v7);
  }
  else
  {
    for (i = 0; i <= 0x38; i += 8)
    {
      v9 = i + 8;
      *(_QWORD *)&__src[i] = *(_QWORD *)(a1 + i);
      v10 = a1 + i + 8;
      if (v10 == a2)
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)__src, v9, v7);
    }
    llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)__src, v7, v7, a4, (llvm::hashing::detail::hash_state *)v21);
    v12 = a1 + i;
    v13 = 64;
    if (v12 != a2)
    {
      do
      {
        v14 = 0;
        do
        {
          v15 = v14 + 8;
          v16 = v12 + v14 + 8;
          *(_QWORD *)&__src[v14] = *(_QWORD *)(v12 + v14);
          if (v16 == a2)
            break;
          v17 = v14 >= 0x31;
          v14 += 8;
        }
        while (!v17);
        std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,char *,char *>(__src, &__src[v15], (char *)&v23);
        llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)v21, (llvm::hashing::detail::hash_state *)__src, v18, v19);
        v13 += v15;
        v12 += v15;
      }
      while (v16 != a2);
    }
    return llvm::hashing::detail::hash_state::finalize((llvm::hashing::detail::hash_state *)v21, v13);
  }
}

uint64_t *llvm::StringMap<unsigned char,llvm::MallocAllocator>::try_emplace<unsigned char>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = v12 + 16;
  if (a3)
    memcpy(v12 + 16, a2, a3);
  v14[a3] = 0;
  *(_QWORD *)v13 = a3;
  v13[8] = *a4;
  *i = (uint64_t)v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t _GLOBAL__sub_I_LLVMContextImpl_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&OpaquePointersCL, 0, 0);
  byte_257966860 = 0;
  qword_257966868 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257966870 = 0;
  OpaquePointersCL = (uint64_t)off_251C123A8;
  qword_257966878 = (uint64_t)&off_251C12520;
  qword_257966880 = (uint64_t)&off_251C12410;
  qword_257966898 = (uint64_t)&qword_257966880;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"opaque-pointers", 0xFuLL);
  qword_257966800 = (uint64_t)"Use opaque pointers";
  unk_257966808 = 19;
  byte_257966860 = 1;
  word_257966870 = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&OpaquePointersCL);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &OpaquePointersCL, &dword_24A800000);
}

uint64_t llvm::LLVMRemarkStreamer::toRemark@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v9;
  uint64_t v10;
  size_t v11;
  uint64_t result;
  uint64_t **v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v8 = 0;
  *(_QWORD *)(a2 + 104) = a2 + 120;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 112) = 0x500000000;
  v9 = *(_DWORD *)(a1 + 8) - 9;
  if (v9 <= 8)
    v8 = dword_24AA49538[v9];
  *(_DWORD *)a2 = v8;
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    v11 = strlen(*(const char **)(a1 + 40));
  else
    v11 = 0;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 48);
  result = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(result + 23) & 0x10) != 0)
  {
    result = llvm::Value::getValueName((uint64_t ***)result);
    v14 = result + 16;
    v13 = *(uint64_t ***)result;
    if (*(_QWORD *)result)
    {
      v2 = *(unsigned __int8 *)v14;
      LODWORD(v3) = (_DWORD)v13 - 1;
      if ((_DWORD)v2 == 1)
      {
        v13 = (uint64_t **)((char *)v13 - 1);
        v14 = result + 17;
      }
    }
  }
  else
  {
    v13 = 0;
    v14 = (unint64_t)&str_3_26;
  }
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v13;
  v15 = *(_QWORD **)(a1 + 24);
  if (v15)
  {
    v14 = *(_QWORD *)(a1 + 32);
    v16 = *(v15 - 2);
    if ((v16 & 2) != 0)
      v17 = (_QWORD *)*(v15 - 4);
    else
      v17 = &v15[-((v16 >> 2) & 0xF) - 2];
    v15 = (_QWORD *)*v17;
    if (v15)
    {
      v19 = (uint64_t *)v15[1];
      v20 = *v19;
      v15 = v19 + 3;
      v2 = v20;
    }
    else
    {
      v2 = 0;
    }
    v3 = HIDWORD(v14);
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v2;
  *(_DWORD *)(a2 + 72) = v14;
  *(_DWORD *)(a2 + 76) = v3;
  *(_BYTE *)(a2 + 80) = v18;
  v21 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 96) = v21;
  v22 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 80);
    v26 = v22 << 6;
    do
    {
      v27 = v25 + v23;
      result = llvm::SmallVectorImpl<llvm::remarks::Argument>::emplace_back<>(a2 + 104);
      v28 = *(_QWORD *)(v25 + v23);
      v29 = *(_QWORD *)(v25 + v23 + 8);
      if (*(char *)(v25 + v23 + 23) >= 0)
      {
        v28 = v25 + v23;
        v29 = *(unsigned __int8 *)(v27 + 23);
      }
      v30 = *(unsigned int *)(a2 + 112);
      v31 = *(_QWORD *)(a2 + 104) + (v30 << 6);
      *(_QWORD *)(v31 - 64) = v28;
      *(_QWORD *)(v31 - 56) = v29;
      v34 = *(_QWORD *)(v27 + 24);
      v33 = v27 + 24;
      v32 = v34;
      v35 = *(unsigned __int8 *)(v33 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v33 + 8);
      else
        v32 = v33;
      v36 = *(_QWORD *)(a2 + 104) + (v30 << 6);
      *(_QWORD *)(v36 - 48) = v32;
      *(_QWORD *)(v36 - 40) = v35;
      v37 = *(_QWORD *)(v33 + 24);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 - 16);
        if ((v38 & 2) != 0)
          v39 = *(unint64_t **)(v37 - 32);
        else
          v39 = (unint64_t *)(v37 - 16 - 8 * ((v38 >> 2) & 0xF));
        v37 = *v39;
        if (v37)
        {
          v41 = *(uint64_t **)(v37 + 8);
          v42 = *v41;
          v37 = (unint64_t)(v41 + 3);
          v4 = v42;
        }
        else
        {
          v4 = 0;
        }
        v5 = *(_QWORD *)(v25 + v23 + 56);
        v24 = v37 >> 8;
        v40 = 1;
      }
      else
      {
        v40 = 0;
      }
      v43 = *(_QWORD *)(a2 + 104) + (v30 << 6);
      *(_QWORD *)(v43 - 32) = v37 | (v24 << 8);
      *(_QWORD *)(v43 - 24) = v4;
      *(_QWORD *)(v43 - 16) = v5;
      *(_BYTE *)(v43 - 8) = v40;
      v23 += 64;
    }
    while (v26 != v23);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::remarks::Argument>::emplace_back<>(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::remarks::Argument,true>::growAndEmplaceBack<>(a1);
  v2 = (_OWORD *)(*(_QWORD *)a1 + (v1 << 6));
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  v3 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v3;
  return *(_QWORD *)a1 + (v3 << 6) - 64;
}

void llvm::LLVMRemarkStreamer::emit(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  _BYTE v7[104];
  void *v8;
  _QWORD v9[41];

  v9[40] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(char **)(a2 + 40);
  if (v5)
    v6 = strlen(*(const char **)(a2 + 40));
  else
    v6 = 0;
  if (!*(_BYTE *)(v4 + 16) || llvm::Regex::match(v4, v5, v6, 0, 0))
  {
    llvm::LLVMRemarkStreamer::toRemark(a2, (uint64_t)v7);
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(*a1 + 24) + 16))(*(_QWORD *)(*a1 + 24), v7);
    if (v8 != v9)
      free(v8);
  }
}

uint64_t llvm::SmallVectorTemplateBase<llvm::remarks::Argument,true>::growAndEmplaceBack<>(uint64_t a1)
{
  __int128 *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[4];

  memset(v9, 0, sizeof(v9));
  v2 = (__int128 *)llvm::SmallVectorTemplateCommon<llvm::ReplacementItem,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::ReplacementItem,true>>(a1, (unint64_t)v9, 1);
  v3 = (_OWORD *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[3];
  v3[2] = v2[2];
  v3[3] = v6;
  *v3 = v4;
  v3[1] = v5;
  v7 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + (v7 << 6) - 64;
}

void llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C35F08;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C35F70;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C35F08;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C35F70;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C35F70;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    v17 = std::__throw_bad_function_call[abi:nn180100]();
  }
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

unint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_251C35FC0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C35F70;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<`anonymous namespace'::PassDebugLevel>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C36000;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::PassDebugLevel,false,llvm::cl::parser<`anonymous namespace'::PassDebugLevel>>::{lambda(`anonymous namespace'::PassDebugLevel const&)#1}>,void ()(`anonymous namespace'::PassDebugLevel const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C36000;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<`anonymous namespace'::PassDebugLevel>::OptionInfo,false>::grow(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_2579644C8, &unk_2579644D8, a1, 48, &v8);
  v2 = (_OWORD *)qword_2579644C8;
  if ((_DWORD)qword_2579644D0)
  {
    v3 = qword_2579644C8 + 48 * qword_2579644D0;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_251C35FE0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_251C35FC0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_2579644C8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_2579644D8)
    free(v2);
  qword_2579644C8 = (uint64_t)v1;
  HIDWORD(qword_2579644D0) = v7;
}

uint64_t _GLOBAL__sub_I_LegacyPassManager_cpp()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t *v3;
  unint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  const char **p_src;
  uint64_t v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  char *v14;
  char *v15;
  uint64_t v16;
  _BYTE v17[160];
  const char *__src;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  __src = "Disabled";
  v19 = 8;
  LODWORD(v20) = 0;
  *((_QWORD *)&v20 + 1) = "disable debug output";
  v21 = 20;
  v22 = "Arguments";
  v23 = 9;
  v24 = 1;
  v25 = "print pass arguments to pass to 'opt'";
  v26 = 37;
  v27 = "Structure";
  v28 = 9;
  v29 = 2;
  v30 = "print pass structure before run()";
  v31 = 33;
  v32 = "Executions";
  v33 = 10;
  v34 = 3;
  v35 = "print pass name before it is executed";
  v36 = 37;
  v37 = "Details";
  v38 = 7;
  v39 = 4;
  v40 = "print pass details when it is executed";
  v41 = 38;
  v15 = v17;
  v16 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v15, &__src, &v42);
  v0 = llvm::cl::Option::Option((uint64_t)&PassDebugging, 0, 0);
  dword_2579644A0 = 0;
  qword_2579644A8 = (uint64_t)&off_251C35FC0;
  unk_2579644B0 = 0;
  PassDebugging = (uint64_t)off_251C35F08;
  qword_2579644B8 = (uint64_t)&off_251C35F70;
  qword_2579644C0 = (uint64_t)&PassDebugging;
  qword_2579644C8 = (uint64_t)&unk_2579644D8;
  qword_2579644D0 = 0x800000000;
  qword_257964658 = (uint64_t)&off_251C36000;
  qword_257964670 = (uint64_t)&qword_257964658;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"debug-pass", 0xAuLL);
  word_25796442A = word_25796442A & 0xFF9F | 0x20;
  qword_257964440 = (uint64_t)"Print legacy PassManager debugging information";
  unk_257964448 = 46;
  if ((_DWORD)v16)
  {
    v1 = v15;
    v2 = &v15[40 * v16];
    do
    {
      v3 = *(uint64_t **)v1;
      v4 = *((_QWORD *)v1 + 1);
      v5 = *(_OWORD *)(v1 + 24);
      v6 = *((_DWORD *)v1 + 4);
      __src = *(const char **)v1;
      v19 = v4;
      v20 = v5;
      v21 = (uint64_t)&off_251C35FC0;
      BYTE4(v22) = 1;
      LODWORD(v22) = v6;
      v7 = qword_2579644C8;
      if (qword_2579644D0 >= HIDWORD(qword_2579644D0))
      {
        v12 = qword_2579644D0 + 1;
        if (qword_2579644C8 <= (unint64_t)&__src
          && qword_2579644C8 + 48 * (unint64_t)qword_2579644D0 > (unint64_t)&__src)
        {
          v14 = (char *)&__src - qword_2579644C8;
          v7 = qword_2579644C8;
          p_src = (const char **)&v14[qword_2579644C8];
          goto LABEL_5;
        }
        v7 = qword_2579644C8;
      }
      p_src = &__src;
LABEL_5:
      v9 = v7 + 48 * qword_2579644D0;
      v10 = *((_OWORD *)p_src + 1);
      *(_OWORD *)v9 = *(_OWORD *)p_src;
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v9 + 32) = &off_251C35FE0;
      v11 = *((_DWORD *)p_src + 10);
      *(_BYTE *)(v9 + 44) = *((_BYTE *)p_src + 44);
      *(_DWORD *)(v9 + 40) = v11;
      *(_QWORD *)(v9 + 32) = &off_251C35FC0;
      LODWORD(qword_2579644D0) = qword_2579644D0 + 1;
      llvm::cl::AddLiteralOption(qword_2579644C0, v3, v4);
      v1 += 40;
    }
    while (v1 != v2);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PassDebugging);
  if (v15 != v17)
    free(v15);
}

void getNameWithPrefixImpl(llvm::raw_ostream *a1, unsigned __int8 *a2, int a3, uint64_t a4, char a5)
{
  unsigned __int8 *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  size_t v16;
  const char *v17;
  char *v18;
  void *v19;
  __int128 v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef(a2, (uint64_t)&v19);
  v11 = v9;
  v12 = v10;
  v13 = *v9;
  if (v13 == 1)
  {
    if (v10)
      v11 = v9 + 1;
    v12 = v10 - (v10 != 0);
    goto LABEL_21;
  }
  v14 = *(int *)(a4 + 28);
  if ((v14 - 3) < 2 && v13 == 63)
    a5 = 0;
  if (a3 == 2)
  {
    v16 = (_DWORD)v14 == 2;
    if ((_DWORD)v14 == 2)
      v17 = "l";
    else
      v17 = "";
  }
  else
  {
    if (a3 != 1)
      goto LABEL_17;
    v16 = qword_24AA49560[v14];
    v17 = (const char *)*((_QWORD *)&off_251C36038 + v14);
  }
  llvm::raw_ostream::operator<<(a1, v17, v16);
LABEL_17:
  if (a5)
  {
    v18 = (char *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, a5);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v18 + 1;
      *v18 = a5;
    }
  }
LABEL_21:
  llvm::raw_ostream::operator<<(a1, v11, v12);
  if (v19 != v21)
    free(v19);
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, int a4)
{
  int v6;
  int v7;
  uint64_t v8;
  const llvm::DataLayout *v9;
  char v11;
  char *v12;
  unsigned int v13;
  _QWORD *ValueName;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  char v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Argument *v30;
  llvm::Argument *v31;
  llvm::Argument *v32;
  unsigned int v33;
  unint64_t PassPointeeByValueCopySize;
  const char *v35;
  _BYTE *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;

  if (a4)
    v6 = 2;
  else
    v6 = 1;
  if ((*((_DWORD *)a3 + 8) & 0xF) == 8)
    v7 = v6;
  else
    v7 = 0;
  v8 = *((_QWORD *)a3 + 5);
  v9 = (const llvm::DataLayout *)(v8 + 256);
  if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
  {
    v37 = 0;
    v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)a3, &v37);
    v12 = (char *)v37;
    if ((v11 & 1) != 0)
    {
      v13 = *((_DWORD *)v37 + 2);
      if (v13)
      {
LABEL_26:
        v37 = "__unnamed_";
        v39 = v13;
        v40 = 2051;
        v23 = 0x5F005F0000uLL >> (8 * *(_DWORD *)(v8 + 284));
LABEL_31:
        getNameWithPrefixImpl(a2, (unsigned __int8 *)&v37, v7, v8 + 256, v23);
        return;
      }
LABEL_25:
      v13 = *((_DWORD *)this + 2);
      *((_DWORD *)v12 + 2) = v13;
      goto LABEL_26;
    }
    v21 = *((_DWORD *)this + 2);
    v22 = *((_DWORD *)this + 4);
    if (4 * v21 + 4 >= 3 * v22)
    {
      v22 *= 2;
    }
    else if (v22 + ~v21 - *((_DWORD *)this + 3) > v22 >> 3)
    {
LABEL_22:
      ++*((_DWORD *)this + 2);
      if (*(_QWORD *)v12 != -4096)
        --*((_DWORD *)this + 3);
      *(_QWORD *)v12 = a3;
      *((_DWORD *)v12 + 2) = 0;
      goto LABEL_25;
    }
    llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow((uint64_t)this, v22);
    v37 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)a3, &v37);
    v12 = (char *)v37;
    goto LABEL_22;
  }
  ValueName = (_QWORD *)llvm::Value::getValueName((uint64_t ***)a3);
  v15 = (const char *)(ValueName + 2);
  v16 = *ValueName;
  v17 = 0x5F005F0000uLL >> (8 * *(_BYTE *)(v8 + 284));
  v37 = 0;
  v38 = 0;
  LODWORD(v39) = 0;
  v18 = findBaseObject<llvm::GlobalValue::getAliaseeObject(void)::$_0>((uint64_t)a3, (uint64_t)&v37);
  MEMORY[0x24BD1B398](v37, 8);
  if (v18 && *(_BYTE *)(v18 + 16))
    v18 = 0;
  if (v16)
  {
    v19 = *(unsigned __int8 *)v15;
    if (v19 == 1)
      goto LABEL_30;
    v20 = *(_DWORD *)(v8 + 284);
    if ((v20 - 5) >= 0xFFFFFFFE && v19 == 63)
      goto LABEL_30;
    if (!v18)
      goto LABEL_30;
  }
  else
  {
    v20 = *(_DWORD *)(v8 + 284);
    if (!v18)
    {
LABEL_30:
      v40 = 261;
      v37 = v15;
      v38 = v16;
      v23 = v17;
      goto LABEL_31;
    }
  }
  v24 = (*(unsigned __int16 *)(v18 + 18) >> 4) & 0x3FF;
  if (v20 != 4 && v24 != 80)
    goto LABEL_30;
  if (v24 == 65)
  {
    LOBYTE(v17) = 64;
  }
  else if (v24 == 80)
  {
    LOBYTE(v17) = 0;
  }
  v40 = 261;
  v37 = v15;
  v38 = v16;
  getNameWithPrefixImpl(a2, (unsigned __int8 *)&v37, v7, v8 + 256, v17);
  if (v24 == 80)
  {
    v25 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v25 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 64);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v25 + 1;
      *v25 = 64;
    }
  }
  else if ((v24 - 64) > 0x10 || ((1 << (v24 - 64)) & 0x10003) == 0)
  {
    return;
  }
  v26 = *(_QWORD *)(v18 + 24);
  if (*(_DWORD *)(v26 + 8) < 0x100u
    || (v27 = *(_DWORD *)(v26 + 12), v27 == 1)
    || v27 == 2 && llvm::Function::hasStructRetAttr((llvm::Function *)v18))
  {
    v28 = *(unsigned int *)(*(_QWORD *)(v8 + 496) + 4);
    v29 = llvm::Function::args((llvm::Function *)v18);
    if ((llvm::Argument *)v29 == v30)
    {
      v33 = 0;
    }
    else
    {
      v31 = (llvm::Argument *)v29;
      v32 = v30;
      v33 = 0;
      do
      {
        if ((llvm::Argument::hasStructRetAttr(v31) & 1) == 0)
        {
          if (llvm::Argument::hasPassPointeeByValueCopyAttr(v31))
          {
            PassPointeeByValueCopySize = llvm::Argument::getPassPointeeByValueCopySize(v31, v9);
          }
          else
          {
            PassPointeeByValueCopySize = llvm::DataLayout::getTypeAllocSize(v9, *(llvm::Type **)v31);
            if ((_BYTE)v35)
          }
          v33 += (((unint64_t)(v28 + 7) >> 3) - 1 + PassPointeeByValueCopySize)
               / ((unint64_t)(v28 + 7) >> 3)
               * ((unint64_t)(v28 + 7) >> 3);
        }
        v31 = (llvm::Argument *)((char *)v31 + 40);
      }
      while (v31 != v32);
    }
    v36 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v36 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 64);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v36 + 1;
      *v36 = 64;
    }
    write_unsigned<unsigned long>(a2, v33, 0, 0, 0);
  }
}

uint64_t llvm::Function::hasStructRetAttr(llvm::Function *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 < 3)
    return 0;
  v3 = *(_QWORD *)(v1 + 56);
  if (!v3 || (*(_BYTE *)(v3 + 21) & 4) == 0)
  {
    if (v2 >= 4)
    {
      v4 = *(_QWORD *)(v1 + 64);
      if (v4)
        return (*(unsigned __int8 *)(v4 + 21) >> 2) & 1;
    }
    return 0;
  }
  return 1;
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *a1, uint64_t a2, const llvm::GlobalValue *a3, int a4)
{
  void (**v7)(llvm::raw_ostream *__hidden);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v8 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  v15 = a2;
  llvm::raw_ostream::SetUnbuffered(&v7);
  llvm::Mangler::getNameWithPrefix(a1, (llvm::raw_ostream *)&v7, a3, a4);
  v7 = off_251C13948;
  if (v14 == 1)
  {
    if (v9)
      MEMORY[0x24BD1B380](v9, 0x1000C8077774924);
  }
}

uint64_t llvm::MetadataAsValue::MetadataAsValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 23;
  *(_DWORD *)(a1 + 20) = v4;
  *(_QWORD *)(a1 + 24) = a3;
  v5 = a1 + 24;
  if (a3)
    llvm::MetadataTracking::track(v5, a3, a1);
  return a1;
}

void llvm::MetadataAsValue::~MetadataAsValue(llvm::MetadataAsValue *this)
{
  uint64_t v2;

  llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(***(_QWORD ***)this + 456, (_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 3);
  if (v2)
    llvm::MetadataTracking::untrack((uint64_t)this + 24, v2);
  llvm::Value::~Value(this);
}

uint64_t llvm::MetadataAsValue::get(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  llvm::MDNode *v6;

  v6 = canonicalizeMetadataForValue(a1, a2);
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(*a1 + 456), &v6);
  result = v3[1];
  if (!result)
  {
    v5 = operator new();
    result = llvm::MetadataAsValue::MetadataAsValue(v5, *a1 + 1752, (uint64_t)v6);
    v3[1] = result;
  }
  return result;
}

llvm::MDNode *canonicalizeMetadataForValue(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v2;
  _BYTE *v3;
  unint64_t v4;
  _BYTE **v5;
  _BYTE *v7;

  v2 = a1;
  if (!a2)
    return llvm::MDTuple::getImpl(a1, 0, 0, 0, 1);
  v3 = a2;
  if (llvm::MDNode::classof(a2))
  {
    v4 = *((_QWORD *)v3 - 2);
    if ((v4 & 2) != 0)
    {
      if (*((_DWORD *)v3 - 6) == 1)
      {
        v5 = (_BYTE **)*((_QWORD *)v3 - 4);
        goto LABEL_9;
      }
    }
    else if ((*((_QWORD *)v3 - 2) & 0x3C0) == 0x40)
    {
      v5 = (_BYTE **)&v3[-8 * ((v4 >> 2) & 0xF) - 16];
LABEL_9:
      v7 = *v5;
      if (v7)
      {
        if (*v7 == 1)
          return (llvm::MDNode *)v7;
        return (llvm::MDNode *)v3;
      }
      a1 = v2;
      return llvm::MDTuple::getImpl(a1, 0, 0, 0, 1);
    }
  }
  return (llvm::MDNode *)v3;
}

uint64_t llvm::MetadataAsValue::getIfExists(_QWORD *a1, _BYTE *a2)
{
  llvm::MDNode *v3;
  uint64_t *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  llvm::MDNode *v8;

  v3 = canonicalizeMetadataForValue(a1, a2);
  v4 = (uint64_t *)(*a1 + 456);
  v7 = 0;
  v8 = v3;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v4, &v8, &v7);
  result = 0;
  if (v5)
    return *(_QWORD *)(v7 + 8);
  return result;
}

uint64_t llvm::MetadataTracking::track(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::ReplaceableMetadataImpl::getOrCreate((unsigned __int8 *)a2);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)(v6 + 8);
    v11 = a1;
    *(_QWORD *)&v12 = a3;
    *((_QWORD *)&v12 + 1) = v8;
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::try_emplace<std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>(v6 + 16, &v11, &v12, (uint64_t)v10);
    ++*(_QWORD *)(v7 + 8);
  }
  else
  {
    if (*(_BYTE *)a2 != 3)
      return 0;
    *(_QWORD *)(a2 + 8) = a1;
  }
  return 1;
}

unint64_t llvm::ReplaceableMetadataImpl::getOrCreate(unsigned __int8 *a1)
{
  unsigned int v3;
  BOOL v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  if (llvm::MDNode::classof(a1))
  {
    if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 - 2))
      return llvm::ContextAndReplaceableUses::getOrCreateReplaceableUses((llvm::ContextAndReplaceableUses *)(a1 + 8));
    else
      return 0;
  }
  else
  {
    v3 = *a1 - 3;
    v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE)
      v5 = a1;
    else
      v5 = 0;
    v6 = v5 + 8;
    if (v4)
      return (unint64_t)v6;
    else
      return 0;
  }
}

unint64_t llvm::MetadataTracking::untrack(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;

  result = llvm::ReplaceableMetadataImpl::getIfExists((unsigned __int8 *)a2);
  if (result)
  {
    v5 = a1;
    return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::erase((_DWORD *)(result + 16), &v5);
  }
  else if (*(_BYTE *)a2 == 3)
  {
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

unint64_t llvm::ReplaceableMetadataImpl::getIfExists(unsigned __int8 *a1)
{
  unsigned int v3;
  BOOL v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  if (llvm::MDNode::classof(a1))
  {
    if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 - 2))
      return *((_QWORD *)a1 + 1) & ((uint64_t)(*((_QWORD *)a1 + 1) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
    else
      return 0;
  }
  else
  {
    v3 = *a1 - 3;
    v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE)
      v5 = a1;
    else
      v5 = 0;
    v6 = v5 + 8;
    if (v4)
      return (unint64_t)v6;
    else
      return 0;
  }
}

BOOL llvm::MetadataTracking::retrack(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t IfExists;
  unint64_t v6;

  IfExists = llvm::ReplaceableMetadataImpl::getIfExists(a2);
  v6 = IfExists;
  if (IfExists)
    llvm::ReplaceableMetadataImpl::moveRef(IfExists, a1, a3);
  return v6 != 0;
}

uint64_t llvm::ReplaceableMetadataImpl::moveRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = a1 + 16;
  v6 = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::find(a1 + 16, a2);
  v7 = *(_OWORD *)(v6 + 8);
  *(_QWORD *)v6 = -8192;
  v8 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) -= 2;
  *(_DWORD *)(a1 + 20) = v8;
  v11 = a3;
  v12[0] = v7;
  v12[1] = v7;
  return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::try_emplace<std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>(v5, &v11, v12, (uint64_t)&v10);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::erase(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>(a1, &v4, &v5))return v5;
  if ((*(_DWORD *)a1 & 1) != 0)
    return a1 + 104;
  return *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
}

void llvm::ReplaceableMetadataImpl::SalvageDebugInfo(uint64_t ***this, const llvm::Constant *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  llvm::MDNode *v21;
  int v22;
  llvm::Type *v23;
  unsigned int v25;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Value *v28;
  llvm::MDNode *v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  llvm::ReplaceableMetadataImpl *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[25];

  v36[24] = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)this + 23) & 8) == 0)
    return;
  v3 = ***this;
  v33 = (llvm::ReplaceableMetadataImpl *)this;
  v34 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v3 + 432), &v33, &v34);
  v5 = v34;
  if (!v4)
    v5 = (_QWORD *)(*(_QWORD *)(v3 + 432) + 16 * *(unsigned int *)(v3 + 448));
  v6 = v5[1];
  v7 = *(_DWORD *)(v6 + 24);
  if (v7 > 1)
  {
    v11 = (_QWORD *)(v6 + 32);
    if ((v7 & 1) != 0)
    {
      v13 = (_QWORD *)(v6 + 128);
      v9 = (_QWORD *)(v6 + 32);
    }
    else
    {
      v9 = *(_QWORD **)(v6 + 32);
      v12 = *(_DWORD *)(v6 + 40);
      v13 = &v9[3 * v12];
      if (!v12)
      {
        v14 = 0;
LABEL_20:
        v15 = (_QWORD *)(*v11 + 24 * v14);
        goto LABEL_21;
      }
    }
    v7 = *(_DWORD *)(v6 + 24) & 1;
    while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v9 += 3;
      if (v9 == v13)
      {
        v9 = v13;
        break;
      }
    }
  }
  else
  {
    if (v7)
    {
      v8 = v6 + 32;
      v9 = (_QWORD *)(v6 + 128);
      v10 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 32);
      v10 = *(_DWORD *)(v6 + 40);
      v9 = (_QWORD *)(v8 + 24 * v10);
    }
    v13 = (_QWORD *)(v8 + 24 * v10);
  }
  v11 = (_QWORD *)(v6 + 32);
  if (!v7)
  {
    v14 = *(_DWORD *)(v6 + 40);
    goto LABEL_20;
  }
  v15 = (_QWORD *)(v6 + 128);
LABEL_21:
  v34 = v36;
  v35 = 0x800000000;
  llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>((unsigned int *)&v34, v9, v13, v15);
  v16 = v34;
  if ((_DWORD)v35)
  {
    v17 = 24 * v35;
    v18 = (uint64_t *)((char *)v34 + 8);
    do
    {
      v19 = *v18;
      if ((unint64_t)*v18 >= 4 && (*v18 & 2) != 0)
      {
        v21 = (llvm::MDNode *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        v22 = llvm::MDNode::classof((_BYTE *)(v19 & 0xFFFFFFFFFFFFFFFCLL));
        if (v21 && v22 != 0)
        {
          v25 = *(unsigned __int8 *)v21;
          if (v25 - 8 < 0x16
            || ((v30 = v25 > 0x23, v31 = (1 << v25) & 0xD00000000, !v30) ? (v32 = v31 == 0) : (v32 = 1), !v32))
          {
            v26 = *(v18 - 1);
            v27 = llvm::UndefValue::get((llvm::UndefValue *)*this, v23);
            v29 = (llvm::MDNode *)llvm::ValueAsMetadata::get(v27, v28);
            llvm::MDNode::handleChangedOperand(v21, v26, v29);
          }
        }
      }
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v16 = v34;
  }
  if (v16 != v36)
    free(v16);
}

void llvm::MDNode::handleChangedOperand(llvm::MDNode *this, uint64_t a2, llvm::MDNode *a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  llvm::MDNode *v13;
  int v14;
  llvm::MDNode *v15;
  unsigned int v16;
  int v17;
  unsigned int i;
  uint64_t v19;

  v6 = (_QWORD *)((char *)this - 16);
  v5 = *((_QWORD *)this - 2);
  if ((v5 & 2) != 0)
    v7 = (_QWORD *)*((_QWORD *)this - 4);
  else
    v7 = &v6[-((v5 >> 2) & 0xF)];
  v8 = a2 - (_QWORD)v7;
  v9 = (unint64_t)(a2 - (_QWORD)v7) >> 3;
  if ((*((_BYTE *)this + 1) & 0x7F) != 0)
  {
    llvm::MDNode::setOperand((uint64_t)this, v9, (uint64_t)a3);
    return;
  }
  llvm::MDNode::eraseFromStore(this);
  v10 = *((_QWORD *)this - 2);
  if ((v10 & 2) != 0)
    v11 = (_QWORD *)*((_QWORD *)this - 4);
  else
    v11 = &v6[-((v10 >> 2) & 0xF)];
  v12 = *(_BYTE **)((char *)v11 + (v8 & 0x7FFFFFFF8));
  llvm::MDNode::setOperand((uint64_t)this, v9, (uint64_t)a3);
  if (a3 == this || !a3 && v12 && *v12 == 1)
  {
    if ((*((_BYTE *)this + 1) & 0x7F) == 2 || *((_DWORD *)this - 2))
    {
      *((_DWORD *)this - 2) = 0;
      llvm::MDNode::dropReplaceableUses(this);
    }
    goto LABEL_16;
  }
  llvm::MDNode::uniquify(this);
  v14 = *((_BYTE *)this + 1) & 0x7F;
  if (v13 == this)
  {
    if (v14 == 2 || *((_DWORD *)this - 2))
    {
      if (v12 && llvm::MDNode::classof(v12) && ((v12[1] & 0x7F) == 2 || *((_DWORD *)v12 - 2)))
      {
        if ((!a3 || !llvm::MDNode::classof(a3)
                  || (*((_BYTE *)a3 + 1) & 0x7F) != 2 && !*((_DWORD *)a3 - 2))
          && (*((_BYTE *)this + 1) & 0x7F) != 2)
        {
          v17 = *((_DWORD *)this - 2) - 1;
          *((_DWORD *)this - 2) = v17;
          if (!v17)
            llvm::MDNode::dropReplaceableUses(this);
        }
      }
      else if (a3
             && llvm::MDNode::classof(a3)
             && ((*((_BYTE *)a3 + 1) & 0x7F) == 2 || *((_DWORD *)a3 - 2)))
      {
        ++*((_DWORD *)this - 2);
      }
    }
  }
  else
  {
    v15 = v13;
    if (v14 != 2 && !*((_DWORD *)this - 2))
    {
LABEL_16:
      llvm::MDNode::storeDistinctInContext(this);
      return;
    }
    if ((*v6 & 2) != 0)
      v16 = *((_DWORD *)this - 6);
    else
      v16 = (*v6 >> 6) & 0xF;
    if (v16)
    {
      for (i = 0; i != v16; ++i)
        llvm::MDNode::setOperand((uint64_t)this, i, 0);
    }
    v19 = *((_QWORD *)this + 1);
    if ((v19 & 4) != 0)
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v19 & 0xFFFFFFFFFFFFFFF8, v15);
    llvm::MDNode::deleteAsSubclass(this);
  }
}

_QWORD *llvm::ValueAsMetadata::get(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  _QWORD *v2;
  _QWORD *result;
  llvm::ValueAsMetadata *v4;
  unsigned int v5;
  uint64_t i;
  llvm::ValueAsMetadata *v7;
  uint64_t j;
  llvm::ValueAsMetadata *v9;

  v9 = this;
  v2 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(_QWORD ***)this + 432), &v9);
  result = (_QWORD *)v2[1];
  if (!result)
  {
    v4 = v9;
    *((_DWORD *)v9 + 5) |= 0x8000000u;
    v5 = *((unsigned __int8 *)v4 + 16);
    result = (_QWORD *)operator new();
    if (v4 && v5 <= 0x14)
    {
      *result = 1;
      result[1] = **(_QWORD **)v4;
      result[2] = 0;
      result[3] = 1;
      for (i = 4; i != 16; i += 3)
        result[i] = -4096;
      result[16] = v4;
    }
    else
    {
      v7 = v9;
      *result = 2;
      result[1] = **(_QWORD **)v7;
      result[2] = 0;
      result[3] = 1;
      for (j = 4; j != 16; j += 3)
        result[j] = -4096;
      result[16] = v7;
    }
    v2[1] = result;
  }
  return result;
}

void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(uint64_t a1, _BYTE *a2)
{
  unsigned int v2;
  _DWORD *v3;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  llvm::MDNode *v15;
  unint64_t v16;
  llvm::ValueAsMetadata *v17;
  _QWORD *v18;
  uint64_t *v19;
  llvm::MDNode **v20;
  uint64_t v21;
  _QWORD *v22;
  llvm::Value *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::MDNode *v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[25];

  v31[24] = *MEMORY[0x24BDAC8D0];
  v3 = (_DWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 16);
  if (v2 < 2)
    return;
  if ((v2 & 1) != 0)
  {
    v7 = (_QWORD *)(a1 + 120);
    v5 = (_QWORD *)(a1 + 24);
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 24);
    v6 = *(_DWORD *)(a1 + 32);
    v7 = &v5[3 * v6];
    if (!v6)
    {
      v8 = 0;
      v9 = *(_QWORD **)(a1 + 24);
      goto LABEL_12;
    }
  }
  v9 = v5;
  while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v9 += 3;
    if (v9 == v7)
    {
      v9 = v7;
      break;
    }
  }
  if ((v2 & 1) != 0)
  {
    v10 = (_QWORD *)(a1 + 120);
    goto LABEL_14;
  }
  v5 = *(_QWORD **)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 32);
LABEL_12:
  v10 = &v5[3 * v8];
LABEL_14:
  v29 = v31;
  v30 = 0x800000000;
  llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>((unsigned int *)&v29, v9, v7, v10);
  v11 = 126 - 2 * __clz(v30);
  if ((_DWORD)v30)
    v12 = v11;
  else
    v12 = 0;
  std::__introsort<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>((unint64_t)v29, (uint64_t *)v29 + 3 * v30, v12, 1);
  v13 = (uint64_t *)v29;
  if ((_DWORD)v30)
  {
    v14 = 24 * v30;
    do
    {
      v15 = (llvm::MDNode *)*v13;
      v27 = 0;
      v28 = v15;
      if (llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)v3, &v28, &v27))
      {
        v16 = v13[1];
        if (v16 <= 3)
        {
          v24 = *v13;
          *(_QWORD *)*v13 = a2;
          if (a2)
            llvm::MetadataTracking::track(v24, (uint64_t)a2, 2);
          llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::erase(v3, v13);
        }
        else
        {
          v17 = (llvm::ValueAsMetadata *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v16 & 2) != 0)
            __asm { BR              X9 }
          v18 = **(_QWORD ***)v17;
          v28 = canonicalizeMetadataForValue(v18, a2);
          v19 = (uint64_t *)(*v18 + 456);
          v20 = (llvm::MDNode **)((char *)v17 + 24);
          llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase((uint64_t)v19, (_QWORD *)v17 + 3);
          v21 = *((_QWORD *)v17 + 3);
          if (v21)
            llvm::MetadataTracking::untrack((uint64_t)v17 + 24, v21);
          *v20 = 0;
          v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v19, &v28);
          v23 = (llvm::Value *)v22[1];
          if (v23)
          {
            llvm::Value::doRAUW(v17, v23, (llvm::Value *)1);
            llvm::MetadataAsValue::~MetadataAsValue(v17);
            MEMORY[0x24BD1B3A4]();
          }
          else
          {
            v25 = v22;
            v26 = (uint64_t)v28;
            *v20 = v28;
            if (v26)
              llvm::MetadataTracking::track((uint64_t)v17 + 24, v26, (uint64_t)v17);
            v25[1] = v17;
          }
        }
      }
      v13 += 3;
      v14 -= 24;
    }
    while (v14);
    v13 = (uint64_t *)v29;
  }
  if (v13 != v31)
    free(v13);
}

void llvm::ReplaceableMetadataImpl::resolveAllUses(llvm::ReplaceableMetadataImpl *this, char a2)
{
  unsigned int v2;
  _QWORD *v3;
  char *v4;
  int v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[25];

  v26[24] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_DWORD *)this + 4);
  if (v2 < 2)
    return;
  if ((a2 & 1) == 0)
  {
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear((_QWORD *)this + 2);
    return;
  }
  if ((v2 & 1) != 0)
  {
    v6 = (char *)this + 120;
    v4 = (char *)this + 24;
  }
  else
  {
    v4 = (char *)*((_QWORD *)this + 3);
    v5 = *((_DWORD *)this + 8);
    v6 = &v4[24 * v5];
    if (!v5)
    {
      v7 = 0;
      v8 = (char *)*((_QWORD *)this + 3);
      goto LABEL_14;
    }
  }
  v8 = v4;
  while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v8 += 24;
    if (v8 == v6)
    {
      v8 = v6;
      break;
    }
  }
  if ((v2 & 1) != 0)
  {
    v9 = (char *)this + 120;
    goto LABEL_16;
  }
  v4 = (char *)*((_QWORD *)this + 3);
  v7 = *((_DWORD *)this + 8);
LABEL_14:
  v9 = &v4[24 * v7];
LABEL_16:
  v24 = v26;
  v25 = 0x800000000;
  llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>((unsigned int *)&v24, v8, v6, v9);
  v10 = 126 - 2 * __clz(v25);
  if ((_DWORD)v25)
    v11 = v10;
  else
    v11 = 0;
  std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>((uint64_t)v24, (uint64_t *)v24 + 3 * v25, v11, 1);
  llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear(v3);
  v12 = v24;
  if ((_DWORD)v25)
  {
    v13 = 24 * v25;
    v14 = (unint64_t *)((char *)v24 + 8);
    do
    {
      v16 = *v14;
      v14 += 3;
      v15 = v16;
      v17 = v16 & 2;
      if (v16 >= 4 && v17 != 0)
      {
        v19 = (_BYTE *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        v20 = llvm::MDNode::classof((_BYTE *)(v15 & 0xFFFFFFFFFFFFFFFCLL));
        if (v19)
          v21 = v20 == 0;
        else
          v21 = 1;
        if (!v21 && (v19[1] & 0x7F) != 2)
        {
          v22 = *((_DWORD *)v19 - 2);
          if (v22)
          {
            v23 = v22 - 1;
            *((_DWORD *)v19 - 2) = v23;
            if (!v23)
              llvm::MDNode::dropReplaceableUses((llvm::MDNode *)v19);
          }
        }
      }
      v13 -= 24;
    }
    while (v13);
    v12 = v24;
  }
  if (v12 != v26)
    free(v12);
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear(_QWORD *result)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 13;
    }
    else
    {
      v2 = *((_DWORD *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::shrink_and_clear(result);
      if (!v2)
      {
        v5 = 0;
LABEL_12:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[3 * v2];
    }
    do
    {
      *v3 = -4096;
      v3 += 3;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_12;
  }
  return result;
}

unint64_t llvm::ContextAndReplaceableUses::getOrCreateReplaceableUses(llvm::ContextAndReplaceableUses *this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  _QWORD *v7;

  if ((*(_QWORD *)this & 4) == 0)
  {
    v2 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
    v3 = (_QWORD *)operator new();
    *v3 = v2;
    v3[1] = 0;
    v3[2] = 1;
    for (i = 3; i != 15; i += 3)
      v3[i] = -4096;
    v7 = v3;
    llvm::ContextAndReplaceableUses::makeReplaceable((uint64_t *)this, (uint64_t *)&v7);
    v5 = (uint64_t)v7;
    v7 = 0;
    if (v5)
      std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100]((uint64_t)&v7, v5);
  }
  return *(_QWORD *)this & ((uint64_t)(*(_QWORD *)this << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
}

void llvm::ValueAsMetadata::handleDeletion(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  llvm::ValueAsMetadata *v5;
  _QWORD *v6;

  v2 = ***(_QWORD ***)this;
  v5 = this;
  v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v2 + 432), &v5, &v6))v3 = v6 == (_QWORD *)(*(_QWORD *)(v2 + 432) + 16 * *(unsigned int *)(v2 + 448));
  else
    v3 = 1;
  if (!v3)
  {
    v4 = v6[1];
    *v6 = -8192;
    *(int32x2_t *)(v2 + 440) = vadd_s32(*(int32x2_t *)(v2 + 440), (int32x2_t)0x1FFFFFFFFLL);
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v4 + 8, 0);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 24) & 1) == 0)
        MEMORY[0x24BD1B398](*(_QWORD *)(v4 + 32), 8);
      MEMORY[0x24BD1B3A4](v4, 0x1020C4072C728BCLL);
    }
  }
}

uint64_t llvm::ValueAsMetadata::handleRAUW(llvm::ValueAsMetadata *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v5;
  uint64_t result;
  llvm::Value *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t LocalFunctionMetadata;
  uint64_t v13;
  _QWORD *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::ValueAsMetadata *v17;
  _QWORD *v18;

  v16 = a2;
  v5 = ***(_QWORD ***)this;
  v17 = this;
  v18 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v5 + 432), &v17, &v18);
  v8 = v18;
  if ((_DWORD)result)
    v9 = v18 == (_QWORD *)(*(_QWORD *)(v5 + 432) + 16 * *(unsigned int *)(v5 + 448));
  else
    v9 = 1;
  if (v9)
    return result;
  *((_DWORD *)this + 5) &= ~0x8000000u;
  v10 = v8[1];
  *v8 = -8192;
  *(int32x2_t *)(v5 + 440) = vadd_s32(*(int32x2_t *)(v5 + 440), (int32x2_t)0x1FFFFFFFFLL);
  v11 = *((unsigned __int8 *)a2 + 16);
  if (*(_BYTE *)v10 == 2)
  {
    if (v11 <= 0x14)
    {
      v14 = llvm::ValueAsMetadata::get(a2, v7);
LABEL_15:
      v13 = v10 + 8;
      goto LABEL_16;
    }
    if (getLocalFunctionMetadata(this))
    {
      if (getLocalFunctionMetadata(a2))
      {
        LocalFunctionMetadata = getLocalFunctionMetadata(this);
        if (LocalFunctionMetadata != getLocalFunctionMetadata(a2))
          goto LABEL_10;
      }
    }
LABEL_12:
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(v5 + 432), &v16);
    v14 = *(_QWORD **)(result + 8);
    if (!v14)
    {
      v15 = v16;
      *((_DWORD *)v16 + 5) |= 0x8000000u;
      *(_QWORD *)(v10 + 128) = v15;
      *(_QWORD *)(result + 8) = v10;
      return result;
    }
    goto LABEL_15;
  }
  if (v11 < 0x15)
    goto LABEL_12;
LABEL_10:
  v13 = v10 + 8;
  v14 = 0;
LABEL_16:
  llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v13, v14);
  if ((*(_BYTE *)(v10 + 24) & 1) == 0)
    MEMORY[0x24BD1B398](*(_QWORD *)(v10 + 32), 8);
  return MEMORY[0x24BD1B3A4](v10, 0x1020C4072C728BCLL);
}

uint64_t getLocalFunctionMetadata(llvm::Value *a1)
{
  llvm::Value *v1;
  uint64_t v2;

  if (!a1 || *((_BYTE *)a1 + 16) != 21)
  {
    v2 = *((_QWORD *)a1 + 5);
    if (!v2)
      return 0;
    v1 = *(llvm::Value **)(v2 + 56);
    if (!v1)
      return 0;
    return llvm::Value::getMetadata(v1, 0);
  }
  v1 = (llvm::Value *)*((_QWORD *)a1 + 3);
  if (v1)
    return llvm::Value::getMetadata(v1, 0);
  return 0;
}

uint64_t *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)a1 + 24, a3 + 25, 3);
  v11 = (_QWORD *)v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

char *llvm::MDNode::operator new(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = 2 * (a3 != 0);
  if (v5 <= a2)
    LODWORD(v5) = a2;
  v6 = 8 * v5 + 16;
  if (a2 >= 0x10)
    v7 = 32;
  else
    v7 = v6;
  v8 = (char *)operator new(v7 + a1) + v7;
  llvm::MDNode::Header::Header((uint64_t)(v8 - 16), a2, a3);
  return v8;
}

uint64_t llvm::MDNode::MDNode(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = a3;
  *(_BYTE *)(a1 + 1) = a4 & 0x7F;
  *(_WORD *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  if (!a6)
  {
    LODWORD(v12) = 0;
    if (!a8)
      goto LABEL_9;
    goto LABEL_7;
  }
  v12 = 0;
  v13 = 8 * a6;
  do
  {
    llvm::MDNode::setOperand(a1, v12, *(_QWORD *)(a5 + 8 * v12));
    ++v12;
    v13 -= 8;
  }
  while (v13);
  if (a8)
  {
LABEL_7:
    v14 = 8 * a8;
    do
    {
      v15 = *a7++;
      llvm::MDNode::setOperand(a1, v12, v15);
      LODWORD(v12) = v12 + 1;
      v14 -= 8;
    }
    while (v14);
  }
LABEL_9:
  if ((*(_BYTE *)(a1 + 1) & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands(a1);
  return a1;
}

uint64_t *llvm::MDNode::setOperand(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 - 16);
  if ((v4 & 2) != 0)
    v5 = *(_QWORD *)(a1 - 32);
  else
    v5 = a1 - 16 - 8 * ((v4 >> 2) & 0xF);
  v6 = (uint64_t *)(v5 + 8 * a2);
  if ((*(_BYTE *)(a1 + 1) & 0x7F) != 0)
    v7 = 0;
  else
    v7 = a1;
  return llvm::MDOperand::reset(v6, a3, v7);
}

uint64_t llvm::MDNode::countUnresolvedOperands(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  _BYTE **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = this;
  v2 = *(_QWORD *)(this - 16);
  if ((v2 & 2) != 0)
  {
    v3 = *(_BYTE ***)(this - 32);
    v4 = *(unsigned int *)(this - 24);
  }
  else
  {
    v3 = (_BYTE **)(this - 16 - 8 * ((v2 >> 2) & 0xF));
    v4 = (v2 >> 6) & 0xF;
  }
  v5 = 0;
  if (v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = (uint64_t)*v3;
      if (*v3 && (this = llvm::MDNode::classof(*v3), (_DWORD)this))
        v8 = (*(_BYTE *)(v7 + 1) & 0x7F) == 2 || *(_DWORD *)(v7 - 8) != 0;
      else
        v8 = 0;
      v5 += v8;
      ++v3;
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(v1 - 8) = v5;
  return this;
}

uint64_t llvm::MDNode::Header::Header(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  *(_DWORD *)(a1 + 8) = 0;
  v4 = 2 * (a3 != 0);
  if (v4 <= a2)
    LOBYTE(v4) = a2;
  v5 = 4 * (v4 & 0xF);
  if (a2 >= 0x10)
    v5 = 8;
  v6 = (a3 != 0) | (2 * (a2 > 0xF)) | *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFC0 | v5;
  if (a2 >= 0x10)
  {
    *(_QWORD *)(a1 - 8) = 0;
    *(_QWORD *)a1 = v6 & 0xFFFFFFFFFFFFFC3FLL;
    *(_QWORD *)(a1 - 16) = a1;
    llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>(a1 - 16, a2);
  }
  else
  {
    *(_QWORD *)a1 = (a3 != 0) | (unint64_t)((2 * (a2 > 0xF)) & 0x3F) | *(_QWORD *)a1 & 0xFFFFFFFFFFFFFC00 | v5 & 0xFFFFFFFFFFFFFC3FLL | ((a2 & 0xF) << 6);
    v7 = v4 & 0xF;
    if (v7)
      bzero((void *)(a1 - 8 * v7), 8 * v7);
  }
  return a1;
}

void llvm::MDNode::Header::~Header(char **this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  if ((*this & 2) != 0)
  {
    llvm::SmallVector<llvm::MDOperand,0u>::~SmallVector(this - 2);
  }
  else
  {
    v1 = ((unint64_t)*this >> 2) & 0xF;
    if (v1)
    {
      v2 = -8 * v1;
      v3 = (uint64_t *)(this - 1);
      do
      {
        if (*v3)
          llvm::MetadataTracking::untrack((uint64_t)v3, *v3);
        --v3;
        v2 += 8;
      }
      while (v2);
    }
  }
}

uint64_t *llvm::MDOperand::reset(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = result;
  if (*result)
    result = (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)result, *result);
  *v5 = a2;
  if (a2)
    return (uint64_t *)llvm::MetadataTracking::track((uint64_t)v5, a2, a3 | 2);
  return result;
}

void llvm::MDNode::dropReplaceableUses(llvm::MDNode *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if ((v1 & 4) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 1) = *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
    llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v1 & 0xFFFFFFFFFFFFFFF8), 1);
    v3 = 0;
    std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100]((uint64_t)&v3, v2);
  }
}

void llvm::MDNode::storeDistinctInContext(llvm::MDNode *this)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *((_BYTE *)this + 1) = *((_BYTE *)this + 1) & 0x80 | 1;
  v2 = *(unsigned __int8 *)this;
  if ((v2 - 9) >= 0x1B && (v2 - 5) >= 3)
    *((_DWORD *)this + 1) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v4 = *(_QWORD *)v4;
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(*(_QWORD *)v4 + 1240);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 1248);
  if ((unint64_t)v6 >= v7)
  {
    v9 = v5[154];
    v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v7 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v5 + 156), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = this;
    v8 = v15 + 8;
    v17 = (char *)v5[155];
    v18 = (char *)v5[154];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)v5[154];
    }
    v5[154] = v15;
    v5[155] = v8;
    v5[156] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v6 = this;
    v8 = v6 + 1;
  }
  v5[155] = v8;
}

void llvm::MDNode::resolveCycles(llvm::MDNode *this)
{
  unint64_t v2;
  llvm::MDNode **v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MDNode *v6;

  if ((*((_BYTE *)this + 1) & 0x7F) == 2 || *((_DWORD *)this - 2))
  {
    *((_DWORD *)this - 2) = 0;
    llvm::MDNode::dropReplaceableUses(this);
    v2 = *((_QWORD *)this - 2);
    if ((v2 & 2) != 0)
    {
      v3 = (llvm::MDNode **)*((_QWORD *)this - 4);
      v4 = *((unsigned int *)this - 6);
      if (!*((_DWORD *)this - 6))
        return;
    }
    else
    {
      v3 = (llvm::MDNode **)((char *)this - 8 * ((v2 >> 2) & 0xF) - 16);
      v4 = (v2 >> 6) & 0xF;
      if (!v4)
        return;
    }
    v5 = 8 * v4;
    do
    {
      v6 = *v3;
      if (*v3 && llvm::MDNode::classof(*v3) && ((*((_BYTE *)v6 + 1) & 0x7F) == 2 || *((_DWORD *)v6 - 2)))
        llvm::MDNode::resolveCycles(v6);
      ++v3;
      v5 -= 8;
    }
    while (v5);
  }
}

void llvm::MDNode::uniquify(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

uint64_t sub_24A9F542C(int a1, int a2, uint64_t a3, unint64_t *a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[4];
  int v47;

  v37 = llvm::MDNodeOpsKey::calculateHash((llvm::MDNodeOpsKey *)v35, 0, a3, a4);
  *(_DWORD *)(v35 + 4) = v37;
  v38 = *(_QWORD *)(v35 + 8);
  v39 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
  if ((v38 & 4) != 0)
    v39 = (_QWORD *)*v39;
  v40 = *v39 + 480;
  *(_QWORD *)(v36 - 40) = v35;
  v46[0] = 0;
  v46[1] = 0;
  v41 = *(_QWORD *)(v35 - 16);
  if ((v41 & 2) != 0)
  {
    v42 = *(_QWORD *)(v35 - 32);
    v43 = *(unsigned int *)(v35 - 24);
  }
  else
  {
    v42 = v35 - 16 - 8 * ((v41 >> 2) & 0xF);
    v43 = (v41 >> 6) & 0xF;
  }
  v46[2] = v42;
  v46[3] = v43;
  v47 = v37;
  v44 = llvm::getUniqued<llvm::MDTuple,llvm::MDNodeInfo<llvm::MDTuple>>(v40, (uint64_t)v46);
  if (!v44)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v40, (_QWORD *)(v36 - 40), (uint64_t)v46);
    return *(_QWORD *)(v36 - 40);
  }
  return v44;
}

void llvm::MDNode::deleteAsSubclass(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

void sub_24A9F6348()
{
  uint64_t v0;
  char **v1;
  void *v2;

  llvm::ContextAndReplaceableUses::~ContextAndReplaceableUses((llvm::ContextAndReplaceableUses *)(v0 + 8));
  v1 = (char **)(v0 - 16);
  v2 = (void *)(v0 - ((2 * *(_DWORD *)(v0 - 16)) & 0x78) - 16);
  llvm::MDNode::Header::~Header(v1);
  operator delete(v2);
}

void sub_24A9F637C()
{
  llvm::MDNode *v0;

  llvm::MDNode::dropAllReferences(v0);
  sub_24A9F6348();
}

void sub_24A9F6388()
{
  llvm::DIExpression *v0;

  llvm::DIExpression::~DIExpression(v0);
  JUMPOUT(0x24A9F6350);
}

void sub_24A9F6394()
{
  llvm::DIEnumerator *v0;

  llvm::DIEnumerator::~DIEnumerator(v0);
  JUMPOUT(0x24A9F6350);
}

void sub_24A9F63A0()
{
  llvm::DIArgList *v0;

  llvm::DIArgList::~DIArgList(v0);
  JUMPOUT(0x24A9F6350);
}

void llvm::MDNode::dropAllReferences(llvm::MDNode *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this - 2);
  if ((v2 & 2) != 0)
  {
    v3 = *((_DWORD *)this - 6);
    if (!v3)
      goto LABEL_7;
  }
  else
  {
    v3 = (v2 >> 6) & 0xF;
    if (!v3)
      goto LABEL_7;
  }
  for (i = 0; i != v3; ++i)
    llvm::MDNode::setOperand((uint64_t)this, i, 0);
LABEL_7:
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 4) != 0)
  {
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 16) >= 2u)
    {
      llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::clear((_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 16));
      v6 = (_QWORD *)(*((_QWORD *)this + 1) & ((uint64_t)(*((_QWORD *)this + 1) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8);
    }
    *((_QWORD *)this + 1) = *v6 & 0xFFFFFFFFFFFFFFFBLL;
    v7 = 0;
    std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100]((uint64_t)&v7, (uint64_t)v6);
  }
}

void llvm::MDNode::eraseFromStore(llvm::MDNode *this)
{
  __asm { BR              X10 }
}

uint64_t sub_24A9F648C(uint64_t a1)
{
  uint64_t v1;
  int32x2_t **v2;
  int32x2_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (int32x2_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (int32x2_t **)*v2;
  v3 = *v2;
  v4 = (uint64_t *)&(*v2)[60];
  v6 = a1;
  v7 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>(v4, (uint64_t)&v6, &v7);
  if ((_DWORD)result)
  {
    *v7 = -8192;
    v3[61] = vadd_s32(v3[61], (int32x2_t)0x1FFFFFFFFLL);
  }
  return result;
}

llvm::MDNode *llvm::MDTuple::getImpl(_QWORD *a1, llvm::hashing::detail::hash_state *this, unint64_t a3, unint64_t *a4, int a5)
{
  int v5;
  int v9;
  llvm::MDNode *result;
  BOOL v12;
  char *v13;
  llvm::MDNode *v14;
  _QWORD v15[4];
  int v16;

  v5 = (int)a4;
  if ((_DWORD)a4)
  {
    v9 = 0;
LABEL_8:
    v13 = llvm::MDNode::operator new(16, a3, v5);
    v14 = (llvm::MDNode *)llvm::MDNode::MDNode((uint64_t)v13, (uint64_t)a1, 4, v5, (uint64_t)this, a3, 0, 0);
    *((_DWORD *)v14 + 1) = v9;
    return llvm::MDNode::storeImpl<llvm::MDTuple,llvm::DenseSet<llvm::MDTuple*,llvm::MDNodeInfo<llvm::MDTuple>>>(v14, v5, *a1 + 480);
  }
  v15[0] = this;
  v15[1] = a3;
  v15[2] = 0;
  v15[3] = 0;
  v16 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(this, (uint64_t)this + 8 * a3, a3, a4);
  result = (llvm::MDNode *)llvm::getUniqued<llvm::MDTuple,llvm::MDNodeInfo<llvm::MDTuple>>(*a1 + 480, (uint64_t)v15);
  if (result)
    v12 = 1;
  else
    v12 = a5 == 0;
  if (!v12)
  {
    v9 = v16;
    goto LABEL_8;
  }
  return result;
}

uint64_t llvm::getUniqued<llvm::MDTuple,llvm::MDNodeInfo<llvm::MDTuple>>(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t *v5;

  v5 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::MDTuple>>((uint64_t *)a1, a2, &v5);
  result = 0;
  if (v3)
  {
    if (v5 != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
      return *v5;
  }
  return result;
}

llvm::MDNode *llvm::MDNode::storeImpl<llvm::MDTuple,llvm::DenseSet<llvm::MDTuple*,llvm::MDNodeInfo<llvm::MDTuple>>>(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, &v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

void llvm::MDNode::deleteTemporary(llvm::MDNode *this, llvm::MDNode *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if ((v3 & 4) != 0)
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v3 & 0xFFFFFFFFFFFFFFF8, 0);
  llvm::MDNode::deleteAsSubclass(this);
}

void llvm::MDNode::replaceOperandWith(_BYTE *a1, unsigned int a2, llvm::MDNode *a3)
{
  _BYTE *v3;
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  v3 = a1 - 16;
  v4 = *((_QWORD *)a1 - 2);
  if ((v4 & 2) != 0)
    v5 = (_BYTE *)*((_QWORD *)a1 - 4);
  else
    v5 = &v3[-8 * ((v4 >> 2) & 0xF)];
  if (*(llvm::MDNode **)&v5[8 * a2] != a3)
  {
    if ((a1[1] & 0x7F) != 0)
    {
      llvm::MDNode::setOperand((uint64_t)a1, a2, (uint64_t)a3);
    }
    else
    {
      if ((v4 & 2) != 0)
        v6 = (_BYTE *)*((_QWORD *)a1 - 4);
      else
        v6 = &v3[-8 * ((v4 >> 2) & 0xF)];
      llvm::MDNode::handleChangedOperand((llvm::MDNode *)a1, (uint64_t)&v6[8 * a2], a3);
    }
  }
}

void llvm::NamedMDNode::~NamedMDNode(llvm::NamedMDNode *this)
{
  char **v2;

  llvm::SmallVectorImpl<llvm::TrackingMDRef>::clear(*((_QWORD *)this + 6));
  v2 = llvm::SmallVector<llvm::MDOperand,0u>::~SmallVector(*((char ***)this + 6));
  MEMORY[0x24BD1B3A4](v2, 0x1080C40ED926357);
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::MDNode *&>(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = (uint64_t *)(*(_QWORD *)a1 + 8 * v3);
  v6 = *a2;
  *v5 = v6;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)v5, v6, 2);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
    v4 = *(_QWORD *)a1;
  }
  v7 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return v4 + 8 * v7 - 8;
}

unint64_t llvm::SmallVectorImpl<llvm::TrackingMDRef>::clear(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = 8 * v2;
    v4 = *(_QWORD *)result - 8;
    do
    {
      result = v4 + v3;
      v5 = *(_QWORD *)(v4 + v3);
      if (v5)
        result = llvm::MetadataTracking::untrack(result, v5);
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void llvm::MDAttachments::getAll(uint64_t *a1, unsigned int *a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v5 = *a1;
    v6 = *a1 + 16 * v4;
    do
    {
      llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(a2, (_DWORD *)v5, (uint64_t *)(v5 + 8));
      v5 += 16;
    }
    while (v5 != v6);
  }
  if (a2[2] > 1)
    llvm::stable_sort<llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>> &,llvm::less_first>((uint64_t)a2, a3);
}

void llvm::stable_sort<llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>> &,llvm::less_first>(uint64_t a1, __n128 a2)
{
  __n128 *v2;
  unint64_t v3;
  __n128 *v4;
  __n128 *v5;
  uint64_t v6;
  __n128 v7;
  char v8;

  v2 = *(__n128 **)a1;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = (__n128 *)(*(_QWORD *)a1 + 16 * v3);
  if ((_DWORD)v3)
  {
    v5 = (__n128 *)std::get_temporary_buffer[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *>>(*(unsigned int *)(a1 + 8));
    std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v2, v4, (uint64_t)&v8, v3, v5, v6, v7);
    if (v5)
      operator delete(v5);
  }
  else
  {
    std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(*(__n128 **)a1, v4, (uint64_t)&v8, v3, 0, 0, a2);
  }
}

BOOL llvm::MDAttachments::erase(llvm::MDAttachments *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;

  v2 = *((unsigned int *)this + 2);
  if (!(_DWORD)v2)
    return 0;
  v5 = *(_QWORD *)this;
  if ((_DWORD)v2 == 1 && *(_DWORD *)(v5 + 16 * v2 - 16) == a2)
  {
    *((_DWORD *)this + 2) = 0;
    v8 = *(_QWORD *)(v5 + 8);
    v6 = v5 + 8;
    v7 = v8;
    if (v8)
      llvm::MetadataTracking::untrack(v6, v7);
    return 1;
  }
  else
  {
    v10 = 0;
    v11 = 16 * v2;
    v12 = (_DWORD *)(v5 + 16 * v2);
    while (*(_DWORD *)(v5 + v10) != a2)
    {
      v10 += 16;
      if (v11 == v10)
        goto LABEL_19;
    }
    v12 = (_DWORD *)(v5 + v10);
    if (v11 == v10 || v11 - 16 == v10)
    {
LABEL_19:
      v17 = v2;
      goto LABEL_20;
    }
    v13 = v11 - v10 - 16;
    v14 = (unsigned __int8 **)(v12 + 6);
    do
    {
      v15 = *((_DWORD *)v14 - 2);
      if (v15 != a2)
      {
        v16 = (uint64_t *)(v12 + 2);
        *v12 = v15;
        v12 += 4;
        llvm::TrackingMDRef::operator=(v16, v14);
      }
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
    v5 = *(_QWORD *)this;
    v17 = *((unsigned int *)this + 2);
LABEL_20:
    llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::erase((uint64_t *)this, v12, (_DWORD *)(v5 + 16 * v17));
    return (_DWORD)v2 != *((_DWORD *)this + 2);
  }
}

uint64_t llvm::MDAttachments::insert(llvm::MDAttachments *this, int a2, llvm::MDNode *a3)
{
  uint64_t result;
  int v5;
  llvm::MDNode *v6;

  v5 = a2;
  v6 = a3;
  llvm::MetadataTracking::track((uint64_t)&v6, (uint64_t)a3, 2);
  result = llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back((uint64_t)this, (unint64_t)&v5);
  if (v6)
    return llvm::MetadataTracking::untrack((uint64_t)&v6, (uint64_t)v6);
  return result;
}

unint64_t llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;

  result = llvm::SmallVectorTemplateCommon<llvm::MDAttachments::Attachment,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>>(a1, a2, 1);
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v4 + 16 * v5) = *(_DWORD *)result;
  v6 = v4 + 16 * v5;
  v7 = (_QWORD *)(result + 8);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(result + 8);
  v8 = v6 + 8;
  v9 = *(unsigned __int8 **)(result + 8);
  if (v9)
  {
    result = llvm::MetadataTracking::retrack(result + 8, v9, v8);
    *v7 = 0;
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v5 + 1;
  return result;
}

uint64_t llvm::Value::getMetadata(llvm::Value *this, int a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v9;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v3 = (uint64_t *)(***(_QWORD ***)this + 2504);
  v9 = this;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v3, (uint64_t *)&v9);
  v5 = *((unsigned int *)v4 + 4);
  if (!(_DWORD)v5)
    return 0;
  v6 = v4[1] + 8;
  v7 = 16 * v5;
  while (*(_DWORD *)(v6 - 8) != a2)
  {
    v6 += 16;
    v7 -= 16;
    if (!v7)
      return 0;
  }
  return *(_QWORD *)v6;
}

_QWORD *llvm::Value::getMetadata(_QWORD *result, int a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;

  if ((*((_BYTE *)result + 23) & 0x20) != 0)
  {
    v5 = (uint64_t *)(**(_QWORD **)*result + 2504);
    v9 = result;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v5, (uint64_t *)&v9);
    v6 = *((unsigned int *)result + 4);
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      v8 = (uint64_t *)(result[1] + 8);
      do
      {
        if (*((_DWORD *)v8 - 2) == a2)
          result = llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, *v8);
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  return result;
}

void llvm::Value::getAllMetadata(uint64_t ***a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  __n128 v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v8;

  if ((*((_BYTE *)a1 + 23) & 0x20) != 0)
  {
    v3 = ***a1;
    v7 = a1;
    v8 = 0;
    v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)(v3 + 2504), &v7, &v8);
    v6 = v8;
    if (!v4)
      v6 = *(_QWORD *)(v3 + 2504) + 40 * *(unsigned int *)(v3 + 2520);
    llvm::MDAttachments::getAll((uint64_t *)(v6 + 8), a2, v5);
  }
}

uint64_t llvm::Value::setMetadata(uint64_t this, int a2, llvm::MDNode *a3)
{
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  llvm::MDAttachments *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = this;
  if (a3)
  {
    v6 = (uint64_t *)(***(_QWORD ***)this + 2504);
    v12 = v4;
    v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v6, &v12);
    v8 = (llvm::MDAttachments *)(v7 + 1);
    if (!*((_DWORD *)v7 + 4))
      *(_DWORD *)(v4 + 20) |= 0x20000000u;
    llvm::MDAttachments::erase((llvm::MDAttachments *)(v7 + 1), a2);
    return llvm::MDAttachments::insert(v8, a2, a3);
  }
  else if ((*(_BYTE *)(this + 23) & 0x20) != 0)
  {
    v9 = (uint64_t *)(***(_QWORD ***)this + 2504);
    v12 = v4;
    v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v9, &v12);
    this = llvm::MDAttachments::erase((llvm::MDAttachments *)(v10 + 1), a2);
    if (!*((_DWORD *)v10 + 4))
    {
      v11 = ***(_QWORD ***)v4 + 2504;
      v12 = v4;
      this = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::erase(v11, &v12);
      *(_DWORD *)(v4 + 20) &= ~0x20000000u;
    }
  }
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::erase(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)v6;
    llvm::SmallVector<llvm::MDAttachments::Attachment,1u>::~SmallVector((char **)(v6 + 8));
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t llvm::Value::addMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  int v5;
  uint64_t *v6;
  _QWORD *v7;
  llvm::Value *v9;

  v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x20000000) == 0)
    *((_DWORD *)this + 5) = v5 | 0x20000000;
  v6 = (uint64_t *)(***(_QWORD ***)this + 2504);
  v9 = this;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v6, (uint64_t *)&v9);
  return llvm::MDAttachments::insert((llvm::MDAttachments *)(v7 + 1), a2, a3);
}

BOOL llvm::Value::eraseMetadata(llvm::Value *this, int a2)
{
  _BOOL8 v2;
  uint64_t *v5;
  _QWORD *v6;
  llvm::Value *v8;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v5 = (uint64_t *)(***(_QWORD ***)this + 2504);
  v8 = this;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(v5, (uint64_t *)&v8);
  v2 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v6 + 1), a2);
  if (!*((_DWORD *)v6 + 4))
    llvm::Value::clearMetadata((uint64_t)this);
  return v2;
}

uint64_t llvm::Value::clearMetadata(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(this + 23) & 0x20) != 0)
  {
    v1 = this;
    v2 = ***(_QWORD ***)this + 2504;
    v3 = v1;
    this = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::erase(v2, &v3);
    *(_DWORD *)(v1 + 20) &= ~0x20000000u;
  }
  return this;
}

uint64_t *llvm::Instruction::setMetadata(uint64_t *result, uint64_t *a2, unint64_t a3, llvm::MDNode *a4)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v5 = result;
  if (a4 || result[6] || (*((_BYTE *)result + 23) & 0x20) != 0)
  {
    v6 = **(_QWORD **)*result;
    v8 = *(_DWORD *)(v6 + 2492);
    v7 = *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(v6 + 2480), a2, a3, &v8)+ 8);
    return llvm::Instruction::setMetadata(v5, v7, a4);
  }
  return result;
}

uint64_t *llvm::Instruction::setMetadata(uint64_t *this, int a2, llvm::MDNode *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;

  v5 = (uint64_t)this;
  if (!a3 && !this[6] && (*((_BYTE *)this + 23) & 0x20) == 0)
    return this;
  if (a2 == 38)
  {
    llvm::Instruction::updateDIAssignIDMapping((uint64_t ***)this, (uint64_t)a3);
    return (uint64_t *)llvm::Value::setMetadata(v5, a2, a3);
  }
  if (a2)
    return (uint64_t *)llvm::Value::setMetadata(v5, a2, a3);
  v6 = (unsigned __int8 *)a3;
  if (a3)
    llvm::MetadataTracking::track((uint64_t)&v6, (uint64_t)a3, 2);
  this = llvm::TrackingMDRef::operator=((uint64_t *)(v5 + 48), &v6);
  if (v6)
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v6, (uint64_t)v6);
  return this;
}

void llvm::Instruction::updateDIAssignIDMapping(uint64_t ***this, uint64_t a2)
{
  uint64_t v4;
  uint64_t Metadata;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = ***this;
  if (!this[6] && (*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_22;
  Metadata = llvm::Value::getMetadata((llvm::Value *)this, 38);
  if (!Metadata)
    goto LABEL_22;
  if (Metadata == a2)
    return;
  v16 = Metadata;
  v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(v4 + 2528), &v16, &v17))v6 = v17;
  else
    v6 = *(_QWORD *)(v4 + 2528) + 32 * *(unsigned int *)(v4 + 2544);
  v7 = *(char **)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 16);
  v9 = &v7[8 * v8];
  if ((_DWORD)v8)
  {
    v10 = 0;
    while (*(uint64_t ****)&v7[v10] != this)
    {
      v10 += 8;
      if (8 * v8 == v10)
      {
        v11 = &v7[8 * v8];
        goto LABEL_15;
      }
    }
    v11 = &v7[v10];
LABEL_15:
    if ((_DWORD)v8 == 1)
    {
      if (v7 != (char *)(v6 + 24))
        free(v7);
      *(_QWORD *)v6 = -8192;
      *(int32x2_t *)(v4 + 2536) = vadd_s32(*(int32x2_t *)(v4 + 2536), (int32x2_t)0x1FFFFFFFFLL);
      goto LABEL_22;
    }
  }
  else
  {
    v11 = *(char **)(v6 + 8);
  }
  if (v9 != v11 + 8)
  {
    memmove(v11, v11 + 8, v9 - (v11 + 8));
    LODWORD(v8) = *(_DWORD *)(v6 + 16);
  }
  *(_DWORD *)(v6 + 16) = v8 - 1;
LABEL_22:
  if (!a2)
    return;
  v17 = 0;
  v13 = v17;
  if ((v12 & 1) == 0)
  {
    v14 = *(_DWORD *)(v4 + 2536);
    v15 = *(_DWORD *)(v4 + 2544);
    if (4 * v14 + 4 >= 3 * v15)
    {
      v15 *= 2;
    }
    else if (v15 + ~v14 - *(_DWORD *)(v4 + 2540) > v15 >> 3)
    {
LABEL_26:
      ++*(_DWORD *)(v4 + 2536);
      if (*(_QWORD *)v13 != -4096)
        --*(_DWORD *)(v4 + 2540);
      *(_QWORD *)v13 = a2;
      *(_QWORD *)(v13 + 8) = v13 + 24;
      *(_QWORD *)(v13 + 16) = 0x100000000;
      goto LABEL_29;
    }
    llvm::DenseMap<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>,llvm::DenseMapInfo<llvm::DIAssignID *,void>,llvm::detail::DenseMapPair<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>>>::grow(v4 + 2528, v15);
    v17 = 0;
    v13 = v17;
    goto LABEL_26;
  }
LABEL_29:
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)(v13 + 8), (uint64_t)this);
}

void llvm::Instruction::getAllMetadataImpl(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;

  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, 0, v4);
  llvm::Value::getAllMetadata((uint64_t ***)a1, a2);
}

uint64_t *llvm::ContextAndReplaceableUses::makeReplaceable(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *result;
  if ((*result & 4) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(_BYTE *)(v5 + 16) & 1) == 0)
        MEMORY[0x24BD1B398](*(_QWORD *)(v5 + 24), 8);
      result = (uint64_t *)MEMORY[0x24BD1B3A4](v5, 0x1020C408B843D01);
    }
  }
  v6 = *a2;
  *a2 = 0;
  *v3 = v6 | 4;
  return result;
}

void std::default_delete<llvm::ReplaceableMetadataImpl>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      MEMORY[0x24BD1B398](*(_QWORD *)(a2 + 24), 8);
    JUMPOUT(0x24BD1B3A4);
  }
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::InsertIntoBucketImpl<void *>(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::grow((uint64_t)a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[96];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::moveFromOldBuckets(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x24BD1B398);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::moveFromOldBuckets(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[3 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::try_emplace<std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::LookupBucketFor<void *>(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 16);
    }
    v14 = 0;
    v15 = v10 + 24 * v11;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>,void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::InsertIntoBucketImpl<void *>((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(_DWORD *)(a1 + 16);
    }
    v15 = v12 + 24 * v13;
    v14 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

unsigned int *llvm::SmallVectorImpl<std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::append<llvm::DenseMapIterator<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>,false>,void>(unsigned int *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = a2;
  v7 = result;
  if (a2 != a4)
  {
    v8 = 0;
    v9 = a2;
    while (1)
    {
      v9 += 3;
      if (v9 == a3)
      {
        v9 = a3;
LABEL_7:
        ++v8;
        if (v9 == a4)
          goto LABEL_10;
      }
      else if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_7;
      }
    }
  }
  v8 = 0;
LABEL_10:
  v10 = result[2];
  if (v8 + v10 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8 + v10, 24);
    LODWORD(v10) = v7[2];
  }
  if (v6 != a4)
  {
    v11 = *(_QWORD *)v7 + 24 * v10;
    do
    {
      v12 = *(_OWORD *)v6;
      *(_QWORD *)(v11 + 16) = v6[2];
      *(_OWORD *)v11 = v12;
      while (1)
      {
        v6 += 3;
        if (v6 == a3)
          break;
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_19;
      }
      v6 = a3;
LABEL_19:
      v11 += 24;
    }
    while (v6 != a4);
    LODWORD(v10) = v7[2];
  }
  v7[2] = v10 + v8;
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *j;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _QWORD *v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *k;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t *m;
  unint64_t v127;

  v7 = (uint64_t *)result;
LABEL_2:
  i = v7;
  while (2)
  {
    v7 = i;
    v9 = (char *)a2 - (char *)i;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v54 = *(a2 - 2);
        v55 = i[1];
        if (v54 < v55 || v55 >= v54 && *(a2 - 1) < (unint64_t)i[2])
        {
          v56 = *i;
          *i = *(a2 - 3);
          *(a2 - 3) = v56;
          v57 = i[1];
          i[1] = *(a2 - 2);
          *(a2 - 2) = v57;
          v58 = i[2];
          i[2] = *(a2 - 1);
          *(a2 - 1) = v58;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, i + 3, a2 - 3);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, i + 3, i + 6, a2 - 3);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, i + 3, i + 6, i + 9, a2 - 3);
      default:
        if (v9 > 575)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v75 = (v10 - 2) >> 1;
            v76 = v75;
            while (1)
            {
              v77 = v76;
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = &i[3 * v78];
                if (2 * v77 + 2 < (uint64_t)v10)
                {
                  v80 = i[3 * v78 + 1];
                  v81 = v79[4];
                  if (v80 < v81 || v81 >= v80 && i[3 * v78 + 2] < (unint64_t)v79[5])
                  {
                    v79 += 3;
                    v78 = 2 * v77 + 2;
                  }
                }
                v82 = &i[3 * v77];
                v85 = v82[1];
                v83 = v82 + 1;
                v84 = v85;
                v86 = v79[1];
                if (v86 >= v85)
                {
                  v87 = &i[3 * v77];
                  if (v84 < v86)
                  {
                    v88 = v87[2];
LABEL_142:
                    v89 = *v87;
                    *v87 = *v79;
                    *v83 = v79[1];
                    v87[2] = v79[2];
                    if (v75 >= v78)
                    {
                      while (1)
                      {
                        v91 = 2 * v78;
                        v78 = (2 * v78) | 1;
                        v90 = &i[3 * v78];
                        v92 = v91 + 2;
                        if (v92 < (uint64_t)v10)
                        {
                          v93 = i[3 * v78 + 1];
                          v94 = v90[4];
                          if (v93 < v94 || v94 >= v93 && i[3 * v78 + 2] < (unint64_t)v90[5])
                          {
                            v90 += 3;
                            v78 = v92;
                          }
                        }
                        v95 = v90[1];
                        if (v95 < v84 || v84 >= v95 && v90[2] < v88)
                          break;
                        *v79 = *v90;
                        v79[1] = v90[1];
                        v79[2] = v90[2];
                        v79 = v90;
                        if (v75 < v78)
                          goto LABEL_144;
                      }
                    }
                    v90 = v79;
LABEL_144:
                    *v90 = v89;
                    v90[1] = v84;
                    v90[2] = v88;
                    goto LABEL_145;
                  }
                  v88 = i[3 * v77 + 2];
                  if (v79[2] >= v88)
                    goto LABEL_142;
                }
              }
LABEL_145:
              v76 = v77 - 1;
              if (!v77)
              {
                v96 = v9 / 0x18uLL;
                while (1)
                {
                  v97 = 0;
                  v98 = *i;
                  v99 = i[1];
                  v100 = i[2];
                  v101 = v96 - 2;
                  if (v96 < 2)
                    v101 = v96 - 1;
                  v102 = v101 >> 1;
                  v103 = i;
                  do
                  {
                    result = (unint64_t)v103;
                    v104 = v97 + 1;
                    v103 += 3 * v97 + 3;
                    v105 = 2 * v97;
                    v97 = (2 * v97) | 1;
                    v106 = v105 + 2;
                    if (v106 < v96)
                    {
                      v107 = *(_QWORD *)(result + 24 * v104 + 8);
                      v108 = v103[4];
                      if (v107 < v108
                        || v108 >= v107 && *(_QWORD *)(result + 24 * v104 + 16) < (unint64_t)v103[5])
                      {
                        v103 += 3;
                        v97 = v106;
                      }
                    }
                    *(_QWORD *)result = *v103;
                    *(_QWORD *)(result + 8) = v103[1];
                    *(_QWORD *)(result + 16) = v103[2];
                  }
                  while (v97 <= v102);
                  if (v103 == a2 - 3)
                  {
                    *v103 = v98;
                    v103[1] = v99;
                    v103[2] = v100;
                  }
                  else
                  {
                    *v103 = *(a2 - 3);
                    v103[1] = *(a2 - 2);
                    v103[2] = *(a2 - 1);
                    *(a2 - 3) = v98;
                    *(a2 - 2) = v99;
                    *(a2 - 1) = v100;
                    v109 = (char *)v103 - (char *)i + 24;
                    if (v109 >= 25)
                    {
                      v110 = v109 / 0x18uLL - 2;
                      v111 = v110 >> 1;
                      v112 = &i[3 * (v110 >> 1)];
                      v113 = v112[1];
                      v114 = v103[1];
                      if (v113 < v114)
                      {
                        v115 = v103[2];
LABEL_173:
                        result = *v103;
                        *v103 = *v112;
                        v103[1] = v112[1];
                        v103[2] = i[3 * v111 + 2];
                        if (v110 >= 2)
                        {
                          while (1)
                          {
                            v117 = v111 - 1;
                            v111 = (v111 - 1) >> 1;
                            v116 = &i[3 * v111];
                            v118 = v116[1];
                            if (v118 >= v114 && (v114 < v118 || i[3 * v111 + 2] >= v115))
                              break;
                            *v112 = *v116;
                            v112[1] = v118;
                            v112[2] = i[3 * v111 + 2];
                            v112 = &i[3 * v111];
                            if (v117 <= 1)
                              goto LABEL_179;
                          }
                        }
                        v116 = v112;
LABEL_179:
                        *v116 = result;
                        v116[1] = v114;
                        v116[2] = v115;
                        goto LABEL_180;
                      }
                      if (v114 >= v113)
                      {
                        result = i[3 * v111 + 2];
                        v115 = v103[2];
                        if (result < v115)
                          goto LABEL_173;
                      }
                    }
                  }
LABEL_180:
                  a2 -= 3;
                  if (v96-- <= 2)
                    return result;
                }
              }
            }
          }
          v11 = v10 >> 1;
          v12 = &i[3 * (v10 >> 1)];
          if ((unint64_t)v9 < 0xC01)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(&v7[3 * (v10 >> 1)], v7, a2 - 3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7, &v7[3 * (v10 >> 1)], a2 - 3);
            v13 = &v7[3 * v11];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7 + 3, v13 - 3, a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7 + 6, &v7[3 * v11 + 3], a2 - 9);
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v13 - 3, v12, &v7[3 * v11 + 3]);
            v14 = *v7;
            *v7 = *v12;
            *v12 = v14;
            v15 = *(_OWORD *)(v7 + 1);
            *(_OWORD *)(v7 + 1) = *(_OWORD *)(v13 + 1);
            *(_OWORD *)(v13 + 1) = v15;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v17 = *(v7 - 2);
            v16 = v7[1];
            if (v17 < v16)
              goto LABEL_14;
            if (v16 < v17)
            {
              v18 = v7[2];
            }
            else
            {
              v18 = v7[2];
              if (*(v7 - 1) < v18)
                goto LABEL_14;
            }
            v39 = *(a2 - 2);
            if (v16 >= v39 && (v39 < v16 || v18 >= *(a2 - 1)))
            {
              for (i = v7 + 3; i < a2; i += 3)
              {
                v41 = i[1];
                if (v16 < v41 || v41 >= v16 && v18 < i[2])
                  break;
              }
            }
            else
            {
              v40 = v7[4];
              if (v16 >= v40)
              {
                v42 = (unint64_t *)(v7 + 7);
                do
                {
                  if (v40 >= v16 && v18 < *(v42 - 2))
                    break;
                  v43 = *v42;
                  v42 += 3;
                  v40 = v43;
                }
                while (v16 >= v43);
                i = (uint64_t *)(v42 - 4);
              }
              else
              {
                i = v7 + 3;
              }
            }
            v44 = *v7;
            v45 = a2;
            if (i < a2)
            {
              for (j = a2 - 1; v16 < v39 || v39 >= v16 && v18 < *j; j -= 3)
                v39 = *(j - 4);
              v45 = j - 2;
            }
            while (i < v45)
            {
              v47 = *i;
              *i = *v45;
              *v45 = v47;
              v48 = i[1];
              i[1] = v45[1];
              v45[1] = v48;
              v49 = i[2];
              i[2] = v45[2];
              v45[2] = v49;
              v50 = i[4];
              if (v16 >= v50)
              {
                v51 = (unint64_t *)(i + 7);
                do
                {
                  if (v50 >= v16 && v18 < *(v51 - 2))
                    break;
                  v52 = *v51;
                  v51 += 3;
                  v50 = v52;
                }
                while (v16 >= v52);
                i = (uint64_t *)(v51 - 4);
              }
              else
              {
                i += 3;
              }
              do
              {
                do
                {
                  v45 -= 3;
                  v53 = v45[1];
                }
                while (v16 < v53);
              }
              while (v53 >= v16 && v18 < v45[2]);
            }
            if (i - 3 != v7)
            {
              *v7 = *(i - 3);
              v7[1] = *(i - 2);
              v7[2] = *(i - 1);
            }
            a4 = 0;
            *(i - 3) = v44;
            *(i - 2) = v16;
            *(i - 1) = v18;
            continue;
          }
          v16 = v7[1];
LABEL_14:
          v19 = 0;
          v20 = *v7;
          v21 = v7[2];
          while (1)
          {
            v22 = v7[v19 + 4];
            if (v16 <= v22 && (v16 < v22 || v7[v19 + 5] >= v21))
              break;
            v19 += 3;
          }
          v23 = (unint64_t)&v7[v19 + 3];
          if (v19 * 8)
          {
            v24 = *(a2 - 2);
            v25 = a2 - 3;
            if (v16 <= v24)
            {
              v26 = a2 - 1;
              do
              {
                if (v24 <= v16 && *v26 < v21)
                  break;
                v24 = *(v26 - 4);
                v26 -= 3;
              }
              while (v16 <= v24);
              v25 = v26 - 2;
            }
          }
          else
          {
            v25 = a2;
            if (v23 < (unint64_t)a2)
            {
              v27 = *(a2 - 2);
              v25 = a2 - 3;
              if (v16 <= v27)
              {
                v28 = a2 - 1;
                v25 = a2 - 3;
                while (1)
                {
                  v29 = v28 - 2;
                  if (v27 <= v16)
                  {
                    if (*v28 < v21 || v23 >= (unint64_t)v29)
                    {
                      v25 = v28 - 2;
                      break;
                    }
                  }
                  else if (v23 >= (unint64_t)v29)
                  {
                    break;
                  }
                  v25 -= 3;
                  v27 = *(v28 - 4);
                  v28 -= 3;
                  if (v16 > v27)
                  {
                    v25 = v28 - 2;
                    break;
                  }
                }
              }
            }
          }
          i = (uint64_t *)v23;
          if (v23 < (unint64_t)v25)
          {
            v31 = v25;
            do
            {
              v32 = *i;
              *i = *v31;
              *v31 = v32;
              v33 = i[1];
              i[1] = v31[1];
              v31[1] = v33;
              v34 = i[2];
              i[2] = v31[2];
              v31[2] = v34;
              do
              {
                do
                {
                  i += 3;
                  v35 = i[1];
                }
                while (v16 > v35);
              }
              while (v16 >= v35 && i[2] < v21);
              v36 = *(v31 - 2);
              if (v16 <= v36)
              {
                v37 = (unint64_t *)(v31 - 1);
                do
                {
                  if (v36 <= v16 && *v37 < v21)
                    break;
                  v36 = *(v37 - 4);
                  v37 -= 3;
                }
                while (v16 <= v36);
                v31 = (uint64_t *)(v37 - 2);
              }
              else
              {
                v31 -= 3;
              }
            }
            while (i < v31);
          }
          if (i - 3 != v7)
          {
            *v7 = *(i - 3);
            v7[1] = *(i - 2);
            v7[2] = *(i - 1);
          }
          *(i - 3) = v20;
          *(i - 2) = v16;
          *(i - 1) = v21;
          if (v23 < (unint64_t)v25)
          {
LABEL_58:
            result = std::__introsort<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(v7, i - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7, i - 3);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v38)
              continue;
            goto LABEL_58;
          }
          a2 = i - 3;
          if (v38)
            return result;
          goto LABEL_2;
        }
        v59 = i + 3;
        v61 = i == a2 || v59 == a2;
        if ((a4 & 1) == 0)
        {
          if (v61)
            return result;
          for (k = i + 2; ; k += 3)
          {
            v121 = v7;
            v7 = v59;
            v122 = v121[4];
            v123 = v121[1];
            if (v122 < v123)
              break;
            if (v123 >= v122)
            {
              v124 = v121[5];
              if (v124 < v121[2])
                goto LABEL_192;
            }
LABEL_198:
            v59 = v7 + 3;
            if (v7 + 3 == a2)
              return result;
          }
          v124 = v121[5];
LABEL_192:
          v125 = *v7;
          for (m = k; ; m -= 3)
          {
            *(_OWORD *)(m + 1) = *((_OWORD *)m - 1);
            m[3] = *m;
            v127 = *(m - 4);
            if (v122 >= v127 && (v127 < v122 || v124 >= *(m - 3)))
              break;
          }
          *(m - 2) = v125;
          *(m - 1) = v122;
          *m = v124;
          goto LABEL_198;
        }
        if (v61)
          return result;
        v62 = 0;
        v63 = i;
        do
        {
          v64 = v63;
          v63 = v59;
          v65 = v64[4];
          v66 = v64[1];
          if (v65 >= v66)
          {
            if (v66 < v65)
              goto LABEL_128;
            v67 = v64[5];
            if (v67 >= v64[2])
              goto LABEL_128;
          }
          else
          {
            v67 = v64[5];
          }
          v68 = v64[3];
          v69 = v64[1];
          v64[3] = *v64;
          v63[1] = v69;
          v63[2] = v64[2];
          v70 = i;
          if (v64 == i)
            goto LABEL_127;
          v71 = v62;
          while (1)
          {
            v72 = (char *)i + v71;
            v73 = *(uint64_t *)((char *)i + v71 - 16);
            if (v65 >= v73)
              break;
            result = *((_QWORD *)v72 - 1);
LABEL_124:
            v64 -= 3;
            v74 = (uint64_t *)((char *)i + v71);
            *v74 = *((_QWORD *)v72 - 3);
            v74[1] = v73;
            v74[2] = result;
            v71 -= 24;
            if (!v71)
            {
              v70 = i;
              goto LABEL_127;
            }
          }
          if (v73 >= v65)
          {
            v70 = (uint64_t *)((char *)i + v71);
            result = *(uint64_t *)((char *)i + v71 - 8);
            if (v67 >= result)
              goto LABEL_127;
            goto LABEL_124;
          }
          v70 = v64;
LABEL_127:
          *v70 = v68;
          v70[1] = v65;
          v70[2] = v67;
LABEL_128:
          v59 = v63 + 3;
          v62 += 24;
        }
        while (v63 + 3 != a2);
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = a2[1];
  v4 = result[1];
  if (v3 >= v4 && (v4 < v3 || a2[2] >= (unint64_t)result[2]))
  {
    v9 = a3[1];
    if (v9 < v3 || v3 >= v9 && a3[2] < (unint64_t)a2[2])
    {
      v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      v11 = a2[1];
      a2[1] = a3[1];
      a3[1] = v11;
      v13 = a2 + 2;
      v12 = a2[2];
      a2[2] = a3[2];
      a3[2] = v12;
      v14 = a2[1];
      v15 = result[1];
      if (v14 < v15 || v15 >= v14 && *v13 < (unint64_t)result[2])
      {
        v16 = *result;
        *result = *a2;
        *a2 = v16;
        v17 = result[1];
        result[1] = a2[1];
        a2[1] = v17;
        v8 = result + 2;
LABEL_18:
        v25 = *v8;
        *v8 = *v13;
        *v13 = v25;
      }
    }
  }
  else
  {
    v5 = a3[1];
    if (v5 < v3 || v3 >= v5 && a3[2] < (unint64_t)a2[2])
    {
      v6 = *result;
      *result = *a3;
      *a3 = v6;
      v7 = result[1];
      result[1] = a3[1];
      a3[1] = v7;
      v8 = result + 2;
LABEL_17:
      v13 = a3 + 2;
      goto LABEL_18;
    }
    v18 = *result;
    *result = *a2;
    *a2 = v18;
    v19 = result[1];
    result[1] = a2[1];
    a2[1] = v19;
    v8 = a2 + 2;
    v20 = result[2];
    result[2] = a2[2];
    a2[2] = v20;
    v21 = a3[1];
    v22 = a2[1];
    if (v21 < v22 || v22 >= v21 && a3[2] < v20)
    {
      v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      v24 = a2[1];
      a2[1] = a3[1];
      a3[1] = v24;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(a2 - 2);
      v7 = a1[1];
      if (v6 < v7 || v7 >= v6 && *(a2 - 1) < (unint64_t)a1[2])
      {
        v8 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v9;
        v10 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v11 = a1 + 6;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6);
      v12 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  do
  {
    v15 = v12[1];
    v16 = v11[1];
    if (v15 >= v16)
    {
      if (v16 < v15)
        goto LABEL_23;
      v17 = v12[2];
      if (v17 >= v11[2])
        goto LABEL_23;
    }
    else
    {
      v17 = v12[2];
    }
    v18 = *v12;
    *v12 = *v11;
    v12[1] = v11[1];
    v12[2] = v11[2];
    v19 = a1;
    if (v11 == a1)
      goto LABEL_22;
    v20 = v13;
    while (1)
    {
      v21 = (uint64_t *)((char *)a1 + v20);
      v22 = *(uint64_t *)((char *)a1 + v20 + 32);
      if (v15 < v22)
      {
        v23 = v21[5];
        goto LABEL_18;
      }
      if (v22 < v15)
      {
        v19 = (uint64_t *)((char *)a1 + v20 + 48);
        goto LABEL_22;
      }
      v23 = *(uint64_t *)((char *)a1 + v20 + 40);
      if (v17 >= v23)
        break;
LABEL_18:
      v11 -= 3;
      v21[6] = v21[3];
      v24 = (char *)a1 + v20;
      *((_QWORD *)v24 + 7) = v22;
      *((_QWORD *)v24 + 8) = v23;
      v20 -= 24;
      if (v20 == -48)
      {
        v19 = a1;
        goto LABEL_22;
      }
    }
    v19 = v11;
LABEL_22:
    *v19 = v18;
    v19[1] = v15;
    v19[2] = v17;
    if (++v14 == 8)
      return v12 + 3 == a2;
LABEL_23:
    v11 = v12;
    v13 += 24;
    v12 += 3;
  }
  while (v12 != a2);
  return 1;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 < v10 || v10 >= v9 && a4[2] < (unint64_t)a3[2])
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    v13 = a3[2];
    a3[2] = a4[2];
    a4[2] = v13;
    v14 = a3[1];
    v15 = a2[1];
    if (v14 < v15 || v15 >= v14 && a3[2] < (unint64_t)a2[2])
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = a2[1];
      a2[1] = a3[1];
      a3[1] = v17;
      v18 = a2[2];
      a2[2] = a3[2];
      a3[2] = v18;
      v19 = a2[1];
      v20 = a1[1];
      if (v19 < v20 || v20 >= v19 && a2[2] < (unint64_t)a1[2])
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
        v22 = a1[1];
        a1[1] = a2[1];
        a2[1] = v22;
        v23 = a1[2];
        a1[2] = a2[2];
        a2[2] = v23;
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::less_second &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  if (v11 < v12 || v12 >= v11 && a5[2] < (unint64_t)a4[2])
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    v15 = a4[2];
    a4[2] = a5[2];
    a5[2] = v15;
    v16 = a4[1];
    v17 = a3[1];
    if (v16 < v17 || v17 >= v16 && a4[2] < (unint64_t)a3[2])
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = a3[1];
      a3[1] = a4[1];
      a4[1] = v19;
      v20 = a3[2];
      a3[2] = a4[2];
      a4[2] = v20;
      v21 = a3[1];
      v22 = a2[1];
      if (v21 < v22 || v22 >= v21 && a3[2] < (unint64_t)a2[2])
      {
        v23 = *a2;
        *a2 = *a3;
        *a3 = v23;
        v24 = a2[1];
        a2[1] = a3[1];
        a3[1] = v24;
        v25 = a2[2];
        a2[2] = a3[2];
        a3[2] = v25;
        v26 = a2[1];
        v27 = a1[1];
        if (v26 < v27 || v27 >= v26 && a2[2] < (unint64_t)a1[2])
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
          v29 = a1[1];
          a1[1] = a2[1];
          a2[1] = v29;
          v30 = a1[2];
          a1[2] = a2[2];
          a2[2] = v30;
        }
      }
    }
  }
  return result;
}

_QWORD *llvm::SmallDenseMap<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>,4u,llvm::DenseMapInfo<void *,void>,llvm::detail::DenseMapPair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>>>::shrink_and_clear(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 13;
    do
    {
LABEL_10:
      *v6 = -4096;
      v6 += 3;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v5 == *((_DWORD *)result + 4))
    {
      *result = 0;
      if (!(_DWORD)v5)
        return result;
      v6 = (_QWORD *)result[1];
      v7 = &v6[3 * v5];
      goto LABEL_10;
    }
    MEMORY[0x24BD1B398](result[1], 8);
  }
  if (v5 <= 4)
  {
    *v1 = 1;
  }
  else
  {
    *(_DWORD *)v1 &= ~1u;
    result = operator new(24 * v5, (std::align_val_t)8uLL);
    v1[1] = result;
    v1[2] = v5;
    v8 = *(_DWORD *)v1;
    *v1 = *(_DWORD *)v1 & 1;
    if ((v8 & 1) == 0)
    {
      v9 = &result[3 * v5];
      goto LABEL_22;
    }
  }
  result = v1 + 1;
  v9 = v1 + 13;
  do
  {
LABEL_22:
    *result = -4096;
    result += 3;
  }
  while (result != v9);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) < (unint64_t)v8[2])
        {
          v48 = *v8;
          *v8 = *(a2 - 3);
          *(a2 - 3) = v48;
          v49 = v8[1];
          v8[1] = *(a2 - 2);
          *(a2 - 2) = v49;
          v50 = v8[2];
          v8[2] = *(a2 - 1);
          *(a2 - 1) = v50;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v8, v8 + 3, a2 - 3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v8, v8 + 3, v8 + 6, a2 - 3);
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v8, v8 + 3, v8 + 6, v8 + 9);
        if (*(a2 - 1) < (unint64_t)v8[11])
        {
          v51 = v8[9];
          v8[9] = *(a2 - 3);
          *(a2 - 3) = v51;
          v52 = v8[10];
          v8[10] = *(a2 - 2);
          *(a2 - 2) = v52;
          v53 = v8[11];
          v8[11] = *(a2 - 1);
          *(a2 - 1) = v53;
          v54 = v8[11];
          v55 = v8[8];
          if (v54 < v55)
          {
            v57 = v8[6];
            v56 = v8[7];
            v58 = v8[9];
            v59 = v8[10];
            v60 = v8[5];
            v8[6] = v58;
            v8[7] = v59;
            v8[8] = v54;
            v8[9] = v57;
            v8[10] = v56;
            v8[11] = v55;
            if (v54 < v60)
            {
              v62 = v8[3];
              v61 = v8[4];
              v63 = v8[2];
              v8[3] = v58;
              v8[4] = v59;
              v8[5] = v54;
              v8[6] = v62;
              v8[7] = v61;
              v8[8] = v60;
              if (v54 < v63)
              {
                v64 = *v8;
                v65 = v8[1];
                *v8 = v58;
                v8[1] = v59;
                v8[2] = v54;
                v8[3] = v64;
                v8[4] = v65;
                v8[5] = v63;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 575)
        {
          v66 = v8 + 3;
          v68 = v8 == a2 || v66 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v68)
            {
              v69 = 0;
              v70 = v8;
              do
              {
                v71 = v66;
                v72 = v70[5];
                if (v72 < v70[2])
                {
                  v73 = *v71;
                  v74 = v70[4];
                  v75 = v69;
                  while (1)
                  {
                    v76 = (char *)v8 + v75;
                    *(_OWORD *)(v76 + 24) = *(_OWORD *)((char *)v8 + v75);
                    *((_QWORD *)v76 + 5) = *(uint64_t *)((char *)v8 + v75 + 16);
                    if (!v75)
                      break;
                    v75 -= 24;
                    if (v72 >= *((_QWORD *)v76 - 1))
                    {
                      v77 = (uint64_t *)((char *)v8 + v75 + 24);
                      goto LABEL_80;
                    }
                  }
                  v77 = v8;
LABEL_80:
                  *v77 = v73;
                  v77[1] = v74;
                  v77[2] = v72;
                }
                v66 = v71 + 3;
                v69 += 24;
                v70 = v71;
              }
              while (v71 + 3 != a2);
            }
          }
          else if (!v68)
          {
            v112 = v8 + 5;
            do
            {
              v113 = v66;
              v114 = v7[5];
              if (v114 < v7[2])
              {
                v115 = *v113;
                v116 = v7[4];
                v117 = v112;
                do
                {
                  v118 = v117;
                  *((_OWORD *)v117 - 1) = *(_OWORD *)(v117 - 5);
                  v119 = *(v117 - 3);
                  v117 -= 3;
                  *v118 = v119;
                }
                while (v114 < *(v118 - 6));
                *(v117 - 2) = v115;
                *(v117 - 1) = v116;
                *v117 = v114;
              }
              v66 = v113 + 3;
              v112 += 3;
              v7 = v113;
            }
            while (v113 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v78 = (v10 - 2) >> 1;
            v79 = v78;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v8[3 * v81];
                if (2 * v80 + 2 < (uint64_t)v10)
                {
                  v83 = v8[3 * v81 + 2];
                  v84 = v82[5];
                  v82 += 3 * (v83 < v84);
                  if (v83 < v84)
                    v81 = 2 * v80 + 2;
                }
                v85 = v8[3 * v80 + 2];
                if (v82[2] >= v85)
                {
                  v86 = &v8[3 * v80];
                  v88 = *v86;
                  v87 = v86[1];
                  do
                  {
                    v89 = v86;
                    v86 = v82;
                    *v89 = *v82;
                    v89[1] = v82[1];
                    v89[2] = v82[2];
                    if (v78 < v81)
                      break;
                    v90 = (2 * v81) | 1;
                    v82 = &v8[3 * v90];
                    v91 = 2 * v81 + 2;
                    if (v91 < (uint64_t)v10)
                    {
                      v92 = v8[3 * v90 + 2];
                      v93 = v82[5];
                      v82 += 3 * (v92 < v93);
                      if (v92 < v93)
                        v90 = v91;
                    }
                    v81 = v90;
                  }
                  while (v82[2] >= v85);
                  *v86 = v88;
                  v86[1] = v87;
                  v86[2] = v85;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v94 = v9 / 0x18uLL;
            do
            {
              result = 0;
              v95 = *v8;
              v96 = v8[1];
              v97 = v8[2];
              v98 = v8;
              do
              {
                v99 = (char *)(result + 1);
                v100 = &v98[3 * result + 3];
                v101 = (2 * result) | 1;
                v102 = 2 * result + 2;
                if (v102 < v94)
                {
                  v103 = v98[3 * (_QWORD)v99 + 2];
                  v104 = v100[5];
                  v100 += 3 * (v103 < v104);
                  if (v103 < v104)
                    v101 = v102;
                }
                *v98 = *v100;
                v98[1] = v100[1];
                v98[2] = v100[2];
                v98 = v100;
                result = v101;
              }
              while (v101 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
              if (v100 == a2 - 3)
              {
                *v100 = v95;
                v100[1] = v96;
                v100[2] = v97;
              }
              else
              {
                *v100 = *(a2 - 3);
                v100[1] = *(a2 - 2);
                v100[2] = *(a2 - 1);
                *(a2 - 3) = v95;
                *(a2 - 2) = v96;
                *(a2 - 1) = v97;
                v105 = (char *)v100 - (char *)v8 + 24;
                if (v105 >= 25)
                {
                  v106 = (v105 / 0x18uLL - 2) >> 1;
                  v107 = v100[2];
                  if (v8[3 * v106 + 2] < v107)
                  {
                    v108 = *v100;
                    v109 = v100[1];
                    do
                    {
                      v110 = v100;
                      v100 = &v8[3 * v106];
                      *v110 = *v100;
                      v110[1] = v100[1];
                      result = (uint64_t)(v100 + 2);
                      v110[2] = v100[2];
                      if (!v106)
                        break;
                      v106 = (v106 - 1) >> 1;
                    }
                    while (v8[3 * v106 + 2] < v107);
                    *v100 = v108;
                    v100[1] = v109;
                    *(_QWORD *)result = v107;
                  }
                }
              }
              a2 -= 3;
            }
            while (v94-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[3 * (v10 >> 1)];
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(&v7[3 * (v10 >> 1)], v7, a2 - 3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7, &v7[3 * (v10 >> 1)], a2 - 3);
          v13 = &v7[3 * v11];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7 + 3, v13 - 3, a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7 + 6, &v7[3 * v11 + 3], a2 - 9);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v13 - 3, v12, &v7[3 * v11 + 3]);
          v14 = *v7;
          *v7 = *v12;
          *v12 = v14;
          v15 = *(_OWORD *)(v7 + 1);
          *(_OWORD *)(v7 + 1) = *(_OWORD *)(v13 + 1);
          *(_OWORD *)(v13 + 1) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = v7[2];
          if (*(v7 - 1) < v16)
            goto LABEL_12;
          if (v16 >= *(a2 - 1))
          {
            v36 = v7 + 3;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = v36[2];
              v36 += 3;
            }
            while (v16 >= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 3;
              v35 = v34[5];
              v34 += 3;
            }
            while (v16 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 3;
              v40 = *(v39 - 1);
              v39 -= 3;
            }
            while (v16 < v40);
          }
          v41 = *v7;
          v42 = v7[1];
          while (v8 < v38)
          {
            v43 = *v8;
            *v8 = *v38;
            *v38 = v43;
            v44 = v8[1];
            v8[1] = v38[1];
            v38[1] = v44;
            v45 = v8[2];
            v8[2] = v38[2];
            v38[2] = v45;
            do
            {
              v46 = v8[5];
              v8 += 3;
            }
            while (v16 >= v46);
            do
            {
              v47 = *(v38 - 1);
              v38 -= 3;
            }
            while (v16 < v47);
          }
          if (v8 - 3 != v7)
          {
            *v7 = *(v8 - 3);
            v7[1] = *(v8 - 2);
            v7[2] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 3) = v41;
          *(v8 - 2) = v42;
          *(v8 - 1) = v16;
          continue;
        }
        v16 = v7[2];
LABEL_12:
        v17 = 0;
        v18 = *v7;
        v19 = v7[1];
        do
        {
          v20 = v7[v17 + 5];
          v17 += 3;
        }
        while (v20 < v16);
        v21 = &v7[v17];
        v22 = a2;
        if (v17 == 3)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 3;
            v26 = *(v25 - 1);
            v25 -= 3;
            if (v26 < v16)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 3;
            v24 = *(v22 - 1);
            v22 -= 3;
          }
          while (v24 >= v16);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v28 = *v8;
            *v8 = *v27;
            *v27 = v28;
            v29 = v8[1];
            v8[1] = v27[1];
            v27[1] = v29;
            v30 = v8[2];
            v8[2] = v27[2];
            v27[2] = v30;
            do
            {
              v31 = v8[5];
              v8 += 3;
            }
            while (v31 < v16);
            do
            {
              v32 = *(v27 - 1);
              v27 -= 3;
            }
            while (v32 >= v16);
          }
          while (v8 < v27);
        }
        if (v8 - 3 != v7)
        {
          *v7 = *(v8 - 3);
          v7[1] = *(v8 - 2);
          v7[2] = *(v8 - 1);
        }
        *(v8 - 3) = v18;
        *(v8 - 2) = v19;
        *(v8 - 1) = v16;
        if (v21 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *,false>(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v7, v8 - 3);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 3;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2 + 2;
  v4 = a2[2];
  v5 = result + 2;
  v6 = a3[2];
  if (v4 < result[2])
  {
    v7 = *result;
    if (v6 >= v4)
    {
      *result = *a2;
      *a2 = v7;
      v13 = result[1];
      result[1] = a2[1];
      a2[1] = v13;
      v14 = result[2];
      result[2] = a2[2];
      a2[2] = v14;
      if (a3[2] >= v14)
        return result;
      v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      result = a2 + 1;
      v8 = a3 + 1;
      v5 = a2 + 2;
    }
    else
    {
      *result = *a3;
      *a3 = v7;
      ++result;
      v8 = a3 + 1;
    }
    v3 = a3 + 2;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    v8 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    if (a2[2] < (unint64_t)*v5)
    {
      v12 = *result;
      *result++ = *a2;
      *a2 = v12;
LABEL_10:
      v16 = *result;
      *result = *v8;
      *v8 = v16;
      v17 = *v5;
      *v5 = *v3;
      *v3 = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) < (unint64_t)a1[11])
      {
        v19 = a1[9];
        a1[9] = *(a2 - 3);
        *(a2 - 3) = v19;
        v20 = a1[10];
        a1[10] = *(a2 - 2);
        *(a2 - 2) = v20;
        v21 = a1[11];
        a1[11] = *(a2 - 1);
        *(a2 - 1) = v21;
        v22 = a1[11];
        v23 = a1[8];
        if (v22 < v23)
        {
          v25 = a1[6];
          v24 = a1[7];
          v26 = a1[9];
          v27 = a1[10];
          v28 = a1[5];
          a1[6] = v26;
          a1[7] = v27;
          a1[8] = v22;
          a1[9] = v25;
          a1[10] = v24;
          a1[11] = v23;
          if (v22 < v28)
          {
            v30 = a1[3];
            v29 = a1[4];
            v31 = a1[2];
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v22;
            a1[6] = v30;
            a1[7] = v29;
            a1[8] = v28;
            if (v22 < v31)
            {
              v32 = *a1;
              v33 = a1[1];
              *a1 = v26;
              a1[1] = v27;
              a1[2] = v22;
              a1[3] = v32;
              a1[4] = v33;
              a1[5] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 6;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a1 + 3, a1 + 6);
      v10 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[2];
    if (v13 < v9[2])
    {
      v14 = *v10;
      v15 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((_QWORD *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v13 >= *((_QWORD *)v17 + 5))
        {
          v18 = (uint64_t *)((char *)a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *v18 = v14;
      v18[1] = v15;
      v18[2] = v13;
      if (++v12 == 8)
        return v10 + 3 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::ReplaceableMetadataImpl::resolveAllUses(BOOL)::$_0 &,std::pair<void *,std::pair<llvm::PointerUnion<llvm::MetadataAsValue *,llvm::Metadata *>,unsigned long long>> *>(a1, a2, a3);
  if (a4[2] < (unint64_t)a3[2])
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    if (a3[2] < (unint64_t)a2[2])
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      if (a2[2] < (unint64_t)a1[2])
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::MDOperand>::resizeImpl<false>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::grow(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      *(_DWORD *)(a1 + 8) = a2;
    }
    else
    {
      llvm::SmallVectorImpl<llvm::TrackingMDRef>::truncate(a1, a2);
    }
  }
}

void llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v6);
  llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::moveElementsForGrow(a1, v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::moveElementsForGrow(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;

  result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::uninitialized_move<llvm::MDOperand*,llvm::MDOperand*>(*(unsigned __int8 ***)a1, (unsigned __int8 **)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8)), a2);
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned __int8 ***)a1;
    v6 = v4;
    v7 = v5 - 1;
    do
    {
      result = (uint64_t)&v7[v6];
      v8 = (uint64_t)v7[v6];
      if (v8)
        result = llvm::MetadataTracking::untrack(result, v8);
      --v6;
    }
    while (v6 * 8);
  }
  return result;
}

unsigned __int8 **llvm::SmallVectorTemplateBase<llvm::MDOperand,false>::uninitialized_move<llvm::MDOperand*,llvm::MDOperand*>(unsigned __int8 **result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 **v5;
  unsigned __int8 *v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *a3 = 0;
      v6 = *v5;
      *a3 = *v5;
      if (v6)
        result = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)a3);
      *v5++ = 0;
      ++a3;
    }
    while (v5 != a2);
  }
  return result;
}

char **llvm::SmallVector<llvm::MDOperand,0u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      if (v6)
        llvm::MetadataTracking::untrack((uint64_t)&v5[v4], v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::MDTuple *>(a1, (uint64_t)a2, (uint64_t)a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 4) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*(_QWORD *)a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*(_QWORD *)a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::MDTuple *>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (_QWORD *)v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDTuple *>((uint64_t *)a1, (uint64_t)v13, &v16);
          *v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    do
    {
      *result++ = -4096;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>,llvm::MDTuple *,llvm::detail::DenseSetEmpty,llvm::MDNodeInfo<llvm::MDTuple>,llvm::detail::DenseSetPair<llvm::MDTuple *>>::LookupBucketFor<llvm::MDNodeKeyImpl<llvm::MDTuple>>(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = 0;
    v7 = *a1;
    v8 = *(_DWORD *)(a2 + 32);
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = v8 & v9;
      v12 = (uint64_t *)(v7 + 8 * (v8 & v9));
      v13 = *v12;
      if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((llvm::MDNodeOpsKey::compareOps<llvm::GenericDINode>(a2, v13, 0) & 1) != 0)
        {
          result = 1;
          goto LABEL_18;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v6)
        v14 = 0;
      else
        v14 = v13 == -8192;
      if (v14)
        v6 = (uint64_t *)(v7 + 8 * v11);
      v8 = v11 + i;
    }
    result = 0;
    if (v6)
      v12 = v6;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_18:
  *a3 = v12;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::growAndEmplaceBack<llvm::MDNode *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v11;

  v11 = 0;
  v4 = a1 + 16;
  v5 = (unsigned __int8 **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v11);
  v6 = (uint64_t *)&v5[*(unsigned int *)(a1 + 8)];
  v7 = *a2;
  *v6 = *a2;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)v6, v7, 2);
  llvm::SmallVectorTemplateBase<llvm::TrackingMDRef,false>::moveElementsForGrow(a1, v5);
  v8 = v11;
  if (*(_QWORD *)a1 != v4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v8;
  return (uint64_t)&v5[v9 - 1];
}

void *std::get_temporary_buffer[abi:nn180100]<std::pair<unsigned int,llvm::MDNode *>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  __n128 *v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unint64_t v11;
  char *v14;
  unint64_t v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  unsigned __int32 v23;
  unsigned __int32 v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  __n128 *v30;
  char *v31;
  __n128 *v32;
  unsigned __int32 v33;
  __n128 *v34;
  unint64_t v35;
  uint64_t v36;
  __n128 *v37;
  __n128 *v38;
  unint64_t v39;
  __n128 *v40;
  __n128 *v41;

  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v9 = a2[-1].n128_u32[0];
      v10 = a1->n128_u32[0];
      if (v9 < a1->n128_u32[0])
      {
        a1->n128_u32[0] = v9;
        a2[-1].n128_u32[0] = v10;
        v11 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v19 = a1 + 1;
        if (&a1[1] != a2)
        {
          v20 = 0;
          v21 = a1;
          do
          {
            v22 = v19;
            v23 = v21[1].n128_u32[0];
            v24 = v21->n128_u32[0];
            if (v23 < v21->n128_u32[0])
            {
              v25 = v21[1].n128_u64[1];
              v26 = v20;
              while (1)
              {
                v27 = (char *)a1 + v26;
                *((_DWORD *)v27 + 4) = v24;
                *((_QWORD *)v27 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v26);
                if (!v26)
                  break;
                v24 = *((_DWORD *)v27 - 4);
                v26 -= 16;
                if (v23 >= v24)
                {
                  v28 = (uint64_t)&a1[1] + v26;
                  goto LABEL_18;
                }
              }
              v28 = (uint64_t)a1;
LABEL_18:
              *(_DWORD *)v28 = v23;
              *(_QWORD *)(v28 + 8) = v25;
            }
            v19 = v22 + 1;
            v20 += 16;
            v21 = v22;
          }
          while (&v22[1] != a2);
        }
      }
    }
    else
    {
      v14 = (char *)a5;
      v16 = a4 >> 1;
      v17 = &a1[a4 >> 1];
      v18 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v29 = std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(a1, v17, a3, v18, a5, a7);
        v30 = (__n128 *)&v14[16 * v16];
        std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v30, v29);
        v31 = &v14[16 * a4];
        v32 = v30;
        while (v32 != (__n128 *)v31)
        {
          v33 = v32->n128_u32[0];
          if (v32->n128_u32[0] < *(_DWORD *)v14)
          {
            v34 = v32;
          }
          else
          {
            v33 = *(_DWORD *)v14;
            v34 = (__n128 *)v14;
          }
          v35 = v34->n128_u64[1];
          if (v32->n128_u32[0] < *(_DWORD *)v14)
            ++v32;
          else
            v14 += 16;
          v8->n128_u32[0] = v33;
          v8->n128_u64[1] = v35;
          ++v8;
          if (v14 == (char *)v30)
          {
            if (v32 != (__n128 *)v31)
            {
              v36 = 0;
              do
              {
                v37 = &v32[v36];
                v38 = &v8[v36];
                v38->n128_u32[0] = v32[v36].n128_u32[0];
                v38->n128_u64[1] = v32[v36++].n128_u64[1];
              }
              while (&v37[1] != (__n128 *)v31);
            }
            return;
          }
        }
        if (v14 != (char *)v30)
        {
          v39 = 0;
          do
          {
            v40 = &v8[v39 / 0x10];
            v41 = (__n128 *)&v14[v39];
            v40->n128_u32[0] = *(_DWORD *)&v14[v39];
            v40->n128_u64[1] = *(_QWORD *)&v14[v39 + 8];
            v39 += 16;
          }
          while (&v41[1] != v30);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(a1, v17, a3, v18, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v14, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>((char *)v8, (char *)&v8[a4 >> 1], (char *)a2, a4 >> 1, a4 - (a4 >> 1), v14, a6);
      }
    }
  }
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unsigned __int32 v16;
  __n128 *v17;
  uint64_t v18;
  unsigned __int32 v19;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  if (a4)
  {
    v6 = a5;
    v9 = a1;
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_u32[0] >= a1->n128_u32[0])
      {
        *a5 = *a1;
        result = *v10;
      }
      else
      {
        *a5 = *v10;
        result = *a1;
      }
      a5[1] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      v21 = &a1[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(a1, v21, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      v22 = &v9[a4 >> 1];
      while (v22 != a2)
      {
        if (v22->n128_u32[0] >= v9->n128_u32[0])
        {
          v24 = *v9++;
          result = v24;
        }
        else
        {
          v23 = *v22++;
          result = v23;
        }
        *v6++ = result;
        if (v9 == v21)
        {
          if (v22 != a2)
          {
            v25 = 0;
            do
            {
              result = v22[v25];
              v6[v25++] = result;
            }
            while (&v22[v25] != a2);
          }
          return result;
        }
      }
      if (v9 != v21)
      {
        v26 = 0;
        do
        {
          result = v9[v26];
          v6[v26++] = result;
        }
        while (&v9[v26] != v21);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a5 = *a1;
      v11 = a1 + 1;
      if (&a1[1] != a2)
      {
        v12 = 0;
        v13 = a5;
        v14 = a5;
        do
        {
          v15 = v11;
          v16 = v14->n128_u32[0];
          ++v14;
          if (v9[1].n128_u32[0] >= v16)
          {
            result = *v11;
            *v14 = *v11;
          }
          else
          {
            result = *v13;
            *v14 = *v13;
            v17 = a5;
            if (v13 != a5)
            {
              v18 = v12;
              while (1)
              {
                v17 = (__n128 *)((char *)a5 + v18);
                v19 = *(unsigned __int32 *)((char *)a5[-1].n128_u32 + v18);
                if (v15->n128_u32[0] >= v19)
                  break;
                v17->n128_u32[0] = v19;
                v17->n128_u64[1] = v17[-1].n128_u64[1];
                v18 -= 16;
                if (!v18)
                {
                  v17 = a5;
                  break;
                }
              }
            }
            v17->n128_u32[0] = v15->n128_u32[0];
            v17->n128_u64[1] = v9[1].n128_u64[1];
          }
          v11 = v15 + 1;
          v12 += 16;
          v13 = v14;
          v9 = v15;
        }
        while (&v15[1] != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *i;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = *(_DWORD *)a2;
      v12 = -a4;
      while (1)
      {
        v13 = *(_DWORD *)&result[v10];
        if (v11 < v13)
          break;
        v10 += 16;
        v51 = __CFADD__(v12++, 1);
        if (v51)
          return result;
      }
      v14 = &result[v10];
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v60 = (unsigned int *)&result[v10];
          *v60 = v11;
          *(_DWORD *)a2 = v13;
          v61 = *(_QWORD *)&result[v10 + 8];
          *((_QWORD *)v60 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v61;
          return result;
        }
        if (v12 <= 0)
          v25 = -v12;
        else
          v25 = 1 - v12;
        v24 = v25 >> 1;
        v18 = &result[16 * (v25 >> 1) + v10];
        v17 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 4;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[16 * (v26 >> 1)];
            v30 = *(_DWORD *)v28;
            v29 = v28 + 16;
            v26 += ~(v26 >> 1);
            if (v30 < *(_DWORD *)v18)
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = (v17 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v15 = a5;
        else
          v15 = a5 + 1;
        v16 = v15 >> 1;
        v17 = &a2[16 * (v15 >> 1)];
        v18 = a2;
        if (v14 != a2)
        {
          v19 = (a2 - result - v10) >> 4;
          v18 = &result[v10];
          do
          {
            v20 = v19 >> 1;
            v21 = (unsigned int *)&v18[16 * (v19 >> 1)];
            v23 = *v21;
            v22 = (char *)(v21 + 4);
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v17 < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = (v18 - result - v10) >> 4;
      }
      v31 = v17;
      if (v18 != a2)
      {
        v31 = v18;
        if (a2 != v17)
        {
          v32 = *(_DWORD *)v18;
          *(_DWORD *)v18 = v11;
          *(_DWORD *)a2 = v32;
          v33 = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v33;
          v31 = v18 + 16;
          for (i = a2 + 16; i != v17; i += 16)
          {
            if (v31 == a2)
              a2 = i;
            v35 = *(_DWORD *)v31;
            *(_DWORD *)v31 = *(_DWORD *)i;
            *(_DWORD *)i = v35;
            v36 = *((_QWORD *)v31 + 1);
            *((_QWORD *)v31 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v36;
            v31 += 16;
          }
          if (v31 == a2)
          {
            v31 = a2;
          }
          else
          {
            v37 = v31;
            v38 = a2;
            do
            {
              while (1)
              {
                v39 = *(_DWORD *)v37;
                *(_DWORD *)v37 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v39;
                v40 = *((_QWORD *)v37 + 1);
                *((_QWORD *)v37 + 1) = *((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = v40;
                v37 += 16;
                a2 += 16;
                if (a2 == v17)
                  break;
                if (v37 == v38)
                  v38 = a2;
              }
              a2 = v38;
            }
            while (v37 != v38);
          }
        }
      }
      a4 = -(v24 + v12);
      v41 = a5 - v16;
      if (v24 + v16 >= a5 - (v24 + v16) - v12)
      {
        v44 = v17;
        v45 = v14;
        std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v31, v44, a3, a4, a5 - v16, a6, a7);
        result = v45;
        v17 = v18;
        v41 = v16;
        a4 = v24;
        a3 = v31;
      }
      else
      {
        v42 = v18;
        v43 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,llvm::less_first &,std::pair<unsigned int,llvm::MDNode *> *>(v14, v42, v31, v24, v16, a6, a7);
        a3 = v43;
        result = v31;
      }
      a5 = v41;
      a2 = v17;
      if (!v41)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v54 = 0;
        do
        {
          *(_OWORD *)&a6[v54] = *(_OWORD *)&result[v54];
          v54 += 16;
        }
        while (&result[v54] != a2);
        if (v54)
        {
          v55 = &a6[v54];
          v56 = (uint64_t)&a6[v54 - 16];
          while (a2 != a3)
          {
            v57 = *(_DWORD *)a2;
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
            {
              v58 = a2;
            }
            else
            {
              v57 = *(_DWORD *)a6;
              v58 = a6;
            }
            v59 = *((_QWORD *)v58 + 1);
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
              a2 += 16;
            else
              a6 += 16;
            *(_DWORD *)result = v57;
            *((_QWORD *)result + 1) = v59;
            result += 16;
            if (v55 == a6)
              return result;
          }
          v64 = 0;
          do
          {
            v65 = &result[v64];
            v66 = &a6[v64];
            *(_DWORD *)v65 = *(_DWORD *)&a6[v64];
            *((_QWORD *)v65 + 1) = *(_QWORD *)&a6[v64 + 8];
            v64 += 16;
          }
          while ((char *)v56 != v66);
        }
      }
    }
    else if (a2 != a3)
    {
      v46 = 0;
      do
      {
        *(_OWORD *)&a6[v46] = *(_OWORD *)&a2[v46];
        v46 += 16;
      }
      while (&a2[v46] != a3);
      if (v46)
      {
        v47 = &a6[v46];
        v48 = a3 - 8;
        while (a2 != result)
        {
          v49 = *((_DWORD *)a2 - 4);
          v50 = *((_DWORD *)v47 - 4);
          v51 = v50 >= v49;
          if (v50 < v49)
          {
            v52 = a2;
          }
          else
          {
            v49 = *((_DWORD *)v47 - 4);
            v52 = v47;
          }
          if (!v51)
            a2 -= 16;
          v53 = *((_QWORD *)v52 - 1);
          if (v51)
            v47 -= 16;
          *((_DWORD *)v48 - 2) = v49;
          *(_QWORD *)v48 = v53;
          v48 -= 16;
          if (v47 == a6)
            return result;
        }
        v62 = 0;
        do
        {
          v63 = &v48[v62];
          *((_DWORD *)v63 - 2) = *(_DWORD *)&v47[v62 - 16];
          *(_QWORD *)v63 = *(_QWORD *)&v47[v62 - 8];
          v62 -= 16;
        }
        while (&v47[v62] != a6);
      }
    }
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::MDAttachments::Attachment,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 16 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v6);
  llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::uninitialized_move<llvm::MDAttachments::Attachment*,llvm::MDAttachments::Attachment*>(*(unsigned __int8 ***)a1, (unsigned __int8 **)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8)), a2);
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)a1 - 8;
    v6 = 16 * v4;
    do
    {
      result = v5 + v6;
      v7 = *(_QWORD *)(v5 + v6);
      if (v7)
        result = llvm::MetadataTracking::untrack(result, v7);
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

unsigned __int8 **llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::uninitialized_move<llvm::MDAttachments::Attachment*,llvm::MDAttachments::Attachment*>(unsigned __int8 **result, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;

  if (result != a2)
  {
    v4 = (unsigned __int8 **)(a3 + 8);
    v5 = result + 1;
    do
    {
      *((_DWORD *)v4 - 2) = *((_DWORD *)v5 - 2);
      *v4 = *v5;
      if (*v5)
      {
        result = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)v5, *v5, (uint64_t)v4);
        *v5 = 0;
      }
      v4 += 2;
      v6 = v5 + 1;
      v5 += 2;
    }
    while (v6 != a2);
  }
  return result;
}

_DWORD *llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::erase(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,0>(a3, (_DWORD *)(*a1 + 16 * *((unsigned int *)a1 + 2)), a2);
  v6 = v5;
  v7 = *a1;
  v8 = *a1 + 16 * *((unsigned int *)a1 + 2);
  if ((uint64_t *)v8 != v5)
  {
    v9 = (uint64_t *)(v8 - 8);
    do
    {
      if (*v9)
        llvm::MetadataTracking::untrack((uint64_t)v9, *v9);
      v10 = v9 - 1;
      v9 -= 2;
    }
    while (v10 != v6);
    v7 = *a1;
  }
  *((_DWORD *)a1 + 2) = ((unint64_t)v6 - v7) >> 4;
  return a2;
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,llvm::MDAttachments::Attachment *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  unsigned __int8 **v6;
  int v7;
  uint64_t *v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (unsigned __int8 **)(v4 + 2);
    v7 = *v4;
    v4 += 4;
    v8 = (uint64_t *)(a3 + 2);
    *a3 = v7;
    a3 += 4;
    llvm::TrackingMDRef::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucketImpl<llvm::Value const*>((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    v5[3] = 0;
    v5[4] = 0;
    *v5 = v6;
    v5[1] = v5 + 3;
    v5[2] = 0x100000000;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 40 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 40 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::InsertIntoBucketImpl<llvm::Value const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned __int8 **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>,llvm::Value const*,llvm::MDAttachments,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,llvm::MDAttachments>>::LookupBucketFor<llvm::Value const*>((uint64_t *)a1, (_QWORD *)v13, &v26);
          v14 = v26;
          v15 = *(_QWORD *)v13;
          v16 = v26 + 24;
          v17 = v26;
          *(_QWORD *)(v26 + 8) = v26 + 24;
          v18 = (uint64_t *)(v17 + 8);
          *(_QWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = 0x100000000;
          v19 = *(unsigned int *)(v13 + 16);
          if (v13 != v14 && (_DWORD)v19 != 0)
          {
            v21 = *(unsigned __int8 ***)(v13 + 8);
            if ((unsigned __int8 **)(v13 + 24) == v21)
            {
              if (v19 < 2)
              {
                v23 = *(unsigned int *)(v13 + 16);
              }
              else
              {
                llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::clear((unint64_t)v18);
                llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::grow((uint64_t)v18, v19);
                v21 = *(unsigned __int8 ***)(v13 + 8);
                v23 = *(unsigned int *)(v13 + 16);
                v16 = *v18;
              }
              llvm::SmallVectorTemplateBase<llvm::MDAttachments::Attachment,false>::uninitialized_move<llvm::MDAttachments::Attachment*,llvm::MDAttachments::Attachment*>(v21, &v21[2 * v23], v16);
              *(_DWORD *)(v14 + 16) = v19;
              llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::clear(v13 + 8);
            }
            else
            {
              *(_QWORD *)(v14 + 8) = v21;
              v22 = *(_DWORD *)(v13 + 20);
              *(_DWORD *)(v14 + 16) = v19;
              *(_DWORD *)(v14 + 20) = v22;
              *(_QWORD *)(v13 + 8) = v13 + 24;
              *(_QWORD *)(v13 + 16) = 0;
            }
          }
          ++*(_DWORD *)(a1 + 8);
          llvm::SmallVector<llvm::MDAttachments::Attachment,1u>::~SmallVector((char **)(v13 + 8));
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 40 * v24;
    do
    {
      *result = -4096;
      result += 5;
      v25 -= 40;
    }
    while (v25);
  }
  return result;
}

unint64_t llvm::SmallVectorImpl<llvm::MDAttachments::Attachment>::clear(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)result - 8;
    v4 = 16 * v2;
    do
    {
      result = v3 + v4;
      v5 = *(_QWORD *)(v3 + v4);
      if (v5)
        result = llvm::MetadataTracking::untrack(result, v5);
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>,llvm::DenseMapInfo<llvm::DIAssignID *,void>,llvm::detail::DenseMapPair<llvm::DIAssignID *,llvm::SmallVector<llvm::Instruction *,1u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (_QWORD *)(v4 + 24);
      v13 = 32 * v3;
      do
      {
        v14 = *(v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          v15 = v20;
          *v20 = *(v12 - 3);
          v15[2] = 0x100000000;
          v15[1] = v15 + 3;
          v16 = (uint64_t)(v15 + 1);
          if (*((_DWORD *)v12 - 2))
            llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(v16, (uint64_t)(v12 - 2));
          ++*(_DWORD *)(a1 + 8);
          v17 = (_QWORD *)*(v12 - 2);
          if (v12 != v17)
            free(v17);
        }
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 32 * v18;
    do
    {
      *result = -4096;
      result += 4;
      v19 -= 32;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  uint64_t v2;
  unint64_t *ValueName;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(result + 104);
    if (v2)
    {
      ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      return llvm::StringMapImpl::RemoveKey(v2, (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20)), *ValueName);
    }
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  uint64_t v2;
  unint64_t *ValueName;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(result + 72);
    if (v2)
    {
      ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      return llvm::StringMapImpl::RemoveKey(v2, (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20)), *ValueName);
    }
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(uint64_t result, llvm::Value *this)
{
  uint64_t v2;
  unint64_t *ValueName;

  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(result + 56);
    if (v2)
    {
      ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
      return llvm::StringMapImpl::RemoveKey(v2, (uint64_t *)((char *)ValueName + *(unsigned int *)(v2 + 20)), *ValueName);
    }
  }
  return result;
}

uint64_t llvm::Module::Module(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  _BYTE v14[24];

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 20) = 0xFFFFFFFF00000010;
  *(_DWORD *)(v7 + 28) = 0;
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x4800000000;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 > 0x16)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 168) = a3;
    *(_QWORD *)(a1 + 176) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 160) = v11;
    memmove(v11, a2, a3);
    *((_BYTE *)v11 + a3) = 0;
    v8 = operator new(v10);
    *(_QWORD *)(a1 + 192) = a3;
    *(_QWORD *)(a1 + 200) = v12;
    *(_QWORD *)(a1 + 184) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 183) = a3;
    if (!a3)
    {
      *(_BYTE *)(a1 + 160) = 0;
      v8 = (void *)(a1 + 184);
      *(_BYTE *)(a1 + 207) = 0;
      goto LABEL_9;
    }
    memmove((void *)(a1 + 160), a2, a3);
    *(_BYTE *)(a1 + 160 + a3) = 0;
    v8 = (void *)(a1 + 184);
    *(_BYTE *)(a1 + 207) = a3;
  }
  memmove(v8, a2, a3);
LABEL_9:
  *((_BYTE *)v8 + a3) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 252) = 16;
  llvm::DataLayout::DataLayout(a1 + 256, &str_35, 0);
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 712) = 0x1000000000;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 736) = 0;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(**(llvm::SmallPtrSetImplBase ***)a1, (const void *)a1, (uint64_t)v14);
  return a1;
}

void llvm::Module::~Module(llvm::Module *this)
{
  char *v2;
  uint64_t i;
  llvm::Function *v4;
  char *v5;
  uint64_t j;
  uint64_t v7;
  char *v8;
  uint64_t k;
  uint64_t v10;
  char *v11;
  uint64_t m;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  llvm::Module *v31;
  uint64_t v32;
  llvm::Module *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  llvm::SmallPtrSetImplBase::erase_imp(**(llvm::SmallPtrSetImplBase ***)this, this);
  v2 = (char *)this + 24;
  for (i = *((_QWORD *)this + 4); (char *)i != v2; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v4 = (llvm::Function *)(i - 56);
    else
      v4 = 0;
    llvm::Function::dropAllReferences(v4);
  }
  v5 = (char *)this + 8;
  for (j = *((_QWORD *)this + 2); (char *)j != v5; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v7 = j - 56;
    else
      v7 = 0;
    llvm::User::dropAllReferences(v7);
    llvm::Value::clearMetadata(v7);
  }
  v8 = (char *)this + 40;
  for (k = *((_QWORD *)this + 6); (char *)k != v8; k = *(_QWORD *)(k + 8))
  {
    if (k)
      v10 = k - 48;
    else
      v10 = 0;
    llvm::User::dropAllReferences(v10);
  }
  v11 = (char *)this + 56;
  for (m = *((_QWORD *)this + 8); (char *)m != v11; m = *(_QWORD *)(m + 8))
  {
    if (m)
      v13 = m - 56;
    else
      v13 = 0;
    llvm::User::dropAllReferences(v13);
  }
  v14 = *((_QWORD *)this + 2);
  if ((char *)v14 != v5)
  {
    do
      v14 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase((uint64_t)this + 8, v14);
    while (v5 != (char *)v14);
  }
  v15 = *((_QWORD *)this + 4);
  if ((char *)v15 != v2)
  {
    do
      v15 = llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase((uint64_t)this + 24, v15);
    while (v2 != (char *)v15);
  }
  v16 = *((_QWORD *)this + 6);
  if ((char *)v16 != v8)
  {
    do
      v16 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::erase((uint64_t)this + 40, v16);
    while (v8 != (char *)v16);
  }
  v17 = *((_QWORD *)this + 8);
  if ((char *)v17 != v11)
  {
    do
      v17 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalIFunc>,llvm::SymbolTableListTraits<llvm::GlobalIFunc>>::erase((uint64_t)this + 56, v17);
    while (v11 != (char *)v17);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 90), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 696);
  llvm::DataLayout::~DataLayout((llvm::Module *)((char *)this + 256));
  if (*((_DWORD *)this + 61))
  {
    v18 = *((unsigned int *)this + 60);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 8 * v18;
      do
      {
        v21 = *(_QWORD *)(*((_QWORD *)this + 29) + v19);
        if (v21 != -8 && v21 != 0)
          MEMORY[0x24BD1B398]();
        v19 += 8;
      }
      while (v20 != v19);
    }
  }
  free(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  v23 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (*((_DWORD *)this + 33))
  {
    v25 = *((unsigned int *)this + 32);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v27 = 8 * v25;
      do
      {
        v28 = *(_QWORD *)(*((_QWORD *)this + 15) + v26);
        if (v28 != -8 && v28 != 0)
        {
          v30 = *(void **)(v28 + 32);
          if (v30 != *(void **)(v28 + 24))
            free(v30);
          MEMORY[0x24BD1B398](v28, 8);
        }
        v26 += 8;
      }
      while (v27 != v26);
    }
  }
  free(*((void **)this + 15));
  std::unique_ptr<llvm::ValueSymbolTable>::reset[abi:nn180100]((uint64_t *)this + 14, 0);
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  v31 = (llvm::Module *)*((_QWORD *)this + 10);
  if (v31 != (llvm::Module *)((char *)this + 72))
  {
    do
    {
      v32 = *(_QWORD *)v31;
      v33 = (llvm::Module *)*((_QWORD *)v31 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v31;
      *(_QWORD *)(v32 + 8) = v33;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      llvm::NamedMDNode::~NamedMDNode(v31);
      MEMORY[0x24BD1B3A4]();
      v31 = v33;
    }
    while (v33 != (llvm::Module *)((char *)this + 72));
  }
  v34 = *((_QWORD *)this + 8);
  if ((char *)v34 != v11)
  {
    do
      v34 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalIFunc>,llvm::SymbolTableListTraits<llvm::GlobalIFunc>>::erase((uint64_t)this + 56, v34);
    while (v11 != (char *)v34);
  }
  v35 = *((_QWORD *)this + 6);
  if ((char *)v35 != v8)
  {
    do
      v35 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalAlias>,llvm::SymbolTableListTraits<llvm::GlobalAlias>>::erase((uint64_t)this + 40, v35);
    while (v8 != (char *)v35);
  }
  v36 = *((_QWORD *)this + 4);
  if ((char *)v36 != v2)
  {
    do
      v36 = llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase((uint64_t)this + 24, v36);
    while (v2 != (char *)v36);
  }
  v37 = *((_QWORD *)this + 2);
  if ((char *)v37 != v5)
  {
    do
      v37 = llvm::iplist_impl<llvm::simple_ilist<llvm::GlobalVariable>,llvm::SymbolTableListTraits<llvm::GlobalVariable>>::erase((uint64_t)this + 8, v37);
    while (v5 != (char *)v37);
  }
}

uint64_t llvm::ValueSymbolTable::lookup(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  int Key;

  v4 = *(unsigned int *)(a1 + 24);
  if ((v4 & 0x80000000) == 0 && a3 > v4)
  {
    v4 = v4 <= 1 ? 1 : v4;
    if (a3 >= v4)
      a3 = v4;
  }
  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * Key) + 8);
}

uint64_t llvm::Module::getMDKindID(uint64_t **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  int v5;

  v3 = **a1;
  v5 = *(_DWORD *)(v3 + 2492);
  return *(unsigned int *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(v3 + 2480), a2, a3, &v5)+ 8);
}

llvm::PointerType **llvm::Module::getOrInsertFunction(uint64_t a1, uint64_t *a2, unint64_t a3, llvm::PointerType **a4, uint64_t a5)
{
  uint64_t v10;
  llvm::Constant **v11;
  llvm::Constant *v12;
  llvm::Type *v13;
  _DWORD *v14;
  _QWORD v16[4];
  __int16 v17;

  v10 = llvm::ValueSymbolTable::lookup(*(_QWORD *)(a1 + 112), a2, a3);
  if (v10)
  {
    v11 = (llvm::Constant **)v10;
    v12 = (llvm::Constant *)llvm::PointerType::get(a4, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v10 + 8) >> 8));
    if (*v11 != v12)
      getFoldedCast((llvm *)0x31, (uint64_t)v11, v12, 0);
  }
  else
  {
    v13 = (llvm::Type *)*(unsigned int *)(a1 + 268);
    v17 = 261;
    v16[0] = a2;
    v16[1] = a3;
    v14 = operator new(0x80uLL);
    v14[7] = v14[7] & 0x38000000 | 0x40000000;
    *(_QWORD *)v14 = 0;
    llvm::Function::Function((uint64_t)(v14 + 2), (uint64_t)a4, 0, v13, (const llvm::Twine *)v16, 0);
    if ((*((_BYTE *)v14 + 41) & 0x20) == 0)
      *((_QWORD *)v14 + 15) = a5;
    llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::insert(a1 + 24, (uint64_t *)(a1 + 24), (uint64_t)(v14 + 2));
  }
  return a4;
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const llvm::Twine *a2)
{
  uint64_t *v3;
  unint64_t v4;
  int Key;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[33];

  v10[32] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef((unsigned __int8 *)a2, (uint64_t)&v8);
  Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 29, v3, v4);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 60))
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * Key) + 8);
  if (v8 != v10)
    free(v8);
  return v6;
}

unint64_t llvm::Module::getOrInsertNamedMetadata(uint64_t a1, uint64_t *a2, llvm::formatv_object_base *a3)
{
  unint64_t **v6;
  unint64_t *v7;
  unint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::formatv_object_base *v13[4];
  __int16 v14;

  v6 = llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 232), a2, (unint64_t)a3);
  v7 = *v6;
  result = (*v6)[1];
  if (!result)
  {
    v9 = operator new();
    v14 = 261;
    v13[0] = (llvm::formatv_object_base *)a2;
    v13[1] = a3;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    llvm::Twine::str(v13, (std::string *)(v9 + 16));
    *(_QWORD *)(v9 + 40) = 0;
    v10 = (_QWORD *)operator new();
    *v10 = v10 + 2;
    v10[1] = 0x400000000;
    *(_QWORD *)(v9 + 48) = v10;
    v7[1] = v9;
    *(_QWORD *)(v9 + 40) = a1;
    v12 = *(_QWORD *)(a1 + 72);
    v11 = (uint64_t *)(a1 + 72);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v12 + 8) = v9;
    *v11 = v9;
    return v7[1];
  }
  return result;
}

void llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  char *v3;
  int v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = (char *)this + 232;
  v4 = *((char *)a2 + 39);
  if (v4 >= 0)
    v5 = (uint64_t *)((char *)a2 + 16);
  else
    v5 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = *((_QWORD *)a2 + 3);
  llvm::StringMap<llvm::NamedMDNode *,llvm::MallocAllocator>::erase((uint64_t)v3, v5, v6);
  v8 = *(_QWORD *)a2;
  v7 = (_QWORD *)*((_QWORD *)a2 + 1);
  *v7 = *(_QWORD *)a2;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  llvm::NamedMDNode::~NamedMDNode(a2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::StringMap<llvm::NamedMDNode *,llvm::MallocAllocator>::erase(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int Key;
  unint64_t *v6;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8))
    return 0;
  v6 = *(unint64_t **)(*(_QWORD *)a1 + 8 * Key);
  llvm::StringMapImpl::RemoveKey(a1, (uint64_t *)((char *)v6 + *(unsigned int *)(a1 + 20)), *v6);
  MEMORY[0x24BD1B398](v6, 8);
  return 1;
}

uint64_t llvm::Module::isValidModFlagBehavior(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t *LimitedValue;

  if (result)
  {
    if (*(_BYTE *)result == 1
      && (v2 = *(_QWORD *)(result + 128), *(_BYTE *)(v2 + 16) == 16)
      && (LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)(v2 + 24), 0xFFFFFFFFFFFFFFFFLL),
          (unint64_t)LimitedValue - 9 >= 0xFFFFFFFFFFFFFFF8))
    {
      *a2 = (_DWORD)LimitedValue;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::Module::isValidModuleFlag(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t result;
  _QWORD *v11;
  _BYTE *v12;
  _QWORD *v13;

  v8 = (_QWORD *)(a1 - 16);
  v7 = *(_QWORD *)(a1 - 16);
  if ((v7 & 2) == 0)
  {
    if ((*(_QWORD *)(a1 - 16) & 0x3C0uLL) >= 0xC0)
    {
      v9 = &v8[-((v7 >> 2) & 0xF)];
      goto LABEL_6;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 - 24) < 3u)
    return 0;
  v9 = *(uint64_t **)(a1 - 32);
LABEL_6:
  result = llvm::Module::isValidModFlagBehavior(*v9, a2);
  if (!(_DWORD)result)
    return result;
  if ((*v8 & 2) != 0)
    v11 = *(_QWORD **)(a1 - 32);
  else
    v11 = &v8[-((*v8 >> 2) & 0xFLL)];
  v12 = (_BYTE *)v11[1];
  if (!v12 || *v12)
    return 0;
  *a3 = v12;
  if ((*v8 & 2) != 0)
    v13 = *(_QWORD **)(a1 - 32);
  else
    v13 = &v8[-((*v8 >> 2) & 0xFLL)];
  *a4 = v13[2];
  return 1;
}

uint64_t llvm::Module::getModuleFlagsMetadata(llvm::Module *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[4];
  __int16 v15;

  v14[0] = "llvm.module.flags";
  v15 = 259;
  result = llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)v14);
  if (result)
  {
    v4 = result;
    v5 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + v6);
        v13 = 0;
        v11 = 0;
        v12 = 0;
        result = llvm::Module::isValidModuleFlag(v8, &v13, &v12, &v11);
        if ((_DWORD)result)
        {
          LODWORD(v14[0]) = v13;
          v14[1] = v12;
          v14[2] = v11;
          result = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(a2, (unint64_t)v14, 1);
          v9 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v10 = *(_OWORD *)result;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(result + 16);
          *(_OWORD *)v9 = v10;
          ++*(_DWORD *)(a2 + 8);
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t llvm::Module::getModuleFlag(llvm::Module *a1, const void *a2, size_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v13);
  v5 = v13;
  if ((_DWORD)v14)
  {
    v6 = (uint64_t *)((char *)v13 + 16);
    v7 = 24 * v14;
    while (1)
    {
      v8 = *(uint64_t **)(*(v6 - 1) + 8);
      v10 = *v8;
      v9 = v8 + 3;
      if (a3 == v10 && (!a3 || !memcmp(a2, v9, a3)))
        break;
      v6 += 3;
      v7 -= 24;
      if (!v7)
        goto LABEL_7;
    }
    v11 = *v6;
  }
  else
  {
LABEL_7:
    v11 = 0;
  }
  if (v5 != v15)
    free(v5);
  return v11;
}

uint64_t llvm::Module::addModuleFlag(_QWORD **a1, llvm::Type *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  llvm::ValueAsMetadata *v9;
  llvm::Value *v10;
  uint64_t v11;
  char v12;
  unint64_t inserted;
  llvm::MDNode *Impl;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1992), (llvm::Type *)a2, 0);
  v16[0] = llvm::ValueAsMetadata::get(v9, v10);
  v11 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**a1 + 312), a3, a4);
  if (v12)
    *(_QWORD *)(v11 + 16) = v11;
  v16[1] = v11 + 8;
  v16[2] = a5;
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, (uint64_t *)"llvm.module.flags", (llvm::formatv_object_base *)0x11);
  Impl = llvm::MDTuple::getImpl(*a1, (llvm::hashing::detail::hash_state *)v16, 3uLL, 0, 1);
  return llvm::SmallVectorImpl<llvm::TrackingMDRef>::emplace_back<llvm::MDNode *&>(*(_QWORD *)(inserted + 48), (uint64_t *)&Impl);
}

uint64_t llvm::Module::addModuleFlag(_QWORD **a1, llvm::Type *a2, uint64_t *a3, unint64_t a4, llvm::Type *a5)
{
  llvm::ValueAsMetadata *v9;
  llvm::Value *v10;
  _QWORD *v11;

  v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1992), (llvm::Type *)a5, 0);
  v11 = llvm::ValueAsMetadata::get(v9, v10);
  return llvm::Module::addModuleFlag(a1, a2, a3, a4, (uint64_t)v11);
}

void llvm::Module::getUniqueIntrinsicName(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  std::string v24;
  uint64_t *v25;
  unint64_t v26;
  const char *v27;
  __int16 v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;

  v12 = a1 + 720;
  LODWORD(v29) = a4;
  v30 = a5;
  LODWORD(v31) = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::try_emplace<unsigned int>((uint64_t)&v24, a1 + 720, (uint64_t)&v29, &v31);
  if (v24.__r_.__value_.__s.__data_[16])
  {
    v23 = 0;
    v22 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(a1 + 696), a2, a3, &v23);
    v13 = *(_DWORD *)(*v22 + 8);
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    while (1)
    {
      v25 = a2;
      v26 = a3;
      v27 = ".";
      v28 = 773;
      v29 = &v25;
      v31 = v13;
      v32 = 2050;
      llvm::Twine::str((llvm::formatv_object_base **)&v29, &v24);
      if (*(char *)(a6 + 23) < 0)
        operator delete(*(void **)a6);
      *(std::string *)a6 = v24;
      v14 = *(char *)(a6 + 23);
      v15 = v14 >= 0 ? (uint64_t *)a6 : *(uint64_t **)a6;
      v16 = v14 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(_QWORD *)(a6 + 8);
      v17 = llvm::ValueSymbolTable::lookup(*(_QWORD *)(a1 + 112), v15, v16);
      if (!v17)
        break;
      if (*(_BYTE *)(*(_QWORD *)(v17 + 24) + 8) == 14)
        v18 = *(_QWORD *)(v17 + 24);
      else
        v18 = 0;
      LODWORD(v25) = a4;
      v26 = v18;
      LODWORD(v27) = v13;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::try_emplace<unsigned int>((uint64_t)&v29, v12, (uint64_t)&v25, &v27);
      if (v18 == a5)
      {
        *((_DWORD *)v29 + 4) = v13;
        goto LABEL_22;
      }
      ++v13;
    }
    LODWORD(v29) = a4;
    v30 = a5;
    v25 = 0;
    v20 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(_QWORD *)(a1 + 720), *(_DWORD *)(a1 + 736), a4, a5, &v25);
    v21 = (uint64_t)v25;
    if ((v20 & 1) == 0)
    {
      v21 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(v12, (uint64_t)&v29, (uint64_t)v25);
      *(_DWORD *)v21 = a4;
      *(_QWORD *)(v21 + 8) = a5;
      *(_DWORD *)(v21 + 16) = 0;
    }
    *(_DWORD *)(v21 + 16) = v13;
LABEL_22:
    *(_DWORD *)(*v22 + 8) = v13 + 1;
  }
  else
  {
    v19 = *(unsigned int *)(v24.__r_.__value_.__r.__words[0] + 16);
    v25 = a2;
    v26 = a3;
    v27 = ".";
    v28 = 773;
    v29 = &v25;
    v31 = v19;
    v32 = 2050;
    llvm::Twine::str((llvm::formatv_object_base **)&v29, (std::string *)a6);
  }
}

char *llvm::Module::getOrInsertComdat(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char *v3;
  char *result;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  _BYTE v11[16];

  v5 = 0;
  v6 = 0;
  v7 = v11;
  v8 = v11;
  v9 = 2;
  v10 = 0;
  v3 = *llvm::StringMap<llvm::Comdat,llvm::MallocAllocator>::try_emplace<llvm::Comdat>((llvm::StringMapImpl *)(a1 + 120), a2, a3, &v5);
  if (v8 != v7)
    free(v8);
  result = v3 + 8;
  *((_QWORD *)v3 + 1) = v3;
  return result;
}

uint64_t llvm::Module::getSemanticInterposition(llvm::Module *this)
{
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;

  result = llvm::Module::getModuleFlag(this, "SemanticInterposition", 0x15uLL);
  if (result)
  {
    v2 = *(_QWORD *)(result + 128);
    v3 = (_QWORD *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u)
      v3 = (_QWORD *)*v3;
    return *v3 != 0;
  }
  return result;
}

unint64_t getSDKVersionMD(uint64_t a1)
{
  llvm::ConstantDataSequential *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return 0;
  if (*(_BYTE *)a1 != 1)
    return 0;
  v1 = *(llvm::ConstantDataSequential **)(a1 + 128);
  if (!v1 || *((_BYTE *)v1 + 16) != 14 || !*(_DWORD *)(*(_QWORD *)v1 + 32))
    return 0;
  llvm::ConstantDataSequential::getElementAsInteger(*(llvm::ConstantDataSequential **)(a1 + 128));
  v3 = v2;
  if (*(_DWORD *)(*(_QWORD *)v1 + 32) >= 2u)
  {
    llvm::ConstantDataSequential::getElementAsInteger(v1);
    v5 = v3 | (v4 << 32);
    if (*(_DWORD *)(*(_QWORD *)v1 + 32) >= 3u)
      llvm::ConstantDataSequential::getElementAsInteger(v1);
    return v5 | 0x8000000000000000;
  }
  return v3;
}

uint64_t llvm::Module::setPtrAuthABIVersion(_QWORD **a1, unint64_t a2)
{
  _QWORD *v4;
  llvm::ValueAsMetadata *v5;
  llvm::Value *v6;
  _QWORD *v7;
  llvm::ValueAsMetadata *v8;
  llvm::Value *v9;
  llvm::MDNode *Impl;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(**a1 + 1992, (int)a2, 0);
  v7 = llvm::ValueAsMetadata::get(v5, v6);
  v8 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v4 + 1920, HIDWORD(a2) & 1, 0);
  v12[0] = v7;
  v12[1] = llvm::ValueAsMetadata::get(v8, v9);
  v12[0] = llvm::MDTuple::getImpl(v4, (llvm::hashing::detail::hash_state *)v12, 2uLL, 0, 1);
  Impl = llvm::MDTuple::getImpl(v4, (llvm::hashing::detail::hash_state *)v12, 1uLL, 0, 1);
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)6, (uint64_t *)"ptrauth.abi-version", 0x13uLL, (uint64_t)Impl);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::try_emplace<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_DWORD *)a3, *(_QWORD *)(a3 + 8), &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(a2, a3, v12);
    v9 = result;
    *(_DWORD *)result = *(_DWORD *)a3;
    *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (int *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_QWORD *)v10 + 1);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -1 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -2)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (int *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = *((_QWORD *)v10 + 1);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_9;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::InsertIntoBucketImpl<std::pair<unsigned int,llvm::FunctionType const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::grow(a1, v6);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_DWORD *)a2, *(_QWORD *)(a2 + 8), &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)a3 != -1 || *(_QWORD *)(a3 + 8) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_OWORD *llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_24AA49690;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4 + 8;
      do
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = *(_QWORD *)v13;
        if ((v14 != -1 || v15 != -4096) && (v14 != -2 || v15 != -8192))
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>,std::pair<unsigned int,llvm::FunctionType const*>,unsigned int,llvm::DenseMapInfo<std::pair<unsigned int,llvm::FunctionType const*>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,llvm::FunctionType const*>,unsigned int>>::LookupBucketFor<std::pair<unsigned int,llvm::FunctionType const*>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v19);
          v16 = v19;
          *v19 = *(_DWORD *)(v13 - 8);
          *((_QWORD *)v16 + 1) = *(_QWORD *)v13;
          v16[4] = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 24 * v17;
    do
    {
      *result = xmmword_24AA49690;
      result = (_OWORD *)((char *)result + 24);
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

char **llvm::StringMap<llvm::Comdat,llvm::MallocAllocator>::try_emplace<llvm::Comdat>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  char **i;
  char *v10;
  char *v11;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (char **)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == (char *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (char *)-8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  *i = llvm::StringMapEntry<llvm::Comdat>::create<llvm::MallocAllocator,llvm::Comdat>(a2, a3, (uint64_t)a1, a4);
  ++*((_DWORD *)a1 + 3);
  for (i = (char **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 8 == 0;
  return i;
}

char *llvm::StringMapEntry<llvm::Comdat>::create<llvm::MallocAllocator,llvm::Comdat>(const void *a1, size_t a2, uint64_t a3, uint64_t *a4)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v7 = (char *)operator new(a2 + 73, (std::align_val_t)8uLL);
  v8 = v7;
  v9 = v7 + 72;
  if (a2)
    memcpy(v7 + 72, a1, a2);
  v9[a2] = 0;
  v10 = *a4;
  *(_QWORD *)v8 = a2;
  *((_QWORD *)v8 + 1) = v10;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a4 + 2);
  *((_QWORD *)v8 + 3) = v8 + 56;
  *((_QWORD *)v8 + 4) = v8 + 56;
  *((_QWORD *)v8 + 5) = 2;
  *((_DWORD *)v8 + 12) = 0;
  return v8;
}

uint64_t _GLOBAL__sub_I_ModuleSummaryIndex_cpp()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *__p[3];
  __int128 v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void **v21[2];

  v0 = llvm::cl::Option::Option((uint64_t)&qword_257964700, 0, 0);
  byte_257964780 = 0;
  qword_257964788 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257964790 = 0;
  qword_257964700 = (uint64_t)off_251C123A8;
  qword_257964798 = (uint64_t)&off_251C12520;
  qword_2579647A0[0] = &off_251C12410;
  qword_2579647B8 = (uint64_t)qword_2579647A0;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"propagate-attrs", 0xFuLL);
  byte_257964780 = 1;
  word_257964790 = 257;
  word_25796470A = word_25796470A & 0xFF9F | 0x20;
  qword_257964720 = (uint64_t)"Propagate attributes in index";
  unk_257964728 = 29;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257964700);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_257964700, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&qword_2579647C0, 0, 0);
  byte_257964840 = 0;
  qword_257964848 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257964850 = 0;
  qword_2579647C0 = (uint64_t)off_251C123A8;
  qword_257964858 = (uint64_t)&off_251C12520;
  qword_257964860[0] = &off_251C12410;
  qword_257964878 = (uint64_t)qword_257964860;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"import-constants-with-refs", 0x1AuLL);
  byte_257964840 = 1;
  word_257964850 = 257;
  word_2579647CA = word_2579647CA & 0xFF9F | 0x20;
  qword_2579647E0 = (uint64_t)"Import constant global variables with references";
  unk_2579647E8 = 48;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_2579647C0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &qword_2579647C0, &dword_24A800000);
  v20 = 0;
  v18 = 0;
  v19 = 0uLL;
  v16 = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0uLL;
  memset(__p, 0, sizeof(__p));
  v8 = 0uLL;
  v9 = 0;
  v6 = 0uLL;
  v7 = 0;
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  llvm::FunctionSummary::FunctionSummary((uint64_t)&_MergedGlobals_32, 193, 0, 0, 0, &v19, (uint64_t)&v16, (uint64_t *)&v13, &v11, (__int128 *)__p, &v8, &v6, (uint64_t)v5, (uint64_t)v4, (uint64_t)v3);
  v21[0] = (void **)v3;
  std::vector<llvm::AllocInfo>::__destroy_vector::operator()[abi:nn180100](v21);
  v21[0] = (void **)v4;
  std::vector<llvm::CallsiteInfo>::__destroy_vector::operator()[abi:nn180100](v21);
  v21[0] = (void **)v5;
  std::vector<llvm::FunctionSummary::ParamAccess>::__destroy_vector::operator()[abi:nn180100](v21);
  v21[0] = (void **)&v6;
  std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](v21);
  v21[0] = (void **)&v8;
  std::vector<llvm::FunctionSummary::ConstVCall>::__destroy_vector::operator()[abi:nn180100](v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v11)
  {
    *((_QWORD *)&v11 + 1) = v11;
    operator delete((void *)v11);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if ((_QWORD)v19)
  {
    *((_QWORD *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
  return __cxa_atexit((void (*)(void *))llvm::FunctionSummary::~FunctionSummary, &_MergedGlobals_32, &dword_24A800000);
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, unsigned int (*a4)(uint64_t), uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  int v17[2];
  _QWORD v18[7];

  v18[6] = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(_QWORD *)(a1 - 8);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = a1 - 32 * v11;
  }
  v16 = v18;
  *(_QWORD *)v17 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v16, (char *)(v12 + 32), (char *)(v12 + 32 * v11));
  v13 = 24;
  if (*(_BYTE *)(a1 + 16) == 62)
    v13 = 64;
  v14 = llvm::GEPOperator::accumulateConstantOffset(*(_QWORD *)(a1 + v13), (llvm::Constant **)v16, v17[0], a2, a3, a4, a5);
  if (v16 != v18)
    free(v16);
  return v14;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::Constant **a2, uint64_t a3, llvm::DataLayout *this, uint64_t a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  llvm::Constant **v9;
  llvm::Type *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t UniqueInteger;
  unsigned int *v14;
  int v15;
  llvm::Constant *v16;
  llvm::StructType *v17;
  int v20;
  const void **v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  llvm::StructLayout *StructLayout;
  char v27;
  void *v28;
  llvm::Type *v29;
  uint64_t v30;
  unsigned int *v31;
  const char *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  const char *v37;
  unint64_t TypeAllocSize;
  void *v42;
  unsigned int v43;
  void *__src;
  unsigned int v45;
  void *v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  _QWORD v50[2];
  char v51;
  llvm::Constant **v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v51 = 0;
  v50[0] = a5;
  v50[1] = &v51;
  v52 = a2;
  v53 = a1 | 4;
  if (!a3)
    return 1;
  v9 = &a2[a3];
  while (1)
  {
    v10 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
    if ((v53 & 4) != 0 && v10)
    {
      v11 = v53 & 4;
      v12 = v53 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      UniqueInteger = llvm::Constant::getUniqueInteger(*a2);
      v14 = *(_DWORD *)(UniqueInteger + 8) >= 0x41u ? *(unsigned int **)UniqueInteger : (unsigned int *)UniqueInteger;
      v12 = *(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * *v14);
      a2 = v52;
      v11 = v53 & 4;
      v10 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
    }
    v15 = *(unsigned __int8 *)(v12 + 8);
    v16 = *a2;
    v17 = v11 ? 0 : v10;
    if (!v16 || *((_BYTE *)v16 + 16) != 16)
      break;
    v21 = (const void **)((char *)v16 + 24);
    v22 = *((_DWORD *)v16 + 8);
    if (v22 > 0x40)
      v23 = llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)v16 + 24)) == v22;
    else
      v23 = *v21 == 0;
    v24 = v23;
    if (v24)
      v20 = 4;
    else
      v20 = 1;
    if ((v24 & 1) != 0 || v15 == 19)
      goto LABEL_58;
    if (v17)
    {
      if (v22 >= 0x41)
        v21 = (const void **)*v21;
      v25 = *(unsigned int *)v21;
      StructLayout = llvm::DataLayout::getStructLayout(this, v17);
      llvm::APInt::APInt((llvm::APInt *)&v48, *(_DWORD *)(a5 + 8), *((_QWORD *)StructLayout + v25 + 2), 0);
      v27 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v50, (llvm::APInt *)&v48, 1);
      if (v49 >= 0x41)
      {
        v28 = v48;
        if (v48)
          goto LABEL_73;
      }
      goto LABEL_74;
    }
    v47 = v22;
    if (v22 > 0x40)
    {
      v46 = (void *)operator new[]();
      memcpy(v46, *v21, (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8);
      v11 = v53 & 4;
      v10 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
      if ((v53 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
LABEL_64:
        if (v11)
          goto LABEL_69;
      }
    }
    else
    {
      v46 = (void *)*v21;
      if (v10)
        goto LABEL_64;
    }
    v35 = llvm::Constant::getUniqueInteger(*v52);
    if (*(_DWORD *)(v35 + 8) >= 0x41u)
      v36 = *(unsigned int **)v35;
    else
      v36 = (unsigned int *)v35;
    v10 = *(llvm::Type **)(*((_QWORD *)v10 + 2) + 8 * *v36);
LABEL_69:
    TypeAllocSize = llvm::DataLayout::getTypeAllocSize(this, v10);
    if ((_BYTE)v37)
    v27 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v50, (llvm::APInt *)&v46, TypeAllocSize);
    if (v47 >= 0x41)
    {
      v28 = v46;
      if (v46)
LABEL_73:
        MEMORY[0x24BD1B380](v28, 0x1000C8000313F17);
    }
LABEL_74:
    if ((v27 & 1) == 0)
      return 0;
LABEL_75:
    llvm::generic_gep_type_iterator<llvm::Value const* const*>::operator++(&v52);
    a2 = v52;
    if (v52 == v9)
      return 1;
  }
  if (a6)
  {
    if (!v17 && v15 != 19)
    {
      v20 = 1;
      v45 = 1;
      __src = 0;
      if (a6(a7))
      {
        v51 = 1;
        v43 = v45;
        if (v45 > 0x40)
        {
          v42 = (void *)operator new[]();
          memcpy(v42, __src, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v42 = __src;
        }
        v29 = (llvm::Type *)(v53 & 0xFFFFFFFFFFFFFFF8);
        if ((v53 & 4) == 0 || !v29)
        {
          v30 = llvm::Constant::getUniqueInteger(*v52);
          if (*(_DWORD *)(v30 + 8) >= 0x41u)
            v31 = *(unsigned int **)v30;
          else
            v31 = (unsigned int *)v30;
          v29 = *(llvm::Type **)(*((_QWORD *)v29 + 2) + 8 * *v31);
        }
        v33 = llvm::DataLayout::getTypeAllocSize(this, v29);
        if ((_BYTE)v32)
        v34 = llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()((uint64_t)v50, (llvm::APInt *)&v42, v33);
        if (v43 >= 0x41 && v42)
          MEMORY[0x24BD1B380](v42, 0x1000C8000313F17);
        v20 = v34 ^ 1;
      }
      if (v45 >= 0x41)
      {
        if (__src)
          MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
      }
LABEL_58:
      if ((v20 | 4) != 4)
        return 0;
      goto LABEL_75;
    }
  }
  return 0;
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(llvm::Type *,llvm::ArrayRef<llvm::Value const*>,llvm::DataLayout const&,llvm::APInt &,llvm::function_ref<BOOL ()(llvm::Value&,llvm::APInt &)>)::$_0::operator()(uint64_t a1, llvm::APInt *this, uint64_t a3)
{
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  _QWORD *v13;
  unsigned int v14;
  const unint64_t **v15;
  unsigned int v16;

  llvm::APInt::sextOrTrunc(this, *(_DWORD *)(*(_QWORD *)a1 + 8), (llvm::APInt *)&v15);
  if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
    MEMORY[0x24BD1B380](*(_QWORD *)this, 0x1000C8000313F17);
  *(_QWORD *)this = v15;
  *((_DWORD *)this + 2) = v16;
  llvm::APInt::APInt((llvm::APInt *)&v15, *(_DWORD *)(*(_QWORD *)a1 + 8), a3, 0);
  if (!**(_BYTE **)(a1 + 8))
  {
    llvm::APInt::operator*((uint64_t)this, &v15, (llvm::APInt *)&v13);
    llvm::APInt::operator+=(*(_QWORD *)a1, &v13);
    if (v14 >= 0x41 && v13)
      MEMORY[0x24BD1B380](v13, 0x1000C8000313F17);
    goto LABEL_20;
  }
  v12 = 0;
  llvm::APInt::smul_ov(this, &v15, &v12, (llvm::APInt *)&v13);
  if (!v12)
  {
    llvm::APInt::sadd_ov(*(llvm::APInt **)a1, (const llvm::APInt *)&v13, &v12, (uint64_t)&v10);
    v6 = *(_QWORD *)a1;
    if (*(_DWORD *)(v6 + 8) >= 0x41u && *(_QWORD *)v6)
      MEMORY[0x24BD1B380](*(_QWORD *)v6, 0x1000C8000313F17);
    *(_QWORD *)v6 = v10;
    *(_DWORD *)(v6 + 8) = v11;
    v7 = v12;
    if (v14 >= 0x41 && v13)
      MEMORY[0x24BD1B380](v13, 0x1000C8000313F17);
    if (v7)
      goto LABEL_19;
LABEL_20:
    v8 = 1;
    goto LABEL_21;
  }
  if (v14 >= 0x41 && v13)
    MEMORY[0x24BD1B380](v13, 0x1000C8000313F17);
LABEL_19:
  v8 = 0;
LABEL_21:
  if (v16 >= 0x41 && v15)
    MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
  return v8;
}

llvm::raw_ostream *llvm::FastMathFlags::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  int v3;
  llvm::raw_ostream *v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)this;
  if (*(_DWORD *)this == -1)
  {
    v5 = " fast";
    v6 = 5;
    return llvm::raw_ostream::operator<<(a2, v5, v6);
  }
  v4 = this;
  if ((v3 & 1) != 0)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 7uLL)
    {
      *v7 = 0x636F737361657220;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " reassoc", 8uLL);
    }
    v3 = *(_DWORD *)v4;
    if ((*(_DWORD *)v4 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 4)
  {
    *(_BYTE *)(v8 + 4) = 110;
    *(_DWORD *)v8 = 1634627104;
    *((_QWORD *)a2 + 4) += 5;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " nnan", 5uLL);
  }
  v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 8) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 4)
  {
    *(_BYTE *)(v9 + 4) = 102;
    *(_DWORD *)v9 = 1852403232;
    *((_QWORD *)a2 + 4) += 5;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " ninf", 5uLL);
  }
  v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 8) == 0)
  {
LABEL_6:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_23:
  v10 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 3uLL)
  {
    *v10 = 2054385184;
    *((_QWORD *)a2 + 4) += 4;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " nsz", 4uLL);
  }
  v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 4)
  {
    *(_BYTE *)(v11 + 4) = 112;
    *(_DWORD *)v11 = 1668440352;
    *((_QWORD *)a2 + 4) += 5;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " arcp", 5uLL);
  }
  v3 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0)
      return this;
    goto LABEL_35;
  }
LABEL_31:
  v12 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) > 8)
  {
    *(_BYTE *)(v12 + 8) = 116;
    *(_QWORD *)v12 = *(_QWORD *)" contract";
    *((_QWORD *)a2 + 4) += 9;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, " contract", 9uLL);
  }
  if ((*(_DWORD *)v4 & 0x40) != 0)
  {
LABEL_35:
    v5 = " afn";
    v6 = 4;
    return llvm::raw_ostream::operator<<(a2, v5, v6);
  }
  return this;
}

BOOL llvm::OptBisect::shouldRunPass(llvm *a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL8 v13;
  size_t v14;
  llvm::raw_ostream *v15;
  _QWORD *v16;
  const char *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  void *v20;
  _BYTE *v21;
  _WORD *v22;
  llvm::raw_ostream *v23;
  _DWORD *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;

  v9 = *((_DWORD *)a1 + 2);
  v10 = *((int *)a1 + 3);
  v11 = v10 + 1;
  *((_DWORD *)a1 + 3) = v10 + 1;
  v13 = v9 == -1 || (int)v10 < v9;
  if (v13)
    v14 = 0;
  else
    v14 = 4;
  v15 = (llvm::raw_ostream *)llvm::errs(a1);
  v16 = (_QWORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 7uLL)
  {
    *v16 = 0x203A544345534942;
    *((_QWORD *)v15 + 4) += 8;
  }
  else
  {
    v15 = llvm::raw_ostream::write(v15, "BISECT: ", 8uLL);
  }
  if (v13)
    v17 = "";
  else
    v17 = "NOT ";
  v18 = llvm::raw_ostream::operator<<(v15, v17, v14);
  v19 = v18;
  v20 = (void *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v20 > 0xCuLL)
  {
    qmemcpy(v20, "running pass ", 13);
    v21 = (_BYTE *)(*((_QWORD *)v18 + 4) + 13);
    *((_QWORD *)v18 + 4) = v21;
  }
  else
  {
    llvm::raw_ostream::write(v18, "running pass ", 0xDuLL);
    v21 = (_BYTE *)*((_QWORD *)v19 + 4);
  }
  if (*((_BYTE **)v19 + 3) == v21)
  {
    llvm::raw_ostream::write(v19, "(", 1uLL);
  }
  else
  {
    *v21 = 40;
    ++*((_QWORD *)v19 + 4);
  }
  llvm::write_integer(v19, v11, 0, 0);
  v22 = (_WORD *)*((_QWORD *)v19 + 4);
  if (*((_QWORD *)v19 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 8233;
    *((_QWORD *)v19 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v19, ") ", 2uLL);
  }
  v23 = llvm::raw_ostream::operator<<(v19, a2, a3);
  v24 = (_DWORD *)*((_QWORD *)v23 + 4);
  if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 3uLL)
  {
    *v24 = 544108320;
    *((_QWORD *)v23 + 4) += 4;
  }
  else
  {
    v23 = llvm::raw_ostream::write(v23, " on ", 4uLL);
  }
  v25 = llvm::raw_ostream::operator<<(v23, a4, a5);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if (*((_BYTE **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, "\n", 1uLL);
  }
  else
  {
    *v26 = 10;
    ++*((_QWORD *)v25 + 4);
  }
  return v13;
}

void getOptBisector(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
  }
}

void llvm::OptBisect::~OptBisect(llvm::OptBisect *this)
{
  JUMPOUT(0x24BD1B3A4);
}

BOOL llvm::OptBisect::isEnabled(llvm::OptBisect *this)
{
  return *((_DWORD *)this + 2) != 0x7FFFFFFF;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C360B8;
  return result;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C360B8;
}

void std::__function::__func<$_0,std::allocator<$_0>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  getOptBisector();
  dword_25795D580 = v2;
  *(_DWORD *)algn_25795D584 = 0;
}

_QWORD *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_251C36100;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_251C36100;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_251C36100;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C36100;
  return std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<void ()(int)>,std::allocator<std::function<void ()(int)>>,void ()(int const&)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v5 = *a2;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = std::__throw_bad_function_call[abi:nn180100]();
  return _GLOBAL__sub_I_OptBisect_cpp(v4);
}

uint64_t _GLOBAL__sub_I_OptBisect_cpp()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v13[0] = &off_251C360B8;
  v14 = v13;
  v15[0] = &off_251C360B8;
  v16 = v15;
  v0 = llvm::cl::Option::Option((uint64_t)&OptBisectLimit, 0, 0);
  dword_257964900 = 0;
  qword_257964908 = (uint64_t)&off_251C12478;
  *(_QWORD *)&dword_257964910 = 0;
  OptBisectLimit = (uint64_t)off_251C122D8;
  qword_257964918 = (uint64_t)&off_251C12180;
  qword_257964920[0] = (uint64_t)&off_251C17248;
  qword_257964938 = (uint64_t)qword_257964920;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"opt-bisect-limit", 0x10uLL);
  dword_257964900 = 0x7FFFFFFF;
  byte_257964914 = 1;
  dword_257964910 = 0x7FFFFFFF;
  word_25796488A = word_25796488A & 0xFF98 | 0x20;
  if (v16)
  {
    if (v16 == v15)
    {
      v18 = v17;
      (*(void (**)(_QWORD *, _QWORD *))(v15[0] + 24))(v15, v17);
      v1 = v18;
    }
    else
    {
      v1 = (_QWORD *)(*(uint64_t (**)(void))(*v16 + 16))();
      v18 = v1;
    }
    v20 = 0;
    if (v1)
    {
      v2 = operator new(0x28uLL);
      v3 = v2;
      *v2 = &off_251C36100;
      if (v1 == v17)
      {
        v2[4] = v2 + 1;
        (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
      }
      else
      {
        v2[4] = v1;
        v18 = 0;
      }
      v20 = v3;
    }
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  std::function<void ()(int const&)>::operator=(qword_257964920, (uint64_t)v19);
  v4 = v20;
  if (v20 == v19)
  {
    v5 = 4;
    v4 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_16;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_16:
  v6 = v18;
  if (v18 == v17)
  {
    v7 = 4;
    v6 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_21;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_21:
  qword_2579648A0 = (uint64_t)"Maximum optimization to perform";
  unk_2579648A8 = 31;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&OptBisectLimit);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_26:
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_30;
  }
  if (v14)
  {
    v11 = 5;
LABEL_30:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &OptBisectLimit, &dword_24A800000);
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C36148;
  return result;
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C36148;
}

void std::__function::__func<llvm::$_0,std::allocator<llvm::$_0>,void ()(BOOL const&)>::operator()()
{
  _MergedGlobals_33 = 1;
}

uint64_t _GLOBAL__sub_I_PassTimingInfo_cpp()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v0 = llvm::cl::Option::Option((uint64_t)&qword_257964980, 0, 0);
  qword_257964A00 = 0;
  byte_257964A11 = 0;
  qword_257964A08 = (uint64_t)&off_251C12500;
  qword_257964980 = (uint64_t)off_251C13488;
  qword_257964A18 = (uint64_t)&off_251C12520;
  qword_257964A20 = (uint64_t)&off_251C134F0;
  qword_257964A38 = (uint64_t)&qword_257964A20;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"time-passes", 0xBuLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_257964A00, (uint64_t)&qword_257964980, &_MergedGlobals_33);
  word_25796498A = word_25796498A & 0xFF9F | 0x20;
  qword_2579649A0 = (uint64_t)"Time each pass, printing elapsed time for each on exit";
  unk_2579649A8 = 54;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257964980);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_257964980, &dword_24A800000);
  v7 = v6;
  v6[0] = &off_251C36148;
  llvm::cl::Option::Option((uint64_t)&qword_257964A40, 0, 0);
  byte_257964AD1 = 0;
  qword_257964AC0 = 0;
  unk_257964AC8 = &off_251C12500;
  qword_257964A40 = (uint64_t)off_251C13488;
  qword_257964AD8 = (uint64_t)&off_251C12520;
  qword_257964AE0[0] = &off_251C134F0;
  qword_257964AF8 = (uint64_t)qword_257964AE0;
  llvm::cl::Option::setArgStr((uint64_t)&qword_257964A40, (uint64_t *)"time-passes-per-run", 0x13uLL);
  llvm::cl::opt_storage<BOOL,true,false>::setLocation((llvm *)&qword_257964AC0, (uint64_t)&qword_257964A40, algn_257964941);
  word_257964A4A = word_257964A4A & 0xFF9F | 0x20;
  qword_257964A60 = (uint64_t)"Time each pass run, printing elapsed time for each run on exit";
  unk_257964A68 = 62;
  if (v7)
  {
    if (v7 == v6)
    {
      v9 = v8;
      (*(void (**)(uint64_t, _QWORD *))(v6[0] + 24))((uint64_t)v6, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(void))(*v7 + 16))();
    }
  }
  else
  {
    v9 = 0;
  }
  std::function<void ()(int const&)>::operator=(qword_257964AE0, (uint64_t)v8);
  v1 = v9;
  if (v9 == v8)
  {
    v2 = 4;
    v1 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_11:
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257964A40);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_15;
  }
  if (v7)
  {
    v4 = 5;
LABEL_15:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt, &qword_257964A40, &dword_24A800000);
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_251C36190;
  v2 = (_QWORD *)(a1 + 216);
  v3 = *(_QWORD **)(a1 + 240);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(_QWORD *)(a1 + 192) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a1 + 152);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
}

void llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C361F8;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C36260;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_251C361F8;
  v2 = (char *)this + 568;
  v3 = (char *)*((_QWORD *)this + 74);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C36260;
  v5 = (char *)*((_QWORD *)this + 21);
  if (v5 != (char *)this + 184)
    free(v5);
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v29;

  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  v12 = a1 + 128;
  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)(a1 + 128));
    *(_BYTE *)(a1 + 176) = 0;
  }
  v13 = llvm::cl::parser<std::string>::parse((int)a1 + 208, a1, a3, a4, __src, __len, (uint64_t)__p);
  if ((v13 & 1) == 0)
  {
    llvm::cl::list_storage<std::string,BOOL>::addValue<std::string>(v12, (uint64_t)__p);
    v14 = *(_QWORD *)(a1 + 200);
    *(_WORD *)(a1 + 12) = a2;
    v15 = *(char **)(a1 + 192);
    if ((unint64_t)v15 >= v14)
    {
      v17 = *(char **)(a1 + 184);
      v18 = (v15 - v17) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        goto LABEL_26;
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(a1 + 200, v21);
        v17 = *(char **)(a1 + 184);
        v15 = *(char **)(a1 + 192);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      v24 = &v22[4 * v21];
      *(_DWORD *)v23 = a2;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v25 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v25;
        v23 -= 4;
      }
      *(_QWORD *)(a1 + 184) = v23;
      *(_QWORD *)(a1 + 192) = v16;
      *(_QWORD *)(a1 + 200) = v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v15 = a2;
      v16 = v15 + 4;
    }
    *(_QWORD *)(a1 + 192) = v16;
    v26 = *(_QWORD *)(a1 + 240);
    if (v26)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 48))(v26, __p);
      goto LABEL_22;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
    abort();
  }
LABEL_22:
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  return v13;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &off_251C36190;
  v2 = (_QWORD *)(a1 + 216);
  v3 = *(_QWORD **)(a1 + 240);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(_QWORD *)(a1 + 192) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 152);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v7);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
  return MEMORY[0x24BD1B3A4]();
}

uint64_t llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 208, a1);
}

llvm::raw_ostream *llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 208), a1, a2);
}

void llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::setDefault(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  a1[24] = a1[23];
  v2 = (uint64_t)(a1 + 16);
  std::vector<std::string>::__clear[abi:nn180100](a1 + 16);
  v4 = a1[19];
  v3 = a1[20];
  while (v4 != v3)
  {
    llvm::cl::list_storage<std::string,BOOL>::addValue<std::string>(v2, v4 + 8);
    v4 += 40;
  }
}

std::string *llvm::cl::list_storage<std::string,BOOL>::addValue<std::string>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  std::string *result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::string **)a1, (__int128 *)a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v3 = v4;
    }
    result = (std::string *)(v3 + 24);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *llvm::cl::parser<llvm::ChangePrinter>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C36260;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a3 = a5;
  if (v8)
    a4 = a6;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error(v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    v17 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getValueExpectedFlagDefault(v17);
  }
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

unint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::printOptionValue(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_251C362B0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

unsigned int *llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::getExtraOptionNames(uint64_t a1, unsigned int *a2)
{
  return llvm::cl::generic_parser_base::getExtraOptionNames((unsigned int *)(a1 + 152), a2);
}

void llvm::cl::parser<llvm::ChangePrinter>::~parser(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_251C36260;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getOption(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<llvm::ChangePrinter>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL llvm::cl::OptionValueCopy<llvm::ChangePrinter>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C362F0;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C362F0;
}

void std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C36338;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1},std::allocator<llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::{lambda(llvm::ChangePrinter const&)#1}>,void ()(llvm::ChangePrinter const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C36338;
}

void llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::grow(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_257964D88, &unk_257964D98, a1, 48, &v8);
  v2 = (_OWORD *)qword_257964D88;
  if ((_DWORD)qword_257964D90)
  {
    v3 = qword_257964D88 + 48 * qword_257964D90;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_251C362D0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_251C362B0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_257964D88;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_257964D98)
    free(v2);
  qword_257964D88 = (uint64_t)v1;
  HIDWORD(qword_257964D90) = v7;
}

uint64_t _GLOBAL__sub_I_PrintPasses_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  _BYTE v25[160];
  _BYTE __str[32];
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  int v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  int v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v0 = llvm::cl::Option::Option((uint64_t)&PrintBefore, 1, 0);
  byte_257966958 = 0;
  xmmword_257966938 = 0u;
  unk_257966948 = 0u;
  xmmword_257966928 = 0u;
  PrintBefore = (uint64_t)&off_251C36190;
  qword_257966960 = 0;
  unk_257966968 = 0;
  qword_257966970 = 0;
  unk_257966978 = &off_251C12590;
  qword_257966980 = (uint64_t)&off_251C362F0;
  qword_257966998 = (uint64_t)&qword_257966980;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"print-before", 0xCuLL);
  qword_2579668C8 = (uint64_t)"Print IR before specified passes";
  unk_2579668D0 = 32;
  word_2579668B2 = word_2579668B2 & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintBefore);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &PrintBefore, &dword_24A800000);
  v1 = llvm::cl::Option::Option((uint64_t)&PrintAfter, 1, 0);
  byte_257966A50 = 0;
  xmmword_257966A30 = 0u;
  unk_257966A40 = 0u;
  xmmword_257966A20 = 0u;
  PrintAfter = (uint64_t)&off_251C36190;
  qword_257966A58 = 0;
  unk_257966A60 = 0;
  qword_257966A68 = 0;
  unk_257966A70 = &off_251C12590;
  qword_257966A78 = (uint64_t)&off_251C362F0;
  qword_257966A90 = (uint64_t)&qword_257966A78;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"print-after", 0xBuLL);
  qword_2579669C0 = (uint64_t)"Print IR after specified passes";
  unk_2579669C8 = 31;
  word_2579669AA = word_2579669AA & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintAfter);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &PrintAfter, &dword_24A800000);
  v2 = llvm::cl::Option::Option((uint64_t)&PrintBeforeAll, 0, 0);
  byte_257966B18 = 0;
  qword_257966B20 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257966B28 = 0;
  PrintBeforeAll = (uint64_t)off_251C123A8;
  qword_257966B30 = (uint64_t)&off_251C12520;
  qword_257966B38 = (uint64_t)&off_251C12410;
  qword_257966B50 = (uint64_t)&qword_257966B38;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"print-before-all", 0x10uLL);
  qword_257966AB8 = (uint64_t)"Print IR before each pass";
  unk_257966AC0 = 25;
  byte_257966B18 = 0;
  word_257966B28 = 256;
  word_257966AA2 = word_257966AA2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintBeforeAll);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &PrintBeforeAll, &dword_24A800000);
  v3 = llvm::cl::Option::Option((uint64_t)&PrintAfterAll, 0, 0);
  byte_257966BD8 = 0;
  qword_257966BE0 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257966BE8 = 0;
  PrintAfterAll = (uint64_t)off_251C123A8;
  qword_257966BF0 = (uint64_t)&off_251C12520;
  qword_257966BF8 = (uint64_t)&off_251C12410;
  qword_257966C10 = (uint64_t)&qword_257966BF8;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"print-after-all", 0xFuLL);
  qword_257966B78 = (uint64_t)"Print IR after each pass";
  unk_257966B80 = 24;
  byte_257966BD8 = 0;
  word_257966BE8 = 256;
  word_257966B62 = word_257966B62 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintAfterAll);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &PrintAfterAll, &dword_24A800000);
  *(_QWORD *)__str = "quiet";
  *(_QWORD *)&__str[8] = 5;
  *(_DWORD *)&__str[16] = 2;
  *(_QWORD *)&__str[24] = "Run in quiet mode";
  v27 = 17;
  v28 = "diff";
  v29 = 4;
  v30 = 3;
  v31 = "Display patch-like changes";
  v32 = 26;
  v33 = "diff-quiet";
  v34 = 10;
  v35 = 4;
  v36 = "Display patch-like changes in quiet mode";
  v37 = 40;
  v38 = "cdiff";
  v39 = 5;
  v40 = 5;
  v41 = "Display patch-like changes with color";
  v42 = 37;
  v43 = "cdiff-quiet";
  v44 = 11;
  v45 = 6;
  v46 = "Display patch-like changes in quiet mode with color";
  v47 = 51;
  v48 = "dot-cfg";
  v49 = 7;
  v50 = 7;
  v51 = "Create a website with graphical changes";
  v52 = 39;
  v53 = "dot-cfg-quiet";
  v54 = 13;
  v55 = 8;
  v56 = "Create a website with graphical changes in quiet mode";
  v57 = 53;
  v58 = "";
  v59 = 0;
  v60 = 1;
  v61 = "";
  v62 = 0;
  v23 = v25;
  v24 = 0x400000000;
  llvm::SmallVectorImpl<llvm::cl::OptionEnumValue>::append<llvm::cl::OptionEnumValue const*,void>((unsigned int *)&v23, __str, &v63);
  v4 = llvm::cl::Option::Option((uint64_t)&qword_257964CE0, 0, 0);
  dword_257964D60 = 0;
  qword_257964D68 = (uint64_t)&off_251C362B0;
  *(_QWORD *)&dword_257964D70 = 0;
  qword_257964CE0 = (uint64_t)off_251C361F8;
  qword_257964D78 = (uint64_t)&off_251C36260;
  qword_257964D80 = (uint64_t)&qword_257964CE0;
  qword_257964D88 = (uint64_t)&unk_257964D98;
  qword_257964D90 = 0x800000000;
  qword_257964F18 = (uint64_t)&off_251C36338;
  qword_257964F30 = (uint64_t)&qword_257964F18;
  llvm::cl::Option::setArgStr(v4, (uint64_t *)"print-changed", 0xDuLL);
  qword_257964D00 = (uint64_t)"Print changed IRs";
  unk_257964D08 = 17;
  word_257964CEA = word_257964CEA & 0xFF87 | 0x28;
  dword_257964D60 = 0;
  byte_257964D74 = 1;
  dword_257964D70 = 0;
  if ((_DWORD)v24)
  {
    v5 = v23;
    v6 = &v23[40 * v24];
    do
    {
      v7 = *(uint64_t **)v5;
      v8 = *((_QWORD *)v5 + 1);
      v9 = *((_DWORD *)v5 + 4);
      v10 = *(_OWORD *)(v5 + 24);
      *(_QWORD *)__str = *(_QWORD *)v5;
      *(_QWORD *)&__str[8] = v8;
      *(_OWORD *)&__str[16] = v10;
      v27 = (uint64_t)&off_251C362B0;
      BYTE4(v28) = 1;
      LODWORD(v28) = v9;
      v11 = qword_257964D88;
      if (qword_257964D90 >= HIDWORD(qword_257964D90))
      {
        v16 = qword_257964D90 + 1;
        if (qword_257964D88 <= (unint64_t)__str
          && qword_257964D88 + 48 * (unint64_t)qword_257964D90 > (unint64_t)__str)
        {
          v22 = &__str[-qword_257964D88];
          llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::grow(v16);
          v11 = qword_257964D88;
          v12 = &v22[qword_257964D88];
          goto LABEL_5;
        }
        llvm::SmallVectorTemplateBase<llvm::cl::parser<llvm::ChangePrinter>::OptionInfo,false>::grow(v16);
        v11 = qword_257964D88;
      }
      v12 = __str;
LABEL_5:
      v13 = v11 + 48 * qword_257964D90;
      v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *(_OWORD *)(v13 + 16) = v14;
      *(_QWORD *)(v13 + 32) = &off_251C362D0;
      v15 = *((_DWORD *)v12 + 10);
      *(_BYTE *)(v13 + 44) = v12[44];
      *(_DWORD *)(v13 + 40) = v15;
      *(_QWORD *)(v13 + 32) = &off_251C362B0;
      LODWORD(qword_257964D90) = qword_257964D90 + 1;
      llvm::cl::AddLiteralOption(qword_257964D80, v7, v8);
      v5 += 40;
    }
    while (v5 != v6);
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257964CE0);
  if (v23 != v25)
    free(v23);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::ChangePrinter,false,llvm::cl::parser<llvm::ChangePrinter>>::~opt, &qword_257964CE0, &dword_24A800000);
  v17 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_34, 0, 0);
  qword_257964B88 = 0;
  unk_257964B90 = 0;
  qword_257964B80 = 0;
  qword_257964BA8 = 0;
  unk_257964BB0 = 0;
  qword_257964BA0 = 0;
  byte_257964BB8 = 0;
  qword_257964B98 = (uint64_t)off_251C12550;
  _MergedGlobals_34 = (uint64_t)&off_251C12340;
  qword_257964BC0 = (uint64_t)&off_251C12590;
  qword_257964BC8 = (uint64_t)&off_251C17510;
  qword_257964BE0 = (uint64_t)&qword_257964BC8;
  llvm::cl::Option::setArgStr(v17, (uint64_t *)"print-changed-diff-path", 0x17uLL);
  word_257964B0A = word_257964B0A & 0xFF9F | 0x20;
  std::string::basic_string[abi:nn180100]<0>(__str, "diff");
  std::string::operator=((std::string *)&qword_257964B80, (const std::string *)__str);
  byte_257964BB8 = 1;
  std::string::operator=((std::string *)&qword_257964BA0, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  qword_257964B20 = (uint64_t)"system diff used by change reporters";
  unk_257964B28 = 36;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_34);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt, &_MergedGlobals_34, &dword_24A800000);
  v18 = llvm::cl::Option::Option((uint64_t)&PrintModuleScope, 0, 0);
  byte_257966C98 = 0;
  qword_257966CA0 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257966CA8 = 0;
  PrintModuleScope = (uint64_t)off_251C123A8;
  qword_257966CB0 = (uint64_t)&off_251C12520;
  qword_257966CB8 = (uint64_t)&off_251C12410;
  qword_257966CD0 = (uint64_t)&qword_257966CB8;
  llvm::cl::Option::setArgStr(v18, (uint64_t *)"print-module-scope", 0x12uLL);
  qword_257966C38 = (uint64_t)"When printing IR for print-[before|after]{-all} always print a module IR";
  unk_257966C40 = 72;
  byte_257966C98 = 0;
  word_257966CA8 = 256;
  word_257966C22 = word_257966C22 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintModuleScope);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &PrintModuleScope, &dword_24A800000);
  v19 = llvm::cl::Option::Option((uint64_t)&qword_257964BE8, 1, 0);
  byte_257964C98 = 0;
  xmmword_257964C78 = 0u;
  unk_257964C88 = 0u;
  xmmword_257964C68 = 0u;
  qword_257964BE8 = (uint64_t)&off_251C36190;
  qword_257964CA0 = 0;
  unk_257964CA8 = 0;
  qword_257964CB0 = 0;
  unk_257964CB8 = &off_251C12590;
  qword_257964CC0 = (uint64_t)&off_251C362F0;
  qword_257964CD8 = (uint64_t)&qword_257964CC0;
  llvm::cl::Option::setArgStr(v19, (uint64_t *)"filter-passes", 0xDuLL);
  qword_257964C18 = (uint64_t)"pass names";
  unk_257964C20 = 10;
  qword_257964C08 = (uint64_t)"Only consider IR changes for passes whose names match the specified value. No-op without -print-changed";
  unk_257964C10 = 103;
  word_257964BF2 = word_257964BF2 & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_257964BE8);
  __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &qword_257964BE8, &dword_24A800000);
  v20 = llvm::cl::Option::Option((uint64_t)&PrintFuncsList, 1, 0);
  byte_257966D88 = 0;
  xmmword_257966D68 = 0u;
  unk_257966D78 = 0u;
  xmmword_257966D58 = 0u;
  PrintFuncsList = (uint64_t)&off_251C36190;
  qword_257966D90 = 0;
  unk_257966D98 = 0;
  qword_257966DA0 = 0;
  unk_257966DA8 = &off_251C12590;
  qword_257966DB0 = (uint64_t)&off_251C362F0;
  qword_257966DC8 = (uint64_t)&qword_257966DB0;
  llvm::cl::Option::setArgStr(v20, (uint64_t *)"filter-print-funcs", 0x12uLL);
  qword_257966D08 = (uint64_t)"function names";
  unk_257966D10 = 14;
  qword_257966CF8 = (uint64_t)"Only print IR for functions whose name match this for all print-[before|after][-all] options";
  unk_257966D00 = 92;
  word_257966CE2 = word_257966CE2 & 0xFD9F | 0x220;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&PrintFuncsList);
  return __cxa_atexit((void (*)(void *))llvm::cl::list<std::string,BOOL,llvm::cl::parser<std::string>>::~list, &PrintFuncsList, &dword_24A800000);
}

BOOL llvm::GCStatepointInst::classof(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 >= 0x1C
    && ((v2 = v1 - 33, v3 = v2 > 0x33, v4 = (1 << v2) & 0x8000000000041, !v3) ? (v5 = v4 == 0) : (v5 = 1),
        !v5 && (v6 = *(_QWORD *)(a1 - 32)) != 0 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *(_QWORD *)(a1 + 72)))
  {
    return *(_DWORD *)(v6 + 36) == 125;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_SafepointIRVerifier_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)PrintOnly, 0, 0);
  byte_257964FB8 = 0;
  qword_257964FC0 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257964FC8 = 0;
  PrintOnly[0] = (uint64_t)off_251C123A8;
  qword_257964FD0 = (uint64_t)&off_251C12520;
  qword_257964FD8 = (uint64_t)&off_251C12410;
  qword_257964FF0 = (uint64_t)&qword_257964FD8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"safepoint-ir-verifier-print-only", 0x20uLL);
  byte_257964FB8 = 0;
  word_257964FC8 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)PrintOnly);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, PrintOnly, &dword_24A800000);
}

BOOL llvm::Type::canLosslesslyBitCastTo(llvm::Type *this, llvm::Type *a2)
{
  unsigned int v2;
  int v5;
  unint64_t PrimitiveSizeInBits;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  _BOOL4 v14;
  BOOL v15;

  if (this == a2)
    return 1;
  v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 14)
    return 0;
  v5 = *((_DWORD *)a2 + 2);
  if (v5 == 7 || v5 == 14)
    return 0;
  if ((v2 & 0xFE) != 0x12 || (v5 & 0xFE) != 18)
  {
    if (v2 == 10)
    {
      if (v5 != 18)
        goto LABEL_33;
      if (llvm::Type::getPrimitiveSizeInBits(a2) == 64)
        return 1;
    }
    else
    {
      if (v2 != 11)
      {
        if (v2 == 18)
        {
          if (v5 != 11)
          {
            if (v5 != 10 || llvm::Type::getPrimitiveSizeInBits(this) != 64)
              goto LABEL_33;
            return 1;
          }
          if (llvm::Type::getPrimitiveSizeInBits(this) == 0x2000)
            return 1;
        }
LABEL_33:
        v14 = (v5 ^ v2) < 0x100;
        if (v5 != 15)
          v14 = 0;
        v15 = v2 == 15;
        return v15 && v14;
      }
      if (v5 != 18)
        goto LABEL_33;
      if (llvm::Type::getPrimitiveSizeInBits(a2) == 0x2000)
        return 1;
    }
    return 0;
  }
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  v11 = v10;
  v12 = llvm::Type::getPrimitiveSizeInBits(a2);
  v14 = v11 == v13;
  v15 = PrimitiveSizeInBits == v12;
  return v15 && v14;
}

unint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  unint64_t v1;
  int v2;
  unint64_t result;
  uint64_t v5;

  v1 = *((unsigned int *)this + 2);
  v2 = *((_DWORD *)this + 2);
  result = 16;
  switch(v2)
  {
    case 0:
    case 1:
      return result;
    case 2:
      result = 32;
      break;
    case 3:
    case 10:
      result = 64;
      break;
    case 4:
      result = 80;
      break;
    case 5:
    case 6:
      result = 128;
      break;
    case 11:
      result = 0x2000;
      break;
    case 13:
      result = v1 >> 8;
      break;
    case 18:
    case 19:
      v5 = *((unsigned int *)this + 8);
      result = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type **)this + 3)) * v5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::isEmptyTy@<X0>(llvm::Type *this@<X0>, int a2@<W8>)
{
  int v2;
  BOOL v3;
  unint64_t v4;
  llvm::Type **v5;
  uint64_t v6;
  unint64_t v7;
  char isEmptyTy;

  v2 = *((unsigned __int8 *)this + 8);
  if (this && v2 == 17)
  {
    while (1)
    {
      a2 = *((_DWORD *)this + 8);
      if (!a2)
        return 1;
      this = (llvm::Type *)*((_QWORD *)this + 3);
      v2 = *((unsigned __int8 *)this + 8);
      if (this)
        v3 = v2 == 17;
      else
        v3 = 0;
      if (!v3)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (v2 == 16)
    {
      v4 = *((unsigned int *)this + 3);
      if ((_DWORD)v4)
      {
        v5 = (llvm::Type **)*((_QWORD *)this + 2);
        if (llvm::Type::isEmptyTy(*v5))
        {
          v6 = 1;
          do
          {
            v7 = v6;
            if (v4 == v6)
              break;
            isEmptyTy = llvm::Type::isEmptyTy(v5[v6]);
            v6 = v7 + 1;
          }
          while ((isEmptyTy & 1) != 0);
          LOBYTE(a2) = v7 >= v4;
        }
        else
        {
          LOBYTE(a2) = 0;
        }
      }
      else
      {
        LOBYTE(a2) = 1;
      }
    }
    return (v2 == 16) & a2;
  }
}

uint64_t llvm::Type::isSizedDerivedType(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  int v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v3 == 17 || a1 && (v3 & 0xFE) == 0x12)
  {
    v4 = *(_QWORD *)(a1 + 24);
    return llvm::Type::isSized(v4, a2);
  }
  if (a1 && v3 == 21)
  {
    getTargetTypeInfo((uint64_t *)a1);
    return llvm::Type::isSized(v4, a2);
  }
  return llvm::StructType::isSized(a1, a2);
}

uint64_t llvm::StructType::isSized(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x800) != 0)
    return 1;
  if ((v2 & 0x100) != 0)
  {
    if (!a2 || (llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(a2, (const void *)a1, (uint64_t)v8), v8[16]))
    {
      v4 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a1 + 16);
        v6 = 8 * v4;
        while (*(_BYTE *)(*(_QWORD *)v5 + 8) != 19 && (llvm::Type::isSized() & 1) != 0)
        {
          v5 += 8;
          v6 -= 8;
          if (!v6)
            goto LABEL_10;
        }
        return 0;
      }
LABEL_10:
      *(_DWORD *)(a1 + 8) |= 0x800u;
      return 1;
    }
  }
  return 0;
}

_QWORD *llvm::IntegerType::get(llvm::IntegerType *this, llvm::LLVMContext *a2)
{
  _QWORD *result;
  _DWORD *v4;
  int v5;
  int v6;

  v6 = (int)a2;
  if ((int)a2 > 31)
  {
    switch((_DWORD)a2)
    {
      case 0x20:
        return (_QWORD *)(*(_QWORD *)this + 1992);
      case 0x40:
        return (_QWORD *)(*(_QWORD *)this + 2016);
      case 0x80:
        return (_QWORD *)(*(_QWORD *)this + 2040);
    }
  }
  else
  {
    switch((_DWORD)a2)
    {
      case 1:
        return (_QWORD *)(*(_QWORD *)this + 1920);
      case 8:
        return (_QWORD *)(*(_QWORD *)this + 1944);
      case 0x10:
        return (_QWORD *)(*(_QWORD *)this + 1968);
    }
  }
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)(*(_QWORD *)this + 2200), &v6);
  result = (_QWORD *)*((_QWORD *)v4 + 1);
  if (!result)
  {
    result = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(_QWORD *)this + 2072, 24, 3);
    v5 = v6;
    *result = this;
    result[2] = 0;
    result[1] = (v5 << 8) | 0xDu;
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

unint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t result;
  int v6;
  int v7;

  v7 = (int)a2;
  v3 = *(_QWORD *)this;
  if ((_DWORD)a2)
    v4 = (unint64_t *)(llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)(v3 + 2384), &v7)+ 2);
  else
    v4 = (unint64_t *)(v3 + 2376);
  result = *v4;
  if (!*v4)
  {
    result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v3 + 2072, 32, 3);
    v6 = v7;
    *(_QWORD *)result = this;
    *(_QWORD *)(result + 20) = 0;
    *(_QWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(result + 8) = (v6 << 8) | 0xF;
    *v4 = result;
  }
  return result;
}

unint64_t llvm::FunctionType::get(uint64_t **a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  int v4;
  uint64_t *v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t result;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  uint64_t v17;
  unint64_t *v18;
  char v19;

  v4 = (int)a4;
  v6 = a2;
  v8 = **a1;
  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v16 = (char)a4;
  v17 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::insert_as<llvm::FunctionTypeKeyInfo::KeyTy>(v8 + 2224, &v17, (uint64_t)v15, a4, (uint64_t)&v18);
  v9 = v18;
  if (!v19)
    return *v18;
  result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8 + 2072, 8 * a3 + 32, 3);
  *(_QWORD *)result = *a1;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 16) = 0;
  if (v4)
    v11 = 270;
  else
    v11 = 14;
  *(_DWORD *)(result + 8) = v11;
  if ((_DWORD)a3)
  {
    v12 = a3;
    v13 = (_QWORD *)(result + 32);
    do
    {
      v14 = *v6++;
      *v13++ = v14;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a3 + 1;
  *v9 = result;
  return result;
}

unint64_t llvm::StructType::get(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v4;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  unint64_t *v15;
  char v16;

  v4 = (int)a4;
  v8 = *a1;
  v12[0] = a2;
  v12[1] = a3;
  v13 = (char)a4;
  v14 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::insert_as<llvm::AnonStructTypeKeyInfo::KeyTy>(v8 + 2248, &v14, (uint64_t)v12, a4, (uint64_t)&v15);
  v9 = v15;
  if (!v16)
    return *v15;
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 2072, 32, 3);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 12) = 0;
  *(_DWORD *)(v10 + 28) = 0;
  *(_DWORD *)(v10 + 8) = 1040;
  llvm::StructType::setBody(v10, a2, a3, v4);
  *v9 = v10;
  return v10;
}

unint64_t llvm::StructType::setBody(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  unint64_t result;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  if (a4)
    v5 = 768;
  else
    v5 = 256;
  *(_DWORD *)(a1 + 8) |= v5;
  *(_DWORD *)(a1 + 12) = a3;
  if (a3)
    result = llvm::ArrayRef<llvm::Type *>::copy<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>((uint64_t)v7, **(_QWORD **)a1 + 2072);
  else
    result = 0;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t llvm::StructType::containsScalableVectorType(llvm::StructType *this)
{
  uint64_t v1;
  llvm::StructType **v2;
  uint64_t v3;
  int v4;

  v1 = *((unsigned int *)this + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = (llvm::StructType **)*((_QWORD *)this + 2);
  v3 = 8 * v1;
  while (1)
  {
    v4 = *((unsigned __int8 *)*v2 + 8);
    if (v4 == 16)
      break;
    if (v4 == 19)
      return 1;
LABEL_7:
    ++v2;
    v3 -= 8;
    if (!v3)
      return 0;
  }
  if ((llvm::StructType::containsScalableVectorType(*v2) & 1) == 0)
    goto LABEL_7;
  return 1;
}

unint64_t llvm::ArrayRef<llvm::Type *>::copy<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 8 * *(_QWORD *)(a1 + 8), 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(uint64_t **)a1;
    v6 = 8 * v4;
    v7 = (_QWORD *)result;
    do
    {
      v8 = *v5++;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::StructType::setName(uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t **v5;
  unint64_t *v6;
  const void *v7;
  unint64_t v8;
  llvm::StringMapImpl *v9;
  unint64_t **v10;
  char v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  llvm::StringMapImpl *v17;
  unint64_t **v18;
  char v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  void (**v23)(llvm::raw_ostream *__hidden);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  void *v35;
  __int128 v36;
  _QWORD v37[9];

  v5 = (uint64_t **)result;
  v37[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(unint64_t **)(result + 24);
  if (v6)
  {
    v7 = v6 + 2;
    v8 = *v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (a3 != v8 || a3 && (result = memcmp(a2, v7, a3), (_DWORD)result))
  {
    if (v6)
      llvm::StringMapImpl::RemoveKey(**v5 + 2272, (uint64_t *)((char *)v6 + *(unsigned int *)(**v5 + 2292)), *v6);
    if (a3)
    {
      v9 = (llvm::StringMapImpl *)(**v5 + 2272);
      v32 = a2;
      v33 = a3;
      v34 = v5;
      v10 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(v9, a2, a3, (unint64_t *)&v34);
      if (v11)
      {
        v12 = v10;
      }
      else
      {
        v35 = v37;
        v36 = xmmword_24AA2B2D0;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, a2, (_BYTE *)a2 + a3);
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v35, 46);
        v24 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 1;
        v26 = 0;
        v27 = 0;
        v25 = 0;
        v23 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
        v31 = &v35;
        llvm::raw_ostream::SetUnbuffered(&v23);
        v14 = (a3 + 1);
        do
        {
          llvm::SmallVectorImpl<char>::resizeImpl<false>(&v35, v14);
          v15 = **v5;
          v16 = *(unsigned int *)(v15 + 2296);
          *(_DWORD *)(v15 + 2296) = v16 + 1;
          write_unsigned<unsigned long>((llvm::raw_ostream *)&v23, v16, 0, 0, 0);
          v17 = (llvm::StringMapImpl *)(**v5 + 2272);
          v20 = (uint64_t *)*v31;
          v21 = (unint64_t)v31[1];
          v22 = v5;
          v18 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(v17, v20, v21, (unint64_t *)&v22);
        }
        while (!v19);
        v12 = v18;
        v23 = off_251C13948;
        if (v30 == 1 && v25)
          MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
        if (v35 != v37)
          free(v35);
      }
      result = (uint64_t)v5[3];
      if (result)
        result = MEMORY[0x24BD1B398](result, 8);
      v13 = *v12;
    }
    else
    {
      result = (uint64_t)v5[3];
      if (!result)
        return result;
      result = MEMORY[0x24BD1B398](result, 8);
      v13 = 0;
    }
    v5[3] = (uint64_t *)v13;
  }
  return result;
}

unint64_t llvm::StructType::create(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 2072, 32, 3);
  v7 = v6;
  *(_QWORD *)v6 = a1;
  *(_DWORD *)(v6 + 8) = 16;
  *(_QWORD *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 12) = 0;
  *(_DWORD *)(v6 + 28) = 0;
  if (a3)
    llvm::StructType::setName(v6, a2, a3);
  return v7;
}

BOOL llvm::StructType::isLayoutIdentical(const void **this, const void **a2)
{
  uint64_t v2;

  if (this == a2)
    return 1;
  if (((*((unsigned __int8 *)this + 9) ^ *((unsigned __int8 *)a2 + 9)) & 2) != 0)
    return 0;
  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 3))
    return 0;
  return memcmp(this[2], a2[2], 8 * v2) == 0;
}

unsigned __int8 *llvm::StructType::indexValid(llvm::StructType *this, const llvm::Value *a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v7;
  unsigned __int8 *result;
  _QWORD *v9;

  v3 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v4 = v3 & 0xFE;
  v5 = v3;
  if (v4 == 18)
    v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v3 == 19 || v5 != 8205)
    return 0;
  v7 = *((unsigned __int8 *)a2 + 16);
  if (v7 > 0x14)
    return 0;
  if (v4 == 18)
  {
    result = (unsigned __int8 *)llvm::Constant::getSplatValue(a2, 0);
    if (!result)
      return result;
    a2 = (const llvm::Value *)result;
    v7 = result[16];
  }
  if (v7 != 16)
    return 0;
  v9 = (_QWORD *)((char *)a2 + 24);
  if (*((_DWORD *)a2 + 8) >= 0x41u)
    v9 = (_QWORD *)*v9;
  return (unsigned __int8 *)(*v9 < (unint64_t)*((unsigned int *)this + 3));
}

double llvm::ArrayType::get(uint64_t **this, llvm::Type *a2)
{
  uint64_t v4;
  _QWORD *v5;
  double result;
  _QWORD *v7;
  _QWORD v8[2];

  v4 = **this;
  v8[0] = this;
  v8[1] = a2;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::FindAndConstruct((uint64_t *)(v4 + 2328), v8);
  if (!v5[2])
  {
    v7 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 40, 3);
    *v7 = *this;
    v7[3] = this;
    v7[4] = a2;
    v7[2] = v7 + 3;
    *(_QWORD *)&result = 0x100000011;
    v7[1] = 0x100000011;
    v5[2] = v7;
  }
  return result;
}

double llvm::VectorType::get(uint64_t **this, llvm::Type *a2)
{
  if (((unint64_t)a2 & 0xFF00000000) != 0)
    return llvm::ScalableVectorType::get(this, a2);
  else
    return llvm::FixedVectorType::get(this, a2);
}

double llvm::ScalableVectorType::get(uint64_t **this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  double result;
  unint64_t v7;
  _QWORD v8[2];

  v2 = (int)a2;
  v4 = **this;
  v8[0] = this;
  v8[1] = a2 | 0x100000000;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::FindAndConstruct((uint64_t *)(v4 + 2352), (uint64_t)v8);
  if (!*(_QWORD *)(v5 + 16))
  {
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 40, 3);
    *(_QWORD *)v7 = *this;
    *(_QWORD *)(v7 + 24) = this;
    *(_DWORD *)(v7 + 32) = v2;
    *(_QWORD *)(v7 + 16) = v7 + 24;
    *(_QWORD *)&result = 0x100000013;
    *(_QWORD *)(v7 + 8) = 0x100000013;
    *(_QWORD *)(v5 + 16) = v7;
  }
  return result;
}

double llvm::FixedVectorType::get(uint64_t **this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  double result;
  unint64_t v7;
  _QWORD v8[2];

  v2 = (int)a2;
  v4 = **this;
  v8[0] = this;
  v8[1] = a2;
  v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::FindAndConstruct((uint64_t *)(v4 + 2352), (uint64_t)v8);
  if (!*(_QWORD *)(v5 + 16))
  {
    v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 40, 3);
    *(_QWORD *)v7 = *this;
    *(_QWORD *)(v7 + 24) = this;
    *(_DWORD *)(v7 + 32) = v2;
    *(_QWORD *)(v7 + 16) = v7 + 24;
    *(_QWORD *)&result = 0x100000012;
    *(_QWORD *)(v7 + 8) = 0x100000012;
    *(_QWORD *)(v5 + 16) = v7;
  }
  return result;
}

uint64_t llvm::PointerType::get(llvm::PointerType **this, llvm::Type *a2)
{
  int v2;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  _QWORD v8[2];

  v2 = (int)a2;
  v4 = *(_QWORD *)*this;
  if (*(_BYTE *)(v4 + 2737))
  {
    if (*(_BYTE *)(v4 + 2736))
      return llvm::PointerType::get(*this, a2);
  }
  else
  {
    v6 = byte_257966860;
    *(_BYTE *)(v4 + 2737) = 1;
    *(_BYTE *)(v4 + 2736) = v6;
    if (v6)
      return llvm::PointerType::get(*this, a2);
  }
  v8[0] = this;
  v8[1] = a2;
  v7 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::FindAndConstruct((uint64_t *)(v4 + 2408), v8);
  result = *(_QWORD *)(v7 + 16);
  if (!result)
  {
    result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v4 + 2072, 32, 3);
    *(_QWORD *)result = *this;
    *(_QWORD *)(result + 24) = this;
    *(_QWORD *)(result + 16) = result + 24;
    *(_DWORD *)(result + 8) = (v2 << 8) | 0xF;
    *(_DWORD *)(result + 12) = 1;
    *(_QWORD *)(v7 + 16) = result;
  }
  return result;
}

uint64_t llvm::TargetExtType::TargetExtType(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 21;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = llvm::UniqueStringSaver::save((uint64_t *)(*(_QWORD *)a2 + 2168), a3, (uint64_t)a4, a4);
  *(_QWORD *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 12) = a6;
  v14 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 16) = a1 + 48;
  if (a6)
  {
    v15 = 8 * a6;
    do
    {
      v16 = *a5++;
      *v14++ = v16;
      v15 -= 8;
    }
    while (v15);
  }
  *(_DWORD *)(a1 + 8) = *(unsigned __int8 *)(a1 + 8) | ((_DWORD)a8 << 8);
  *(_QWORD *)(a1 + 40) = v14;
  if (a8)
  {
    v17 = 4 * a8;
    do
    {
      v18 = *a7++;
      *(_DWORD *)v14 = v18;
      v14 = (_QWORD *)((char *)v14 + 4);
      v17 -= 4;
    }
    while (v17);
  }
  return a1;
}

uint64_t llvm::TargetExtType::get(_QWORD *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, int *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  char v21;

  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  v14 = *a1 + 2304;
  v19 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::insert_as<llvm::TargetExtTypeKeyInfo::KeyTy>(v14, &v19, (uint64_t)v18, a4, (uint64_t)&v20);
  v15 = v20;
  if (!v21)
    return *v20;
  v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1 + 2072, 8 * a5 + 4 * a7 + 48, 3);
  result = llvm::TargetExtType::TargetExtType(v16, (uint64_t)a1, a2, a3, (uint64_t *)a4, a5, a6, a7);
  *v15 = result;
  return result;
}

double getTargetTypeInfo(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  double result;

  v1 = *a1;
  v2 = a1[4];
  if (v2 >= 6)
  {
    v3 = (uint64_t *)a1[3];
    if (*(_DWORD *)v3 == 1919512691 && *((_WORD *)v3 + 2) == 11894)
    {
      llvm::PointerType::get((llvm::PointerType **)(*(_QWORD *)v1 + 1944), 0);
    }
    else if (v2 == 15)
    {
      v5 = *v3;
      v6 = *(uint64_t *)((char *)v3 + 7);
      if (v5 == 0x2E34366863726161 && v6 == 0x746E756F6376732ELL)
        return llvm::ScalableVectorType::get((uint64_t **)(*(_QWORD *)v1 + 1920), (llvm::Type *)0x10);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::insert_as<llvm::FunctionTypeKeyInfo::KeyTy>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;

  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v13, a4);
  v10 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::InsertIntoBucketImpl<llvm::FunctionTypeKeyInfo::KeyTy>(a1, (uint64_t)a2, a3, v13);
    v10 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v12;
  *(_BYTE *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 isEqual;
  _BOOL4 v17;
  uint64_t *v18;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = llvm::FunctionTypeKeyInfo::getHashValue(a2, a2, (uint64_t)a3, a4) & (v5 - 1);
    v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::FunctionTypeKeyInfo::isEqual(a2, *v10))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (*v10 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = *v10 == -8192;
        if (v14)
          v12 = v10;
        v18 = v12;
        v15 = v13 + 1;
        v9 = (v9 + v13) & v8;
        v10 = (uint64_t *)(v7 + 8 * v9);
        isEqual = llvm::FunctionTypeKeyInfo::isEqual(a2, *v10);
        v12 = v18;
        v17 = isEqual;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::FunctionTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v8[3];
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v10 = v2;
  v11 = v3;
  v5 = *(_QWORD **)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = (8 * *(unsigned int *)(a2 + 12) - 8) >> 3;
  v8[0] = *v5;
  v8[1] = v5 + 1;
  v8[2] = v7;
  v9 = v6 > 0xFF;
  return llvm::FunctionTypeKeyInfo::KeyTy::operator==(a1, (uint64_t)v8);
}

unint64_t llvm::FunctionTypeKeyInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v6;
  _QWORD v7[8];
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 8), *(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 16), a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::Metadata *,llvm::Metadata *,BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, (uint64_t *)a1, (uint64_t *)&v6, (char *)(a1 + 24));
}

BOOL llvm::FunctionTypeKeyInfo::KeyTy::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2 == *(_QWORD *)(a2 + 16) && !memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), 8 * v2))
      return 1;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::InsertIntoBucketImpl<llvm::FunctionTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  uint64_t *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>,llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::LookupBucketFor<llvm::FunctionTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::FunctionType *,llvm::detail::DenseSetEmpty,llvm::FunctionTypeKeyInfo,llvm::detail::DenseSetPair<llvm::FunctionType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int HashValue;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  BOOL v35;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if ((_DWORD)v3)
    {
      v15 = &v4[v3];
      v16 = v4;
      do
      {
        v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = *(uint64_t **)a1;
          v19 = *(_QWORD **)(v17 + 16);
          v20 = *(_DWORD *)(a1 + 16);
          v21 = (8 * *(unsigned int *)(v17 + 12) - 8) >> 3;
          v34[0] = *v19;
          v34[1] = v19 + 1;
          v34[2] = v21;
          v35 = *(_DWORD *)(v17 + 8) > 0xFFu;
          HashValue = llvm::FunctionTypeKeyInfo::getHashValue((uint64_t)v34, v10, v11, v12);
          v23 = v20 - 1;
          v24 = *v16;
          v25 = HashValue & (v20 - 1);
          v26 = &v18[v25];
          v27 = *v26;
          if (*v16 != *v26)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != -4096)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == -8192;
              if (v30)
                v28 = v26;
              v31 = v25 + v29++;
              v25 = v31 & v23;
              v26 = &v18[v31 & v23];
              v27 = *v26;
              if (v24 == *v26)
                goto LABEL_12;
            }
            if (v28)
              v26 = v28;
          }
LABEL_12:
          *v26 = v24;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v32 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v32)
  {
    v33 = 8 * v32;
    do
    {
      *result++ = -4096;
      v33 -= 8;
    }
    while (v33);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::insert_as<llvm::AnonStructTypeKeyInfo::KeyTy>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;

  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v13, a4);
  v10 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::InsertIntoBucketImpl<llvm::AnonStructTypeKeyInfo::KeyTy>(a1, (uint64_t)a2, a3, v13);
    v10 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v12;
  *(_BYTE *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 isEqual;
  _BOOL4 v17;
  uint64_t *v18;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = llvm::AnonStructTypeKeyInfo::getHashValue(a2, a2, (uint64_t)a3, a4) & (v5 - 1);
    v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::AnonStructTypeKeyInfo::isEqual(a2, *v10))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (*v10 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = *v10 == -8192;
        if (v14)
          v12 = v10;
        v18 = v12;
        v15 = v13 + 1;
        v9 = (v9 + v13) & v8;
        v10 = (uint64_t *)(v7 + 8 * v9);
        isEqual = llvm::AnonStructTypeKeyInfo::isEqual(a2, *v10);
        v12 = v18;
        v17 = isEqual;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::AnonStructTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _QWORD v7[2];
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v9 = v2;
  v10 = v3;
  v6 = *(_DWORD *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v7[0] = *(_QWORD *)(a2 + 16);
  v7[1] = v5;
  v8 = (v6 & 0x200) != 0;
  return llvm::AnonStructTypeKeyInfo::KeyTy::operator==(a1, (uint64_t)v7);
}

unint64_t llvm::AnonStructTypeKeyInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v5;
  unint64_t v7;
  _BYTE v8[56];
  char v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a1, *(_QWORD *)a1 + 8 * *(_QWORD *)(a1 + 8), a3, a4);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v7);
  v7 = v5;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>((llvm::hashing::detail::hash_combine_recursive_helper *)&v7, 0, v8, v9, (char *)(a1 + 16));
}

BOOL llvm::AnonStructTypeKeyInfo::KeyTy::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;

  result = 0;
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 == *(_QWORD *)(a2 + 8) && !memcmp(*(const void **)a1, *(const void **)a2, 8 * v2))
      return 1;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::InsertIntoBucketImpl<llvm::AnonStructTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  uint64_t *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>,llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::LookupBucketFor<llvm::AnonStructTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::StructType *,llvm::detail::DenseSetEmpty,llvm::AnonStructTypeKeyInfo,llvm::detail::DenseSetPair<llvm::StructType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int HashValue;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  BOOL v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if ((_DWORD)v3)
    {
      v15 = &v4[v3];
      v16 = v4;
      do
      {
        v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = *(uint64_t **)a1;
          v19 = *(_DWORD *)(a1 + 16);
          v20 = *(unsigned int *)(v17 + 12);
          v33[0] = *(_QWORD *)(v17 + 16);
          v33[1] = v20;
          v34 = (*(_DWORD *)(v17 + 8) & 0x200) != 0;
          HashValue = llvm::AnonStructTypeKeyInfo::getHashValue((uint64_t)v33, v10, v11, v12);
          v22 = v19 - 1;
          v23 = *v16;
          v24 = HashValue & (v19 - 1);
          v25 = &v18[v24];
          v26 = *v25;
          if (*v16 != *v25)
          {
            v27 = 0;
            v28 = 1;
            while (v26 != -4096)
            {
              if (v27)
                v29 = 0;
              else
                v29 = v26 == -8192;
              if (v29)
                v27 = v25;
              v30 = v24 + v28++;
              v24 = v30 & v22;
              v25 = &v18[v30 & v22];
              v26 = *v25;
              if (v23 == *v25)
                goto LABEL_12;
            }
            if (v27)
              v25 = v27;
          }
LABEL_12:
          *v25 = v23;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v31 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v31)
  {
    v32 = 8 * v31;
    do
    {
      *result++ = -4096;
      v32 -= 8;
    }
    while (v32);
  }
  return result;
}

unint64_t **llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t **i;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t *v13;
  char *v14;
  unint64_t v15;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (unint64_t **)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (unint64_t *)-8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = (char *)(v12 + 2);
  if (a3)
    memcpy(v12 + 2, a2, a3);
  v14[a3] = 0;
  v15 = *a4;
  *v13 = a3;
  v13[1] = v15;
  *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned long long>>((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = a2[1];
    *v5 = *a2;
    v5[1] = v6;
    v5[2] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = (37 * v5)
       + ~((unint64_t)(37 * v5) << 32)
       + ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 24 * v11);
    v14 = *v12;
    v13 = v12[1];
    if (*a2 == *v12 && v5 == v13)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096 || v13 != -1)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v13 == -2;
        if (v19 && v14 == -8192)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
        v14 = *v12;
        v13 = v12[1];
        if (*a2 == *v12 && v5 == v13)
          goto LABEL_9;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v12;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned long long>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_24AA496C0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (_QWORD *)v4;
      do
      {
        v14 = v13[1];
        if ((*v13 != -4096 || v14 != -1) && (*v13 != -8192 || v14 != -2))
        {
          v21 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>,std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned long long>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned long long>,llvm::ArrayType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned long long>>((uint64_t *)a1, v13, &v21);
          v17 = v21;
          v18 = v13[1];
          *v21 = *v13;
          v17[1] = v18;
          v17[2] = v13[2];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = 24 * v19;
    do
    {
      *result = xmmword_24AA496C0;
      result = (_OWORD *)((char *)result + 24);
      v20 -= 24;
    }
    while (v20);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t)a1, a2, a2, v8);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(v5 + 12) = *(_BYTE *)(a2 + 12);
    *(_DWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int i;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v21;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    v16 = 0;
    result = 0;
    goto LABEL_28;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = (37 * v5 - *(char *)(a2 + 12));
  v7 = (v6 | ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32))
     + ~(v6 << 32);
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = v9 + ~(v9 << 27);
  v11 = *a1;
  v12 = (v10 >> 31) ^ v10;
  v13 = v3 - 1;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v13;
    v16 = (uint64_t *)(v11 + 24 * (v12 & v13));
    v17 = *v16;
    if (*(_QWORD *)a2 == *v16
      && v5 == *((_DWORD *)v16 + 2)
      && *(unsigned __int8 *)(a2 + 12) == *((unsigned __int8 *)v16 + 12))
    {
      result = 1;
      goto LABEL_28;
    }
    if (v17 == -4096)
      break;
    if (v17 != -8192)
      goto LABEL_22;
    v21 = *((_DWORD *)v16 + 2) == -2 && *((_BYTE *)v16 + 12) == 0;
LABEL_23:
    if (v21 && v4 == 0)
      v4 = (uint64_t *)(v11 + 24 * v15);
    v12 = v15 + i;
  }
  if (*((_DWORD *)v16 + 2) != -1 || *((_BYTE *)v16 + 12) == 0)
  {
LABEL_22:
    v21 = 0;
    goto LABEL_23;
  }
  result = 0;
  if (v4)
    v16 = v4;
LABEL_28:
  *a3 = v16;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,llvm::ElementCount>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_12:
    llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::grow(a1, v7);
    v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || (*(_DWORD *)(a4 + 8) == -1 ? (v8 = *(_BYTE *)(a4 + 12) == 0) : (v8 = 1), v8))
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_24AA496D0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_28:
      JUMPOUT(0x24BD1B398);
    v12 = 24 * v3;
    v13 = v4;
    while (1)
    {
      if (*(_QWORD *)v13 == -8192)
      {
        if (*(_DWORD *)(v13 + 8) == -2 && *(_BYTE *)(v13 + 12) == 0)
          goto LABEL_22;
      }
      else if (*(_QWORD *)v13 == -4096 && *(_DWORD *)(v13 + 8) == -1 && *(_BYTE *)(v13 + 12) != 0)
      {
        goto LABEL_22;
      }
      v20 = 0;
      llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>,std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *,llvm::DenseMapInfo<std::pair<llvm::Type *,llvm::ElementCount>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,llvm::ElementCount>,llvm::VectorType *>>::LookupBucketFor<std::pair<llvm::Type *,llvm::ElementCount>>((uint64_t *)a1, v13, &v20);
      v16 = v20;
      *v20 = *(_QWORD *)v13;
      v17 = *(_DWORD *)(v13 + 8);
      *((_BYTE *)v16 + 12) = *(_BYTE *)(v13 + 12);
      *((_DWORD *)v16 + 2) = v17;
      v16[2] = *(_QWORD *)(v13 + 16);
      ++*(_DWORD *)(a1 + 8);
LABEL_22:
      v13 += 24;
      v12 -= 24;
      if (!v12)
        goto LABEL_28;
    }
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 24 * v18;
    do
    {
      *result = xmmword_24AA496D0;
      result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = a2[2];
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int HashValue;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v15;
  int v16;
  uint64_t result;
  BOOL v18;
  unsigned int v20;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    HashValue = llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>::getHashValue(a2);
    v8 = v4 - 1;
    v9 = a2[2];
    v10 = HashValue & (v4 - 1);
    v11 = (uint64_t *)(v6 + 24 * v10);
    v12 = *v11;
    v13 = *((_DWORD *)v11 + 2);
    if (*(_QWORD *)a2 == *v11 && v9 == v13)
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      result = 1;
      while (v12 != -4096 || v13 != -1)
      {
        if (v15)
          v18 = 0;
        else
          v18 = v13 == -2;
        if (v18 && v12 == -8192)
          v15 = v11;
        v20 = v10 + v16++;
        v10 = v20 & v8;
        v11 = (uint64_t *)(v6 + 24 * (v20 & v8));
        v12 = *v11;
        v13 = *((_DWORD *)v11 + 2);
        if (*(_QWORD *)a2 == *v11 && v9 == v13)
          goto LABEL_9;
      }
      result = 0;
      if (v15)
        v11 = v15;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_9:
  *a3 = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::InsertIntoBucketImpl<std::pair<llvm::Type *,unsigned int>>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_24AA2E1D0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_DWORD *)(v13 + 8);
        if ((*(_QWORD *)v13 != -4096 || v14 != -1) && (*(_QWORD *)v13 != -8192 || v14 != -2))
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>,std::pair<llvm::Type *,unsigned int>,llvm::PointerType *,llvm::DenseMapInfo<std::pair<llvm::Type *,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<llvm::Type *,unsigned int>,llvm::PointerType *>>::LookupBucketFor<std::pair<llvm::Type *,unsigned int>>((uint64_t *)a1, (_DWORD *)v13, &v20);
          v17 = v20;
          *v20 = *(_QWORD *)v13;
          *((_DWORD *)v17 + 2) = *(_DWORD *)(v13 + 8);
          v17[2] = *(_QWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 24 * v18;
    do
    {
      *result = xmmword_24AA2E1D0;
      result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::insert_as<llvm::TargetExtTypeKeyInfo::KeyTy>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t *v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;

  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v13, a4);
  v10 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::InsertIntoBucketImpl<llvm::TargetExtTypeKeyInfo::KeyTy>(a1, (uint64_t)a2, a3, v13);
    v10 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v12;
  *(_BYTE *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>(uint64_t *a1, uint64_t a2, uint64_t **a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 isEqual;
  _BOOL4 v17;
  uint64_t *v18;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = llvm::TargetExtTypeKeyInfo::getHashValue(a2, a2, (uint64_t)a3, a4) & (v5 - 1);
    v10 = (uint64_t *)(v7 + 8 * v9);
    if (llvm::TargetExtTypeKeyInfo::isEqual(a2, *v10))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (*v10 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = *v10 == -8192;
        if (v14)
          v12 = v10;
        v18 = v12;
        v15 = v13 + 1;
        v9 = (v9 + v13) & v8;
        v10 = (uint64_t *)(v7 + 8 * v9);
        isEqual = llvm::TargetExtTypeKeyInfo::isEqual(a2, *v10);
        v12 = v18;
        v17 = isEqual;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

BOOL llvm::TargetExtTypeKeyInfo::isEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  size_t v4;
  const void *v5;
  const void *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 8) != v4)
    return 0;
  v5 = *(const void **)(a2 + 16);
  v6 = *(const void **)(a2 + 40);
  v7 = *(unsigned int *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    v9 = memcmp(*(const void **)a1, *(const void **)(a2 + 24), v4);
    result = 0;
    if (v9 || *(_QWORD *)(a1 + 24) != v8)
      return result;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 24) != v8)
    return 0;
LABEL_9:
  v10 = memcmp(*(const void **)(a1 + 16), v5, 8 * v8);
  result = 0;
  if (!v10 && *(_QWORD *)(a1 + 40) == v7 >> 8)
    return memcmp(*(const void **)(a1 + 32), v6, 4 * (v7 >> 8)) == 0;
  return result;
}

unint64_t llvm::TargetExtTypeKeyInfo::getHashValue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[8];
  unint64_t v11[9];

  v11[8] = *MEMORY[0x24BDAC8D0];
  v9 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 16), *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(a1 + 24), a3, a4);
  v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a1 + 32), *(_QWORD *)(a1 + 32) + 4 * *(_QWORD *)(a1 + 40), v5, v6);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, a1, (uint64_t *)&v9, (uint64_t *)&v8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::StringRef,llvm::hash_code,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, unint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v12;
  _QWORD *v13;
  unint64_t v15;

  v15 = a2;
  v12 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a5, *(_QWORD *)a5 + *(_QWORD *)(a5 + 8), (uint64_t)a3, a4);
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v15, a3, (unint64_t)a4, v12);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(a1, v15, v13, (char *)a4, a6, a7);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::InsertIntoBucketImpl<llvm::TargetExtTypeKeyInfo::KeyTy>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  uint64_t *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>,llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::LookupBucketFor<llvm::TargetExtTypeKeyInfo::KeyTy>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::TargetExtType *,llvm::detail::DenseSetEmpty,llvm::TargetExtTypeKeyInfo,llvm::detail::DenseSetPair<llvm::TargetExtType *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int HashValue;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      do
      {
        *result++ = -4096;
        v14 -= 8;
      }
      while (v14);
    }
    if ((_DWORD)v3)
    {
      v15 = &v4[v3];
      v16 = v4;
      do
      {
        v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = *(uint64_t **)a1;
          v19 = *(_DWORD *)(a1 + 16);
          v35 = *(_OWORD *)(v17 + 24);
          v20 = *(unsigned int *)(v17 + 12);
          v36 = *(_QWORD *)(v17 + 16);
          v37 = v20;
          v21 = *(_QWORD *)(v17 + 40);
          v22 = (unint64_t)*(unsigned int *)(v17 + 8) >> 8;
          v38 = v21;
          v39 = v22;
          HashValue = llvm::TargetExtTypeKeyInfo::getHashValue((uint64_t)&v35, v10, v11, v12);
          v24 = v19 - 1;
          v25 = *v16;
          v26 = HashValue & (v19 - 1);
          v27 = &v18[v26];
          v28 = *v27;
          if (*v16 != *v27)
          {
            v29 = 0;
            v30 = 1;
            while (v28 != -4096)
            {
              if (v29)
                v31 = 0;
              else
                v31 = v28 == -8192;
              if (v31)
                v29 = v27;
              v32 = v26 + v30++;
              v26 = v32 & v24;
              v27 = &v18[v32 & v24];
              v28 = *v27;
              if (v25 == *v27)
                goto LABEL_12;
            }
            if (v29)
              v27 = v29;
          }
LABEL_12:
          *v27 = v25;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v16;
      }
      while (v16 != v15);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v33 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v33)
  {
    v34 = 8 * v33;
    do
    {
      *result++ = -4096;
      v34 -= 8;
    }
    while (v34);
  }
  return result;
}

void llvm::TypeFinder::run(llvm::TypeFinder *this, const llvm::Module *a2, char a3)
{
  char *v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *j;
  _QWORD *v9;
  const llvm::Value *v10;
  _QWORD *k;
  _QWORD *v12;
  const llvm::Module *v13;
  char *v14;
  int v15;
  uint64_t v16;
  const llvm::Value **v17;
  uint64_t v18;
  const llvm::Value *v19;
  uint64_t v20;
  const llvm::Value *v21;
  const llvm::Value *v22;
  const llvm::Value *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v40;
  const llvm::MDNode **v41;
  const llvm::MDNode *v42;
  _QWORD *m;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const llvm::Module *v47;
  const llvm::Module *v48;
  const llvm::Module *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[9];

  v52[8] = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 120) = a3;
  v5 = (char *)a2 + 8;
  for (i = *((_QWORD *)a2 + 2); (char *)i != v5; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v7 = i - 56;
    else
      v7 = 0;
    llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v7 + 24));
    if (i && *(_BYTE *)(v7 + 16) == 3)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_13;
    }
    else if (*(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 72) != v7 + 72 || (*(_BYTE *)(v7 + 35) & 1) != 0)
    {
LABEL_13:
      llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v7 - 32));
      continue;
    }
  }
  for (j = (_QWORD *)*((_QWORD *)a2 + 6); j != (_QWORD *)((char *)a2 + 40); j = (_QWORD *)j[1])
  {
    if (j)
      v9 = j - 6;
    else
      v9 = 0;
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v9[3]);
    v10 = (const llvm::Value *)*(v9 - 4);
    if (v10)
      llvm::TypeFinder::incorporateValue(this, v10);
  }
  for (k = (_QWORD *)*((_QWORD *)a2 + 8); k != (_QWORD *)((char *)a2 + 56); k = (_QWORD *)k[1])
  {
    v12 = k - 7;
    if (!k)
      v12 = 0;
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v12[3]);
  }
  v50 = v52;
  v51 = 0x400000000;
  v47 = a2;
  v48 = (const llvm::Module *)((char *)a2 + 24);
  v13 = (const llvm::Module *)*((_QWORD *)a2 + 4);
  if (v13 != (const llvm::Module *)((char *)a2 + 24))
  {
    do
    {
      if (v13)
        v14 = (char *)v13 - 56;
      else
        v14 = 0;
      llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v14 + 3));
      llvm::TypeFinder::incorporateAttributes((uint64_t)this, *((_QWORD *)v14 + 14));
      v15 = *((_DWORD *)v14 + 5);
      v49 = v13;
      if ((v15 & 0x40000000) != 0)
      {
        v17 = (const llvm::Value **)*((_QWORD *)v14 - 1);
        v16 = v15 & 0x7FFFFFF;
        if (v16)
        {
LABEL_36:
          v18 = 32 * v16;
          do
          {
            v19 = *v17;
            v17 += 4;
            llvm::TypeFinder::incorporateValue(this, v19);
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        v16 = v15 & 0x7FFFFFF;
        v17 = (const llvm::Value **)&v14[-32 * v16];
        if (v16)
          goto LABEL_36;
      }
      v20 = llvm::Function::args((llvm::Function *)v14);
      if ((const llvm::Value *)v20 != v21)
      {
        v22 = (const llvm::Value *)v20;
        v23 = v21;
        do
        {
          llvm::TypeFinder::incorporateValue(this, v22);
          v22 = (const llvm::Value *)((char *)v22 + 40);
        }
        while (v22 != v23);
      }
      v24 = v14 + 72;
      v25 = *((_QWORD *)v14 + 10);
      while (2)
      {
        if ((char *)v25 != v24)
        {
          v26 = v25 - 24;
          if (!v25)
            v26 = 0;
          v27 = v26 + 40;
          v28 = *(_QWORD *)(v26 + 48);
LABEL_46:
          if (v28 == v27)
          {
            v25 = *(_QWORD *)(v25 + 8);
            continue;
          }
          if (v28)
            v29 = v28 - 24;
          else
            v29 = 0;
          llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v29);
          v30 = *(_DWORD *)(v29 + 20);
          if ((v30 & 0x40000000) != 0)
          {
            v32 = *(unsigned __int8 ***)(v29 - 8);
            v31 = v30 & 0x7FFFFFF;
            if (!v31)
              goto LABEL_59;
          }
          else
          {
            v31 = v30 & 0x7FFFFFF;
            v32 = (unsigned __int8 **)(v29 - 32 * v31);
            if (!v31)
            {
LABEL_59:
              v35 = *(unsigned __int8 *)(v29 + 16);
              if (v28 && v35 == 62)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                v35 = *(unsigned __int8 *)(v29 + 16);
              }
              if (v28 && v35 == 59)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                v35 = *(unsigned __int8 *)(v29 + 16);
              }
              v36 = v35 - 33;
              v37 = v36 > 0x33;
              v38 = (1 << v36) & 0x8000000000041;
              if (!v37 && v38 != 0)
                llvm::TypeFinder::incorporateAttributes((uint64_t)this, *(_QWORD *)(v29 + 64));
              llvm::Value::getAllMetadata((uint64_t ***)v29, (unsigned int *)&v50);
              if ((_DWORD)v51)
              {
                v40 = 16 * v51;
                v41 = (const llvm::MDNode **)((char *)v50 + 8);
                do
                {
                  v42 = *v41;
                  v41 += 2;
                  llvm::TypeFinder::incorporateMDNode(this, v42);
                  v40 -= 16;
                }
                while (v40);
              }
              LODWORD(v51) = 0;
              v28 = *(_QWORD *)(v28 + 8);
              goto LABEL_46;
            }
          }
          v33 = 32 * v31;
          do
          {
            v34 = *v32;
            if (*v32 && v34[16] <= 0x1Bu)
              llvm::TypeFinder::incorporateValue(this, (const llvm::Value *)v34);
            v32 += 4;
            v33 -= 32;
          }
          while (v33);
          goto LABEL_59;
        }
        break;
      }
      v13 = (const llvm::Module *)*((_QWORD *)v49 + 1);
    }
    while (v13 != v48);
  }
  for (m = (_QWORD *)*((_QWORD *)v47 + 10); m != (_QWORD *)((char *)v47 + 72); m = (_QWORD *)m[1])
  {
    v44 = *(unsigned int *)(m[6] + 8);
    if ((_DWORD)v44)
    {
      v45 = 0;
      v46 = 8 * v44;
      do
      {
        llvm::TypeFinder::incorporateMDNode(this, *(const llvm::MDNode **)(*(_QWORD *)m[6] + v45));
        v45 += 8;
      }
      while (v46 != v45);
    }
  }
  if (v50 != v52)
    free(v50);
}

void llvm::TypeFinder::incorporateType(llvm::TypeFinder *this, llvm::Type *a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  _BYTE v27[24];
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  v4 = (char *)this + 72;
  llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v28, (uint64_t)this + 72, (uint64_t *)&v26);
  if (v30[0])
  {
    v28 = v30;
    v29 = 0x400000000;
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, (uint64_t)a2);
    v5 = v29;
    do
    {
      v6 = *((_QWORD *)v28 + v5 - 1);
      LODWORD(v29) = v5 - 1;
      v26 = (llvm::Type *)v6;
      if (v6)
        v7 = *(_BYTE *)(v6 + 8) == 16;
      else
        v7 = 0;
      if (v7 && (!*((_BYTE *)this + 120) || *(_QWORD *)(v6 + 24)))
      {
        v9 = (uint64_t *)*((_QWORD *)this + 13);
        v8 = *((_QWORD *)this + 14);
        if ((unint64_t)v9 >= v8)
        {
          v11 = *((_QWORD *)this + 12);
          v12 = ((uint64_t)v9 - v11) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v13 = v8 - v11;
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)this + 112, v15);
          else
            v16 = 0;
          v17 = (uint64_t *)&v16[8 * v12];
          *v17 = v6;
          v10 = v17 + 1;
          v19 = (char *)*((_QWORD *)this + 12);
          v18 = (char *)*((_QWORD *)this + 13);
          if (v18 != v19)
          {
            do
            {
              v20 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v17 = v20;
            }
            while (v18 != v19);
            v18 = (char *)*((_QWORD *)this + 12);
          }
          *((_QWORD *)this + 12) = v17;
          *((_QWORD *)this + 13) = v10;
          *((_QWORD *)this + 14) = &v16[8 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v9 = v6;
          v10 = v9 + 1;
        }
        *((_QWORD *)this + 13) = v10;
        v6 = (uint64_t)v26;
      }
      v21 = *(unsigned int *)(v6 + 12);
      if ((_DWORD)v21)
      {
        v22 = 8 * v21;
        v23 = *(_QWORD *)(v6 + 16) - 8;
        do
        {
          v24 = *(_QWORD *)(v23 + v22);
          v25 = v24;
          llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>,llvm::GlobalObject *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::GlobalObject *,void>,llvm::detail::DenseSetPair<llvm::GlobalObject *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v27, (uint64_t)v4, &v25);
          if (v27[16])
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v28, v24);
          v22 -= 8;
        }
        while (v22);
      }
      v5 = v29;
    }
    while ((_DWORD)v29);
    if (v28 != v30)
      free(v28);
  }
}

void llvm::TypeFinder::incorporateValue(llvm::TypeFinder *this, const llvm::Value *a2)
{
  const llvm::Value *v2;
  int v4;
  const llvm::MDNode *v5;
  int v6;
  unsigned __int8 *v8;
  BOOL v9;
  const llvm::Value *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const llvm::Value **v14;
  uint64_t v15;
  const llvm::Value *v16;
  const llvm::Value *v17;
  _BYTE v18[31];

  v2 = a2;
  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 23)
  {
    while (1)
    {
      v5 = (const llvm::MDNode *)*((_QWORD *)v2 + 3);
      v6 = llvm::MDNode::classof(v5);
      if (v5 && v6 != 0)
        break;
      v8 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
      if (*v8 - 3 < 0xFFFFFFFE)
        return;
      v2 = (const llvm::Value *)*((_QWORD *)v8 + 16);
      v4 = *((unsigned __int8 *)v2 + 16);
      if (v2)
        v9 = v4 == 23;
      else
        v9 = 0;
      if (!v9)
        goto LABEL_13;
    }
    llvm::TypeFinder::incorporateMDNode(this, v5);
  }
  else
  {
LABEL_13:
    v17 = v2;
    if ((v4 - 21) >= 0xFFFFFFEF)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this, &v17, (uint64_t)v18);
      if (v18[16])
      {
        llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v17);
        v10 = v17;
        v11 = *((unsigned __int8 *)v17 + 16);
        if (v11 <= 0x1B)
        {
          if (v11 == 5 && *((_WORD *)v17 + 9) == 34)
          {
            llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v17 + 3));
            v10 = v17;
          }
          v12 = *((_DWORD *)v10 + 5);
          if ((v12 & 0x40000000) != 0)
          {
            v14 = (const llvm::Value **)*((_QWORD *)v10 - 1);
            v13 = v12 & 0x7FFFFFF;
          }
          else
          {
            v13 = v12 & 0x7FFFFFF;
            v14 = (const llvm::Value **)((char *)v10 - 32 * v13);
          }
          if (v13)
          {
            v15 = 32 * v13;
            do
            {
              v16 = *v14;
              v14 += 4;
              llvm::TypeFinder::incorporateValue(this, v16);
              v15 -= 32;
            }
            while (v15);
          }
        }
      }
    }
  }
}

void llvm::TypeFinder::incorporateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v2 = a2;
  v5 = a1 + 48;
  v4 = *(_QWORD *)(a1 + 48);
  v14 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(v4, *(_DWORD *)(v5 + 16), a2, &v14) & 1) != 0)return;
  v6 = *(_DWORD *)(v5 + 16);
  v7 = *(_DWORD *)(a1 + 56);
  if (4 * v7 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_26;
  }
  if (v6 + ~v7 - *(_DWORD *)(a1 + 60) <= v6 >> 3)
  {
LABEL_26:
    llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow(v5, v6);
    v14 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), v2, &v14);
  }
  v8 = v14;
  ++*(_DWORD *)(a1 + 56);
  if (*v8 != -4)
    --*(_DWORD *)(a1 + 60);
  *v8 = v2;
  if (v2)
    v9 = (_QWORD *)(v2 + 40);
  else
    v9 = 0;
  if (v2)
    v2 += 40 + 8 * *(unsigned int *)(v2 + 8);
  while (v9 != (_QWORD *)v2)
  {
    v10 = *v9;
    if (*v9)
      v11 = (uint64_t *)(*v9 + 48);
    else
      v11 = 0;
    if (v10)
      v12 = *v9 + 48 + 8 * *(unsigned int *)(v10 + 8);
    else
      v12 = 0;
    while (v11 != (uint64_t *)v12)
    {
      v13 = *v11;
      if (*v11)
      {
        if (*(_BYTE *)(v13 + 8) == 3)
          llvm::TypeFinder::incorporateType((llvm::TypeFinder *)a1, *(llvm::Type **)(v13 + 16));
      }
      ++v11;
    }
    ++v9;
  }
}

uint64_t llvm::TypeFinder::incorporateMDNode(llvm::TypeFinder *this, const llvm::MDNode *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t result;
  unsigned int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const llvm::Value ***v15;
  uint64_t v16;
  uint64_t v17;
  const llvm::Value **v18;
  _QWORD *v19;

  v5 = (char *)this + 24;
  v4 = *((_QWORD *)this + 3);
  v19 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(v4, *((_DWORD *)v5 + 4), (uint64_t)a2, &v19);
  if ((result & 1) != 0)
    return result;
  v7 = *((_DWORD *)v5 + 4);
  v8 = *((_DWORD *)this + 8);
  if (4 * v8 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v8 - *((_DWORD *)this + 9) > v7 >> 3)
  {
    goto LABEL_4;
  }
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow((uint64_t)v5, v7);
  v19 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*((_QWORD *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, &v19);
LABEL_4:
  v9 = v19;
  ++*((_DWORD *)this + 8);
  if (*v9 != -4096)
    --*((_DWORD *)this + 9);
  *v9 = a2;
  if (*(_BYTE *)a2 == 33)
  {
    v10 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v10)
    {
      v11 = (uint64_t *)*((_QWORD *)a2 + 2);
      v12 = 8 * v10;
      do
      {
        v13 = *v11++;
        result = llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v13 + 128));
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    v14 = *((_QWORD *)a2 - 2);
    if ((v14 & 2) != 0)
    {
      v15 = (const llvm::Value ***)*((_QWORD *)a2 - 4);
      v16 = *((unsigned int *)a2 - 6);
      if (!*((_DWORD *)a2 - 6))
        return result;
    }
    else
    {
      v15 = (const llvm::Value ***)((char *)a2 - 8 * ((v14 >> 2) & 0xF) - 16);
      v16 = (v14 >> 6) & 0xF;
      if (!v16)
        return result;
    }
    v17 = 8 * v16;
    do
    {
      v18 = *v15;
      if (*v15)
      {
        result = llvm::MDNode::classof(*v15);
        if ((_DWORD)result)
        {
          result = llvm::TypeFinder::incorporateMDNode(this, (const llvm::MDNode *)v18);
        }
        else if (*(_BYTE *)v18 == 1)
        {
          result = llvm::TypeFinder::incorporateValue(this, v18[16]);
        }
      }
      ++v15;
      v17 -= 8;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 4) != 0xFFFFFFFFFFFFFFFCLL)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>,llvm::AttributeList,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::AttributeList,void>,llvm::detail::DenseSetPair<llvm::AttributeList>>::LookupBucketFor<llvm::AttributeList>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      *result++ = -4;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void llvm::Use::zap(void *__p, char *a2, int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != __p)
  {
    v3 = a2;
    do
    {
      v4 = *((_QWORD *)v3 - 4);
      v3 -= 32;
      if (v4)
      {
        **((_QWORD **)a2 - 2) = *((_QWORD *)a2 - 3);
        v5 = *((_QWORD *)a2 - 3);
        if (v5)
          *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 - 2);
      }
      a2 = v3;
    }
    while (v3 != __p);
  }
  if (a3)
    operator delete(__p);
}

void llvm::User::growHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  char *v14;
  char v15;

  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x40000000) != 0)
    v8 = (uint64_t *)*((_QWORD *)this - 1);
  else
    v8 = (uint64_t *)((char *)this - 32 * v7);
  v9 = a2;
  if (a3)
    v10 = 40 * a2;
  else
    v10 = 32 * a2;
  v11 = operator new(v10);
  *((_QWORD *)this - 1) = v11;
  if (a2)
  {
    v12 = v11;
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = this;
      v12 += 4;
    }
    while (v12 != &v11[4 * a2]);
  }
  v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x40000000) != 0)
    v14 = (char *)v11;
  else
    v14 = (char *)this - 32 * (v13 & 0x7FFFFFF);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::Use *,llvm::Use *,llvm::Use *>((uint64_t)&v15, v8, &v8[4 * v7], (uint64_t)v14);
  if ((_DWORD)v7 && a3)
    memmove(&v14[32 * v9], &v8[4 * v7], 8 * v7);
  llvm::Use::zap(v8, (char *)&v8[4 * v7], 1);
}

_QWORD *llvm::User::operator new(llvm::User *this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = a2;
  v4 = operator new((size_t)this + 32 * a2);
  result = &v4[4 * v3];
  *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF;
  if (a2)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = result;
      v4 += 4;
    }
    while (v4 != result);
  }
  return result;
}

char *llvm::User::operator new(llvm::User *this, unsigned int a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v5 = a3 != 0;
  if (a3)
    v6 = a3 + 8;
  else
    v6 = 0;
  v7 = a2;
  v8 = (char *)operator new((size_t)this + 32 * a2 + v6);
  v9 = &v8[v6];
  v10 = (uint64_t)&v8[32 * v7 + v6];
  *(_DWORD *)(v10 + 20) = a2 & 0x7FFFFFF | (v5 << 31) | *(_DWORD *)(v10 + 20) & 0x38000000;
  if (a2)
  {
    do
    {
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = v10;
      v9 += 32;
    }
    while (v9 != (char *)v10);
  }
  if (a3)
    *(_QWORD *)&v8[a3] = a3;
  return &v8[32 * v7 + v6];
}

void llvm::User::operator delete(void **a1)
{
  int v2;
  uint64_t v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 5);
  if ((v2 & 0x40000000) != 0)
  {
    llvm::Use::zap(*(a1 - 1), (char *)*(a1 - 1) + 32 * (v2 & 0x7FFFFFF), 1);
    v4 = a1 - 1;
  }
  else
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = &a1[-4 * v3];
    if ((_DWORD)v3)
    {
      v5 = a1 - 2;
      v6 = -32 * v3;
      do
      {
        if (*(v5 - 2))
        {
          *(_QWORD *)*v5 = *(v5 - 1);
          v7 = (uint64_t)*(v5 - 1);
          if (v7)
            *(_QWORD *)(v7 + 16) = *v5;
        }
        v5 -= 4;
        v6 += 32;
      }
      while (v6);
    }
    if (v2 < 0)
    {
      operator delete((void *)((char *)(v4 - 1) - (_BYTE *)*(v4 - 1)));
      return;
    }
  }
  operator delete(v4);
}

void llvm::Value::~Value(llvm::Value *this, llvm::Value *a2)
{
  int v3;

  if ((*((_BYTE *)this + 17) & 1) != 0)
    llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
  {
    llvm::ValueAsMetadata::handleDeletion(this, a2);
    v3 = *((_DWORD *)this + 5);
  }
  if ((v3 & 0x20000000) != 0)
    llvm::Value::clearMetadata((uint64_t)this);
  llvm::Value::destroyValueName((uint64_t ***)this);
}

void llvm::ValueHandleBase::ValueIsDeleted(llvm::ValueHandleBase *this, llvm::Value *a2)
{
  uint64_t *v2;
  int v3;
  llvm::ValueHandleBase *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  v2 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(_QWORD ***)this + 2456), &v4)[1];
  llvm::ValueHandleBase::ValueHandleBase(&v5, 0, v2);
  do
  {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v5);
    v6 = (uint64_t *)v2[1];
    v2[1] = (uint64_t)&v5;
    v5 = v5 & 7 | (unint64_t)(v2 + 1);
    if (v6)
      *v6 = *v6 & 7 | (unint64_t)&v6;
    v3 = (*(_DWORD *)v2 >> 1) & 3;
    if ((v3 - 2) >= 2)
    {
      if (v3 == 1)
        (*(void (**)(uint64_t *))(*(v2 - 1) + 8))(v2 - 1);
    }
    else
    {
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)v2, 0);
    }
    v2 = v6;
  }
  while (v6);
  if (v7 != -8192 && v7 != -4096)
  {
    if (v7)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v5);
  }
}

void llvm::Value::destroyValueName(uint64_t ***this)
{
  uint64_t ValueName;

  ValueName = llvm::Value::getValueName(this);
  if (ValueName)
    MEMORY[0x24BD1B398](ValueName, 8);
  llvm::Value::setValueName((uint64_t)this, 0);
}

void llvm::Value::deleteValue(llvm::Value *this)
{
  __asm { BR              X10 }
}

void sub_24AA03A18(llvm::UndefValue **a1, llvm::Type *a2)
{
  void **v2;

  llvm::Instruction::~Instruction(a1, a2);
  llvm::User::operator delete(v2);
}

uint64_t sub_24AA03A24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

void sub_24AA03A30(llvm::ShuffleVectorInst *a1, llvm::Type *a2)
{
  llvm::ShuffleVectorInst::~ShuffleVectorInst(a1, a2);
  JUMPOUT(0x24AA03A1CLL);
}

void sub_24AA03A38(llvm::ShuffleVectorInst *a1, llvm::Type *a2)
{
  llvm::ShuffleVectorInst::~ShuffleVectorInst(a1, a2);
  JUMPOUT(0x24AA03A1CLL);
}

void sub_24AA03A40(llvm::ShuffleVectorInst *a1, llvm::Type *a2)
{
  llvm::ShuffleVectorInst::~ShuffleVectorInst(a1, a2);
  JUMPOUT(0x24AA03A1CLL);
}

void sub_24AA03A48(llvm::Value *a1, llvm::Value *a2)
{
  llvm::Value::~Value(a1, a2);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::InlineAsm::~InlineAsm(void **this, llvm::Value *a2)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  llvm::Value::~Value((llvm::Value *)this, a2);
}

void llvm::ShuffleVectorInst::~ShuffleVectorInst(llvm::ShuffleVectorInst *this, llvm::Type *a2)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
  llvm::Instruction::~Instruction((llvm::UndefValue **)this, a2);
}

uint64_t llvm::Value::getValueName(uint64_t ***this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  llvm::Value *v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return 0;
  v2 = ***this;
  v5 = (llvm::Value *)this;
  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v2 + 144), &v5, &v6);
  v4 = v6;
  if (!v3)
    v4 = *(_QWORD *)(v2 + 144) + 16 * *(unsigned int *)(v2 + 160);
  return *(_QWORD *)(v4 + 8);
}

void llvm::Value::setValueName(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = **(_QWORD ***)a1;
  v4 = *(_DWORD *)(a1 + 20);
  if (a2)
  {
    *(_DWORD *)(a1 + 20) = v4 | 0x10000000;
    v5 = (uint64_t *)(*v3 + 144);
    v7 = a1;
    llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v5, &v7)[1] = a2;
  }
  else
  {
    if ((v4 & 0x10000000) != 0)
    {
      v6 = *v3 + 144;
      v7 = a1;
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v6, &v7);
      v4 = *(_DWORD *)(a1 + 20);
    }
    *(_DWORD *)(a1 + 20) = v4 & 0xEFFFFFFF;
  }
}

void llvm::Value::setNameImpl(llvm::Value *this, const llvm::Twine *a2)
{
  int v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  const void *v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t *v13;
  unint64_t *ValueName;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  unsigned int *v18;
  llvm::Value *v19;
  void *v20;
  __int128 v21;
  _QWORD v22[33];

  v22[32] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(***(_QWORD ***)this + 2720) && *((unsigned __int8 *)this + 16) >= 4u)
  {
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
      return;
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  if (*((unsigned __int8 *)a2 + 32) > 1u || (*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v20 = v22;
    v21 = xmmword_24AA2ACF0;
    if (v3)
    {
      llvm::Twine::toStringRef((unsigned __int8 *)a2, (uint64_t)&v20);
      v6 = v5;
      v7 = v4;
      v8 = (char *)this + 20;
      if ((*((_BYTE *)this + 23) & 0x10) == 0)
      {
        if (!v4)
        {
LABEL_24:
          if (v20 != v22)
            free(v20);
          return;
        }
LABEL_15:
        v18 = 0;
        if ((getSymTab((uint64_t)this, &v18) & 1) == 0)
        {
          v12 = v18;
          if (v18)
          {
            if ((v8[3] & 0x10) == 0
              || (v13 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this),
                  llvm::StringMapImpl::RemoveKey((uint64_t)v12, (uint64_t *)((char *)v13 + v12[5]), *v13),
                  llvm::Value::destroyValueName((uint64_t ***)this),
                  v7))
            {
              ValueName = llvm::ValueSymbolTable::createValueName(v12, v6, v7, (unint64_t)this);
              llvm::Value::setValueName((uint64_t)this, (uint64_t)ValueName);
            }
          }
          else
          {
            llvm::Value::destroyValueName((uint64_t ***)this);
            if (v7)
            {
              v15 = operator new(v7 + 17, (std::align_val_t)8uLL);
              memcpy(v15 + 2, v6, v7);
              *((_BYTE *)v15 + v7 + 16) = 0;
              *v15 = v7;
              v15[1] = 0;
              v16 = **(_QWORD ***)this;
              *((_DWORD *)this + 5) |= 0x10000000u;
              v17 = (uint64_t *)(*v16 + 144);
              v19 = this;
              llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct(v17, &v19)[1] = v15;
              *(_QWORD *)(llvm::Value::getValueName((uint64_t ***)this) + 8) = this;
            }
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      if ((*((_BYTE *)this + 23) & 0x10) == 0)
        goto LABEL_24;
      v7 = 0;
      v8 = (char *)this + 20;
      v6 = (uint64_t *)&str_3_26;
    }
    v9 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
    v11 = *v9;
    v10 = v9 + 2;
    if (v11 == v7 && (!v7 || !memcmp(v10, v6, v7)))
      goto LABEL_24;
    goto LABEL_15;
  }
}

uint64_t getSymTab(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;

  *a2 = 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 >= 0x1C)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (!v3)
      return v3;
    v3 = *(_QWORD *)(v3 + 56);
    if (!v3)
      return v3;
    goto LABEL_17;
  }
  if (a1 && v2 == 22)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (!v3)
      return v3;
    goto LABEL_17;
  }
  if (a1 && v2 <= 3)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (!v3)
      return v3;
    v4 = (_QWORD *)(v3 + 112);
LABEL_18:
    v3 = 0;
    *a2 = *v4;
    return v3;
  }
  v3 = 1;
  if (a1)
  {
    if (v2 == 21)
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3)
      {
LABEL_17:
        v4 = (_QWORD *)(v3 + 104);
        goto LABEL_18;
      }
    }
  }
  return v3;
}

void llvm::Value::setName(llvm::Value *this, const llvm::Twine *a2)
{
  llvm::Value::setNameImpl(this, a2);
  if (this)
  {
    if (!*((_BYTE *)this + 16))
      llvm::Function::recalculateIntrinsicID(this);
  }
}

void llvm::Value::takeName(llvm::Value *this, llvm::Value *a2)
{
  unsigned int *v4;
  unint64_t *ValueName;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  unsigned int *v12;

  v12 = 0;
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      return;
LABEL_3:
    if (!getSymTab((uint64_t)this, &v12))
    {
      v4 = v12;
      goto LABEL_12;
    }
LABEL_7:
    v11 = 257;
    llvm::Value::setName(a2, (const llvm::Twine *)v10);
    return;
  }
  if (getSymTab((uint64_t)this, &v12))
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      return;
    goto LABEL_7;
  }
  v4 = v12;
  if (v12)
  {
    ValueName = (unint64_t *)llvm::Value::getValueName((uint64_t ***)this);
    llvm::StringMapImpl::RemoveKey((uint64_t)v4, (uint64_t *)((char *)ValueName + v4[5]), *ValueName);
  }
  llvm::Value::destroyValueName((uint64_t ***)this);
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    if (v4)
    {
LABEL_12:
      v10[0] = 0;
      getSymTab((uint64_t)a2, v10);
      v6 = v10[0];
      if (v4 == (unsigned int *)v10[0])
      {
        v9 = llvm::Value::getValueName((uint64_t ***)a2);
        llvm::Value::setValueName((uint64_t)this, v9);
        llvm::Value::setValueName((uint64_t)a2, 0);
        *(_QWORD *)(llvm::Value::getValueName((uint64_t ***)this) + 8) = this;
      }
      else
      {
        if (v10[0])
        {
          v7 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)a2);
          llvm::StringMapImpl::RemoveKey(v6, (uint64_t *)((char *)v7 + *(unsigned int *)(v6 + 20)), *v7);
        }
        v8 = llvm::Value::getValueName((uint64_t ***)a2);
        llvm::Value::setValueName((uint64_t)this, v8);
        llvm::Value::setValueName((uint64_t)a2, 0);
        *(_QWORD *)(llvm::Value::getValueName((uint64_t ***)this) + 8) = this;
        if (v4)
          llvm::ValueSymbolTable::reinsertValue((llvm::ValueSymbolTable *)v4, (uint64_t ***)this);
      }
      return;
    }
    goto LABEL_3;
  }
}

void llvm::Value::doRAUW(llvm::ValueAsMetadata *this, llvm::Value *a2, llvm::Value *a3)
{
  int v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (int)a3;
  if ((*((_BYTE *)this + 17) & 1) != 0)
    llvm::ValueHandleBase::ValueIsRAUWd(this, a2, a3);
  if (v3 == 1 && (*((_BYTE *)this + 23) & 8) != 0)
    llvm::ValueAsMetadata::handleRAUW(this, a2, a3);
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v7 = (uint64_t *)((char *)a2 + 8);
    do
    {
      v8 = *(_QWORD *)(v6 + 24);
      if (v8)
        v9 = *(unsigned __int8 *)(v8 + 16) - 21 >= 0xFFFFFFEF;
      else
        v9 = 0;
      if (v9)
      {
        llvm::Constant::handleOperandChange(v8);
      }
      else
      {
        if (*(_QWORD *)v6)
        {
          **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
          v10 = *(_QWORD *)(v6 + 8);
          if (v10)
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v6 + 16);
        }
        *(_QWORD *)v6 = a2;
        if (a2)
        {
          v11 = *v7;
          *(_QWORD *)(v6 + 8) = *v7;
          if (v11)
            *(_QWORD *)(v11 + 16) = v6 + 8;
          *(_QWORD *)(v6 + 16) = v7;
          *v7 = v6;
        }
      }
      v6 = *((_QWORD *)this + 1);
    }
    while (v6);
  }
  if (*((_BYTE *)this + 16) == 22)
    llvm::BasicBlock::replaceSuccessorsPhiUsesWith(this, this, a2);
}

void llvm::ValueHandleBase::ValueIsRAUWd(llvm::ValueHandleBase *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t *v4;
  int v5;
  llvm::ValueHandleBase *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v6 = this;
  v4 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(***(_QWORD ***)this + 2456), &v6)[1];
  llvm::ValueHandleBase::ValueHandleBase(&v7, 0, v4);
  do
  {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v7);
    v8 = (uint64_t *)v4[1];
    v4[1] = (uint64_t)&v7;
    v7 = v7 & 7 | (unint64_t)(v4 + 1);
    if (v8)
      *v8 = *v8 & 7 | (unint64_t)&v8;
    v5 = (*(_DWORD *)v4 >> 1) & 3;
    if (v5 == 1)
    {
      (*(void (**)(uint64_t *, llvm::Value *))(*(v4 - 1) + 16))(v4 - 1, a2);
    }
    else if (v5 == 3)
    {
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)v4, (uint64_t)a2);
    }
    v4 = v8;
  }
  while (v8);
  if (v9 != -8192 && v9 != -4096)
  {
    if (v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v7);
  }
}

llvm::Value *llvm::Value::stripPointerCasts(llvm::Value *this)
{
  llvm::Value *v1;
  unsigned int v2;
  int v3;
  llvm::Value *ArgOperandWithAttribute;
  int v5;
  const void **v6;
  int v7;
  llvm::Value **v8;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];

  v1 = this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return v1;
  v11 = v15;
  v12 = v15;
  v13 = 4;
  v14 = 0;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v11, this, (uint64_t)v10);
  while (1)
  {
    v2 = *((unsigned __int8 *)v1 + 16);
    if (v2 > 0x1B)
      break;
    if (v2 != 5)
      goto LABEL_29;
    v3 = *((unsigned __int16 *)v1 + 9);
    if (v3 == 34)
      goto LABEL_13;
    if (v3 == 49)
      goto LABEL_22;
    if (v3 != 50)
      goto LABEL_29;
LABEL_20:
    v5 = *((_DWORD *)v1 + 5);
    if ((v5 & 0x40000000) != 0)
      v6 = (const void **)*((_QWORD *)v1 - 1);
    else
      v6 = (const void **)((char *)v1 - 32 * (v5 & 0x7FFFFFF));
    ArgOperandWithAttribute = (llvm::Value *)*v6;
LABEL_28:
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v11, ArgOperandWithAttribute, (uint64_t)v10);
    v1 = ArgOperandWithAttribute;
    if (!v10[16])
      goto LABEL_29;
  }
  if (*((unsigned __int8 *)v1 + 16) <= 0x4Cu)
  {
    if (v2 == 33 || v2 == 39)
      goto LABEL_18;
    if (v2 != 62)
      goto LABEL_29;
LABEL_13:
    if (!llvm::GEPOperator::hasAllZeroIndices(v1))
      goto LABEL_29;
    goto LABEL_20;
  }
  if (v2 != 77)
  {
    if (v2 != 78)
    {
      if (v2 != 84)
        goto LABEL_29;
LABEL_18:
      ArgOperandWithAttribute = (llvm::Value *)llvm::CallBase::getArgOperandWithAttribute((uint64_t)v1, 46);
      if (!ArgOperandWithAttribute)
        goto LABEL_29;
      goto LABEL_28;
    }
    goto LABEL_20;
  }
LABEL_22:
  v7 = *((_DWORD *)v1 + 5);
  if ((v7 & 0x40000000) != 0)
    v8 = (llvm::Value **)*((_QWORD *)v1 - 1);
  else
    v8 = (llvm::Value **)((char *)v1 - 32 * (v7 & 0x7FFFFFF));
  ArgOperandWithAttribute = *v8;
  v1 = *v8;
  if (*(_BYTE *)(*(_QWORD *)*v8 + 8) == 15)
    goto LABEL_28;
LABEL_29:
  if (v12 != v11)
    free(v12);
  return v1;
}

llvm::Value *llvm::Value::stripPointerCastsAndAliases(llvm::Value *this)
{
  llvm::Value *v1;
  unsigned int v2;
  int v3;
  llvm::Value *ArgOperandWithAttribute;
  int v5;
  const void **v6;
  int v7;
  llvm::Value **v8;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];

  v1 = this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return v1;
  v11 = v15;
  v12 = v15;
  v13 = 4;
  v14 = 0;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v11, this, (uint64_t)v10);
  while (1)
  {
    v2 = *((unsigned __int8 *)v1 + 16);
    if (v2 > 0x1B)
      break;
    if (v2 != 1)
    {
      if (v2 != 5)
        goto LABEL_31;
      v3 = *((unsigned __int16 *)v1 + 9);
      if (v3 != 34)
      {
        if (v3 == 49)
          goto LABEL_24;
        if (v3 != 50)
          goto LABEL_31;
        goto LABEL_21;
      }
LABEL_14:
      if (!llvm::GEPOperator::hasAllZeroIndices(v1))
        goto LABEL_31;
LABEL_21:
      v5 = *((_DWORD *)v1 + 5);
      if ((v5 & 0x40000000) != 0)
        v6 = (const void **)*((_QWORD *)v1 - 1);
      else
        v6 = (const void **)((char *)v1 - 32 * (v5 & 0x7FFFFFF));
      goto LABEL_27;
    }
    v6 = (const void **)((char *)v1 - 32);
LABEL_27:
    ArgOperandWithAttribute = (llvm::Value *)*v6;
LABEL_30:
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v11, ArgOperandWithAttribute, (uint64_t)v10);
    v1 = ArgOperandWithAttribute;
    if (!v10[16])
      goto LABEL_31;
  }
  if (*((unsigned __int8 *)v1 + 16) <= 0x4Cu)
  {
    if (v2 == 33 || v2 == 39)
      goto LABEL_19;
    if (v2 != 62)
      goto LABEL_31;
    goto LABEL_14;
  }
  if (v2 != 77)
  {
    if (v2 != 78)
    {
      if (v2 != 84)
        goto LABEL_31;
LABEL_19:
      ArgOperandWithAttribute = (llvm::Value *)llvm::CallBase::getArgOperandWithAttribute((uint64_t)v1, 46);
      if (!ArgOperandWithAttribute)
        goto LABEL_31;
      goto LABEL_30;
    }
    goto LABEL_21;
  }
LABEL_24:
  v7 = *((_DWORD *)v1 + 5);
  if ((v7 & 0x40000000) != 0)
    v8 = (llvm::Value **)*((_QWORD *)v1 - 1);
  else
    v8 = (llvm::Value **)((char *)v1 - 32 * (v7 & 0x7FFFFFF));
  ArgOperandWithAttribute = *v8;
  v1 = *v8;
  if (*(_BYTE *)(*(_QWORD *)*v8 + 8) == 15)
    goto LABEL_30;
LABEL_31:
  if (v12 != v11)
    free(v12);
  return v1;
}

const void **llvm::Value::stripAndAccumulateConstantOffsets(const void *a1, llvm::DataLayout *a2, _QWORD *a3, char a4, int a5, unsigned int (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v12;
  int v13;
  const void **v14;
  const void **v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t ArgOperandWithAttribute;
  uint64_t v22;
  unsigned int v23;
  uint64_t PointerAlignElem;
  unsigned int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  unsigned int v31;
  uint64_t v33;
  int v34;
  void *v35;
  unsigned int v36;
  BOOL v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[40];

  v12 = (uint64_t)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    v13 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  else
    v13 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (v13 != 15)
    return (const void **)a1;
  v31 = *((_DWORD *)a3 + 2);
  v43 = v47;
  v44 = v47;
  v45 = 4;
  v46 = 0;
  v14 = llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v43, a1, (uint64_t)&v40);
  while (1)
  {
    v15 = v14;
    v16 = *(unsigned __int8 *)(v12 + 16);
    if (v16 > 0x1B)
      break;
    if (v16 == 1)
    {
      if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)v12) & 1) != 0)
        goto LABEL_40;
      v20 = (uint64_t *)(v12 - 32);
      goto LABEL_26;
    }
    if (v16 == 5)
    {
      v17 = *(unsigned __int16 *)(v12 + 18);
      if ((v17 - 49) < 2)
        goto LABEL_15;
      if (v17 != 34)
        goto LABEL_40;
      goto LABEL_29;
    }
LABEL_40:
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v43, (const void *)v12, (uint64_t)&v40);
    v14 = v15;
    v15 = (const void **)v12;
    if (!v42)
      goto LABEL_66;
  }
  v18 = v16 - 33;
  if (v18 > 0x33)
    goto LABEL_40;
  if (((1 << v18) & 0x8000000000041) != 0)
  {
    ArgOperandWithAttribute = llvm::CallBase::getArgOperandWithAttribute(v12, 46);
    if (ArgOperandWithAttribute)
      v22 = ArgOperandWithAttribute;
    else
      v22 = v12;
    if (!a5 || !llvm::Instruction::isLaunderOrStripInvariantGroup((llvm::Instruction *)v12))
    {
      v12 = v22;
      goto LABEL_40;
    }
    v19 = *(_DWORD *)(v12 + 20);
LABEL_23:
    v20 = (uint64_t *)(v12 - 32 * (v19 & 0x7FFFFFF));
LABEL_26:
    v12 = *v20;
    goto LABEL_40;
  }
  if (((1 << v18) & 0x300000000000) != 0)
  {
LABEL_15:
    v19 = *(_DWORD *)(v12 + 20);
    if ((v19 & 0x40000000) == 0)
      goto LABEL_23;
    v20 = *(uint64_t **)(v12 - 8);
    goto LABEL_26;
  }
  if (v18 != 29)
    goto LABEL_40;
LABEL_29:
  if ((a4 & 1) != 0 || (*(_BYTE *)(v12 + 17) & 2) != 0)
  {
    v23 = *(_DWORD *)(*(_QWORD *)v12 + 8);
    if ((v23 & 0xFE) == 0x12)
      v23 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v12 + 16) + 8);
    PointerAlignElem = llvm::DataLayout::getPointerAlignElem(a2, v23 >> 8);
    llvm::APInt::APInt((llvm::APInt *)&v40, *(_DWORD *)(PointerAlignElem + 12), 0, 0);
    if (!llvm::GEPOperator::accumulateConstantOffset(v12, a2, (uint64_t)&v40, a6, a7)
      || (v25 = v41, v25 - llvm::APInt::getNumSignBits((llvm::APInt *)&v40) + 1 > v31))
    {
      v26 = 1;
      v15 = (const void **)v12;
      goto LABEL_36;
    }
    llvm::APInt::sextOrTrunc((llvm::APInt *)&v40, v31, (llvm::APInt *)&v38);
    if (a6)
    {
      v37 = 0;
      v36 = *((_DWORD *)a3 + 2);
      if (v36 > 0x40)
      {
        v35 = (void *)operator new[]();
        memcpy(v35, (const void *)*a3, (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v35 = (void *)*a3;
      }
      llvm::APInt::sadd_ov((llvm::APInt *)a3, (const llvm::APInt *)&v38, &v37, (uint64_t)&v33);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
        MEMORY[0x24BD1B380](*a3, 0x1000C8000313F17);
      *a3 = v33;
      *((_DWORD *)a3 + 2) = v34;
      v27 = v37;
      if (v37)
      {
        llvm::APInt::operator=((llvm::APInt *)a3, (const llvm::APInt *)&v35);
        v15 = (const void **)v12;
      }
      if (v36 >= 0x41 && v35)
        MEMORY[0x24BD1B380](v35, 0x1000C8000313F17);
      if (v27)
      {
        v26 = 1;
        goto LABEL_61;
      }
    }
    else
    {
      llvm::APInt::operator+=((uint64_t)a3, &v38);
    }
    v28 = *(_DWORD *)(v12 + 20);
    if ((v28 & 0x40000000) != 0)
      v29 = *(uint64_t **)(v12 - 8);
    else
      v29 = (uint64_t *)(v12 - 32 * (v28 & 0x7FFFFFF));
    v26 = 0;
    v12 = *v29;
LABEL_61:
    if (v39 >= 0x41 && v38)
      MEMORY[0x24BD1B380](v38, 0x1000C8000313F17);
LABEL_36:
    if (v41 >= 0x41 && v40)
      MEMORY[0x24BD1B380](v40, 0x1000C8000313F17);
    if (v26)
      goto LABEL_66;
    goto LABEL_40;
  }
  v15 = (const void **)v12;
LABEL_66:
  if (v44 != v43)
    free(v44);
  return v15;
}

uint64_t llvm::Value::stripInBoundsOffsets(const void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  int v7;
  const void *ArgOperandWithAttribute;
  int v9;
  const void **v10;
  int v11;
  uint64_t *v12;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[32];

  v3 = (uint64_t)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
    return v3;
  v15 = v19;
  v16 = v19;
  v17 = 4;
  v18 = 0;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v15, a1, (uint64_t)v14);
  while (1)
  {
    a2(a3, v3);
    v6 = *(unsigned __int8 *)(v3 + 16);
    if (v6 > 0x1B)
      break;
    if (v6 != 5)
      goto LABEL_29;
    v7 = *(unsigned __int16 *)(v3 + 18);
    if (v7 == 34)
      goto LABEL_13;
    if (v7 == 49)
      goto LABEL_22;
    if (v7 != 50)
      goto LABEL_29;
LABEL_20:
    v9 = *(_DWORD *)(v3 + 20);
    if ((v9 & 0x40000000) != 0)
      v10 = *(const void ***)(v3 - 8);
    else
      v10 = (const void **)(v3 - 32 * (v9 & 0x7FFFFFF));
    ArgOperandWithAttribute = *v10;
LABEL_28:
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v15, ArgOperandWithAttribute, (uint64_t)v14);
    v3 = (uint64_t)ArgOperandWithAttribute;
    if (!v14[16])
      goto LABEL_29;
  }
  if (*(unsigned __int8 *)(v3 + 16) <= 0x4Cu)
  {
    if (v6 == 33 || v6 == 39)
      goto LABEL_18;
    if (v6 != 62)
      goto LABEL_29;
LABEL_13:
    if ((*(_BYTE *)(v3 + 17) & 2) == 0)
      goto LABEL_29;
    goto LABEL_20;
  }
  if (v6 != 77)
  {
    if (v6 != 78)
    {
      if (v6 != 84)
        goto LABEL_29;
LABEL_18:
      ArgOperandWithAttribute = (const void *)llvm::CallBase::getArgOperandWithAttribute(v3, 46);
      if (!ArgOperandWithAttribute)
        goto LABEL_29;
      goto LABEL_28;
    }
    goto LABEL_20;
  }
LABEL_22:
  v11 = *(_DWORD *)(v3 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(uint64_t **)(v3 - 8);
  else
    v12 = (uint64_t *)(v3 - 32 * (v11 & 0x7FFFFFF));
  ArgOperandWithAttribute = (const void *)*v12;
  v3 = *v12;
  if (*(_BYTE *)(*(_QWORD *)*v12 + 8) == 15)
    goto LABEL_28;
LABEL_29:
  if (v16 != v15)
    free(v16);
  return v3;
}

void llvm::Value::getPointerAlignment(llvm::Value *this, const llvm::DataLayout *a2)
{
  unsigned int v4;
  uint64_t ParamStructRetType;
  uint64_t v6;
  unsigned int v7;
  llvm::Constant *v8;
  llvm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Metadata;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *((unsigned __int8 *)this + 16);
  if (v4 > 0x14)
  {
    if (v4 == 21)
    {
      if ((unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8)) <= 0xFFu)
      {
        if (llvm::Argument::hasStructRetAttr(this))
        {
          ParamStructRetType = llvm::AttributeList::getParamStructRetType((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
          if (llvm::Type::isSized(ParamStructRetType, 0))
            llvm::DataLayout::getAlignment((uint64_t)a2, ParamStructRetType);
        }
      }
      return;
    }
    if (v4 == 59)
      return;
  }
  else
  {
    if (v4 - 2 < 2)
    {
      if (((*((_DWORD *)this + 8) >> 17) & 0x3F) == 0 && v4 == 3)
      {
        v6 = *((_QWORD *)this + 3);
        if (llvm::Type::isSized(v6, 0))
        {
          if (llvm::GlobalValue::isStrongDefinitionForLinker(this))
            llvm::DataLayout::getPreferredAlign(a2, this);
          else
            llvm::DataLayout::getAlignment((uint64_t)a2, v6);
        }
      }
      return;
    }
    if (!*((_BYTE *)this + 16))
      return;
  }
  if (v4 < 0x1C)
  {
    if (v4 <= 0x14)
    {
      v7 = llvm::Value::stripPointerCasts(this);
      llvm::DataLayout::getIntPtrType(a2, *(llvm::Type **)this);
      v10 = llvm::ConstantFoldCastInstruction((llvm *)0x2F, v7, v8, v9);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16) == 16 && *(_DWORD *)(v10 + 32) > 0x40u)
          llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v10 + 24));
      }
    }
  }
  else
  {
    if (*((unsigned __int8 *)this + 16) <= 0x3Bu)
    {
      if (v4 != 33 && v4 != 39)
        return;
      goto LABEL_30;
    }
    if (v4 != 60)
    {
      if (v4 != 84)
        return;
LABEL_30:
      if ((unsigned __int16)llvm::AttributeList::getRetAlignment((llvm::Value *)((char *)this + 64)) <= 0xFFu)
      {
        v11 = *((_QWORD *)this - 4);
        if (!v11
          || *(_BYTE *)(v11 + 16)
          || *(_QWORD *)(v11 + 24) != *((_QWORD *)this + 9)
          || (v16 = *(_QWORD *)(v11 + 112),
              (unsigned __int16)llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v16) <= 0xFFu))
        {
          v12 = *((_QWORD *)this - 4);
          if (v12)
          {
            if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 24) == *((_QWORD *)this + 9))
            {
              v16 = *(_QWORD *)(v12 + 112);
              llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v16);
            }
          }
        }
      }
      return;
    }
    if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
    {
      Metadata = llvm::Value::getMetadata(this, 17);
      if (Metadata)
      {
        v14 = *(_QWORD *)(Metadata - 16);
        if ((v14 & 2) != 0)
          v15 = *(_QWORD *)(Metadata - 32);
        else
          v15 = Metadata - 16 - 8 * ((v14 >> 2) & 0xF);
        llvm::APInt::getLimitedValue((uint64_t ***)(*(_QWORD *)(*(_QWORD *)v15 + 128) + 24), 0xFFFFFFFFFFFFFFFFLL);
      }
    }
  }
}

uint64_t llvm::ValueHandleBase::AddToUseList(llvm::ValueHandleBase *this)
{
  uint64_t ***v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v2 = (uint64_t ***)*((_QWORD *)this + 2);
  v3 = ***v2;
  v4 = (_QWORD *)(v3 + 2456);
  if ((*((_BYTE *)v2 + 17) & 1) != 0)
  {
    v20 = *((_QWORD *)this + 2);
    v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(v3 + 2456), &v20);
    v15 = v14[1];
    result = (uint64_t)(v14 + 1);
    *((_QWORD *)this + 1) = v15;
    *(_QWORD *)result = this;
    *(_QWORD *)this = *(_QWORD *)this & 7 | result;
    v16 = (unint64_t *)*((_QWORD *)this + 1);
    if (v16)
      *v16 = *v16 & 7 | ((unint64_t)this + 8);
  }
  else
  {
    v5 = (_QWORD *)*v4;
    v20 = *((_QWORD *)this + 2);
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::FindAndConstruct((uint64_t *)(v3 + 2456), &v20);
    v8 = v6[1];
    result = (uint64_t)(v6 + 1);
    *((_QWORD *)this + 1) = v8;
    *(_QWORD *)result = this;
    *(_QWORD *)this = *(_QWORD *)this & 7 | result;
    v9 = (unint64_t *)*((_QWORD *)this + 1);
    if (v9)
      *v9 = *v9 & 7 | ((unint64_t)this + 8);
    *(_BYTE *)(*((_QWORD *)this + 2) + 17) |= 1u;
    v10 = (_QWORD *)*v4;
    if ((*v4 > (unint64_t)v5 || &v10[2 * *(unsigned int *)(v3 + 2472)] <= v5) && *(_DWORD *)(v3 + 2464) >= 2u)
    {
      v11 = *(unsigned int *)(v3 + 2472);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        for (i = (_QWORD *)*v4; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
        {
          v12 -= 16;
          if (!v12)
            return result;
        }
      }
      else
      {
        i = (_QWORD *)*v4;
      }
      v17 = &v10[2 * v11];
LABEL_17:
      if (i != v17)
      {
        v19 = (uint64_t *)i[1];
        v18 = (unint64_t)(i + 1);
        *v19 = *v19 & 7 | v18;
        for (i = (_QWORD *)(v18 + 8); i != v17; i += 2)
        {
          if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_17;
        }
      }
    }
  }
  return result;
}

void llvm::ValueHandleBase::RemoveFromUseList(llvm::ValueHandleBase *this)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v1 = *((_QWORD *)this + 1);
  v2 = (unint64_t *)*((_QWORD *)this + 1);
  if (v2)
  {
    *v2 = *v2 & 7 | v1;
  }
  else
  {
    v4 = ****((_QWORD ****)this + 2);
    v5 = *(_QWORD *)(v4 + 2456);
    if (v5 <= v1 && v5 + 16 * *(unsigned int *)(v4 + 2472) > v1)
    {
      v6 = *((_QWORD *)this + 2);
      llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>,llvm::GlobalValue const*,llvm::DSOLocalEquivalent *,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::DSOLocalEquivalent *>>::erase(v4 + 2456, &v6);
      *(_BYTE *)(*((_QWORD *)this + 2) + 17) &= ~1u;
    }
  }
}

uint64_t _GLOBAL__sub_I_Value_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&UseDerefAtPointSemantics, 0, 0);
  dword_257965078 = 0;
  qword_257965080 = (uint64_t)&off_251C12458;
  *(_QWORD *)&dword_257965088 = 0;
  UseDerefAtPointSemantics = (uint64_t)off_251C12270;
  qword_257965090 = (uint64_t)&off_251C121B0;
  qword_257965098 = (uint64_t)&off_251C17200;
  qword_2579650B0 = (uint64_t)&qword_257965098;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"use-dereferenceable-at-point-semantics", 0x26uLL);
  word_257965002 = word_257965002 & 0xFF9F | 0x20;
  dword_257965078 = 0;
  byte_25796508C = 1;
  dword_257965088 = 0;
  qword_257965018 = (uint64_t)"Deref attributes and metadata infer facts at definition only";
  unk_257965020 = 60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&UseDerefAtPointSemantics);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &UseDerefAtPointSemantics, &dword_24A800000);
}

unint64_t *llvm::ValueSymbolTable::makeUniqueName(llvm::StringMapImpl *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t **v10;
  char v11;
  unint64_t *v12;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  llvm::formatv_object_base *v17;
  __int16 v18;
  std::string __p;
  int v20;
  void (**v21)(llvm::raw_ostream *__hidden);
  int v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t **v29;

  v6 = *((unsigned int *)a3 + 2);
  while (1)
  {
    llvm::SmallVectorImpl<char>::resizeImpl<false>(a3, v6);
    v22 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 1;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v21 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    v29 = a3;
    llvm::raw_ostream::SetUnbuffered(&v21);
    if (a2 && *(unsigned __int8 *)(a2 + 16) <= 3u)
    {
      v7 = *(_QWORD *)(a2 + 40);
      if (!v7)
        goto LABEL_8;
      v18 = 260;
      v17 = (llvm::formatv_object_base *)(v7 + 208);
      llvm::Triple::Triple(&__p, &v17);
      v8 = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v8 - 41) >= 2)
      {
LABEL_8:
        if (v24 == v25)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v21, ".", 1uLL);
        else
          *v25++ = 46;
      }
    }
    v9 = (*((_DWORD *)a1 + 7) + 1);
    *((_DWORD *)a1 + 7) = v9;
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v21, v9, 0, 0, 0);
    v14 = *a3;
    v15 = (unint64_t)a3[1];
    v16 = a2;
    v10 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>(a1, v14, v15, &v16);
    if (v11)
      break;
    v21 = off_251C13948;
    if (v28 == 1)
    {
      if (v23)
        MEMORY[0x24BD1B380](v23, 0x1000C8077774924);
    }
  }
  v12 = *v10;
  v21 = off_251C13948;
  if (v28 == 1 && v23)
    MEMORY[0x24BD1B380](v23, 0x1000C8077774924);
  return v12;
}

void llvm::ValueSymbolTable::reinsertValue(llvm::ValueSymbolTable *this, uint64_t ***a2)
{
  uint64_t ValueName;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *UniqueName;
  void *v12;
  __int128 v13;
  _QWORD v14[33];

  v14[32] = *MEMORY[0x24BDAC8D0];
  ValueName = llvm::Value::getValueName(a2);
  if ((llvm::StringMap<llvm::Value *,llvm::MallocAllocator>::insert(this, ValueName) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      v6 = (_BYTE *)(llvm::Value::getValueName(a2) + 16);
      if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
      {
        v8 = (_QWORD *)llvm::Value::getValueName(a2);
        v9 = *v8;
        v7 = v8 + 2;
        v5 = v9;
      }
      else
      {
        v5 = 0;
        v7 = &str_3_26;
      }
    }
    else
    {
      v5 = 0;
      v6 = &str_3_26;
      v7 = &str_3_26;
    }
    v12 = v14;
    v13 = xmmword_24AA2ACF0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v12, v6, &v7[v5]);
    v10 = llvm::Value::getValueName(a2);
    MEMORY[0x24BD1B398](v10, 8);
    UniqueName = llvm::ValueSymbolTable::makeUniqueName(this, (unint64_t)a2, (uint64_t **)&v12);
    llvm::Value::setValueName((uint64_t)a2, (uint64_t)UniqueName);
    if (v12 != v14)
      free(v12);
  }
}

uint64_t llvm::StringMap<llvm::Value *,llvm::MallocAllocator>::insert(llvm::StringMapImpl *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = llvm::StringMapImpl::LookupBucketFor(a1, (uint64_t *)(a2 + 16), *(_QWORD *)a2);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v4);
  if (!v6)
    goto LABEL_4;
  if (v6 == -8)
  {
    --*((_DWORD *)a1 + 4);
LABEL_4:
    *(_QWORD *)(v5 + 8 * v4) = a2;
    ++*((_DWORD *)a1 + 3);
    llvm::StringMapImpl::RehashTable(a1, 0);
    return 1;
  }
  return 0;
}

unint64_t *llvm::ValueSymbolTable::createValueName(unsigned int *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t **v9;
  char v10;
  unint64_t *UniqueName;
  unint64_t v13;
  void *v14;
  __int128 v15;
  _QWORD v16[33];

  v5 = a3;
  v16[32] = *MEMORY[0x24BDAC8D0];
  v8 = a1[6];
  if ((v8 & 0x80000000) == 0 && a3 > v8)
  {
    v8 = v8 <= 1 ? 1 : v8;
    if (a3 >= v8)
      v5 = v8;
  }
  v13 = a4;
  v9 = llvm::StringMap<llvm::StructType *,llvm::MallocAllocator>::try_emplace<llvm::StructType *>((llvm::StringMapImpl *)a1, a2, v5, &v13);
  if (v10)
    return *v9;
  v14 = v16;
  v15 = xmmword_24AA2ACF0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v14, a2, (_BYTE *)a2 + v5);
  UniqueName = llvm::ValueSymbolTable::makeUniqueName((llvm::StringMapImpl *)a1, a4, (uint64_t **)&v14);
  if (v14 != v16)
    free(v14);
  return UniqueName;
}

_anonymous_namespace_::Verifier *`anonymous namespace'::Verifier::Verifier(_anonymous_namespace_::Verifier *this, llvm::raw_ostream *a2, char a3, const llvm::Module *a4)
{
  llvm::formatv_object_base *v8;
  __int16 v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = &off_251C1E350;
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 257;
  *((_QWORD *)this + 5) = a4;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_OWORD *)this + 3) = 0u;
  v9 = 260;
  v8 = (const llvm::Module *)((char *)a4 + 208);
  llvm::Triple::Triple((std::string *)((char *)this + 128), &v8);
  *((_QWORD *)this + 22) = (char *)a4 + 256;
  *((_QWORD *)this + 23) = *(_QWORD *)a4;
  *((_WORD *)this + 96) = 0;
  *((_QWORD *)this + 25) = (char *)this + 216;
  *((_QWORD *)this + 26) = 0x100000000;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  *((_QWORD *)this + 34) = (char *)this + 304;
  *((_QWORD *)this + 35) = (char *)this + 304;
  *((_QWORD *)this + 36) = 16;
  *((_DWORD *)this + 74) = 0;
  *((_QWORD *)this + 54) = (char *)this + 464;
  *((_QWORD *)this + 55) = (char *)this + 464;
  *((_QWORD *)this + 56) = 32;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 184) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_QWORD *)this + 93) = (char *)this + 776;
  *((_QWORD *)this + 94) = (char *)this + 776;
  *((_QWORD *)this + 95) = 2;
  *((_DWORD *)this + 192) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_WORD *)this + 400) = 0;
  *((_DWORD *)this + 201) = 0x8000;
  *((_DWORD *)this + 206) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_DWORD *)this + 212) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 218) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 908) = 0u;
  *((_QWORD *)this + 116) = (char *)this + 960;
  *((_QWORD *)this + 117) = (char *)this + 960;
  *((_QWORD *)this + 118) = 32;
  *((_DWORD *)this + 238) = 0;
  *((_QWORD *)this + 152) = (char *)this + 1232;
  *((_QWORD *)this + 153) = 0x400000000;
  *((_QWORD *)this + 158) = (char *)this + 1296;
  *((_QWORD *)this + 159) = (char *)this + 1296;
  *((_QWORD *)this + 160) = 32;
  *((_DWORD *)this + 322) = 0;
  *((_QWORD *)this + 194) = (char *)this + 1584;
  *((_QWORD *)this + 195) = (char *)this + 1584;
  *((_QWORD *)this + 196) = 32;
  *((_DWORD *)this + 394) = 0;
  *((_QWORD *)this + 230) = (char *)this + 1856;
  *((_QWORD *)this + 231) = 0x1000000000;
  *((_QWORD *)this + 248) = this;
  *((_QWORD *)this + 250) = 0;
  *((_QWORD *)this + 249) = 0;
  *((_DWORD *)this + 502) = 0;
  *((_QWORD *)this + 253) = 0;
  *((_QWORD *)this + 252) = 0;
  *((_DWORD *)this + 508) = 0;
  *((_QWORD *)this + 255) = (char *)this + 2056;
  *((_QWORD *)this + 256) = 0x400000000;
  *((_BYTE *)this + 194) = a3;
  return this;
}

BOOL `anonymous namespace'::Verifier::verify(_anonymous_namespace_::Verifier *this, const llvm::Function *a2)
{
  char *v4;
  uint64_t i;
  const llvm::Value *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  llvm::raw_ostream *v10;
  void *v11;
  size_t v12;
  const void *v13;
  size_t *ValueName;
  llvm::raw_ostream *v15;
  void *v16;
  uint64_t v17;
  _BYTE *v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t j;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  const llvm::Value **v62;
  const llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  llvm::Instruction *v68;
  const llvm::Value *v69;
  char v70;
  const llvm::Value *v71;
  char *v72;
  const llvm::Value *v73;
  const llvm::Value *v74;
  _QWORD *v75;
  _QWORD *v76;
  const llvm::Value **v77;
  const llvm::Value **v78;
  const void **imp;
  uint64_t *v80;
  llvm::Instruction *k;
  void *SuccPad;
  const void **v83;
  uint64_t *v84;
  uint64_t v85;
  llvm::Instruction *v86;
  uint64_t v87;
  llvm::Instruction **v88;
  llvm::Instruction *v89;
  const llvm::Value **v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  const llvm::Value **v102;
  uint64_t v103;
  unsigned __int8 *v104;
  BOOL v105;
  _BYTE *v106;
  char v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const llvm::Value **v114;
  const llvm::Value **v115;
  const llvm::Value **v116;
  const llvm::Value **v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  const llvm::Value **v123;
  uint64_t v124;
  const llvm::Value **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  const llvm::Value **v132;
  const llvm::Value **v133;
  const llvm::Value *v134;
  uint64_t v135;
  const llvm::Instruction **v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  const llvm::Value *v145;
  const llvm::Value *v146;
  const llvm::Value *v147;
  unsigned int v148;
  llvm::User *v149;
  int v150;
  uint64_t v152;
  int v153;
  uint64_t v154;
  llvm::User **v155;
  int v156;
  llvm::User *v157;
  char *v158;
  unint64_t v159;
  char *v160;
  llvm::User *v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  BOOL v169;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v180;
  _BYTE *v181;
  char *v182;
  char *v183;
  int v184;
  llvm::Value **v185;
  llvm::Value *v186;
  llvm::User *v187;
  uint64_t v188;
  const llvm::BasicBlock *v189;
  uint64_t v190;
  char *v191;
  int v192;
  _QWORD *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  BOOL v200;
  llvm::Constant *v202;
  int v203;
  int v204;
  int v205;
  char *v206;
  unsigned __int8 **v207;
  int v208;
  unsigned __int8 **v209;
  uint64_t *v210;
  const llvm::Function *v211;
  unsigned __int8 *v212;
  int v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  unsigned __int8 *Metadata;
  char *m;
  char *v221;
  _QWORD *v222;
  _QWORD *n;
  const llvm::Value *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t *v227;
  unint64_t ii;
  unint64_t v229;
  unint64_t *v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  unsigned __int8 *v237[4];
  __int16 v238;
  llvm::Instruction *v239;
  const llvm::Value *v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  _WORD v245[128];
  llvm::User *v246;
  uint64_t v247;
  _QWORD v248[2];
  __int16 v249;
  unsigned __int8 **v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _QWORD v254[10];

  v254[8] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)a2 + 72;
  if (*((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72))
  {
    *((_QWORD *)this + 32) = a2;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock,false>>::CalculateFromScratch((uint64_t)this + 200, 0);
  }
  for (i = *((_QWORD *)a2 + 10); ; i = *(_QWORD *)(i + 8))
  {
    if ((char *)i == v4)
    {
      *((_BYTE *)this + 192) = 0;
      v236 = v4;
      if (*((_QWORD *)this + 23) != **(_QWORD **)a2)
      {
        v9 = "Function context does not match Module context!";
LABEL_69:
        v241 = v9;
        v245[0] = 259;
        v250 = (unsigned __int8 **)a2;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250);
        goto LABEL_70;
      }
      if ((*((_DWORD *)a2 + 8) & 0xF) == 0xA)
      {
        v9 = "Functions may not have common linkage";
        goto LABEL_69;
      }
      v20 = *((_QWORD *)a2 + 3);
      if (*(_DWORD *)(v20 + 12) - 1 != *((_DWORD *)a2 + 24))
      {
        v241 = "# formal arguments must match # of arguments for function type!";
        v245[0] = 259;
        llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v241);
        if (*(_QWORD *)this)
        {
          llvm::VerifierSupport::Write((llvm::raw_ostream **)this, a2);
          llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (llvm::Type *)v20);
        }
        goto LABEL_70;
      }
      if (*(_BYTE *)(**(_QWORD **)(v20 + 16) + 8) == 14)
      {
        v9 = "Functions cannot return aggregate values!";
        goto LABEL_69;
      }
      if (llvm::Function::hasStructRetAttr(a2)
        && *(_BYTE *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8) != 7)
      {
        v9 = "Invalid struct return type!";
        goto LABEL_69;
      }
      v21 = *((_QWORD *)a2 + 14);
      if (v21 && *(_DWORD *)(v21 + 8) > (*(_DWORD *)(v20 + 12) + 1))
      {
        v9 = "Attribute after last parameter!";
        goto LABEL_69;
      }
      v22 = *((_DWORD *)a2 + 8);
      if (v21)
      {
        if ((*(_BYTE *)(v21 + 12) & 0x10) != 0)
        {
          v9 = "Attribute 'builtin' can only be applied to a callsite.";
          goto LABEL_69;
        }
        if (*(char *)(v21 + 32) < 0)
        {
          v9 = "Attribute 'elementtype' can only be applied to a callsite.";
          goto LABEL_69;
        }
      }
      v23 = (*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF;
      switch(v23)
      {
        case 'G':
        case 'H':
        case 'M':
          goto LABEL_272;
        case 'I':
        case 'J':
        case 'K':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'T':
        case 'U':
        case 'V':
        case '\\':
          goto LABEL_282;
        case 'L':
        case '[':
          if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8) == 7)
            goto LABEL_46;
          v24 = "Calling convention requires void return type";
          goto LABEL_481;
        case 'S':
          if (!*((_QWORD *)a2 + 12))
            goto LABEL_282;
          if (v21)
          {
            if (*(_DWORD *)(v21 + 8) >= 3u)
            {
              v143 = *(_QWORD *)(v21 + 56);
              if (v143)
              {
                if ((*(_BYTE *)(v143 + 20) & 0x40) != 0)
                  goto LABEL_282;
              }
            }
          }
          v24 = "Calling convention parameter requires byval";
          goto LABEL_481;
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case ']':
LABEL_46:
          if (llvm::Function::hasStructRetAttr(a2))
          {
            v24 = "Calling convention does not allow sret";
          }
          else
          {
            if ((*((_WORD *)a2 + 9) & 0x3FF0) != 0x4C0)
            {
              v25 = *(_DWORD *)(*((_QWORD *)this + 22) + 4);
              v26 = llvm::Function::args(a2);
              if (v26 != v27)
              {
                v28 = v21 + 40;
                v29 = 2;
                do
                {
                  if (v21 && v29 < *(_DWORD *)(v21 + 8))
                  {
                    v30 = *(_QWORD *)(v28 + 8 * v29);
                    if (v30 && (*(_BYTE *)(v30 + 20) & 0x40) != 0)
                    {
                      v24 = "Calling convention disallows byval";
                      goto LABEL_481;
                    }
                    v31 = *(_QWORD *)(v28 + 8 * v29);
                    if (v31 && (*(_BYTE *)(v31 + 21) & 2) != 0)
                    {
                      v24 = "Calling convention disallows preallocated";
                      goto LABEL_481;
                    }
                    v32 = *(_QWORD *)(v28 + 8 * v29);
                    if (v32 && (*(_BYTE *)(v32 + 21) & 1) != 0)
                    {
                      v24 = "Calling convention disallows inalloca";
                      goto LABEL_481;
                    }
                    v33 = *(_QWORD *)(v28 + 8 * v29);
                    if (v33 && (*(_BYTE *)(v33 + 20) & 0x20) != 0)
                    {
                      v34 = *(_DWORD *)(*(_QWORD *)v26 + 8);
                      if ((v34 & 0xFE) == 0x12)
                        v34 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
                      if (v25 == v34 >> 8)
                      {
                        v24 = "Calling convention disallows stack byref";
                        goto LABEL_481;
                      }
                    }
                  }
                  v26 += 40;
                  ++v29;
                }
                while (v26 != v27);
              }
            }
LABEL_272:
            if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 8) < 0x100u)
            {
LABEL_282:
              v144 = llvm::Function::args(a2);
              if ((const llvm::Value *)v144 != v145)
              {
                v146 = (const llvm::Value *)v144;
                v147 = v145;
                v148 = 2;
                do
                {
                  v149 = *(llvm::User **)(*(_QWORD *)(v20 + 16) + 8 * (v148 - 1));
                  if (*(llvm::User **)v146 != v149)
                  {
                    v241 = "Argument value does not match function argument type!";
                    v245[0] = 259;
                    v250 = (unsigned __int8 **)v146;
                    v246 = v149;
                    llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250, &v246);
                    goto LABEL_482;
                  }
                  v150 = *(_DWORD *)(*(_QWORD *)v146 + 8);
                  if (v150 == 14 || v150 == 7)
                  {
                    v241 = "Function arguments must have first-class types!";
                    v245[0] = 259;
                    v250 = (unsigned __int8 **)v146;
                    llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250);
                    goto LABEL_482;
                  }
                  if ((v22 & 0x2000) == 0)
                  {
                    switch(v150)
                    {
                      case 0xCu:
                        v182 = "Function takes token but isn't an intrinsic";
LABEL_358:
                        v241 = v182;
                        v245[0] = 259;
                        v250 = (unsigned __int8 **)v146;
                        v246 = a2;
                        llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250, &v246);
                        goto LABEL_482;
                      case 0xBu:
                        v182 = "Function takes x86_amx but isn't an intrinsic";
                        goto LABEL_358;
                      case 9u:
                        v182 = "Function takes metadata but isn't an intrinsic";
                        goto LABEL_358;
                    }
                  }
                  if (v21)
                  {
                    if (v148 < *(_DWORD *)(v21 + 8))
                    {
                      v152 = *(_QWORD *)(v21 + 40 + 8 * v148);
                      if (v152)
                      {
                        if ((*(_BYTE *)(v152 + 20) & 1) != 0)
                      }
                    }
                  }
                  v146 = (const llvm::Value *)((char *)v146 + 40);
                  ++v148;
                }
                while (v146 != v147);
              }
              if ((v22 & 0x2000) != 0)
                goto LABEL_303;
              v153 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)a2 + 3) + 16) + 8);
              if (v153 == 11)
              {
                v24 = "Function returns a x86_amx but isn't an intrinsic";
                goto LABEL_481;
              }
              if (v153 != 12)
              {
LABEL_303:
                v250 = (unsigned __int8 **)&v252;
                v251 = 0x400000000;
                llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v250);
                if (!(_DWORD)v251)
                  goto LABEL_373;
                v154 = 16 * v251;
                v155 = (llvm::User **)(v250 + 1);
                while (1)
                {
                  v156 = *((_DWORD *)v155 - 2);
                  if (v156 == 36)
                  {
                    v161 = *v155;
                    v246 = v161;
                    v162 = *((_QWORD *)v161 - 2);
                    if ((v162 & 2) != 0)
                    {
                      if (*((_DWORD *)v161 - 6) != 1)
                      {
LABEL_364:
                        v183 = "!kcfi_type must have exactly one operand";
                        goto LABEL_372;
                      }
                      v163 = (uint64_t *)*((_QWORD *)v161 - 4);
                    }
                    else
                    {
                      if ((*((_QWORD *)v161 - 2) & 0x3C0) != 0x40)
                        goto LABEL_364;
                      v163 = (uint64_t *)((char *)v161 - 8 * ((v162 >> 2) & 0xF) - 16);
                    }
                    v171 = *v163;
                    if (!v171)
                    {
                      v183 = "!kcfi_type operand must not be null";
                      goto LABEL_372;
                    }
                    if (*(_BYTE *)v171 != 1)
                    {
                      v183 = "expected a constant operand for !kcfi_type";
                      goto LABEL_372;
                    }
                    v172 = *(_BYTE **)(v171 + 128);
                    if (v172[16] != 16)
                    {
                      v183 = "expected a constant integer operand for !kcfi_type";
                      goto LABEL_372;
                    }
                    if ((*(_DWORD *)(*(_QWORD *)v172 + 8) & 0xFFFFFF00) != 0x2000)
                    {
                      v183 = "expected a 32-bit integer constant operand for !kcfi_type";
                      goto LABEL_372;
                    }
                  }
                  else if (v156 == 2)
                  {
                    v157 = *v155;
                    v246 = v157;
                    v158 = (char *)v157 - 16;
                    v159 = *((_QWORD *)v157 - 2);
                    if ((v159 & 2) != 0)
                    {
                      if (*((_DWORD *)v157 - 6) <= 1u)
                      {
LABEL_363:
                        v183 = "!prof annotations should have no less than 2 operands";
                        goto LABEL_372;
                      }
                      v160 = (char *)*((_QWORD *)v157 - 4);
                    }
                    else
                    {
                      if ((v159 & 0x380) == 0)
                        goto LABEL_363;
                      v160 = &v158[-8 * ((v159 >> 2) & 0xF)];
                    }
                    v164 = *(_QWORD *)v160;
                    if (!v164)
                    {
                      v183 = "first operand should not be null";
                      goto LABEL_372;
                    }
                    if (*(_BYTE *)v164)
                    {
                      v183 = "expected string with name of the !prof annotation";
                      goto LABEL_372;
                    }
                    v165 = *(_QWORD **)(v164 + 8);
                    if (*v165 == 30)
                    {
                      v173 = v165[3];
                      v174 = v165[4];
                      v175 = v165[5];
                      v176 = *(_QWORD *)((char *)v165 + 46);
                      if (v173 != 0x69746568746E7973
                        || v174 != 0x6974636E75665F63
                        || v175 != 0x7972746E655F6E6FLL
                        || v176 != 0x746E756F635F7972)
                      {
LABEL_360:
                        v183 = "first operand should be 'function_entry_count' or 'synthetic_function_entry_count'";
                        goto LABEL_372;
                      }
                    }
                    else
                    {
                      if (*v165 != 20)
                        goto LABEL_360;
                      v166 = v165[3];
                      v167 = v165[4];
                      v168 = *((_DWORD *)v165 + 10);
                      v169 = v166 == 0x6E6F6974636E7566 && v167 == 0x635F7972746E655FLL;
                      if (!v169 || v168 != 1953396079)
                        goto LABEL_360;
                    }
                    if ((v159 & 2) != 0)
                      v180 = (char *)*((_QWORD *)v157 - 4);
                    else
                      v180 = &v158[-8 * ((v159 >> 2) & 0xF)];
                    v181 = (_BYTE *)*((_QWORD *)v180 + 1);
                    if (!v181)
                    {
                      v183 = "second operand should not be null";
                      goto LABEL_372;
                    }
                    if (*v181 != 1)
                    {
                      v183 = "expected integer argument to function_entry_count";
LABEL_372:
                      v241 = v183;
                      v245[0] = 259;
                      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (unsigned __int8 **)&v246);
LABEL_373:
                      if ((*((_WORD *)a2 + 9) & 8) != 0)
                      {
                        v184 = *((_DWORD *)a2 + 5);
                        v185 = (v184 & 0x40000000) != 0
                             ? (llvm::Value **)*((_QWORD *)a2 - 1)
                             : (llvm::Value **)((char *)a2 - 32 * (v184 & 0x7FFFFFF));
                        v186 = llvm::Value::stripPointerCasts(*v185);
                        v187 = *((_BYTE *)v186 + 16) ? 0 : v186;
                        v246 = v187;
                        if (v187)
                        {
                          v188 = *((_QWORD *)v187 + 5);
                          if (v188 != *((_QWORD *)a2 + 5))
                          {
                            v240 = (const llvm::Value *)*((_QWORD *)a2 + 5);
                            v241 = "Referencing personality function in another module!";
                            v245[0] = 259;
                            v237[0] = (unsigned __int8 *)a2;
                            v239 = (llvm::Instruction *)v188;
                            llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::Module const*,llvm::Function*,llvm::Module*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)v237, (uint64_t *)&v240, &v246, (uint64_t *)&v239);
                            goto LABEL_489;
                          }
                        }
                      }
                      llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::clear((unsigned int *)this + 226);
                      if ((*((_BYTE *)a2 + 35) & 1) != 0)
                      {
                        if ((_DWORD)v251)
                        {
                          v241 = "unmaterialized function cannot have metadata";
                          v245[0] = 259;
                          v246 = a2;
                          v237[0] = v250[1];
                          llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v246, v237);
                          goto LABEL_489;
                        }
                        goto LABEL_434;
                      }
                      if (*((_BYTE *)a2 + 16) == 3)
                      {
                        if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
                          goto LABEL_387;
                      }
                      else if (!*((_BYTE *)a2 + 16) && *(char **)v236 == v236)
                      {
LABEL_387:
                        if ((_DWORD)v251)
                        {
                          v190 = 16 * v251;
                          v191 = (char *)(v250 + 1);
                          do
                          {
                            v192 = *((_DWORD *)v191 - 2);
                            if (v192)
                            {
                              if (v192 == 2)
                              {
                                v194 = "function declaration may not have a !prof attachment";
LABEL_401:
                                v241 = v194;
                                v245[0] = 259;
                                v246 = a2;
                                llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v246);
LABEL_489:
                                if (v250 != (unsigned __int8 **)&v252)
                                  free(v250);
LABEL_482:
                                v4 = v236;
LABEL_70:
                                v35 = (char *)*((_QWORD *)a2 + 10);
                                if (v35 != v4)
                                {
                                  while (2)
                                  {
                                    v36 = (char *)*((_QWORD *)v35 + 1);
                                    if (v35)
                                      v37 = v35 - 24;
                                    else
                                      v37 = 0;
                                    llvm::SmallPtrSetImplBase::clear((_anonymous_namespace_::Verifier *)((char *)this + 272));
                                    v39 = v37 + 40;
                                    v38 = (char *)*((_QWORD *)v37 + 5);
                                    if (v38 == v37 + 40
                                      || (v38 ? (v40 = v38 - 24) : (v40 = 0),
                                          v40[16] - 29 >= 0xB))
                                    {
                                      v241 = "Basic Block does not have terminator!";
                                      v245[0] = 259;
                                      v250 = (unsigned __int8 **)v37;
                                      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250);
                                    }
                                    else
                                    {
                                      v41 = (_QWORD *)*((_QWORD *)v37 + 6);
                                      v42 = v41 - 3;
                                      if (!v41)
                                        v42 = 0;
                                      if (*((_BYTE *)v42 + 16) != 83)
                                        goto LABEL_163;
                                      for (j = *((_QWORD *)v37 + 1); j; j = *(_QWORD *)(j + 8))
                                      {
                                        v44 = *(_QWORD *)(j + 24);
                                        v45 = *(unsigned __int8 *)(v44 + 16);
                                        if (v44)
                                          v46 = v45 >= 0x1C;
                                        else
                                          v46 = 0;
                                        if (v46 && v45 - 29 < 0xB)
                                          break;
                                      }
                                      v250 = (unsigned __int8 **)&v252;
                                      v251 = 0x800000000;
                                      llvm::SmallVectorImpl<llvm::BasicBlock *>::append<llvm::PredIterator<llvm::BasicBlock,llvm::Value::user_iterator_impl<llvm::User>>,void>((uint64_t)&v250, j, 0);
                                      v241 = &v243;
                                      v242 = 0x800000000;
                                      if (v251 >= 2)
                                        qsort(v250, v251, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::BasicBlock *>);
                                      if ((_QWORD *)*v39 == v39)
                                      {
                                        v51 = 1;
                                        goto LABEL_142;
                                      }
                                      v48 = *((_QWORD *)v37 + 6);
                                      v49 = v48 - 24;
                                      if (v48)
                                        v50 = v48 - 24;
                                      else
                                        v50 = 0;
                                      v51 = 1;
                                      if (v48 && *(_BYTE *)(v50 + 16) == 83)
                                      {
                                        while (1)
                                        {
                                          v52 = *(_DWORD *)(v49 + 20) & 0x7FFFFFF;
                                          if (v251 != v52)
                                          {
                                            v246 = (llvm::User *)"PHINode should have one entry for each predecessor of i"
                                                                 "ts parent basic block!";
                                            v249 = 259;
                                            llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v246);
                                            if (*(_QWORD *)this)
                                              llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (const llvm::Value *)v49);
                                            v51 = 0;
                                            goto LABEL_142;
                                          }
                                          LODWORD(v242) = 0;
                                          if (HIDWORD(v242) < v52)
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v241, &v243, v52, 16);
                                            v52 = *(_DWORD *)(v49 + 20) & 0x7FFFFFF;
                                          }
                                          if (v52)
                                          {
                                            v53 = 0;
                                            v54 = 0;
                                            v55 = 8 * v52;
                                            do
                                            {
                                              v56 = *(_DWORD *)(v49 + 20);
                                              if ((v56 & 0x40000000) != 0)
                                                v57 = *(_QWORD *)(v49 - 8);
                                              else
                                                v57 = v49 - 32 * (v56 & 0x7FFFFFF);
                                              llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v241, *(_QWORD *)(v57 + 32 * *(unsigned int *)(v49 + 60) + v54), *(_QWORD *)(v57 + v53));
                                              v54 += 8;
                                              v53 += 32;
                                            }
                                            while (v55 != v54);
                                          }
                                          v58 = 126 - 2 * __clz(v242);
                                          v59 = (_DWORD)v242 ? v58 : 0;
                                          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>((unint64_t)v241, (unint64_t *)v241 + 2 * v242, v59, 1);
                                          if ((_DWORD)v242)
                                            break;
LABEL_121:
                                          v64 = *(_QWORD *)(v49 + 32);
                                          v49 = v64 - 24;
                                          if (v64)
                                            v65 = v64 - 24;
                                          else
                                            v65 = 0;
                                          v51 = 1;
                                          if (!v64 || *(_BYTE *)(v65 + 16) != 83)
                                            goto LABEL_142;
                                        }
                                        v60 = 0;
                                        v61 = (char *)v241;
                                        v62 = (const llvm::Value **)v250;
                                        while (1)
                                        {
                                          if (v60)
                                          {
                                            v63 = *(const llvm::Value **)((char *)v241 + v60);
                                            if (v63 == *(const llvm::Value **)((char *)v241 + v60 - 16)
                                              && *(_QWORD *)((char *)v241 + v60 + 8) != *(_QWORD *)((char *)v241
                                                                                                  + v60
                                                                                                  - 8))
                                            {
                                              v246 = (llvm::User *)"PHI node has multiple entries for the same basic bloc"
                                                                   "k with different incoming values!";
                                              v249 = 259;
                                              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v246);
                                              if (*(_QWORD *)this)
                                              {
                                                llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (const llvm::Value *)v49);
                                                v71 = *(const llvm::Value **)&v61[v60];
                                                if (v71)
                                                  llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v71);
                                                v72 = &v61[v60];
                                                v73 = (const llvm::Value *)*((_QWORD *)v72 + 1);
                                                if (v73)
                                                  llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v73);
                                                v74 = (const llvm::Value *)*((_QWORD *)v72 - 1);
                                                if (v74)
                                                  llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v74);
                                              }
                                              v51 = 0;
                                              goto LABEL_142;
                                            }
                                          }
                                          else
                                          {
                                            v63 = *(const llvm::Value **)v241;
                                          }
                                          if (v63 != *v62)
                                            break;
                                          ++v62;
                                          v60 += 16;
                                          if (16 * v242 == v60)
                                            goto LABEL_121;
                                        }
                                        v246 = (llvm::User *)"PHI node entries do not match predecessors!";
                                        v249 = 259;
                                        llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v246);
                                        if (*(_QWORD *)this)
                                        {
                                          llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (const llvm::Value *)v49);
                                          v69 = *(const llvm::Value **)&v61[v60];
                                          if (v69)
                                            llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v69);
                                          if (*v62)
                                            llvm::VerifierSupport::Write((llvm::raw_ostream **)this, *v62);
                                        }
                                        v51 = 0;
                                      }
LABEL_142:
                                      if (v241 != &v243)
                                        free(v241);
                                      v4 = v236;
                                      if (v250 != (unsigned __int8 **)&v252)
                                        free(v250);
                                      v41 = (_QWORD *)*((_QWORD *)v37 + 6);
                                      if (v41 == v39)
                                        v70 = 0;
                                      else
                                        v70 = v51;
                                      if ((v70 & 1) != 0)
                                      {
                                        while (1)
                                        {
                                          v75 = v41 - 3;
                                          if (!v41)
                                            v75 = 0;
                                          if ((char *)v75[5] != v37)
                                            break;
                                          v41 = (_QWORD *)v41[1];
LABEL_163:
                                          if (v41 == v39)
                                            goto LABEL_128;
                                        }
                                        v241 = "Instruction has bogus parent pointer!";
                                        v245[0] = 259;
                                        llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v241);
                                      }
                                    }
LABEL_128:
                                    v66 = (_QWORD *)*((_QWORD *)v37 + 6);
                                    if (v66 != v39)
                                    {
                                      do
                                      {
                                        v67 = (_QWORD *)v66[1];
                                        if (v66)
                                          v68 = (llvm::Instruction *)(v66 - 3);
                                        else
                                          v68 = 0;
                                        v66 = v67;
                                      }
                                      while (v67 != v39);
                                    }
                                    v35 = v36;
                                    if (v36 == v4)
                                      break;
                                    continue;
                                  }
                                }
                                v241 = v245;
                                v242 = (uint64_t)v245;
                                v243 = 8;
                                v244 = 0;
                                v250 = (unsigned __int8 **)v254;
                                v251 = (uint64_t)v254;
                                v252 = 8;
                                v253 = 0;
                                v76 = (_QWORD *)((char *)this + 856);
                                v77 = (const llvm::Value **)*((_QWORD *)this + 110);
                                v78 = (const llvm::Value **)*((_QWORD *)this + 111);
                                while (1)
                                {
                                  if (v77 == v78)
                                    goto LABEL_196;
                                  v240 = *v77;
                                  imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v241, v240);
                                  v80 = (void *)v242 == v241 ? (uint64_t *)((char *)&v243 + 4) : &v243;
                                  if (imp == (const void **)(v242 + 8 * *(unsigned int *)v80))
                                    break;
LABEL_183:
                                  v77 += 2;
                                }
                                llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v250, v240, (uint64_t)&v246);
                                for (k = v77[1]; ; k = v86)
                                {
                                  SuccPad = (void *)getSuccPad(k);
                                  v83 = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v250, SuccPad);
                                  v84 = (unsigned __int8 **)v251 == v250 ? (uint64_t *)((char *)&v252 + 4) : &v252;
                                  if (v83 != (const void **)(v251 + 8 * *(unsigned int *)v84))
                                    break;
                                  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v241, SuccPad, (uint64_t)&v246);
                                  if (!LOBYTE(v248[0])
                                    || (v240 = (const llvm::Value *)SuccPad,
                                        v85 = llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::find((uint64_t)this + 856, (uint64_t *)&v240), *((_QWORD *)this + 111) == v85))
                                  {
                                    llvm::SmallPtrSetImplBase::clear((llvm::SmallPtrSetImplBase *)&v250);
                                    goto LABEL_183;
                                  }
                                  v86 = *(llvm::Instruction **)(v85 + 8);
                                  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v250, v240, (uint64_t)&v246);
                                }
                                v239 = (llvm::Instruction *)SuccPad;
                                v246 = (llvm::User *)v248;
                                v247 = 0x800000000;
                                v87 = (uint64_t)SuccPad;
                                do
                                {
                                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v246, v87);
                                  v88 = (llvm::Instruction **)llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[]((_QWORD *)this + 107, (uint64_t *)&v239);
                                  v89 = *v88;
                                  if (*v88 != v239)
                                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v246, (uint64_t)v89);
                                  v87 = getSuccPad(v89);
                                  v239 = (llvm::Instruction *)v87;
                                }
                                while ((void *)v87 != SuccPad);
                                v237[0] = "EH pads can't handle each other's exceptions";
                                v238 = 259;
                                v90 = (const llvm::Value **)v246;
                                v91 = v247;
                                llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v237);
                                if (*(_QWORD *)this && (_DWORD)v91)
                                {
                                  v92 = 8 * v91;
                                  do
                                  {
                                    if (*v90)
                                      llvm::VerifierSupport::Write((llvm::raw_ostream **)this, *v90);
                                    ++v90;
                                    v92 -= 8;
                                  }
                                  while (v92);
                                }
                                if (v246 != (llvm::User *)v248)
                                  free(v246);
LABEL_196:
                                if ((unsigned __int8 **)v251 != v250)
                                  free((void *)v251);
                                if ((void *)v242 != v241)
                                  free((void *)v242);
                                llvm::SmallPtrSetImplBase::clear((_anonymous_namespace_::Verifier *)((char *)this + 272));
                                *((_DWORD *)this + 462) = 0;
                                *((_QWORD *)this + 99) = 0;
                                *((_BYTE *)this + 800) = 0;
                                v93 = *((_DWORD *)this + 216);
                                if (v93)
                                {
                                  v94 = *((_DWORD *)this + 218);
                                  if (v94 > 4 * v93 && v94 >= 0x41)
                                  {
                                    v95 = 1 << (33 - __clz(v93 - 1));
                                    if (v95 <= 64)
                                      v96 = 64;
                                    else
                                      v96 = v95;
                                    goto LABEL_209;
                                  }
LABEL_213:
                                  if (v94)
                                  {
                                    v99 = (_QWORD *)*v76;
                                    v100 = 16 * v94;
                                    do
                                    {
                                      *v99 = -4096;
                                      v99 += 2;
                                      v100 -= 16;
                                    }
                                    while (v100);
                                  }
                                  *((_QWORD *)this + 108) = 0;
                                }
                                else if (*((_DWORD *)this + 217))
                                {
                                  v94 = *((_DWORD *)this + 218);
                                  if (v94 <= 0x40)
                                    goto LABEL_213;
                                  v96 = 0;
LABEL_209:
                                  if (v96 == v94)
                                  {
                                    *((_QWORD *)this + 108) = 0;
                                    v97 = (_QWORD *)*((_QWORD *)this + 107);
                                    v98 = 16 * v94;
                                    do
                                    {
                                      *v97 = -4096;
                                      v97 += 2;
                                      v98 -= 16;
                                    }
                                    while (v98);
                                  }
                                  else
                                  {
                                    MEMORY[0x24BD1B398](*v76, 8);
                                    if (v96)
                                    {
                                      v137 = (4 * v96 / 3u + 1) | ((unint64_t)(4 * v96 / 3u + 1) >> 1);
                                      v138 = v137 | (v137 >> 2) | ((v137 | (v137 >> 2)) >> 4);
                                      LODWORD(v138) = (((v138 | (v138 >> 8)) >> 16) | v138 | (v138 >> 8)) + 1;
                                      *((_DWORD *)this + 218) = v138;
                                      v139 = operator new(16 * v138, (std::align_val_t)8uLL);
                                      *((_QWORD *)this + 107) = v139;
                                      *((_QWORD *)this + 108) = 0;
                                      v140 = *((unsigned int *)this + 218);
                                      if ((_DWORD)v140)
                                      {
                                        v141 = 16 * v140;
                                        do
                                        {
                                          *v139 = -4096;
                                          v139 += 2;
                                          v141 -= 16;
                                        }
                                        while (v141);
                                      }
                                    }
                                    else
                                    {
                                      *v76 = 0;
                                      *((_QWORD *)this + 108) = 0;
                                      *((_DWORD *)this + 218) = 0;
                                    }
                                  }
                                }
                                *((_QWORD *)this + 111) = *((_QWORD *)this + 110);
                                v101 = *((unsigned int *)this + 512);
                                if (!(_DWORD)v101)
                                  goto LABEL_270;
                                v102 = (const llvm::Value **)*((_QWORD *)this + 255);
                                v103 = 8 * v101;
                                while (1)
                                {
                                  v250 = (unsigned __int8 **)*v102;
                                  v104 = v250[-4 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF)];
                                  v105 = v104 && v104[16] == 23;
                                  if (!v105)
                                    break;
                                  v106 = (_BYTE *)*((_QWORD *)v104 + 3);
                                  v107 = llvm::MDNode::classof(v106);
                                  if (!v106 || (v107 & 1) == 0)
                                  {
                                    v142 = "!id.scope.list must point to an MDNode";
                                    goto LABEL_269;
                                  }
                                  v108 = *((_QWORD *)v106 - 2);
                                  if ((v108 & 2) != 0)
                                    v109 = *((_DWORD *)v106 - 6);
                                  else
                                    v109 = (v108 >> 6) & 0xF;
                                  if (v109 != 1)
                                  {
                                    v142 = "!id.scope.list must point to a list with a single scope";
                                    goto LABEL_269;
                                  }
                                  ++v102;
                                  v103 -= 8;
                                  if (!v103)
                                  {
                                    if (byte_257965138)
                                    {
                                      v110 = *((unsigned int *)this + 512);
                                      v111 = 126 - 2 * __clz(v110);
                                      v112 = (_DWORD)v110 ? v111 : 0;
                                      v113 = *((unsigned int *)this + 512);
                                      if ((_DWORD)v113)
                                      {
                                        v114 = (const llvm::Value **)*((_QWORD *)this + 255);
                                        v115 = &v114[v113];
                                        v116 = v114;
                                        do
                                        {
                                          v117 = v116;
                                          v118 = *(_QWORD *)(*((_QWORD *)*v116 - 4
                                                                               * (*((_DWORD *)*v116 + 5) & 0x7FFFFFF))
                                                           + 24);
                                          v121 = *(_QWORD *)(v118 - 16);
                                          v119 = v118 - 16;
                                          v120 = v121;
                                          if ((v121 & 2) != 0)
                                            v122 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v116
                                                                           - 4 * (*((_DWORD *)*v116 + 5) & 0x7FFFFFF))
                                                                         + 24)
                                                             - 32);
                                          else
                                            v122 = v119 - 8 * ((v120 >> 2) & 0xF);
                                          v123 = v116 + 1;
                                          v124 = 8;
                                          while (1)
                                          {
                                            v125 = v123;
                                            v126 = v124;
                                            if (v123 == v115)
                                              break;
                                            v127 = *(_QWORD *)(*((_QWORD *)*v123
                                                               - 4 * (*((_DWORD *)*v123 + 5) & 0x7FFFFFF))
                                                             + 24);
                                            v130 = *(_QWORD *)(v127 - 16);
                                            v128 = v127 - 16;
                                            v129 = v130;
                                            if ((v130 & 2) != 0)
                                              v131 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v123
                                                                             - 4 * (*((_DWORD *)*v123 + 5) & 0x7FFFFFF))
                                                                           + 24)
                                                               - 32);
                                            else
                                              v131 = v128 - 8 * ((v129 >> 2) & 0xF);
                                            ++v123;
                                            v124 = v126 + 8;
                                            if (v131 != v122)
                                            {
                                              v116 = v125;
                                              goto LABEL_248;
                                            }
                                          }
                                          v116 = v115;
LABEL_248:
                                          if (v116 != v117 && (char *)v116 - (char *)v117 <= 255)
                                          {
                                            v132 = v125 - 1;
                                            v133 = v117;
                                            while (2)
                                            {
                                              v250 = 0;
                                              v134 = *v133;
                                              v250 = (unsigned __int8 **)*v133;
                                              v135 = v126;
                                              v136 = v117;
                                              do
                                              {
                                                if (v134 != *v136
                                                  && llvm::DominatorTree::dominates((_anonymous_namespace_::Verifier *)((char *)this + 200), v134, *v136))
                                                {
                                                  v142 = "llvm.experimental.noalias.scope.decl dominates another one with the same scope";
                                                  goto LABEL_269;
                                                }
                                                ++v136;
                                                v135 -= 8;
                                              }
                                              while (v135);
                                              v105 = v132 == v133++;
                                              if (!v105)
                                                continue;
                                              break;
                                            }
                                            v114 = (const llvm::Value **)*((_QWORD *)this + 255);
                                            v113 = *((unsigned int *)this + 512);
                                          }
                                          v115 = &v114[v113];
                                        }
                                        while (v116 != v115);
                                      }
                                    }
LABEL_270:
                                    *((_DWORD *)this + 512) = 0;
                                    return *((_BYTE *)this + 192) == 0;
                                  }
                                }
                                v142 = "llvm.experimental.noalias.scope.decl must have a MetadataAsValue argument";
LABEL_269:
                                v241 = v142;
                                v245[0] = 259;
                                llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250);
                                goto LABEL_270;
                              }
                              v193 = *(_QWORD **)v191;
                            }
                            else
                            {
                              v193 = *(_QWORD **)v191;
                              if ((*(_BYTE *)(*(_QWORD *)v191 + 1) & 0x7F) == 1)
                              {
                                v241 = "function declaration may only have a unique !dbg attachment";
                                v245[0] = 259;
                                v246 = a2;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v246);
                                goto LABEL_489;
                              }
                            }
                            v191 += 16;
                            v190 -= 16;
                          }
                          while (v190);
                        }
                        if ((*((_WORD *)a2 + 9) & 8) != 0)
                        {
                          v194 = "Function declaration shouldn't have a personality routine";
                          goto LABEL_401;
                        }
                        goto LABEL_434;
                      }
                      if ((v22 & 0x2000) != 0)
                      {
                        v194 = "llvm intrinsics cannot be defined!";
                        goto LABEL_401;
                      }
                      v195 = *((_QWORD *)a2 + 10);
                      if (v195)
                        v196 = v195 - 24;
                      else
                        v196 = 0;
                      v246 = (llvm::User *)v196;
                      v197 = *(_QWORD *)(v196 + 8);
                      if (v197)
                      {
                        while (1)
                        {
                          v198 = *(_QWORD *)(v197 + 24);
                          v199 = *(unsigned __int8 *)(v198 + 16);
                          v200 = v198 && v199 >= 0x1C;
                          if (v200 && v199 - 29 < 0xB)
                            break;
                          v197 = *(_QWORD *)(v197 + 8);
                          if (!v197)
                            goto LABEL_415;
                        }
                        v233 = "Entry block to function must not have predecessors!";
LABEL_479:
                        v241 = v233;
                        v245[0] = 259;
                        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v246);
                        goto LABEL_489;
                      }
LABEL_415:
                      if ((*(_WORD *)(v196 + 18) & 0x7FFF) != 0)
                      {
                        v202 = (llvm::Constant *)llvm::BlockAddress::lookup((llvm::BlockAddress *)v196, v189);
                        if (llvm::Constant::isConstantUsed(v202))
                        {
                          v233 = "blockaddress may not be used with the entry block!";
                          goto LABEL_479;
                        }
                      }
                      if ((_DWORD)v251)
                      {
                        v203 = 0;
                        v204 = 0;
                        v205 = 0;
                        v206 = (char *)&v250[2 * v251];
                        v207 = v250 + 1;
                        do
                        {
                          v209 = v207 - 1;
                          v208 = *((_DWORD *)v207 - 2);
                          switch(v208)
                          {
                            case 36:
                              if (v203)
                              {
                                v235 = "function must have a single !kcfi_type attachment";
LABEL_494:
                                v241 = v235;
                                v245[0] = 259;
                                v237[0] = (unsigned __int8 *)a2;
                                llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)v237, v207);
                                goto LABEL_489;
                              }
                              v203 = 1;
                              break;
                            case 2:
                              if (v204)
                              {
                                v235 = "function must have a single !prof attachment";
                                goto LABEL_494;
                              }
                              v204 = 1;
                              break;
                            case 0:
                              if (v205)
                              {
                                v234 = "function must have a single !dbg attachment";
LABEL_496:
                                v241 = v234;
                                v245[0] = 259;
                                v237[0] = (unsigned __int8 *)a2;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)v237, v207);
                                goto LABEL_489;
                              }
                              if (**v207 != 17)
                              {
                                v234 = "function !dbg attachment must be a subprogram";
                                goto LABEL_496;
                              }
                              if (((*v207)[1] & 0x7F) != 1)
                              {
                                v241 = "function definition may only have a distinct !dbg attachment";
                                v245[0] = 259;
                                v237[0] = (unsigned __int8 *)a2;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)v237);
                                goto LABEL_489;
                              }
                              v237[0] = *v207;
                              v210 = llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>,llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>::FindAndConstruct((uint64_t)this + 720, (uint64_t *)v237);
                              v211 = (const llvm::Function *)v210[1];
                              if (v211 && v211 != a2)
                              {
                                v240 = a2;
                                v241 = "DISubprogram attached to more than one function";
                                v245[0] = 259;
                                llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, v237, &v240);
                                goto LABEL_489;
                              }
                              v210[1] = (uint64_t)a2;
                              v205 = 1;
                              break;
                          }
                          v212 = *v207;
                          v207 += 2;
                        }
                        while (v209 + 2 != (unsigned __int8 **)v206);
                      }
LABEL_434:
                      if ((*((_BYTE *)a2 + 33) & 0x20) != 0 && !*(_QWORD *)(*((_QWORD *)a2 + 5) + 152))
                      {
                        v246 = 0;
                        if (llvm::Function::hasAddressTaken(a2, &v246, 0, 1, 0, 1))
                        {
                          v241 = "Invalid user of intrinsic instruction!";
                          v245[0] = 259;
                          llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, &v246);
                          goto LABEL_489;
                        }
                      }
                      v213 = *((_DWORD *)a2 + 9);
                      if (v213 == 122)
                      {
                        v217 = *((_QWORD *)a2 + 3);
                        if (*(_DWORD *)(v217 + 12) == 2)
                        {
                          v218 = *(_QWORD **)(v217 + 16);
                          if (*(_BYTE *)(v218[1] + 8) != 15)
                          {
                            v216 = "gc.get.pointer.offset operand must be a pointer";
                            goto LABEL_488;
                          }
                          if (*(_BYTE *)(*v218 + 8) != 13)
                          {
                            v216 = "gc.get.pointer.offset must return integer";
                            goto LABEL_488;
                          }
                          goto LABEL_447;
                        }
                      }
                      else
                      {
                        if (v213 != 121)
                          goto LABEL_447;
                        v214 = *((_QWORD *)a2 + 3);
                        if (*(_DWORD *)(v214 + 12) == 2)
                        {
                          v215 = *(_QWORD **)(v214 + 16);
                          if (*(_BYTE *)(*v215 + 8) != 15)
                          {
                            v216 = "gc.get.pointer.base must return a pointer";
                            goto LABEL_488;
                          }
                          if (v215[1] != *v215)
                          {
                            v216 = "gc.get.pointer.base operand and result must be of the same type";
LABEL_488:
                            v241 = v216;
                            v245[0] = 259;
                            llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, a2);
                            goto LABEL_489;
                          }
LABEL_447:
                          Metadata = (unsigned __int8 *)llvm::Value::getMetadata(a2, 0);
                          v237[0] = Metadata;
                          *((_BYTE *)this + 801) = Metadata != 0;
                          if (Metadata)
                          {
                            v241 = v245;
                            v242 = (uint64_t)v245;
                            v243 = 32;
                            v244 = 0;
                            v246 = (llvm::User *)&v241;
                            v247 = (uint64_t)this;
                            v248[0] = v237;
                            v248[1] = a2;
                            for (m = (char *)*((_QWORD *)a2 + 10); m != v236; m = (char *)*((_QWORD *)m + 1))
                            {
                              v221 = m - 24;
                              if (!m)
                                v221 = 0;
                              v222 = v221 + 40;
                              for (n = (_QWORD *)*((_QWORD *)v221 + 6); n != v222; n = (_QWORD *)n[1])
                              {
                                if (n)
                                  v224 = (const llvm::Value *)(n - 3);
                                else
                                  v224 = 0;
                                if (*((_QWORD *)v224 + 6) || (*((_BYTE *)v224 + 23) & 0x20) != 0)
                                {
                                  v225 = llvm::Value::getMetadata(v224, 18);
                                  if (v225)
                                  {
                                    v226 = v225;
                                    v227 = (unint64_t *)(v225 - 16);
                                    for (ii = 1; ; ++ii)
                                    {
                                      v229 = *v227;
                                      if ((*v227 & 2) != 0)
                                      {
                                        if (ii >= *(unsigned int *)(v226 - 24))
                                          break;
                                        v230 = *(unint64_t **)(v226 - 32);
                                      }
                                      else
                                      {
                                        if (ii >= ((v229 >> 6) & 0xF))
                                          break;
                                        v230 = &v227[-((v229 >> 2) & 0xF)];
                                      }
                                      v231 = (unsigned __int8 *)v230[ii];
                                      if (v231)
                                      {
                                        if (llvm::MDNode::classof((_BYTE *)v230[ii]))
                                          v232 = v231;
                                        else
                                          v232 = 0;
                                      }
                                      else
                                      {
                                        v232 = 0;
                                      }
                                    }
                                  }
                                }
                                if (*((_BYTE *)this + 193))
                                  goto LABEL_476;
                              }
                            }
LABEL_476:
                            if ((void *)v242 != v241)
                              free((void *)v242);
                          }
                          goto LABEL_489;
                        }
                      }
                      v216 = "wrong number of parameters";
                      goto LABEL_488;
                    }
                  }
                  v155 += 2;
                  v154 -= 16;
                  if (!v154)
                    goto LABEL_373;
                }
              }
              v24 = "Function returns a token but isn't an intrinsic";
            }
            else
            {
              v24 = "Calling convention does not support varargs or perfect forwarding!";
            }
          }
LABEL_481:
          v241 = v24;
          v245[0] = 259;
          v250 = (unsigned __int8 **)a2;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v241, (const llvm::Value **)&v250);
          goto LABEL_482;
        default:
          if ((v23 - 8) < 2)
            goto LABEL_272;
          goto LABEL_282;
      }
    }
    v6 = i ? (const llvm::Value *)(i - 24) : 0;
    v7 = (_QWORD *)*((_QWORD *)v6 + 5);
    if (v7 != (_QWORD *)((char *)v6 + 40))
    {
      v8 = v7 ? (uint64_t)(v7 - 3) : 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 < 0xB)
        continue;
    }
    break;
  }
  v10 = *(llvm::raw_ostream **)this;
  if (*(_QWORD *)this)
  {
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0x18uLL)
    {
      qmemcpy(v11, "Basic Block in function '", 25);
      *((_QWORD *)v10 + 4) += 25;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "Basic Block in function '", 0x19uLL);
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      ValueName = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
      v13 = ValueName + 2;
      v12 = *ValueName;
    }
    else
    {
      v12 = 0;
      v13 = &str_3_26;
    }
    v15 = llvm::raw_ostream::operator<<(v10, v13, v12);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0x1BuLL)
    {
      qmemcpy(v16, "' does not have terminator!\n", 28);
      *((_QWORD *)v15 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(v15, "' does not have terminator!\n", 0x1CuLL);
    }
    printAsOperandImpl(v6, *(llvm::raw_ostream **)this, 1, (_anonymous_namespace_::Verifier *)((char *)this + 16));
    v17 = *(_QWORD *)this;
    v18 = *(_BYTE **)(*(_QWORD *)this + 32);
    if (*(_BYTE **)(*(_QWORD *)this + 24) != v18)
    {
      result = 0;
      *v18 = 10;
      ++*(_QWORD *)(v17 + 32);
      return result;
    }
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "\n", 1uLL);
  }
  return 0;
}

void `anonymous namespace'::Verifier::~Verifier(_anonymous_namespace_::Verifier *this)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;

  v2 = (char *)*((_QWORD *)this + 255);
  if (v2 != (char *)this + 2056)
    free(v2);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 252), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 249), 8);
  v3 = (char *)*((_QWORD *)this + 230);
  if (v3 != (char *)this + 1856)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 195);
  if (v4 != *((void **)this + 194))
    free(v4);
  v5 = (void *)*((_QWORD *)this + 159);
  if (v5 != *((void **)this + 158))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 152);
  if (v6 != (char *)this + 1232)
    free(v6);
  v7 = (void *)*((_QWORD *)this + 117);
  if (v7 != *((void **)this + 116))
    free(v7);
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll((uint64_t *)this + 113);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 113), 8);
  v8 = (void *)*((_QWORD *)this + 110);
  if (v8)
  {
    *((_QWORD *)this + 111) = v8;
    operator delete(v8);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 107), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 104), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 101), 8);
  v9 = (void *)*((_QWORD *)this + 94);
  if (v9 != *((void **)this + 93))
    free(v9);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 90), 8);
  v10 = (void *)*((_QWORD *)this + 55);
  if (v10 != *((void **)this + 54))
    free(v10);
  v11 = (void *)*((_QWORD *)this + 35);
  if (v11 != *((void **)this + 34))
    free(v11);
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((unsigned int *)this + 56);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 28), 8);
  v12 = (char *)*((_QWORD *)this + 25);
  if (v12 != (char *)this + 216)
    free(v12);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  llvm::ModuleSlotTracker::~ModuleSlotTracker((_anonymous_namespace_::Verifier *)((char *)this + 16));
}

uint64_t llvm::verifyModule(llvm *this, const llvm::Module *a2, llvm::raw_ostream *a3, BOOL *a4)
{
  char *v6;
  uint64_t v7;
  int v8;
  const llvm::Function *v9;
  BOOL v10;
  _BYTE v12[2088];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)this + 24;
  v7 = *((_QWORD *)this + 4);
  if ((char *)v7 == v6)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (v7)
        v9 = (const llvm::Function *)(v7 - 56);
      else
        v9 = 0;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while ((char *)v7 != v6);
  }
  if (a3)
    *(_BYTE *)a3 = v12[193];
  return v8 & 1 | !v10;
}

BOOL `anonymous namespace'::Verifier::verify(_anonymous_namespace_::Verifier *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD ***v13;
  llvm::Constant *v14;
  char *v15;
  uint64_t ValueName;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  std::string *v33;
  std::string::size_type v34;
  unsigned __int8 **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void **v46;
  unint64_t v47;
  unint64_t *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const llvm::Value *v53;
  const llvm::Value *v54;
  char v55;
  const void *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const llvm::Value *v61;
  const llvm::Value *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  int v68;
  BOOL v69;
  char v70;
  char v71;
  uint64_t v72;
  void *v73;
  _QWORD **v74;
  _QWORD *v75;
  int v76;
  llvm::PointerType **v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD **v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  llvm::Value **v90;
  uint64_t v91;
  unsigned __int8 *v92;
  unsigned int v93;
  void *v95;
  char v96;
  void **v97;
  void **v98;
  void *v99;
  std::string *v100;
  char v101;
  void *v102;
  char v103;
  void **v104;
  void **v105;
  void *v106;
  char v107;
  std::string *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  int v113;
  BOOL v114;
  int v115;
  uint64_t v119;
  unsigned int v120;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unsigned int v128;
  BOOL v129;
  int v130;
  llvm::Value *v132;
  BOOL v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t **v137;
  llvm::PointerType **v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t **v142;
  int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  BOOL v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  char v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  llvm::Value *v185;
  llvm::Value *v186;
  unsigned int v187;
  uint64_t v189;
  uint64_t v190;
  BOOL v191;
  uint64_t v192;
  _QWORD *i;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  BOOL v199;
  uint64_t NamedMetadata;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  uint64_t *v208;
  char isValidModFlagBehavior;
  unint64_t v210;
  unint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t *v214;
  uint64_t v215;
  const char *v216;
  unsigned __int8 **v217;
  unint64_t *v218;
  const char *v219;
  unsigned int v220;
  _QWORD *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t v224;
  unint64_t *v226;
  unint64_t *v227;
  unint64_t *v228;
  unint64_t *v229;
  unint64_t *v230;
  _BYTE *v231;
  int v232;
  BOOL v233;
  unint64_t v234;
  unsigned __int8 **v235;
  unint64_t v236;
  const char *v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  unsigned int v241;
  unsigned int v242;
  llvm::Module *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  BOOL v248;
  unint64_t *v250;
  unsigned __int8 **v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  unint64_t *v256;
  const char *v257;
  unint64_t v258;
  unint64_t v259;
  unsigned __int8 **v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 *v263;
  unint64_t v264;
  unsigned __int8 *v265;
  unsigned __int8 **v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  llvm::raw_ostream **v269;
  unsigned __int8 **v270;
  llvm::Value **v271;
  unsigned __int8 **v272;
  llvm::Value **v273;
  unint64_t v274;
  unsigned __int8 *v275;
  uint64_t v276;
  unsigned __int8 *v277;
  unint64_t v278;
  int v279;
  uint64_t *v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  unint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  llvm::Module *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void **v294;
  char *v295;
  char *v296;
  unint64_t v297;
  char *v298;
  _BYTE *v299;
  uint64_t v300;
  unsigned __int8 **v301;
  llvm::Module *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void **v306;
  char *v307;
  char *v308;
  unint64_t v309;
  char *v310;
  _BYTE *v311;
  unsigned __int8 **v312;
  llvm::Module *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  std::string::size_type *v323;
  std::string::size_type *v324;
  const void **imp;
  uint64_t *v326;
  uint64_t v327;
  const llvm::Value **v328;
  const llvm::Value **v329;
  const llvm::Value *v330;
  const llvm::Value *v331;
  unsigned __int16 v332;
  uint64_t v333;
  const llvm::Value *v334;
  _QWORD *v335;
  int v336;
  unsigned int v337;
  int v338;
  int v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v345;
  unint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::string::size_type v353;
  const llvm::Value *v354;
  int v355;
  int v356;
  __int16 v357;
  __int128 v358;
  void *__p[2];
  __int128 v360;
  __int16 v361;
  int v362;
  __int16 v363;
  std::string v364;
  __int16 v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  _WORD v370[56];
  uint64_t v371;

  v371 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 192) = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = v4 - 56;
      else
        v5 = 0;
      if (*(_DWORD *)(v5 + 36) == 120)
      {
        v6 = *((unsigned int *)this + 306);
        if (v6 >= *((unsigned int *)this + 307))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1216, (char *)this + 1232, v6 + 1, 8);
          v6 = *((unsigned int *)this + 306);
        }
        *(_QWORD *)(*((_QWORD *)this + 152) + 8 * v6) = v5;
        ++*((_DWORD *)this + 306);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  if (*((_DWORD *)this + 210))
  {
    v7 = *((unsigned int *)this + 212);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = *((_QWORD *)this + 104);
      while ((*(_QWORD *)v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v9 += 16;
        v8 -= 16;
        if (!v8)
          goto LABEL_15;
      }
    }
    else
    {
      v9 = *((_QWORD *)this + 104);
    }
    v300 = *((_QWORD *)this + 104) + 16 * v7;
LABEL_657:
    if (v9 != v300)
    {
      __p[0] = 0;
      __p[0] = *(void **)v9;
      if (*(_DWORD *)(v9 + 12) > *(_DWORD *)(v9 + 8))
      {
        v366 = "all indices passed to llvm.localrecover must be less than the number of arguments passed to llvm.localesc"
               "ape in the parent function";
        v370[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (const llvm::Value **)__p);
      }
      else
      {
        while (1)
        {
          v9 += 16;
          if (v9 == v300)
            break;
          if ((*(_QWORD *)v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_657;
        }
      }
    }
  }
LABEL_15:
  v10 = *((_QWORD *)this + 1);
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v10 + 16);
  if (v12 != v10 + 8)
  {
    v351 = v10 + 8;
    while (1)
    {
      if (v12)
        v13 = (_QWORD ***)(v12 - 56);
      else
        v13 = 0;
      if (v12 && *((_BYTE *)v13 + 16) == 3)
      {
        if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_35;
      }
      else if (!*((_BYTE *)v13 + 16) && v13[9] == v13 + 9 && (*((_BYTE *)v13 + 35) & 1) == 0)
      {
        goto LABEL_35;
      }
      v14 = (llvm::Constant *)*(v13 - 4);
      if (*(_QWORD ***)v14 != v13[3])
      {
        v15 = "Global variable initializer type does not match global variable type!";
LABEL_29:
        v366 = v15;
        v370[0] = 259;
        __p[0] = v13;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (const llvm::Value **)__p);
        goto LABEL_214;
      }
      if (((_DWORD)v13[4] & 0xF) == 0xA)
      {
        if ((llvm::Constant::isNullValue(v14) & 1) == 0)
        {
          v15 = "'common' global must have a zero initializer!";
          goto LABEL_29;
        }
        if (((_BYTE)v13[10] & 1) != 0)
        {
          v15 = "'common' global may not be marked constant!";
          goto LABEL_29;
        }
        if (v13[6])
        {
          v15 = "'common' global may not be in a Comdat!";
          goto LABEL_29;
        }
      }
LABEL_35:
      if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
        goto LABEL_53;
      ValueName = llvm::Value::getValueName(v13);
      if (*(_QWORD *)ValueName != 17
        || (*(_QWORD *)(ValueName + 16) == 0x6F6C672E6D766C6CLL
          ? (v17 = *(_QWORD *)(ValueName + 24) == 0x726F74635F6C6162)
          : (v17 = 0),
            v17 ? (v18 = *(_BYTE *)(ValueName + 32) == 115) : (v18 = 0),
            !v18))
      {
        if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
          goto LABEL_53;
        v19 = llvm::Value::getValueName(v13);
        if (*(_QWORD *)v19 != 17)
          goto LABEL_53;
        v20 = *(_QWORD *)(v19 + 16) == 0x6F6C672E6D766C6CLL && *(_QWORD *)(v19 + 24) == 0x726F74645F6C6162;
        if (!v20 || *(_BYTE *)(v19 + 32) != 115)
          goto LABEL_53;
      }
      if (v12 && *((_BYTE *)v13 + 16) == 3)
      {
        if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_188;
      }
      else if (!*((_BYTE *)v13 + 16) && v13[9] == v13 + 9 && (*((_BYTE *)v13 + 35) & 1) == 0)
      {
        goto LABEL_188;
      }
      if (((_DWORD)v13[4] & 0xF) != 6)
        goto LABEL_205;
LABEL_188:
      if (v13[1])
        goto LABEL_204;
      v74 = v13[3];
      if (v74 && *((_BYTE *)v74 + 8) == 17)
      {
        v75 = v74[3];
        v76 = *((unsigned __int8 *)v75 + 8);
        v77 = (llvm::PointerType **)llvm::FunctionType::get((uint64_t **)(**((_QWORD **)this + 23) + 1608), 0, 0, 0);
        v78 = llvm::PointerType::get(v77, (llvm::Type *)*(unsigned int *)(*((_QWORD *)this + 22) + 12));
        if (!v75)
          goto LABEL_225;
        if (v76 != 16)
          goto LABEL_225;
        v79 = *((_DWORD *)v75 + 3);
        if ((v79 & 0xFFFFFFFE) != 2)
          goto LABEL_225;
        v80 = (_QWORD *)v75[2];
        if (*(_DWORD *)(*v80 + 8) != 8205 || v80[1] != v78)
          goto LABEL_225;
        if (v79 != 3)
        {
          v366 = "the third field of the element type is mandatory, specify ptr null to migrate from the obsoleted 2-field form";
          v370[0] = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
          goto LABEL_214;
        }
        v81 = v80[2];
        if (*(_BYTE *)(v81 + 8) != 15 || (v82 = *(_QWORD *)(v81 + 24)) != 0 && v82 != **(_QWORD **)v81 + 1944)
        {
LABEL_225:
          v15 = "wrong type for intrinsic global variable";
          goto LABEL_29;
        }
      }
LABEL_53:
      if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
        goto LABEL_68;
      v22 = llvm::Value::getValueName(v13);
      if (*(_QWORD *)v22 != 9
        || (*(_QWORD *)(v22 + 16) == 0x6573752E6D766C6CLL ? (v23 = *(_BYTE *)(v22 + 24) == 100) : (v23 = 0), !v23))
      {
        if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
          goto LABEL_68;
        v24 = llvm::Value::getValueName(v13);
        if (*(_QWORD *)v24 != 18)
          goto LABEL_68;
        v25 = *(_QWORD *)(v24 + 16) == 0x6D6F632E6D766C6CLL && *(_QWORD *)(v24 + 24) == 0x73752E72656C6970;
        if (!v25 || *(_WORD *)(v24 + 32) != 25701)
          goto LABEL_68;
      }
      if (v12)
        v69 = *((_BYTE *)v13 + 16) == 3;
      else
        v69 = 0;
      v70 = !v69;
      if (v69)
      {
        if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_203;
      }
      else if (!*((_BYTE *)v13 + 16) && v13[9] == v13 + 9 && (*((_BYTE *)v13 + 35) & 1) == 0)
      {
        goto LABEL_203;
      }
      if (((_DWORD)v13[4] & 0xF) != 6)
      {
LABEL_205:
        v15 = "invalid linkage for intrinsic global variable";
        goto LABEL_29;
      }
LABEL_203:
      if (v13[1])
      {
LABEL_204:
        v15 = "invalid uses of intrinsic global variable";
        goto LABEL_29;
      }
      v83 = v13[3];
      if (!v83 || *((_BYTE *)v83 + 8) != 17)
        goto LABEL_68;
      v84 = v83[3];
      if (!v84 || *((_BYTE *)v84 + 8) != 15)
        goto LABEL_225;
      if ((v70 & 1) != 0)
      {
        if (!*((_BYTE *)v13 + 16) && v13[9] == v13 + 9 && (*((_BYTE *)v13 + 35) & 1) == 0)
          goto LABEL_68;
      }
      else if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0)
      {
        goto LABEL_68;
      }
      v87 = (uint64_t)*(v13 - 4);
      if (!v87 || *(_BYTE *)(v87 + 16) != 8)
      {
        v366 = "wrong initalizer for intrinsic global variable";
        v370[0] = 259;
        llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
        if (*(_QWORD *)this)
          llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (const llvm::Value *)v87);
        goto LABEL_214;
      }
      v88 = *(_DWORD *)(v87 + 20);
      if ((v88 & 0x40000000) != 0)
      {
        v90 = *(llvm::Value ***)(v87 - 8);
        v89 = v88 & 0x7FFFFFF;
      }
      else
      {
        v89 = v88 & 0x7FFFFFF;
        v90 = (llvm::Value **)(v87 - 32 * v89);
      }
      if (!v89)
      {
LABEL_68:
        if ((*((_BYTE *)v13 + 34) & 0x80) != 0)
        {
          v27 = (uint64_t *)(***v13 + 2552);
          v366 = v13;
          v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v27, &v366);
          if (v28[2] == 12)
          {
            v29 = (uint64_t *)v28[1];
            v30 = *v29;
            v31 = *((_DWORD *)v29 + 2);
            if (v30 == 0x7274702E6D766C6CLL && v31 == 1752462689)
            {
              llvm::GlobalPtrAuthInfo::tryAnalyze(v13, (uint64_t)&v366);
              if ((v367 & 1) != 0)
              {
                if (v366)
                {
                  *(_QWORD *)&v358 = v366;
                  llvm::toString((uint64_t *)&v358, &v364);
                  v33 = std::string::insert(&v364, 0, "invalid llvm.ptrauth global: ");
                  v34 = v33->__r_.__value_.__r.__words[2];
                  *(_OWORD *)__p = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v360 = v34;
                  v33->__r_.__value_.__l.__size_ = 0;
                  v33->__r_.__value_.__r.__words[2] = 0;
                  v33->__r_.__value_.__r.__words[0] = 0;
                  v370[0] = 260;
                  v366 = __p;
                  v354 = (const llvm::Value *)v13;
                  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, &v354);
                  if (SBYTE7(v360) < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v364.__r_.__value_.__l.__data_);
                  if ((_QWORD)v358)
                    (*(void (**)(_QWORD))(*(_QWORD *)v358 + 8))(v358);
                  goto LABEL_214;
                }
              }
            }
          }
        }
        v364.__r_.__value_.__r.__words[0] = (std::string::size_type)&v364.__r_.__value_.__r.__words[2];
        v364.__r_.__value_.__l.__size_ = 0x100000000;
        llvm::Value::getMetadata(v13, 0, (unsigned int *)&v364);
        if (LODWORD(v364.__r_.__value_.__r.__words[1]))
        {
          v35 = (unsigned __int8 **)v364.__r_.__value_.__r.__words[0];
          v36 = 8 * LODWORD(v364.__r_.__value_.__r.__words[1]);
          do
          {
            if (**v35 != 7)
            {
              v366 = "!dbg attachment of global variable must be a DIGlobalVariableExpression";
              v370[0] = 259;
              llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
              goto LABEL_211;
            }
            v36 -= 8;
          }
          while (v36);
        }
        LODWORD(v364.__r_.__value_.__r.__words[1]) = 0;
        llvm::Value::getMetadata(v13, 28, (unsigned int *)&v364);
        if (LODWORD(v364.__r_.__value_.__r.__words[1]))
        {
          v37 = (uint64_t *)v364.__r_.__value_.__r.__words[0];
          v353 = v364.__r_.__value_.__r.__words[0] + 8 * LODWORD(v364.__r_.__value_.__r.__words[1]);
          while (1)
          {
            v38 = *v37;
            v40 = (unint64_t *)(*v37 - 16);
            v39 = *v40;
            if ((*v40 & 2) != 0)
            {
              if (!*(_DWORD *)(v38 - 24))
                goto LABEL_157;
              v41 = *(uint64_t **)(v38 - 32);
            }
            else
            {
              if ((v39 & 0x3C0) == 0)
                goto LABEL_157;
              v41 = (uint64_t *)&v40[-((v39 >> 2) & 0xF)];
            }
            v42 = *v41;
            if (*(_BYTE *)v42 != 1 || (v43 = *(_QWORD *)(v42 + 128), *(_BYTE *)(v43 + 16) != 16))
            {
LABEL_157:
              v366 = "bad !vcall_visibility attachment";
              v370[0] = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
              goto LABEL_211;
            }
            v44 = *(unsigned int *)(v43 + 32);
            LODWORD(__p[1]) = v44;
            if (v44 >= 0x41)
            {
              v46 = (void **)operator new[]();
              __p[0] = v46;
              memcpy(v46, *(const void **)(v43 + 24), ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8);
              if (v44 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__p) >= 0x41)
                goto LABEL_113;
              v45 = *v46;
            }
            else
            {
              v45 = *(void **)(v43 + 24);
              __p[0] = v45;
            }
            if (v45 == (void *)-1)
            {
LABEL_113:
              v366 = "bad !vcall_visibility attachment";
              v370[0] = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
LABEL_114:
              v55 = 0;
              goto LABEL_115;
            }
            v47 = *v40;
            if ((*v40 & 2) != 0)
            {
              v49 = *(_DWORD *)(v38 - 24);
              if (v49 != 3)
                goto LABEL_111;
              v48 = *(unint64_t **)(v38 - 32);
            }
            else
            {
              if ((*v40 & 0x3C0) != 0xC0)
              {
                v49 = (v47 >> 6) & 0xF;
LABEL_111:
                if (v49 != 1)
                  goto LABEL_113;
                goto LABEL_112;
              }
              v48 = &v40[-((v47 >> 2) & 0xF)];
            }
            v50 = v48[1];
            if (*(_BYTE *)v50 != 1)
              goto LABEL_113;
            v51 = *(_QWORD *)(v50 + 128);
            if (*(_BYTE *)(v51 + 16) != 16)
              goto LABEL_113;
            v52 = *(unsigned int *)(v51 + 32);
            DWORD2(v358) = v52;
            if (v52 >= 0x41)
            {
              *(_QWORD *)&v358 = operator new[]();
              v56 = *(const void **)(v51 + 24);
              v53 = (const llvm::Value *)v358;
              memcpy((void *)v358, v56, ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8);
              if (v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v358) >= 0x41)
                goto LABEL_131;
              v54 = *(const llvm::Value **)v53;
            }
            else
            {
              v53 = *(const llvm::Value **)(v51 + 24);
              *(_QWORD *)&v358 = v53;
              v54 = v53;
            }
            if (v54 == (const llvm::Value *)-1
              || ((*v40 & 2) != 0 ? (v57 = *(unint64_t **)(v38 - 32)) : (v57 = &v40[-((*v40 >> 2) & 0xF)]),
                  (v58 = v57[2], *(_BYTE *)v58 != 1) || (v59 = *(_QWORD *)(v58 + 128), *(_BYTE *)(v59 + 16) != 16)))
            {
LABEL_131:
              v366 = "bad !vcall_visibility attachment";
              v370[0] = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
              v63 = 1;
              goto LABEL_132;
            }
            v350 = v52;
            v60 = *(unsigned int *)(v59 + 32);
            v355 = v60;
            if (v60 >= 0x41)
            {
              v61 = (const llvm::Value *)operator new[]();
              v354 = v61;
              memcpy(v61, *(const void **)(v59 + 24), ((unint64_t)(v60 + 63) >> 3) & 0x3FFFFFF8);
              if (v60 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v354) >= 0x41)
                break;
              v62 = *(const llvm::Value **)v61;
            }
            else
            {
              v61 = *(const llvm::Value **)(v59 + 24);
              v354 = v61;
              v62 = v61;
            }
            if (v62 == (const llvm::Value *)-1)
              break;
            if (v350 > 0x40)
            {
              v64 = ((unint64_t)(v350 + 63) >> 3) & 0x3FFFFFF8;
              while (v64)
              {
                v65 = *(_QWORD *)((char *)v53 + v64 - 8);
                v66 = *(_QWORD *)((char *)v61 + v64 - 8);
                v64 -= 8;
                if (v65 != v66)
                {
                  if (v65 <= v66)
                    break;
                  goto LABEL_147;
                }
              }
            }
            else if (v53 > v61)
            {
              break;
            }
            v63 = 0;
LABEL_149:
            if (v60 >= 0x41 && v61)
              MEMORY[0x24BD1B380](v61, 0x1000C8000313F17);
            LODWORD(v52) = v350;
LABEL_132:
            if (v52 >= 0x41 && (_QWORD)v358)
              MEMORY[0x24BD1B380](v358, 0x1000C8000313F17);
            if (v63)
              goto LABEL_114;
LABEL_112:
            v55 = 1;
LABEL_115:
            if (v44 >= 0x41 && __p[0])
              MEMORY[0x24BD1B380](__p[0], 0x1000C8000313F17);
            if ((v55 & 1) == 0)
              goto LABEL_211;
            if (++v37 == (uint64_t *)v353)
              goto LABEL_153;
          }
LABEL_147:
          v366 = "bad !vcall_visibility attachment";
          v370[0] = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
          v63 = 1;
          goto LABEL_149;
        }
LABEL_153:
        v67 = (uint64_t *)v13[3];
        v68 = *((unsigned __int8 *)v67 + 8);
        switch(v68)
        {
          case 16:
            if (llvm::StructType::containsScalableVectorType((llvm::StructType *)v13[3]))
              goto LABEL_155;
            break;
          case 19:
LABEL_155:
            v366 = "Globals cannot contain scalable vectors";
            v370[0] = 259;
            __p[0] = v13;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (const llvm::Value **)__p);
            goto LABEL_211;
          case 21:
            getTargetTypeInfo(v67);
            if ((v71 & 2) == 0)
            {
              if ((*((_BYTE *)v13 + 23) & 0x10) != 0)
              {
                v85 = (uint64_t *)llvm::Value::getValueName(v13);
                v86 = *v85;
                v73 = v85 + 2;
                v72 = v86;
              }
              else
              {
                v72 = 0;
                v73 = &str_3_26;
              }
              v361 = 1283;
              __p[0] = "Global @";
              *(_QWORD *)&v360 = v73;
              *((_QWORD *)&v360 + 1) = v72;
              v366 = __p;
              v368 = (uint64_t)" has illegal target extension type";
              v370[0] = 770;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
              if (*(_QWORD *)this)
                llvm::VerifierSupport::Write((llvm::raw_ostream **)this, (llvm::Type *)v67);
              goto LABEL_211;
            }
            break;
        }
        if (v12 && *((_BYTE *)v13 + 16) == 3)
        {
          if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 0)
            goto LABEL_210;
        }
        else if (!*((_BYTE *)v13 + 16) && v13[9] == v13 + 9 && (*((_BYTE *)v13 + 35) & 1) == 0)
        {
          goto LABEL_210;
        }
LABEL_210:
LABEL_211:
        if ((std::string::size_type *)v364.__r_.__value_.__l.__data_ != &v364.__r_.__value_.__r.__words[2])
          free(v364.__r_.__value_.__l.__data_);
        v11 = v351;
        goto LABEL_214;
      }
      v91 = 32 * v89;
      while (1)
      {
        v92 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*v90);
        v354 = (const llvm::Value *)v92;
        v93 = v92[16];
        if (v93 > 3 || v93 == 2)
        {
          v364.__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid ";
          v365 = 259;
          if ((*((_BYTE *)v13 + 23) & 0x10) != 0)
          {
            v105 = (void **)llvm::Value::getValueName(v13);
            v106 = *v105;
            v104 = v105 + 2;
            v102 = v106;
            v103 = v365;
            if (v365 == 1)
            {
              __p[0] = v104;
              __p[1] = v102;
              v360 = v358;
              v361 = 261;
              v362 = v356;
              v363 = v357;
              v101 = 5;
LABEL_265:
              v366 = v104;
              v367 = (uint64_t)v102;
              v107 = 3;
              v109 = " member";
              goto LABEL_266;
            }
            if (!(_BYTE)v365)
            {
LABEL_258:
              v101 = 0;
              v361 = 256;
              v107 = 1;
              goto LABEL_267;
            }
          }
          else
          {
            v102 = 0;
            v103 = 3;
            v104 = (void **)&str_3_26;
          }
          v108 = (std::string *)v364.__r_.__value_.__r.__words[0];
          v101 = 2;
          if (HIBYTE(v365) != 1)
          {
            v103 = 2;
            v108 = &v364;
          }
          __p[0] = v108;
          __p[1] = (void *)v364.__r_.__value_.__l.__size_;
          *(_QWORD *)&v360 = v104;
          *((_QWORD *)&v360 + 1) = v102;
          LOBYTE(v361) = v103;
          HIBYTE(v361) = 5;
          v104 = __p;
          goto LABEL_265;
        }
        if ((v92[23] & 0x10) == 0)
          break;
        v90 += 4;
        v91 -= 32;
        if (!v91)
          goto LABEL_68;
      }
      v364.__r_.__value_.__r.__words[0] = (std::string::size_type)"members of ";
      v365 = 259;
      if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
      {
        v95 = 0;
        v96 = 3;
        v97 = (void **)&str_3_26;
        goto LABEL_251;
      }
      v98 = (void **)llvm::Value::getValueName(v13);
      v99 = *v98;
      v97 = v98 + 2;
      v95 = v99;
      v96 = v365;
      if (v365 == 1)
      {
        __p[0] = v97;
        __p[1] = v95;
        v360 = v358;
        v361 = 261;
        v362 = v356;
        v363 = v357;
        v101 = 5;
        goto LABEL_263;
      }
      if (!(_BYTE)v365)
        goto LABEL_258;
LABEL_251:
      v100 = (std::string *)v364.__r_.__value_.__r.__words[0];
      v101 = 2;
      if (HIBYTE(v365) != 1)
      {
        v96 = 2;
        v100 = &v364;
      }
      __p[0] = v100;
      __p[1] = (void *)v364.__r_.__value_.__l.__size_;
      *(_QWORD *)&v360 = v97;
      *((_QWORD *)&v360 + 1) = v95;
      LOBYTE(v361) = v96;
      HIBYTE(v361) = 5;
      v97 = __p;
LABEL_263:
      v366 = v97;
      v367 = (uint64_t)v95;
      v107 = 3;
      v109 = " must be named";
LABEL_266:
      v368 = (uint64_t)v109;
LABEL_267:
      LOBYTE(v370[0]) = v101;
      HIBYTE(v370[0]) = v107;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, &v354);
LABEL_214:
      v12 = *(_QWORD *)(v12 + 8);
      if (v12 == v11)
      {
        v10 = *((_QWORD *)this + 1);
        break;
      }
    }
  }
  v110 = v10 + 40;
  v111 = *(_QWORD *)(v10 + 48);
  if (v111 == v10 + 40)
    goto LABEL_302;
  do
  {
    if (v111)
      v112 = (_DWORD *)(v111 - 48);
    else
      v112 = 0;
    v113 = v112[8];
    v114 = (v113 & 0xFu) > 8 || ((1 << (v113 & 0xF)) & 0x181) == 0;
    v115 = v113 & 0xE;
    if (v114 && v115 != 2 && v115 != 4 && (v112[8] & 0xF) != 1)
    {
      v122 = "Alias should have private, internal, linkonce, weak, linkonce_odr, weak_odr, external, or available_externally linkage!";
LABEL_290:
      v366 = v122;
      goto LABEL_291;
    }
    v119 = *((_QWORD *)v112 - 4);
    if (!v119)
    {
      v122 = "Aliasee cannot be NULL!";
      goto LABEL_290;
    }
    if (*(_QWORD *)v112 != *(_QWORD *)v119)
    {
      v366 = "Alias and aliasee types should match!";
LABEL_291:
      v370[0] = 259;
      __p[0] = v112;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (const llvm::Value **)__p);
      goto LABEL_292;
    }
    v120 = *(unsigned __int8 *)(v119 + 16);
    if (v120 >= 4 && v120 != 5)
    {
      v122 = "Aliasee should be either GlobalValue or ConstantExpr";
      goto LABEL_290;
    }
    v366 = v370;
    v367 = (uint64_t)v370;
    v368 = 4;
    v369 = 0;
    llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert((uint64_t)__p, (llvm::SmallPtrSetImplBase *)&v366, v112);
    if ((void *)v367 != v366)
      free((void *)v367);
LABEL_292:
    v111 = *(_QWORD *)(v111 + 8);
  }
  while (v111 != v110);
  v10 = *((_QWORD *)this + 1);
LABEL_302:
  v123 = v10 + 56;
  v124 = *(_QWORD *)(v10 + 64);
  if (v124 != v10 + 56)
  {
    v125 = "IFunc should have private, internal, linkonce, weak, linkonce_odr, weak_odr, or external linkage!";
    v126 = "IFunc resolver must be a definition";
    while (1)
    {
      if (v124)
        v127 = v124 - 56;
      else
        v127 = 0;
      v128 = *(_DWORD *)(v127 + 32) & 0xF;
      v129 = v128 > 8;
      v130 = (1 << v128) & 0x1BD;
      if (v129 || v130 == 0)
      {
        v366 = v125;
        goto LABEL_326;
      }
      v132 = llvm::Value::stripPointerCastsAndAliases(*(llvm::Value **)(v127 - 32));
      if (v132)
        v133 = *((_BYTE *)v132 + 16) == 0;
      else
        v133 = 0;
      if (!v133)
      {
        v366 = "IFunc must have a Function resolver";
LABEL_326:
        v370[0] = 259;
        __p[0] = (void *)v127;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (const llvm::Value **)__p);
        goto LABEL_327;
      }
      if ((*((_DWORD *)v132 + 8) & 0xF) == 1
        || (*((_DWORD *)v132 + 8) & 0x1000000) == 0 && *((llvm::Value **)v132 + 9) == (llvm::Value *)((char *)v132 + 72))
      {
        v366 = v126;
        goto LABEL_326;
      }
      if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v132 + 3) + 16) + 8) != 15)
        break;
      v134 = v126;
      v135 = v125;
      v136 = **(_QWORD **)(v127 - 32);
      v137 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType ***)(v127 + 24), 0);
      v138 = (llvm::PointerType **)llvm::FunctionType::get(v137, 0, 0, 0);
      v17 = v136 == llvm::PointerType::get(v138, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v127 + 8) >> 8));
      v125 = v135;
      v126 = v134;
      if (!v17)
      {
        v139 = "IFunc resolver has incorrect type";
LABEL_325:
        v366 = v139;
        goto LABEL_326;
      }
LABEL_327:
      v124 = *(_QWORD *)(v124 + 8);
      if (v124 == v123)
      {
        v10 = *((_QWORD *)this + 1);
        goto LABEL_329;
      }
    }
    v139 = "IFunc resolver must return a pointer";
    goto LABEL_325;
  }
LABEL_329:
  v140 = v10 + 72;
  v141 = *(_QWORD *)(v10 + 80);
  if (v141 == v10 + 72)
    goto LABEL_427;
  while (2)
  {
    v142 = (uint64_t **)(v141 + 16);
    v143 = *(char *)(v141 + 39);
    if (v143 >= 0)
      v144 = (uint64_t *)(v141 + 16);
    else
      v144 = *(uint64_t **)(v141 + 16);
    v145 = *(_QWORD *)(v141 + 24);
    v146 = *(unsigned __int8 *)(v141 + 39);
    if (v143 >= 0)
      v147 = *(unsigned __int8 *)(v141 + 39);
    else
      v147 = *(_QWORD *)(v141 + 24);
    if (v147 >= 9 && *v144 == 0x6762642E6D766C6CLL && *((_BYTE *)v144 + 8) == 46)
    {
      if (v147 != 11
        || ((v189 = *v144, v190 = *(uint64_t *)((char *)v144 + 3), v189 == 0x6762642E6D766C6CLL)
          ? (v191 = v190 == 0x75632E6762642E6DLL)
          : (v191 = 0),
            !v191))
      {
        v366 = "unrecognized named metadata node in the llvm.dbg namespace";
        v370[0] = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
        if (*(_QWORD *)this)
          llvm::VerifierSupport::Write(this, (const llvm::NamedMDNode *)v141);
        goto LABEL_425;
      }
    }
    v149 = *(unsigned int *)(*(_QWORD *)(v141 + 48) + 8);
    if ((_DWORD)v149)
    {
      v150 = 0;
      v151 = 8 * v149;
      while (1)
      {
        v152 = *(unsigned __int8 **)(**(_QWORD **)(v141 + 48) + v150);
        v153 = *(unsigned __int8 *)(v141 + 39);
        v154 = (char)v153;
        if ((v153 & 0x80u) != 0)
          v153 = *(_QWORD *)(v141 + 24);
        if (v153 == 11
          && (v154 >= 0 ? (v155 = (uint64_t *)(v141 + 16)) : (v155 = *v142),
              (v156 = *v155, v157 = *(uint64_t *)((char *)v155 + 3), v156 == 0x6762642E6D766C6CLL)
            ? (v158 = v157 == 0x75632E6762642E6DLL)
            : (v158 = 0),
              v158))
        {
          if (!v152 || *v152 != 16)
          {
            v366 = "invalid compile unit";
            v370[0] = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
            if (*(_QWORD *)this)
            {
              llvm::VerifierSupport::Write(this, (const llvm::NamedMDNode *)v141);
              llvm::VerifierSupport::Write(this, v152);
            }
            goto LABEL_425;
          }
        }
        else if (!v152)
        {
          goto LABEL_358;
        }
LABEL_358:
        v150 += 8;
        if (v151 == v150)
        {
          v146 = *(unsigned __int8 *)(v141 + 39);
          v145 = *(_QWORD *)(v141 + 24);
          LOBYTE(v143) = *(_BYTE *)(v141 + 39);
          break;
        }
      }
    }
    if ((v143 & 0x80u) != 0)
      v146 = v145;
    if (v146 == 21)
    {
      v159 = *v142;
      if ((v143 & 0x80u) == 0)
        v159 = (uint64_t *)(v141 + 16);
      v160 = *v159;
      v161 = v159[1];
      v162 = *(uint64_t *)((char *)v159 + 13);
      v163 = v160 == 0x6573752E6D766C6CLL && v161 == 0x7469646E6F632E64;
      if (v163 && v162 == 0x6C616E6F69746964)
      {
        v165 = *(unsigned int *)(*(_QWORD *)(v141 + 48) + 8);
        if ((_DWORD)v165)
        {
          v166 = 0;
          while (1)
          {
            v167 = *(_QWORD *)(**(_QWORD **)(v141 + 48) + 8 * v166);
            v168 = v167 - 16;
            v169 = *(_QWORD *)(v167 - 16);
            if ((v169 & 2) != 0)
            {
              if (*(_DWORD *)(v167 - 24) != 3)
                break;
              v170 = *(uint64_t **)(v167 - 32);
            }
            else
            {
              if ((*(_QWORD *)(v167 - 16) & 0x3C0) != 0xC0)
                break;
              v170 = (uint64_t *)(v168 - 8 * ((v169 >> 2) & 0xF));
            }
            v171 = *v170;
            if (v171)
            {
              if (*(_BYTE *)v171 != 1 || *(unsigned __int8 *)(*(_QWORD *)(v171 + 128) + 16) >= 4u)
                break;
            }
            v172 = (v169 & 2) != 0 ? *(_QWORD *)(v167 - 32) : v168 - 8 * ((v169 >> 2) & 0xF);
            v173 = *(_QWORD *)(*(_QWORD *)(v172 + 8) + 128);
            v174 = *(_DWORD *)(v173 + 32);
            v175 = v174 > 0x40
                 ? **(_QWORD **)(v173 + 24)
                 : (uint64_t)(*(_QWORD *)(v173 + 24) << -(char)v174) >> -(char)v174;
            if (v175 >= 2)
              break;
            v176 = (v169 & 2) != 0 ? *(_QWORD *)(v167 - 32) : v168 - 8 * ((v169 >> 2) & 0xF);
            v177 = *(_BYTE **)(v176 + 16);
            v178 = llvm::MDNode::classof(v177);
            if (!v177 || (v178 & 1) == 0)
              break;
            v179 = *((_QWORD *)v177 - 2);
            if ((v179 & 2) != 0)
            {
              v183 = *((unsigned int *)v177 - 6);
              if ((_DWORD)v183)
              {
                v181 = (uint64_t *)*((_QWORD *)v177 - 4);
                v182 = &v181[v183];
                goto LABEL_401;
              }
              break;
            }
            if ((v179 & 0x3C0) == 0)
              break;
            v180 = (v179 >> 6) & 0xF;
            if (v180)
            {
              v181 = (uint64_t *)&v177[-8 * ((v179 >> 2) & 0xF) - 16];
              v182 = &v181[v180];
LABEL_401:
              do
              {
                v184 = *v181;
                if (*v181)
                {
                  v185 = *(_BYTE *)v184 == 1 ? *(llvm::Value **)(v184 + 128) : 0;
                  v186 = llvm::Value::stripPointerCasts(v185);
                  v187 = *((unsigned __int8 *)v186 + 16);
                  if ((!v186 || v187 - 13 <= 0xFFFFFFFD) && v187 >= 4 && v187 != 19)
                    goto LABEL_424;
                }
                ++v181;
              }
              while (v181 != v182);
            }
            if (++v166 == v165)
              goto LABEL_425;
          }
LABEL_424:
          v366 = "invalid llvm.used.conditional member";
          v370[0] = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
        }
      }
    }
LABEL_425:
    v141 = *(_QWORD *)(v141 + 8);
    if (v141 != v140)
      continue;
    break;
  }
  v10 = *((_QWORD *)this + 1);
LABEL_427:
  v192 = *(unsigned int *)(v10 + 128);
  if ((_DWORD)v192)
  {
    for (i = *(_QWORD **)(v10 + 120); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(_QWORD **)(v10 + 120);
  }
  v195 = *(_QWORD *)(v10 + 120) + 8 * v192;
  if (i != (_QWORD *)v195)
  {
    do
    {
      if (*((_DWORD *)this + 43) == 1)
      {
        v196 = (_DWORD *)llvm::ValueSymbolTable::lookup(*(_QWORD *)(*((_QWORD *)this + 1) + 112), (uint64_t *)(*(_QWORD *)(*i + 8) + 72), **(_QWORD **)(*i + 8));
        __p[0] = v196;
        if (v196)
        {
          if ((v196[8] & 0xF) == 8)
          {
            v366 = "comdat global value has private linkage";
            v370[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (const llvm::Value **)__p);
          }
        }
      }
      do
      {
        v198 = i[1];
        ++i;
        v197 = v198;
        if (v198)
          v199 = v197 == -8;
        else
          v199 = 1;
      }
      while (v199);
    }
    while (i != (_QWORD *)v195);
    v10 = *((_QWORD *)this + 1);
  }
  v366 = "llvm.module.flags";
  v370[0] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v10, (const llvm::Twine *)&v366);
  if (NamedMetadata)
  {
    v201 = NamedMetadata;
    memset(&v364, 0, 20);
    v366 = &v368;
    v367 = 0x1000000000;
    v202 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if (!(_DWORD)v202)
    {
LABEL_642:
      MEMORY[0x24BD1B398](v364.__r_.__value_.__r.__words[0], 8);
      goto LABEL_643;
    }
    v352 = 0;
    v203 = 0;
    v204 = "invalid ID operand in module flag (expected metadata string)";
    while (2)
    {
      v205 = *(_QWORD *)(**(_QWORD **)(v201 + 48) + 8 * v203);
      *(_QWORD *)&v358 = v205;
      v207 = (unint64_t *)(v205 - 16);
      v206 = *(_QWORD *)(v205 - 16);
      if ((v206 & 2) == 0)
      {
        if ((*(_QWORD *)(v205 - 16) & 0x3C0) == 0xC0)
        {
          LODWORD(v354) = 0;
          v208 = (uint64_t *)&v207[-((v206 >> 2) & 0xF)];
          goto LABEL_455;
        }
LABEL_458:
        __p[0] = "incorrect number of operands in module flag";
        v361 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (unsigned __int8 **)&v358);
LABEL_478:
        if (++v203 == v202)
        {
          v280 = (uint64_t *)v366;
          if ((_DWORD)v367)
          {
            v281 = v364.__r_.__value_.__r.__words[0];
            v282 = v364.__r_.__value_.__r.__words[2];
            v283 = 8 * v367;
            while (1)
            {
              v284 = *(_QWORD *)(*v280 - 16);
              if ((v284 & 2) != 0)
                v285 = *(_QWORD **)(*v280 - 32);
              else
                v285 = (_QWORD *)(*v280 - 16 - 8 * ((v284 >> 2) & 0xF));
              v286 = v285[1];
              *(_QWORD *)&v358 = *v285;
              __p[0] = 0;
              if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v281, v282, v358, __p) & 1) != 0&& (v287 = *((_QWORD *)__p[0] + 1)) != 0)
              {
                v288 = *(_QWORD *)(v287 - 16);
                if ((v288 & 2) != 0)
                  v289 = *(_QWORD *)(v287 - 32);
                else
                  v289 = v287 - 16 - 8 * ((v288 >> 2) & 0xF);
                if (*(_QWORD *)(v289 + 16) == v286)
                  goto LABEL_638;
                __p[0] = "invalid requirement on flag, flag does not have the required value";
              }
              else
              {
                __p[0] = "invalid requirement on flag, flag is not present in module";
              }
              v361 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (unsigned __int8 **)&v358);
LABEL_638:
              ++v280;
              v283 -= 8;
              if (!v283)
              {
                v280 = (uint64_t *)v366;
                break;
              }
            }
          }
          if (v280 != &v368)
            free(v280);
          goto LABEL_642;
        }
        continue;
      }
      break;
    }
    if (*(_DWORD *)(v205 - 24) != 3)
      goto LABEL_458;
    LODWORD(v354) = 0;
    v208 = *(uint64_t **)(v205 - 32);
LABEL_455:
    isValidModFlagBehavior = llvm::Module::isValidModFlagBehavior(*v208, &v354);
    v210 = *v207;
    if ((isValidModFlagBehavior & 1) == 0)
    {
      if ((v210 & 2) != 0)
        v212 = *(uint64_t **)(v205 - 32);
      else
        v212 = (uint64_t *)&v207[-((v210 >> 2) & 0xF)];
      v215 = *v212;
      if (v215 && *(_BYTE *)v215 == 1 && *(_BYTE *)(*(_QWORD *)(v215 + 128) + 16) == 16)
        v216 = "invalid behavior operand in module flag (unexpected constant)";
      else
        v216 = "invalid behavior operand in module flag (expected constant integer)";
      __p[0] = (void *)v216;
      v361 = 259;
      if ((v210 & 2) != 0)
        v217 = *(unsigned __int8 ***)(v205 - 32);
      else
        v217 = (unsigned __int8 **)&v207[-((v210 >> 2) & 0xF)];
      goto LABEL_477;
    }
    if ((v210 & 2) != 0)
      v211 = *(unint64_t **)(v205 - 32);
    else
      v211 = &v207[-((v210 >> 2) & 0xF)];
    v213 = v211[1];
    if (!v213 || *(_BYTE *)v213)
    {
      __p[0] = (void *)v204;
      v361 = 259;
      if ((v210 & 2) != 0)
        v214 = *(unint64_t **)(v205 - 32);
      else
        v214 = &v207[-((v210 >> 2) & 0xF)];
      v217 = (unsigned __int8 **)(v214 + 1);
LABEL_477:
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v217);
      goto LABEL_478;
    }
    switch((int)v354)
    {
      case 3:
        v219 = v204;
        if ((v210 & 2) != 0)
          v228 = *(unint64_t **)(v205 - 32);
        else
          v228 = &v207[-((v210 >> 2) & 0xF)];
        v231 = (_BYTE *)v228[2];
        v232 = llvm::MDNode::classof(v231);
        if (v231)
          v233 = v232 == 0;
        else
          v233 = 1;
        if (v233)
          goto LABEL_559;
        v234 = *((_QWORD *)v231 - 2);
        if ((v234 & 2) != 0)
        {
          if (*((_DWORD *)v231 - 6) == 2)
          {
            v235 = (unsigned __int8 **)*((_QWORD *)v231 - 4);
            goto LABEL_557;
          }
        }
        else if ((*((_QWORD *)v231 - 2) & 0x3C0) == 0x80)
        {
          v235 = (unsigned __int8 **)&v231[-8 * ((v234 >> 2) & 0xF) - 16];
LABEL_557:
          if (**v235)
          {
            __p[0] = "invalid value for 'require' module flag (first value operand should be a string)";
            v361 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v235);
            goto LABEL_488;
          }
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v366, (uint64_t)v231);
          v204 = v219;
          goto LABEL_495;
        }
LABEL_559:
        __p[0] = "invalid value for 'require' module flag (expected metadata pair)";
        v361 = 259;
        if ((*v207 & 2) != 0)
          v251 = *(unsigned __int8 ***)(v205 - 32);
        else
          v251 = (unsigned __int8 **)&v207[-((*v207 >> 2) & 0xF)];
        v204 = v219;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v251 + 2);
        goto LABEL_478;
      case 5:
      case 6:
        if ((v210 & 2) != 0)
          v218 = *(unint64_t **)(v205 - 32);
        else
          v218 = &v207[-((v210 >> 2) & 0xF)];
        if ((llvm::MDNode::classof((_BYTE *)v218[2]) & 1) != 0)
          goto LABEL_485;
        __p[0] = "invalid value for 'append'-type module flag (expected a metadata node)";
        v361 = 259;
        v210 = *v207;
        if ((*v207 & 2) != 0)
          goto LABEL_505;
        goto LABEL_534;
      case 7:
        if ((v210 & 2) != 0)
          v229 = *(unint64_t **)(v205 - 32);
        else
          v229 = &v207[-((v210 >> 2) & 0xF)];
        v236 = v229[2];
        if (v236 && *(_BYTE *)v236 == 1 && *(_BYTE *)(*(_QWORD *)(v236 + 128) + 16) == 16)
          goto LABEL_485;
        v237 = "invalid value for 'max' module flag (expected constant integer)";
        goto LABEL_533;
      case 8:
        if ((v210 & 2) != 0)
          v230 = *(unint64_t **)(v205 - 32);
        else
          v230 = &v207[-((v210 >> 2) & 0xF)];
        v238 = v230[2];
        if (v238)
        {
          if (*(_BYTE *)v238 == 1)
          {
            v239 = *(_QWORD *)(v238 + 128);
            if (*(_BYTE *)(v239 + 16) == 16)
            {
              v240 = (_QWORD *)(v239 + 24);
              v241 = *(_DWORD *)(v239 + 32);
              v242 = v241 - 1;
              if (v241 >= 0x41)
                v240 = (_QWORD *)(*v240 + 8 * (v242 >> 6));
              if (((*v240 >> v242) & 1) == 0)
                goto LABEL_485;
            }
          }
        }
        v237 = "invalid value for 'min' module flag (expected constant non-negative integer)";
LABEL_533:
        __p[0] = (void *)v237;
        v361 = 259;
        if ((v210 & 2) != 0)
LABEL_505:
          v227 = *(unint64_t **)(v205 - 32);
        else
LABEL_534:
          v227 = &v207[-((v210 >> 2) & 0xF)];
        v217 = (unsigned __int8 **)(v227 + 2);
        goto LABEL_477;
      default:
LABEL_485:
        v219 = v204;
        __p[0] = 0;
        v220 = v364.__r_.__value_.__r.__words[2];
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v352, v364.__r_.__value_.__r.__words[2], v213, __p) & 1) != 0)
        {
          __p[0] = "module flag identifiers must be unique (or of 'require' type)";
          v361 = 259;
          llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)__p);
          if (*(_QWORD *)this)
            llvm::VerifierSupport::Write(this, (unsigned __int8 *)v213);
LABEL_488:
          v204 = v219;
          goto LABEL_478;
        }
        if (4 * LODWORD(v364.__r_.__value_.__r.__words[1]) + 4 >= 3 * v220)
        {
          v279 = 2 * v220;
        }
        else
        {
          if (v220 + ~LODWORD(v364.__r_.__value_.__r.__words[1]) - HIDWORD(v364.__r_.__value_.__r.__words[1]) > v220 >> 3)
          {
LABEL_492:
            v221 = __p[0];
            ++LODWORD(v364.__r_.__value_.__r.__words[1]);
            v204 = v219;
            if (*(_QWORD *)__p[0] != -4096)
              --HIDWORD(v364.__r_.__value_.__r.__words[1]);
            *(_QWORD *)__p[0] = v213;
            v221[1] = v205;
LABEL_495:
            v222 = *(uint64_t **)(v213 + 8);
            v223 = v222 + 3;
            v224 = *v222;
            if (*v222 == 14)
            {
              if (*v223 != 0x4F2072656B6E694CLL || *(uint64_t *)((char *)v222 + 30) != 0x736E6F6974704F20)
                goto LABEL_478;
              v244 = (llvm::Module *)*((_QWORD *)this + 1);
              __p[0] = "llvm.linker.options";
              v361 = 259;
              if (!llvm::Module::getNamedMetadata(v244, (const llvm::Twine *)__p))
              {
                __p[0] = "'Linker Options' named metadata no longer supported";
                v361 = 259;
                llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)__p);
                goto LABEL_478;
              }
              v222 = *(uint64_t **)(v213 + 8);
              v224 = *v222;
            }
            else if (v224 == 10)
            {
              if (*v223 != 0x69735F7261686377 || *((_WORD *)v222 + 16) != 25978)
                goto LABEL_568;
              v226 = (*v207 & 2) != 0 ? *(unint64_t **)(v205 - 32) : &v207[-((*v207 >> 2) & 0xF)];
              v252 = v226[2];
              if (v252)
              {
                if (*(_BYTE *)v252 == 1 && *(_BYTE *)(*(_QWORD *)(v252 + 128) + 16) == 16)
                  goto LABEL_568;
              }
              v257 = "wchar_size metadata requires constant integer argument";
              goto LABEL_620;
            }
            v223 = v222 + 3;
            if (v224 == 10)
            {
LABEL_568:
              v253 = *v223;
              v254 = *((unsigned __int16 *)v223 + 4);
              if (v253 != 0x69666F7250204743 || v254 != 25964)
                goto LABEL_478;
              v256 = (*v207 & 2) != 0 ? *(unint64_t **)(v205 - 32) : &v207[-((*v207 >> 2) & 0xF)];
              v258 = v256[2];
              v259 = *(_QWORD *)(v258 - 16);
              if ((v259 & 2) != 0)
              {
                v260 = *(unsigned __int8 ***)(v258 - 32);
                v261 = *(unsigned int *)(v258 - 24);
              }
              else
              {
                v260 = (unsigned __int8 **)(v258 - 16 - 8 * ((v259 >> 2) & 0xF));
                v261 = (v259 >> 6) & 0xF;
              }
              if (!v261)
                goto LABEL_478;
              v262 = 8 * v261;
              while (1)
              {
                v263 = *v260;
                if (!*v260 || !llvm::MDNode::classof(*v260))
                  break;
                v265 = v263 - 16;
                v264 = *((_QWORD *)v263 - 2);
                if ((v264 & 2) != 0)
                {
                  if (*((_DWORD *)v263 - 6) != 3)
                    break;
                  v266 = (unsigned __int8 **)*((_QWORD *)v263 - 4);
                }
                else
                {
                  if ((*((_QWORD *)v263 - 2) & 0x3C0) != 0xC0)
                    break;
                  v266 = (unsigned __int8 **)&v265[-8 * ((v264 >> 2) & 0xF)];
                }
                v267 = *v266;
                if (*v266
                  && (*v267 - 3 < 0xFFFFFFFE
                   || *((_BYTE *)llvm::Value::stripPointerCasts(*((llvm::Value **)v267 + 16)) + 16)))
                {
                  __p[0] = "expected a Function or null";
                  v361 = 259;
                  llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v266);
                }
                if ((*(_QWORD *)v265 & 2) != 0)
                  v268 = (unsigned __int8 *)*((_QWORD *)v263 - 4);
                else
                  v268 = &v265[-8 * ((*(_QWORD *)v265 >> 2) & 0xFLL)];
                v273 = (llvm::Value **)*((_QWORD *)v268 + 1);
                v272 = (unsigned __int8 **)(v268 + 8);
                v271 = v273;
                if (v273
                  && (*(unsigned __int8 *)v271 - 3 < 0xFFFFFFFE
                   || *((_BYTE *)llvm::Value::stripPointerCasts(v271[16]) + 16)))
                {
                  __p[0] = "expected a Function or null";
                  v361 = 259;
                  llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, v272);
                }
                v274 = *(_QWORD *)v265;
                if ((*(_QWORD *)v265 & 2) != 0)
                  v275 = (unsigned __int8 *)*((_QWORD *)v263 - 4);
                else
                  v275 = &v265[-8 * ((v274 >> 2) & 0xF)];
                v276 = *((_QWORD *)v275 + 2);
                if (v276 && *(_BYTE *)v276 == 1 && *(_BYTE *)(**(_QWORD **)(v276 + 128) + 8) == 13)
                  goto LABEL_597;
                __p[0] = "expected an integer constant";
                v361 = 259;
                if ((v274 & 2) != 0)
                  v277 = (unsigned __int8 *)*((_QWORD *)v263 - 4);
                else
                  v277 = &v265[-8 * ((v274 >> 2) & 0xF)];
                v270 = (unsigned __int8 **)(v277 + 16);
                v269 = (llvm::raw_ostream **)this;
LABEL_596:
                llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(v269, (const llvm::Twine *)__p, v270);
LABEL_597:
                ++v260;
                v262 -= 8;
                if (!v262)
                {
                  v204 = "invalid ID operand in module flag (expected metadata string)";
                  goto LABEL_478;
                }
              }
              __p[0] = "expected a MDNode triple";
              v361 = 259;
              v269 = (llvm::raw_ostream **)this;
              v270 = v260;
              goto LABEL_596;
            }
            if (v224 != 21)
              goto LABEL_478;
            v245 = *v223;
            v246 = v222[4];
            v247 = *(uint64_t *)((char *)v223 + 13);
            v248 = v245 == 0x6369746E616D6553 && v246 == 0x736F707265746E49;
            if (!v248 || v247 != 0x6E6F697469736F70)
              goto LABEL_478;
            v250 = (*v207 & 2) != 0 ? *(unint64_t **)(v205 - 32) : &v207[-((*v207 >> 2) & 0xF)];
            v278 = v250[2];
            if (v278)
            {
              if (*(_BYTE *)v278 == 1 && *(_BYTE *)(*(_QWORD *)(v278 + 128) + 16) == 16)
                goto LABEL_478;
            }
            v257 = "SemanticInterposition metadata requires constant integer argument";
LABEL_620:
            __p[0] = (void *)v257;
            v361 = 259;
            llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)__p);
            goto LABEL_478;
          }
          v279 = v220;
        }
        llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow((uint64_t)&v364, v279);
        __p[0] = 0;
        v352 = v364.__r_.__value_.__r.__words[0];
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>((uint64_t)v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__r.__words[2], v213, __p);
        goto LABEL_492;
    }
  }
LABEL_643:
  v290 = (llvm::Module *)*((_QWORD *)this + 1);
  v366 = "llvm.ident";
  v370[0] = 259;
  v291 = llvm::Module::getNamedMetadata(v290, (const llvm::Twine *)&v366);
  if (v291)
  {
    v292 = *(_QWORD *)(v291 + 48);
    v293 = *(unsigned int *)(v292 + 8);
    if ((_DWORD)v293)
    {
      v294 = *(void ***)v292;
      while (1)
      {
        v295 = (char *)*v294;
        __p[0] = v295;
        v296 = v295 - 16;
        v297 = *((_QWORD *)v295 - 2);
        if ((v297 & 2) != 0)
        {
          if (*((_DWORD *)v295 - 6) != 1)
          {
LABEL_664:
            v366 = "incorrect number of operands in llvm.ident metadata";
            v370[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (unsigned __int8 **)__p);
            goto LABEL_667;
          }
          v298 = (char *)*((_QWORD *)v295 - 4);
        }
        else
        {
          if ((*((_QWORD *)v295 - 2) & 0x3C0) != 0x40)
            goto LABEL_664;
          v298 = &v296[-8 * ((v297 >> 2) & 0xF)];
        }
        v299 = *(_BYTE **)v298;
        if (!v299 || *v299)
          break;
        ++v294;
        if (!--v293)
          goto LABEL_667;
      }
      v366 = "invalid value for llvm.ident metadata entry operand(the operand should be a string)";
      v370[0] = 259;
      if ((v297 & 2) != 0)
        v301 = (unsigned __int8 **)*((_QWORD *)v295 - 4);
      else
        v301 = (unsigned __int8 **)&v296[-8 * ((v297 >> 2) & 0xF)];
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, v301);
    }
  }
LABEL_667:
  v302 = (llvm::Module *)*((_QWORD *)this + 1);
  v366 = "llvm.commandline";
  v370[0] = 259;
  v303 = llvm::Module::getNamedMetadata(v302, (const llvm::Twine *)&v366);
  if (v303)
  {
    v304 = *(_QWORD *)(v303 + 48);
    v305 = *(unsigned int *)(v304 + 8);
    if ((_DWORD)v305)
    {
      v306 = *(void ***)v304;
      while (1)
      {
        v307 = (char *)*v306;
        __p[0] = v307;
        v308 = v307 - 16;
        v309 = *((_QWORD *)v307 - 2);
        if ((v309 & 2) != 0)
        {
          if (*((_DWORD *)v307 - 6) != 1)
          {
LABEL_681:
            v366 = "incorrect number of operands in llvm.commandline metadata";
            v370[0] = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, (unsigned __int8 **)__p);
            goto LABEL_684;
          }
          v310 = (char *)*((_QWORD *)v307 - 4);
        }
        else
        {
          if ((*((_QWORD *)v307 - 2) & 0x3C0) != 0x40)
            goto LABEL_681;
          v310 = &v308[-8 * ((v309 >> 2) & 0xF)];
        }
        v311 = *(_BYTE **)v310;
        if (!v311 || *v311)
          break;
        ++v306;
        if (!--v305)
          goto LABEL_684;
      }
      v366 = "invalid value for llvm.commandline metadata entry operand(the operand should be a string)";
      v370[0] = 259;
      if ((v309 & 2) != 0)
        v312 = (unsigned __int8 **)*((_QWORD *)v307 - 4);
      else
        v312 = (unsigned __int8 **)&v308[-8 * ((v309 >> 2) & 0xF)];
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v366, v312);
    }
  }
LABEL_684:
  v313 = (llvm::Module *)*((_QWORD *)this + 1);
  if (!*(_BYTE *)(**(_QWORD **)v313 + 1224))
  {
    v366 = "llvm.dbg.cu";
    v370[0] = 259;
    v314 = llvm::Module::getNamedMetadata(v313, (const llvm::Twine *)&v366);
    v366 = v370;
    v367 = (uint64_t)v370;
    v368 = 2;
    v369 = 0;
    if (v314)
    {
      v315 = v314;
      v316 = *(unsigned int *)(*(_QWORD *)(v314 + 48) + 8);
      if ((_DWORD)v316)
      {
        v317 = 0;
        v318 = 8 * v316;
        do
        {
          llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v366, *(const void **)(**(_QWORD **)(v315 + 48) + v317), (uint64_t)__p);
          v317 += 8;
        }
        while (v318 != v317);
      }
    }
    v319 = *((_QWORD *)this + 94);
    v320 = 760;
    if (v319 == *((_QWORD *)this + 93))
      v320 = 764;
    v321 = *(unsigned int *)((char *)this + v320);
    if ((_DWORD)v321)
    {
      v322 = 8 * v321;
      v323 = (std::string::size_type *)*((_QWORD *)this + 94);
      while (*v323 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v323;
        v322 -= 8;
        if (!v322)
          goto LABEL_705;
      }
    }
    else
    {
      v323 = (std::string::size_type *)*((_QWORD *)this + 94);
    }
    v324 = (std::string::size_type *)(v319 + 8 * v321);
    if (v323 != v324)
    {
LABEL_698:
      v364.__r_.__value_.__r.__words[0] = 0;
      v364.__r_.__value_.__r.__words[0] = *v323;
      imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v366, v364.__r_.__value_.__l.__data_);
      if ((void *)v367 == v366)
        v326 = (uint64_t *)((char *)&v368 + 4);
      else
        v326 = &v368;
      if (imp == (const void **)(v367 + 8 * *(unsigned int *)v326))
      {
        __p[0] = "DICompileUnit not listed in llvm.dbg.cu";
        v361 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>((llvm::raw_ostream **)this, (const llvm::Twine *)__p, (unsigned __int8 **)&v364);
LABEL_706:
        if ((void *)v367 != v366)
          free((void *)v367);
        goto LABEL_708;
      }
      while (++v323 != v324)
      {
        if (*v323 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v323 != v324)
            goto LABEL_698;
          break;
        }
      }
    }
LABEL_705:
    llvm::SmallPtrSetImplBase::clear((_anonymous_namespace_::Verifier *)((char *)this + 744));
    goto LABEL_706;
  }
LABEL_708:
  v327 = *((unsigned int *)this + 306);
  if (v327 >= 2)
  {
    v328 = (const llvm::Value **)*((_QWORD *)this + 152);
    v331 = *v328;
    v329 = v328 + 1;
    v330 = v331;
    v332 = *((_WORD *)v331 + 9);
    v333 = 8 * v327 - 8;
    while (1)
    {
      v334 = *v329;
      if (((*((_WORD *)*v329 + 9) ^ v332) & 0x3FF0) != 0)
        break;
      ++v329;
      v333 -= 8;
      if (!v333)
        goto LABEL_717;
    }
    v366 = "All llvm.experimental.deoptimize declarations must have the same calling convention";
    v370[0] = 259;
    llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v366);
    if (*(_QWORD *)this)
    {
      if (v330)
        llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v330);
      llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v334);
    }
  }
LABEL_717:
  v335 = (_QWORD *)((char *)this + 720);
  v336 = *((_DWORD *)this + 182);
  if (v336)
  {
    v337 = *((_DWORD *)this + 184);
    if (v337 > 4 * v336 && v337 >= 0x41)
    {
      v338 = 1 << (33 - __clz(v336 - 1));
      if (v338 <= 64)
        v339 = 64;
      else
        v339 = v338;
LABEL_726:
      if (v339 == v337)
      {
        *((_QWORD *)this + 91) = 0;
        v340 = (_QWORD *)*((_QWORD *)this + 90);
        v341 = 16 * v337;
        do
        {
          *v340 = -4096;
          v340 += 2;
          v341 -= 16;
        }
        while (v341);
      }
      else
      {
        MEMORY[0x24BD1B398](*v335, 8);
        if (v339)
        {
          v345 = (4 * v339 / 3u + 1) | ((unint64_t)(4 * v339 / 3u + 1) >> 1);
          v346 = v345 | (v345 >> 2) | ((v345 | (v345 >> 2)) >> 4);
          LODWORD(v346) = (((v346 | (v346 >> 8)) >> 16) | v346 | (v346 >> 8)) + 1;
          *((_DWORD *)this + 184) = v346;
          v347 = operator new(16 * v346, (std::align_val_t)8uLL);
          *((_QWORD *)this + 90) = v347;
          *((_QWORD *)this + 91) = 0;
          v348 = *((unsigned int *)this + 184);
          if ((_DWORD)v348)
          {
            v349 = 16 * v348;
            do
            {
              *v347 = -4096;
              v347 += 2;
              v349 -= 16;
            }
            while (v349);
          }
        }
        else
        {
          *v335 = 0;
          *((_QWORD *)this + 91) = 0;
          *((_DWORD *)this + 184) = 0;
        }
      }
      return *((_BYTE *)this + 192) == 0;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 183))
      return *((_BYTE *)this + 192) == 0;
    v337 = *((_DWORD *)this + 184);
    if (v337 > 0x40)
    {
      v339 = 0;
      goto LABEL_726;
    }
  }
  if (v337)
  {
    v342 = (_QWORD *)*v335;
    v343 = 16 * v337;
    do
    {
      *v342 = -4096;
      v342 += 2;
      v343 -= 16;
    }
    while (v343);
  }
  *((_QWORD *)this + 91) = 0;
  return *((_BYTE *)this + 192) == 0;
}

unint64_t llvm::TBAAVerifier::verifyTBAABaseNode(llvm::TBAAVerifier *this, llvm::Instruction *a2, const llvm::MDNode *a3, int a4)
{
  uint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  llvm::raw_ostream **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  llvm::raw_ostream **v24;
  const char *v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v30;
  int v31;
  unsigned int v32;
  llvm::raw_ostream **v33;
  unint64_t *i;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  llvm::raw_ostream **v38;
  const char *v39;
  const llvm::APInt *v40;
  llvm::raw_ostream **v41;
  unsigned int v42;
  const void **v43;
  unint64_t *v44;
  unint64_t v45;
  llvm::raw_ostream **v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int8 *v51;
  const llvm::Value *v52;
  const llvm::Value *v53;
  unsigned int v54;
  char v55;
  unsigned __int8 *v56;
  _QWORD v57[4];
  __int16 v58;

  v51 = (unsigned __int8 *)a3;
  v9 = (unint64_t *)((char *)a3 - 16);
  v8 = *((_QWORD *)a3 - 2);
  if ((v8 & 2) != 0)
    v10 = *((_DWORD *)a3 - 6);
  else
    v10 = (v8 >> 6) & 0xF;
  if (v10 > 1)
  {
    v15 = *((_QWORD *)this + 1);
    v57[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v15, *((_DWORD *)this + 6), (uint64_t)a3, v57))v16 = v57[0] == *((_QWORD *)this + 1) + 16 * *((unsigned int *)this + 6);
    else
      v16 = 1;
    if (!v16)
    {
      v19 = *(_QWORD *)(v57[0] + 8);
      v12 = v19 & 0xFFFFFF00;
      v13 = v19 & 0xFFFFFFFF00000000;
      v14 = v19;
      return v13 | v14 | v12 & 0xFFFFFF00;
    }
    v56 = (unsigned __int8 *)a3;
    v17 = *((_QWORD *)a3 - 2);
    if ((v17 & 2) != 0)
      v18 = *((_DWORD *)a3 - 6);
    else
      v18 = (v17 >> 6) & 0xF;
    if (v18 == 2)
    {
      v20 = !llvm::TBAAVerifier::isValidScalarTBAANode(this, a3);
      v21 = (v20 << 31 >> 31);
      goto LABEL_37;
    }
    if (a4)
    {
      if ((v17 & 2) != 0)
      {
        if ((-1431655765 * *((_DWORD *)a3 - 6)) < 0x55555556)
        {
          v22 = (unint64_t *)*((_QWORD *)a3 - 4);
LABEL_46:
          v30 = v22[1];
          if (v30 && *(_BYTE *)v30 == 1 && *(_BYTE *)(*(_QWORD *)(v30 + 128) + 16) == 16)
          {
            v31 = 3;
            v32 = 3;
LABEL_53:
            LOBYTE(v20) = 0;
            LOBYTE(v53) = 0;
            v48 = -1;
            v55 = 0;
            if ((v17 & 2) != 0)
              goto LABEL_56;
LABEL_54:
            if (v32 < ((v17 >> 6) & 0xF))
            {
              for (i = &v9[-((v17 >> 2) & 0xF)]; ; i = (unint64_t *)*((_QWORD *)a3 - 4))
              {
                if ((llvm::MDNode::classof((_BYTE *)i[v32]) & 1) == 0)
                {
                  v52 = a2;
                  v38 = *(llvm::raw_ostream ***)this;
                  if (*(_QWORD *)this)
                  {
                    v39 = "Incorrect field entry in struct type node!";
                    goto LABEL_70;
                  }
LABEL_71:
                  LOBYTE(v20) = 1;
                  goto LABEL_72;
                }
                v35 = i[v32 + 1];
                if (!v35 || *(_BYTE *)v35 != 1 || (v36 = *(_QWORD *)(v35 + 128), *(_BYTE *)(v36 + 16) != 16))
                {
                  v52 = a2;
                  v38 = *(llvm::raw_ostream ***)this;
                  if (*(_QWORD *)this)
                  {
                    v39 = "Offset entries must be constants!";
LABEL_70:
                    v57[0] = v39;
                    v58 = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v38, (const llvm::Twine *)v57, &v52, &v56);
                  }
                  goto LABEL_71;
                }
                v37 = *(_DWORD *)(v36 + 32);
                if (v48 != -1 && v37 != v48)
                {
                  v52 = a2;
                  v38 = *(llvm::raw_ostream ***)this;
                  if (*(_QWORD *)this)
                  {
                    v39 = "Bitwidth between the offsets and struct type entries must match";
                    goto LABEL_70;
                  }
                  goto LABEL_71;
                }
                v40 = (const llvm::APInt *)(v36 + 24);
                if (!v55)
                  break;
                v49 = *(_DWORD *)(v36 + 32);
                if ((int)llvm::APInt::compare((llvm::APInt *)&v53, v40) >= 1)
                {
                  v52 = a2;
                  v41 = *(llvm::raw_ostream ***)this;
                  if (*(_QWORD *)this)
                  {
                    v57[0] = "Offsets must be increasing!";
                    v58 = 259;
                    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v41, (const llvm::Twine *)v57, &v52, &v56);
                    if (!v55)
                    {
                      v42 = *(_DWORD *)(v36 + 32);
                      LOBYTE(v20) = 1;
                      v37 = v49;
                      v40 = (const llvm::APInt *)(v36 + 24);
                      goto LABEL_81;
                    }
                  }
                  LOBYTE(v20) = 1;
                }
                llvm::APInt::operator=((llvm::APInt *)&v53, (const llvm::APInt *)(v36 + 24));
                v37 = v49;
LABEL_85:
                if (a4)
                {
                  v44 = (*v9 & 2) != 0 ? (unint64_t *)*((_QWORD *)a3 - 4) : &v9[-((*v9 >> 2) & 0xF)];
                  v45 = v44[v32 + 2];
                  if (!v45 || *(_BYTE *)v45 != 1 || *(_BYTE *)(*(_QWORD *)(v45 + 128) + 16) != 16)
                  {
                    v52 = a2;
                    v46 = *(llvm::raw_ostream ***)this;
                    if (*(_QWORD *)this)
                    {
                      v57[0] = "Member size entries must be constants!";
                      v58 = 259;
                      v47 = v37;
                      llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v46, (const llvm::Twine *)v57, &v52, &v56);
                      v37 = v47;
                    }
                    LOBYTE(v20) = 1;
                  }
                }
                v48 = v37;
LABEL_72:
                v32 += v31;
                v17 = *v9;
                if ((*v9 & 2) == 0)
                  goto LABEL_54;
LABEL_56:
                if (v32 >= *((_DWORD *)a3 - 6))
                  goto LABEL_97;
              }
              v42 = *(_DWORD *)(v36 + 32);
LABEL_81:
              v54 = v42;
              if (v42 > 0x40)
              {
                v43 = (const void **)v40;
                v50 = v37;
                v53 = (const llvm::Value *)operator new[]();
                memcpy(v53, *v43, (((unint64_t)v54 + 63) >> 3) & 0x3FFFFFF8);
                v37 = v50;
              }
              else
              {
                v53 = *(const llvm::Value **)v40;
              }
              v55 = 1;
              goto LABEL_85;
            }
LABEL_97:
            if ((v20 & 1) != 0)
              v21 = 0xFFFFFFFFLL;
            else
              v21 = v48;
            if (v55 && v54 > 0x40 && v53)
              MEMORY[0x24BD1B380](v53, 0x1000C8000313F17);
LABEL_37:
            v14 = v20 & 1;
            v13 = v21 << 32;
            v57[0] = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 1), *((_DWORD *)this + 6), (uint64_t)a3, v57) & 1) != 0)
            {
LABEL_43:
              v12 = 0;
              return v13 | v14 | v12 & 0xFFFFFF00;
            }
            v26 = *((_DWORD *)this + 4);
            v27 = *((_DWORD *)this + 6);
            if (4 * v26 + 4 >= 3 * v27)
            {
              v27 *= 2;
            }
            else if (v27 + ~v26 - *((_DWORD *)this + 5) > v27 >> 3)
            {
LABEL_40:
              v28 = (_QWORD *)v57[0];
              ++*((_DWORD *)this + 4);
              if (*v28 != -4096)
                --*((_DWORD *)this + 5);
              *v28 = a3;
              v28[1] = v20 & 1 | ((unint64_t)v21 << 32);
              goto LABEL_43;
            }
            llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow((uint64_t)this + 8, v27);
            v57[0] = 0;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 1), *((_DWORD *)this + 6), (uint64_t)a3, v57);
            goto LABEL_40;
          }
          v53 = a2;
          v33 = *(llvm::raw_ostream ***)this;
          if (*(_QWORD *)this)
          {
            v57[0] = "Type size nodes must be constants!";
            v58 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v33, (const llvm::Twine *)v57, &v53, &v56);
          }
          goto LABEL_36;
        }
      }
      else if (-1431655765 * ((v17 >> 6) & 0xF) < 0x55555556)
      {
        v22 = &v9[-((v17 >> 2) & 0xF)];
        goto LABEL_46;
      }
      v24 = *(llvm::raw_ostream ***)this;
      if (!*(_QWORD *)this)
        goto LABEL_36;
      v25 = "Access tag nodes must have the number of operands that is a multiple of 3!";
LABEL_35:
      v57[0] = v25;
      v58 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(v24, (const llvm::Twine *)v57, &v56);
      goto LABEL_36;
    }
    if ((v17 & 2) != 0)
    {
      if ((*((_BYTE *)a3 - 24) & 1) != 0)
      {
        v23 = (unint64_t *)*((_QWORD *)a3 - 4);
        goto LABEL_32;
      }
    }
    else if ((v17 & 0x40) != 0)
    {
      v23 = &v9[-((v17 >> 2) & 0xF)];
LABEL_32:
      if (!*(_BYTE *)*v23)
      {
        v32 = 1;
        v31 = 2;
        goto LABEL_53;
      }
      v24 = *(llvm::raw_ostream ***)this;
      if (!*(_QWORD *)this)
      {
LABEL_36:
        v21 = 0xFFFFFFFFLL;
        LOBYTE(v20) = 1;
        goto LABEL_37;
      }
      v25 = "Struct tag nodes have a string as their first operand";
      goto LABEL_35;
    }
    v24 = *(llvm::raw_ostream ***)this;
    if (!*(_QWORD *)this)
      goto LABEL_36;
    v25 = "Struct tag nodes must have an odd number of operands!";
    goto LABEL_35;
  }
  v53 = a2;
  v11 = *(llvm::raw_ostream ***)this;
  if (*(_QWORD *)this)
  {
    v57[0] = "Base nodes must have at least two operands";
    v58 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v11, (const llvm::Twine *)v57, &v53, &v51);
  }
  v12 = 0;
  v13 = 0xFFFFFFFF00000000;
  v14 = 1;
  return v13 | v14 | v12 & 0xFFFFFF00;
}

BOOL llvm::TBAAVerifier::isValidScalarTBAANode(llvm::TBAAVerifier *this, const llvm::MDNode *a2)
{
  uint64_t v4;
  char *v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[32];
  uint64_t v17;

  v5 = (char *)this + 32;
  v4 = *((_QWORD *)this + 4);
  v12 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v4, *((_DWORD *)v5 + 4), (uint64_t)a2, &v12))v6 = v12 == (unsigned __int8 *)(*(_QWORD *)v5 + 16 * *((unsigned int *)v5 + 4));
  else
    v6 = 1;
  if (!v6)
    return v12[8] != 0;
  v12 = v16;
  v13 = v16;
  v14 = 4;
  v15 = 0;
  v10 = IsScalarTBAANodeImpl((uint64_t)a2, (llvm::SmallPtrSetImplBase *)&v12);
  v17 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 4), *((_DWORD *)this + 12), (uint64_t)a2, &v17) & 1) == 0)
  {
    v7 = *((_DWORD *)this + 12);
    v8 = *((_DWORD *)this + 10);
    if (4 * v8 + 4 >= 3 * v7)
    {
      v7 *= 2;
    }
    else if (v7 + ~v8 - *((_DWORD *)this + 11) > v7 >> 3)
    {
LABEL_9:
      v9 = v17;
      ++*((_DWORD *)this + 10);
      if (*(_QWORD *)v9 != -4096)
        --*((_DWORD *)this + 11);
      *(_QWORD *)v9 = a2;
      *(_BYTE *)(v9 + 8) = v10;
      goto LABEL_12;
    }
    llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow((uint64_t)v5, v7);
    v17 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((_QWORD *)this + 4), *((_DWORD *)this + 12), (uint64_t)a2, &v17);
    goto LABEL_9;
  }
LABEL_12:
  if (v13 != v12)
    free(v13);
  return v10;
}

uint64_t IsScalarTBAANodeImpl(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APInt *v12;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE v19[24];

  v4 = a1 - 16;
  v5 = *(_QWORD *)(a1 - 16);
  if ((v5 & 2) == 0)
  {
    if ((*(_QWORD *)(a1 - 16) & 0x380 | 0x40) != 0xC0)
      return 0;
    v6 = (v5 >> 2) & 0xF;
    v7 = v4 - 8 * v6;
    if (**(_BYTE **)v7)
      return 0;
    if ((*(_QWORD *)(a1 - 16) & 0x3C0) != 0xC0)
    {
      v8 = -v6;
LABEL_6:
      v7 = v4 + 8 * v8;
      goto LABEL_20;
    }
LABEL_10:
    v10 = *(_QWORD *)(v7 + 16);
    if (*(_BYTE *)v10 != 1)
      return 0;
    v11 = *(_QWORD *)(v10 + 128);
    if (*(_BYTE *)(v11 + 16) != 16)
      return 0;
    v12 = (llvm::APInt *)(v11 + 24);
    v13 = *(_DWORD *)(v11 + 32);
    if (v13 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v12) != v13)
        return 0;
    }
    else if (*(_QWORD *)v12)
    {
      return 0;
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a1 - 32);
      if (!**(_BYTE **)v7)
        goto LABEL_20;
    }
    else
    {
      v14 = (v5 >> 2) & 0xF;
      if (!**(_BYTE **)(v4 - 8 * v14))
      {
        v8 = -v14;
        goto LABEL_6;
      }
    }
    return 0;
  }
  v9 = *(_DWORD *)(a1 - 24);
  if ((v9 & 0xFFFFFFFE) != 2)
    return 0;
  v7 = *(_QWORD *)(a1 - 32);
  if (**(_BYTE **)v7)
    return 0;
  if (v9 == 3)
    goto LABEL_10;
LABEL_20:
  v15 = *(const void **)(v7 + 8);
  if (!v15)
    return 0;
  if ((llvm::MDNode::classof(*(_BYTE **)(v7 + 8)) & 1) == 0)
    return 0;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(a2, v15, (uint64_t)v19);
  if (!v19[16])
    return 0;
  v16 = *((_QWORD *)v15 - 2);
  if ((v16 & 2) != 0)
    v17 = *((_DWORD *)v15 - 6);
  else
    v17 = (v16 >> 6) & 0xF;
  if (v17 >= 2)
    return IsScalarTBAANodeImpl(v15, a2);
  else
    return 1;
}

uint64_t llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode(llvm::raw_ostream ***this, llvm::Instruction *a2, const llvm::MDNode *a3, llvm::APInt *a4, int a5)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  llvm::raw_ostream **v22;
  llvm::APInt *v24;
  const llvm::Value *v25;
  unsigned __int8 *v26;
  const char *v27;
  __int16 v28;

  v26 = (unsigned __int8 *)a3;
  v8 = (_QWORD *)((char *)a3 - 16);
  v9 = *((_QWORD *)a3 - 2);
  if ((v9 & 2) != 0)
  {
    if (*((_DWORD *)a3 - 6) == 2)
    {
      v10 = (_QWORD *)*((_QWORD *)a3 - 4);
      return v10[1];
    }
  }
  else if ((*((_QWORD *)a3 - 2) & 0x3C0) == 0x80)
  {
    v10 = &v8[-((v9 >> 2) & 0xF)];
    return v10[1];
  }
  v12 = 0;
  if (a5)
    v13 = 3;
  else
    v13 = 1;
  if (a5)
    v14 = 3;
  else
    v14 = 2;
  v15 = (v9 >> 6) & 0xF;
  v16 = &v8[-((v9 >> 2) & 0xF)];
  while (1)
  {
    v17 = v13 + v12;
    if ((v9 & 2) != 0)
    {
      v18 = (_QWORD *)*((_QWORD *)a3 - 4);
      if (v17 >= *((_DWORD *)a3 - 6))
      {
        v15 = *((_DWORD *)a3 - 6);
        goto LABEL_25;
      }
    }
    else
    {
      v18 = &v8[-((v9 >> 2) & 0xF)];
      if (v17 >= v15)
      {
        v18 = &v8[-((v9 >> 2) & 0xF)];
LABEL_25:
        v19 = v15 - v14;
        v20 = v18[v15 - v14 + 1];
LABEL_26:
        llvm::APInt::operator-=((uint64_t)a4, (_QWORD **)(*(_QWORD *)(v20 + 128) + 24));
        if ((*v8 & 2) != 0)
          v21 = (_QWORD *)*((_QWORD *)a3 - 4);
        else
          v21 = &v8[-((*v8 >> 2) & 0xFLL)];
        return v21[v19];
      }
    }
    if ((int)llvm::APInt::compare((llvm::APInt *)(*(_QWORD *)(v18[v13 + v12 + 1] + 128) + 24), a4) >= 1)
      break;
    v12 += v14;
  }
  if (v12)
  {
    v19 = v13 - v14 + v12;
    if ((v9 & 2) != 0)
      v16 = (_QWORD *)*((_QWORD *)a3 - 4);
    v20 = v16[v19 + 1];
    goto LABEL_26;
  }
  v24 = a4;
  v25 = a2;
  v22 = *this;
  if (*this)
  {
    v27 = "Could not find TBAA parent in struct type node";
    v28 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(v22, (const llvm::Twine *)&v27, &v25, &v26, &v24);
  }
  return 0;
}

uint64_t llvm::TBAAVerifier::visitTBAAMetadata(llvm::raw_ostream ***this, llvm::Instruction *a2, const llvm::MDNode *a3)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *FieldNodeFromTBAABaseNode;
  unint64_t *v16;
  llvm::raw_ostream **v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t *v28;
  llvm::raw_ostream **v29;
  const char *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  llvm::APInt *v35;
  unsigned int v36;
  int v37;
  unint64_t *v38;
  llvm::raw_ostream **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  BOOL isValidScalarTBAANode;
  unsigned int v52;
  _QWORD *v53;
  char v54;
  _QWORD *v55;
  llvm::raw_ostream **v56;
  const char *v57;
  llvm::raw_ostream **v58;
  llvm::APInt *v59;
  unsigned int v60;
  const llvm::Value *v61;
  const llvm::Value *v62;
  const llvm::Value *v63;
  uint64_t v64;
  int v65;
  _WORD v66[16];
  _QWORD *v67;
  unsigned int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  const llvm::Value *v71[2];
  char v72;
  __int16 v73;

  v70 = (unsigned __int8 *)a3;
  v5 = *((unsigned __int8 *)a2 + 16) - 60;
  v6 = v5 > 0x1C;
  v7 = (1 << v5) & 0x11000033;
  if (v6 || v7 == 0)
  {
    v71[0] = a2;
    v17 = *this;
    if (!*this)
      return 0;
    v18 = "This instruction shall not have a TBAA access tag!";
    goto LABEL_22;
  }
  v11 = (unint64_t *)((char *)a3 - 16);
  v10 = *((_QWORD *)a3 - 2);
  if ((v10 & 2) != 0)
    v12 = (unint64_t *)*((_QWORD *)a3 - 4);
  else
    v12 = &v11[-((v10 >> 2) & 0xF)];
  if (!llvm::MDNode::classof((_BYTE *)*v12))
    goto LABEL_20;
  v13 = *v11;
  if ((*v11 & 2) == 0)
  {
    if ((*v11 & 0x3C0) > 0x80)
    {
      v14 = (unsigned __int8 **)&v11[-((v13 >> 2) & 0xF)];
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  if (*((_DWORD *)a3 - 6) <= 2u)
  {
LABEL_20:
    v71[0] = a2;
    v17 = *this;
    if (!*this)
      return 0;
    v18 = "Old-style TBAA is no longer allowed, use struct-path TBAA instead";
LABEL_22:
    v62 = (const llvm::Value *)v18;
    v66[0] = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v17, (const llvm::Twine *)&v62, v71);
    return 0;
  }
  v14 = (unsigned __int8 **)*((_QWORD *)a3 - 4);
LABEL_14:
  FieldNodeFromTBAABaseNode = *v14;
  if (*v14)
  {
    if (!llvm::MDNode::classof(*v14))
      FieldNodeFromTBAABaseNode = 0;
    v13 = *v11;
  }
  if ((v13 & 2) != 0)
    v16 = (unint64_t *)*((_QWORD *)a3 - 4);
  else
    v16 = &v11[-((v13 >> 2) & 0xF)];
  v21 = (unsigned __int8 *)v16[1];
  if (!v21 || (llvm::MDNode::classof((_BYTE *)v16[1]) & 1) == 0)
  {
    v21 = 0;
    v69 = 0;
    goto LABEL_34;
  }
  v69 = v21;
  v22 = *((_QWORD *)v21 - 2);
  if ((v22 & 2) != 0)
  {
    if (*((_DWORD *)v21 - 6) >= 3u)
    {
      v23 = (unsigned __int8 *)*((_QWORD *)v21 - 4);
      goto LABEL_45;
    }
LABEL_34:
    v24 = *v11;
    if ((*v11 & 2) != 0)
      v25 = *((_DWORD *)a3 - 6);
    else
      v25 = (v24 >> 6) & 0xF;
    if (v25 >= 5)
    {
      v71[0] = a2;
      v29 = *this;
      if (!*this)
        return 0;
      v30 = "Struct tag metadata must have either 3 or 4 operands";
LABEL_91:
      v62 = (const llvm::Value *)v30;
      v66[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v29, (const llvm::Twine *)&v62, v71, &v70);
      return 0;
    }
    v26 = 0;
    v27 = 3;
    if ((v24 & 2) != 0)
      goto LABEL_56;
    goto LABEL_39;
  }
  if ((*((_QWORD *)v21 - 2) & 0x3C0uLL) < 0xC0)
    goto LABEL_34;
  v23 = &v21[-8 * ((v22 >> 2) & 0xF) - 16];
LABEL_45:
  if (!*(_QWORD *)v23 || !llvm::MDNode::classof(*(_BYTE **)v23))
    goto LABEL_34;
  v24 = *v11;
  if ((*v11 & 2) != 0)
  {
    if ((*((_DWORD *)a3 - 6) & 0xFFFFFFFE) == 4)
    {
      v31 = (unint64_t *)*((_QWORD *)a3 - 4);
      goto LABEL_52;
    }
LABEL_68:
    v62 = a2;
    llvm::TBAAVerifier::CheckFailed<char const(&)[53],llvm::Instruction *,llvm::MDNode const*&>(*this, "Access tag metadata must have either 4 or 5 operands", &v62, &v70);
    return 0;
  }
  if ((v24 & 0x380 | 0x40) != 0x140)
    goto LABEL_68;
  v31 = &v11[-((v24 >> 2) & 0xF)];
LABEL_52:
  v32 = v31[3];
  if (!v32 || *(_BYTE *)v32 != 1 || *(_BYTE *)(*(_QWORD *)(v32 + 128) + 16) != 16)
  {
    v71[0] = a2;
    v29 = *this;
    if (!*this)
      return 0;
    v30 = "Access size field must be a constant";
    goto LABEL_91;
  }
  v27 = 4;
  v26 = 1;
  if ((v24 & 2) != 0)
  {
LABEL_56:
    if (*((_DWORD *)a3 - 6) != v27 + 1)
      goto LABEL_73;
    v28 = (unint64_t *)*((_QWORD *)a3 - 4);
    goto LABEL_58;
  }
LABEL_39:
  if (((v24 >> 6) & 0xF) != v27 + 1)
    goto LABEL_73;
  v28 = &v11[-((v24 >> 2) & 0xF)];
LABEL_58:
  v33 = v28[v27];
  if (!v33 || *(_BYTE *)v33 != 1 || (v34 = *(_QWORD *)(v33 + 128), *(_BYTE *)(v34 + 16) != 16))
  {
    v71[0] = a2;
    v29 = *this;
    if (!*this)
      return 0;
    v30 = "Immutability tag on struct tag metadata must be a constant";
    goto LABEL_91;
  }
  v35 = (llvm::APInt *)(v34 + 24);
  v36 = *(_DWORD *)(v34 + 32);
  if (v36 <= 0x40)
  {
    if (*(_QWORD *)v35 < 2uLL)
      goto LABEL_73;
    goto LABEL_71;
  }
  v37 = llvm::APInt::countLeadingZerosSlowCase(v35);
  if (v37 != v36 && v37 != v36 - 1)
  {
LABEL_71:
    v71[0] = a2;
    v29 = *this;
    if (!*this)
      return 0;
    v30 = "Immutability part of the struct tag metadata must be either 0 or 1";
    goto LABEL_91;
  }
LABEL_73:
  if (!FieldNodeFromTBAABaseNode || !v21)
  {
    v39 = *this;
    if (v39)
    {
      v62 = (const llvm::Value *)"Malformed struct tag metadata: base and access-type should be non-null and point to Metadata nodes";
      v66[0] = 259;
      llvm::VerifierSupport::CheckFailed(v39, (const llvm::Twine *)&v62);
      if (*v39)
      {
        llvm::VerifierSupport::Write(v39, a2);
        llvm::VerifierSupport::Write((llvm::raw_ostream *)v39, (unsigned __int8 *)a3);
        llvm::VerifierSupport::Write((llvm::raw_ostream *)v39, FieldNodeFromTBAABaseNode);
        llvm::VerifierSupport::Write((llvm::raw_ostream *)v39, v21);
      }
    }
    return 0;
  }
  if ((v26 & 1) == 0)
  {
    if (!llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, (const llvm::MDNode *)v21))
    {
      v62 = a2;
      llvm::TBAAVerifier::CheckFailed<char const(&)[45],llvm::Instruction *,llvm::MDNode const*&,llvm::MDNode*&>(*this, &v62, &v70, &v69);
      return 0;
    }
    v24 = *v11;
  }
  if ((v24 & 2) != 0)
    v38 = (unint64_t *)*((_QWORD *)a3 - 4);
  else
    v38 = &v11[-((v24 >> 2) & 0xF)];
  v40 = v38[2];
  if (!v40 || *(_BYTE *)v40 != 1 || (v41 = *(_QWORD *)(v40 + 128), *(_BYTE *)(v41 + 16) != 16))
  {
    v71[0] = a2;
    v29 = *this;
    if (*this)
    {
      v30 = "Offset must be constant integer";
      goto LABEL_91;
    }
    return 0;
  }
  v42 = *(unsigned int *)(v41 + 32);
  v68 = v42;
  if (v42 > 0x40)
  {
    v44 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
    v43 = (void *)operator new[]();
    memcpy(v43, *(const void **)(v41 + 24), v44);
  }
  else
  {
    v43 = *(void **)(v41 + 24);
  }
  v45 = 0;
  v67 = v43;
  v62 = (const llvm::Value *)v66;
  v63 = (const llvm::Value *)v66;
  v64 = 4;
  v65 = 0;
  do
  {
    v46 = *((_QWORD *)FieldNodeFromTBAABaseNode - 2);
    v47 = (v46 & 2) != 0 ? *((_DWORD *)FieldNodeFromTBAABaseNode - 6) : (v46 >> 6) & 0xF;
    if (v47 < 2)
      break;
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v62, FieldNodeFromTBAABaseNode, (uint64_t)v71);
    if (!v72)
    {
      v61 = a2;
      v56 = *this;
      if (!*this)
        goto LABEL_132;
      v57 = "Cycle detected in struct path";
      goto LABEL_128;
    }
    v48 = llvm::TBAAVerifier::verifyTBAABaseNode((llvm::TBAAVerifier *)this, a2, (const llvm::MDNode *)FieldNodeFromTBAABaseNode, v26);
    v49 = HIDWORD(v48);
    v60 = HIDWORD(v48);
    if ((_BYTE)v48)
      goto LABEL_132;
    v50 = FieldNodeFromTBAABaseNode == v69;
    isValidScalarTBAANode = llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, (const llvm::MDNode *)FieldNodeFromTBAABaseNode);
    v52 = v68;
    if (isValidScalarTBAANode || FieldNodeFromTBAABaseNode == v69)
    {
      if (v68 >= 0x41)
      {
        if (v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v67) > 0x40)
          goto LABEL_129;
        v53 = v67;
      }
      else
      {
        v53 = &v67;
      }
      if (*v53)
      {
LABEL_129:
        v61 = a2;
        v59 = (llvm::APInt *)&v67;
        v58 = *this;
        if (*this)
        {
          v71[0] = (const llvm::Value *)"Offset not zero at the point of scalar access";
          v73 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(v58, (const llvm::Twine *)v71, &v61, &v70, &v59);
        }
        goto LABEL_132;
      }
    }
    if (v52 != (_DWORD)v49)
    {
      if ((_DWORD)v49)
      {
        if ((_DWORD)v49 == -1)
          v54 = v26;
        else
          v54 = 0;
        if ((v54 & 1) == 0)
          goto LABEL_131;
      }
      else
      {
        if (v52 >= 0x41)
        {
          if (v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v67) > 0x40)
            goto LABEL_131;
          v55 = v67;
        }
        else
        {
          v55 = &v67;
        }
        if (*v55)
        {
LABEL_131:
          v71[0] = a2;
          LODWORD(v61) = v52;
          llvm::TBAAVerifier::CheckFailed<char const(&)[55],llvm::Instruction *,llvm::MDNode const*&,unsigned int &,unsigned int>(*this, v71, &v70, &v60, (unsigned int *)&v61);
          goto LABEL_132;
        }
      }
    }
    v45 |= v50;
    if ((v26 & v45 & 1) != 0)
      goto LABEL_123;
    FieldNodeFromTBAABaseNode = (unsigned __int8 *)llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode(this, a2, (const llvm::MDNode *)FieldNodeFromTBAABaseNode, (llvm::APInt *)&v67, v26);
  }
  while (FieldNodeFromTBAABaseNode);
  if ((v45 & 1) != 0)
  {
LABEL_123:
    v19 = 1;
    goto LABEL_133;
  }
  v61 = a2;
  v56 = *this;
  if (*this)
  {
    v57 = "Did not see access type in access path!";
LABEL_128:
    v71[0] = (const llvm::Value *)v57;
    v73 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(v56, (const llvm::Twine *)v71, &v61, &v70);
  }
LABEL_132:
  v19 = 0;
LABEL_133:
  if (v63 != v62)
    free(v63);
  if (v68 >= 0x41 && v67)
    MEMORY[0x24BD1B380](v67, 0x1000C8000313F17);
  return v19;
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[53],llvm::Instruction *,llvm::MDNode const*&>(llvm::raw_ostream **a1, _BYTE *a2, const llvm::Value **a3, unsigned __int8 **a4)
{
  char v4;
  _BYTE *v5;
  char v6;
  char v7;

  if (a1)
  {
    v4 = 1;
    v7 = 1;
    if (*a2)
    {
      v5 = a2;
      v4 = 3;
    }
    v6 = v4;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(a1, (const llvm::Twine *)&v5, a3, a4);
  }
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[45],llvm::Instruction *,llvm::MDNode const*&,llvm::MDNode*&>(llvm::raw_ostream **a1, const llvm::Value **a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  const char *v8;
  __int16 v9;

  if (a1)
  {
    v8 = "Access type node must be a valid scalar type";
    v9 = 259;
    llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)&v8);
    if (*a1)
    {
      if (*a2)
        llvm::VerifierSupport::Write(a1, *a2);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
    }
  }
}

void llvm::TBAAVerifier::CheckFailed<char const(&)[55],llvm::Instruction *,llvm::MDNode const*&,unsigned int &,unsigned int>(llvm::raw_ostream **a1, const llvm::Value **a2, unsigned __int8 **a3, unsigned int *a4, unsigned int *a5)
{
  const char *v10;
  __int16 v11;

  if (a1)
  {
    v10 = "Access bit-width not the same as description bit-width";
    v11 = 259;
    llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)&v10);
    if (*a1)
    {
      if (*a2)
        llvm::VerifierSupport::Write(a1, *a2);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
      llvm::VerifierSupport::Write(*a1, *a4);
      llvm::VerifierSupport::Write(*a1, *a5);
    }
  }
}

void `anonymous namespace'::Verifier::visitGlobalValue(llvm::raw_ostream **this, const llvm::GlobalValue *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  unsigned __int8 *Metadata;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  char *v15;
  char *v16;
  llvm::Value *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v22;
  char hasExternalWeakLinkage;
  unsigned int i;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  const llvm::Value *v30;
  uint64_t v31;
  llvm::raw_ostream **v32;
  const llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  const llvm::Value *v36;
  unsigned __int8 *v37;
  const llvm::Value *v38[2];
  char v39;
  __int16 v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[16];
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v4 != 3)
      goto LABEL_12;
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_16;
    v5 = *((_DWORD *)a2 + 8);
  }
  else
  {
    if (*((const llvm::GlobalValue **)a2 + 9) != (const llvm::GlobalValue *)((char *)a2 + 72))
      goto LABEL_16;
    v5 = *((_DWORD *)a2 + 8);
    if ((v5 & 0x1000000) != 0)
      goto LABEL_16;
  }
  v6 = v5 & 0xF;
  if (v6)
    v7 = v6 == 9;
  else
    v7 = 1;
  if (!v7)
  {
    v16 = "Global is external, but doesn't have external or weak linkage!";
LABEL_82:
    v41 = v16;
    v44 = 259;
    v38[0] = a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v41, v38);
    return;
  }
LABEL_12:
  if (v4 > 3 || v4 == 1)
    goto LABEL_42;
LABEL_16:
  v38[0] = a2;
  v9 = (*((_DWORD *)a2 + 8) >> 17) & 0x3F;
  if (v9 && (v9 - 1) >= 0x21u)
  {
    v41 = "huge alignment values are unsupported";
    v44 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v41);
    if (*this)
      llvm::VerifierSupport::Write(this, a2);
    return;
  }
  Metadata = (unsigned __int8 *)llvm::Value::getMetadata(a2, 22);
  v37 = Metadata;
  if (!Metadata)
    goto LABEL_42;
  v11 = Metadata;
  v12 = *((_QWORD *)Metadata - 2);
  if ((v12 & 2) != 0)
  {
    if (*((_DWORD *)Metadata - 6) == 1)
    {
      v13 = (unsigned __int8 *)*((_QWORD *)Metadata - 4);
      goto LABEL_26;
    }
LABEL_29:
    v41 = "associated metadata must have one operand";
    v44 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v41);
    if (*this)
    {
      llvm::VerifierSupport::Write(this, a2);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v11);
    }
    return;
  }
  if ((*((_QWORD *)Metadata - 2) & 0x3C0) != 0x40)
    goto LABEL_29;
  v13 = &Metadata[-8 * ((v12 >> 2) & 0xF) - 16];
LABEL_26:
  v14 = *(unsigned __int8 **)v13;
  if (!v14)
  {
    v15 = "associated metadata must have a global value";
    goto LABEL_32;
  }
  if (*v14 - 3 <= 0xFFFFFFFD)
  {
    v15 = "associated metadata must be ValueAsMetadata";
LABEL_32:
    v41 = v15;
    v44 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(this, (const llvm::Twine *)&v41, v38, &v37);
    return;
  }
  v17 = (llvm::Value *)*((_QWORD *)v14 + 16);
  if (*(_BYTE *)(*(_QWORD *)v17 + 8) != 15)
  {
    v41 = "associated value must be pointer typed";
    v44 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::GlobalValue,llvm::MDNode const*>(this, (const llvm::Twine *)&v41, a2, &v37);
    return;
  }
  v18 = (unsigned __int8 *)llvm::Value::stripPointerCastsAndAliases(v17);
  v36 = (const llvm::Value *)v18;
  v19 = v18[16];
  if ((v19 > 3 || v19 == 1) && v19 >= 0x15)
  {
    v41 = "associated metadata must point to a GlobalObject";
    v44 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v41, v38, &v36);
    return;
  }
  if (v18 == (unsigned __int8 *)a2)
  {
    v15 = "global values should not associate to themselves";
    goto LABEL_32;
  }
LABEL_42:
  v22 = *((_DWORD *)a2 + 8);
  if ((v22 & 0xF) != 1)
  {
    if ((v22 & 0xF) == 6)
    {
      if (*((_BYTE *)a2 + 16) != 3)
      {
        v16 = "Only global variables can have appending linkage!";
        goto LABEL_82;
      }
      v38[0] = a2;
      if (*(_BYTE *)(*((_QWORD *)a2 + 3) + 8) != 17)
      {
        v41 = "Only global arrays can have appending linkage!";
        v44 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v41, v38);
        return;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + 16))
      {
        if ((v22 & 0x1000000) != 0
          || *((const llvm::GlobalValue **)a2 + 9) != (const llvm::GlobalValue *)((char *)a2 + 72))
        {
          goto LABEL_57;
        }
        goto LABEL_54;
      }
      if (*((_BYTE *)a2 + 16) != 3)
        goto LABEL_57;
    }
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_57;
  }
LABEL_54:
  if (llvm::GlobalValue::getComdat(a2))
  {
    v16 = "Declaration may not be in a Comdat!";
    goto LABEL_82;
  }
  v22 = *((_DWORD *)a2 + 8);
LABEL_57:
  if ((v22 & 0x300) == 0x100)
  {
    if ((v22 & 0x30) != 0)
    {
      v16 = "dllimport GlobalValue must have default visibility";
      goto LABEL_82;
    }
    if ((v22 & 0x4000) != 0)
    {
      v16 = "GlobalValue with DLLImport Storage is dso_local!";
      goto LABEL_82;
    }
    if (*((_BYTE *)a2 + 16))
    {
      if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_73;
    }
    else if ((v22 & 0x1000000) == 0
           && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72))
    {
LABEL_73:
      if ((v22 & 0xF) == 0)
        goto LABEL_76;
      hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(a2);
      v22 = *((_DWORD *)a2 + 8);
      if ((hasExternalWeakLinkage & 1) != 0)
        goto LABEL_76;
    }
    if ((v22 & 0xF) != 1)
    {
      v16 = "Global is marked as dllimport, but not external";
      goto LABEL_82;
    }
    goto LABEL_76;
  }
  if ((v22 & 0x300) == 0x200 && (v22 & 0x30) == 0x10)
  {
    v16 = "dllexport GlobalValue must have default or protected visibility";
    goto LABEL_82;
  }
LABEL_76:
  if ((v22 & 0xFu) - 7 < 2)
    goto LABEL_80;
  if ((v22 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(a2) & 1) == 0)
  {
    v22 = *((_DWORD *)a2 + 8);
LABEL_80:
    if ((v22 & 0x4000) == 0)
    {
      v16 = "GlobalValue with local linkage or non-default visibility must be dso_local!";
      goto LABEL_82;
    }
  }
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(this + 194), a2, (uint64_t)&v41);
  if (!v43[0])
    return;
  v41 = v43;
  v42 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>((unsigned int *)&v41, (uint64_t)v43, *((_QWORD *)a2 + 1));
  for (i = v42; (_DWORD)v42; i = v42)
  {
    v25 = *((_QWORD *)v41 + i - 1);
    LODWORD(v42) = i - 1;
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(this + 194), (const void *)v25, (uint64_t)v38);
    if (v39)
    {
      v26 = *(unsigned __int8 *)(v25 + 16);
      if (v25)
        v27 = v26 >= 0x1C;
      else
        v27 = 0;
      if (v27)
      {
        v29 = *(_QWORD *)(v25 + 40);
        if (!v29 || (v30 = *(const llvm::Value **)(v29 + 56)) == 0)
        {
          v38[0] = (const llvm::Value *)"Global is referenced by parentless instruction!";
          v40 = 259;
          v34 = (uint64_t)this[1];
          llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v38);
          if (*this)
          {
            llvm::VerifierSupport::Write(this, a2);
            llvm::VerifierSupport::Write(*this, v34);
            llvm::VerifierSupport::Write(this, (const llvm::Value *)v25);
          }
          continue;
        }
        v31 = (uint64_t)this[1];
        if (*((_QWORD *)v30 + 5) != v31)
        {
          v37 = (unsigned __int8 *)*((_QWORD *)v30 + 5);
          v38[0] = (const llvm::Value *)"Global is referenced in a different module!";
          v40 = 259;
          llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v38);
          if (*this)
          {
            llvm::VerifierSupport::Write(this, a2);
            llvm::VerifierSupport::Write(*this, v31);
            llvm::VerifierSupport::Write(this, (const llvm::Value *)v25);
            v32 = this;
            v33 = v30;
LABEL_106:
            llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Module const*>(v32, v33, (uint64_t *)&v37);
          }
        }
      }
      else
      {
        if (v25)
          v28 = v26 == 0;
        else
          v28 = 0;
        if (v28)
        {
          v35 = (uint64_t)this[1];
          if (*(_QWORD *)(v25 + 40) == v35)
            continue;
          v37 = *(unsigned __int8 **)(v25 + 40);
          v38[0] = (const llvm::Value *)"Global is used by function in a different module";
          v40 = 259;
          llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v38);
          if (!*this)
            continue;
          llvm::VerifierSupport::Write(this, a2);
          llvm::VerifierSupport::Write(*this, v35);
          v32 = this;
          v33 = (const llvm::Value *)v25;
          goto LABEL_106;
        }
        llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>((unsigned int *)&v41, (uint64_t)v41 + 8 * v42, *(_QWORD *)(v25 + 8));
      }
    }
  }
  if (v41 != v43)
    free(v41);
}

void llvm::VerifierSupport::CheckFailed<llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
  }
}

void `anonymous namespace'::Verifier::verifyFunctionAttrs(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4, char a5, char a6)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  llvm::Type *v27;
  _BYTE *v28;
  int v29;
  unsigned int v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  llvm::raw_ostream *v40;
  std::string *v41;
  size_t size;
  _BYTE *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  llvm::raw_ostream **v48;
  llvm::raw_ostream **v49;
  const char *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  llvm::AttributeSetNode *v55;
  uint64_t AllocSizeArgs;
  uint64_t v57;
  unsigned int v58;
  char v59;
  char AllocKind;
  uint64_t v61;
  uint64_t v62;
  llvm::AttributeSetNode *v63;
  unsigned int VScaleRangeMin;
  llvm::AttributeSetNode *v65;
  uint64_t VScaleRangeMax;
  unint64_t *v67;
  uint64_t *v68;
  uint64_t Attribute;
  uint64_t v70;
  llvm::Value **v71;
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  llvm::raw_ostream **v78;
  std::string v79;
  std::string v80;
  uint64_t v81;
  uint64_t *v82[2];
  llvm::Value **v83;
  uint64_t v84;
  __int16 v85;
  llvm::Value *v86;
  uint64_t v87;
  llvm::AttributeSetNode *v88;
  std::string v89;

  v87 = a2;
  v88 = (llvm::AttributeSetNode *)a3;
  v86 = a4;
  if (!a3)
    return;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(a1 + 1264), (const void *)a3, (uint64_t)v82);
  if ((_BYTE)v83)
  {
    if (!llvm::AttributeList::hasParentContext((uint64_t)&v88, *(_QWORD **)(a1 + 184)))
    {
      v82[0] = (uint64_t *)"Attribute list does not match Module context!";
      v85 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v82);
      if (!*(_QWORD *)a1)
        return;
      llvm::AttributeList::print(&v88, *(llvm::raw_ostream **)a1);
      goto LABEL_86;
    }
    v10 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v10)
    {
      v11 = (uint64_t *)(a3 + 40);
      v12 = a3 + 40 + 8 * v10;
      while (1)
      {
        if (*v11)
        {
          if (!llvm::AttributeSet::hasParentContext((uint64_t)v11, *(_QWORD **)(a1 + 184)))
          {
            v82[0] = (uint64_t *)"Attribute set does not match Module context!";
            v85 = 259;
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
            llvm::VerifierSupport::CheckFailed<llvm::AttributeSet const*,llvm::Value const*>((llvm::raw_ostream **)a1, (const llvm::Twine *)v82, (llvm::AttributeSetNode ***)&v89, &v86);
            return;
          }
          v13 = *v11;
          if (*v11)
          {
            v14 = *(unsigned int *)(v13 + 8);
            if ((_DWORD)v14)
              break;
          }
        }
LABEL_13:
        if (++v11 == (uint64_t *)v12)
          goto LABEL_14;
      }
      v15 = (uint64_t *)(v13 + 48);
      v16 = 8 * v14;
      while (llvm::Attribute::hasParentContext(v15, *(_QWORD **)(a1 + 184)))
      {
        ++v15;
        v16 -= 8;
        if (!v16)
          goto LABEL_13;
      }
      v82[0] = (uint64_t *)"Attribute does not match Module context!";
      v85 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v82);
      v40 = *(llvm::raw_ostream **)a1;
      if (!*(_QWORD *)a1)
        return;
      llvm::Attribute::getAsString((llvm::Attribute *)v15, 0, &v89);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v89;
      else
        v41 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      else
        size = v89.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v40, (const char *)v41, size);
      v43 = (_BYTE *)*((_QWORD *)v40 + 4);
      if ((unint64_t)v43 >= *((_QWORD *)v40 + 3))
      {
        llvm::raw_ostream::write(v40, 10);
      }
      else
      {
        *((_QWORD *)v40 + 4) = v43 + 1;
        *v43 = 10;
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
LABEL_86:
      if (v86)
        llvm::VerifierSupport::Write((llvm::raw_ostream **)a1, v86);
      return;
    }
  }
LABEL_14:
  v73 = a6;
  if (*(_DWORD *)(a3 + 8) < 2u)
  {
    v17 = 0;
  }
  else
  {
    v17 = *(_QWORD *)(a3 + 48);
    if (v17)
    {
      v18 = *(unsigned int *)(v17 + 8);
      if ((_DWORD)v18)
      {
        v19 = (uint64_t *)(v17 + 48);
        v20 = 8 * v18;
        while (1)
        {
          v21 = *v19;
          v81 = v21;
          if (!v21)
            goto LABEL_21;
          if (*(_BYTE *)(v21 + 8) != 2)
            break;
LABEL_22:
          ++v19;
          v20 -= 8;
          if (!v20)
            goto LABEL_27;
        }
        LODWORD(v21) = *(_DWORD *)(v21 + 12);
LABEL_21:
        if ((AttrPropTable[(v21 - 1)] & 4) == 0)
        {
          llvm::Attribute::getAsString((llvm::Attribute *)&v81, 0, &v79);
          v44 = std::string::insert(&v79, 0, "Attribute '");
          v45 = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v80.__r_.__value_.__r.__words[2] = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          v46 = std::string::append(&v80, "' does not apply to function return values");
          v47 = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v85 = 260;
          v82[0] = (uint64_t *)&v89;
          v48 = (llvm::raw_ostream **)a1;
          goto LABEL_108;
        }
        goto LABEL_22;
      }
    }
  }
LABEL_27:
  v78 = (llvm::raw_ostream **)a1;
  v22 = *(_DWORD *)(a2 + 12);
  v23 = (v22 - 1);
  if (v22 != 1)
  {
    v24 = 0;
    v25 = 0;
    v75 = 0;
    v74 = 0;
    v76 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *(llvm::Type **)(*(_QWORD *)(a2 + 16) + 8 * v24 + 8);
      if ((v24 + 2) >= *(_DWORD *)(a3 + 8))
        break;
      v28 = *(_BYTE **)(a3 + 40 + 8 * (v24 + 2));
      if ((a5 & 1) != 0)
      {
        if (!v28)
          goto LABEL_54;
      }
      else
      {
        if (!v28)
          break;
        if ((v28[13] & 4) != 0)
        {
          v50 = "immarg attribute only applies to intrinsics";
          goto LABEL_115;
        }
        if ((v73 & 1) == 0 && (char)v28[20] < 0)
        {
          v50 = "Attribute 'elementtype' can only be applied to intrinsics and inline asm.";
LABEL_115:
          v82[0] = (uint64_t *)v50;
          v85 = 259;
          v49 = v78;
LABEL_116:
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v49, (const llvm::Twine *)v82, &v86);
          return;
        }
      }
      v29 = v26;
      v30 = v28[14] & 2;
      if ((v25 & (v30 >> 1)) == 1)
      {
        v50 = "More than one parameter has attribute nest!";
        goto LABEL_115;
      }
      if ((v28[17] & 0x40) != 0)
      {
        if ((v75 & 1) != 0)
        {
          v50 = "More than one parameter has attribute returned!";
          goto LABEL_115;
        }
        if (!llvm::Type::canLosslesslyBitCastTo(v27, **(llvm::Type ***)(a2 + 16)))
        {
          v50 = "Incompatible argument and return types for 'returned' attribute";
          goto LABEL_115;
        }
        LOBYTE(v75) = 1;
      }
      if ((v28[21] & 4) != 0)
      {
        if ((v74 & 1) != 0)
        {
          v50 = "Cannot have multiple 'sret' parameters!";
          goto LABEL_115;
        }
        if (v24 >= 2)
        {
          v50 = "Attribute 'sret' is not on first or second parameter!";
          goto LABEL_115;
        }
        v74 = 1;
      }
      v31 = v28[20];
      if ((v76 & ((v31 & 2) >> 1)) == 1)
      {
        v50 = "Cannot have multiple 'swiftself' parameters!";
        goto LABEL_115;
      }
      v32 = (char)v28[19] < 0;
      if ((v32 & HIDWORD(v75)) == 1)
      {
        v50 = "Cannot have multiple 'swiftasync' parameters!";
        goto LABEL_115;
      }
      if ((v31 & v29 & 1) != 0)
      {
        v50 = "Cannot have multiple 'swifterror' parameters!";
        goto LABEL_115;
      }
      v25 |= v30 >> 1;
      v26 = v31 | v29;
      HIDWORD(v75) |= v32;
      v76 |= (v31 & 2) >> 1;
      if ((v28[21] & 1) != 0 && v24 != *(_DWORD *)(a2 + 12) - 2)
      {
        v50 = "inalloca isn't on the last parameter!";
        goto LABEL_115;
      }
LABEL_54:
      if (v23 == ++v24)
        goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  if (!*(_DWORD *)(a3 + 8))
    return;
  v33 = *(_QWORD *)(a3 + 40);
  if (!v33)
    return;
  if (!*(_DWORD *)(a3 + 8) || (v34 = *(_QWORD *)(a3 + 40)) == 0 || (v35 = *(unsigned int *)(v34 + 8), !(_DWORD)v35))
  {
LABEL_66:
    if ((*(_BYTE *)(a3 + 15) & 4) != 0)
    {
      if ((*(_BYTE *)(a3 + 12) & 8) != 0)
      {
        v39 = "Attributes 'noinline and alwaysinline' are incompatible!";
        goto LABEL_97;
      }
      if ((*(_BYTE *)(a3 + 17) & 4) != 0)
      {
        if ((*(_BYTE *)(a3 + 17) & 2) != 0)
        {
          v39 = "Attributes 'optsize and optnone' are incompatible!";
          goto LABEL_97;
        }
        if ((*(_BYTE *)(a3 + 13) & 0x40) != 0)
        {
          v39 = "Attributes 'minsize and optnone' are incompatible!";
          goto LABEL_97;
        }
      }
    }
    else if ((*(_BYTE *)(a3 + 17) & 4) != 0)
    {
      v39 = "Attribute 'optnone' requires 'noinline'!";
LABEL_97:
      v82[0] = (uint64_t *)v39;
      v85 = 259;
      v49 = v78;
      goto LABEL_116;
    }
    if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_sm_enabled", (unint64_t *)0x19)&& llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_sm_compatible", (unint64_t *)0x1C))
    {
      v39 = "Attributes 'aarch64_pstate_sm_enabled and aarch64_pstate_sm_compatible' are incompatible!";
      goto LABEL_97;
    }
    if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_za_new", (unint64_t *)0x15))
    {
      if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_za_preserved", (unint64_t *)0x1B))
      {
        v39 = "Attributes 'aarch64_pstate_za_new and aarch64_pstate_za_preserved' are incompatible!";
        goto LABEL_97;
      }
      if (llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"aarch64_pstate_za_shared", (unint64_t *)0x18))
      {
        v39 = "Attributes 'aarch64_pstate_za_new and aarch64_pstate_za_shared' are incompatible!";
        goto LABEL_97;
      }
    }
    if ((*(_BYTE *)(a3 + 13) & 0x20) != 0 && (*((_DWORD *)v86 + 8) & 0xC0) != 0x80)
    {
      v39 = "Attribute 'jumptable' requires 'unnamed_addr'";
      goto LABEL_97;
    }
    if (*(_DWORD *)(a3 + 8))
    {
      v55 = *(llvm::AttributeSetNode **)(a3 + 40);
      if (v55)
      {
        AllocSizeArgs = llvm::AttributeSetNode::getAllocSizeArgs(v55);
        if ((v57 & 0xFF00000000) != 0)
        {
          v58 = HIDWORD(AllocSizeArgs);
          v59 = v57;
          v82[0] = &v87;
          v82[1] = (uint64_t *)v78;
          v83 = &v86;
          {
            return;
          }
        }
      }
    }
    if ((*(_BYTE *)(a3 + 21) & 0x10) != 0)
    {
      AllocKind = llvm::AttributeList::getAllocKind((llvm::AttributeList *)&v88);
      v61 = 0;
      v62 = AllocKind & 7;
      while (qword_24AA49C78[v61] != v62)
      {
        if (++v61 == 3)
        {
          v82[0] = (uint64_t *)"'allockind()' requires exactly one of alloc, realloc, and free";
          v85 = 259;
          llvm::VerifierSupport::CheckFailed(v78, (const llvm::Twine *)v82);
          break;
        }
      }
      if (v62 == 4 && (AllocKind & 0x38) != 0)
      {
        v82[0] = (uint64_t *)"'allockind(\"free\")' doesn't allow uninitialized, zeroed, or aligned modifiers.";
        v85 = 259;
        llvm::VerifierSupport::CheckFailed(v78, (const llvm::Twine *)v82);
      }
      if ((~AllocKind & 0x18) == 0)
      {
        v82[0] = (uint64_t *)"'allockind()' can't be both zeroed and uninitialized";
        v85 = 259;
        llvm::VerifierSupport::CheckFailed(v78, (const llvm::Twine *)v82);
      }
    }
    if ((*(_BYTE *)(a3 + 22) & 0x10) != 0)
    {
      if (*(_DWORD *)(a3 + 8))
      {
        v63 = *(llvm::AttributeSetNode **)(a3 + 40);
        if (v63)
        {
          VScaleRangeMin = llvm::AttributeSetNode::getVScaleRangeMin(v63);
          if (VScaleRangeMin
            || (v82[0] = (uint64_t *)"'vscale_range' minimum must be greater than 0",
                v85 = 259,
                llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v78, (const llvm::Twine *)v82, &v86),
                *(_DWORD *)(a3 + 8)))
          {
            v65 = *(llvm::AttributeSetNode **)(a3 + 40);
            if (v65)
            {
              VScaleRangeMax = llvm::AttributeSetNode::getVScaleRangeMax(v65);
              if ((VScaleRangeMax & 0xFF00000000) != 0 && VScaleRangeMin > VScaleRangeMax)
              {
                v82[0] = (uint64_t *)"'vscale_range' minimum cannot be greater than maximum";
                v85 = 259;
                llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v78, (const llvm::Twine *)v82, &v86);
              }
            }
          }
        }
      }
    }
    if (!llvm::AttributeList::hasAttributeAtIndex((uint64_t *)&v88, -1, (uint64_t)"frame-pointer", (unint64_t *)0xD))goto LABEL_168;
    if (*(_DWORD *)(a3 + 8))
      v68 = *(uint64_t **)(a3 + 40);
    else
      v68 = 0;
    v82[0] = v68;
    Attribute = llvm::AttributeSet::getAttribute((uint64_t *)v82, (uint64_t)"frame-pointer", 13, v67);
    if (Attribute)
    {
      v70 = *(unsigned int *)(Attribute + 16);
      v71 = (llvm::Value **)(Attribute + *(unsigned int *)(Attribute + 12) + 25);
      if ((_DWORD)v70 != 8)
      {
        if ((_DWORD)v70 != 4)
        {
          if ((_DWORD)v70 == 3)
          {
            if (*(_WORD *)v71 == 27745 && *(_BYTE *)(Attribute + *(unsigned int *)(Attribute + 12) + 27) == 108)
              goto LABEL_168;
            v70 = 3;
          }
          goto LABEL_167;
        }
        if (*(_DWORD *)v71 != 1701736302)
        {
          v70 = 4;
          goto LABEL_167;
        }
LABEL_168:
        return;
      }
      if (*v71 == (llvm::Value *)0x6661656C2D6E6F6ELL)
        goto LABEL_168;
      v70 = 8;
    }
    else
    {
      v71 = 0;
      v70 = 0;
    }
LABEL_167:
    v85 = 1283;
    v82[0] = (uint64_t *)"invalid value for 'frame-pointer' attribute: ";
    v83 = v71;
    v84 = v70;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v78, (const llvm::Twine *)v82, &v86);
    goto LABEL_168;
  }
  v36 = (uint64_t *)(v34 + 48);
  v37 = 8 * v35;
  while (1)
  {
    v38 = *v36;
    v81 = v38;
    if (!v38)
      break;
    if (*(_BYTE *)(v38 + 8) != 2)
    {
      LODWORD(v38) = *(_DWORD *)(v38 + 12);
      break;
    }
LABEL_65:
    ++v36;
    v37 -= 8;
    if (!v37)
      goto LABEL_66;
  }
  if ((AttrPropTable[(v38 - 1)] & 1) != 0)
    goto LABEL_65;
  llvm::Attribute::getAsString((llvm::Attribute *)&v81, 0, &v79);
  v51 = std::string::insert(&v79, 0, "Attribute '");
  v52 = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v53 = std::string::append(&v80, "' does not apply to functions!");
  v54 = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  v85 = 260;
  v82[0] = (uint64_t *)&v89;
  v48 = v78;
LABEL_108:
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v48, (const llvm::Twine *)v82, &v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
}

void llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Type *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, llvm::Type **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    llvm::VerifierSupport::Write(a1, *a4);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, const llvm::Value **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
  }
}

void `anonymous namespace'::Verifier::verifySwiftErrorValue(llvm::raw_ostream **this, const llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  const llvm::Value **v7;
  uint64_t v8;
  const llvm::Value **v9;
  int v10;
  const char *v11;
  const llvm::Value *v12;
  const llvm::Value *v13;
  _QWORD v14[4];
  __int16 v15;

  v13 = a2;
  v2 = *((_QWORD *)a2 + 1);
  if (!v2)
    return;
  while (1)
  {
    v5 = *(_QWORD *)(v2 + 24);
    v12 = (const llvm::Value *)v5;
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 <= 0x3C)
    {
      if (v6 == 33)
        goto LABEL_8;
      if (v6 != 60)
        goto LABEL_19;
      goto LABEL_15;
    }
    if (v6 != 61)
    {
      if (v6 != 84)
      {
LABEL_19:
        v11 = "swifterror value can only be loaded and stored from, or as a swifterror argument!";
        goto LABEL_21;
      }
LABEL_8:
      v7 = (const llvm::Value **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
      v8 = llvm::CallBase::arg_end((llvm::CallBase *)v5);
      if (v7 != (const llvm::Value **)v8)
      {
        v9 = (const llvm::Value **)v8;
        v10 = 0;
        while (*v7 != a2 || llvm::CallBase::paramHasAttr((llvm::CallBase *)v5, v10, 64))
        {
          ++v10;
          v7 += 4;
          if (v7 == v9)
            goto LABEL_15;
        }
        v14[0] = "swifterror value when used in a callsite should be marked with swifterror attribute";
        v15 = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v14);
        if (*this)
        {
          llvm::VerifierSupport::Write(this, a2);
          llvm::VerifierSupport::Write(this, (const llvm::Value *)v5);
        }
      }
      goto LABEL_15;
    }
    if (*(const llvm::Value **)(v5 - 32) != a2)
      break;
LABEL_15:
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return;
  }
  v11 = "swifterror value should be the second operand when used by stores";
LABEL_21:
  v14[0] = v11;
  v15 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)v14, &v13, &v12);
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::Module const*,llvm::Function*,llvm::Module*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, uint64_t *a4, const llvm::Value **a5, uint64_t *a6)
{
  llvm::raw_ostream *result;

  llvm::VerifierSupport::CheckFailed(a1, a2);
  result = *a1;
  if (*a1)
  {
    if (*a3)
    {
      llvm::VerifierSupport::Write(a1, *a3);
      result = *a1;
    }
    llvm::VerifierSupport::Write(result, *a4);
    return llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Module const*>(a1, *a5, a6);
  }
  return result;
}

unsigned int *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::clear(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (!v2 && !result[3])
    return result;
  v3 = result[4];
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!(_DWORD)v3)
    {
LABEL_20:
      *((_QWORD *)v1 + 1) = 0;
      return result;
    }
    v8 = 16 * v3;
    result = (unsigned int *)(*(_QWORD *)result + 8);
    while (1)
    {
      v9 = *((_QWORD *)result - 1);
      if (v9 == -8192)
        goto LABEL_18;
      if (v9 != -4096)
        break;
LABEL_19:
      result += 4;
      v8 -= 16;
      if (!v8)
        goto LABEL_20;
    }
    result = (unsigned int *)llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector((uint64_t *)result);
LABEL_18:
    *((_QWORD *)result - 1) = -4096;
    goto LABEL_19;
  }
  result = (unsigned int *)llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll((uint64_t *)result);
  if (!v2)
  {
    if (v1[4])
    {
      result = (unsigned int *)MEMORY[0x24BD1B398](*(_QWORD *)v1, 8);
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
      return result;
    }
    goto LABEL_20;
  }
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v5 = 64;
  else
    v5 = v4;
  if (v5 == v1[4])
  {
    *((_QWORD *)v1 + 1) = 0;
    v6 = 16 * v5;
    v7 = *(_QWORD **)v1;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  else
  {
    MEMORY[0x24BD1B398](*(_QWORD *)v1, 8);
    v10 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
    v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
    v1[4] = v11;
    result = (unsigned int *)operator new(16 * v11, (std::align_val_t)8uLL);
    *(_QWORD *)v1 = result;
    *((_QWORD *)v1 + 1) = 0;
    v12 = v1[4];
    if ((_DWORD)v12)
    {
      v13 = 16 * v12;
      do
      {
        *(_QWORD *)result = -4096;
        result += 4;
        v13 -= 16;
      }
      while (v13);
    }
  }
  return result;
}

void llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
    llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::MDNode *>(a1, *a3, a4);
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
  }
}

void `anonymous namespace'::Verifier::visitMDNode(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  _QWORD v7[2];
  char v8;
  __int16 v9;

  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(a1 + 432), a2, (uint64_t)v7);
  if (v8)
  {
    v4 = a2[1];
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((v4 & 4) != 0)
      v5 = (_QWORD *)*v5;
    if (v5 == *(_QWORD **)(a1 + 184))
      __asm { BR              X10 }
    v6 = (unsigned __int8 *)a2;
    v7[0] = "MDNode context does not match Module context!";
    v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)a1, (const llvm::Twine *)v7, &v6);
  }
}

void sub_24AA0C378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const llvm::DILocation *a10, unsigned __int8 *a11, const char *a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16)
{
  llvm::raw_ostream **v16;
  const llvm::DILocation *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;

  v19 = *((_QWORD *)v17 - 2);
  if ((v19 & 2) != 0)
  {
    v20 = (unsigned __int8 **)*((_QWORD *)v17 - 4);
    v21 = *((unsigned int *)v17 - 6);
    if (!*((_DWORD *)v17 - 6))
    {
LABEL_15:
      if ((*((_BYTE *)v17 + 1) & 0x7F) == 2 || *((_DWORD *)v17 - 2))
        JUMPOUT(0x24AA0C324);
      goto LABEL_22;
    }
  }
  else
  {
    v20 = (unsigned __int8 **)((char *)v17 - 8 * ((v19 >> 2) & 0xF) - 16);
    v21 = (v19 >> 6) & 0xF;
    if (!v21)
      goto LABEL_15;
  }
  v22 = 8 * v21;
  while (1)
  {
    v23 = *v20;
    a11 = v23;
    if (v23)
    {
      v24 = *v23;
      if (v24 == 2)
      {
        a12 = "Invalid operand for global metadata!";
        a16 = 259;
        llvm::VerifierSupport::CheckFailed(v16, (const llvm::Twine *)&a12);
        if (*v16)
        {
          llvm::VerifierSupport::Write((llvm::raw_ostream *)v16, (unsigned __int8 *)v17);
          llvm::VerifierSupport::Write((llvm::raw_ostream *)v16, v23);
        }
LABEL_22:
        JUMPOUT(0x24AA0C340);
      }
      if ((_DWORD)v18 != 1 && v24 == 5)
      {
        a12 = "DILocation not allowed within this metadata node";
        a16 = 259;
        a10 = v17;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(v16, (const llvm::Twine *)&a12, (unsigned __int8 **)&a10, &a11);
        goto LABEL_22;
      }
      if (llvm::MDNode::classof(v23))
      {
      }
      else if (*v23 - 3 >= 0xFFFFFFFE)
      {
      }
    }
    ++v20;
    v22 -= 8;
    if (!v22)
      goto LABEL_15;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Function const*,llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
    llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::MDNode *>(a1, *a3, a4);
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, unsigned __int8 **a3, const llvm::Value **a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::Function>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value *a3)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
    llvm::VerifierSupport::Write(a1, a3);
}

void `anonymous namespace'::Verifier::visitFunction(llvm::Function const&)::$_0::operator()(uint64_t a1, const llvm::Value *a2, unsigned __int8 *a3)
{
  llvm::raw_ostream **v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *InlinedAtScope;
  unsigned __int8 *v11;
  unsigned __int8 *Subprogram;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  const llvm::Value *v15;
  const llvm::Value *v16;
  unsigned __int8 **v17;
  llvm::raw_ostream *v18;
  unsigned __int8 *v19;
  const llvm::Value *v20;
  const llvm::Value *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD v24[2];
  char v25;
  __int16 v26;
  unsigned __int8 *v27;

  if (!a3)
    return;
  if (*a3 != 5)
    return;
  v27 = a3;
  v6 = *(llvm::raw_ostream ***)(a1 + 8);
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(*(llvm::SmallPtrSetImplBase **)a1, a3, (uint64_t)v24);
  if (!v25)
    return;
  v7 = *((_QWORD *)a3 - 2);
  if ((v7 & 2) != 0)
    v8 = (unsigned __int8 *)*((_QWORD *)a3 - 4);
  else
    v8 = &a3[-8 * ((v7 >> 2) & 0xF) - 16];
  v9 = *(unsigned __int8 **)v8;
  if (!*(_QWORD *)v8 || *v9 - 17 >= 3)
  {
    v24[0] = "DILocation's scope must be a DILocalScope";
    v26 = 259;
    v17 = *(unsigned __int8 ***)(a1 + 16);
    v16 = *(const llvm::Value **)(a1 + 24);
    llvm::VerifierSupport::DebugInfoCheckFailed(v6, (const llvm::Twine *)v24);
    if (!*v6)
      return;
    llvm::VerifierSupport::Write((llvm::raw_ostream *)v6, *v17);
    if (v16)
      llvm::VerifierSupport::Write(v6, v16);
    llvm::VerifierSupport::Write(v6, a2);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)v6, a3);
    v18 = (llvm::raw_ostream *)v6;
    v19 = v9;
    goto LABEL_20;
  }
  InlinedAtScope = (unsigned __int8 *)llvm::DILocation::getInlinedAtScope((llvm::DILocation *)a3);
  v23 = InlinedAtScope;
  if (!InlinedAtScope)
  {
    v24[0] = "Failed to find DILocalScope";
    v26 = 259;
    llvm::VerifierSupport::CheckFailed(v6, (const llvm::Twine *)v24);
    if (!*v6)
      return;
    v18 = (llvm::raw_ostream *)v6;
    v19 = a3;
LABEL_20:
    llvm::VerifierSupport::Write(v18, v19);
    return;
  }
  v11 = InlinedAtScope;
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(*(llvm::SmallPtrSetImplBase **)a1, InlinedAtScope, (uint64_t)v24);
  if (v25)
  {
    Subprogram = llvm::DILocalScope::getSubprogram(v11);
    v13 = Subprogram;
    v22 = Subprogram;
    if (!Subprogram
      || v11 == Subprogram
      || (llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(*(llvm::SmallPtrSetImplBase **)a1, Subprogram, (uint64_t)v24), v25))
    {
      if ((unsigned __int8 *)llvm::Value::getMetadata(*(llvm::Value **)(a1 + 24), 0) != v13)
      {
        v24[0] = "!dbg attachment points at wrong subprogram for function";
        v26 = 259;
        v14 = *(unsigned __int8 ***)(a1 + 16);
        v15 = *(const llvm::Value **)(a1 + 24);
        v20 = a2;
        v21 = v15;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(v6, (const llvm::Twine *)v24, v14, &v21, &v20, &v27, &v23, &v22);
      }
    }
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::GlobalObject const*,llvm::MDNode const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::GlobalValue,llvm::MDNode const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value *a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write(a1, a3);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
  }
}

void llvm::VerifierSupport::CheckFailed(llvm::raw_ostream **this, const llvm::Twine *a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v3 = *this;
  if (*this)
  {
    llvm::Twine::print(a2, v3);
    v4 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 10;
    }
  }
  *((_BYTE *)this + 192) = 1;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::raw_ostream **this, const llvm::Value *a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;
  llvm::ModuleSlotTracker *v6;
  llvm::raw_ostream *result;
  _BYTE *v8;

  v4 = *((unsigned __int8 *)a2 + 16);
  v6 = (llvm::ModuleSlotTracker *)(this + 2);
  v5 = *this;
  if (v4 < 0x1C)
    printAsOperandImpl(a2, v5, 1, v6);
  else
    llvm::Value::print(a2, v5, v6, 0);
  result = *this;
  v8 = (_BYTE *)*((_QWORD *)*this + 4);
  if ((unint64_t)v8 >= *((_QWORD *)*this + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v8 + 1;
  *v8 = 10;
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::raw_ostream *result, unsigned __int8 *a2)
{
  llvm::raw_ostream **v2;
  _BYTE *v3;

  if (a2)
  {
    v2 = (llvm::raw_ostream **)result;
    printMetadataImpl(*(llvm::raw_ostream **)result, a2, (llvm::raw_ostream *)((char *)result + 16), *((_QWORD *)result + 1), 0, 0);
    result = *v2;
    v3 = (_BYTE *)*((_QWORD *)*v2 + 4);
    if ((unint64_t)v3 >= *((_QWORD *)*v2 + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v3 + 1;
      *v3 = 10;
    }
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<llvm::Value const*>::insert<llvm::Value::user_iterator_impl<llvm::User const>,void>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = result[2];
  if (*(_QWORD *)result + 8 * v6 == a2)
  {
    v13 = 0;
    if (a3)
    {
      v14 = a3;
      do
      {
        ++v13;
        v14 = *(_QWORD *)(v14 + 8);
      }
      while (v14);
    }
    if (v13 + v6 > (unint64_t)result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v13 + v6, 8);
      v6 = v4[2];
      v5 = *(_QWORD *)v4;
    }
    if (v3)
    {
      v15 = (_QWORD *)(v5 + 8 * v6);
      do
      {
        *v15++ = *(_QWORD *)(v3 + 24);
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3);
    }
    v4[2] = v6 + v13;
  }
  else
  {
    v7 = 0;
    if (a3)
    {
      v8 = a3;
      do
      {
        ++v7;
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8);
    }
    v9 = (a2 - v5) >> 3;
    if (v7 + v6 > result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v7 + v6, 8);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    v10 = (char *)(v5 + 8 * v9);
    v11 = (char *)(v5 + 8 * v6);
    v12 = (v11 - v10) >> 3;
    if (v12 >= v7)
    {
      v16 = &v11[-8 * v7];
      result = llvm::SmallVectorImpl<llvm::BasicBlock *>::append<std::move_iterator<llvm::BasicBlock **>,void>(v4, v16, (char *)(v5 + 8 * v6));
      if (v16 != v10)
        result = (unsigned int *)memmove(&v11[-(v16 - v10)], v10, v16 - v10);
      while (v3)
      {
        *(_QWORD *)v10 = *(_QWORD *)(v3 + 24);
        v10 += 8;
        v3 = *(_QWORD *)(v3 + 8);
      }
    }
    else
    {
      v4[2] = v6 + v7;
      if (v9 != v6)
      {
        result = (unsigned int *)memcpy((void *)(v5 + 8 * (v6 + v7) - 8 * v12), (const void *)(v5 + 8 * v9), v11 - v10);
        do
        {
          *(_QWORD *)v10 = *(_QWORD *)(v3 + 24);
          v10 += 8;
          v3 = *(_QWORD *)(v3 + 8);
          --v12;
        }
        while (v12);
      }
      for (; v3; v3 = *(_QWORD *)(v3 + 8))
      {
        *(_QWORD *)v11 = *(_QWORD *)(v3 + 24);
        v11 += 8;
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::raw_ostream *a1, uint64_t a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *result;
  _WORD *v11;

  v3 = (void *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v3 > 0xDuLL)
  {
    qmemcpy(v3, "; ModuleID = '", 14);
    *((_QWORD *)a1 + 4) += 14;
  }
  else
  {
    a1 = llvm::raw_ostream::write(a1, "; ModuleID = '", 0xEuLL);
  }
  v6 = *(const char **)(a2 + 160);
  v5 = a2 + 160;
  v4 = v6;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = (const char *)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  result = llvm::raw_ostream::write(a1, v8, v9);
  v11 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v11 <= 1uLL)
    return llvm::raw_ostream::write(result, "'\n", 2uLL);
  *v11 = 2599;
  *((_QWORD *)result + 4) += 2;
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::Module const*>(llvm::raw_ostream **this, const llvm::Value *a2, uint64_t *a3)
{
  if (a2)
    llvm::VerifierSupport::Write(this, a2);
  return llvm::VerifierSupport::Write(*this, *a3);
}

llvm::raw_ostream **llvm::VerifierSupport::Write(llvm::raw_ostream **this, llvm::Type *a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;

  if (a2)
  {
    v3 = *this;
    v4 = (_BYTE *)*((_QWORD *)*this + 4);
    if ((unint64_t)v4 >= *((_QWORD *)*this + 3))
    {
      llvm::raw_ostream::write(*this, 32);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 32;
    }
    return (llvm::raw_ostream **)llvm::Type::print(a2, v3, 0, 0);
  }
  return this;
}

void llvm::VerifierSupport::CheckFailed<llvm::AttributeSet const*,llvm::Value const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::AttributeSetNode ***a3, const llvm::Value **a4)
{
  llvm::raw_ostream *v7;
  std::string *p_p;
  size_t size;
  _BYTE *v10;
  std::string __p;

  llvm::VerifierSupport::CheckFailed(a1, a2);
  v7 = *a1;
  if (*a1)
  {
    if (*a3)
    {
      llvm::AttributeSet::getAsString(*a3, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v7, (const char *)p_p, size);
      v10 = (_BYTE *)*((_QWORD *)v7 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v7 + 3))
      {
        llvm::raw_ostream::write(v7, 10);
      }
      else
      {
        *((_QWORD *)v7 + 4) = v10 + 1;
        *v10 = 10;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
  }
}

void `anonymous namespace'::Verifier::verifyParameterAttrs(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, const llvm::Value *a4)
{
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type *v10;
  std::string::size_type v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t PreallocatedType;
  uint64_t v30;
  char v31;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  unsigned __int16 Alignment;
  const char *v38;
  const char *v39;
  uint64_t v40;
  char v41;
  uint64_t EnumAttribute;
  char v43;
  uint64_t v44;
  std::string v45;
  __int16 v46;
  std::string *v47;
  std::string *v48;
  uint64_t v49;
  int v50;
  _WORD v51[16];
  std::string v52;
  unint64_t v53;
  void *__p[2];
  _QWORD v55[4];
  std::string v56;
  const llvm::Value *v57;
  uint64_t v58;

  v57 = a4;
  v58 = a2;
  if (!a2)
    return;
  v7 = (unint64_t *)(a2 + 48);
  v8 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v8)
  {
    LOBYTE(v12) = *(_BYTE *)(a2 + 13);
    if ((v12 & 4) != 0)
      goto LABEL_11;
    goto LABEL_13;
  }
  v9 = 8 * v8;
  v10 = (std::string::size_type *)(a2 + 48);
  do
  {
    v11 = *v10;
    v52.__r_.__value_.__r.__words[0] = v11;
    if (v11)
    {
      if (*(_BYTE *)(v11 + 8) == 2)
        goto LABEL_8;
      LODWORD(v11) = *(_DWORD *)(v11 + 12);
    }
    if ((AttrPropTable[(v11 - 1)] & 2) == 0)
    {
      llvm::Attribute::getAsString((llvm::Attribute *)&v52, 0, &v56);
      v17 = std::string::insert(&v56, 0, "Attribute '");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v45, "' does not apply to parameters");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v55[0] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v51[0] = 260;
      v47 = (std::string *)__p;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
      if (SHIBYTE(v55[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      return;
    }
LABEL_8:
    ++v10;
    v9 -= 8;
  }
  while (v9);
  v12 = *(unsigned __int8 *)(a2 + 13);
  if ((*(_BYTE *)(a2 + 13) & 4) != 0 && (_DWORD)v8 != 1)
  {
LABEL_11:
    v13 = "Attribute 'immarg' is incompatible with other attributes";
LABEL_81:
    v47 = (std::string *)v13;
    v51[0] = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
    return;
  }
LABEL_13:
  v14 = *(unsigned __int8 *)(a2 + 20);
  v15 = *(unsigned __int8 *)(a2 + 21);
  if (v15 & 4 | v12 & 8)
    v16 = (v15 & 1) + ((v14 >> 6) & 1) + ((v15 >> 1) & 1) + 1;
  else
    v16 = (v15 & 1) + ((v14 >> 6) & 1) + ((v15 >> 1) & 1);
  if (v16 + ((*(unsigned __int8 *)(a2 + 14) >> 1) & 1) + ((v14 >> 5) & 1) >= 2)
  {
    v13 = "Attributes 'byval', 'inalloca', 'preallocated', 'inreg', 'nest', 'byref', and 'sret' are incompatible!";
    goto LABEL_81;
  }
  if ((v15 & 1) != 0 && (*(_BYTE *)(a2 + 17) & 0x20) != 0)
  {
    v13 = "Attributes 'inalloca and readonly' are incompatible!";
    goto LABEL_81;
  }
  if ((v15 & 4) != 0 && (*(_BYTE *)(a2 + 17) & 0x40) != 0)
  {
    v13 = "Attributes 'sret and returned' are incompatible!";
    goto LABEL_81;
  }
  if ((v14 & 0x10) != 0 && (*(_BYTE *)(a2 + 18) & 1) != 0)
  {
    v13 = "Attributes 'zeroext and signext' are incompatible!";
    goto LABEL_81;
  }
  if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 17) & 0x20) != 0)
    {
      v13 = "Attributes 'readnone and readonly' are incompatible!";
      goto LABEL_81;
    }
    if ((v14 & 8) != 0)
    {
      v13 = "Attributes 'readnone and writeonly' are incompatible!";
      goto LABEL_81;
    }
  }
  if ((*(_BYTE *)(a2 + 17) & 0x20) != 0 && (v14 & 8) != 0)
  {
    v13 = "Attributes 'readonly and writeonly' are incompatible!";
    goto LABEL_81;
  }
  if ((*(_BYTE *)(a2 + 15) & 4) != 0 && (*(_BYTE *)(a2 + 12) & 8) != 0)
  {
    v13 = "Attributes 'noinline and alwaysinline' are incompatible!";
    goto LABEL_81;
  }
  llvm::AttributeFuncs::typeIncompatible(a3, 3, (uint64_t *)__p);
  v21 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v21)
  {
LABEL_48:
    if (!a3 || *(_BYTE *)(a3 + 8) != 15)
      goto LABEL_109;
    v24 = *(_BYTE *)(a2 + 20);
    if ((v24 & 0x40) != 0)
    {
      if ((*(_BYTE *)(a2 + 21) & 8) != 0)
      {
        Alignment = llvm::AttributeSetNode::getAlignment((llvm::AttributeSetNode *)a2);
        if (Alignment >= 0x100u && Alignment >= 0xFu)
        {
          v39 = "Attribute 'align' exceed the max size 2^14";
          goto LABEL_116;
        }
      }
      v47 = (std::string *)v51;
      v48 = (std::string *)v51;
      v49 = 4;
      v50 = 0;
      v25 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v58);
      if ((llvm::Type::isSized(v25, (llvm::SmallPtrSetImplBase *)&v47) & 1) == 0)
      {
        v38 = "Attribute 'byval' does not support unsized types!";
        goto LABEL_96;
      }
      if (v48 != v47)
        free(v48);
      v24 = *(_BYTE *)(a2 + 20);
    }
    if ((v24 & 0x20) != 0)
    {
      v47 = (std::string *)v51;
      v48 = (std::string *)v51;
      v49 = 4;
      v50 = 0;
      v26 = llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v58);
      if ((llvm::Type::isSized(v26, (llvm::SmallPtrSetImplBase *)&v47) & 1) == 0)
      {
        v38 = "Attribute 'byref' does not support unsized types!";
        goto LABEL_96;
      }
      if (v48 != v47)
        free(v48);
    }
    v27 = *(_BYTE *)(a2 + 21);
    if ((v27 & 1) != 0)
    {
      v47 = (std::string *)v51;
      v48 = (std::string *)v51;
      v49 = 4;
      v50 = 0;
      v28 = llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v58);
      if ((llvm::Type::isSized(v28, (llvm::SmallPtrSetImplBase *)&v47) & 1) == 0)
      {
        v38 = "Attribute 'inalloca' does not support unsized types!";
        goto LABEL_96;
      }
      if (v48 != v47)
        free(v48);
      v27 = *(_BYTE *)(a2 + 21);
    }
    if ((v27 & 2) == 0)
      goto LABEL_69;
    v47 = (std::string *)v51;
    v48 = (std::string *)v51;
    v49 = 4;
    v50 = 0;
    PreallocatedType = llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v58);
    if ((llvm::Type::isSized(PreallocatedType, (llvm::SmallPtrSetImplBase *)&v47) & 1) != 0)
    {
      if (v48 != v47)
        free(v48);
LABEL_69:
      if (*(_QWORD *)(a3 + 24))
      {
        v30 = **(_QWORD **)(a3 + 16);
        v31 = *(_BYTE *)(a2 + 20);
        if (*(_BYTE *)(v30 + 8) != 15 && (v31 & 1) != 0)
        {
          v39 = "Attribute 'swifterror' only applies to parameters with pointer to pointer type!";
LABEL_116:
          v47 = (std::string *)v39;
          v51[0] = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
          goto LABEL_117;
        }
        if ((*(_BYTE *)(a2 + 20) & 0x20) != 0 && llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v58) != v30)
        {
          v39 = "Attribute 'byref' type does not match parameter!";
          goto LABEL_116;
        }
        if ((v31 & 0x40) != 0)
        {
          v40 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v58);
          if (v40)
          {
            if (v40 != v30)
            {
              v39 = "Attribute 'byval' type does not match parameter!";
              goto LABEL_116;
            }
          }
        }
        v41 = *(_BYTE *)(a2 + 21);
        if ((v41 & 2) != 0 && llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v58) != v30)
        {
          v39 = "Attribute 'preallocated' type does not match parameter!";
          goto LABEL_116;
        }
        if ((v41 & 1) != 0 && llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v58) != v30)
        {
          v39 = "Attribute 'inalloca' type does not match parameter!";
          goto LABEL_116;
        }
        if (v31 < 0 && llvm::AttributeSet::getElementType((llvm::AttributeSet *)&v58) != v30)
        {
          v39 = "Attribute 'elementtype' type does not match parameter!";
          goto LABEL_116;
        }
      }
LABEL_109:
      if ((*(_BYTE *)(a2 + 22) & 2) == 0)
        goto LABEL_117;
      EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(a2, 81);
      if (v43 && EnumAttribute && (v44 = *(_QWORD *)(EnumAttribute + 16)) != 0)
      {
        if ((v44 & 0xFFFFFC00) == 0)
          goto LABEL_117;
        v39 = "Invalid value for 'nofpclass' test mask";
      }
      else
      {
        v39 = "Attribute 'nofpclass' must have at least one test bit set";
      }
      goto LABEL_116;
    }
    v38 = "Attribute 'preallocated' does not support unsized types!";
LABEL_96:
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v46 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v45, &v57);
    if (v48 != v47)
      free(v48);
    goto LABEL_117;
  }
  v22 = 8 * v21;
  while (1)
  {
    v23 = *v7;
    v53 = v23;
    if (!v23)
      break;
    if (*(_BYTE *)(v23 + 8) != 2)
    {
      v23 = *(unsigned int *)(v23 + 12);
      break;
    }
LABEL_47:
    ++v7;
    v22 -= 8;
    if (!v22)
      goto LABEL_48;
  }
  if (((*(unint64_t *)((char *)__p + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) == 0)
    goto LABEL_47;
  llvm::Attribute::getAsString((llvm::Attribute *)&v53, 0, &v52);
  v33 = std::string::insert(&v52, 0, "Attribute '");
  v34 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v56, "' applied to incompatible type!");
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v51[0] = 260;
  v47 = &v45;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v47, &v57);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
LABEL_117:
  std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)v55, (_QWORD *)v55[1]);
}

void `anonymous namespace'::Verifier::verifyAttributeTypes(llvm::raw_ostream **a1, uint64_t a2, const llvm::Value *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v11;
  _DWORD *v12;
  BOOL v14;
  uint64_t v16;
  _DWORD *v17;
  int v19;
  uint64_t v21;
  _DWORD *v22;
  BOOL v24;
  uint64_t v26;
  _DWORD *v27;
  int v29;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v35;
  _DWORD *v36;
  int v38;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v50;
  _DWORD *v51;
  BOOL v53;
  uint64_t v55;
  _DWORD *v56;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string v62;
  std::string v63;
  void *__p[2];
  std::string::size_type v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  const llvm::Value *v71;

  v71 = a3;
  if (a2)
    v4 = (uint64_t *)(a2 + 48);
  else
    v4 = 0;
  if (a2)
    v5 = a2 + 48 + 8 * *(unsigned int *)(a2 + 8);
  else
    v5 = 0;
  if (v4 == (uint64_t *)v5)
    return;
  while (1)
  {
    v70 = *v4;
    v6 = v70;
    if (!v70)
      goto LABEL_194;
    v7 = *(unsigned __int8 *)(v70 + 8);
    if (v7 != 2)
      break;
    v8 = *(_DWORD *)(v70 + 12);
    if (v8 == 19)
    {
      if (*(_QWORD *)(v70 + 24) != 0x662D786F72707061
        || *(_QWORD *)(v70 + 32) != 0x6D2D70662D636E75
        || *(_QWORD *)(v70 + 35) != 0x6874616D2D70662DLL)
      {
        goto LABEL_31;
      }
      v11 = *(unsigned int *)(v70 + 16);
      if (!(_DWORD)v11)
        goto LABEL_31;
      v12 = (_DWORD *)(v70 + 44);
      if ((_DWORD)v11 == 5)
      {
        if (*v12 == 1936482662 && *(_BYTE *)(v70 + 48) == 101)
          goto LABEL_31;
      }
      else if ((_DWORD)v11 == 4 && *v12 == 1702195828)
      {
        goto LABEL_31;
      }
      v66[0] = "invalid value for 'approx-func-fp-math' attribute: ";
      v67 = v70 + 44;
      v68 = v11;
      v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_31:
      v8 = *(_DWORD *)(v6 + 12);
    }
    if (v8 == 18)
    {
      v14 = *(_QWORD *)(v6 + 24) == 0x6572702D7373656CLL && *(_QWORD *)(v6 + 32) == 0x6D70662D65736963;
      if (v14 && *(_WORD *)(v6 + 40) == 25697)
      {
        v16 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v16)
        {
          v17 = (_DWORD *)(v6 + 43);
          if ((_DWORD)v16 == 5)
          {
            if (*v17 != 1936482662 || *(_BYTE *)(v6 + 47) != 101)
            {
LABEL_50:
              v66[0] = "invalid value for 'less-precise-fpmad' attribute: ";
              v67 = v6 + 43;
              v68 = v16;
              v69 = 1283;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
            }
          }
          else if ((_DWORD)v16 != 4 || *v17 != 1702195828)
          {
            goto LABEL_50;
          }
        }
      }
    }
    v19 = *(_DWORD *)(v6 + 12);
    if (v19 == 15)
    {
      if (*(_QWORD *)(v6 + 24) != 0x2D73666E692D6F6ELL || *(_QWORD *)(v6 + 31) != 0x6874616D2D70662DLL)
        goto LABEL_67;
      v21 = *(unsigned int *)(v6 + 16);
      if (!(_DWORD)v21)
        goto LABEL_67;
      v22 = (_DWORD *)(v6 + 40);
      if ((_DWORD)v21 == 5)
      {
        if (*v22 == 1936482662 && *(_BYTE *)(v6 + 44) == 101)
          goto LABEL_67;
      }
      else if ((_DWORD)v21 == 4 && *v22 == 1702195828)
      {
        goto LABEL_67;
      }
      v66[0] = "invalid value for 'no-infs-fp-math' attribute: ";
      v67 = v6 + 40;
      v68 = v21;
      v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_67:
      v19 = *(_DWORD *)(v6 + 12);
    }
    if (v19 == 21)
    {
      v24 = *(_QWORD *)(v6 + 24) == 0x6E696C6E692D6F6ELL && *(_QWORD *)(v6 + 32) == 0x742D656E696C2D65;
      if (v24 && *(_QWORD *)(v6 + 37) == 0x73656C6261742D65)
      {
        v26 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v26)
        {
          v27 = (_DWORD *)(v6 + 46);
          if ((_DWORD)v26 == 5)
          {
            if (*v27 != 1936482662 || *(_BYTE *)(v6 + 50) != 101)
            {
LABEL_86:
              v66[0] = "invalid value for 'no-inline-line-tables' attribute: ";
              v67 = v6 + 46;
              v68 = v26;
              v69 = 1283;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
            }
          }
          else if ((_DWORD)v26 != 4 || *v27 != 1702195828)
          {
            goto LABEL_86;
          }
        }
      }
    }
    v29 = *(_DWORD *)(v6 + 12);
    if (v29 == 14)
    {
      if (*(_QWORD *)(v6 + 24) != 0x2D706D756A2D6F6ELL || *(_QWORD *)(v6 + 30) != 0x73656C6261742D70)
        goto LABEL_103;
      v31 = *(unsigned int *)(v6 + 16);
      if (!(_DWORD)v31)
        goto LABEL_103;
      v32 = (_DWORD *)(v6 + 39);
      if ((_DWORD)v31 == 5)
      {
        if (*v32 == 1936482662 && *(_BYTE *)(v6 + 43) == 101)
          goto LABEL_103;
      }
      else if ((_DWORD)v31 == 4 && *v32 == 1702195828)
      {
        goto LABEL_103;
      }
      v66[0] = "invalid value for 'no-jump-tables' attribute: ";
      v67 = v6 + 39;
      v68 = v31;
      v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_103:
      v29 = *(_DWORD *)(v6 + 12);
    }
    if (v29 == 15 && *(_QWORD *)(v6 + 24) == 0x2D736E616E2D6F6ELL && *(_QWORD *)(v6 + 31) == 0x6874616D2D70662DLL)
    {
      v35 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v35)
      {
        v36 = (_DWORD *)(v6 + 40);
        if ((_DWORD)v35 == 5)
        {
          if (*v36 != 1936482662 || *(_BYTE *)(v6 + 44) != 101)
          {
LABEL_119:
            v66[0] = "invalid value for 'no-nans-fp-math' attribute: ";
            v67 = v6 + 40;
            v68 = v35;
            v69 = 1283;
            llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
          }
        }
        else if ((_DWORD)v35 != 4 || *v36 != 1702195828)
        {
          goto LABEL_119;
        }
      }
    }
    v38 = *(_DWORD *)(v6 + 12);
    if (v38 != 23)
      goto LABEL_159;
    if (*(_QWORD *)(v6 + 24) == 0x656E6769732D6F6ELL
      && *(_QWORD *)(v6 + 32) == 0x2D736F72657A2D64
      && *(_QWORD *)(v6 + 39) == 0x6874616D2D70662DLL)
    {
      v41 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v41)
      {
        v42 = (_DWORD *)(v6 + 48);
        if ((_DWORD)v41 == 5)
        {
          if (*v42 != 1936482662 || *(_BYTE *)(v6 + 52) != 101)
          {
LABEL_138:
            v66[0] = "invalid value for 'no-signed-zeros-fp-math' attribute: ";
            v67 = v6 + 48;
            v68 = v41;
            v69 = 1283;
            llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
          }
        }
        else if ((_DWORD)v41 != 4 || *v42 != 1702195828)
        {
          goto LABEL_138;
        }
      }
    }
    v38 = *(_DWORD *)(v6 + 12);
    if (v38 == 23)
    {
      if (*(_QWORD *)(v6 + 24) != 0x2D656C69666F7270
        || *(_QWORD *)(v6 + 32) != 0x612D656C706D6173
        || *(_QWORD *)(v6 + 39) != 0x6574617275636361)
      {
        goto LABEL_158;
      }
      v46 = *(unsigned int *)(v6 + 16);
      if (!(_DWORD)v46)
        goto LABEL_158;
      v47 = (_DWORD *)(v6 + 48);
      if ((_DWORD)v46 == 5)
      {
        if (*v47 == 1936482662 && *(_BYTE *)(v6 + 52) == 101)
          goto LABEL_158;
      }
      else if ((_DWORD)v46 == 4 && *v47 == 1702195828)
      {
        goto LABEL_158;
      }
      v66[0] = "invalid value for 'profile-sample-accurate' attribute: ";
      v67 = v6 + 48;
      v68 = v46;
      v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_158:
      v38 = *(_DWORD *)(v6 + 12);
    }
LABEL_159:
    if (v38 != 14)
      goto LABEL_175;
    if (*(_QWORD *)(v6 + 24) != 0x662D656661736E75 || *(_QWORD *)(v6 + 30) != 0x6874616D2D70662DLL)
      goto LABEL_175;
    v50 = *(unsigned int *)(v6 + 16);
    if (!(_DWORD)v50)
      goto LABEL_175;
    v51 = (_DWORD *)(v6 + 39);
    if ((_DWORD)v50 == 5)
    {
      if (*v51 == 1936482662 && *(_BYTE *)(v6 + 43) == 101)
        goto LABEL_175;
LABEL_174:
      v66[0] = "invalid value for 'unsafe-fp-math' attribute: ";
      v67 = v6 + 39;
      v68 = v50;
      v69 = 1283;
      llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
      goto LABEL_175;
    }
    if ((_DWORD)v50 != 4 || *v51 != 1702195828)
      goto LABEL_174;
LABEL_175:
    if (*(_DWORD *)(v6 + 12) != 18)
      goto LABEL_194;
    v53 = *(_QWORD *)(v6 + 24) == 0x706D61732D657375 && *(_QWORD *)(v6 + 32) == 0x69666F72702D656CLL;
    if (!v53 || *(_WORD *)(v6 + 40) != 25964)
      goto LABEL_194;
    v55 = *(unsigned int *)(v6 + 16);
    if (!(_DWORD)v55)
      goto LABEL_194;
    v56 = (_DWORD *)(v6 + 43);
    if ((_DWORD)v55 == 5)
    {
      if (*v56 == 1936482662 && *(_BYTE *)(v6 + 47) == 101)
        goto LABEL_194;
    }
    else if ((_DWORD)v55 == 4 && *v56 == 1702195828)
    {
      goto LABEL_194;
    }
    v66[0] = "invalid value for 'use-sample-profile' attribute: ";
    v67 = v6 + 43;
    v68 = v55;
    v69 = 1283;
    llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v66);
LABEL_194:
    if (++v4 == (uint64_t *)v5)
      return;
  }
  if ((v7 == 1) == (*(_DWORD *)(v70 + 12) - 75) < 0xA)
    goto LABEL_194;
  llvm::Attribute::getAsString((llvm::Attribute *)&v70, 0, &v62);
  v58 = std::string::insert(&v62, 0, "Attribute '");
  v59 = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v63, "' should have an Argument");
  v61 = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v65 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v69 = 260;
  v66[0] = __p;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)v66, &v71);
  if (SHIBYTE(v65) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

uint64_t `anonymous namespace'::Verifier::verifyFunctionAttrs(llvm::FunctionType *,llvm::AttributeList,llvm::Value const*,BOOL,BOOL)::$_0::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  llvm::raw_ostream **v5;
  uint64_t v6;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;

  v5 = (llvm::raw_ostream **)a1[1];
  v6 = **a1;
  if (*(_DWORD *)(v6 + 12) - 1 <= a4)
  {
    v12 = 1283;
    v9 = "'allocsize' ";
    v10 = a2;
    v11 = a3;
    v8 = " argument is out of bounds";
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * (a4 + 1)) + 8) == 13)
      return 1;
    v12 = 1283;
    v9 = "'allocsize' ";
    v10 = a2;
    v11 = a3;
    v8 = " argument must refer to an integer parameter";
  }
  v13[0] = &v9;
  v13[2] = v8;
  v14 = 770;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v5, (const llvm::Twine *)v13, (const llvm::Value **)a1[2]);
  return 0;
}

void `anonymous namespace'::Verifier::checkUnsignedBaseTenFuncAttr(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, unint64_t *a4, const llvm::Value *a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t Attribute;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  unint64_t v17[4];
  __int16 v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  const llvm::Value *v24;
  uint64_t v25;

  v24 = a5;
  v25 = a2;
  if (llvm::AttributeList::hasAttributeAtIndex(&v25, -1, a3, a4))
  {
    if (a2 && *(_DWORD *)(a2 + 8))
      v10 = *(_QWORD *)(a2 + 40);
    else
      v10 = 0;
    v19 = (unint64_t *)v10;
    Attribute = llvm::AttributeSet::getAttribute((uint64_t *)&v19, a3, (uint64_t)a4, v9);
    if (Attribute)
    {
      v13 = *(unsigned int *)(Attribute + 16);
      v14 = Attribute + *(unsigned int *)(Attribute + 12) + 25;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v17[0] = 0;
    v19 = (unint64_t *)v14;
    v20 = v13;
    if ((llvm::consumeUnsignedInteger((llvm *)&v19, (llvm::StringRef *)0xA, v17, v12) & 1) != 0
      || v20
      || HIDWORD(v17[0]))
    {
      v16 = 1283;
      v15[0] = "\"";
      v15[2] = a3;
      v15[3] = a4;
      v17[0] = (unint64_t)v15;
      v17[2] = (unint64_t)"\" takes an unsigned integer: ";
      v18 = 770;
      v19 = v17;
      v21 = v14;
      v22 = v13;
      v23 = 1282;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v19, &v24);
    }
  }
}

void llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, unsigned __int8 **a3)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    result = (uint64_t *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = llvm::TinyPtrVector<llvm::BasicBlock *>::~TinyPtrVector(result);
      result += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::Function const*,llvm::MDNode *>(llvm::raw_ostream **this, const llvm::Value *a2, unsigned __int8 **a3)
{
  if (a2)
    llvm::VerifierSupport::Write(this, a2);
  return llvm::VerifierSupport::Write((llvm::raw_ostream *)this, *a3);
}

void llvm::VerifierSupport::DebugInfoCheckFailed(llvm::raw_ostream **this, const llvm::Twine *a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;

  v3 = *this;
  if (*this)
  {
    llvm::Twine::print(a2, v3);
    v4 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v4 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v4 + 1;
      *v4 = 10;
    }
  }
  *((_BYTE *)this + 192) |= *((_BYTE *)this + 194);
  *((_BYTE *)this + 193) = 1;
}

void `anonymous namespace'::Verifier::visitDILocation(llvm::raw_ostream **this, const llvm::DILocation *a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  const llvm::DILocation *v8;
  uint64_t v9;
  const llvm::DILocation **v10;
  const llvm::DILocation **v11;
  const llvm::DILocation *v12;
  const llvm::DILocation *v13;
  const llvm::DILocation *v14;
  _QWORD v15[4];
  __int16 v16;

  v4 = (char *)a2 - 16;
  v5 = *((_QWORD *)a2 - 2);
  if ((v5 & 2) == 0)
  {
    v6 = (v5 >> 2) & 0xF;
    v7 = &v4[-8 * v6];
    v8 = *(const llvm::DILocation **)v7;
    if (*(_QWORD *)v7 && *(unsigned __int8 *)v8 - 20 >= 0xFFFFFFFD)
    {
      if ((*((_QWORD *)a2 - 2) & 0x3C0) != 0x80)
      {
        v9 = -v6;
LABEL_16:
        v7 = &v4[8 * v9];
        goto LABEL_18;
      }
      goto LABEL_12;
    }
LABEL_8:
    v14 = a2;
    v15[0] = "location requires a valid scope";
    v16 = 259;
    v13 = v8;
    v10 = &v14;
    v11 = &v13;
    goto LABEL_9;
  }
  v7 = (char *)*((_QWORD *)a2 - 4);
  v8 = *(const llvm::DILocation **)v7;
  if (!*(_QWORD *)v7 || *(unsigned __int8 *)v8 - 20 <= 0xFFFFFFFC)
    goto LABEL_8;
  if (*((_DWORD *)a2 - 6) == 2)
  {
LABEL_12:
    v12 = (const llvm::DILocation *)*((_QWORD *)v7 + 1);
    v14 = v12;
    if (!v12 || *(_BYTE *)v12 == 5)
    {
      if ((v5 & 2) != 0)
      {
        v7 = (char *)*((_QWORD *)a2 - 4);
        goto LABEL_18;
      }
      v9 = -(uint64_t)((v5 >> 2) & 0xF);
      goto LABEL_16;
    }
    v15[0] = "inlined-at should be a location";
    v16 = 259;
    v13 = a2;
    v10 = &v13;
    v11 = &v14;
LABEL_9:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v15, (unsigned __int8 **)v10, (unsigned __int8 **)v11);
    return;
  }
LABEL_18:
  if (**(_BYTE **)v7 == 17 && (*(_BYTE *)(*(_QWORD *)v7 + 36) & 8) == 0)
  {
    v15[0] = "scope points into the type hierarchy";
    v16 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v15);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIExpression(llvm::raw_ostream **this, const llvm::DIExpression *a2)
{
  const char *v4;
  __int16 v5;

  if (!llvm::DIExpression::isValid(a2))
  {
    v4 = "invalid expression";
    v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v4);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIGlobalVariableExpression(llvm::raw_ostream **this, unsigned __int8 *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  llvm::DIVariable **v9;
  llvm::DIVariable *v10;
  __int32 v11;
  __int32 v12;
  unint64_t SizeInBits;
  char v14;
  const char *v15;
  int8x16_t v16;
  char v17;
  llvm::DIVariable *v18;
  _QWORD v19[4];
  __int16 v20;
  unsigned __int8 *v21;

  v5 = a2 - 16;
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
    v6 = (uint64_t *)*((_QWORD *)a2 - 4);
  else
    v6 = (uint64_t *)&v5[-8 * ((v4 >> 2) & 0xF)];
  if (!*v6)
  {
    v19[0] = "missing variable";
    v20 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v19);
    return;
  }
  if ((*(_QWORD *)v5 & 2) != 0)
    v7 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  else
    v7 = &v5[-8 * ((*(_QWORD *)v5 >> 2) & 0xFLL)];
  v8 = *((_QWORD *)v7 + 1);
  if (v8)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8 + 16), *(uint64_t **)(v8 + 24), &v16);
    if (v17)
    {
      v9 = (*(_QWORD *)v5 & 2) != 0
         ? (llvm::DIVariable **)*((_QWORD *)a2 - 4)
         : (llvm::DIVariable **)&v5[-8 * ((*(_QWORD *)v5 >> 2) & 0xFLL)];
      v10 = *v9;
      v11 = v16.i32[0];
      v12 = v16.i32[2];
      v21 = a2;
      SizeInBits = llvm::DIVariable::getSizeInBits(v10);
      if (v14)
      {
        if ((v12 + v11) <= SizeInBits)
        {
          if (SizeInBits != v11)
            return;
          v15 = "fragment covers entire variable";
        }
        else
        {
          v15 = "fragment is larger than or outside of variable";
        }
        v18 = v10;
        v19[0] = v15;
        v20 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v19, &v21, (unsigned __int8 **)&v18);
      }
    }
  }
}

void `anonymous namespace'::Verifier::visitGenericDINode(llvm::raw_ostream **a1, uint64_t a2)
{
  const char *v4;
  __int16 v5;

  if (!*(_WORD *)(a2 + 2))
  {
    v4 = "invalid tag";
    v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v4);
    if (*a1)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDISubrange(llvm::raw_ostream **this, const llvm::DISubrange *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  char *v8;
  unint64_t v9;
  char *v10;
  const char *v11;
  unsigned int v12;
  int v13;
  unint64_t Count;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  const llvm::DISubrange *v20;
  char *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  char *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  int v29;
  char *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned __int8 *v34;
  const char *v35;
  __int16 v36;

  if (*((_WORD *)a2 + 1) != 33)
  {
    v11 = "invalid tag";
LABEL_56:
    v34 = (unsigned __int8 *)a2;
    v35 = v11;
    v36 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)&v35, &v34);
    return;
  }
  v4 = *((_DWORD *)this + 201);
  v5 = v4 > 0x2D;
  v6 = (1 << v4) & 0x200C00004180;
  if (v5 || v6 == 0)
  {
    v19 = *((_QWORD *)a2 - 2);
    v20 = (v19 & 2) != 0
        ? (const llvm::DISubrange *)*((_QWORD *)a2 - 4)
        : (const llvm::DISubrange *)((char *)a2 - 8 * ((v19 >> 2) & 0xF) - 16);
    if (!*(_QWORD *)v20 && !*((_QWORD *)v20 + 2))
    {
      v11 = "Subrange must contain count or upperBound";
      goto LABEL_56;
    }
  }
  v8 = (char *)a2 - 16;
  v9 = *((_QWORD *)a2 - 2);
  if ((v9 & 2) != 0)
    v10 = (char *)*((_QWORD *)a2 - 4);
  else
    v10 = &v8[-8 * ((v9 >> 2) & 0xF)];
  if (*(_QWORD *)v10)
  {
    if (*((_QWORD *)v10 + 2))
    {
      v11 = "Subrange can have any one of count or upperBound";
      goto LABEL_56;
    }
    v12 = **(unsigned __int8 **)v10;
    v5 = v12 > 0x19;
    v13 = (1 << v12) & 0x3000042;
    if (v5 || v13 == 0)
    {
      v11 = "Count must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
  Count = llvm::DISubrange::getCount(a2);
  if (Count >= 8 && (Count & 6) == 0)
  {
    v16 = Count & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_DWORD *)((Count & 0xFFFFFFFFFFFFFFF8) + 32);
    v18 = v17 > 0x40 ? **(_QWORD **)(v16 + 24) : (uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v17) >> -(char)v17;
    if (v18 <= -2)
    {
      v11 = "invalid subrange count";
      goto LABEL_56;
    }
  }
  if ((v9 & 2) != 0)
    v21 = (char *)*((_QWORD *)a2 - 4);
  else
    v21 = &v8[-8 * ((v9 >> 2) & 0xF)];
  v22 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
  if (v22)
  {
    v23 = *v22;
    v5 = v23 > 0x19;
    v24 = (1 << v23) & 0x3000042;
    if (v5 || v24 == 0)
    {
      v11 = "LowerBound must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
  if ((v9 & 2) != 0)
    v26 = (char *)*((_QWORD *)a2 - 4);
  else
    v26 = &v8[-8 * ((v9 >> 2) & 0xF)];
  v27 = (unsigned __int8 *)*((_QWORD *)v26 + 2);
  if (v27)
  {
    v28 = *v27;
    v5 = v28 > 0x19;
    v29 = (1 << v28) & 0x3000042;
    if (v5 || v29 == 0)
    {
      v11 = "UpperBound must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
  if ((v9 & 2) != 0)
    v31 = (char *)*((_QWORD *)a2 - 4);
  else
    v31 = &v8[-8 * ((v9 >> 2) & 0xF)];
  v32 = (unsigned __int8 *)*((_QWORD *)v31 + 3);
  if (v32)
  {
    v33 = *v32;
    if (v33 > 0x19 || ((1 << v33) & 0x3000042) == 0)
    {
      v11 = "Stride must be signed constant or DIVariable or DIExpression";
      goto LABEL_56;
    }
  }
}

void `anonymous namespace'::Verifier::visitDIEnumerator(llvm::raw_ostream **this, const llvm::DIEnumerator *a2)
{
  const char *v4;
  __int16 v5;

  if (*((_WORD *)a2 + 1) != 40)
  {
    v4 = "invalid tag";
    v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v4);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIBasicType(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  const char *v8;
  __int16 v9;

  v2 = *(unsigned __int16 *)(a2 + 2);
  v3 = v2 > 0x3B;
  v4 = (1 << v2) & 0x800001000040000;
  if (v3 || v4 == 0)
  {
    v8 = "invalid tag";
    v9 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v8);
    if (*a1)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIDerivedType(llvm::raw_ostream **a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  BOOL v28;
  unsigned __int8 **v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _QWORD v36[4];
  __int16 v37;

  v4 = *(unsigned __int16 *)(a2 + 2);
  v5 = (v4 - 13);
  if (v5 <= 0x3E)
  {
    if (((1 << (v4 - 13)) & 0x442005002200820DLL) != 0)
      goto LABEL_3;
    if (v5 == 18)
    {
      v20 = a2 - 16;
      v21 = *(_QWORD *)(a2 - 16);
      if ((v21 & 2) != 0)
        v22 = *(_QWORD *)(a2 - 32);
      else
        v22 = v20 - 8 * ((v21 >> 2) & 0xF);
      v31 = *(unsigned __int8 **)(v22 + 32);
      if (v31)
      {
        v32 = *v31;
        if ((v32 - 11) >= 4 && v32 != 34)
        {
          v35 = (unsigned __int8 *)a2;
          v36[0] = "invalid pointer to member type";
          v37 = 259;
          if ((v21 & 2) != 0)
            v33 = *(_QWORD *)(a2 - 32);
          else
            v33 = v20 - 8 * ((v21 >> 2) & 0xF);
          v23 = *(_QWORD *)(v33 + 32);
          goto LABEL_56;
        }
      }
      goto LABEL_3;
    }
    if (v5 == 19)
    {
      v16 = *(_QWORD *)(a2 - 16);
      if ((v16 & 2) != 0)
        v17 = *(_QWORD *)(a2 - 32);
      else
        v17 = a2 - 16 - 8 * ((v16 >> 2) & 0xF);
      v24 = *(unsigned __int8 **)(v17 + 24);
      v35 = v24;
      if (v24)
      {
        v25 = *v24;
        v26 = v25 == 11 ? v24 : 0;
        if (v25 != 13 || *((_WORD *)v24 + 1) != 4)
        {
          if (!v26
            || ((v27 = *((_DWORD *)v26 + 11), (v27 - 5) >= 4) ? (v28 = v27 == 2) : (v28 = 1), !v28))
          {
            v36[0] = "invalid set base type";
            v37 = 259;
            v34 = a2;
            v29 = (unsigned __int8 **)&v34;
            v30 = &v35;
LABEL_57:
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v36, v29, v30);
            return;
          }
        }
      }
      goto LABEL_3;
    }
  }
  if (v4 != 17152)
  {
    v15 = "invalid tag";
    goto LABEL_24;
  }
LABEL_3:
  v6 = a2 - 16;
  v7 = *(_QWORD *)(a2 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD *)(a2 - 32);
  else
    v8 = v6 - 8 * ((v7 >> 2) & 0xF);
  v9 = *(unsigned __int8 **)(v8 + 8);
  if (v9)
  {
    v10 = *v9;
    if ((v10 - 11) >= 0xB && v10 != 32 && v10 != 34)
    {
      v35 = (unsigned __int8 *)a2;
      v36[0] = "invalid scope";
      v37 = 259;
      if ((v7 & 2) != 0)
        v18 = *(_QWORD *)(a2 - 32);
      else
        v18 = v6 - 8 * ((v7 >> 2) & 0xF);
      v23 = *(_QWORD *)(v18 + 8);
LABEL_56:
      v34 = v23;
      v29 = &v35;
      v30 = (unsigned __int8 **)&v34;
      goto LABEL_57;
    }
  }
  if ((v7 & 2) != 0)
    v11 = *(_QWORD *)(a2 - 32);
  else
    v11 = v6 - 8 * ((v7 >> 2) & 0xF);
  v12 = *(unsigned __int8 **)(v11 + 24);
  if (v12)
  {
    v13 = *v12;
    if ((v13 - 11) >= 4 && v13 != 34)
    {
      v35 = (unsigned __int8 *)a2;
      v36[0] = "invalid base type";
      v37 = 259;
      if ((v7 & 2) != 0)
        v19 = *(_QWORD *)(a2 - 32);
      else
        v19 = v6 - 8 * ((v7 >> 2) & 0xF);
      v23 = *(_QWORD *)(v19 + 24);
      goto LABEL_56;
    }
  }
  if ((*(_QWORD *)(a2 + 44) & 0xFF00000000) != 0)
  {
    v14 = v4 - 15;
    if (v14 > 0x33 || ((1 << v14) & 0x8000000000003) == 0)
    {
      v15 = "DWARF address space only applies to pointer or reference types";
LABEL_24:
      v35 = (unsigned __int8 *)a2;
      v36[0] = v15;
      v37 = 259;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)v36, &v35);
    }
  }
}

void `anonymous namespace'::Verifier::visitDICompositeType(llvm::raw_ostream **a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  _QWORD v41[4];
  __int16 v42;

  v4 = *(unsigned __int16 *)(a2 + 2);
  v5 = v4 > 0x33;
  v6 = (1 << v4) & 0x8080000880016;
  if (v5 || v6 == 0)
  {
    v22 = "invalid tag";
    goto LABEL_79;
  }
  v9 = a2 - 16;
  v8 = *(_QWORD *)(a2 - 16);
  if ((v8 & 2) != 0)
    v10 = *(_QWORD *)(a2 - 32);
  else
    v10 = v9 - 8 * ((v8 >> 2) & 0xF);
  v11 = *(unsigned __int8 **)(v10 + 8);
  if (v11)
  {
    v12 = *v11;
    if ((v12 - 11) >= 0xB && v12 != 32 && v12 != 34)
    {
      v40 = (unsigned __int8 *)a2;
      v41[0] = "invalid scope";
      v42 = 259;
      if ((v8 & 2) != 0)
        v23 = *(_QWORD *)(a2 - 32);
      else
        v23 = v9 - 8 * ((v8 >> 2) & 0xF);
      v27 = *(unsigned __int8 **)(v23 + 8);
LABEL_73:
      v39 = v27;
      goto LABEL_74;
    }
  }
  if ((v8 & 2) != 0)
    v13 = *(_QWORD *)(a2 - 32);
  else
    v13 = v9 - 8 * ((v8 >> 2) & 0xF);
  v14 = *(unsigned __int8 **)(v13 + 24);
  if (v14)
  {
    v15 = *v14;
    if ((v15 - 11) >= 4 && v15 != 34)
    {
      v40 = (unsigned __int8 *)a2;
      v41[0] = "invalid base type";
      v42 = 259;
      if ((v8 & 2) != 0)
        v24 = *(_QWORD *)(a2 - 32);
      else
        v24 = v9 - 8 * ((v8 >> 2) & 0xF);
      v27 = *(unsigned __int8 **)(v24 + 24);
      goto LABEL_73;
    }
  }
  if ((v8 & 2) != 0)
    v16 = *(_QWORD *)(a2 - 32);
  else
    v16 = v9 - 8 * ((v8 >> 2) & 0xF);
  v17 = *(unsigned __int8 **)(v16 + 32);
  if (v17 && *v17 != 4)
  {
    v40 = (unsigned __int8 *)a2;
    v41[0] = "invalid composite elements";
    v42 = 259;
    v39 = v17;
LABEL_74:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v41, &v40, &v39);
    return;
  }
  v18 = *(unsigned __int8 **)(v16 + 40);
  if (v18)
  {
    v19 = *v18;
    if ((v19 - 11) >= 4 && v19 != 34)
    {
      v40 = (unsigned __int8 *)a2;
      v41[0] = "invalid vtable holder";
      v42 = 259;
      if ((v8 & 2) != 0)
        v26 = *(_QWORD *)(a2 - 32);
      else
        v26 = v9 - 8 * ((v8 >> 2) & 0xF);
      v27 = *(unsigned __int8 **)(v26 + 40);
      goto LABEL_73;
    }
  }
  v20 = *(_DWORD *)(a2 + 20);
  if ((~v20 & 0x6000) == 0 || (v20 & 0xC00000) == 0xC00000)
  {
    v22 = "invalid reference flags";
LABEL_79:
    v40 = (unsigned __int8 *)a2;
    v41[0] = v22;
    v42 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)v41, &v40);
    return;
  }
  if ((v20 & 0x10) != 0)
  {
    v22 = "DIBlockByRefStruct on DICompositeType is no longer supported";
    goto LABEL_79;
  }
  if ((v20 & 0x800) != 0)
  {
    if ((v8 & 2) != 0)
      v25 = *(_QWORD *)(a2 - 32);
    else
      v25 = v9 - 8 * ((v8 >> 2) & 0xF);
    v32 = *(_QWORD *)(v25 + 32);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 - 16);
      if ((v33 & 2) != 0)
      {
        if (*(_DWORD *)(v32 - 24) == 1)
        {
          v34 = *(_QWORD *)(v32 - 32);
LABEL_77:
          if (*(_WORD *)(*(_QWORD *)v34 + 2) == 33)
            goto LABEL_28;
        }
      }
      else if ((*(_QWORD *)(v32 - 16) & 0x3C0) == 0x40)
      {
        v34 = v32 - 16 - 8 * ((v33 >> 2) & 0xF);
        goto LABEL_77;
      }
    }
    v22 = "invalid vector, expected one element of type subrange";
    goto LABEL_79;
  }
LABEL_28:
  if ((v8 & 2) != 0)
    v21 = *(_QWORD *)(a2 - 32);
  else
    v21 = v9 - 8 * ((v8 >> 2) & 0xF);
  v28 = *(unsigned __int8 **)(v21 + 48);
  if (v28)
  {
    v8 = *(_QWORD *)(a2 - 16);
  }
  if ((v8 & 2) != 0)
    v29 = *(_QWORD *)(a2 - 32);
  else
    v29 = v9 - 8 * ((v8 >> 2) & 0xF);
  v30 = *(_BYTE **)(v29 + 64);
  if (v30 && (*v30 != 12 || *(_WORD *)(a2 + 2) != 51))
  {
    v35 = "discriminator can only appear on variant part";
    goto LABEL_97;
  }
  if ((v8 & 2) != 0)
    v31 = *(_QWORD *)(a2 - 32);
  else
    v31 = v9 - 8 * ((v8 >> 2) & 0xF);
  if (*(_QWORD *)(v31 + 72) && *(_WORD *)(a2 + 2) != 1)
  {
    v35 = "dataLocation can only appear in array type";
LABEL_97:
    v41[0] = v35;
    v42 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v41);
    return;
  }
  if ((v8 & 2) != 0)
    v36 = *(_QWORD *)(a2 - 32);
  else
    v36 = v9 - 8 * ((v8 >> 2) & 0xF);
  if (*(_QWORD *)(v36 + 80) && *(_WORD *)(a2 + 2) != 1)
  {
    v35 = "associated can only appear in array type";
    goto LABEL_97;
  }
  if ((v8 & 2) != 0)
    v37 = *(_QWORD *)(a2 - 32);
  else
    v37 = v9 - 8 * ((v8 >> 2) & 0xF);
  if (*(_QWORD *)(v37 + 88) && *(_WORD *)(a2 + 2) != 1)
  {
    v35 = "allocated can only appear in array type";
    goto LABEL_97;
  }
  if ((v8 & 2) != 0)
    v38 = *(_QWORD *)(a2 - 32);
  else
    v38 = v9 - 8 * ((v8 >> 2) & 0xF);
  if (*(_QWORD *)(v38 + 96) && *(_WORD *)(a2 + 2) != 1)
  {
    v35 = "rank can only appear in array type";
    goto LABEL_97;
  }
}

void `anonymous namespace'::Verifier::visitDISubroutineType(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _QWORD v21[4];
  __int16 v22;

  if (*(_WORD *)(a2 + 2) != 21)
  {
    v7 = "invalid tag";
LABEL_27:
    v20 = (unsigned __int8 *)a2;
    v21[0] = v7;
    v22 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v21, &v20);
    return;
  }
  v4 = a2 - 16;
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
    v6 = *(_QWORD *)(a2 - 32);
  else
    v6 = v4 - 8 * ((v5 >> 2) & 0xF);
  v8 = *(unsigned __int8 **)(v6 + 24);
  v20 = v8;
  if (!v8)
    goto LABEL_24;
  if (*v8 != 4)
  {
    v21[0] = "invalid composite elements";
    v22 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v21);
    if (*this)
    {
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v8);
    }
    return;
  }
  if ((v5 & 2) != 0)
    v9 = *(_QWORD *)(a2 - 32);
  else
    v9 = v4 - 8 * ((v5 >> 2) & 0xF);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(v10 - 16);
  if ((v11 & 2) == 0)
  {
    v12 = (unsigned __int8 **)(v10 - 16 - 8 * ((v11 >> 2) & 0xF));
    v13 = (v11 >> 6) & 0xF;
    if (!v13)
      goto LABEL_24;
LABEL_17:
    v14 = 8 * v13;
    while (1)
    {
      v15 = *v12;
      v19 = v15;
      if (v15)
      {
        v16 = *v15;
        if ((v16 - 11) >= 4 && v16 != 34)
          break;
      }
      ++v12;
      v14 -= 8;
      if (!v14)
        goto LABEL_24;
    }
    v21[0] = "invalid subroutine type ref";
    v22 = 259;
    v18 = (unsigned __int8 *)a2;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(this, (const llvm::Twine *)v21, &v18, &v20, &v19);
    return;
  }
  v12 = *(unsigned __int8 ***)(v10 - 32);
  v13 = *(unsigned int *)(v10 - 24);
  if (v13)
    goto LABEL_17;
LABEL_24:
  v17 = *(_DWORD *)(a2 + 20);
  if ((~v17 & 0x6000) == 0 || (v17 & 0xC00000) == 0xC00000)
  {
    v7 = "invalid reference flags";
    goto LABEL_27;
  }
}

void `anonymous namespace'::Verifier::visitDIFile(llvm::raw_ostream **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  const char *v12;
  __int16 v13;

  if (*(_WORD *)(a2 + 2) != 41)
  {
    v6 = "invalid tag";
LABEL_16:
    v11 = (unsigned __int8 *)a2;
    v12 = v6;
    v13 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v12, &v11);
    return;
  }
  if (!*(_BYTE *)(a2 + 32))
    return;
  v2 = *(_DWORD *)(a2 + 16);
  if (v2 >= 4)
  {
    v6 = "invalid checksum kind";
    goto LABEL_16;
  }
  v3 = *(uint64_t **)(*(_QWORD *)(a2 + 24) + 8);
  v4 = v2 - 1;
  if (v4 > 2)
    v5 = 0;
  else
    v5 = qword_24AA49CB8[v4];
  v9 = *v3;
  v7 = v3 + 3;
  v8 = v9;
  if (v9 != v5)
  {
    v6 = "invalid checksum length";
    goto LABEL_16;
  }
  if (v8)
  {
    v10 = 0;
    while (llvm::hexDigitValue(char)::LUT[*((unsigned __int8 *)v7 + v10)] != -1)
    {
      if (v8 == ++v10)
        return;
    }
    if (v10 != -1)
    {
      v6 = "invalid checksum";
      goto LABEL_16;
    }
  }
}

void `anonymous namespace'::Verifier::visitDICompileUnit(llvm::raw_ostream **this, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 **v7;
  const char *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  const char *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 **v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 **v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  _QWORD v75[4];
  __int16 v76;

  if ((a2[1] & 0x7F) != 1)
  {
    v8 = "compile units must be distinct";
LABEL_8:
    v74 = a2;
    v75[0] = v8;
    v76 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v75, &v74);
    return;
  }
  if (*((_WORD *)a2 + 1) != 17)
  {
    v8 = "invalid tag";
    goto LABEL_8;
  }
  v4 = *a2;
  v5 = a2;
  if (v4 != 15)
  {
    v6 = *((_QWORD *)a2 - 2);
    v7 = (v6 & 2) != 0 ? (unsigned __int8 **)*((_QWORD *)a2 - 4) : (unsigned __int8 **)&a2[-8 * ((v6 >> 2) & 0xF) - 16];
    v5 = *v7;
    if (!v5 || *v5 != 15)
    {
      v74 = a2;
      v75[0] = "invalid file";
      v76 = 259;
      v73 = v5;
      v11 = &v74;
LABEL_16:
      v12 = &v73;
LABEL_17:
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v75, v11, v12);
      return;
    }
  }
  v9 = *((_QWORD *)v5 - 2);
  if ((v9 & 2) != 0)
    v10 = (unsigned __int8 *)*((_QWORD *)v5 - 4);
  else
    v10 = &v5[-8 * ((v9 >> 2) & 0xF) - 16];
  v13 = *(_QWORD *)v10;
  if (!v13 || !**(_QWORD **)(v13 + 8))
  {
    v75[0] = "invalid filename";
    v76 = 259;
    v17 = a2;
    if (v4 != 15)
    {
      v18 = *((_QWORD *)a2 - 2);
      if ((v18 & 2) != 0)
        v19 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
      else
        v19 = (unsigned __int8 **)&a2[-8 * ((v18 >> 2) & 0xF) - 16];
      v17 = *v19;
    }
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v75);
    if (*this)
    {
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, a2);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v17);
    }
    return;
  }
  *((_DWORD *)this + 201) = *((_DWORD *)a2 + 4);
  v14 = a2;
  if (v4 != 15)
  {
    v15 = *((_QWORD *)a2 - 2);
    if ((v15 & 2) != 0)
      v16 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v16 = &a2[-8 * ((v15 >> 2) & 0xF) - 16];
    v14 = *(unsigned __int8 **)v16;
  }
  if (*((_DWORD *)a2 + 7) >= 4u)
  {
    v8 = "invalid emission kind";
    goto LABEL_8;
  }
  v20 = a2 - 16;
  v21 = *((_QWORD *)a2 - 2);
  if ((v21 & 2) != 0)
    v22 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  else
    v22 = &v20[-8 * ((v21 >> 2) & 0xF)];
  v23 = (unsigned __int8 *)*((_QWORD *)v22 + 4);
  v74 = v23;
  if (!v23)
    goto LABEL_53;
  if (*v23 != 4)
  {
    v25 = "invalid enum list";
    goto LABEL_122;
  }
  v24 = (v21 & 2) != 0 ? (unsigned __int8 *)*((_QWORD *)a2 - 4) : &v20[-8 * ((v21 >> 2) & 0xF)];
  v26 = *((_QWORD *)v24 + 4);
  v27 = *(_QWORD *)(v26 - 16);
  if ((v27 & 2) != 0)
  {
    v28 = *(uint64_t **)(v26 - 32);
    v29 = *(unsigned int *)(v26 - 24);
  }
  else
  {
    v28 = (uint64_t *)(v26 - 16 - 8 * ((v27 >> 2) & 0xF));
    v29 = (v27 >> 6) & 0xF;
  }
  if (!v29)
  {
LABEL_53:
    if ((v21 & 2) != 0)
      v32 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v32 = &v20[-8 * ((v21 >> 2) & 0xF)];
    v33 = (unsigned __int8 *)*((_QWORD *)v32 + 5);
    v74 = v33;
    if (v33)
    {
      if (*v33 != 4)
      {
        v25 = "invalid retained type list";
        goto LABEL_122;
      }
      if ((v21 & 2) != 0)
        v34 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      else
        v34 = &v20[-8 * ((v21 >> 2) & 0xF)];
      v36 = *((_QWORD *)v34 + 5);
      v37 = *(_QWORD *)(v36 - 16);
      if ((v37 & 2) != 0)
      {
        v38 = *(unsigned __int8 ***)(v36 - 32);
        v39 = *(unsigned int *)(v36 - 24);
      }
      else
      {
        v38 = (unsigned __int8 **)(v36 - 16 - 8 * ((v37 >> 2) & 0xF));
        v39 = (v37 >> 6) & 0xF;
      }
      if (v39)
      {
        v40 = 8 * v39;
        while (1)
        {
          v41 = *v38;
          v73 = v41;
          if (!v41)
            break;
          v42 = *v41;
          if ((v42 - 11) >= 4 && v42 != 34 && (v42 != 17 || (v41[36] & 8) != 0))
            break;
          ++v38;
          v40 -= 8;
          if (!v40)
            goto LABEL_77;
        }
        v43 = "invalid retained type";
        goto LABEL_135;
      }
    }
LABEL_77:
    if ((v21 & 2) != 0)
      v44 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v44 = &v20[-8 * ((v21 >> 2) & 0xF)];
    v45 = (unsigned __int8 *)*((_QWORD *)v44 + 6);
    v74 = v45;
    if (v45)
    {
      if (*v45 != 4)
      {
        v25 = "invalid global variable list";
        goto LABEL_122;
      }
      if ((v21 & 2) != 0)
        v46 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      else
        v46 = &v20[-8 * ((v21 >> 2) & 0xF)];
      v47 = *((_QWORD *)v46 + 6);
      v48 = *(_QWORD *)(v47 - 16);
      if ((v48 & 2) != 0)
      {
        v49 = *(unsigned __int8 ***)(v47 - 32);
        v50 = *(unsigned int *)(v47 - 24);
      }
      else
      {
        v49 = (unsigned __int8 **)(v47 - 16 - 8 * ((v48 >> 2) & 0xF));
        v50 = (v48 >> 6) & 0xF;
      }
      if (v50)
      {
        v51 = 8 * v50;
        while (1)
        {
          v52 = *v49;
          v73 = v52;
          if (!v52 || *v52 != 7)
            break;
          ++v49;
          v51 -= 8;
          if (!v51)
            goto LABEL_96;
        }
        v43 = "invalid global variable ref";
        goto LABEL_135;
      }
    }
LABEL_96:
    if ((v21 & 2) != 0)
      v53 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v53 = &v20[-8 * ((v21 >> 2) & 0xF)];
    v54 = (unsigned __int8 *)*((_QWORD *)v53 + 7);
    v74 = v54;
    if (v54)
    {
      if (*v54 != 4)
      {
        v25 = "invalid imported entity list";
        goto LABEL_122;
      }
      if ((v21 & 2) != 0)
        v55 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      else
        v55 = &v20[-8 * ((v21 >> 2) & 0xF)];
      v56 = *((_QWORD *)v55 + 7);
      v57 = *(_QWORD *)(v56 - 16);
      if ((v57 & 2) != 0)
      {
        v58 = *(unsigned __int8 ***)(v56 - 32);
        v59 = *(unsigned int *)(v56 - 24);
      }
      else
      {
        v58 = (unsigned __int8 **)(v56 - 16 - 8 * ((v57 >> 2) & 0xF));
        v59 = (v57 >> 6) & 0xF;
      }
      if (v59)
      {
        v60 = 8 * v59;
        while (1)
        {
          v61 = *v58;
          v73 = v61;
          if (!v61 || *v61 != 28)
            break;
          ++v58;
          v60 -= 8;
          if (!v60)
            goto LABEL_114;
        }
        v43 = "invalid imported entity ref";
        goto LABEL_135;
      }
    }
LABEL_114:
    if ((v21 & 2) != 0)
      v62 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v62 = &v20[-8 * ((v21 >> 2) & 0xF)];
    v63 = (unsigned __int8 *)*((_QWORD *)v62 + 8);
    v74 = v63;
    if (!v63)
      goto LABEL_133;
    if (*v63 == 4)
    {
      if ((v21 & 2) != 0)
        v64 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      else
        v64 = &v20[-8 * ((v21 >> 2) & 0xF)];
      v65 = *((_QWORD *)v64 + 8);
      v66 = *(_QWORD *)(v65 - 16);
      if ((v66 & 2) != 0)
      {
        v67 = *(unsigned __int8 ***)(v65 - 32);
        v68 = *(unsigned int *)(v65 - 24);
      }
      else
      {
        v67 = (unsigned __int8 **)(v65 - 16 - 8 * ((v66 >> 2) & 0xF));
        v68 = (v66 >> 6) & 0xF;
      }
      if (v68)
      {
        v69 = 8 * v68;
        while (1)
        {
          v70 = *v67;
          v73 = v70;
          if (!v70 || (*v70 & 0xFE) != 0x1E)
            break;
          ++v67;
          v69 -= 8;
          if (!v69)
            goto LABEL_133;
        }
        v43 = "invalid macro ref";
LABEL_135:
        v75[0] = v43;
        v76 = 259;
        v72 = a2;
        v11 = &v72;
        goto LABEL_16;
      }
LABEL_133:
      llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(this + 93), a2, (uint64_t)v75);
      return;
    }
    v25 = "invalid macro list";
LABEL_122:
    v75[0] = v25;
    v76 = 259;
    v73 = a2;
    v11 = &v73;
    v12 = &v74;
    goto LABEL_17;
  }
  v30 = 8 * v29;
  while (1)
  {
    v31 = *v28;
    v73 = (unsigned __int8 *)v31;
    if (!v31 || *(_BYTE *)v31 != 13 || *(_WORD *)(v31 + 2) != 4)
      break;
    ++v28;
    v30 -= 8;
    if (!v30)
      goto LABEL_53;
  }
  v75[0] = "invalid enum type";
  v76 = 259;
  v72 = a2;
  if ((v21 & 2) != 0)
    v35 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  else
    v35 = &v20[-8 * ((v21 >> 2) & 0xF)];
  v71 = (unsigned __int8 *)*((_QWORD *)v35 + 4);
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(this, (const llvm::Twine *)v75, &v72, &v71, &v73);
}

void `anonymous namespace'::Verifier::visitDISubprogram(llvm::raw_ostream **this, const llvm::DISubprogram *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  const llvm::DISubprogram **v8;
  unsigned __int8 *v9;
  int v10;
  const llvm::DISubprogram **v11;
  const llvm::DISubprogram *v12;
  const char *v13;
  unsigned int v14;
  char *v15;
  const llvm::DISubprogram *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  char *v23;
  const llvm::DISubprogram *v24;
  char *v25;
  const llvm::DISubprogram **v26;
  const llvm::DISubprogram **v27;
  const llvm::DISubprogram *v28;
  const llvm::DISubprogram *v29;
  unint64_t v30;
  const llvm::DISubprogram **v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::DISubprogram *v34;
  int v35;
  char *v36;
  const llvm::DISubprogram **v37;
  const llvm::DISubprogram **v38;
  const llvm::DISubprogram **v39;
  const llvm::DISubprogram *v40;
  const char *v41;
  const llvm::DISubprogram **v42;
  char *v43;
  const llvm::DISubprogram *v44;
  char *v45;
  const char *v46;
  const llvm::DISubprogram *v47;
  char *v48;
  const llvm::DISubprogram *v49;
  const llvm::DISubprogram *v50;
  unint64_t v51;
  const llvm::DISubprogram **v52;
  uint64_t v53;
  uint64_t v54;
  const llvm::DISubprogram *v55;
  int v56;
  const llvm::DISubprogram *v57;
  const llvm::DISubprogram *v58;
  const llvm::DISubprogram *v59;
  const llvm::DISubprogram *v60;
  const llvm::DISubprogram *v61;
  _QWORD v62[4];
  __int16 v63;

  if (*((_WORD *)a2 + 1) != 46)
  {
    v7 = "invalid tag";
LABEL_5:
    v61 = a2;
    v62[0] = v7;
    v63 = 259;
    v8 = &v61;
LABEL_6:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v62, (unsigned __int8 **)v8);
    return;
  }
  v5 = (char *)a2 - 16;
  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
    v6 = (char *)*((_QWORD *)a2 - 4);
  else
    v6 = &v5[-8 * ((v4 >> 2) & 0xF)];
  v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v9)
  {
    v10 = *v9;
    if ((v10 - 11) >= 0xB && v10 != 32 && v10 != 34)
    {
      v61 = a2;
      v62[0] = "invalid scope";
      v63 = 259;
      if ((v4 & 2) != 0)
        v21 = (char *)*((_QWORD *)a2 - 4);
      else
        v21 = &v5[-8 * ((v4 >> 2) & 0xF)];
      v44 = (const llvm::DISubprogram *)*((_QWORD *)v21 + 1);
      goto LABEL_102;
    }
  }
  if (*(_BYTE *)a2 != 15)
  {
    if ((v4 & 2) != 0)
      v11 = (const llvm::DISubprogram **)*((_QWORD *)a2 - 4);
    else
      v11 = (const llvm::DISubprogram **)&v5[-8 * ((v4 >> 2) & 0xF)];
    v12 = *v11;
    v61 = v12;
    if (v12)
    {
      if (*(_BYTE *)v12 != 15)
      {
        v13 = "invalid file";
LABEL_54:
        v62[0] = v13;
        v63 = 259;
        v60 = a2;
        v26 = &v60;
LABEL_55:
        v27 = &v61;
LABEL_56:
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v62, (unsigned __int8 **)v26, (unsigned __int8 **)v27);
        return;
      }
    }
    else
    {
      v14 = *((_DWORD *)a2 + 4);
      if (v14)
      {
        v62[0] = "line specified with no file";
        v63 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v62);
        if (*this)
        {
          llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
          llvm::VerifierSupport::Write(*this, v14);
        }
        return;
      }
    }
  }
  if ((v4 & 2) != 0)
    v15 = (char *)*((_QWORD *)a2 - 4);
  else
    v15 = &v5[-8 * ((v4 >> 2) & 0xF)];
  v16 = (const llvm::DISubprogram *)*((_QWORD *)v15 + 4);
  v61 = v16;
  if (v16 && *(_BYTE *)v16 != 14)
  {
    v13 = "invalid subroutine type";
    goto LABEL_54;
  }
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) < 9u)
      goto LABEL_45;
    v17 = (char *)*((_QWORD *)a2 - 4);
  }
  else
  {
    if ((v4 & 0x3C0) <= 0x200)
    {
LABEL_34:
      if ((v4 & 0x380) <= 0x240)
        goto LABEL_45;
      v20 = &v5[-8 * ((v4 >> 2) & 0xF)];
      goto LABEL_43;
    }
    v17 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  v18 = (unsigned __int8 *)*((_QWORD *)v17 + 8);
  if (v18)
  {
    v19 = *v18;
    if ((v19 - 11) >= 4 && v19 != 34)
    {
      v61 = a2;
      v62[0] = "invalid containing type";
      v63 = 259;
      if ((v4 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) >= 9u)
        {
          v43 = (char *)*((_QWORD *)a2 - 4);
          goto LABEL_100;
        }
      }
      else if ((v4 & 0x3C0) > 0x200)
      {
        v43 = &v5[-8 * ((v4 >> 2) & 0xF)];
LABEL_100:
        v44 = (const llvm::DISubprogram *)*((_QWORD *)v43 + 8);
LABEL_102:
        v60 = v44;
        v26 = &v61;
LABEL_103:
        v27 = &v60;
        goto LABEL_56;
      }
      v44 = 0;
      goto LABEL_102;
    }
  }
  if ((v4 & 2) == 0)
    goto LABEL_34;
  if (*((_DWORD *)a2 - 6) < 0xAu)
    goto LABEL_45;
  v20 = (char *)*((_QWORD *)a2 - 4);
LABEL_43:
  v22 = (unsigned __int8 *)*((_QWORD *)v20 + 9);
  if (v22)
  {
    v4 = *((_QWORD *)a2 - 2);
  }
LABEL_45:
  if ((v4 & 2) != 0)
    v23 = (char *)*((_QWORD *)a2 - 4);
  else
    v23 = &v5[-8 * ((v4 >> 2) & 0xF)];
  v24 = (const llvm::DISubprogram *)*((_QWORD *)v23 + 6);
  v61 = v24;
  if (v24 && (*(_BYTE *)v24 != 17 || (*((_BYTE *)v24 + 36) & 8) != 0))
  {
    v13 = "invalid subprogram declaration";
    goto LABEL_54;
  }
  if ((v4 & 2) != 0)
    v25 = (char *)*((_QWORD *)a2 - 4);
  else
    v25 = &v5[-8 * ((v4 >> 2) & 0xF)];
  v28 = (const llvm::DISubprogram *)*((_QWORD *)v25 + 7);
  v61 = v28;
  if (v28)
  {
    if (*(_BYTE *)v28 == 4)
      v29 = v28;
    else
      v29 = 0;
    v60 = v29;
    if (!v29)
    {
      v62[0] = "invalid retained nodes list";
      v63 = 259;
      v59 = a2;
      v26 = &v59;
      goto LABEL_55;
    }
    v30 = *((_QWORD *)v29 - 2);
    if ((v30 & 2) != 0)
    {
      v31 = (const llvm::DISubprogram **)*((_QWORD *)v29 - 4);
      v32 = *((unsigned int *)v29 - 6);
    }
    else
    {
      v31 = (const llvm::DISubprogram **)((char *)v29 - 8 * ((v30 >> 2) & 0xF) - 16);
      v32 = (v30 >> 6) & 0xF;
    }
    if (v32)
    {
      v33 = 8 * v32;
      while (1)
      {
        v59 = 0;
        v34 = *v31;
        v59 = v34;
        if (!v34 || *(unsigned __int8 *)v34 - 25 >= 2)
          break;
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_73;
      }
      v62[0] = "invalid retained nodes, expected DILocalVariable or DILabel";
      v63 = 259;
      v58 = a2;
      v37 = &v58;
      v38 = &v60;
      v39 = &v59;
      goto LABEL_79;
    }
  }
LABEL_73:
  v35 = *((_DWORD *)a2 + 8);
  if ((~v35 & 0x6000) == 0 || (v35 & 0xC00000) == 0xC00000)
  {
    v7 = "invalid reference flags";
    goto LABEL_5;
  }
  if ((v4 & 2) != 0)
    v36 = (char *)*((_QWORD *)a2 - 4);
  else
    v36 = &v5[-8 * ((v4 >> 2) & 0xF)];
  v40 = (const llvm::DISubprogram *)*((_QWORD *)v36 + 5);
  v61 = v40;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
  {
    if ((*((_BYTE *)a2 + 1) & 0x7F) != 1)
    {
      v41 = "subprogram definitions must be distinct";
      goto LABEL_105;
    }
    if (!v40)
    {
      v41 = "subprogram definitions must have a compile unit";
      goto LABEL_105;
    }
    if (*(_BYTE *)v40 != 16)
    {
      v13 = "invalid unit type";
      goto LABEL_54;
    }
    if (*(_BYTE *)a2 == 15)
    {
      if ((v4 & 2) != 0)
        v42 = (const llvm::DISubprogram **)*((_QWORD *)a2 - 4);
      else
        v42 = (const llvm::DISubprogram **)&v5[-8 * ((v4 >> 2) & 0xF)];
      v47 = a2;
    }
    else
    {
      if ((v4 & 2) != 0)
        v42 = (const llvm::DISubprogram **)*((_QWORD *)a2 - 4);
      else
        v42 = (const llvm::DISubprogram **)&v5[-8 * ((v4 >> 2) & 0xF)];
      v47 = *v42;
      if (!*v42)
        goto LABEL_117;
    }
    v4 = *((_QWORD *)a2 - 2);
    goto LABEL_117;
  }
  if (v40)
  {
    v41 = "subprogram declarations must not have a compile unit";
LABEL_105:
    v62[0] = v41;
    v63 = 259;
    v60 = a2;
    v8 = &v60;
    goto LABEL_6;
  }
  if ((v4 & 2) != 0)
    v45 = (char *)*((_QWORD *)a2 - 4);
  else
    v45 = &v5[-8 * ((v4 >> 2) & 0xF)];
  if (*((_QWORD *)v45 + 6))
  {
    v46 = "subprogram declaration must not have a declaration field";
LABEL_142:
    v62[0] = v46;
    v63 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v62);
    return;
  }
LABEL_117:
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) < 0xBu)
      goto LABEL_139;
    v48 = (char *)*((_QWORD *)a2 - 4);
  }
  else
  {
    if ((v4 & 0x3C0) <= 0x280)
      goto LABEL_139;
    v48 = &v5[-8 * ((v4 >> 2) & 0xF)];
  }
  v49 = (const llvm::DISubprogram *)*((_QWORD *)v48 + 10);
  v60 = v49;
  if (v49)
  {
    if (*(_BYTE *)v49 == 4)
      v50 = v49;
    else
      v50 = 0;
    v59 = v50;
    if (!v50)
    {
      v62[0] = "invalid thrown types list";
      v63 = 259;
      v58 = a2;
      v26 = &v58;
      goto LABEL_103;
    }
    v51 = *((_QWORD *)v50 - 2);
    if ((v51 & 2) != 0)
    {
      v52 = (const llvm::DISubprogram **)*((_QWORD *)v50 - 4);
      v53 = *((unsigned int *)v50 - 6);
    }
    else
    {
      v52 = (const llvm::DISubprogram **)((char *)v50 - 8 * ((v51 >> 2) & 0xF) - 16);
      v53 = (v51 >> 6) & 0xF;
    }
    if (v53)
    {
      v54 = 8 * v53;
      while (1)
      {
        v58 = 0;
        v55 = *v52;
        v58 = v55;
        if (!v55)
          break;
        v56 = *(unsigned __int8 *)v55;
        if ((v56 - 11) >= 4 && v56 != 34)
          break;
        ++v52;
        v54 -= 8;
        if (!v54)
          goto LABEL_139;
      }
      v62[0] = "invalid thrown type";
      v63 = 259;
      v57 = a2;
      v37 = &v57;
      v38 = &v59;
      v39 = &v58;
LABEL_79:
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(this, (const llvm::Twine *)v62, (unsigned __int8 **)v37, (unsigned __int8 **)v38, (unsigned __int8 **)v39);
      return;
    }
  }
LABEL_139:
  if ((*((_BYTE *)a2 + 35) & 0x20) != 0 && (*((_BYTE *)a2 + 36) & 8) == 0)
  {
    v46 = "DIFlagAllCallsDescribed must be attached to a definition";
    goto LABEL_142;
  }
}

void `anonymous namespace'::Verifier::visitDILexicalBlock(llvm::raw_ostream **a1, uint64_t a2)
{
  BOOL v4;
  const char *v5;
  __int16 v6;

  if (*(_DWORD *)(a2 + 16))
    v4 = 1;
  else
    v4 = *(unsigned __int16 *)(a2 + 20) == 0;
  if (!v4)
  {
    v5 = "cannot have column info without line info";
    v6 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v5);
    if (*a1)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDINamespace(llvm::raw_ostream **this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD v10[4];
  __int16 v11;

  if (*(_WORD *)(a2 + 2) == 57)
  {
    v4 = *(_QWORD *)(a2 - 16);
    if ((v4 & 2) != 0)
      v5 = *(_QWORD *)(a2 - 32);
    else
      v5 = a2 - 16 - 8 * ((v4 >> 2) & 0xF);
    v8 = *(unsigned __int8 **)(v5 + 8);
    if (v8)
    {
      v9 = *v8;
      if ((v9 - 11) >= 0xB && v9 != 32 && v9 != 34)
      {
        v10[0] = "invalid scope ref";
        v11 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v10);
        if (*this)
        {
          llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
          v6 = (llvm::raw_ostream *)this;
          v7 = v8;
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    v10[0] = "invalid tag";
    v11 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v10);
    if (*this)
    {
      v6 = (llvm::raw_ostream *)this;
      v7 = (unsigned __int8 *)a2;
LABEL_6:
      llvm::VerifierSupport::Write(v6, v7);
    }
  }
}

void `anonymous namespace'::Verifier::visitDIModule(llvm::raw_ostream **a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  const char *v7;
  __int16 v8;

  if (*(_WORD *)(a2 + 2) != 30)
  {
    v4 = "invalid tag";
LABEL_9:
    v6 = (unsigned __int8 *)a2;
    v7 = v4;
    v8 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v7, &v6);
    return;
  }
  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(_QWORD *)(a2 - 32);
  else
    v3 = a2 - 16 - 8 * ((v2 >> 2) & 0xF);
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5 || !**(_QWORD **)(v5 + 8))
  {
    v4 = "anonymous module";
    goto LABEL_9;
  }
}

void `anonymous namespace'::Verifier::visitDITemplateTypeParameter(llvm::raw_ostream **a1, uint64_t a2)
{
  const char *v4;
  __int16 v5;

  if (*(_WORD *)(a2 + 2) != 47)
  {
    v4 = "invalid tag";
    v5 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v4);
    if (*a1)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDITemplateValueParameter(llvm::raw_ostream **a1, uint64_t a2)
{
  int v4;
  const char *v5;
  __int16 v6;

  v4 = *(unsigned __int16 *)(a2 + 2);
  if ((v4 - 16646) >= 2 && v4 != 48)
  {
    v5 = "invalid tag";
    v6 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)&v5);
    if (*a1)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIGlobalVariable(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  _QWORD v18[4];
  __int16 v19;

  if (*(_WORD *)(a2 + 2) != 52)
  {
    v7 = "invalid tag";
LABEL_5:
    v17 = (unsigned __int8 *)a2;
    v18[0] = v7;
    v19 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)v18, &v17);
    return;
  }
  v4 = a2 - 16;
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
    v6 = *(_QWORD *)(a2 - 32);
  else
    v6 = v4 - 8 * ((v5 >> 2) & 0xF);
  v8 = *(unsigned __int8 **)(v6 + 24);
  if (v8)
  {
    v9 = *v8;
    if ((v9 - 11) >= 4 && v9 != 34)
    {
      v17 = (unsigned __int8 *)a2;
      v18[0] = "invalid type ref";
      v19 = 259;
      if ((v5 & 2) != 0)
        v15 = *(_QWORD *)(a2 - 32);
      else
        v15 = v4 - 8 * ((v5 >> 2) & 0xF);
      v16 = *(_QWORD *)(v15 + 24);
      v13 = &v17;
      v14 = (unsigned __int8 **)&v16;
      goto LABEL_26;
    }
  }
  if (*(_BYTE *)(a2 + 25))
  {
    v10 = (v5 & 2) != 0 ? *(_QWORD *)(a2 - 32) : v4 - 8 * ((v5 >> 2) & 0xF);
    if (!*(_QWORD *)(v10 + 24))
    {
      v7 = "missing global variable type";
      goto LABEL_5;
    }
  }
  if ((v5 & 2) != 0)
    v11 = *(_QWORD *)(a2 - 32);
  else
    v11 = v4 - 8 * ((v5 >> 2) & 0xF);
  v12 = *(unsigned __int8 **)(v11 + 48);
  v17 = v12;
  if (v12 && *v12 != 12)
  {
    v18[0] = "invalid static data member declaration";
    v19 = 259;
    v16 = a2;
    v13 = (unsigned __int8 **)&v16;
    v14 = &v17;
LABEL_26:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v18, v13, v14);
  }
}

void `anonymous namespace'::Verifier::visitDILocalVariable(llvm::raw_ostream **a1, const llvm::DIVariable *a2)
{
  _WORD *v4;
  unint64_t v5;
  _WORD *v6;
  unsigned __int8 *v7;
  int v8;
  _WORD *v9;
  unsigned __int8 *v10;
  llvm::raw_ostream *v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  _WORD *v14;
  _WORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  const llvm::DIVariable *v18;
  _QWORD v19[4];
  __int16 v20;

  v4 = (_WORD *)((char *)a2 - 16);
  v5 = *((_QWORD *)a2 - 2);
  if ((v5 & 2) != 0)
    v6 = (_WORD *)*((_QWORD *)a2 - 4);
  else
    v6 = &v4[-4 * ((v5 >> 2) & 0xF)];
  v7 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if (v7)
  {
    v8 = *v7;
    if ((v8 - 11) >= 4 && v8 != 34)
    {
      v18 = a2;
      v19[0] = "invalid type ref";
      v20 = 259;
      if ((v5 & 2) != 0)
        v15 = (_WORD *)*((_QWORD *)a2 - 4);
      else
        v15 = &v4[-4 * ((v5 >> 2) & 0xF)];
      v17 = (unsigned __int8 *)*((_QWORD *)v15 + 3);
      goto LABEL_26;
    }
  }
  if (*((_WORD *)a2 + 1) == 52)
  {
    if ((v5 & 2) != 0)
    {
      v9 = (_WORD *)*((_QWORD *)a2 - 4);
      v10 = *(unsigned __int8 **)v9;
      if (*(_QWORD *)v9 && *v10 - 20 > 0xFFFFFFFC)
        goto LABEL_18;
    }
    else
    {
      v9 = &v4[-4 * ((v5 >> 2) & 0xF)];
      v10 = *(unsigned __int8 **)v9;
      if (*(_QWORD *)v9 && *v10 - 20 >= 0xFFFFFFFD)
      {
LABEL_18:
        v13 = (_BYTE *)*((_QWORD *)v9 + 3);
        if (v13 && *v13 == 14)
        {
          v19[0] = "invalid type";
          v20 = 259;
          v14 = (v5 & 2) != 0 ? (_WORD *)*((_QWORD *)a2 - 4) : &v4[-4 * ((v5 >> 2) & 0xF)];
          v16 = (unsigned __int8 *)*((_QWORD *)v14 + 3);
          llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v19);
          if (*a1)
          {
            llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, (unsigned __int8 *)a2);
            v11 = (llvm::raw_ostream *)a1;
            v12 = v16;
            goto LABEL_14;
          }
        }
        return;
      }
    }
    v18 = a2;
    v19[0] = "local variable requires a valid scope";
    v20 = 259;
    v17 = v10;
LABEL_26:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v19, (unsigned __int8 **)&v18, &v17);
    return;
  }
  v19[0] = "invalid tag";
  v20 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v19);
  if (*a1)
  {
    v11 = (llvm::raw_ostream *)a1;
    v12 = (unsigned __int8 *)a2;
LABEL_14:
    llvm::VerifierSupport::Write(v11, v12);
  }
}

void `anonymous namespace'::Verifier::visitDILabel(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  _QWORD v19[4];
  __int16 v20;
  _BYTE *v21;

  v4 = a2 - 16;
  v5 = *(_QWORD *)(a2 - 16);
  if ((v5 & 2) != 0)
    v6 = *(unsigned __int8 ***)(a2 - 32);
  else
    v6 = (unsigned __int8 **)(v4 - 8 * ((v5 >> 2) & 0xF));
  v7 = *v6;
  v21 = v7;
  if (v7)
  {
    v8 = *v7;
    if ((v8 - 11) >= 0xB && v8 != 32 && v8 != 34)
    {
      v14 = "invalid scope";
      goto LABEL_18;
    }
  }
  if ((v5 & 2) != 0)
    v9 = *(_QWORD *)(a2 - 32);
  else
    v9 = v4 - 8 * ((v5 >> 2) & 0xF);
  v10 = *(_BYTE **)(v9 + 16);
  v21 = v10;
  if (v10 && *v10 != 15)
  {
    v14 = "invalid file";
LABEL_18:
    v18 = (unsigned __int8 *)a2;
    v19[0] = v14;
    v20 = 259;
    v15 = &v18;
    v16 = &v21;
LABEL_30:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v19, v15, v16);
    return;
  }
  if (*(_WORD *)(a2 + 2) == 10)
  {
    if ((v5 & 2) != 0)
    {
      v17 = *(unsigned __int8 ***)(a2 - 32);
      v12 = *v17;
      if (!*v17)
      {
        v19[0] = "label requires a valid scope";
        v20 = 259;
        v21 = (_BYTE *)a2;
        goto LABEL_29;
      }
    }
    else
    {
      v11 = (v5 >> 2) & 0xF;
      v12 = *(unsigned __int8 **)(v4 - 8 * v11);
      if (!v12)
      {
        v13 = -v11;
        v19[0] = "label requires a valid scope";
        v20 = 259;
        v21 = (_BYTE *)a2;
LABEL_23:
        v17 = (unsigned __int8 **)(v4 + 8 * v13);
LABEL_29:
        v18 = *v17;
        v15 = &v21;
        v16 = &v18;
        goto LABEL_30;
      }
    }
    if (*v12 - 20 > 0xFFFFFFFC)
      return;
    v19[0] = "label requires a valid scope";
    v20 = 259;
    v21 = (_BYTE *)a2;
    if ((v5 & 2) != 0)
    {
      v17 = *(unsigned __int8 ***)(a2 - 32);
      goto LABEL_29;
    }
    v13 = -(uint64_t)((v5 >> 2) & 0xF);
    goto LABEL_23;
  }
  v19[0] = "invalid tag";
  v20 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v19);
  if (*this)
    llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
}

void `anonymous namespace'::Verifier::visitDIObjCProperty(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD v14[4];
  __int16 v15;

  if (*(_WORD *)(a2 + 2) == 16896)
  {
    v4 = a2 - 16;
    v5 = *(_QWORD *)(a2 - 16);
    if ((v5 & 2) != 0)
      v6 = *(_QWORD *)(a2 - 32);
    else
      v6 = v4 - 8 * ((v5 >> 2) & 0xF);
    v7 = *(unsigned __int8 **)(v6 + 32);
    v13 = v7;
    if (v7)
    {
      v8 = *v7;
      if ((v8 - 11) >= 4 && v8 != 34)
      {
        v11 = "invalid type ref";
        goto LABEL_17;
      }
    }
    if ((v5 & 2) != 0)
      v9 = *(_QWORD *)(a2 - 32);
    else
      v9 = v4 - 8 * ((v5 >> 2) & 0xF);
    v10 = *(unsigned __int8 **)(v9 + 8);
    v13 = v10;
    if (v10 && *v10 != 15)
    {
      v11 = "invalid file";
LABEL_17:
      v14[0] = v11;
      v15 = 259;
      v12 = (unsigned __int8 *)a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v14, &v12, &v13);
    }
  }
  else
  {
    v14[0] = "invalid tag";
    v15 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v14);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIImportedEntity(llvm::raw_ostream **this, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _QWORD v21[4];
  __int16 v22;

  v4 = *((unsigned __int16 *)a2 + 1);
  if (v4 == 8 || v4 == 58)
  {
    v5 = a2 - 16;
    v6 = *((_QWORD *)a2 - 2);
    if ((v6 & 2) != 0)
      v7 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
    else
      v7 = (unsigned __int8 **)&v5[-8 * ((v6 >> 2) & 0xF)];
    v8 = *v7;
    v20 = v8;
    if (v8)
    {
      v9 = *v8;
      if ((v9 - 11) >= 0xB && v9 != 32 && v9 != 34)
      {
        v21[0] = "invalid scope for imported entity";
        v22 = 259;
        v19 = a2;
        v13 = &v19;
        v14 = &v20;
LABEL_28:
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v21, v13, v14);
        return;
      }
    }
    if ((v6 & 2) != 0)
      v10 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    else
      v10 = &v5[-8 * ((v6 >> 2) & 0xF)];
    v11 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (v11)
    {
      v12 = *v11;
      if (v12 - 8 >= 0x16)
      {
        v15 = v12 > 0x23;
        v16 = (1 << v12) & 0xD00000000;
        if (v15 || v16 == 0)
        {
          v20 = a2;
          v21[0] = "invalid imported entity";
          v22 = 259;
          if ((v6 & 2) != 0)
            v18 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
          else
            v18 = &v5[-8 * ((v6 >> 2) & 0xF)];
          v19 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
          v13 = &v20;
          v14 = &v19;
          goto LABEL_28;
        }
      }
    }
  }
  else
  {
    v21[0] = "invalid tag";
    v22 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v21);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, a2);
  }
}

void `anonymous namespace'::Verifier::visitDIAssignID(llvm::raw_ostream **a1, unsigned __int8 *a2)
{
  uint64_t v2;
  const char *v3;
  unsigned __int8 *v4;
  const char *v5;
  __int16 v6;

  v2 = *((_QWORD *)a2 - 2);
  if ((v2 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6))
      goto LABEL_3;
  }
  else if (((v2 >> 6) & 0xF) != 0)
  {
LABEL_3:
    v3 = "DIAssignID has no arguments";
    goto LABEL_7;
  }
  if ((a2[1] & 0x7F) == 1)
    return;
  v3 = "DIAssignID must be distinct";
LABEL_7:
  v4 = a2;
  v5 = v3;
  v6 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v5, &v4);
}

void `anonymous namespace'::Verifier::visitDIMacro(llvm::raw_ostream **a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  const char *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  const char *v7;
  __int16 v8;

  if (*(unsigned __int16 *)(a2 + 2) - 1 >= 2)
  {
    v4 = "invalid macinfo type";
LABEL_9:
    v6 = (unsigned __int8 *)a2;
    v7 = v4;
    v8 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v7, &v6);
    return;
  }
  v2 = *(_QWORD *)(a2 - 16);
  if ((v2 & 2) != 0)
    v3 = *(uint64_t **)(a2 - 32);
  else
    v3 = (uint64_t *)(a2 - 16 - 8 * ((v2 >> 2) & 0xF));
  v5 = *v3;
  if (!v5 || !**(_QWORD **)(v5 + 8))
  {
    v4 = "anonymous macro";
    goto LABEL_9;
  }
}

void `anonymous namespace'::Verifier::visitDIMacroFile(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE **v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE **v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _QWORD v23[4];
  __int16 v24;

  if (*(_WORD *)(a2 + 2) == 3)
  {
    v4 = a2 - 16;
    v5 = *(_QWORD *)(a2 - 16);
    if ((v5 & 2) != 0)
      v6 = *(_BYTE ***)(a2 - 32);
    else
      v6 = (_BYTE **)(v4 - 8 * ((v5 >> 2) & 0xF));
    v7 = *v6;
    v22 = v7;
    if (v7 && *v7 != 15)
    {
      v11 = "invalid file";
      goto LABEL_18;
    }
    if ((v5 & 2) != 0)
      v8 = *(_QWORD *)(a2 - 32);
    else
      v8 = v4 - 8 * ((v5 >> 2) & 0xF);
    v9 = *(_BYTE **)(v8 + 8);
    v22 = v9;
    if (v9)
    {
      if (*v9 == 4)
      {
        if ((v5 & 2) != 0)
          v10 = *(_QWORD *)(a2 - 32);
        else
          v10 = v4 - 8 * ((v5 >> 2) & 0xF);
        v14 = *(_QWORD *)(v10 + 8);
        v15 = *(_QWORD *)(v14 - 16);
        if ((v15 & 2) != 0)
        {
          v16 = *(_BYTE ***)(v14 - 32);
          v17 = *(unsigned int *)(v14 - 24);
          if (!v17)
            return;
        }
        else
        {
          v16 = (_BYTE **)(v14 - 16 - 8 * ((v15 >> 2) & 0xF));
          v17 = (v15 >> 6) & 0xF;
          if (!v17)
            return;
        }
        v18 = 8 * v17;
        while (1)
        {
          v19 = *v16;
          v21 = v19;
          if (!v19 || (*v19 & 0xFE) != 0x1E)
            break;
          ++v16;
          v18 -= 8;
          if (!v18)
            return;
        }
        v23[0] = "invalid macro ref";
        v24 = 259;
        v20 = a2;
        v12 = (unsigned __int8 **)&v20;
        v13 = &v21;
LABEL_19:
        llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v23, v12, v13);
        return;
      }
      v11 = "invalid macro list";
LABEL_18:
      v23[0] = v11;
      v24 = 259;
      v21 = (_BYTE *)a2;
      v12 = &v21;
      v13 = &v22;
      goto LABEL_19;
    }
  }
  else
  {
    v23[0] = "invalid macinfo type";
    v24 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v23);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDICommonBlock(llvm::raw_ostream **this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD v14[4];
  __int16 v15;

  if (*(_WORD *)(a2 + 2) == 26)
  {
    v4 = a2 - 16;
    v5 = *(_QWORD *)(a2 - 16);
    if ((v5 & 2) != 0)
      v6 = *(unsigned __int8 ***)(a2 - 32);
    else
      v6 = (unsigned __int8 **)(v4 - 8 * ((v5 >> 2) & 0xF));
    v7 = *v6;
    v13 = v7;
    if (v7)
    {
      v8 = *v7;
      if ((v8 - 11) >= 0xB && v8 != 32 && v8 != 34)
      {
        v11 = "invalid scope ref";
        goto LABEL_15;
      }
    }
    if ((v5 & 2) != 0)
      v9 = *(_QWORD *)(a2 - 32);
    else
      v9 = v4 - 8 * ((v5 >> 2) & 0xF);
    v10 = *(unsigned __int8 **)(v9 + 8);
    v13 = v10;
    if (v10 && *v10 != 24)
    {
      v11 = "invalid declaration";
LABEL_15:
      v14[0] = v11;
      v15 = 259;
      v12 = (unsigned __int8 *)a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v14, &v12, &v13);
    }
  }
  else
  {
    v14[0] = "invalid tag";
    v15 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v14);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
  }
}

void `anonymous namespace'::Verifier::visitDIArgList(llvm::raw_ostream **this, const llvm::DIArgList *a2)
{
  uint64_t v4;
  const char *v5;
  __int16 v6;

  v4 = *((_QWORD *)a2 - 2);
  if ((v4 & 2) != 0)
  {
    if (!*((_DWORD *)a2 - 6))
      return;
  }
  else if (((v4 >> 6) & 0xF) == 0)
  {
    return;
  }
  v5 = "DIArgList should have no operands other than a list of ValueAsMetadata";
  v6 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v5);
  if (*this)
    llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
}

void `anonymous namespace'::Verifier::visitDIStringType(llvm::raw_ostream **a1, uint64_t a2)
{
  const char *v2;
  unsigned __int8 *v3;
  const char *v4;
  __int16 v5;

  if (*(_WORD *)(a2 + 2) == 18)
  {
    if ((~*(_DWORD *)(a2 + 20) & 0x18000000) != 0)
      return;
    v2 = "has conflicting flags";
  }
  else
  {
    v2 = "invalid tag";
  }
  v3 = (unsigned __int8 *)a2;
  v4 = v2;
  v5 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v4, &v3);
}

void `anonymous namespace'::Verifier::visitDIGenericSubrange(llvm::raw_ostream **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned __int8 **v11;
  const char *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned __int8 *v28;
  const char *v29;
  __int16 v30;

  if (*(_WORD *)(a2 + 2) != 69)
  {
    v12 = "invalid tag";
LABEL_47:
    v28 = (unsigned __int8 *)a2;
    v29 = v12;
    v30 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(a1, (const llvm::Twine *)&v29, &v28);
    return;
  }
  v2 = a2 - 16;
  v3 = *(_QWORD *)(a2 - 16);
  if ((v3 & 2) == 0)
  {
    v4 = (unsigned __int8 **)(v2 - 8 * ((v3 >> 2) & 0xF));
    v5 = *v4;
    v6 = v4[2];
    if (v5)
    {
      if (!v6)
        goto LABEL_5;
LABEL_14:
      v12 = "GenericSubrange can have any one of count or upperBound";
      goto LABEL_47;
    }
    if (v6)
    {
LABEL_16:
      v11 = (unsigned __int8 **)(v2 - 8 * ((v3 >> 2) & 0xF));
      goto LABEL_18;
    }
    goto LABEL_26;
  }
  v11 = *(unsigned __int8 ***)(a2 - 32);
  v5 = *v11;
  v13 = v11[2];
  if (*v11)
  {
    if (!v13)
    {
LABEL_5:
      v7 = *v5;
      v8 = v7 > 0x19;
      v9 = (1 << v7) & 0x3000040;
      if (v8 || v9 == 0)
      {
        v12 = "Count must be signed constant or DIVariable or DIExpression";
        goto LABEL_47;
      }
      if ((v3 & 2) != 0)
      {
        v11 = *(unsigned __int8 ***)(a2 - 32);
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (!v13)
  {
LABEL_26:
    v12 = "GenericSubrange must contain count or upperBound";
    goto LABEL_47;
  }
LABEL_18:
  v14 = v11[1];
  if (!v14)
  {
    v12 = "GenericSubrange must contain lowerBound";
    goto LABEL_47;
  }
  v15 = *v14;
  v8 = v15 > 0x19;
  v16 = (1 << v15) & 0x3000040;
  if (v8 || v16 == 0)
  {
    v12 = "LowerBound must be signed constant or DIVariable or DIExpression";
    goto LABEL_47;
  }
  if ((v3 & 2) != 0)
    v18 = *(_QWORD *)(a2 - 32);
  else
    v18 = v2 - 8 * ((v3 >> 2) & 0xF);
  v19 = *(unsigned __int8 **)(v18 + 16);
  if (v19)
  {
    v20 = *v19;
    v8 = v20 > 0x19;
    v21 = (1 << v20) & 0x3000040;
    if (v8 || v21 == 0)
    {
      v12 = "UpperBound must be signed constant or DIVariable or DIExpression";
      goto LABEL_47;
    }
  }
  if ((v3 & 2) != 0)
    v23 = *(_QWORD *)(a2 - 32);
  else
    v23 = v2 - 8 * ((v3 >> 2) & 0xF);
  v24 = *(unsigned __int8 **)(v23 + 24);
  if (!v24)
  {
    v12 = "GenericSubrange must contain stride";
    goto LABEL_47;
  }
  v25 = *v24;
  v8 = v25 > 0x19;
  v26 = (1 << v25) & 0x3000040;
  if (v8 || v26 == 0)
  {
    v12 = "Stride must be signed constant or DIVariable or DIExpression";
    goto LABEL_47;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
  }
}

void `anonymous namespace'::Verifier::visitValueAsMetadata(llvm::raw_ostream **this, const llvm::ValueAsMetadata *a2, llvm::Function *a3)
{
  const llvm::Value *v5;
  const char *v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  unsigned int v10;
  llvm::Function **v11;
  const char *v12;
  uint64_t v13;
  llvm::Function *v14;
  unsigned __int8 *v15;
  _QWORD v16[4];
  __int16 v17;

  v5 = (const llvm::Value *)*((_QWORD *)a2 + 16);
  if (!v5)
  {
    v16[0] = "Expected valid value";
    v17 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v16);
    if (*this)
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)v5 + 8) == 9)
  {
    v6 = "Unexpected metadata round-trip through values";
    goto LABEL_4;
  }
  v7 = *(unsigned __int8 *)a2;
  v8 = v7 == 2;
  if (v7 == 2)
    v9 = (unsigned __int8 *)a2;
  else
    v9 = 0;
  v15 = v9;
  if (v8)
  {
    if (!a3)
    {
      v12 = "function-local metadata used outside a function";
LABEL_27:
      v16[0] = v12;
      v17 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v16, &v15);
      return;
    }
    v10 = *((unsigned __int8 *)v5 + 16);
    if (v10 >= 0x1C)
    {
      v13 = *((_QWORD *)v5 + 5);
      if (!v13)
      {
        v6 = "function-local metadata not in basic block";
LABEL_4:
        v16[0] = v6;
        v17 = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v16);
        if (*this)
        {
          llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
          llvm::VerifierSupport::Write(this, v5);
        }
        return;
      }
      v11 = (llvm::Function **)(v13 + 56);
    }
    else if (v10 == 21)
    {
      v11 = (llvm::Function **)((char *)v5 + 24);
    }
    else
    {
      if (v10 != 22)
      {
        v14 = 0;
        goto LABEL_25;
      }
      v11 = (llvm::Function **)((char *)v5 + 56);
    }
    v14 = *v11;
LABEL_25:
    if (v14 == a3)
      return;
    v12 = "function-local metadata used in wrong function";
    goto LABEL_27;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(llvm::raw_ostream **a1, const llvm::Twine *a2, unsigned __int8 **a3)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
}

void `anonymous namespace'::Verifier::visitDIScope(llvm::raw_ostream **this, unsigned __int8 *a2)
{
  unint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  const char *v7;
  __int16 v8;

  if (*a2 != 15)
  {
    v4 = *((_QWORD *)a2 - 2);
    if ((v4 & 2) != 0)
      v5 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
    else
      v5 = (unsigned __int8 **)&a2[-8 * ((v4 >> 2) & 0xF) - 16];
    v6 = *v5;
    if (*v5 && *v6 != 15)
    {
      v7 = "invalid file";
      v8 = 259;
      llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v7);
      if (*this)
      {
        llvm::VerifierSupport::Write((llvm::raw_ostream *)this, a2);
        llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v6);
      }
    }
  }
}

void `anonymous namespace'::Verifier::visitTemplateParams(llvm::raw_ostream **this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD v14[4];
  __int16 v15;

  v5 = *a3;
  if (v5 == 4)
    v6 = a3;
  else
    v6 = 0;
  if (v5 != 4)
  {
    v13 = a2;
    v14[0] = "invalid template params";
    v15 = 259;
    v12 = a3;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)v14, &v13, &v12);
    return;
  }
  v7 = *((_QWORD *)a3 - 2);
  if ((v7 & 2) != 0)
  {
    v8 = (unsigned __int8 **)*((_QWORD *)a3 - 4);
    v9 = *((unsigned int *)a3 - 6);
    if (!*((_DWORD *)a3 - 6))
      return;
  }
  else
  {
    v8 = (unsigned __int8 **)&a3[-8 * ((v7 >> 2) & 0xF) - 16];
    v9 = (v7 >> 6) & 0xF;
    if (!v9)
      return;
  }
  v10 = 8 * v9;
  while (1)
  {
    v11 = *v8;
    if (!*v8 || (*v11 & 0xFE) != 0x16)
      break;
    ++v8;
    v10 -= 8;
    if (!v10)
      return;
  }
  v14[0] = "invalid template parameter";
  v15 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v14);
  if (*this)
  {
    llvm::VerifierSupport::Write((llvm::raw_ostream *)this, a2);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v6);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v11);
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubroutineType const*,llvm::Metadata *,llvm::Metadata *>(llvm::raw_ostream **a1, const llvm::Twine *a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a5);
  }
}

void `anonymous namespace'::Verifier::verifySourceDebugInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7[4];
  __int16 v8;

  v5 = a3 != 0;
  v6 = a1 + 808;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(a1 + 808), *(_DWORD *)(a1 + 824), a2, v7) & 1) == 0)
  {
    v7[0] = a2;
    *(_BYTE *)(llvm::DenseMapBase<llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>,llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::FindAndConstruct(v6, v7)+ 8) = v5;
  }
  v7[0] = a2;
  if (*(unsigned __int8 *)(llvm::DenseMapBase<llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>,llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::FindAndConstruct(v6, v7)+ 8) != v5)
  {
    v7[0] = (uint64_t)"inconsistent use of embedded source";
    v8 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)a1, (const llvm::Twine *)v7);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>,llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::DICompileUnit const*,BOOL,llvm::DenseMapInfo<llvm::DICompileUnit const*,void>,llvm::detail::DenseMapPair<llvm::DICompileUnit const*,BOOL>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *((_BYTE *)v15 + 8) = *(_BYTE *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::VerifierSupport *this, unsigned int a2)
{
  llvm::raw_ostream *result;
  _BYTE *v4;

  result = write_unsigned<unsigned long>(this, a2, 0, 0, 0);
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this, 10);
  *((_QWORD *)this + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

void `anonymous namespace'::Verifier::visitDILexicalBlockBase(llvm::raw_ostream **this, uint64_t a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  const char *v7;
  unsigned __int8 *v8;
  _QWORD v9[4];
  __int16 v10;

  if (*(_WORD *)(a2 + 2) != 11)
  {
    v7 = "invalid tag";
LABEL_7:
    v8 = (unsigned __int8 *)a2;
    v9[0] = v7;
    v10 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubrange const*>(this, (const llvm::Twine *)v9, &v8);
    return;
  }
  v4 = *(_QWORD *)(a2 - 16);
  if ((v4 & 2) == 0)
  {
    v5 = *(unsigned __int8 **)(a2 - 16 - 8 * ((v4 >> 2) & 0xF) + 8);
    if (v5)
    {
      v6 = *v5;
      if ((v6 - 20) >= 0xFFFFFFFD)
        goto LABEL_12;
    }
LABEL_10:
    v9[0] = "invalid local scope";
    v10 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v9);
    if (*this)
    {
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, (unsigned __int8 *)a2);
      llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v5);
    }
    return;
  }
  v5 = *(unsigned __int8 **)(*(_QWORD *)(a2 - 32) + 8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  if ((v6 - 20) <= 0xFFFFFFFC)
    goto LABEL_10;
LABEL_12:
  if (v6 == 17 && (v5[36] & 8) == 0)
  {
    v7 = "scope points into the type hierarchy";
    goto LABEL_7;
  }
}

void `anonymous namespace'::Verifier::visitDITemplateParameter(llvm::raw_ostream **this, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  const char *v11;
  __int16 v12;

  v4 = a2 - 16;
  v5 = *((_QWORD *)a2 - 2);
  if ((v5 & 2) != 0)
    v6 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  else
    v6 = &v4[-8 * ((v5 >> 2) & 0xF)];
  v7 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  if (v7)
  {
    v8 = *v7;
    if ((v8 - 11) >= 4 && v8 != 34)
    {
      v11 = "invalid type ref";
      v12 = 259;
      if ((v5 & 2) != 0)
        v9 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      else
        v9 = &v4[-8 * ((v5 >> 2) & 0xF)];
      v10 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v11);
      if (*this)
      {
        llvm::VerifierSupport::Write((llvm::raw_ostream *)this, a2);
        llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v10);
      }
    }
  }
}

void `anonymous namespace'::Verifier::visitDIVariable(llvm::raw_ostream **this, const llvm::DIVariable *a2)
{
  char *v2;
  unint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v6;
  char *v7;
  unsigned __int8 *v8;
  const char *v9;
  unsigned __int8 *v10;
  const char *v11;
  __int16 v12;
  unsigned __int8 *v13;

  v2 = (char *)a2 - 16;
  v3 = *((_QWORD *)a2 - 2);
  if ((v3 & 2) != 0)
    v4 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
  else
    v4 = (unsigned __int8 **)&v2[-8 * ((v3 >> 2) & 0xF)];
  v5 = *v4;
  v13 = v5;
  if (v5)
  {
    v6 = *v5;
    if ((v6 - 11) >= 0xB && v6 != 32 && v6 != 34)
    {
      v9 = "invalid scope";
      goto LABEL_12;
    }
  }
  if ((v3 & 2) != 0)
    v7 = (char *)*((_QWORD *)a2 - 4);
  else
    v7 = &v2[-8 * ((v3 >> 2) & 0xF)];
  v8 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
  v13 = v8;
  if (v8 && *v8 != 15)
  {
    v9 = "invalid file";
LABEL_12:
    v10 = (unsigned __int8 *)a2;
    v11 = v9;
    v12 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(this, (const llvm::Twine *)&v11, &v10, &v13);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>,llvm::DISubprogram const*,llvm::Function const*,llvm::DenseMapInfo<llvm::DISubprogram const*,void>,llvm::detail::DenseMapPair<llvm::DISubprogram const*,llvm::Function const*>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DISubprogram *,llvm::Function const*,llvm::Instruction const*,llvm::DILocation const*,llvm::DILocalScope *,llvm::DISubprogram *>(llvm::raw_ostream **a1, const llvm::Twine *a2, unsigned __int8 **a3, const llvm::Value **a4, const llvm::Value **a5, unsigned __int8 **a6, unsigned __int8 **a7, unsigned __int8 **a8)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
    if (*a5)
      llvm::VerifierSupport::Write(a1, *a5);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a6);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a7);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a8);
  }
}

uint64_t llvm::array_pod_sort_comparator<llvm::BasicBlock *>(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>(unint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *k;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *j;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  BOOL v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *m;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *n;
  unint64_t v104;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 2);
        v44 = *i;
        if (v43 < *i || v44 >= v43 && *(a2 - 1) < i[1])
        {
          *i = v43;
          *(a2 - 2) = v44;
          v45 = i[1];
          i[1] = *(a2 - 1);
          *(a2 - 1) = v45;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(i, i + 2, a2 - 2);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(i, i + 2, i + 4, a2 - 2);
      case 5uLL:
        return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(i, i + 2, i + 4, i + 6, a2 - 2);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v60 = (v11 - 2) >> 1;
            v61 = v60;
            while (1)
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &i[2 * v63];
                if (2 * v62 + 2 < (uint64_t)v11)
                {
                  v65 = v64[2];
                  if (*v64 < v65 || v65 >= *v64 && i[2 * v63 + 1] < v64[3])
                  {
                    v64 += 2;
                    v63 = 2 * v62 + 2;
                  }
                }
                v66 = &i[2 * v62];
                v67 = *v64;
                v68 = *v66;
                if (*v64 >= *v66)
                {
                  if (v68 < v67)
                  {
                    v69 = v66[1];
LABEL_129:
                    *v66 = v67;
                    v66[1] = v64[1];
                    if (v60 >= v63)
                    {
                      while (1)
                      {
                        v71 = 2 * v63;
                        v63 = (2 * v63) | 1;
                        v70 = &i[2 * v63];
                        v72 = v71 + 2;
                        if (v72 < (uint64_t)v11)
                        {
                          v73 = v70[2];
                          if (*v70 < v73 || v73 >= *v70 && i[2 * v63 + 1] < v70[3])
                          {
                            v70 += 2;
                            v63 = v72;
                          }
                        }
                        v74 = *v70;
                        if (*v70 < v68 || v68 >= v74 && v70[1] < v69)
                          break;
                        *v64 = v74;
                        v64[1] = v70[1];
                        v64 = v70;
                        if (v60 < v63)
                          goto LABEL_131;
                      }
                    }
                    v70 = v64;
LABEL_131:
                    *v70 = v68;
                    v70[1] = v69;
                    goto LABEL_132;
                  }
                  v69 = i[2 * v62 + 1];
                  if (v64[1] >= v69)
                    goto LABEL_129;
                }
              }
LABEL_132:
              v61 = v62 - 1;
              if (!v62)
              {
                v75 = (unint64_t)v10 >> 4;
                while (1)
                {
                  v76 = 0;
                  v77 = *i;
                  v78 = i[1];
                  v79 = v75 - 2;
                  if (v75 < 2)
                    v79 = v75 - 1;
                  v80 = v79 >> 1;
                  v81 = i;
                  do
                  {
                    v82 = v81;
                    v83 = v76 + 1;
                    v81 += 2 * v76 + 2;
                    v84 = 2 * v76;
                    result = (2 * v76) | 1;
                    v76 = result;
                    v85 = v84 + 2;
                    if (v85 < v75)
                    {
                      result = (unint64_t)(v81 + 2);
                      v86 = v81[2];
                      if (*v81 < v86 || v86 >= *v81 && v82[2 * v83 + 1] < v81[3])
                      {
                        v81 += 2;
                        v76 = v85;
                      }
                    }
                    *v82 = *v81;
                    v82[1] = v81[1];
                  }
                  while (v76 <= v80);
                  if (v81 == a2 - 2)
                  {
                    *v81 = v77;
                    v81[1] = v78;
                  }
                  else
                  {
                    *v81 = *(a2 - 2);
                    v81[1] = *(a2 - 1);
                    *(a2 - 2) = v77;
                    *(a2 - 1) = v78;
                    v87 = (char *)v81 - (char *)i + 16;
                    if (v87 >= 17)
                    {
                      v88 = ((unint64_t)v87 >> 4) - 2;
                      v89 = v88 >> 1;
                      v90 = &i[2 * (v88 >> 1)];
                      v91 = *v90;
                      v92 = *v81;
                      if (*v90 < *v81)
                      {
                        v93 = v81[1];
LABEL_160:
                        *v81 = v91;
                        v81[1] = i[2 * v89 + 1];
                        if (v88 >= 2)
                        {
                          while (1)
                          {
                            v95 = v89 - 1;
                            v89 = (v89 - 1) >> 1;
                            v94 = &i[2 * v89];
                            v96 = *v94;
                            if (*v94 >= v92)
                            {
                              if (v92 < v96)
                                break;
                              result = i[2 * v89 + 1];
                              if (result >= v93)
                                break;
                            }
                            else
                            {
                              result = v94[1];
                            }
                            *v90 = v96;
                            v90[1] = result;
                            v90 = &i[2 * v89];
                            if (v95 <= 1)
                              goto LABEL_167;
                          }
                        }
                        v94 = v90;
LABEL_167:
                        *v94 = v92;
                        v94[1] = v93;
                        goto LABEL_168;
                      }
                      if (v92 >= v91)
                      {
                        result = i[2 * v89 + 1];
                        v93 = v81[1];
                        if (result < v93)
                          goto LABEL_160;
                      }
                    }
                  }
LABEL_168:
                  a2 -= 2;
                  if (v75-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = v11 >> 1;
          v13 = &i[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(&v7[2 * (v11 >> 1)], v7, a2 - 2);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v7, &v7[2 * (v11 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v7 + 2, v13 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
            result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v13 - 2, v13, &v7[2 * v12 + 2]);
            v14 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v13;
            *(_OWORD *)v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) == 0)
          {
            v16 = *(v7 - 2);
            if (v16 >= v15)
            {
              if (v15 < v16)
              {
                v17 = v7[1];
              }
              else
              {
                v17 = v7[1];
                if (*(v7 - 1) < v17)
                  goto LABEL_13;
              }
              v33 = *v8;
              if (v15 >= *v8 && (v33 < v15 || v17 >= *(a2 - 1)))
              {
                for (i = v7 + 2; i < a2 && v15 >= *i && (*i < v15 || v17 >= i[1]); i += 2)
                  ;
              }
              else
              {
                i = v7;
                do
                {
                  v35 = i[2];
                  i += 2;
                  v34 = v35;
                }
                while (v15 >= v35 && (v34 < v15 || v17 >= i[1]));
              }
              j = a2;
              if (i < a2)
              {
                for (j = a2 - 2; v15 < v33 || v33 >= v15 && v17 < j[1]; j -= 2)
                {
                  v37 = *(j - 2);
                  v33 = v37;
                }
              }
              if (i < j)
              {
                v38 = *i;
                v39 = *j;
                do
                {
                  *i = v39;
                  *j = v38;
                  v40 = i[1];
                  i[1] = j[1];
                  j[1] = v40;
                  do
                  {
                    v41 = i[2];
                    i += 2;
                    v38 = v41;
                  }
                  while (v15 >= v41 && (v38 < v15 || v17 >= i[1]));
                  do
                  {
                    do
                    {
                      v42 = *(j - 2);
                      j -= 2;
                      v39 = v42;
                    }
                    while (v15 < v42);
                  }
                  while (v39 >= v15 && v17 < j[1]);
                }
                while (i < j);
              }
              if (i - 2 != v7)
              {
                *v7 = *(i - 2);
                v7[1] = *(i - 1);
              }
              a4 = 0;
              *(i - 2) = v15;
              *(i - 1) = v17;
              continue;
            }
          }
LABEL_13:
          v18 = 0;
          v19 = v7[1];
          while (1)
          {
            v20 = v7[v18 + 2];
            if (v20 >= v15 && (v15 < v20 || v7[v18 + 3] >= v19))
              break;
            v18 += 2;
          }
          v21 = (unint64_t)&v7[v18 + 2];
          if (v18 * 8)
          {
            v22 = *v8;
            for (k = a2 - 2; v22 >= v15 && (v15 < v22 || k[1] >= v19); k -= 2)
            {
              v24 = *(k - 2);
              v22 = v24;
            }
          }
          else
          {
            k = a2;
            if (v21 < (unint64_t)a2)
            {
              v25 = *v8;
              k = a2 - 2;
              if (*v8 >= v15)
              {
                k = a2 - 2;
                do
                {
                  if (v15 >= v25)
                  {
                    if (v21 >= (unint64_t)k || k[1] < v19)
                      break;
                  }
                  else if (v21 >= (unint64_t)k)
                  {
                    break;
                  }
                  v26 = *(k - 2);
                  k -= 2;
                  v25 = v26;
                }
                while (v26 >= v15);
              }
            }
          }
          if (v21 >= (unint64_t)k)
          {
            i = (unint64_t *)v21;
          }
          else
          {
            v27 = *k;
            i = (unint64_t *)v21;
            v28 = k;
            do
            {
              *i = v27;
              *v28 = v20;
              v29 = i[1];
              i[1] = v28[1];
              v28[1] = v29;
              do
              {
                do
                {
                  v30 = i[2];
                  i += 2;
                  v20 = v30;
                }
                while (v30 < v15);
              }
              while (v15 >= v20 && i[1] < v19);
              do
              {
                v31 = *(v28 - 2);
                v28 -= 2;
                v27 = v31;
              }
              while (v31 >= v15 && (v15 < v27 || v28[1] >= v19));
            }
            while (i < v28);
          }
          if (i - 2 != v7)
          {
            *v7 = *(i - 2);
            v7[1] = *(i - 1);
          }
          *(i - 2) = v15;
          *(i - 1) = v19;
          if (v21 < (unint64_t)k)
          {
LABEL_50:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *,false>(v7, i - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(v7, i - 2);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(i, a2);
          if (!(_DWORD)result)
          {
            if (v32)
              continue;
            goto LABEL_50;
          }
          a2 = i - 2;
          if (v32)
            return result;
          goto LABEL_2;
        }
        v46 = i + 2;
        v48 = i == a2 || v46 == a2;
        if ((a4 & 1) == 0)
        {
          if (v48)
            return result;
          for (m = i + 1; ; m += 2)
          {
            v99 = v7;
            v7 = v46;
            v100 = v99[2];
            v101 = *v99;
            if (v100 < *v99)
              break;
            if (v101 >= v100)
            {
              v102 = v99[3];
              if (v102 < v99[1])
                goto LABEL_180;
            }
LABEL_186:
            v46 = v7 + 2;
            if (v7 + 2 == a2)
              return result;
          }
          v102 = v99[3];
LABEL_180:
          for (n = m; ; n -= 2)
          {
            v104 = *n;
            n[1] = v101;
            n[2] = v104;
            v101 = *(n - 3);
            if (v100 >= v101 && (v101 < v100 || v102 >= *(n - 2)))
              break;
          }
          *(n - 1) = v100;
          *n = v102;
          goto LABEL_186;
        }
        if (v48)
          return result;
        v49 = 0;
        v50 = i;
        do
        {
          v51 = v50;
          v50 = v46;
          v52 = v51[2];
          v53 = *v51;
          if (v52 >= *v51)
          {
            if (v53 < v52)
              goto LABEL_115;
            v54 = v51[3];
            if (v54 >= v51[1])
              goto LABEL_115;
          }
          else
          {
            v54 = v51[3];
          }
          v51[2] = v53;
          v50[1] = v51[1];
          v55 = i;
          if (v51 == i)
            goto LABEL_114;
          v56 = v49;
          while (1)
          {
            v57 = *(unint64_t *)((char *)i + v56 - 16);
            if (v52 >= v57)
              break;
            v58 = *(unint64_t *)((char *)i + v56 - 8);
LABEL_111:
            v51 -= 2;
            v59 = (unint64_t *)((char *)i + v56);
            *v59 = v57;
            v59[1] = v58;
            v56 -= 16;
            if (!v56)
            {
              v55 = i;
              goto LABEL_114;
            }
          }
          if (v57 >= v52)
          {
            v55 = (unint64_t *)((char *)i + v56);
            v58 = *(unint64_t *)((char *)i + v56 - 8);
            if (v54 >= v58)
              goto LABEL_114;
            goto LABEL_111;
          }
          v55 = v51;
LABEL_114:
          *v55 = v52;
          v55[1] = v54;
LABEL_115:
          v46 = v50 + 2;
          v49 += 16;
        }
        while (v50 + 2 != a2);
        return result;
    }
  }
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || a2[1] >= result[1]))
  {
    v7 = *a3;
    if (*a3 < v3 || v3 >= v7 && a3[1] < a2[1])
    {
      *a2 = v7;
      *a3 = v3;
      v8 = a2 + 1;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *a2;
      v11 = *result;
      if (*a2 < *result || v11 >= v10 && *v8 < result[1])
      {
        *result++ = v10;
        *a2 = v11;
LABEL_18:
        v15 = *result;
        *result = *v8;
        *v8 = v15;
      }
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
LABEL_17:
      v8 = v6;
      goto LABEL_18;
    }
    *result = v3;
    *a2 = v4;
    v12 = result[1];
    result[1] = a2[1];
    a2[1] = v12;
    v13 = *a3;
    v14 = *a2;
    if (*a3 < *a2 || v14 >= v13 && a3[1] < v12)
    {
      *a2 = v13;
      *a3 = v14;
      v6 = a3 + 1;
      result = a2 + 1;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = (unint64_t *)((char *)a1 + v17 + 32);
        goto LABEL_22;
      }
      v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *((_QWORD *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_22;
      }
    }
    v16 = v9;
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

unint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

unint64_t *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<llvm::BasicBlock *,llvm::Value *> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::visit(llvm::raw_ostream **this, llvm::Instruction *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  const llvm::Value *v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)a2 + 5);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) == 0)
LABEL_7:
    __asm { BR              X12 }
  v4 = 0;
  while (1)
  {
    v5 = (char *)a2 - 32 * v3;
    if ((v2 & 0x40000000) != 0)
      v5 = (char *)*((_QWORD *)a2 - 1);
    if (!*(_QWORD *)&v5[v4])
      break;
    v4 += 32;
    if (32 * v3 == v4)
      goto LABEL_7;
  }
  v7 = "Operand is null";
  v8 = 259;
  v6 = a2;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v7, &v6);
}

void `anonymous namespace'::Verifier::visitTerminator(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Instruction *v4;
  uint64_t v5;
  BOOL v6;
  const llvm::Value *v7;
  const char *v8;
  __int16 v9;

  v2 = *((_QWORD *)a2 + 5);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 != v2 + 40
    && ((v4 = (llvm::Instruction *)(v3 - 24), v3) ? (v5 = v3 - 24) : (v5 = 0),
        *(unsigned __int8 *)(v5 + 16) - 29 <= 0xA ? (v6 = v4 == a2) : (v6 = 0),
        v6))
  {
  }
  else
  {
    v7 = (const llvm::Value *)*((_QWORD *)a2 + 5);
    v8 = "Terminator found in the middle of a basic block!";
    v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v8, &v7);
  }
}

void `anonymous namespace'::Verifier::visitInstruction(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  uint64_t j;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  llvm::CallBase *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Instruction *v21;
  int v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  const llvm::Value *v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  const void *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  llvm::Instruction *v38;
  unsigned int v39;
  int v40;
  unsigned int v42;
  int v43;
  const void *v46;
  uint64_t v47;
  int v48;
  uint64_t Metadata;
  int v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  const llvm::Value **v56;
  char v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  unsigned __int8 *v63;
  unsigned int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  size_t v88;
  void *v89;
  char *v90;
  char v91;
  BOOL isEmptySet;
  void *v93;
  void *v94;
  llvm::MDNode *v95;
  llvm::MDNode *v96;
  const llvm::MDNode *v97;
  const llvm::MDNode *v98;
  const llvm::MDNode *v99;
  const llvm::MDNode *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  const llvm::Value **v104;
  uint64_t v105;
  int8x8_t *v106;
  int8x8_t *v107;
  uint8x8_t v108;
  llvm::MDNode *v109;
  llvm::MDNode *v110;
  llvm::MDNode *v111;
  llvm::MDNode *v112;
  llvm::MDNode *v113;
  unsigned __int8 *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  void *v128;
  void *v129;
  BOOL v130;
  char *v131;
  unsigned int v132;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  void *__src;
  const void *v137;
  unsigned int v138;
  void *v139;
  unsigned int v140;
  const llvm::Value *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  unsigned int v146;
  void *v147;
  unsigned int v148;
  unsigned __int8 *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  __int16 v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 5);
  if (!v4)
  {
    v8 = "Instruction not embedded in basic block!";
    goto LABEL_336;
  }
  if (*((_BYTE *)a2 + 16) != 83)
  {
    for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
    {
      if (*(llvm::Instruction **)(i + 24) == a2)
      {
        v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find((uint64_t)this + 224, v4);
        if (*((_QWORD *)this + 28) + 16 * *((unsigned int *)this + 60) != v6)
        {
          if (*(_QWORD *)(v6 + 8))
          {
            v8 = "Only PHI nodes may reference their own value!";
            goto LABEL_336;
          }
        }
      }
    }
  }
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (v7 == 14)
  {
    v8 = "Instruction returns a non-scalar type!";
    goto LABEL_336;
  }
  if (v7 == 9)
  {
    v9 = *((unsigned __int8 *)a2 + 16);
    if (v9 != 33 && v9 != 84)
    {
      v8 = "Invalid use of metadata!";
      goto LABEL_336;
    }
  }
  else if (v7 == 7 && (*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v8 = "Instruction has a name, but provides a void value!";
    goto LABEL_336;
  }
  for (j = *((_QWORD *)a2 + 1); j; j = *(_QWORD *)(j + 8))
  {
    v11 = *(_QWORD *)(j + 24);
    if (*(unsigned __int8 *)(v11 + 16) <= 0x1Bu)
      v11 = 0;
    v145 = (unsigned __int8 *)v11;
    if (!v11)
    {
      v150 = "Use of instruction is not an instruction!";
      v154 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&v150);
      if (*(_QWORD *)this && *(_QWORD *)j)
        llvm::VerifierSupport::Write((llvm::raw_ostream **)this, *(const llvm::Value **)j);
      return;
    }
    if (!*(_QWORD *)(v11 + 40))
    {
      v150 = "Instruction referencing instruction not embedded in a basic block!";
      v154 = 259;
      v137 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, (const llvm::Value **)&v137, (const llvm::Value **)&v145);
      return;
    }
  }
  v12 = *((unsigned __int8 *)a2 + 16) - 33;
  v13 = v12 > 0x33;
  v14 = (1 << v12) & 0x8000000000041;
  if (v13 || v14 == 0)
    v16 = 0;
  else
    v16 = a2;
  v17 = *((_DWORD *)a2 + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) != 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = (llvm::CallBase *)((char *)v16 - 32);
    do
    {
      v22 = *((_DWORD *)a2 + 5);
      if ((v22 & 0x40000000) != 0)
        v23 = (char *)*((_QWORD *)a2 - 1);
      else
        v23 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
      v24 = *(_QWORD *)&v23[v19];
      if (!v24)
      {
        v8 = "Instruction has null operand!";
        goto LABEL_336;
      }
      v25 = *(unsigned __int8 *)(*(_QWORD *)v24 + 8);
      if (v25 == 14 || v25 == 7)
      {
        v8 = "Instruction operands must be first-class values!";
        goto LABEL_336;
      }
      if ((v22 & 0x40000000) != 0)
        v27 = (char *)*((_QWORD *)a2 - 1);
      else
        v27 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
      v28 = *(_QWORD *)&v27[v19];
      if (*(_BYTE *)(v28 + 16))
        v29 = 0;
      else
        v29 = v28;
      v145 = (unsigned __int8 *)v29;
      if (v29)
      {
        if ((*(_BYTE *)(v29 + 33) & 0x20) == 0)
          goto LABEL_52;
        if (!v16)
          goto LABEL_141;
        v38 = (v22 & 0x40000000) != 0
            ? (llvm::Instruction *)*((_QWORD *)a2 - 1)
            : (llvm::Instruction *)((char *)a2 - 32 * (v22 & 0x7FFFFFF));
        if ((llvm::Instruction *)((char *)v38 + v19) != v21)
        {
          if (!llvm::CallBase::isOperandBundleOfType(v16, 6, v20))
          {
LABEL_141:
            v55 = "Cannot take the address of an intrinsic!";
            goto LABEL_142;
          }
          if ((*(_DWORD *)(v29 + 32) & 0x2000) == 0)
            goto LABEL_52;
        }
        if (*((_BYTE *)a2 + 16) == 84)
          goto LABEL_52;
        v40 = *(_DWORD *)(v29 + 36);
        if (v40 > 268)
        {
          if ((v40 - 269) < 4 || v40 == 10148)
          {
LABEL_52:
            v30 = (const llvm::Value *)*((_QWORD *)this + 1);
            if (*(const llvm::Value **)(v29 + 40) != v30)
            {
              v149 = *(unsigned __int8 **)(v29 + 40);
              v150 = "Referencing function in another module!";
              v154 = 259;
              v137 = a2;
              v141 = v30;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*,llvm::Module const*,llvm::Function*,llvm::Module*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, (const llvm::Value **)&v137, (uint64_t *)&v141, (const llvm::Value **)&v145, (uint64_t *)&v149);
              return;
            }
            goto LABEL_116;
          }
        }
        else
        {
          if (v40 <= 0x3D && ((1 << v40) & 0x2000200080000000) != 0)
            goto LABEL_52;
          v42 = v40 - 125;
          v13 = v42 > 4;
          v43 = (1 << v42) & 0x19;
          if (!v13 && v43 != 0)
            goto LABEL_52;
        }
        if (!llvm::CallBase::isOperandBundleOfType(v16, 6, v20))
        {
          v55 = "Cannot invoke an intrinsic other than donothing, patchpoint, statepoint, coro_resume, coro_destroy or cl"
                "ang.arc.attachedcall";
          goto LABEL_142;
        }
        goto LABEL_52;
      }
      if ((v22 & 0x40000000) != 0)
      {
        v32 = *(_QWORD *)(*((_QWORD *)a2 - 1) + v19);
        v39 = *(unsigned __int8 *)(v32 + 16);
        if (!v32 || v39 != 22)
        {
          if (v39 != 21)
          {
            if (v39 >= 4)
              v46 = 0;
            else
              v46 = *(const void **)(*((_QWORD *)a2 - 1) + v19);
            v137 = v46;
            if (v46)
            {
LABEL_106:
              v47 = *(_QWORD *)(v32 + 40);
              if (v47 != *((_QWORD *)this + 1))
              {
                v149 = (unsigned __int8 *)*((_QWORD *)this + 1);
                v150 = "Referencing global in another module!";
                v154 = 259;
                v141 = a2;
                v144 = v47;
                llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::Module const*,llvm::GlobalValue *,llvm::Module*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, &v141, (uint64_t *)&v149, (const llvm::Value **)&v137, &v144);
                return;
              }
              goto LABEL_116;
            }
            v31 = (char *)*((_QWORD *)a2 - 1);
            v36 = *(unsigned __int8 **)&v31[v19];
            v37 = v36[16];
            if (v37 < 0x1C)
            {
LABEL_65:
              if (v37 == 24)
              {
                if (!v16 || &v31[v19] != (char *)v21)
                {
                  v150 = "Cannot take the address of an inline asm!";
                  v154 = 259;
                  v141 = a2;
                  v56 = &v141;
                  goto LABEL_337;
                }
              }
              else if (v37 == 5)
              {
                v48 = (*(_DWORD *)(*(_QWORD *)v36 + 8) & 0xFE) == 0x12
                    ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v36 + 16) + 8)
                    : *(_DWORD *)(*(_QWORD *)v36 + 8);
                if (v48 == 15)
              }
              goto LABEL_116;
            }
            goto LABEL_109;
          }
          goto LABEL_94;
        }
      }
      else
      {
        v31 = (char *)a2 - 32 * (v22 & 0x7FFFFFF);
        v32 = *(_QWORD *)&v31[v19];
        v33 = *(unsigned __int8 *)(v32 + 16);
        if (v32)
          v34 = v33 == 22;
        else
          v34 = 0;
        if (!v34)
        {
          if (v33 != 21)
          {
            if (v33 >= 4)
              v35 = 0;
            else
              v35 = *(const void **)&v31[v19];
            v137 = v35;
            if (v35)
              goto LABEL_106;
            v36 = *(unsigned __int8 **)&v31[v19];
            v37 = v36[16];
            if (v37 <= 0x1B)
              goto LABEL_65;
LABEL_109:
            goto LABEL_116;
          }
LABEL_94:
          if (*(_QWORD *)(v32 + 24) != *(_QWORD *)(v4 + 56))
          {
            v55 = "Referring to an argument in another function!";
            goto LABEL_142;
          }
          goto LABEL_116;
        }
      }
      if (*(_QWORD *)(v32 + 56) != *(_QWORD *)(v4 + 56))
      {
        v55 = "Referring to a basic block in another function!";
LABEL_142:
        v150 = v55;
        v154 = 259;
        v137 = a2;
        v56 = (const llvm::Value **)&v137;
        goto LABEL_337;
      }
LABEL_116:
      ++v20;
      v19 += 32;
    }
    while (v18 != v20);
  }
  if (!*((_QWORD *)a2 + 6) && (*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_151;
  Metadata = llvm::Value::getMetadata(a2, 3);
  if (!Metadata)
    goto LABEL_151;
  v50 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v50 & 0xFE) == 0x12)
    v50 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v50 >= 4u && v50 != 5 && (v50 & 0xFD) != 4)
  {
    v8 = "fpmath requires a floating point result!";
    goto LABEL_336;
  }
  v51 = *(_QWORD *)(Metadata - 16);
  if ((v51 & 2) != 0)
  {
    if (*(_DWORD *)(Metadata - 24) == 1)
    {
      v52 = *(uint64_t **)(Metadata - 32);
      goto LABEL_131;
    }
LABEL_136:
    v8 = "fpmath takes one operand!";
    goto LABEL_336;
  }
  if ((*(_QWORD *)(Metadata - 16) & 0x3C0) != 0x40)
    goto LABEL_136;
  v52 = (uint64_t *)(Metadata - 16 - 8 * ((v51 >> 2) & 0xF));
LABEL_131:
  v53 = *v52;
  if (!v53 || *(_BYTE *)v53 != 1 || (v54 = *(_QWORD *)(v53 + 128), *(_BYTE *)(v54 + 16) != 17))
  {
    v8 = "invalid fpmath accuracy!";
    goto LABEL_336;
  }
  if (*(_UNKNOWN **)(v54 + 32) != &llvm::semIEEEsingle)
  {
    v8 = "fpmath accuracy must have float type";
    goto LABEL_336;
  }
  v57 = *(_BYTE *)(v54 + 52);
  v58 = v57 & 6;
  v59 = v57 & 7;
  v60 = v57 & 8;
  if (v58)
    v61 = v59 == 3;
  else
    v61 = 1;
  if (v61 || v60 != 0)
  {
    v8 = "fpmath accuracy not a positive number!";
    goto LABEL_336;
  }
LABEL_151:
  if (!*((_QWORD *)a2 + 6) && (*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_164;
  v63 = (unsigned __int8 *)llvm::Value::getMetadata(a2, 4);
  if (!v63)
    goto LABEL_164;
  v64 = *((unsigned __int8 *)a2 + 16) - 33;
  if (v64 > 0x33 || ((1 << v64) & 0x8000008000001) == 0)
  {
    v8 = "Ranges are only for loads, calls and invokes!";
    goto LABEL_336;
  }
  v65 = v63;
  v66 = *(_QWORD *)a2;
  v149 = v63;
  v68 = v63 - 16;
  v67 = *((_QWORD *)v63 - 2);
  if ((v67 & 2) != 0)
    v69 = *((_DWORD *)v63 - 6);
  else
    v69 = (v67 >> 6) & 0xF;
  if ((v69 & 1) != 0)
  {
    v70 = "Unfinished range!";
    goto LABEL_163;
  }
  if (v69 <= 1)
  {
    v70 = "It should have at least one range!";
LABEL_163:
    v150 = v70;
    v154 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, &v149);
    goto LABEL_164;
  }
  v132 = v69;
  v74 = v69 >> 1;
  llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)&v145, 1u, 1);
  v75 = 0;
  v133 = v68;
  v134 = 16 * v74;
  v135 = v66;
  do
  {
    v76 = *(_QWORD *)v68;
    if ((*(_QWORD *)v68 & 2) != 0)
      v77 = (unsigned __int8 *)*((_QWORD *)v65 - 4);
    else
      v77 = &v68[-8 * ((v76 >> 2) & 0xF)];
    v78 = *(_QWORD *)&v77[v75];
    if (*(_BYTE *)v78 != 1 || (v79 = *(_QWORD *)(v78 + 128), *(_BYTE *)(v79 + 16) != 16))
    {
      v144 = 0;
      v150 = "The lower limit must be an integer!";
      v154 = 259;
      v104 = (const llvm::Value **)&v144;
LABEL_284:
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, v104);
      goto LABEL_286;
    }
    if ((v76 & 2) != 0)
      v80 = (unsigned __int8 *)*((_QWORD *)v65 - 4);
    else
      v80 = &v68[-8 * ((v76 >> 2) & 0xF)];
    v81 = *(_QWORD *)&v80[v75 + 8];
    if (*(_BYTE *)v81 != 1 || (v82 = *(_QWORD *)(v81 + 128), *(_BYTE *)(v82 + 16) != 16))
    {
      v143 = 0;
      v150 = "The upper limit must be an integer!";
      v154 = 259;
      v104 = (const llvm::Value **)&v143;
      goto LABEL_284;
    }
    if (*(_QWORD *)v82 != *(_QWORD *)v79)
      goto LABEL_285;
    v83 = v66;
    if ((*(_DWORD *)(v66 + 8) & 0xFE) == 0x12)
      v83 = **(_QWORD **)(v66 + 16);
    if (*(_QWORD *)v82 != v83)
    {
LABEL_285:
      v150 = "Range types must match instruction type!";
      v154 = 259;
      v137 = a2;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, (const llvm::Value **)&v137);
      goto LABEL_286;
    }
    v84 = *(unsigned int *)(v82 + 32);
    if (v84 > 0x40)
    {
      __src = (void *)operator new[]();
      memcpy(__src, *(const void **)(v82 + 24), ((unint64_t)(v84 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __src = *(void **)(v82 + 24);
    }
    v85 = *(unsigned int *)(v79 + 32);
    v142 = v85;
    if (v85 > 0x40)
    {
      v88 = ((unint64_t)(v85 + 63) >> 3) & 0x3FFFFFF8;
      v86 = (void *)operator new[]();
      memcpy(v86, *(const void **)(v79 + 24), v88);
      v87 = (void *)operator new[]();
      memcpy(v87, v86, v88);
    }
    else
    {
      v86 = *(void **)(v79 + 24);
      v87 = v86;
    }
    v141 = (const llvm::Value *)v86;
    v89 = __src;
    if (v84 >= 0x41)
    {
      v89 = (void *)operator new[]();
      v68 = v133;
      memcpy(v89, __src, ((unint64_t)(v84 + 63) >> 3) & 0x3FFFFFF8);
    }
    v138 = v85;
    v137 = v87;
    v140 = v84;
    v139 = v89;
    if (llvm::ConstantRange::isEmptySet(&v137) || llvm::ConstantRange::isFullSet(&v137))
    {
      v90 = "Range must not be empty!";
LABEL_204:
      v150 = v90;
      v154 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, &v149);
      v91 = 0;
      goto LABEL_205;
    }
    if (v75)
    {
      llvm::ConstantRange::intersectWith(&v137, (const void **)&v145, 0, (uint64_t)&v150);
      isEmptySet = llvm::ConstantRange::isEmptySet((const void **)&v150);
      if (v153 >= 0x41 && v152)
        MEMORY[0x24BD1B380](v152, 0x1000C8000313F17);
      if (v151 >= 0x41 && v150)
        MEMORY[0x24BD1B380](v150, 0x1000C8000313F17);
      if (!isEmptySet)
      {
        v90 = "Intervals are overlapping";
        goto LABEL_204;
      }
      if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v141, (const llvm::APInt *)&v145) <= 0)
      {
        v90 = "Intervals are not in order";
        goto LABEL_204;
      }
      if (isContiguous(&v137, (const void **)&v145))
      {
        v90 = "Intervals are contiguous";
        goto LABEL_204;
      }
    }
    v93 = v86;
    if (v85 >= 0x41)
    {
      v93 = (void *)operator new[]();
      memcpy(v93, v86, ((unint64_t)(v85 + 63) >> 3) & 0x3FFFFFF8);
    }
    v94 = __src;
    if (v84 >= 0x41)
    {
      v94 = (void *)operator new[]();
      v68 = v133;
      memcpy(v94, __src, ((unint64_t)(v84 + 63) >> 3) & 0x3FFFFFF8);
    }
    if (v146 >= 0x41 && v145)
      MEMORY[0x24BD1B380](v145, 0x1000C8000313F17);
    v145 = (unsigned __int8 *)v93;
    v146 = v85;
    if (v148 >= 0x41 && v147)
      MEMORY[0x24BD1B380](v147, 0x1000C8000313F17);
    v147 = v94;
    v148 = v84;
    v91 = 1;
LABEL_205:
    if (v140 >= 0x41 && v139)
      MEMORY[0x24BD1B380](v139, 0x1000C8000313F17);
    if (v138 >= 0x41 && v137)
      MEMORY[0x24BD1B380](v137, 0x1000C8000313F17);
    if (v85 >= 0x41 && v86)
      MEMORY[0x24BD1B380](v86, 0x1000C8000313F17);
    if (v84 >= 0x41 && __src)
      MEMORY[0x24BD1B380](__src, 0x1000C8000313F17);
    v66 = v135;
    if ((v91 & 1) == 0)
      goto LABEL_286;
    v75 += 16;
  }
  while (v134 != v75);
  if (v132 >= 6)
  {
    v117 = *(_QWORD *)v68;
    if ((*(_QWORD *)v68 & 2) != 0)
      v118 = (unsigned __int8 *)*((_QWORD *)v65 - 4);
    else
      v118 = &v68[-8 * ((v117 >> 2) & 0xF)];
    v119 = *(_QWORD *)(*(_QWORD *)v118 + 128);
    if (*(_BYTE *)(v119 + 16) == 16)
      v120 = v119;
    else
      v120 = 0;
    v121 = *(unsigned int *)(v120 + 32);
    if (v121 > 0x40)
    {
      v122 = (void *)operator new[]();
      memcpy(v122, *(const void **)(v120 + 24), ((unint64_t)(v121 + 63) >> 3) & 0x3FFFFFF8);
      v117 = *(_QWORD *)v133;
    }
    else
    {
      v122 = *(void **)(v120 + 24);
    }
    if ((v117 & 2) != 0)
      v123 = (unsigned __int8 *)*((_QWORD *)v65 - 4);
    else
      v123 = &v133[-8 * ((v117 >> 2) & 0xF)];
    v124 = *(_QWORD *)(*((_QWORD *)v123 + 1) + 128);
    if (*(_BYTE *)(v124 + 16) == 16)
      v125 = v124;
    else
      v125 = 0;
    v126 = *(unsigned int *)(v125 + 32);
    if (v126 > 0x40)
    {
      v127 = (void *)operator new[]();
      memcpy(v127, *(const void **)(v125 + 24), ((unint64_t)(v126 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v127 = *(void **)(v125 + 24);
    }
    v128 = v122;
    if (v121 >= 0x41)
    {
      v128 = (void *)operator new[]();
      memcpy(v128, v122, ((unint64_t)(v121 + 63) >> 3) & 0x3FFFFFF8);
    }
    v129 = v127;
    if (v126 >= 0x41)
    {
      v129 = (void *)operator new[]();
      memcpy(v129, v127, ((unint64_t)(v126 + 63) >> 3) & 0x3FFFFFF8);
    }
    v138 = v121;
    v137 = v128;
    v140 = v126;
    v139 = v129;
    llvm::ConstantRange::intersectWith(&v137, (const void **)&v145, 0, (uint64_t)&v150);
    v130 = llvm::ConstantRange::isEmptySet((const void **)&v150);
    if (v153 >= 0x41 && v152)
      MEMORY[0x24BD1B380](v152, 0x1000C8000313F17);
    if (v151 >= 0x41 && v150)
      MEMORY[0x24BD1B380](v150, 0x1000C8000313F17);
    if (v130)
    {
      if (isContiguous(&v137, (const void **)&v145))
      {
        v131 = "Intervals are contiguous";
        goto LABEL_373;
      }
    }
    else
    {
      v131 = "Intervals are overlapping";
LABEL_373:
      v150 = v131;
      v154 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, &v149);
    }
    if (v140 >= 0x41 && v139)
      MEMORY[0x24BD1B380](v139, 0x1000C8000313F17);
    if (v138 >= 0x41 && v137)
      MEMORY[0x24BD1B380](v137, 0x1000C8000313F17);
    if (v126 >= 0x41 && v127)
      MEMORY[0x24BD1B380](v127, 0x1000C8000313F17);
    if (v121 >= 0x41 && v122)
      MEMORY[0x24BD1B380](v122, 0x1000C8000313F17);
  }
LABEL_286:
  if (v148 >= 0x41 && v147)
    MEMORY[0x24BD1B380](v147, 0x1000C8000313F17);
  if (v146 >= 0x41 && v145)
    MEMORY[0x24BD1B380](v145, 0x1000C8000313F17);
LABEL_164:
  if ((*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
    && llvm::Value::getMetadata(a2, 16)
    && (*((_BYTE *)a2 + 16) & 0xFE) != 0x3C)
  {
    v8 = "invariant.group metadata is only for loads and stores";
    goto LABEL_336;
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v71 = llvm::Value::getMetadata(a2, 11);
    if (v71)
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
      {
        v8 = "nonnull applies only to pointer types";
        goto LABEL_336;
      }
      if (*((_BYTE *)a2 + 16) != 60)
      {
        v8 = "nonnull applies only to load instructions, use attributes for calls or invokes";
        goto LABEL_336;
      }
      v72 = *(_QWORD *)(v71 - 16);
      if ((v72 & 2) != 0 ? *(_DWORD *)(v71 - 24) : (v72 >> 6) & 0xF)
      {
        v8 = "nonnull metadata must be empty";
        goto LABEL_336;
      }
    }
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v95 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 12);
    if (v95)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v96 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 13);
    if (v96)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v97 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 1);
    if (v97)
      llvm::TBAAVerifier::visitTBAAMetadata((llvm::raw_ostream ***)this + 248, a2, v97);
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v98 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 8);
    if (v98)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v99 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 7);
    if (v99)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v100 = (const llvm::MDNode *)llvm::Value::getMetadata(a2, 25);
    if (v100)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v101 = llvm::Value::getMetadata(a2, 17);
    if (v101)
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
      {
        v8 = "align applies only to pointer types";
        goto LABEL_336;
      }
      if (*((_BYTE *)a2 + 16) != 60)
      {
        v8 = "align applies only to load instructions, use attributes for calls or invokes";
        goto LABEL_336;
      }
      v102 = *(_QWORD *)(v101 - 16);
      if ((v102 & 2) != 0)
      {
        if (*(_DWORD *)(v101 - 24) == 1)
        {
          v103 = *(uint64_t **)(v101 - 32);
          goto LABEL_294;
        }
      }
      else if ((*(_QWORD *)(v101 - 16) & 0x3C0) == 0x40)
      {
        v103 = (uint64_t *)(v101 - 16 - 8 * ((v102 >> 2) & 0xF));
LABEL_294:
        v105 = *v103;
        if (*(_BYTE *)v105 == 1
          && (v106 = *(int8x8_t **)(v105 + 128), v106[2].i8[0] == 16)
          && *(_DWORD *)(*(_QWORD *)v106 + 8) == 16397)
        {
          v107 = v106 + 3;
          if (v106[4].i32[0] >= 0x41u)
            v107 = (int8x8_t *)*v107;
          v108 = (uint8x8_t)vcnt_s8(*v107);
          v108.i16[0] = vaddlv_u8(v108);
          if (v108.u32[0] == 1)
          {
            if (*(_QWORD *)v107 < 0x100000001uLL)
              goto LABEL_301;
            v8 = "alignment is larger that implementation defined limit";
          }
          else
          {
            v8 = "align metadata value must be a power of 2!";
          }
        }
        else
        {
          v8 = "align metadata value must be an i64!";
        }
LABEL_336:
        v150 = v8;
        v154 = 259;
        v145 = (unsigned __int8 *)a2;
        v56 = (const llvm::Value **)&v145;
LABEL_337:
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, v56);
        return;
      }
      v8 = "align takes one operand!";
      goto LABEL_336;
    }
  }
LABEL_301:
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v109 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 2);
    if (v109)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v110 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 34);
    if (v110)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v111 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 35);
    if (v111)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v112 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 38);
    if (v112)
  }
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    v113 = (llvm::MDNode *)llvm::Value::getMetadata(a2, 30);
    if (v113)
  }
  v114 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v145 = v114;
  if (v114)
  {
    if (*v114 != 5)
    {
      v150 = "invalid !dbg metadata attachment";
      v154 = 259;
      v137 = a2;
      llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v150, (const llvm::Value **)&v137, &v145);
      return;
    }
  }
  if (llvm::DbgVariableIntrinsic::classof((uint64_t)a2))
  {
  }
  v150 = &v152;
  v151 = 0x400000000;
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (unsigned int *)&v150);
    if ((_DWORD)v151)
    {
      v115 = (char *)v150;
      v116 = (char *)v150 + 16 * v151;
      do
      {
        v115 += 16;
      }
      while (v115 != v116);
    }
  }
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((_anonymous_namespace_::Verifier *)((char *)this + 272), a2, (uint64_t)&v145);
  if (v150 != &v152)
    free(v150);
}

llvm::raw_ostream *llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::Module const*,llvm::GlobalValue *,llvm::Module*>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, uint64_t *a4, const llvm::Value **a5, uint64_t *a6)
{
  llvm::raw_ostream *result;

  llvm::VerifierSupport::CheckFailed(a1, a2);
  result = *a1;
  if (*a1)
  {
    if (*a3)
    {
      llvm::VerifierSupport::Write(a1, *a3);
      result = *a1;
    }
    llvm::VerifierSupport::Write(result, *a4);
    if (*a5)
      llvm::VerifierSupport::Write(a1, *a5);
    return llvm::VerifierSupport::Write(*a1, *a6);
  }
  return result;
}

void `anonymous namespace'::Verifier::verifyDominatesUse(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2, int a3)
{
  int v6;
  char *v7;
  const llvm::Value *v8;
  const void **imp;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const llvm::Value *v13;
  const char *v14;
  __int16 v15;
  const llvm::Value *v16;

  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
    v7 = (char *)*((_QWORD *)a2 - 1);
  else
    v7 = (char *)a2 - 32 * (v6 & 0x7FFFFFF);
  v8 = *(const llvm::Value **)&v7[32 * a3];
  v16 = v8;
  if (v8 && *((_BYTE *)v8 + 16) == 33 && *((_QWORD *)v8 - 12) == *((_QWORD *)v8 - 8))
    return;
  if (*((_BYTE *)a2 + 16) == 83)
    goto LABEL_12;
  imp = llvm::SmallPtrSetImplBase::find_imp((_anonymous_namespace_::Verifier *)((char *)this + 272), v8);
  v10 = *((_QWORD *)this + 35);
  v11 = 288;
  if (v10 == *((_QWORD *)this + 34))
    v11 = 292;
  if (imp == (const void **)(v10 + 8 * *(unsigned int *)((char *)this + v11)))
  {
    v6 = *((_DWORD *)a2 + 5);
LABEL_12:
    if ((v6 & 0x40000000) != 0)
      v12 = (char *)*((_QWORD *)a2 - 1);
    else
      v12 = (char *)a2 - 32 * (v6 & 0x7FFFFFF);
    if ((llvm::DominatorTree::dominates((uint64_t)this + 200, (uint64_t)v8, (uint64_t)&v12[32 * a3]) & 1) == 0)
    {
      v13 = a2;
      v14 = "Instruction does not dominate all uses!";
      v15 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&v14, &v16, &v13);
    }
  }
}

void `anonymous namespace'::Verifier::visitConstantExprsRecursively(llvm::raw_ostream **this, const llvm::Constant *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  llvm::raw_ostream *v18;
  _QWORD v19[2];
  char v20;
  __int16 v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::SmallPtrSetImplBase *)(this + 116);
  llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(this + 116), a2, (uint64_t)&v22);
  if (!v24[0])
    return;
  v22 = v24;
  v23 = 0x1000000000;
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v22, (uint64_t)a2);
  v5 = v23;
  if (!(_DWORD)v23)
    goto LABEL_38;
  while (1)
  {
    v6 = *((_QWORD *)v22 + v5 - 1);
    LODWORD(v23) = v5 - 1;
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v6)
      v8 = v7 == 5;
    else
      v8 = 0;
    if (v8)
    {
      if (*(_WORD *)(v6 + 18) == 49
        && (llvm::CastInst::castIsValid(49, **(_QWORD **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)), *(_QWORD *)v6) & 1) == 0)
      {
        v19[0] = "Invalid bitcast";
        v21 = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v19);
        if (*this)
          llvm::VerifierSupport::Write(this, (const llvm::Value *)v6);
      }
      v7 = *(unsigned __int8 *)(v6 + 16);
    }
    if (v6 && v7 <= 3)
      break;
    v10 = *(_DWORD *)(v6 + 20);
    if ((v10 & 0x40000000) != 0)
    {
      v12 = *(const void ***)(v6 - 8);
      v11 = v10 & 0x7FFFFFF;
      if (v11)
      {
LABEL_24:
        v15 = 32 * v11;
        do
        {
          v16 = (uint64_t)*v12;
          if (*v12)
            v17 = *((unsigned __int8 *)*v12 + 16) > 0x14u;
          else
            v17 = 1;
          if (!v17)
          {
            llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert(v4, *v12, (uint64_t)v19);
            if (v20)
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v22, v16);
          }
          v12 += 4;
          v15 -= 32;
        }
        while (v15);
      }
    }
    else
    {
      v11 = v10 & 0x7FFFFFF;
      v12 = (const void **)(v6 - 32 * v11);
      if (v11)
        goto LABEL_24;
    }
LABEL_32:
    v5 = v23;
    if (!(_DWORD)v23)
      goto LABEL_38;
  }
  v13 = *(_QWORD *)(v6 + 40);
  v14 = (uint64_t)this[1];
  if (v13 == v14)
    goto LABEL_32;
  v19[0] = "Referencing global in another module!";
  v21 = 259;
  llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v19);
  v18 = *this;
  if (*this)
  {
    if (a2)
    {
      llvm::VerifierSupport::Write(this, a2);
      v18 = *this;
    }
    llvm::VerifierSupport::Write(v18, v14);
    llvm::VerifierSupport::Write(this, (const llvm::Value *)v6);
    llvm::VerifierSupport::Write(*this, v13);
  }
LABEL_38:
  if (v22 != v24)
    free(v22);
}

void `anonymous namespace'::Verifier::visitDereferenceableMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  int v3;
  unint64_t v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  _BYTE *v8;
  const llvm::Value *v9;
  const char *v10;
  __int16 v11;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
  {
    v6 = "dereferenceable, dereferenceable_or_null apply only to pointer types";
LABEL_16:
    v9 = a2;
    v10 = v6;
    v11 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v10, &v9);
    return;
  }
  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 != 60 && v3 != 76)
  {
    v6 = "dereferenceable, dereferenceable_or_null apply only to load and inttoptr instructions, use attributes for calls or invokes";
    goto LABEL_16;
  }
  v4 = *((_QWORD *)a3 - 2);
  if ((v4 & 2) != 0)
  {
    if (*((_DWORD *)a3 - 6) == 1)
    {
      v5 = (uint64_t *)*((_QWORD *)a3 - 4);
      goto LABEL_11;
    }
LABEL_15:
    v6 = "dereferenceable, dereferenceable_or_null take one operand!";
    goto LABEL_16;
  }
  if ((*((_QWORD *)a3 - 2) & 0x3C0) != 0x40)
    goto LABEL_15;
  v5 = (uint64_t *)((char *)a3 - 8 * ((v4 >> 2) & 0xF) - 16);
LABEL_11:
  v7 = *v5;
  if (*(_BYTE *)v7 != 1 || (v8 = *(_BYTE **)(v7 + 128), v8[16] != 16) || *(_DWORD *)(*(_QWORD *)v8 + 8) != 16397)
  {
    v6 = "dereferenceable, dereferenceable_or_null metadata value must be an i64!";
    goto LABEL_16;
  }
}

void `anonymous namespace'::Verifier::visitAliasScopeListMetadata(llvm::raw_ostream **this, const llvm::MDNode *a2)
{
  unint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t i;
  unsigned __int8 *v7;
  char v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 **v24;
  const char *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  _QWORD v28[4];
  __int16 v29;
  unsigned __int8 *v30;

  v26 = (unsigned __int8 *)a2;
  v3 = *((_QWORD *)a2 - 2);
  if ((v3 & 2) != 0)
  {
    v4 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
    v5 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6))
      return;
    goto LABEL_5;
  }
  v4 = (unsigned __int8 **)((char *)a2 - 8 * ((v3 >> 2) & 0xF) - 16);
  v5 = (v3 >> 6) & 0xF;
  if (v5)
  {
LABEL_5:
    for (i = 8 * v5; i; i -= 8)
    {
      v7 = *v4;
      v8 = llvm::MDNode::classof(*v4);
      if (!v7 || (v8 & 1) == 0)
      {
        v28[0] = "scope list must consist of MDNodes";
        v29 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v28, &v26);
        return;
      }
      v30 = v7;
      v9 = v7 - 16;
      v10 = *((_QWORD *)v7 - 2);
      if ((v10 & 2) != 0)
      {
        v11 = *((_DWORD *)v7 - 6);
        if ((v11 & 0xFFFFFFFE) != 2)
        {
LABEL_17:
          v28[0] = "scope must have two or three operands";
          goto LABEL_18;
        }
        v15 = (unsigned __int8 **)*((_QWORD *)v7 - 4);
        v13 = *v15;
        if (*v15 == v7)
        {
          if (v11 != 3)
            goto LABEL_34;
          goto LABEL_28;
        }
      }
      else
      {
        if ((v10 & 0x380) != 0x80)
          goto LABEL_17;
        v11 = (v10 >> 6) & 0xF;
        v12 = (v10 >> 2) & 0xF;
        v13 = *(unsigned __int8 **)&v9[-8 * v12];
        if (v13 == v7)
        {
          v14 = -v12;
          if (v11 != 3)
            goto LABEL_32;
          goto LABEL_24;
        }
      }
      if (*v13)
      {
        v28[0] = "first scope operand must be self-referential or string";
LABEL_18:
        v29 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v28, &v30);
        goto LABEL_19;
      }
      if (v11 != 3)
        goto LABEL_30;
      if ((v10 & 2) == 0)
      {
        v14 = -(uint64_t)((v10 >> 2) & 0xF);
LABEL_24:
        v15 = (unsigned __int8 **)&v9[8 * v14];
        goto LABEL_28;
      }
      v15 = (unsigned __int8 **)*((_QWORD *)v7 - 4);
LABEL_28:
      if (*v15[2])
      {
        v28[0] = "third scope operand must be string (if used)";
        goto LABEL_18;
      }
LABEL_30:
      if ((v10 & 2) == 0)
      {
        v14 = -(uint64_t)((v10 >> 2) & 0xF);
LABEL_32:
        v15 = (unsigned __int8 **)&v9[8 * v14];
        goto LABEL_34;
      }
      v15 = (unsigned __int8 **)*((_QWORD *)v7 - 4);
LABEL_34:
      v16 = v15[1];
      if (llvm::MDNode::classof(v16))
        v17 = v16;
      else
        v17 = 0;
      v27 = v17;
      if (!v17)
      {
        v28[0] = "second scope operand must be MDNode";
        goto LABEL_18;
      }
      v18 = v17 - 16;
      v19 = *((_QWORD *)v17 - 2);
      if ((v19 & 2) != 0)
      {
        v20 = *((_DWORD *)v17 - 6);
        if (v20 - 1 >= 2)
        {
LABEL_48:
          v28[0] = "domain must have one or two operands";
          goto LABEL_59;
        }
        v24 = (unsigned __int8 **)*((_QWORD *)v17 - 4);
        v22 = *v24;
        if (*v24 == v17)
        {
          if (v20 != 2)
            goto LABEL_19;
          goto LABEL_56;
        }
      }
      else
      {
        v20 = (v19 >> 6) & 0xF;
        if (v20 - 1 >= 2)
          goto LABEL_48;
        v21 = (v19 >> 2) & 0xF;
        v22 = *(unsigned __int8 **)&v18[-8 * v21];
        if (v22 == v17)
        {
          if (v20 != 2)
            goto LABEL_19;
          v23 = -v21;
          goto LABEL_52;
        }
      }
      if (*v22)
      {
        v25 = "first domain operand must be self-referential or string";
        goto LABEL_58;
      }
      if (v20 != 2)
        goto LABEL_19;
      if ((v19 & 2) == 0)
      {
        v23 = -(uint64_t)((v19 >> 2) & 0xF);
LABEL_52:
        v24 = (unsigned __int8 **)&v18[8 * v23];
        goto LABEL_56;
      }
      v24 = (unsigned __int8 **)*((_QWORD *)v17 - 4);
LABEL_56:
      if (*v24[1])
      {
        v25 = "second domain operand must be string (if used)";
LABEL_58:
        v28[0] = v25;
LABEL_59:
        v29 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v28, &v27);
      }
LABEL_19:
      ++v4;
    }
  }
}

void `anonymous namespace'::Verifier::visitAccessGroupMetadata(llvm::raw_ostream **this, const llvm::MDNode *a2)
{
  unint64_t v3;
  _BYTE **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  __int16 v12;
  unsigned __int8 *v13;

  v13 = (unsigned __int8 *)a2;
  v3 = *((_QWORD *)a2 - 2);
  if ((v3 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6))
      goto LABEL_6;
  }
  else if (((v3 >> 6) & 0xF) != 0)
  {
    goto LABEL_6;
  }
  if ((*((_BYTE *)a2 + 1) & 0x7F) == 1)
    return;
LABEL_6:
  if ((v3 & 2) != 0)
  {
    v4 = (_BYTE **)*((_QWORD *)a2 - 4);
    v5 = *((unsigned int *)a2 - 6);
    if (!*((_DWORD *)a2 - 6))
      return;
  }
  else
  {
    v4 = (_BYTE **)((char *)a2 - 8 * ((v3 >> 2) & 0xF) - 16);
    v5 = (v3 >> 6) & 0xF;
    if (!v5)
      return;
  }
  v6 = 8 * v5;
  while (1)
  {
    v7 = (uint64_t)*v4;
    v8 = llvm::MDNode::classof(*v4);
    if (!v7 || (v8 & 1) == 0)
      break;
    v9 = *(_QWORD *)(v7 - 16);
    if ((v9 & 2) != 0)
    {
      if (*(_DWORD *)(v7 - 24))
        goto LABEL_20;
    }
    else if (((v9 >> 6) & 0xF) != 0)
    {
      goto LABEL_20;
    }
    if ((*(_BYTE *)(v7 + 1) & 0x7F) != 1)
    {
LABEL_20:
      v10 = "Access scope list contains invalid access scope";
      goto LABEL_22;
    }
    ++v4;
    v6 -= 8;
    if (!v6)
      return;
  }
  v10 = "Access scope list must consist of MDNodes";
LABEL_22:
  v11 = v10;
  v12 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)&v11, &v13);
}

void `anonymous namespace'::Verifier::visitProfMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  unint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  unsigned __int8 *v23;

  v23 = (unsigned __int8 *)a3;
  v6 = (unint64_t *)((char *)a3 - 16);
  v5 = *((_QWORD *)a3 - 2);
  if ((v5 & 2) == 0)
  {
    if ((v5 & 0x380) != 0)
    {
      v7 = (uint64_t *)&v6[-((v5 >> 2) & 0xF)];
      goto LABEL_6;
    }
LABEL_9:
    v9 = "!prof annotations should have no less than 2 operands";
    goto LABEL_11;
  }
  if (*((_DWORD *)a3 - 6) <= 1u)
    goto LABEL_9;
  v7 = (uint64_t *)*((_QWORD *)a3 - 4);
LABEL_6:
  v8 = *v7;
  if (!v8)
  {
    v9 = "first operand should not be null";
    goto LABEL_11;
  }
  if (*(_BYTE *)v8)
  {
    v9 = "expected string with name of the !prof annotation";
LABEL_11:
    v21[0] = v9;
    v22 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v21, &v23);
    return;
  }
  v10 = *(_QWORD **)(v8 + 8);
  if (*v10 == 14)
  {
    v11 = v10[3];
    v12 = *(_QWORD *)((char *)v10 + 30);
    if (v11 == 0x775F68636E617262 && v12 == 0x737468676965775FLL)
    {
      v14 = *((unsigned __int8 *)a2 + 16);
      switch(*((_BYTE *)a2 + 16))
      {
        case 0x1E:
          if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 3)
            v15 = 2;
          else
            v15 = 1;
          goto LABEL_34;
        case 0x1F:
          v15 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_34;
        case 0x20:
          v15 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_34;
        case 0x21:
          if ((v5 & 2) != 0)
          {
            v16 = *((_DWORD *)a3 - 6);
            if (v16 == 2)
              goto LABEL_38;
          }
          else
          {
            if ((*((_QWORD *)a3 - 2) & 0x3C0) == 0x80)
              goto LABEL_38;
            v16 = (v5 >> 6) & 0xF;
          }
          if (v16 != 3)
          {
            v9 = "Wrong number of InvokeInst branch_weights operands";
            goto LABEL_11;
          }
LABEL_38:
          v18 = 1;
          while (1)
          {
            if ((v5 & 2) != 0)
            {
              if (v18 >= *((unsigned int *)a3 - 6))
                return;
              v19 = (unint64_t *)*((_QWORD *)a3 - 4);
            }
            else
            {
              v19 = &v6[-((v5 >> 2) & 0xF)];
              if (v18 >= ((v5 >> 6) & 0xF))
                return;
            }
            v20 = v19[v18];
            if (!v20)
              break;
            if (*(_BYTE *)v20 == 1)
            {
              ++v18;
              if (*(_BYTE *)(*(_QWORD *)(v20 + 128) + 16) == 16)
                continue;
            }
            v21[0] = "!prof brunch_weights operand is not a const int";
            v22 = 259;
            llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v21);
            return;
          }
          v9 = "second operand should not be null";
          break;
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
          goto LABEL_26;
        case 0x27:
          v15 = *((_DWORD *)a2 + 20) + 1;
          goto LABEL_34;
        default:
          if (v14 == 84)
          {
            v15 = 1;
          }
          else if (v14 == 85)
          {
            v15 = 2;
          }
          else
          {
LABEL_26:
            v21[0] = "!prof branch_weights are not allowed for this instruction";
            v22 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v21, &v23);
            v15 = 0;
            v5 = *v6;
          }
LABEL_34:
          if ((v5 & 2) != 0)
            v17 = *((_DWORD *)a3 - 6);
          else
            v17 = (v5 >> 6) & 0xF;
          if (v17 == v15 + 1)
            goto LABEL_38;
          v9 = "Wrong number of operands";
          goto LABEL_11;
      }
      goto LABEL_11;
    }
  }
}

void `anonymous namespace'::Verifier::visitMemProfMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  const llvm::Value **v10;
  const llvm::Value **v11;
  uint64_t v12;
  const llvm::Value *v13;
  const llvm::Value *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  llvm::MDNode *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  _BYTE **v24;
  uint64_t v25;
  llvm::MDNode **v26;
  const char *v27;
  const llvm::Value *v28;
  _QWORD v29[4];
  __int16 v30;
  llvm::MDNode *v31;

  v31 = a3;
  v4 = *((unsigned __int8 *)a2 + 16) - 33;
  v5 = v4 > 0x33;
  v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0)
  {
    v28 = a2;
    v29[0] = "!memprof metadata should only exist on calls";
    v30 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v29, &v28);
    return;
  }
  v8 = *((_QWORD *)a3 - 2);
  if ((v8 & 2) != 0)
  {
    v12 = *((unsigned int *)a3 - 6);
    if ((_DWORD)v12)
    {
      v10 = (const llvm::Value **)*((_QWORD *)a3 - 4);
      v11 = &v10[v12];
      while (1)
      {
LABEL_11:
        v13 = *v10;
        if (llvm::MDNode::classof(*v10))
          v14 = v13;
        else
          v14 = 0;
        v28 = v14;
        v16 = (unint64_t *)((char *)v14 - 16);
        v15 = *((_QWORD *)v14 - 2);
        if ((v15 & 2) != 0)
        {
          if (*((_DWORD *)v14 - 6) <= 1u)
          {
LABEL_42:
            v27 = "Each !memprof MemInfoBlock should have at least 2 operands";
            goto LABEL_38;
          }
          v17 = (unint64_t *)*((_QWORD *)v14 - 4);
        }
        else
        {
          if ((v15 & 0x380) == 0)
            goto LABEL_42;
          v17 = &v16[-((v15 >> 2) & 0xF)];
        }
        if (!*v17)
        {
          v27 = "!memprof MemInfoBlock first operand should not be null";
          goto LABEL_38;
        }
        if ((llvm::MDNode::classof((_BYTE *)*v17) & 1) == 0)
        {
          v27 = "!memprof MemInfoBlock first operand should be an MDNode";
          goto LABEL_38;
        }
        v18 = (*v16 & 2) != 0 ? (unint64_t *)*((_QWORD *)v14 - 4) : &v16[-((*v16 >> 2) & 0xF)];
        v19 = *v18;
        v20 = llvm::MDNode::classof((_BYTE *)*v18) ? (llvm::MDNode *)v19 : 0;
        v21 = *v16;
        if ((*v16 & 2) != 0)
        {
          v22 = (unint64_t *)*((_QWORD *)v14 - 4);
          v23 = *((unsigned int *)v14 - 6);
        }
        else
        {
          v22 = &v16[-((v21 >> 2) & 0xF)];
          v23 = (v21 >> 6) & 0xF;
        }
        if (v23 != 1)
          break;
LABEL_34:
        if (++v10 == v11)
          return;
      }
      v24 = (_BYTE **)(v22 + 1);
      v25 = 8 * v23 - 8;
      while (!**v24)
      {
        ++v24;
        v25 -= 8;
        if (!v25)
          goto LABEL_34;
      }
      v27 = "Not all !memprof MemInfoBlock operands 1 to N are MDString";
LABEL_38:
      v29[0] = v27;
      v30 = 259;
      v26 = &v28;
      goto LABEL_39;
    }
LABEL_36:
    v29[0] = "!memprof annotations should have at least 1 metadata operand (MemInfoBlock)";
    v30 = 259;
    v26 = &v31;
LABEL_39:
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v29, (unsigned __int8 **)v26);
    return;
  }
  if ((v8 & 0x3C0) == 0)
    goto LABEL_36;
  v9 = (v8 >> 6) & 0xF;
  if (v9)
  {
    v10 = (const llvm::Value **)((char *)a3 - 8 * ((v8 >> 2) & 0xF) - 16);
    v11 = &v10[v9];
    goto LABEL_11;
  }
}

void `anonymous namespace'::Verifier::visitCallsiteMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  const llvm::Value *v7;
  const char *v8;
  __int16 v9;

  v3 = *((unsigned __int8 *)a2 + 16) - 33;
  v4 = v3 >= 0x33;
  v6 = v3 == 51;
  v5 = (1 << v3) & 0x8000000000041;
  v6 = !v6 && v4 || v5 == 0;
  if (v6)
  {
    v7 = a2;
    v8 = "!callsite metadata should only exist on calls";
    v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v8, &v7);
  }
  else
  {
  }
}

void `anonymous namespace'::Verifier::visitDIAssignIDMetadata(_anonymous_namespace_::Verifier *this, llvm::Instruction *a2, llvm::MDNode *a3)
{
  int v6;
  uint64_t IfExists;
  uint64_t v8;
  const llvm::Value *v9;
  _BOOL4 v10;
  BOOL v11;
  llvm::raw_ostream **v12;
  const llvm::Value *v13;
  _QWORD v14[4];
  __int16 v15;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 59 || v6 == 61 || (llvm::MemIntrinsic::classof((uint64_t)a2) & 1) != 0)
  {
    IfExists = llvm::MetadataAsValue::getIfExists(*((_QWORD **)this + 23), a3);
    if (IfExists)
    {
      v8 = *(_QWORD *)(IfExists + 8);
      if (v8)
      {
        while (1)
        {
          v9 = *(const llvm::Value **)(v8 + 24);
          if (!llvm::DbgAssignIntrinsic::classof((uint64_t)v9))
            break;
          v10 = llvm::DbgAssignIntrinsic::classof((uint64_t)v9);
          if (v9)
            v11 = !v10;
          else
            v11 = 1;
          if (!v11 && *(_QWORD *)(*((_QWORD *)v9 + 5) + 56) != *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))
          {
            v14[0] = "dbg.assign not in same function as inst";
            v15 = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v14);
            if (!*(_QWORD *)this)
              return;
            llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v9);
            v12 = (llvm::raw_ostream **)this;
            v13 = a2;
            goto LABEL_21;
          }
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            return;
        }
        v14[0] = "!DIAssignID should only be used by llvm.dbg.assign intrinsics";
        v15 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v14);
        if (*(_QWORD *)this)
        {
          llvm::VerifierSupport::Write(this, (unsigned __int8 *)a3);
          if (v9)
          {
            v12 = (llvm::raw_ostream **)this;
            v13 = v9;
LABEL_21:
            llvm::VerifierSupport::Write(v12, v13);
          }
        }
      }
    }
  }
  else
  {
    v14[0] = "!DIAssignID attached to unexpected instruction kind";
    v15 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v14);
    if (*(_QWORD *)this)
    {
      llvm::VerifierSupport::Write((llvm::raw_ostream **)this, a2);
      llvm::VerifierSupport::Write(this, (unsigned __int8 *)a3);
    }
  }
}

void `anonymous namespace'::Verifier::visitAnnotationMetadata(llvm::raw_ostream **this, llvm::MDNode *a2)
{
  unint64_t v2;
  uint64_t v3;
  _BYTE **v4;
  _BYTE **v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  if (*(_BYTE *)a2 != 4)
  {
    v6 = "annotation must be a tuple";
LABEL_14:
    v8 = v6;
    v9 = 259;
    llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v8);
    return;
  }
  v2 = *((_QWORD *)a2 - 2);
  if ((v2 & 2) != 0)
  {
    v7 = *((unsigned int *)a2 - 6);
    if ((_DWORD)v7)
    {
      v4 = (_BYTE **)*((_QWORD *)a2 - 4);
      v5 = &v4[v7];
LABEL_9:
      while (!**v4)
      {
        if (++v4 == v5)
          return;
      }
      v6 = "operands must be strings";
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if ((v2 & 0x3C0) == 0)
  {
LABEL_12:
    v6 = "annotation must have at least one operand";
    goto LABEL_14;
  }
  v3 = (v2 >> 6) & 0xF;
  if (v3)
  {
    v4 = (_BYTE **)((char *)a2 - 8 * ((v2 >> 2) & 0xF) - 16);
    v5 = &v4[v3];
    goto LABEL_9;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
  }
}

void `anonymous namespace'::Verifier::verifyFragmentExpression(llvm::raw_ostream **this, const llvm::DbgVariableIntrinsic *a2)
{
  char *v4;
  _BYTE *v5;
  llvm::DIVariable *v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t **v9;
  __int32 v10;
  __int32 v11;
  unint64_t SizeInBits;
  char v13;
  const char *v14;
  int8x16_t v15;
  char v16;
  llvm::DIVariable *v17;
  const char *v18;
  __int16 v19;
  const llvm::Value *v20;

  v4 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v5 = *(_BYTE **)(*((_QWORD *)v4 + 4) + 24);
  if (v5)
  {
    if (*v5 == 25)
      v6 = *(llvm::DIVariable **)(*((_QWORD *)v4 + 4) + 24);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned __int8 **)(*((_QWORD *)v4 + 8) + 24);
  if (v7)
  {
    v8 = *v7;
    v9 = v8 == 6 ? (uint64_t **)v7 : 0;
    if (v6)
    {
      if (v8 == 6 && llvm::DIExpression::isValid((llvm::DIExpression *)v9))
      {
        llvm::DIExpression::getFragmentInfo(v9[2], v9[3], &v15);
        if (v16)
        {
          if ((*((_BYTE *)v6 + 28) & 0x40) == 0)
          {
            v10 = v15.i32[0];
            v11 = v15.i32[2];
            v20 = a2;
            SizeInBits = llvm::DIVariable::getSizeInBits(v6);
            if (v13)
            {
              if ((v11 + v10) <= SizeInBits)
              {
                if (SizeInBits != v10)
                  return;
                v14 = "fragment covers entire variable";
              }
              else
              {
                v14 = "fragment is larger than or outside of variable";
              }
              v17 = v6;
              v18 = v14;
              v19 = 259;
              llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(this, (const llvm::Twine *)&v18, &v20, (unsigned __int8 **)&v17);
            }
          }
        }
      }
    }
  }
}

void `anonymous namespace'::Verifier::verifyNotEntryValue(llvm::raw_ostream **this, const llvm::DbgVariableIntrinsic *a2)
{
  uint64_t v2;
  _QWORD *v5;
  const char *v6;
  __int16 v7;

  v2 = *(_QWORD *)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8] + 24);
  if (v2)
  {
    if (*(_BYTE *)v2 == 6
      && llvm::DIExpression::isValid(*(llvm::DIExpression **)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8]
                                                            + 24)))
    {
      v5 = *(_QWORD **)(v2 + 16);
      if (((*(_QWORD *)(v2 + 24) - (_QWORD)v5) & 0x7FFFFFFF8) != 0 && *v5 == 4099)
      {
        v6 = "Entry values are only allowed in MIR";
        v7 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)&v6);
        if (*this)
          llvm::VerifierSupport::Write(this, a2);
      }
    }
  }
}

BOOL isContiguous(const void **a1, const void **a2)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *((unsigned int *)a1 + 6);
  if (v4 > 0x40)
  {
    if (!memcmp(a1[2], *a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8))
      return 1;
  }
  else if (a1[2] == *a2)
  {
    return 1;
  }
  v6 = *((unsigned int *)a1 + 2);
  if (v6 > 0x40)
    return memcmp(*a1, a2[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    return *a1 == a2[2];
}

void `anonymous namespace'::Verifier::visitCallStackMetadata(llvm::raw_ostream **this, llvm::MDNode *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD v8[4];
  __int16 v9;
  unsigned __int8 *v10;

  v10 = (unsigned __int8 *)a2;
  v2 = *((_QWORD *)a2 - 2);
  if ((v2 & 2) != 0)
  {
    v6 = *((unsigned int *)a2 - 6);
    if ((_DWORD)v6)
    {
      v4 = (unsigned __int8 **)*((_QWORD *)a2 - 4);
      v5 = &v4[v6];
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  if ((v2 & 0x3C0) == 0)
  {
LABEL_12:
    v8[0] = "call stack metadata should have at least 1 operand";
    v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v8, &v10);
    return;
  }
  v3 = (v2 >> 6) & 0xF;
  if (v3)
  {
    v4 = (unsigned __int8 **)((char *)a2 - 8 * ((v2 >> 2) & 0xF) - 16);
    v5 = &v4[v3];
LABEL_7:
    while (1)
    {
      v7 = *v4;
      if (!*v4 || *v7 != 1 || *(_BYTE *)(*((_QWORD *)v7 + 16) + 16) != 16)
        break;
      if (++v4 == v5)
        return;
    }
    v8[0] = "call stack metadata operand should be constant integer";
    v9 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::MDNode *>(this, (const llvm::Twine *)v8, v4);
  }
}

void `anonymous namespace'::Verifier::visitCallBase(_anonymous_namespace_::Verifier *this, llvm::CallBase *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  const llvm::Value *v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  const char *v30;
  char v31;
  const llvm::Value **v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const llvm::Value *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  llvm::Type *v68;
  _BYTE *v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t Metadata;
  uint64_t v86;
  char isInterposable;
  const char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  llvm::CallBase *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  llvm::GlobalValue *v110;
  uint64_t v111;
  char v112;
  llvm::Value *v113;
  char v114;
  char v115;
  const llvm::Value *v116[4];
  __int16 v117;
  uint64_t *v118[2];
  const char *v119;
  const llvm::Value *v120;
  __int16 v121;
  _QWORD v122[2];
  const char *v123;
  __int16 v124;

  v4 = **((_QWORD **)a2 - 4);
  if (*(_BYTE *)(v4 + 8) != 15)
  {
    v14 = "Called function must be a pointer!";
    goto LABEL_11;
  }
  v5 = *((_QWORD *)a2 + 9);
  v6 = *(_QWORD *)(v4 + 24);
  if (v6)
    v7 = v6 == v5;
  else
    v7 = 1;
  if (!v7)
  {
    v14 = "Called function is not the same type as the call!";
    goto LABEL_11;
  }
  v8 = *(_DWORD *)(v5 + 8);
  v9 = llvm::CallBase::arg_end(a2);
  v10 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v11 = (unint64_t)(v9 - (_QWORD)v10) >> 5;
  v12 = *(_DWORD *)(v5 + 12);
  v13 = v12 - 1;
  if (v8 < 0x100)
  {
    if (v13 != (_DWORD)v11)
    {
      v14 = "Incorrect number of arguments passed to called function!";
      goto LABEL_11;
    }
  }
  else if (v13 > v11)
  {
    v14 = "Called function requires more parameters than were provided!";
    goto LABEL_11;
  }
  v15 = 1;
  while (v12 != v15)
  {
    v16 = *(const llvm::Value **)&v10[32 * v15 - 32];
    v17 = *(llvm::Type **)(*(_QWORD *)(v5 + 16) + 8 * v15++);
    if (*(llvm::Type **)v16 != v17)
    {
      v122[0] = "Call parameter type does not match function signature!";
      v124 = 259;
      llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v122);
      if (*(_QWORD *)this)
      {
        llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v16);
        llvm::VerifierSupport::Write((llvm::raw_ostream **)this, v17);
        llvm::VerifierSupport::Write((llvm::raw_ostream **)this, a2);
      }
      return;
    }
  }
  v18 = *((_QWORD *)a2 + 8);
  v19 = llvm::CallBase::arg_end(a2);
  if (v18
    && *(_DWORD *)(v18 + 8) > ((unint64_t)(v19
                                                              - ((_QWORD)a2
                                                               - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5)
                            + 2)
  {
    v14 = "Attribute after last parameter!";
    goto LABEL_11;
  }
  v20 = llvm::Value::stripPointerCasts(*((llvm::Value **)a2 - 4));
  if (*((_BYTE *)v20 + 16))
    v21 = 0;
  else
    v21 = v20;
  v113 = v21;
  if (v21 && (*((_BYTE *)v21 + 33) & 0x20) != 0)
  {
    if (*((_QWORD *)v21 + 3) != v5)
    {
      v14 = "Intrinsic called with incompatible signature";
      goto LABEL_11;
    }
    if (v18)
    {
      v33 = 1;
      if ((*(_BYTE *)(v18 + 19) & 2) == 0)
        goto LABEL_48;
      goto LABEL_110;
    }
    v33 = 1;
LABEL_54:
    v34 = *((_QWORD *)a2 - 4);
    goto LABEL_55;
  }
  v22 = **(_QWORD **)(v5 + 16);
  if (llvm::Type::isSized(v22, 0))
  {
    llvm::DataLayout::getAlignment(*((_QWORD *)this + 22), v22);
    if (v23 >= 0xFu)
    {
      v118[0] = (uint64_t *)"Incorrect alignment of ";
      v119 = "return type";
      v121 = 771;
      v122[0] = v118;
      v123 = " to called function!";
      v124 = 770;
      llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, a2);
    }
  }
  if (*(_DWORD *)(v5 + 12) != 1)
  {
    v24 = 0;
    v25 = 8 * (*(_DWORD *)(v5 + 12) - 1);
    do
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + v24 + 8);
      v116[0] = (const llvm::Value *)"argument passed";
      v117 = 259;
      if (llvm::Type::isSized(v26, 0))
      {
        llvm::DataLayout::getAlignment(*((_QWORD *)this + 22), v26);
        if (v27 >= 0xFu)
        {
          v28 = v117;
          if ((_BYTE)v117)
          {
            if (v117 == 1)
            {
              v118[0] = (uint64_t *)"Incorrect alignment of ";
              v29 = 3;
              v30 = "Incorrect alignment of ";
            }
            else
            {
              v30 = (const char *)v118;
              v32 = (const llvm::Value **)v116[0];
              v29 = 2;
              if (HIBYTE(v117) != 1)
              {
                v28 = 2;
                v32 = v116;
              }
              v118[0] = (uint64_t *)"Incorrect alignment of ";
              v119 = (const char *)v32;
              v120 = v116[1];
            }
            v31 = 3;
            LOBYTE(v121) = 3;
            HIBYTE(v121) = v28;
            v122[0] = v30;
            v123 = " to called function!";
          }
          else
          {
            v29 = 0;
            v121 = 256;
            v31 = 1;
          }
          LOBYTE(v124) = v29;
          HIBYTE(v124) = v31;
          llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, a2);
        }
      }
      v24 += 8;
    }
    while (v25 != v24);
  }
  if (!v18)
  {
    v33 = 0;
    goto LABEL_54;
  }
  v21 = v113;
  if ((*(_BYTE *)(v18 + 19) & 2) == 0)
  {
    v33 = 0;
    goto LABEL_48;
  }
  if (!v113)
  {
LABEL_112:
    v14 = "speculatable attribute may not apply to call sites";
    goto LABEL_11;
  }
  v33 = 0;
LABEL_110:
  v57 = *((_QWORD *)v21 + 14);
  if (!v57 || (*(_BYTE *)(v57 + 19) & 2) == 0)
    goto LABEL_112;
LABEL_48:
  v34 = *((_QWORD *)a2 - 4);
  if ((*(_BYTE *)(v18 + 21) & 2) == 0)
  {
LABEL_55:
    v35 = *(unsigned __int8 *)(v34 + 16);
    goto LABEL_56;
  }
  if (*(_DWORD *)(v34 + 36) != 10)
  {
    v58 = "preallocated as a call site attribute can only be on llvm.call.preallocated.arg";
LABEL_161:
    v122[0] = v58;
    v124 = 259;
    llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v122);
    return;
  }
  v35 = 0;
LABEL_56:
  if (llvm::CallBase::hasInAllocaArgument(a2))
  {
    v36 = llvm::Value::stripInBoundsOffsets(*((const void **)a2 + 4 * (*(_DWORD *)(v5 + 12) - 2) + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (void (*)(uint64_t, uint64_t))_ZN4llvm12function_refIFvPKNS_5ValueEEE11callback_fnIZNS1_20stripInBoundsOffsetsES5_Ed_UlS3_E_EEvlS3_, (uint64_t)v122);
    v37 = *(_BYTE *)(v36 + 16) == 59 ? v36 : 0;
    v118[0] = (uint64_t *)v37;
    if (v37)
    {
      if ((*(_WORD *)(v37 + 18) & 0x40) == 0)
      {
        v122[0] = "inalloca argument for call has mismatched alloca";
        v124 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, (const llvm::Value **)v118, a2);
        return;
      }
    }
  }
  v38 = *(_DWORD *)(v5 + 12);
  v39 = (v38 - 1);
  if (v38 != 1)
  {
    v40 = 0;
    do
    {
      if (llvm::CallBase::paramHasAttr(a2, v40, 64))
      {
        v41 = *((_QWORD *)a2 + 4 * v40 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v118[0] = (uint64_t *)v41;
        v42 = llvm::Value::stripInBoundsOffsets((const void *)v41, (void (*)(uint64_t, uint64_t))_ZN4llvm12function_refIFvPKNS_5ValueEEE11callback_fnIZNS1_20stripInBoundsOffsetsES5_Ed_UlS3_E_EEvlS3_, (uint64_t)v122);
        if (*(_BYTE *)(v42 + 16) == 59)
          v43 = (const llvm::Value *)v42;
        else
          v43 = 0;
        v116[0] = v43;
        if (v43)
        {
          if ((*((_WORD *)v43 + 9) & 0x80) == 0)
          {
            v122[0] = "swifterror argument for call has mismatched alloca";
            v124 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, v116, a2);
            goto LABEL_83;
          }
          v48 = 30;
LABEL_84:
          if (v48 != 30)
            return;
          v49 = v40 + 1;
          goto LABEL_102;
        }
        if (*(_BYTE *)(v41 + 16) == 21)
          v44 = v41;
        else
          v44 = 0;
        v116[0] = (const llvm::Value *)v44;
        if (!v44)
        {
          v122[0] = "swifterror argument should come from an alloca or parameter";
          v124 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, (const llvm::Value **)v118, a2);
          goto LABEL_83;
        }
        v45 = *(_QWORD *)(*(_QWORD *)(v44 + 24) + 112);
        if (!v45
          || (v46 = *(_DWORD *)(v44 + 32) + 2, v46 >= *(_DWORD *)(v45 + 8))
          || (v47 = *(_QWORD *)(v45 + 8 * v46 + 40)) == 0
          || (*(_BYTE *)(v47 + 20) & 1) == 0)
        {
          v122[0] = "swifterror argument for call has mismatched parameter";
          v124 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, v116, a2);
LABEL_83:
          v48 = 1;
          goto LABEL_84;
        }
      }
      v49 = v40 + 1;
      if (v18)
      {
        if ((v40 + 2) < *(_DWORD *)(v18 + 8))
        {
          v50 = *(_QWORD *)(v18 + 40 + 8 * (v40 + 2));
          if (v50)
          {
            if ((*(_BYTE *)(v50 + 13) & 4) != 0
              && (!v113
               || (v51 = *((_QWORD *)v113 + 14)) == 0
               || (v40 + 2) >= *(_DWORD *)(v51 + 8)
               || (v52 = *(_QWORD *)(v51 + 8 * (v40 + 2) + 40)) == 0
               || (*(_BYTE *)(v52 + 13) & 4) == 0))
            {
              v122[0] = "immarg may not apply only to call sites";
              v124 = 259;
              v118[0] = *((uint64_t **)a2 + 4 * v40 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
              goto LABEL_186;
            }
          }
        }
      }
      if (llvm::CallBase::paramHasAttr(a2, v40, 10))
      {
        v118[0] = *((uint64_t **)a2 + 4 * v40 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        if ((v118[0][2] & 0xFE) != 0x10)
        {
          v88 = "immarg operand has non-immediate parameter";
LABEL_183:
          v122[0] = v88;
          v124 = 259;
LABEL_186:
          llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, (const llvm::Value **)v118, a2);
          return;
        }
      }
      if (llvm::CallBase::paramHasAttr(a2, v40, 73))
      {
        v118[0] = *((uint64_t **)a2 + 4 * v40 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v53 = llvm::CallBase::countOperandBundlesOfType(a2, 4);
        if (*((_BYTE *)a2 + 16) == 84)
        {
          if ((v53 == 0) != ((*((_WORD *)a2 + 9) & 3) == 2))
            goto LABEL_182;
        }
        else if (!v53)
        {
LABEL_182:
          v88 = "preallocated operand either requires a preallocated bundle or the call to be musttail (but not both)";
          goto LABEL_183;
        }
      }
LABEL_102:
      v40 = v49;
    }
    while (v49 != v39);
  }
  v114 = v33;
  if (*(_DWORD *)(v5 + 8) >= 0x100u)
  {
    v54 = (*(_DWORD *)(v5 + 12) - 1);
    if (*(_DWORD *)(v5 + 12) == 1)
    {
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v59 = 0;
      v56 = 0;
      v55 = 0;
      v60 = v18 + 40;
      do
      {
        if (v18 && (v59 + 2) < *(_DWORD *)(v18 + 8))
        {
          v61 = *(_QWORD *)(v60 + 8 * (v59 + 2));
          if (v61)
            LODWORD(v61) = (*(unsigned __int8 *)(v61 + 14) >> 1) & 1;
          v55 |= v61;
          v62 = *(_QWORD *)(v60 + 8 * (v59 + 2));
          if (v62)
            LODWORD(v62) = (*(unsigned __int8 *)(v62 + 17) >> 6) & 1;
        }
        else
        {
          LOBYTE(v62) = 0;
        }
        ++v59;
        v56 |= v62;
      }
      while (v54 != v59);
    }
    v63 = v54;
    v64 = llvm::CallBase::arg_end(a2);
    v65 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v63 < ((unint64_t)(v64 - (_QWORD)a2 + 32 * v65) >> 5))
    {
      v66 = -v65;
      v67 = (char *)a2 + 32 * v63;
      while (1)
      {
        v68 = **(llvm::Type ***)&v67[32 * v66];
        if (!v18 || (v63 + 2) >= *(_DWORD *)(v18 + 8))
          break;
        v69 = *(_BYTE **)(v18 + 40 + 8 * (v63 + 2));
        if (!v69)
          goto LABEL_132;
        v70 = v69[14] & 2;
        if ((v55 & (v70 >> 1)) == 1)
        {
          v14 = "More than one parameter has attribute nest!";
          goto LABEL_11;
        }
        v55 |= v70 >> 1;
        if ((v69[17] & 0x40) != 0)
        {
          if ((v56 & 1) != 0)
          {
            v14 = "More than one parameter has attribute returned!";
            goto LABEL_11;
          }
          if (!llvm::Type::canLosslesslyBitCastTo(v68, **(llvm::Type ***)(v5 + 16)))
          {
            v14 = "Incompatible argument and return types for 'returned' attribute";
            goto LABEL_11;
          }
          v71 = 0;
          v56 = 1;
        }
        else
        {
          v71 = 0;
        }
LABEL_133:
        v72 = *((_QWORD *)a2 - 4);
        if (v72
          && !*(_BYTE *)(v72 + 16)
          && *(_QWORD *)(v72 + 24) == *((_QWORD *)a2 + 9)
          && *(_DWORD *)(v72 + 36) == 125)
        {
          if ((v71 & 1) == 0)
          {
            v73 = v69[21];
            goto LABEL_141;
          }
        }
        else if ((v71 & 1) == 0)
        {
          v73 = v69[21];
          if ((v73 & 4) != 0)
          {
            v14 = "Attribute 'sret' cannot be used for vararg call arguments!";
            goto LABEL_11;
          }
LABEL_141:
          if ((v73 & 1) != 0
            && v63 != ((unint64_t)(llvm::CallBase::arg_end(a2)
                                                      - ((_QWORD)a2
                                                       - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5)
                    - 1)
          {
            v14 = "inalloca isn't on the last argument!";
            goto LABEL_11;
          }
        }
        ++v63;
        v74 = llvm::CallBase::arg_end(a2);
        v75 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        v66 = -v75;
        v67 += 32;
        if (v63 >= ((unint64_t)(v74 - (_QWORD)a2 + 32 * v75) >> 5))
          goto LABEL_148;
      }
      v69 = 0;
LABEL_132:
      v71 = 1;
      goto LABEL_133;
    }
  }
LABEL_148:
  if ((v114 & 1) == 0 && 8 * *(unsigned int *)(v5 + 12) != 8)
  {
    v76 = *(_QWORD *)(v5 + 16) + 8;
    v77 = 8 * ((8 * *(unsigned int *)(v5 + 12) - 8) >> 3);
    do
    {
      v78 = *(unsigned __int8 *)(*(_QWORD *)v76 + 8);
      if (v78 == 12)
      {
        v14 = "Function has token parameter but isn't an intrinsic";
        goto LABEL_11;
      }
      if (v78 == 9)
      {
        v14 = "Function has metadata parameter but isn't an intrinsic";
        goto LABEL_11;
      }
      v76 += 8;
      v77 -= 8;
    }
    while (v77);
  }
  v79 = *((_QWORD *)a2 - 4);
  if (v79 && !*(_BYTE *)(v79 + 16) && *(_QWORD *)(v79 + 24) == *((_QWORD *)a2 + 9))
    goto LABEL_165;
  v80 = *(unsigned __int8 *)(**(_QWORD **)(v5 + 16) + 8);
  if (v80 == 11)
  {
    v58 = "Return type cannot be x86_amx for indirect call!";
    goto LABEL_161;
  }
  if (v80 == 12)
  {
    v58 = "Return type cannot be token for indirect call!";
    goto LABEL_161;
  }
  if (v79 && !*(_BYTE *)(v79 + 16) && *(_QWORD *)(v79 + 24) == *((_QWORD *)a2 + 9))
  {
LABEL_165:
    v81 = *(_DWORD *)(v79 + 36);
    if (v81)
  }
  v82 = *((_DWORD *)a2 + 5);
  if ((v82 & 0x80000000) == 0 || (v89 = *((_QWORD *)a2 - 4 * (v82 & 0x7FFFFFF) - 1), (v89 & 0xFFFFFFFF0) == 0))
  {
    v83 = 0;
LABEL_169:
    v84 = *((_QWORD *)a2 - 4);
    if (v84 && !*(_BYTE *)(v84 + 16) && ((*(_QWORD *)(v84 + 24) == *((_QWORD *)a2 + 9)) & v83) == 1)
    {
      v14 = "Direct call cannot have a ptrauth bundle";
      goto LABEL_11;
    }
    Metadata = llvm::Value::getMetadata(*(llvm::Value **)(*((_QWORD *)a2 + 5) + 56), 0);
    v86 = *((_QWORD *)a2 - 4);
    if (!Metadata)
      goto LABEL_262;
    if (*(_BYTE *)(v86 + 16))
      goto LABEL_262;
    if (*(_QWORD *)(v86 + 24) != *((_QWORD *)a2 + 9))
      goto LABEL_262;
    isInterposable = llvm::GlobalValue::isInterposable(*((llvm::GlobalValue **)a2 - 4));
    v86 = *((_QWORD *)a2 - 4);
    if ((isInterposable & 1) != 0)
      goto LABEL_262;
    if (v86)
    {
      if (*(_BYTE *)(v86 + 16))
      {
        if (llvm::GlobalValue::isDeclaration(0))
          goto LABEL_262;
      }
      else
      {
        if (*(_QWORD *)(v86 + 24) == *((_QWORD *)a2 + 9))
          v110 = (llvm::GlobalValue *)*((_QWORD *)a2 - 4);
        else
          v110 = 0;
        if (llvm::GlobalValue::isDeclaration(v110))
        {
LABEL_262:
          if (*(_BYTE *)(v86 + 16) == 24)
          return;
        }
        if (*(_QWORD *)(v86 + 24) == *((_QWORD *)a2 + 9))
        {
LABEL_258:
          if (llvm::Value::getMetadata((llvm::Value *)v86, 0) && !*((_QWORD *)a2 + 6))
          {
            v122[0] = "inlinable function call in a function with debug info must have a !dbg location";
            v124 = 259;
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, a2);
            return;
          }
          v86 = *((_QWORD *)a2 - 4);
          goto LABEL_262;
        }
      }
    }
    v86 = 0;
    goto LABEL_258;
  }
  v90 = 0;
  v91 = 0;
  v83 = 0;
  v115 = 0;
  v92 = 0;
  v111 = 0;
  v112 = 0;
  v93 = 0;
  v94 = (v89 >> 4);
  v95 = a2;
  while (2)
  {
    v96 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    v97 = (unsigned int *)((char *)v95 - *((_QWORD *)a2 - 4 * v96 - 1) + -32 * v96);
    v98 = *v97;
    v99 = (uint64_t *)((char *)a2 + 32 * v98 + -32 * v96);
    v100 = (uint64_t *)(v97[1] - v98);
    v101 = *((_QWORD *)v97 - 1);
    v118[0] = v99;
    v118[1] = v100;
    v119 = (const char *)v101;
    switch(*(_DWORD *)(v101 + 8))
    {
      case 0:
        if ((v111 & 0x100000000) == 0)
        {
          BYTE4(v111) = 1;
          goto LABEL_224;
        }
        v14 = "Multiple deopt operand bundles";
        goto LABEL_11;
      case 1:
        if ((v93 & 1) != 0)
        {
          v14 = "Multiple funclet operand bundles";
          goto LABEL_11;
        }
        if (v100 != (uint64_t *)1)
        {
          v14 = "Expected exactly one funclet bundle operand";
          goto LABEL_11;
        }
        v102 = *(unsigned __int8 *)(*v99 + 16);
        if (v102 < 0x1C || v102 - 79 >= 2)
        {
          v14 = "Funclet bundle operands should correspond to a FuncletPadInst";
          goto LABEL_11;
        }
        v93 = 1;
        goto LABEL_224;
      case 2:
        if ((v112 & 1) != 0)
        {
          v14 = "Multiple gc-transition operand bundles";
          goto LABEL_11;
        }
        v112 = 1;
        goto LABEL_224;
      case 3:
        if ((v111 & 1) != 0)
        {
          v14 = "Multiple CFGuardTarget operand bundles";
          goto LABEL_11;
        }
        if (v100 != (uint64_t *)1)
        {
          v14 = "Expected exactly one cfguardtarget bundle operand";
          goto LABEL_11;
        }
        LOBYTE(v111) = 1;
        goto LABEL_224;
      case 4:
        if ((v92 & 1) != 0)
        {
          v14 = "Multiple preallocated operand bundles";
          goto LABEL_11;
        }
        if (v100 != (uint64_t *)1)
        {
          v14 = "Expected exactly one preallocated bundle operand";
          goto LABEL_11;
        }
        v104 = v93;
        v105 = v91;
        v106 = v90;
        v107 = llvm::dyn_cast<llvm::IntrinsicInst,llvm::Use>(*v99);
        if (!v107 || *(_DWORD *)(*(_QWORD *)(v107 - 32) + 36) != 11)
        {
          v14 = "\"preallocated\" argument must be a token from llvm.call.preallocated.setup";
          goto LABEL_11;
        }
        v92 = 1;
        v90 = v106;
        v91 = v105;
        v93 = v104;
        goto LABEL_224;
      case 5:
        if ((v115 & 1) != 0)
        {
          v14 = "Multiple gc-live operand bundles";
          goto LABEL_11;
        }
        v115 = 1;
        goto LABEL_224;
      case 6:
        if ((v90 & 1) != 0)
        {
          v14 = "Multiple \"clang.arc.attachedcall\" operand bundles";
          goto LABEL_11;
        }
        v108 = v92;
        v90 = 1;
        v92 = v108;
        goto LABEL_224;
      case 7:
        if ((v83 & 1) != 0)
        {
          v14 = "Multiple ptrauth operand bundles";
          goto LABEL_11;
        }
        if (v100 != (uint64_t *)2)
        {
          v14 = "Expected exactly two ptrauth bundle operands";
          goto LABEL_11;
        }
        if (*(_BYTE *)(*v99 + 16) != 16 || *(_DWORD *)(*(_QWORD *)*v99 + 8) != 8205)
        {
          v14 = "Ptrauth bundle key operand must be an i32 constant";
          goto LABEL_11;
        }
        if (*(_DWORD *)(*(_QWORD *)v99[4] + 8) == 16397)
        {
          v83 = 1;
LABEL_224:
          v95 = (llvm::CallBase *)((char *)v95 + 16);
          if (!--v94)
            goto LABEL_169;
          continue;
        }
        v14 = "Ptrauth bundle discriminator operand must be an i64";
LABEL_11:
        v122[0] = v14;
        v124 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)v122, a2);
        return;
      case 8:
        if ((v91 & 1) != 0)
        {
          v14 = "Multiple kcfi operand bundles";
          goto LABEL_11;
        }
        if (v100 != (uint64_t *)1)
        {
          v14 = "Expected exactly one kcfi bundle operand";
          goto LABEL_11;
        }
        v109 = (_BYTE *)*v99;
        if (v109[16] != 16 || *(_DWORD *)(*(_QWORD *)v109 + 8) != 8205)
        {
          v14 = "Kcfi bundle operand must be an i32 constant";
          goto LABEL_11;
        }
        v91 = 1;
        goto LABEL_224;
      default:
        goto LABEL_224;
    }
  }
}

BOOL llvm::CallBase::hasInAllocaArgument(llvm::CallBase *this)
{
  int v2;

  if ((llvm::CallBase *)llvm::CallBase::arg_end(this) == (llvm::CallBase *)((char *)this
                                                                           - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF)))
    return 0;
  v2 = ((unint64_t)(llvm::CallBase::arg_end(this) - ((_QWORD)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) >> 5)
     - 1;
  return llvm::CallBase::paramHasAttr(this, v2, 72);
}

void llvm::VerifierSupport::CheckFailed<llvm::AllocaInst *,llvm::CallBase>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, const llvm::Value *a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    llvm::VerifierSupport::Write(a1, a4);
  }
}

uint64_t llvm::CallBase::countOperandBundlesOfType(llvm::CallBase *this, int a2)
{
  int v2;
  uint64_t result;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x80000000) == 0)
    return 0;
  v4 = (char *)this - 32 * (v2 & 0x7FFFFFF);
  v7 = *((_QWORD *)v4 - 1);
  v5 = v4 - 8;
  v6 = v7;
  if ((v7 & 0xFFFFFFFF0) == 0)
    return 0;
  LODWORD(result) = 0;
  v8 = (v6 >> 4);
  v9 = &v5[-v6];
  do
  {
    v10 = *(_QWORD *)v9;
    v9 += 16;
    if (*(_DWORD *)(v10 + 8) == a2)
      result = (result + 1);
    else
      result = result;
    --v8;
  }
  while (v8);
  return result;
}

void `anonymous namespace'::Verifier::visitIntrinsicCall(_anonymous_namespace_::Verifier *this, int a2, llvm::CallBase *a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int matched;
  char *v10;
  int v11;
  std::string *v12;
  size_t size;
  uint64_t v14;
  const void *v15;
  uint64_t *ValueName;
  char *v17;
  uint64_t v18;
  const llvm::Value *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  llvm::Function *v23;
  _BYTE *v24;
  int v25;
  BOOL v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t i;
  uint64_t v42;
  _BOOL4 v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  llvm::Value *v63;
  unsigned int v64;
  int8x8_t **v66;
  __int16 ParamAlignment;
  int v68;
  __int16 v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned __int16 *v87;
  uint64_t v88;
  uint64_t v91;
  int AttrKindFromName;
  llvm::Type *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  llvm::BasicBlock *v108;
  uint64_t UniquePredecessor;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  llvm::BasicBlock **v115;
  llvm::BasicBlock *v116;
  BOOL v117;
  BOOL v118;
  unsigned __int8 *v119;
  int v120;
  unsigned __int8 *v121;
  const char *v122;
  llvm::raw_ostream **v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  int v135;
  BOOL v136;
  llvm::CallBase *v137;
  uint64_t v138;
  llvm::Type *v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t **v145;
  uint64_t v146;
  BOOL v147;
  llvm::APInt *v148;
  unsigned int v149;
  unsigned int v150;
  llvm::APInt *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  llvm::Value *v157;
  llvm::Value *v158;
  uint64_t v159;
  int8x8_t **v160;
  unsigned int v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  int8x8_t **v170;
  unsigned int v171;
  char *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  BOOL v178;
  int v179;
  _BOOL4 v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  int v210;
  uint64_t v212;
  char v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  BOOL v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  _QWORD *v223;
  int v224;
  uint64_t v225;
  BOOL v226;
  char v227;
  int64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  llvm::AttributeSetNode *v232;
  unsigned int VScaleRangeMin;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned __int8 *v238;
  llvm::BasicBlock *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t *LimitedValue;
  int v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  llvm::Value **v253;
  uint64_t v254;
  llvm::Value **v255;
  llvm::Value *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v264;
  unsigned int v265;
  uint64_t Statepoint;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  llvm::Value *BasePtr;
  int v278;
  unsigned __int16 v279;
  uint64_t v281;
  uint64_t v282;
  BOOL v283;
  int v284;
  uint64_t v285;
  BOOL v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  int v291;
  _BOOL4 v292;
  char *v293;
  int v294;
  int v295;
  char v296;
  unsigned int v297;
  uint64_t *v298;
  _QWORD *v299;
  _QWORD *v300;
  void *v301;
  void *v302;
  int v303;
  void *v304;
  void *v305;
  unsigned __int16 v306;
  char *v307;
  unsigned __int16 v308;
  unsigned __int16 v309;
  void *v310;
  const llvm::Value *v311;
  void *__p;
  unint64_t v313;
  char v314;
  char v315;
  std::string v316;
  unsigned int *v317;
  uint64_t v318;
  const llvm::Value *v319;
  void *p_p;
  unsigned int v321;
  char v322;
  __int16 v323;
  void *v324;
  uint64_t v325;
  _BYTE v326[32];
  _QWORD *v327;
  uint64_t v328;
  _QWORD v329[14];

  v329[12] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a3 - 4);
  if (v6 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *((_QWORD *)a3 + 9))
  {
    v319 = (const llvm::Value *)*((_QWORD *)a3 - 4);
  }
  else
  {
    v319 = 0;
    if (MEMORY[0x10])
    {
LABEL_12:
      p_p = "Intrinsic functions should never be defined!";
      v323 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v319);
      return;
    }
    v6 = 0;
  }
  if (*(_QWORD *)(v6 + 72) != v6 + 72 || (*(_BYTE *)(v6 + 35) & 1) != 0)
    goto LABEL_12;
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_DWORD *)(v7 + 8);
  v327 = v329;
  v328 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2);
  v317 = (unsigned int *)v329;
  v318 = 0;
  v324 = v326;
  v325 = 0x400000000;
  matched = llvm::Intrinsic::matchIntrinsicSignature(v7, &v317);
  if (matched == 2)
  {
    v10 = "Intrinsic has incorrect argument type!";
    goto LABEL_23;
  }
  if (matched != 1)
  {
    if (v8 < 0x100)
    {
      if (v318)
      {
        if (v318 == 1)
        {
          v317 += 3;
          v318 = 0;
        }
        v10 = "Callsite was not defined with variable arguments!";
        goto LABEL_23;
      }
    }
    else if (v318 != 1 || (v11 = *v317, v317 += 3, v318 = 0, v11 != 1))
    {
      v10 = "Intrinsic was not defined with variable arguments!";
      goto LABEL_23;
    }
    getIntrinsicNameImpl(a2, (BOOL **)v324, v325, *(uint64_t **)(v6 + 40), v7, &v316);
    if ((v316.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v316;
    else
      v12 = (std::string *)v316.__r_.__value_.__r.__words[0];
    if ((v316.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v316.__r_.__value_.__r.__words[2]);
    else
      size = v316.__r_.__value_.__l.__size_;
    if ((*(_BYTE *)(v6 + 23) & 0x10) != 0)
    {
      ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v6);
      v15 = ValueName + 2;
      v14 = *ValueName;
    }
    else
    {
      v14 = 0;
      v15 = &str_3_26;
    }
    if (size != v14 || size && memcmp(v12, v15, size))
    {
      std::operator+<char>();
      v323 = 260;
      p_p = &__p;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v319);
      if (v314 < 0)
        operator delete(__p);
      goto LABEL_660;
    }
    v17 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
    v18 = llvm::CallBase::arg_end(a3);
    if (v17 != (char *)v18)
    {
      v20 = (char *)v18;
      while (1)
      {
        v21 = *(_QWORD *)v17;
        if (*(_QWORD *)v17)
          v22 = *(_BYTE *)(*(_QWORD *)v17 + 16) == 23;
        else
          v22 = 0;
        if (v22)
        {
          v23 = *(llvm::Function **)(*((_QWORD *)a3 + 5) + 56);
          v24 = *(_BYTE **)(v21 + 24);
          v25 = llvm::MDNode::classof(v24);
          if (v24)
            v26 = v25 == 0;
          else
            v26 = 1;
          if (v26)
          {
            llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((_anonymous_namespace_::Verifier *)((char *)this + 432), v24, (uint64_t)&p_p);
            if (v322 && *v24 - 3 >= 0xFFFFFFFE)
          }
          else
          {
          }
        }
        v27 = !v21 || *(unsigned __int8 *)(v21 + 16) > 0x14u;
        if (!v27 && *(_BYTE *)(*(_QWORD *)v21 + 8) == 11)
          break;
        v17 += 32;
        if (v17 == v20)
          goto LABEL_63;
      }
      v28 = "const x86_amx is not allowed in argument!";
      goto LABEL_67;
    }
LABEL_63:
    if (a2 <= 663)
    {
      switch(a2)
      {
        case 7:
          v78 = *((_DWORD *)a3 + 5);
          if ((v78 & 0x80000000) == 0)
            goto LABEL_660;
          v79 = (char *)a3 - 32 * (v78 & 0x7FFFFFF);
          v80 = *((_QWORD *)v79 - 1);
          if (!v80)
            goto LABEL_660;
          v81 = -v80;
          while (2)
          {
            v82 = &v79[v81];
            v83 = *(unsigned int *)&v79[v81];
            v84 = *(_DWORD *)&v79[v81 + 4];
            v85 = v84 - v83;
            v86 = *(_QWORD *)&v79[v81 - 8];
            v87 = (unsigned __int16 *)(v86 + 16);
            v88 = *(_QWORD *)v86;
            if (*(_QWORD *)v86 == 6)
            {
              if (*(_DWORD *)v87 == 1869506409 && *(_WORD *)(v86 + 20) == 25970)
              {
                v91 = 6;
LABEL_199:
                AttrKindFromName = llvm::Attribute::getAttrKindFromName((char *)(v86 + 16), v91);
                if (AttrKindFromName != 75)
                {
                  if (v85 >= 3)
                  {
                    v252 = "too many arguments";
                    goto LABEL_659;
                  }
                  if (!AttrKindFromName)
                    goto LABEL_69;
                  if ((AttrKindFromName - 75) > 9)
                  {
                    if ((AttrPropTable[AttrKindFromName - 1] & 2) != 0)
                    {
                      if (v85 != 1)
                      {
                        v252 = "this attribute should have one argument";
                        goto LABEL_659;
                      }
                    }
                    else if ((AttrPropTable[AttrKindFromName - 1] & 1) != 0 && v84 != (_DWORD)v83)
                    {
                      v252 = "this attribute has no argument";
                      goto LABEL_659;
                    }
                  }
                  else
                  {
                    if (v85 != 2)
                    {
                      v252 = "this attribute should have 2 arguments";
                      goto LABEL_659;
                    }
                    if (*(_BYTE *)(*((_QWORD *)a3
                                    + 4 * (*(_DWORD *)v82 + 1)
                                    + -4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))
                                  + 16) != 16)
                    {
                      v252 = "the second argument should be a constant integral value";
LABEL_659:
                      p_p = v252;
                      v323 = 259;
                      llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, a3);
                      goto LABEL_660;
                    }
                  }
                  v81 += 16;
                  if (!v81)
                    goto LABEL_69;
                  continue;
                }
                if ((v85 & 0xFFFFFFFE) != 2)
                {
                  v252 = "alignment assumptions should have 2 or 3 arguments";
                  goto LABEL_659;
                }
                v289 = *(unsigned int *)&v79[v81];
                v290 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
                if (*(_BYTE *)(**(_QWORD **)&v290[32 * v289] + 8) != 15)
                {
                  v252 = "first argument should be a pointer";
                  goto LABEL_659;
                }
                if (*(_BYTE *)(**(_QWORD **)&v290[32 * (v289 + 1)] + 8) != 13)
                {
                  v252 = "second argument should be an integer";
                  goto LABEL_659;
                }
                if (v85 == 3 && *(_BYTE *)(**(_QWORD **)&v290[32 * (v289 + 2)] + 8) != 13)
                {
                  v252 = "third argument should be an integer if present";
                  goto LABEL_659;
                }
LABEL_660:
                if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v316.__r_.__value_.__l.__data_);
                goto LABEL_24;
              }
            }
            else if (v88 == 16
                   && *(_QWORD *)v87 == 0x6574617261706573
                   && *(_QWORD *)(v86 + 24) == 0x656761726F74735FLL)
            {
              if (v85 != 2)
              {
                v252 = "separate_storage assumptions should have 2 arguments";
                goto LABEL_659;
              }
              v293 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
              if (*(_BYTE *)(**(_QWORD **)&v293[32 * v83] + 8) != 15
                || *(_BYTE *)(**(_QWORD **)&v293[32 * (v83 + 1)] + 8) != 15)
              {
                v252 = "arguments to separate_storage assumptions should be pointers";
                goto LABEL_659;
              }
              goto LABEL_660;
            }
            break;
          }
          if (!llvm::Attribute::isExistingAttribute(v87, v88))
          {
            v252 = "tags must be valid attribute names";
            goto LABEL_659;
          }
          v86 = *((_QWORD *)v82 - 1);
          v91 = *(_QWORD *)v86;
          goto LABEL_199;
        case 9:
          v93 = *(llvm::Type **)a3;
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
            v93 = (llvm::Type *)**((_QWORD **)v93 + 2);
          if ((llvm::Type::getPrimitiveSizeInBits(v93) & 0xF) == 0)
            goto LABEL_660;
          v54 = "bswap must be an even number of bytes";
          goto LABEL_106;
        case 10:
          v94 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v95 = *(unsigned __int8 *)(v94 + 16);
          if (v95 < 0x1C
            || ((v96 = v95 - 33, v27 = v96 > 0x33, v97 = (1 << v96) & 0x8000000000041, !v27)
              ? (v98 = v97 == 0)
              : (v98 = 1),
                v98 || *(_DWORD *)(*(_QWORD *)(v94 - 32) + 36) != 11))
          {
            v28 = "llvm.call.preallocated.arg token argument must be a llvm.call.preallocated.setup";
            goto LABEL_67;
          }
          v99 = *((_QWORD *)a3 + 8);
          if ((!v99 || (*(_BYTE *)(v99 + 21) & 2) == 0)
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 73) & 1) == 0)
          {
            v28 = "llvm.call.preallocated.arg must be called with a \"preallocated\" call site attribute";
            goto LABEL_67;
          }
          goto LABEL_660;
        case 11:
          v100 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v100)
            v101 = *(_BYTE *)(v100 + 16) == 16;
          else
            v101 = 0;
          if (!v101)
          {
            v28 = "llvm.call.preallocated.setup argument must be a constant";
            goto LABEL_67;
          }
          v212 = *((_QWORD *)a3 + 1);
          if (!v212)
            goto LABEL_660;
          v213 = 0;
          while (2)
          {
            v214 = *(_QWORD *)(v212 + 24);
            v215 = *(unsigned __int8 *)(v214 + 16);
            if (v215 < 0x1C
              || ((v216 = v215 - 33, v27 = v216 > 0x33, v217 = (1 << v216) & 0x8000000000041, !v27)
                ? (v218 = v217 == 0)
                : (v218 = 1),
                  v218))
            {
              v28 = "Uses of llvm.call.preallocated.setup must be calls";
              goto LABEL_67;
            }
            v219 = *(_QWORD *)(v214 - 32);
            if (!v219 || *(_BYTE *)(v219 + 16) || *(_QWORD *)(v219 + 24) != *(_QWORD *)(v214 + 72))
              break;
            v224 = *(_DWORD *)(v219 + 36);
            if (v224 == 12)
              goto LABEL_445;
            if (v224 == 10)
            {
              v225 = *(_QWORD *)(v214 - 32 * (*(_DWORD *)(v214 + 20) & 0x7FFFFFF) + 32);
              if (v225)
                v226 = *(_BYTE *)(v225 + 16) == 16;
              else
                v226 = 0;
              if (v226)
              {
                LODWORD(v313) = *(_DWORD *)(v225 + 32);
                if (v313 > 0x40)
                {
                  __p = (void *)operator new[]();
                  memcpy(__p, *(const void **)(v225 + 24), (((unint64_t)v313 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  __p = *(void **)(v225 + 24);
                }
                if (!llvm::APInt::slt((llvm::APInt *)&__p, 0)
                  && (llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)(v100 + 24)) & 0x80000000) != 0)
                {
                  v227 = 1;
                }
                else
                {
                  p_p = "llvm.call.preallocated.alloc arg index must be between 0 and corresponding llvm.call.preallocate"
                        "d.setup's argument count";
                  v323 = 259;
                  llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p);
                  v227 = 0;
                }
                if (v313 >= 0x41 && __p)
                  MEMORY[0x24BD1B380](__p, 0x1000C8000313F17);
                if ((v227 & 1) == 0)
                  goto LABEL_660;
LABEL_445:
                v212 = *(_QWORD *)(v212 + 8);
                if (!v212)
                  goto LABEL_69;
                continue;
              }
              v28 = "llvm.call.preallocated.alloc arg index must be a constant";
LABEL_67:
              p_p = v28;
              v323 = 259;
              llvm::VerifierSupport::CheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p);
              goto LABEL_660;
            }
            break;
          }
          if ((v213 & 1) != 0)
          {
            v28 = "Can have at most one call corresponding to a llvm.call.preallocated.setup";
            goto LABEL_67;
          }
          if (((llvm::CallBase::arg_end(*(llvm::CallBase **)(v212 + 24))
               - (v214
                + 32 * -(*(_DWORD *)(v214 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0)
            goto LABEL_603;
          v220 = 0;
          v221 = 0;
          do
            v220 += llvm::CallBase::paramHasAttr((llvm::CallBase *)v214, v221++, 73);
          while (v221 < ((llvm::CallBase::arg_end((llvm::CallBase *)v214)
                                       - (v214
                                        + 32 * (unint64_t)-(*(_DWORD *)(v214 + 20) & 0x7FFFFFF))) >> 5));
          if (!v220)
          {
LABEL_603:
            v28 = "cannot use preallocated intrinsics on a call without preallocated arguments";
            goto LABEL_67;
          }
          v222 = *(_DWORD *)(v100 + 32);
          v223 = (_QWORD *)(v100 + 24);
          if (v222 < 0x41)
            goto LABEL_440;
          if (v222 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v100 + 24)) <= 0x40)
          {
            v223 = *(_QWORD **)(v100 + 24);
LABEL_440:
            if (*v223 == v220)
            {
              if (llvm::CallBase::countOperandBundlesOfType((llvm::CallBase *)v214, 4) > 1)
                goto LABEL_660;
              llvm::CallBase::getOperandBundle(v214, 4, (uint64_t)&__p);
              if (v315)
              {
                if (*(llvm::CallBase **)__p == a3)
                {
                  v213 = 1;
                  goto LABEL_445;
                }
                v28 = "preallocated bundle must have token from corresponding llvm.call.preallocated.setup";
              }
              else
              {
                v28 = "Use of llvm.call.preallocated.setup outside intrinsics must be in \"preallocated\" operand bundle";
              }
              goto LABEL_67;
            }
          }
          p_p = "llvm.call.preallocated.setup arg size must be equal to number of preallocated arguments at call site";
          v323 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::CallBase>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, a3, (const llvm::Value *)v214);
          goto LABEL_660;
        case 12:
          v102 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v103 = *(unsigned __int8 *)(v102 + 16);
          if (v103 >= 0x1C)
          {
            v104 = v103 - 33;
            v27 = v104 > 0x33;
            v105 = (1 << v104) & 0x8000000000041;
            v106 = v27 || v105 == 0;
            if (!v106 && *(_DWORD *)(*(_QWORD *)(v102 - 32) + 36) == 11)
              goto LABEL_660;
          }
          v28 = "llvm.call.preallocated.teardown token argument must be a llvm.call.preallocated.setup";
          goto LABEL_67;
        case 13:
          v107 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (!v107 || *(_BYTE *)(v107 + 16) != 39)
          {
            v54 = "intrinstic requires callbr operand";
            goto LABEL_106;
          }
          v108 = (llvm::BasicBlock *)*((_QWORD *)a3 + 5);
          UniquePredecessor = llvm::BasicBlock::getUniquePredecessor(v108);
          if (!UniquePredecessor)
          {
            v54 = "Intrinsic in block must have 1 unique predecessor";
            goto LABEL_106;
          }
          v110 = *(_QWORD *)(UniquePredecessor + 40);
          v111 = v110 - 24;
          if (v110)
            v112 = v110 - 24;
          else
            v112 = 0;
          if (*(unsigned __int8 *)(v112 + 16) - 29 >= 0xB)
            v113 = 0;
          else
            v113 = v111;
          if (*(_BYTE *)(v113 + 16) != 39)
          {
            v54 = "Intrinsic must have corresponding callbr in predecessor";
            goto LABEL_106;
          }
          llvm::CallBrInst::getIndirectDests((unsigned int *)v107, (uint64_t)&p_p);
          if (v321)
          {
            v114 = 8 * v321 - 8;
            v115 = (llvm::BasicBlock **)p_p;
            do
            {
              v116 = *v115++;
              v117 = v116 == v108;
              v118 = v116 == v108 || v114 == 0;
              v114 -= 8;
            }
            while (!v118);
          }
          else
          {
            v117 = 0;
          }
          if (p_p != &v322)
            free(p_p);
          if (!v117)
          {
            v54 = "Intrinsic's corresponding callbr must have intrinsic's parent basic block in indirect destination list";
            goto LABEL_106;
          }
          v287 = *((_QWORD *)v108 + 6);
          if (!v287 || (llvm::CallBase *)(v287 - 24) != a3)
          {
            v54 = "No other instructions may proceed intrinsic";
            goto LABEL_106;
          }
          goto LABEL_69;
        case 37:
          v119 = (unsigned __int8 *)llvm::Value::stripPointerCasts(((llvm::Value **)a3
                                                                  - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[12]);
          v120 = v119[16];
          if (v120 == 19)
            goto LABEL_660;
          if (v120 == 3
            && (v121 = v119, (v119[80] & 1) != 0)
            && llvm::GlobalVariable::hasDefinitiveInitializer((llvm::GlobalVariable *)v119))
          {
            if ((*(_BYTE *)(*((_QWORD *)v121 - 4) + 16) & 0xFE) == 8)
              goto LABEL_660;
            v28 = "info argument of llvm.coro.id must refer to either a struct or an array";
          }
          else
          {
            v28 = "info argument of llvm.coro.id must refer to an initialized constant";
          }
          goto LABEL_67;
        case 56:
          v122 = "assign";
          v123 = (llvm::raw_ostream **)this;
          v124 = 6;
          goto LABEL_269;
        case 57:
          if (*(_BYTE *)(*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 16) != 23)
          {
            v252 = "invalid llvm.dbg.declare intrinsic call 1";
            goto LABEL_659;
          }
          v122 = "declare";
          v123 = (llvm::raw_ostream **)this;
          v124 = 7;
LABEL_269:
          goto LABEL_660;
        case 58:
          goto LABEL_660;
        case 59:
          v122 = "value";
          v123 = (llvm::raw_ostream **)this;
          v124 = 5;
          goto LABEL_269;
        case 63:
        case 64:
          if (*(_BYTE *)(*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 16) == 80)
            goto LABEL_69;
          v252 = "eh.exceptionpointer argument must be a catchpad";
          goto LABEL_659;
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
          goto LABEL_69;
        case 120:
          if (*((_BYTE *)a3 + 16) != 84)
          {
            v252 = "experimental_deoptimize cannot be invoked";
            goto LABEL_659;
          }
          if (llvm::CallBase::countOperandBundlesOfType(a3, 0) != 1)
          {
            v28 = "experimental_deoptimize must have exactly one \"deopt\" operand bundle";
            goto LABEL_67;
          }
          v125 = *((_QWORD *)a3 + 5);
          if (*(_QWORD *)a3 != **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v125 + 56) + 24) + 16))
          {
            v28 = "experimental_deoptimize return type must match caller return type";
            goto LABEL_67;
          }
          v281 = *((_QWORD *)a3 + 4);
          v282 = v281 - 24;
          v283 = v281 == v125 + 40 || v281 == 0;
          v284 = v283;
          if (v283)
            v285 = 0;
          else
            v285 = v282;
          if (*(_BYTE *)(v285 + 16) == 29)
          {
            v286 = v284 == 0;
          }
          else
          {
            v285 = 0;
            v286 = 0;
          }
          if (!v286)
          {
            v28 = "calls to experimental_deoptimize must be followed by a return";
            goto LABEL_67;
          }
          if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 7)
            goto LABEL_660;
          v288 = *(_DWORD *)(v285 + 20) & 0x7FFFFFF;
          if ((_DWORD)v288)
          {
            if (*(llvm::CallBase **)(v285 - 32 * v288) == a3)
              goto LABEL_660;
          }
          v28 = "calls to experimental_deoptimize must be followed by a return of the value computed by experimental_deoptimize";
          goto LABEL_67;
        case 123:
          v126 = llvm::CallBase::arg_end(a3);
          v127 = (void **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (((v126 - (_QWORD)v127) & 0x1FFFFFFFE0) != 0x60)
          {
            v252 = "wrong number of arguments";
            goto LABEL_659;
          }
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
            v128 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
          else
            v128 = *(_DWORD *)(*(_QWORD *)a3 + 8);
          if (v128 != 15)
          {
            v252 = "gc.relocate must return a pointer or a vector of pointers";
            goto LABEL_659;
          }
          v238 = (unsigned __int8 *)*v127;
          if (*v127 && v238[16] == 94)
          {
            v239 = (llvm::BasicBlock *)*((_QWORD *)v238 + 5);
            v240 = (_QWORD *)llvm::BasicBlock::getUniquePredecessor(v239);
            __p = v240;
            if (!v240)
            {
              p_p = "safepoints should have unique landingpads";
              v323 = 259;
              v311 = v239;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v311);
              goto LABEL_660;
            }
            v241 = (_QWORD *)v240[5];
            if (v241 == v240 + 5
              || ((v242 = (uint64_t)(v241 - 3), v241) ? (v243 = v241 - 3) : (v243 = 0),
                  *((unsigned __int8 *)v243 + 16) - 29 >= 0xB))
            {
              v244 = "safepoint block should be well formed";
              goto LABEL_614;
            }
            if (!llvm::GCStatepointInst::classof(v242))
            {
              v244 = "gc relocate should be linked to a statepoint";
LABEL_614:
              p_p = v244;
              v323 = 259;
              llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (const llvm::Value **)&__p);
              goto LABEL_660;
            }
          }
          else
          {
            __p = *v127;
            if (!llvm::GCStatepointInst::classof((uint64_t)v238) && v238[16] - 11 >= 2)
            {
              p_p = "gc relocate is incorrectly tied to the statepoint";
              v323 = 259;
LABEL_517:
              llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, a3, (const llvm::Value **)&__p);
              goto LABEL_660;
            }
          }
          Statepoint = llvm::GCProjectionInst::getStatepoint(a3);
          v268 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v269 = *((_QWORD *)v268 + 4);
          if (*(_BYTE *)(v269 + 16) != 16)
          {
            v252 = "gc.relocate operand #2 must be integer offset";
            goto LABEL_659;
          }
          v270 = *((_QWORD *)v268 + 8);
          if (*(_BYTE *)(v270 + 16) != 16)
          {
            v252 = "gc.relocate operand #3 must be integer offset";
            goto LABEL_659;
          }
          v271 = (_QWORD *)(v269 + 24);
          if (*(_DWORD *)(v269 + 32) >= 0x41u)
            v271 = (_QWORD *)*v271;
          v272 = (_QWORD *)(v270 + 24);
          if (*(_DWORD *)(v270 + 32) >= 0x41u)
            v272 = (_QWORD *)*v272;
          if (*(unsigned __int8 *)(Statepoint + 16) - 11 < 2)
            goto LABEL_660;
          v273 = (_QWORD *)*v271;
          v274 = (_QWORD *)*v272;
          llvm::CallBase::getOperandBundle(Statepoint, 5, (uint64_t)&__p);
          if (v315)
          {
            if ((unint64_t)v273 >= v313)
            {
              v252 = "gc.relocate: statepoint base index out of bounds";
              goto LABEL_659;
            }
            if ((unint64_t)v274 >= v313)
            {
              v252 = "gc.relocate: statepoint derived index out of bounds";
              goto LABEL_659;
            }
          }
          v275 = *(_QWORD *)a3;
          v276 = *(_QWORD *)llvm::GCRelocateInst::getDerivedPtr(a3);
          BasePtr = llvm::GCRelocateInst::getBasePtr(a3);
          if ((*(_DWORD *)(*(_QWORD *)BasePtr + 8) & 0xFE) == 0x12)
            v278 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)BasePtr + 16) + 8);
          else
            v278 = *(_DWORD *)(*(_QWORD *)BasePtr + 8);
          if (v278 != 15)
            goto LABEL_657;
          v294 = *(_DWORD *)(v276 + 8);
          v295 = v294 & 0xFE;
          v296 = v294;
          if (v295 == 18)
            v296 = *(_BYTE *)(**(_QWORD **)(v276 + 16) + 8);
          if (v296 != 15)
          {
LABEL_657:
            v252 = "gc.relocate: relocated value must be a pointer";
            goto LABEL_659;
          }
          v297 = *(_DWORD *)(v275 + 8);
          if ((v295 == 18) != ((v297 & 0xFE) == 18))
          {
            v252 = "gc.relocate: vector relocates to vector and pointer to pointer";
            goto LABEL_659;
          }
          if ((v297 & 0xFE) == 0x12)
            v297 = *(_DWORD *)(**(_QWORD **)(v275 + 16) + 8);
          if (v295 == 18)
            v294 = *(_DWORD *)(**(_QWORD **)(v276 + 16) + 8);
          if ((v294 ^ v297) >= 0x100)
          {
            v252 = "gc.relocate: relocating a pointer shouldn't change its address space";
            goto LABEL_659;
          }
          v298 = (uint64_t *)(****(_QWORD ****)(*((_QWORD *)a3 + 5) + 56) + 2696);
          p_p = *(void **)(*((_QWORD *)a3 + 5) + 56);
          v299 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::FindAndConstruct(v298, (uint64_t *)&p_p);
          v302 = (void *)v299[1];
          v300 = v299 + 1;
          v301 = v302;
          v303 = *((char *)v300 + 23);
          if (v303 >= 0)
            v304 = v300;
          else
            v304 = v301;
          if (v303 >= 0)
            v305 = (void *)*((unsigned __int8 *)v300 + 23);
          else
            v305 = (void *)v300[1];
          llvm::getGCStrategy(v304, v305);
          if (!__p)
          {
            p_p = "gc.relocate: calling function must have GCStrategy";
            v323 = 259;
            v311 = *(const llvm::Value **)(*((_QWORD *)a3 + 5) + 56);
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v311);
            goto LABEL_685;
          }
          v306 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 16))();
          if (v306 < 0x100u || (_BYTE)v306)
          {
            v308 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 16))();
            if (v308 < 0x100u || (_BYTE)v308)
            {
              v309 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 16))();
              if (v309 < 0x100u || (_BYTE)v309)
              {
LABEL_685:
                v310 = __p;
                __p = 0;
                if (v310)
                  (*(void (**)(void *))(*(_QWORD *)v310 + 8))(v310);
                goto LABEL_660;
              }
            }
            v307 = "gc.relocate: relocated value must be a gc pointer";
          }
          else
          {
            v307 = "gc.relocate: must return gc pointer";
          }
          p_p = v307;
          v323 = 259;
          llvm::VerifierSupport::CheckFailed<llvm::Function>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, a3);
          goto LABEL_685;
        case 124:
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 56) + 18) & 0x4000) == 0)
            goto LABEL_414;
          v129 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v130 = *(unsigned __int8 *)(v129 + 16);
          if (v130 - 11 < 2)
            goto LABEL_660;
          if (v130 < 0x1C
            || ((v131 = v130 - 33, v27 = v131 > 0x33, v132 = (1 << v131) & 0x8000000000041, !v27)
              ? (v133 = v132 == 0)
              : (v133 = 1),
                v133
             || (v134 = *(_QWORD *)(v129 - 32)) == 0
             || *(_BYTE *)(v134 + 16)
             || *(_QWORD *)(v134 + 24) != *(_QWORD *)(v129 + 72)
             || *(_QWORD *)(v134 + 72) != v134 + 72
             || (*(_BYTE *)(v134 + 35) & 1) != 0
             || *(_DWORD *)(v134 + 36) != 125))
          {
            p_p = "gc.result operand #1 must be from a statepoint";
            v323 = 259;
            __p = (void *)v129;
            goto LABEL_517;
          }
          if (*(_QWORD *)a3 == **(_QWORD **)(llvm::AttributeList::getParamElementType((llvm::AttributeList *)(v129 + 64), 2)+ 16))goto LABEL_660;
          v252 = "gc.result result type does not match wrapped callee";
          goto LABEL_659;
        case 125:
          v135 = *((unsigned __int8 *)a3 + 16);
          v136 = v135 == 84;
          if (v135 == 84)
            v137 = a3;
          else
            v137 = 0;
          __p = v137;
          if (v136 && *(_BYTE *)(*((_QWORD *)a3 - 4) + 16) == 24)
          {
            p_p = "gc.statepoint support for inline assembly unimplemented";
            v323 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (const llvm::Value **)&__p);
            goto LABEL_660;
          }
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 56) + 18) & 0x4000) == 0)
            goto LABEL_414;
          goto LABEL_660;
        case 126:
          if (*((_BYTE *)a3 + 16) != 84)
          {
            v252 = "experimental_guard cannot be invoked";
            goto LABEL_659;
          }
          if (llvm::CallBase::countOperandBundlesOfType(a3, 0) == 1)
            goto LABEL_660;
          v28 = "experimental_guard must have exactly one \"deopt\" operand bundle";
          goto LABEL_67;
        case 127:
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)this + 510, (uint64_t)a3);
          goto LABEL_660;
        case 131:
          v138 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            if ((*(_DWORD *)(v138 + 8) & 0xFE) == 0x12)
            {
              v139 = **(llvm::Type ***)(v138 + 16);
              if (*((_BYTE *)v139 + 8) == 13 && (llvm::Type::getPrimitiveSizeInBits(v139) & 0xFFFFFFF8) != 0)
                goto LABEL_660;
            }
          }
          v54 = "experimental_stepvector only supported for vectors of integers with a bitwidth of at least 8.";
          goto LABEL_106;
        case 135:
          v140 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          v141 = *(_DWORD *)(v140 + 32);
          if (v141 > 0x40)
            v142 = **(_QWORD **)(v140 + 24);
          else
            v142 = (uint64_t)(*(_QWORD *)(v140 + 24) << -(char)v141) >> -(char)v141;
          v228 = *(unsigned int *)(*(_QWORD *)a3 + 32);
          v229 = *((_QWORD *)a3 + 5);
          if (v229)
          {
            v230 = *(_QWORD *)(v229 + 56);
            if (v230)
            {
              v231 = *(_QWORD *)(v230 + 112);
              if (v231)
              {
                if ((*(_BYTE *)(v231 + 22) & 0x10) != 0)
                {
                  if (*(_DWORD *)(v231 + 8) && (v232 = *(llvm::AttributeSetNode **)(v231 + 40)) != 0)
                    VScaleRangeMin = llvm::AttributeSetNode::getVScaleRangeMin(v232);
                  else
                    VScaleRangeMin = 1;
                  v228 = VScaleRangeMin * (unint64_t)v228;
                }
              }
            }
          }
          if (v142 < 0)
          {
            if (v228 >= -v142)
              goto LABEL_660;
          }
          else if (v142 < v228)
          {
            goto LABEL_660;
          }
          v54 = "The splice index exceeds the range [-VL, VL-1] where VL is the known minimum number of elements in the v"
                "ector. For scalable vectors the minimum number of elements is determined from vscale_range.";
          goto LABEL_106;
        case 136:
        case 137:
        case 138:
        case 335:
        case 336:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 344:
        case 345:
        case 346:
        case 347:
        case 348:
        case 349:
        case 350:
        case 351:
        case 352:
        case 353:
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 371:
        case 372:
        case 373:
        case 374:
        case 375:
        case 376:
        case 377:
        case 378:
        case 379:
        case 380:
        case 381:
        case 382:
        case 383:
        case 384:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 394:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 408:
        case 409:
        case 410:
        case 411:
          goto LABEL_69;
        case 146:
          v143 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          if (v143)
            v144 = *(_BYTE *)(v143 + 16) == 23;
          else
            v144 = 0;
          if (!v144 || (v145 = *(uint64_t ***)(v143 + 24), (__p = v145) == 0))
          {
            v252 = "missing rounding mode argument";
            goto LABEL_659;
          }
          if (*(_BYTE *)v145)
          {
            p_p = "invalid value for llvm.fptrunc.round metadata operand (the operand should be a string)";
            v323 = 259;
            llvm::VerifierSupport::CheckFailed<llvm::MDNode *>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (unsigned __int8 **)&__p);
            goto LABEL_660;
          }
          v279 = llvm::convertStrToRoundingMode(v145[1] + 3, *v145[1]);
          if (v279 >= 0x100u && v279 != 7)
            goto LABEL_660;
          v252 = "unsupported rounding mode argument";
          goto LABEL_659;
        case 150:
        case 151:
        case 152:
          if (a2 != 151)
            goto LABEL_144;
          v63 = llvm::Value::stripPointerCasts(*((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)));
          if (!v63 || *((_BYTE *)v63 + 16) != 59)
          {
            v252 = "llvm.gcroot parameter #1 must be an alloca.";
            goto LABEL_659;
          }
          v64 = *(unsigned __int8 *)(((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4] + 16);
          if (v64 >= 0x15)
          {
            v252 = "llvm.gcroot parameter #2 must be a constant.";
            goto LABEL_659;
          }
          if (v64 == 19 && *(_BYTE *)(*((_QWORD *)v63 + 8) + 8) != 15)
          {
            v252 = "llvm.gcroot parameter #1 must either be a pointer alloca, or argument #2 must be a non-null constant.";
            goto LABEL_659;
          }
LABEL_144:
          if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a3 + 5) + 56) + 18) & 0x4000) == 0)
          {
LABEL_414:
            v252 = "Enclosing function does not use GC.";
            goto LABEL_659;
          }
          goto LABEL_69;
        case 153:
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
          {
            if (*(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8) == 269)
              goto LABEL_660;
            v252 = "get_active_lane_mask: element type is not i1";
          }
          else
          {
            v252 = "get_active_lane_mask: must return a vector";
          }
          goto LABEL_659;
        case 159:
          if (!*((_BYTE *)llvm::Value::stripPointerCasts(((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4])
                + 16))
            goto LABEL_660;
          v252 = "llvm.init_trampoline parameter #2 must resolve to a function.";
          goto LABEL_659;
        case 166:
          v146 = *((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if (v146)
            v147 = *(_BYTE *)(v146 + 16) == 16;
          else
            v147 = 0;
          if (v147)
          {
            v148 = (llvm::APInt *)(v146 + 24);
            v149 = *(_DWORD *)(v146 + 32);
            v150 = v149 - 1;
            v151 = v148;
            if (v149 >= 0x41)
              v151 = (llvm::APInt *)(*(_QWORD *)v148 + 8 * (v150 >> 6));
            if (((*(_QWORD *)v151 >> v150) & 1) == 0 || llvm::APInt::isAllOnes(v148))
              goto LABEL_660;
          }
          v54 = "invariant_start parameter must be -1, 0 or a positive number";
          goto LABEL_106;
        case 168:
          v152 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          v153 = (_QWORD *)(v152 + 24);
          if (*(_DWORD *)(v152 + 32) >= 0x41u)
            v153 = (_QWORD *)*v153;
          if ((*(_DWORD *)v153 & 0xFFFFFC00) == 0)
            goto LABEL_660;
          v28 = "unsupported bits for llvm.is.fpclass test mask";
          goto LABEL_67;
        case 172:
        case 173:
        case 183:
        case 184:
          if ((*(_DWORD *)(**((_QWORD **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)) + 8) & 0xFE) != 0x12
            && (*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) != 0x12)
          {
            goto LABEL_69;
          }
          v54 = "Intrinsic does not support vectors";
          goto LABEL_106;
        case 176:
          v154 = *((_QWORD *)a3 + 5);
          v155 = *(_QWORD *)(*(_QWORD *)(v154 + 56) + 80);
          if (v155)
            v156 = v155 - 24;
          else
            v156 = 0;
          if (v156 != v154)
          {
            v252 = "llvm.localescape used outside of entry block";
            goto LABEL_659;
          }
          if (*((_BYTE *)this + 800))
          {
            v252 = "multiple calls to llvm.localescape in one function";
            goto LABEL_659;
          }
          v253 = (llvm::Value **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v254 = llvm::CallBase::arg_end(a3);
          if (v253 == (llvm::Value **)v254)
            goto LABEL_545;
          v255 = (llvm::Value **)v254;
          while (1)
          {
            if (*((_BYTE *)*v253 + 16) != 19)
            {
              v256 = llvm::Value::stripPointerCasts(*v253);
              if (!v256 || *((_BYTE *)v256 + 16) != 59 || *(_BYTE *)(*((_QWORD *)v256 - 4) + 16) != 16)
                break;
              v257 = *((_QWORD *)v256 + 5);
              v258 = *(_QWORD *)(*(_QWORD *)(v257 + 56) + 80);
              v259 = v258 ? v258 - 24 : 0;
              if (v259 != v257 || (*((_WORD *)v256 + 9) & 0x40) != 0)
                break;
            }
            v253 += 4;
            if (v253 == v255)
            {
LABEL_545:
              v260 = (unint64_t)(llvm::CallBase::arg_end(a3)
                                      - ((_QWORD)a3
                                       - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))) >> 5;
              p_p = *(void **)(v154 + 56);
              *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::FindAndConstruct((uint64_t)this + 832, (uint64_t *)&p_p)+ 2) = v260;
              *((_BYTE *)this + 800) = 1;
              goto LABEL_69;
            }
          }
          v252 = "llvm.localescape only accepts static allocas";
          goto LABEL_659;
        case 177:
          v157 = llvm::Value::stripPointerCasts(*((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)));
          if (*((_BYTE *)v157 + 16))
            v158 = 0;
          else
            v158 = v157;
          __p = v158;
          if (!v158)
            goto LABEL_520;
          if (*((_BYTE *)v158 + 16))
          {
            if (*((_BYTE *)v158 + 16) == 3 && (*((_DWORD *)v158 + 5) & 0x7FFFFFF) == 0)
            {
LABEL_520:
              v252 = "llvm.localrecover first argument must be function defined in this module";
              goto LABEL_659;
            }
          }
          else if (*((llvm::Value **)v158 + 9) == (llvm::Value *)((char *)v158 + 72)
                 && (*((_BYTE *)v158 + 35) & 1) == 0)
          {
            goto LABEL_520;
          }
          v245 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          v246 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::FindAndConstruct((uint64_t)this + 832, (uint64_t *)&__p);
          v247 = *((unsigned int *)v246 + 3);
          LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)(v245 + 24), 0xFFFFFFFFuLL);
          if ((unint64_t)LimitedValue + 1 > v247)
            v249 = (_DWORD)LimitedValue + 1;
          else
            v249 = v247;
          *((_DWORD *)v246 + 3) = v249;
          goto LABEL_660;
        case 187:
          v159 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          v160 = (int8x8_t **)(v159 + 24);
          v161 = *(_DWORD *)(v159 + 32);
          if (v161 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v159 + 24)) == v161)
              goto LABEL_660;
          }
          else if (!*v160)
          {
            goto LABEL_660;
          }
          if (llvm::APInt::isPowerOf2(v160))
            goto LABEL_660;
          v252 = "masked_gather: alignment must be 0 or a power of 2";
          goto LABEL_659;
        case 188:
          if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) != 0x12)
          {
            v252 = "masked_load: must return a vector";
            goto LABEL_659;
          }
          v162 = (uint64_t *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v163 = v162[8];
          if ((*(_DWORD *)(*(_QWORD *)v163 + 8) & 0xFE) != 0x12)
          {
            v252 = "masked_load: mask must be vector";
            goto LABEL_659;
          }
          v164 = *v162;
          v165 = (_QWORD *)v162[12];
          if (!llvm::APInt::isPowerOf2((int8x8_t **)(v162[4] + 24)))
          {
            v252 = "masked_load: alignment must be a power of 2";
            goto LABEL_659;
          }
          v166 = *(_QWORD *)a3;
          v167 = *(_QWORD *)(*(_QWORD *)v164 + 24);
          if (v167)
            v168 = v167 == v166;
          else
            v168 = 1;
          if (!v168)
          {
            v252 = "masked_load: return must match pointer type";
            goto LABEL_659;
          }
          if (*v165 != v166)
          {
            v252 = "masked_load: pass through and return type must match";
            goto LABEL_659;
          }
          v291 = *(_DWORD *)(v166 + 32);
          v292 = *(unsigned __int8 *)(v166 + 8) == 19;
          if (*(_DWORD *)(*(_QWORD *)v163 + 32) == v291
            && (((*(_BYTE *)(*(_QWORD *)v163 + 8) != 19) ^ v292) & 1) != 0)
          {
            goto LABEL_660;
          }
          v252 = "masked_load: vector mask must be same length as return";
          goto LABEL_659;
        case 189:
          v169 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[8];
          v170 = (int8x8_t **)(v169 + 24);
          v171 = *(_DWORD *)(v169 + 32);
          if (v171 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v169 + 24)) == v171)
              goto LABEL_660;
          }
          else if (!*v170)
          {
            goto LABEL_660;
          }
          if (llvm::APInt::isPowerOf2(v170))
            goto LABEL_660;
          v252 = "masked_scatter: alignment must be 0 or a power of 2";
          goto LABEL_659;
        case 190:
          v172 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v173 = *((_QWORD *)v172 + 12);
          if ((*(_DWORD *)(*(_QWORD *)v173 + 8) & 0xFE) != 0x12)
          {
            v252 = "masked_store: mask must be vector";
            goto LABEL_659;
          }
          v174 = *(uint64_t **)v172;
          v175 = *((_QWORD *)v172 + 4);
          if (!llvm::APInt::isPowerOf2((int8x8_t **)(*((_QWORD *)v172 + 8) + 24)))
          {
            v252 = "masked_store: alignment must be a power of 2";
            goto LABEL_659;
          }
          v176 = *v174;
          v177 = *(_QWORD *)(*(_QWORD *)v175 + 24);
          if (v177)
            v178 = v177 == v176;
          else
            v178 = 1;
          if (!v178)
          {
            v252 = "masked_store: storee must match pointer type";
            goto LABEL_659;
          }
          v179 = *(_DWORD *)(v176 + 32);
          v180 = *(unsigned __int8 *)(v176 + 8) == 19;
          if (*(_DWORD *)(*(_QWORD *)v173 + 32) != v179
            || (((*(_BYTE *)(*(_QWORD *)v173 + 8) != 19) ^ v180) & 1) == 0)
          {
            v252 = "masked_store: vector mask must be same length as value";
            goto LABEL_659;
          }
          goto LABEL_660;
        case 191:
        case 192:
        case 193:
        case 194:
          v60 = *((_QWORD *)a3 - 4);
          if (!v60 || *(_BYTE *)(v60 + 16) || *(_QWORD *)(v60 + 24) != *((_QWORD *)a3 + 9))
            v60 = 0;
          __p = (void *)v60;
          __asm { BR              X10 }
          return;
        case 198:
        case 201:
        case 203:
          v66 = (int8x8_t **)(((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[12] + 24);
          if (!llvm::APInt::isPowerOf2(v66))
          {
            v252 = "element size of the element-wise atomic memory intrinsic must be a power of 2";
            goto LABEL_659;
          }
          ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a3 + 64), 0);
          {
            v252 = "incorrect alignment of the destination argument";
            goto LABEL_659;
          }
          v68 = *(_DWORD *)(*((_QWORD *)a3 - 4) + 36);
          if (v68 == 201 || v68 == 198)
          {
            v69 = llvm::AttributeList::getParamAlignment((llvm::CallBase *)((char *)a3 + 64), 1);
            {
              v252 = "incorrect alignment of the source argument";
              goto LABEL_659;
            }
          }
          goto LABEL_69;
        case 244:
          v181 = (_QWORD *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          v182 = v181[4];
          v183 = (_QWORD *)(v182 + 24);
          if (*(_DWORD *)(v182 + 32) >= 0x41u)
            v183 = (_QWORD *)*v183;
          if (*v183 >= 2uLL)
          {
            v252 = "rw argument to llvm.prefetch must be 0-1";
            goto LABEL_659;
          }
          v184 = v181[8];
          v185 = (_QWORD *)(v184 + 24);
          if (*(_DWORD *)(v184 + 32) >= 0x41u)
            v185 = (_QWORD *)*v185;
          if (*v185 >= 4uLL)
          {
            v252 = "locality argument to llvm.prefetch must be 0-4";
            goto LABEL_659;
          }
          v186 = v181[12];
          v187 = (_QWORD *)(v186 + 24);
          if (*(_DWORD *)(v186 + 32) >= 0x41u)
            v187 = (_QWORD *)*v187;
          if (*v187 >= 2uLL)
          {
            v252 = "cache type argument to llvm.prefetch must be 0-1";
            goto LABEL_659;
          }
          goto LABEL_660;
        case 245:
        case 246:
        case 477:
        case 480:
          goto LABEL_116;
        case 267:
        case 268:
        case 279:
        case 280:
        case 306:
        case 307:
        case 310:
        case 311:
          v56 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v57 = **(_QWORD **)v56;
          v58 = *(_DWORD *)(v57 + 8) & 0xFE;
          if (v58 == 18)
            v59 = *(unsigned __int8 *)(**(_QWORD **)(v57 + 16) + 8);
          else
            v59 = *(_DWORD *)(v57 + 8);
          if (v59 != 13)
          {
            v28 = "first operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
            goto LABEL_67;
          }
          v61 = **((_QWORD **)v56 + 4);
          if ((*(_DWORD *)(v61 + 8) & 0xFE) == 0x12)
            v62 = *(unsigned __int8 *)(**(_QWORD **)(v61 + 16) + 8);
          else
            v62 = *(_DWORD *)(v61 + 8);
          if (v62 != 13)
          {
            v28 = "second operand of [us][mul|div]_fix[_sat] must be an int type or vector of ints";
            goto LABEL_67;
          }
          v75 = (unint64_t *)*((_QWORD *)v56 + 8);
          if (*(_DWORD *)(*v75 + 8) >> 8 >= 0x21u)
          {
            v28 = "third argument of [us][mul|div]_fix[_sat] must fit within 32 bits";
            goto LABEL_67;
          }
          if ((a2 - 267) <= 0xD && ((1 << (a2 - 11)) & 0x3003) != 0)
          {
            v76 = v75 + 3;
            if (*((_DWORD *)v75 + 8) >= 0x41u)
              v76 = (unint64_t *)*v76;
            if (v58 == 18)
              v57 = **(_QWORD **)(v57 + 16);
            v77 = *v76;
            if (v77 >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v57))
            {
              v28 = "the scale of s[mul|div]_fix[_sat] must be less than the width of the operands";
              goto LABEL_67;
            }
          }
          else
          {
            v250 = v75 + 3;
            if (*((_DWORD *)v75 + 8) >= 0x41u)
              v250 = (unint64_t *)*v250;
            if (v58 == 18)
              v57 = **(_QWORD **)(v57 + 16);
            v251 = *v250;
            if (v251 > llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v57))
            {
              v28 = "the scale of u[mul|div]_fix[_sat] must be less than or equal to the width of the operands";
              goto LABEL_67;
            }
          }
          goto LABEL_69;
        case 289:
          if (*((_BYTE *)llvm::Value::stripPointerCasts(((llvm::Value **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4])
               + 16) == 59)
            goto LABEL_660;
          v252 = "llvm.stackprotector parameter #2 must resolve to an alloca.";
          goto LABEL_659;
        case 320:
          v188 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v189 = *(uint64_t **)v188;
          v190 = *((_QWORD *)v188 + 4);
          v191 = (_QWORD *)(v190 + 24);
          if (*(_DWORD *)(v190 + 32) >= 0x41u)
            v191 = (_QWORD *)*v191;
          v192 = *(_QWORD *)a3;
          v193 = *v189;
          if (*(_QWORD *)(*(_QWORD *)a3 + 24) != *(_QWORD *)(v193 + 24))
          {
            v54 = "vector_extract result must have the same element type as the input vector.";
            goto LABEL_106;
          }
          v234 = *(_DWORD *)v191;
          v235 = *(_DWORD *)(v192 + 32);
          if (v234 % v235)
          {
            v28 = "vector_extract index must be a constant multiple of the result type's known minimum vector length.";
            goto LABEL_67;
          }
          if ((*(_BYTE *)(v193 + 8) == 19) != (*(_BYTE *)(v192 + 8) == 19))
            goto LABEL_660;
          v261 = *(_DWORD *)(v193 + 32);
          v262 = v235 + v234;
          if (v261 > v234 && v262 <= v261)
            goto LABEL_660;
          v28 = "vector_extract would overrun.";
          goto LABEL_67;
        case 321:
          v194 = (char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
          v195 = *(uint64_t **)v194;
          v196 = (uint64_t *)*((_QWORD *)v194 + 4);
          v197 = *((_QWORD *)v194 + 8);
          v198 = (_QWORD *)(v197 + 24);
          if (*(_DWORD *)(v197 + 32) >= 0x41u)
            v198 = (_QWORD *)*v198;
          v199 = *v195;
          v200 = *v196;
          if (*(_QWORD *)(v199 + 24) != *(_QWORD *)(*v196 + 24))
          {
            v54 = "vector_insert parameters must have the same element type.";
            goto LABEL_106;
          }
          v236 = *(_DWORD *)v198;
          v237 = *(_DWORD *)(v200 + 32);
          if (v236 % v237)
          {
            v28 = "vector_insert index must be a constant multiple of the subvector's known minimum vector length.";
            goto LABEL_67;
          }
          if ((*(_BYTE *)(v199 + 8) == 19) != (*(_BYTE *)(v200 + 8) == 19))
            goto LABEL_660;
          v264 = *(_DWORD *)(v199 + 32);
          v265 = v237 + v236;
          if (v264 > v236 && v265 <= v264)
            goto LABEL_660;
          v28 = "subvector operand of vector_insert would overrun the vector being inserted into.";
          goto LABEL_67;
        case 322:
        case 323:
        case 328:
        case 329:
        case 330:
        case 331:
        case 332:
        case 333:
        case 334:
          v55 = **((_QWORD **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if ((*(_DWORD *)(v55 + 8) & 0xFE) != 0x12 || *(_BYTE *)(**(_QWORD **)(v55 + 16) + 8) != 13)
            goto LABEL_168;
          goto LABEL_69;
        case 324:
        case 327:
          v70 = (uint64_t *)((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
          goto LABEL_160;
        case 325:
        case 326:
          v70 = (uint64_t *)*((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
LABEL_160:
          v71 = *v70;
          v72 = *(_DWORD *)(*v70 + 8);
          v73 = v72 & 0xFE;
          if (v73 == 18)
            v72 = *(_DWORD *)(**(_QWORD **)(v71 + 16) + 8);
          if (v72 < 4u || v72 == 5)
          {
            if (v73 == 18)
              goto LABEL_69;
            goto LABEL_168;
          }
          v210 = v72 & 0xFD;
          if (v73 != 18 || v210 != 4)
          {
LABEL_168:
            v28 = "Intrinsic has incorrect argument type!";
            goto LABEL_67;
          }
          break;
        default:
          goto LABEL_69;
      }
      goto LABEL_69;
    }
    if (a2 <= 2598)
    {
      if (a2 == 664)
      {
        v201 = (_QWORD *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
        v202 = v201[4];
        v203 = (_QWORD *)(v202 + 24);
        if (*(_DWORD *)(v202 + 32) >= 0x41u)
          v203 = (_QWORD *)*v203;
        if (*v203 >= 2uLL)
        {
          v252 = "write argument to llvm.aarch64.prefetch must be 0 or 1";
        }
        else
        {
          v204 = v201[8];
          v205 = (_QWORD *)(v204 + 24);
          if (*(_DWORD *)(v204 + 32) >= 0x41u)
            v205 = (_QWORD *)*v205;
          if (*v205 >= 4uLL)
          {
            v252 = "target argument to llvm.aarch64.prefetch must be 0-3";
          }
          else
          {
            v206 = v201[12];
            v207 = (_QWORD *)(v206 + 24);
            if (*(_DWORD *)(v206 + 32) >= 0x41u)
              v207 = (_QWORD *)*v207;
            if (*v207 >= 2uLL)
            {
              v252 = "stream argument to llvm.aarch64.prefetch must be 0 or 1";
            }
            else
            {
              v208 = v201[16];
              v209 = (_QWORD *)(v208 + 24);
              if (*(_DWORD *)(v208 + 32) >= 0x41u)
                v209 = (_QWORD *)*v209;
              if (*v209 < 2uLL)
                goto LABEL_660;
              v252 = "isdata argument to llvm.aarch64.prefetch must be 0 or 1";
            }
          }
        }
        goto LABEL_659;
      }
      if (a2 != 953 && a2 != 955)
        goto LABEL_69;
    }
    else
    {
      if (a2 <= 3004)
      {
        if (a2 == 2599 || a2 == 2605)
        {
LABEL_116:
          if (!llvm::AttributeList::getParamElementType((llvm::CallBase *)((char *)a3 + 64), 0))
          {
            v54 = "Intrinsic requires elementtype attribute on first argument.";
LABEL_106:
            p_p = v54;
            v323 = 259;
            __p = a3;
            llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, (const llvm::Value **)&__p);
            goto LABEL_660;
          }
        }
        goto LABEL_69;
      }
      if (a2 != 3005 && a2 != 3007)
        goto LABEL_69;
    }
    p_p = (void *)*((_QWORD *)a3 + 8);
    if (!llvm::AttributeList::getParamElementType((llvm::AttributeList *)&p_p, 1))
    {
      v54 = "Intrinsic requires elementtype attribute on second argument.";
      goto LABEL_106;
    }
LABEL_69:
    if ((a2 - 219) >= 0x15 && (a2 - 212) > 4)
      goto LABEL_660;
    v29 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 56);
    if ((*(_WORD *)(v29 + 18) & 8) == 0)
      goto LABEL_660;
    v30 = *(_DWORD *)(v29 + 20);
    v31 = (v30 & 0x40000000) != 0 ? *(uint64_t **)(v29 - 8) : (uint64_t *)(v29 - 32 * (v30 & 0x7FFFFFF));
    v32 = llvm::classifyEHPersonality(*v31, v19);
    if ((v32 - 7) >= 4 && v32 != 12)
      goto LABEL_660;
    if (!*((_DWORD *)this + 228))
    {
      llvm::colorEHFunclets((llvm *)v29, (uint64_t)&p_p);
      llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::operator=((uint64_t *)this + 113, (uint64_t)&p_p);
      llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::~DenseMap((uint64_t *)&p_p);
    }
    v34 = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find(*((_QWORD *)this + 113), *((_DWORD *)this + 230), *((_QWORD *)a3 + 5));
    v37 = v34[1];
    v35 = v34 + 1;
    v36 = v37;
    if ((v37 & 4) != 0)
    {
      v39 = v36 & 0xFFFFFFFFFFFFFFF8;
      v35 = *(uint64_t **)v39;
      v38 = *(_QWORD *)v39 + 8 * *(unsigned int *)(v39 + 8);
    }
    else
    {
      v38 = (uint64_t)&v35[v36 > 7];
    }
    if (v35 == (uint64_t *)v38)
    {
      v44 = 1;
    }
    else
    {
      v40 = 0;
      do
      {
        for (i = *(_QWORD *)(*v35 + 48); ; i = *(_QWORD *)(i + 8))
        {
          if (i == *v35 + 40)
          {
            v43 = 0;
            goto LABEL_96;
          }
          v42 = i - 24;
          if (!i)
            v42 = 0;
          if (*(_BYTE *)(v42 + 16) != 83)
            break;
        }
        v43 = *(unsigned __int8 *)(i - 8) - 79 < 2;
LABEL_96:
        v40 |= v43;
        ++v35;
      }
      while (v35 != (uint64_t *)v38);
      v44 = v40 ^ 1;
    }
    v45 = *((_DWORD *)a3 + 5);
    if (v45 < 0
      && (v47 = (char *)a3 - 32 * (v45 & 0x7FFFFFF),
          v50 = *((_QWORD *)v47 - 1),
          v48 = v47 - 8,
          v49 = v50,
          (v50 & 0xFFFFFFFF0) != 0))
    {
      v46 = 0;
      v51 = (v49 >> 4);
      v52 = &v48[-v49];
      do
      {
        v53 = *(_QWORD *)v52;
        v52 += 16;
        v46 |= *(_DWORD *)(v53 + 8) == 1;
        --v51;
      }
      while (v51);
    }
    else
    {
      v46 = 0;
    }
    if (((v44 | v46) & 1) != 0)
      goto LABEL_660;
    v54 = "Missing funclet token on intrinsic call";
    goto LABEL_106;
  }
  v10 = "Intrinsic has incorrect return type!";
LABEL_23:
  p_p = v10;
  v323 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>((llvm::raw_ostream **)this, (const llvm::Twine *)&p_p, &v319);
LABEL_24:
  if (v324 != v326)
    free(v324);
  if (v327 != v329)
    free(v327);
}

uint64_t llvm::dyn_cast<llvm::IntrinsicInst,llvm::Use>(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(result - 32);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(result + 72))
    return 0;
  if ((*(_DWORD *)(v1 + 32) & 0x2000) == 0)
    return 0;
  return result;
}

void `anonymous namespace'::Verifier::verifyAttachedCallBundle(llvm::raw_ostream **a1, const llvm::Value *a2, uint64_t **a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t *ValueName;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  const char *v19;
  __int16 v20;

  v6 = *((_QWORD *)a2 + 9);
  v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  if (v7 != 15)
  {
    v8 = *((_QWORD *)a2 + 8);
    if (!v8 || (*(char *)(v8 + 15) & 0x80000000) == 0)
    {
      if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 31))
        goto LABEL_10;
      v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    }
    if (v7 == 7)
      goto LABEL_7;
LABEL_10:
    v10 = "a call with operand bundle \"clang.arc.attachedcall\" must call a function returning a pointer or a non-return"
          "ing function that has a void return type";
    goto LABEL_11;
  }
LABEL_7:
  if (a3[1] != (uint64_t *)1 || (v9 = **a3, *(_BYTE *)(v9 + 16)))
  {
    v10 = "operand bundle \"clang.arc.attachedcall\" requires one function as an argument";
LABEL_11:
    v19 = v10;
    v20 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(a1, (const llvm::Twine *)&v19, a2);
    return;
  }
  v11 = *(_DWORD *)(v9 + 36);
  if ((v11 - 216) > 0x17 || ((1 << (v11 + 40)) & 0x804001) == 0)
  {
    if (v11 || (*(_BYTE *)(v9 + 23) & 0x10) == 0)
      goto LABEL_27;
    ValueName = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v9);
    v16 = *ValueName;
    v14 = ValueName + 2;
    v15 = v16;
    if (v16 == 33)
    {
      v17 = "objc_claimAutoreleasedReturnValue";
      v18 = 33;
    }
    else if (v15 == 39)
    {
      v17 = "objc_unsafeClaimAutoreleasedReturnValue";
      v18 = 39;
    }
    else
    {
      if (v15 != 34)
        goto LABEL_27;
      v17 = "objc_retainAutoreleasedReturnValue";
      v18 = 34;
    }
    if (!memcmp(v14, v17, v18))
      return;
LABEL_27:
    v10 = "invalid function argument";
    goto LABEL_11;
  }
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::CallBase>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value *a3)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
    llvm::VerifierSupport::Write(a1, a3);
}

void `anonymous namespace'::Verifier::verifyInlineAsmCall(llvm::raw_ostream **this, const llvm::CallBase *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::Value *v12;
  const llvm::Value *v13;
  unsigned int v14;
  int v15;
  int v16;
  const char *v17;
  const char *v18;
  const llvm::Value *v19;
  void **v20[4];
  __int16 v21;
  const llvm::Value *v22;
  const llvm::Value *v23;

  v4 = *((_QWORD *)a2 - 4);
  v7 = *(char **)(v4 + 48);
  v5 = v4 + 48;
  v6 = v7;
  v8 = *(char *)(v5 + 23);
  if (v8 >= 0)
    v9 = (char *)v5;
  else
    v9 = v6;
  v10 = *(_QWORD *)(v5 + 8);
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = v10;
  llvm::InlineAsm::ParseConstraints(v9, v11, (uint64_t *)&v22);
  v12 = v22;
  v13 = v23;
  if (v22 != v23)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_DWORD *)v12;
      if (!*(_DWORD *)v12)
        break;
      if (v16 != 1)
      {
        if (v16 == 3)
          ++v15;
        goto LABEL_21;
      }
      if (*((_BYTE *)v12 + 13))
        goto LABEL_18;
LABEL_21:
      v12 = (const llvm::Value *)((char *)v12 + 80);
      if (v12 == v13)
        goto LABEL_24;
    }
    if (*((_BYTE *)v12 + 13))
    {
LABEL_18:
      if (*(_BYTE *)(**((_QWORD **)a2 + 4 * v14 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)) + 8) != 15)
      {
        v18 = "Operand for indirect constraint must have pointer type";
        goto LABEL_32;
      }
      if (!llvm::AttributeList::getParamElementType((const llvm::CallBase *)((char *)a2 + 64), v14))
      {
        v18 = "Operand for indirect constraint must have elementtype attribute";
LABEL_32:
        v19 = a2;
        v20[0] = (void **)v18;
        v21 = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v20, &v19);
        v20[0] = (void **)&v22;
        std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v20);
        return;
      }
    }
    else if (llvm::CallBase::paramHasAttr(a2, v14, 71))
    {
      v18 = "Elementtype attribute can only be applied for indirect constraints";
      goto LABEL_32;
    }
    ++v14;
    goto LABEL_21;
  }
  v15 = 0;
LABEL_24:
  v20[0] = (void **)&v22;
  std::vector<llvm::InlineAsm::ConstraintInfo>::__destroy_vector::operator()[abi:nn180100](v20);
  if (*((_BYTE *)a2 + 16) == 39)
  {
    if (v15 == *((_DWORD *)a2 + 20))
      return;
    v17 = "Number of label constraints does not match number of callbr dests";
  }
  else
  {
    if (!v15)
      return;
    v17 = "Label constraints can only be used with callbr";
  }
  v20[0] = (void **)v17;
  v21 = 259;
  v22 = a2;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v20, &v22);
}

BOOL llvm::GlobalVariable::hasDefinitiveInitializer(llvm::GlobalVariable *this)
{
  if (this && *((_BYTE *)this + 16) == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (!*((_BYTE *)this + 16)
         && *((llvm::GlobalVariable **)this + 9) == (llvm::GlobalVariable *)((char *)this + 72)
         && (*((_BYTE *)this + 35) & 1) == 0)
  {
    return 0;
  }
  if ((llvm::GlobalValue::isInterposable(this) & 1) != 0)
    return 0;
  return (*((_BYTE *)this + 80) & 2) == 0;
}

void `anonymous namespace'::Verifier::visitVPIntrinsic(llvm::raw_ostream **a1, llvm::VPCmpIntrinsic *this)
{
  int v4;
  llvm::Type *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  unsigned int PrimitiveSizeInBits;
  const llvm::Value *v17;
  _QWORD v18[4];
  __int16 v19;

  v4 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  if ((v4 - 348) > 0x3F)
    goto LABEL_28;
  if (((1 << (v4 - 92)) & 0x8502800004020780) == 0)
  {
    if (v4 == 348)
    {
      if (llvm::VPCmpIntrinsic::getPredicate(this) > 0xF)
      {
        v13 = "invalid predicate for VP FP comparison intrinsic";
        goto LABEL_44;
      }
      v4 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
    }
LABEL_28:
    if (v4 != 364 || llvm::VPCmpIntrinsic::getPredicate(this) - 32 < 0xA)
      return;
    v13 = "invalid predicate for VP integer comparison intrinsic";
LABEL_44:
    v17 = this;
    v18[0] = v13;
    v19 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)v18, &v17);
    return;
  }
  v5 = *(llvm::Type **)this;
  v6 = **((_QWORD **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  v7 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  v8 = *(unsigned __int8 *)(v6 + 8);
  if (*(_DWORD *)(*(_QWORD *)this + 32) != *(_DWORD *)(v6 + 32) || (v7 != 19) == (v8 == 19))
  {
    v12 = "VP cast intrinsic first argument and result vector lengths must be equal";
    goto LABEL_22;
  }
  if (v4 <= 373)
    __asm { BR              X12 }
  if (v4 <= 403)
  {
    if (v4 == 374)
    {
      if ((v7 & 0xFE) == 0x12)
        v7 = *(unsigned __int8 *)(**((_QWORD **)v5 + 2) + 8);
      if (v7 != 13)
        goto LABEL_51;
      if ((v8 & 0xFE) == 0x12)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
      if (v8 != 15)
      {
LABEL_51:
        v12 = "llvm.vp.ptrtoint intrinsic first argument element type must be pointer and result element type must be integer";
        goto LABEL_22;
      }
      return;
    }
    if (v4 == 395)
      goto LABEL_9;
LABEL_33:
    if ((v7 & 0xFE) == 0x12)
      v7 = *(_DWORD *)(**((_QWORD **)v5 + 2) + 8);
    if (v7 >= 4u && v7 != 5 && (v7 & 0xFD) != 4)
      goto LABEL_41;
    if ((v8 & 0xFE) == 0x12)
      v8 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    if (v8 != 13)
    {
LABEL_41:
      v12 = "llvm.vp.uitofp or llvm.vp.sitofp intrinsic first argument element type must be integer and result element ty"
            "pe must be floating-point";
      goto LABEL_22;
    }
    return;
  }
  if (v4 == 404)
  {
    v14 = v7 & 0xFE;
    if (v14 == 18)
      v7 = *(unsigned __int8 *)(**((_QWORD **)v5 + 2) + 8);
    if (v7 != 13)
      goto LABEL_64;
    v15 = v8 & 0xFE;
    if (v15 == 18)
      v8 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
    if (v8 != 13)
    {
LABEL_64:
      v12 = "llvm.vp.trunc intrinsic first argument and result element type must be integer";
      goto LABEL_22;
    }
    if (v14 == 18)
      v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
    if (v15 == 18)
      v6 = **(_QWORD **)(v6 + 16);
    if (PrimitiveSizeInBits >= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6))
    {
      v12 = "llvm.vp.trunc intrinsic the bit size of first argument must be larger than the bit size of the return type";
      goto LABEL_22;
    }
    return;
  }
  if (v4 == 406)
    goto LABEL_33;
LABEL_9:
  v9 = v7 & 0xFE;
  if (v9 == 18)
    v7 = *(unsigned __int8 *)(**((_QWORD **)v5 + 2) + 8);
  if (v7 != 13)
    goto LABEL_42;
  v10 = v8 & 0xFE;
  if (v10 == 18)
    v8 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  if (v8 != 13)
  {
LABEL_42:
    v12 = "llvm.vp.zext or llvm.vp.sext intrinsic first argument and result element type must be integer";
    goto LABEL_22;
  }
  if (v9 == 18)
    v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
  v11 = llvm::Type::getPrimitiveSizeInBits(v5);
  if (v10 == 18)
    v6 = **(_QWORD **)(v6 + 16);
  if (v11 <= llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6))
  {
    v12 = "llvm.vp.zext or llvm.vp.sext intrinsic the bit size of first argument must be smaller than the bit size of the return type";
LABEL_22:
    v18[0] = v12;
    v19 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(a1, (const llvm::Twine *)v18, this);
  }
}

void `anonymous namespace'::Verifier::visitConstrainedFPIntrinsic(_anonymous_namespace_::Verifier *this, llvm::ConstrainedFPIntrinsic *a2)
{
  __asm { BR              X12 }
}

void sub_24AA1BFF4(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  llvm::raw_ostream **v18;
  llvm::CallBase *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  int v25;
  const char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int PrimitiveSizeInBits;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v51;
  uint64_t v52;
  int v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v56;
  const llvm::Value *v57;
  const char *v58;
  __int16 v59;

  if ((a1 - 85) >= 2)
    v21 = 1;
  else
    v21 = 2;
  v22 = v21 + v17;
  v23 = llvm::CallBase::arg_end(v19);
  v24 = (uint64_t **)((char *)v19 - 32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
  if (v22 != ((unint64_t)(v23 - (_QWORD)v24) >> 5))
  {
    v26 = "invalid arguments for constrained FP intrinsic";
LABEL_10:
    v57 = v19;
    v58 = v26;
    v59 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(v18, (const llvm::Twine *)&v58, &v57);
    return;
  }
  v25 = *(_DWORD *)(*((_QWORD *)v19 - 4) + 36);
  switch(v25)
  {
    case 'U':
    case 'V':
      if (getFPPredicateFromMD((uint64_t)v24[8]) < 0x10)
        goto LABEL_20;
      v26 = "invalid predicate for constrained FP comparison intrinsic";
      goto LABEL_10;
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case 'a':
    case 'd':
    case 'e':
    case 'f':
      goto LABEL_20;
    case '\\':
    case '_':
      v33 = **v24;
      v34 = *(_DWORD *)(v33 + 8) & 0xFE;
      LOBYTE(v35) = *(_DWORD *)(v33 + 8);
      if (v34 == 18)
        v35 = *(_DWORD *)(**(_QWORD **)(v33 + 16) + 8);
      v36 = v35 < 4u || v35 == 5;
      v37 = v35 & 0xFD;
      if (!v36 && v37 != 4)
      {
        v26 = "Intrinsic first argument must be FP or FP vector";
        goto LABEL_10;
      }
      v39 = *(_QWORD *)v19;
      v40 = *(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE;
      LOBYTE(v41) = *(_DWORD *)(*(_QWORD *)v19 + 8);
      if (v40 == 18)
        v41 = *(_DWORD *)(**(_QWORD **)(v39 + 16) + 8);
      if (v41 >= 4u && v41 != 5 && (v41 & 0xFD) != 4)
      {
        v26 = "Intrinsic result must be FP or FP vector";
        goto LABEL_10;
      }
      if ((v34 == 18) != (v40 == 18))
        goto LABEL_76;
      if (v34 != 18)
        goto LABEL_46;
      if ((*(_DWORD *)(v33 + 8) != 19) == (*(_DWORD *)(*(_QWORD *)v19 + 8) == 19)
        || *(_DWORD *)(v33 + 32) != *(_DWORD *)(v39 + 32))
      {
        goto LABEL_90;
      }
      v33 = **(_QWORD **)(v33 + 16);
LABEL_46:
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v33);
      if (v40 == 18)
        v39 = **(_QWORD **)(v39 + 16);
      v44 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v39);
      if (v25 == 95)
      {
        if (PrimitiveSizeInBits > v44)
          goto LABEL_20;
        v26 = "Intrinsic first argument's type must be larger than result type";
      }
      else
      {
        if (PrimitiveSizeInBits < v44)
          goto LABEL_20;
        v26 = "Intrinsic first argument's type must be smaller than result type";
      }
      goto LABEL_10;
    case ']':
    case '^':
      v45 = **v24;
      v46 = *(_DWORD *)(v45 + 8);
      LOBYTE(v47) = *(_DWORD *)(v45 + 8);
      if ((*(_DWORD *)(v45 + 8) & 0xFE) == 0x12)
        v47 = *(_DWORD *)(**(_QWORD **)(v45 + 16) + 8);
      v48 = v47 < 4u || v47 == 5;
      v49 = v47 & 0xFD;
      if (!v48 && v49 != 4)
      {
        v26 = "Intrinsic first argument must be floating point";
        goto LABEL_10;
      }
      if ((*(_DWORD *)(v45 + 8) & 0xFE) == 0x12)
      {
        v51 = *(_DWORD *)(v45 + 32);
        v52 = *(_QWORD *)v19;
        v53 = *(_DWORD *)(*(_QWORD *)v19 + 8);
        if ((v51 != 0) != ((v53 & 0xFE) == 18))
          goto LABEL_76;
        v54 = v46 == 19;
        if ((v53 & 0xFE) == 0x12)
        {
          v53 = *(unsigned __int8 *)(**(_QWORD **)(v52 + 16) + 8);
          goto LABEL_69;
        }
      }
      else
      {
        v53 = *(_DWORD *)(*(_QWORD *)v19 + 8);
        if ((v53 & 0xFE) == 0x12)
          goto LABEL_76;
        v54 = 0;
        v51 = 0;
      }
      v52 = 0;
      v53 = v53;
LABEL_69:
      if (v53 != 13)
      {
        v26 = "Intrinsic result must be an integer";
        goto LABEL_10;
      }
      if (v52)
      {
        v55 = *(_DWORD *)(v52 + 32);
        v56 = *(unsigned __int8 *)(v52 + 8) != 19;
        if (v51 != v55 || ((v54 ^ v56) & 1) == 0)
          goto LABEL_90;
      }
      goto LABEL_20;
    case 'b':
    case 'c':
    case 'g':
    case 'h':
      if ((*(_DWORD *)(**v24 + 8) & 0xFE) != 0x12 && (*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) != 0x12)
        goto LABEL_20;
      v26 = "Intrinsic does not support vectors";
      goto LABEL_10;
    default:
      if (v25 != 116 && v25 != 119)
        goto LABEL_20;
      v27 = **v24;
      v28 = *(_DWORD *)(v27 + 8);
      if ((*(_DWORD *)(v27 + 8) & 0xFE) != 0x12)
      {
        if (v28 == 13)
        {
          v31 = *(_DWORD *)(*(_QWORD *)v19 + 8);
          if ((v31 & 0xFE) != 0x12)
          {
            v32 = 0;
            v29 = 0;
            goto LABEL_85;
          }
LABEL_76:
          v26 = "Intrinsic first argument and result disagree on vector use";
          goto LABEL_10;
        }
        goto LABEL_77;
      }
      if (*(_BYTE *)(**(_QWORD **)(v27 + 16) + 8) != 13)
      {
LABEL_77:
        v26 = "Intrinsic first argument must be integer";
        goto LABEL_10;
      }
      v29 = *(_DWORD *)(v27 + 32);
      v30 = *(_QWORD *)v19;
      v31 = *(_DWORD *)(*(_QWORD *)v19 + 8);
      if ((v29 != 0) != ((v31 & 0xFE) == 18))
        goto LABEL_76;
      v32 = v28 == 19;
      if ((v31 & 0xFE) != 0x12)
      {
LABEL_85:
        v30 = 0;
        goto LABEL_86;
      }
      v31 = *(_DWORD *)(**(_QWORD **)(v30 + 16) + 8);
LABEL_86:
      if (v31 >= 4u && v31 != 5 && (v31 & 0xFD) != 4)
      {
        v26 = "Intrinsic result must be a floating point";
        goto LABEL_10;
      }
      if (v30 && (v29 != *(_DWORD *)(v30 + 32) || ((v32 ^ (*(_BYTE *)(v30 + 8) != 19)) & 1) == 0))
      {
LABEL_90:
        v26 = "Intrinsic first argument and result vector lengths must be equal";
        goto LABEL_10;
      }
LABEL_20:
      if ((unsigned __int16)llvm::ConstrainedFPIntrinsic::getExceptionBehavior(v19) <= 0xFFu)
      {
        v26 = "invalid exception behavior argument";
        goto LABEL_10;
      }
      if (v20 && (unsigned __int16)llvm::ConstrainedFPIntrinsic::getRoundingMode(v19) <= 0xFFu)
      {
        v26 = "invalid rounding mode argument";
        goto LABEL_10;
      }
      return;
  }
}

void `anonymous namespace'::Verifier::visitDbgIntrinsic(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _BYTE *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  const llvm::Value *v16;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  const llvm::Value *v24;
  const llvm::Value **AssignmentInsts;
  const llvm::Value **v26;
  uint64_t v27;
  unsigned __int8 *v28;
  const llvm::Value *v29;
  const llvm::Value *v30;
  const char *v31;
  uint64_t v32;
  unsigned __int8 **v33;
  __int16 v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int8 *Subprogram;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  BOOL v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  const llvm::Value *v55;
  const llvm::Value *v56[4];
  __int16 v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  const llvm::Value *v60;
  const llvm::Value *v61;
  unsigned __int8 *v62[2];
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  _QWORD v66[2];
  const char *v67;
  __int16 v68;
  _BYTE *v69;

  v8 = *(_DWORD *)(a4 + 20);
  v9 = *(_BYTE **)(*(_QWORD *)(a4 - 32 * (v8 & 0x7FFFFFF)) + 24);
  v69 = v9;
  v10 = *v9;
  v11 = v10 > 0x21;
  v12 = (1 << v10) & 0x200000006;
  if (!v11 && v12 != 0)
  {
    v14 = -(uint64_t)(v8 & 0x7FFFFFF);
    goto LABEL_6;
  }
  if (!llvm::MDNode::classof(v9))
  {
LABEL_28:
    v65 = 1283;
    v62[0] = "invalid llvm.dbg.";
    v63 = a2;
    v64 = a3;
    v66[0] = v62;
    v67 = " intrinsic address/value";
    v68 = 770;
    v56[0] = (const llvm::Value *)a4;
    v33 = &v69;
LABEL_33:
    llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::MDNode *>(a1, (const llvm::Twine *)v66, v56, v33);
    return;
  }
  v32 = *((_QWORD *)v9 - 2);
  if ((v32 & 2) != 0)
  {
    if (*((_DWORD *)v9 - 6))
      goto LABEL_28;
  }
  else if (((v32 >> 6) & 0xF) != 0)
  {
    goto LABEL_28;
  }
  v8 = *(_DWORD *)(a4 + 20);
  v14 = -(uint64_t)(v8 & 0x7FFFFFF);
LABEL_6:
  v15 = a4 + 32 * v14;
  v16 = *(const llvm::Value **)(*(_QWORD *)(v15 + 32) + 24);
  if (*(_BYTE *)v16 != 25)
  {
    v65 = 1283;
    v62[0] = "invalid llvm.dbg.";
    v63 = a2;
    v64 = a3;
    v31 = " intrinsic variable";
LABEL_30:
    v66[0] = v62;
    v67 = v31;
    v34 = 770;
LABEL_31:
    v68 = v34;
    v56[0] = (const llvm::Value *)a4;
    v61 = v16;
LABEL_32:
    v33 = (unsigned __int8 **)&v61;
    goto LABEL_33;
  }
  v16 = *(const llvm::Value **)(*(_QWORD *)(v15 + 64) + 24);
  if (*(_BYTE *)v16 != 6)
  {
    v65 = 1283;
    v62[0] = "invalid llvm.dbg.";
    v63 = a2;
    v64 = a3;
    v31 = " intrinsic expression";
    goto LABEL_30;
  }
  v17 = *(_DWORD *)(*(_QWORD *)(a4 - 32) + 36);
  v18 = v17 == 56;
  if (v17 == 56)
    v19 = (unsigned __int8 *)a4;
  else
    v19 = 0;
  v62[0] = v19;
  if (!v18)
  {
LABEL_20:
    v28 = *(unsigned __int8 **)(a4 + 48);
    if (!v28 || *v28 == 5)
    {
      v29 = *(const llvm::Value **)(a4 + 40);
      v61 = v29;
      if (v29)
        v30 = (const llvm::Value *)*((_QWORD *)v29 + 7);
      else
        v30 = 0;
      v60 = v30;
      v35 = *(unsigned __int8 **)(*(_QWORD *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) + 32) + 24);
      v58 = v28;
      v59 = v35;
      if (v28)
      {
        v36 = v35 - 16;
        v37 = *((_QWORD *)v35 - 2);
        if ((v37 & 2) != 0)
          v38 = (unsigned __int8 **)*((_QWORD *)v35 - 4);
        else
          v38 = (unsigned __int8 **)&v36[-8 * ((v37 >> 2) & 0xF)];
        Subprogram = getSubprogram(*v38);
        v43 = v28 - 16;
        v42 = *((_QWORD *)v28 - 2);
        if ((v42 & 2) != 0)
          v44 = (unsigned __int8 **)*((_QWORD *)v28 - 4);
        else
          v44 = (unsigned __int8 **)&v43[-8 * ((v42 >> 2) & 0xF)];
        v45 = getSubprogram(*v44);
        if (Subprogram)
          v46 = v45 == 0;
        else
          v46 = 1;
        if (!v46)
        {
          if (Subprogram == v45)
          {
            if ((v37 & 2) != 0)
              v48 = (unsigned __int8 *)*((_QWORD *)v35 - 4);
            else
              v48 = &v36[-8 * ((v37 >> 2) & 0xF)];
            v50 = (unsigned __int8 *)*((_QWORD *)v48 + 3);
            if (!v50 || (v51 = *v50, (v51 - 11) < 4) || v51 == 34)
            {
            }
            else
            {
              v66[0] = "invalid type ref";
              v68 = 259;
              if ((v37 & 2) != 0)
                v52 = (unsigned __int8 **)*((_QWORD *)v35 - 4);
              else
                v52 = (unsigned __int8 **)&v36[-8 * ((v37 >> 2) & 0xF)];
              v62[0] = v52[3];
              llvm::VerifierSupport::DebugInfoCheckFailed<llvm::MDNode const*,llvm::Metadata const*>(a1, (const llvm::Twine *)v66, &v59, v62);
            }
          }
          else
          {
            v65 = 1283;
            v62[0] = "mismatched subprogram between llvm.dbg.";
            v63 = a2;
            v64 = a3;
            v56[0] = (const llvm::Value *)" variable and !dbg attachment";
            v57 = 259;
            llvm::operator+((uint64_t *)v62, (uint64_t *)v56, (uint64_t)v66);
            v55 = (const llvm::Value *)a4;
            if ((*(_QWORD *)v36 & 2) != 0)
              v47 = (unsigned __int8 *)*((_QWORD *)v35 - 4);
            else
              v47 = &v36[-8 * ((*(_QWORD *)v36 >> 2) & 0xFLL)];
            v54 = llvm::DILocalScope::getSubprogram(*(_BYTE **)v47);
            if ((*(_QWORD *)v43 & 2) != 0)
              v49 = (unsigned __int8 *)*((_QWORD *)v28 - 4);
            else
              v49 = &v43[-8 * ((*(_QWORD *)v43 >> 2) & 0xFLL)];
            v53 = llvm::DILocalScope::getSubprogram(*(_BYTE **)v49);
            llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(a1, (const llvm::Twine *)v66, &v55, &v61, &v60, &v59, &v54, &v58, &v53);
          }
        }
      }
      else
      {
        v65 = 1283;
        v62[0] = "llvm.dbg.";
        v63 = a2;
        v64 = a3;
        v66[0] = v62;
        v67 = " intrinsic requires a !dbg attachment";
        v68 = 770;
        llvm::VerifierSupport::DebugInfoCheckFailed(a1, (const llvm::Twine *)v66);
        if (*a1)
        {
          llvm::VerifierSupport::Write(a1, (const llvm::Value *)a4);
          llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *>((llvm::raw_ostream *)a1, v29, &v60);
        }
      }
    }
    return;
  }
  v20 = v8 & 0x7FFFFFF;
  v21 = a4 - 32 * v20;
  v16 = *(const llvm::Value **)(*(_QWORD *)(v21 + 96) + 24);
  if (*(_BYTE *)v16 != 29)
  {
    v66[0] = "invalid llvm.dbg.assign intrinsic DIAssignID";
    v34 = 259;
    goto LABEL_31;
  }
  v22 = *(unsigned __int8 **)(*(_QWORD *)(v21 + 128) + 24);
  if (*v22 - 1 >= 2)
  {
    if (!llvm::MDNode::classof(*(_BYTE **)(*(_QWORD *)(v21 + 128) + 24))
      || ((v39 = *((_QWORD *)v22 - 2), (v39 & 2) != 0)
        ? (v40 = *((_DWORD *)v22 - 6))
        : (v40 = (v39 >> 6) & 0xF),
          v40))
    {
      v66[0] = "invalid llvm.dbg.assign intrinsic address";
      v68 = 259;
      v56[0] = (const llvm::Value *)a4;
      v24 = *(const llvm::Value **)(*(_QWORD *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) + 128) + 24);
      goto LABEL_69;
    }
    v20 = *(_DWORD *)(a4 + 20) & 0x7FFFFFF;
  }
  v23 = a4 - 32 * v20;
  v24 = *(const llvm::Value **)(*(_QWORD *)(v23 + 160) + 24);
  if (*(_BYTE *)v24 != 6)
  {
    v66[0] = "invalid llvm.dbg.assign intrinsic address expression";
    v68 = 259;
    v56[0] = (const llvm::Value *)a4;
LABEL_69:
    v61 = v24;
    goto LABEL_32;
  }
  AssignmentInsts = (const llvm::Value **)llvm::at::getAssignmentInsts(*(_QWORD *)(*(_QWORD *)(v23 + 96) + 24));
  if (AssignmentInsts == v26)
    goto LABEL_20;
  v27 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 56);
  while (1)
  {
    v56[0] = *AssignmentInsts;
    if (v27 != *(_QWORD *)(*((_QWORD *)v56[0] + 5) + 56))
      break;
    if (++AssignmentInsts == v26)
      goto LABEL_20;
  }
  v66[0] = "inst not in same function as dbg.assign";
  v68 = 259;
  llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::DbgAssignIntrinsic *>(a1, (const llvm::Twine *)v66, v56, (const llvm::Value **)v62);
}

void `anonymous namespace'::Verifier::visitDbgLabelIntrinsic(llvm::raw_ostream **this, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  const llvm::Value *v6;
  const llvm::Value *v7;
  llvm::raw_ostream *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *Subprogram;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  BOOL v18;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  llvm::Value *v24;
  const llvm::Value *v25;
  _QWORD v26[2];
  const char *v27;
  uint64_t v28;
  __int16 v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;

  v4 = *(unsigned __int8 **)(*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) + 24);
  if (*v4 != 26)
  {
    v29 = 1283;
    v26[0] = "invalid llvm.dbg.";
    v27 = "label";
    v28 = 5;
    v30[0] = v26;
    v31 = " intrinsic variable";
    v32 = 770;
    llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v30);
    if (!*this)
      return;
    llvm::VerifierSupport::Write(this, (const llvm::Value *)a2);
    v8 = (llvm::raw_ostream *)this;
    v9 = v4;
    goto LABEL_8;
  }
  v5 = *(unsigned __int8 **)(a2 + 48);
  if (!v5 || *v5 == 5)
  {
    v6 = *(const llvm::Value **)(a2 + 40);
    if (v6)
      v7 = (const llvm::Value *)*((_QWORD *)v6 + 7);
    else
      v7 = 0;
    v25 = v7;
    if (v5)
    {
      v10 = v4 - 16;
      v11 = *((_QWORD *)v4 - 2);
      v24 = v7;
      if ((v11 & 2) != 0)
        v12 = (unsigned __int8 **)*((_QWORD *)v4 - 4);
      else
        v12 = (unsigned __int8 **)&v10[-8 * ((v11 >> 2) & 0xF)];
      Subprogram = getSubprogram(*v12);
      v15 = v5 - 16;
      v14 = *((_QWORD *)v5 - 2);
      if ((v14 & 2) != 0)
        v16 = (unsigned __int8 **)*((_QWORD *)v5 - 4);
      else
        v16 = (unsigned __int8 **)&v15[-8 * ((v14 >> 2) & 0xF)];
      v17 = getSubprogram(*v16);
      if (Subprogram)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18 && Subprogram != v17)
      {
        v29 = 1283;
        v26[0] = "mismatched subprogram between llvm.dbg.";
        v27 = "label";
        v28 = 5;
        v30[0] = v26;
        v31 = " label and !dbg attachment";
        v32 = 770;
        v20 = (v11 & 2) != 0 ? (unsigned __int8 *)*((_QWORD *)v4 - 4) : &v10[-8 * ((v11 >> 2) & 0xF)];
        v21 = llvm::DILocalScope::getSubprogram(*(_BYTE **)v20);
        v22 = (v14 & 2) != 0 ? (unsigned __int8 *)*((_QWORD *)v5 - 4) : &v15[-8 * ((v14 >> 2) & 0xF)];
        v23 = llvm::DILocalScope::getSubprogram(*(_BYTE **)v22);
        llvm::VerifierSupport::DebugInfoCheckFailed(this, (const llvm::Twine *)v30);
        if (*this)
        {
          llvm::VerifierSupport::Write(this, (const llvm::Value *)a2);
          if (v6)
            llvm::VerifierSupport::Write(this, v6);
          if (v24)
            llvm::VerifierSupport::Write(this, v24);
          llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v4);
          llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v21);
          llvm::VerifierSupport::Write((llvm::raw_ostream *)this, v5);
          v8 = (llvm::raw_ostream *)this;
          v9 = v23;
LABEL_8:
          llvm::VerifierSupport::Write(v8, v9);
        }
      }
    }
    else
    {
      v29 = 1283;
      v26[0] = "llvm.dbg.";
      v27 = "label";
      v28 = 5;
      v30[0] = v26;
      v31 = " intrinsic requires a !dbg attachment";
      v32 = 770;
      llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v30);
      if (*this)
      {
        llvm::VerifierSupport::Write(this, (const llvm::Value *)a2);
        llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *>((llvm::raw_ostream *)this, v6, &v25);
      }
    }
  }
}

BOOL `anonymous namespace'::Verifier::visitIntrinsicCall(unsigned int,llvm::CallBase &)::$_1::operator()(llvm::APInt *this, __int16 a2)
{
  char v2;
  llvm::APInt *v3;
  unsigned int v4;

  if ((a2 & 0xFF00) == 0)
    return 0;
  v2 = a2;
  v3 = this;
  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
      return 0;
    v3 = *(llvm::APInt **)v3;
  }
  return *(_QWORD *)v3 <= (unint64_t)(1 << v2);
}

void llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::CallBase>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value *a3, const llvm::Value *a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write(a1, a3);
    llvm::VerifierSupport::Write(a1, a4);
  }
}

void `anonymous namespace'::Verifier::verifyStatepoint(llvm::raw_ostream **this, const llvm::CallBase *a2)
{
  unsigned __int8 MemoryEffects;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t ParamElementType;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const llvm::Value *v28;
  const llvm::Value *v29;
  const llvm::Value *v30;
  const char *v31;
  const char *v32;
  const llvm::Value *v33;
  const llvm::Value *v34;
  _QWORD v35[4];
  __int16 v36;

  if (!llvm::CallBase::getMemoryEffects(a2)
    || (MemoryEffects = llvm::CallBase::getMemoryEffects(a2),
        !(((MemoryEffects >> 2) | (MemoryEffects >> 4)) & 2 | MemoryEffects & 2))
    || llvm::CallBase::getMemoryEffects(a2) <= 3)
  {
    v5 = "gc.statepoint must read and write all memory to preserve reordering restrictions required by safepoint semantics";
    goto LABEL_5;
  }
  v6 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  v7 = (_QWORD *)((char *)a2 - 32 * v6);
  v8 = v7[4];
  v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40)
  {
    if ((**(_QWORD **)(v8 + 24) & 0x8000000000000000) != 0)
      goto LABEL_9;
  }
  else if ((uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9 < 0)
  {
LABEL_9:
    v5 = "gc.statepoint number of patchable bytes must be positive";
    goto LABEL_5;
  }
  v10 = (uint64_t *)((char *)a2 + 64);
  ParamElementType = llvm::AttributeList::getParamElementType((const llvm::CallBase *)((char *)a2 + 64), 2);
  if (!ParamElementType)
  {
    v5 = "gc.statepoint callee argument must have elementtype attribute";
    goto LABEL_5;
  }
  v12 = *(_DWORD *)(ParamElementType + 8);
  if (v12 != 14)
  {
    v5 = "gc.statepoint callee elementtype must be function type";
    goto LABEL_5;
  }
  v13 = v7[12];
  v14 = (_QWORD *)(v13 + 24);
  if (*(_DWORD *)(v13 + 32) >= 0x41u)
    v14 = (_QWORD *)*v14;
  v15 = (_QWORD *)*v14;
  if ((v15 & 0x80000000) != 0)
  {
    v5 = "gc.statepoint number of arguments to underlying call must be positive";
    goto LABEL_5;
  }
  v16 = (*(_DWORD *)(ParamElementType + 12) - 1);
  if (v12 < 0x100)
  {
    if ((_DWORD)v16 != (_DWORD)v15)
    {
      v5 = "gc.statepoint mismatch in number of call args";
      goto LABEL_5;
    }
  }
  else
  {
    if ((int)v16 > (int)v15)
    {
      v5 = "gc.statepoint mismatch in number of vararg call args";
      goto LABEL_5;
    }
    if (*(_BYTE *)(**(_QWORD **)(ParamElementType + 16) + 8) != 7)
    {
      v5 = "gc.statepoint doesn't support wrapping non-void vararg functions yet";
      goto LABEL_5;
    }
  }
  v17 = v7[16];
  v18 = (_QWORD *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u)
    v18 = (_QWORD *)*v18;
  if (*v18 >= 4uLL)
  {
    v5 = "unknown flag used in gc.statepoint flags argument";
    goto LABEL_5;
  }
  if ((int)v16 >= 1)
  {
    v19 = 0;
    v20 = *v10;
    v21 = 160 - 32 * v6;
    while (**(_QWORD **)((char *)a2 + v21) == *(_QWORD *)(*(_QWORD *)(ParamElementType + 16) + 8 + 8 * v19))
    {
      if (v12 >= 0x100)
      {
        if (v20)
        {
          if ((v19 + 7) < *(_DWORD *)(v20 + 8))
          {
            v22 = *(_QWORD *)(*v10 + 96 + 8 * v19);
            if (v22)
            {
              if ((*(_BYTE *)(v22 + 21) & 4) != 0)
              {
                v5 = "Attribute 'sret' cannot be used for vararg call arguments!";
                goto LABEL_5;
              }
            }
          }
        }
      }
      ++v19;
      v21 += 32;
      if (v16 == v19)
        goto LABEL_37;
    }
    v5 = "gc.statepoint call argument does not match wrapped function type";
LABEL_5:
    v35[0] = v5;
    v36 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function>(this, (const llvm::Twine *)v35, a2);
    return;
  }
LABEL_37:
  v23 = v7[4 * ((_DWORD)v15 + 5)];
  if (*(_BYTE *)(v23 + 16) != 16)
  {
    v5 = "gc.statepoint number of transition arguments must be constant integer";
    goto LABEL_5;
  }
  v24 = (_QWORD *)(v23 + 24);
  if (*(_DWORD *)(v23 + 32) >= 0x41u)
    v24 = (_QWORD *)*v24;
  if (*(_DWORD *)v24)
  {
    v5 = "gc.statepoint w/inline transition bundle is deprecated";
    goto LABEL_5;
  }
  v25 = v7[4 * ((_DWORD)v15 + 6)];
  if (*(_BYTE *)(v25 + 16) != 16)
  {
    v5 = "gc.statepoint number of deoptimization arguments must be constant integer";
    goto LABEL_5;
  }
  v26 = (_QWORD *)(v25 + 24);
  if (*(_DWORD *)(v25 + 32) >= 0x41u)
    v26 = (_QWORD *)*v26;
  if (*(_DWORD *)v26)
  {
    v5 = "gc.statepoint w/inline deopt operands is deprecated";
    goto LABEL_5;
  }
  if ((_DWORD)v15 + 7 != ((unint64_t)(llvm::CallBase::arg_end(a2)
                                                          - ((_QWORD)a2
                                                           - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) >> 5))
  {
    v5 = "gc.statepoint too many arguments";
    goto LABEL_5;
  }
  v27 = *((_QWORD *)a2 + 1);
  if (!v27)
    return;
  while (1)
  {
    v28 = *(const llvm::Value **)(v27 + 24);
    if (*((_BYTE *)v28 + 16) == 84)
      v29 = *(const llvm::Value **)(v27 + 24);
    else
      v29 = 0;
    v33 = v29;
    v34 = v28;
    if (!v29)
    {
      v31 = "illegal use of statepoint token";
LABEL_71:
      v35[0] = v31;
      v36 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (const llvm::Twine *)v35, a2, &v34);
      return;
    }
    if (!llvm::GCRelocateInst::classof((uint64_t)v29) && !llvm::GCResultInst::classof(v29, v30))
    {
      v31 = "gc.result or gc.relocate are the only value uses of a gc.statepoint";
      goto LABEL_71;
    }
    if (!llvm::GCResultInst::classof(v29, v30))
      break;
    if (*((const llvm::CallBase **)v29 - 4 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF)) != a2)
    {
      v32 = "gc.result connected to wrong gc.statepoint";
      goto LABEL_73;
    }
LABEL_66:
    v27 = *(_QWORD *)(v27 + 8);
    if (!v27)
      return;
  }
  if (!llvm::GCRelocateInst::classof((uint64_t)a2)
    || *((const llvm::CallBase **)v29 - 4 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF)) == a2)
  {
    goto LABEL_66;
  }
  v32 = "gc.relocate connected to wrong gc.statepoint";
LABEL_73:
  v35[0] = v32;
  v36 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(this, (const llvm::Twine *)v35, a2, &v33);
}

void llvm::VerifierSupport::CheckFailed<llvm::CallBase,llvm::Value *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value *a3, const llvm::Value **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write(a1, a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
  }
}

uint64_t *llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::operator=(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;

  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll(a1);
  MEMORY[0x24BD1B398](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

uint64_t *llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::~DenseMap(uint64_t *a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>,llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,llvm::TinyPtrVector<llvm::BasicBlock *>>>::destroyAll(a1);
  MEMORY[0x24BD1B398](*a1, 8);
  return a1;
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::Instruction *,llvm::DbgAssignIntrinsic *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, const llvm::Value **a4)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
  }
}

unsigned __int8 *getSubprogram(unsigned __int8 *result)
{
  int v1;
  unint64_t v2;
  uint64_t v3;

  for (; result; result = *(unsigned __int8 **)(v3 + 8))
  {
    v1 = *result;
    if (v1 == 17)
      break;
    if ((v1 & 0xFE) != 0x12)
      return 0;
    v2 = *((_QWORD *)result - 2);
    if ((v2 & 2) != 0)
      v3 = *((_QWORD *)result - 4);
    else
      v3 = (uint64_t)&result[-8 * ((v2 >> 2) & 0xF) - 16];
  }
  return result;
}

void llvm::VerifierSupport::DebugInfoCheckFailed<llvm::DbgVariableIntrinsic *,llvm::BasicBlock *,llvm::Function *,llvm::DILocalVariable *,llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, const llvm::Value **a4, const llvm::Value **a5, unsigned __int8 **a6, unsigned __int8 **a7, unsigned __int8 **a8, unsigned __int8 **a9)
{
  llvm::VerifierSupport::DebugInfoCheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
    if (*a5)
      llvm::VerifierSupport::Write(a1, *a5);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a6);
    llvm::VerifierSupport::WriteTs<llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>((llvm::raw_ostream *)a1, *a7, a8, a9);
  }
}

void `anonymous namespace'::Verifier::verifyFnArgs(_anonymous_namespace_::Verifier *this, const llvm::DbgVariableIntrinsic *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  BOOL v16;
  unint64_t v17;
  _QWORD v18[4];
  __int16 v19;

  if (!*((_BYTE *)this + 801))
    return;
  v4 = *((_QWORD *)a2 + 6);
  v5 = *(_QWORD *)(v4 - 16);
  if ((v5 & 2) != 0)
  {
    if (*(_DWORD *)(v4 - 24) == 2)
    {
      v6 = *(_QWORD *)(v4 - 32);
LABEL_7:
      if (*(_QWORD *)(v6 + 8))
        return;
    }
  }
  else if ((*(_QWORD *)(v4 - 16) & 0x3C0) == 0x80)
  {
    v6 = v4 - 16 - 8 * ((v5 >> 2) & 0xF);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4] + 24);
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 24);
    if (*(_WORD *)(v7 + 24))
    {
      v9 = (_QWORD *)((char *)this + 1840);
      v10 = *((unsigned int *)this + 462);
      v11 = v8 - v10;
      if (v8 > v10)
      {
        v12 = *((unsigned int *)this + 462);
        v13 = *((_DWORD *)this + 462);
        if (*((_DWORD *)this + 463) < v8)
        {
          v17 = *((unsigned int *)this + 462);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1840, (char *)this + 1856, *(unsigned __int16 *)(v7 + 24), 8);
          v10 = v17;
          v12 = *((unsigned int *)this + 462);
          v13 = *((_DWORD *)this + 462);
        }
        if (v8 != v10)
          bzero((void *)(*v9 + 8 * v12), 8 * v11);
        *((_DWORD *)this + 462) = v13 + v11;
      }
      v14 = v8 - 1;
      v15 = *(unsigned __int8 **)(*v9 + 8 * (v8 - 1));
      *(_QWORD *)(*v9 + 8 * v14) = v7;
      if (v15)
        v16 = v15 == (unsigned __int8 *)v7;
      else
        v16 = 1;
      if (!v16)
      {
        v18[0] = "conflicting debug info for argument";
        v19 = 259;
        llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v18);
        if (*(_QWORD *)this)
        {
          llvm::VerifierSupport::Write((llvm::raw_ostream **)this, a2);
          llvm::VerifierSupport::Write(this, v15);
          llvm::VerifierSupport::Write(this, (unsigned __int8 *)v7);
        }
      }
    }
  }
  else
  {
    v18[0] = "dbg intrinsic without variable";
    v19 = 259;
    llvm::VerifierSupport::DebugInfoCheckFailed((llvm::raw_ostream **)this, (const llvm::Twine *)v18);
  }
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::BasicBlock *,llvm::Function *>(llvm::raw_ostream *this, const llvm::Value *a2, const llvm::Value **a3)
{
  llvm::raw_ostream **v4;

  v4 = (llvm::raw_ostream **)this;
  if (a2)
    this = llvm::VerifierSupport::Write((llvm::raw_ostream **)this, a2);
  if (*a3)
    return llvm::VerifierSupport::Write(v4, *a3);
  return this;
}

llvm::raw_ostream *llvm::VerifierSupport::WriteTs<llvm::DISubprogram *,llvm::DILocation *,llvm::DISubprogram *>(llvm::raw_ostream *a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  llvm::VerifierSupport::Write(a1, a2);
  llvm::VerifierSupport::Write(a1, *a3);
  return llvm::VerifierSupport::Write(a1, *a4);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<llvm::Function *>(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>,llvm::Function *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,std::pair<unsigned int,unsigned int>>>::InsertIntoBucketImpl<llvm::Function *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

BOOL llvm::GCResultInst::classof(llvm::GCResultInst *this, const llvm::Value *a2)
{
  uint64_t v2;

  return *((_BYTE *)this + 16) == 84
      && (v2 = *((_QWORD *)this - 4)) != 0
      && !*(_BYTE *)(v2 + 16)
      && *(_QWORD *)(v2 + 24) == *((_QWORD *)this + 9)
      && (*(_BYTE *)(v2 + 33) & 0x20) != 0
      && *(_DWORD *)(v2 + 36) == 124;
}

void `anonymous namespace'::Verifier::visitEHPadPredecessors(llvm::raw_ostream **this, llvm::Instruction *a2)
{
  llvm::BasicBlock *v3;
  uint64_t v4;
  llvm::BasicBlock *v5;
  unsigned int v6;
  const llvm::Value *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  const llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  llvm::BasicBlock *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  const llvm::Value *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v51;
  unsigned __int8 **v52;
  int v53;
  const char *v54;
  unsigned int v55;
  BOOL v56;
  const llvm::Value *v58[2];
  char v59;
  __int16 v60;
  const char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  _WORD v65[32];
  const llvm::Value *v66;
  const llvm::Value *v67;
  const llvm::Value *v68;
  const llvm::Value *v69[2];

  v3 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v4 = *(_QWORD *)(*((_QWORD *)v3 + 7) + 80);
  if (v4)
    v5 = (llvm::BasicBlock *)(v4 - 24);
  else
    v5 = 0;
  if (v3 == v5)
  {
    v61 = "EH pad cannot be in entry block.";
    v65[0] = 259;
    v58[0] = a2;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, v58);
    return;
  }
  v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 94)
    v7 = a2;
  else
    v7 = 0;
  v58[0] = v7;
  if (v6 == 94)
  {
    v8 = *((_QWORD *)v3 + 1);
    if (v8)
    {
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v9 && v10 >= 0x1C;
        if (v11 && v10 - 29 <= 0xA)
          break;
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          return;
      }
LABEL_61:
      v28 = *(_QWORD *)(v9 + 40);
      v29 = *(_QWORD *)(v28 + 40);
      if (v29 == v28 + 40
        || ((v20 = v29 - 24, v29) ? (v21 = v29 - 24) : (v21 = 0),
            (v22 = *(unsigned __int8 *)(v21 + 16) - 40, v22 >= 0xFFFFFFF5) ? (v23 = v20) : (v23 = 0),
            *(_BYTE *)(v23 + 16) == 33 ? (v24 = v22 >= 0xFFFFFFF5) : (v24 = 0),
            !v24 || *(llvm::BasicBlock **)(v23 - 64) != v3 || *(llvm::BasicBlock **)(v23 - 96) == v3))
      {
        v61 = "Block containing LandingPadInst must be jumped to only by the unwind edge of an invoke.";
        v65[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, v58);
      }
      else
      {
        while (1)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            break;
          v9 = *(_QWORD *)(v8 + 24);
          v25 = *(unsigned __int8 *)(v9 + 16);
          if (v9)
            v26 = v25 >= 0x1C;
          else
            v26 = 0;
          if (v26 && v25 - 29 < 0xB)
            goto LABEL_61;
        }
      }
    }
    return;
  }
  if (v6 == 80)
    v13 = a2;
  else
    v13 = 0;
  v58[0] = v13;
  if (v6 == 80)
  {
    v14 = *((_QWORD *)v3 + 1);
    if (!v14)
      goto LABEL_67;
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 24);
      v16 = *(unsigned __int8 *)(v15 + 16);
      v17 = v15 && v16 >= 0x1C;
      if (v17 && v16 - 29 < 0xB)
        break;
      v14 = *(_QWORD *)(v14 + 8);
      if (!v14)
        goto LABEL_67;
    }
    if (llvm::BasicBlock::getUniquePredecessor(v3) == *(_QWORD *)(*((_QWORD *)v13 - 4) + 40))
    {
LABEL_67:
      v31 = *((_QWORD *)v13 - 4);
      if ((*(_WORD *)(v31 + 18) & 1) != 0)
      {
        v33 = *(_DWORD *)(v31 + 20);
        if ((v33 & 0x40000000) != 0)
          v34 = *(_QWORD *)(v31 - 8);
        else
          v34 = v31 - 32 * (v33 & 0x7FFFFFF);
        v32 = *(llvm::BasicBlock **)(v34 + 32);
      }
      else
      {
        v32 = 0;
      }
      if (v3 == v32)
      {
        v61 = "Catchswitch cannot unwind to one of its catchpads";
        v65[0] = 259;
        llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)&v61);
        if (*this)
        {
          llvm::VerifierSupport::Write(this, (const llvm::Value *)v31);
          llvm::VerifierSupport::Write(this, v13);
        }
      }
    }
    else
    {
      v61 = "Block containg CatchPadInst must be jumped to only by its catchswitch.";
      v65[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, v58);
    }
    return;
  }
  v69[0] = a2;
  if (v6 < 0x1C || v6 - 81 < 0xFFFFFFFE)
  {
    v30 = *((_DWORD *)a2 + 5);
    if ((v30 & 0x40000000) != 0)
      v19 = (char *)*((_QWORD *)a2 - 1);
    else
      v19 = (char *)a2 - 32 * (v30 & 0x7FFFFFF);
  }
  else
  {
    v19 = (char *)a2 - 32;
  }
  v35 = *((_QWORD *)v3 + 1);
  if (!v35)
    return;
  v36 = *(unsigned __int8 **)v19;
  while (1)
  {
    v37 = *(_QWORD *)(v35 + 24);
    v38 = *(unsigned __int8 *)(v37 + 16);
    v39 = v37 && v38 >= 0x1C;
    if (v39 && v38 - 29 < 0xB)
      break;
    v35 = *(_QWORD *)(v35 + 8);
    if (!v35)
      return;
  }
LABEL_84:
  v41 = *(_QWORD *)(v37 + 40);
  v42 = *(_QWORD *)(v41 + 40);
  if (v42 == v41 + 40)
  {
    v45 = 0;
  }
  else
  {
    v43 = (unsigned __int8 *)(v42 - 24);
    if (v42)
      v44 = v42 - 24;
    else
      v44 = 0;
    if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB)
      v45 = 0;
    else
      v45 = v43;
  }
  v68 = (const llvm::Value *)v45;
  v46 = v45[16];
  if (v46 == 33)
    v47 = (const llvm::Value *)v45;
  else
    v47 = 0;
  v58[0] = v47;
  if (v47)
  {
    if (*((llvm::BasicBlock **)v47 - 8) != v3 || *((llvm::BasicBlock **)v47 - 12) == v3)
    {
      v61 = "EH pad must be jumped to via an unwind edge";
      v65[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v61, v69, v58);
      return;
    }
    llvm::CallBase::getOperandBundle((uint64_t)v47, 1, (uint64_t)&v61);
    if ((_BYTE)v64)
      v45 = *(unsigned __int8 **)v61;
    else
      v45 = (unsigned __int8 *)llvm::ConstantTokenNone::get(**(uint64_t ***)v47);
  }
  else
  {
    if (v46 == 36)
      v48 = v45;
    else
      v48 = 0;
    v66 = (const llvm::Value *)v48;
    if (v48)
    {
      v45 = *(unsigned __int8 **)&v48[-32 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF)];
      v67 = (const llvm::Value *)v45;
      if (v45 == v36)
      {
        v61 = "A cleanupret must exit its cleanup";
        v65[0] = 259;
        llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)&v61, &v66);
        return;
      }
      goto LABEL_109;
    }
    if (v46 != 38)
    {
      v61 = "EH pad must be jumped to via an unwind edge";
      v65[0] = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Argument const*,llvm::Function const*>(this, (const llvm::Twine *)&v61, v69, &v68);
      return;
    }
  }
  v67 = (const llvm::Value *)v45;
LABEL_109:
  v61 = (const char *)v65;
  v62 = (char *)v65;
  v63 = 8;
  v64 = 0;
  while (v45 != (unsigned __int8 *)v69[0])
  {
    if (v45 == v36)
    {
      v53 = 1;
      goto LABEL_135;
    }
    if (v45[16] == 20)
    {
      v54 = "A single unwind edge may only enter one EH pad";
LABEL_133:
      v58[0] = (const llvm::Value *)v54;
      v60 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v58, &v68);
      goto LABEL_134;
    }
    llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)&v61, v45, (uint64_t)v58);
    if (!v59)
    {
      v58[0] = (const llvm::Value *)"EH pad jumps through a cycle of pads";
      v60 = 259;
      llvm::VerifierSupport::CheckFailed<llvm::Function const*>(this, (const llvm::Twine *)v58, &v67);
      goto LABEL_134;
    }
    v49 = *((unsigned __int8 *)v67 + 16);
    if (v49 < 0x1C || v49 - 79 >= 2)
    {
      if (v49 != 38)
      {
        v54 = "Parent pad must be catchpad/cleanuppad/catchswitch";
        goto LABEL_133;
      }
      v51 = *((_DWORD *)v67 + 5);
      if ((v51 & 0x40000000) != 0)
        v52 = (unsigned __int8 **)*((_QWORD *)v67 - 1);
      else
        v52 = (unsigned __int8 **)((char *)v67 - 32 * (v51 & 0x7FFFFFF));
    }
    else
    {
      v52 = (unsigned __int8 **)((char *)v67 - 32);
    }
    v45 = *v52;
    v67 = (const llvm::Value *)*v52;
  }
  v58[0] = (const llvm::Value *)"EH pad cannot handle exceptions raised within it";
  v60 = 259;
  llvm::VerifierSupport::CheckFailed(this, (const llvm::Twine *)v58);
  if (*this)
  {
    if (v45)
      llvm::VerifierSupport::Write(this, (const llvm::Value *)v45);
    if (v68)
      llvm::VerifierSupport::Write(this, v68);
  }
LABEL_134:
  v53 = 0;
LABEL_135:
  if (v62 != v61)
    free(v62);
  if (v53)
  {
    while (1)
    {
      v35 = *(_QWORD *)(v35 + 8);
      if (!v35)
        break;
      v37 = *(_QWORD *)(v35 + 24);
      v55 = *(unsigned __int8 *)(v37 + 16);
      if (v37)
        v56 = v55 >= 0x1C;
      else
        v56 = 0;
      if (v56 && v55 - 29 < 0xB)
        goto LABEL_84;
    }
  }
}

void `anonymous namespace'::Verifier::visitBinaryOperator(llvm::raw_ostream **a1, const llvm::Value *a2)
{
  const llvm::Value *v2;
  const char *v3;
  __int16 v4;

  if (**((_QWORD **)a2 - 8) == **((_QWORD **)a2 - 4))
    __asm { BR              X11 }
  v2 = a2;
  v3 = "Both operands to a binary operator are not of the same type!";
  v4 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)&v3, &v2);
}

void sub_24AA1DE20(_anonymous_namespace_::Verifier *this@<X0>, llvm::Instruction *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v4 = *(unsigned __int8 *)(**(_QWORD **)(v3 + 16) + 8);
  else
    v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v4 != 13 || v3 != a3)
    JUMPOUT(0x24AA1DDDCLL);
}

void llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>(llvm::raw_ostream **a1, const llvm::Twine *a2, llvm::Type **a3, const llvm::Value **a4)
{
  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    llvm::VerifierSupport::Write(a1, *a3);
    if (*a4)
      llvm::VerifierSupport::Write(a1, *a4);
  }
}

void `anonymous namespace'::Verifier::checkAtomicMemAccessSize(_anonymous_namespace_::Verifier *this, llvm::Type *a2, const llvm::Instruction *a3)
{
  const char *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  const char *v8;
  __int16 v9;
  const llvm::Value *v10;
  llvm::Type *v11;

  v10 = a3;
  v11 = a2;
  llvm::DataLayout::getTypeSizeInBits(*((_QWORD *)this + 22), (uint64_t)a2);
  v6 = v5;
  if ((_BYTE)v4)
  if (v6 <= 7)
  {
    v7 = "atomic memory access' size must be byte-sized";
  }
  else
  {
    if ((v6 & (v6 - 1)) == 0)
      return;
    v7 = "atomic memory access' operand must have a power-of-two size";
  }
  v8 = v7;
  v9 = 259;
  llvm::VerifierSupport::CheckFailed<llvm::Type *,llvm::LoadInst *>((llvm::raw_ostream **)this, (const llvm::Twine *)&v8, &v11, &v10);
}

void `anonymous namespace'::Verifier::visitFuncletPadInst(llvm::raw_ostream **a1, uint64_t a2)
{
  const llvm::Value *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::Value *v11;
  int v12;
  int v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v23;
  uint64_t *v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  int v43;
  llvm::raw_ostream **v44;
  const llvm::Value *v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57[4];
  __int16 v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[64];
  void *v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD v67[10];

  v3 = 0;
  v4 = 0;
  v67[8] = *MEMORY[0x24BDAC8D0];
  v64 = v67;
  v66 = 8;
  v67[0] = a2;
  v59 = v63;
  v60 = v63;
  v61 = 8;
  v62 = 0;
  v55 = a1 + 107;
  LODWORD(v5) = 1;
LABEL_2:
  while (1)
  {
    v6 = *((_QWORD *)v64 + v5 - 1);
    v65 = v5 - 1;
    llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v59, (const void *)v6);
    if (!v7)
      break;
    v8 = *(_QWORD *)(v6 + 8);
    if (v8)
    {
      v9 = 0;
      v10 = v6;
      while (1)
      {
        v11 = *(const llvm::Value **)(v8 + 24);
        v12 = *((unsigned __int8 *)v11 + 16);
        if (v11)
        {
          if (v12 == 36)
            break;
        }
        if (v11 && v12 == 38)
        {
          if ((*((_WORD *)v11 + 9) & 1) == 0)
            goto LABEL_76;
          v13 = *((_DWORD *)v11 + 5);
          if ((v13 & 0x40000000) == 0)
            goto LABEL_13;
          v14 = (char *)*((_QWORD *)v11 - 1);
LABEL_14:
          v15 = (uint64_t *)(v14 + 32);
          goto LABEL_18;
        }
        if (!v11 || v12 != 33)
        {
          if (v12 != 84)
          {
            if (v11 && v12 == 79)
            {
              v27 = v65;
              if (v65 >= (unint64_t)v66)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v65 + 1, 8);
                v27 = v65;
              }
              *((_QWORD *)v64 + v27) = v11;
              ++v65;
            }
            else if (v12 != 37)
            {
              v57[0] = (uint64_t)"Bogus funclet pad use";
              v58 = 259;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
              if (*a1)
              {
                v44 = a1;
                v45 = v11;
                goto LABEL_143;
              }
              goto LABEL_145;
            }
          }
          goto LABEL_76;
        }
        v15 = (uint64_t *)((char *)v11 - 64);
LABEL_18:
        v16 = *v15;
        if (v16)
        {
          for (i = *(_QWORD *)(v16 + 48); ; i = *(_QWORD *)(i + 8))
          {
            v18 = i - 24;
            v19 = i ? i - 24 : 0;
            if (*(_BYTE *)(v19 + 16) != 83)
              break;
          }
          v21 = *(unsigned __int8 *)(i - 8);
          if ((v21 - 38) > 0x38 || ((1 << (v21 - 38)) & 0x100060000000001) == 0)
            goto LABEL_76;
          if ((v21 - 81) >= 0xFFFFFFFE)
          {
            v24 = (uint64_t *)(i - 56);
          }
          else
          {
            v23 = *(_DWORD *)(i - 4);
            v24 = (v23 & 0x40000000) != 0 ? *(uint64_t **)(i - 32) : (uint64_t *)(v18 - 32 * (v23 & 0x7FFFFFF));
          }
          v20 = *v24;
          if (v20 == v10)
            goto LABEL_76;
          while (v10 != a2)
          {
            if (v10
              && ((v28 = *(unsigned __int8 *)(v10 + 16), v28 >= 0x1C) ? (v29 = v28 - 81 >= 0xFFFFFFFE) : (v29 = 0), v29))
            {
              v30 = (uint64_t *)(v10 - 32);
            }
            else
            {
              v31 = *(_DWORD *)(v10 + 20);
              if ((v31 & 0x40000000) != 0)
                v30 = *(uint64_t **)(v10 - 8);
              else
                v30 = (uint64_t *)(v10 - 32 * (v31 & 0x7FFFFFF));
            }
            v10 = *v30;
            if (*v30 == v20)
            {
              v11 = v3;
              goto LABEL_29;
            }
            if (*(_BYTE *)(v10 + 16) == 20)
            {
              v11 = v3;
              v20 = v9;
              goto LABEL_29;
            }
          }
          goto LABEL_26;
        }
LABEL_25:
        v18 = llvm::ConstantTokenNone::get(**(uint64_t ***)a2);
LABEL_26:
        if (v3)
        {
          if (v18 != v4)
          {
            v57[0] = (uint64_t)"Unwind edges out of a funclet pad must have the same unwind dest";
            v58 = 259;
            llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
            if (!*a1)
              goto LABEL_145;
            llvm::VerifierSupport::Write(a1, (const llvm::Value *)a2);
            llvm::VerifierSupport::Write(a1, v11);
            v44 = a1;
            v45 = v3;
            goto LABEL_143;
          }
          v11 = v3;
          v20 = a2;
LABEL_29:
          v18 = v4;
        }
        else
        {
          if (*(_BYTE *)(a2 + 16) == 79)
          {
            v25 = *(unsigned __int8 *)(v18 + 16);
            if (v25 != 20)
            {
              if (v25 < 0x1C || v25 - 81 < 0xFFFFFFFE)
              {
                v32 = *(_DWORD *)(v18 + 20);
                v26 = (v32 & 0x40000000) != 0 ? *(_QWORD **)(v18 - 8) : (_QWORD *)(v18 - 32 * (v32 & 0x7FFFFFF));
              }
              else
              {
                v26 = (_QWORD *)(v18 - 32);
              }
              if (*v26 == *(_QWORD *)(a2 - 32))
              {
                v57[0] = a2;
                *(_QWORD *)llvm::MapVector<llvm::Instruction *,llvm::Instruction *,llvm::DenseMap<llvm::Instruction *,unsigned int,llvm::DenseMapInfo<llvm::Instruction *,void>,llvm::detail::DenseMapPair<llvm::Instruction *,unsigned int>>,std::vector<std::pair<llvm::Instruction *,llvm::Instruction *>>>::operator[](v55, v57) = v11;
              }
            }
          }
          v20 = a2;
        }
        v3 = v11;
        v10 = a2;
        v4 = v18;
        v9 = v20;
        if (v6 != a2)
        {
LABEL_77:
          v5 = v65;
          if (!v20 || v6 == v20)
          {
LABEL_107:
            v3 = v11;
            v4 = v18;
            if ((_DWORD)v5)
              goto LABEL_2;
            goto LABEL_110;
          }
          if (v65)
          {
            do
            {
              v33 = *((_QWORD *)v64 + v5 - 1);
              v34 = *(unsigned __int8 *)(v33 + 16);
              if (v33)
                v35 = v34 >= 0x1C;
              else
                v35 = 0;
              if (v35 && v34 - 81 >= 0xFFFFFFFE)
              {
                v38 = (uint64_t *)(v33 - 32);
              }
              else
              {
                v37 = *(_DWORD *)(v33 + 20);
                if ((v37 & 0x40000000) != 0)
                  v38 = *(uint64_t **)(v33 - 8);
                else
                  v38 = (uint64_t *)(v33 - 32 * (v37 & 0x7FFFFFF));
              }
              v39 = *v38;
              while (v6 != v39)
              {
                if (v6
                  && ((v40 = *(unsigned __int8 *)(v6 + 16), v40 >= 0x1C) ? (v41 = v40 - 81 >= 0xFFFFFFFE) : (v41 = 0),
                      v41))
                {
                  v42 = (uint64_t *)(v6 - 32);
                }
                else
                {
                  v43 = *(_DWORD *)(v6 + 20);
                  if ((v43 & 0x40000000) != 0)
                    v42 = *(uint64_t **)(v6 - 8);
                  else
                    v42 = (uint64_t *)(v6 - 32 * (v43 & 0x7FFFFFF));
                }
                v6 = *v42;
                if (*v42 == v20)
                  goto LABEL_107;
              }
              v6 = v39;
              v65 = --v5;
            }
            while ((_DWORD)v5);
          }
          v3 = v11;
          v4 = v18;
          if (!v18)
            goto LABEL_144;
LABEL_120:
          v47 = *(_QWORD *)(a2 - 32);
          if (v47 && *(_BYTE *)(v47 + 16) == 38)
          {
            if ((*(_WORD *)(v47 + 18) & 1) != 0
              && ((v48 = *(_DWORD *)(v47 + 20), (v48 & 0x40000000) != 0)
                ? (v49 = *(_QWORD *)(v47 - 8))
                : (v49 = v47 - 32 * (v48 & 0x7FFFFFF)),
                  (v50 = *(_QWORD *)(v49 + 32)) != 0))
            {
              v51 = v50 + 40;
              for (j = *(_QWORD *)(v50 + 48); j != v51; j = *(_QWORD *)(j + 8))
              {
                v53 = j - 24;
                if (j)
                  v54 = j - 24;
                else
                  v54 = 0;
                if (*(_BYTE *)(v54 + 16) != 83)
                  goto LABEL_138;
              }
              v53 = 0;
            }
            else
            {
              v53 = llvm::ConstantTokenNone::get(**(uint64_t ***)a2);
            }
LABEL_138:
            if (v53 != v4)
            {
              v57[0] = (uint64_t)"Unwind edges out of a catch must have the same unwind dest as the parent catchswitch";
              v58 = 259;
              llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
              if (*a1)
              {
                llvm::VerifierSupport::Write(a1, (const llvm::Value *)a2);
                if (v3)
                  llvm::VerifierSupport::Write(a1, v3);
                v44 = a1;
                v45 = (const llvm::Value *)v47;
LABEL_143:
                llvm::VerifierSupport::Write(v44, v45);
              }
              goto LABEL_145;
            }
          }
LABEL_144:
          goto LABEL_145;
        }
LABEL_76:
        v8 = *(_QWORD *)(v8 + 8);
        v11 = v3;
        v18 = v4;
        v20 = v9;
        if (!v8)
          goto LABEL_77;
      }
      if ((*((_WORD *)v11 + 9) & 1) == 0)
        goto LABEL_25;
      v13 = *((_DWORD *)v11 + 5);
LABEL_13:
      v14 = (char *)v11 - 32 * (v13 & 0x7FFFFFF);
      goto LABEL_14;
    }
    LODWORD(v5) = v65;
    if (!v65)
    {
LABEL_110:
      if (v4)
        goto LABEL_120;
      goto LABEL_144;
    }
  }
  v57[0] = (uint64_t)"FuncletPadInst must not be nested within itself";
  v58 = 259;
  llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v57);
  if (v6)
    v46 = *a1 == 0;
  else
    v46 = 1;
  if (!v46)
  {
    v44 = a1;
    v45 = (const llvm::Value *)v6;
    goto LABEL_143;
  }
LABEL_145:
  if (v60 != v59)
    free(v60);
  if (v64 != v67)
    free(v64);
}

BOOL isTypeCongruent(llvm::Type *a1, llvm::Type *a2)
{
  llvm::Type *v2;
  llvm::Type *v3;
  BOOL v4;

  if (a1 == a2)
    return 1;
  if (*((_BYTE *)a1 + 8) == 15)
    v2 = a1;
  else
    v2 = 0;
  if (*((_BYTE *)a2 + 8) == 15)
    v3 = a2;
  else
    v3 = 0;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4 && (*((_DWORD *)v3 + 2) ^ *((_DWORD *)v2 + 2)) < 0x100;
}

uint64_t **getParameterABIAttributes(uint64_t **result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char v10;
  uint64_t v12;
  __int16 ParamAlignment;
  uint64_t v14;

  v6 = result;
  v14 = a4;
  *result = a2;
  result[1] = (uint64_t *)(result + 3);
  result[2] = (uint64_t *)0x800000000;
  v7 = (a3 + 2);
  v8 = a4 + 40;
  v9 = &getParameterABIAttributes(llvm::LLVMContext &,unsigned int,llvm::AttributeList)::ABIAttrs;
  do
  {
    while (!a4)
    {
      if (++v9 == (int *)qword_24AA49CB8)
        return result;
    }
    if (v7 < *(_DWORD *)(a4 + 8))
    {
      result = *(uint64_t ***)(v8 + 8 * v7);
      if (result)
      {
        result = (uint64_t **)llvm::AttributeSetNode::findEnumAttribute((uint64_t)result, *v9);
        if (v10 && result != 0)
          result = (uint64_t **)llvm::AttrBuilder::addAttribute((uint64_t)v6, (uint64_t)result);
      }
    }
    ++v9;
  }
  while (v9 != (int *)qword_24AA49CB8);
  if (v7 < *(_DWORD *)(a4 + 8))
  {
    v12 = *(_QWORD *)(v8 + 8 * v7);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 21) & 8) != 0 && (*(_BYTE *)(v12 + 20) & 0x60) != 0)
      {
        ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)&v14, a3);
        return llvm::AttrBuilder::addAlignmentAttr(v6, ParamAlignment);
      }
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::verifyTailCCMustTailAttrs(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  _QWORD v9[4];
  __int16 v10;

  if (llvm::AttrBuilder::getAttribute(a2, 72))
  {
    v8 = "inalloca attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 11))
  {
    v8 = "inreg attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 64))
  {
    v8 = "swifterror attribute not allowed in ";
  }
  else if (llvm::AttrBuilder::getAttribute(a2, 73))
  {
    v8 = "preallocated attribute not allowed in ";
  }
  else
  {
    if (!llvm::AttrBuilder::getAttribute(a2, 69))
      return;
    v8 = "byref attribute not allowed in ";
  }
  v9[0] = v8;
  v9[2] = a3;
  v9[3] = a4;
  v10 = 1283;
  llvm::VerifierSupport::CheckFailed(a1, (const llvm::Twine *)v9);
}

uint64_t getSuccPad(llvm::Instruction *a1)
{
  int v1;
  uint64_t *v2;
  __int16 v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  uint64_t v10;

  v1 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v1 == 33)
  {
    v2 = (uint64_t *)((char *)a1 - 64);
LABEL_14:
    v6 = *v2;
    goto LABEL_15;
  }
  v3 = *((_WORD *)a1 + 9);
  if (a1 && v1 == 38)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *((_DWORD *)a1 + 5);
      if ((v4 & 0x40000000) != 0)
      {
        v5 = (char *)*((_QWORD *)a1 - 1);
LABEL_13:
        v2 = (uint64_t *)(v5 + 32);
        goto LABEL_14;
      }
LABEL_12:
      v5 = (char *)a1 - 32 * (v4 & 0x7FFFFFF);
      goto LABEL_13;
    }
  }
  else if ((v3 & 1) != 0)
  {
    v4 = *((_DWORD *)a1 + 5);
    goto LABEL_12;
  }
  v6 = 0;
LABEL_15:
  v7 = v6 + 40;
  for (i = *(_QWORD *)(v6 + 48); i != v7; i = *(_QWORD *)(i + 8))
  {
    result = i - 24;
    if (i)
      v10 = i - 24;
    else
      v10 = 0;
    if (*(_BYTE *)(v10 + 16) != 83)
      return result;
  }
  return 0;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  BOOL v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  int64_t v144;
  int64_t v145;
  int64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v106 = *(a2 - 1);
        v107 = *v9;
        v108 = *(_QWORD *)(*(_QWORD *)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF)) + 24);
        v111 = *(_QWORD *)(v108 - 16);
        v109 = v108 - 16;
        v110 = v111;
        if ((v111 & 2) != 0)
          v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v112 = v109 - 8 * ((v110 >> 2) & 0xF);
        v233 = *(_QWORD *)(*(_QWORD *)(v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF)) + 24);
        v236 = *(_QWORD *)(v233 - 16);
        v234 = v233 - 16;
        v235 = v236;
        if ((v236 & 2) != 0)
          v237 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v237 = v234 - 8 * ((v235 >> 2) & 0xF);
        if (v112 < v237)
        {
          *v9 = v106;
          *(a2 - 1) = v107;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v10 <= 191)
        {
          v113 = v9 + 1;
          v115 = v9 == a2 || v113 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v115)
            {
              v116 = 8;
              v117 = v9;
              do
              {
                v118 = v113;
                v119 = v117[1];
                v120 = *(_QWORD *)(*(_QWORD *)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF)) + 24);
                v123 = *(_QWORD *)(v120 - 16);
                v121 = v120 - 16;
                v122 = v123;
                if ((v123 & 2) != 0)
                  v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF)) + 24)
                                   - 32);
                else
                  v124 = v121 - 8 * ((v122 >> 2) & 0xF);
                v125 = *v117;
                v126 = *(_QWORD *)(*(_QWORD *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF)) + 24);
                v129 = *(_QWORD *)(v126 - 16);
                v127 = v126 - 16;
                v128 = v129;
                if ((v129 & 2) != 0)
                  v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF)) + 24)
                                   - 32);
                else
                  v130 = v127 - 8 * ((v128 >> 2) & 0xF);
                if (v124 < v130)
                {
                  v131 = v116;
                  while (1)
                  {
                    *(uint64_t *)((char *)v9 + v131) = v125;
                    v132 = v131 - 8;
                    if (v131 == 8)
                      break;
                    v133 = *(_QWORD *)(*(_QWORD *)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF)) + 24);
                    v136 = *(_QWORD *)(v133 - 16);
                    v134 = v133 - 16;
                    v135 = v136;
                    if ((v136 & 2) != 0)
                      v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v119 - 32 * (*(_DWORD *)(v119 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32);
                    else
                      v137 = v134 - 8 * ((v135 >> 2) & 0xF);
                    v125 = *(uint64_t *)((char *)v9 + v131 - 16);
                    v138 = *(_QWORD *)(*(_QWORD *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF)) + 24);
                    v141 = *(_QWORD *)(v138 - 16);
                    v139 = v138 - 16;
                    v140 = v141;
                    if ((v141 & 2) != 0)
                      v142 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v125 - 32 * (*(_DWORD *)(v125 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32);
                    else
                      v142 = v139 - 8 * ((v140 >> 2) & 0xF);
                    v131 -= 8;
                    if (v137 >= v142)
                    {
                      v143 = (uint64_t *)((char *)v9 + v132);
                      goto LABEL_148;
                    }
                  }
                  v143 = v9;
LABEL_148:
                  *v143 = v119;
                }
                v113 = v118 + 1;
                v116 += 8;
                v117 = v118;
              }
              while (v118 + 1 != a2);
            }
          }
          else if (!v115)
          {
            do
            {
              v238 = v113;
              v239 = v7[1];
              v240 = *(_QWORD *)(*(_QWORD *)(v239 - 32 * (*(_DWORD *)(v239 + 20) & 0x7FFFFFF)) + 24);
              v243 = *(_QWORD *)(v240 - 16);
              v241 = v240 - 16;
              v242 = v243;
              if ((v243 & 2) != 0)
                v244 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v239 - 32 * (*(_DWORD *)(v239 + 20) & 0x7FFFFFF)) + 24)
                                 - 32);
              else
                v244 = v241 - 8 * ((v242 >> 2) & 0xF);
              v245 = *v7;
              v246 = *(_QWORD *)(*(_QWORD *)(*v7 - 32 * (*(_DWORD *)(*v7 + 20) & 0x7FFFFFF)) + 24);
              v249 = *(_QWORD *)(v246 - 16);
              v247 = v246 - 16;
              v248 = v249;
              if ((v249 & 2) != 0)
                v250 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v7 - 32 * (*(_DWORD *)(*v7 + 20) & 0x7FFFFFF)) + 24)
                                 - 32);
              else
                v250 = v247 - 8 * ((v248 >> 2) & 0xF);
              if (v244 < v250)
              {
                v251 = v238;
                do
                {
                  *v251 = v245;
                  v252 = *(_QWORD *)(*(_QWORD *)(v239 - 32 * (*(_DWORD *)(v239 + 20) & 0x7FFFFFF)) + 24);
                  v255 = *(_QWORD *)(v252 - 16);
                  v253 = v252 - 16;
                  v254 = v255;
                  if ((v255 & 2) != 0)
                    v256 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v239 - 32 * (*(_DWORD *)(v239 + 20) & 0x7FFFFFF)) + 24)
                                     - 32);
                  else
                    v256 = v253 - 8 * ((v254 >> 2) & 0xF);
                  v245 = *(v251 - 2);
                  v257 = *(_QWORD *)(*(_QWORD *)(v245 - 32 * (*(_DWORD *)(v245 + 20) & 0x7FFFFFF)) + 24);
                  v260 = *(_QWORD *)(v257 - 16);
                  v258 = v257 - 16;
                  v259 = v260;
                  if ((v260 & 2) != 0)
                    v261 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v245 - 32 * (*(_DWORD *)(v245 + 20) & 0x7FFFFFF)) + 24)
                                     - 32);
                  else
                    v261 = v258 - 8 * ((v259 >> 2) & 0xF);
                  --v251;
                }
                while (v256 < v261);
                *v251 = v239;
              }
              v113 = v238 + 1;
              v7 = v238;
            }
            while (v238 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v144 = (v11 - 2) >> 1;
            v145 = v144;
            do
            {
              v146 = v145;
              if (v144 >= v145)
              {
                v147 = (2 * v145) | 1;
                v148 = &v9[v147];
                if (2 * v146 + 2 < (uint64_t)v11)
                {
                  v149 = *(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF)) + 24);
                  v152 = *(_QWORD *)(v149 - 16);
                  v151 = v149 - 16;
                  v150 = v152;
                  if ((v152 & 2) != 0)
                    v153 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32);
                  else
                    v153 = v151 - 8 * ((v150 >> 2) & 0xF);
                  v154 = v148[1];
                  ++v148;
                  v155 = *(_QWORD *)(*(_QWORD *)(v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF)) + 24);
                  v156 = *(_QWORD *)(v155 - 16);
                  if ((v156 & 2) != 0)
                    v157 = *(_QWORD *)(v155 - 32);
                  else
                    v157 = v155 - 16 - 8 * ((v156 >> 2) & 0xF);
                  if (v153 < v157)
                    v147 = 2 * v146 + 2;
                  else
                    v148 = &v9[v147];
                }
                v158 = *v148;
                v159 = *(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF)) + 24);
                v162 = *(_QWORD *)(v159 - 16);
                v160 = v159 - 16;
                v161 = v162;
                if ((v162 & 2) != 0)
                  v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF)) + 24)
                                   - 32);
                else
                  v163 = v160 - 8 * ((v161 >> 2) & 0xF);
                v164 = &v9[v146];
                v165 = *v164;
                v166 = *(_QWORD *)(*(_QWORD *)(*v164 - 32 * (*(_DWORD *)(*v164 + 20) & 0x7FFFFFF)) + 24);
                v169 = *(_QWORD *)(v166 - 16);
                v167 = v166 - 16;
                v168 = v169;
                if ((v169 & 2) != 0)
                  result = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*v164 - 32 * (*(_DWORD *)(*v164 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32);
                else
                  result = (uint64_t *)(v167 - 8 * ((v168 >> 2) & 0xF));
                if (v163 >= (unint64_t)result)
                {
                  do
                  {
                    v170 = v148;
                    *v164 = v158;
                    if (v144 < v147)
                      break;
                    v171 = (2 * v147) | 1;
                    v148 = &v9[v171];
                    if (2 * v147 + 2 >= (uint64_t)v11)
                    {
                      v147 = (2 * v147) | 1;
                    }
                    else
                    {
                      v172 = *(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF)) + 24);
                      v175 = *(_QWORD *)(v172 - 16);
                      v173 = v172 - 16;
                      v174 = v175;
                      v176 = (v175 & 2) != 0
                           ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32)
                           : v173 - 8 * ((v174 >> 2) & 0xF);
                      v177 = v148[1];
                      ++v148;
                      v178 = *(_QWORD *)(*(_QWORD *)(v177 - 32 * (*(_DWORD *)(v177 + 20) & 0x7FFFFFF)) + 24);
                      v179 = *(_QWORD *)(v178 - 16);
                      v180 = (v179 & 2) != 0 ? *(_QWORD *)(v178 - 32) : v178 - 16 - 8 * ((v179 >> 2) & 0xF);
                      if (v176 < v180)
                      {
                        v147 = 2 * v147 + 2;
                      }
                      else
                      {
                        v148 = &v9[v171];
                        v147 = (2 * v147) | 1;
                      }
                    }
                    v158 = *v148;
                    v181 = *(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF)) + 24);
                    v184 = *(_QWORD *)(v181 - 16);
                    v182 = v181 - 16;
                    v183 = v184;
                    result = (v184 & 2) != 0
                           ? *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*v148 - 32 * (*(_DWORD *)(*v148 + 20) & 0x7FFFFFF))
                                                     + 24)
                                         - 32)
                           : (uint64_t *)(v182 - 8 * ((v183 >> 2) & 0xF));
                    v185 = *(_QWORD *)(*(_QWORD *)(v165 - 32 * (*(_DWORD *)(v165 + 20) & 0x7FFFFFF)) + 24);
                    v188 = *(_QWORD *)(v185 - 16);
                    v186 = v185 - 16;
                    v187 = v188;
                    v189 = (v188 & 2) != 0
                         ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v165 - 32 * (*(_DWORD *)(v165 + 20) & 0x7FFFFFF)) + 24)
                                     - 32)
                         : v186 - 8 * ((v187 >> 2) & 0xF);
                    v164 = v170;
                  }
                  while ((unint64_t)result >= v189);
                  *v170 = v165;
                }
              }
              v145 = v146 - 1;
            }
            while (v146);
            v190 = (unint64_t)v10 >> 3;
            do
            {
              v191 = 0;
              v192 = *v9;
              v193 = v9;
              do
              {
                v194 = &v193[v191 + 1];
                v195 = (2 * v191) | 1;
                v196 = 2 * v191 + 2;
                if (v196 < v190)
                {
                  v197 = *(_QWORD *)(*(_QWORD *)(*v194 - 32 * (*(_DWORD *)(*v194 + 20) & 0x7FFFFFF)) + 24);
                  v200 = *(_QWORD *)(v197 - 16);
                  v198 = v197 - 16;
                  v199 = v200;
                  v201 = (v200 & 2) != 0
                       ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v194 - 32 * (*(_DWORD *)(*v194 + 20) & 0x7FFFFFF)) + 24)
                                   - 32)
                       : v198 - 8 * ((v199 >> 2) & 0xF);
                  v202 = *(_QWORD *)(*(_QWORD *)(v194[1] - 32 * (*(_DWORD *)(v194[1] + 20) & 0x7FFFFFF)) + 24);
                  v204 = *(_QWORD *)(v202 - 16);
                  result = (uint64_t *)(v202 - 16);
                  v203 = v204;
                  v205 = (v204 & 2) != 0
                       ? *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v194[1] - 32 * (*(_DWORD *)(v194[1] + 20) & 0x7FFFFFF))
                                                 + 24)
                                     - 32)
                       : &result[-((v203 >> 2) & 0xF)];
                  if (v201 < (unint64_t)v205)
                  {
                    ++v194;
                    v195 = v196;
                  }
                }
                *v193 = *v194;
                v193 = v194;
                v191 = v195;
              }
              while (v195 <= (uint64_t)((unint64_t)(v190 - 2) >> 1));
              if (v194 == --a2)
              {
                *v194 = v192;
              }
              else
              {
                *v194 = *a2;
                *a2 = v192;
                v206 = (char *)v194 - (char *)v9 + 8;
                if (v206 >= 9)
                {
                  v207 = (((unint64_t)v206 >> 3) - 2) >> 1;
                  v208 = &v9[v207];
                  v209 = *v208;
                  v210 = *(_QWORD *)(*(_QWORD *)(*v208 - 32 * (*(_DWORD *)(*v208 + 20) & 0x7FFFFFF)) + 24);
                  v213 = *(_QWORD *)(v210 - 16);
                  v211 = v210 - 16;
                  v212 = v213;
                  v214 = (v213 & 2) != 0
                       ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v208 - 32 * (*(_DWORD *)(*v208 + 20) & 0x7FFFFFF)) + 24)
                                   - 32)
                       : v211 - 8 * ((v212 >> 2) & 0xF);
                  v215 = *v194;
                  v216 = *(_QWORD *)(*(_QWORD *)(*v194 - 32 * (*(_DWORD *)(*v194 + 20) & 0x7FFFFFF)) + 24);
                  v219 = *(_QWORD *)(v216 - 16);
                  v217 = v216 - 16;
                  v218 = v219;
                  v220 = (v219 & 2) != 0
                       ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v194 - 32 * (*(_DWORD *)(*v194 + 20) & 0x7FFFFFF)) + 24)
                                   - 32)
                       : v217 - 8 * ((v218 >> 2) & 0xF);
                  if (v214 < v220)
                  {
                    do
                    {
                      v221 = v208;
                      *v194 = v209;
                      if (!v207)
                        break;
                      v207 = (v207 - 1) >> 1;
                      v208 = &v9[v207];
                      v209 = *v208;
                      v222 = *(_QWORD *)(*(_QWORD *)(*v208 - 32 * (*(_DWORD *)(*v208 + 20) & 0x7FFFFFF)) + 24);
                      v225 = *(_QWORD *)(v222 - 16);
                      v223 = v222 - 16;
                      v224 = v225;
                      v226 = (v225 & 2) != 0
                           ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v208 - 32 * (*(_DWORD *)(*v208 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32)
                           : v223 - 8 * ((v224 >> 2) & 0xF);
                      v227 = *(_QWORD *)(*(_QWORD *)(v215 - 32 * (*(_DWORD *)(v215 + 20) & 0x7FFFFFF)) + 24);
                      v230 = *(_QWORD *)(v227 - 16);
                      v228 = v227 - 16;
                      v229 = v230;
                      v231 = (v230 & 2) != 0
                           ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v215 - 32 * (*(_DWORD *)(v215 + 20) & 0x7FFFFFF))
                                                   + 24)
                                       - 32)
                           : v228 - 8 * ((v229 >> 2) & 0xF);
                      v194 = v221;
                    }
                    while (v226 < v231);
                    *v221 = v215;
                  }
                }
              }
            }
            while (v190-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
        }
        else
        {
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(*(v7 - 1) - 32 * (*(_DWORD *)(*(v7 - 1) + 20) & 0x7FFFFFF)) + 24);
          v22 = *(_QWORD *)(v19 - 16);
          v20 = v19 - 16;
          v21 = v22;
          if ((v22 & 2) != 0)
            v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(v7 - 1) - 32 * (*(_DWORD *)(*(v7 - 1) + 20) & 0x7FFFFFF))
                                        + 24)
                            - 32);
          else
            v23 = v20 - 8 * ((v21 >> 2) & 0xF);
          v16 = *(_QWORD *)(*(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24);
          v24 = v16 - 16;
          v17 = *(_QWORD *)(v16 - 16);
          if ((v17 & 2) != 0)
          {
            v25 = *(_QWORD *)(v16 - 32);
            if (v23 < v25)
            {
              v18 = 1;
              goto LABEL_19;
            }
          }
          else
          {
            v25 = v24 - 8 * ((v17 >> 2) & 0xF);
            if (v23 < v25)
            {
              v18 = 0;
              goto LABEL_19;
            }
          }
          v64 = *(_QWORD *)(*(_QWORD *)(*v8 - 32 * (*(_DWORD *)(*v8 + 20) & 0x7FFFFFF)) + 24);
          v67 = *(_QWORD *)(v64 - 16);
          v65 = v64 - 16;
          v66 = v67;
          if ((v67 & 2) != 0)
            v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v8 - 32 * (*(_DWORD *)(*v8 + 20) & 0x7FFFFFF)) + 24) - 32);
          else
            v68 = v65 - 8 * ((v66 >> 2) & 0xF);
          v69 = v24 - 8 * ((v17 >> 2) & 0xF);
          if (v25 >= v68)
          {
            v75 = v7 + 1;
            do
            {
              v9 = v75;
              if (v75 >= a2)
                break;
              v76 = v69;
              if ((v17 & 2) != 0)
                v76 = *(_QWORD *)(v16 - 32);
              v77 = *(_QWORD *)(*(_QWORD *)(*v75 - 32 * (*(_DWORD *)(*v75 + 20) & 0x7FFFFFF)) + 24);
              v80 = *(_QWORD *)(v77 - 16);
              v78 = v77 - 16;
              v79 = v80;
              v81 = (v80 & 2) != 0
                  ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v75 - 32 * (*(_DWORD *)(*v75 + 20) & 0x7FFFFFF)) + 24)
                              - 32)
                  : v78 - 8 * ((v79 >> 2) & 0xF);
              ++v75;
            }
            while (v76 >= v81);
          }
          else
          {
            v9 = v7;
            do
            {
              v70 = v69;
              if ((v17 & 2) != 0)
                v70 = *(_QWORD *)(v16 - 32);
              v71 = v9[1];
              ++v9;
              v72 = *(_QWORD *)(*(_QWORD *)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF)) + 24);
              v73 = *(_QWORD *)(v72 - 16);
              if ((v73 & 2) != 0)
                v74 = *(_QWORD *)(v72 - 32);
              else
                v74 = v72 - 16 - 8 * ((v73 >> 2) & 0xF);
            }
            while (v70 >= v74);
          }
          v82 = a2;
          if (v9 < a2)
          {
            v82 = a2;
            do
            {
              v83 = v69;
              if ((v17 & 2) != 0)
                v83 = *(_QWORD *)(v16 - 32);
              v84 = *--v82;
              v85 = *(_QWORD *)(*(_QWORD *)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF)) + 24);
              v86 = *(_QWORD *)(v85 - 16);
              if ((v86 & 2) != 0)
                v87 = *(_QWORD *)(v85 - 32);
              else
                v87 = v85 - 16 - 8 * ((v86 >> 2) & 0xF);
            }
            while (v83 < v87);
          }
          if (v9 < v82)
          {
            v88 = *v9;
            v89 = *v82;
            do
            {
              *v9 = v89;
              *v82 = v88;
              v90 = *(_QWORD *)(*(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24);
              v91 = *(_QWORD *)(v90 - 16);
              do
              {
                v92 = v9[1];
                ++v9;
                v88 = v92;
                v93 = v90 - 16 - 8 * ((v91 >> 2) & 0xF);
                if ((v91 & 2) != 0)
                  v93 = *(_QWORD *)(v90 - 32);
                v94 = *(_QWORD *)(*(_QWORD *)(v88 - 32 * (*(_DWORD *)(v88 + 20) & 0x7FFFFFF)) + 24);
                v97 = *(_QWORD *)(v94 - 16);
                v95 = v94 - 16;
                v96 = v97;
                if ((v97 & 2) != 0)
                  v98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 - 32 * (*(_DWORD *)(v88 + 20) & 0x7FFFFFF)) + 24)
                                  - 32);
                else
                  v98 = v95 - 8 * ((v96 >> 2) & 0xF);
              }
              while (v93 >= v98);
              do
              {
                v99 = *--v82;
                v89 = v99;
                v100 = v90 - 16 - 8 * ((v91 >> 2) & 0xF);
                if ((v91 & 2) != 0)
                  v100 = *(_QWORD *)(v90 - 32);
                v101 = *(_QWORD *)(*(_QWORD *)(v89 - 32 * (*(_DWORD *)(v89 + 20) & 0x7FFFFFF)) + 24);
                v103 = *(uint64_t **)(v101 - 16);
                v102 = v101 - 16;
                result = v103;
                if ((v103 & 2) != 0)
                  v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 - 32 * (*(_DWORD *)(v89 + 20) & 0x7FFFFFF)) + 24)
                                   - 32);
                else
                  v104 = v102 - 8 * (((unint64_t)result >> 2) & 0xF);
              }
              while (v100 < v104);
            }
            while (v9 < v82);
          }
          v105 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v105;
          a4 = 0;
          *v105 = v15;
          continue;
        }
        v16 = *(_QWORD *)(*(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24);
        v17 = *(_QWORD *)(v16 - 16);
        v18 = v17 & 2;
LABEL_19:
        v26 = 0;
        v27 = v16 - 8 * ((v17 >> 2) & 0xF) - 16;
        do
        {
          v28 = v7[v26 + 1];
          v29 = *(_QWORD *)(*(_QWORD *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF)) + 24);
          v32 = *(_QWORD *)(v29 - 16);
          v30 = v29 - 16;
          v31 = v32;
          if ((v32 & 2) != 0)
            v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF)) + 24) - 32);
          else
            v33 = v30 - 8 * ((v31 >> 2) & 0xF);
          v34 = v27;
          if (v18)
            v34 = *(_QWORD *)(v16 - 32);
          ++v26;
        }
        while (v33 < v34);
        v35 = &v7[v26];
        v36 = a2;
        if (v26 == 1)
        {
          v36 = a2;
          do
          {
            if (v35 >= v36)
              break;
            v42 = *--v36;
            v43 = *(_QWORD *)(*(_QWORD *)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF)) + 24);
            v44 = *(_QWORD *)(v43 - 16);
            if ((v44 & 2) != 0)
              v45 = *(_QWORD *)(v43 - 32);
            else
              v45 = v43 - 16 - 8 * ((v44 >> 2) & 0xF);
            v46 = v27;
            if (v18)
              v46 = *(_QWORD *)(v16 - 32);
          }
          while (v45 >= v46);
        }
        else
        {
          do
          {
            v37 = *--v36;
            v38 = *(_QWORD *)(*(_QWORD *)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF)) + 24);
            v39 = *(_QWORD *)(v38 - 16);
            if ((v39 & 2) != 0)
              v40 = *(_QWORD *)(v38 - 32);
            else
              v40 = v38 - 16 - 8 * ((v39 >> 2) & 0xF);
            v41 = v27;
            if (v18)
              v41 = *(_QWORD *)(v16 - 32);
          }
          while (v40 >= v41);
        }
        if (v35 >= v36)
        {
          v62 = v35 - 1;
        }
        else
        {
          v47 = *v36;
          v48 = v35;
          v49 = v36;
          do
          {
            *v48 = v47;
            *v49 = v28;
            v50 = *(_QWORD *)(*(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)) + 24);
            v51 = *(_QWORD *)(v50 - 16);
            do
            {
              v52 = v48[1];
              ++v48;
              v28 = v52;
              v53 = *(_QWORD *)(*(_QWORD *)(v52 - 32 * (*(_DWORD *)(v52 + 20) & 0x7FFFFFF)) + 24);
              v54 = *(_QWORD *)(v53 - 16);
              if ((v54 & 2) != 0)
                v55 = *(_QWORD *)(v53 - 32);
              else
                v55 = v53 - 16 - 8 * ((v54 >> 2) & 0xF);
              v56 = v50 - 16 - 8 * ((v51 >> 2) & 0xF);
              if ((v51 & 2) != 0)
                v56 = *(_QWORD *)(v50 - 32);
            }
            while (v55 < v56);
            do
            {
              v57 = *--v49;
              v47 = v57;
              v58 = *(_QWORD *)(*(_QWORD *)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF)) + 24);
              v59 = *(_QWORD *)(v58 - 16);
              if ((v59 & 2) != 0)
                v60 = *(_QWORD *)(v58 - 32);
              else
                v60 = v58 - 16 - 8 * ((v59 >> 2) & 0xF);
              v61 = v50 - 16 - 8 * ((v51 >> 2) & 0xF);
              if ((v51 & 2) != 0)
                v61 = *(_QWORD *)(v50 - 32);
            }
            while (v60 >= v61);
          }
          while (v48 < v49);
          v62 = v48 - 1;
        }
        if (v62 != v7)
          *v7 = *v62;
        *v62 = v15;
        if (v35 < v36)
        {
LABEL_65:
          a4 = 0;
          v9 = v62 + 1;
          continue;
        }
        v9 = v62 + 1;
        if (!(_DWORD)result)
        {
          if (v63)
            continue;
          goto LABEL_65;
        }
        a2 = v62;
        if (!v63)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v11 = *a4;
  v12 = *(_QWORD *)(*(_QWORD *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24);
  v15 = *(_QWORD *)(v12 - 16);
  v13 = v12 - 16;
  v14 = v15;
  if ((v15 & 2) != 0)
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a5 - 32 * (*(_DWORD *)(*a5 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v16 = v13 - 8 * ((v14 >> 2) & 0xF);
  v17 = *(_QWORD *)(*(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 24);
  v20 = *(_QWORD *)(v17 - 16);
  v18 = v17 - 16;
  v19 = v20;
  if ((v20 & 2) != 0)
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v21 = v18 - 8 * ((v19 >> 2) & 0xF);
  if (v16 < v21)
  {
    *a4 = *a5;
    *a5 = v11;
    v22 = *a3;
    v23 = *(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
    v26 = *(_QWORD *)(v23 - 16);
    v24 = v23 - 16;
    v25 = v26;
    v27 = (v26 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v24 - 8 * ((v25 >> 2) & 0xF);
    v28 = *(_QWORD *)(*(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24);
    v31 = *(_QWORD *)(v28 - 16);
    v29 = v28 - 16;
    v30 = v31;
    v32 = (v31 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v29 - 8 * ((v30 >> 2) & 0xF);
    if (v27 < v32)
    {
      *a3 = *a4;
      *a4 = v22;
      v33 = *a2;
      v34 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
      v37 = *(_QWORD *)(v34 - 16);
      v35 = v34 - 16;
      v36 = v37;
      v38 = (v37 & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32)
          : v35 - 8 * ((v36 >> 2) & 0xF);
      v39 = *(_QWORD *)(*(_QWORD *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)) + 24);
      v42 = *(_QWORD *)(v39 - 16);
      v40 = v39 - 16;
      v41 = v42;
      v43 = (v42 & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF)) + 24) - 32)
          : v40 - 8 * ((v41 >> 2) & 0xF);
      if (v38 < v43)
      {
        *a2 = *a3;
        *a3 = v33;
        v44 = *a1;
        v45 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
        v48 = *(_QWORD *)(v45 - 16);
        v46 = v45 - 16;
        v47 = v48;
        if ((v48 & 2) != 0)
          v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v49 = v46 - 8 * ((v47 >> 2) & 0xF);
        v50 = *(_QWORD *)(*(_QWORD *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)) + 24);
        v53 = *(_QWORD *)(v50 - 16);
        v51 = v50 - 16;
        v52 = v53;
        if ((v53 & 2) != 0)
          v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v54 = v51 - 8 * ((v52 >> 2) & 0xF);
        if (v49 < v54)
        {
          *a1 = *a2;
          *a2 = v44;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
  v6 = v5 - 16;
  v7 = *(_QWORD *)(v5 - 16);
  if ((v7 & 2) != 0)
    v8 = *(_QWORD *)(v5 - 32);
  else
    v8 = v6 - 8 * ((v7 >> 2) & 0xF);
  v9 = *(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
  v12 = *(_QWORD *)(v9 - 16);
  v10 = v9 - 16;
  v11 = v12;
  if ((v12 & 2) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v13 = v10 - 8 * ((v11 >> 2) & 0xF);
  v14 = *a3;
  v15 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  v17 = v15 - 16;
  v16 = *(_QWORD *)(v15 - 16);
  if (v8 >= v13)
  {
    if ((v16 & 2) != 0)
    {
      v20 = *(_QWORD *)(v15 - 32);
      if ((v7 & 2) != 0)
        goto LABEL_13;
    }
    else
    {
      v20 = v17 - 8 * ((v16 >> 2) & 0xF);
      if ((v7 & 2) != 0)
      {
LABEL_13:
        v21 = *(_QWORD *)(v5 - 32);
LABEL_20:
        if (v20 < v21)
        {
          *a2 = v14;
          *a3 = v3;
          v22 = *result;
          v23 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
          v26 = *(_QWORD *)(v23 - 16);
          v24 = v23 - 16;
          v25 = v26;
          v27 = (v26 & 2) != 0
              ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32)
              : v24 - 8 * ((v25 >> 2) & 0xF);
          v33 = *(_QWORD *)(*(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24);
          v36 = *(_QWORD *)(v33 - 16);
          v34 = v33 - 16;
          v35 = v36;
          v37 = (v36 & 2) != 0
              ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)) + 24) - 32)
              : v34 - 8 * ((v35 >> 2) & 0xF);
          if (v27 < v37)
          {
            *result = *a2;
            *a2 = v22;
          }
        }
        return result;
      }
    }
    v21 = v6 - 8 * ((v7 >> 2) & 0xF);
    goto LABEL_20;
  }
  if ((v16 & 2) != 0)
  {
    v18 = *(_QWORD *)(v15 - 32);
    if ((v7 & 2) != 0)
      goto LABEL_10;
LABEL_15:
    v19 = v6 - 8 * ((v7 >> 2) & 0xF);
    goto LABEL_16;
  }
  v18 = v17 - 8 * ((v16 >> 2) & 0xF);
  if ((v7 & 2) == 0)
    goto LABEL_15;
LABEL_10:
  v19 = *(_QWORD *)(v5 - 32);
LABEL_16:
  if (v18 < v19)
  {
    *result = v14;
LABEL_37:
    *a3 = v4;
    return result;
  }
  *result = v3;
  *a2 = v4;
  v28 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
  v31 = *(_QWORD *)(v28 - 16);
  v29 = v28 - 16;
  v30 = v31;
  if ((v31 & 2) != 0)
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v32 = v29 - 8 * ((v30 >> 2) & 0xF);
  v38 = *(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24);
  v41 = *(_QWORD *)(v38 - 16);
  v39 = v38 - 16;
  v40 = v41;
  if ((v41 & 2) != 0)
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v42 = v39 - 8 * ((v40 >> 2) & 0xF);
  if (v32 < v42)
  {
    *a2 = *a3;
    goto LABEL_37;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD *)(*(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 24);
      v11 = *(_QWORD *)(v8 - 16);
      v9 = v8 - 16;
      v10 = v11;
      if ((v11 & 2) != 0)
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 24) - 32);
      else
        v12 = v9 - 8 * ((v10 >> 2) & 0xF);
      v42 = *(_QWORD *)(*(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)) + 24);
      v45 = *(_QWORD *)(v42 - 16);
      v43 = v42 - 16;
      v44 = v45;
      if ((v45 & 2) != 0)
        v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)) + 24) - 32);
      else
        v46 = v43 - 8 * ((v44 >> 2) & 0xF);
      if (v12 < v46)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v13 = a1 + 2;
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 24;
      break;
  }
  while (1)
  {
    v17 = *v14;
    v18 = *(_QWORD *)(*(_QWORD *)(*v14 - 32 * (*(_DWORD *)(*v14 + 20) & 0x7FFFFFF)) + 24);
    v21 = *(_QWORD *)(v18 - 16);
    v19 = v18 - 16;
    v20 = v21;
    v22 = (v21 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v14 - 32 * (*(_DWORD *)(*v14 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v19 - 8 * ((v20 >> 2) & 0xF);
    v23 = *v13;
    v24 = *(_QWORD *)(*(_QWORD *)(*v13 - 32 * (*(_DWORD *)(*v13 + 20) & 0x7FFFFFF)) + 24);
    v27 = *(_QWORD *)(v24 - 16);
    v25 = v24 - 16;
    v26 = v27;
    v28 = (v27 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v13 - 32 * (*(_DWORD *)(*v13 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v25 - 8 * ((v26 >> 2) & 0xF);
    if (v22 < v28)
    {
      v29 = v16;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v29) = v23;
        v30 = v29 - 8;
        if (v29 == 8)
          break;
        v31 = *(_QWORD *)(*(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24);
        v34 = *(_QWORD *)(v31 - 16);
        v32 = v31 - 16;
        v33 = v34;
        if ((v34 & 2) != 0)
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v35 = v32 - 8 * ((v33 >> 2) & 0xF);
        v23 = *(uint64_t *)((char *)a1 + v29 - 16);
        v36 = *(_QWORD *)(*(_QWORD *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF)) + 24);
        v39 = *(_QWORD *)(v36 - 16);
        v37 = v36 - 16;
        v38 = v39;
        if ((v39 & 2) != 0)
          v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF)) + 24) - 32);
        else
          v40 = v37 - 8 * ((v38 >> 2) & 0xF);
        v29 -= 8;
        if (v35 >= v40)
        {
          v41 = (uint64_t *)((char *)a1 + v30);
          goto LABEL_24;
        }
      }
      v41 = a1;
LABEL_24:
      *v41 = v17;
      if (++v15 == 8)
        return v14 + 1 == a2;
    }
    v13 = v14;
    v16 += 8;
    if (++v14 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::Verifier::verifyNoAliasScopeDecl(void)::$_0 &,llvm::IntrinsicInst **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v9 = *a3;
  v10 = *(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24);
  v13 = *(_QWORD *)(v10 - 16);
  v11 = v10 - 16;
  v12 = v13;
  if ((v13 & 2) != 0)
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 - 32 * (*(_DWORD *)(*a4 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v14 = v11 - 8 * ((v12 >> 2) & 0xF);
  v15 = *(_QWORD *)(*(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24);
  v18 = *(_QWORD *)(v15 - 16);
  v16 = v15 - 16;
  v17 = v18;
  if ((v18 & 2) != 0)
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)) + 24) - 32);
  else
    v19 = v16 - 8 * ((v17 >> 2) & 0xF);
  if (v14 < v19)
  {
    *a3 = *a4;
    *a4 = v9;
    v20 = *a2;
    v21 = *(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24);
    v24 = *(_QWORD *)(v21 - 16);
    v22 = v21 - 16;
    v23 = v24;
    v25 = (v24 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 - 32 * (*(_DWORD *)(*a3 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v22 - 8 * ((v23 >> 2) & 0xF);
    v26 = *(_QWORD *)(*(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)) + 24);
    v29 = *(_QWORD *)(v26 - 16);
    v27 = v26 - 16;
    v28 = v29;
    v30 = (v29 & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)) + 24) - 32)
        : v27 - 8 * ((v28 >> 2) & 0xF);
    if (v25 < v30)
    {
      *a2 = *a3;
      *a3 = v20;
      v31 = *a1;
      v32 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
      v35 = *(_QWORD *)(v32 - 16);
      v33 = v32 - 16;
      v34 = v35;
      if ((v35 & 2) != 0)
        v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24) - 32);
      else
        v36 = v33 - 8 * ((v34 >> 2) & 0xF);
      v37 = *(_QWORD *)(*(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24);
      v40 = *(_QWORD *)(v37 - 16);
      v38 = v37 - 16;
      v39 = v40;
      if ((v40 & 2) != 0)
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF)) + 24) - 32);
      else
        v41 = v38 - 8 * ((v39 >> 2) & 0xF);
      if (v36 < v41)
      {
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

void `anonymous namespace'::Verifier::visitAliaseeSubExpr(llvm::raw_ostream **a1, llvm::SmallPtrSetImplBase *a2, const llvm::Value *a3, uint64_t a4)
{
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  const llvm::Value *v18;
  _QWORD v19[2];
  char v20;
  __int16 v21;

  v8 = *(unsigned __int8 *)(a4 + 16);
  if ((*((_DWORD *)a3 + 8) & 0xF) == 1)
  {
    if (v8 <= 3 && (*(_DWORD *)(a4 + 32) & 0xF) == 1)
    {
      if (v8 != 1)
        return;
      goto LABEL_37;
    }
    v12 = "available_externally alias must point to available_externally global value";
    goto LABEL_15;
  }
  if (v8 <= 3)
  {
    if ((*(_DWORD *)(a4 + 32) & 0xF) != 1)
    {
      if (*(_BYTE *)(a4 + 16))
      {
        if (v8 == 1)
        {
LABEL_37:
          llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert((uint64_t)v19, a2, (void *)a4);
          if (!v20)
          {
            v12 = "Aliases cannot form a cycle";
            goto LABEL_15;
          }
          if ((llvm::GlobalValue::isInterposable((llvm::GlobalValue *)a4) & 1) != 0)
          {
            v12 = "Alias cannot point to an interposable alias";
            goto LABEL_15;
          }
          v8 = *(unsigned __int8 *)(a4 + 16);
          goto LABEL_7;
        }
        if (v8 != 3 || (*(_DWORD *)(a4 + 20) & 0x7FFFFFF) != 0)
          return;
      }
      else if ((*(_DWORD *)(a4 + 32) & 0x1000000) != 0 || *(_QWORD *)(a4 + 72) != a4 + 72)
      {
        return;
      }
    }
    v12 = "Alias must point to a definition";
LABEL_15:
    v18 = a3;
    v19[0] = v12;
    v21 = 259;
    llvm::VerifierSupport::CheckFailed<llvm::Function const*>(a1, (const llvm::Twine *)v19, &v18);
    return;
  }
LABEL_7:
  if (v8 == 5)
  v9 = *(_DWORD *)(a4 + 20);
  if ((v9 & 0x40000000) == 0)
  {
    v10 = v9 & 0x7FFFFFF;
    v11 = (uint64_t *)(a4 - 32 * v10);
    if (!v10)
      return;
    goto LABEL_17;
  }
  v11 = *(uint64_t **)(a4 - 8);
  v10 = v9 & 0x7FFFFFF;
  if (v10)
  {
LABEL_17:
    for (i = 32 * v10; i; i -= 32)
    {
      v14 = *v11;
      v15 = *(unsigned __int8 *)(*v11 + 16);
      if (*v11)
        v16 = v15 == 1;
      else
        v16 = 0;
      if (v16)
      {
        v14 = *(_QWORD *)(v14 - 32);
      }
      else
      {
        if (v14)
          v17 = v15 > 0x14;
        else
          v17 = 1;
        if (v17)
          goto LABEL_30;
      }
LABEL_30:
      v11 += 4;
    }
  }
}

llvm::raw_ostream *llvm::VerifierSupport::Write(llvm::raw_ostream *this, const llvm::NamedMDNode *a2)
{
  llvm::raw_ostream *v2;
  _BYTE *v3;

  if (a2)
  {
    v2 = this;
    llvm::NamedMDNode::print(a2, *(llvm::raw_ostream **)this, (llvm::raw_ostream *)((char *)this + 16), 0);
    this = *(llvm::raw_ostream **)v2;
    v3 = *(_BYTE **)(*(_QWORD *)v2 + 32);
    if ((unint64_t)v3 >= *(_QWORD *)(*(_QWORD *)v2 + 24))
    {
      return llvm::raw_ostream::write(this, 10);
    }
    else
    {
      *((_QWORD *)this + 4) = v3 + 1;
      *v3 = 10;
    }
  }
  return this;
}

void llvm::VerifierSupport::CheckFailed<llvm::Instruction *,llvm::MDNode const*,llvm::APInt *>(llvm::raw_ostream **a1, const llvm::Twine *a2, const llvm::Value **a3, unsigned __int8 **a4, llvm::APInt **a5)
{
  llvm::raw_ostream *v9;
  _BYTE *v10;

  llvm::VerifierSupport::CheckFailed(a1, a2);
  if (*a1)
  {
    if (*a3)
      llvm::VerifierSupport::Write(a1, *a3);
    llvm::VerifierSupport::Write((llvm::raw_ostream *)a1, *a4);
    if (*a5)
    {
      v9 = *a1;
      llvm::APInt::print(*a5, v9, 1);
      v10 = (_BYTE *)*((_QWORD *)v9 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v10 + 1;
        *v10 = 10;
      }
    }
  }
}

uint64_t _GLOBAL__sub_I_Verifier_cpp()
{
  uint64_t v0;
  __n128 v2;
  char v3;
  char *v4;
  int v5;

  v5 = 1;
  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Ensure that llvm.experimental.noalias.scope.decl for identical scopes are not dominating";
  v2.n128_u64[1] = 88;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [30],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::desc>((llvm::cl::Option *)&_MergedGlobals_35, "verify-noalias-scope-decl-dom", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_35, &dword_24A800000);
  v0 = llvm::cl::Option::Option((uint64_t)qword_257965178, 0, 0);
  byte_2579651F8 = 0;
  qword_257965200 = (uint64_t)&off_251C12500;
  *(_QWORD *)&word_257965208 = 0;
  qword_257965178[0] = (uint64_t)off_251C123A8;
  qword_257965210 = (uint64_t)&off_251C12520;
  qword_257965218[0] = &off_251C12410;
  qword_257965230 = (uint64_t)qword_257965218;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"enable-swifttailcc-musttail-check", 0x21uLL);
  byte_2579651F8 = 0;
  word_257965208 = 256;
  qword_257965198 = (uint64_t)"Check that tail calls from swifttailcc functions to swifttailcc functions are marked musttail.";
  unk_2579651A0 = 94;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_257965178);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, qword_257965178, &dword_24A800000);
}

const char *llvm::dwarf::TagString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  int v3;
  const char *v4;
  int v5;
  const char *v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  BOOL v13;
  const char *v14;

  v1 = (int)this;
  result = 0;
  if (v1 <= 16895)
  {
    switch(v1)
    {
      case 0:
        result = "DW_TAG_null";
        break;
      case 1:
        result = "DW_TAG_array_type";
        break;
      case 2:
        result = "DW_TAG_class_type";
        break;
      case 3:
        result = "DW_TAG_entry_point";
        break;
      case 4:
        result = "DW_TAG_enumeration_type";
        break;
      case 5:
        result = "DW_TAG_formal_parameter";
        break;
      case 6:
      case 7:
      case 9:
      case 12:
      case 14:
      case 20:
      case 62:
        return result;
      case 8:
        result = "DW_TAG_imported_declaration";
        break;
      case 10:
        result = "DW_TAG_label";
        break;
      case 11:
        result = "DW_TAG_lexical_block";
        break;
      case 13:
        result = "DW_TAG_member";
        break;
      case 15:
        result = "DW_TAG_pointer_type";
        break;
      case 16:
        result = "DW_TAG_reference_type";
        break;
      case 17:
        result = "DW_TAG_compile_unit";
        break;
      case 18:
        result = "DW_TAG_string_type";
        break;
      case 19:
        result = "DW_TAG_structure_type";
        break;
      case 21:
        result = "DW_TAG_subroutine_type";
        break;
      case 22:
        result = "DW_TAG_typedef";
        break;
      case 23:
        result = "DW_TAG_union_type";
        break;
      case 24:
        result = "DW_TAG_unspecified_parameters";
        break;
      case 25:
        result = "DW_TAG_variant";
        break;
      case 26:
        result = "DW_TAG_common_block";
        break;
      case 27:
        result = "DW_TAG_common_inclusion";
        break;
      case 28:
        result = "DW_TAG_inheritance";
        break;
      case 29:
        result = "DW_TAG_inlined_subroutine";
        break;
      case 30:
        result = "DW_TAG_module";
        break;
      case 31:
        result = "DW_TAG_ptr_to_member_type";
        break;
      case 32:
        result = "DW_TAG_set_type";
        break;
      case 33:
        result = "DW_TAG_subrange_type";
        break;
      case 34:
        result = "DW_TAG_with_stmt";
        break;
      case 35:
        result = "DW_TAG_access_declaration";
        break;
      case 36:
        result = "DW_TAG_base_type";
        break;
      case 37:
        result = "DW_TAG_catch_block";
        break;
      case 38:
        result = "DW_TAG_const_type";
        break;
      case 39:
        result = "DW_TAG_constant";
        break;
      case 40:
        result = "DW_TAG_enumerator";
        break;
      case 41:
        result = "DW_TAG_file_type";
        break;
      case 42:
        result = "DW_TAG_friend";
        break;
      case 43:
        result = "DW_TAG_namelist";
        break;
      case 44:
        result = "DW_TAG_namelist_item";
        break;
      case 45:
        result = "DW_TAG_packed_type";
        break;
      case 46:
        result = "DW_TAG_subprogram";
        break;
      case 47:
        result = "DW_TAG_template_type_parameter";
        break;
      case 48:
        result = "DW_TAG_template_value_parameter";
        break;
      case 49:
        result = "DW_TAG_thrown_type";
        break;
      case 50:
        result = "DW_TAG_try_block";
        break;
      case 51:
        result = "DW_TAG_variant_part";
        break;
      case 52:
        result = "DW_TAG_variable";
        break;
      case 53:
        result = "DW_TAG_volatile_type";
        break;
      case 54:
        result = "DW_TAG_dwarf_procedure";
        break;
      case 55:
        result = "DW_TAG_restrict_type";
        break;
      case 56:
        result = "DW_TAG_interface_type";
        break;
      case 57:
        result = "DW_TAG_namespace";
        break;
      case 58:
        result = "DW_TAG_imported_module";
        break;
      case 59:
        result = "DW_TAG_unspecified_type";
        break;
      case 60:
        result = "DW_TAG_partial_unit";
        break;
      case 61:
        result = "DW_TAG_imported_unit";
        break;
      case 63:
        result = "DW_TAG_condition";
        break;
      case 64:
        result = "DW_TAG_shared_type";
        break;
      case 65:
        result = "DW_TAG_type_unit";
        break;
      case 66:
        result = "DW_TAG_rvalue_reference_type";
        break;
      case 67:
        result = "DW_TAG_template_alias";
        break;
      case 68:
        result = "DW_TAG_coarray_type";
        break;
      case 69:
        result = "DW_TAG_generic_subrange";
        break;
      case 70:
        result = "DW_TAG_dynamic_type";
        break;
      case 71:
        result = "DW_TAG_atomic_type";
        break;
      case 72:
        result = "DW_TAG_call_site";
        break;
      case 73:
        result = "DW_TAG_call_site_parameter";
        break;
      case 74:
        result = "DW_TAG_skeleton_unit";
        break;
      case 75:
        result = "DW_TAG_immutable_type";
        break;
      default:
        switch(v1)
        {
          case 16641:
            result = "DW_TAG_format_label";
            break;
          case 16642:
            result = "DW_TAG_function_template";
            break;
          case 16643:
            result = "DW_TAG_class_template";
            break;
          case 16644:
            result = "DW_TAG_GNU_BINCL";
            break;
          case 16645:
            result = "DW_TAG_GNU_EINCL";
            break;
          case 16646:
            result = "DW_TAG_GNU_template_template_param";
            break;
          case 16647:
            result = "DW_TAG_GNU_template_parameter_pack";
            break;
          case 16648:
            result = "DW_TAG_GNU_formal_parameter_pack";
            break;
          case 16649:
            result = "DW_TAG_GNU_call_site";
            break;
          case 16650:
            result = "DW_TAG_GNU_call_site_parameter";
            break;
          default:
            v13 = v1 == 16513;
            v14 = "DW_TAG_MIPS_loop";
            goto LABEL_55;
        }
        break;
    }
    return result;
  }
  if (v1 <= 20737)
  {
    if (v1 > 17150)
    {
      v3 = 17151;
      v4 = "DW_TAG_SUN_hi";
      v5 = 17152;
      v6 = "DW_TAG_LLVM_ptrauth_type";
      v7 = v1 == 20737;
      v8 = "DW_TAG_ALTIUM_circ_type";
LABEL_27:
      if (!v7)
        v8 = 0;
      if (v1 == v5)
        v11 = v6;
      else
        v11 = v8;
      if (v1 == v3)
        return v4;
      else
        return v11;
    }
    switch(v1)
    {
      case 16896:
        result = "DW_TAG_APPLE_property";
        break;
      case 16897:
        result = "DW_TAG_SUN_function_template";
        break;
      case 16898:
        result = "DW_TAG_SUN_class_template";
        break;
      case 16899:
        result = "DW_TAG_SUN_struct_template";
        break;
      case 16900:
        result = "DW_TAG_SUN_union_template";
        break;
      case 16901:
        result = "DW_TAG_SUN_indirect_inheritance";
        break;
      case 16902:
        result = "DW_TAG_SUN_codeflags";
        break;
      case 16903:
        result = "DW_TAG_SUN_memop_info";
        break;
      case 16904:
        result = "DW_TAG_SUN_omp_child_func";
        break;
      case 16905:
        result = "DW_TAG_SUN_rtti_descriptor";
        break;
      case 16906:
        result = "DW_TAG_SUN_dtor_info";
        break;
      case 16907:
        result = "DW_TAG_SUN_dtor";
        break;
      case 16908:
        result = "DW_TAG_SUN_f90_interface";
        break;
      case 16909:
        result = "DW_TAG_SUN_fortran_vax_structure";
        break;
      default:
        return result;
    }
  }
  else
  {
    if (v1 <= 34661)
    {
      if (v1 >= 24576)
      {
        switch(v1)
        {
          case 32772:
            result = "DW_TAG_GHS_namespace";
            break;
          case 32773:
            result = "DW_TAG_GHS_using_namespace";
            break;
          case 32774:
            result = "DW_TAG_GHS_using_declaration";
            break;
          case 32775:
            result = "DW_TAG_GHS_template_templ_param";
            break;
          default:
            v12 = "DW_TAG_UPC_shared_type";
            if (v1 != 34661)
              v12 = 0;
            if (v1 == 24576)
              result = "DW_TAG_LLVM_annotation";
            else
              result = v12;
            break;
        }
        return result;
      }
      v3 = 20738;
      v4 = "DW_TAG_ALTIUM_mwa_circ_type";
      v5 = 20739;
      v6 = "DW_TAG_ALTIUM_rev_carry_type";
      v7 = v1 == 20753;
      v8 = "DW_TAG_ALTIUM_rom";
      goto LABEL_27;
    }
    if (v1 <= 40991)
    {
      v9 = "DW_TAG_PGI_kanji_type";
      if (v1 != 40960)
        v9 = 0;
      if (v1 == 34663)
        v10 = "DW_TAG_UPC_relaxed";
      else
        v10 = v9;
      if (v1 == 34662)
        return "DW_TAG_UPC_strict_type";
      else
        return v10;
    }
    else
    {
      switch(v1)
      {
        case 45056:
          result = "DW_TAG_BORLAND_property";
          break;
        case 45057:
          result = "DW_TAG_BORLAND_Delphi_string";
          break;
        case 45058:
          result = "DW_TAG_BORLAND_Delphi_dynamic_array";
          break;
        case 45059:
          result = "DW_TAG_BORLAND_Delphi_set";
          break;
        case 45060:
          result = "DW_TAG_BORLAND_Delphi_variant";
          break;
        default:
          v13 = v1 == 40992;
          v14 = "DW_TAG_PGI_interface_block";
LABEL_55:
          if (v13)
            result = v14;
          else
            result = 0;
          break;
      }
    }
  }
  return result;
}

const char *llvm::dwarf::OperationEncodingString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (int)this;
  result = 0;
  switch(v1)
  {
    case 3:
      result = "DW_OP_addr";
      break;
    case 4:
    case 5:
    case 7:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 231:
    case 233:
    case 234:
    case 235:
    case 236:
    case 239:
    case 241:
    case 242:
    case 244:
    case 245:
    case 246:
    case 247:
    case 249:
    case 250:
      return result;
    case 6:
      result = "DW_OP_deref";
      break;
    case 8:
      result = "DW_OP_const1u";
      break;
    case 9:
      result = "DW_OP_const1s";
      break;
    case 10:
      result = "DW_OP_const2u";
      break;
    case 11:
      result = "DW_OP_const2s";
      break;
    case 12:
      result = "DW_OP_const4u";
      break;
    case 13:
      result = "DW_OP_const4s";
      break;
    case 14:
      result = "DW_OP_const8u";
      break;
    case 15:
      result = "DW_OP_const8s";
      break;
    case 16:
      result = "DW_OP_constu";
      break;
    case 17:
      result = "DW_OP_consts";
      break;
    case 18:
      result = "DW_OP_dup";
      break;
    case 19:
      result = "DW_OP_drop";
      break;
    case 20:
      result = "DW_OP_over";
      break;
    case 21:
      result = "DW_OP_pick";
      break;
    case 22:
      result = "DW_OP_swap";
      break;
    case 23:
      result = "DW_OP_rot";
      break;
    case 24:
      result = "DW_OP_xderef";
      break;
    case 25:
      result = "DW_OP_abs";
      break;
    case 26:
      result = "DW_OP_and";
      break;
    case 27:
      result = "DW_OP_div";
      break;
    case 28:
      result = "DW_OP_minus";
      break;
    case 29:
      result = "DW_OP_mod";
      break;
    case 30:
      result = "DW_OP_mul";
      break;
    case 31:
      result = "DW_OP_neg";
      break;
    case 32:
      result = "DW_OP_not";
      break;
    case 33:
      result = "DW_OP_or";
      break;
    case 34:
      result = "DW_OP_plus";
      break;
    case 35:
      result = "DW_OP_plus_uconst";
      break;
    case 36:
      result = "DW_OP_shl";
      break;
    case 37:
      result = "DW_OP_shr";
      break;
    case 38:
      result = "DW_OP_shra";
      break;
    case 39:
      result = "DW_OP_xor";
      break;
    case 40:
      result = "DW_OP_bra";
      break;
    case 41:
      result = "DW_OP_eq";
      break;
    case 42:
      result = "DW_OP_ge";
      break;
    case 43:
      result = "DW_OP_gt";
      break;
    case 44:
      result = "DW_OP_le";
      break;
    case 45:
      result = "DW_OP_lt";
      break;
    case 46:
      result = "DW_OP_ne";
      break;
    case 47:
      result = "DW_OP_skip";
      break;
    case 48:
      result = "DW_OP_lit0";
      break;
    case 49:
      result = "DW_OP_lit1";
      break;
    case 50:
      result = "DW_OP_lit2";
      break;
    case 51:
      result = "DW_OP_lit3";
      break;
    case 52:
      result = "DW_OP_lit4";
      break;
    case 53:
      result = "DW_OP_lit5";
      break;
    case 54:
      result = "DW_OP_lit6";
      break;
    case 55:
      result = "DW_OP_lit7";
      break;
    case 56:
      result = "DW_OP_lit8";
      break;
    case 57:
      result = "DW_OP_lit9";
      break;
    case 58:
      result = "DW_OP_lit10";
      break;
    case 59:
      result = "DW_OP_lit11";
      break;
    case 60:
      result = "DW_OP_lit12";
      break;
    case 61:
      result = "DW_OP_lit13";
      break;
    case 62:
      result = "DW_OP_lit14";
      break;
    case 63:
      result = "DW_OP_lit15";
      break;
    case 64:
      result = "DW_OP_lit16";
      break;
    case 65:
      result = "DW_OP_lit17";
      break;
    case 66:
      result = "DW_OP_lit18";
      break;
    case 67:
      result = "DW_OP_lit19";
      break;
    case 68:
      result = "DW_OP_lit20";
      break;
    case 69:
      result = "DW_OP_lit21";
      break;
    case 70:
      result = "DW_OP_lit22";
      break;
    case 71:
      result = "DW_OP_lit23";
      break;
    case 72:
      result = "DW_OP_lit24";
      break;
    case 73:
      result = "DW_OP_lit25";
      break;
    case 74:
      result = "DW_OP_lit26";
      break;
    case 75:
      result = "DW_OP_lit27";
      break;
    case 76:
      result = "DW_OP_lit28";
      break;
    case 77:
      result = "DW_OP_lit29";
      break;
    case 78:
      result = "DW_OP_lit30";
      break;
    case 79:
      result = "DW_OP_lit31";
      break;
    case 80:
      result = "DW_OP_reg0";
      break;
    case 81:
      result = "DW_OP_reg1";
      break;
    case 82:
      result = "DW_OP_reg2";
      break;
    case 83:
      result = "DW_OP_reg3";
      break;
    case 84:
      result = "DW_OP_reg4";
      break;
    case 85:
      result = "DW_OP_reg5";
      break;
    case 86:
      result = "DW_OP_reg6";
      break;
    case 87:
      result = "DW_OP_reg7";
      break;
    case 88:
      result = "DW_OP_reg8";
      break;
    case 89:
      result = "DW_OP_reg9";
      break;
    case 90:
      result = "DW_OP_reg10";
      break;
    case 91:
      result = "DW_OP_reg11";
      break;
    case 92:
      result = "DW_OP_reg12";
      break;
    case 93:
      result = "DW_OP_reg13";
      break;
    case 94:
      result = "DW_OP_reg14";
      break;
    case 95:
      result = "DW_OP_reg15";
      break;
    case 96:
      result = "DW_OP_reg16";
      break;
    case 97:
      result = "DW_OP_reg17";
      break;
    case 98:
      result = "DW_OP_reg18";
      break;
    case 99:
      result = "DW_OP_reg19";
      break;
    case 100:
      result = "DW_OP_reg20";
      break;
    case 101:
      result = "DW_OP_reg21";
      break;
    case 102:
      result = "DW_OP_reg22";
      break;
    case 103:
      result = "DW_OP_reg23";
      break;
    case 104:
      result = "DW_OP_reg24";
      break;
    case 105:
      result = "DW_OP_reg25";
      break;
    case 106:
      result = "DW_OP_reg26";
      break;
    case 107:
      result = "DW_OP_reg27";
      break;
    case 108:
      result = "DW_OP_reg28";
      break;
    case 109:
      result = "DW_OP_reg29";
      break;
    case 110:
      result = "DW_OP_reg30";
      break;
    case 111:
      result = "DW_OP_reg31";
      break;
    case 112:
      result = "DW_OP_breg0";
      break;
    case 113:
      result = "DW_OP_breg1";
      break;
    case 114:
      result = "DW_OP_breg2";
      break;
    case 115:
      result = "DW_OP_breg3";
      break;
    case 116:
      result = "DW_OP_breg4";
      break;
    case 117:
      result = "DW_OP_breg5";
      break;
    case 118:
      result = "DW_OP_breg6";
      break;
    case 119:
      result = "DW_OP_breg7";
      break;
    case 120:
      result = "DW_OP_breg8";
      break;
    case 121:
      result = "DW_OP_breg9";
      break;
    case 122:
      result = "DW_OP_breg10";
      break;
    case 123:
      result = "DW_OP_breg11";
      break;
    case 124:
      result = "DW_OP_breg12";
      break;
    case 125:
      result = "DW_OP_breg13";
      break;
    case 126:
      result = "DW_OP_breg14";
      break;
    case 127:
      result = "DW_OP_breg15";
      break;
    case 128:
      result = "DW_OP_breg16";
      break;
    case 129:
      result = "DW_OP_breg17";
      break;
    case 130:
      result = "DW_OP_breg18";
      break;
    case 131:
      result = "DW_OP_breg19";
      break;
    case 132:
      result = "DW_OP_breg20";
      break;
    case 133:
      result = "DW_OP_breg21";
      break;
    case 134:
      result = "DW_OP_breg22";
      break;
    case 135:
      result = "DW_OP_breg23";
      break;
    case 136:
      result = "DW_OP_breg24";
      break;
    case 137:
      result = "DW_OP_breg25";
      break;
    case 138:
      result = "DW_OP_breg26";
      break;
    case 139:
      result = "DW_OP_breg27";
      break;
    case 140:
      result = "DW_OP_breg28";
      break;
    case 141:
      result = "DW_OP_breg29";
      break;
    case 142:
      result = "DW_OP_breg30";
      break;
    case 143:
      result = "DW_OP_breg31";
      break;
    case 144:
      result = "DW_OP_regx";
      break;
    case 145:
      result = "DW_OP_fbreg";
      break;
    case 146:
      result = "DW_OP_bregx";
      break;
    case 147:
      result = "DW_OP_piece";
      break;
    case 148:
      result = "DW_OP_deref_size";
      break;
    case 149:
      result = "DW_OP_xderef_size";
      break;
    case 150:
      result = "DW_OP_nop";
      break;
    case 151:
      result = "DW_OP_push_object_address";
      break;
    case 152:
      result = "DW_OP_call2";
      break;
    case 153:
      result = "DW_OP_call4";
      break;
    case 154:
      result = "DW_OP_call_ref";
      break;
    case 155:
      result = "DW_OP_form_tls_address";
      break;
    case 156:
      result = "DW_OP_call_frame_cfa";
      break;
    case 157:
      result = "DW_OP_bit_piece";
      break;
    case 158:
      result = "DW_OP_implicit_value";
      break;
    case 159:
      result = "DW_OP_stack_value";
      break;
    case 160:
      result = "DW_OP_implicit_pointer";
      break;
    case 161:
      result = "DW_OP_addrx";
      break;
    case 162:
      result = "DW_OP_constx";
      break;
    case 163:
      result = "DW_OP_entry_value";
      break;
    case 164:
      result = "DW_OP_const_type";
      break;
    case 165:
      result = "DW_OP_regval_type";
      break;
    case 166:
      result = "DW_OP_deref_type";
      break;
    case 167:
      result = "DW_OP_xderef_type";
      break;
    case 168:
      result = "DW_OP_convert";
      break;
    case 169:
      result = "DW_OP_reinterpret";
      break;
    case 224:
      result = "DW_OP_GNU_push_tls_address";
      break;
    case 225:
      result = "DW_OP_HP_is_value";
      break;
    case 226:
      result = "DW_OP_HP_fltconst4";
      break;
    case 227:
      result = "DW_OP_HP_fltconst8";
      break;
    case 228:
      result = "DW_OP_HP_mod_range";
      break;
    case 229:
      result = "DW_OP_HP_unmod_range";
      break;
    case 230:
      result = "DW_OP_HP_tls";
      break;
    case 232:
      result = "DW_OP_INTEL_bit_piece";
      break;
    case 237:
      result = "DW_OP_WASM_location";
      break;
    case 238:
      result = "DW_OP_WASM_location_int";
      break;
    case 240:
      result = "DW_OP_APPLE_uninit";
      break;
    case 243:
      result = "DW_OP_GNU_entry_value";
      break;
    case 248:
      result = "DW_OP_PGI_omp_thread_num";
      break;
    case 251:
      result = "DW_OP_GNU_addr_index";
      break;
    case 252:
      result = "DW_OP_GNU_const_index";
      break;
    default:
      switch(v1)
      {
        case 4096:
          result = "DW_OP_LLVM_fragment";
          break;
        case 4097:
          result = "DW_OP_LLVM_convert";
          break;
        case 4098:
          result = "DW_OP_LLVM_tag_offset";
          break;
        case 4099:
          result = "DW_OP_LLVM_entry_value";
          break;
        case 4100:
          result = "DW_OP_LLVM_implicit_pointer";
          break;
        case 4101:
          result = "DW_OP_LLVM_arg";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

const char *llvm::dwarf::AttributeEncodingString(llvm::dwarf *this)
{
  const char *result;

  switch((int)this)
  {
    case 1:
      result = "DW_ATE_address";
      break;
    case 2:
      result = "DW_ATE_BOOLean";
      break;
    case 3:
      result = "DW_ATE_complex_float";
      break;
    case 4:
      result = "DW_ATE_float";
      break;
    case 5:
      result = "DW_ATE_signed";
      break;
    case 6:
      result = "DW_ATE_signed_char";
      break;
    case 7:
      result = "DW_ATE_unsigned";
      break;
    case 8:
      result = "DW_ATE_unsigned_char";
      break;
    case 9:
      result = "DW_ATE_imaginary_float";
      break;
    case 10:
      result = "DW_ATE_packed_decimal";
      break;
    case 11:
      result = "DW_ATE_numeric_string";
      break;
    case 12:
      result = "DW_ATE_edited";
      break;
    case 13:
      result = "DW_ATE_signed_fixed";
      break;
    case 14:
      result = "DW_ATE_unsigned_fixed";
      break;
    case 15:
      result = "DW_ATE_decimal_float";
      break;
    case 16:
      result = "DW_ATE_UTF";
      break;
    case 17:
      result = "DW_ATE_UCS";
      break;
    case 18:
      result = "DW_ATE_ASCII";
      break;
    default:
      switch((int)this)
      {
        case 129:
          result = "DW_ATE_HP_complex_float";
          break;
        case 130:
          result = "DW_ATE_HP_float128";
          break;
        case 131:
          result = "DW_ATE_HP_complex_float128";
          break;
        case 132:
          result = "DW_ATE_HP_floathpintel";
          break;
        case 133:
          result = "DW_ATE_HP_imaginary_float90";
          break;
        case 134:
          result = "DW_ATE_HP_imaginary_float128";
          break;
        default:
          result = 0;
          break;
      }
      break;
  }
  return result;
}

const char *llvm::dwarf::LanguageString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;
  const char *v4;

  v1 = (int)this;
  result = 0;
  if (v1 > 0x8000)
  {
    v3 = "DW_LANG_BORLAND_Delphi";
    if (v1 != 45056)
      v3 = 0;
    if (v1 == 36439)
      v4 = "DW_LANG_GOOGLE_RenderScript";
    else
      v4 = v3;
    if (v1 == 32769)
      return "DW_LANG_Mips_Assembler";
    else
      return v4;
  }
  else
  {
    switch(v1)
    {
      case 1:
        result = "DW_LANG_C89";
        break;
      case 2:
        result = "DW_LANG_C";
        break;
      case 3:
        result = "DW_LANG_Ada83";
        break;
      case 4:
        result = "DW_LANG_C_plus_plus";
        break;
      case 5:
        result = "DW_LANG_Cobol74";
        break;
      case 6:
        result = "DW_LANG_Cobol85";
        break;
      case 7:
        result = "DW_LANG_Fortran77";
        break;
      case 8:
        result = "DW_LANG_Fortran90";
        break;
      case 9:
        result = "DW_LANG_Pascal83";
        break;
      case 10:
        result = "DW_LANG_Modula2";
        break;
      case 11:
        result = "DW_LANG_Java";
        break;
      case 12:
        result = "DW_LANG_C99";
        break;
      case 13:
        result = "DW_LANG_Ada95";
        break;
      case 14:
        result = "DW_LANG_Fortran95";
        break;
      case 15:
        result = "DW_LANG_PLI";
        break;
      case 16:
        result = "DW_LANG_ObjC";
        break;
      case 17:
        result = "DW_LANG_ObjC_plus_plus";
        break;
      case 18:
        result = "DW_LANG_UPC";
        break;
      case 19:
        result = "DW_LANG_D";
        break;
      case 20:
        result = "DW_LANG_Python";
        break;
      case 21:
        result = "DW_LANG_OpenCL";
        break;
      case 22:
        result = "DW_LANG_Go";
        break;
      case 23:
        result = "DW_LANG_Modula3";
        break;
      case 24:
        result = "DW_LANG_Haskell";
        break;
      case 25:
        result = "DW_LANG_C_plus_plus_03";
        break;
      case 26:
        result = "DW_LANG_C_plus_plus_11";
        break;
      case 27:
        result = "DW_LANG_OCaml";
        break;
      case 28:
        result = "DW_LANG_Rust";
        break;
      case 29:
        result = "DW_LANG_C11";
        break;
      case 30:
        result = "DW_LANG_Swift";
        break;
      case 31:
        result = "DW_LANG_Julia";
        break;
      case 32:
        result = "DW_LANG_Dylan";
        break;
      case 33:
        result = "DW_LANG_C_plus_plus_14";
        break;
      case 34:
        result = "DW_LANG_Fortran03";
        break;
      case 35:
        result = "DW_LANG_Fortran08";
        break;
      case 36:
        result = "DW_LANG_RenderScript";
        break;
      case 37:
        result = "DW_LANG_BLISS";
        break;
      case 38:
        result = "DW_LANG_Kotlin";
        break;
      case 39:
        result = "DW_LANG_Zig";
        break;
      case 40:
        result = "DW_LANG_Crystal";
        break;
      case 42:
        result = "DW_LANG_C_plus_plus_17";
        break;
      case 43:
        result = "DW_LANG_C_plus_plus_20";
        break;
      case 44:
        result = "DW_LANG_C17";
        break;
      case 45:
        result = "DW_LANG_Fortran18";
        break;
      case 46:
        result = "DW_LANG_Ada2005";
        break;
      case 47:
        result = "DW_LANG_Ada2012";
        break;
      default:
        return result;
    }
  }
  return result;
}

const char *llvm::dwarf::ConventionString(llvm::dwarf *this)
{
  int v1;
  const char *result;
  const char *v3;

  if ((int)this <= 175)
  {
    switch((int)this)
    {
      case 1:
        result = "DW_CC_normal";
        break;
      case 2:
        result = "DW_CC_program";
        break;
      case 3:
        result = "DW_CC_nocall";
        break;
      case 4:
        result = "DW_CC_pass_by_reference";
        break;
      case 5:
        result = "DW_CC_pass_by_value";
        break;
      default:
        v3 = "DW_CC_GNU_borland_fastcall_i386";
        if ((_DWORD)this != 65)
          v3 = 0;
        if ((_DWORD)this == 64)
          result = "DW_CC_GNU_renesas_sh";
        else
          result = v3;
        break;
    }
  }
  else
  {
    v1 = (_DWORD)this - 176;
    result = 0;
    switch(v1)
    {
      case 0:
        result = "DW_CC_BORLAND_safecall";
        break;
      case 1:
        result = "DW_CC_BORLAND_stdcall";
        break;
      case 2:
        result = "DW_CC_BORLAND_pascal";
        break;
      case 3:
        result = "DW_CC_BORLAND_msfastcall";
        break;
      case 4:
        result = "DW_CC_BORLAND_msreturn";
        break;
      case 5:
        result = "DW_CC_BORLAND_thiscall";
        break;
      case 6:
        result = "DW_CC_BORLAND_fastcall";
        break;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        return result;
      case 16:
        result = "DW_CC_LLVM_vectorcall";
        break;
      case 17:
        result = "DW_CC_LLVM_Win64";
        break;
      case 18:
        result = "DW_CC_LLVM_X86_64SysV";
        break;
      case 19:
        result = "DW_CC_LLVM_AAPCS";
        break;
      case 20:
        result = "DW_CC_LLVM_AAPCS_VFP";
        break;
      case 21:
        result = "DW_CC_LLVM_IntelOclBicc";
        break;
      case 22:
        result = "DW_CC_LLVM_SpirFunction";
        break;
      case 23:
        result = "DW_CC_LLVM_OpenCLKernel";
        break;
      case 24:
        result = "DW_CC_LLVM_Swift";
        break;
      case 25:
        result = "DW_CC_LLVM_PreserveMost";
        break;
      case 26:
        result = "DW_CC_LLVM_PreserveAll";
        break;
      case 27:
        result = "DW_CC_LLVM_X86RegCall";
        break;
      case 28:
        result = "DW_CC_LLVM_SwiftTail";
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

const char *llvm::dwarf::MacinfoString(llvm::dwarf *this)
{
  int v1;
  const char *result;

  v1 = (_DWORD)this + 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = "DW_MACINFO_invalid";
      break;
    case 1:
      return result;
    case 2:
      result = "DW_MACINFO_define";
      break;
    case 3:
      result = "DW_MACINFO_undef";
      break;
    case 4:
      result = "DW_MACINFO_start_file";
      break;
    case 5:
      result = "DW_MACINFO_end_file";
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::identify_magic(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v14;
  unint64_t v16;
  unsigned __int16 v17;
  int v18;
  int v19;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;

  if (a2 < 4)
    return 0;
  v4 = *a1;
  if (v4 > 0x65)
  {
    if (*a1 > 0xC3u)
    {
      if (*a1 > 0xDDu)
      {
        if (v4 == 222)
        {
          v18 = *(_DWORD *)a1;
          v19 = 186106078;
          return v18 == v19;
        }
        if (v4 == 240)
          goto LABEL_78;
        if (v4 != 254)
          return 0;
      }
      else if (v4 - 206 >= 2)
      {
        if (v4 != 196)
        {
          if (v4 == 202)
          {
            if (*(_DWORD *)a1 == -1095041334)
            {
              if (a2 < 8)
                return 0;
            }
            else if (a2 < 8 || *(_DWORD *)a1 != -1078264118)
            {
              return 0;
            }
            if ((char)a1[7] < 43)
              return 20;
          }
          return 0;
        }
LABEL_79:
        if (a1[1] == 1)
          return 24;
        goto LABEL_80;
      }
      if (*(_DWORD *)a1 == -822415874 || *(_DWORD *)a1 == -805638658)
      {
        v16 = 32;
        if (a1[3] == 206)
          v16 = 28;
        if (a2 < v16)
          return 0;
        v9 = 15;
        v10 = 14;
        v11 = 13;
      }
      else
      {
        if (*(_DWORD *)a1 != -17958194 && *(_DWORD *)a1 != -17958193)
          return 0;
        v12 = v4 == 206;
        v8 = 32;
        if (v12)
          v8 = 28;
        if (a2 < v8)
          return 0;
        v9 = 12;
        v10 = 13;
        v11 = 14;
      }
      v17 = ((a1[v10] << 8) | (a1[v11] << 12) | (char)a1[v9]) - 1;
      if (v17 < 0xCu)
        return dword_24AA4A010[(__int16)v17];
      return 0;
    }
    if (*a1 > 0x7Eu)
    {
      if (v4 - 131 < 2)
        goto LABEL_78;
      if (v4 == 127)
      {
        if (a2 < 0x12 || *(_DWORD *)a1 != 1179403647)
          return 0;
        v21 = a1[5];
        v22 = 16;
        if (v21 != 2)
          v22 = 17;
        v23 = a1[v22];
        v2 = 3;
        if (!v23)
        {
          v12 = v21 == 2;
          v24 = 16;
          if (v12)
            v24 = 17;
          v25 = (char)a1[v24];
          v26 = v25 - 1;
          v27 = v25 + 3;
          if (v26 >= 4)
            return 3;
          else
            return v27;
        }
        return v2;
      }
      if (v4 != 144)
        return 0;
    }
    else
    {
      if (v4 == 102)
        goto LABEL_78;
      if (v4 != 104)
      {
        if (v4 != 123)
          return 0;
        return 32;
      }
    }
LABEL_80:
    if (a1[1] != 2)
      return 0;
    return 24;
  }
  if (*a1 > 0x3Bu)
  {
    if (*a1 <= 0x4Bu)
    {
      switch(*a1)
      {
        case '<':
          if (a2 < 8)
            return 0;
          v5 = *(_QWORD *)a1;
          v6 = 0x66616769623CLL;
          goto LABEL_114;
        case 'A':
          if (a1[1] == 166)
            return 24;
          return 0;
        case 'B':
          v18 = *(_DWORD *)a1;
          v19 = -557825214;
          return v18 == v19;
        case 'D':
          if (*(_DWORD *)a1 != 1128421444)
            return 0;
          return 35;
        default:
          return 0;
      }
    }
    if (*a1 <= 0x4Fu)
    {
      if (v4 != 76)
      {
        if (v4 == 77)
        {
          if (a2 >= 0x40 && *(_WORD *)a1 == 23117)
          {
            v7 = *((unsigned int *)a1 + 15);
            if (a2 < v7)
              v7 = a2;
            if (a2 - v7 >= 4 && *(_DWORD *)&a1[v7] == 17744)
              return 26;
          }
          else if (a2 < 0x1A)
          {
            goto LABEL_137;
          }
          if (*(_QWORD *)a1 == 0x666F736F7263694DLL
            && *((_QWORD *)a1 + 1) == 0x202B2B432F432074
            && *((_QWORD *)a1 + 2) == 0x30302E372046534DLL
            && *((_WORD *)a1 + 12) == 2573)
          {
            return 31;
          }
LABEL_137:
          if (*(_DWORD *)a1 == 1347241037)
            return 22;
          return 0;
        }
        return 0;
      }
      goto LABEL_79;
    }
    if (v4 != 80)
    {
      if (v4 != 100)
        return 0;
      v14 = a1[1];
      if (v14 == 170 || v14 == 134)
        return 24;
      else
        return 0;
    }
LABEL_78:
    if (*(_DWORD *)a1 == -1168773808)
      return 33;
    goto LABEL_79;
  }
  if (*a1 > 0xFu)
  {
    if (v4 == 16)
    {
      if (*(_DWORD *)a1 == -1391395056)
        return 34;
      return 0;
    }
    if (v4 == 33)
    {
      if (a2 >= 8)
      {
        if (*(_QWORD *)a1 == 0xA3E686372613C21)
          return 2;
        v5 = *(_QWORD *)a1;
        v6 = 0x6E6968743C21;
LABEL_114:
        if (v5 == (v6 & 0xFFFFFFFFFFFFLL | 0xA3E000000000000))
          return 2;
      }
      return 0;
    }
    if (v4 != 45 || a2 < 9)
      return 0;
    v12 = *(_QWORD *)a1 == 0x70617421202D2D2DLL && a1[8] == 105;
    if (!v12)
    {
      if (a2 < 0xA)
        return 0;
      if (*(_QWORD *)a1 != 0x686372610A2D2D2DLL || *((_WORD *)a1 + 4) != 14963)
        return 0;
    }
    return 32;
  }
  if (*a1)
  {
    if (v4 == 1)
    {
      if (*(unsigned __int16 *)a1 == 57089)
        return 28;
      if (*(__int16 *)a1 == -2303)
        return 29;
    }
    else if (v4 == 3 && !(*(unsigned __int16 *)a1 ^ 0xF003 | a1[2]))
    {
      return 8;
    }
    return 0;
  }
  if (*(_DWORD *)a1 != -65536)
  {
    if (a2 >= 0x10 && *(_QWORD *)a1 == 0x2000000000 && *((_QWORD *)a1 + 1) == 0xFFFF0000FFFFLL)
      return 27;
    if (a1[1])
    {
      if (*(_DWORD *)a1 == 1836278016)
        return 30;
      return 0;
    }
    return 24;
  }
  if (a2 < 0x1C)
    return 25;
  if (*(_QWORD *)(a1 + 12) == 0x4BA9BAEED1BAA1C7 && *(_QWORD *)(a1 + 20) == 0xB8DCA46AF6FA20AFLL)
    return 24;
  if (*(_QWORD *)(a1 + 12) ^ 0x4DABD9A50CB3FE38 | *(_QWORD *)(a1 + 20) ^ 0xC2532622B6D69BACLL)
    return 25;
  else
    return 23;
}

char *llvm::wasm::sectionTypeToString(llvm::wasm *this)
{
  return off_251C36370[(int)this];
}

const char *llvm::XCOFF::getMappingClassString(unsigned int a1)
{
  if (a1 > 0x16)
    return "Unknown";
  else
    return off_251C363E0[(char)a1];
}

const char *llvm::XCOFF::getRelocationTypeString(unsigned int a1)
{
  if (a1 > 0x31)
    return "Unknown";
  else
    return off_251C36498[(char)a1];
}

uint64_t _GLOBAL__sub_I_RemarkStreamer_cpp()
{
  uint64_t v0;

  v0 = llvm::cl::Option::Option((uint64_t)&EnableRemarksSection, 0, 0);
  dword_2579652B8 = 0;
  qword_2579652C0 = (uint64_t)off_251C12130;
  *(_QWORD *)&dword_2579652C8 = 0;
  EnableRemarksSection = (uint64_t)off_251C135C0;
  qword_2579652D0 = (uint64_t)&off_251C12150;
  qword_2579652D8 = (uint64_t)&off_251C13628;
  qword_2579652F0 = (uint64_t)&qword_2579652D8;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"remarks-section", 0xFuLL);
  qword_257965258 = (uint64_t)"Emit a section containing remark diagnostics metadata. By default, this is enabled for the "
                             "following formats: yaml-strtab, bitstream.";
  unk_257965260 = 133;
  dword_2579652B8 = 0;
  byte_2579652CC = 1;
  dword_2579652C8 = 0;
  word_257965242 = word_257965242 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&EnableRemarksSection);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt, &EnableRemarksSection, &dword_24A800000);
}

void llvm::BitstreamCursor::EnterSubBlock(llvm::BitstreamCursor *this@<X0>, unsigned int *a2@<X2>, int a3@<W1>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  const std::error_category *v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  char v47;
  int v48;
  void **v49;
  const std::error_category *v50;
  const char *v51;
  const std::error_category *v52;
  void **v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  char *v57;
  uint64_t v58;
  const std::error_category *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char v63;
  uint64_t v64;
  int v65;
  void **v66;
  void *__p[2];
  uint64_t v68;
  uint64_t v69[2];
  uint64_t v70;
  char v71;
  uint64_t (**v72)(llvm::format_object_base *__hidden);
  const char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t *)((char *)this + 64);
  v8 = *((_QWORD *)this + 8);
  LODWORD(v58) = *((_DWORD *)this + 9);
  v10 = &v58;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v11 = *((unsigned int *)this + 18);
  if (v11 >= *((_DWORD *)this + 19))
  {
    v55 = v11 + 1;
    v56 = v8 + 32 * v11 > (unint64_t)&v58;
    if (v8 <= (unint64_t)&v58 && v56)
    {
      v57 = (char *)&v58 - v8;
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)this + 64, v55);
      v8 = *v9;
      v10 = (uint64_t *)&v57[*v9];
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::BitstreamCursor::Block,false>::grow((uint64_t)this + 64, v55);
      v8 = *v9;
      v10 = &v58;
    }
  }
  v12 = v8 + 32 * *((unsigned int *)this + 18);
  *(_DWORD *)v12 = *(_DWORD *)v10;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v10 + 1);
  *(_QWORD *)(v12 + 24) = v10[3];
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  ++*((_DWORD *)this + 18);
  v72 = (uint64_t (**)(llvm::format_object_base *__hidden))&v59;
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
  v13 = *((_QWORD *)this + 8) + 32 * *((unsigned int *)this + 18);
  v14 = *(_QWORD *)(v13 - 24);
  *(_QWORD *)(v13 - 24) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v14;
  v15 = *(_QWORD *)(v13 - 16);
  *(_QWORD *)(v13 - 16) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v15;
  v16 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v13 - 8) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v16;
  v17 = (uint64_t *)*((_QWORD *)this + 42);
  if (v17)
  {
    v19 = *v17;
    v18 = v17[1];
    if (*v17 != v18)
    {
      v20 = v18 - 80;
      if (*(_DWORD *)(v18 - 80) != a3)
      {
        v20 = v19;
        while (*(_DWORD *)v20 != a3)
        {
          v20 += 80;
          if (v20 == v18)
            goto LABEL_39;
        }
      }
      v22 = *(uint64_t **)(v20 + 8);
      v21 = *(uint64_t **)(v20 + 16);
      if ((char *)v21 - (char *)v22 >= 1)
      {
        v23 = (_QWORD *)*((_QWORD *)this + 6);
        v24 = ((char *)v21 - (char *)v22) >> 4;
        if (v24 <= (v16 - (uint64_t)v23) >> 4)
        {
          if (v24 <= 0)
          {
            v36 = &v22[2 * v24];
            std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__move_range((uint64_t)this + 40, *((_QWORD *)this + 6), *((_QWORD *)this + 6), (char *)&v23[2 * v24]);
            for (; v22 != v36; v23 += 2)
            {
              std::shared_ptr<llvm::BitCodeAbbrev>::operator=[abi:nn180100](v23, v22);
              v22 += 2;
            }
          }
          else
          {
            if (v22 == v21)
            {
              v32 = (uint64_t *)*((_QWORD *)this + 6);
            }
            else
            {
              v31 = v22;
              v32 = (uint64_t *)*((_QWORD *)this + 6);
              do
              {
                *v32 = *v31;
                v33 = v31[1];
                v32[1] = v33;
                if (v33)
                {
                  v34 = (unint64_t *)(v33 + 8);
                  do
                    v35 = __ldxr(v34);
                  while (__stxr(v35 + 1, v34));
                }
                v31 += 2;
                v32 += 2;
              }
              while (v31 != v21);
            }
            *((_QWORD *)this + 6) = v32;
          }
        }
        else
        {
          v25 = *((_QWORD *)this + 5);
          v26 = ((uint64_t)v23 - v25) >> 4;
          if ((unint64_t)(v26 + v24) >> 60)
            abort();
          v27 = v16 - v25;
          v28 = v27 >> 3;
          if (v27 >> 3 <= (unint64_t)(v26 + v24))
            v28 = v26 + v24;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          v62 = (char *)this + 56;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)this + 56, v29);
          else
            v30 = 0;
          v37 = (uint64_t *)&v30[16 * v26];
          v58 = (uint64_t)v30;
          v59 = (const std::error_category *)v37;
          v61 = &v30[16 * v29];
          v38 = &v37[2 * v24];
          do
          {
            *v37 = *v22;
            v39 = v22[1];
            v37[1] = v39;
            if (v39)
            {
              v40 = (unint64_t *)(v39 + 8);
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            v37 += 2;
            v22 += 2;
          }
          while (v37 != v38);
          v60 = v38;
          std::vector<std::shared_ptr<llvm::BitCodeAbbrev>>::__swap_out_circular_buffer((_QWORD *)this + 5, &v58, v23);
          std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v58);
        }
      }
    }
  }
LABEL_39:
  llvm::SimpleBitstreamCursor::ReadVBR(this, 4u, (uint64_t)&v70);
  if ((v71 & 1) != 0)
  {
    v44 = v70;
    v70 = 0;
    *a4 = v44;
    goto LABEL_64;
  }
  v42 = v70;
  *((_DWORD *)this + 9) = v70;
  if (v42 >= 0x21)
  {
    v43 = std::generic_category();
    v69[0] = 92;
    v69[1] = (uint64_t)v43;
    __p[0] = 0;
    __p[1] = 0;
    v68 = 0;
    LODWORD(v59) = 0;
    v63 = 0;
    v64 = 0;
    v65 = 1;
    v61 = 0;
    v62 = 0;
    v60 = 0;
    v58 = (uint64_t)&off_251C13AC0;
    v66 = __p;
    llvm::raw_ostream::SetUnbuffered(&v58);
    v72 = &off_251C36638;
    v73 = "can't read more than %zu at a time, trying to read %u";
    v74 = 32;
    v75 = *((_DWORD *)this + 9);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v58, (uint64_t)&v72);
    llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)v66, v69, a4);
    v58 = (uint64_t)off_251C13948;
    if (v65 == 1 && v60)
      MEMORY[0x24BD1B380](v60, 0x1000C8077774924);
    if (SHIBYTE(v68) < 0)
      operator delete(__p[0]);
    goto LABEL_64;
  }
  v45 = *((_DWORD *)this + 8);
  v46 = v45 >= 0x20;
  v47 = v45 - 32;
  if (v46)
  {
    *((_QWORD *)this + 3) >>= v47;
    v48 = 32;
  }
  else
  {
    v48 = 0;
  }
  *((_DWORD *)this + 8) = v48;
  llvm::SimpleBitstreamCursor::Read(this, 0x20u, (uint64_t)&v72);
  if ((v73 & 1) != 0)
  {
    v49 = (void **)v72;
    v72 = 0;
    *a4 = (uint64_t)v49;
    goto LABEL_61;
  }
  if (a2)
    *a2 = v72;
  if (!*((_DWORD *)this + 9))
  {
    v50 = std::generic_category();
    v58 = 92;
    v59 = v50;
    v51 = "can't enter sub-block: current code size is 0";
LABEL_60:
    __p[0] = (void *)v51;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)__p, &v58, a4);
    goto LABEL_61;
  }
  if (!*((_DWORD *)this + 8) && *((_QWORD *)this + 1) <= *((_QWORD *)this + 2))
  {
    v52 = std::generic_category();
    v58 = 92;
    v59 = v52;
    v51 = "can't enter sub block: already at end of stream";
    goto LABEL_60;
  }
  *a4 = 0;
LABEL_61:
  if ((v73 & 1) != 0)
  {
    v53 = (void **)v72;
    v72 = 0;
    if (v53)
      (*((void (**)(void **))*v53 + 1))(v53);
  }
LABEL_64:
  if ((v71 & 1) != 0)
  {
    v54 = v70;
    v70 = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  }
}

void llvm::BitstreamCursor::skipRecord(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  llvm::formatv_object_base *v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;
  const std::error_category *v12;
  uint64_t v13;
  llvm::formatv_object_base *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  llvm::formatv_object_base *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  llvm::formatv_object_base *v36;
  unint64_t v37;
  const std::error_category *v38;
  llvm::formatv_object_base *v39;
  llvm::formatv_object_base *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::formatv_object_base *v44;
  llvm::formatv_object_base *v45;
  char v46;
  llvm::formatv_object_base *v47;
  char v48;
  uint64_t v49;
  const std::error_category *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (a2 != 3)
  {
    llvm::BitstreamCursor::getAbbrev((llvm::BitstreamCursor *)&v47, *((_QWORD *)this + 5), *((_QWORD *)this + 6), a2);
    v7 = v47;
    if ((v48 & 1) != 0)
    {
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v7;
      return;
    }
    v8 = *(uint64_t **)v47;
    v9 = *(unsigned __int8 *)(*(_QWORD *)v47 + 8);
    if ((v9 & 1) != 0)
    {
      v15 = *v8;
    }
    else
    {
      v10 = (v9 >> 1) & 7;
      if (v10 == 5 || v10 == 3)
      {
        v12 = std::generic_category();
        v49 = 92;
        v50 = v12;
        v45 = (llvm::formatv_object_base *)"Abbreviation starts with an Array or a Blob";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v45, &v49, &v43);
        *(_BYTE *)(a3 + 8) |= 1u;
        v13 = v43;
LABEL_68:
        *(_QWORD *)a3 = v13;
        return;
      }
      readAbbreviatedField((llvm::SimpleBitstreamCursor *)&v49, this, *v8, v9);
      if ((v50 & 1) != 0)
      {
LABEL_67:
        v13 = v49;
        *(_BYTE *)(a3 + 8) |= 1u;
        goto LABEL_68;
      }
      LODWORD(v15) = v49;
    }
    v16 = *((_DWORD *)v7 + 2);
    if (v16 <= 1)
    {
      LOBYTE(v17) = *(_BYTE *)(a3 + 8);
      goto LABEL_64;
    }
    v17 = *(unsigned __int8 *)(a3 + 8);
    v18 = 1;
    while (1)
    {
      v19 = *(_QWORD *)v7 + 16 * v18;
      v20 = *(unsigned __int8 *)(v19 + 8);
      if ((v20 & 1) != 0)
        goto LABEL_61;
      v21 = (v20 >> 1) & 7;
      if (v21 == 3)
        break;
      if (v21 == 5)
      {
        llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v49);
        if ((v50 & 1) != 0)
          goto LABEL_38;
        v22 = *((_DWORD *)this + 8);
        v23 = v22 >= 0x20;
        v24 = v22 - 32;
        if (v23)
        {
          *((_QWORD *)this + 3) >>= v24;
          v31 = 32;
        }
        else
        {
          v31 = 0;
        }
        v32 = v49;
        *((_DWORD *)this + 8) = v31;
        v33 = ((8 * v32 + 24) & 0xFFFFFFFE0) - v31;
        v34 = *((_QWORD *)this + 1);
        v35 = v33 + 8 * *((_QWORD *)this + 2);
        if (v34 >= v35 >> 3)
        {
          llvm::SimpleBitstreamCursor::JumpToBit(this, v35, &v45);
          v36 = v45;
          if (v45)
          {
            v17 |= 1u;
            *(_BYTE *)(a3 + 8) = v17;
            *(_QWORD *)a3 = v36;
            v28 = 1;
          }
          else
          {
            v28 = 0;
          }
          if ((v50 & 1) != 0)
          {
            v39 = (llvm::formatv_object_base *)v49;
            v49 = 0;
            if (v39)
LABEL_58:
              (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v39 + 8))(v39);
          }
        }
        else
        {
          *((_QWORD *)this + 2) = v34;
          v28 = 5;
        }
      }
      else
      {
        readAbbreviatedField((llvm::SimpleBitstreamCursor *)&v49, this, *(_QWORD *)v19, v20);
        if ((v50 & 1) != 0)
        {
LABEL_38:
          v29 = v49;
          v17 |= 1u;
          *(_BYTE *)(a3 + 8) = v17;
          *(_QWORD *)a3 = v29;
          v28 = 1;
          goto LABEL_59;
        }
        v28 = 7;
      }
LABEL_59:
      if (v28 && v28 != 7)
      {
        if (v28 != 5)
          return;
LABEL_64:
        *(_BYTE *)(a3 + 8) = v17 & 0xFE;
        *(_DWORD *)a3 = v15;
        return;
      }
LABEL_61:
      if (++v18 >= v16)
        goto LABEL_64;
    }
    llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v45);
    if ((v46 & 1) != 0)
    {
      v30 = v45;
      v45 = 0;
    }
    else
    {
      v25 = (int)v45;
      v26 = *(_QWORD *)v7 + 16 * ++v18;
      v27 = (*(unsigned __int8 *)(v26 + 8) >> 1) & 7;
      switch(v27)
      {
        case 1:
          v37 = *(_QWORD *)v26 * v45 - *((unsigned int *)this + 8) + 8 * *((_QWORD *)this + 2);
          break;
        case 4:
          v37 = (6 * (_DWORD)v45) + 8 * *((_QWORD *)this + 2) - *((unsigned int *)this + 8);
          break;
        case 2:
          if ((_DWORD)v45)
          {
            while (1)
            {
              llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v49, this, *(_DWORD *)v26);
              if ((v50 & 1) != 0)
                break;
              if (!--v25)
                goto LABEL_47;
            }
            v30 = (llvm::formatv_object_base *)v49;
            goto LABEL_54;
          }
LABEL_47:
          v28 = 7;
LABEL_56:
          if ((v46 & 1) != 0)
          {
            v39 = v45;
            v45 = 0;
            if (v39)
              goto LABEL_58;
          }
          goto LABEL_59;
        default:
          v38 = std::generic_category();
          v49 = 92;
          v50 = v38;
          v44 = (llvm::formatv_object_base *)"Array element type can't be an Array or a Blob";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v44, &v49, &v42);
          v17 |= 1u;
          *(_BYTE *)(a3 + 8) = v17;
          *(_QWORD *)a3 = v42;
          v42 = 0;
LABEL_55:
          v28 = 1;
          goto LABEL_56;
      }
      llvm::SimpleBitstreamCursor::JumpToBit(this, v37, &v49);
      v30 = (llvm::formatv_object_base *)v49;
      if (!v49)
        goto LABEL_47;
    }
LABEL_54:
    v17 |= 1u;
    *(_BYTE *)(a3 + 8) = v17;
    *(_QWORD *)a3 = v30;
    goto LABEL_55;
  }
  llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v49);
  if ((v50 & 1) != 0)
    goto LABEL_67;
  v5 = v49;
  llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v47);
  if ((v48 & 1) != 0)
  {
    v14 = v47;
    v47 = 0;
  }
  else
  {
    v6 = (int)v47;
    if (!(_DWORD)v47)
    {
LABEL_7:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = v5;
      goto LABEL_71;
    }
    while (1)
    {
      llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v45, this, 6u);
      if ((v46 & 1) != 0)
        break;
      if (!--v6)
        goto LABEL_7;
    }
    v14 = v45;
  }
  *(_BYTE *)(a3 + 8) |= 1u;
  *(_QWORD *)a3 = v14;
LABEL_71:
  if ((v48 & 1) != 0)
  {
    v40 = v47;
    v47 = 0;
    if (v40)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v40 + 8))(v40);
  }
  if ((v50 & 1) != 0)
  {
    v41 = v49;
    v49 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
}

void llvm::SimpleBitstreamCursor::ReadVBR64(llvm::SimpleBitstreamCursor *this, llvm::SimpleBitstreamCursor *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  llvm::formatv_object_base *v9;
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12;
  char v13;
  const std::error_category *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::formatv_object_base *v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  const std::error_category *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  llvm::SimpleBitstreamCursor::Read(a2, a3, (uint64_t)&v21);
  v20 = v22 & 1;
  if ((v22 & 1) != 0)
  {
    v12 = v21;
    v13 = *((_BYTE *)this + 8) | 1;
    goto LABEL_18;
  }
  v19 = v21;
  v6 = 1 << (a3 - 1);
  if ((v21 & v6) == 0)
  {
    v12 = v21;
    v13 = *((_BYTE *)this + 8) & 0xFE;
LABEL_18:
    *((_BYTE *)this + 8) = v13;
LABEL_19:
    *(_QWORD *)this = v12;
    return;
  }
  v7 = ((_DWORD)v6 - 1) & v21;
  v8 = a3 - 1;
  while (v8 <= 0x3F)
  {
    llvm::SimpleBitstreamCursor::Read(a2, a3, (uint64_t)&v17);
    LOBYTE(v22) = v22 & 0xFE | v18 & 1;
    v9 = v17;
    if ((v18 & 1) != 0)
      v17 = 0;
    v21 = (uint64_t)v9;
    llvm::Expected<llvm::orc::ExecutorAddr>::moveAssign<llvm::orc::ExecutorAddr>(&v19, &v21);
    if ((v22 & 1) != 0)
    {
      v10 = v21;
      v21 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    if ((v18 & 1) != 0)
    {
      v11 = v17;
      v17 = 0;
      if (v11)
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v11 + 8))(v11);
    }
    if ((v20 & 1) != 0)
    {
      *((_BYTE *)this + 8) |= 1u;
      v12 = v19;
      goto LABEL_19;
    }
    v7 |= (unint64_t)(((_DWORD)v6 - 1) & v19) << v8;
    v8 += a3 - 1;
    if ((v19 & v6) == 0)
    {
      *((_BYTE *)this + 8) &= ~1u;
      *(_QWORD *)this = v7;
      return;
    }
  }
  v14 = std::generic_category();
  v21 = 92;
  v22 = v14;
  v17 = (llvm::formatv_object_base *)"Unterminated VBR";
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v17, &v21, &v16);
  *((_BYTE *)this + 8) |= 1u;
  *(_QWORD *)this = v16;
  v16 = 0;
  if ((v20 & 1) != 0)
  {
    v15 = v19;
    v19 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

void llvm::BitstreamCursor::getAbbrev(llvm::BitstreamCursor *this, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  uint64_t v9[2];

  v5 = (a4 - 4);
  if (v5 >= (a3 - a2) >> 4)
  {
    v9[0] = 92;
    v9[1] = (uint64_t)std::generic_category();
    v8 = (llvm::formatv_object_base *)"Invalid abbrev number";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v8, v9, &v7);
    *((_BYTE *)this + 8) |= 1u;
    v6 = v7;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16 * v5);
    *((_BYTE *)this + 8) &= ~1u;
  }
  *(_QWORD *)this = v6;
}

void readAbbreviatedField(llvm::SimpleBitstreamCursor *this, llvm::SimpleBitstreamCursor *a2, unsigned int a3, unsigned int a4)
{
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = (a4 >> 1) & 7;
  if (v5 == 4)
  {
    llvm::SimpleBitstreamCursor::Read(a2, 6u, (uint64_t)&v8);
    if ((v9 & 1) != 0)
    {
      v6 = v8;
      v7 = *((_BYTE *)this + 8) | 1;
    }
    else
    {
      v6 = aAbcdefghijklmn_5[v8];
      v7 = *((_BYTE *)this + 8) & 0xFE;
    }
    *((_BYTE *)this + 8) = v7;
  }
  else
  {
    if (v5 == 2)
    {
      llvm::SimpleBitstreamCursor::ReadVBR64(this, a2, a3);
      return;
    }
    llvm::SimpleBitstreamCursor::Read(a2, a3, (uint64_t)&v8);
    *((_BYTE *)this + 8) = *((_BYTE *)this + 8) & 0xFE | v9 & 1;
    v6 = v8;
  }
  *(_QWORD *)this = v6;
}

void llvm::BitstreamCursor::readRecord(llvm::SimpleBitstreamCursor *this@<X0>, int a2@<W1>, unsigned int *a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  unint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  llvm::formatv_object_base *p_p;
  const std::error_category *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  llvm::formatv_object_base *v45;
  const std::error_category *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *data_low;
  unint64_t v50;
  unint64_t v51;
  const std::error_category *v52;
  const std::error_category *v53;
  std::string::size_type v54;
  const std::error_category *v55;
  unsigned __int8 *v56;
  const std::error_category *v57;
  uint64_t v58;
  const std::error_category *v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  uint64_t v63;
  unsigned __int8 **v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::formatv_object_base *v77;
  uint64_t v78;
  const std::error_category *v79;
  std::string v80;
  __int128 __p;
  uint64_t v82;
  std::string::size_type v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (a2 == 3)
  {
    llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v85);
    if ((v86 & 1) == 0)
    {
      v8 = v85;
      llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v83);
      if ((v84 & 1) != 0)
      {
        v19 = v83;
        v83 = 0;
        v75 = v19;
        llvm::toString(&v75, &v80);
        v20 = std::string::insert(&v80, 0, "Failed to read size: ");
        v21 = v20->__r_.__value_.__r.__words[2];
        __p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v82 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (v82 >= 0)
          p_p = (llvm::formatv_object_base *)&__p;
        else
          p_p = (llvm::formatv_object_base *)__p;
        v23 = std::generic_category();
        v78 = 92;
        v79 = v23;
        v77 = p_p;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v77, &v78, &v76);
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v76;
        v76 = 0;
        if (SHIBYTE(v82) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (v75)
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
      }
      else
      {
        v9 = v83;
        if (v83 >= (unint64_t)(8 * *((_QWORD *)this + 1)))
        {
          *(_QWORD *)&__p = 92;
          *((_QWORD *)&__p + 1) = std::generic_category();
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"Size is not plausible";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v80, (uint64_t *)&__p, &v74);
          *(_BYTE *)(a5 + 8) |= 1u;
          *(_QWORD *)a5 = v74;
          v74 = 0;
        }
        else
        {
          v10 = a3[2] + (unint64_t)v83;
          if (v10 > a3[3])
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 4, v10, 8);
          if (v9)
          {
            v11 = *(_BYTE *)(a5 + 8);
            while (1)
            {
              llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&__p, this, 6u);
              if ((BYTE8(__p) & 1) != 0)
                break;
              llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
              if (!--v9)
                goto LABEL_115;
            }
            v61 = __p;
            *(_BYTE *)(a5 + 8) = v11 | 1;
            *(_QWORD *)a5 = v61;
          }
          else
          {
            v11 = *(_BYTE *)(a5 + 8);
LABEL_115:
            *(_BYTE *)(a5 + 8) = v11 & 0xFE;
            *(_DWORD *)a5 = v8;
          }
        }
      }
      if ((v84 & 1) != 0)
      {
        v62 = v83;
        v83 = 0;
        if (v62)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v62 + 8))(v62);
      }
      if ((v86 & 1) != 0)
      {
        v63 = v85;
        v85 = 0;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      }
      return;
    }
    v18 = v85;
    goto LABEL_21;
  }
  llvm::BitstreamCursor::getAbbrev((llvm::BitstreamCursor *)&v85, *((_QWORD *)this + 5), *((_QWORD *)this + 6), a2);
  v13 = v85;
  if ((v86 & 1) != 0)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v13;
    return;
  }
  v14 = *(uint64_t **)v85;
  v15 = *(unsigned __int8 *)(*(_QWORD *)v85 + 8);
  if ((v15 & 1) != 0)
  {
    v24 = *v14;
  }
  else
  {
    v16 = (v15 >> 1) & 7;
    if (v16 == 5 || v16 == 3)
    {
      *(_QWORD *)&__p = 92;
      *((_QWORD *)&__p + 1) = std::generic_category();
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"Abbreviation starts with an Array or a Blob";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v80, (uint64_t *)&__p, &v73);
      *(_BYTE *)(a5 + 8) |= 1u;
      v18 = v73;
LABEL_22:
      *(_QWORD *)a5 = v18;
      return;
    }
    readAbbreviatedField((llvm::SimpleBitstreamCursor *)&__p, this, *v14, v15);
    if ((BYTE8(__p) & 1) != 0)
    {
      v18 = __p;
LABEL_21:
      *(_BYTE *)(a5 + 8) |= 1u;
      goto LABEL_22;
    }
    LODWORD(v24) = __p;
  }
  v65 = v24;
  v25 = *(_DWORD *)(v13 + 8);
  if (v25 != 1)
  {
    v64 = a4;
    v27 = 1;
    v26 = *(unsigned __int8 *)(a5 + 8);
    while (1)
    {
      v28 = *(_QWORD *)v13 + 16 * v27;
      v29 = *(unsigned __int8 *)(v28 + 8);
      if ((v29 & 1) != 0)
      {
        llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, *(_QWORD *)v28);
        goto LABEL_94;
      }
      v30 = (v29 >> 1) & 7;
      if (v30 != 3)
      {
        if (v30 != 5)
        {
          readAbbreviatedField((llvm::SimpleBitstreamCursor *)&__p, this, *(_QWORD *)v28, v29);
          if ((BYTE8(__p) & 1) != 0)
          {
            v47 = __p;
            v26 |= 1u;
            *(_BYTE *)(a5 + 8) = v26;
            *(_QWORD *)a5 = v47;
            v40 = 1;
          }
          else
          {
            llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
            v40 = 7;
          }
          goto LABEL_92;
        }
        llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v80);
        if ((v80.__r_.__value_.__s.__data_[8] & 1) == 0)
        {
          v31 = *((_DWORD *)this + 8);
          v32 = v31 >= 0x20;
          v33 = v31 - 32;
          if (v32)
          {
            *((_QWORD *)this + 3) >>= v33;
            v48 = 32;
          }
          else
          {
            v48 = 0;
          }
          data_low = (unsigned __int8 *)LODWORD(v80.__r_.__value_.__l.__data_);
          *((_DWORD *)this + 8) = v48;
          v50 = 8 * *((_QWORD *)this + 2) - v48;
          v51 = v50 + ((8 * (_QWORD)data_low + 24) & 0xFFFFFFFE0);
          if (*((_QWORD *)this + 1) < v51 >> 3)
          {
            v52 = std::generic_category();
            *(_QWORD *)&__p = 92;
            *((_QWORD *)&__p + 1) = v52;
            v78 = (uint64_t)"Blob ends too soon";
            llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v78, (uint64_t *)&__p, &v66);
            v26 |= 1u;
            *(_BYTE *)(a5 + 8) = v26;
            *(_QWORD *)a5 = v66;
            v66 = 0;
            goto LABEL_80;
          }
          llvm::SimpleBitstreamCursor::JumpToBit(this, v51, &__p);
          v41 = __p;
          if ((_QWORD)__p)
          {
LABEL_79:
            v26 |= 1u;
            *(_BYTE *)(a5 + 8) = v26;
            *(_QWORD *)a5 = v41;
LABEL_80:
            v40 = 1;
          }
          else
          {
            v56 = (unsigned __int8 *)(*(_QWORD *)this + (v50 >> 3));
            if (v64)
            {
              v40 = 0;
              *v64 = v56;
              v64[1] = data_low;
            }
            else
            {
              llvm::SmallVectorImpl<unsigned long long>::append<unsigned char const*,void>(a3, v56, &data_low[(_QWORD)v56]);
              v40 = 0;
            }
          }
          if ((v80.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            v54 = v80.__r_.__value_.__r.__words[0];
            v80.__r_.__value_.__r.__words[0] = 0;
            if (v54)
              goto LABEL_91;
          }
          goto LABEL_92;
        }
        v41 = v80.__r_.__value_.__r.__words[0];
        v80.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_79;
      }
      llvm::SimpleBitstreamCursor::ReadVBR(this, 6u, (uint64_t)&v83);
      if ((v84 & 1) != 0)
      {
        v42 = v83;
        v83 = 0;
        v71 = v42;
        llvm::toString(&v71, &v80);
        v43 = std::string::insert(&v80, 0, "Failed to read size: ");
        v44 = v43->__r_.__value_.__r.__words[2];
        __p = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v82 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (v82 >= 0)
          v45 = (llvm::formatv_object_base *)&__p;
        else
          v45 = (llvm::formatv_object_base *)__p;
        v46 = std::generic_category();
        v78 = 92;
        v79 = v46;
        v77 = v45;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v77, &v78, &v72);
        v26 |= 1u;
        *(_BYTE *)(a5 + 8) = v26;
        *(_QWORD *)a5 = v72;
        v72 = 0;
        if (SHIBYTE(v82) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
        goto LABEL_88;
      }
      v34 = v83;
      if (v83 >= (unint64_t)(8 * *((_QWORD *)this + 1)))
      {
        v53 = std::generic_category();
        *(_QWORD *)&__p = 92;
        *((_QWORD *)&__p + 1) = v53;
        v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"Size is not plausible";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v80, (uint64_t *)&__p, &v70);
        v26 |= 1u;
        *(_BYTE *)(a5 + 8) = v26;
        *(_QWORD *)a5 = v70;
        v70 = 0;
      }
      else
      {
        v35 = a3[2] + (unint64_t)v83;
        if (v35 > a3[3])
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 4, v35, 8);
        if (v27 + 2 == v25)
        {
          v36 = *(_QWORD *)v13 + 16 * ++v27;
          v37 = *(unsigned __int8 *)(v36 + 8);
          if ((v37 & 1) != 0)
          {
            v57 = std::generic_category();
            *(_QWORD *)&__p = 92;
            *((_QWORD *)&__p + 1) = v57;
            v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array element type has to be an encoding of a type";
            llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v80, (uint64_t *)&__p, &v68);
            v26 |= 1u;
            *(_BYTE *)(a5 + 8) = v26;
            *(_QWORD *)a5 = v68;
            v68 = 0;
          }
          else
          {
            v38 = (v37 >> 1) & 7;
            switch(v38)
            {
              case 1:
                if (!v34)
                  goto LABEL_108;
                while (1)
                {
                  llvm::SimpleBitstreamCursor::Read(this, *(_DWORD *)v36, (uint64_t)&__p);
                  if ((BYTE8(__p) & 1) != 0)
                    goto LABEL_110;
                  llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
                  if ((BYTE8(__p) & 1) != 0)
                  {
                    v58 = __p;
                    *(_QWORD *)&__p = 0;
                    if (v58)
                      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
                  }
                  v40 = 7;
                  if (!--v34)
                    goto LABEL_89;
                }
              case 2:
                if (!v34)
                {
LABEL_108:
                  v40 = 7;
                  goto LABEL_89;
                }
                while (1)
                {
                  llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&__p, this, *(_DWORD *)v36);
                  if ((BYTE8(__p) & 1) != 0)
                    goto LABEL_110;
                  llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, __p);
                  v40 = 7;
                  if (!--v34)
                    goto LABEL_89;
                }
              case 4:
                if (!v34)
                  goto LABEL_108;
                while (1)
                {
                  llvm::SimpleBitstreamCursor::Read(this, 6u, (uint64_t)&__p);
                  if ((BYTE8(__p) & 1) != 0)
                    break;
                  llvm::SmallVectorTemplateBase<void *,true>::push_back(a3, aAbcdefghijklmn_5[__p]);
                  if ((BYTE8(__p) & 1) != 0)
                  {
                    v39 = __p;
                    *(_QWORD *)&__p = 0;
                    if (v39)
                      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                  }
                  v40 = 7;
                  if (!--v34)
                    goto LABEL_89;
                }
LABEL_110:
                v60 = __p;
                v26 |= 1u;
                *(_BYTE *)(a5 + 8) = v26;
                *(_QWORD *)a5 = v60;
                goto LABEL_88;
            }
            v59 = std::generic_category();
            *(_QWORD *)&__p = 92;
            *((_QWORD *)&__p + 1) = v59;
            v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array element type can't be an Array or a Blob";
            llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v80, (uint64_t *)&__p, &v67);
            v26 |= 1u;
            *(_BYTE *)(a5 + 8) = v26;
            *(_QWORD *)a5 = v67;
            v67 = 0;
          }
        }
        else
        {
          v55 = std::generic_category();
          *(_QWORD *)&__p = 92;
          *((_QWORD *)&__p + 1) = v55;
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"Array op not second to last";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v80, (uint64_t *)&__p, &v69);
          v26 |= 1u;
          *(_BYTE *)(a5 + 8) = v26;
          *(_QWORD *)a5 = v69;
          v69 = 0;
        }
      }
LABEL_88:
      v40 = 1;
LABEL_89:
      if ((v84 & 1) != 0)
      {
        v54 = v83;
        v83 = 0;
        if (v54)
LABEL_91:
          (*(void (**)(std::string::size_type))(*(_QWORD *)v54 + 8))(v54);
      }
LABEL_92:
      if (v40 != 7 && v40)
        return;
LABEL_94:
      if (++v27 == v25)
        goto LABEL_36;
    }
  }
  LOBYTE(v26) = *(_BYTE *)(a5 + 8);
LABEL_36:
  *(_BYTE *)(a5 + 8) = v26 & 0xFE;
  *(_DWORD *)a5 = v65;
}

void llvm::BitstreamCursor::ReadAbbrevRecord(llvm::BitstreamCursor *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v6;
  unsigned int *v7;
  int v8;
  int v9;
  llvm::formatv_object_base *v10;
  char v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  llvm::formatv_object_base *v15;
  const char *v16;
  const std::error_category *v17;
  const char **v18;
  const char *v19;
  const std::error_category *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int **v23;
  _QWORD *v24;
  const std::error_category *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unsigned int **v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  char v47;
  const char *v48;
  char v49;
  llvm::formatv_object_base *v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int64x2_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x228uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_251C171C8;
  v6->__shared_owners_ = 0;
  v7 = (unsigned int *)&v6[1];
  *(_OWORD *)&v6[2].__shared_owners_ = 0u;
  v6[3].std::__shared_count = 0u;
  *(_OWORD *)&v6[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[4].__shared_owners_ = 0u;
  v6[5].std::__shared_count = 0u;
  *(_OWORD *)&v6[5].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[6].__shared_owners_ = 0u;
  v6[7].std::__shared_count = 0u;
  *(_OWORD *)&v6[7].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[8].__shared_owners_ = 0u;
  v6[9].std::__shared_count = 0u;
  *(_OWORD *)&v6[9].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[10].__shared_owners_ = 0u;
  v6[11].std::__shared_count = 0u;
  *(_OWORD *)&v6[11].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[12].__shared_owners_ = 0u;
  v6[13].std::__shared_count = 0u;
  *(_OWORD *)&v6[13].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[14].__shared_owners_ = 0u;
  v6[15].std::__shared_count = 0u;
  *(_OWORD *)&v6[15].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[16].__shared_owners_ = 0u;
  v6[17].std::__shared_count = 0u;
  *(_OWORD *)&v6[17].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[18].__shared_owners_ = 0u;
  v6[19].std::__shared_count = 0u;
  *(_OWORD *)&v6[19].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[20].__shared_owners_ = 0u;
  v6[21].std::__shared_count = 0u;
  *(_OWORD *)&v6[1].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[21].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[22].__shared_owners_ = 0u;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&v6[1].__shared_weak_owners_;
  v6[1].__shared_owners_ = 0x2000000000;
  llvm::SimpleBitstreamCursor::ReadVBR(this, 5u, (uint64_t)&v52);
  if ((v53 & 1) != 0)
  {
    v21 = v52;
    v52 = 0;
    *a2 = v21;
  }
  else
  {
    v8 = v52;
    if ((_DWORD)v52)
    {
      while (1)
      {
        llvm::SimpleBitstreamCursor::Read(this, 1u, (uint64_t)&v50);
        if ((v51 & 1) != 0)
        {
          v10 = v50;
          v50 = 0;
LABEL_14:
          *a2 = (uint64_t)v10;
          v9 = 1;
          goto LABEL_15;
        }
        if (!v50)
          break;
        llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v54, this, 8u);
        if ((v55.i8[0] & 1) != 0)
        {
          v10 = (llvm::formatv_object_base *)v54;
          goto LABEL_14;
        }
        v3 |= 1uLL;
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v7, v54, v3);
        v9 = 4;
LABEL_15:
        if ((v51 & 1) != 0)
        {
          v15 = v50;
          v50 = 0;
          if (v15)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v15 + 8))(v15);
        }
        if ((v9 | 4) != 4)
          goto LABEL_55;
        if (!--v8)
          goto LABEL_38;
      }
      llvm::SimpleBitstreamCursor::Read(this, 3u, (uint64_t)&v48);
      if ((v49 & 1) != 0)
      {
        v16 = v48;
        v48 = 0;
      }
      else
      {
        v11 = (char)v48;
        if ((unint64_t)(v48 - 1) >= 5)
        {
          v17 = std::generic_category();
          v54 = 92;
          v55.i64[0] = (uint64_t)v17;
          v46 = "Invalid encoding";
          v18 = &v46;
LABEL_24:
          llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)v18, &v54, a2);
          goto LABEL_25;
        }
        if (((_DWORD)v48 - 3) < 3)
        {
          v2 = v2 & 0xFFFFFFFFFFFFFFF0 | (2 * (v48 & 7));
          v12 = (unsigned int *)&v6[1];
          v13 = 0;
          v14 = v2;
LABEL_12:
          llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v12, v13, v14);
          v9 = 0;
LABEL_26:
          if ((v49 & 1) != 0)
          {
            v19 = v48;
            v48 = 0;
            if (v19)
              (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
          }
          goto LABEL_15;
        }
        if (((_DWORD)v48 - 1) >= 2)
          llvm::report_fatal_error((llvm *)"Invalid encoding", (const llvm::Twine *)1);
        llvm::SimpleBitstreamCursor::ReadVBR64((llvm::SimpleBitstreamCursor *)&v46, this, 5u);
        if ((v47 & 1) == 0)
        {
          v13 = (uint64_t)v46;
          if (!v46)
          {
            v44 |= 1uLL;
            llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v7, 0, v44);
            v9 = 4;
            goto LABEL_26;
          }
          if ((unint64_t)v46 < 0x21)
          {
            v14 = v43 & 0xFFFFFFFFFFFFFFF0 | (2 * (v11 & 7));
            v12 = (unsigned int *)&v6[1];
            v43 = v14;
            goto LABEL_12;
          }
          v20 = std::generic_category();
          v54 = 92;
          v55.i64[0] = (uint64_t)v20;
          v45 = "Fixed or VBR abbrev record with size > MaxChunkData";
          v18 = &v45;
          goto LABEL_24;
        }
        v16 = v46;
      }
      *a2 = (uint64_t)v16;
LABEL_25:
      v9 = 1;
      goto LABEL_26;
    }
LABEL_38:
    if (LODWORD(v6[1].__shared_owners_))
    {
      v22 = *((_QWORD *)this + 7);
      v23 = (unsigned int **)*((_QWORD *)this + 6);
      if ((unint64_t)v23 >= v22)
      {
        v26 = *((_QWORD *)this + 5);
        v27 = ((uint64_t)v23 - v26) >> 4;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60)
          abort();
        v29 = v22 - v26;
        if (v29 >> 3 > v28)
          v28 = v29 >> 3;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
          v30 = 0xFFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        v57 = (char *)this + 56;
        v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)this + 56, v30);
        v33 = (unsigned int **)&v31[16 * v27];
        *v33 = v7;
        v33[1] = (unsigned int *)v6;
        v35 = (_QWORD *)*((_QWORD *)this + 5);
        v34 = (_QWORD *)*((_QWORD *)this + 6);
        if (v34 == v35)
        {
          v38 = vdupq_n_s64((unint64_t)v34);
          v36 = &v31[16 * v27];
        }
        else
        {
          v36 = &v31[16 * v27];
          do
          {
            v37 = *((_OWORD *)v34 - 1);
            v34 -= 2;
            *((_OWORD *)v36 - 1) = v37;
            v36 -= 16;
            *v34 = 0;
            v34[1] = 0;
          }
          while (v34 != v35);
          v38 = *(int64x2_t *)((char *)this + 40);
        }
        v24 = v33 + 2;
        *((_QWORD *)this + 5) = v36;
        *((_QWORD *)this + 6) = v33 + 2;
        v55 = v38;
        v39 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = &v31[16 * v32];
        v56 = v39;
        v54 = v38.i64[0];
        std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v54);
      }
      else
      {
        *v23 = v7;
        v23[1] = (unsigned int *)v6;
        v24 = v23 + 2;
      }
      v6 = 0;
      *((_QWORD *)this + 6) = v24;
      *a2 = 0;
    }
    else
    {
      v25 = std::generic_category();
      v54 = 92;
      v55.i64[0] = (uint64_t)v25;
      v50 = (llvm::formatv_object_base *)"Abbrev record with no operands";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v50, &v54, a2);
    }
  }
LABEL_55:
  if ((v53 & 1) != 0)
  {
    v40 = v52;
    v52 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void llvm::BitstreamCursor::ReadBlockInfoBlock(llvm::BitstreamCursor *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  int v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  __int128 v35;
  int64x2_t v36;
  void *v37;
  _OWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  char *v67;
  void *__p[5];
  uint64_t v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[66];

  v75[64] = *MEMORY[0x24BDAC8D0];
  llvm::BitstreamCursor::EnterSubBlock(this, 0, 0, (uint64_t *)&v73);
  v6 = v73;
  if (v73)
  {
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = 0;
  v66 = 0uLL;
  v67 = 0;
  v73 = v75;
  v74 = 0x4000000000;
  do
  {
    llvm::BitstreamCursor::advanceSkippingSubblocks(this, 2, (uint64_t)&v71);
    if ((v72 & 1) != 0)
    {
      v8 = v71;
      v71 = 0;
LABEL_10:
      *(_BYTE *)(a3 + 32) |= 1u;
      *(_QWORD *)a3 = v8;
      goto LABEL_11;
    }
    switch((_DWORD)v71)
    {
      case 2:
        goto LABEL_8;
      case 1:
        *(_BYTE *)(a3 + 32) &= ~1u;
        *(_OWORD *)a3 = v66;
        *(_QWORD *)(a3 + 16) = v67;
        v66 = 0uLL;
        v67 = 0;
        v9 = 1;
        *(_BYTE *)(a3 + 24) = 1;
        goto LABEL_12;
      case 0:
        goto LABEL_8;
    }
    if (HIDWORD(v71) != 2)
    {
      LODWORD(v74) = 0;
      llvm::BitstreamCursor::readRecord(this, SHIDWORD(v71), (unsigned int *)&v73, 0, (uint64_t)&v69);
      if ((v70 & 1) != 0)
      {
        v18 = v69;
        *(_BYTE *)(a3 + 32) |= 1u;
        *(_QWORD *)a3 = v18;
        v69 = 0;
      }
      else
      {
        if ((_DWORD)v69 != 3)
        {
          if ((_DWORD)v69 == 2)
          {
            if (!v7)
              goto LABEL_8;
            if (!a2)
              goto LABEL_105;
            std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(__p, (uint64_t *)v73, (uint64_t *)v73 + v74, v74);
            v23 = (void **)(v7 + 32);
            if (*(char *)(v7 + 55) < 0)
              operator delete(*v23);
            v9 = 0;
            *(_OWORD *)v23 = *(_OWORD *)__p;
            *(void **)(v7 + 48) = __p[2];
          }
          else
          {
            if ((_DWORD)v69 != 1)
              goto LABEL_105;
            if (!(_DWORD)v74)
              goto LABEL_8;
            v15 = *(_DWORD *)v73;
            v16 = (_OWORD *)*((_QWORD *)&v66 + 1);
            v17 = (_OWORD *)v66;
            if ((_QWORD)v66 == *((_QWORD *)&v66 + 1))
            {
LABEL_57:
              if (*((_QWORD *)&v66 + 1) >= (unint64_t)v67)
              {
                v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v66 + 1) - v66) >> 4);
                v40 = v39 + 1;
                if (v39 + 1 > 0x333333333333333)
                  goto LABEL_110;
                if (0x999999999999999ALL * ((uint64_t)&v67[-v66] >> 4) > v40)
                  v40 = 0x999999999999999ALL * ((uint64_t)&v67[-v66] >> 4);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v67[-v66] >> 4) >= 0x199999999999999)
                  v41 = 0x333333333333333;
                else
                  v41 = v40;
                if (v41)
                {
                  v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)&v67, v41);
                  v16 = (_OWORD *)*((_QWORD *)&v66 + 1);
                  v17 = (_OWORD *)v66;
                }
                else
                {
                  v42 = 0;
                }
                v49 = &v42[16 * ((uint64_t)(*((_QWORD *)&v66 + 1) - v66) >> 4)];
                *((_OWORD *)v49 + 3) = 0u;
                *((_OWORD *)v49 + 4) = 0u;
                *((_OWORD *)v49 + 1) = 0u;
                *((_OWORD *)v49 + 2) = 0u;
                *(_OWORD *)v49 = 0u;
                v38 = v49 + 80;
                if (v16 == v17)
                {
                  *(_QWORD *)&v66 = &v42[80 * v39];
                  *((_QWORD *)&v66 + 1) = v49 + 80;
                  v67 = &v42[80 * v41];
                }
                else
                {
                  v50 = 0;
                  do
                  {
                    v51 = &v49[v50 * 16];
                    v52 = &v16[v50];
                    *((_DWORD *)v51 - 20) = v16[v50 - 5];
                    *((_QWORD *)v51 - 8) = 0;
                    *((_QWORD *)v51 - 7) = 0;
                    *((_QWORD *)v51 - 9) = 0;
                    *(_OWORD *)(v51 - 72) = *(_OWORD *)((char *)&v16[v50 - 4] - 8);
                    *((_QWORD *)v51 - 7) = *((_QWORD *)&v16[v50 - 3] - 1);
                    *((_QWORD *)v52 - 9) = 0;
                    *((_QWORD *)v52 - 8) = 0;
                    *((_QWORD *)v52 - 7) = 0;
                    v53 = v16[v50 - 3];
                    *((_QWORD *)v51 - 4) = *(_QWORD *)&v16[v50 - 2];
                    *((_OWORD *)v51 - 3) = v53;
                    *((_QWORD *)v52 - 5) = 0;
                    *((_QWORD *)v52 - 4) = 0;
                    *((_QWORD *)v52 - 6) = 0;
                    *((_QWORD *)v51 - 3) = 0;
                    *((_QWORD *)v51 - 2) = 0;
                    *((_QWORD *)v51 - 1) = 0;
                    *(_OWORD *)(v51 - 24) = *(_OWORD *)((char *)&v16[v50 - 1] - 8);
                    *((_QWORD *)v51 - 1) = *((_QWORD *)&v16[v50 - 1] + 1);
                    *((_QWORD *)v52 - 3) = 0;
                    *((_QWORD *)v52 - 2) = 0;
                    *((_QWORD *)v52 - 1) = 0;
                    v50 -= 5;
                  }
                  while (&v16[v50] != v17);
                  v54 = *((_QWORD *)&v66 + 1);
                  v17 = (_OWORD *)v66;
                  *(_QWORD *)&v66 = &v49[v50 * 16];
                  *((_QWORD *)&v66 + 1) = v49 + 80;
                  v67 = &v42[80 * v41];
                  while ((_OWORD *)v54 != v17)
                  {
                    v54 -= 80;
                    std::allocator<llvm::BitstreamBlockInfo::BlockInfo>::destroy[abi:nn180100]((uint64_t)&v67, v54);
                  }
                }
                if (v17)
                  operator delete(v17);
              }
              else
              {
                *(_OWORD *)(*((_QWORD *)&v66 + 1) + 48) = 0u;
                v16[4] = 0u;
                v16[1] = 0u;
                v16[2] = 0u;
                v38 = v16 + 5;
                *v16 = 0u;
              }
              v9 = 0;
              *((_QWORD *)&v66 + 1) = v38;
              *((_DWORD *)v38 - 20) = v15;
              v7 = (uint64_t)(v38 - 5);
            }
            else
            {
              v7 = *((_QWORD *)&v66 + 1) - 80;
              if (*(_DWORD *)(*((_QWORD *)&v66 + 1) - 80) != v15)
              {
                v7 = v66;
                while (*(_DWORD *)v7 != v15)
                {
                  v7 += 80;
                  if (v7 == *((_QWORD *)&v66 + 1))
                    goto LABEL_57;
                }
              }
              v9 = 0;
            }
          }
          goto LABEL_12;
        }
        if (v7)
        {
          if (a2)
          {
            v19 = *(_DWORD *)v73;
            std::string::__init_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(__p, (uint64_t *)v73 + 1, (uint64_t *)v73 + v74, (8 * v74 - 8) >> 3);
            v20 = *(_QWORD *)(v7 + 72);
            v21 = *(_QWORD *)(v7 + 64);
            if (v21 >= v20)
            {
              v43 = *(_QWORD *)(v7 + 56);
              v44 = (uint64_t)(v21 - v43) >> 5;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 59)
LABEL_110:
                abort();
              v46 = v20 - v43;
              if (v46 >> 4 > v45)
                v45 = v46 >> 4;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
                v47 = 0x7FFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
                v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v7 + 72, v47);
              else
                v48 = 0;
              v55 = &v48[32 * v44];
              *(_DWORD *)v55 = v19;
              v56 = *(_OWORD *)__p;
              *((void **)v55 + 3) = __p[2];
              *(_OWORD *)(v55 + 8) = v56;
              memset(__p, 0, 24);
              v57 = *(_QWORD *)(v7 + 56);
              v58 = *(_QWORD *)(v7 + 64);
              if (v58 == v57)
              {
                v63 = v55 + 32;
                *(_QWORD *)(v7 + 56) = v55;
                *(_QWORD *)(v7 + 64) = v55 + 32;
                *(_QWORD *)(v7 + 72) = &v48[32 * v47];
              }
              else
              {
                v59 = &v48[32 * v44];
                do
                {
                  v60 = *(_DWORD *)(v58 - 32);
                  v58 -= 32;
                  *((_DWORD *)v59 - 8) = v60;
                  v59 -= 32;
                  v61 = *(_OWORD *)(v58 + 8);
                  *((_QWORD *)v59 + 3) = *(_QWORD *)(v58 + 24);
                  *(_OWORD *)(v59 + 8) = v61;
                  *(_QWORD *)(v58 + 16) = 0;
                  *(_QWORD *)(v58 + 24) = 0;
                  *(_QWORD *)(v58 + 8) = 0;
                }
                while (v58 != v57);
                v58 = *(_QWORD *)(v7 + 56);
                v62 = *(_QWORD *)(v7 + 64);
                v63 = v55 + 32;
                *(_QWORD *)(v7 + 56) = v59;
                *(_QWORD *)(v7 + 64) = v55 + 32;
                *(_QWORD *)(v7 + 72) = &v48[32 * v47];
                while (v62 != v58)
                {
                  if (*(char *)(v62 - 1) < 0)
                    operator delete(*(void **)(v62 - 24));
                  v62 -= 32;
                }
              }
              if (v58)
                operator delete((void *)v58);
              v64 = SHIBYTE(__p[2]);
              *(_QWORD *)(v7 + 64) = v63;
              if (v64 < 0)
                operator delete(__p[0]);
            }
            else
            {
              *(_DWORD *)v21 = v19;
              v22 = *(_OWORD *)__p;
              *(void **)(v21 + 24) = __p[2];
              *(_OWORD *)(v21 + 8) = v22;
              *(_QWORD *)(v7 + 64) = v21 + 32;
            }
            if ((v70 & 1) != 0)
            {
              v65 = v69;
              v69 = 0;
              if (v65)
                (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
            }
          }
LABEL_105:
          v9 = 0;
          goto LABEL_12;
        }
LABEL_8:
        *(_BYTE *)(a3 + 32) &= ~1u;
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
LABEL_11:
      v9 = 1;
      goto LABEL_12;
    }
    if (!v7)
      goto LABEL_8;
    llvm::BitstreamCursor::ReadAbbrevRecord(this, (uint64_t *)__p);
    v8 = __p[0];
    if (__p[0])
      goto LABEL_10;
    v11 = *((_QWORD *)this + 6) - 16;
    v12 = *(_QWORD *)(v7 + 24);
    v13 = *(_OWORD **)(v7 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v24 = *(_QWORD *)(v7 + 8);
      v25 = ((uint64_t)v13 - v24) >> 4;
      if ((unint64_t)(v25 + 1) >> 60)
        goto LABEL_110;
      v26 = v12 - v24;
      v27 = v26 >> 3;
      if (v26 >> 3 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      __p[4] = (void *)(v7 + 24);
      v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v7 + 24, v28);
      v31 = &v29[16 * v25];
      *(_OWORD *)v31 = *(_OWORD *)v11;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      v33 = *(_QWORD **)(v7 + 8);
      v32 = *(_QWORD **)(v7 + 16);
      if (v32 == v33)
      {
        v36 = vdupq_n_s64((unint64_t)v32);
        v34 = &v29[16 * v25];
      }
      else
      {
        v34 = &v29[16 * v25];
        do
        {
          v35 = *((_OWORD *)v32 - 1);
          v32 -= 2;
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 16;
          *v32 = 0;
          v32[1] = 0;
        }
        while (v32 != v33);
        v36 = *(int64x2_t *)(v7 + 8);
      }
      v14 = v31 + 16;
      *(_QWORD *)(v7 + 8) = v34;
      *(_QWORD *)(v7 + 16) = v31 + 16;
      *(int64x2_t *)&__p[1] = v36;
      v37 = *(void **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = &v29[16 * v30];
      __p[3] = v37;
      __p[0] = (void *)v36.i64[0];
      std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *v13 = *(_OWORD *)v11;
      v14 = v13 + 1;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    *(_QWORD *)(v7 + 16) = v14;
    *((_QWORD *)this + 6) = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](*((_QWORD *)this + 6) - 16);
    v9 = 2;
LABEL_12:
    if ((v72 & 1) != 0)
    {
      v10 = v71;
      v71 = 0;
      if (v10)
        (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  while ((v9 | 2) == 2);
  if (v73 != v75)
    free(v73);
  v73 = &v66;
  std::vector<llvm::BitstreamBlockInfo::BlockInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v73);
}

uint64_t llvm::format_object<unsigned long,unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

uint64_t llvm::ARM::getArchSynonym(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64x2_t v9;
  const char *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  int64x2_t v45;
  char v46;

  v44[0] = a1;
  v44[1] = a2;
  v45.i8[0] = 0;
  v46 = 0;
  if (a2 == 4)
  {
    if (*(_DWORD *)a1 != 1818769014)
      goto LABEL_20;
    v9 = vdupq_n_s64(3uLL);
    v10 = "v6k";
    goto LABEL_19;
  }
  if (a2 != 3)
  {
    if (a2 != 2 || *(_WORD *)a1 != 13686)
      goto LABEL_20;
    v9 = vdupq_n_s64(3uLL);
    v10 = "v5t";
    goto LABEL_19;
  }
  if (*(_WORD *)a1 == 13686 && *(_BYTE *)(a1 + 2) == 101)
  {
    v9 = vdupq_n_s64(4uLL);
    v10 = "v5te";
    goto LABEL_19;
  }
  if (*(_WORD *)a1 == 13942 && *(_BYTE *)(a1 + 2) == 106)
  {
    v9 = vdupq_n_s64(2uLL);
    v10 = "v6";
LABEL_19:
    v9.i64[0] = (uint64_t)v10;
    v45 = v9;
    v46 = 1;
  }
LABEL_20:
  v13 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases((uint64_t)v44, "v6m", 3, "v6sm", 4, "v6s-m", 5, a8, (uint64_t)"v6-m", 4);
  v14 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v13, "v6z", 3, (uint64_t)"v6kz", 4);
  v15 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v14, "v6zk", 4, (uint64_t)"v6kz", 4);
  v16 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v15, "v7", 2, (uint64_t)"v7-a", 4);
  v18 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v16, "v7a", 3, "v7hl", 4, "v7l", 3, v17, (uint64_t)"v7-a", 4);
  v19 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v18, "v7r", 3, (uint64_t)"v7-r", 4);
  v20 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v19, "v7m", 3, (uint64_t)"v7-m", 4);
  v21 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v20, "v7em", 4, (uint64_t)"v7e-m", 5);
  v23 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v21, "v8", 2, "v8a", 3, "v8l", 3, v22, "aarch64", 7, "arm64", 5, (uint64_t)"v8-a", 4);
  v24 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v23, "v8.1a", 5, (uint64_t)"v8.1-a", 6);
  v25 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v24, "v8.2a", 5, (uint64_t)"v8.2-a", 6);
  v26 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v25, "v8.3a", 5, (uint64_t)"v8.3-a", 6);
  v27 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v26, "v8.4a", 5, (uint64_t)"v8.4-a", 6);
  v28 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v27, "v8.5a", 5, (uint64_t)"v8.5-a", 6);
  v29 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v28, "v8.6a", 5, (uint64_t)"v8.6-a", 6);
  v30 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v29, "v8.7a", 5, (uint64_t)"v8.7-a", 6);
  v31 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v30, "v8.8a", 5, (uint64_t)"v8.8-a", 6);
  v32 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v31, "v8.9a", 5, (uint64_t)"v8.9-a", 6);
  v33 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v32, "v8r", 3, (uint64_t)"v8-r", 4);
  v34 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v33, "v9", 2, (uint64_t)"v9-a", 4);
  v35 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v34, "v9a", 3, (uint64_t)"v9-a", 4);
  v36 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v35, "v9.1a", 5, (uint64_t)"v9.1-a", 6);
  v37 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v36, "v9.2a", 5, (uint64_t)"v9.2-a", 6);
  v38 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v37, "v9.3a", 5, (uint64_t)"v9.3-a", 6);
  v39 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v38, "v9.4a", 5, (uint64_t)"v9.4-a", 6);
  v40 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v39, "v8m.base", 8, (uint64_t)"v8-m.base", 9);
  v41 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v40, "v8m.main", 8, (uint64_t)"v8-m.main", 9);
  v42 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v41, "v8.1m.main", 10, (uint64_t)"v8.1-m.main", 11);
  if (*(_BYTE *)(v42 + 32))
    return *(_QWORD *)(v42 + 16);
  else
    return a1;
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v7;

  if (!*(_BYTE *)(a1 + 32))
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == a3 && (!v7 || !memcmp(*(const void **)a1, a2, v7)))
    {
      *(_QWORD *)(a1 + 16) = a4;
      *(_QWORD *)(a1 + 24) = a5;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }
  return a1;
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;

  v14 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(a1, a2, a3, a9, a10);
  v15 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v14, a4, a5, a9, a10);
  return llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v15, a6, a7, a9, a10);
}

uint64_t llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(a1, a2, a3, a13, a14);
  v19 = llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Case(v18, a4, a5, a13, a14);
  return llvm::StringSwitch<llvm::StringRef,llvm::StringRef>::Cases(v19, a6, a7, a9, a10, a11, a12, v20, a13, a14);
}

const char *llvm::ARM::getCanonicalArchName(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v23;
  unint64_t v24;

  v2 = a1;
  v23 = (_BYTE *)a1;
  v24 = a2;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x32335F34366D7261)
    {
      v5 = 8;
      goto LABEL_57;
    }
  }
  else if (a2 < 6)
  {
    if (a2 != 5)
    {
      if (a2 < 3)
      {
        v5 = -1;
        v4 = a2;
        goto LABEL_63;
      }
      if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
        goto LABEL_54;
      goto LABEL_55;
    }
    v3 = *(_DWORD *)a1 == 913142369 && *(_BYTE *)(a1 + 4) == 52;
    if (v3)
    {
      v4 = 5;
      v5 = 5;
      goto LABEL_58;
    }
LABEL_24:
    if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
    {
      if (*(_DWORD *)a1 != 1836410996 || *(_BYTE *)(a1 + 4) != 98)
      {
        if (a2 < 7 || (*(_DWORD *)a1 == 1668440417 ? (v11 = *(_DWORD *)(a1 + 3) == 875980899) : (v11 = 0), !v11))
        {
LABEL_54:
          v5 = -1;
          v17 = a1;
          v4 = a2;
          goto LABEL_65;
        }
        if (llvm::StringRef::find((uint64_t *)&v23, "eb", 2uLL, 0) != -1)
          return "";
        v4 = v24;
        v5 = 7;
        if (v24 >= 7)
          v12 = 7;
        else
          v12 = v24;
        if (v24 - v12 >= 3)
        {
          v13 = &v23[v12];
          v14 = bswap32(*(unsigned __int16 *)&v23[v12]) >> 16;
          if (v14 == 24418)
            v15 = v13[2] - 101;
          else
            v15 = v14 < 0x5F62 ? -1 : 1;
          v3 = v15 == 0;
          v5 = 7;
          if (v3)
            v5 = 10;
        }
        goto LABEL_58;
      }
      goto LABEL_46;
    }
LABEL_55:
    v5 = 3;
    goto LABEL_57;
  }
  if (*(_DWORD *)a1 != 913142369 || *(_WORD *)(a1 + 4) != 25908)
  {
    if (*(_DWORD *)a1 == 913142369 && *(_BYTE *)(a1 + 4) == 52)
    {
LABEL_46:
      v5 = 5;
      goto LABEL_57;
    }
    if (a2 >= 0xA && *(_QWORD *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 12851)
    {
      v5 = 10;
      goto LABEL_57;
    }
    goto LABEL_24;
  }
  v5 = 6;
LABEL_57:
  v4 = a2;
LABEL_58:
  if (v4 >= v5)
    v18 = v5;
  else
    v18 = v4;
  if (v4 - v18 >= 2)
  {
    v19 = (uint64_t)v23;
    if (*(_WORD *)&v23[v18] == 25189)
    {
      v5 += 2;
      goto LABEL_74;
    }
  }
LABEL_63:
  if (v4 >= 2)
  {
    v17 = (uint64_t)v23;
LABEL_65:
    if (*(_WORD *)(v17 + v4 - 2) == 25189)
    {
      if (v4 >= v4 - 2)
        v4 -= 2;
      v23 = (_BYTE *)v17;
    }
  }
  if (v5 == -1)
  {
    if (!v4)
      return (const char *)v2;
    return v23;
  }
  v19 = (uint64_t)v23;
LABEL_74:
  if (v4 >= v5)
    v20 = v5;
  else
    v20 = v4;
  v21 = (_BYTE *)(v19 + v20);
  v23 = v21;
  v24 = v4 - v20;
  if (v4 > v5)
  {
    if (v4 - v20 >= 2
      && (*v21 != 118
       || (char)v21[1] < 0
       || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v21[1] + 60) & 0x400) == 0)
      || llvm::StringRef::find((uint64_t *)&v23, "eb", 2uLL, 0) != -1)
    {
      return "";
    }
    return v23;
  }
  return (const char *)v2;
}

uint64_t llvm::ARM::parseArchISA(uint64_t a1, unint64_t a2)
{
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899)
      return 3;
  }
  else if (a2 < 5)
  {
    if (a2 < 3)
      return 0;
    return *(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109;
  }
  if (*(_DWORD *)a1 == 913142369 && *(_BYTE *)(a1 + 4) == 52)
    return 3;
  if (*(_DWORD *)a1 == 1836410996 && *(_BYTE *)(a1 + 4) == 98)
    return 2;
  return *(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109;
}

uint64_t llvm::ARM::parseArchEndian(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  char v6;
  BOOL v7;
  BOOL v8;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  int v14;

  if (a2 < 5)
  {
    if (a2 < 3)
      return 0;
    if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
      return 0;
    goto LABEL_30;
  }
  if (*(_DWORD *)a1 == 1701671521 && *(_BYTE *)(a1 + 4) == 98)
    return 2;
  if (a2 < 7)
  {
LABEL_18:
    v6 = 1;
    goto LABEL_19;
  }
  if (*(_DWORD *)a1 == 1836410996 && *(_DWORD *)(a1 + 3) == 1650811501)
    return 2;
  if (a2 < 0xA)
    goto LABEL_18;
  if (*(_QWORD *)a1 == 0x5F34366863726161 && *(_WORD *)(a1 + 8) == 25954)
    return 2;
  v6 = 0;
LABEL_19:
  v7 = *(_WORD *)a1 == 29281 && *(_BYTE *)(a1 + 2) == 109;
  if (v7 || (*(_DWORD *)a1 == 1836410996 ? (v8 = *(_BYTE *)(a1 + 4) == 98) : (v8 = 0), v8))
  {
LABEL_30:
    if (bswap32(*(unsigned __int16 *)(a1 + a2 - 2)) >> 16 == 25954)
      return 2;
    else
      return 1;
  }
  if (a2 < 7)
  {
    if ((v6 & 1) != 0)
      return 0;
    goto LABEL_50;
  }
  v11 = *(_DWORD *)a1 == 1668440417 && *(_DWORD *)(a1 + 3) == 875980899;
  v3 = v11;
  if (v11)
    v6 = 1;
  if ((v6 & 1) == 0)
  {
LABEL_50:
    v12 = 0x616172636836345FLL;
    v13 = bswap64(*(_QWORD *)a1);
    if (v13 == 0x616172636836345FLL
      && (v13 = bswap32(*(unsigned __int16 *)(a1 + 8)) >> 16, v12 = 13106, (_DWORD)v13 == 13106))
    {
      v14 = 0;
    }
    else if (v13 < v12)
    {
      v14 = -1;
    }
    else
    {
      v14 = 1;
    }
    return v14 == 0;
  }
  return v3;
}

uint64_t llvm::ARM::parseArch(uint64_t a1, unint64_t a2)
{
  const char *CanonicalArchName;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *ArchSynonym;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  ArchSynonym = (const void *)llvm::ARM::getArchSynonym((uint64_t)CanonicalArchName, v3, v4, v5, v6, v7, v8, v9);
  v12 = v11;
  v13 = 0;
  v14 = -(uint64_t)v11;
  while (1)
  {
    v15 = (&llvm::ARM::ARMArchNames)[v13 + 1];
    if ((unint64_t)v15 >= v12
      && (!v12 || !memcmp(&v15[(_QWORD)(&llvm::ARM::ARMArchNames)[v13] + v14], ArchSynonym, v12)))
    {
      break;
    }
    v13 += 9;
    if (v13 == 360)
      return 0;
  }
  return LODWORD((&llvm::ARM::ARMArchNames)[v13 + 8]);
}

uint64_t llvm::ARM::parseArchVersion(uint64_t a1, unint64_t a2)
{
  const char *CanonicalArchName;
  unint64_t v3;

  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  return dword_24AA4A2F8[(int)llvm::ARM::parseArch((uint64_t)CanonicalArchName, v3)];
}

uint64_t getProfileKind(int a1)
{
  return dword_24AA4A398[a1];
}

void updateTripleOSVersion(std::string *a1, std::string *__s)
{
  uint64_t v4;
  std::string *v5;
  uint64_t size;
  char *v7;
  std::string *v8;
  char *v9;
  utsname *p_p;
  std::string::size_type v12;
  void *v13;
  std::string *v14;
  char *v15;
  std::string *v16;
  char *v17;
  utsname *v19;
  std::string::size_type v20;
  int v21;
  std::string *v22;
  std::string::size_type v23;
  std::string v24;
  std::string v25;
  __int16 v26;
  int v27;
  utsname __p;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    v5 = __s;
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size >= 7)
  {
    v7 = (char *)v5 + size;
    v8 = v5;
    do
    {
      v9 = (char *)memchr(v8, 45, size - 6);
      if (!v9)
        break;
      if (*(_DWORD *)v9 == 1918985261 && *(_DWORD *)(v9 + 3) == 1852405618)
      {
        if (v9 == v7 || v9 - (char *)v5 == -1)
          break;
        std::string::resize(__s, v9 - (char *)v5 + 7, 0);
        getOSVersion(&__p);
        if (__p.sysname[23] >= 0)
          p_p = &__p;
        else
          p_p = *(utsname **)__p.sysname;
        if (__p.sysname[23] >= 0)
          v12 = __p.sysname[23];
        else
          v12 = *(_QWORD *)&__p.sysname[8];
        std::string::append(__s, p_p->sysname, v12);
        if (__p.sysname[23] < 0)
        {
          v13 = *(void **)__p.sysname;
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      v8 = (std::string *)(v9 + 1);
      size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 7);
  }
  if ((v4 & 0x80) != 0)
  {
    v14 = (std::string *)__s->__r_.__value_.__r.__words[0];
    v4 = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    v14 = __s;
  }
  if (v4 >= 6)
  {
    v15 = (char *)v14 + v4;
    v16 = v14;
    do
    {
      v17 = (char *)memchr(v16, 45, v4 - 5);
      if (!v17)
        break;
      if (*(_DWORD *)v17 == 1667329325 && *((_WORD *)v17 + 2) == 29551)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
        {
          std::string::resize(__s, v17 - (char *)v14, 0);
          std::string::append(__s, "-darwin");
          getOSVersion(&__p);
          v19 = __p.sysname[23] >= 0 ? &__p : *(utsname **)__p.sysname;
          v20 = __p.sysname[23] >= 0 ? __p.sysname[23] : *(_QWORD *)&__p.sysname[8];
          std::string::append(__s, v19->sysname, v20);
          if (__p.sysname[23] < 0)
            operator delete(*(void **)__p.sysname);
        }
        break;
      }
      v16 = (std::string *)(v17 + 1);
      v4 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 6);
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)"x86_64-apple-darwin22.1.0";
  v26 = 259;
  llvm::Triple::Triple((std::string *)&__p, (llvm::formatv_object_base **)&v25);
  v21 = *(_DWORD *)&__p.sysname[36];
  if (__p.sysname[23] < 0)
    operator delete(*(void **)__p.sysname);
  if (v21 != 21)
    goto LABEL_53;
  *(_WORD *)&__p.sysname[32] = 260;
  *(_QWORD *)__p.sysname = __s;
  llvm::Triple::Triple(&v25, (llvm::formatv_object_base **)&__p);
  if (v27 != 21 || llvm::Triple::getOSVersion((llvm::Triple *)&v25) || uname(&__p) == -1)
  {
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_52:
      operator delete(v13);
    }
LABEL_53:
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
    __s->__r_.__value_.__l.__size_ = 0;
    __s->__r_.__value_.__r.__words[2] = 0;
    __s->__r_.__value_.__r.__words[0] = 0;
    return;
  }
  *((_BYTE *)&v24.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v24, "aix");
  std::string::append(&v24, __p.version);
  std::string::push_back(&v24, 46);
  std::string::append(&v24, __p.release);
  std::string::append(&v24, ".0.0");
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v24;
  else
    v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    v23 = v24.__r_.__value_.__l.__size_;
  llvm::Triple::setOSName((llvm::Triple *)&v25, (uint64_t)v22, v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(a1, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    *a1 = v25;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void llvm::sys::getProcessTriple(std::string *a1@<X8>)
{
  std::string *v3;
  std::string::size_type size;
  char *ArchTypeName;
  uint64_t v6;
  std::string::size_type v7;
  char v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string __p;
  std::string v16;
  std::string v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(&__p, "x86_64-apple-darwin22.1.0");
  updateTripleOSVersion(&v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v16;
  else
    v3 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  llvm::Triple::normalize((uint64_t)v3, size, &v17);
  LOWORD(v10.__r_.__value_.__r.__words[1]) = 260;
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  llvm::Triple::Triple(&v13, (llvm::formatv_object_base **)&v9);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v11 = v13;
  v12 = v14;
  ArchTypeName = llvm::Triple::getArchTypeName(3);
  llvm::Triple::setArchName((llvm::Triple *)&v11, ArchTypeName, v6);
  llvm::Triple::setArchName((llvm::Triple *)&v11, "arm64", 5);
  v17.__r_.__value_.__r.__words[0] = v11.__r_.__value_.__l.__size_;
  v7 = v11.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  v8 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  memset(&v11, 0, sizeof(v11));
  v9 = v12;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    v13.__r_.__value_.__r.__words[0] = v7;
    v13.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = v8;
    v14 = v9;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  else
  {
    v13.__r_.__value_.__r.__words[0] = v7;
    v13.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = v8;
    v14 = v12;
  }
  if (getArchPointerBitWidth((int)v14.__r_.__value_.__l.__data_) == 32)
  {
    llvm::Triple::get64BitArchVariant((llvm::Triple *)&v13, (uint64_t)&v9);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    v13 = v9;
    v14 = v10;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    *a1 = v13;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

_QWORD *getOSVersion(_QWORD *a1)
{
  utsname v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  if (uname(&v3))
    return std::string::basic_string[abi:nn180100]<0>(a1, "");
  else
    return std::string::basic_string[abi:nn180100]<0>(a1, v3.release);
}

char *llvm::Triple::getArchTypeName(int a1)
{
  return off_251C37188[a1];
}

char *llvm::Triple::getOSTypeName(llvm::Triple *this)
{
  return off_251C37370[(int)this];
}

char *llvm::Triple::getEnvironmentTypeName(int a1)
{
  return off_251C374C8[a1];
}

uint64_t parseBPFArch(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unsigned int v5;
  int v6;
  int v8;

  if (a2 != 6)
  {
    if (a2 != 5)
    {
      if (a2 != 3)
        return 0;
      v2 = *(_WORD *)a1 == 28770 && *(_BYTE *)(a1 + 2) == 102;
      goto LABEL_26;
    }
    if (*(_DWORD *)a1 != 1701212258 || *(_BYTE *)(a1 + 4) != 98)
    {
      v5 = bswap32(*(_DWORD *)a1);
      if (v5 == 1651533413)
      {
        v6 = *(unsigned __int8 *)(a1 + 4) - 108;
      }
      else if (v5 < 0x62706665)
      {
        v6 = -1;
      }
      else
      {
        v6 = 1;
      }
      v2 = v6 == 0;
      goto LABEL_26;
    }
    return 9;
  }
  if (*(_DWORD *)a1 == 1600548962 && *(_WORD *)(a1 + 4) == 25954)
    return 9;
  v2 = *(_DWORD *)a1 == 1600548962 && *(_WORD *)(a1 + 4) == 25964;
LABEL_26:
  v8 = v2;
  return (8 * v8);
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  size_t v6;

  if (!*(_BYTE *)(a1 + 20))
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 == a3 && (!v6 || !memcmp(*(const void **)a1, a2, v6)))
    {
      *(_DWORD *)(a1 + 16) = a4;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
  return a1;
}

std::string *llvm::Triple::Triple(std::string *this, llvm::formatv_object_base **a2)
{
  BOOL v3;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  unint64_t v7;
  int v9;
  const char *CanonicalArchName;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v33;
  uint64_t v35;
  _QWORD v38[2];
  void *v39;
  uint64_t v40;
  _QWORD v41[9];

  v41[8] = *MEMORY[0x24BDAC8D0];
  llvm::Twine::str(a2, this);
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v3 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = this->__r_.__value_.__l.__size_;
  v38[1] = size;
  v39 = v41;
  v40 = 0x400000000;
  if (!v3)
    v4 = this;
  v38[0] = v4;
  llvm::StringRef::split((unsigned int *)v38, (unsigned int *)&v39, 45, 3, 1);
  if (!(_DWORD)v40)
  {
LABEL_105:
    if (!HIDWORD(this[1].__r_.__value_.__r.__words[2]))
      goto LABEL_106;
    goto LABEL_107;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = parseArch(*(_QWORD *)v39, *((_QWORD *)v39 + 1));
  v6 = *(_QWORD *)v39;
  v7 = *((_QWORD *)v39 + 1);
  if (v7 >= 4
    && *(_DWORD *)v6 == 1936746861
    && (*(_DWORD *)(v6 + v7 - 4) == 1818572402 || *(_WORD *)(v6 + v7 - 2) == 13938))
  {
    v9 = 38;
    goto LABEL_61;
  }
  switch(v7)
  {
    case 6uLL:
      if (*(_DWORD *)v6 == 913142369 && *(_WORD *)(v6 + 4) == 25908)
      {
        v9 = 33;
        goto LABEL_61;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v6 == 913142369 && *(_DWORD *)(v6 + 3) == 1667576886)
      {
        v9 = 34;
        goto LABEL_61;
      }
      break;
    case 0xAuLL:
      if (*(_QWORD *)v6 == 0x7363707265776F70 && *(_WORD *)(v6 + 8) == 25968)
      {
        v9 = 39;
        goto LABEL_61;
      }
      break;
    default:
      if (v7 < 5)
        goto LABEL_34;
      break;
  }
  if (*(_DWORD *)v6 == 1919512691 && *(_BYTE *)(v6 + 4) == 118)
  {
    v16 = v6 + v7;
    if (*(_DWORD *)(v6 + v7 - 4) == 808333686)
    {
      v9 = 40;
    }
    else
    {
      switch(*(_DWORD *)(v16 - 4))
      {
        case 0x312E3176:
          v9 = 41;
          break;
        case 0x322E3176:
          v9 = 42;
          break;
        case 0x332E3176:
          v9 = 43;
          break;
        case 0x342E3176:
          v9 = 44;
          break;
        case 0x352E3176:
          v9 = 45;
          break;
        default:
          v9 = 0;
          break;
      }
    }
    goto LABEL_61;
  }
LABEL_34:
  CanonicalArchName = llvm::ARM::getCanonicalArchName(*(_QWORD *)v39, *((_QWORD *)v39 + 1));
  if (v14)
  {
    v15 = llvm::ARM::parseArch((uint64_t)CanonicalArchName, v14) - 2;
    if (v15 <= 0x25)
    {
      v9 = dword_24AA4A948[v15];
      goto LABEL_61;
    }
    goto LABEL_49;
  }
  if (v7 < 8)
  {
LABEL_49:
    v9 = 0;
    goto LABEL_61;
  }
  v17 = v6 + v7;
  if (*(_QWORD *)(v6 + v7 - 8) == 0x3361626D696C616BLL)
  {
    v9 = 35;
  }
  else if (*(_QWORD *)(v17 - 8) == 0x3461626D696C616BLL)
  {
    v9 = 36;
  }
  else
  {
    if (*(_QWORD *)(v17 - 8) != 0x3561626D696C616BLL)
      goto LABEL_49;
    v9 = 37;
  }
LABEL_61:
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v9;
  v18 = v40;
  v19 = v39;
  if (v40 < 2)
  {
    v23 = *(_QWORD *)v39;
    v24 = *((_QWORD *)v39 + 1);
    if (v24 < 7)
    {
      if (v24 == 4)
      {
        if (*(_DWORD *)v23 == 1936746861)
          goto LABEL_102;
      }
      else if (v24 == 6)
      {
        if (*(_DWORD *)v23 != 1936746861 || *(_WORD *)(v23 + 4) != 13366)
        {
          if (*(_DWORD *)v23 == 1936746861 && *(_WORD *)(v23 + 4) == 27749)
            goto LABEL_102;
          v27 = *(_DWORD *)v23;
          v28 = *(unsigned __int16 *)(v23 + 4);
          v29 = v27 == 1936746861;
          v30 = 13938;
          goto LABEL_97;
        }
        goto LABEL_103;
      }
      goto LABEL_91;
    }
    if (*(_DWORD *)v23 == 1936746861 && *(_DWORD *)(v23 + 3) == 842231411)
    {
      v33 = 2;
    }
    else
    {
      if (*(_DWORD *)v23 == 1936746861 && *(_WORD *)(v23 + 4) == 13366)
        goto LABEL_103;
      if (v24 >= 9)
      {
        if (*(_QWORD *)v23 != 0x366173697370696DLL || *(_BYTE *)(v23 + 8) != 52)
        {
          v35 = *(_QWORD *)v23;
          v28 = *(unsigned __int8 *)(v23 + 8);
          v29 = v35 == 0x336173697370696DLL;
          v30 = 50;
LABEL_97:
          if (!v29 || v28 != v30)
            goto LABEL_91;
LABEL_102:
          v33 = 1;
          goto LABEL_104;
        }
LABEL_103:
        v33 = 3;
        goto LABEL_104;
      }
      if (v24 != 8)
      {
LABEL_91:
        v33 = 0;
        goto LABEL_104;
      }
      v33 = *(_QWORD *)v23 == 0x6C6536727370696DLL;
    }
LABEL_104:
    LODWORD(this[1].__r_.__value_.__r.__words[2]) = v33;
    goto LABEL_105;
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = parseVendor(*((_QWORD *)v39 + 2), *((_QWORD *)v39 + 3));
  if (v18 == 2)
    goto LABEL_105;
  HIDWORD(this[1].__r_.__value_.__r.__words[1]) = parseOS(v19[4], v19[5]);
  if (v18 < 4)
    goto LABEL_105;
  v20 = v19[6];
  v21 = v19[7];
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = parseEnvironment(v20, v21);
  v22 = parseFormat(v20, v21);
  HIDWORD(this[1].__r_.__value_.__r.__words[2]) = v22;
  if (!v22)
LABEL_106:
    __asm { BR              X12 }
LABEL_107:
  if (v39 != v41)
    free(v39);
  return this;
}

uint64_t parseArch(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v12;
  BOOL v13;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  unsigned int v20;
  const char *CanonicalArchName;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  int v27;
  int ProfileKind;
  int v29;
  unsigned int v30;
  _DWORD *v32;
  unint64_t v33;
  unsigned int v34;
  char v35;

  v32 = (_DWORD *)a1;
  v33 = a2;
  LOBYTE(v34) = 0;
  v35 = 0;
  if (a2 == 4 && *(_DWORD *)a1 == 909652841)
  {
    v34 = 37;
    v35 = 1;
  }
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "i486", 4, "i586", 4, "i686", 4, 37);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "i786", 4, "i886", 4, "i986", 4, 37);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "amd64", 5, "x86_64", 6, "x86_64h", 7, 38);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "powerpc", 7, 21);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "powerpcspe", 10, "ppc", 3, "ppc32", 5, 21);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "powerpcle", 9, "ppcle", 5, "ppc32le", 7, 22);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "powerpc64", 9, "ppu", 3, "ppc64", 5, 23);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "powerpc64le", 11, 24);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "ppc64le", 7, 24);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xscale", 6, 1);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xscaleeb", 8, 2);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "aarch64", 7, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "aarch64_be", 10, 4);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "aarch64_32", 10, 5);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arc", 3, 6);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64", 5, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64_32", 8, 5);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64e", 6, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm64ec", 7, 3);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "arm", 3, 1);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "armeb", 5, 2);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "thumb", 5, 35);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "thumbeb", 7, 36);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "avr", 3, 7);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "m68k", 4, 15);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "msp430", 6, 20);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mips", 4, "mipseb", 6, "mipsallegrex", 12, v4, "mipsisa32r6", 11, "mipsr6", 6, 16);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "mipsel", 6, 17);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mipsallegrexel", 14, "mipsisa32r6el", 13, "mipsr6el", 8, 17);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "mips64", 6, 18);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mips64eb", 8, "mipsn32", 7, "mipsisa64r6", 11, v5, "mips64r6", 8, "mipsn32r6", 9, 18);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "mips64el", 8, "mipsn32el", 9, "mipsisa64r6el", 13, v6, "mips64r6el", 10, "mipsn32r6el", 11, 19);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "r600", 4, 25);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "amdgcn", 6, 26);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "riscv32", 7, 27);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "riscv64", 7, 28);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "hexagon", 7, 12);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "s390x", 5, 32);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "systemz", 7, 32);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparc", 5, 29);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparcel", 7, 31);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparcv9", 7, 30);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "sparc64", 7, 30);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "tce", 3, 33);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "tcele", 5, 34);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xcore", 5, 39);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "nvptx", 5, 41);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "nvptx64", 7, 42);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "le32", 4, 43);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "le64", 4, 44);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "amdil", 5, 45);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "amdil64", 7, 46);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "hsail", 5, 47);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "hsail64", 7, 48);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "spir", 4, 49);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "spir64", 6, 50);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "spirv32", 7, "spirv32v1.0", 11, "spirv32v1.1", 11, v7, "spirv32v1.2", 11, "spirv32v1.3", 11, "spirv32v1.4", 11, "spirv32v1.5", 11, 51);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases((uint64_t)&v32, "spirv64", 7, "spirv64v1.0", 11, "spirv64v1.1", 11, v8, "spirv64v1.2", 11, "spirv64v1.3", 11, "spirv64v1.4", 11, "spirv64v1.5", 11, 52);
  if (!v35 && v33 >= 7 && *v32 == 1768710507 && *(_DWORD *)((char *)v32 + 3) == 1633840489)
  {
    v34 = 53;
    v35 = 1;
  }
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "lanai", 5, 55);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "renderscript32", 14, 58);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "renderscript64", 14, 59);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "shave", 5, 54);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "ve", 2, 60);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "wasm32", 6, 56);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "wasm64", 6, 57);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "csky", 4, 10);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "loongarch32", 11, 13);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "loongarch64", 11, 14);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "dxil", 4, 11);
  llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case((uint64_t)&v32, "xtensa", 6, 40);
  if (!v35 || (result = v34) == 0)
  {
    if (a2 < 3)
      return 0;
    if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
    {
      if (a2 < 5
        || (*(_DWORD *)a1 == 1836410996 ? (v12 = *(_BYTE *)(a1 + 4) == 98) : (v12 = 0),
            !v12
         && (a2 < 7 || (*(_DWORD *)a1 == 1668440417 ? (v13 = *(_DWORD *)(a1 + 3) == 875980899) : (v13 = 0), !v13))))
      {
        if (*(_WORD *)a1 == 28770 && *(_BYTE *)(a1 + 2) == 102)
          return parseBPFArch(a1, a2);
        return 0;
      }
    }
    v15 = llvm::ARM::parseArchISA(a1, a2);
    v16 = llvm::ARM::parseArchEndian(a1, a2);
    v17 = v16;
    if (v16 == 2)
    {
      v18 = v15 - 1;
      if ((v15 - 1) <= 2)
      {
        v19 = &unk_24AA4A9EC;
        goto LABEL_41;
      }
    }
    else if (v16 == 1)
    {
      v18 = v15 - 1;
      if ((v15 - 1) < 3)
      {
        v19 = &unk_24AA4A9E0;
LABEL_41:
        v20 = v19[v18];
LABEL_43:
        CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
        if (v22)
        {
          v23 = (uint64_t)CanonicalArchName;
          v24 = v22;
          if (v15 != 2 || v22 == 1 || *(_WORD *)CanonicalArchName != 12918 && *(_WORD *)CanonicalArchName != 13174)
          {
            v25 = llvm::ARM::getCanonicalArchName((uint64_t)CanonicalArchName, v22);
            v27 = llvm::ARM::parseArch((uint64_t)v25, v26);
            ProfileKind = getProfileKind(v27);
            v29 = llvm::ARM::parseArchVersion(v23, v24);
            if (v17 == 2)
              v30 = 36;
            else
              v30 = 35;
            if (v29 == 6 && ProfileKind == 3)
              return v30;
            else
              return v20;
          }
        }
        return 0;
      }
    }
    v20 = 0;
    goto LABEL_43;
  }
  return result;
}

uint64_t parseVendor(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 == 25456)
      {
        result = 2;
      }
      else
      {
        if (*(_WORD *)a1 != 25967)
          goto LABEL_53;
        result = 14;
      }
      break;
    case 3:
      if (*(_WORD *)a1 == 26995 && *(_BYTE *)(a1 + 2) == 101)
        goto LABEL_54;
      if (*(_WORD *)a1 == 29542 && *(_BYTE *)(a1 + 2) == 108)
      {
        result = 4;
      }
      else if (*(_WORD *)a1 == 25193 && *(_BYTE *)(a1 + 2) == 109)
      {
        result = 5;
      }
      else if (*(_WORD *)a1 == 28009 && *(_BYTE *)(a1 + 2) == 103)
      {
        result = 6;
      }
      else if (*(_WORD *)a1 == 29805 && *(_BYTE *)(a1 + 2) == 105)
      {
        result = 7;
      }
      else if (*(_WORD *)a1 == 29539 && *(_BYTE *)(a1 + 2) == 114)
      {
        result = 9;
      }
      else
      {
        if (*(_WORD *)a1 != 28001 || *(_BYTE *)(a1 + 2) != 100)
          goto LABEL_53;
        result = 11;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x69656373:
LABEL_54:
          result = 3;
          break;
        case 0x6173656D:
          result = 12;
          break;
        case 0x65737573:
          result = 13;
          break;
        default:
          goto LABEL_53;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1819308129 || *(_BYTE *)(a1 + 4) != 101)
        goto LABEL_53;
      result = 1;
      break;
    case 6:
      if (*(_DWORD *)a1 == 1684633198 && *(_WORD *)(a1 + 4) == 24937)
      {
        result = 8;
      }
      else
      {
        if (*(_DWORD *)a1 != 1769109869 || *(_WORD *)(a1 + 4) != 25697)
          goto LABEL_53;
        result = 10;
      }
      break;
    default:
LABEL_53:
      result = 0;
      break;
  }
  return result;
}

uint64_t parseOS(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 == 1851879009 && *(_WORD *)(a1 + 4) == 29537)
      return 1;
    if (a2 >= 8 && *(_QWORD *)a1 == 0x69626164756F6C63)
      return 2;
    if (*(_DWORD *)a1 == 2003984740 && *(_WORD *)(a1 + 4) == 28265)
      return 3;
    if (a2 >= 9)
    {
      if (*(_QWORD *)a1 == 0x6C666E6F67617264 && *(_BYTE *)(a1 + 8) == 121)
        return 4;
    }
    else if (a2 < 7)
    {
      if (*(_WORD *)a1 != 28521 || *(_BYTE *)(a1 + 2) != 115)
        goto LABEL_45;
      return 7;
    }
    if (*(_DWORD *)a1 == 1701147238 && *(_DWORD *)(a1 + 3) == 1685283429)
      return 5;
    if (*(_DWORD *)a1 == 1751348582 && *(_DWORD *)(a1 + 3) == 1634300776)
      return 6;
  }
  else if (a2 < 3)
  {
    return 0;
  }
  if (*(_WORD *)a1 == 28521 && *(_BYTE *)(a1 + 2) == 115)
    return 7;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x647362656572666BLL)
      return 8;
  }
  else if (a2 < 5)
  {
    goto LABEL_49;
  }
LABEL_45:
  if (*(_DWORD *)a1 == 1970170220 && *(_BYTE *)(a1 + 4) == 120)
    return 9;
LABEL_49:
  if (*(_WORD *)a1 == 30316 && *(_BYTE *)(a1 + 2) == 50)
    return 10;
  if (a2 >= 5)
  {
    if (*(_DWORD *)a1 == 1868783981 && *(_BYTE *)(a1 + 4) == 115)
      return 11;
    if (a2 >= 6)
    {
      if (*(_DWORD *)a1 == 1651795310 && *(_WORD *)(a1 + 4) == 25715)
        return 12;
      if (a2 >= 7)
      {
        if (*(_DWORD *)a1 == 1852141679 && *(_DWORD *)(a1 + 3) == 1685283438)
          return 13;
        if (*(_DWORD *)a1 == 1634496371 && *(_DWORD *)(a1 + 3) == 1936290401)
          return 14;
      }
    }
    if (*(_DWORD *)a1 == 862873975 && *(_BYTE *)(a1 + 4) == 50)
      return 15;
    if (a2 >= 7 && *(_DWORD *)a1 == 1684957559 && *(_DWORD *)(a1 + 3) == 1937207140)
      return 15;
    if (*(_WORD *)a1 != 28538 || *(_BYTE *)(a1 + 2) != 115)
    {
      if (*(_DWORD *)a1 == 1802068328 && *(_BYTE *)(a1 + 4) == 117)
        return 17;
      if (*(_DWORD *)a1 == 1768843629 && *(_BYTE *)(a1 + 4) == 120)
        return 18;
      if (*(_DWORD *)a1 == 1835365490 && *(_BYTE *)(a1 + 4) == 115)
        return 19;
      goto LABEL_59;
    }
    return 16;
  }
  if (*(_WORD *)a1 == 28538 && *(_BYTE *)(a1 + 2) == 115)
    return 16;
  if (a2 != 4)
  {
    if (*(_WORD *)a1 != 26977 || *(_BYTE *)(a1 + 2) != 120)
      goto LABEL_131;
    return 21;
  }
LABEL_59:
  if (*(_DWORD *)a1 == 1818452334)
    return 20;
  if (*(_WORD *)a1 == 26977 && *(_BYTE *)(a1 + 2) == 120)
    return 21;
  if (*(_DWORD *)a1 == 1633973603)
    return 22;
  if (*(_DWORD *)a1 == 1818457710)
    return 23;
  if (a2 >= 6 && *(_DWORD *)a1 == 1751412065 && *(_WORD *)(a1 + 4) == 24947)
    return 24;
LABEL_131:
  if (*(_WORD *)a1 == 29552 && *(_BYTE *)(a1 + 2) == 52)
    return 25;
  if (*(_WORD *)a1 == 29552 && *(_BYTE *)(a1 + 2) == 53)
    return 26;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x75636D6169666C65)
      return 27;
  }
  else if (a2 < 4)
  {
    return 0;
  }
  if (*(_DWORD *)a1 == 1936684660)
    return 28;
  if (a2 < 7)
    goto LABEL_153;
  if (*(_DWORD *)a1 == 1668571511 && *(_DWORD *)(a1 + 3) == 1936681059)
    return 29;
  if (a2 >= 8)
  {
    if (*(_QWORD *)a1 == 0x736F656764697262)
      return 30;
    if (a2 >= 9)
    {
      if (*(_QWORD *)a1 == 0x696B726576697264 && *(_BYTE *)(a1 + 8) == 116)
        return 31;
LABEL_153:
      if (*(_DWORD *)a1 != 1936683640)
      {
        if (a2 < 5)
          goto LABEL_200;
        if (*(_DWORD *)a1 != 1869636979 || *(_BYTE *)(a1 + 4) != 115)
        {
          if (a2 < 6)
            goto LABEL_200;
          if (*(_DWORD *)a1 != 1634952557 || *(_WORD *)(a1 + 4) != 25651)
          {
            if (a2 < 7)
              goto LABEL_192;
            goto LABEL_188;
          }
          return 34;
        }
        return 33;
      }
      return 32;
    }
  }
  if (*(_DWORD *)a1 == 1936683640)
    return 32;
  if (*(_DWORD *)a1 == 1869636979 && *(_BYTE *)(a1 + 4) == 115)
    return 33;
  if (*(_DWORD *)a1 == 1634952557 && *(_WORD *)(a1 + 4) == 25651)
    return 34;
LABEL_188:
  if (*(_DWORD *)a1 == 1953394531 && *(_DWORD *)(a1 + 3) == 1768647028)
    return 35;
LABEL_192:
  if (*(_DWORD *)a1 == 1885629793 && *(_WORD *)(a1 + 4) == 27745)
    return 36;
  if (*(_DWORD *)a1 == 1836213608 && *(_WORD *)(a1 + 4) == 29801)
    return 37;
LABEL_200:
  if (*(_DWORD *)a1 == 1685222760)
    return 38;
  if (*(_DWORD *)a1 == 1769169271)
    return 39;
  if (a2 >= 0xA)
  {
    if (*(_QWORD *)a1 == 0x7470697263736D65 && *(_WORD *)(a1 + 8) == 28261)
      return 40;
    if (a2 >= 0xB && *(_QWORD *)a1 == 0x6F6D726564616873 && *(_QWORD *)(a1 + 3) == 0x6C65646F6D726564)
      return 41;
  }
  else if (a2 < 6)
  {
    return 0;
  }
  if (*(_DWORD *)a1 ^ 0x6574696C | *(unsigned __int16 *)(a1 + 4) ^ 0x736F)
    return 0;
  else
    return 42;
}

uint64_t parseEnvironment(uint64_t a1, unint64_t a2)
{
  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 == 1768055141 && *(_WORD *)(a1 + 4) == 26216)
      return 13;
  }
  else if (a2 < 4)
  {
    if (a2 != 3)
      return 0;
    goto LABEL_4;
  }
  if (*(_DWORD *)a1 == 1768055141)
    return 12;
  if (a2 >= 9)
  {
    if (*(_QWORD *)a1 == 0x336E696261756E67 && *(_BYTE *)(a1 + 8) == 50)
      return 2;
    if (*(_QWORD *)a1 == 0x3436696261756E67)
      return 3;
    if (*(_QWORD *)a1 == 0x6869626165756E67 && *(_BYTE *)(a1 + 8) == 102)
      return 5;
    goto LABEL_42;
  }
  if (a2 == 8)
  {
    if (*(_QWORD *)a1 == 0x3436696261756E67)
      return 3;
    goto LABEL_42;
  }
  if (a2 >= 7)
  {
LABEL_42:
    if (*(_DWORD *)a1 == 1702194791 && *(_DWORD *)(a1 + 3) == 1768055141)
      return 4;
    goto LABEL_46;
  }
  if (a2 != 6)
  {
    if (a2 < 5)
      goto LABEL_4;
    if (*(_DWORD *)a1 != 1937075815 || *(_BYTE *)(a1 + 4) != 102)
      goto LABEL_4;
    return 8;
  }
LABEL_46:
  if (*(_DWORD *)a1 == 1718972007 && *(_WORD *)(a1 + 4) == 12851)
    return 6;
  if (*(_DWORD *)a1 == 1718972007 && *(_WORD *)(a1 + 4) == 13366)
    return 7;
  if (*(_DWORD *)a1 == 1937075815 && *(_BYTE *)(a1 + 4) == 102)
    return 8;
  if (*(_DWORD *)a1 == 2020961895 && *(_WORD *)(a1 + 4) == 12851)
    return 9;
  if (a2 >= 9 && *(_QWORD *)a1 == 0x33706C695F756E67 && *(_BYTE *)(a1 + 8) == 50)
    return 10;
  if (*(_DWORD *)a1 == 1701080931 && *(_WORD *)(a1 + 4) == 13873)
    return 11;
LABEL_4:
  if (*(_WORD *)a1 == 28263 && *(_BYTE *)(a1 + 2) == 117)
    return 1;
  if (a2 < 7)
  {
    if (a2 < 4)
      return 0;
    goto LABEL_97;
  }
  if (*(_DWORD *)a1 == 1919184481 && *(_DWORD *)(a1 + 3) == 1684631410)
    return 14;
  if (a2 >= 0xA)
  {
    if (*(_QWORD *)a1 == 0x696261656C73756DLL && *(_WORD *)(a1 + 8) == 26216)
      return 17;
    goto LABEL_92;
  }
  if (a2 >= 8)
  {
LABEL_92:
    if (*(_QWORD *)a1 == 0x696261656C73756DLL)
      return 16;
  }
  if (*(_DWORD *)a1 == 1819506029 && *(_DWORD *)(a1 + 3) == 842233964)
    return 18;
LABEL_97:
  if (*(_DWORD *)a1 == 1819506029)
    return 15;
  if (*(_DWORD *)a1 == 1668707181)
    return 19;
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1851880553 && *(_DWORD *)(a1 + 3) == 1836411246)
      return 20;
    if (*(_DWORD *)a1 != 1852275043 || *(_WORD *)(a1 + 4) != 29557)
    {
      if (*(_DWORD *)a1 == 1701998435 && *(_DWORD *)(a1 + 3) == 1919705957)
        return 22;
      if (a2 >= 9 && *(_QWORD *)a1 == 0x6F74616C756D6973 && *(_BYTE *)(a1 + 8) == 114)
        return 23;
      goto LABEL_127;
    }
    return 21;
  }
  if (a2 != 6)
  {
    if (a2 < 5)
      goto LABEL_150;
    if (*(_DWORD *)a1 != 1702390128 || *(_BYTE *)(a1 + 4) != 108)
      goto LABEL_150;
    return 25;
  }
  if (*(_DWORD *)a1 == 1852275043 && *(_WORD *)(a1 + 4) == 29557)
    return 21;
LABEL_127:
  if (*(_DWORD *)a1 == 1633902957 && *(_WORD *)(a1 + 4) == 26978)
    return 24;
  if (*(_DWORD *)a1 == 1702390128 && *(_BYTE *)(a1 + 4) == 108)
    return 25;
  if (*(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821)
    return 26;
  if (a2 >= 8 && *(_QWORD *)a1 == 0x797274656D6F6567)
    return 27;
LABEL_150:
  if (*(_DWORD *)a1 == 1819047272)
    return 28;
  if (a2 < 6)
    goto LABEL_152;
  if (*(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265)
    return 29;
  if (a2 >= 7)
  {
    if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1702131056)
      return 30;
    if (*(_DWORD *)a1 == 1919052140 && *(_DWORD *)(a1 + 3) == 2037539186)
      return 31;
    if (a2 >= 0xD)
    {
      if (*(_QWORD *)a1 == 0x72656E6567796172 && *(_QWORD *)(a1 + 5) == 0x6E6F69746172656ELL)
        return 32;
    }
    else if (a2 != 12)
    {
      goto LABEL_210;
    }
    if (*(_QWORD *)a1 == 0x6365737265746E69 && *(_DWORD *)(a1 + 8) == 1852795252)
      return 33;
LABEL_210:
    if (*(_DWORD *)a1 != 1752788577 || *(_WORD *)(a1 + 4) != 29801)
    {
      if (a2 >= 0xA && *(_QWORD *)a1 == 0x68747365736F6C63 && *(_WORD *)(a1 + 8) == 29801)
        return 35;
LABEL_152:
      if (*(_DWORD *)a1 != 1936943469)
      {
        if (a2 >= 8 && *(_QWORD *)a1 == 0x656C62616C6C6163)
          return 37;
        if (*(_DWORD *)a1 != 1752393069)
        {
          if (a2 >= 0xD && *(_QWORD *)a1 == 0x636966696C706D61 && *(_QWORD *)(a1 + 5) == 0x6E6F697461636966)
            return 39;
          goto LABEL_180;
        }
        return 38;
      }
      return 36;
    }
    return 34;
  }
  if (*(_DWORD *)a1 == 1752788577 && *(_WORD *)(a1 + 4) == 29801)
    return 34;
  if (*(_DWORD *)a1 == 1936943469)
    return 36;
  if (*(_DWORD *)a1 == 1752393069)
    return 38;
LABEL_180:
  if (*(_DWORD *)a1 != 1936681071)
    return 0;
  return 40;
}

uint64_t parseFormat(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  if (a2 >= 5)
  {
    if (*(_DWORD *)(a1 + a2 - 5) == 1718575992 && *(_BYTE *)(a1 + a2 - 1) == 102)
      return 8;
  }
  else if (a2 != 4)
  {
    if (a2 < 3)
      return 0;
    if (*(_WORD *)a1 != 27749 || *(_BYTE *)(a1 + 2) != 102)
      return 0;
    return 3;
  }
  v4 = a1 + a2;
  if (*(_DWORD *)(a1 + a2 - 4) == 1717989219)
    return 1;
  if (*(_WORD *)(v4 - 3) == 27749 && *(_BYTE *)(v4 - 1) == 102)
    return 3;
  if (*(_DWORD *)(v4 - 4) == 1717989223)
    return 4;
  if (a2 < 5)
  {
    if (*(_DWORD *)(v4 - 4) != 1836278135)
      return 0;
    return 7;
  }
  if (*(_DWORD *)(v4 - 5) == 1751343469 && *(_BYTE *)(v4 - 1) == 111)
    return 5;
  if (*(_DWORD *)(v4 - 4) == 1836278135)
    return 7;
  if (*(_DWORD *)(v4 - 5) ^ 0x72697073 | *(unsigned __int8 *)(v4 - 1) ^ 0x76)
    return 0;
  else
    return 6;
}

void llvm::Triple::normalize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  std::string *v18;
  _QWORD *v19;
  BOOL v21;
  llvm::formatv_object_base *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  char *v39;
  char *v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  _BOOL4 v45;
  std::string::size_type size;
  std::string *p_p;
  _QWORD *v48;
  std::string *v49;
  unsigned int v50;
  unint64_t v51;
  llvm::formatv_object_base *v52[4];
  __int16 v53;
  std::string v54;
  std::string __p;
  _BYTE v56[4];
  _QWORD v57[2];
  void *v58;
  uint64_t v59;
  _QWORD v60[10];

  v60[8] = *MEMORY[0x24BDAC8D0];
  v57[0] = a1;
  v57[1] = a2;
  v58 = v60;
  v59 = 0x400000000;
  llvm::StringRef::split((unsigned int *)v57, (unsigned int *)&v58, 45, -1, 1);
  v49 = a3;
  if (!(_DWORD)v59)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v4 = parseArch(*(_QWORD *)v58, *((_QWORD *)v58 + 1));
  v5 = v59;
  if (v59 < 2)
  {
LABEL_6:
    v8 = 0;
    v7 = 0;
    goto LABEL_7;
  }
  v6 = v58;
  v7 = parseVendor(*((_QWORD *)v58 + 2), *((_QWORD *)v58 + 3));
  if (v5 == 2)
  {
    v8 = 0;
LABEL_7:
    v9 = 0;
    v51 = 0;
    goto LABEL_8;
  }
  v28 = v6[4];
  v29 = v6[5];
  v9 = parseOS(v28, v29);
  if (v29 >= 6)
  {
    v30 = *(_DWORD *)v28 == 2003269987 && *(_WORD *)(v28 + 4) == 28265;
  }
  else
  {
    v30 = 0;
    v51 = 0;
    if (v29 != 5)
      goto LABEL_85;
  }
  v45 = *(_DWORD *)v28 == 1735289197 && *(_BYTE *)(v28 + 4) == 119;
  v51 = __PAIR64__(v30, v45);
LABEL_85:
  if (v5 < 4)
  {
    v8 = 0;
  }
  else
  {
    v8 = parseEnvironment(v6[6], v6[7]);
    if (v5 != 4)
    {
      v50 = parseFormat(v6[8], v6[9]);
      goto LABEL_9;
    }
  }
LABEL_8:
  v50 = 0;
LABEL_9:
  v10 = 0;
  v56[0] = v4 != 0;
  v56[1] = v7 != 0;
  v56[2] = v9 != 0;
  v56[3] = v8 != 0;
  do
  {
    if (v56[v10])
      v11 = 1;
    else
      v11 = (_DWORD)v59 == 0;
    if (!v11)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (v13 > 3 || !v56[v12])
          __asm { BR              X9 }
        v12 = v13 + 1;
        v13 = v12;
      }
      while ((_DWORD)v12 != (_DWORD)v59);
    }
    ++v10;
  }
  while (v10 != 4);
  if ((_DWORD)v59)
  {
    v14 = 16 * v59;
    v15 = (char *)v58 + 8;
    do
    {
      if (!*v15)
      {
        *(v15 - 1) = "unknown";
        *v15 = 7;
      }
      v15 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  memset(&__p, 0, sizeof(__p));
  if (v8 != 14)
  {
    v18 = v49;
    if (v7 != 13 || v8 != 4)
      goto LABEL_38;
    v16 = v58;
    v23 = "gnueabihf";
    v24 = 9;
LABEL_37:
    v16[6] = v23;
    v16[7] = v24;
    goto LABEL_38;
  }
  v16 = v58;
  v17 = *((_QWORD *)v58 + 7);
  v18 = v49;
  if (v17 < 0xB)
    goto LABEL_38;
  v19 = (_QWORD *)*((_QWORD *)v58 + 6);
  if (*v19 != 0x6564696F72646E61 || *(_QWORD *)((char *)v19 + 3) != 0x6962616564696F72)
    goto LABEL_38;
  v21 = v17 > 0xB;
  v22 = (llvm::formatv_object_base *)(v17 - 11);
  if (!v21)
  {
    v23 = "android";
    v24 = 7;
    goto LABEL_37;
  }
  v53 = 1283;
  v52[0] = (llvm::formatv_object_base *)"android";
  v52[2] = (llvm::formatv_object_base *)((char *)v19 + 11);
  v52[3] = v22;
  llvm::Twine::str(v52, &v54);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v54;
  size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  p_p = &__p;
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v54.__r_.__value_.__l.__size_;
    p_p = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  v48 = v58;
  *((_QWORD *)v58 + 6) = p_p;
  v48[7] = size;
LABEL_38:
  v25 = v9;
  if (v9 != 15)
  {
    if ((v51 & 1) != 0)
    {
      llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v58, 4uLL);
      v26 = v58;
      *((_QWORD *)v58 + 4) = "windows";
      v26[5] = 7;
      v26[6] = "gnu";
      v27 = 3;
    }
    else
    {
      if ((v51 & 0x100000000) == 0)
        goto LABEL_51;
      llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v58, 4uLL);
      v26 = v58;
      *((_QWORD *)v58 + 4) = "windows";
      v26[5] = 7;
      v26[6] = "cygnus";
      v27 = 6;
    }
LABEL_50:
    v26[7] = v27;
    v25 = v9;
    goto LABEL_51;
  }
  llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v58, 4uLL);
  v26 = v58;
  *((_QWORD *)v58 + 4) = "windows";
  v26[5] = 7;
  v25 = 15;
  if (!v8)
  {
    if (v50 <= 1)
    {
      v26[6] = "msvc";
      v26[7] = 4;
      goto LABEL_61;
    }
    v31 = (int)v50 - 2;
    v27 = qword_24AA4A9F8[v31];
    v26[6] = off_251C37610[(int)v31];
    goto LABEL_50;
  }
LABEL_51:
  v33 = v25 == 15 && v8 != 0;
  if (((v51 | HIDWORD(v51) | v33) & 1) != 0 && v50 > 1)
  {
    llvm::SmallVectorImpl<llvm::StringRef>::resizeImpl<false>((uint64_t)&v58, 5uLL);
    v34 = (int)v50 - 2;
    v35 = qword_24AA4A9F8[v34];
    v26 = v58;
    *((_QWORD *)v58 + 8) = off_251C37610[(int)v34];
    v26[9] = v35;
  }
  else
  {
    v26 = v58;
  }
LABEL_61:
  v36 = v59;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((_DWORD)v36)
  {
    v37 = 0;
    v38 = v36 - 1;
    v39 = (char *)&v26[2 * v36];
    do
    {
      v38 += v26[v37 + 1];
      v37 += 2;
    }
    while (2 * v36 != v37);
    std::string::reserve(v18, v38);
    std::string::append(v18, (const std::string::value_type *)*v26, v26[1]);
    if ((_DWORD)v36 != 1)
    {
      v40 = (char *)(v26 + 2);
      do
      {
        std::string::append(v18, "-", 1uLL);
        v41 = *(const std::string::value_type **)v40;
        v42 = *((_QWORD *)v40 + 1);
        v40 += 16;
        std::string::append(v18, v41, v42);
      }
      while (v40 != v39);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v58 != v60)
    free(v58);
}

uint64_t llvm::Triple::getArchName(llvm::Triple *this)
{
  int v1;
  BOOL v2;
  llvm::Triple *v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t v7;
  char v8;

  v1 = *((char *)this + 23);
  v2 = v1 < 0;
  v3 = *(llvm::Triple **)this;
  if (v1 >= 0)
    v3 = this;
  v4 = *((unsigned __int8 *)this + 23);
  if (v2)
    v4 = *((_QWORD *)this + 1);
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  v8 = 45;
  llvm::StringRef::split(v6, &v8, 1uLL, (uint64_t)&v7);
  return v7;
}

char *llvm::Triple::getArchName(uint64_t a1, int a2, int a3)
{
  char *result;

  switch(a2)
  {
    case 16:
      if (a3 != 38)
        goto LABEL_15;
      result = "mipsisa32r6";
      break;
    case 17:
      if (a3 != 38)
        goto LABEL_15;
      result = "mipsisa32r6el";
      break;
    case 18:
      if (a3 != 38)
        goto LABEL_15;
      result = "mipsisa64r6";
      break;
    case 19:
      if (a3 != 38)
        goto LABEL_15;
      result = "mipsisa64r6el";
      break;
    default:
      if (a2 == 3 && a3 == 34)
        result = "arm64ec";
      else
LABEL_15:
        result = llvm::Triple::getArchTypeName(a2);
      break;
  }
  return result;
}

uint64_t llvm::Triple::getVendorName(llvm::Triple *this)
{
  int v1;
  BOOL v2;
  llvm::Triple *v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *((char *)this + 23);
  v2 = v1 < 0;
  v3 = *(llvm::Triple **)this;
  if (v1 >= 0)
    v3 = this;
  v4 = *((unsigned __int8 *)this + 23);
  if (v2)
    v4 = *((_QWORD *)this + 1);
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)&v7);
  v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)&v7);
  return v7;
}

uint64_t llvm::Triple::getOSName(llvm::Triple *this)
{
  int v1;
  BOOL v2;
  llvm::Triple *v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *((char *)this + 23);
  v2 = v1 < 0;
  v3 = *(llvm::Triple **)this;
  if (v1 >= 0)
    v3 = this;
  v4 = *((unsigned __int8 *)this + 23);
  if (v2)
    v4 = *((_QWORD *)this + 1);
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)&v7);
  v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)&v7);
  v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)&v7);
  return v7;
}

uint64_t llvm::Triple::getEnvironmentName(llvm::Triple *this)
{
  int v1;
  BOOL v2;
  llvm::Triple *v3;
  uint64_t v4;
  uint64_t v6[2];
  _BYTE v7[16];
  __int128 v8;
  __int128 v9;

  v1 = *((char *)this + 23);
  v2 = v1 < 0;
  v3 = *(llvm::Triple **)this;
  if (v1 >= 0)
    v3 = this;
  v4 = *((unsigned __int8 *)this + 23);
  if (v2)
    v4 = *((_QWORD *)this + 1);
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)v7);
  v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)v7);
  v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)v7);
  return v8;
}

uint64_t llvm::Triple::getOSAndEnvironmentName(llvm::Triple *this)
{
  int v1;
  BOOL v2;
  llvm::Triple *v3;
  uint64_t v4;
  uint64_t v6[2];
  _BYTE v7[16];
  __int128 v8;
  __int128 v9;

  v1 = *((char *)this + 23);
  v2 = v1 < 0;
  v3 = *(llvm::Triple **)this;
  if (v1 >= 0)
    v3 = this;
  v4 = *((unsigned __int8 *)this + 23);
  if (v2)
    v4 = *((_QWORD *)this + 1);
  v6[0] = (uint64_t)v3;
  v6[1] = v4;
  LOBYTE(v9) = 45;
  llvm::StringRef::split(v6, (char *)&v9, 1uLL, (uint64_t)v7);
  v9 = v8;
  LOBYTE(v6[0]) = 45;
  llvm::StringRef::split((uint64_t *)&v9, (char *)v6, 1uLL, (uint64_t)v7);
  return v8;
}

unint64_t llvm::Triple::getOSVersion(llvm::Triple *this)
{
  char *OSName;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  char *OSTypeName;
  size_t v7;
  size_t v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;

  OSName = (char *)llvm::Triple::getOSName(this);
  v4 = v3;
  v5 = *((_DWORD *)this + 9);
  OSTypeName = llvm::Triple::getOSTypeName((llvm::Triple *)v5);
  if (v4 >= v7 && ((v8 = v7) == 0 || !memcmp(OSName, OSTypeName, v7)))
  {
    if (v4 >= v8)
      v12 = v8;
    else
      v12 = v4;
    OSName += v12;
    v4 -= v12;
  }
  else if (v5 == 11 && v4 >= 5 && *(_DWORD *)OSName == 1868783981 && OSName[4] == 115)
  {
    OSName += 5;
    v4 -= 5;
  }
  v15 = 0;
  v16 = 0;
  llvm::VersionTuple::tryParse(&v15, (unsigned __int8 *)OSName, v4);
  v13 = v15;
  if (v16 < 0)
    v13 = v15 | 0x8000000000000000;
  if (*((_DWORD *)this + 9) == 33 && (_DWORD)v13 == 0)
    return v13 & 0x7FFFFFFF00000000 | 0x8000000000000001;
  else
    return v13;
}

double llvm::Triple::setTriple(llvm::Triple *this, llvm::formatv_object_base **a2)
{
  double result;
  std::string v4;
  __int128 v5;
  uint64_t v6;

  llvm::Triple::Triple(&v4, a2);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(std::string *)this = v4;
  result = *(double *)&v5;
  *(_OWORD *)((char *)this + 24) = v5;
  *((_QWORD *)this + 5) = v6;
  return result;
}

void llvm::Triple::setArchName(llvm::Triple *a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *VendorName;
  uint64_t v5;
  _BYTE *OSAndEnvironmentName;
  uint64_t v7;
  llvm::formatv_object_base *v8[4];
  __int16 v9;
  void *v10;
  __int128 v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = xmmword_24AA2B2D0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, a2, &a2[a3]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, "-", "");
  VendorName = (_BYTE *)llvm::Triple::getVendorName(a1);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, VendorName, &VendorName[v5]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, "-", "");
  OSAndEnvironmentName = (_BYTE *)llvm::Triple::getOSAndEnvironmentName(a1);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, OSAndEnvironmentName, &OSAndEnvironmentName[v7]);
  v9 = 261;
  v8[0] = (llvm::formatv_object_base *)v10;
  v8[1] = (llvm::formatv_object_base *)v11;
  llvm::Triple::setTriple(a1, v8);
  if (v10 != v12)
    free(v10);
}

double llvm::Triple::setOSName(llvm::Triple *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t EnvironmentName;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[2];
  const char *v19;
  __int16 v20;
  _QWORD v21[2];
  uint64_t VendorName;
  uint64_t v23;
  __int16 v24;
  _QWORD v25[2];
  const char *v26;
  __int16 v27;
  llvm::formatv_object_base *v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;

  llvm::Triple::getEnvironmentName(a1);
  if (v6)
  {
    v15 = 773;
    v14[0] = llvm::Triple::getArchName(a1);
    v14[1] = v7;
    v14[2] = "-";
    v16[0] = v14;
    v16[2] = llvm::Triple::getVendorName(a1);
    v16[3] = v8;
    v17 = 1282;
    v18[0] = v16;
    v19 = "-";
    v20 = 770;
    v21[0] = v18;
    VendorName = a2;
    v23 = a3;
    v24 = 1282;
    v25[0] = v21;
    v26 = "-";
    v27 = 770;
    EnvironmentName = llvm::Triple::getEnvironmentName(a1);
    v28 = (llvm::formatv_object_base *)v25;
    v29 = EnvironmentName;
    v30 = v10;
  }
  else
  {
    v20 = 773;
    v18[0] = llvm::Triple::getArchName(a1);
    v18[1] = v11;
    v19 = "-";
    v21[0] = v18;
    VendorName = llvm::Triple::getVendorName(a1);
    v23 = v12;
    v24 = 1282;
    v25[0] = v21;
    v26 = "-";
    v27 = 770;
    v28 = (llvm::formatv_object_base *)v25;
    v29 = a2;
    v30 = a3;
  }
  v31 = 1282;
  return llvm::Triple::setTriple(a1, &v28);
}

double llvm::Triple::setEnvironmentName(llvm::Triple *a1, llvm::formatv_object_base *a2, llvm::formatv_object_base *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t OSName;
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  llvm::formatv_object_base *v21[4];
  __int16 v22;

  v12 = 773;
  v11[0] = llvm::Triple::getArchName(a1);
  v11[1] = v6;
  v11[2] = "-";
  v13[0] = v11;
  v13[2] = llvm::Triple::getVendorName(a1);
  v13[3] = v7;
  v14 = 1282;
  v15[0] = v13;
  v15[2] = "-";
  v16 = 770;
  OSName = llvm::Triple::getOSName(a1);
  v17[0] = v15;
  v17[2] = OSName;
  v17[3] = v9;
  v18 = 1282;
  v19[0] = v17;
  v19[2] = "-";
  v20 = 770;
  v21[0] = (llvm::formatv_object_base *)v19;
  v21[2] = a2;
  v21[3] = a3;
  v22 = 1282;
  return llvm::Triple::setTriple(a1, v21);
}

double llvm::Triple::setObjectFormat(llvm::Triple *a1, int a2)
{
  int v4;
  uint64_t v5;
  llvm::formatv_object_base *v6;
  llvm::formatv_object_base *v7;
  llvm::formatv_object_base *v8;
  std::string::size_type size;
  double result;
  _QWORD v11[4];
  __int16 v12;
  llvm::formatv_object_base *v13[4];
  __int16 v14;
  std::string v15;

  v4 = *((_DWORD *)a1 + 10);
  if (!v4)
    return llvm::Triple::setEnvironmentName(a1, (llvm::formatv_object_base *)*(&off_251C37648 + a2), *((llvm::formatv_object_base **)&unk_24AA4AA30 + a2));
  v11[0] = llvm::Triple::getEnvironmentTypeName(v4);
  v11[1] = v5;
  v11[2] = "-";
  v12 = 773;
  v6 = (llvm::formatv_object_base *)*((_QWORD *)&unk_24AA4AA30 + a2);
  v7 = (llvm::formatv_object_base *)*(&off_251C37648 + a2);
  v13[0] = (llvm::formatv_object_base *)v11;
  v13[2] = v7;
  v13[3] = v6;
  v14 = 1282;
  llvm::Twine::str(v13, &v15);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (llvm::formatv_object_base *)&v15;
  else
    v8 = (llvm::formatv_object_base *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  result = llvm::Triple::setEnvironmentName(a1, v8, (llvm::formatv_object_base *)size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return result;
}

uint64_t getArchPointerBitWidth(int a1)
{
  return dword_24AA4AA78[a1];
}

void llvm::Triple::get64BitArchVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  const char *v8;

  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  v4 = "unknown";
  v5 = 7;
  switch(*((_DWORD *)this + 6))
  {
    case 0:
    case 6:
    case 7:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xF:
    case 0x14:
    case 0x19:
    case 0x1F:
    case 0x21:
    case 0x22:
    case 0x27:
    case 0x28:
    case 0x35:
    case 0x36:
    case 0x37:
      goto LABEL_35;
    case 1:
    case 5:
    case 0x23:
      v4 = "aarch64";
      goto LABEL_31;
    case 2:
    case 0x24:
      v4 = "aarch64_be";
      v5 = 10;
      goto LABEL_35;
    case 0xD:
      v4 = "loongarch64";
      goto LABEL_21;
    case 0x10:
      v6 = *((_DWORD *)this + 7) == 38;
      if (*((_DWORD *)this + 7) == 38)
        v5 = 11;
      else
        v5 = 6;
      v7 = "mips64";
      v8 = "mipsisa64r6";
      goto LABEL_16;
    case 0x11:
      v6 = *((_DWORD *)this + 7) == 38;
      if (*((_DWORD *)this + 7) == 38)
        v5 = 13;
      else
        v5 = 8;
      v7 = "mips64el";
      v8 = "mipsisa64r6el";
LABEL_16:
      if (v6)
        v4 = (char *)v8;
      else
        v4 = (char *)v7;
      goto LABEL_35;
    case 0x15:
      v4 = "powerpc64";
      v5 = 9;
      goto LABEL_35;
    case 0x16:
      v4 = "powerpc64le";
LABEL_21:
      v5 = 11;
      goto LABEL_35;
    case 0x1B:
      v4 = "riscv64";
      goto LABEL_31;
    case 0x1D:
      v4 = "sparcv9";
      goto LABEL_31;
    case 0x25:
      v4 = "x86_64";
      goto LABEL_33;
    case 0x29:
      v4 = "nvptx64";
      goto LABEL_31;
    case 0x2B:
      v4 = "le64";
      v5 = 4;
      goto LABEL_35;
    case 0x2D:
      v4 = "amdil64";
      goto LABEL_31;
    case 0x2F:
      v4 = "hsail64";
      goto LABEL_31;
    case 0x31:
      v4 = "spir64";
      goto LABEL_33;
    case 0x33:
      v4 = "spirv64";
LABEL_31:
      v5 = 7;
      goto LABEL_35;
    case 0x38:
      v4 = "wasm64";
LABEL_33:
      v5 = 6;
      goto LABEL_35;
    case 0x3A:
      v4 = "renderscript64";
      v5 = 14;
LABEL_35:
      llvm::Triple::setArchName((llvm::Triple *)a2, v4, v5);
      break;
    default:
      return;
  }
}

uint64_t llvm::Triple::isMacOSXVersionLT(llvm::Triple *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*((_DWORD *)this + 9) != 11)
  {
    if (a2 == 10)
    {
      a2 = a3 + 4;
      a3 = a4;
      LODWORD(a4) = 0;
    }
    else
    {
      a2 += 9;
    }
  }
  return llvm::Triple::isOSVersionLT(this, a2, a3, a4);
}

uint64_t llvm::Triple::isOSVersionLT(llvm::Triple *this, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t OSVersion;
  uint64_t v15;

  if (!(_DWORD)a3)
  {
    OSVersion = llvm::Triple::getOSVersion(this);
    v15 = v8;
    v9 = a2;
LABEL_6:
    v12 = v9;
    v13 = 0;
    return llvm::operator<(&OSVersion, &v12);
  }
  v6 = a2 | (unint64_t)(a3 << 32);
  if (!a4)
  {
    OSVersion = llvm::Triple::getOSVersion(this);
    v15 = v10;
    v9 = v6 | 0x8000000000000000;
    goto LABEL_6;
  }
  OSVersion = llvm::Triple::getOSVersion(this);
  v15 = v7;
  v12 = v6 | 0x8000000000000000;
  v13 = a4 | 0x80000000;
  return llvm::operator<(&OSVersion, &v12);
}

unint64_t llvm::Triple::getMinimumSupportedOSVersion(llvm::Triple *this)
{
  unint64_t v1;
  int v2;
  uint64_t ArchName;
  uint64_t v4;

  if (*((_DWORD *)this + 8) != 1 || *((_DWORD *)this + 6) != 3)
    return 0;
  v1 = 0x800000000000000ELL;
  v2 = *((_DWORD *)this + 9);
  if (v2 <= 27)
  {
    if (v2 != 7)
    {
      if (v2 == 11)
        return 0x800000000000000BLL;
      return 0;
    }
    if ((*((_DWORD *)this + 10) - 23) >= 2 && *((_DWORD *)this + 7) != 33)
      return 0;
  }
  else
  {
    switch(v2)
    {
      case 28:
        if (*((_DWORD *)this + 10) != 23)
        {
          ArchName = llvm::Triple::getArchName(this);
          if (v4 != 6)
            return 0;
          if (*(_DWORD *)ArchName != 913142369 || *(_WORD *)(ArchName + 4) != 25908)
            return 0;
        }
        break;
      case 29:
        if (*((_DWORD *)this + 10) == 23)
          return 0x8000000000000007;
        else
          return 0x8000000000000009;
      case 31:
        return 0x8000000000000014;
      default:
        return 0;
    }
  }
  return v1;
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, int a8)
{
  uint64_t v13;
  uint64_t v14;

  v13 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(a1, a2, a3, a8);
  v14 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v13, a4, a5, a8);
  return llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v14, a6, a7, a8);
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, int a13)
{
  uint64_t v17;
  uint64_t v18;

  v17 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(a1, a2, a3, a13);
  v18 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v17, a4, a5, a13);
  return llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(v18, a6, a7, a9, a10, a11, a12, a13);
}

uint64_t llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, const void *a13, uint64_t a14, const void *a15, uint64_t a16, int a17)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(a1, a2, a3, a17);
  v20 = llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Case(v19, a4, a5, a17);
  return llvm::StringSwitch<llvm::Triple::ArchType,llvm::Triple::ArchType>::Cases(v20, a6, a7, a9, a10, a11, a12, v21, a13, a14, a15, a16, a17);
}

uint64_t sub_24AA29408()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_24AA29414()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_24AA29420()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_24AA2942C()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_24AA29438()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_24AA29444()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_24AA29450()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_24AA2945C()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_24AA29468()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_24AA29474()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_24AA29480()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_24AA2948C()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_24AA29498()
{
  return MEMORY[0x24BDCFA50]();
}

uint64_t sub_24AA294A4()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_24AA294B0()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_24AA294BC()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_24AA294C8()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_24AA294D4()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_24AA294E0()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_24AA294EC()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_24AA294F8()
{
  return MEMORY[0x24BEE69A8]();
}

uint64_t sub_24AA29504()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_24AA29510()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_24AA2951C()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_24AA29528()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_24AA29534()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_24AA29540()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_24AA2954C()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_24AA29558()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_24AA29564()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_24AA29570()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_24AA2957C()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_24AA29588()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_24AA29594()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_24AA295A0()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_24AA295AC()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_24AA295B8()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_24AA295C4()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_24AA295D0()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_24AA295DC()
{
  return MEMORY[0x24BEE4328]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x24BDAC770](buf, bufsize);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x24BEDA988](retstr, this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x24BEDAB18](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
  MEMORY[0x24BEDAB20](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDACA0](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

void std::string::~string(std::string *this)
{
  MEMORY[0x24BEDACF0](this);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::future_error *__cdecl std::future_error::future_error(std::future_error *this, std::error_code __ec)
{
  return (std::future_error *)MEMORY[0x24BEDAD78](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF50]();
}

void std::__shared_count::~__shared_count(std::__shared_count *this)
{
  MEMORY[0x24BEDAFF8](this);
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

const std::error_category *std::future_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB080]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B8]();
}

void std::__assoc_sub_state::__sub_wait(std::__assoc_sub_state *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB0C0](this, __lk);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB110](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x24BEDB1B8](__format);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::thread::detach(std::thread *this)
{
  MEMORY[0x24BEDB470](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB618](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

{
  return (std::string *)MEMORY[0x24BEDB630](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
  MEMORY[0x24BEDB6A8](a1.__ptr_);
}

uint64_t operator delete[]()
{
  return off_251C0FC60();
}

void operator delete(void *__p)
{
  off_251C0FC68(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_251C0FC70(__p, a2);
}

uint64_t operator delete()
{
  return off_251C0FC78();
}

uint64_t operator new[]()
{
  return off_251C0FC80();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_251C0FC88(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_251C0FC90(__sz, a2);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_251C0FC98(__sz, a2);
}

uint64_t operator new()
{
  return off_251C0FCA0();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __deregister_frame(const void *fde)
{
  MEMORY[0x24BDAC7C0](fde);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

void __register_frame(const void *fde)
{
  MEMORY[0x24BDAC880](fde);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x24BDAD038](a1, *(_QWORD *)&a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t ccdigest_init()
{
  return MEMORY[0x24BDAD540]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x24BDAD548]();
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x24BDADA08](*(_QWORD *)&a1, a2, a3);
}

uint64_t csops_audittoken()
{
  return MEMORY[0x24BDADC08]();
}

int del_curterm(TERMINAL *a1)
{
  return MEMORY[0x24BEDCA90](a1);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDB8](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

int dlclose(void *__handle)
{
  return MEMORY[0x24BDAE060](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x24BDAE2E8](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x24BDAE6B8]();
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x24BDAE748](mhp, segname, sectname, size);
}

int isatty(int a1)
{
  return MEMORY[0x24BDAE8E0](*(_QWORD *)&a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x24BDAEB20](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAEB28](a1, a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x24BDAEB58](*(_QWORD *)&error_value);
}

kern_return_t mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry)
{
  return MEMORY[0x24BDAEB70](*(_QWORD *)&target_task, size, offset, *(_QWORD *)&permission, object_handle, *(_QWORD *)&parent_entry);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x24BDAEC70](*(_QWORD *)&target, address, size, *(_QWORD *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x24BDAEC78](*(_QWORD *)&target, address, size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAEF28](a1, a2);
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x24BDAEF38](a1);
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  return MEMORY[0x24BDAEF88](*(_QWORD *)&dfd, path, *(_QWORD *)&slen);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x24BDAEFB0](__y, __x);
  return result;
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAEFC8](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x24BDAF3F0](object);
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAF5E8](a1, a2, *(_QWORD *)&a3);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x24BDAF698](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

int pthread_sigmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return MEMORY[0x24BDAF9B8](*(_QWORD *)&a1, a2, a3);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x24BDAFA18](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x24BDAFA80](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x24BDAFAC0](a1, a2);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x24BDAFB38](__p, __ec);
}

uint64_t sandbox_extension_issue_file_to_process()
{
  return MEMORY[0x24BDAFC10]();
}

TERMINAL *__cdecl set_curterm(TERMINAL *a1)
{
  return (TERMINAL *)MEMORY[0x24BEDCAC0](a1);
}

int setupterm(char *a1, int a2, int *a3)
{
  return MEMORY[0x24BEDCAD0](a1, *(_QWORD *)&a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x24BDAFFD0](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0010](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0040](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

void sys_icache_invalidate(void *start, size_t len)
{
  MEMORY[0x24BDB00D0](start, len);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x24BDB00F0](*(_QWORD *)&a1);
}

int tigetnum(char *a1)
{
  return MEMORY[0x24BEDCB08](a1);
}

int uname(utsname *a1)
{
  return MEMORY[0x24BDB02A8](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x24BDB02B0](a1);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0358](a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x24BDB0558](*(_QWORD *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB0640](objects, count);
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
  MEMORY[0x24BDB06C8](xarray, index, value);
}

void xpc_array_set_value(xpc_object_t xarray, size_t index, xpc_object_t value)
{
  MEMORY[0x24BDB06D0](xarray, index, value);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x24BDB0718](connection);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x24BDB0758]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x24BDB0788](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x24BDB0798](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x24BDB07A8](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x24BDB07C8](connection, handler);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x24BDB0868](bytes, length);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x24BDB08D0]();
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x24BDB0918](xdict, key, length);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x24BDB0950](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB0958](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x24BDB0988](xdict, key, bytes, length);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x24BDB09D0](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x24BDB0A70](object);
}

uint64_t xpc_mach_send_create()
{
  return MEMORY[0x24BDB0A98]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x24BDB0AE0](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x24BDB0AE8](object);
}

